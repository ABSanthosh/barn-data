{
  "id": "760baa27-a801-4fbc-99f7-44e722cd2266",
  "title": "Why microservices might be finished as monoliths return with a vengeance",
  "link": "https://venturebeat.com/data-infrastructure/why-microservices-might-be-finished-as-monoliths-return-with-a-vengeance/",
  "description": "Microservices architecture may look appealing, but transitioning from a monolith is challenging and can increase system complexity.",
  "author": "Supriya Lal, Yelp",
  "published": "Sat, 30 Nov 2024 20:05:00 +0000",
  "source": "https://feeds.feedburner.com/venturebeat/SZYF",
  "categories": [
    "Data Infrastructure",
    "DataDecisionMakers",
    "Big Data and Analytics",
    "category-/Computers \u0026 Electronics/Programming",
    "category-/Science/Computer Science",
    "Data Management",
    "Data Networks",
    "Data Science",
    "Data Storage and Cloud"
  ],
  "byline": "Supriya Lal, Yelp",
  "length": 6486,
  "excerpt": "Microservices architecture may look appealing, but transitioning from a monolith is challenging and can increase system complexity.",
  "siteName": "VentureBeat",
  "favicon": "",
  "text": "November 30, 2024 12:05 PM VentureBeat/Ideogram Join our daily and weekly newsletters for the latest updates and exclusive content on industry-leading AI coverage. Learn More The shift towards microservices started gaining momentum in the early 2010s, as tech companies recognized the limitations of monolithic architectures. However, many companies such as Amazon (Prime Video), Invision, Istio and Segment are moving back to monolithic architectures. This article will explore why many organizations fail when transitioning to a microservices architecture. What is a monolith? A monolithic architecture is straightforward: The user requests data and all business logic and data reside within a single service. However, monolithic systems face challenges, such as limited scalability, difficulty with deploying updates and a vulnerability to single points of failure. Created on Canva by the author. To address this, many organizations have attempted to transition to a microservices-based architecture to leverage advantages such as abstraction and encapsulation, faster deployment, easier maintenance and closer alignment of each service with team ownership. Why microservices? In an ideal microservices architecture, each business domain operates as its own independent service with its own database. This setup offers benefits like better scalability, flexibility and resilience. Consider the diagram below. Created on Canva by the author. The reality However, recent trends show that many companies are moving away from this and sticking to a monolithic architecture. This is because it is difficult to achieve this level of harmony in the real world. The reality often looks like the diagram below. Created on Canva by the author. Migrating to a microservice architecture has been known to cause complex interactions between services, circular calls, data integrity issues and, to be honest, it is almost impossible to get rid of the monolith completely. Let’s discuss why some of these issues occur once migrated to the microservices architecture. Incorrect domain boundaries In an ideal scenario, a single service should encapsulate one or more complete business domains so that each domain is self-contained within a service. A domain should never be split across multiple services, as this can lead to interdependence between services. The following diagram shows how a single service can contain one or more entire domains to maintain clear boundaries. Created on Canva by the author. In complex real-world systems, defining domain boundaries can be challenging, especially when data has traditionally been conceptualized in a specific way. The following diagram shows how real-world systems often look in a microservice architecture when boundaries are not defined in advance or engineers add new services without considering domain boundaries. Created on Canva by the author. If domains are not well-defined, the dependency on other services increases, which leads to multiple issues: Circular dependencies or excessive calls: When services are interdependent, they require frequent data exchanges. Data integrity issues: A single domain split across services causes deeply coupled data to be split across multiple services.  Vague team ownership: Multiple teams may need to collaborate on overlapping domains, leading to inefficiencies and confusion. Deeply coupled data and functionality In a monolithic architecture, clients often skip designated interfaces and access the database directly because enforcing encapsulation is hard in a single codebase. This can lead developers to take shortcuts, especially if interfaces are unclear or seem complicated. Over time, this creates a web of clients tightly connected to specific database tables and business logic. When moving to a microservices architecture, each client needs to be updated to work with the new service APIs. However, because clients are so tied to the monolith’s business logic, this requires refactoring their logic during the migration. Untangling these dependencies without breaking existing functionality takes time. Some client updates are often delayed due to the work’s complexity, leaving some clients still using the monolith database after migration. To avoid this, engineers may create new data models in a new service but keep existing models in the monolith. When models are deeply linked, this leads to data and functions split between services, causing multiple inter-service calls and data integrity issues. Data migration Data migration is one of the most complex and risky elements of moving to microservices. It is essential to accurately and completely transfer all relevant data to the new microservices. Many migrations stop at this stage because of the complexity, but successful data migration is key to realizing the benefits of microservices. Common challenges include: Data integrity and consistency: Errors during migration can lead to data loss or inconsistencies. Data volume: Transferring large amounts of data can be resource-heavy and time-consuming. Downtime and business continuity: Data migration can require downtime, potentially disrupting business operations. A smooth transition with minimal user impact is crucial. Testing and validation: Rigorous testing is needed to ensure migrated data is accurate, complete, and performs well in the new service. Conclusion The microservices architecture may look appealing, but transitioning from a monolith is challenging. Many companies find themselves stuck in a midway state, which increases system complexity causing data integrity issues, circular dependencies and unclear team ownership. The inability to utilize the full benefits of microservices in the real world is why many companies are returning to a monolithic approach. Supriya Lal is the group tech lead for the commerce platform organization at Yelp. DataDecisionMakers Welcome to the VentureBeat community! DataDecisionMakers is where experts, including the technical people doing data work, can share data-related insights and innovation. If you want to read about cutting-edge ideas and up-to-date information, best practices, and the future of data and data tech, join us at DataDecisionMakers. You might even consider contributing an article of your own! Read More From DataDecisionMakers",
  "image": "https://venturebeat.com/wp-content/uploads/2024/11/a-crisp-image-of-a-shiny-rectangular-black-monolit-z5-lQG4JSGimVYyCGiAmCg-sgZ6R0TATrOcCtUPwpzqBQ-transformed.jpeg?w=1024?w=1200\u0026strip=all",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\n\t\t\u003csection\u003e\n\t\t\t\n\t\t\t\u003cp\u003e\u003ctime title=\"2024-11-30T20:05:00+00:00\" datetime=\"2024-11-30T20:05:00+00:00\"\u003eNovember 30, 2024 12:05 PM\u003c/time\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\n\t\t\u003c/section\u003e\n\t\t\u003cdiv\u003e\n\t\t\t\t\t\u003cp\u003e\u003cimg width=\"750\" height=\"421\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/a-crisp-image-of-a-shiny-rectangular-black-monolit-z5-lQG4JSGimVYyCGiAmCg-sgZ6R0TATrOcCtUPwpzqBQ-transformed.jpeg?w=750\" alt=\"VentureBeat/Ideogram\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eVentureBeat/Ideogram\u003c/span\u003e\u003c/p\u003e\t\t\u003c/div\u003e\n\t\u003c/div\u003e\u003cdiv id=\"primary\"\u003e\n\n\t\t\u003carticle id=\"content\"\u003e\n\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cdiv id=\"boilerplate_2682874\"\u003e\n\u003cp\u003e\u003cem\u003eJoin our daily and weekly newsletters for the latest updates and exclusive content on industry-leading AI coverage. \u003ca href=\"https://venturebeat.com/newsletters/?utm_source=VBsite\u0026amp;utm_medium=desktopNav\" data-type=\"link\" data-id=\"https://venturebeat.com/newsletters/?utm_source=VBsite\u0026amp;utm_medium=desktopNav\"\u003eLearn More\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\u003c/div\u003e\u003cp\u003eThe shift towards microservices started gaining momentum in the early 2010s, as tech companies recognized the limitations of monolithic architectures. However, many companies such as \u003ca href=\"https://www.researchgate.net/publication/373487889_Back_to_the_Future_From_Microservice_to_Monolith\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmazon (Prime Video), Invision, Istio and Segment\u003c/a\u003e are moving back to monolithic architectures. This article will explore why many organizations fail when transitioning to a microservices architecture.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-what-is-a-monolith\"\u003eWhat is a monolith?\u003c/h2\u003e\n\n\n\n\u003cp\u003eA monolithic architecture is straightforward: The user requests data and all business logic and data reside within a single service. However, monolithic systems face challenges, such as limited scalability, difficulty with deploying updates and a \u003ca href=\"https://venturebeat.com/security/3-leadership-lessons-we-can-learn-from-ethical-hackers/\"\u003evulnerability\u003c/a\u003e to single points of failure.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" width=\"902\" height=\"243\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?w=800\" alt=\"\" srcset=\"https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png 902w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=300,81 300w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=768,207 768w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=800,216 800w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=400,108 400w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=750,202 750w, https://venturebeat.com/wp-content/uploads/2024/11/image4_4caf93.png?resize=578,156 578w\" sizes=\"(max-width: 902px) 100vw, 902px\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreated on \u003ca href=\"https://www.canva.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCanva\u003c/a\u003e by the author\u003c/em\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo address this, many organizations have attempted to transition to a microservices-based architecture to leverage advantages such as abstraction and encapsulation, faster deployment, easier maintenance and closer alignment of each service with team ownership.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-why-microservices\"\u003eWhy microservices?\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn an ideal microservices \u003ca href=\"https://venturebeat.com/ai/getting-started-with-ai-agents-part-1-capturing-processes-roles-and-connections/\"\u003earchitecture\u003c/a\u003e, each business domain operates as its own independent service with its own database. This setup offers benefits like better scalability, flexibility and resilience. Consider the diagram below.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"722\" height=\"878\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png?w=493\" alt=\"\" srcset=\"https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png 722w, https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png?resize=300,365 300w, https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png?resize=493,600 493w, https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png?resize=400,486 400w, https://venturebeat.com/wp-content/uploads/2024/11/image3_2de1de.png?resize=578,703 578w\" sizes=\"(max-width: 722px) 100vw, 722px\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreated on Canva by the author. \u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-the-reality\"\u003eThe reality\u003c/h2\u003e\n\n\n\n\u003cp\u003eHowever, recent trends show that many companies are moving away from this and sticking to a monolithic \u003ca href=\"https://venturebeat.com/ai/getting-started-with-ai-agents-part-2-autonomy-safeguards-and-pitfalls/\"\u003earchitecture\u003c/a\u003e. This is because it is difficult to achieve this level of harmony in the real world. The reality often looks like the diagram below. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"998\" height=\"922\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/image5.png?w=649\" alt=\"\" srcset=\"https://venturebeat.com/wp-content/uploads/2024/11/image5.png 998w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=300,277 300w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=768,710 768w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=649,600 649w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=400,370 400w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=750,693 750w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=578,534 578w, https://venturebeat.com/wp-content/uploads/2024/11/image5.png?resize=930,859 930w\" sizes=\"(max-width: 998px) 100vw, 998px\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreated on Canva by the author.\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMigrating to a microservice architecture has been known to cause complex interactions between services, circular calls, data integrity issues and, to be honest, it is almost impossible to get rid of the monolith completely. Let’s discuss why some of these issues occur once migrated to the microservices architecture.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-incorrect-domain-boundaries\"\u003eIncorrect domain boundaries\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn an ideal scenario, a single service should encapsulate one or more complete business domains so that each domain is self-contained within a service. A domain should never be split across multiple services, as this can lead to interdependence between services. The following diagram shows how a single service can contain one or more entire domains to maintain clear boundaries.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?w=800\" alt=\"\" srcset=\"https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png 1920w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=300,169 300w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=768,432 768w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=800,450 800w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=1536,864 1536w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=400,225 400w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=750,422 750w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=578,325 578w, https://venturebeat.com/wp-content/uploads/2024/11/image1_13bd9c.png?resize=930,523 930w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreated on Canva by the author. \u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn complex real-world systems, defining domain boundaries can be challenging, especially when data has traditionally been conceptualized in a specific way. The following diagram shows how real-world systems often look in a microservice \u003ca href=\"https://venturebeat.com/ai/our-brains-are-vector-databases-heres-why-thats-helpful-when-using-ai/\"\u003earchitecture\u003c/a\u003e when boundaries are not defined in advance or engineers add new services without considering domain boundaries.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?w=800\" alt=\"\" srcset=\"https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png 1920w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=300,169 300w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=768,432 768w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=800,450 800w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=1536,864 1536w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=400,225 400w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=750,422 750w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=578,325 578w, https://venturebeat.com/wp-content/uploads/2024/11/image2_45e189.png?resize=930,523 930w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreated on Canva by the author. \u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf domains are not well-defined, the dependency on other services increases, which leads to multiple issues:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eCircular dependencies or excessive calls: When services are interdependent, they require frequent data exchanges.\u003c/li\u003e\n\n\n\n\u003cli\u003eData integrity issues: A single domain split across services causes deeply coupled data to be split across multiple services. \u003c/li\u003e\n\n\n\n\u003cli\u003eVague team ownership: Multiple teams may need to collaborate on overlapping domains, leading to inefficiencies and confusion.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-deeply-coupled-data-and-functionality\"\u003eDeeply coupled data and functionality\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn a monolithic architecture, clients often skip designated interfaces and access the database directly because enforcing encapsulation is hard in a single codebase. This can lead developers to take shortcuts, especially if interfaces are unclear or seem complicated. Over time, this creates a web of clients tightly connected to specific database tables and business logic.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen moving to a microservices \u003ca href=\"https://venturebeat.com/ai/here-are-3-critical-llm-compression-strategies-to-supercharge-ai-performance/\"\u003earchitecture\u003c/a\u003e, each client needs to be updated to work with the new service APIs. However, because clients are so tied to the monolith’s business logic, this requires refactoring their logic during the migration.\u003c/p\u003e\n\n\n\n\u003cp\u003eUntangling these dependencies without breaking existing functionality takes time. Some client updates are often delayed due to the work’s complexity, leaving some clients still using the monolith database after migration. To avoid this, engineers may create new data models in a new service but keep existing models in the monolith. When models are deeply linked, this leads to data and functions split between services, causing multiple inter-service calls and data integrity issues.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-data-migration\"\u003eData migration\u003c/h2\u003e\n\n\n\n\u003cp\u003eData migration is one of the most complex and risky elements of moving to microservices. It is essential to accurately and completely transfer all relevant data to the new microservices. Many migrations stop at this stage because of the complexity, but successful data migration is key to realizing the benefits of microservices. Common challenges include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eData integrity and consistency: Errors during migration can lead to data loss or inconsistencies.\u003c/li\u003e\n\n\n\n\u003cli\u003eData volume: Transferring large amounts of data can be resource-heavy and time-consuming.\u003c/li\u003e\n\n\n\n\u003cli\u003eDowntime and business continuity: Data migration can require downtime, potentially disrupting business operations. A smooth transition with minimal user impact is crucial.\u003c/li\u003e\n\n\n\n\u003cli\u003eTesting and validation: Rigorous testing is needed to ensure migrated data is accurate, complete, and performs well in the new service.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe microservices architecture may look appealing, but transitioning from a monolith is challenging. Many companies find themselves stuck in a midway state, which increases system complexity causing data integrity issues, circular dependencies and unclear team ownership. The inability to utilize the full benefits of microservices in the real world is why many companies are returning to a monolithic approach.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eSupriya Lal is the group tech lead for the commerce platform organization at \u003ca href=\"https://www.yelp.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eYelp\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv id=\"boilerplate_2736392\"\u003e\n\u003cp\u003e\u003cstrong\u003eDataDecisionMakers\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eWelcome to the VentureBeat community!\u003c/p\u003e\n\n\n\n\u003cp\u003eDataDecisionMakers is where experts, including the technical people doing data work, can share data-related insights and innovation.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to read about cutting-edge ideas and up-to-date information, best practices, and the future of data and data tech, join us at DataDecisionMakers.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou might even consider \u003ca rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://venturebeat.com/guest-posts/\"\u003econtributing an article\u003c/a\u003e of your own!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca rel=\"noreferrer noopener\" href=\"https://venturebeat.com/category/DataDecisionMakers/\" target=\"_blank\"\u003eRead More From DataDecisionMakers\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\t\t\t\u003c/div\u003e\n\n\t\t\t\t\t\t\t\n\t\t\t\n\t\t\u003c/article\u003e\n\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-11-30T20:05:00Z",
  "modifiedTime": "2024-11-30T19:57:22Z"
}
