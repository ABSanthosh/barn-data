{
  "id": "4c15b9f0-c37d-43b6-add3-fa609c307b11",
  "title": "Rewriting my blog in plain HTML",
  "link": "https://www.vijayp.dev/blog/rewrite-plain-html/",
  "description": "Article URL: https://www.vijayp.dev/blog/rewrite-plain-html/ Comments URL: https://news.ycombinator.com/item?id=42705077 Points: 40 # Comments: 36",
  "author": "arnath",
  "published": "Tue, 14 Jan 2025 22:57:19 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 4911,
  "excerpt": "",
  "siteName": "",
  "favicon": "",
  "text": "January 15, 2025 This week, I decided to rewrite my website using plain HTML and CSS. When I originally made it, I used SvelteKit for simplicity. It was a more interesting project than I was expecting when I started working so I wanted to share my thoughts on the experience. Why? There are a number of reasons I decided to do the rewrite. One is that I’m currently unemployed so I have a lot of free time for side projects. Another is that, as you can see, this website is pretty simple so I wasn’t gaining a lot from using SvelteKit. I also wanted to move the site over to Cloudflare Pages so this was an opportune time to make some changes. However, the primary reason I decided to make some changes is that I find the Javascript bundler and building ecosystem incredibly aggravating to use. For example, one of the things I set up my old website to do was build the blog section from the set of Markdown posts. I assumed this would be easy to do. SvelteKit and Vite allow you to prerender your website and I had a set of files at build time - I just needed to add some logic to transform them. Instead, it was infuriatingly difficult to figure out a way to just get a handle to a set of files in my tree at build time (let me caveat that I’m not a frontend dev and maybe I missed something obvious). It took me hours of Googling and trying out different options to come up with this awful piece of code that worked to load the contents of a file and give them to my page: import type { PageLoad } from \"./$types\"; export const load: PageLoad = async ({ params }) =\u003e { const file = await import( `../../../../lib/assets/posts/${params.slug}.md` ); return { content: file.default, ...file.metadata }; }; I was tired of dealing with things like this for the tiny amount I was gaining from using SvelteKit. And so, I finally decided it was time for a rewrite. How? I think spending too much time on Hacker News gave me the misconception that writing a website using plain HTML and CSS would be a relatively well-paved path in 2025. I spent some time looking around for guides or a “canonical” way of doing this and found that there isn’t really one. Because of that, I decided to just start from scratch with an empty directory and go from there. My website is small enough that I was able to remake a lot of the pages as static HTML. However, I prefer writing blog posts in Markdown. It’s easier to write than HTML, I can pull posts out of my existing Obsidian vault, and I just find it more convenient. Therefore, I needed some kind of script to turn my Markdown blog posts into HTML content. I investigated some options for this and found Pandoc. Pandoc is a universal document converter for converting markup formats. It provides a library and a CLI for converting documents from Markdown to HTML (along with many other formats). To write the script, I wanted something as lightweight as possible but easier to use than a Bash script. This led me to Python and uv. I’ve found that uv basically abstracts away the Python environment in a way that’s really convenient for a tiny project like this. Using Python also gave me a free way to serve my website using the http.server module. Finally, I wrote a tiny Makefile so I wouldn’t have to remember the serve command. Results The outcome was not the most revolutionary because my website was really simple in the first place. But the size of my “compiled” website asset went from ~356kb to ~88kb. My project tree got a lot simpler and the only Javascript on the site now is to highlight code. I’m also just happier about the state of things. I feel like I understand how and why my site works (where before I understood parts but not the whole mystery). Before, with SvelteKit After, with plain HTML Next Steps There are two downsides that I’ve found so far. I’d like to investigate ways to fix or improve these. More code duplication. SvelteKit has a component system so I could make my navigation bar as a component and reuse it. When I removed it, I had to duplicate that code in a few places. Luckily the cost was pretty minor because I only really have four HTML pages. I’m aware that there’s some way to do this using web components. It’s something I intend to look into as one of my next side projects. No live reloading. I have to kill the website to rebuild it now. I’m sure there’s a tool I can find to fix this, or maybe just use something like FastAPI that has automatic reload. But until I do something about it, there’s a minor added cost every time I make a change. Also, I think this repository is now a reasonably good template for someone who wants to make a simple website with some Markdown blog posts without using a generator. I was surprised when I started this project how difficult it was to find a guide about how to write your site without a framework. Hopefully this can help some other people.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cheader\u003e\n      \n      \u003cp\u003e\u003ca href=\"https://github.com/arnath\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cimg src=\"https://www.vijayp.dev/github-logo.png\" width=\"24\" height=\"24\"/\u003e\u003c/a\u003e\n        \u003ca href=\"https://www.linkedin.com/in/vpdev\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e\u003cimg src=\"https://www.vijayp.dev/linkedin-logo.png\" width=\"24\" height=\"24\"/\u003e\u003c/a\u003e\n      \u003c/p\u003e\n    \u003c/header\u003e\n    \n    \u003cp\u003eJanuary 15, 2025\u003c/p\u003e\n    \u003cp\u003eThis week, I decided to rewrite my website using plain HTML and CSS.\nWhen I \u003ca href=\"https://github.com/arnath/arnath.github.io\"\u003eoriginally\nmade it\u003c/a\u003e, I used SvelteKit for simplicity. It was a more interesting\nproject than I was expecting when I started working so I wanted to share\nmy thoughts on the experience.\u003c/p\u003e\n\u003ch3 id=\"why\"\u003eWhy?\u003c/h3\u003e\n\u003cp\u003eThere are a number of reasons I decided to do the rewrite. One is\nthat I’m currently unemployed so I have a lot of free time for side\nprojects. Another is that, as you can see, this website is pretty simple\nso I wasn’t gaining a lot from using SvelteKit. I also wanted to move\nthe site over to Cloudflare Pages so this was an opportune time to make\nsome changes.\u003c/p\u003e\n\u003cp\u003eHowever, the primary reason I decided to make some changes is that I\nfind the Javascript bundler and building ecosystem \u003cem\u003eincredibly\u003c/em\u003e\naggravating to use. For example, one of the things I set up my old\nwebsite to do was build the blog section from the set of Markdown posts.\nI assumed this would be easy to do. SvelteKit and Vite allow you to\nprerender your website and I had a set of files at build time - I just\nneeded to add some logic to transform them. Instead, it was\ninfuriatingly difficult to figure out a way to just get a handle to a\nset of files in my tree at build time (let me caveat that I’m not a\nfrontend dev and maybe I missed something obvious). It took me hours of\nGoogling and trying out different options to come up with this awful\npiece of code that worked to load the contents of a file and give them\nto my page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport type { PageLoad } from \u0026#34;./$types\u0026#34;;\n\nexport const load: PageLoad = async ({ params }) =\u0026gt; {\n  const file = await import(\n    `../../../../lib/assets/posts/${params.slug}.md`\n  );\n\n  return { content: file.default, ...file.metadata };\n};\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI was tired of dealing with things like this for the tiny amount I\nwas gaining from using SvelteKit. And so, I finally decided it was time\nfor a rewrite.\u003c/p\u003e\n\u003ch3 id=\"how\"\u003eHow?\u003c/h3\u003e\n\u003cp\u003eI think spending too much time on Hacker News gave me the\nmisconception that writing a website using plain HTML and CSS would be a\nrelatively well-paved path in 2025. I spent some time looking around for\nguides or a “canonical” way of doing this and found that there isn’t\nreally one. Because of that, I decided to just start from scratch with\nan empty directory and go from there. My website is small enough that I\nwas able to remake a lot of the pages as static HTML.\u003c/p\u003e\n\u003cp\u003eHowever, I prefer writing blog posts in Markdown. It’s easier to\nwrite than HTML, I can pull posts out of my existing Obsidian vault, and\nI just find it more convenient. Therefore, I needed some kind of script\nto turn my Markdown blog posts into HTML content. I investigated some\noptions for this and found \u003ca href=\"https://pandoc.org/\"\u003ePandoc\u003c/a\u003e.\nPandoc is a universal document converter for converting markup formats.\nIt provides a library and a CLI for converting documents from Markdown\nto HTML (along with many other formats).\u003c/p\u003e\n\u003cp\u003eTo write the script, I wanted something as lightweight as possible\nbut easier to use than a Bash script. This led me to Python and \u003ca href=\"https://docs.astral.sh/uv/\"\u003euv\u003c/a\u003e. I’ve found that uv basically\nabstracts away the Python environment in a way that’s really convenient\nfor a tiny project like this. Using Python also gave me a free way to\nserve my website using the \u003ccode\u003ehttp.server\u003c/code\u003e module. Finally, I\nwrote a tiny Makefile so I wouldn’t have to remember the serve\ncommand.\u003c/p\u003e\n\u003ch3 id=\"results\"\u003eResults\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/arnath/vijayp.dev\"\u003eoutcome\u003c/a\u003e was\nnot the \u003cem\u003emost\u003c/em\u003e revolutionary because my website was really simple\nin the first place. But the size of my “compiled” website asset went\nfrom ~356kb to ~88kb. My project tree got a lot simpler and the only\nJavascript on the site now is to highlight code. I’m also just happier\nabout the state of things. I feel like I understand how and why my site\nworks (where before I understood parts but not the whole mystery).\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ci\u003eBefore, with SvelteKit\u003c/i\u003e\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ci\u003eAfter, with plain HTML\u003c/i\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003cimg src=\"https://www.vijayp.dev/blog/rewrite-plain-html/before.png\"/\u003e\n\u003c/td\u003e\n\u003ctd\u003e\n\u003cimg src=\"https://www.vijayp.dev/blog/rewrite-plain-html/after.png\"/\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"next-steps\"\u003eNext Steps\u003c/h3\u003e\n\u003cp\u003eThere are two downsides that I’ve found so far. I’d like to\ninvestigate ways to fix or improve these.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMore code duplication. SvelteKit has a component system so I could\nmake my navigation bar as a component and reuse it. When I removed it, I\nhad to duplicate that code in a few places. Luckily the cost was pretty\nminor because I only really have four HTML pages. I’m aware that there’s\nsome way to do this using web components. It’s something I intend to\nlook into as one of my next side projects.\u003c/li\u003e\n\u003cli\u003eNo live reloading. I have to kill the website to rebuild it now. I’m\nsure there’s a tool I can find to fix this, or maybe just use something\nlike FastAPI that has automatic reload. But until I do something about\nit, there’s a minor added cost every time I make a change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso, I think this repository is now a reasonably good template for\nsomeone who wants to make a simple website with some Markdown blog posts\nwithout using a generator. I was surprised when I started this project\nhow difficult it was to find a guide about how to write your site\nwithout a framework. Hopefully this can help some other people.\u003c/p\u003e\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
