{
  "id": "4057c10b-267f-4e17-952e-af32d3c17a0e",
  "title": "Offline PKI using 3 Yubikeys and an ARM single board computer",
  "link": "https://vincent.bernat.ch/en/blog/2025-offline-pki-yubikeys",
  "description": "Article URL: https://vincent.bernat.ch/en/blog/2025-offline-pki-yubikeys Comments URL: https://news.ycombinator.com/item?id=43394251 Points: 19 # Comments: 2",
  "author": "todsacerdoti",
  "published": "Tue, 18 Mar 2025 00:12:04 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Vincent Bernat",
  "length": 5863,
  "excerpt": "Setup of an offline PKI system with 3 YubiKeys and a Libre Computer Sweet Potato ARM64 SBC. This may contain some traces of Nix.",
  "siteName": "",
  "favicon": "https://d2pzklc15kok91.cloudfront.net/images/favicon.png",
  "text": "An offline PKI enhances security by physically isolating the certificate authority from network threats. A YubiKey is a low-cost solution to store a root certificate. You also need an air-gapped environment to operate the root CA. Offline PKI backed up by 3 YubiKeys This post describes an offline PKI system using the following components: 2 YubiKeys for the root CA (with a 20-year validity), 1 YubiKey for the intermediate CA (with a 5-year validity), and 1 Libre Computer Sweet Potato as an air-gapped SBC. It is possible to add more YubiKeys as a backup of the root CA if needed. This is not needed for the intermediate CA as you can generate a new one if the current one gets destroyed. The software part# offline-pki is a small Python application to manage an offline PKI. It relies on yubikey-manager to manage YubiKeys and cryptography for cryptographic operations not executed on the YubiKeys. The application has some opinionated design choices. Notably, the cryptography is hard-coded to use NIST P-384 elliptic curve. The first step is to reset all your YubiKeys: $ offline-pki yubikey reset This will reset the connected YubiKey. Are you sure? [y/N]: y New PIN code: Repeat for confirmation: New PUK code: Repeat for confirmation: New management key ('.' to generate a random one): WARNING[pki-yubikey] Using random management key: e8ffdce07a4e3bd5c0d803aa3948a9c36cfb86ed5a2d5cf533e97b088ae9e629 INFO[pki-yubikey] 0: Yubico YubiKey OTP+FIDO+CCID 00 00 INFO[pki-yubikey] SN: 23854514 INFO[yubikit.management] Device config written INFO[yubikit.piv] PIV application data reset performed INFO[yubikit.piv] Management key set INFO[yubikit.piv] New PUK set INFO[yubikit.piv] New PIN set INFO[pki-yubikey] YubiKey reset successful! Then, generate the root CA and create as many copies as you want: $ offline-pki certificate root Management key for Root X: Plug YubiKey \"Root X\"... INFO[pki-yubikey] 0: Yubico YubiKey CCID 00 00 INFO[pki-yubikey] SN: 23854514 INFO[yubikit.piv] Data written to object slot 0x5fc10a INFO[yubikit.piv] Certificate written to slot 9C (SIGNATURE), compression=True INFO[yubikit.piv] Private key imported in slot 9C (SIGNATURE) of type ECCP384 Copy root certificate to another YubiKey? [y/N]: y Plug YubiKey \"Root X\"... INFO[pki-yubikey] 0: Yubico YubiKey CCID 00 00 INFO[pki-yubikey] SN: 23854514 INFO[yubikit.piv] Data written to object slot 0x5fc10a INFO[yubikit.piv] Certificate written to slot 9C (SIGNATURE), compression=True INFO[yubikit.piv] Private key imported in slot 9C (SIGNATURE) of type ECCP384 Copy root certificate to another YubiKey? [y/N]: n You can inspect the result: $ offline-pki yubikey info INFO[pki-yubikey] 0: Yubico YubiKey CCID 00 00 INFO[pki-yubikey] SN: 23854514 INFO[pki-yubikey] Slot 9C (SIGNATURE): INFO[pki-yubikey] Private key type: ECCP384 INFO[pki-yubikey] Public key: INFO[pki-yubikey] Algorithm: secp384r1 INFO[pki-yubikey] Issuer: CN=Root CA INFO[pki-yubikey] Subject: CN=Root CA INFO[pki-yubikey] Serial: 1 INFO[pki-yubikey] Not before: 2024-07-05T18:17:19+00:00 INFO[pki-yubikey] Not after: 2044-06-30T18:17:19+00:00 INFO[pki-yubikey] PEM: -----BEGIN CERTIFICATE----- MIIBcjCB+aADAgECAgEBMAoGCCqGSM49BAMDMBIxEDAOBgNVBAMMB1Jvb3QgQ0Ew HhcNMjQwNzA1MTgxNzE5WhcNNDQwNjMwMTgxNzE5WjASMRAwDgYDVQQDDAdSb290 IENBMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAERg3Vir6cpEtB8Vgo5cAyBTkku/4w kXvhWlYZysz7+YzTcxIInZV6mpw61o8W+XbxZV6H6+3YHsr/IeigkK04/HJPi6+i zU5WJHeBJMqjj2No54Nsx6ep4OtNBMa/7T9foyMwITAPBgNVHRMBAf8EBTADAQH/ MA4GA1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAwNoADBlAjEAwYKy/L8leJyiZSnn xrY8xv8wkB9HL2TEAI6fC7gNc2bsISKFwMkyAwg+mKFKN2w7AjBRCtZKg4DZ2iUo 6c0BTXC9a3/28V5aydZj6rvx0JqbF/Ln5+RQL6wFMLoPIvCIiCU= -----END CERTIFICATE----- Then, you can create an intermediate certificate with offline-pki yubikey intermediate and use it to sign any CSR with offline-pki certificate sign. Be careful and inspect the CSR before signing it, as only the subject name can be overridden. Check the documentation for more details. Get the available options using the --help flag. The hardware part# To ensure the operations on the root and intermediate CAs are air-gapped, a cost-efficient solution is to use an ARM64 single board computer. The Libre Computer Sweet Potato SBC is a more open alternative to the well-known Raspberry Pi.1 Libre Computer Sweet Potato SBC, powered by the AML-S905X SOC I interact with it through an USB to TTL UART converter: $ tio /dev/ttyUSB0 [16:40:44.546] tio v3.7 [16:40:44.546] Press ctrl-t q to quit [16:40:44.555] Connected to /dev/ttyUSB0 GXL:BL1:9ac50e:bb16dc;FEAT:ADFC318C:0;POC:1;RCY:0;SPI:0;0.0;CHK:0; TE: 36574 BL2 Built : 15:21:18, Aug 28 2019. gxl g1bf2b53 - luan.yuan@droid15-sz set vcck to 1120 mv set vddee to 1000 mv Board ID = 4 CPU clk: 1200MHz […] The Nix glue# To bring everything together, I am using Nix with a Flake providing: a package for the offline-pki application, with shell completion, a development shell, including an editable version of the offline-pki application, a NixOS module to setup the offline PKI, resetting the system at each boot, a QEMU image for testing, and an SD card image to be used on the Sweet Potato or an ARM64 SBC. # Execute the application locally nix run github:vincentbernat/offline-pki -- --help # Run the application inside a QEMU VM nix run github:vincentbernat/offline-pki\\#qemu # Build a SD card for the Sweet Potato or for the Raspberry Pi nix build --system aarch64-linux github:vincentbernat/offline-pki\\#sdcard.potato nix build --system aarch64-linux github:vincentbernat/offline-pki\\#sdcard.generic # Get a development shell with the application nix develop github:vincentbernat/offline-pki The key for the root CA is not generated by the YubiKey. Using an air-gapped computer is all the more important. Put it in a safe with the YubiKeys when done! ↩︎",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"lf-text\"\u003e\n\n\u003cp\u003eAn offline \u003cabbr title=\"Public Key Infrastructure\"\u003ePKI\u003c/abbr\u003e enhances security by physically isolating the certificate\nauthority from network threats. A \u003ca href=\"https://www.yubico.com/products/yubikey-5-overview/\" title=\"Discover YubiKey 5\"\u003eYubiKey\u003c/a\u003e is a low-cost solution to store a\nroot certificate. You also need an air-gapped environment to operate the root\n\u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e.\u003c/p\u003e\n\u003cfigure\u003e\u003cp\u003e\u003cspan\u003e\u003cimg alt=\"PKI relying on a set of 3 YubiKeys: 2 for the root CA and 1 for the\nintermediate CA.\" src=\"https://d2pzklc15kok91.cloudfront.net/images/3-yubikeys@1x.703a8bbdfe6815.jpg\" srcset=\"https://d2pzklc15kok91.cloudfront.net/images/3-yubikeys@2x.4ebb007e77f143.jpg 2x\" width=\"400\" height=\"346\" decoding=\"async\"/\u003e\u003c/span\u003e\u003c/p\u003e\u003cfigcaption\u003eOffline PKI backed up by 3 YubiKeys\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003eThis post describes an offline \u003cabbr title=\"Public Key Infrastructure\"\u003ePKI\u003c/abbr\u003e system using the following components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e2 YubiKeys for the \u003cstrong\u003eroot \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e\u003c/strong\u003e (with a 20-year validity),\u003c/li\u003e\n\u003cli\u003e1 YubiKey for the \u003cstrong\u003eintermediate \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e\u003c/strong\u003e (with a 5-year validity), and\u003c/li\u003e\n\u003cli\u003e1 \u003ca href=\"https://libre.computer/products/aml-s905x-cc-v2/\" title=\"Sweet Potato AML-S905X-CC-V2\"\u003eLibre Computer Sweet Potato\u003c/a\u003e as an \u003cstrong\u003eair-gapped \u003cabbr title=\"Single Board Computer\"\u003eSBC\u003c/abbr\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is possible to add more YubiKeys as a backup of the root \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e if needed. This\nis not needed for the intermediate \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e as you can generate a new one if\nthe current one gets destroyed.\u003c/p\u003e\n\u003ch2 id=\"the-software-part\"\u003eThe software part\u003ca href=\"#the-software-part\" title=\"Permanent link\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/vincentbernat/offline-pki\" title=\"Offline PKI system\"\u003e\u003ccode\u003eoffline-pki\u003c/code\u003e\u003c/a\u003e is a small Python application to manage an offline \u003cabbr title=\"Public Key Infrastructure\"\u003ePKI\u003c/abbr\u003e.\nIt relies on \u003ca href=\"https://github.com/Yubico/yubikey-manager\" title=\"Python library for configuring any YubiKey\"\u003eyubikey-manager\u003c/a\u003e to manage YubiKeys and \u003ca href=\"https://cryptography.io/en/latest/\" title=\"cryptography\u0026#39;s documentation\"\u003ecryptography\u003c/a\u003e for\ncryptographic operations not executed on the YubiKeys. The application has some\nopinionated design choices. Notably, the cryptography is hard-coded to use \u003ca href=\"https://en.wikipedia.org/wiki/P-384\" title=\"P-384 on Wikipedia\"\u003eNIST\nP-384 elliptic curve\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe first step is to reset all your YubiKeys:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e$ \u003c/span\u003eoffline-pki\u003cspan\u003e \u003c/span\u003eyubikey\u003cspan\u003e \u003c/span\u003ereset\n\u003cspan\u003eThis will reset the connected YubiKey. Are you sure? [y/N]: y\u003c/span\u003e\n\u003cspan\u003eNew PIN code:\u003c/span\u003e\n\u003cspan\u003eRepeat for confirmation:\u003c/span\u003e\n\u003cspan\u003eNew PUK code:\u003c/span\u003e\n\u003cspan\u003eRepeat for confirmation:\u003c/span\u003e\n\u003cspan\u003eNew management key (\u0026#39;.\u0026#39; to generate a random one):\u003c/span\u003e\n\u003cspan\u003eWARNING[pki-yubikey] Using random management key: e8ffdce07a4e3bd5c0d803aa3948a9c36cfb86ed5a2d5cf533e97b088ae9e629\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]  0: Yubico YubiKey OTP+FIDO+CCID 00 00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] SN: 23854514\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.management] Device config written\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] PIV application data reset performed\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Management key set\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] New PUK set\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] New PIN set\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] YubiKey reset successful!\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThen, generate the root \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e and create as many copies as you want:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e$ \u003c/span\u003eoffline-pki\u003cspan\u003e \u003c/span\u003ecertificate\u003cspan\u003e \u003c/span\u003eroot\n\u003cspan\u003eManagement key for Root X:\u003c/span\u003e\n\u003cspan\u003ePlug YubiKey \u0026#34;Root X\u0026#34;...\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]  0: Yubico YubiKey CCID 00 00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] SN: 23854514\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Data written to object slot 0x5fc10a\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Certificate written to slot 9C (SIGNATURE), compression=True\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Private key imported in slot 9C (SIGNATURE) of type ECCP384\u003c/span\u003e\n\u003cspan\u003eCopy root certificate to another YubiKey? [y/N]: y\u003c/span\u003e\n\u003cspan\u003ePlug YubiKey \u0026#34;Root X\u0026#34;...\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]  0: Yubico YubiKey CCID 00 00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] SN: 23854514\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Data written to object slot 0x5fc10a\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Certificate written to slot 9C (SIGNATURE), compression=True\u003c/span\u003e\n\u003cspan\u003eINFO[yubikit.piv] Private key imported in slot 9C (SIGNATURE) of type ECCP384\u003c/span\u003e\n\u003cspan\u003eCopy root certificate to another YubiKey? [y/N]: n\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eYou can inspect the result:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e$ \u003c/span\u003eoffline-pki\u003cspan\u003e \u003c/span\u003eyubikey\u003cspan\u003e \u003c/span\u003einfo\n\u003cspan\u003eINFO[pki-yubikey]  0: Yubico YubiKey CCID 00 00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] SN: 23854514\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey] Slot 9C (SIGNATURE):\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]   Private key type: ECCP384\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]   Public key:\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Algorithm:  secp384r1\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Issuer:     CN=Root CA\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Subject:    CN=Root CA\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Serial:     1\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Not before: 2024-07-05T18:17:19+00:00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     Not after:  2044-06-30T18:17:19+00:00\u003c/span\u003e\n\u003cspan\u003eINFO[pki-yubikey]     PEM:\u003c/span\u003e\n\u003cspan\u003e-----BEGIN CERTIFICATE-----\u003c/span\u003e\n\u003cspan\u003eMIIBcjCB+aADAgECAgEBMAoGCCqGSM49BAMDMBIxEDAOBgNVBAMMB1Jvb3QgQ0Ew\u003c/span\u003e\n\u003cspan\u003eHhcNMjQwNzA1MTgxNzE5WhcNNDQwNjMwMTgxNzE5WjASMRAwDgYDVQQDDAdSb290\u003c/span\u003e\n\u003cspan\u003eIENBMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAERg3Vir6cpEtB8Vgo5cAyBTkku/4w\u003c/span\u003e\n\u003cspan\u003ekXvhWlYZysz7+YzTcxIInZV6mpw61o8W+XbxZV6H6+3YHsr/IeigkK04/HJPi6+i\u003c/span\u003e\n\u003cspan\u003ezU5WJHeBJMqjj2No54Nsx6ep4OtNBMa/7T9foyMwITAPBgNVHRMBAf8EBTADAQH/\u003c/span\u003e\n\u003cspan\u003eMA4GA1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAwNoADBlAjEAwYKy/L8leJyiZSnn\u003c/span\u003e\n\u003cspan\u003exrY8xv8wkB9HL2TEAI6fC7gNc2bsISKFwMkyAwg+mKFKN2w7AjBRCtZKg4DZ2iUo\u003c/span\u003e\n\u003cspan\u003e6c0BTXC9a3/28V5aydZj6rvx0JqbF/Ln5+RQL6wFMLoPIvCIiCU=\u003c/span\u003e\n\u003cspan\u003e-----END CERTIFICATE-----\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThen, you can create an intermediate certificate with \u003ccode\u003eoffline-pki yubikey\nintermediate\u003c/code\u003e and use it to sign any \u003cabbr title=\"Certificate Signing Request\"\u003eCSR\u003c/abbr\u003e with \u003ccode\u003eoffline-pki certificate sign\u003c/code\u003e. Be\ncareful and inspect the \u003cabbr title=\"Certificate Signing Request\"\u003eCSR\u003c/abbr\u003e before signing it, as only the subject name can\nbe overridden. Check the \u003ca href=\"https://github.com/vincentbernat/offline-pki?tab=readme-ov-file#operations\"\u003edocumentation\u003c/a\u003e for more details. Get the available\noptions using the \u003ccode\u003e--help\u003c/code\u003e flag.\u003c/p\u003e\n\u003ch2 id=\"the-hardware-part\"\u003eThe hardware part\u003ca href=\"#the-hardware-part\" title=\"Permanent link\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo ensure the operations on the root and intermediate \u003cabbr title=\"Certificate Authorities\"\u003eCAs\u003c/abbr\u003e are air-gapped,\na cost-efficient solution is to use an ARM64 single board computer. The \u003ca href=\"https://libre.computer/products/aml-s905x-cc-v2/\" title=\"Sweet Potato AML-S905X-CC-V2\"\u003eLibre\nComputer Sweet Potato\u003c/a\u003e \u003cabbr title=\"Single Board Computer\"\u003eSBC\u003c/abbr\u003e is a more open alternative to the well-known\nRaspberry Pi.\u003csup id=\"fnref-root\"\u003e\u003ca href=\"#fn-root\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cp\u003e\u003cspan\u003e\u003cimg alt=\"Libre Computer Sweet Potato single board computer relying on the Amlogic S905X\nSOC\" src=\"https://d2pzklc15kok91.cloudfront.net/images/sweet-potato@1x.a5e31f42d65aa8.jpg\" srcset=\"https://d2pzklc15kok91.cloudfront.net/images/sweet-potato@2x.08e1474d790f6c.jpg 2x\" width=\"800\" height=\"560\" loading=\"lazy\" decoding=\"async\"/\u003e\u003c/span\u003e\u003c/p\u003e\u003cfigcaption\u003eLibre Computer Sweet Potato SBC, powered by the AML-S905X SOC\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003eI interact with it through an \u003ca href=\"https://www.amazon.com/dp/B07WX2DSVB\" title=\"USB to TTL UART converter on Amazon\"\u003eUSB to TTL UART converter\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e$ \u003c/span\u003etio\u003cspan\u003e \u003c/span\u003e/dev/ttyUSB0\n\u003cspan\u003e[16:40:44.546] tio v3.7\u003c/span\u003e\n\u003cspan\u003e[16:40:44.546] Press ctrl-t q to quit\u003c/span\u003e\n\u003cspan\u003e[16:40:44.555] Connected to /dev/ttyUSB0\u003c/span\u003e\n\u003cspan\u003eGXL:BL1:9ac50e:bb16dc;FEAT:ADFC318C:0;POC:1;RCY:0;SPI:0;0.0;CHK:0;\u003c/span\u003e\n\u003cspan\u003eTE: 36574\u003c/span\u003e\n\n\u003cspan\u003eBL2 Built : 15:21:18, Aug 28 2019. gxl g1bf2b53 - luan.yuan@droid15-sz\u003c/span\u003e\n\n\u003cspan\u003eset vcck to 1120 mv\u003c/span\u003e\n\u003cspan\u003eset vddee to 1000 mv\u003c/span\u003e\n\u003cspan\u003eBoard ID = 4\u003c/span\u003e\n\u003cspan\u003eCPU clk: 1200MHz\u003c/span\u003e\n\u003cspan\u003e[…]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003ch2 id=\"the-nix-glue\"\u003eThe Nix glue\u003ca href=\"#the-nix-glue\" title=\"Permanent link\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo bring everything together, I am using \u003cem\u003eNix\u003c/em\u003e with a \u003ca href=\"https://github.com/vincentbernat/offline-pki/blob/main/flake.nix\"\u003eFlake\u003c/a\u003e providing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea package for the \u003ccode\u003eoffline-pki\u003c/code\u003e application, with shell completion,\u003c/li\u003e\n\u003cli\u003ea development shell, including an editable version of the \u003ccode\u003eoffline-pki\u003c/code\u003e application,\u003c/li\u003e\n\u003cli\u003ea NixOS module to setup the offline \u003cabbr title=\"Public Key Infrastructure\"\u003ePKI\u003c/abbr\u003e, resetting the system at each boot,\u003c/li\u003e\n\u003cli\u003ea QEMU image for testing, and\u003c/li\u003e\n\u003cli\u003ean SD card image to be used on the \u003cem\u003eSweet Potato\u003c/em\u003e or an ARM64 \u003cabbr title=\"Single Board Computer\"\u003eSBC\u003c/abbr\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e# Execute the application locally\u003c/span\u003e\nnix\u003cspan\u003e \u003c/span\u003erun\u003cspan\u003e \u003c/span\u003egithub:vincentbernat/offline-pki\u003cspan\u003e \u003c/span\u003e--\u003cspan\u003e \u003c/span\u003e--help\n\u003cspan\u003e# Run the application inside a QEMU VM\u003c/span\u003e\nnix\u003cspan\u003e \u003c/span\u003erun\u003cspan\u003e \u003c/span\u003egithub:vincentbernat/offline-pki\u003cspan\u003e\\#\u003c/span\u003eqemu\n\u003cspan\u003e# Build a SD card for the Sweet Potato or for the Raspberry Pi\u003c/span\u003e\nnix\u003cspan\u003e \u003c/span\u003ebuild\u003cspan\u003e \u003c/span\u003e--system\u003cspan\u003e \u003c/span\u003eaarch64-linux\u003cspan\u003e \u003c/span\u003egithub:vincentbernat/offline-pki\u003cspan\u003e\\#\u003c/span\u003esdcard.potato\nnix\u003cspan\u003e \u003c/span\u003ebuild\u003cspan\u003e \u003c/span\u003e--system\u003cspan\u003e \u003c/span\u003eaarch64-linux\u003cspan\u003e \u003c/span\u003egithub:vincentbernat/offline-pki\u003cspan\u003e\\#\u003c/span\u003esdcard.generic\n\u003cspan\u003e# Get a development shell with the application\u003c/span\u003e\nnix\u003cspan\u003e \u003c/span\u003edevelop\u003cspan\u003e \u003c/span\u003egithub:vincentbernat/offline-pki\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cdiv\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn-root\"\u003e\n\u003cp\u003eThe key for the root \u003cabbr title=\"Certificate Authority\"\u003eCA\u003c/abbr\u003e is not generated by the YubiKey. Using an\nair-gapped computer is all the more important. Put it in a safe with the\nYubiKeys when done! \u003ca href=\"#fnref-root\" title=\"Jump back to footnote 1 in the text\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n      \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-03-17T08:12:54Z",
  "modifiedTime": null
}
