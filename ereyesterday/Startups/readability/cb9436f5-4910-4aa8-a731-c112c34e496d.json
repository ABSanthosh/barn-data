{
  "id": "cb9436f5-4910-4aa8-a731-c112c34e496d",
  "title": "Go 1.24's go tool is one of the best additions to the ecosystem in years",
  "link": "https://www.jvt.me/posts/2025/01/27/go-tools-124/",
  "description": "Article URL: https://www.jvt.me/posts/2025/01/27/go-tools-124/ Comments URL: https://news.ycombinator.com/item?id=42845323 Points: 121 # Comments: 37",
  "author": "keybits",
  "published": "Mon, 27 Jan 2025 20:33:43 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Jamie Tanna",
  "length": 12145,
  "excerpt": "Why I'm very excited about `go tool` landing in Go 1.24.",
  "siteName": "Jamie Tanna | Software Engineer",
  "favicon": "https://www.jvt.me/favicon.png",
  "text": "For those that aren't aware, one of the big changes in February's upcoming Go 1.24 release is the new go tool command, and tool directive in the go.mod to manage any tools your project uses. I'm incredibly excited about this, and in my opinion, this is one of the best changes we've had in recent years in the ecosystem as a whole.I've been meaning to write this post since the first release candidate for Go 1.24 landed, but after reading Howard John's Exploring the new \"go tool\" support in Go 1.24 this morning, I thought I should write my thoughts up.What is it?Within your Go codebases, there's often some additional tools that you need to have installed to be able to build/test/deploy the project.Sometimes this will a dependency that's needed for go generateing, or it may be that you want to pipe your go test output into a JUnit-compatible format, so your CI platform can provide more useful metadata.For each of these, you have two choices:require that the user knows how to install them, i.e. by knowing to run make deps or just setup before building anything on the project (which will then i.e. go install the commands)use the tools.go pattern to make it so you can just run go generate, and that'll call the right dependency via go runMy preference is tools.go pattern, but there are two key problems with this approach.Firstly, there's a performance hit of using a tools.go. It's something that is slightly noticeable, moreso if your project relies upon a lot of go run i.e. with lots of go generates, because prior to Go 1.24, the go run invocations were not cached.Secondly, it also leads to dependency tree bloat, because you have to record your dependency on i.e. github.com/sqlc-dev/sqlc/cmd/sqlc which then gets recorded in your go.mod, and then anyone using your module will then see that as an indirect (transitive) dependency.This was something we worked on for oapi-codegen's v2 release to further reduce unnecessary dependencies, and make things a bit cleaner for our consumers. This is somewhat mitigated by Go's module graph pruning which won't download dependencies that aren't used, but consumers may still see the dependencies coming in as an indirect dependency, which may not be ideal (especially as it can then bloat their indirect dependencies, which then gets passed on to their consumers and so on .Dependency tree bloat can also be further mitigated by splitting your tools.go into a separate module, which makes it more awkward to invoke dependencies but makes sure that none of your consumers will be seeing any tool-related dependencies.For those who know me as co-maintainer of oapi-codegen, you'll know that the tools.go pattern is our explicit recommendation and we believe is better than installing it as a binary, so it's probably unsurprising that I'm very excited about this as an option to manage dependencies.How does it work?I've started playing around with this on a branch of the dependency-management-data project, where I've got a mix of different tools that need to be installed and used.Let's take a worked example of how we'd move over calls to oapi-codegen to the new go tool pattern.Existing stateFor instance let's say that we have the following tools.go in its own module:# tools/go.mod module dmd.tanna.dev/tools go 1.22.0 require ( github.com/99designs/gqlgen v0.17.49 github.com/oapi-codegen/oapi-codegen/v2 v2.4.1 github.com/sqlc-dev/sqlc v1.26.0 ) We can then see that we invoke this via go run:// internal/ecosystems/generate.go //go:generate go run -modfile=../../tools/go.mod github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml MigratingTo start migrating over to go tool, we need to make sure that we've first pulled in the new version of Go in our top-level Go module: module dmd.tanna.dev -go 1.22.7 +go 1.24 -toolchain go1.23.2 +toolchain go1.24rc2 Next, we need to pull in a tool dependency on oapi-codegen's CLI tool - notice that you need the full path to the command that's being invoked:# NOTE the full import path % go get -tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@v2.4.1 We could also do this by hand, but doing it via go get simplifies this a little.From here, we'll notice that our go.mod has a few other changes:@@ -57,12 +57,16 @@ require ( github.com/cenkalti/backoff/v4 v4.3.0 // indirect github.com/cespare/xxhash/v2 v2.3.0 // indirect github.com/charmbracelet/lipgloss v0.10.0 // indirect + github.com/dprotaso/go-yit v0.0.0-20220510233725-9ba8df137936 // indirect github.com/dustin/go-humanize v1.0.1 // indirect github.com/felixge/httpsnoop v1.0.4 // indirect + github.com/getkin/kin-openapi v0.127.0 // indirect github.com/go-ini/ini v1.67.0 // indirect github.com/go-logfmt/logfmt v0.6.0 // indirect github.com/go-logr/logr v1.4.2 // indirect github.com/go-logr/stdr v1.2.2 // indirect + github.com/go-openapi/jsonpointer v0.21.0 // indirect + github.com/go-openapi/swag v0.23.0 // indirect github.com/gobwas/glob v0.2.3 // indirect github.com/google/go-querystring v1.1.0 // indirect github.com/gorilla/mux v1.8.1 // indirect @@ -72,16 +76,22 @@ require ( github.com/hashicorp/go-retryablehttp v0.7.5 // indirect github.com/hashicorp/golang-lru/v2 v2.0.7 // indirect github.com/inconshreveable/mousetrap v1.1.0 // indirect + github.com/invopop/yaml v0.3.1 // indirect + github.com/josharian/intern v1.0.0 // indirect github.com/klauspost/compress v1.17.11 // indirect github.com/lucasb-eyer/go-colorful v1.2.0 // indirect + github.com/mailru/easyjson v0.7.7 // indirect github.com/mattn/go-isatty v0.0.20 // indirect github.com/mattn/go-runewidth v0.0.15 // indirect github.com/mitchellh/mapstructure v1.5.0 // indirect + github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 // indirect github.com/muesli/reflow v0.3.0 // indirect github.com/muesli/termenv v0.15.2 // indirect github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect github.com/ncruces/go-strftime v0.1.9 // indirect + github.com/oapi-codegen/oapi-codegen/v2 v2.4.1 // indirect github.com/olekukonko/tablewriter v0.0.5 // indirect + github.com/perimeterx/marshmallow v1.1.5 // indirect github.com/prometheus/client_golang v1.20.5 // indirect github.com/prometheus/client_model v0.6.1 // indirect github.com/prometheus/common v0.60.1 // indirect @@ -91,8 +101,10 @@ require ( github.com/rivo/uniseg v0.4.7 // indirect github.com/sirupsen/logrus v1.9.4-0.20230606125235-dd1b4c2e81af // indirect github.com/sosodev/duration v1.3.1 // indirect + github.com/speakeasy-api/openapi-overlay v0.9.0 // indirect github.com/spf13/pflag v1.0.5 // indirect github.com/tchap/go-patricia/v2 v2.3.1 // indirect + github.com/vmware-labs/yaml-jsonpath v0.3.2 // indirect github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect github.com/yashtewari/glob-intersection v0.2.0 // indirect @@ -110,11 +122,13 @@ require ( go.opentelemetry.io/otel/metric v1.32.0 // indirect go.opentelemetry.io/proto/otlp v1.3.1 // indirect golang.org/x/exp v0.0.0-20231108232855-2478ac86f678 // indirect + golang.org/x/mod v0.18.0 // indirect golang.org/x/net v0.30.0 // indirect golang.org/x/oauth2 v0.23.0 // indirect golang.org/x/sys v0.27.0 // indirect golang.org/x/term v0.25.0 // indirect golang.org/x/time v0.5.0 // indirect + golang.org/x/tools v0.22.0 // indirect google.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 // indirect google.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 // indirect google.golang.org/grpc v1.68.0 // indirect @@ -128,3 +142,5 @@ require ( modernc.org/token v1.1.0 // indirect sigs.k8s.io/yaml v1.4.0 // indirect ) + +tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen From here, we can see:there is a tool directive for github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegenthe containing Go module for the CLI, github.com/oapi-codegen/oapi-codegen/v2, is now an indirect dependencyany other required dependencies of github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen are now indirect dependenciesNow we've done this, we could run:% go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --help Usage of /home/jamie/.cache/go-build/0e/0e04736601c8bbef785d372de02859bf8f39405aae9ccbf371477b0f2d8df755-d/oapi-codegen: # ... With this tool set up, we can now modify i.e. internal/ecosystems/generate.go like so to use the new go tool: package ecosystems -//go:generate go run -modfile=../../tools/go.mod github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml +//go:generate go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml Then running go generate ./internal/ecosystems works as it did before ðŸš€Performance implicationsA less scientific view than Howard John's article above, but we can see a slight improvement in performance:# first time using `go tool`, from a fresh cache directory % time go generate ./internal/ecosystems go generate ./internal/ecosystems 55.05s user 4.57s system 531% cpu 11.220 total # a subsequent call % time go generate ./internal/ecosystems go generate ./internal/ecosystems 0.59s user 0.18s system 424% cpu 0.181 total # another just to see % time go generate ./internal/ecosystems go generate ./internal/ecosystems 0.57s user 0.25s system 404% cpu 0.202 total Compare this to the previous implementation:# first time using `go run`, from a fresh cache directory % time go generate ./internal/ecosystems go generate ./internal/ecosystems 50.29s user 3.67s system 536% cpu 10.063 total # a subsequent call % time go generate ./internal/ecosystems go generate ./internal/ecosystems 1.04s user 0.21s system 185% cpu 0.677 total # another just to see % time go generate ./internal/ecosystems go generate ./internal/ecosystems 1.02s user 0.26s system 191% cpu 0.669 total Notice that the first call is similar in speed, but the use of go tool's subsequent calls are still faster.I'm a big fan of the fact that as of Go 1.24+ the go runs will be cached, so even if you don't move over to go tool, you'll get a performance boost!ConcernsNow, there are still a few things I've noticed while doing the migration that aren't necessarily what I expected.go.mod implicationsSomething interesting is that the usage of the tool dependencies being treated as an indirect dependency is that they're present in the dependency tree, and treated like any other indirect dependency.I'd also have preferred that we had just used // tool instead of // indirect, but I can see why this is likely the choice that's made - so they're treated like any other dependency - but making them less clear as only being required for tools could lead to issues with clashing dependencies, or where you upgrade an indirect dependency and then that breaks other things.This means that tools such as Renovate need to be a little more involved in how to do the updates, but that's all in hand.gqlgen fails to run with Go 1.24rc2Something I've noticed while playing around with this is that gqlgen struggles to run with Go 1.24rc2, which feels like an upstream Go issue, but it looks like that may be related to the use of /x/tools ðŸ¤”It may be interesting to find out what else gets affected by this - please give the RC a test!ClosingOverall, I'm feeling very positive about it, and improving the way that dependencies get installed if they should be built from source, but there are dependencies such as golangci-lint which don't recommend building from source and instead using their pre-built binaries, which is fair, and is unlikely to change here.",
  "image": "https://media.jvt.me/b41202acf7.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eFor those that aren\u0026#39;t aware, one of the big changes in February\u0026#39;s upcoming Go 1.24 release is the new \u003ca href=\"https://tip.golang.org/doc/go1.24#tools\"\u003e\u003ccode\u003ego tool\u003c/code\u003e\u003c/a\u003e command, and \u003ccode\u003etool\u003c/code\u003e directive in the \u003ccode\u003ego.mod\u003c/code\u003e to manage any tools your project uses. I\u0026#39;m \u003cem\u003eincredibly excited\u003c/em\u003e about this, and in my opinion, this is one of the best changes we\u0026#39;ve had in recent years in the ecosystem as a whole.\u003c/p\u003e\u003cp\u003eI\u0026#39;ve been meaning to write this post since the first release candidate for Go 1.24 landed, but after reading Howard John\u0026#39;s \u003ca href=\"https://blog.howardjohn.info/posts/go-tools-command/\"\u003eExploring the new \u0026#34;go tool\u0026#34; support in Go 1.24\u003c/a\u003e this morning, I thought I should write my thoughts up.\u003c/p\u003e\u003ch2 id=\"what-is-it\"\u003eWhat is it?\u003c/h2\u003e\u003cp\u003eWithin your Go codebases, there\u0026#39;s often some additional tools that you need to have installed to be able to build/test/deploy the project.\u003c/p\u003e\u003cp\u003eSometimes this will a dependency that\u0026#39;s needed for \u003ccode\u003ego generate\u003c/code\u003eing, or it may be that you want to pipe your \u003ccode\u003ego test\u003c/code\u003e output into a JUnit-compatible format, so your CI platform can provide more useful metadata.\u003c/p\u003e\u003cp\u003eFor each of these, you have two choices:\u003c/p\u003e\u003cul\u003e\u003cli\u003erequire that the user knows how to install them, i.e. by knowing to run \u003ccode\u003emake deps\u003c/code\u003e or \u003ccode\u003ejust setup\u003c/code\u003e before building anything on the project (which will then i.e. \u003ccode\u003ego install\u003c/code\u003e the commands)\u003c/li\u003e\u003cli\u003euse the \u003ca href=\"https://www.jvt.me/posts/2022/06/15/go-tools-dependency-management/\"\u003e\u003ccode\u003etools.go\u003c/code\u003e pattern\u003c/a\u003e to make it so you can \u003cem\u003ejust\u003c/em\u003e run \u003ccode\u003ego generate\u003c/code\u003e, and that\u0026#39;ll call the right dependency via \u003ccode\u003ego run\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMy preference is \u003ca href=\"https://www.jvt.me/posts/2022/06/15/go-tools-dependency-management/\"\u003e\u003ccode\u003etools.go\u003c/code\u003e pattern\u003c/a\u003e, but there are two key problems with this approach.\u003c/p\u003e\u003cp\u003eFirstly, there\u0026#39;s a performance hit of using a \u003ccode\u003etools.go\u003c/code\u003e. It\u0026#39;s something that is \u003cem\u003eslightly\u003c/em\u003e noticeable, moreso if your project relies upon a lot of \u003ccode\u003ego run\u003c/code\u003e i.e. with lots of \u003ccode\u003ego generate\u003c/code\u003es, because prior to Go 1.24, the \u003ccode\u003ego run\u003c/code\u003e invocations were not cached.\u003c/p\u003e\u003cp\u003eSecondly, it also leads to dependency tree bloat, because you have to record your dependency on i.e. \u003ccode\u003egithub.com/sqlc-dev/sqlc/cmd/sqlc\u003c/code\u003e which then gets recorded in your \u003ccode\u003ego.mod\u003c/code\u003e, and then anyone using \u003cem\u003eyour module\u003c/em\u003e will then see that as an indirect (transitive) dependency.\u003c/p\u003e\u003cp\u003eThis was something we \u003ca href=\"https://www.jvt.me/posts/2023/10/23/oapi-codegen-v2-decrease/\"\u003eworked on for \u003ccode\u003eoapi-codegen\u003c/code\u003e\u0026#39;s v2 release\u003c/a\u003e to further reduce unnecessary dependencies, and make things a bit cleaner for our consumers. This is somewhat mitigated by Go\u0026#39;s \u003ca href=\"https://go.dev/ref/mod#graph-pruning\"\u003emodule graph pruning\u003c/a\u003e which won\u0026#39;t download dependencies that aren\u0026#39;t used, but consumers may still see the dependencies coming in as an indirect dependency, which may not be ideal (especially as it can then bloat their indirect dependencies, which then gets passed on to their consumers and so on .\u003c/p\u003e\u003cp\u003eDependency tree bloat can also be further mitigated by splitting your \u003ca href=\"https://www.jvt.me/posts/2024/09/30/go-tools-module/\"\u003e\u003ccode\u003etools.go\u003c/code\u003e into a separate module\u003c/a\u003e, which makes it more awkward to invoke dependencies but makes sure that none of your consumers will be seeing any tool-related dependencies.\u003c/p\u003e\u003cp\u003eFor those who know me as co-maintainer of \u003ca href=\"https://github.com/oapi-codegen/oapi-codegen\"\u003eoapi-codegen\u003c/a\u003e, you\u0026#39;ll know that the \u003ccode\u003etools.go\u003c/code\u003e pattern is our \u003ca href=\"https://github.com/oapi-codegen/oapi-codegen#install\"\u003eexplicit recommendation\u003c/a\u003e and we believe is better than installing it as a binary, so it\u0026#39;s probably unsurprising that I\u0026#39;m very excited about this as an option to manage dependencies.\u003c/p\u003e\u003ch2 id=\"how-does-it-work\"\u003eHow does it work?\u003c/h2\u003e\u003cp\u003eI\u0026#39;ve started playing around with this \u003ca href=\"https://gitlab.com/tanna.dev/dependency-management-data/-/commits/spike/go-tools-124\"\u003eon a branch\u003c/a\u003e of the \u003ca href=\"https://dmd.tanna.dev\"\u003edependency-management-data\u003c/a\u003e project, where I\u0026#39;ve got a mix of different tools that need to be installed and used.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s take a worked example of how we\u0026#39;d move over calls to \u003ccode\u003eoapi-codegen\u003c/code\u003e to the new \u003ccode\u003ego tool\u003c/code\u003e pattern.\u003c/p\u003e\u003ch3 id=\"existing-state\"\u003eExisting state\u003c/h3\u003e\u003cp\u003eFor instance let\u0026#39;s say that we have the following \u003ccode\u003etools.go\u003c/code\u003e in its own module:\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"gomod\"\u003e# tools/go.mod\nmodule dmd.tanna.dev/tools\n\ngo 1.22.0\n\nrequire (\n\tgithub.com/99designs/gqlgen v0.17.49\n\tgithub.com/oapi-codegen/oapi-codegen/v2 v2.4.1\n\tgithub.com/sqlc-dev/sqlc v1.26.0\n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then see that we invoke this via \u003ccode\u003ego run\u003c/code\u003e:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"go\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// internal/ecosystems/generate.go\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e//go:generate go run -modfile=../../tools/go.mod github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"migrating\"\u003eMigrating\u003c/h3\u003e\u003cp\u003eTo start migrating over to \u003ccode\u003ego tool\u003c/code\u003e, we need to make sure that we\u0026#39;ve first pulled in the new version of Go in our top-level Go module:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"diff\"\u003e\u003cspan\u003e\u003cspan\u003e module dmd.tanna.dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e-go 1.22.7\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e+go 1.24\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e-toolchain go1.23.2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e+toolchain go1.24rc2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNext, we need to pull in a \u003ccode\u003etool\u003c/code\u003e dependency on \u003ccode\u003eoapi-codegen\u003c/code\u003e\u0026#39;s CLI tool - notice that you need \u003cstrong\u003ethe full path\u003c/strong\u003e to the command that\u0026#39;s being invoked:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# NOTE the full import path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% go get -tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@v2.4.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe could also do this by hand, but doing it via \u003ccode\u003ego get\u003c/code\u003e simplifies this a little.\u003c/p\u003e\u003cp\u003eFrom here, we\u0026#39;ll notice that our \u003ccode\u003ego.mod\u003c/code\u003e has a few other changes:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"diff\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@@ -57,12 +57,16 @@ require (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/cespare/xxhash/v2 v2.3.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/charmbracelet/lipgloss v0.10.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/dprotaso/go-yit v0.0.0-20220510233725-9ba8df137936 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/dustin/go-humanize v1.0.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/felixge/httpsnoop v1.0.4 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/getkin/kin-openapi v0.127.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/go-ini/ini v1.67.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/go-logfmt/logfmt v0.6.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/go-logr/logr v1.4.2 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/go-logr/stdr v1.2.2 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/go-openapi/jsonpointer v0.21.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/go-openapi/swag v0.23.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/gobwas/glob v0.2.3 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/google/go-querystring v1.1.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/gorilla/mux v1.8.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@@ -72,16 +76,22 @@ require (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/hashicorp/go-retryablehttp v0.7.5 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/hashicorp/golang-lru/v2 v2.0.7 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/inconshreveable/mousetrap v1.1.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/invopop/yaml v0.3.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/josharian/intern v1.0.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/klauspost/compress v1.17.11 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/mailru/easyjson v0.7.7 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/mattn/go-isatty v0.0.20 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/mattn/go-runewidth v0.0.15 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/mitchellh/mapstructure v1.5.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/muesli/reflow v0.3.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/muesli/termenv v0.15.2 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/ncruces/go-strftime v0.1.9 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/oapi-codegen/oapi-codegen/v2 v2.4.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/olekukonko/tablewriter v0.0.5 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/perimeterx/marshmallow v1.1.5 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/prometheus/client_golang v1.20.5 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/prometheus/client_model v0.6.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/prometheus/common v0.60.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@@ -91,8 +101,10 @@ require (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/rivo/uniseg v0.4.7 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/sirupsen/logrus v1.9.4-0.20230606125235-dd1b4c2e81af // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/sosodev/duration v1.3.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/speakeasy-api/openapi-overlay v0.9.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/spf13/pflag v1.0.5 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/tchap/go-patricia/v2 v2.3.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       github.com/vmware-labs/yaml-jsonpath v0.3.2 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        github.com/yashtewari/glob-intersection v0.2.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@@ -110,11 +122,13 @@ require (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        go.opentelemetry.io/otel/metric v1.32.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        go.opentelemetry.io/proto/otlp v1.3.1 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        golang.org/x/exp v0.0.0-20231108232855-2478ac86f678 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       golang.org/x/mod v0.18.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        golang.org/x/net v0.30.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        golang.org/x/oauth2 v0.23.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        golang.org/x/sys v0.27.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        golang.org/x/term v0.25.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        golang.org/x/time v0.5.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+       golang.org/x/tools v0.22.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        google.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        google.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        google.golang.org/grpc v1.68.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@@ -128,3 +142,5 @@ require (\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e        modernc.org/token v1.1.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        sigs.k8s.io/yaml v1.4.0 // indirect\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e )\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e+tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFrom here, we can see:\u003c/p\u003e\u003cul\u003e\u003cli\u003ethere is a \u003ccode\u003etool\u003c/code\u003e directive for \u003ccode\u003egithub.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen\u003c/code\u003e\u003c/li\u003e\u003cli\u003ethe containing Go module for the CLI, \u003ccode\u003egithub.com/oapi-codegen/oapi-codegen/v2\u003c/code\u003e, is now an \u003ccode\u003eindirect\u003c/code\u003e dependency\u003c/li\u003e\u003cli\u003eany other required dependencies of \u003ccode\u003egithub.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen\u003c/code\u003e are now \u003ccode\u003eindirect\u003c/code\u003e dependencies\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNow we\u0026#39;ve done this, we could run:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e% go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --help\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eUsage of /home/jamie/.cache/go-build/0e/0e04736601c8bbef785d372de02859bf8f39405aae9ccbf371477b0f2d8df755-d/oapi-codegen:\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith this tool set up, we can now modify i.e. \u003ccode\u003einternal/ecosystems/generate.go\u003c/code\u003e like so to use the new \u003ccode\u003ego tool\u003c/code\u003e:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"diff\"\u003e\u003cspan\u003e\u003cspan\u003e package ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e-//go:generate go run -modfile=../../tools/go.mod github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e+//go:generate go tool github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml openapi.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen running \u003ccode\u003ego generate ./internal/ecosystems\u003c/code\u003e works as it did before ðŸš€\u003c/p\u003e\u003ch2 id=\"performance-implications\"\u003ePerformance implications\u003c/h2\u003e\u003cp\u003eA less scientific view than Howard John\u0026#39;s article above, but we can see a slight improvement in performance:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# first time using `go tool`, from a fresh cache directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  55.05s user 4.57s system 531% cpu 11.220 total\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# a subsequent call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  0.59s user 0.18s system 424% cpu 0.181 total\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# another just to see\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  0.57s user 0.25s system 404% cpu 0.202 total\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCompare this to the previous implementation:\u003c/p\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# first time using `go run`, from a fresh cache directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  50.29s user 3.67s system 536% cpu 10.063 total\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# a subsequent call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  1.04s user 0.21s system 185% cpu 0.677 total\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# another just to see\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e% \u003cspan\u003etime\u003c/span\u003e go generate ./internal/ecosystems\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ego generate ./internal/ecosystems  1.02s user 0.26s system 191% cpu 0.669 total\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNotice that the first call is similar in speed, but the use of \u003ccode\u003ego tool\u003c/code\u003e\u0026#39;s subsequent calls are still faster.\u003c/p\u003e\u003cp\u003eI\u0026#39;m a big fan of the fact that as of Go 1.24+ the \u003ccode\u003ego run\u003c/code\u003es will be cached, so even if you don\u0026#39;t move over to \u003ccode\u003ego tool\u003c/code\u003e, you\u0026#39;ll get a performance boost!\u003c/p\u003e\u003ch2 id=\"concerns\"\u003eConcerns\u003c/h2\u003e\u003cp\u003eNow, there are still a few things I\u0026#39;ve noticed while doing the migration that aren\u0026#39;t necessarily what I expected.\u003c/p\u003e\u003ch3 id=\"gomod-implications\"\u003e\u003ccode\u003ego.mod\u003c/code\u003e implications\u003c/h3\u003e\u003cp\u003eSomething interesting is that the usage of the \u003ccode\u003etool\u003c/code\u003e dependencies being treated as an \u003ccode\u003eindirect\u003c/code\u003e dependency is that they\u0026#39;re present in the dependency tree, and treated like any other \u003ccode\u003eindirect\u003c/code\u003e dependency.\u003c/p\u003e\u003cp\u003eI\u0026#39;d also have preferred that we had just used \u003ccode\u003e// tool\u003c/code\u003e instead of \u003ccode\u003e// indirect\u003c/code\u003e, but I can see why this is likely the choice that\u0026#39;s made - so they\u0026#39;re treated like any other dependency - but making them less clear as only being required for tools could lead to issues with clashing dependencies, or where you upgrade an \u003ccode\u003eindirect\u003c/code\u003e dependency and then that breaks other things.\u003c/p\u003e\u003cp\u003eThis means that tools such as Renovate need to be a little more involved in how to do the updates, but \u003ca href=\"https://github.com/renovatebot/renovate/discussions/33867\"\u003ethat\u0026#39;s all in hand\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"gqlgen-fails-to-run-with-go-124rc2\"\u003e\u003ccode\u003egqlgen\u003c/code\u003e fails to run with Go 1.24rc2\u003c/h2\u003e\u003cp\u003eSomething I\u0026#39;ve noticed while playing around with this is that \u003ca href=\"https://github.com/99designs/gqlgen/issues/3505\"\u003e\u003ccode\u003egqlgen\u003c/code\u003e struggles to run with Go 1.24rc2\u003c/a\u003e, which \u003ca href=\"https://github.com/golang/go/issues/71448\"\u003efeels like an upstream Go issue\u003c/a\u003e, but it looks like that may be related to the use of \u003ccode\u003e/x/tools\u003c/code\u003e ðŸ¤”\u003c/p\u003e\u003cp\u003eIt may be interesting to find out what else gets affected by this - please give the RC a test!\u003c/p\u003e\u003ch2 id=\"closing\"\u003eClosing\u003c/h2\u003e\u003cp\u003eOverall, I\u0026#39;m feeling very positive about it, and improving the way that dependencies get installed \u003cem\u003eif they should be built from source\u003c/em\u003e, but there are dependencies such as \u003ccode\u003egolangci-lint\u003c/code\u003e which \u003ca href=\"https://golangci-lint.run/welcome/install/#install-from-sources\"\u003edon\u0026#39;t recommend building from source\u003c/a\u003e and instead using their pre-built binaries, which is fair, and is unlikely to change here.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-01-27T11:27:53Z",
  "modifiedTime": null
}
