{
  "id": "5fe610bd-7199-44a3-b737-353ae38c4c9d",
  "title": "A Raycaster in Bash",
  "link": "https://github.com/izabera/pseudo3d",
  "description": "Article URL: https://github.com/izabera/pseudo3d Comments URL: https://news.ycombinator.com/item?id=42475703 Points: 62 # Comments: 6",
  "author": "izabera",
  "published": "Fri, 20 Dec 2024 22:25:45 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "izabera",
  "length": 3468,
  "excerpt": "Contribute to izabera/pseudo3d development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "a raycaster in bash wolfenstein-in-bash.mp4 more screenshots/vidoes at https://imgur.com/a/izas-wolfenstein-bash-journey-bAy5zhp largely a port of https://lodev.org/cgtutor/raycasting.html use the arrow keys to rotate and move around, and q to quit why this was a bit hard: bash is slow. this is by far the biggest issue. it's so slow that you cannot possibly achieve an acceptable frame rate if you have to execute even a single command per pixel. this implies that you also cannot keep the state of the screen in memory, neither as an array of colours (did you know that accessing a random element in an array takes linear time?) nor as a single long string (did you know that accessing the nth character in a string takes linear time even in LANG=C?), because literally just reading this representation to dump it to the screen will take longer than a frame bash has no floating point support nor access to a library of maths functions. all the maths is done on integers, scaled up by 100000 terminals are ugly if you use a full character to represent each pixel, so this uses unicode half blocks with different foreground and background colours, which effectively doubles the vertical resolution. there is unfortunately no way to update only one of the two colours in a cell, nor any way to query the current colours of a cell (besides, it would be too slow for bash), so every time we write a pixel we need to know the colour of an adjacent pixel. it would be really convenient if bash could store the state somehow but alas it cannot various misc annoyances: making sure all the terminal is updated at once is not trivial with a slow language like bash most terminals are not designed to play video games in (shockingly), so you cannot test if a key is currently pressed. instead you can only get a single key that's being held down, usually really slowly debounced and with a low limit for continued presses, so you probably get like 5-6 characters a second. you cannot even get multiple keys pressed at the same time unless some are modifiers. the kitty keyboard protocol 100% fixes all this, and i'm sure it will become a widely implemented standard by the year 2100 turns out that filling a terminal with colours takes a lot of data. at my normal font size this does ~10mb of i/o per second, which isn't very much in the grand scheme of things, but, you know, it's bash bash will never use a single syscall to print a string with more than one newline, regardless of the type of file you're writing to. this is pointless and dumb, and it's the reason why this never prints \\n and always moves the cursor in other ways. ultimately this ended up printing more data than the size your terminal is likely getting in each read, so it might not matter too much, but it still bothered me ecma48/vt100/vt200/xterm... were all designed by insane people who hated me specifically holy shit i'm bad at maths, i went to uni for this what the fuck faq: q: it fucks things up when i resize the window/it's a flickery mess/it generally looks like shite on my terminal a: open an issue please q: my cpu heats up like crazy/my computer from 2005 slows down to a crawl a: try to set the env variable FPS to something less than 30 q: it doesn't work on my bash \u003c 5 a: yep q: is this code all pure bash? a: no. it also calls stty once at startup to disable echo, and once at exit to re enable it",
  "image": "https://opengraph.githubassets.com/cf16a2c6f6894ac1cd133bd2b96b5096f9d1ed48f582535f138d4717dc733a98/izabera/pseudo3d",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ea raycaster in bash\u003c/h2\u003e\u003ca id=\"user-content-a-raycaster-in-bash\" aria-label=\"Permalink: a raycaster in bash\" href=\"#a-raycaster-in-bash\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdetails open=\"\"\u003e\n  \u003csummary\u003e\n    \n    \u003cspan aria-label=\"Video description wolfenstein-in-bash.mp4\"\u003ewolfenstein-in-bash.mp4\u003c/span\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003c/summary\u003e\n\n  \u003cvideo src=\"https://private-user-images.githubusercontent.com/1572859/397868206-addb77f3-f309-48ab-8609-a8ea3082c952.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ3NDMzOTEsIm5iZiI6MTczNDc0MzA5MSwicGF0aCI6Ii8xNTcyODU5LzM5Nzg2ODIwNi1hZGRiNzdmMy1mMzA5LTQ4YWItODYwOS1hOGVhMzA4MmM5NTIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMjFUMDEwNDUxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MWUxNGUzNmM5MzM0ODc3OGMzMjI4N2U5NWE5YTc3YzhhMzM4YmNjZTdmMjg2YjI0YjBmMTQ1ODg1OGU3ZWU4ZSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.4EtdPLuP5U1SZJeSQcgcJxoKKL57IL7Mz32uqaP4vCM\" data-canonical-src=\"https://private-user-images.githubusercontent.com/1572859/397868206-addb77f3-f309-48ab-8609-a8ea3082c952.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ3NDMzOTEsIm5iZiI6MTczNDc0MzA5MSwicGF0aCI6Ii8xNTcyODU5LzM5Nzg2ODIwNi1hZGRiNzdmMy1mMzA5LTQ4YWItODYwOS1hOGVhMzA4MmM5NTIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMjFUMDEwNDUxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MWUxNGUzNmM5MzM0ODc3OGMzMjI4N2U5NWE5YTc3YzhhMzM4YmNjZTdmMjg2YjI0YjBmMTQ1ODg1OGU3ZWU4ZSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.4EtdPLuP5U1SZJeSQcgcJxoKKL57IL7Mz32uqaP4vCM\" controls=\"controls\" muted=\"muted\"\u003e\n\n  \u003c/video\u003e\n\u003c/details\u003e\n\n\u003cp dir=\"auto\"\u003emore screenshots/vidoes at \u003ca href=\"https://imgur.com/a/izas-wolfenstein-bash-journey-bAy5zhp\" rel=\"nofollow\"\u003ehttps://imgur.com/a/izas-wolfenstein-bash-journey-bAy5zhp\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003elargely a port of \u003ca href=\"https://lodev.org/cgtutor/raycasting.html\" rel=\"nofollow\"\u003ehttps://lodev.org/cgtutor/raycasting.html\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003euse the arrow keys to rotate and move around, and q to quit\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ewhy this was a bit hard:\u003c/h3\u003e\u003ca id=\"user-content-why-this-was-a-bit-hard\" aria-label=\"Permalink: why this was a bit hard:\" href=\"#why-this-was-a-bit-hard\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ebash is slow.  this is by far the biggest issue.  it\u0026#39;s so slow that you\ncannot possibly achieve an acceptable frame rate if you have to execute even\na single command per pixel.  this implies that you also cannot keep the state\nof the screen in memory, neither as an array of colours (did you know that\naccessing a random element in an array takes linear time?) nor as a single\nlong string (did you know that accessing the nth character in a string takes\nlinear time even in LANG=C?), because literally just reading this\nrepresentation to dump it to the screen will take longer than a frame\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ebash has no floating point support nor access to a library of maths\nfunctions. all the maths is done on integers, scaled up by 100000\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eterminals are ugly if you use a full character to represent each pixel, so\nthis uses unicode half blocks with different foreground and background\ncolours, which effectively doubles the vertical resolution.  there is\nunfortunately no way to update only one of the two colours in a cell, nor any\nway to query the current colours of a cell (besides, it would be too slow for\nbash), so every time we write a pixel we need to know the colour of an\nadjacent pixel.  it would be really convenient if bash could store the state\nsomehow but alas it cannot\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003evarious misc annoyances:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003emaking sure all the terminal is updated at once is not trivial with a\nslow language like bash\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003emost terminals are not designed to play video games in (shockingly), so\nyou cannot test if a key is currently pressed.  instead you can only get\na single key that\u0026#39;s being held down, usually really slowly debounced and\nwith a low limit for continued presses, so you probably get like 5-6\ncharacters a second.  you cannot even get multiple keys pressed at the\nsame time unless some are modifiers.  the kitty keyboard protocol 100%\nfixes all this, and i\u0026#39;m sure it will become a widely implemented standard\nby the year 2100\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eturns out that filling a terminal with colours takes a lot of data.  at\nmy normal font size this does ~10mb of i/o per second, which isn\u0026#39;t very\nmuch in the grand scheme of things, but, you know, it\u0026#39;s bash\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ebash will never use a single syscall to print a string with more than one\nnewline, regardless of the type of file you\u0026#39;re writing to.  this is\npointless and dumb, and it\u0026#39;s the reason why this never prints \\n and\nalways moves the cursor in other ways.  ultimately this ended up printing\nmore data than the size your terminal is likely getting in each read, so\nit might not matter too much, but it still bothered me\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eecma48/vt100/vt200/xterm... were all designed by insane people who hated\nme specifically\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eholy shit i\u0026#39;m bad at maths, i went to uni for this what the fuck\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003efaq:\u003c/h3\u003e\u003ca id=\"user-content-faq\" aria-label=\"Permalink: faq:\" href=\"#faq\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eq: it fucks things up when i resize the window/it\u0026#39;s a flickery mess/it\ngenerally looks like shite on my terminal\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ea: open an issue please\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eq: my cpu heats up like crazy/my computer from 2005 slows down to a crawl\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ea: try to set the env variable FPS to something less than 30\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eq: it doesn\u0026#39;t work on my bash \u0026lt; 5\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ea: yep\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eq: is this code all pure bash?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003ea: no.  it also calls stty once at startup to disable echo, and once at exit\nto re enable it\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
