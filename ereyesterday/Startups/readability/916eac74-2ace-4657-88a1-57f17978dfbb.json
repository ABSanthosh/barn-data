{
  "id": "916eac74-2ace-4657-88a1-57f17978dfbb",
  "title": "VMware Workstation Shifting from Proprietary Code to Using Upstream KVM",
  "link": "https://www.phoronix.com/news/VMware-Workstation-KVM",
  "description": "Article URL: https://www.phoronix.com/news/VMware-Workstation-KVM Comments URL: https://news.ycombinator.com/item?id=42013032 Points: 4 # Comments: 0",
  "author": "neitsab",
  "published": "Fri, 01 Nov 2024 00:50:42 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Written by Michael Larabel in Virtualization on 31 October 2024 at 08:57 PM EDT. 2 Comments",
  "length": 3052,
  "excerpt": "This isn't an off-schedule April Fools' Joke or anything like that but an exciting sign of the times: VMware Workstation will be shifting off its proprietary base and onto leveraging the upstream Linux Kernel-based Virtual Machine (KVM) for virtualization needs moving forward.",
  "siteName": "",
  "favicon": "https://www.phoronix.com/android-chrome-192x192.png",
  "text": "This isn't an off-schedule April Fools' Joke or anything like that but an exciting sign of the times: VMware Workstation will be shifting off its proprietary base and onto leveraging the upstream Linux Kernel-based Virtual Machine (KVM) for virtualization needs moving forward. This week a kernel patch series hit the Linux kernel mailing list by Broadcom (formerly VMware) engineer Zack Rusin entitled KVM: x86: Small changes to support VMware guests. That patch series explicitly lays out: \"To be able to switch VMware products running on Linux to KVM some minor changes are required to let KVM run/resume unmodified VMware guests. First allow enabling of the VMware backdoor via an api. Currently the setting of the VMware backdoor is limited to kernel boot parameters, which forces all VM's running on a host to either run with or without the VMware backdoor. Add a simple cap to allow enabling of the VMware backdoor on a per VM basis. The default for that setting remains the kvm.enable_vmware_backdoor boot parameter (which is false by default) and can be changed on a per-vm basis via the KVM_CAP_X86_VMWARE_BACKDOOR cap. Second add a cap to forward hypercalls to userspace. I know that in general that's frowned upon but VMwre guests send quite a few hypercalls from userspace and it would be both impractical and largelly impossible to handle all in the kernel. The change is trivial and I'd be maintaining this code so I hope it's not a big deal.\" Beyond the patch cover letter explicitly mentioning \"to be able to switch VMware products running on Linux to KVM\", I have been able to confirm directly with Broadcom that this indeed is in motion. VMware Workstation for desktop virtualization will indeed be shifting from their existing proprietary virtualization code and begin making use of the widely-used KVM code. However, Broadcom doesn't yet have a timeline for making this transition. In part that transition is going to depend upon how quickly their necessary KVM changes can be upstreamed and in turn picked up by the major Linux distributions. So with that said it will likely be well into 2025 at a minimum before an official transition given the length of the kernel merge windows and even longer before the non-rolling-release distributions upgrade to new kernel versions. But this move for VMware Workstation switching to KVM is indeed happening. I'm not sure I ever envisioned VMware abandoning their proprietary virtualization code in favor of leveraging upstream KVM but in any event it's a terrific success story for the upstream KVM community. VMware Workstation will presumably remain a commercial/proprietary product (but already with free personal use) as opposed to transitioning like a full open-source project but in any event to see their key proprietary virtualization code move in favor of the open-source KVM code is a huge accomplishment. In turn once this change happens, VMware Workstation is fundamentally a nice GUI alternative to other (free and open-source) options like GNOME Boxes and virt-manager.",
  "image": "https://www.phoronix.net/image.php?id=2024\u0026image=vmware_workstation_kvm",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003e\u003cimg alt=\"VIRTUALIZATION\" src=\"https://www.phoronix.com/assets/categories/virtualization.webp\" width=\"100\" height=\"100\"/\u003e\u003c/p\u003e\u003cp\u003e\nThis isn\u0026#39;t an off-schedule April Fools\u0026#39; Joke or anything like that but an exciting sign of the times: VMware Workstation will be shifting off its proprietary base and onto leveraging the upstream Linux Kernel-based Virtual Machine (KVM) for virtualization needs moving forward.\n\u003c/p\u003e\u003cp\u003e\nThis week a kernel patch series hit the Linux kernel mailing list by Broadcom (formerly VMware) engineer Zack Rusin entitled \u003ca href=\"https://lore.kernel.org/lkml/20241030033514.1728937-1-zack.rusin@broadcom.com/\"\u003eKVM: x86: Small changes to support VMware guests\u003c/a\u003e. That patch series explicitly lays out:\n\u003c/p\u003e\u003cblockquote\u003e\u0026#34;To be able to switch VMware products running on Linux to KVM some minor changes are required to let KVM run/resume unmodified VMware guests.\n\u003cp\u003e\nFirst allow enabling of the VMware backdoor via an api. Currently the setting of the VMware backdoor is limited to kernel boot parameters, which forces all VM\u0026#39;s running on a host to either run with or without the VMware backdoor. Add a simple cap to allow enabling of the VMware backdoor on a per VM basis. The default for that setting remains the kvm.enable_vmware_backdoor boot parameter (which is false by default) and can be changed on a per-vm basis via the KVM_CAP_X86_VMWARE_BACKDOOR cap.\n\u003c/p\u003e\u003cp\u003e\nSecond add a cap to forward hypercalls to userspace. I know that in general that\u0026#39;s frowned upon but VMwre guests send quite a few hypercalls from userspace and it would be both impractical and largelly impossible to handle all in the kernel. The change is trivial and I\u0026#39;d be maintaining this code so I hope it\u0026#39;s not a big deal.\u0026#34;\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eBeyond the patch cover letter explicitly mentioning \u0026#34;\u003cem\u003eto be able to switch VMware products running on Linux to KVM\u003c/em\u003e\u0026#34;, I have been able to confirm directly with Broadcom that this indeed is in motion. VMware Workstation for desktop virtualization will indeed be shifting from their existing proprietary virtualization code and begin making use of the widely-used KVM code.\n\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.phoronix.net/image.php?id=2024\u0026amp;image=vmware_workstation_kvm\" alt=\"VMware Workstation KVM patches\"/\u003e\u003c/p\u003e\n\u003cp\u003eHowever, Broadcom doesn\u0026#39;t yet have a timeline for making this transition. In part that transition is going to depend upon how quickly their necessary KVM changes can be upstreamed and in turn picked up by the major Linux distributions. So with that said it will likely be well into 2025 at a minimum before an official transition given the length of the kernel merge windows and even longer before the non-rolling-release distributions upgrade to new kernel versions. But this move for VMware Workstation switching to KVM is indeed happening.\n\u003c/p\u003e\u003cp\u003e\nI\u0026#39;m not sure I ever envisioned VMware abandoning their proprietary virtualization code in favor of leveraging upstream KVM but in any event it\u0026#39;s a terrific success story for the upstream KVM community. VMware Workstation will presumably remain a commercial/proprietary product (but already with free personal use) as opposed to transitioning like a full open-source project but in any event to see their key proprietary virtualization code move in favor of the open-source KVM code is a huge accomplishment. In turn once this change happens, VMware Workstation is fundamentally a nice GUI alternative to other (free and open-source) options like GNOME Boxes and virt-manager.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
