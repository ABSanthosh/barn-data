{
  "id": "db835630-f1c3-4866-8bf7-61b95ebf835f",
  "title": "Black Hat Rust",
  "link": "https://github.com/skerkour/black-hat-rust",
  "description": "Article URL: https://github.com/skerkour/black-hat-rust Comments URL: https://news.ycombinator.com/item?id=42361793 Points: 34 # Comments: 2",
  "author": "Eavolution",
  "published": "Sun, 08 Dec 2024 23:49:26 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "skerkour",
  "length": 6384,
  "excerpt": "Applied offensive security with Rust - https://kerkour.com/black-hat-rust - skerkour/black-hat-rust",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Black Hat Rust Applied offensive security with the Rust programming language Buy the book now! While the Rust Book does an excellent job teaching What is Rust, a book about Why and How to Rust was missing. Summary Whether in movies or mainstream media, hackers are often romanticized: they are painted as black magic wizards, nasty criminals, or, in the worst cases, as thieves with a hood and a crowbar. In reality, the spectrum of the profile of the attackers is extremely large, from the bored teenager exploring the internet to sovereign State's armies as well as the unhappy former employee. What are the motivations of the attackers? How can they break seemingly so easily into any network? What do they do to their victims? We will put on our black hat and explore the world of offensive security, whether it be cyber attacks, cybercrimes, or cyberwar. Scanners, exploits, phishing toolkit, implants... From theory to practice, we will explore the arcane of offensive security and build our own offensive tools with the Rust programming language, Stack Overflow's most loved language for five years in a row. Which programming language allows to craft shellcodes, build servers, create phishing pages? Before Rust, none! Rust is the long-awaited one-size-fits-all programming language meeting all those requirements thanks to its unparalleled guarantees and feature set. Here is why. Free Updates and DRM Free, of course :) Who this book is for This is NOT a 1000th tutorial about sqlmap and Metasploit, nor will it teach you the fundamentals of programming. Instead, it's a from-theory-to-practice guide and you may enjoy it if any of the following: You keep screaming \"show me the code!\" when reading about cyber attacks and malwares You are a developer and want to learn security You are a security engineer and want to learn Rust programming You want to learn real-world and idiomatic rust practices You believe that the best defense is thinking like an attacker You learn by building and love to look under the hood You value simplicity and pragmatism You develop your own tools and exploits with Python, Ruby, C, Java... You want to learn real-world offensive security, not just pentesting You want to start making money with bug bounty programs You prefer getting things done over analysis paralysis But I repeat, this book is NOT a computer science book. Buy the book now! Table of contents Preface 1 - Introduction Part I: Reconnaissance 2 - Multi-threaded attack surface discovery How to perform effective reconnaissance? In this chapter, we will build a multi-threaded scanner in order to automate the mapping of the target. 3 - Going full speed with async Unfortunately, when a program spends most of its time in I/O operations, multi-threading is not a panacea. We will learn how async makes Rust code really, really fast and refactor our scanner to async code. 4 - Adding modules with Trait objects We will add more heterogeneous modules to our scanner and will learn how Rust's type system helps create properly designed large software projects. 5 - Crawling the web for OSINT Leveraging all we learned previously, we will build an extremely fast web crawler to help us find the needles in the haystack the web is. Part II: Exploitation 6 - Finding vulnerabilities Once the external reconnaissance performed, it's time to find entry points. In this chapter we will learn how automated fuzzing can help us to find vulnerabilities that can be exploited to then gain access to our target's systems. 7 - Exploit development Rust may not be as fast as python when it comes to iterating on quick scripts such as exploits, but as we will see, its powerful type and modules system make it nonetheless a weapon of choice. 8 - Writing shellcodes in Rust Shellcode development is an ungrateful task. Writing assembly by hand is definitely not sexy. Fortunately for us, Rust, one more time, got our back! In this chapter we will learn how to write shellcodes in plain Rust with no_std. 9 - Phishing with WebAssembly When they can't find exploitable hardware or software vulnerability, attackers usually fall back to what is often the weakest link in the chain: Humans. Again, Rust comes handy and will let us create advanced phishing pages by compiling to WebAssembly. Part III: Implant development 10 - A modern RAT A RAT (for Remote Access Tool), also known as implant or beacon, is a kind of software used to perform offensive operations on a target's machines. In this chapter we will build our own RAT communicating to a remote server and database. 11 - Securing communications with end-to-end encryption The consequences of our own infrastructure being compromised or seized can be disastrous. We will add end-to-end encryption to our RAT's communication in order to secure its communications and avoid leaving traces on our servers. 12 - Going multi-platforms Today's computing landscape is extremely fragmented. From Windows to macOS, we can't target only one Operating System to ensure the success of our operations. In this section we will see how Rust's ecosystem is extremely useful when it comes to cross-compilation. 13 - Turning into a worm to increase reach Once the initial targets compromised, we will capitalize on Rust's excellent reusability to incorporate some parts of our initial scanner to turn our RAT into a worm and reach more targets only accessible from the target's internal network. 14 Conclusion Now it's your turn to get things done! Buy the book now! FAQ Can I pay with PayPal, Apple Pay or Google Pay? Yes! You can now buy Black Hat Rust with PayPal, Apple Pay or Google Pay. Go Here to proceed. What to do if I don't have a VAT number? A European VAT number is optional, and you can skip the field or leave it empty if asked. Community Hey! Welcome you to the Black Hat Rustaceans gang! If you think something in the book or the code can be improved, please open an issue. Pull requests are also welcome :) Newsletter Want to stay updated? I'll write you once a week about avoiding complexity, hacking, and entrepreneurship. https://kerkour.com/subscribe I hate spam even more than you do. I'll never share your email, and you can unsubscribe at anytime. Also, there is no tracking or ads. Changelog You'll find all the updates in the Changelog: https://github.com/skerkour/black-hat-rust/blob/main/CHANGELOG.md",
  "image": "https://opengraph.githubassets.com/5a9cd70d2c6e8b9073d745aae2c73d02faa7eb85f0907197f7ba509195a3cac8/skerkour/black-hat-rust",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\n  \u003ca href=\"https://kerkour.com/black-hat-rust\" rel=\"nofollow\"\u003e\u003cimg alt=\"Black Hat Rust logo\" src=\"https://github.com/skerkour/black-hat-rust/raw/main/black_hat_rust_cover.png\" height=\"300\"/\u003e\u003c/a\u003e\n  \u003c/p\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBlack Hat Rust\u003c/h2\u003e\u003ca id=\"user-content-black-hat-rust\" aria-label=\"Permalink: Black Hat Rust\" href=\"#black-hat-rust\"\u003e\u003c/a\u003e\u003c/p\u003e\n  \u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eApplied offensive security with the Rust programming language\u003c/h3\u003e\u003ca id=\"user-content-applied-offensive-security-with-the-rust-programming-language\" aria-label=\"Permalink: Applied offensive security with the Rust programming language\" href=\"#applied-offensive-security-with-the-rust-programming-language\"\u003e\u003c/a\u003e\u003c/p\u003e\n  \u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003e\n    \u003ca href=\"https://kerkour.com/black-hat-rust\" rel=\"nofollow\"\u003eBuy the book now!\u003c/a\u003e\n  \u003c/h3\u003e\u003ca id=\"user-content-----buy-the-book-now--\" aria-label=\"Permalink: Buy the book now!\" href=\"#----buy-the-book-now--\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eWhile the \u003ca href=\"https://doc.rust-lang.org/book/\" rel=\"nofollow\"\u003eRust Book\u003c/a\u003e does an excellent job teaching \u003cstrong\u003eWhat is\u003c/strong\u003e Rust, a book about \u003cstrong\u003eWhy\u003c/strong\u003e and \u003cstrong\u003eHow\u003c/strong\u003e to Rust was missing.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eSummary\u003c/h2\u003e\u003ca id=\"user-content-summary\" aria-label=\"Permalink: Summary\" href=\"#summary\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhether in movies or mainstream media, hackers are often romanticized: they are painted as black magic wizards, nasty criminals, or, in the worst cases, as thieves with a hood and a crowbar.\nIn reality, the spectrum of the profile of the attackers is extremely large, from the bored teenager exploring the internet to sovereign State\u0026#39;s armies as well as the unhappy former employee.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhat are the motivations of the attackers? How can they break seemingly so easily into any network? What do they do to their victims?\nWe will put on our black hat and explore the world of offensive security, whether it be cyber attacks, cybercrimes, or cyberwar.\nScanners, exploits, phishing toolkit, implants... From theory to practice, we will explore the arcane of offensive security and build our own offensive tools with the Rust programming language, Stack Overflow\u0026#39;s most loved language for five years in a row.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhich programming language allows to craft shellcodes, build servers, create phishing pages? Before Rust, none! Rust is the long-awaited one-size-fits-all programming language meeting all those requirements thanks to its unparalleled guarantees and feature set. Here is why.\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eFree Updates and DRM Free, of course :)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eWho this book is for\u003c/h2\u003e\u003ca id=\"user-content-who-this-book-is-for\" aria-label=\"Permalink: Who this book is for\" href=\"#who-this-book-is-for\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis is NOT a 1000th tutorial about sqlmap and Metasploit, nor will it teach you the fundamentals of programming.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstead, it\u0026#39;s a from-theory-to-practice guide and you may enjoy it if any of the following:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eYou keep screaming \u0026#34;show me the code!\u0026#34; when reading about cyber attacks and malwares\u003c/li\u003e\n\u003cli\u003eYou are a developer and want to learn security\u003c/li\u003e\n\u003cli\u003eYou are a security engineer and want to learn Rust programming\u003c/li\u003e\n\u003cli\u003eYou want to learn real-world and idiomatic rust practices\u003c/li\u003e\n\u003cli\u003eYou believe that the best defense is thinking like an attacker\u003c/li\u003e\n\u003cli\u003eYou learn by building and love to look under the hood\u003c/li\u003e\n\u003cli\u003eYou value simplicity and pragmatism\u003c/li\u003e\n\u003cli\u003eYou develop your own tools and exploits with Python, Ruby, C, Java...\u003c/li\u003e\n\u003cli\u003eYou want to learn real-world offensive security, not just pentesting\u003c/li\u003e\n\u003cli\u003eYou want to start making money with bug bounty programs\u003c/li\u003e\n\u003cli\u003eYou prefer getting things done over analysis paralysis\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eBut I repeat, this book is NOT a computer science book.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003e\n  \u003ca href=\"https://kerkour.com/black-hat-rust\" rel=\"nofollow\"\u003eBuy the book now!\u003c/a\u003e\n\u003c/h3\u003e\u003ca id=\"user-content---buy-the-book-now\" aria-label=\"Permalink: Buy the book now!\" href=\"#--buy-the-book-now\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTable of contents\u003c/h2\u003e\u003ca id=\"user-content-table-of-contents\" aria-label=\"Permalink: Table of contents\" href=\"#table-of-contents\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/0\" rel=\"nofollow\"\u003ePreface\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-preface\" aria-label=\"Permalink: Preface\" href=\"#preface\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/1\" rel=\"nofollow\"\u003e1 - Introduction\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-1---introduction\" aria-label=\"Permalink: 1 - Introduction\" href=\"#1---introduction\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePart I: Reconnaissance\u003c/h3\u003e\u003ca id=\"user-content-part-i-reconnaissance\" aria-label=\"Permalink: Part I: Reconnaissance\" href=\"#part-i-reconnaissance\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/2\" rel=\"nofollow\"\u003e2 - Multi-threaded attack surface discovery\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-2---multi-threaded-attack-surface-discovery\" aria-label=\"Permalink: 2 - Multi-threaded attack surface discovery\" href=\"#2---multi-threaded-attack-surface-discovery\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHow to perform effective reconnaissance? In this chapter, we will build a multi-threaded scanner in order to automate the mapping of the target.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/3\" rel=\"nofollow\"\u003e3 - Going full speed with async\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-3---going-full-speed-with-async\" aria-label=\"Permalink: 3 - Going full speed with async\" href=\"#3---going-full-speed-with-async\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eUnfortunately, when a program spends most of its time in I/O operations, multi-threading is not a panacea. We will learn how async makes Rust code really, really fast and refactor our scanner to async code.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/4\" rel=\"nofollow\"\u003e4 - Adding modules with Trait objects\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-4---adding-modules-with-trait-objects\" aria-label=\"Permalink: 4 - Adding modules with Trait objects\" href=\"#4---adding-modules-with-trait-objects\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWe will add more heterogeneous modules to our scanner and will learn how Rust\u0026#39;s type system helps create properly designed large software projects.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/5\" rel=\"nofollow\"\u003e5 - Crawling the web for OSINT\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-5---crawling-the-web-for-osint\" aria-label=\"Permalink: 5 - Crawling the web for OSINT\" href=\"#5---crawling-the-web-for-osint\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eLeveraging all we learned previously, we will build an extremely fast web crawler to help us find the needles in the haystack the web is.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePart II: Exploitation\u003c/h3\u003e\u003ca id=\"user-content-part-ii-exploitation\" aria-label=\"Permalink: Part II: Exploitation\" href=\"#part-ii-exploitation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/6\" rel=\"nofollow\"\u003e6 - Finding vulnerabilities\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-6---finding-vulnerabilities\" aria-label=\"Permalink: 6 - Finding vulnerabilities\" href=\"#6---finding-vulnerabilities\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOnce the external reconnaissance performed, it\u0026#39;s time to find entry points. In this chapter we will learn how automated fuzzing can help us to find vulnerabilities that can be exploited to then gain access to our target\u0026#39;s systems.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/7\" rel=\"nofollow\"\u003e7 - Exploit development\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-7---exploit-development\" aria-label=\"Permalink: 7 - Exploit development\" href=\"#7---exploit-development\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRust may not be as fast as python when it comes to iterating on quick scripts such as exploits, but as we will see, its powerful type and modules system make it nonetheless a weapon of choice.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/8\" rel=\"nofollow\"\u003e8 - Writing shellcodes in Rust\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-8---writing-shellcodes-in-rust\" aria-label=\"Permalink: 8 - Writing shellcodes in Rust\" href=\"#8---writing-shellcodes-in-rust\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eShellcode development is an ungrateful task. Writing assembly by hand is definitely not sexy. Fortunately for us, Rust, one more time, got our back! In this chapter we will learn how to write shellcodes in plain Rust with no_std.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/9\" rel=\"nofollow\"\u003e9 - Phishing with WebAssembly\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-9---phishing-with-webassembly\" aria-label=\"Permalink: 9 - Phishing with WebAssembly\" href=\"#9---phishing-with-webassembly\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhen they can\u0026#39;t find exploitable hardware or software vulnerability, attackers usually fall back to what is often the weakest link in the chain: Humans.\nAgain, Rust comes handy and will let us create advanced phishing pages by compiling to WebAssembly.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePart III: Implant development\u003c/h3\u003e\u003ca id=\"user-content-part-iii-implant-development\" aria-label=\"Permalink: Part III: Implant development\" href=\"#part-iii-implant-development\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/10\" rel=\"nofollow\"\u003e10 - A modern RAT\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-10---a-modern-rat\" aria-label=\"Permalink: 10 - A modern RAT\" href=\"#10---a-modern-rat\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA RAT (for Remote Access Tool), also known as implant or beacon, is a kind of software used to perform offensive operations on a target\u0026#39;s machines. In this chapter we will build our own RAT communicating to a remote server and database.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/11\" rel=\"nofollow\"\u003e11 - Securing communications with end-to-end encryption\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-11---securing-communications-with-end-to-end-encryption\" aria-label=\"Permalink: 11 - Securing communications with end-to-end encryption\" href=\"#11---securing-communications-with-end-to-end-encryption\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe consequences of our own infrastructure being compromised or seized can be disastrous. We will add end-to-end encryption to our RAT\u0026#39;s communication in order to secure its communications and avoid leaving traces on our servers.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/12\" rel=\"nofollow\"\u003e12 - Going multi-platforms\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-12---going-multi-platforms\" aria-label=\"Permalink: 12 - Going multi-platforms\" href=\"#12---going-multi-platforms\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eToday\u0026#39;s computing landscape is extremely fragmented. From Windows to macOS, we can\u0026#39;t target only one Operating System to ensure the success of our operations. In this section we will see how Rust\u0026#39;s ecosystem is extremely useful when it comes to cross-compilation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/13\" rel=\"nofollow\"\u003e13 - Turning into a worm to increase reach\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-13---turning-into-a-worm-to-increase-reach\" aria-label=\"Permalink: 13 - Turning into a worm to increase reach\" href=\"#13---turning-into-a-worm-to-increase-reach\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOnce the initial targets compromised, we will capitalize on Rust\u0026#39;s excellent reusability to incorporate some parts of our initial scanner to turn our RAT into a worm and reach more targets only accessible from the target\u0026#39;s internal network.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ca href=\"https://kerkour.com/black-hat-rust/14\" rel=\"nofollow\"\u003e14 Conclusion\u003c/a\u003e\u003c/h4\u003e\u003ca id=\"user-content-14-conclusion\" aria-label=\"Permalink: 14 Conclusion\" href=\"#14-conclusion\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNow it\u0026#39;s \u003cstrong\u003eyour\u003c/strong\u003e turn to get things done!\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003e\n  \u003ca href=\"https://kerkour.com/black-hat-rust\" rel=\"nofollow\"\u003eBuy the book now!\u003c/a\u003e\n\u003c/h3\u003e\u003ca id=\"user-content---buy-the-book-now-1\" aria-label=\"Permalink: Buy the book now!\" href=\"#--buy-the-book-now-1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eFAQ\u003c/h2\u003e\u003ca id=\"user-content-faq\" aria-label=\"Permalink: FAQ\" href=\"#faq\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCan I pay with PayPal, Apple Pay or Google Pay?\u003c/h3\u003e\u003ca id=\"user-content-can-i-pay-with-paypal-apple-pay-or-google-pay\" aria-label=\"Permalink: Can I pay with PayPal, Apple Pay or Google Pay?\" href=\"#can-i-pay-with-paypal-apple-pay-or-google-pay\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYes! You can now buy Black Hat Rust with PayPal, Apple Pay or Google Pay. \u003ca href=\"https://kerkour.com/black-hat-rust\" rel=\"nofollow\"\u003eGo Here to proceed\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eWhat to do if I don\u0026#39;t have a VAT number?\u003c/h3\u003e\u003ca id=\"user-content-what-to-do-if-i-dont-have-a-vat-number\" aria-label=\"Permalink: What to do if I don\u0026#39;t have a VAT number?\" href=\"#what-to-do-if-i-dont-have-a-vat-number\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA European VAT number is optional, and you can skip the field or leave it empty if asked.\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eCommunity\u003c/h2\u003e\u003ca id=\"user-content-community\" aria-label=\"Permalink: Community\" href=\"#community\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHey! Welcome you to the Black Hat Rustaceans gang! If you think something in the book or the code can be improved, please \u003ca href=\"https://github.com/skerkour/black-hat-rust/issues\"\u003eopen an issue\u003c/a\u003e. Pull requests are also welcome :)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eNewsletter\u003c/h2\u003e\u003ca id=\"user-content-newsletter\" aria-label=\"Permalink: Newsletter\" href=\"#newsletter\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWant to stay updated? I\u0026#39;ll write you once a week about avoiding complexity, hacking, and entrepreneurship.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003e\u003ca href=\"https://kerkour.com/subscribe\" rel=\"nofollow\"\u003ehttps://kerkour.com/subscribe\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cem\u003eI hate spam even more than you do. I\u0026#39;ll never share your email, and you can unsubscribe at anytime. Also, there is no tracking or ads.\u003c/em\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eChangelog\u003c/h2\u003e\u003ca id=\"user-content-changelog\" aria-label=\"Permalink: Changelog\" href=\"#changelog\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou\u0026#39;ll find all the updates in the Changelog: \u003ca href=\"https://github.com/skerkour/black-hat-rust/blob/main/CHANGELOG.md\"\u003ehttps://github.com/skerkour/black-hat-rust/blob/main/CHANGELOG.md\u003c/a\u003e\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
