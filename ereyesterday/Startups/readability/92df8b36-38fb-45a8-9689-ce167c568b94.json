{
  "id": "92df8b36-38fb-45a8-9689-ce167c568b94",
  "title": "RGFW: Single-header C99 window abstraction library",
  "link": "https://github.com/ColleagueRiley/RGFW",
  "description": "Article URL: https://github.com/ColleagueRiley/RGFW Comments URL: https://news.ycombinator.com/item?id=42217535 Points: 47 # Comments: 2",
  "author": "klaussilveira",
  "published": "Fri, 22 Nov 2024 21:31:51 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "ColleagueRiley",
  "length": 7021,
  "excerpt": "A cross platform lightweight single-header simple-to-use window abstraction library for creating graphical programs or libraries. - ColleagueRiley/RGFW",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Riley's Graphics library FrameWork Build statuses A cross-platform lightweight single-header very simple-to-use window abstraction library for creating graphics Libraries or simple graphical programs. Written in pure C99. About RGFW is a free multi-platform single-header very simple-to-use window abstraction framework for creating graphics Libraries or simple graphical programs. it is meant to be used as a very small and flexible alternative library to GLFW. The window backend supports XLib (UNIX), Cocoas (MacOS), webASM (emscripten) and WinAPI (tested on windows XP, 10 and 11, and reactOS) Windows 95 \u0026 98 have also been tested with RGFW, although results are iffy Wayland: to compile wayland add (RGFW_WAYLAND=1). Wayland support is very experimental and broken. The graphics backend supports OpenGL (EGL, software, OSMesa, GLES), Vulkan, DirectX, Metal and software rendering buffers. RGFW was designed as a backend for RSGL, but it can be used standalone or for other libraries, such as Raylib which uses it as an optional alternative backend. RGFW is multi-paradigm, By default RGFW uses a flexible event system, similar to that of SDL, however you can use callbacks if you prefer that method. This library is single header and portable (written in C99 in mind) is very small compared to other libraries only depends on system API libraries, Winapi, X11, Cocoa lets you create a window with a graphics context (OpenGL, Vulkan or DirectX) and manage the window and its events only with a few function calls This library does not Handle any rendering for you (other than creating your graphics context) do anything above the bare minimum in terms of functionality Officially tested Platforms Linux Raspberry PI OS Windows, (XP, Windows 10, 11, ReactOS) MacOS, (10.13, 10.14, 14.5) (x86_64) HTML5 (webasm / Emscripten) Supported GUI libraries A list of GUI libraries that can be used with RGFW can be found on the RGFW wiki here examples The examples can also run in your browser with emscripten compiling The examples can be compiled by using make debug, which compiles them in debug mode and then runs them or make which simply compiles them. The dx11 example has its own Makefile functions because it is Windows only, those include make DX11 and make debugDX11 You can do CC=compiler to specify a specific compiler Tested and supported compilers include, gcc, clang, [x86_64 / i686-w64]-w64-mingw32-gcc, cl (linux AND windows) tcc has also been tested but work on linux only basic A basic example can be found in examples/basic, it includes a basic OpenGL example of just about all of RGFW's functionalities. events The event example can be found in examples/events, it shows all the events and the data they send. callbacks The callback example can be found in examples/callbacks, it shows all the events and the data they send, but processed with callbacks instead. dx11 examples/dx11 is a minimalistic example of the use of DirectX with RGFW gl33 examples/gl33 is a minimalistic example of the use of OpenGL 3.3 with RGFW, this example was made by AICDG gles2 examples/gles2 is a minimalistic example of the use of OpenGL ES 2 with RGFW vk10 examples/vk10 is a minimalistic example of the use of Vulkan with RGFW, this example was made by AICDG It also includes examples/vk10/RGFW_vulkan.h which can be used to create a basic vulkan context for RGFW. basic A basic example can be found in examples/basic, it includes a basic OpenGL example of just about all of RGFW's functionalities. buff examples/buffer is an example that shows how you can use software rendering with RGFW using RGFW_BUFFER mode which allows you to render directly to the window's draw buffer. PortableGL examples/PortableGL is an example that shows how you'd use RGFW with portablegl.h. first person camera examples/first-person-camera is an example that shows how you'd make a game with a first person camera with RGFW a very simple example #define RGFW_IMPLEMENTATION #include \"RGFW.h\" u8 icon[4 * 3 * 3] = {0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF}; void keyfunc(RGFW_window* win, u32 keycode, char keyName[16], u8 lockState, u8 pressed) { printf(\"this is probably early\\n\"); } int main() { RGFW_window* win = RGFW_createWindow(\"name\", RGFW_RECT(500, 500, 500, 500), (u64)RGFW_CENTER); RGFW_window_setIcon(win, icon, RGFW_AREA(3, 3), 4); RGFW_setKeyCallback(keyfunc); // you can use callbacks like this if you want i32 running = 1; while (running) { while (RGFW_window_checkEvent(win)) { // or RGFW_window_checkEvents(); if you only want callbacks if (win-\u003eevent.type == RGFW_quit || RGFW_isPressed(win, RGFW_Escape)) { running = 0; break; } if (win-\u003eevent.type == RGFW_keyPressed) // this is the 'normal' way of handling an event printf(\"This is probably late\\n\"); } glClearColor(0xFF / 255.0f, 0XFF / 255.0f, 0xFF / 255.0f, 0xFF / 255.0f); glClear(GL_COLOR_BUFFER_BIT); RGFW_window_swapBuffers(win); } RGFW_window_close(win); } linux : gcc main.c -lX11 -lXcursor -lGL windows : gcc main.c -lopengl32 -lshell32 -lgdi32 macos : gcc main.c -framework Foundation -framework AppKit -framework OpenGL -framework CoreVideo Documentation There is a lot of in-header-documentation, but more documentation can be found at https://colleagueriley.github.io/RGFW/docs/index.html If you wish to build the documentation yourself, there is also a Doxygen file attached. Bindings A list of bindings can be found on the RGFW wiki here projects A list of projects that use RGFW can be found on the RGFW wiki here Contacts email : ColleagueRiley@gmail.com discord : ColleagueRiley discord server : https://discord.gg/pXVNgVVbvh Supporting RGFW There is a RGFW wiki page about things you can do if you want to support the development of RGFW here. RGFW vs GLFW A comparison of RGFW and GLFW can be found at on the wiki License RGFW uses the Zlib/libPNG license, this means you can use RGFW freely as long as you do not claim you wrote this software, mark altered versions as such and keep the license included with the header. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution.",
  "image": "https://opengraph.githubassets.com/3262f4c1ffc462bbb4cb5606a21a078eb131d102a5d139f17f64ebe8abe7f171/ColleagueRiley/RGFW",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRiley\u0026#39;s Graphics library FrameWork\u003c/h2\u003e\u003ca id=\"user-content-rileys-graphics-library-framework\" aria-label=\"Permalink: Riley\u0026#39;s Graphics library FrameWork\" href=\"#rileys-graphics-library-framework\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ColleagueRiley/RGFW/blob/main/logo.png?raw=true\"\u003e\u003cimg src=\"https://github.com/ColleagueRiley/RGFW/raw/main/logo.png?raw=true\" alt=\"THE RGFW Logo\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBuild statuses\u003c/h2\u003e\u003ca id=\"user-content-build-statuses\" aria-label=\"Permalink: Build statuses\" href=\"#build-statuses\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/linux.yml/badge.svg\"\u003e\u003cimg src=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/linux.yml/badge.svg\" alt=\"workflow\"/\u003e\u003c/a\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/windows.yml/badge.svg\"\u003e\u003cimg src=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/windows.yml/badge.svg\" alt=\"workflow windows\"/\u003e\u003c/a\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/macos.yml/badge.svg\"\u003e\u003cimg src=\"https://github.com/ColleagueRiley/RGFW/actions/workflows/macos.yml/badge.svg\" alt=\"workflow macOS\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA cross-platform lightweight single-header very simple-to-use window abstraction library for creating graphics Libraries or simple graphical programs. Written in pure C99.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eAbout\u003c/h2\u003e\u003ca id=\"user-content-about\" aria-label=\"Permalink: About\" href=\"#about\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRGFW is a free multi-platform single-header very simple-to-use window abstraction framework for creating graphics Libraries or simple graphical programs. it is meant to be used as a very small and flexible alternative library to GLFW.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe window backend supports XLib (UNIX), Cocoas (MacOS), webASM (emscripten) and WinAPI (tested on windows \u003cem\u003eXP\u003c/em\u003e, 10 and 11, and reactOS)\u003cbr/\u003e\nWindows 95 \u0026amp; 98 have also been tested with RGFW, although results are iffy\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWayland: to compile wayland add (RGFW_WAYLAND=1). Wayland support is very experimental and broken.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe graphics backend supports OpenGL (EGL, software, OSMesa, GLES), Vulkan, DirectX, \u003ca href=\"https://github.com/RSGL/RGFW-Metal\"\u003eMetal\u003c/a\u003e and software rendering buffers.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRGFW was designed as a backend for RSGL, but it can be used standalone or for other libraries, such as Raylib which uses it as an optional alternative backend.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRGFW is multi-paradigm,\u003cbr/\u003e\nBy default RGFW uses a flexible event system, similar to that of SDL, however you can use callbacks if you prefer that method.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis library\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eis single header and portable (written in C99 in mind)\u003c/li\u003e\n\u003cli\u003eis very small compared to other libraries\u003c/li\u003e\n\u003cli\u003eonly depends on system API libraries, Winapi, X11, Cocoa\u003c/li\u003e\n\u003cli\u003elets you create a window with a graphics context (OpenGL, Vulkan or DirectX) and manage the window and its events only with a few function calls\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003eThis library does not\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eHandle any rendering for you (other than creating your graphics context)\u003c/li\u003e\n\u003cli\u003edo anything above the bare minimum in terms of functionality\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eOfficially tested Platforms\u003c/h2\u003e\u003ca id=\"user-content-officially-tested-platforms\" aria-label=\"Permalink: Officially tested Platforms\" href=\"#officially-tested-platforms\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eLinux\u003c/li\u003e\n\u003cli\u003eRaspberry PI OS\u003c/li\u003e\n\u003cli\u003eWindows, (XP, Windows 10, 11, ReactOS)\u003c/li\u003e\n\u003cli\u003eMacOS, (10.13, 10.14, 14.5) (x86_64)\u003c/li\u003e\n\u003cli\u003eHTML5 (webasm / Emscripten)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eSupported GUI libraries\u003c/h2\u003e\u003ca id=\"user-content-supported-gui-libraries\" aria-label=\"Permalink: Supported GUI libraries\" href=\"#supported-gui-libraries\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA list of GUI libraries that can be used with RGFW can be found on the RGFW wiki \u003ca href=\"https://github.com/ColleagueRiley/RGFW/wiki/GUI-libraries-that-can-be-used-with-RGFW\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eexamples\u003c/h2\u003e\u003ca id=\"user-content-examples\" aria-label=\"Permalink: examples\" href=\"#examples\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ColleagueRiley/RGFW/blob/main/screenshot.PNG?raw=true\"\u003e\u003cimg src=\"https://github.com/ColleagueRiley/RGFW/raw/main/screenshot.PNG?raw=true\" alt=\"examples\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe examples can also \u003ca href=\"https://colleagueriley.github.io/RGFW/\" rel=\"nofollow\"\u003erun in your browser\u003c/a\u003e with emscripten\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ecompiling\u003c/h2\u003e\u003ca id=\"user-content-compiling\" aria-label=\"Permalink: compiling\" href=\"#compiling\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe examples can be compiled by using \u003ccode\u003emake debug\u003c/code\u003e, which compiles them in debug mode and then runs them\u003cbr/\u003e\nor \u003ccode\u003emake\u003c/code\u003e which simply compiles them.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe dx11 example has its own Makefile functions because it is Windows only, those include\n\u003ccode\u003emake DX11\u003c/code\u003e and \u003ccode\u003emake debugDX11\u003c/code\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can do CC=\u003ccode\u003ecompiler\u003c/code\u003e to specify a specific compiler\u003cbr/\u003e\nTested and supported compilers include, \u003ccode\u003egcc\u003c/code\u003e, \u003ccode\u003eclang\u003c/code\u003e, \u003ccode\u003e[x86_64 / i686-w64]-w64-mingw32-gcc\u003c/code\u003e, \u003ccode\u003ecl\u003c/code\u003e (linux AND windows)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003etcc\u003c/code\u003e has also been tested but work on linux only\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ebasic\u003c/h2\u003e\u003ca id=\"user-content-basic\" aria-label=\"Permalink: basic\" href=\"#basic\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA basic example can be found in \u003ccode\u003eexamples/basic\u003c/code\u003e, it includes a basic OpenGL example of just about all of RGFW\u0026#39;s functionalities.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eevents\u003c/h2\u003e\u003ca id=\"user-content-events\" aria-label=\"Permalink: events\" href=\"#events\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe event example can be found in \u003ccode\u003eexamples/events\u003c/code\u003e, it shows all the events and the data they send.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ecallbacks\u003c/h2\u003e\u003ca id=\"user-content-callbacks\" aria-label=\"Permalink: callbacks\" href=\"#callbacks\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe callback example can be found in \u003ccode\u003eexamples/callbacks\u003c/code\u003e, it shows all the events and the data they send, but processed with callbacks instead.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003edx11\u003c/h2\u003e\u003ca id=\"user-content-dx11\" aria-label=\"Permalink: dx11\" href=\"#dx11\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/dx11\u003c/code\u003e is a minimalistic example of the use of DirectX with RGFW\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003egl33\u003c/h2\u003e\u003ca id=\"user-content-gl33\" aria-label=\"Permalink: gl33\" href=\"#gl33\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/gl33\u003c/code\u003e is a minimalistic example of the use of OpenGL 3.3 with RGFW, this example was made by \u003ca href=\"https://github.com/THISISAGOODNAME\"\u003eAICDG\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003egles2\u003c/h2\u003e\u003ca id=\"user-content-gles2\" aria-label=\"Permalink: gles2\" href=\"#gles2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/gles2\u003c/code\u003e is a minimalistic example of the use of OpenGL ES 2 with RGFW\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003evk10\u003c/h2\u003e\u003ca id=\"user-content-vk10\" aria-label=\"Permalink: vk10\" href=\"#vk10\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/vk10\u003c/code\u003e is a minimalistic example of the use of Vulkan with RGFW, this example was made by \u003ca href=\"https://github.com/THISISAGOODNAME\"\u003eAICDG\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIt also includes \u003ccode\u003eexamples/vk10/RGFW_vulkan.h\u003c/code\u003e which can be used to create a basic vulkan context for RGFW.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ebasic\u003c/h2\u003e\u003ca id=\"user-content-basic-1\" aria-label=\"Permalink: basic\" href=\"#basic-1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA basic example can be found in \u003ccode\u003eexamples/basic\u003c/code\u003e, it includes a basic OpenGL example of just about all of RGFW\u0026#39;s functionalities.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ebuff\u003c/h2\u003e\u003ca id=\"user-content-buff\" aria-label=\"Permalink: buff\" href=\"#buff\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/buffer\u003c/code\u003e is an example that shows how you can use software rendering with RGFW using RGFW_BUFFER mode which allows you to render directly to the window\u0026#39;s draw buffer.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ePortableGL\u003c/h2\u003e\u003ca id=\"user-content-portablegl\" aria-label=\"Permalink: PortableGL\" href=\"#portablegl\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/PortableGL\u003c/code\u003e is an example that shows how you\u0026#39;d use RGFW with \u003ccode\u003eportablegl.h\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003efirst person camera\u003c/h2\u003e\u003ca id=\"user-content-first-person-camera\" aria-label=\"Permalink: first person camera\" href=\"#first-person-camera\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eexamples/first-person-camera\u003c/code\u003e is an example that shows how you\u0026#39;d make a game with a first person camera with RGFW\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ea very simple example\u003c/h2\u003e\u003ca id=\"user-content-a-very-simple-example\" aria-label=\"Permalink: a very simple example\" href=\"#a-very-simple-example\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"#define RGFW_IMPLEMENTATION\n#include \u0026#34;RGFW.h\u0026#34;\n\nu8 icon[4 * 3 * 3] = {0xFF, 0x00, 0x00, 0xFF,    0xFF, 0x00, 0x00, 0xFF,     0xFF, 0x00, 0x00, 0xFF,   0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,     0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF};\n\nvoid keyfunc(RGFW_window* win, u32 keycode, char keyName[16], u8 lockState, u8 pressed) {\n    printf(\u0026#34;this is probably early\\n\u0026#34;);\n}\n\nint main() {\n    RGFW_window* win = RGFW_createWindow(\u0026#34;name\u0026#34;, RGFW_RECT(500, 500, 500, 500), (u64)RGFW_CENTER);\n\n    RGFW_window_setIcon(win, icon, RGFW_AREA(3, 3), 4);\n    \n    RGFW_setKeyCallback(keyfunc); // you can use callbacks like this if you want \n\n    i32 running = 1;\n\n    while (running) {\n        while (RGFW_window_checkEvent(win)) { // or RGFW_window_checkEvents(); if you only want callbacks\n            if (win-\u0026gt;event.type == RGFW_quit || RGFW_isPressed(win, RGFW_Escape)) {\n                running = 0;\n                break;\n            }\n\n            if (win-\u0026gt;event.type == RGFW_keyPressed) // this is the \u0026#39;normal\u0026#39; way of handling an event\n                printf(\u0026#34;This is probably late\\n\u0026#34;);\n        }\n        \n        glClearColor(0xFF / 255.0f, 0XFF / 255.0f, 0xFF / 255.0f, 0xFF / 255.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        RGFW_window_swapBuffers(win);\n    }\n\n    RGFW_window_close(win);\n}\"\u003e\u003cpre\u003e\u003cspan\u003e#define\u003c/span\u003e \u003cspan\u003eRGFW_IMPLEMENTATION\u003c/span\u003e\n\u003cspan\u003e#include\u003c/span\u003e \u003cspan\u003e\u0026#34;RGFW.h\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eu8\u003c/span\u003e \u003cspan\u003eicon\u003c/span\u003e[\u003cspan\u003e4\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e] \u003cspan\u003e=\u003c/span\u003e {\u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e,    \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e,     \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e,   \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e,     \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0x00\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e};\n\n\u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003ekeyfunc\u003c/span\u003e(\u003cspan\u003eRGFW_window\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e \u003cspan\u003ewin\u003c/span\u003e, \u003cspan\u003eu32\u003c/span\u003e \u003cspan\u003ekeycode\u003c/span\u003e, \u003cspan\u003echar\u003c/span\u003e \u003cspan\u003ekeyName\u003c/span\u003e[\u003cspan\u003e16\u003c/span\u003e], \u003cspan\u003eu8\u003c/span\u003e \u003cspan\u003elockState\u003c/span\u003e, \u003cspan\u003eu8\u003c/span\u003e \u003cspan\u003epressed\u003c/span\u003e) {\n    \u003cspan\u003eprintf\u003c/span\u003e(\u003cspan\u003e\u0026#34;this is probably early\\n\u0026#34;\u003c/span\u003e);\n}\n\n\u003cspan\u003eint\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e() {\n    \u003cspan\u003eRGFW_window\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e \u003cspan\u003ewin\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eRGFW_createWindow\u003c/span\u003e(\u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e, \u003cspan\u003eRGFW_RECT\u003c/span\u003e(\u003cspan\u003e500\u003c/span\u003e, \u003cspan\u003e500\u003c/span\u003e, \u003cspan\u003e500\u003c/span\u003e, \u003cspan\u003e500\u003c/span\u003e), (\u003cspan\u003eu64\u003c/span\u003e)\u003cspan\u003eRGFW_CENTER\u003c/span\u003e);\n\n    \u003cspan\u003eRGFW_window_setIcon\u003c/span\u003e(\u003cspan\u003ewin\u003c/span\u003e, \u003cspan\u003eicon\u003c/span\u003e, \u003cspan\u003eRGFW_AREA\u003c/span\u003e(\u003cspan\u003e3\u003c/span\u003e, \u003cspan\u003e3\u003c/span\u003e), \u003cspan\u003e4\u003c/span\u003e);\n    \n    \u003cspan\u003eRGFW_setKeyCallback\u003c/span\u003e(\u003cspan\u003ekeyfunc\u003c/span\u003e); \u003cspan\u003e// you can use callbacks like this if you want \u003c/span\u003e\n\n    \u003cspan\u003ei32\u003c/span\u003e \u003cspan\u003erunning\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e;\n\n    \u003cspan\u003ewhile\u003c/span\u003e (\u003cspan\u003erunning\u003c/span\u003e) {\n        \u003cspan\u003ewhile\u003c/span\u003e (\u003cspan\u003eRGFW_window_checkEvent\u003c/span\u003e(\u003cspan\u003ewin\u003c/span\u003e)) { \u003cspan\u003e// or RGFW_window_checkEvents(); if you only want callbacks\u003c/span\u003e\n            \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003ewin\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e.\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eRGFW_quit\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003eRGFW_isPressed\u003c/span\u003e(\u003cspan\u003ewin\u003c/span\u003e, \u003cspan\u003eRGFW_Escape\u003c/span\u003e)) {\n                \u003cspan\u003erunning\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e;\n                \u003cspan\u003ebreak\u003c/span\u003e;\n            }\n\n            \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003ewin\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e.\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eRGFW_keyPressed\u003c/span\u003e) \u003cspan\u003e// this is the \u0026#39;normal\u0026#39; way of handling an event\u003c/span\u003e\n                \u003cspan\u003eprintf\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is probably late\\n\u0026#34;\u003c/span\u003e);\n        }\n        \n        \u003cspan\u003eglClearColor\u003c/span\u003e(\u003cspan\u003e0xFF\u003c/span\u003e / \u003cspan\u003e255.0f\u003c/span\u003e, \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003eXFF\u003c/span\u003e / \u003cspan\u003e255.0f\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e / \u003cspan\u003e255.0f\u003c/span\u003e, \u003cspan\u003e0xFF\u003c/span\u003e / \u003cspan\u003e255.0f\u003c/span\u003e);\n        \u003cspan\u003eglClear\u003c/span\u003e(\u003cspan\u003eGL_COLOR_BUFFER_BIT\u003c/span\u003e);\n\n        \u003cspan\u003eRGFW_window_swapBuffers\u003c/span\u003e(\u003cspan\u003ewin\u003c/span\u003e);\n    }\n\n    \u003cspan\u003eRGFW_window_close\u003c/span\u003e(\u003cspan\u003ewin\u003c/span\u003e);\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"linux : gcc main.c -lX11 -lXcursor -lGL\nwindows : gcc main.c -lopengl32 -lshell32 -lgdi32\nmacos : gcc main.c -framework Foundation -framework AppKit -framework OpenGL -framework CoreVideo\"\u003e\u003cpre\u003elinux \u003cspan\u003e:\u003c/span\u003e gcc main.c -lX11 -lXcursor -lGL\nwindows \u003cspan\u003e:\u003c/span\u003e gcc main.c -lopengl32 -lshell32 -lgdi32\nmacos \u003cspan\u003e:\u003c/span\u003e gcc main.c -framework Foundation -framework AppKit -framework OpenGL -framework CoreVideo\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eDocumentation\u003c/h2\u003e\u003ca id=\"user-content-documentation\" aria-label=\"Permalink: Documentation\" href=\"#documentation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThere is a lot of in-header-documentation, but more documentation can be found at \u003ca href=\"https://colleagueriley.github.io/RGFW/docs/index.html\" rel=\"nofollow\"\u003ehttps://colleagueriley.github.io/RGFW/docs/index.html\u003c/a\u003e\nIf you wish to build the documentation yourself, there is also a Doxygen file attached.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBindings\u003c/h2\u003e\u003ca id=\"user-content-bindings\" aria-label=\"Permalink: Bindings\" href=\"#bindings\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA list of bindings can be found on the RGFW wiki \u003ca href=\"https://github.com/ColleagueRiley/RGFW/wiki/Bindings\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eprojects\u003c/h2\u003e\u003ca id=\"user-content-projects\" aria-label=\"Permalink: projects\" href=\"#projects\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA list of projects that use RGFW can be found on the RGFW wiki \u003ca href=\"https://github.com/ColleagueRiley/RGFW/wiki/Projects-that-use-RGFW\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eContacts\u003c/h2\u003e\u003ca id=\"user-content-contacts\" aria-label=\"Permalink: Contacts\" href=\"#contacts\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eemail : \u003ca href=\"mailto:ColleagueRiley@gmail.com\"\u003eColleagueRiley@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ediscord : ColleagueRiley\u003c/li\u003e\n\u003cli\u003ediscord server : \u003ca href=\"https://discord.gg/pXVNgVVbvh\" rel=\"nofollow\"\u003ehttps://discord.gg/pXVNgVVbvh\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eSupporting RGFW\u003c/h2\u003e\u003ca id=\"user-content-supporting-rgfw\" aria-label=\"Permalink: Supporting RGFW\" href=\"#supporting-rgfw\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThere is a RGFW wiki page about things you can do if you want to support the development of RGFW \u003ca href=\"https://github.com/ColleagueRiley/RGFW/wiki/Supporting-RGFW\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRGFW vs GLFW\u003c/h2\u003e\u003ca id=\"user-content-rgfw-vs-glfw\" aria-label=\"Permalink: RGFW vs GLFW\" href=\"#rgfw-vs-glfw\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA comparison of RGFW and GLFW can be found at \u003ca href=\"https://github.com/ColleagueRiley/RGFW/wiki/RGFW-vs-GLFW\"\u003eon the wiki\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003ca id=\"user-content-license\" aria-label=\"Permalink: License\" href=\"#license\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRGFW uses the Zlib/libPNG license, this means you can use RGFW freely as long as you do not claim you wrote this software, mark altered versions as such and keep the license included with the header.\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"Permission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n  \n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required. \n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\"\u003e\u003cpre\u003e\u003ccode\u003ePermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n  \n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required. \n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
