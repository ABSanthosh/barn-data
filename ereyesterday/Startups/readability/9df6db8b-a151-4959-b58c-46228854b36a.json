{
  "id": "9df6db8b-a151-4959-b58c-46228854b36a",
  "title": "Literate programming tool for any language",
  "link": "https://github.com/zyedidia/Literate",
  "description": "Article URL: https://github.com/zyedidia/Literate Comments URL: https://news.ycombinator.com/item?id=44323045 Points: 34 # Comments: 18",
  "author": "LorenDB",
  "published": "Thu, 19 Jun 2025 22:18:45 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "zyedidia",
  "length": 4531,
  "excerpt": "A literate programming tool for any language. Contribute to zyedidia/Literate development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Literate What is Literate programming? Literate programming is a style of programming invented by Donald Knuth, where the main idea is that a program's source code is made primarily to be read and understood by other people, and secondarily to be executed by the computer. This frees the programmer from the structure of a program imposed by the computer and means that the programmer can develop programs in the order of the flow of their thoughts. A Literate program generally consists of explanation of the code in a natural language such as English, interspersed with snippets of code to be executed. This means that Literate programs are very easy to understand and share, as all the code is well explained. Literate is a tool for creating literate programs. The goal of this project is to create a literate programming tool which keeps most, if not all of the features of Knuth and Levy's original CWEB system, but simplifies the system and adds even more features. You can view the main website about Literate here including a manual on how to use Literate. Features Supports any language including syntax highlighting and pretty printing in HTML Markdown based -- very easy to read and write Literate source. Reports syntax errors back from the compiler to the right line in the literate source Generates readable and commented code in the target language (the generated code is usable by others) Supports TeX equations with $ notation. Literate source code is readable whether you are looking at the .lit file, or the generated HTML. Highly customizable (you can add your own HTML or CSS) Runs fast -- wc.lit compiled for me in 7ms for both code and HTML output Automatically generates hyperlinks between code sections Formatted output similar to CWEB Supported by micro (by default) Compatible with Vim (literate.vim) Example Here is a trivial example of a literate program saved in the file hello.lit. For a full example of a literate program, please see examples/wc.lit which is a literate implementation of the wc (word count) program found on Unix systems. You can find the compiled html here. @title Hello world in C @s Introduction This is an example hello world C program. We can define codeblocks with `---` --- hello.c @{Includes} int main() { @{Print a string} return 0; } --- Now we can define the `Includes` codeblock: --- Includes #include \u003cstdio.h\u003e --- Finally, our program needs to print \"hello world\" --- Print a string printf(\"hello world\\n\"); --- To compile this code simply run $ lit hello.lit Which generates hello.c and hello.html. You can also find this program in examples/hello.lit. Installation Prebuilt binaries Download Mac OS X 64 bit Linux 32 bit Linux Arm Linux Building from Source Mac On Mac you can use brew to build Literate from source: $ brew tap zyedidia/literate $ brew install --HEAD literate For now, Literate is head only. Literate is made with the D programming language so you must install dmd (D compiler) and dub (D package manager). Then you should download the zip or clone the repository and run the following commands: You can find the binary in path/to/Literate/bin (you may want to add this to your path or move it to /usr/local/bin). Editors Micro The micro editor has support for literate by default. Download it here. Vim You might also want to go install the Vim plugin (it has syntax highlighting of the embedded code, linting with Neomake, and jumping to codeblock definitions). I'm sorry that no other editors are supported -- I don't know how to make plugins for other editors. Usage Lit: Literate Programming System Usage: lit [options] \u003cinputs\u003e Options: --help -h Show this help text --tangle -t Only compile code files --weave -w Only compile HTML files --no-output -no Do not generate any output files --out-dir -odir DIR Put the generated files in DIR --compiler -c Report compiler errors (needs @compiler to be defined) --linenums -l STR Write line numbers prepended with STR to the output file --md-compiler COMPILER Use COMPILER as the markdown compiler instead of the built-in one --version -v Show the version number and compiler information For more information see the manual. Contributing Literate is written in Literate D and you can find the source code in the lit directory. You can also read the source code compiled by Literate here. I am happy to accept pull requests, and if you find any bugs, please report them. Thanks!",
  "image": "https://opengraph.githubassets.com/ae8cdcd697c9214c84b499a24d19f8294902cbcd3988c5331a247ba752802b70/zyedidia/Literate",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eLiterate\u003c/h2\u003e\u003ca id=\"user-content-literate\" aria-label=\"Permalink: Literate\" href=\"#literate\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eWhat is Literate programming?\u003c/h2\u003e\u003ca id=\"user-content-what-is-literate-programming\" aria-label=\"Permalink: What is Literate programming?\" href=\"#what-is-literate-programming\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eLiterate programming is a style of programming invented by Donald Knuth, where the main idea is that a program\u0026#39;s source code is made primarily to be read and understood by other people, and secondarily to be executed by the computer.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis frees the programmer from the structure of a program imposed by the computer and means that the programmer can develop programs in the order of the flow of their thoughts.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA Literate program generally consists of explanation of the code in a natural language such as English, interspersed with snippets of code to be executed. This means that Literate programs are very easy to understand and share, as all the code is well explained.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp dir=\"auto\"\u003eLiterate is a tool for creating literate programs.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe goal of this project is to create a literate programming tool which keeps most, if not all of the features of Knuth and Levy\u0026#39;s original CWEB system, but simplifies the system and adds even more features.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can view the main website about Literate \u003ca href=\"https://zyedidia.github.io/literate\" rel=\"nofollow\"\u003ehere\u003c/a\u003e including a \u003ca href=\"https://zyedidia.github.io/literate/manual.html\" rel=\"nofollow\"\u003emanual\u003c/a\u003e on how to use Literate.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eFeatures\u003c/h2\u003e\u003ca id=\"user-content-features\" aria-label=\"Permalink: Features\" href=\"#features\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eSupports any language including syntax highlighting and pretty printing in HTML\u003c/li\u003e\n\u003cli\u003eMarkdown based -- very easy to read and write Literate source.\u003c/li\u003e\n\u003cli\u003eReports syntax errors back from the compiler to the right line in the literate source\u003c/li\u003e\n\u003cli\u003eGenerates readable and commented code in the target language (the generated code is usable by others)\u003c/li\u003e\n\u003cli\u003eSupports TeX equations with \u003ccode\u003e$\u003c/code\u003e notation.\u003c/li\u003e\n\u003cli\u003eLiterate source code is readable whether you are looking at the \u003ccode\u003e.lit\u003c/code\u003e file, or the generated HTML.\u003c/li\u003e\n\u003cli\u003eHighly customizable (you can add your own HTML or CSS)\u003c/li\u003e\n\u003cli\u003eRuns fast -- wc.lit compiled for me in 7ms for both code and HTML output\u003c/li\u003e\n\u003cli\u003eAutomatically generates hyperlinks between code sections\u003c/li\u003e\n\u003cli\u003eFormatted output similar to CWEB\u003c/li\u003e\n\u003cli\u003eSupported by \u003ca href=\"https://github.com/zyedidia/micro\"\u003emicro\u003c/a\u003e (by default)\u003c/li\u003e\n\u003cli\u003eCompatible with Vim (\u003ca href=\"https://github.com/zyedidia/literate.vim\"\u003eliterate.vim\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eExample\u003c/h2\u003e\u003ca id=\"user-content-example\" aria-label=\"Permalink: Example\" href=\"#example\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is a trivial example of a literate program saved in the file \u003ccode\u003ehello.lit\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor a full example of a literate program, please see \u003ca href=\"https://github.com/zyedidia/Literate/blob/master/examples/wc.lit\"\u003e\u003ccode\u003eexamples/wc.lit\u003c/code\u003e\u003c/a\u003e which\nis a literate implementation of the \u003ccode\u003ewc\u003c/code\u003e (word count) program found on Unix systems.\nYou can find the compiled html \u003ca href=\"https://zyedidia.github.io/literate/examples/wc.html\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"@title Hello world in C\n\n@s Introduction\n\nThis is an example hello world C program.\nWe can define codeblocks with `---`\n\n--- hello.c\n@{Includes}\n\nint main() {\n    @{Print a string}\n    return 0;\n}\n---\n\nNow we can define the `Includes` codeblock:\n\n--- Includes\n#include \u0026lt;stdio.h\u0026gt;\n---\n\nFinally, our program needs to print \u0026#34;hello world\u0026#34;\n\n--- Print a string\nprintf(\u0026#34;hello world\\n\u0026#34;);\n---\"\u003e\u003cpre\u003e\u003ccode\u003e@title Hello world in C\n\n@s Introduction\n\nThis is an example hello world C program.\nWe can define codeblocks with `---`\n\n--- hello.c\n@{Includes}\n\nint main() {\n    @{Print a string}\n    return 0;\n}\n---\n\nNow we can define the `Includes` codeblock:\n\n--- Includes\n#include \u0026lt;stdio.h\u0026gt;\n---\n\nFinally, our program needs to print \u0026#34;hello world\u0026#34;\n\n--- Print a string\nprintf(\u0026#34;hello world\\n\u0026#34;);\n---\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eTo compile this code simply run\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003e$ lit hello.lit\u003c/code\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhich generates \u003ca href=\"https://zyedidia.github.io/literate/examples/hello.c\" rel=\"nofollow\"\u003ehello.c\u003c/a\u003e and \u003ca href=\"https://zyedidia.github.io/literate/examples/hello.html\" rel=\"nofollow\"\u003ehello.html\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can also find this program in \u003ccode\u003eexamples/hello.lit\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h2\u003e\u003ca id=\"user-content-installation\" aria-label=\"Permalink: Installation\" href=\"#installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePrebuilt binaries\u003c/h3\u003e\u003ca id=\"user-content-prebuilt-binaries\" aria-label=\"Permalink: Prebuilt binaries\" href=\"#prebuilt-binaries\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cmarkdown-accessiblity-table\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDownload\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://zyedidia.github.io/literate/binaries/literate-osx.tar.gz\" rel=\"nofollow\"\u003eMac OS X\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://zyedidia.github.io/literate/binaries/literate-linux64.tar.gz\" rel=\"nofollow\"\u003e64 bit Linux\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://zyedidia.github.io/literate/binaries/literate-linux32.tar.gz\" rel=\"nofollow\"\u003e32 bit Linux\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://zyedidia.github.io/literate/binaries/literate-linux-arm.tar.gz\" rel=\"nofollow\"\u003eArm Linux\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/markdown-accessiblity-table\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eBuilding from Source\u003c/h3\u003e\u003ca id=\"user-content-building-from-source\" aria-label=\"Permalink: Building from Source\" href=\"#building-from-source\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eMac\u003c/h4\u003e\u003ca id=\"user-content-mac\" aria-label=\"Permalink: Mac\" href=\"#mac\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOn Mac you can use brew to build Literate from source:\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"$ brew tap zyedidia/literate\n$ brew install --HEAD literate\"\u003e\u003cpre\u003e\u003ccode\u003e$ brew tap zyedidia/literate\n$ brew install --HEAD literate\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor now, Literate is head only.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp dir=\"auto\"\u003eLiterate is made with the \u003ca href=\"https://dlang.org\" rel=\"nofollow\"\u003eD programming language\u003c/a\u003e so you must install \u003ca href=\"https://dlang.org/download.html#dmd\" rel=\"nofollow\"\u003edmd\u003c/a\u003e (D compiler) and \u003ca href=\"https://code.dlang.org/download\" rel=\"nofollow\"\u003edub\u003c/a\u003e (D package manager). Then you should download the zip or clone the repository and run the following commands:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eYou can find the binary in path/to/Literate/bin (you may want to add this to your path or move it to \u003ccode\u003e/usr/local/bin\u003c/code\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eEditors\u003c/h3\u003e\u003ca id=\"user-content-editors\" aria-label=\"Permalink: Editors\" href=\"#editors\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eMicro\u003c/h3\u003e\u003ca id=\"user-content-micro\" aria-label=\"Permalink: Micro\" href=\"#micro\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe micro editor has support for literate by default. Download it \u003ca href=\"https://github.com/zyedidia/micro\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eVim\u003c/h3\u003e\u003ca id=\"user-content-vim\" aria-label=\"Permalink: Vim\" href=\"#vim\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou might also want to go install the \u003ca href=\"https://github.com/zyedidia/literate.vim\"\u003eVim plugin\u003c/a\u003e (it has syntax highlighting of the embedded code, linting with Neomake, and jumping to codeblock definitions).\nI\u0026#39;m sorry that no other editors are supported -- I don\u0026#39;t know how to make plugins for other editors.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003ca id=\"user-content-usage\" aria-label=\"Permalink: Usage\" href=\"#usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"Lit: Literate Programming System\n\nUsage: lit [options] \u0026lt;inputs\u0026gt;\n\nOptions:\n--help       -h         Show this help text\n--tangle     -t         Only compile code files\n--weave      -w         Only compile HTML files\n--no-output  -no        Do not generate any output files\n--out-dir    -odir DIR  Put the generated files in DIR\n--compiler   -c         Report compiler errors (needs @compiler to be defined)\n--linenums   -l    STR  Write line numbers prepended with STR to the output file\n--md-compiler COMPILER  Use COMPILER as the markdown compiler instead of the built-in one\n--version    -v         Show the version number and compiler information\"\u003e\u003cpre\u003e\u003ccode\u003eLit: Literate Programming System\n\nUsage: lit [options] \u0026lt;inputs\u0026gt;\n\nOptions:\n--help       -h         Show this help text\n--tangle     -t         Only compile code files\n--weave      -w         Only compile HTML files\n--no-output  -no        Do not generate any output files\n--out-dir    -odir DIR  Put the generated files in DIR\n--compiler   -c         Report compiler errors (needs @compiler to be defined)\n--linenums   -l    STR  Write line numbers prepended with STR to the output file\n--md-compiler COMPILER  Use COMPILER as the markdown compiler instead of the built-in one\n--version    -v         Show the version number and compiler information\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor more information see the \u003ca href=\"https://zyedidia.github.io/literate/manual.html\" rel=\"nofollow\"\u003emanual\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eContributing\u003c/h2\u003e\u003ca id=\"user-content-contributing\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eLiterate is written in Literate D and you can find the source code in the \u003ccode\u003elit\u003c/code\u003e directory. You can also read the source code compiled by Literate \u003ca href=\"https://zyedidia.github.io/literate/literate-source\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\nI am happy to accept pull requests, and if you find any bugs, please report them. Thanks!\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
