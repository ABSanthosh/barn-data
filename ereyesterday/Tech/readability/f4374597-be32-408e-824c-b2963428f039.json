{
  "id": "f4374597-be32-408e-824c-b2963428f039",
  "title": "Show HN: Unregistry ‚Äì \"docker push\" directly to servers without a registry",
  "link": "https://github.com/psviderski/unregistry",
  "description": "Comments",
  "author": "",
  "published": "Wed, 18 Jun 2025 23:17:10 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "psviderski",
  "length": 5960,
  "excerpt": "Push docker images directly to remote servers without an external registry - psviderski/unregistry",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "‚ñ∏ Push docker images directly to remote servers without an external registry ‚óÇ Unregistry is a lightweight container image registry that stores and serves images directly from your Docker daemon's storage. The included docker pussh command (extra 's' for SSH) lets you push images straight to remote Docker servers over SSH. It transfers only the missing layers, making it fast and efficient. docker-pussh-demo.mp4 The problem You've built a Docker image locally. Now you need it on your server. Your options suck: Docker Hub / GitHub Container Registry - Your code is now public, or you're paying for private repos Self-hosted registry - Another service to maintain, secure, and pay for storage Save/Load - docker save | ssh | docker load transfers the entire image, even if 90% already exists on the server Rebuild remotely - Wastes time and server resources. Plus now you're debugging why the build fails in production You just want to move an image from A to B. Why is this so hard? The solution docker pussh myapp:latest user@server That's it. Your image is on the remote server. No registry setup, no subscription, no intermediate storage, no exposed ports. Just a direct transfer of the missing layers over SSH. Here's what happens under the hood: Establishes SSH tunnel to the remote server Starts a temporary unregistry container Forwards a random localhost port to the unregistry port over the tunnel docker push to unregistry through the forwarded port, transferring only the layers that don't already exist remotely. The transferred image is instantly available on the remote Docker daemon Stops the unregistry container and closes the SSH tunnel It's like rsync for Docker images ‚Äî simple and efficient. NoteUnregistry was created for Uncloud, a lightweight tool for deploying containers across multiple Docker hosts. We needed something simpler than a full registry but more efficient than save/load. Installation macOS/Linux via Homebrew brew install psviderski/tap/docker-pussh After installation, to use docker-pussh as a Docker CLI plugin (docker pussh command) you need to create a symlink: mkdir -p ~/.docker/cli-plugins ln -sf $(brew --prefix)/bin/docker-pussh ~/.docker/cli-plugins/docker-pussh macOS/Linux via direct download # Download the latest version curl -sSL https://raw.githubusercontent.com/psviderski/unregistry/main/docker-pussh \\ -o ~/.docker/cli-plugins/docker-pussh # Make it executable chmod +x ~/.docker/cli-plugins/docker-pussh Windows Windows is not currently supported, but you can try using WSL 2 with the above Linux instructions. Verify installation Usage Push an image to a remote server. Please make sure the SSH user has permissions to run docker commands (user is root or non-root user is in docker group). If sudo is required, ensure the user can run sudo docker without a password prompt. docker pussh myapp:latest user@server.example.com With SSH key authentication if the private key is not added to your SSH agent: docker pussh myapp:latest ubuntu@192.168.1.100 -i ~/.ssh/id_rsa Using a custom SSH port: docker pussh myapp:latest user@server:2222 Push a specific platform for a multi-platform image. The local Docker has to use containerd image store to support multi-platform images. docker pussh myapp:latest user@server --platform linux/amd64 Use cases Deploy to production servers Build locally and push directly to your production servers. No middleman. docker build --platform linux/amd64 -t myapp:1.2.3 . docker pussh myapp:1.2.3 deploy@prod-server ssh deploy@prod-server docker run -d myapp:1.2.3 CI/CD pipelines Skip the registry complexity in your pipelines. Build and push directly to deployment targets. - name: Build and deploy run: | docker build -t myapp:${{ github.sha }} . docker pussh myapp:${{ github.sha }} deploy@staging-server Homelab and air-gapped environments Distribute images in isolated networks without exposing them to the internet. docker pussh image:latest user@192.168.1.100 Requirements On local machine Docker CLI with plugin support (Docker 19.03+) OpenSSH client On remote server Docker is installed and running SSH user has permissions to run docker commands (user is root or non-root user is in docker group) If sudo is required, ensure the user can run sudo docker without a password prompt TipThe remote Docker daemon works best with containerd image store enabled. This allows unregistry to access images more efficiently. Add the following configuration to /etc/docker/daemon.json on the remote server and restart the docker service: { \"features\": { \"containerd-snapshotter\": true } } Advanced usage Running unregistry standalone Sometimes you want a local registry without the overhead. Unregistry works great for this: # Run unregistry locally and expose it on port 5000 docker run -d -p 5000:5000 --name unregistry \\ -v /run/containerd/containerd.sock:/run/containerd/containerd.sock \\ ghcr.io/psviderski/unregistry # Use it like any registry docker tag myapp:latest localhost:5000/myapp:latest docker push localhost:5000/myapp:latest Custom SSH options Need custom SSH settings? Use the standard SSH config file: # ~/.ssh/config Host prod-server HostName server.example.com User deploy Port 2222 IdentityFile ~/.ssh/deploy_key # Now just use docker pussh myapp:latest prod-server Contributing Found a bug or have a feature idea? We'd love your help! üêõ Found a bug? Open an issue üí° Have ideas or need help? Join Uncloud Discord community where we discuss features, roadmap, implementation details, and help each other out. Inspiration \u0026 acknowledgements Spegel - P2P container image registry that inspired me to implement a registry that uses containerd image store as a backend. Docker Distribution - the bulletproof Docker registry implementation that unregistry uses as a base. Built with ‚ù§Ô∏è by Pasha Sviderski who just wanted to deploy his images",
  "image": "https://opengraph.githubassets.com/ff3b5db75f0c13b0d0e4b910e825799a7768fd8e5e0e6481a9adce8acfea32a1/psviderski/unregistry",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cdiv dir=\"auto\"\u003e\n  \u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/psviderski/unregistry/blob/main/.github/images/logo-light.svg#gh-light-mode-only\"\u003e\u003cimg src=\"https://github.com/psviderski/unregistry/raw/main/.github/images/logo-light.svg#gh-light-mode-only\" alt=\"Unregistry logo\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/psviderski/unregistry/blob/main/.github/images/logo-dark.svg#gh-dark-mode-only\"\u003e\u003cimg src=\"https://github.com/psviderski/unregistry/raw/main/.github/images/logo-dark.svg#gh-dark-mode-only\" alt=\"Unregistry logo\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp dir=\"auto\"\u003e\u003cstrong\u003e‚ñ∏ Push docker images directly to remote servers without an external registry ‚óÇ\u003c/strong\u003e\u003c/p\u003e\n  \u003cp dir=\"auto\"\u003e\n    \u003ca href=\"https://discord.gg/eR35KQJhPu\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/bce982f6fd064725216dd2c5bbfc5fa12afeaee92ae5d356ea3f5abf78d0ad88/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646973636f72642d3538363546322e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465\" alt=\"Join Discord\" data-canonical-src=\"https://img.shields.io/badge/discord-5865F2.svg?style=for-the-badge\u0026amp;logo=discord\u0026amp;logoColor=white\"/\u003e\u003c/a\u003e\n    \u003ca href=\"https://x.com/psviderski\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7ef3b84c3487de0b84ead3bc3ac609c4cbaa26f231976bbdf4e56b855dfaf42d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f666f6c6c6f772d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d58266c6f676f436f6c6f723d7768696c65\" alt=\"Follow on X\" data-canonical-src=\"https://img.shields.io/badge/follow-black?style=for-the-badge\u0026amp;logo=X\u0026amp;logoColor=while\"/\u003e\u003c/a\u003e\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eUnregistry is a lightweight container image registry that stores and serves images directly from your Docker daemon\u0026#39;s\nstorage.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe included \u003ccode\u003edocker pussh\u003c/code\u003e command (extra \u0026#39;s\u0026#39; for SSH) lets you push images straight to remote Docker servers over SSH.\nIt transfers only the missing layers, making it fast and efficient.\u003c/p\u003e\n\u003cdetails open=\"\"\u003e\n  \u003csummary\u003e\n    \n    \u003cspan aria-label=\"Video description docker-pussh-demo.mp4\"\u003edocker-pussh-demo.mp4\u003c/span\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003c/summary\u003e\n\n  \u003cvideo src=\"https://private-user-images.githubusercontent.com/783910/456396282-9d704b87-8e0d-4c8a-9544-17d4c63bd050.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTAyOTYyNTUsIm5iZiI6MTc1MDI5NTk1NSwicGF0aCI6Ii83ODM5MTAvNDU2Mzk2MjgyLTlkNzA0Yjg3LThlMGQtNGM4YS05NTQ0LTE3ZDRjNjNiZDA1MC5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNjE5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDYxOVQwMTE5MTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wNzY0ZTYxYzU2MTAxYjM1ZmVjZDZhZGIyMDIwYjc0YWEwYTcxZWNkZmM1NWEyMmI4YjdmZTIzOTdjMGY1MjI3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.St55KT2aqJfRvNSTPfJv7jmzCK__7IAwzLRlNXeWUCo\" data-canonical-src=\"https://private-user-images.githubusercontent.com/783910/456396282-9d704b87-8e0d-4c8a-9544-17d4c63bd050.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTAyOTYyNTUsIm5iZiI6MTc1MDI5NTk1NSwicGF0aCI6Ii83ODM5MTAvNDU2Mzk2MjgyLTlkNzA0Yjg3LThlMGQtNGM4YS05NTQ0LTE3ZDRjNjNiZDA1MC5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNjE5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDYxOVQwMTE5MTVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wNzY0ZTYxYzU2MTAxYjM1ZmVjZDZhZGIyMDIwYjc0YWEwYTcxZWNkZmM1NWEyMmI4YjdmZTIzOTdjMGY1MjI3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.St55KT2aqJfRvNSTPfJv7jmzCK__7IAwzLRlNXeWUCo\" controls=\"controls\" muted=\"muted\"\u003e\n\n  \u003c/video\u003e\n\u003c/details\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eThe problem\u003c/h2\u003e\u003ca id=\"user-content-the-problem\" aria-label=\"Permalink: The problem\" href=\"#the-problem\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou\u0026#39;ve built a Docker image locally. Now you need it on your server. Your options suck:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003cstrong\u003eDocker Hub / GitHub Container Registry\u003c/strong\u003e - Your code is now public, or you\u0026#39;re paying for private repos\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSelf-hosted registry\u003c/strong\u003e - Another service to maintain, secure, and pay for storage\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSave/Load\u003c/strong\u003e - \u003ccode\u003edocker save | ssh | docker load\u003c/code\u003e transfers the entire image, even if 90% already exists on the server\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRebuild remotely\u003c/strong\u003e - Wastes time and server resources. Plus now you\u0026#39;re debugging why the build fails in production\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eYou just want to move an image from A to B. Why is this so hard?\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eThe solution\u003c/h2\u003e\u003ca id=\"user-content-the-solution\" aria-label=\"Permalink: The solution\" href=\"#the-solution\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh myapp:latest user@server\"\u003e\u003cpre\u003edocker pussh myapp:latest user@server\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThat\u0026#39;s it. Your image is on the remote server. No registry setup, no subscription, no intermediate storage, no\nexposed ports. Just a \u003cstrong\u003edirect transfer\u003c/strong\u003e of the \u003cstrong\u003emissing layers\u003c/strong\u003e over SSH.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere\u0026#39;s what happens under the hood:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eEstablishes SSH tunnel to the remote server\u003c/li\u003e\n\u003cli\u003eStarts a temporary unregistry container\u003c/li\u003e\n\u003cli\u003eForwards a random localhost port to the unregistry port over the tunnel\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker push\u003c/code\u003e to unregistry through the forwarded port, transferring only the layers that don\u0026#39;t already exist\nremotely. The transferred image is instantly available on the remote Docker daemon\u003c/li\u003e\n\u003cli\u003eStops the unregistry container and closes the SSH tunnel\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003eIt\u0026#39;s like \u003ccode\u003ersync\u003c/code\u003e for Docker images ‚Äî simple and efficient.\u003c/p\u003e\n\u003cdiv dir=\"auto\"\u003e\u003cp dir=\"auto\"\u003eNote\u003c/p\u003e\u003cp dir=\"auto\"\u003eUnregistry was created for \u003ca href=\"https://github.com/psviderski/uncloud\"\u003eUncloud\u003c/a\u003e, a lightweight tool for deploying\ncontainers across multiple Docker hosts. We needed something simpler than a full registry but more efficient than\nsave/load.\u003c/p\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h2\u003e\u003ca id=\"user-content-installation\" aria-label=\"Permalink: Installation\" href=\"#installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003emacOS/Linux via Homebrew\u003c/h3\u003e\u003ca id=\"user-content-macoslinux-via-homebrew\" aria-label=\"Permalink: macOS/Linux via Homebrew\" href=\"#macoslinux-via-homebrew\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"brew install psviderski/tap/docker-pussh\"\u003e\u003cpre\u003ebrew install psviderski/tap/docker-pussh\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAfter installation, to use \u003ccode\u003edocker-pussh\u003c/code\u003e as a Docker CLI plugin (\u003ccode\u003edocker pussh\u003c/code\u003e command) you need to create a symlink:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"mkdir -p ~/.docker/cli-plugins\nln -sf $(brew --prefix)/bin/docker-pussh ~/.docker/cli-plugins/docker-pussh\"\u003e\u003cpre\u003emkdir -p \u003cspan\u003e~\u003c/span\u003e/.docker/cli-plugins\nln -sf \u003cspan\u003e\u003cspan\u003e$(\u003c/span\u003ebrew --prefix\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e/bin/docker-pussh \u003cspan\u003e~\u003c/span\u003e/.docker/cli-plugins/docker-pussh\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003emacOS/Linux via direct download\u003c/h3\u003e\u003ca id=\"user-content-macoslinux-via-direct-download\" aria-label=\"Permalink: macOS/Linux via direct download\" href=\"#macoslinux-via-direct-download\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Download the latest version\ncurl -sSL https://raw.githubusercontent.com/psviderski/unregistry/main/docker-pussh \\\n  -o ~/.docker/cli-plugins/docker-pussh\n\n# Make it executable\nchmod +x ~/.docker/cli-plugins/docker-pussh\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Download the latest version\u003c/span\u003e\ncurl -sSL https://raw.githubusercontent.com/psviderski/unregistry/main/docker-pussh \\\n  -o \u003cspan\u003e~\u003c/span\u003e/.docker/cli-plugins/docker-pussh\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Make it executable\u003c/span\u003e\nchmod +x \u003cspan\u003e~\u003c/span\u003e/.docker/cli-plugins/docker-pussh\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eWindows\u003c/h3\u003e\u003ca id=\"user-content-windows\" aria-label=\"Permalink: Windows\" href=\"#windows\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWindows is not currently supported, but you can try using \u003ca href=\"https://docs.docker.com/desktop/features/wsl/\" rel=\"nofollow\"\u003eWSL 2\u003c/a\u003e\nwith the above Linux instructions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eVerify installation\u003c/h3\u003e\u003ca id=\"user-content-verify-installation\" aria-label=\"Permalink: Verify installation\" href=\"#verify-installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003ca id=\"user-content-usage\" aria-label=\"Permalink: Usage\" href=\"#usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003ePush an image to a remote server. Please make sure the SSH user has permissions to run \u003ccode\u003edocker\u003c/code\u003e commands (user is\n\u003ccode\u003eroot\u003c/code\u003e or non-root user is in \u003ccode\u003edocker\u003c/code\u003e group). If \u003ccode\u003esudo\u003c/code\u003e is required, ensure the user can run \u003ccode\u003esudo docker\u003c/code\u003e without\na password prompt.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh myapp:latest user@server.example.com\"\u003e\u003cpre\u003edocker pussh myapp:latest user@server.example.com\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWith SSH key authentication if the private key is not added to your SSH agent:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh myapp:latest ubuntu@192.168.1.100 -i ~/.ssh/id_rsa\"\u003e\u003cpre\u003edocker pussh myapp:latest ubuntu@192.168.1.100 -i \u003cspan\u003e~\u003c/span\u003e/.ssh/id_rsa\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eUsing a custom SSH port:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh myapp:latest user@server:2222\"\u003e\u003cpre\u003edocker pussh myapp:latest user@server:2222\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003ePush a specific platform for a multi-platform image. The local Docker has to use\n\u003ca href=\"https://docs.docker.com/desktop/features/containerd/\" rel=\"nofollow\"\u003econtainerd image store\u003c/a\u003e to support multi-platform images.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh myapp:latest user@server --platform linux/amd64\"\u003e\u003cpre\u003edocker pussh myapp:latest user@server --platform linux/amd64\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eUse cases\u003c/h2\u003e\u003ca id=\"user-content-use-cases\" aria-label=\"Permalink: Use cases\" href=\"#use-cases\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eDeploy to production servers\u003c/h3\u003e\u003ca id=\"user-content-deploy-to-production-servers\" aria-label=\"Permalink: Deploy to production servers\" href=\"#deploy-to-production-servers\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBuild locally and push directly to your production servers. No middleman.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker build --platform linux/amd64 -t myapp:1.2.3 .\ndocker pussh myapp:1.2.3 deploy@prod-server\nssh deploy@prod-server docker run -d myapp:1.2.3\"\u003e\u003cpre\u003edocker build --platform linux/amd64 -t myapp:1.2.3 \u003cspan\u003e.\u003c/span\u003e\ndocker pussh myapp:1.2.3 deploy@prod-server\nssh deploy@prod-server docker run -d myapp:1.2.3\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCI/CD pipelines\u003c/h3\u003e\u003ca id=\"user-content-cicd-pipelines\" aria-label=\"Permalink: CI/CD pipelines\" href=\"#cicd-pipelines\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSkip the registry complexity in your pipelines. Build and push directly to deployment targets.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"- name: Build and deploy\n  run: |\n    docker build -t myapp:${{ github.sha }} .\n    docker pussh myapp:${{ github.sha }} deploy@staging-server\"\u003e\u003cpre\u003e- \u003cspan\u003ename\u003c/span\u003e: \u003cspan\u003eBuild and deploy\u003c/span\u003e\n  \u003cspan\u003erun\u003c/span\u003e: \u003cspan\u003e|\u003c/span\u003e\n\u003cspan\u003e    docker build -t myapp:${{ github.sha }} .\u003c/span\u003e\n\u003cspan\u003e    docker pussh myapp:${{ github.sha }} deploy@staging-server\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eHomelab and air-gapped environments\u003c/h3\u003e\u003ca id=\"user-content-homelab-and-air-gapped-environments\" aria-label=\"Permalink: Homelab and air-gapped environments\" href=\"#homelab-and-air-gapped-environments\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eDistribute images in isolated networks without exposing them to the internet.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"docker pussh image:latest user@192.168.1.100\"\u003e\u003cpre\u003edocker pussh image:latest user@192.168.1.100\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRequirements\u003c/h2\u003e\u003ca id=\"user-content-requirements\" aria-label=\"Permalink: Requirements\" href=\"#requirements\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eOn local machine\u003c/h3\u003e\u003ca id=\"user-content-on-local-machine\" aria-label=\"Permalink: On local machine\" href=\"#on-local-machine\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eDocker CLI with plugin support (Docker 19.03+)\u003c/li\u003e\n\u003cli\u003eOpenSSH client\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eOn remote server\u003c/h3\u003e\u003ca id=\"user-content-on-remote-server\" aria-label=\"Permalink: On remote server\" href=\"#on-remote-server\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eDocker is installed and running\u003c/li\u003e\n\u003cli\u003eSSH user has permissions to run \u003ccode\u003edocker\u003c/code\u003e commands (user is \u003ccode\u003eroot\u003c/code\u003e or non-root user is in \u003ccode\u003edocker\u003c/code\u003e group)\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003esudo\u003c/code\u003e is required, ensure the user can run \u003ccode\u003esudo docker\u003c/code\u003e without a password prompt\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv dir=\"auto\"\u003e\u003cp dir=\"auto\"\u003eTip\u003c/p\u003e\u003cp dir=\"auto\"\u003eThe remote Docker daemon works best with \u003ca href=\"https://docs.docker.com/engine/storage/containerd/\" rel=\"nofollow\"\u003econtainerd image store\u003c/a\u003e\nenabled. This allows unregistry to access images more efficiently.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAdd the following configuration to \u003ccode\u003e/etc/docker/daemon.json\u003c/code\u003e on the remote server and restart the \u003ccode\u003edocker\u003c/code\u003e service:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  \u0026#34;features\u0026#34;: {\n    \u0026#34;containerd-snapshotter\u0026#34;: true\n  }\n}\"\u003e\u003cpre\u003e{\n  \u003cspan\u003e\u0026#34;features\u0026#34;\u003c/span\u003e: {\n    \u003cspan\u003e\u0026#34;containerd-snapshotter\u0026#34;\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e\n  }\n}\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eAdvanced usage\u003c/h2\u003e\u003ca id=\"user-content-advanced-usage\" aria-label=\"Permalink: Advanced usage\" href=\"#advanced-usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eRunning unregistry standalone\u003c/h3\u003e\u003ca id=\"user-content-running-unregistry-standalone\" aria-label=\"Permalink: Running unregistry standalone\" href=\"#running-unregistry-standalone\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSometimes you want a local registry without the overhead. Unregistry works great for this:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Run unregistry locally and expose it on port 5000\ndocker run -d -p 5000:5000 --name unregistry \\\n  -v /run/containerd/containerd.sock:/run/containerd/containerd.sock \\\n  ghcr.io/psviderski/unregistry\n\n# Use it like any registry\ndocker tag myapp:latest localhost:5000/myapp:latest\ndocker push localhost:5000/myapp:latest\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Run unregistry locally and expose it on port 5000\u003c/span\u003e\ndocker run -d -p 5000:5000 --name unregistry \\\n  -v /run/containerd/containerd.sock:/run/containerd/containerd.sock \\\n  ghcr.io/psviderski/unregistry\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use it like any registry\u003c/span\u003e\ndocker tag myapp:latest localhost:5000/myapp:latest\ndocker push localhost:5000/myapp:latest\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCustom SSH options\u003c/h3\u003e\u003ca id=\"user-content-custom-ssh-options\" aria-label=\"Permalink: Custom SSH options\" href=\"#custom-ssh-options\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNeed custom SSH settings? Use the standard SSH config file:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# ~/.ssh/config\nHost prod-server\n    HostName server.example.com\n    User deploy\n    Port 2222\n    IdentityFile ~/.ssh/deploy_key\n\n# Now just use\ndocker pussh myapp:latest prod-server\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e ~/.ssh/config\u003c/span\u003e\nHost prod-server\n    HostName server.example.com\n    User deploy\n    Port 2222\n    IdentityFile \u003cspan\u003e~\u003c/span\u003e/.ssh/deploy_key\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Now just use\u003c/span\u003e\ndocker pussh myapp:latest prod-server\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eContributing\u003c/h2\u003e\u003ca id=\"user-content-contributing\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFound a bug or have a feature idea? We\u0026#39;d love your help!\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eüêõ Found a bug? \u003ca href=\"https://github.com/psviderski/unregistry/issues\"\u003eOpen an issue\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eüí° Have ideas or need help? \u003ca href=\"https://discord.gg/eR35KQJhPu\" rel=\"nofollow\"\u003eJoin Uncloud Discord community\u003c/a\u003e where we discuss features,\nroadmap, implementation details, and help each other out.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInspiration \u0026amp; acknowledgements\u003c/h2\u003e\u003ca id=\"user-content-inspiration--acknowledgements\" aria-label=\"Permalink: Inspiration \u0026amp; acknowledgements\" href=\"#inspiration--acknowledgements\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/spegel-org/spegel\"\u003eSpegel\u003c/a\u003e - P2P container image registry that inspired me to implement a\nregistry that uses containerd image store as a backend.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/distribution/distribution\"\u003eDocker Distribution\u003c/a\u003e - the bulletproof Docker registry implementation\nthat unregistry uses as a base.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n  Built with ‚ù§Ô∏è by \u003ca href=\"https://github.com/psviderski\"\u003ePasha Sviderski\u003c/a\u003e who just wanted to deploy his images\n\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
