{
  "id": "be5e56f4-16e0-4366-a2eb-1469ef44478a",
  "title": "Malware can turn off webcam LED and record video, demonstrated on ThinkPad X230",
  "link": "https://github.com/xairy/lights-out",
  "description": "Comments",
  "author": "",
  "published": "Wed, 27 Nov 2024 20:10:55 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "xairy",
  "length": 3684,
  "excerpt": "Tools for controlling webcam LED on ThinkPad X230. Contribute to xairy/lights-out development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Lights Out This repository contains tools that allow getting software control of the webcam LED on ThinkPad X230 without physical access to the laptop. These were created as a practical demonstration that malware can record video through the webcam without the LED indication. This works via reflashing the webcam firmware over USB (the X230 webcam is connected over USB internally) to add a capability of arbitrarily controlling the LED. This approach likely affects many other laptops, as connecting the webcam over USB and allowing to reflash its firmware is a common design pattern across laptop manufacturers. See the \"Lights Out: Covertly turning off the ThinkPad webcam LED indicator\" talk (pdf) I gave at POC 2024 for the details: discovering a way to reflash the X230 webcam firmware, reverse engineering the firmware, adding an implant for LED control, and notes about the applicability of the approach to other laptops. Note: Reflashing the webcam firmware might brick the webcam, use these tools with caution. Overview The webcam used on ThinkPad X230 (and a few other laptops from the same era) is based on the Ricoh R5U8710 USB camera controller. This controller stores a part of its firmware, the SROM part, on the SPI flash chip located on the webcam board. The controller also allows reflashing the contents of the SPI chip over USB. The LED on the X230 webcam board is connected to the GPIO B1 pin of the R5U8710 controller. The GPIO B port is mapped to address 0x80 in the XDATA memory space of the 8051-based CPU inside R5U8710. Thus, changing the value at that address changes the state of the LED. This works regardless of whether the webcam is streaming video at the moment or not. The tools provided in this repository allow flashing custom firmware with a USB-controlled so-called \"universal implant\" onto the SPI chip on the webcam board. This implant allows writing controlled data to arbitrary addesses (within the XDATA memory space) and calling arbitrary addresses (within the CODE memory space; aliased with XDATA starting from offset 0xb000). The universal implant can be used for: Dynamically uploading a second-stage implant within the camera contoller memory and executing it (originally used for reverse engineering purposes); Directly controlling the webcam LED. See the talk slides for more details. Tools srom.py — reads and writes the SROM part of the firmware of a Ricoh R5U8710–based webcam over USB. Note: The webcam only loads the SROM firmware during its boot. Thus, you will need to power cycle the laptop (full shutdown, not just reboot) for the updated firmware to get loaded; patch_srom.py — patches the SROM image from the FRU 63Y0248 webcam (not from the original X230 webcam) to add the universal implant. Note: This tool requires modification to work with the original X230 webcam SROM image. However, the FRU 63Y0248 SROM image (optionally, with the implant added) can be flashed onto the original X230 webcam as well; fetch.py — fetches the contents of the IRAM, XDATA, or CODE memory space over USB via a second-stage implant that gets dynamically uploaded via the universal implant; led.py — turns the webcam LED on or off by overwriting the value at address 0x80 in XDATA via the universal implant. Memory dumps srom/x230.bin — SROM contents of the original X230 webcam module (FRU unknown; 19N1L1NVRA0H marking on the board); srom/63Y0248.bin — SROM contents of the FRU 63Y0248 webcam module; code/63Y0248.bin — Contents of the CODE memory space leaked from the FRU 63Y0248 webcam module. Note: Boot ROM is below the offset 0xb000, and it is identical to the Boot ROM on the original X230 webcam module.",
  "image": "https://opengraph.githubassets.com/4d4442ee0f3d03d07c1f1fe81f72950d7a11f5cd2c3cb7ad7f9519ed64745a98/xairy/lights-out",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eLights Out\u003c/h2\u003e\u003ca id=\"user-content-lights-out\" aria-label=\"Permalink: Lights Out\" href=\"#lights-out\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis repository contains tools that allow getting software control of the webcam LED on ThinkPad X230 \u003cstrong\u003ewithout physical access to the laptop\u003c/strong\u003e.\nThese were created as a practical demonstration that malware can record video through the webcam without the LED indication.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis works via reflashing the webcam firmware over USB (the X230 webcam is connected over USB internally) to add a capability of arbitrarily controlling the LED.\nThis approach likely affects many other laptops, as connecting the webcam over USB and allowing to reflash its firmware is a common design pattern across laptop manufacturers.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee the \u003ca href=\"https://docs.google.com/presentation/d/1NSS2frdiyRVr-5vIjAU-2wf_agzpdiMR1DvVhz2eDwc/edit?usp=sharing\" rel=\"nofollow\"\u003e\u0026#34;Lights Out: Covertly turning off the ThinkPad webcam LED indicator\u0026#34;\u003c/a\u003e talk (\u003ca href=\"https://powerofcommunity.net/poc2024/Andrey%20Konovalov,%20Lights%20Out%20-%20Covertly%20turning%20off%20the%20ThinkPad%20webcam%20LED%20indicator.pdf\" rel=\"nofollow\"\u003epdf\u003c/a\u003e) I gave at \u003ca href=\"https://powerofcommunity.net/\" rel=\"nofollow\"\u003ePOC 2024\u003c/a\u003e for the details: discovering a way to reflash the X230 webcam firmware, reverse engineering the firmware, adding an implant for LED control, and notes about the applicability of the approach to other laptops.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eNote: Reflashing the webcam firmware might brick the webcam, use these tools with caution\u003c/strong\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eOverview\u003c/h2\u003e\u003ca id=\"user-content-overview\" aria-label=\"Permalink: Overview\" href=\"#overview\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe webcam used on ThinkPad X230 (and a few other laptops from the same era) is based on the Ricoh R5U8710 USB camera controller.\nThis controller stores a part of its firmware, the SROM part, on the SPI flash chip located on the webcam board.\nThe controller also allows reflashing the contents of the SPI chip over USB.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe LED on the X230 webcam board is connected to the GPIO B1 pin of the R5U8710 controller.\nThe GPIO B port is mapped to address \u003ccode\u003e0x80\u003c/code\u003e in the \u003ccode\u003eXDATA\u003c/code\u003e memory space of the 8051-based CPU inside R5U8710.\nThus, changing the value at that address changes the state of the LED.\nThis works regardless of whether the webcam is streaming video at the moment or not.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe tools provided in this repository allow flashing custom firmware with a USB-controlled so-called \u0026#34;universal implant\u0026#34; onto the SPI chip on the webcam board.\nThis implant allows writing controlled data to arbitrary addesses (within the \u003ccode\u003eXDATA\u003c/code\u003e memory space) and calling arbitrary addresses (within the \u003ccode\u003eCODE\u003c/code\u003e memory space; aliased with \u003ccode\u003eXDATA\u003c/code\u003e starting from offset \u003ccode\u003e0xb000\u003c/code\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe universal implant can be used for:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eDynamically uploading a second-stage implant within the camera contoller memory and executing it (originally used for reverse engineering purposes);\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eDirectly controlling the webcam LED.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eSee the talk slides for more details.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTools\u003c/h2\u003e\u003ca id=\"user-content-tools\" aria-label=\"Permalink: Tools\" href=\"#tools\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/srom.py\"\u003esrom.py\u003c/a\u003e — reads and writes the SROM part of the firmware of a Ricoh R5U8710–based webcam over USB.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote: The webcam only loads the SROM firmware during its boot.\nThus, you will need to power cycle the laptop (full shutdown, not just reboot) for the updated firmware to get loaded;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/patch_srom.py\"\u003epatch_srom.py\u003c/a\u003e — patches the SROM image from the FRU \u003ccode\u003e63Y0248\u003c/code\u003e webcam (not from the original X230 webcam) to add the universal implant.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote: This tool requires modification to work with the original X230 webcam SROM image.\nHowever, the FRU \u003ccode\u003e63Y0248\u003c/code\u003e SROM image (optionally, with the implant added) can be flashed onto the original X230 webcam as well;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/fetch.py\"\u003efetch.py\u003c/a\u003e — fetches the contents of the \u003ccode\u003eIRAM\u003c/code\u003e, \u003ccode\u003eXDATA\u003c/code\u003e, or \u003ccode\u003eCODE\u003c/code\u003e memory space over USB via a second-stage implant that gets dynamically uploaded via the universal implant;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/led.py\"\u003eled.py\u003c/a\u003e — turns the webcam LED on or off by overwriting the value at address \u003ccode\u003e0x80\u003c/code\u003e in \u003ccode\u003eXDATA\u003c/code\u003e via the universal implant.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eMemory dumps\u003c/h2\u003e\u003ca id=\"user-content-memory-dumps\" aria-label=\"Permalink: Memory dumps\" href=\"#memory-dumps\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/srom/x230.bin\"\u003esrom/x230.bin\u003c/a\u003e — SROM contents of the original X230 webcam module (FRU unknown; \u003ccode\u003e19N1L1NVRA0H\u003c/code\u003e marking on the board);\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/srom/63Y0248.bin\"\u003esrom/63Y0248.bin\u003c/a\u003e — SROM contents of the FRU \u003ccode\u003e63Y0248\u003c/code\u003e webcam module;\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/xairy/lights-out/blob/main/code/63Y0248.bin\"\u003ecode/63Y0248.bin\u003c/a\u003e — Contents of the \u003ccode\u003eCODE\u003c/code\u003e memory space leaked from the FRU \u003ccode\u003e63Y0248\u003c/code\u003e webcam module.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote: Boot ROM is below the offset \u003ccode\u003e0xb000\u003c/code\u003e, and it is identical to the Boot ROM on the original X230 webcam module.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
