{
  "id": "70d0340d-f5d9-4067-913d-64a9b2da554c",
  "title": "Cannonball: An Enhanced OutRun Engine",
  "link": "https://github.com/djyt/cannonball",
  "description": "Comments",
  "author": "",
  "published": "Fri, 10 Jan 2025 22:11:11 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "djyt",
  "length": 3175,
  "excerpt": "Cannonball: An Enhanced OutRun Engine. Contribute to djyt/cannonball development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Cannonball - OutRun Engine CannonBall is an souped up game engine for the OutRun arcade game. The original 68000 and Z80 assembler code has been rewritten in C++. This makes it possible to make improvements suitable for modern platforms, including a higher frame-rate and widescreen support. It requires the original ROMs, as these contain elements including the graphics and audio data. For an overview of CannonBall and its features, please read the manual. Reassembler Blog Twitter Please note that I maintain the Windows build of CannonBall. Whilst I strive to ensure this is a fully cross-platform project that compiles across Linux, Wii, Mac, Pi4 etc. I do not maintain those ports. Port specific issues should be raised with the respective person. Thank you! Chris White (Project Creator). Getting Started CannonBall is coded in C++ and makes use of the SDL 2 and Boost libraries. CannonBall has been successfully built for Windows, Mac OS X, Linux, Open Pandora and the Raspberry Pi. CannonBall can use OpenGL, OpenGLES (mobile platforms) or plain SDL2 for rendering. I have recently deprecated support for SDL 1, to focus on SDL 2. But feel free to grab an older version from github if you need it. Install your favourite C++11 environment (e.g. GCC, Visual Studio, Xcode, MingGW etc.) Install CMake. This generates your platform and compiler build files. Extract the Boost Library somewhere, for example: c:\\coding\\lib\\boost_1_74_0 Note that Boost does not need to be compiled, as only the header libraries are used. This keeps things nice and lightweight. Extract the SDL Development Library somewhere, for example: c:\\coding\\lib\\SDL2-2.0.12 Read the SDL documentation \u0026 build the SDL Library for your system. Windows only: I needed to copy cannonball/cmake/windows_copy_to_sdl2_lib_directory/sdl2-config.cmake to c:\\coding\\lib\\SDL2-2.0.12 Windows only: download and install the Direct 8.1 SDK. This is used for force-feedback and a legacy from when I was using SDL 1. I should update it sometime to use SDL 2 instead. Extract the Cannonball code somewhere, for example: c:\\coding\\cannonball You may need to create a .cmake file for your system to configure specific options. See the cmake subdirectory for more details. Build Run CMake to generate the relevant build files for your compiler. You can optionally pass -DTARGET=filename to pass a custom .cmake file Compile using your chosen compiler. Further details below. Visual Studio 2019 Community Edition Create to the sub-directory you want to create your build files in (e.g. or vs_build) cmake -G \"Visual Studio 16 2019\" ../cmake Open the created CannonBall solution in VS 2019. Right click and choose 'Set as StartUp project'. Set working directory to something sensible. Right click -\u003e Configuration properties -\u003e Debugging Ensure config.xml is in the working directory. You can specify an alternate location on the command line Edit config.xml to reflect the paths of your roms and res directories. By default, they should be in the working directory. Copy the OutRun revision B romset to the roms subdirectory. You can then compile, debug and run from Visual Studio as expected.",
  "image": "https://opengraph.githubassets.com/20b27f509af9f0ebe019a479ddfe585e82b55944a41eed9bcfad40b3b8be6247/djyt/cannonball",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eCannonball - OutRun Engine\u003c/h2\u003e\u003ca id=\"user-content-cannonball---outrun-engine\" aria-label=\"Permalink: Cannonball - OutRun Engine\" href=\"#cannonball---outrun-engine\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCannonBall is an souped up game engine for the OutRun arcade game. The original 68000 and Z80 assembler code has been rewritten in C++. This makes it possible to make improvements suitable for modern platforms, including a higher frame-rate and widescreen support. It requires the original ROMs, as these contain elements including the graphics and audio data.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eFor an overview of CannonBall and its features, please read the \u003ca href=\"https://github.com/djyt/cannonball/wiki\"\u003emanual\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://reassembler.blogspot.co.uk/\" rel=\"nofollow\"\u003eReassembler Blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/djyt\" rel=\"nofollow\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003ePlease note that I  maintain the Windows build of CannonBall. Whilst I strive to ensure this is a fully cross-platform project that compiles across Linux, Wii, Mac, Pi4 etc. I do not maintain those ports. Port specific issues should be raised with the respective person.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThank you!\nChris White (Project Creator).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eGetting Started\u003c/h2\u003e\u003ca id=\"user-content-getting-started\" aria-label=\"Permalink: Getting Started\" href=\"#getting-started\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCannonBall is coded in C++ and makes use of the SDL 2 and Boost libraries.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCannonBall has been successfully built for Windows, Mac OS X, Linux, Open Pandora and the Raspberry Pi.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCannonBall can use OpenGL, OpenGLES (mobile platforms) or plain SDL2 for rendering.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI have recently deprecated support for SDL 1, to focus on SDL 2. But feel free to grab an older version from github if you need it.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eInstall your favourite C++11 environment (e.g. GCC, Visual Studio, Xcode, MingGW etc.)\u003c/li\u003e\n\u003cli\u003eInstall \u003ca href=\"http://www.cmake.org/\" rel=\"nofollow\"\u003eCMake\u003c/a\u003e. This generates your platform and compiler build files.\u003c/li\u003e\n\u003cli\u003eExtract the \u003ca href=\"http://www.boost.org/\" rel=\"nofollow\"\u003eBoost Library\u003c/a\u003e somewhere, for example: c:\\coding\\lib\\boost_1_74_0  Note that Boost does not need to be compiled, as only the header libraries are used. This keeps things nice and lightweight.\u003c/li\u003e\n\u003cli\u003eExtract the \u003ca href=\"https://www.libsdl.org/download-2.0.php\" rel=\"nofollow\"\u003eSDL Development Library\u003c/a\u003e somewhere, for example: c:\\coding\\lib\\SDL2-2.0.12\u003c/li\u003e\n\u003cli\u003eRead the SDL documentation \u0026amp; build the SDL Library for your system.\u003c/li\u003e\n\u003cli\u003eWindows only: I needed to copy cannonball/cmake/windows_copy_to_sdl2_lib_directory/sdl2-config.cmake to c:\\coding\\lib\\SDL2-2.0.12\u003c/li\u003e\n\u003cli\u003eWindows only: download and install the \u003ca href=\"https://archive.org/details/dx81sdk_full\" rel=\"nofollow\"\u003eDirect 8.1 SDK\u003c/a\u003e. This is used for force-feedback and a legacy from when I was using SDL 1. I should update it sometime to use SDL 2 instead.\u003c/li\u003e\n\u003cli\u003eExtract the Cannonball code somewhere, for example: c:\\coding\\cannonball\u003c/li\u003e\n\u003cli\u003eYou may need to create a .cmake file for your system to configure specific options. See the cmake subdirectory for more details.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBuild\u003c/h2\u003e\u003ca id=\"user-content-build\" aria-label=\"Permalink: Build\" href=\"#build\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eRun CMake to generate the relevant build files for your compiler. You can optionally pass -DTARGET=filename to pass a custom .cmake file\u003c/li\u003e\n\u003cli\u003eCompile using your chosen compiler. Further details below.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eVisual Studio 2019 Community Edition\u003c/h3\u003e\u003ca id=\"user-content-visual-studio-2019-community-edition\" aria-label=\"Permalink: Visual Studio 2019 Community Edition\" href=\"#visual-studio-2019-community-edition\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eCreate to the sub-directory you want to create your build files in (e.g. or vs_build)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003ecmake -G \u0026#34;Visual Studio 16 2019\u0026#34; ../cmake\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eOpen the created CannonBall solution in VS 2019.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eRight click and choose \u0026#39;Set as StartUp project\u0026#39;.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eSet working directory to something sensible. Right click -\u0026gt; Configuration properties -\u0026gt; Debugging\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eEnsure config.xml is in the working directory. \u003cem\u003eYou can specify an alternate location on the command line\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eEdit config.xml to reflect the paths of your roms and res directories. By default, they should be in the working directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eCopy the OutRun revision B romset to the roms subdirectory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eYou can then compile, debug and run from Visual Studio as expected.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
