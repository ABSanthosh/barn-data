{
  "id": "58fc84cd-6f3f-469b-94a2-6c0d31d4d3a8",
  "title": "Containerization is a Swift package for running Linux containers on macOS",
  "link": "https://github.com/apple/containerization",
  "description": "Comments",
  "author": "",
  "published": "Mon, 09 Jun 2025 20:53:29 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "apple",
  "length": 5548,
  "excerpt": "Containerization is a Swift package for running Linux containers on macOS. - apple/containerization",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Containerization The Containerization package allows applications to use Linux containers. Containerization is written in Swift and uses Virtualization.framework on Apple silicon. Containerization provides APIs to: Manage OCI images. Interact with remote registries. Create and populate ext4 file systems. Interact with the Netlink socket family. Create an optimized Linux kernel for fast boot times. Spawn lightweight virtual machines. Manage the runtime environment of virtual machines. Spawn and interact with containerized processes. Use Rosetta 2 for executing x86_64 processes on Apple silicon. Please view the API documentation for information on the Swift packages that Containerization provides. Design Containerization executes each Linux container inside of its own lightweight virtual machine. Clients can create dedicated IP addresses for every container to remove the need for individual port forwarding. Containers achieve sub-second start times using an optimized Linux kernel configuration and a minimal root filesystem with a lightweight init system. vminitd is a small init system, which is a subproject within Containerization. vminitd is spawned as the initial process inside of the virtual machine and provides a GRPC API over vsock. The API allows the runtime environment to be configured and containerized processes to be launched. vminitd provides I/O, signals, and events to the calling process when a process is ran. Requirements You need an Apple silicon Mac to build and run Containerization. To build the Containerization package, your system needs either: macOS 15 or newer and Xcode 26 Beta macOS 26 Beta 1 or newer Applications built using the package will run on macOS 15 or later, but the following features are not available on macOS 15: Non-isolated container networking - with macOS 15, containers on the same vmnet network cannot communicate with each other Example Usage For examples of how to use some of the libraries surface, the cctl executable is a good start. This tools primary job is as a playground to trial out the API. It contains commands that exercise some of the core functionality of the various products, such as: Manipulating OCI images Logging in to container registries Creating root filesystem blocks Running simple Linux containers Linux kernel A Linux kernel is required for spawning lightweight virtual machines on macOS. Containerization provides an optimized kernel configuration located in the kernel directory. This directory includes a containerized build environment to easily compile a kernel for use with Containerization. The kernel configuration is a minimal set of features to support fast start times and a light weight environment. While this configuration will work for the majority of workloads we understand that some will need extra features. To solve this Containerization provides first class APIs to use different kernel configurations and versions on a per container basis. This enables containers to be developed and validated across different kernel versions. See the README in the kernel directory for instruction on how to compile the optimized kernel. Pre-build Kernel If you wish to consume a pre-built kernel it must have VIRTIO drivers compiled into the kernel, not as modules. The Kata Containers project provides an optimized kernel for containers with all the required configuration options enabled provided on the releases page. A kernel image named vmlinux.container can be found in the /opt/kata/share/kata-containers/ directory of the release artifacts. Prepare to build package Install Swiftly, Swift, and Static Linux SDK: If you use a custom terminal application, you may need to move this command from .zprofile to .zshrc (replace \u003cUSERNAME\u003e): # Added by swiftly . \"/Users/\u003cUSERNAME\u003e/.swiftly/env.sh\" Restart the terminal application. Ensure this command returns /Users/\u003cUSERNAME\u003e/.swiftly/bin/swift (replace \u003cUSERNAME\u003e): If you've installed or used a Static Linux SDK previously, you may need to remove older SDK versions from the system (replace \u003cSDK-ID\u003e): swift sdk list swift sdk remove \u003cSDK-ID\u003e Build the package Build Containerization from sources: Test the package After building, run basic and integration tests: A kernel is required to run integration tests. If you do not have a kernel locally for use a default kernel can be fetched using the make fetch-default-kernel target. Fetching the default kernel only needs to happen after an initial build or after a make clean. make fetch-default-kernel make all test integration Protobufs Containerization depends on specific versions of grpc-swift and swift-protobuf. You can install them and re-generate RPC interfaces with: Documentation Generate the API documentation for local viewing with: make docs make serve-docs Preview the documentation by running in another terminal: open http://localhost:8000/documentation/ Contributing Contributions to Containerization are welcomed and encouraged. Please see CONTRIBUTING.md for more information. Project Status Version 0.1.0 is the first official release of Containerization. Earlier versions have no source stability guarantees. Because the Containerization library is under active development, source stability is only guaranteed within minor versions (e.g. between 0.1.1 and 0.1.2). If you don't want potentially source-breaking package updates, you can specify your package dependency using .upToNextMinorVersion(from: \"0.1.0\") instead. Future minor versions of the package may introduce changes to these rules as needed.",
  "image": "https://repository-images.githubusercontent.com/992765044/25c375a4-cbf5-4a4b-b1e1-a4e34f3c1ee5",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eContainerization\u003c/h2\u003e\u003ca id=\"user-content-containerization\" aria-label=\"Permalink: Containerization\" href=\"#containerization\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe Containerization package allows applications to use Linux containers.\nContainerization is written in \u003ca href=\"https://www.swift.org\" rel=\"nofollow\"\u003eSwift\u003c/a\u003e and uses \u003ca href=\"https://developer.apple.com/documentation/virtualization\" rel=\"nofollow\"\u003eVirtualization.framework\u003c/a\u003e on Apple silicon.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eContainerization provides APIs to:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eManage OCI images.\u003c/li\u003e\n\u003cli\u003eInteract with remote registries.\u003c/li\u003e\n\u003cli\u003eCreate and populate ext4 file systems.\u003c/li\u003e\n\u003cli\u003eInteract with the Netlink socket family.\u003c/li\u003e\n\u003cli\u003eCreate an optimized Linux kernel for fast boot times.\u003c/li\u003e\n\u003cli\u003eSpawn lightweight virtual machines.\u003c/li\u003e\n\u003cli\u003eManage the runtime environment of virtual machines.\u003c/li\u003e\n\u003cli\u003eSpawn and interact with containerized processes.\u003c/li\u003e\n\u003cli\u003eUse Rosetta 2 for executing x86_64 processes on Apple silicon.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003ePlease view the \u003ca href=\"https://apple.github.io/containerization/documentation/\" rel=\"nofollow\"\u003eAPI documentation\u003c/a\u003e for information on the Swift packages that Containerization provides.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eDesign\u003c/h2\u003e\u003ca id=\"user-content-design\" aria-label=\"Permalink: Design\" href=\"#design\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eContainerization executes each Linux container inside of its own lightweight virtual machine. Clients can create dedicated IP addresses for every container to remove the need for individual port forwarding. Containers achieve sub-second start times using an optimized \u003ca href=\"https://github.com/apple/containerization/blob/main/kernel\"\u003eLinux kernel configuration\u003c/a\u003e and a minimal root filesystem with a lightweight init system.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/apple/containerization/blob/main/vminitd\"\u003evminitd\u003c/a\u003e is a small init system, which is a subproject within Containerization.\n\u003ccode\u003evminitd\u003c/code\u003e is spawned as the initial process inside of the virtual machine and provides a GRPC API over vsock.\nThe API allows the runtime environment to be configured and containerized processes to be launched.\n\u003ccode\u003evminitd\u003c/code\u003e provides I/O, signals, and events to the calling process when a process is ran.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRequirements\u003c/h2\u003e\u003ca id=\"user-content-requirements\" aria-label=\"Permalink: Requirements\" href=\"#requirements\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou need an Apple silicon Mac to build and run Containerization.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eTo build the Containerization package, your system needs either:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003emacOS 15 or newer and Xcode 26 Beta\u003c/li\u003e\n\u003cli\u003emacOS 26 Beta 1 or newer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eApplications built using the package will run on macOS 15 or later, but the following features are not available on macOS 15:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eNon-isolated container networking - with macOS 15, containers on the same vmnet network cannot communicate with each other\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eExample Usage\u003c/h2\u003e\u003ca id=\"user-content-example-usage\" aria-label=\"Permalink: Example Usage\" href=\"#example-usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor examples of how to use some of the libraries surface, the cctl executable is a good start. This tools primary job is as a playground to trial out the API. It contains commands that exercise some of the core functionality of the various products, such as:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/containerization/blob/main/Sources/cctl/ImageCommand.swift\"\u003eManipulating OCI images\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/containerization/blob/main/Sources/cctl/LoginCommand.swift\"\u003eLogging in to container registries\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/containerization/blob/main/Sources/cctl/RootfsCommand.swift\"\u003eCreating root filesystem blocks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/containerization/blob/main/Sources/cctl/RunCommand.swift\"\u003eRunning simple Linux containers\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eLinux kernel\u003c/h2\u003e\u003ca id=\"user-content-linux-kernel\" aria-label=\"Permalink: Linux kernel\" href=\"#linux-kernel\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA Linux kernel is required for spawning lightweight virtual machines on macOS.\nContainerization provides an optimized kernel configuration located in the \u003ca href=\"https://github.com/apple/containerization/blob/main/kernel\"\u003ekernel\u003c/a\u003e directory.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis directory includes a containerized build environment to easily compile a kernel for use with Containerization.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe kernel configuration is a minimal set of features to support fast start times and a light weight environment.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhile this configuration will work for the majority of workloads we understand that some will need extra features.\nTo solve this Containerization provides first class APIs to use different kernel configurations and versions on a per container basis.\nThis enables containers to be developed and validated across different kernel versions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee the \u003ca href=\"https://github.com/apple/containerization/blob/main/kernel/README.md\"\u003eREADME\u003c/a\u003e in the kernel directory for instruction on how to compile the optimized kernel.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePre-build Kernel\u003c/h3\u003e\u003ca id=\"user-content-pre-build-kernel\" aria-label=\"Permalink: Pre-build Kernel\" href=\"#pre-build-kernel\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you wish to consume a pre-built kernel it must have \u003ccode\u003eVIRTIO\u003c/code\u003e drivers compiled into the kernel, not as modules.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"https://github.com/kata-containers/kata-containers\"\u003eKata Containers\u003c/a\u003e project provides an optimized kernel for containers with all the required configuration options enabled provided on the \u003ca href=\"https://github.com/kata-containers/kata-containers/releases/\"\u003ereleases\u003c/a\u003e page.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA kernel image named \u003ccode\u003evmlinux.container\u003c/code\u003e can be found in the \u003ccode\u003e/opt/kata/share/kata-containers/\u003c/code\u003e directory of the release artifacts.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003ePrepare to build package\u003c/h2\u003e\u003ca id=\"user-content-prepare-to-build-package\" aria-label=\"Permalink: Prepare to build package\" href=\"#prepare-to-build-package\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstall Swiftly, \u003ca href=\"https://www.swift.org\" rel=\"nofollow\"\u003eSwift\u003c/a\u003e, and \u003ca href=\"https://www.swift.org/documentation/articles/static-linux-getting-started.html\" rel=\"nofollow\"\u003eStatic Linux SDK\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eIf you use a custom terminal application, you may need to move this command from \u003ccode\u003e.zprofile\u003c/code\u003e to \u003ccode\u003e.zshrc\u003c/code\u003e (replace \u003ccode\u003e\u0026lt;USERNAME\u0026gt;\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Added by swiftly\n. \u0026#34;/Users/\u0026lt;USERNAME\u0026gt;/.swiftly/env.sh\u0026#34;\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Added by swiftly\u003c/span\u003e\n\u003cspan\u003e.\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/Users/\u0026lt;USERNAME\u0026gt;/.swiftly/env.sh\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRestart the terminal application. Ensure this command returns \u003ccode\u003e/Users/\u0026lt;USERNAME\u0026gt;/.swiftly/bin/swift\u003c/code\u003e (replace \u003ccode\u003e\u0026lt;USERNAME\u0026gt;\u003c/code\u003e):\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eIf you\u0026#39;ve installed or used a Static Linux SDK previously, you may need to remove older SDK versions from the system (replace \u003ccode\u003e\u0026lt;SDK-ID\u0026gt;\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"swift sdk list\nswift sdk remove \u0026lt;SDK-ID\u0026gt;\"\u003e\u003cpre\u003eswift sdk list\nswift sdk remove \u003cspan\u003e\u0026lt;\u003c/span\u003eSDK-ID\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBuild the package\u003c/h2\u003e\u003ca id=\"user-content-build-the-package\" aria-label=\"Permalink: Build the package\" href=\"#build-the-package\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBuild Containerization from sources:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTest the package\u003c/h2\u003e\u003ca id=\"user-content-test-the-package\" aria-label=\"Permalink: Test the package\" href=\"#test-the-package\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAfter building, run basic and integration tests:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eA kernel is required to run integration tests.\nIf you do not have a kernel locally for use a default kernel can be fetched using the \u003ccode\u003emake fetch-default-kernel\u003c/code\u003e target.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFetching the default kernel only needs to happen after an initial build or after a \u003ccode\u003emake clean\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"make fetch-default-kernel\nmake all test integration\"\u003e\u003cpre\u003emake fetch-default-kernel\nmake all \u003cspan\u003etest\u003c/span\u003e integration\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eProtobufs\u003c/h2\u003e\u003ca id=\"user-content-protobufs\" aria-label=\"Permalink: Protobufs\" href=\"#protobufs\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eContainerization depends on specific versions of \u003ccode\u003egrpc-swift\u003c/code\u003e and \u003ccode\u003eswift-protobuf\u003c/code\u003e. You can install them and re-generate RPC interfaces with:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eDocumentation\u003c/h2\u003e\u003ca id=\"user-content-documentation\" aria-label=\"Permalink: Documentation\" href=\"#documentation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eGenerate the API documentation for local viewing with:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"make docs\nmake serve-docs\"\u003e\u003cpre\u003emake docs\nmake serve-docs\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003ePreview the documentation by running in another terminal:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"open http://localhost:8000/documentation/\"\u003e\u003cpre\u003eopen http://localhost:8000/documentation/\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eContributing\u003c/h2\u003e\u003ca id=\"user-content-contributing\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eContributions to Containerization are welcomed and encouraged. Please see \u003ca href=\"https://github.com/apple/containerization/blob/main/CONTRIBUTING.md\"\u003eCONTRIBUTING.md\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eProject Status\u003c/h2\u003e\u003ca id=\"user-content-project-status\" aria-label=\"Permalink: Project Status\" href=\"#project-status\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eVersion 0.1.0 is the first official release of Containerization. Earlier versions have no source stability guarantees.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBecause the Containerization library is under active development, source stability is only guaranteed within minor versions (e.g. between 0.1.1 and 0.1.2). If you don\u0026#39;t want potentially source-breaking package updates, you can specify your package dependency using .upToNextMinorVersion(from: \u0026#34;0.1.0\u0026#34;) instead.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFuture minor versions of the package may introduce changes to these rules as needed.\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
