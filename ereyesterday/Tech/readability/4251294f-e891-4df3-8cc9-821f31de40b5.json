{
  "id": "4251294f-e891-4df3-8cc9-821f31de40b5",
  "title": "Show HN: Jq-Like Tool for Markdown",
  "link": "https://github.com/yshavit/mdq",
  "description": "Comments",
  "author": "",
  "published": "Sun, 23 Feb 2025 20:05:49 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "yshavit",
  "length": 2621,
  "excerpt": "like jq but for Markdown: find specific elements in a md doc - yshavit/mdq",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "mdq: jq for Markdown What is mdq? mdq aims to do for Markdown what jq does for JSON: provide an easy way to zero in on specific parts of a document. For example, GitHub PRs are Markdown documents, and some organizations have specific templates with checklists for all reviewers to complete. Enforcing these often requires ugly regexes that are a pain to write and worse to debug. Instead, you can (for example) ask mdq for all uncompleted tasks: mdq is available under the Apache 2.0 or MIT licenses, at your option. I am open to other permissive licenses, if you have one you prefer. Installation Any of these will work: cargo install --git https://github.com/yshavit/mdq Download binaries from the latest release (or any other release, of course). You can also grab the binaries from the latest build-release workflow run. You must be logged into GitHub to do that (this is GitHub's limitation, not mine). You'll have to chmod +x them before you can run them. Security concerns The release and latest-workflow binaries are built on GitHub's servers, so if you trust my code (and dependencies), and you trust GitHub, you can trust the binaries. See https://github.com/yshavit/mdq/wiki/Release-binaries for information on how to verify them. Basic Usage Simple example to select sections containing \"usage\": cat example.md | mdq '# usage' Use pipe (|) to chain filters together. For example, to select sections containing \"usage\", and within those find all unordered list items: cat example.md | mdq '# usage | -' The filter syntax is designed to mirror Markdown syntax. You can select... Element Syntax Sections # title text Lists - unordered list item text \" 1. ordered list item text \" - [ ] uncompleted task \" - [x] completed task \" - [?] any task Links [display text](url) Images ![alt text](url) Block quotes \u003e block quote text Code blocks ```language \u003ccode block text\u003e Raw HTML \u003c/\u003e html_tag Plain paragraphs P: paragraph text Tables :-: header text :-: row text (Tables selection differs from other selections in that you can actually select only certain headers and rows, such that the resulting element is of a different shape than the original. See the wiki for more.) In any of the above, the text may be: an unquoted string that starts with a letter; this is case-insensitive a \"quoted string\" (either single or double quotes); this is case-sensitive a string (quoted or unquoted) anchored by ^ or $ (for start and end of string, respectively) a /regex/ omitted or *, to mean \"any\" See the tutorial for a bit more detail, and user manual for the full picture.",
  "image": "https://opengraph.githubassets.com/1be1a6389079f7221b588eb4a04091f9e0d30db69b71a9d41a9c6256445d4e96/yshavit/mdq",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003emdq: jq for Markdown\u003c/h2\u003e\u003ca id=\"user-content-mdq-jq-for-markdown\" aria-label=\"Permalink: mdq: jq for Markdown\" href=\"#mdq-jq-for-markdown\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/yshavit/mdq/actions/workflows/coverage.yml?query=branch%3Amain\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e00250a78d40dd1b59825a23f22254a4a45a693289697ee25aeb939e0d68c047/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324635333930316130313135623539366530313561383931633431666230663235362532467261772532466d64712d636f7665726167652e6a736f6e\" alt=\"Code Coverage\" data-canonical-src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2F53901a0115b596e015a891c41fb0f256%2Fraw%2Fmdq-coverage.json\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/yshavit/mdq/actions/workflows/rust.yml?query=branch%3Amain\"\u003e\u003cimg src=\"https://github.com/yshavit/mdq/actions/workflows/rust.yml/badge.svg\" alt=\"Build status\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/search?q=repo%3Ayshavit%2Fmdq+NOT+path%3A.github%2Fworkflows%2Fcoverage.yml+NOT+path%3AREADME.md+todo\u0026amp;type=code\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/fa2d0ff288b4ea8442ba13e1a2d3e9723f2b7fb8f7f388140871cff364dda3bb/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324665376139653965373236353164613064376432623166626265353632333764302532467261772532466d64712d746f646f732e6a736f6e\" alt=\"Pending TODOs\" data-canonical-src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2Fe7a9e9e72651da0d7d2b1fbbe56237d0%2Fraw%2Fmdq-todos.json\"/\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/search?q=repo%3Ayshavit%2Fmdq+%28%28path%3A%2F%5C.rs%24%2F+%22%23%5Bignore%5D%22%29+OR+%28path%3Atests%2Fmd_cases+%2F%5Eignore%2F%29%29\u0026amp;type=code\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/24b941eb55a662fac1b55cd6f1678fb3d2186c8a79241607d3d04bc4a4f75033/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d2532467973686176697425324637383261386463356637376432636634623163373734646137323633366630302532467261772532466d64712d69676e6f726564732e6a736f6e\" alt=\"Ignored tests\" data-canonical-src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fgist.githubusercontent.com%2Fyshavit%2F782a8dc5f77d2cf4b1c774da72636f00%2Fraw%2Fmdq-ignoreds.json\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eWhat is mdq?\u003c/h2\u003e\u003ca id=\"user-content-what-is-mdq\" aria-label=\"Permalink: What is mdq?\" href=\"#what-is-mdq\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003emdq aims to do for Markdown what jq does for JSON: provide an easy way to zero in on specific parts of a document.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor example, GitHub PRs are Markdown documents, and some organizations have specific templates with checklists for all\nreviewers to complete. Enforcing these often requires ugly regexes that are a pain to write and worse to debug. Instead,\nyou can (for example) ask mdq for all uncompleted tasks:\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003emdq is available under the Apache 2.0 or MIT licenses, at your option. I am open to other permissive licenses, if you\nhave one you prefer.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h2\u003e\u003ca id=\"user-content-installation\" aria-label=\"Permalink: Installation\" href=\"#installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAny of these will work:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"cargo install --git https://github.com/yshavit/mdq\"\u003e\u003cpre\u003ecargo install --git https://github.com/yshavit/mdq\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003eDownload binaries from \u003ca href=\"https://github.com/yshavit/mdq/releases/latest\"\u003ethe latest release\u003c/a\u003e (or any other release, of course).\u003c/li\u003e\n\u003cli\u003eYou can also grab the binaries from the latest \u003ca href=\"https://github.com/yshavit/mdq/actions/workflows/build-release.yml\"\u003ebuild-release\u003c/a\u003e workflow run. You must be logged into GitHub to do\nthat (this is GitHub\u0026#39;s limitation, not mine). You\u0026#39;ll have to \u003ccode\u003echmod +x\u003c/code\u003e them before you can run them.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdetails\u003e\n\u003csummary\u003eSecurity concerns\u003c/summary\u003e\nThe release and latest-workflow binaries are built on GitHub\u0026#39;s servers, so if you trust my code (and dependencies), and you trust GitHub,\nyou can trust the binaries. See \u003ca href=\"https://github.com/yshavit/mdq/wiki/Release-binaries\"\u003ehttps://github.com/yshavit/mdq/wiki/Release-binaries\u003c/a\u003e for information on how to verify them.\n \u003c/details\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBasic Usage\u003c/h2\u003e\u003ca id=\"user-content-basic-usage\" aria-label=\"Permalink: Basic Usage\" href=\"#basic-usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSimple example to select sections containing \u0026#34;usage\u0026#34;:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"cat example.md | mdq \u0026#39;# usage\u0026#39;\"\u003e\u003cpre\u003ecat example.md \u003cspan\u003e|\u003c/span\u003e mdq \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e# usage\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eUse pipe (\u003ccode\u003e|\u003c/code\u003e) to chain filters together. For example, to select sections containing \u0026#34;usage\u0026#34;, and within those find\nall unordered list items:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"cat example.md | mdq \u0026#39;# usage | -\u0026#39;\"\u003e\u003cpre\u003ecat example.md \u003cspan\u003e|\u003c/span\u003e mdq \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e# usage | -\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe filter syntax is designed to mirror Markdown syntax. You can select...\u003c/p\u003e\n\u003cmarkdown-accessiblity-table\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eElement\u003c/th\u003e\n\u003cth\u003eSyntax\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSections\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e# title text\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLists\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e- unordered list item text\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026#34;\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e1. ordered list item text\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026#34;\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e- [ ] uncompleted task\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026#34;\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e- [x] completed task\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026#34;\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e- [?] any task\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLinks\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e[display text](url)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eImages\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e![alt text](url)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBlock quotes\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026gt; block quote text\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCode blocks\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e ```language \u0026lt;code block text\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRaw HTML\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;/\u0026gt; html_tag\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePlain paragraphs\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eP: paragraph text \u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTables\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e:-: header text :-: row text\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/markdown-accessiblity-table\u003e\n\u003cp dir=\"auto\"\u003e(Tables selection differs from other selections in that you can actually select only certain headers and rows, such that\nthe resulting element is of a different shape than the original. See the wiki for more.)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIn any of the above, the text may be:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003ean \u003ccode\u003eunquoted string\u003c/code\u003e that starts with a letter; this is case-insensitive\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e\u0026#34;quoted string\u0026#34;\u003c/code\u003e (either single or double quotes); this is case-sensitive\u003c/li\u003e\n\u003cli\u003ea string (quoted or unquoted) anchored by \u003ccode\u003e^\u003c/code\u003e or \u003ccode\u003e$\u003c/code\u003e (for start and end of string, respectively)\u003c/li\u003e\n\u003cli\u003ea \u003ccode\u003e/regex/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eomitted or \u003ccode\u003e*\u003c/code\u003e, to mean \u0026#34;any\u0026#34;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eSee the \u003ca href=\"https://github.com/yshavit/mdq/wiki/Tutorial\"\u003etutorial\u003c/a\u003e for a bit more detail, and \u003ca href=\"https://github.com/yshavit/mdq/wiki/Full-User-Manual\"\u003euser manual\u003c/a\u003e for the full picture.\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
