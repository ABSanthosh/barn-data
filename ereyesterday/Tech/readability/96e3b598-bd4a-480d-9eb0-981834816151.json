{
  "id": "96e3b598-bd4a-480d-9eb0-981834816151",
  "title": "Kerning, the Hard Way",
  "link": "https://home.octetfont.com/blog/kerning-hard.html",
  "description": "Comments",
  "author": "",
  "published": "Fri, 14 Mar 2025 19:47:12 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 4386,
  "excerpt": "Here is a font i am working on; i hope you like it.",
  "siteName": "",
  "favicon": "",
  "text": "2025-03-14 by David Jones Here is a font i am working on; i hope you like it. The letterforms are reversed out against a vertically striped background. In a manner similar to Schaeffer Versalien. The graphic effect is inspired-by/stolen-from Schaefer Versalien, but the letterforms are modified from my found stencil font Arugula. Bear in the mind that with a font like this, the parts that are drawn are the black parts. So, let's consider a word like SALTY: Looks okay? Perhaps you think is fine and there is nothing to comment on. What about the kerning, in this case between L and T? In the good old days of metal type the only kerns were when /f projected outside the edge of its body. This would not have been kerned and we were ok with that (larger wooden type may have been kerned with a saw or a file, but in this design, the cuts would have to be made to line up the stripes exactly; tricky business). Here’s what this particular example looks like without kerning: I’m not going to go back and forth over the merits of kerning, i‘m here for the nerdy technical details. In most, normal, fonts kerning is done with position rules (GPOS lookups); that doesn’t work here, because if we reposition T to be slightly further left, we get something like this disaster: It looks a bit like L and T have been clipped, but in fact they’ve been drawn over. Black parts of L overlap the T, and vice versa: black parts of the T overlap L. The effect is what you can see, where L and T share a space, the black bars overlap and are solid, obliterating the reversed out letterforms. So how do i kern this font, if not with GSPOS lookups? With GSUB lookups! GSUB (for substitution) lookups substitute one sequence of glyphs for another. The details can get quite complicated, but the way i use them here is relatively simple. I split L and T into two pieces each, and recombine the middle two pieces into the drawing of the kerned part. I’ll illustrate the steps. With glyphs that have been articifically spaced out, so that you can see each individual glyph. L and T as individual glyphs Each of L and T is split into two pieces. So we get 4 glyphs: /L.left /L.right /T.left T.right. This is done with GSUB lookup rule like sub L by L.left L.right ;. The two middle pieces, /L.right and T.left, get replaced with what i call a joiner the kerned piece in the middle shared by both L and T. Here the GSUB rules look like sub L.right T.left by L_T.joiner ;. That’s actually it. The next image is just the previous one without the extra spacing, and is how it would actually appear. Notes The pattern of vertical stripes means that kerns can only be a multiple of the stripe repeat (not quite true, and i have sketched out more general versions of this, but it is true for this font). The gaps in the pattern help avoid solid black-to-black joins, which might work when everything is a vector, but tend to leave sub-1-pixel gaps when rasterised. The gaps are also why a glyph isn’t split down the middle to make the .left and .right parts. That would leave a sub-1-pixel gap when rejoining. Better to split at a gap. The glyph names, used in the rules above, don’t matter at that level, but i suspect affect the PDF; in particular cutting-and-pasting from PDF, so there might be some tweaking of names. For each letter (glyph) that participates in kerning, there are two more glyphs for its .left and .right parts. And... For each kerned pair there is a glyph for its joiner, because each one is unique. Those are going to mount up quickly, which suggests kerning only when strictly necessary. None of the splits and joiners are drawn by hand, and none of the GSUB rules are made by hand. In both cases it is a Small Matter of Programming, also known as Custom Python Scripts. The libraries fontTools and fontFeatures were invaluable in this. This font is not yet complete, but right now it is a real font and really does work like this. I've only kerned L, so there’s a few more kerns to do. And right now is has a very basic alphabet, just A to Z; i will draw some more letters and a few more decorative items, but i plan for it to have a fairly small repertoire, partly because the kerning and the vertical stripe design add to the constraints. And if you thought kerning was problematic (and hopefully now you do), consider how accents and other diacritics are going to work. ;) END",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\n\n\u003ctime\u003e2025-03-14\u003c/time\u003e\n\u003caddress\u003eby David Jones\u003c/address\u003e\n\u003cp\u003eHere is a font i am working on; i hope you like it.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/010stork.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe letterforms are reversed out against a vertically striped background.\nIn a manner similar to \u003ca href=\"https://fontsinuse.com/typefaces/32260/schaefer-versalien\"\u003eSchaeffer\nVersalien\u003c/a\u003e.\nThe graphic effect is inspired-by/stolen-from Schaefer Versalien, but\nthe letterforms are modified from my found stencil font\n\u003ca href=\"https://drj11.itch.io/arugula-font\"\u003eArugula\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBear in the mind that with a font like this, the parts that are drawn\nare the black parts.\u003c/p\u003e\n\u003cp\u003eSo, let\u0026#39;s consider a word like SALTY:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/020salty.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eLooks okay? Perhaps you think is fine and there is nothing to comment on.\u003c/p\u003e\n\u003cp\u003eWhat about the kerning, in this case between \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e?\nIn the good old days of metal type the only kerns were when \u003ccode\u003e/f\u003c/code\u003e projected\noutside the edge of its body.\nThis would not have been kerned and we were ok with that\n(larger wooden type may have been kerned with a saw or a file, but\nin this design, the cuts would have to be made to line up the stripes\nexactly; tricky business).\u003c/p\u003e\n\u003cp\u003eHere’s what this particular example looks like without kerning:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/030saltynokern.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eI’m not going to go back and forth over the merits of kerning,\ni‘m here for the nerdy technical details.\u003c/p\u003e\n\u003cp\u003eIn most, normal, fonts kerning is done with position rules (GPOS lookups);\nthat doesn’t work here, because if we reposition \u003cstrong\u003eT\u003c/strong\u003e to\nbe slightly further left, we get something like this disaster:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/040saltybad.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt looks a bit like \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e have been clipped, but in fact\nthey’ve been drawn over. Black parts of \u003cstrong\u003eL\u003c/strong\u003e overlap\nthe \u003cstrong\u003eT\u003c/strong\u003e, and vice versa: black parts of the\n\u003cstrong\u003eT\u003c/strong\u003e overlap \u003cstrong\u003eL\u003c/strong\u003e.\nThe effect is what you can see, where \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e share a space,\nthe black bars overlap and are solid, obliterating the reversed out\nletterforms.\u003c/p\u003e\n\u003cp\u003eSo how do i kern this font, if not with GSPOS lookups?\u003c/p\u003e\n\u003cp\u003eWith GSUB lookups! GSUB (for substitution) lookups substitute\none sequence of glyphs for another.\nThe details can get quite complicated, but the way i use them here\nis relatively simple.\u003c/p\u003e\n\u003cp\u003eI split \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e into two pieces each, and recombine\nthe middle two pieces into the drawing of the kerned part.\u003c/p\u003e\n\u003cp\u003eI’ll illustrate the steps. With glyphs that have been articifically spaced out,\nso that you can see each individual glyph.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e as individual glyphs\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/050LTspace.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eEach of \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e is split into two pieces. So we get 4 glyphs:\n\u003ccode\u003e/L.left\u003c/code\u003e \u003ccode\u003e/L.right\u003c/code\u003e \u003ccode\u003e/T.left\u003c/code\u003e \u003ccode\u003eT.right\u003c/code\u003e.\nThis is done with GSUB lookup rule like \u003ccode\u003esub L by L.left L.right ;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/060split.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe two middle pieces, \u003ccode\u003e/L.right\u003c/code\u003e and \u003ccode\u003eT.left\u003c/code\u003e, get replaced with\nwhat i call a \u003cem\u003ejoiner\u003c/em\u003e the kerned piece in the middle shared by\nboth \u003cstrong\u003eL\u003c/strong\u003e and \u003cstrong\u003eT\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eHere the GSUB rules look like \u003ccode\u003esub L.right T.left by L_T.joiner ;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/070joined.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eThat’s actually it. The next image is just the previous one without\nthe extra spacing, and is how it would actually appear.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://home.octetfont.com/blog/image/kerninghard/080LTcomplete.png\"/\u003e\u003c/p\u003e\n\u003ch2\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThe pattern of vertical stripes means that kerns can only be a multiple\nof the stripe repeat (not quite true, and i have sketched out more\ngeneral versions of this, but it \u003cem\u003eis\u003c/em\u003e true for this font).\u003c/p\u003e\n\u003cp\u003eThe gaps in the pattern help avoid solid black-to-black joins, which\nmight work when everything is a vector, but tend to leave sub-1-pixel\ngaps when rasterised.\nThe gaps are also why a glyph isn’t split down the middle to\nmake the \u003ccode\u003e.left\u003c/code\u003e and \u003ccode\u003e.right\u003c/code\u003e parts.\nThat would leave a sub-1-pixel gap when rejoining.\nBetter to split at a gap.\u003c/p\u003e\n\u003cp\u003eThe glyph names, used in the rules above, don’t matter at that level,\nbut i suspect affect the PDF; in particular cutting-and-pasting\nfrom PDF, so there might be some tweaking of names.\u003c/p\u003e\n\u003cp\u003eFor each letter (glyph) that participates in kerning, there\nare two more glyphs for its \u003ccode\u003e.left\u003c/code\u003e and \u003ccode\u003e.right\u003c/code\u003e parts.\nAnd...\u003c/p\u003e\n\u003cp\u003eFor each \u003cem\u003ekerned pair\u003c/em\u003e there is a glyph for its joiner, because\neach one is unique.\nThose are going to mount up quickly, which suggests kerning\nonly when strictly necessary.\u003c/p\u003e\n\u003cp\u003eNone of the splits and joiners are drawn by hand, and\nnone of the GSUB rules are made by hand.\nIn both cases it is a \u003cem\u003eSmall Matter of Programming\u003c/em\u003e,\nalso known as Custom Python Scripts.\nThe libraries \u003ca href=\"https://github.com/fonttools/fonttools\"\u003efontTools\u003c/a\u003e and\n\u003ca href=\"https://github.com/simoncozens/fontFeatures\"\u003efontFeatures\u003c/a\u003e were \u003cem\u003einvaluable\u003c/em\u003e in this.\u003c/p\u003e\n\u003cp\u003eThis font is not yet complete, but right now it is a real font and\nreally does work like this.\nI\u0026#39;ve only kerned \u003cstrong\u003eL\u003c/strong\u003e, so there’s a few more kerns to do.\nAnd right now is has a very basic alphabet, just A to Z;\ni will draw some more letters and a few more decorative items, but\ni plan for it to have a fairly small repertoire, partly because the\nkerning and the vertical stripe design add to the constraints.\u003c/p\u003e\n\u003cp\u003eAnd if you thought kerning was problematic (and hopefully now you do),\nconsider how accents and other diacritics are going to work. ;)\u003c/p\u003e\n\u003ch2\u003eEND\u003c/h2\u003e\n\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
