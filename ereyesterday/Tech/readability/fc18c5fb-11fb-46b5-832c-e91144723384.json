{
  "id": "fc18c5fb-11fb-46b5-832c-e91144723384",
  "title": "Code found online exploits LogoFAIL to install Bootkitty Linux backdoor",
  "link": "https://arstechnica.com/security/2024/11/code-found-online-exploits-logofail-to-install-bootkitty-linux-backdoor/",
  "description": "Unearthed sample likely works against Linux devices from Acer, HP, Fujitsu, and Lenovo.",
  "author": "Dan Goodin",
  "published": "Fri, 29 Nov 2024 21:37:00 +0000",
  "source": "http://feeds.arstechnica.com/arstechnica/index",
  "categories": [
    "Biz \u0026 IT",
    "Security",
    "bootkitty",
    "Linux",
    "logofail",
    "uefi",
    "unified extensible firmware interface"
  ],
  "byline": "Dan Goodin",
  "length": 2975,
  "excerpt": "Unearthed sample likely works against Linux devices from Acer, HP, Fujitsu, and Lenovo.",
  "siteName": "Ars Technica",
  "favicon": "https://cdn.arstechnica.net/wp-content/uploads/2016/10/cropped-ars-logo-512_480-300x300.png",
  "text": "Normally, Secure Boot prevents the UEFI from running all subsequent files unless they bear a digital signature certifying those files are trusted by the device maker. The exploit bypasses this protection by injecting shell code stashed in a malicious bitmap image displayed by the UEFI during the boot-up process. The injected code installs a cryptographic key that digitally signs a malicious GRUB file along with a backdoored image of the Linux kernel, both of which run during later stages of the boot process on Linux machines. The silent installation of this key induces the UEFI to treat the malicious GRUB and kernel image as trusted components, and thereby bypass Secure Boot protections. The final result is a backdoor slipped into the Linux kernel before any other security defenses are loaded. Diagram illustrating the execution flow of the LogoFAIL exploit Binarly found in the wild. Credit: Binarly In an online interview, HD Moore, CTO and co-founder at runZero and an expert in firmware-based malware, explained the Binarly report this way: The Binarly paper points to someone using the LogoFAIL bug to configure a UEFI payload that bypasses secure boot (firmware) by tricking the firmware into accepting their self-signed key (which is then stored in the firmware as the MOK variable). The evil code is still limited to the user-side of UEFI, but the LogoFAIL exploit does let them add their own signing key to the firmware's allow list (but does not infect the firmware in any way otherwise). It's still effectively a GRUB-based kernel backdoor versus a firmware backdoor, but it does abuse a firmware bug (LogoFAIL) to allow installation without user interaction (enrolling, rebooting, then accepting the new MOK signing key). In a normal secure boot setup, the admin generates a local key, uses this to sign their updated kernel/GRUB packages, tells the firmware to enroll the key they made, then after reboot, the admin has to accept this new key via the console (or remotely via bmc/ipmi/ilo/drac/etc bios console). In this setup, the attacker can replace the known-good GRUB + kernel with a backdoored version by enrolling their own signing key without user interaction via the LogoFAIL exploit, but it’s still effectively a GRUB-based bootkit, and doesn't get hardcoded into the BIOS firmware or anything. Machines vulnerable to the exploit include some models sold by Acer, HP, Fujitsu, and Lenovo when they ship with a UEFI developed by manufacturer Insyde and run Linux. Evidence found in the exploit code indicates the exploit may be tailored for specific hardware configurations of such machines. Insyde issued a patch earlier this year that prevents the exploit from working. Unpatched devices remain vulnerable. Devices from these manufacturers that use non-Insyde UEFIs aren't affected.",
  "image": "https://cdn.arstechnica.net/wp-content/uploads/2024/03/backdoor-1100x648.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \n          \n\u003cp\u003eNormally, Secure Boot prevents the \u003ca href=\"https://en.wikipedia.org/wiki/UEFI\"\u003eUEFI\u003c/a\u003e from running all subsequent files unless they bear a digital signature certifying those files are trusted by the device maker. The exploit bypasses this protection by injecting shell code stashed in a malicious bitmap image displayed by the UEFI during the boot-up process. The injected code installs a cryptographic key that digitally signs a malicious \u003ca href=\"https://en.wikipedia.org/wiki/GNU_GRUB\"\u003eGRUB\u003c/a\u003e file along with a backdoored image of the Linux kernel, both of which run during later stages of the boot process on Linux machines.\u003c/p\u003e\n\u003cp\u003eThe silent installation of this key induces the UEFI to treat the malicious GRUB and kernel image as trusted components, and thereby bypass Secure Boot protections. The final result is a backdoor slipped into the Linux kernel before any other security defenses are loaded.\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cp\u003e\u003cimg width=\"1999\" height=\"1400\" src=\"https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution.png\" alt=\"\" decoding=\"async\" loading=\"lazy\" srcset=\"https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution.png 1999w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-640x448.png 640w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-1024x717.png 1024w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-768x538.png 768w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-1536x1076.png 1536w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-980x686.png 980w, https://cdn.arstechnica.net/wp-content/uploads/2024/11/logofail-exploit-execution-1440x1009.png 1440w\" sizes=\"auto, (max-width: 1999px) 100vw, 1999px\"/\u003e\n                  \u003c/p\u003e\n          \u003cfigcaption\u003e\n        \u003cdiv\u003e\n    \n    \u003cp\u003e\n      Diagram illustrating the execution flow of the LogoFAIL exploit Binarly found in the wild.\n\n              \u003cspan\u003e\n          Credit:\n\n          \n          Binarly\n\n                  \u003c/span\u003e\n          \u003c/p\u003e\n  \u003c/div\u003e\n      \u003c/figcaption\u003e\n      \u003c/figure\u003e\n\n\u003cp\u003eIn an online interview, HD Moore, CTO and co-founder at runZero and an expert in firmware-based malware, explained the Binarly report this way:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003eThe Binarly paper points to someone using the LogoFAIL bug to configure a UEFI payload that bypasses secure boot (firmware) by tricking the firmware into accepting their self-signed key (which is then stored in the firmware as the MOK variable). The evil code is still limited to the user-side of UEFI, but the LogoFAIL exploit does let them add their own signing key to the firmware\u0026#39;s allow list (but does not infect the firmware in any way otherwise).\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s still effectively a GRUB-based kernel backdoor versus a firmware backdoor, but it does abuse a firmware bug (LogoFAIL) to allow installation without user interaction (enrolling, rebooting, then accepting the new MOK signing key).\u003c/p\u003e\n\u003cp\u003eIn a normal secure boot setup, the admin generates a local key, uses this to sign their updated kernel/GRUB packages, tells the firmware to enroll the key they made, then after reboot, the admin has to accept this new key via the console (or remotely via bmc/ipmi/ilo/drac/etc bios console).\u003c/p\u003e\n\u003cp\u003eIn this setup, the attacker can replace the known-good GRUB + kernel with a backdoored version by enrolling their own signing key without user interaction via the LogoFAIL exploit, but it’s still effectively a GRUB-based bootkit, and doesn\u0026#39;t get hardcoded into the BIOS firmware or anything.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eMachines vulnerable to the exploit include some models sold by Acer, HP, Fujitsu, and Lenovo when they ship with a UEFI developed by manufacturer Insyde and run Linux. Evidence found in the exploit code indicates the exploit may be tailored for specific hardware configurations of such machines. Insyde issued a patch earlier this year that prevents the exploit from working. Unpatched devices remain vulnerable. Devices from these manufacturers that use non-Insyde UEFIs aren\u0026#39;t affected.\u003c/p\u003e\n\n          \n                  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-29T21:37:00Z",
  "modifiedTime": "2024-11-29T23:53:44Z"
}
