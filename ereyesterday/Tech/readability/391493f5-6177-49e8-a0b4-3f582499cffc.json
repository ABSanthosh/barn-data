{
  "id": "391493f5-6177-49e8-a0b4-3f582499cffc",
  "title": "Show HN: Claude Composer",
  "link": "https://github.com/possibilities/claude-composer",
  "description": "Comments",
  "author": "",
  "published": "Thu, 05 Jun 2025 22:53:21 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "possibilities",
  "length": 13662,
  "excerpt": "A tool for enhancing Claude Code. Contribute to possibilities/claude-composer development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Claude Composer CLI A tool for enhancing Claude Code What is Claude Composer? Claude Composer is a CLI wrapper for Claude Code that adds small enhancements around automation, UX, and configuration. Reduced interruptions: Automatically handles permission dialogs based on configurable rules Flexible control: Rulesets let you define exactly which actions to allow automatically Tool management: Toolsets simplify configuring which tools Claude can use Enhanced visibility: System notifications keep you informed without switching contexts Table of Contents Features Quick Start Installation Basic Usage What is Claude Composer? Installation \u0026 Setup Prerequisites Installation Initial Configuration Directory Structure Basic Usage Command Structure Common Workflows Examples Configuration Configuration File Locations Basic Configuration Options Environment Variables Roots Configuration Rulesets What are Rulesets? Internal Rulesets Project-Level Rulesets Using Rulesets Creating Custom Rulesets Toolsets What are Toolsets? Internal Toolsets Project-Level Toolsets Using Toolsets Creating Custom Toolsets Command Line Options Core Options Subcommands Pass-through Options Advanced Notification Controls Development Contributing Release Process Quick Start Installation npm install -g claude-composer # or yarn global add claude-composer # or pnpm add -g claude-composer Basic Usage # Initialize global configuration claude-composer cc-init # Start Claude Code with automatic dialog dismissal claude-composer # Uses the ruleset configured during cc-init # Use a more permissive ruleset claude-composer --ruleset internal:yolo Installation \u0026 Setup See docs/installation.md for detailed installation instructions. Prerequisites Node.js 18 or higher npm, yarn, or pnpm package manager Claude Code installed and configured Installation Install Claude Composer globally: pnpm add -g claude-composer Or with other package managers: yarn global add claude-composer npm install -g claude-composer Initial Configuration Run claude-composer cc-init to create your initial configuration: # Create global configuration (default) claude-composer cc-init # Or create project-specific configuration claude-composer cc-init --project Global Configuration By default, claude-composer cc-init creates a global configuration that applies to all projects: Configuration location: ~/.claude-composer/config.yaml Interactive prompts for ruleset and toolset selection Applies to all Claude Composer invocations unless overridden Project Configuration Use claude-composer cc-init --project to create a project-specific configuration: Creates .claude-composer/config.yaml in current directory Takes precedence over global configuration when present Ideal for project-specific rules and tool settings Directory Structure Global configuration: ~/.claude-composer/ ├── config.yaml # Global configuration ├── rulesets/ # Custom global rulesets (unprefixed) │ ├── my-workflow.yaml │ └── backend-dev.yaml └── toolsets/ # Custom global toolsets (unprefixed) ├── my-tools.yaml └── web-dev.yaml Project configuration (with --project): your-project/ ├── .claude-composer/ │ ├── config.yaml # Project configuration │ ├── rulesets/ # Custom project rulesets │ └── toolsets/ # Custom project toolsets └── ... (your project files) Basic Usage Command Structure claude-composer [claude-composer-options] [claude-code-args] Claude Composer acts as a wrapper around Claude Code, passing through all supported arguments to Claude Code. Common Workflows Using Configuration Files # Use global configuration claude-composer # Use project configuration (if present) cd your-project claude-composer # Override with specific ruleset claude-composer --ruleset internal:safe Passing Arguments to Claude Code # Pass model selection to Claude Code claude-composer --model claude-3-opus-20240229 # Combine composer options with Claude Code args claude-composer --ruleset internal:yolo --model claude-3-opus-20240229 Working with Different Rulesets # Safe mode - all dialogs require confirmation claude-composer --ruleset internal:safe # Cautious mode - auto-accept project-level operations claude-composer --ruleset internal:cautious # YOLO mode - auto-accept all operations claude-composer --ruleset internal:yolo # Global custom ruleset (no prefix needed) claude-composer --ruleset my-workflow # Project-specific ruleset claude-composer --ruleset project:my-custom-rules # Chain multiple rulesets claude-composer --ruleset internal:safe --ruleset my-overrides Examples See docs/examples.md for more usage examples and advanced workflows. Starting a new project mkdir my-project \u0026\u0026 cd my-project claude-composer cc-init --project claude-composer # Uses the configuration created by cc-init YOLO # Use YOLO mode if you are truly living in the moment claude-composer --ruleset internal:yolo Safe AF # This effectively disables accepting all confirmations claude-composer --ruleset internal:safe With custom toolsets # Enable built-in tools claude-composer --toolset internal:core --ruleset internal:cautious # Use global custom toolset claude-composer --toolset my-tools --ruleset my-workflow Configuration Claude Composer uses YAML configuration files to define behavior. Configuration is loaded from multiple sources with the following precedence (highest to lowest): Command-line flags Project configuration (.claude-composer/config.yaml) Global configuration (~/.claude-composer/config.yaml) Built-in defaults Configuration File Locations Global: ~/.claude-composer/config.yaml Project: .claude-composer/config.yaml Custom rulesets: {config-dir}/rulesets/*.yaml Custom toolsets: {config-dir}/toolsets/*.yaml Basic Configuration Options # Rulesets to apply (in order) rulesets: - internal:cautious # Built-in ruleset - my-defaults # Global custom ruleset - project:custom-rules # Project-specific ruleset # Toolsets to enable toolsets: - internal:core # Built-in toolset - development-tools # Global custom toolset - project:my-tools # Project-specific toolset # Trusted root directories roots: - ~/projects/work - ~/projects/personal # UI preferences show_notifications: true sticky_notifications: false See docs/configuration.md for comprehensive configuration documentation. Environment Variables Claude Composer supports environment variables for configuration: CLAUDE_COMPOSER_CONFIG_DIR - Override config directory location CLAUDE_COMPOSER_NO_NOTIFY - Disable all notifications FORCE_COLOR - Control color output See docs/environment-variables.md for details. Roots Configuration Roots define trusted parent directories where Claude Code's initial trust prompt is automatically accepted. See docs/roots-config.md for detailed configuration options. roots: - ~/projects # Trust direct children of ~/projects - /tmp/sandbox # Trust direct children of /tmp/sandbox - $WORK_DIR/repos # Environment variable expansion supported When you start Claude Composer in a directory whose parent is listed in roots: The \"Do you trust the files in this folder?\" prompt is automatically accepted The automatic acceptance confirmation prompt is suppressed Important: Only direct children of root directories are trusted. For example, if ~/projects is a root, then ~/projects/my-app is trusted, but ~/projects/my-app/src is not. Rulesets Rulesets control which permission dialogs are automatically accepted or rejected. They provide fine-grained control over Claude Code's interactions with your system. What are Rulesets? Rulesets are YAML files that define: Which dialogs to automatically accept or reject Path-based rules for file and directory operations Pattern-based command filtering Domain allowlists for web requests Internal Rulesets Claude Composer includes three built-in rulesets. See docs/internal-rulesets.md for detailed information about each ruleset. internal:safe Maximum security - all dialogs require manual confirmation. No automatic acceptance of any operations. internal:cautious Balanced approach - automatically accepts project-level operations (file edits, creates, bash commands) while requiring confirmation for global operations and web requests. internal:yolo Maximum automation - accepts all operations without confirmation, including global file operations and web requests. Use with caution. See docs/rulesets.md for detailed ruleset documentation and creating custom rulesets. Project-Level Rulesets Create custom rulesets in your project's .claude-composer/rulesets/ directory: # .claude-composer/rulesets/backend.yaml name: backend description: Rules for backend development # Accept file operations with path restrictions accept_project_edit_file_prompts: paths: - 'src/**/*.js' - 'src/**/*.ts' - 'test/**' - '!**/*.env' accept_project_bash_command_prompts: true accept_fetch_content_prompts: false Using Rulesets # Use internal ruleset claude-composer --ruleset internal:cautious # Use global custom ruleset (no prefix) claude-composer --ruleset my-workflow # Use project ruleset claude-composer --ruleset project:backend # Chain multiple rulesets (later rules override earlier) claude-composer --ruleset internal:cautious --ruleset my-defaults --ruleset project:backend Creating Custom Rulesets Custom rulesets allow fine-grained control over automation. See docs/rulesets.md for complete syntax and examples. Toolsets Toolsets control which tools Claude can use and configure MCP (Model Context Protocol) servers. They provide a flexible way to manage Claude's capabilities on a per-project or global basis. What are Toolsets? Toolsets are YAML files that define: Which tools Claude is allowed to use Which tools Claude is explicitly blocked from using MCP server configurations for additional tool capabilities Internal Toolsets Claude Composer includes one built-in toolset. See docs/internal-toolsets.md for detailed information. internal:core Provides access to Context7 documentation tools, allowing Claude to fetch up-to-date library documentation. Project-Level Toolsets Create custom toolsets in your project's .claude-composer/toolsets/ directory: # .claude-composer/toolsets/dev-tools.yaml allowed: - Read - Write - Edit - MultiEdit - Bash disallowed: - WebSearch mcp: my-server: type: stdio command: node args: - ./tools/mcp-server.js Using Toolsets # Use internal toolset claude-composer --toolset internal:core # Use global custom toolset (no prefix) claude-composer --toolset my-tools # Use project toolset claude-composer --toolset project:dev-tools # Chain multiple toolsets claude-composer --toolset internal:core --toolset project:backend-tools Creating Custom Toolsets Toolsets control which tools Claude can use and configure MCP servers. See docs/toolsets.md for complete documentation. Command Line Options See docs/cli-reference.md for complete command line documentation. Core Options Configuration --ruleset \u003cname...\u003e - Use specified rulesets (can be used multiple times) --toolset \u003cname...\u003e - Use specified toolsets (can be used multiple times) --ignore-global-config - Ignore global configuration file Safety --dangerously-allow-in-dirty-directory - Allow running with uncommitted git changes --dangerously-allow-without-version-control - Allow running outside version control --dangerously-suppress-automatic-acceptance-confirmation - Skip confirmation prompts Notifications --show-notifications / --no-show-notifications - Enable/disable desktop notifications --sticky-notifications / --no-sticky-notifications - Make notifications stay until dismissed --show-work-complete-notifications / --no-show-work-complete-notifications - Show/hide work completion notifications Debug --quiet - Suppress preflight messages --allow-buffer-snapshots - Enable Ctrl+Shift+S terminal snapshots --log-all-pattern-matches - Log pattern matches to ~/.claude-composer/logs/ Subcommands cc-init Initialize a new configuration file: # Create global config claude-composer cc-init # Create project config claude-composer cc-init --project # Specify ruleset during init claude-composer cc-init --use-cautious-ruleset Options: --project - Create config in current directory --use-yolo-ruleset - Use YOLO ruleset --use-cautious-ruleset - Use cautious ruleset (recommended) --use-safe-ruleset - Use safe ruleset --use-core-toolset / --no-use-core-toolset - Enable/disable core toolset Pass-through Options All unrecognized options are passed to Claude Code: # These go to Claude Code claude-composer --model claude-3-opus-20240229 claude-composer --print claude-composer --help # Shows both claude-composer and claude help Advanced Notification Controls Fine-tune which notifications appear: # Control specific notification types claude-composer --no-show-edit-file-confirm-notify claude-composer --show-accepted-confirm-notify claude-composer --sticky-work-complete-notifications See docs/notifications.md for detailed notification configuration. Development Contributing Contributions are welcome! Please: Fork the repository Create a feature branch (git checkout -b feature/amazing-feature) Commit your changes (git commit -m 'Add amazing feature') Push to the branch (git push origin feature/amazing-feature) Open a Pull Request Release Process This project uses automated releases via npm and GitHub. See docs/release-process.md for detailed release instructions. Quick release commands: npm run release:patch # Bug fixes (0.1.0 → 0.1.1) npm run release:minor # New features (0.1.0 → 0.2.0) npm run release:major # Breaking changes (0.1.0 → 1.0.0)",
  "image": "https://opengraph.githubassets.com/37b15d285727e2d7e9c7f89f5a988cda0282a4c9aea82952f8baf4e4025740a1/possibilities/claude-composer",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eClaude Composer CLI\u003c/h2\u003e\u003ca id=\"user-content-claude-composer-cli\" aria-label=\"Permalink: Claude Composer CLI\" href=\"#claude-composer-cli\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eA tool for enhancing Claude Code\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eWhat is Claude Composer?\u003c/h2\u003e\u003ca id=\"user-content-what-is-claude-composer\" aria-label=\"Permalink: What is Claude Composer?\" href=\"#what-is-claude-composer\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer is a CLI wrapper for Claude Code that adds small enhancements around automation, UX, and configuration.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003cstrong\u003eReduced interruptions\u003c/strong\u003e: Automatically handles permission dialogs based on configurable rules\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlexible control\u003c/strong\u003e: Rulesets let you define exactly which actions to allow automatically\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTool management\u003c/strong\u003e: Toolsets simplify configuring which tools Claude can use\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced visibility\u003c/strong\u003e: System notifications keep you informed without switching contexts\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTable of Contents\u003c/h2\u003e\u003ca id=\"user-content-table-of-contents\" aria-label=\"Permalink: Table of Contents\" href=\"#table-of-contents\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#quick-start\"\u003eQuick Start\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#installation\"\u003eInstallation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#basic-usage\"\u003eBasic Usage\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-is-claude-composer\"\u003eWhat is Claude Composer?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installation--setup\"\u003eInstallation \u0026amp; Setup\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#prerequisites\"\u003ePrerequisites\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installation-1\"\u003eInstallation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#initial-configuration\"\u003eInitial Configuration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#directory-structure\"\u003eDirectory Structure\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#basic-usage-1\"\u003eBasic Usage\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#command-structure\"\u003eCommand Structure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#common-workflows\"\u003eCommon Workflows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#examples\"\u003eExamples\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#configuration-file-locations\"\u003eConfiguration File Locations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#basic-configuration-options\"\u003eBasic Configuration Options\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#environment-variables\"\u003eEnvironment Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#roots-configuration\"\u003eRoots Configuration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#rulesets\"\u003eRulesets\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#what-are-rulesets\"\u003eWhat are Rulesets?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#internal-rulesets\"\u003eInternal Rulesets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#project-level-rulesets\"\u003eProject-Level Rulesets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#using-rulesets\"\u003eUsing Rulesets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#creating-custom-rulesets\"\u003eCreating Custom Rulesets\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#toolsets\"\u003eToolsets\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#what-are-toolsets\"\u003eWhat are Toolsets?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#internal-toolsets\"\u003eInternal Toolsets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#project-level-toolsets\"\u003eProject-Level Toolsets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#using-toolsets\"\u003eUsing Toolsets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#creating-custom-toolsets\"\u003eCreating Custom Toolsets\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#command-line-options\"\u003eCommand Line Options\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#core-options\"\u003eCore Options\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#subcommands\"\u003eSubcommands\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pass-through-options\"\u003ePass-through Options\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#advanced-notification-controls\"\u003eAdvanced Notification Controls\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#development\"\u003eDevelopment\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#contributing\"\u003eContributing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#release-process\"\u003eRelease Process\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eQuick Start\u003c/h2\u003e\u003ca id=\"user-content-quick-start\" aria-label=\"Permalink: Quick Start\" href=\"#quick-start\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h3\u003e\u003ca id=\"user-content-installation\" aria-label=\"Permalink: Installation\" href=\"#installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"npm install -g claude-composer\n# or\nyarn global add claude-composer\n# or\npnpm add -g claude-composer\"\u003e\u003cpre\u003enpm install -g claude-composer\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e or\u003c/span\u003e\nyarn global add claude-composer\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e or\u003c/span\u003e\npnpm add -g claude-composer\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eBasic Usage\u003c/h3\u003e\u003ca id=\"user-content-basic-usage\" aria-label=\"Permalink: Basic Usage\" href=\"#basic-usage\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Initialize global configuration\nclaude-composer cc-init\n\n# Start Claude Code with automatic dialog dismissal\nclaude-composer  # Uses the ruleset configured during cc-init\n\n# Use a more permissive ruleset\nclaude-composer --ruleset internal:yolo\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Initialize global configuration\u003c/span\u003e\nclaude-composer cc-init\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Start Claude Code with automatic dialog dismissal\u003c/span\u003e\nclaude-composer  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Uses the ruleset configured during cc-init\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use a more permissive ruleset\u003c/span\u003e\nclaude-composer --ruleset internal:yolo\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInstallation \u0026amp; Setup\u003c/h2\u003e\u003ca id=\"user-content-installation--setup\" aria-label=\"Permalink: Installation \u0026amp; Setup\" href=\"#installation--setup\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/installation.md\"\u003edocs/installation.md\u003c/a\u003e for detailed installation instructions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePrerequisites\u003c/h3\u003e\u003ca id=\"user-content-prerequisites\" aria-label=\"Permalink: Prerequisites\" href=\"#prerequisites\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eNode.js 18 or higher\u003c/li\u003e\n\u003cli\u003enpm, yarn, or pnpm package manager\u003c/li\u003e\n\u003cli\u003eClaude Code installed and configured\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h3\u003e\u003ca id=\"user-content-installation-1\" aria-label=\"Permalink: Installation\" href=\"#installation-1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstall Claude Composer globally:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"pnpm add -g claude-composer\"\u003e\u003cpre\u003epnpm add -g claude-composer\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr with other package managers:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"yarn global add claude-composer\nnpm install -g claude-composer\"\u003e\u003cpre\u003eyarn global add claude-composer\nnpm install -g claude-composer\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInitial Configuration\u003c/h3\u003e\u003ca id=\"user-content-initial-configuration\" aria-label=\"Permalink: Initial Configuration\" href=\"#initial-configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRun \u003ccode\u003eclaude-composer cc-init\u003c/code\u003e to create your initial configuration:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Create global configuration (default)\nclaude-composer cc-init\n\n# Or create project-specific configuration\nclaude-composer cc-init --project\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Create global configuration (default)\u003c/span\u003e\nclaude-composer cc-init\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Or create project-specific configuration\u003c/span\u003e\nclaude-composer cc-init --project\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eGlobal Configuration\u003c/h4\u003e\u003ca id=\"user-content-global-configuration\" aria-label=\"Permalink: Global Configuration\" href=\"#global-configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBy default, \u003ccode\u003eclaude-composer cc-init\u003c/code\u003e creates a global configuration that applies to all projects:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eConfiguration location: \u003ccode\u003e~/.claude-composer/config.yaml\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eInteractive prompts for ruleset and toolset selection\u003c/li\u003e\n\u003cli\u003eApplies to all Claude Composer invocations unless overridden\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eProject Configuration\u003c/h4\u003e\u003ca id=\"user-content-project-configuration\" aria-label=\"Permalink: Project Configuration\" href=\"#project-configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eUse \u003ccode\u003eclaude-composer cc-init --project\u003c/code\u003e to create a project-specific configuration:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eCreates \u003ccode\u003e.claude-composer/config.yaml\u003c/code\u003e in current directory\u003c/li\u003e\n\u003cli\u003eTakes precedence over global configuration when present\u003c/li\u003e\n\u003cli\u003eIdeal for project-specific rules and tool settings\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eDirectory Structure\u003c/h3\u003e\u003ca id=\"user-content-directory-structure\" aria-label=\"Permalink: Directory Structure\" href=\"#directory-structure\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eGlobal configuration:\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"~/.claude-composer/\n├── config.yaml          # Global configuration\n├── rulesets/           # Custom global rulesets (unprefixed)\n│   ├── my-workflow.yaml\n│   └── backend-dev.yaml\n└── toolsets/           # Custom global toolsets (unprefixed)\n    ├── my-tools.yaml\n    └── web-dev.yaml\"\u003e\u003cpre\u003e\u003ccode\u003e~/.claude-composer/\n├── config.yaml          # Global configuration\n├── rulesets/           # Custom global rulesets (unprefixed)\n│   ├── my-workflow.yaml\n│   └── backend-dev.yaml\n└── toolsets/           # Custom global toolsets (unprefixed)\n    ├── my-tools.yaml\n    └── web-dev.yaml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eProject configuration (with \u003ccode\u003e--project\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"your-project/\n├── .claude-composer/\n│   ├── config.yaml     # Project configuration\n│   ├── rulesets/       # Custom project rulesets\n│   └── toolsets/       # Custom project toolsets\n└── ... (your project files)\"\u003e\u003cpre\u003e\u003ccode\u003eyour-project/\n├── .claude-composer/\n│   ├── config.yaml     # Project configuration\n│   ├── rulesets/       # Custom project rulesets\n│   └── toolsets/       # Custom project toolsets\n└── ... (your project files)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBasic Usage\u003c/h2\u003e\u003ca id=\"user-content-basic-usage-1\" aria-label=\"Permalink: Basic Usage\" href=\"#basic-usage-1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCommand Structure\u003c/h3\u003e\u003ca id=\"user-content-command-structure\" aria-label=\"Permalink: Command Structure\" href=\"#command-structure\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"claude-composer [claude-composer-options] [claude-code-args]\"\u003e\u003cpre\u003eclaude-composer [claude-composer-options] [claude-code-args]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer acts as a wrapper around Claude Code, passing through all supported arguments to Claude Code.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCommon Workflows\u003c/h3\u003e\u003ca id=\"user-content-common-workflows\" aria-label=\"Permalink: Common Workflows\" href=\"#common-workflows\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eUsing Configuration Files\u003c/h4\u003e\u003ca id=\"user-content-using-configuration-files\" aria-label=\"Permalink: Using Configuration Files\" href=\"#using-configuration-files\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Use global configuration\nclaude-composer\n\n# Use project configuration (if present)\ncd your-project\nclaude-composer\n\n# Override with specific ruleset\nclaude-composer --ruleset internal:safe\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use global configuration\u003c/span\u003e\nclaude-composer\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use project configuration (if present)\u003c/span\u003e\n\u003cspan\u003ecd\u003c/span\u003e your-project\nclaude-composer\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Override with specific ruleset\u003c/span\u003e\nclaude-composer --ruleset internal:safe\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003ePassing Arguments to Claude Code\u003c/h4\u003e\u003ca id=\"user-content-passing-arguments-to-claude-code\" aria-label=\"Permalink: Passing Arguments to Claude Code\" href=\"#passing-arguments-to-claude-code\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Pass model selection to Claude Code\nclaude-composer --model claude-3-opus-20240229\n\n# Combine composer options with Claude Code args\nclaude-composer --ruleset internal:yolo --model claude-3-opus-20240229\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Pass model selection to Claude Code\u003c/span\u003e\nclaude-composer --model claude-3-opus-20240229\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Combine composer options with Claude Code args\u003c/span\u003e\nclaude-composer --ruleset internal:yolo --model claude-3-opus-20240229\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eWorking with Different Rulesets\u003c/h4\u003e\u003ca id=\"user-content-working-with-different-rulesets\" aria-label=\"Permalink: Working with Different Rulesets\" href=\"#working-with-different-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Safe mode - all dialogs require confirmation\nclaude-composer --ruleset internal:safe\n\n# Cautious mode - auto-accept project-level operations\nclaude-composer --ruleset internal:cautious\n\n# YOLO mode - auto-accept all operations\nclaude-composer --ruleset internal:yolo\n\n# Global custom ruleset (no prefix needed)\nclaude-composer --ruleset my-workflow\n\n# Project-specific ruleset\nclaude-composer --ruleset project:my-custom-rules\n\n# Chain multiple rulesets\nclaude-composer --ruleset internal:safe --ruleset my-overrides\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Safe mode - all dialogs require confirmation\u003c/span\u003e\nclaude-composer --ruleset internal:safe\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Cautious mode - auto-accept project-level operations\u003c/span\u003e\nclaude-composer --ruleset internal:cautious\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e YOLO mode - auto-accept all operations\u003c/span\u003e\nclaude-composer --ruleset internal:yolo\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Global custom ruleset (no prefix needed)\u003c/span\u003e\nclaude-composer --ruleset my-workflow\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Project-specific ruleset\u003c/span\u003e\nclaude-composer --ruleset project:my-custom-rules\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Chain multiple rulesets\u003c/span\u003e\nclaude-composer --ruleset internal:safe --ruleset my-overrides\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eExamples\u003c/h3\u003e\u003ca id=\"user-content-examples\" aria-label=\"Permalink: Examples\" href=\"#examples\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/examples.md\"\u003edocs/examples.md\u003c/a\u003e for more usage examples and advanced workflows.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eStarting a new project\u003c/h4\u003e\u003ca id=\"user-content-starting-a-new-project\" aria-label=\"Permalink: Starting a new project\" href=\"#starting-a-new-project\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"mkdir my-project \u0026amp;\u0026amp; cd my-project\nclaude-composer cc-init --project\nclaude-composer  # Uses the configuration created by cc-init\"\u003e\u003cpre\u003emkdir my-project \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003ecd\u003c/span\u003e my-project\nclaude-composer cc-init --project\nclaude-composer  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Uses the configuration created by cc-init\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eYOLO\u003c/h4\u003e\u003ca id=\"user-content-yolo\" aria-label=\"Permalink: YOLO\" href=\"#yolo\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Use YOLO mode if you are truly living in the moment\nclaude-composer --ruleset internal:yolo\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use YOLO mode if you are truly living in the moment\u003c/span\u003e\nclaude-composer --ruleset internal:yolo\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eSafe AF\u003c/h4\u003e\u003ca id=\"user-content-safe-af\" aria-label=\"Permalink: Safe AF\" href=\"#safe-af\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# This effectively disables accepting all confirmations\nclaude-composer --ruleset internal:safe\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e This effectively disables accepting all confirmations\u003c/span\u003e\nclaude-composer --ruleset internal:safe\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eWith custom toolsets\u003c/h4\u003e\u003ca id=\"user-content-with-custom-toolsets\" aria-label=\"Permalink: With custom toolsets\" href=\"#with-custom-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Enable built-in tools\nclaude-composer --toolset internal:core --ruleset internal:cautious\n\n# Use global custom toolset\nclaude-composer --toolset my-tools --ruleset my-workflow\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Enable built-in tools\u003c/span\u003e\nclaude-composer --toolset internal:core --ruleset internal:cautious\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use global custom toolset\u003c/span\u003e\nclaude-composer --toolset my-tools --ruleset my-workflow\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eConfiguration\u003c/h2\u003e\u003ca id=\"user-content-configuration\" aria-label=\"Permalink: Configuration\" href=\"#configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer uses YAML configuration files to define behavior. Configuration is loaded from multiple sources with the following precedence (highest to lowest):\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eCommand-line flags\u003c/li\u003e\n\u003cli\u003eProject configuration (\u003ccode\u003e.claude-composer/config.yaml\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eGlobal configuration (\u003ccode\u003e~/.claude-composer/config.yaml\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eBuilt-in defaults\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eConfiguration File Locations\u003c/h3\u003e\u003ca id=\"user-content-configuration-file-locations\" aria-label=\"Permalink: Configuration File Locations\" href=\"#configuration-file-locations\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003cstrong\u003eGlobal\u003c/strong\u003e: \u003ccode\u003e~/.claude-composer/config.yaml\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProject\u003c/strong\u003e: \u003ccode\u003e.claude-composer/config.yaml\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom rulesets\u003c/strong\u003e: \u003ccode\u003e{config-dir}/rulesets/*.yaml\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom toolsets\u003c/strong\u003e: \u003ccode\u003e{config-dir}/toolsets/*.yaml\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eBasic Configuration Options\u003c/h3\u003e\u003ca id=\"user-content-basic-configuration-options\" aria-label=\"Permalink: Basic Configuration Options\" href=\"#basic-configuration-options\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Rulesets to apply (in order)\nrulesets:\n  - internal:cautious # Built-in ruleset\n  - my-defaults # Global custom ruleset\n  - project:custom-rules # Project-specific ruleset\n\n# Toolsets to enable\ntoolsets:\n  - internal:core # Built-in toolset\n  - development-tools # Global custom toolset\n  - project:my-tools # Project-specific toolset\n\n# Trusted root directories\nroots:\n  - ~/projects/work\n  - ~/projects/personal\n\n# UI preferences\nshow_notifications: true\nsticky_notifications: false\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Rulesets to apply (in order)\u003c/span\u003e\n\u003cspan\u003erulesets\u003c/span\u003e:\n  - \u003cspan\u003einternal:cautious \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Built-in ruleset\u003c/span\u003e\n  - \u003cspan\u003emy-defaults \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Global custom ruleset\u003c/span\u003e\n  - \u003cspan\u003eproject:custom-rules \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Project-specific ruleset\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Toolsets to enable\u003c/span\u003e\n\u003cspan\u003etoolsets\u003c/span\u003e:\n  - \u003cspan\u003einternal:core \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Built-in toolset\u003c/span\u003e\n  - \u003cspan\u003edevelopment-tools \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Global custom toolset\u003c/span\u003e\n  - \u003cspan\u003eproject:my-tools \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Project-specific toolset\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Trusted root directories\u003c/span\u003e\n\u003cspan\u003eroots\u003c/span\u003e:\n  - \u003cspan\u003e~/projects/work\u003c/span\u003e\n  - \u003cspan\u003e~/projects/personal\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e UI preferences\u003c/span\u003e\n\u003cspan\u003eshow_notifications\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e\n\u003cspan\u003esticky_notifications\u003c/span\u003e: \u003cspan\u003efalse\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/configuration.md\"\u003edocs/configuration.md\u003c/a\u003e for comprehensive configuration documentation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eEnvironment Variables\u003c/h3\u003e\u003ca id=\"user-content-environment-variables\" aria-label=\"Permalink: Environment Variables\" href=\"#environment-variables\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer supports environment variables for configuration:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003eCLAUDE_COMPOSER_CONFIG_DIR\u003c/code\u003e - Override config directory location\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCLAUDE_COMPOSER_NO_NOTIFY\u003c/code\u003e - Disable all notifications\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFORCE_COLOR\u003c/code\u003e - Control color output\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/environment-variables.md\"\u003edocs/environment-variables.md\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eRoots Configuration\u003c/h3\u003e\u003ca id=\"user-content-roots-configuration\" aria-label=\"Permalink: Roots Configuration\" href=\"#roots-configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRoots define trusted parent directories where Claude Code\u0026#39;s initial trust prompt is automatically accepted. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/roots-config.md\"\u003edocs/roots-config.md\u003c/a\u003e for detailed configuration options.\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"roots:\n  - ~/projects # Trust direct children of ~/projects\n  - /tmp/sandbox # Trust direct children of /tmp/sandbox\n  - $WORK_DIR/repos # Environment variable expansion supported\"\u003e\u003cpre\u003e\u003cspan\u003eroots\u003c/span\u003e:\n  - \u003cspan\u003e~/projects \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Trust direct children of ~/projects\u003c/span\u003e\n  - \u003cspan\u003e/tmp/sandbox \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Trust direct children of /tmp/sandbox\u003c/span\u003e\n  - \u003cspan\u003e$WORK_DIR/repos \u003c/span\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Environment variable expansion supported\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen you start Claude Composer in a directory whose \u003cstrong\u003eparent\u003c/strong\u003e is listed in roots:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eThe \u0026#34;Do you trust the files in this folder?\u0026#34; prompt is automatically accepted\u003c/li\u003e\n\u003cli\u003eThe automatic acceptance confirmation prompt is suppressed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: Only direct children of root directories are trusted. For example, if \u003ccode\u003e~/projects\u003c/code\u003e is a root, then \u003ccode\u003e~/projects/my-app\u003c/code\u003e is trusted, but \u003ccode\u003e~/projects/my-app/src\u003c/code\u003e is not.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRulesets\u003c/h2\u003e\u003ca id=\"user-content-rulesets\" aria-label=\"Permalink: Rulesets\" href=\"#rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRulesets control which permission dialogs are automatically accepted or rejected. They provide fine-grained control over Claude Code\u0026#39;s interactions with your system.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eWhat are Rulesets?\u003c/h3\u003e\u003ca id=\"user-content-what-are-rulesets\" aria-label=\"Permalink: What are Rulesets?\" href=\"#what-are-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRulesets are YAML files that define:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eWhich dialogs to automatically accept or reject\u003c/li\u003e\n\u003cli\u003ePath-based rules for file and directory operations\u003c/li\u003e\n\u003cli\u003ePattern-based command filtering\u003c/li\u003e\n\u003cli\u003eDomain allowlists for web requests\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInternal Rulesets\u003c/h3\u003e\u003ca id=\"user-content-internal-rulesets\" aria-label=\"Permalink: Internal Rulesets\" href=\"#internal-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer includes three built-in rulesets. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/internal-rulesets.md\"\u003edocs/internal-rulesets.md\u003c/a\u003e for detailed information about each ruleset.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ccode\u003einternal:safe\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-internalsafe\" aria-label=\"Permalink: internal:safe\" href=\"#internalsafe\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMaximum security - all dialogs require manual confirmation. No automatic acceptance of any operations.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ccode\u003einternal:cautious\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-internalcautious\" aria-label=\"Permalink: internal:cautious\" href=\"#internalcautious\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBalanced approach - automatically accepts project-level operations (file edits, creates, bash commands) while requiring confirmation for global operations and web requests.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ccode\u003einternal:yolo\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-internalyolo\" aria-label=\"Permalink: internal:yolo\" href=\"#internalyolo\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMaximum automation - accepts all operations without confirmation, including global file operations and web requests. Use with caution.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/rulesets.md\"\u003edocs/rulesets.md\u003c/a\u003e for detailed ruleset documentation and creating custom rulesets.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eProject-Level Rulesets\u003c/h3\u003e\u003ca id=\"user-content-project-level-rulesets\" aria-label=\"Permalink: Project-Level Rulesets\" href=\"#project-level-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCreate custom rulesets in your project\u0026#39;s \u003ccode\u003e.claude-composer/rulesets/\u003c/code\u003e directory:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# .claude-composer/rulesets/backend.yaml\nname: backend\ndescription: Rules for backend development\n\n# Accept file operations with path restrictions\naccept_project_edit_file_prompts:\n  paths:\n    - \u0026#39;src/**/*.js\u0026#39;\n    - \u0026#39;src/**/*.ts\u0026#39;\n    - \u0026#39;test/**\u0026#39;\n    - \u0026#39;!**/*.env\u0026#39;\n\naccept_project_bash_command_prompts: true\naccept_fetch_content_prompts: false\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e .claude-composer/rulesets/backend.yaml\u003c/span\u003e\n\u003cspan\u003ename\u003c/span\u003e: \u003cspan\u003ebackend\u003c/span\u003e\n\u003cspan\u003edescription\u003c/span\u003e: \u003cspan\u003eRules for backend development\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Accept file operations with path restrictions\u003c/span\u003e\n\u003cspan\u003eaccept_project_edit_file_prompts\u003c/span\u003e:\n  \u003cspan\u003epaths\u003c/span\u003e:\n    - \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003esrc/**/*.js\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    - \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003esrc/**/*.ts\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    - \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003etest/**\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    - \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e!**/*.env\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003eaccept_project_bash_command_prompts\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e\n\u003cspan\u003eaccept_fetch_content_prompts\u003c/span\u003e: \u003cspan\u003efalse\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eUsing Rulesets\u003c/h3\u003e\u003ca id=\"user-content-using-rulesets\" aria-label=\"Permalink: Using Rulesets\" href=\"#using-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Use internal ruleset\nclaude-composer --ruleset internal:cautious\n\n# Use global custom ruleset (no prefix)\nclaude-composer --ruleset my-workflow\n\n# Use project ruleset\nclaude-composer --ruleset project:backend\n\n# Chain multiple rulesets (later rules override earlier)\nclaude-composer --ruleset internal:cautious --ruleset my-defaults --ruleset project:backend\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use internal ruleset\u003c/span\u003e\nclaude-composer --ruleset internal:cautious\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use global custom ruleset (no prefix)\u003c/span\u003e\nclaude-composer --ruleset my-workflow\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use project ruleset\u003c/span\u003e\nclaude-composer --ruleset project:backend\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Chain multiple rulesets (later rules override earlier)\u003c/span\u003e\nclaude-composer --ruleset internal:cautious --ruleset my-defaults --ruleset project:backend\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCreating Custom Rulesets\u003c/h3\u003e\u003ca id=\"user-content-creating-custom-rulesets\" aria-label=\"Permalink: Creating Custom Rulesets\" href=\"#creating-custom-rulesets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCustom rulesets allow fine-grained control over automation. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/rulesets.md\"\u003edocs/rulesets.md\u003c/a\u003e for complete syntax and examples.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eToolsets\u003c/h2\u003e\u003ca id=\"user-content-toolsets\" aria-label=\"Permalink: Toolsets\" href=\"#toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eToolsets control which tools Claude can use and configure MCP (Model Context Protocol) servers. They provide a flexible way to manage Claude\u0026#39;s capabilities on a per-project or global basis.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eWhat are Toolsets?\u003c/h3\u003e\u003ca id=\"user-content-what-are-toolsets\" aria-label=\"Permalink: What are Toolsets?\" href=\"#what-are-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eToolsets are YAML files that define:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eWhich tools Claude is allowed to use\u003c/li\u003e\n\u003cli\u003eWhich tools Claude is explicitly blocked from using\u003c/li\u003e\n\u003cli\u003eMCP server configurations for additional tool capabilities\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInternal Toolsets\u003c/h3\u003e\u003ca id=\"user-content-internal-toolsets\" aria-label=\"Permalink: Internal Toolsets\" href=\"#internal-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eClaude Composer includes one built-in toolset. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/internal-toolsets.md\"\u003edocs/internal-toolsets.md\u003c/a\u003e for detailed information.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ccode\u003einternal:core\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-internalcore\" aria-label=\"Permalink: internal:core\" href=\"#internalcore\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eProvides access to Context7 documentation tools, allowing Claude to fetch up-to-date library documentation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eProject-Level Toolsets\u003c/h3\u003e\u003ca id=\"user-content-project-level-toolsets\" aria-label=\"Permalink: Project-Level Toolsets\" href=\"#project-level-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCreate custom toolsets in your project\u0026#39;s \u003ccode\u003e.claude-composer/toolsets/\u003c/code\u003e directory:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# .claude-composer/toolsets/dev-tools.yaml\nallowed:\n  - Read\n  - Write\n  - Edit\n  - MultiEdit\n  - Bash\n\ndisallowed:\n  - WebSearch\n\nmcp:\n  my-server:\n    type: stdio\n    command: node\n    args:\n      - ./tools/mcp-server.js\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e .claude-composer/toolsets/dev-tools.yaml\u003c/span\u003e\n\u003cspan\u003eallowed\u003c/span\u003e:\n  - \u003cspan\u003eRead\u003c/span\u003e\n  - \u003cspan\u003eWrite\u003c/span\u003e\n  - \u003cspan\u003eEdit\u003c/span\u003e\n  - \u003cspan\u003eMultiEdit\u003c/span\u003e\n  - \u003cspan\u003eBash\u003c/span\u003e\n\n\u003cspan\u003edisallowed\u003c/span\u003e:\n  - \u003cspan\u003eWebSearch\u003c/span\u003e\n\n\u003cspan\u003emcp\u003c/span\u003e:\n  \u003cspan\u003emy-server\u003c/span\u003e:\n    \u003cspan\u003etype\u003c/span\u003e: \u003cspan\u003estdio\u003c/span\u003e\n    \u003cspan\u003ecommand\u003c/span\u003e: \u003cspan\u003enode\u003c/span\u003e\n    \u003cspan\u003eargs\u003c/span\u003e:\n      - \u003cspan\u003e./tools/mcp-server.js\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eUsing Toolsets\u003c/h3\u003e\u003ca id=\"user-content-using-toolsets\" aria-label=\"Permalink: Using Toolsets\" href=\"#using-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Use internal toolset\nclaude-composer --toolset internal:core\n\n# Use global custom toolset (no prefix)\nclaude-composer --toolset my-tools\n\n# Use project toolset\nclaude-composer --toolset project:dev-tools\n\n# Chain multiple toolsets\nclaude-composer --toolset internal:core --toolset project:backend-tools\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use internal toolset\u003c/span\u003e\nclaude-composer --toolset internal:core\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use global custom toolset (no prefix)\u003c/span\u003e\nclaude-composer --toolset my-tools\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Use project toolset\u003c/span\u003e\nclaude-composer --toolset project:dev-tools\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Chain multiple toolsets\u003c/span\u003e\nclaude-composer --toolset internal:core --toolset project:backend-tools\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCreating Custom Toolsets\u003c/h3\u003e\u003ca id=\"user-content-creating-custom-toolsets\" aria-label=\"Permalink: Creating Custom Toolsets\" href=\"#creating-custom-toolsets\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eToolsets control which tools Claude can use and configure MCP servers. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/toolsets.md\"\u003edocs/toolsets.md\u003c/a\u003e for complete documentation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eCommand Line Options\u003c/h2\u003e\u003ca id=\"user-content-command-line-options\" aria-label=\"Permalink: Command Line Options\" href=\"#command-line-options\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/cli-reference.md\"\u003edocs/cli-reference.md\u003c/a\u003e for complete command line documentation.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eCore Options\u003c/h3\u003e\u003ca id=\"user-content-core-options\" aria-label=\"Permalink: Core Options\" href=\"#core-options\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eConfiguration\u003c/h4\u003e\u003ca id=\"user-content-configuration-1\" aria-label=\"Permalink: Configuration\" href=\"#configuration-1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e--ruleset \u0026lt;name...\u0026gt;\u003c/code\u003e - Use specified rulesets (can be used multiple times)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--toolset \u0026lt;name...\u0026gt;\u003c/code\u003e - Use specified toolsets (can be used multiple times)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--ignore-global-config\u003c/code\u003e - Ignore global configuration file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eSafety\u003c/h4\u003e\u003ca id=\"user-content-safety\" aria-label=\"Permalink: Safety\" href=\"#safety\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e--dangerously-allow-in-dirty-directory\u003c/code\u003e - Allow running with uncommitted git changes\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--dangerously-allow-without-version-control\u003c/code\u003e - Allow running outside version control\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--dangerously-suppress-automatic-acceptance-confirmation\u003c/code\u003e - Skip confirmation prompts\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eNotifications\u003c/h4\u003e\u003ca id=\"user-content-notifications\" aria-label=\"Permalink: Notifications\" href=\"#notifications\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e--show-notifications\u003c/code\u003e / \u003ccode\u003e--no-show-notifications\u003c/code\u003e - Enable/disable desktop notifications\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--sticky-notifications\u003c/code\u003e / \u003ccode\u003e--no-sticky-notifications\u003c/code\u003e - Make notifications stay until dismissed\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--show-work-complete-notifications\u003c/code\u003e / \u003ccode\u003e--no-show-work-complete-notifications\u003c/code\u003e - Show/hide work completion notifications\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003eDebug\u003c/h4\u003e\u003ca id=\"user-content-debug\" aria-label=\"Permalink: Debug\" href=\"#debug\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e--quiet\u003c/code\u003e - Suppress preflight messages\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--allow-buffer-snapshots\u003c/code\u003e - Enable Ctrl+Shift+S terminal snapshots\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--log-all-pattern-matches\u003c/code\u003e - Log pattern matches to \u003ccode\u003e~/.claude-composer/logs/\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eSubcommands\u003c/h3\u003e\u003ca id=\"user-content-subcommands\" aria-label=\"Permalink: Subcommands\" href=\"#subcommands\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" dir=\"auto\"\u003e\u003ccode\u003ecc-init\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-cc-init\" aria-label=\"Permalink: cc-init\" href=\"#cc-init\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInitialize a new configuration file:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Create global config\nclaude-composer cc-init\n\n# Create project config\nclaude-composer cc-init --project\n\n# Specify ruleset during init\nclaude-composer cc-init --use-cautious-ruleset\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Create global config\u003c/span\u003e\nclaude-composer cc-init\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Create project config\u003c/span\u003e\nclaude-composer cc-init --project\n\n\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Specify ruleset during init\u003c/span\u003e\nclaude-composer cc-init --use-cautious-ruleset\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOptions:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e--project\u003c/code\u003e - Create config in current directory\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--use-yolo-ruleset\u003c/code\u003e - Use YOLO ruleset\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--use-cautious-ruleset\u003c/code\u003e - Use cautious ruleset (recommended)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--use-safe-ruleset\u003c/code\u003e - Use safe ruleset\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--use-core-toolset\u003c/code\u003e / \u003ccode\u003e--no-use-core-toolset\u003c/code\u003e - Enable/disable core toolset\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePass-through Options\u003c/h3\u003e\u003ca id=\"user-content-pass-through-options\" aria-label=\"Permalink: Pass-through Options\" href=\"#pass-through-options\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAll unrecognized options are passed to Claude Code:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# These go to Claude Code\nclaude-composer --model claude-3-opus-20240229\nclaude-composer --print\nclaude-composer --help  # Shows both claude-composer and claude help\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e These go to Claude Code\u003c/span\u003e\nclaude-composer --model claude-3-opus-20240229\nclaude-composer --print\nclaude-composer --help  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Shows both claude-composer and claude help\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eAdvanced Notification Controls\u003c/h3\u003e\u003ca id=\"user-content-advanced-notification-controls\" aria-label=\"Permalink: Advanced Notification Controls\" href=\"#advanced-notification-controls\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFine-tune which notifications appear:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"# Control specific notification types\nclaude-composer --no-show-edit-file-confirm-notify\nclaude-composer --show-accepted-confirm-notify\nclaude-composer --sticky-work-complete-notifications\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Control specific notification types\u003c/span\u003e\nclaude-composer --no-show-edit-file-confirm-notify\nclaude-composer --show-accepted-confirm-notify\nclaude-composer --sticky-work-complete-notifications\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/notifications.md\"\u003edocs/notifications.md\u003c/a\u003e for detailed notification configuration.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eDevelopment\u003c/h2\u003e\u003ca id=\"user-content-development\" aria-label=\"Permalink: Development\" href=\"#development\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eContributing\u003c/h3\u003e\u003ca id=\"user-content-contributing\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eContributions are welcome! Please:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eFork the repository\u003c/li\u003e\n\u003cli\u003eCreate a feature branch (\u003ccode\u003egit checkout -b feature/amazing-feature\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eCommit your changes (\u003ccode\u003egit commit -m \u0026#39;Add amazing feature\u0026#39;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ePush to the branch (\u003ccode\u003egit push origin feature/amazing-feature\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eOpen a Pull Request\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eRelease Process\u003c/h3\u003e\u003ca id=\"user-content-release-process\" aria-label=\"Permalink: Release Process\" href=\"#release-process\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis project uses automated releases via npm and GitHub. See \u003ca href=\"https://github.com/possibilities/claude-composer/blob/main/docs/release-process.md\"\u003edocs/release-process.md\u003c/a\u003e for detailed release instructions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eQuick release commands:\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"npm run release:patch  # Bug fixes (0.1.0 → 0.1.1)\nnpm run release:minor  # New features (0.1.0 → 0.2.0)\nnpm run release:major  # Breaking changes (0.1.0 → 1.0.0)\"\u003e\u003cpre\u003enpm run release:patch  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Bug fixes (0.1.0 → 0.1.1)\u003c/span\u003e\nnpm run release:minor  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e New features (0.1.0 → 0.2.0)\u003c/span\u003e\nnpm run release:major  \u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e Breaking changes (0.1.0 → 1.0.0)\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": null,
  "modifiedTime": null
}
