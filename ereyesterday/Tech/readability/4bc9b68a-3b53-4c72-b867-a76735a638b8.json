{
  "id": "4bc9b68a-3b53-4c72-b867-a76735a638b8",
  "title": "Sqlite3 WebAssembly",
  "link": "https://sqlite.org/wasm/doc/trunk/index.md",
  "description": "Comments",
  "author": "",
  "published": "Tue, 15 Oct 2024 17:45:27 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 3559,
  "excerpt": "This site is home to the documentation for the SQLite project's WebAssembly- and JavaScript-related APIs, which enable the use of sqlite3 in modern WASM-capable browsers.",
  "siteName": "",
  "favicon": "",
  "text": "This site is home to the documentation for the SQLite project's WebAssembly- and JavaScript-related APIs, which enable the use of sqlite3 in modern WASM-capable browsers. Cookie/storage disclaimer: this site requires a modern, JavaScript-capable browser for full functionality. This site uses client-side storage for persisting certain browsing preferences (like the bright/dark mode toggle) but its server does not process, nor transfer to any other entity, any user-level information beyond certain SCM-side display-related preferences and the credentials of logged-in developers. Site Overview About the sqlite3 WASM subproject: 📰 Project news 💬 Frequently Asked Questions 🚧 TODOs and (un)planned features ☎ Technical support is provided, and feedback gladly accepted, via the sqlite forum. Those with commercial SQLite support contracts may use their usual support channels. Making use of this project: 👣 The three-step HOWTO demonstrates how to include and run the sqlite3 WASM module and its associated JavaScript APIs. 💾 Downloads are available via the main project downloads page. 📸 Prerelease snapshots are updated from time to time 📦 npm module 🛠 Building sqlite3 WASM and its associated JS code. Emscripten build specifics 📇 The API index describes the various API variants and how to load and access them. 🧑‍🍳 Cookbook of recipes for client-level code 💾 Persistent storage options 🤓 Using C-structs in the JS API 🧱 Creating virtual tables and table-valued functions in JS 💣 API changes which might affect clients 🔭 The module symbols app generates lists of sqlite3 API symbols from the JavaScript/WASM module. About this documentation: 📜 License 🚧 Doc and repository maintenance In the Wild Third-party projects known to be using this project include (in order of their addition to this list)... SQLime provides a database browser interface. Evolu Evolu is a local-first platform designed for privacy, ease of use, and no vendor lock-in. SQLiteNext provides a demo of integrating this project with next.js. sqlite-wasm-esm demonstrates how to use this project with the Vite toolchain. sqlite-wasm-http provides an SQLite VFS with read-only access to databases which are served directly over HTTP. Related Works (In the order in which we became aware of them...) Alon Zakai's sql.js is the first known direct usage of sqlite3 in a web browser, dating back to 2012, not counting WebSQL (which was a native-level feature and has long since been removed from most browsers). Roy Hashimoto's wa-sqlite is home to the first known implementation of OPFS storage of sqlite3 databases. James Long's absurd-js demonstrates storing sqlite3 databases inside IndexedDB databases. postgres-wasm runs a Postgres database server in a browser. Jaccwabyt is a small JS library for manipulating WASM-hosted C structs via JS code, created specifically to support the OPFS sqlite3_vfs implementation in this project. This project embeds a copy but does not expose it to client applications. CoWasm is \"Collaborative WebAssembly for Servers and Browsers\". Their demo app includes a WASM build of the sqlite3 shell application. Evan Brass's build uses a WASI SDK build, instead of Emscripten, and demonstrates some novel features which this project's WASM build does not. Third-party Documentation and Articles The following links reference articles and documentation published about SQLite WASM by third parties: Porting WebSQL to OPFS, by the Google Chrome dev team The VMWare OCTO team writes about building SQLite3 for WASI",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\u003cp\u003eThis site is home to the documentation for the SQLite project\u0026#39;s\nWebAssembly- and JavaScript-related APIs, which enable the use of\n\u003ca href=\"https://sqlite.org/\"\u003esqlite3\u003c/a\u003e in modern WASM-capable browsers.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eCookie/storage disclaimer: this site requires a modern,\nJavaScript-capable browser for full functionality. This site uses\nclient-side storage for persisting certain browsing preferences (like\nthe bright/dark mode toggle) but its server does not process, nor\ntransfer to any other entity, any user-level information beyond\ncertain SCM-side display-related preferences and the credentials of\nlogged-in developers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eSite Overview\u003c/h2\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://sqlite.org/wasm/doc/trunk/about.md\"\u003e\u003cstrong\u003eAbout\u003c/strong\u003e the sqlite3 WASM subproject\u003c/a\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e📰 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/news.md\"\u003e\u003cstrong\u003eProject news\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e💬 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/faq.md\"\u003e\u003cstrong\u003eFrequently Asked Questions\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e🚧 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/todo.md\"\u003e\u003cstrong\u003eTODOs\u003c/strong\u003e\u003c/a\u003e and (un)planned features\u003c/li\u003e\n\u003cli\u003e☎ \u003cstrong\u003eTechnical support\u003c/strong\u003e is provided, and feedback gladly accepted,\nvia \u003ca href=\"https://sqlite.org/forum/\"\u003e\u003cstrong\u003ethe sqlite forum\u003c/strong\u003e\u003c/a\u003e. Those with \u003ca href=\"https://sqlite.org/prosupport.html\"\u003ecommercial SQLite\nsupport contracts\u003c/a\u003e may use their usual\nsupport channels.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eMaking use of this project:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e👣 The \u003cstrong\u003e\u003ca href=\"https://sqlite.org/wasm/doc/trunk/demo-123.md\"\u003ethree-step HOWTO\u003c/a\u003e\u003c/strong\u003e demonstrates how to\ninclude and run the sqlite3 WASM module and its associated\nJavaScript APIs.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e💾 \u003cstrong\u003e\u003ca href=\"https://sqlite.org/download.html\"\u003eDownloads\u003c/a\u003e\u003c/strong\u003e are available via\nthe main project downloads page.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e📸 \u003cstrong\u003e\u003ca href=\"https://sqlite.org/wasm/uv/snapshot.html\"\u003ePrerelease snapshots\u003c/a\u003e\u003c/strong\u003e are\nupdated from time to time\u003c/li\u003e\n\u003cli\u003e📦 \u003cstrong\u003e\u003ca href=\"https://sqlite.org/wasm/doc/trunk/npm.md\"\u003enpm module\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e🛠 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/building.md\"\u003e\u003cstrong\u003eBuilding sqlite3 WASM\u003c/strong\u003e\u003c/a\u003e and its associated JS\ncode.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sqlite.org/wasm/doc/trunk/emscripten.md\"\u003eEmscripten\u003c/a\u003e build specifics\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e📇 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/api-index.md\"\u003eThe \u003cstrong\u003eAPI index\u003c/strong\u003e\u003c/a\u003e describes the various API\nvariants and how to load and access them.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e🧑‍🍳 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/cookbook.md\"\u003e\u003cstrong\u003eCookbook\u003c/strong\u003e\u003c/a\u003e of recipes for client-level code\u003c/li\u003e\n\u003cli\u003e💾 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/persistence.md\"\u003e\u003cstrong\u003ePersistent storage\u003c/strong\u003e options\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e🤓 Using \u003ca href=\"https://sqlite.org/wasm/doc/trunk/c-structs.md\"\u003e\u003cstrong\u003eC-structs\u003c/strong\u003e\u003c/a\u003e in the JS API\u003c/li\u003e\n\u003cli\u003e🧱 Creating \u003ca href=\"https://sqlite.org/wasm/doc/trunk/vtab.md\"\u003e\u003cstrong\u003evirtual tables\u003c/strong\u003e\u003c/a\u003e and table-valued\nfunctions in JS\u003c/li\u003e\n\u003cli\u003e💣 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/api-changes.md\"\u003e\u003cstrong\u003eAPI changes\u003c/strong\u003e\u003c/a\u003e which \u003cem\u003emight\u003c/em\u003e affect\nclients\u003c/li\u003e\n\u003cli\u003e🔭 The \u003ca href=\"https://sqlite.org/wasm/doc/trunk/module-symbols.html\"\u003e\u003cstrong\u003emodule symbols app\u003c/strong\u003e\u003c/a\u003e\ngenerates lists of sqlite3 API symbols from the JavaScript/WASM module.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eAbout this documentation:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e📜 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/license.md\"\u003e\u003cstrong\u003eLicense\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e🚧 \u003ca href=\"https://sqlite.org/wasm/doc/trunk/doc-maintenance.md\"\u003e\u003cstrong\u003eDoc and repository maintenance\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eIn the Wild\u003c/h2\u003e\n\u003cp\u003eThird-party projects known to be using this project include (in order\nof their addition to this list)...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/nalgeon/sqlime\"\u003eSQLime\u003c/a\u003e provides a database\nbrowser interface.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/evoluhq/evolu\"\u003eEvolu\u003c/a\u003e Evolu is a local-first platform\ndesigned for privacy, ease of use, and no vendor lock-in.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mandolyte/sqlitenext\"\u003eSQLiteNext\u003c/a\u003e provides a demo of\nintegrating this project with next.js.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/overtone-app/sqlite-wasm-esm\"\u003esqlite-wasm-esm\u003c/a\u003e demonstrates\nhow to use this project with the Vite toolchain.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.npmjs.com/package/sqlite-wasm-http\"\u003esqlite-wasm-http\u003c/a\u003e\nprovides an SQLite VFS with read-only access to databases which are\nserved directly over HTTP.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eRelated Works\u003c/h2\u003e\n\u003cp\u003e(In the order in which we became aware of them...)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAlon Zakai\u0026#39;s \u003ca href=\"https://github.com/sql-js/sql.js\"\u003e\u003cstrong\u003esql.js\u003c/strong\u003e\u003c/a\u003e is the\nfirst known direct usage of sqlite3 in a web browser, \u003ca href=\"https://github.com/kripken/sql.js/commit/cebd80648dbd369b34804c5a00b4d0bddc1cbf05\"\u003edating back to\n2012\u003c/a\u003e,\nnot counting WebSQL (which was a native-level feature and has long\nsince been removed from most browsers).\u003c/li\u003e\n\u003cli\u003eRoy Hashimoto\u0026#39;s\n\u003ca href=\"https://github.com/rhashimoto/wa-sqlite\"\u003e\u003cstrong\u003ewa-sqlite\u003c/strong\u003e\u003c/a\u003e is home to\nthe first known implementation of \u003ca href=\"https://sqlite.org/wasm/doc/trunk/persistence.md\"\u003eOPFS storage\u003c/a\u003e\nof sqlite3 databases.\u003c/li\u003e\n\u003cli\u003eJames Long\u0026#39;s\n\u003ca href=\"https://github.com/jlongster/absurd-sql\"\u003e\u003cstrong\u003eabsurd-js\u003c/strong\u003e\u003c/a\u003e\ndemonstrates storing sqlite3 databases inside IndexedDB databases.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://supabase.com/blog/postgres-wasm\"\u003e\u003cstrong\u003epostgres-wasm\u003c/strong\u003e\u003c/a\u003e runs a\n\u003ca href=\"https://www.postgresql.org\"\u003ePostgres database server\u003c/a\u003e in a browser.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://fossil.wanderinghorse.net/r/jaccwabyt\"\u003e\u003cstrong\u003eJaccwabyt\u003c/strong\u003e\u003c/a\u003e is a\nsmall JS library for manipulating WASM-hosted C structs via JS code,\ncreated specifically to support the \u003ca href=\"https://sqlite.org/wasm/doc/trunk/persistence.md#vfs-opfs\"\u003eOPFS\nsqlite3_vfs\u003c/a\u003e implementation in this\nproject. This project embeds a copy but does not expose it to client\napplications.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sagemathinc/cowasm\"\u003e\u003cstrong\u003eCoWasm\u003c/strong\u003e\u003c/a\u003e is\n\u0026#34;Collaborative WebAssembly for Servers and Browsers\u0026#34;. \u003ca href=\"https://cowasm.sh/\"\u003eTheir demo\napp\u003c/a\u003e includes a WASM build of the sqlite3 shell\napplication.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sqlite.org/forum/forumpost/ca6139791c\"\u003e\u003cstrong\u003eEvan Brass\u0026#39;s\nbuild\u003c/strong\u003e\u003c/a\u003e uses a \u003ca href=\"https://github.com/WebAssembly/wasi-sdk\"\u003eWASI\nSDK\u003c/a\u003e build, instead of Emscripten, and demonstrates some\nnovel features which this project\u0026#39;s WASM build does not.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eThird-party Documentation and Articles\u003c/h2\u003e\n\u003cp\u003eThe following links reference articles and documentation published\nabout SQLite WASM by third parties:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/from-web-sql-to-sqlite-wasm/\"\u003ePorting WebSQL to OPFS\u003c/a\u003e,\nby the Google Chrome dev team\u003c/li\u003e\n\u003cli\u003eThe VMWare OCTO team writes about \u003ca href=\"https://wasmlabs.dev/articles/sqlite-wasi-support/\"\u003ebuilding SQLite3 for\nWASI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
