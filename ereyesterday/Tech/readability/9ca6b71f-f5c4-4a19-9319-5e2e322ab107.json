{
  "id": "9ca6b71f-f5c4-4a19-9319-5e2e322ab107",
  "title": "HTML Form Validation is heavily underused",
  "link": "https://expressionstatement.com/html-form-validation-is-heavily-underused",
  "description": "Comments",
  "author": "",
  "published": "Mon, 28 Oct 2024 21:28:29 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 10505,
  "excerpt": "HTML Forms have powerful validation mechanisms, but they are heavily underused. In fact, not many people even know much about them. Is this because of some flaw in their design? Let’s explore.",
  "siteName": "Expression Statement",
  "favicon": "",
  "text": "HTML Forms have powerful validation mechanisms, but they are heavily underused. In fact, not many people even know much about them. Is this because of some flaw in their design? Let’s explore. Attributes, methods, and properties It’s easy to disallow empty inputs by adding a required attribute: \u003cinput required={true} /\u003e Beyond that, there is a bunch of other ways that you can add constraints to your input. Precisely, there are three ways to do it: Using specific type attribute values, such as \"email\", \"number\", or \"url\" Using other input attributes that create constraints, such as \"pattern\" or \"maxlength\" Using the setCustomValidity DOM method of the input The last one is the most powerful as it allows to create arbitrary validation logic and handle complex cases. Do you notice how it differs from the first two techniques? The first two are defined with attributes, but setCustomValidity is a method. Here’s a great write-up that explains the differences between DOM attributes and properties: https://jakearchibald.com/2024/attributes-vs-properties/ The nuance of an imperative API The fact that setCustomValidity API is exposed only as a method and doesn’t have an attribute equivalent leads to some terrible ergonomics. I’ll show you with an example. But first, a very quick intro to how this API works: // Make input invalid input.setCustomValidity(\"Any text message\"); This would make input invalid and the browser will show the reason as “Any text message”. // Remove custom constraints and make input valid input.setCustomValidity(\"\"); Passing an empty string makes the input valid (unless other constraints are applied). That’s pretty much it! Now let’s apply this knowledge. Let’s say we want to implement an equivalent of the required attribute. That means that an empty input must be prevent the form from being submitted. \u003cinput name=\"example\" placeholder=\"...\" onChange={(event) =\u003e { const input = event.currentTarget; if (input.value === \"\") { input.setCustomValidity(\"Custom message: input is empty\"); } else { input.setCustomValidity(\"\"); } }} /\u003e This kind of looks like we’re done and this code should be enough to accomplish the task. But try to see it in action: It may seem to work, but there’s just one important edge case: the input is in a valid state initially. If you reset the component and press the “submit” button, the form submission will go through. But surely, before we ever touch the input, it is empty, and therefore must be invalid. But we only ever do something when the input value changes. How can we fix this? Let’s execute some code when the component mounts: import { useRef, useLayoutEffect } from \"react\"; function Form() { const ref = useRef(); useLayoutEffect(() =\u003e { // Make input invalid on initial render if it's empty const input = ref.current; const empty = input.value !== \"\"; input.setCustomValidity(empty ? \"Initial message: input is empty\" : \"\"); }, []); return ( \u003cform\u003e \u003cinput ref={ref} name=\"example\" onChange={(event) =\u003e { const input = event.currentTarget; if (input.value === \"\") { input.setCustomValidity(\"Custom message: input is empty\"); } else { input.setCustomValidity(\"\"); } }} /\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e ); } Great! Now everything works as expected. But at what cost? The boilerplate problem Let’s look at our clumsy way to validate the initial value: const ref = useRef(); useLayoutEffect(() =\u003e { // Make input invalid on initial render if it's empty const input = ref.current; const empty = input.value !== \"\"; input.setCustomValidity(empty ? \"Initial message: input is empty\" : \"\"); }, []); Ugh! Wouldn’t want to write that one each time. Let’s think about what’s wrong with this. The validation logic is duplicated between the onChange handler and the initial render phase The initial validation is not co-located with the input, so we’re losing code cohesion. It’s fragile: if you update validation logic, you might forget to update code in both places. The useRef + useLayouEffect + onChange combo is just too much ceremony, especially when a form has a lot of inputs. And it gets even more confusing if only some of those inputs use customValidity This is what happens when you deal with a purely imperative API in a declarative component. Unlike validation attributes, CustomValidity is a purely imperative API. In other words, there’s no input attribute that we can use to set custom validity. In fact, I would argue that this is the main reason for poor adoption of native form validation. If the API is cumbersome, sometimes it just does not matter how powerful it is. The missing part In essence, this is the attribute we need: \u003cinput custom-validity=\"error message\" /\u003e In a declarative framework, this would allow to define input validations in a very powerful way: function Form() { const [value, setValue] = useState(); const handleChange = (event) =\u003e setValue(event.target.value); return ( \u003cform\u003e \u003cinput name=\"example\" value={value} onChange={handleChange} custom-validity={value.length ? \"Fill out this field\" : \"\"} /\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e ); } Pretty cool! In my opinion, at least. Though you can rightfully argue that this accomplishes only what the existing required attribute is already capable of. Where’s the “power”? Let me show you, but first, since there’s no actual custom-validity currently in the HTML Spec, let’s implement it in userland. function Input({ customValidity, ...props }) { const ref = useRef(); useLayoutEffect(() =\u003e { if (customValidity != null) { const input = ref.current; input.setCustomValidity(customValidity); } }, [customValidity]); return \u003cinput ref={ref} {...props} /\u003e; } This will work well for our demo purposes. For a production-ready component check out a more complete implementation. The power Now we’ll explore which non-trivial cases this design can help solve. In real-world apps, validation often gets more complex than local checks. Imagine a username input that should be valid only if the username is not taken. This would require async calls to your server and an intermediary state: the form should not be valid while the check is in progress. Let’s see how our abstraction can handle this. Play around with this example. It uses the required to prevent empty inputs. But then it relies on customValidity to mark input as invalid during the loading state and based on the response. Implementation First, we create an async function to check whether the username is unique that imitates a server request with a delay. export async function verifyUsername(userValue) { // imitate network delay await new Promise((r) =\u003e setTimeout(r, 3000)); const value = userValue.trim().toLowerCase(); if (value === \"bad input\") { throw new Error(\"Bad Input\"); } const validationMessage = value === \"taken\" ? \"Username is taken\" : \"\"; return { validationMessage }; } Next, we’ll create a controlled form component and use react-query to manage to server request when the input value changes: import { useState } from \"react\"; import { useQuery } from \"@tanstack/react-query\"; import { verifyUsername } from \"./verifyUsername\"; import { Input } from \"./Input\"; function Form() { const [value, setValue] = useState(\"\"); const { data, isLoading, isError } = useQuery({ queryKey: [\"verifyUsername\", value], queryFn: () =\u003e verifyUsername(value), enabled: Boolean(value), }); return ( \u003cform\u003e \u003cInput name=\"username\" required={true} value={value} onChange={(event) =\u003e { setValue(event.currentTarget.value); }} /\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e ); } Great! We have the setup in place. It consists of two crucial parts: Verification request state managed by useQuery Our custom \u003cInput /\u003e component that is capable of taking the customValidity prop Let’s put those pieces together: import { useState } from \"react\"; import { useQuery } from \"@tanstack/react-query\"; import { verifyUsername } from \"./verifyUsername\"; import { Input } from \"./Input\"; function Form() { const [value, setValue] = useState(\"\"); const { data, isLoading, isError } = useQuery({ queryKey: [\"verifyUsername\", value], queryFn: () =\u003e verifyUsername(value), enabled: Boolean(value), }); const validationMessage = data?.validationMessage; return ( \u003cform\u003e \u003cInput name=\"username\" required={true} customValidity={ isLoading ? \"Verifying username...\" : isError ? \"Could not verify\" : validationMessage } value={value} onChange={(event) =\u003e { setValue(event.currentTarget.value); }} /\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e ); } That’s it! We’re describing the whole async validation flow, including loading, error and success states, in one attribute. You can go back to see the result again if you wish One more This one will be shorter, but also interesting, because it covers dependent input fields. Let’s implement a form that requires to repeat the entered password: import { useState } from \"react\"; import { Input } from \"./Input\"; function ConfirmPasswordForm() { const [password, setPassword] = useState(\"\"); const [confirmedPass, setConfirmedPass] = useState(\"\"); const matches = confirmedPass === password; return ( \u003cform\u003e \u003cInput type=\"password\" name=\"password\" required={true} value={password} onChange={(event) =\u003e { setPassword(event.currentTarget.value); }} /\u003e \u003cInput type=\"password\" name=\"confirmedPassword\" required={true} value={confirmedPass} customValidity={matches ? \"\" : \"Password must match\"} onChange={(event) =\u003e { setConfirmedPass(event.currentTarget.value); }} /\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e ); } You can try it out: Conclusion I hope I’ve been able to show you how setCustomValidity can cover validation needs of all kinds. But the real power comes from great APIs. And hopefully, you are now equipped with one of those. And even more hopefully, we will see it natively in the HTML Spec one day.",
  "image": "https://expressionstatement.com/social-preview?post=html-form-validation-is-heavily-underused",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003carticle\u003eHTML Forms have powerful validation mechanisms, but they are heavily underused. In fact, not many people even know much about them. Is this because of some flaw in their design? Let’s explore.\n\u003ch2 id=\"attributes-methods-and-properties\"\u003eAttributes, methods, and properties\u003c/h2\u003e\n\u003cp\u003eIt’s easy to disallow empty inputs by adding\na \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required\"\u003e\u003ccode\u003erequired\u003c/code\u003e\u003c/a\u003e attribute:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e required\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eBeyond that, there is a bunch of other ways that you can add constraints to your input. Precisely, there are three ways to do it:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsing specific \u003ccode\u003etype\u003c/code\u003e attribute values, such as \u003ccode\u003e\u0026#34;email\u0026#34;\u003c/code\u003e, \u003ccode\u003e\u0026#34;number\u0026#34;\u003c/code\u003e, or \u003ccode\u003e\u0026#34;url\u0026#34;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUsing other input attributes that create constraints, such as \u003ccode\u003e\u0026#34;pattern\u0026#34;\u003c/code\u003e or \u003ccode\u003e\u0026#34;maxlength\u0026#34;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsing the \u003ccode\u003esetCustomValidity\u003c/code\u003e DOM method of the input\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe last one is the most powerful as it allows to create arbitrary validation logic and handle\ncomplex cases.\nDo you notice how it differs from the first two techniques? The first two are defined with \u003cem\u003eattributes\u003c/em\u003e, but \u003ccode\u003esetCustomValidity\u003c/code\u003e\nis a \u003cem\u003emethod\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eHere’s a great write-up that explains the differences between DOM attributes and properties: \u003ca href=\"https://jakearchibald.com/2024/attributes-vs-properties/\"\u003ehttps://jakearchibald.com/2024/attributes-vs-properties/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"the-nuance-of-an-imperative-api\"\u003eThe nuance of an imperative API\u003c/h2\u003e\n\u003cp\u003eThe fact that \u003ccode\u003esetCustomValidity\u003c/code\u003e API is exposed only as a method and doesn’t have an attribute equivalent\nleads to some terrible ergonomics. I’ll show you with an example.\u003c/p\u003e\n\u003cp\u003eBut first, a very quick intro to how this API works:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Make input invalid\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Any text message\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis would make input \u003cem\u003einvalid\u003c/em\u003e and the browser will show the reason as “Any text message”.\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Remove custom constraints and make input valid\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003ePassing an empty string makes the input \u003cem\u003evalid\u003c/em\u003e (unless other constraints are applied).\u003c/p\u003e\n\u003cp\u003eThat’s pretty much it! Now let’s apply this knowledge.\u003cbr/\u003e\nLet’s say we want to implement an equivalent of the \u003ccode\u003erequired\u003c/code\u003e attribute.\nThat means that an empty input must be prevent the form from being submitted.\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;example\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  placeholder\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;...\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    const\u003c/span\u003e\u003cspan\u003e input \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    if\u003c/span\u003e\u003cspan\u003e (input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Custom message: input is empty\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis kind of looks like we’re done and this code should be enough to accomplish the task.\nBut try to see it in action:\u003c/p\u003e\n\n\u003cp\u003eIt may seem to work, but there’s just one important edge case: the input is\nin a valid state \u003cem\u003einitially\u003c/em\u003e. If you reset the component and press the “submit”\nbutton, the form submission will go through.\nBut surely, before we ever touch the input, it is empty, and therefore must be invalid.\nBut we only ever do something when the input value \u003cem\u003echanges\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eHow can we fix this?\u003c/p\u003e\n\u003cp\u003eLet’s execute some code when the component mounts:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useRef\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e useLayoutEffect \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Form\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e ref \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e useRef\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  useLayoutEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    // Make input invalid on initial render if it\u0026#39;s empty\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const\u003c/span\u003e\u003cspan\u003e input \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e ref\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const\u003c/span\u003e\u003cspan\u003e empty \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(empty \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u0026#34;Initial message: input is empty\u0026#34;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003cspan\u003e [])\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        ref\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;example\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          const\u003c/span\u003e\u003cspan\u003e input \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          if\u003c/span\u003e\u003cspan\u003e (input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Custom message: input is empty\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSubmit\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  )\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eGreat! Now everything works as expected. But at what cost?\u003c/p\u003e\n\u003ch2 id=\"the-boilerplate-problem\"\u003eThe boilerplate problem\u003c/h2\u003e\n\u003cp\u003eLet’s look at our clumsy way to validate the initial value:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e ref \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e useRef\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003euseLayoutEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // Make input invalid on initial render if it\u0026#39;s empty\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e input \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e ref\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e empty \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(empty \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u0026#34;Initial message: input is empty\u0026#34;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e [])\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eUgh! Wouldn’t want to write that one each time. Let’s think about what’s wrong with this.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe validation logic is duplicated between the onChange handler and the initial render phase\u003c/li\u003e\n\u003cli\u003eThe initial validation is not co-located with the input, so we’re losing code cohesion.\nIt’s fragile: if you update validation logic, you might forget to update code in both places.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003euseRef\u003c/code\u003e + \u003ccode\u003euseLayouEffect\u003c/code\u003e + \u003ccode\u003eonChange\u003c/code\u003e combo is just too much ceremony,\nespecially when a form has a lot of inputs. And it gets even more confusing if only some of those inputs use \u003ccode\u003ecustomValidity\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is what happens when you deal with a purely imperative API in a declarative component.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUnlike validation attributes, \u003ccode\u003eCustomValidity\u003c/code\u003e is a purely imperative API.\nIn other words, there’s no input attribute that we can use to set custom validity.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn fact, I would argue that this is \u003cstrong\u003ethe main reason for poor adoption of native form validation\u003c/strong\u003e. If the API is cumbersome, sometimes it just does not matter how powerful it is.\u003c/p\u003e\n\u003ch2 id=\"the-missing-part\"\u003eThe missing part\u003c/h2\u003e\n\u003cp\u003eIn essence, this is the attribute we need:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"html\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"html\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e custom-validity\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;error message\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn a declarative framework, this would allow to define input validations in a very powerful way:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Form\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e setValue\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e handleChange\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e setValue\u003c/span\u003e\u003cspan\u003e(event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;example\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ehandleChange\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        custom-validity\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elength \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u0026#34;Fill out this field\u0026#34;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSubmit\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  )\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003ePretty cool! In my opinion, at least. Though you can rightfully argue that this accomplishes only what\nthe existing \u003ccode\u003erequired\u003c/code\u003e attribute is already capable of. Where’s the “power”?\u003c/p\u003e\n\u003cp\u003eLet me show you, but first, since there’s no actual \u003ccode\u003ecustom-validity\u003c/code\u003e currently\nin the \u003ca href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#the-constraint-validation-api\"\u003eHTML Spec\u003c/a\u003e,\nlet’s implement it in userland.\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Input\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e customValidity\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e ...\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e })\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e ref \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e useRef\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  useLayoutEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    if\u003c/span\u003e\u003cspan\u003e (customValidity \u003c/span\u003e\u003cspan\u003e!=\u003c/span\u003e\u003cspan\u003e null\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      const\u003c/span\u003e\u003cspan\u003e input \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e ref\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      input\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetCustomValidity\u003c/span\u003e\u003cspan\u003e(customValidity)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003cspan\u003e [customValidity])\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e \u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e ref\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis will work well for our demo purposes.\u003cbr/\u003e\nFor a production-ready component check out\na more \u003ca href=\"https://gist.github.com/everdimension/a5c1e991a8a6b6aab060ce349b37b825\" target=\"_blank\" rel=\"nooopener\"\u003ecomplete implementation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-power\"\u003eThe power\u003c/h2\u003e\n\u003cp\u003eNow we’ll explore which non-trivial cases this design can help solve.\u003c/p\u003e\n\u003cp\u003eIn real-world apps, validation often gets more complex than local checks.\nImagine a username input that should be \u003cstrong\u003evalid only if the username is not taken\u003c/strong\u003e.\nThis would require async calls to your server and an intermediary state: the form\nshould not be valid while the check is in progress.\nLet’s see how our abstraction can handle this.\u003c/p\u003e\n\n\u003cp\u003ePlay around with this example. It uses the \u003ccode\u003erequired\u003c/code\u003e to prevent empty inputs. But then it relies on \u003ccode\u003ecustomValidity\u003c/code\u003e to mark input as invalid during the loading state and based on the response.\u003c/p\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eFirst, we create an async function to check whether the username is unique that imitates a server request with a delay.\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"js\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e verifyUsername\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euserValue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // imitate network delay\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e new\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003er\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e setTimeout\u003c/span\u003e\u003cspan\u003e(r\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e 3000\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e value \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e userValue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrim\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoLowerCase\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (value \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u0026#34;bad input\u0026#34;\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    throw\u003c/span\u003e\u003cspan\u003e new\u003c/span\u003e\u003cspan\u003e Error\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Bad Input\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e validationMessage \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e value \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u0026#34;taken\u0026#34;\u003c/span\u003e\u003cspan\u003e ?\u003c/span\u003e\u003cspan\u003e \u0026#34;Username is taken\u0026#34;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e validationMessage \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNext, we’ll create a controlled form component and use \u003ca href=\"https://tanstack.com/query/latest\"\u003ereact-query\u003c/a\u003e to manage to server request when the input value changes:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useState \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useQuery \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;@tanstack/react-query\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e verifyUsername \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;./verifyUsername\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e Input \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;./Input\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Form\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e setValue\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e data\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLoading\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isError \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useQuery\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    queryKey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003e\u0026#34;verifyUsername\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e value]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    queryFn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e ()\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e verifyUsername\u003c/span\u003e\u003cspan\u003e(value)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    enabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Boolean\u003c/span\u003e\u003cspan\u003e(value)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        required\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          setValue\u003c/span\u003e\u003cspan\u003e(event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSubmit\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  )\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eGreat! We have the setup in place. It consists of two crucial parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVerification request state managed by \u003ccode\u003euseQuery\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOur custom \u003ccode\u003e\u0026lt;Input /\u0026gt;\u003c/code\u003e component that is capable of taking the \u003ccode\u003ecustomValidity\u003c/code\u003e prop\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet’s put those pieces together:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useState \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useQuery \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;@tanstack/react-query\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e verifyUsername \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;./verifyUsername\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e Input \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;./Input\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Form\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e setValue\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e data\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLoading\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isError \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useQuery\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    queryKey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003e\u0026#34;verifyUsername\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e value]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    queryFn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e ()\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e verifyUsername\u003c/span\u003e\u003cspan\u003e(value)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    enabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Boolean\u003c/span\u003e\u003cspan\u003e(value)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e validationMessage \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e data\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003evalidationMessage\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        required\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        customValidity\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLoading\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            ?\u003c/span\u003e\u003cspan\u003e \u0026#34;Verifying username...\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            :\u003c/span\u003e\u003cspan\u003e isError\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            ?\u003c/span\u003e\u003cspan\u003e \u0026#34;Could not verify\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            :\u003c/span\u003e\u003cspan\u003e validationMessage\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          setValue\u003c/span\u003e\u003cspan\u003e(event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSubmit\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  )\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThat’s it! We’re describing the whole async validation flow, including\nloading, error and success states, \u003cem\u003ein one attribute\u003c/em\u003e. You can go back to see \u003ca href=\"#example-async-username\"\u003ethe result\u003c/a\u003e again if you wish\u003c/p\u003e\n\u003ch3 id=\"one-more\"\u003eOne more\u003c/h3\u003e\n\u003cp\u003eThis one will be shorter, but also interesting, because it covers dependent input\nfields. Let’s implement a form that requires to repeat the entered password:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"catppuccin-macchiato catppuccin-frappe\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e useState \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;react\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e Input \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#34;./Input\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e ConfirmPasswordForm\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003epassword\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e setPassword\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003econfirmedPass\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e setConfirmedPass\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e matches \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e confirmedPass \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e password\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        type\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        required\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epassword\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          setPassword\u003c/span\u003e\u003cspan\u003e(event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        type\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        name\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;confirmedPassword\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        required\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003econfirmedPass\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        customValidity\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ematches \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#34;Password must match\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          setConfirmedPass\u003c/span\u003e\u003cspan\u003e(event\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentTarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSubmit\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003eform\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  )\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eYou can try it out:\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eI hope I’ve been able to show you how \u003ccode\u003esetCustomValidity\u003c/code\u003e can cover\nvalidation needs of all kinds.\u003c/p\u003e\n\u003cp\u003eBut the real power comes from great APIs.\u003c/p\u003e\n\u003cp\u003eAnd hopefully, you are now equipped with one of those.\u003cbr/\u003e\nAnd even more hopefully, we will see it natively in the HTML Spec one day.\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://pbs.twimg.com/profile_images/826440416371302400/HosO7Uze_400x400.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
