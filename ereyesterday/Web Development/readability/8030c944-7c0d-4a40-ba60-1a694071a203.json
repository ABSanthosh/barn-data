{
  "id": "8030c944-7c0d-4a40-ba60-1a694071a203",
  "title": "What on Earth is the `types` Descriptor in View Transitions?",
  "link": "https://css-tricks.com/what-on-earth-is-the-types-descriptor-in-view-transitions/",
  "description": "The @view-transition at-rule has two descriptions. One is the commonly used navigation descriptor. The second is types, the lesser-known of the two, and one that probably envies how much attention navigation gets. But read on to learn why we need types and how it opens up new possibilities for custom view transitions when navigating between pages. What on Earth is the `types` Descriptor in View Transitions? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Wed, 29 Jan 2025 14:13:53 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "view transitions"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 7036,
  "excerpt": "The @view-transition at-rule has two descriptions. One is the commonly used navigation descriptor. The second is types, the lesser-known of the two, and one that probably envies how much attention navigation gets. But read on to learn why we need types and how it opens up new possibilities for custom view transitions when navigating between pages.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Have you ever stumbled upon something new and went to research it just to find that there is little-to-no information about it? It’s a mixed feeling: confusing and discouraging because there is no apparent direction, but also exciting because it’s probably new to lots of people, not just you. Something like that happened to me while writing an Almanac’s entry for the @view-transition at-rule and its types descriptor. You may already know about Cross-Document View Transitions: With a few lines of CSS, they allow for transitions between two pages, something that in the past required a single-app framework with a side of animation library. In other words, lots of JavaScript. To start a transition between two pages, we have to set the @view-transition at-rule’s navigation descriptor to auto on both pages, and that gives us a smooth cross-fade transition between the two pages. So, as the old page fades out, the new page fades in. @view-transition { navigation: auto; } That’s it! And navigation is the only descriptor we need. In fact, it’s the only descriptor available for the @view-transition at-rule, right? Well, turns out there is another descriptor, a lesser-known brother, and one that probably envies how much attention navigation gets: the types descriptor. What do people say about types? Cross-Documents View Transitions are still fresh from the oven, so it’s normal that people haven’t fully dissected every aspect of them, especially since they introduce a lot of new stuff: a new at-rule, a couple of new properties and tons of pseudo-elements and pseudo-classes. However, it still surprises me the little mention of types. Some documentation fails to even name it among the valid  @view-transition descriptors. Luckily, though, the CSS specification does offer a little clarification about it: The types descriptor sets the active types for the transition when capturing or performing the transition. To be more precise, types can take a space-separated list with the names of the active types (as \u003ccustom-ident\u003e), or none if there aren’t valid active types for that page. Name: types For: @view-transition Value: none | \u003ccustom-ident\u003e+ Initial: none So the following values would work inside types: @view-transition { navigation: auto; types: bounce; } /* or a list */ @view-transition { navigation: auto; types: bounce fade rotate; } Yes, but what exactly are “active” types? That word “active” seems to be doing a lot of heavy lifting in the CSS specification’s definition and I want to unpack that to better understand what it means. Active types in view transitions The problem: A cross-fade animation for every page is good, but a common thing we need to do is change the transition depending on the pages we are navigating between. For example, on paginated content, we could slide the content to the right when navigating forward and to the left when navigating backward. In a social media app, clicking a user’s profile picture could persist the picture throughout the transition. All this would mean defining several transitions in our CSS, but doing so would make them conflict with each other in one big slop. What we need is a way to define several transitions, but only pick one depending on how the user navigates the page. The solution: Active types define which transition gets used and which elements should be included in it. In CSS, they are used through :active-view-transition-type(), a pseudo-class that matches an element if it has a specific active type. Going back to our last example, we defined the document’s active type as bounce. We could enclose that bounce animation behind an :active-view-transition-type(bounce), such that it only triggers on that page. /* This one will be used! */ html:active-view-transition-type(bounce) { \u0026::view-transition-old(page) { /* Custom Animation */ } \u0026::view-transition-new(page) { /* Custom Animation */ } } This prevents other view transitions from running if they don’t match any active type: /* This one won't be used! */ html:active-view-transition-type(slide) { \u0026::view-transition-old(page) { /* Custom Animation */ } \u0026::view-transition-new(page) { /* Custom Animation */ } } I asked myself whether this triggers the transition when going to the page, when out of the page, or in both instances. Turns out it only limits the transition when going to the page, so the last bounce animation is only triggered when navigating toward a page with a bounce value on its types descriptor, but not when leaving that page. This allows for custom transitions depending on which page we are going to. The following demo has two pages that share a stylesheet with the bounce and slide view transitions, both respectively enclosed behind an :active-view-transition-type(bounce) and :active-view-transition-type(slide) like the last example. We can control which page uses which view transition through the types descriptor. The first page uses the bounce animation: @view-transition { navigation: auto; types: bounce; } The second page uses the slide animation: @view-transition { navigation: auto; types: slide; } You can visit the demo here and see the full code over at GitHub. The types descriptor is used more in JavaScript The main problem is that we can only control the transition depending on the page we’re navigating to, which puts a major cap on how much we can customize our transitions. For instance, the pagination and social media examples we looked at aren’t possible just using CSS, since we need to know where the user is coming from. Luckily, using the types descriptor is just one of three ways that active types can be populated. Per spec, they can be: Passed as part of the arguments to startViewTransition(callbackOptions) Mutated at any time, using the transition’s types Declared for a cross-document view transition, using the types descriptor. The first option is when starting a view transition from JavaScript, but we want to trigger them when the user navigates to the page by themselves (like when clicking a link). The third option is using the types descriptor which we already covered. The second option is the right one for this case! Why? It lets us set the active transition type on demand, and we can perform that change just before the transition happens using the pagereveal event. That means we can get the user’s start and end page from JavaScript and then set the correct active type for that case. I must admit, I am not the most experienced guy to talk about this option, so once I demo the heck out of different transitions with active types I’ll come back with my findings! In the meantime, I encourage you to read about active types here if you are like me and want more on view transitions: View transition types in cross-document view transitions (Bramus) Customize the direction of a view transition with JavaScript (Umar Hansa)",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383818",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eHave you ever stumbled upon something new and went to research it just to find that there is little-to-no information about it? It’s a mixed feeling: confusing and discouraging because there is no apparent direction, but also exciting because it’s probably new to lots of people, not just you. Something like that happened to me while writing an Almanac’s entry for the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/v/view-transition/\"\u003e@view-transition\u003c/a\u003e\u003c/code\u003e at-rule and its \u003ccode\u003etypes\u003c/code\u003e descriptor.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou may already know about Cross-Document View Transitions: With a few lines of CSS, they allow for transitions between two pages, something that in the past required a single-app framework with a side of animation library. In other words, \u003ca href=\"https://css-tricks.com/page-transitions-for-everyone/\"\u003elots of JavaScript\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo start a transition between two pages, we have to set the \u003ccode\u003e@view-transition\u003c/code\u003e at-rule’s \u003ccode\u003enavigation\u003c/code\u003e descriptor to \u003ccode\u003eauto\u003c/code\u003e on both pages, and \u003ca href=\"https://css-tricks.com/snippets/css/basic-view-transition/\"\u003ethat gives us a smooth cross-fade transition between the two pages\u003c/a\u003e. So, as the old page fades out, the new page fades in.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@view-transition {\n  navigation: auto;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s it! And \u003ccode\u003enavigation\u003c/code\u003e is the only descriptor we need. In fact, it’s the only descriptor available for the \u003ccode\u003e@view-transition\u003c/code\u003e at-rule, right? Well, turns out there is \u003cem\u003eanother\u003c/em\u003e descriptor, a lesser-known brother, and one that probably envies how much attention \u003ccode\u003enavigation\u003c/code\u003e gets: the \u003cstrong\u003e\u003ccode\u003etypes\u003c/code\u003e descriptor\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"what-do-people-say-about-types-\"\u003eWhat do people say about \u003ccode\u003etypes\u003c/code\u003e?\u003c/h3\u003e\n\n\n\u003cp\u003eCross-Documents View Transitions are still fresh from the oven, so it’s normal that people haven’t fully dissected every aspect of them, especially since they introduce a \u003cem\u003elot\u003c/em\u003e of new stuff: a new at-rule, a couple of new properties and tons of pseudo-elements and pseudo-classes. However, it still surprises me the little mention of \u003ccode\u003etypes\u003c/code\u003e. Some documentation fails to even name it among the valid  \u003ccode\u003e@view-transition\u003c/code\u003e descriptors. Luckily, though, the CSS specification does offer a little clarification about it:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003etypes\u003c/code\u003e descriptor sets the active types for the transition when capturing or performing the transition.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eTo be more precise, \u003ccode\u003etypes\u003c/code\u003e can take a space-separated list with the names of the active types (as \u003ccode\u003e\u0026lt;custom-ident\u0026gt;\u003c/code\u003e), or \u003ccode\u003enone\u003c/code\u003e if there aren’t valid active types for that page.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eName: types\u003c/li\u003e\n\n\n\n\u003cli\u003eFor: \u003ccode\u003e@view-transition\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eValue: \u003ccode\u003enone | \u0026lt;custom-ident\u0026gt;+\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eInitial: none\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSo the following values would work inside \u003ccode\u003etypes\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@view-transition {\n  navigation: auto;\n  types: bounce;\n}\n\n/* or a list */\n\n@view-transition {\n  navigation: auto;\n  types: bounce fade rotate;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYes, but what exactly are “active” types? That word “active” seems to be doing a lot of heavy lifting in the CSS specification’s definition and I want to unpack that to better understand what it means.\u003c/p\u003e\n\n\n\u003ch3 id=\"active-types-in-view-transitions\"\u003eActive types in view transitions\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eThe problem:\u003c/strong\u003e A cross-fade animation for every page is good, but a common thing we need to do is change the transition depending on the pages we are navigating between. For example, on paginated content, we could slide the content to the right when navigating forward and to the left when navigating backward. In a social media app, clicking a user’s profile picture could persist the picture throughout the transition. All this would mean defining several transitions in our CSS, but doing so would make them conflict with each other in one big slop. What we need is a way to define several transitions, but only pick one depending on how the user navigates the page.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThe solution:\u003c/strong\u003e Active types define which transition gets used and which elements should be included in it. In CSS, they are used through \u003ccode\u003e:active-view-transition-type()\u003c/code\u003e, a pseudo-class that matches an element if it has a specific active type. Going back to our last example, we defined the document’s active type as \u003ccode\u003ebounce\u003c/code\u003e. We could enclose that \u003cem\u003ebounce\u003c/em\u003e animation behind an \u003ccode\u003e:active-view-transition-type(bounce)\u003c/code\u003e, such that it only triggers on that page.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This one will be used! */\nhtml:active-view-transition-type(bounce) {\n  \u0026amp;::view-transition-old(page) {\n    /* Custom Animation */\n  }\n\n  \u0026amp;::view-transition-new(page) {\n    /* Custom Animation */\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis prevents other view transitions from running if they don’t match any active type:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This one won\u0026#39;t be used! */\nhtml:active-view-transition-type(slide) {\n  \u0026amp;::view-transition-old(page) {\n    /* Custom Animation */\n  }\n\n  \u0026amp;::view-transition-new(page) {\n    /* Custom Animation */\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI asked myself whether this triggers the transition when going to the page, when out of the page, or in both instances. Turns out it only limits the transition when \u003cem\u003egoing to the page\u003c/em\u003e, so the last bounce animation is only triggered when navigating toward a page with a \u003ccode\u003ebounce\u003c/code\u003e value on its \u003ccode\u003etypes\u003c/code\u003e descriptor, but not when leaving that page. This allows for custom transitions depending on which page we are going to.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe following demo has two pages that share a stylesheet with the \u003ccode\u003ebounce\u003c/code\u003e and \u003ccode\u003eslide\u003c/code\u003e view transitions, both respectively enclosed behind an \u003ccode\u003e:active-view-transition-type(bounce)\u003c/code\u003e and \u003ccode\u003e:active-view-transition-type(slide)\u003c/code\u003e like the last example. We can control which page uses which view transition through the \u003ccode\u003etypes\u003c/code\u003e descriptor.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe first page uses the \u003ccode\u003ebounce\u003c/code\u003e animation:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@view-transition {\n  navigation: auto;\n  types: bounce;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe second page uses the \u003ccode\u003eslide\u003c/code\u003e animation:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@view-transition {\n  navigation: auto;\n  types: slide;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2025/01/custom-view-transition.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can visit \u003ca href=\"https://monknow.github.io/what-on-earth-is-the-types-descriptor-demo-1/index-1.html\" rel=\"noopener\"\u003ethe demo here\u003c/a\u003e and see the\u003ca href=\"https://github.com/Monknow/what-on-earth-is-the-types-descriptor-demo-1/\" rel=\"noopener\"\u003e full code over at GitHub\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-types-it-s-used-more-on-javascript\"\u003eThe \u003ccode\u003etypes\u003c/code\u003e descriptor is used more in JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eThe main problem is that we can only control the transition depending on the page we’re navigating to, which puts a major cap on how much we can customize our transitions. For instance, the pagination and social media examples we looked at aren’t possible just using CSS, since we need to know where the user is coming from. Luckily, using the \u003ccode\u003etypes\u003c/code\u003e descriptor is just one of three ways that active types can be populated. Per spec, they can be:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003ePassed as part of the arguments to \u003ccode\u003estartViewTransition(callbackOptions)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eMutated at any time, using the transition’s types\u003c/li\u003e\n\n\n\n\u003cli\u003eDeclared for a cross-document view transition, using the \u003ccode\u003etypes\u003c/code\u003e descriptor.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe first option is when starting a view transition from JavaScript, but we want to trigger them when the user navigates to the page by themselves (like when clicking a link). The third option is using the \u003ccode\u003etypes\u003c/code\u003e descriptor which we already covered. The second option is the right one for this case! Why? It lets us set the active transition type on demand, and we can perform that change just before the transition happens using the \u003ccode\u003epagereveal\u003c/code\u003e event. That means we can get the user’s start and end page from JavaScript and then set the correct active type for that case.\u003c/p\u003e\n\n\n\n\u003cp\u003eI must admit, I am not the most experienced guy to talk about this option, so once I demo the heck out of different transitions with active types I’ll come back with my findings! In the meantime, I encourage you to read about active types here if you are like me and want \u003cem\u003emore\u003c/em\u003e on view transitions:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions/cross-document#view-transition-types\" rel=\"noopener\"\u003eView transition types in cross-document view transitions\u003c/a\u003e (Bramus)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.debugbear.com/blog/view-transitions-spa-without-framework#customize-the-direction-of-a-view-transition-with-javascript\" rel=\"noopener\"\u003eCustomize the direction of a view transition with JavaScript\u003c/a\u003e (Umar Hansa)\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-01-29T07:13:53-07:00",
  "modifiedTime": "2025-01-29T07:14:16-07:00"
}
