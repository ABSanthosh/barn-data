{
  "id": "c1390051-ab5b-4b7a-8ed7-0a095e8a4918",
  "title": "Using Pages CMS for Static Site Content Management",
  "link": "https://css-tricks.com/using-pages-cms-for-static-site-content-management/",
  "description": "I know, I know: there are a ton of content management system options available, and while I've tested several, none have really been the one, y'know? Weird pricing models, difficult customization, some even end up becoming a whole 'nother thing to manage. Using Pages CMS for Static Site Content Management originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Ryan Trimble",
  "published": "Mon, 12 May 2025 12:42:10 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "CMS",
    "static sites"
  ],
  "byline": "Ryan Trimble",
  "length": 13655,
  "excerpt": "I know, I know: there are a ton of content management system options available, and while I've tested several, none have really been the one, y'know? Weird pricing models, difficult customization, some even end up becoming a whole 'nother thing to manage.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Friends, I’ve been on the hunt for a decent content management system for static sites for… well, about as long as we’ve all been calling them “static sites,” honestly. I know, I know: there are a ton of content management system options available, and while I’ve tested several, none have really been the one, y’know? Weird pricing models, difficult customization, some even end up becoming a whole ‘nother thing to manage. Also, I really enjoy building with site generators such as Astro or Eleventy, but pitching Markdown as the means of managing content is less-than-ideal for many “non-techie” folks. A few expectations for content management systems might include: Easy to use: The most important feature, why you might opt to use a content management system in the first place. Minimal Requirements: Look, I’m just trying to update some HTML, I don’t want to think too much about database tables. Collaboration: CMS tools work best when multiple contributors work together, contributors who probably don’t know Markdown or what GitHub is. Customizable: No website is the same, so we’ll need to be able to make custom fields for different types of content. Not a terribly long list of demands, I’d say; fairly reasonable, even. That’s why I was happy to discover Pages CMS. According to its own home page, Pages CMS is the “The No-Hassle CMS for Static Site Generators,” and I’ll to attest to that. Pages CMS has largely been developed by a single developer, Ronan Berder, but is open source, and accepting pull requests over on GitHub. Taking a lot of the “good parts” found in other CMS tools, and a single configuration file, Pages CMS combines things into a sleek user interface. Pages CMS includes lots of options for customization, you can upload media, make editable files, and create entire collections of content. Also, content can have all sorts of different fields, check the docs for the full list of supported types, as well as completely custom fields. There isn’t really a “back end” to worry about, as content is stored as flat files inside your git repository. Pages CMS provides folks the ability to manage the content within the repo, without needing to actually know how to use Git, and I think that’s neat. User Authentication works two ways: contributors can log in using GitHub accounts, or contributors can be invited by email, where they’ll receive a password-less, “magic-link,” login URL. This is nice, as GitHub accounts are less common outside of the dev world, shocking, I know. Oh, and Pages CMS has a very cheap barrier for entry, as it’s free to use. Pages CMS and Astro content collections I’ve created a repository on GitHub with Astro and Pages CMS using Astro’s default blog starter, and made it available publicly, so feel free to clone and follow along. I’ve been a fan of Astro for a while, and Pages CMS works well alongside Astro’s content collection feature. Content collections make globs of data easily available throughout Astro, so you can hydrate content inside Astro pages. These globs of data can be from different sources, such as third-party APIs, but commonly as directories of Markdown files. Guess what Pages CMS is really good at? Managing directories of Markdown files! Content collections are set up by a collections configuration file. Check out the src/content.config.ts file in the project, here we are defining a content collection named blog: import { glob } from 'astro/loaders'; import { defineCollection, z } from 'astro:content'; const blog = defineCollection({ // Load Markdown in the `src/content/blog/` directory. loader: glob({ base: './src/content/blog', pattern: '**/*.md' }), // Type-check frontmatter using a schema schema: z.object({ title: z.string(), description: z.string(), // Transform string to Date object pubDate: z.coerce.date(), updatedDate: z.coerce.date().optional(), heroImage: z.string().optional(), }), }); export const collections = { blog }; The blog content collection checks the /src/content/blog directory for files matching the **/*.md file type, the Markdown file format. The schema property is optional, however, Astro provides helpful type-checking functionality with Zod, ensuring data saved by Pages CMS works as expected in your Astro site. Pages CMS Configuration Alright, now that Astro knows where to look for blog content, let’s take a look at the Pages CMS configuration file, .pages.config.yml: content: - name: blog label: Blog path: src/content/blog filename: '{year}-{month}-{day}-{fields.title}.md' type: collection view: fields: [heroImage, title, pubDate] fields: - name: title label: Title type: string - name: description label: Description type: text - name: pubDate label: Publication Date type: date options: format: MM/dd/yyyy - name: updatedDate label: Last Updated Date type: date options: format: MM/dd/yyyy - name: heroImage label: Hero Image type: image - name: body label: Body type: rich-text - name: site-settings label: Site Settings path: src/config/site.json type: file fields: - name: title label: Website title type: string - name: description label: Website description type: string description: Will be used for any page with no description. - name: url label: Website URL type: string pattern: ^(https?:\\/\\/)?(www\\.)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(\\/[^\\s]*)?$ - name: cover label: Preview image type: image description: Image used in the social preview on social networks (e.g. Facebook, Twitter...) media: input: public/media output: /media There is a lot going on in there, but inside the content section, let’s zoom in on the blog object. - name: blog label: Blog path: src/content/blog filename: '{year}-{month}-{day}-{fields.title}.md' type: collection view: fields: [heroImage, title, pubDate] fields: - name: title label: Title type: string - name: description label: Description type: text - name: pubDate label: Publication Date type: date options: format: MM/dd/yyyy - name: updatedDate label: Last Updated Date type: date options: format: MM/dd/yyyy - name: heroImage label: Hero Image type: image - name: body label: Body type: rich-text We can point Pages CMS to the directory we want to save Markdown files using the path property, matching it up to the /src/content/blog/ location Astro looks for content. path: src/content/blog For the filename we can provide a pattern template to use when Pages CMS saves the file to the content collection directory. In this case, it’s using the file date’s year, month, and day, as well as the blog item’s title, by using fields.title to reference the title field. The filename can be customized in many different ways, to fit your scenario. filename: '{year}-{month}-{day}-{fields.title}.md' The type property tells Pages CMS that this is a collection of files, rather than a single editable file (we’ll get to that in a moment). type: collection In our Astro content collection configuration, we define our blog collection with the expectation that the files will contain a few bits of meta data such as: title, description, pubDate, and a few more properties. We can mirror those requirements in our Pages CMS blog collection as fields. Each field can be customized for the type of data you’re looking to collect. Here, I’ve matched these fields up with the default Markdown frontmatter found in the Astro blog starter. fields: - name: title label: Title type: string - name: description label: Description type: text - name: pubDate label: Publication Date type: date options: format: MM/dd/yyyy - name: updatedDate label: Last Updated Date type: date options: format: MM/dd/yyyy - name: heroImage label: Hero Image type: image - name: body label: Body type: rich-text Now, every time we create a new blog item in Pages CMS, we’ll be able to fill out each of these fields, matching the expected schema for Astro. Aside from collections of content, Pages CMS also lets you manage editable files, which is useful for a variety of things: site wide variables, feature flags, or even editable navigations. Take a look at the site-settings object, here we are setting the type as file, and the path includes the filename site.json. - name: site-settings label: Site Settings path: src/config/site.json type: file fields: - name: title label: Website title type: string - name: description label: Website description type: string description: Will be used for any page with no description. - name: url label: Website URL type: string pattern: ^(https?:\\/\\/)?(www\\.)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(\\/[^\\s]*)?$ - name: cover label: Preview image type: image description: Image used in the social preview on social networks (e.g. Facebook, Twitter...) The fields I’ve included are common site-wide settings, such as the site’s title, description, url, and cover image. Speaking of images, we can tell Pages CMS where to store media such as images and video. media: input: public/media output: /media The input property explains where to store the files, in the /public/media directory within our project. The output property is a helpful little feature that conveniently replaces the file path, specifically for tools that might require specific configuration. For example, Astro uses Vite under the hood, and Vite already knows about the public directory and complains if it’s included within file paths. Instead, we can set the output property so Pages CMS will only point image path locations starting at the inner /media directory instead. To see what I mean, check out the test post in the src/content/blog/ folder: --- title: 'Test Post' description: 'Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.' pubDate: 05/03/2025 heroImage: '/media/blog-placeholder-1.jpg' --- The heroImage now property properly points to /media/... instead of /public/media/.... As far as configurations are concerned, Pages CMS can be as simple or as complex as necessary. You can add as many collections or editable files as needed, as well as customize the fields for each type of content. This gives you a lot of flexibility to create sites! Connecting to Pages CMS Now that we have our Astro site set up, and a .pages.config.yml file, we can connect our site to the Pages CMS online app. As the developer who controls the repository, browse to https://app.pagescms.org/ and sign in using your GitHub account. You should be presented with some questions about permissions, you may need to choose between giving access to all repositories or specific ones. Personally, I chose to only give access to a single repository, which in this case is my astro-pages-cms-template repo. After providing access to the repo, head on back to the Pages CMS application, where you’ll see your project listed under the “Open a Project” headline. Clicking the open link will take you into the website’s dashboard, where we’ll be able to make updates to our site. Creating content Taking a look at our site’s dashboard, we’ll see a navigation on the left side, with some familiar things. Blog is the collection we set up inside the .pages.config.yml file, this will be where we we can add new entries to the blog. Site Settings is the editable file we are using to make changes to site-wide variables. Media is where our images and other content will live. Settings is a spot where we’ll be able to edit our .pages.config.yml file directly. Collaborators allows us to invite other folks to contribute content to the site. We can create a new blog post by clicking the Add Entry button in the top right Here we can fill out all the fields for our blog content, then hit the Save button. After saving, Pages CMS will create the Markdown file, store the file in the proper directory, and automatically commit the changes to our repository. This is how Pages CMS helps us manage our content without needing to use git directly. Automatically deploying The only thing left to do is set up automated deployments through the service provider of your choice. Astro has integrations with providers like Netlify, Cloudflare Pages, and Vercel, but can be hosted anywhere you can run node applications. Astro is typically very fast to build (thanks to Vite), so while site updates won’t be instant, they will still be fairly quick to deploy. If your site is set up to use Astro’s server-side rendering capabilities, rather than a completely static site, the changes might be much faster to deploy. Wrapping up Using a template as reference, we checked out how Astro content collections work alongside Pages CMS. We also learned how to connect our project repository to the Pages CMS app, and how to make content updates through the dashboard. Finally, if you are able, don’t forget to set up an automated deployment, so content publishes quickly.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-06-at-9.28.56%E2%80%AFPM-scaled.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eFriends, I’ve been on the hunt for a \u003cem\u003edecent\u003c/em\u003e content management system for static sites for… well, about as long as we’ve all been calling them “static sites,” honestly.\u003c/p\u003e\n\n\n\n\u003cp\u003eI know, I know: there are a \u003cem\u003eton\u003c/em\u003e of content management system options available, and while I’ve tested several, none have really been \u003cem\u003ethe one\u003c/em\u003e, y’know? Weird pricing models, difficult customization, some even end up becoming a \u003cem\u003ewhole ‘nother thing\u003c/em\u003e to manage.\u003c/p\u003e\n\n\n\n\u003cp\u003eAlso, I \u003cem\u003ereally\u003c/em\u003e enjoy building with site generators such as \u003ca href=\"https://astro.build/\" rel=\"noopener\"\u003eAstro\u003c/a\u003e or \u003ca href=\"https://11ty.dev/\" rel=\"noopener\"\u003eEleventy\u003c/a\u003e, but pitching Markdown as the means of managing content is less-than-ideal for many “non-techie” folks.\u003c/p\u003e\n\n\n\n\u003cp\u003eA few expectations for content management systems might include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEasy to use:\u003c/strong\u003e The most important feature, why you might opt to use a content management system in the first place.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMinimal Requirements:\u003c/strong\u003e Look, I’m just trying to update some HTML, I don’t want to think too much about database tables.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCollaboration:\u003c/strong\u003e CMS tools work best when multiple contributors work together, contributors who probably don’t know Markdown or what GitHub is.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCustomizable:\u003c/strong\u003e No website is the same, so we’ll need to be able to make custom fields for different types of content.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eNot a terribly long list of demands, I’d say; fairly reasonable, even. That’s why I was happy to discover \u003ca href=\"https://pagescms.org/\" rel=\"noopener\"\u003ePages CMS\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAccording to its own home page, Pages CMS is the “The No-Hassle CMS for Static Site Generators,” and I’ll to attest to that. Pages CMS has largely been developed by a single developer, \u003ca href=\"https://github.com/hunvreus\" rel=\"noopener\"\u003eRonan Berder\u003c/a\u003e, but is open source, and accepting pull requests over on \u003ca href=\"https://github.com/pages-cms/pages-cms\" rel=\"noopener\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTaking a lot of the “good parts” found in other CMS tools, and a single configuration file, Pages CMS combines things into a sleek user interface.\u003c/p\u003e\n\n\n\n\u003cp\u003ePages CMS includes lots of options for customization, you can upload \u003ca href=\"https://pagescms.org/docs/configuration/#media\" rel=\"noopener\"\u003emedia\u003c/a\u003e, make editable files, and create entire collections of content. Also, content can have all sorts of different fields, \u003ca href=\"https://pagescms.org/docs/configuration/\" rel=\"noopener\"\u003echeck the docs\u003c/a\u003e for the full list of supported types, as well as completely \u003ca href=\"https://pagescms.org/docs/custom-fields/\" rel=\"noopener\"\u003ecustom fields\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere isn’t really a “back end” to worry about, as content is stored as flat files inside your git repository. Pages CMS provides folks the ability to manage the content within the repo, without needing to actually know how to use Git, and I think that’s neat.\u003c/p\u003e\n\n\n\n\u003cp\u003eUser Authentication works two ways: contributors can log in using GitHub accounts, \u003cem\u003eor\u003c/em\u003e contributors can be invited by email, where they’ll receive a password-less, “magic-link,” login URL. This is nice, as GitHub accounts are less common outside of the dev world, shocking, I know.\u003c/p\u003e\n\n\n\n\u003cp\u003eOh, and Pages CMS has a \u003cem\u003every cheap\u003c/em\u003e barrier for entry, as it’s \u003ca href=\"https://arc.net/l/quote/omujoygq\" rel=\"noopener\"\u003efree to use\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"pages-cms-and-astro-content-collections\"\u003ePages CMS and Astro content collections\u003c/h3\u003e\n\n\n\u003cp\u003eI’ve created a \u003ca href=\"https://github.com/mrtrimble/astro-pages-cms-template\" rel=\"noopener\"\u003erepository on GitHub\u003c/a\u003e with Astro and Pages CMS using Astro’s default blog starter, and made it available publicly, so feel free to clone and follow along.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve been a fan of Astro \u003ca href=\"https://ryantrimble.com/blog/why-astro-is-my-favorite-framework.html\" rel=\"noopener\"\u003efor a while\u003c/a\u003e, and Pages CMS works well alongside Astro’s content collection feature. Content collections make globs of data easily available throughout Astro, so you can hydrate content inside Astro pages. These globs of data can be from different sources, such as third-party APIs, but commonly as directories of Markdown files. Guess what Pages CMS is really good at? \u003cem\u003eManaging directories of Markdown files\u003c/em\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003eContent collections are set up by a collections configuration file. Check out the \u003ca href=\"https://github.com/mrtrimble/astro-pages-cms-template/blob/main/src/content.config.ts\" rel=\"noopener\"\u003e\u003ccode\u003esrc/content.config.ts\u003c/code\u003e\u003c/a\u003e file in the project, here we are defining a content collection named \u003ccode\u003eblog\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eimport { glob } from \u0026#39;astro/loaders\u0026#39;;\nimport { defineCollection, z } from \u0026#39;astro:content\u0026#39;;\n\nconst blog = defineCollection({\n// Load Markdown in the `src/content/blog/` directory.\nloader: glob({ base: \u0026#39;./src/content/blog\u0026#39;, pattern: \u0026#39;**/*.md\u0026#39; }),\n  // Type-check frontmatter using a schema\n  schema: z.object({\n    title: z.string(),\n   description: z.string(),\n    // Transform string to Date object\n    pubDate: z.coerce.date(),\n    updatedDate: z.coerce.date().optional(),\n    heroImage: z.string().optional(),\n  }),\n});\n\nexport const collections = { blog };\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eblog\u003c/code\u003e content collection checks the \u003ccode\u003e/src/content/blog\u003c/code\u003e directory for files matching the \u003ccode\u003e**/*.md\u003c/code\u003e file type, the Markdown file format. The \u003ccode\u003eschema\u003c/code\u003e property is optional, however, Astro provides helpful type-checking functionality with \u003ca href=\"https://zod.dev/\" rel=\"noopener\"\u003eZod\u003c/a\u003e, ensuring data saved by Pages CMS works as expected in your Astro site.\u003c/p\u003e\n\n\n\u003ch3 id=\"pages-cms-configuration\"\u003ePages CMS Configuration\u003c/h3\u003e\n\n\n\u003cp\u003eAlright, now that Astro knows where to look for \u003ccode\u003eblog\u003c/code\u003e content, let’s take a look at the Pages CMS configuration file, \u003ca href=\"https://github.com/mrtrimble/astro-pages-cms-template/blob/main/.pages.yml\" rel=\"noopener\"\u003e\u003ccode\u003e.pages.config.yml\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econtent:\n  - name: blog\n    label: Blog\n    path: src/content/blog\n    filename: \u0026#39;{year}-{month}-{day}-{fields.title}.md\u0026#39;\n    type: collection\n    view:\n      fields: [heroImage, title, pubDate]\n    fields:\n      - name: title\n        label: Title\n        type: string\n\n      - name: description\n        label: Description\n        type: text\n\n      - name: pubDate\n        label: Publication Date\n        type: date\n        options:\n          format: MM/dd/yyyy\n\n      - name: updatedDate\n        label: Last Updated Date\n        type: date\n        options:\n          format: MM/dd/yyyy\n\n      - name: heroImage\n        label: Hero Image\n        type: image\n\n      - name: body\n        label: Body\n        type: rich-text\n\n  - name: site-settings\n    label: Site Settings\n    path: src/config/site.json\n    type: file\n    fields:\n      - name: title\n        label: Website title\n        type: string\n\n      - name: description\n        label: Website description\n        type: string\n        description: Will be used for any page with no description.\n\n      - name: url\n        label: Website URL\n        type: string\n        pattern: ^(https?:\\/\\/)?(www\\.)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(\\/[^\\s]*)?$\n\n      - name: cover\n        label: Preview image\n        type: image\n        description: Image used in the social preview on social networks (e.g. Facebook, Twitter...)\n\nmedia:\n  input: public/media\n  output: /media\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere is a lot going on in there, but inside the \u003ccode\u003econtent\u003c/code\u003e section, let’s zoom in on the \u003ccode\u003eblog\u003c/code\u003e object.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e- name: blog\n  label: Blog\n  path: src/content/blog\n  filename: \u0026#39;{year}-{month}-{day}-{fields.title}.md\u0026#39;\n  type: collection\n  view:\n    fields: [heroImage, title, pubDate]\n  fields:\n    - name: title\n      label: Title\n      type: string\n\n    - name: description\n      label: Description\n      type: text\n\n    - name: pubDate\n      label: Publication Date\n      type: date\n      options:\n        format: MM/dd/yyyy\n\n    - name: updatedDate\n      label: Last Updated Date\n      type: date\n      options:\n        format: MM/dd/yyyy\n\n    - name: heroImage\n      label: Hero Image\n      type: image\n\n    - name: body\n      label: Body\n      type: rich-text\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can point Pages CMS to the directory we want to save Markdown files using the \u003ccode\u003epath\u003c/code\u003e property, matching it up to the \u003ccode\u003e/src/content/blog/\u003c/code\u003e location Astro looks for content.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003epath: src/content/blog\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFor the \u003ccode\u003efilename\u003c/code\u003e we can provide a pattern template to use when Pages CMS saves the file to the content collection directory. In this case, it’s using the file date’s \u003ccode\u003eyear\u003c/code\u003e, \u003ccode\u003emonth\u003c/code\u003e, and \u003ccode\u003eday\u003c/code\u003e, as well as the blog item’s title, by using \u003ccode\u003efields.title\u003c/code\u003e to reference the title field. The filename can be \u003ca href=\"https://arc.net/l/quote/gbjcufwj\" rel=\"noopener\"\u003ecustomized in many different ways\u003c/a\u003e, to fit your scenario.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efilename: \u0026#39;{year}-{month}-{day}-{fields.title}.md\u0026#39;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003etype\u003c/code\u003e property tells Pages CMS that this is a collection of files, rather than a single editable file (we’ll get to that in a moment).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003etype: collection\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn our Astro content collection configuration, we define our \u003ccode\u003eblog\u003c/code\u003e collection with the expectation that the files will contain a few bits of meta data such as: \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003edescription\u003c/code\u003e, \u003ccode\u003epubDate\u003c/code\u003e, and a few more properties.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can mirror those requirements in our Pages CMS \u003ccode\u003eblog\u003c/code\u003e collection as \u003ccode\u003efields\u003c/code\u003e. Each field can be customized for the type of data you’re looking to collect. Here, I’ve matched these fields up with the default Markdown frontmatter found in the Astro blog starter.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efields:\n  - name: title\n    label: Title\n    type: string\n\n  - name: description\n    label: Description\n    type: text\n\n  - name: pubDate\n    label: Publication Date\n    type: date\n    options:\n      format: MM/dd/yyyy\n\n  - name: updatedDate\n    label: Last Updated Date\n    type: date\n    options:\n      format: MM/dd/yyyy\n\n  - name: heroImage\n    label: Hero Image\n    type: image\n\n  - name: body\n    label: Body\n    type: rich-text\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, every time we create a new \u003ccode\u003eblog\u003c/code\u003e item in Pages CMS, we’ll be able to fill out each of these fields, matching the expected schema for Astro.\u003c/p\u003e\n\n\n\n\u003cp\u003eAside from collections of content, Pages CMS also lets you manage editable files, which is useful for a variety of things: site wide variables, feature flags, or even editable navigations.\u003c/p\u003e\n\n\n\n\u003cp\u003eTake a look at the \u003ccode\u003esite-settings\u003c/code\u003e object, here we are setting the \u003ccode\u003etype\u003c/code\u003e as \u003ccode\u003efile\u003c/code\u003e, and the \u003ccode\u003epath\u003c/code\u003e includes the filename \u003ccode\u003esite.json\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e- name: site-settings\n  label: Site Settings\n  path: src/config/site.json\n  type: file\n  fields:\n    - name: title\n      label: Website title\n      type: string\n\n    - name: description\n      label: Website description\n      type: string\n      description: Will be used for any page with no description.\n\n    - name: url\n      label: Website URL\n      type: string\n      pattern: ^(https?:\\/\\/)?(www\\.)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(\\/[^\\s]*)?$\n\n    - name: cover\n      label: Preview image\n      type: image\n      description: Image used in the social preview on social networks (e.g. Facebook, Twitter...)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe fields I’ve included are common site-wide settings, such as the site’s \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003edescription\u003c/code\u003e, \u003ccode\u003eurl\u003c/code\u003e, and \u003ccode\u003ecover\u003c/code\u003e image.\u003c/p\u003e\n\n\n\n\u003cp\u003eSpeaking of images, we can tell Pages CMS where to store media such as images and video.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"YAML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emedia:\n  input: public/media\n  output: /media\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003einput\u003c/code\u003e property explains where to store the files, in the \u003ccode\u003e/public/media\u003c/code\u003e directory within our project.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eoutput\u003c/code\u003e property is a helpful little feature that conveniently replaces the file path, specifically for tools that might require specific configuration. For example, Astro uses \u003ca href=\"https://vite.dev/\" rel=\"noopener\"\u003eVite\u003c/a\u003e under the hood, and Vite already knows about the \u003ccode\u003epublic\u003c/code\u003e directory and complains if it’s included within file paths. Instead, we can set the \u003ccode\u003eoutput\u003c/code\u003e property so Pages CMS will only point image path locations starting at the inner \u003ccode\u003e/media\u003c/code\u003e directory instead.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo see what I mean, check out the test post in the \u003ccode\u003esrc/content/blog/\u003c/code\u003e folder:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Markdown\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e---\ntitle: \u0026#39;Test Post\u0026#39;\ndescription: \u0026#39;Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.\u0026#39;\npubDate: 05/03/2025\nheroImage: \u0026#39;/media/blog-placeholder-1.jpg\u0026#39;\n---\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eheroImage\u003c/code\u003e now property properly points to \u003ccode\u003e/media/...\u003c/code\u003e instead of \u003ccode\u003e/public/media/...\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs far as configurations are concerned, Pages CMS can be as simple or as complex as necessary. You can add as many collections or editable files as needed, as well as customize the fields for each type of content. This gives you a lot of flexibility to create sites!\u003c/p\u003e\n\n\n\u003ch3 id=\"connecting-to-pages-cms\"\u003eConnecting to Pages CMS\u003c/h3\u003e\n\n\n\u003cp\u003eNow that we have our Astro site set up, and a \u003ccode\u003e.pages.config.yml\u003c/code\u003e file, we can connect our site to the Pages CMS online app. As the developer who controls the repository, browse to \u003ccode\u003ehttps://app.pagescms.org/\u003c/code\u003e and sign in using your GitHub account.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou should be presented with some questions about permissions, you may need to choose between giving access to all repositories or specific ones. Personally, I chose to only give access to a single repository, which in this case is my \u003ccode\u003eastro-pages-cms-template\u003c/code\u003e repo.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"557\" height=\"264\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250503152609.png?resize=557%2C264\u0026amp;ssl=1\" alt=\"granting permission to a single repository, called mrtrimble/astro-pages-cms-template\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250503152609.png?w=557\u0026amp;ssl=1 557w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250503152609.png?resize=300%2C142\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAfter providing access to the repo, head on back to the Pages CMS application, where you’ll see your project listed under the “Open a Project” headline.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1302\" height=\"352\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506125648.png?resize=1302%2C352\u0026amp;ssl=1\" alt=\"text that reads \u0026#34;Open a project\u0026#34; with a list of projects, the astro pages cms template is visible at the top\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506125648.png?w=1302\u0026amp;ssl=1 1302w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506125648.png?resize=300%2C81\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506125648.png?resize=1024%2C277\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506125648.png?resize=768%2C208\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eClicking the open link will take you into the website’s dashboard, where we’ll be able to make updates to our site.\u003c/p\u003e\n\n\n\u003ch3 id=\"creating-content\"\u003eCreating content\u003c/h3\u003e\n\n\n\u003cp\u003eTaking a look at our site’s dashboard, we’ll see a navigation on the left side, with some familiar things.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"2560\" height=\"1495\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=2560%2C1495\u0026amp;ssl=1\" alt=\"Blog dashboard page, displaying the blog entries, there is only one at the moment, called Test Post. At the top, a button labeled \u0026#34;Add an entry\u0026#34;\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=300%2C175\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=1024%2C598\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=768%2C448\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=1536%2C897\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506204616-scaled.png?resize=2048%2C1196\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBlog\u003c/strong\u003e is the collection we set up inside the \u003ccode\u003e.pages.config.yml\u003c/code\u003e file, this will be where we we can add new entries to the blog.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSite Settings\u003c/strong\u003e is the editable file we are using to make changes to site-wide variables.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMedia\u003c/strong\u003e is where our images and other content will live.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSettings\u003c/strong\u003e is a spot where we’ll be able to edit our \u003ccode\u003e.pages.config.yml\u003c/code\u003e file directly.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCollaborators\u003c/strong\u003e allows us to invite other folks to contribute content to the site.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe can create a new blog post by clicking the \u003cstrong\u003eAdd Entry\u003c/strong\u003e button in the top right\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"602\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-1024x602.png?resize=1024%2C602\u0026amp;ssl=1\" alt=\"create a new entry page, with fields for title, description publication date, last updated date, hero image, and body\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-scaled.png?resize=1024%2C602\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-scaled.png?resize=300%2C176\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-scaled.png?resize=768%2C452\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-scaled.png?resize=1536%2C903\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Pasted-image-20250506205203-scaled.png?resize=2048%2C1204\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere we can fill out all the fields for our blog content, then hit the \u003cstrong\u003eSave\u003c/strong\u003e button.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter saving, Pages CMS will create the Markdown file, store the file in the proper directory, and automatically commit the changes to our repository. This is how Pages CMS helps us manage our content without needing to use git directly.\u003c/p\u003e\n\n\n\u003ch3 id=\"automatically-deploying\"\u003eAutomatically deploying\u003c/h3\u003e\n\n\n\u003cp\u003eThe only thing left to do is set up automated deployments through the service provider of your choice. Astro has integrations with providers like Netlify, Cloudflare Pages, and Vercel, but can be hosted anywhere you can run \u003ccode\u003enode\u003c/code\u003e applications.\u003c/p\u003e\n\n\n\n\u003cp\u003eAstro is typically very fast to build (thanks to Vite), so while site updates won’t be \u003cem\u003einstant\u003c/em\u003e, they will still be fairly quick to deploy. If your site is set up to use Astro’s server-side rendering capabilities, rather than a completely static site, the changes might be much faster to deploy.\u003c/p\u003e\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eUsing \u003ca href=\"https://github.com/mrtrimble/astro-pages-cms-template\" rel=\"noopener\"\u003ea template\u003c/a\u003e as reference, we checked out how Astro content collections work alongside Pages CMS. We also learned how to connect our project repository to the Pages CMS app, and how to make content updates through the dashboard. Finally, if you are able, don’t forget to set up an automated deployment, so content publishes quickly.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-05-12T06:42:10-06:00",
  "modifiedTime": "2025-05-12T06:42:12-06:00"
}
