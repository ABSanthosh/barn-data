{
  "id": "ff29fb79-9a86-4854-af99-87ebea26ca19",
  "title": "Clarifying the Relationship Between Popovers and Dialogs",
  "link": "https://css-tricks.com/clarifying-the-relationship-between-popovers-and-dialogs/",
  "description": "The difference between Popovers (i.e., the popover attribute) and Dialogs (i.e., both the element and the dialog accessible role) is incredibly confusing — so much that many articles (like this, this, and this) have tried to … Clarifying the Relationship Between Popovers and Dialogs originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Zell Liew",
  "published": "Wed, 23 Oct 2024 13:20:46 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "accessibility",
    "dialog",
    "popover"
  ],
  "byline": "Zell Liew",
  "length": 7412,
  "excerpt": "The difference between Popovers (i.e., the popover attribute) and Dialogs (i.e., both the \u003cdialog\u003e element and the dialog accessible role) is incredibly",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! The difference between Popovers (i.e., the popover attribute) and Dialogs (i.e., both the \u003cdialog\u003e element and the dialog accessible role) is incredibly confusing — so much that many articles (like this, this, and this) have tried to shed some light on the issue. If you’re still feeling confused, I hope this one clears up that confusion once and for all. Distinguishing Popovers From Dialogs Let’s pull back on the technical implementations and consider the greater picture that makes more sense and puts everything into perspective. The reason for this categorization comes from a couple of noteworthy points. First, we know that a popover is content that “pops” up when a user clicks a button (or hovers over it, or focuses on it). In the ARIA world, there is a useful attribute called aria-haspopup that categorizes such popups into five different roles: menu listbox tree grid dialog Strictly speaking, there’s a sixth value, true, that evaluates to menu. I didn’t include it above since it’s effectively just menu. By virtue of dialog being on this list, we already know that dialog is a type of popover. But there’s more evidence behind this too. The Three Types of Dialogues Since we’re already talking about the dialog role, let’s further expand that into its subcategories: Dialogs can be categorized into three main kinds: Modal: A dialog with an overlay and focus trapping Non-Modal: A dialog with neither an overlay nor focus trapping Alert Dialog: A dialog that alerts screen readers when shown. It can be either modal or non-modal. This brings us to another reason why a dialog is considered a popover. Some people may say that popovers are strictly non-modal, but this seems to be a major misunderstanding — because popovers have a ::backdrop pseudo-element on the top layer. The presence of ::backdrop indicates that popovers are modal. Quoting the CSS-Tricks almanac: The ::backdrop CSS pseudo-element creates a backdrop that covers the entire viewport and is rendered immediately below a \u003cdialog\u003e, an element with the popup attribute, or any element that enters fullscreen mode using the Fullscreen API. That said, I don’t recommend using the Popover API for modality because it doesn’t have a showModal() method (that \u003cdialog\u003e has) that creates inertness, focus trapping, and other necessary features to make it a real modal. If you only use the Popover API, you’ll need to build those features from scratch. So, the fact that popovers can be modal means that a dialog is simply one kind of popover. A Popover Needs an Accessible Role Popovers need a role to be accessible. Hidde has a great article on selecting the right role, but I’m going to provide some points in this article as well. To start, you can use one of the aria-haspopup roles mentioned above: menu listbox tree grid dialog You could also use one of the more complex roles like: treegrid alertdialog There are two additional roles that are slightly more contentious but may do just fine. tooltip status To understand why tooltip and status could be valid popover roles, we need to take a detour into the world of tooltips. A Note on Tooltips From a visual perspective, a tooltip is a popover because it contains a tiny window that pops up when the tooltip is displayed. I included tooltip in the mental model because it is reasonable to implement tooltip with the Popover API. \u003cdiv popver role=\"tooltip\"\u003e...\u003c/div\u003e The tooltip role doesn’t do much in screen readers today so you need to use aria-describedby to create accessible tooltips. But it is still important because it may extend accessibility support for some software. But, from an accessibility standpoint, tooltips are not popovers. In the accessibility world, tooltips must not contain interactive content. If they contain interactive content, you’re not looking at a tooltip, but a dialog. You’re thinking of dialogs. Use a dialog. Heydon Pickering, “Your Tooltips are Bogus” This is also why aria-haspopup doesn’t include tooltip —aria-haspopup is supposed to signify interactive content but a tooltip must not contain interactive content. With that, let’s move on to status which is an interesting role that requires some explanation. Why status? Tooltips have a pretty complex history in the world of accessible interfaces so there’s a lot of discussion and contention over it. To keep things short (again), there’s an accessibility issue with tooltips since tooltips should only show on hover. This means screen readers and mobile phone users won’t be able to see those tooltips (since they can’t hover on the interface). Steve Faulkner created an alternative — toggletips — to fill the gap. In doing so, he explained that toggletip content must be announced by screen readers through live regions. When initially displayed content is announced by (most) screen readers that support aria-live Heydon Pickering later added that status can be used in his article on toggletips. We can supply an empty live region, and populate it with the toggletip “bubble” when it is invoked. This will both make the bubble appear visually and cause the live region to announce the tooltip’s information. \u003c!-- Code example by Heydon --\u003e \u003cspan class=\"tooltip-container\"\u003e \u003cbutton type=\"button\" aria-label=\"more info\" data-toggletip-content=\"This clarifies whatever needs clarifying\"\u003ei\u003c/button\u003e \u003cspan role=\"status\"\u003e \u003cspan class=\"toggletip-bubble\"\u003eThis clarifies whatever needs clarifying\u003c/span\u003e \u003c/span\u003e \u003c/span\u003e This is why status can be a potential role for a popover, but you must use discretion when creating it. That said, I’ve chosen not to include the status role in the Popover mental model because status is a live region role and hence different from the rest. In Summary Here’s a quick summary of the mental model: Popover is an umbrella term for any kind of on-demand popup. Dialog is one type of popover — a kind that creates a new window (or card) to contain some content. When you internalize this, it’s not hard to see why the Popover API can be used with the dialog element. \u003c!-- Uses the popover API. Role needs to be determined manually --\u003e \u003cdiv popover\u003e...\u003c/div\u003e \u003c!-- Dialog with the popover API. Role is dialog --\u003e \u003cdialog popover\u003e...\u003c/dialog\u003e \u003c!-- Dialog that doesn't use the popover API. Role is dialog --\u003e \u003cdialog\u003e...\u003c/dialog\u003e When choosing a role for your popover, you can use one of these roles safely. menu listbox tree grid treegrid dialog alertdialog The added benefit is most of these roles work together with aria-haspopup which gained decent support in screen readers last year. Of course, there are a couple more you can use like status and tooltip, but you won’t be able to use them together with aria-haspopup. Further Reading aria-haspopup property (WAI-ARIA Specification, Version 1.2) Semantics and the popover attribute: which role to use when? (Hidde de Vries) aria-hasPopUp less is more (html5accessibility.com) Tooltips \u0026 Toggletips (Inclusive Components) What’s the Difference Between HTML’s Dialog Element and Popovers? (Chris Coyier)",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382008",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThe difference between \u003cstrong\u003ePopovers\u003c/strong\u003e (i.e., the \u003ccode\u003epopover\u003c/code\u003e attribute) and \u003cstrong\u003eDialogs\u003c/strong\u003e (i.e., both the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element and the \u003ccode\u003edialog\u003c/code\u003e accessible role) is incredibly confusing — so much that many articles (like \u003ca href=\"https://blog.logrocket.com/comparing-popover-api-dialog-element/\" rel=\"noopener\"\u003ethis\u003c/a\u003e, \u003ca href=\"https://levelup.gitconnected.com/dialogs-vs-popovers-understanding-the-key-differences-8919d5be0fcc\" rel=\"noopener\"\u003ethis\u003c/a\u003e, and \u003ca href=\"https://hidde.blog/dialog-modal-popover-differences/\" rel=\"noopener\"\u003ethis\u003c/a\u003e) have tried to shed some light on the issue.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’re still feeling confused, I hope this one clears up that confusion once and for all.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"the-relationship-between-popovers-and-dialogs\"\u003eDistinguishing Popovers From Dialogs\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s pull back on the technical implementations and consider the greater picture that makes more sense and puts everything into perspective.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"997\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/popover-accessible-roles.jpg?resize=1024%2C997\u0026amp;ssl=1\" alt=\"Line diagram connecting the popover attribute to six types of accessible roles, including dialog.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/popover-accessible-roles.jpg?resize=1024%2C997\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/popover-accessible-roles.jpg?resize=300%2C292\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/popover-accessible-roles.jpg?resize=768%2C748\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/popover-accessible-roles.jpg?w=1167\u0026amp;ssl=1 1167w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe reason for this categorization comes from a couple of noteworthy points.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, we know that a \u003ccode\u003epopover\u003c/code\u003e is content that “pops” up when a user clicks a button (or hovers over it, or focuses on it). In the \u003ca href=\"https://www.w3.org/WAI/standards-guidelines/aria/\" rel=\"noopener\"\u003eARIA\u003c/a\u003e world, there is a useful attribute called \u003ca href=\"https://www.w3.org/TR/wai-aria-1.2/#aria-haspopup\" rel=\"noopener\"\u003e\u003ccode\u003earia-haspopup\u003c/code\u003e\u003c/a\u003e that categorizes such popups into five different \u003ccode\u003erole\u003c/code\u003es:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emenu\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003elistbox\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003etree\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003egrid\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003edialog\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eStrictly speaking, there’s a sixth value, \u003ccode\u003etrue\u003c/code\u003e, that evaluates to \u003ccode\u003emenu\u003c/code\u003e. I didn’t include it above since it’s effectively just \u003ccode\u003emenu\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy virtue of \u003ccode\u003edialog\u003c/code\u003e being on this list, \u003cstrong\u003ewe already know that \u003ccode\u003edialog\u003c/code\u003e is a type of popover\u003c/strong\u003e. But there’s more evidence behind this too.\u003c/p\u003e\n\n\n\u003ch3 id=\"further-expansion-on-dialog\"\u003eThe Three Types of Dialogues\u003c/h3\u003e\n\n\n\u003cp\u003eSince we’re already talking about the \u003ccode\u003edialog\u003c/code\u003e role, let’s further expand that into its subcategories:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"709\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?resize=1024%2C709\u0026amp;ssl=1\" alt=\"Lone diagram connecting the popover attribute to six accessible roles, including dialog, which is broken out into three categories.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?resize=1024%2C709\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?resize=300%2C208\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?resize=768%2C532\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?resize=1536%2C1063\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/Screenshot-2024-10-22-at-8.56.04%E2%80%AFAM.png?w=1748\u0026amp;ssl=1 1748w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eDialogs can be categorized into three main kinds:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModal\u003c/strong\u003e: A dialog with an overlay and focus trapping\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eNon-Modal\u003c/strong\u003e: A dialog with neither an overlay nor focus trapping\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAlert Dialog\u003c/strong\u003e: A dialog that alerts screen readers when shown. It can be either modal or non-modal.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis brings us to another reason why \u003cstrong\u003ea dialog is considered a popover\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eSome people may say that popovers are strictly non-modal, but this seems to be a major misunderstanding — because popovers have a \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/b/backdrop/\"\u003e\u003ccode\u003e::backdrop\u003c/code\u003e\u003c/a\u003e pseudo-element on the top layer. \u003cstrong\u003eThe presence of \u003ccode\u003e::backdrop\u003c/code\u003e indicates that popovers are modal.\u003c/strong\u003e Quoting the \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/b/backdrop/\"\u003eCSS-Tricks almanac\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003e::backdrop\u003c/code\u003e CSS pseudo-element creates a backdrop that covers the entire viewport and is rendered immediately below a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e, an element with the \u003ccode\u003epopup\u003c/code\u003e attribute, or any element that enters fullscreen mode using the Fullscreen API.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThat said, I don’t recommend using the Popover API for modality because it doesn’t have a \u003ccode\u003eshowModal()\u003c/code\u003e method (that \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e has) that creates inertness, focus trapping, and other necessary features to make it a real modal. If you only use the Popover API, you’ll need to build those features from scratch.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, the fact that popovers can be modal means that \u003cstrong\u003ea \u003ccode\u003edialog\u003c/code\u003e is simply one kind of \u003ccode\u003epopover\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"a-popover-needs-a-role\"\u003eA Popover Needs an Accessible Role\u003c/h3\u003e\n\n\n\u003cp\u003ePopovers need a role to be accessible. Hidde has a \u003ca href=\"https://hidde.blog/popover-semantics/\" rel=\"noopener\"\u003egreat article\u003c/a\u003e on selecting the right role, but I’m going to provide some points in this article as well.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo start, you can use one of the \u003ccode\u003earia-haspopup\u003c/code\u003e roles mentioned above:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emenu\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003elistbox\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003etree\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003egrid\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003edialog\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eYou could also use one of the more complex roles like:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etreegrid\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ealertdialog\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThere are two additional roles that are slightly more contentious but may do just fine.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etooltip\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003estatus\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eTo understand why \u003ccode\u003etooltip\u003c/code\u003e and \u003ccode\u003estatus\u003c/code\u003e could be valid \u003ccode\u003epopover\u003c/code\u003e roles, we need to take a detour into the world of tooltips.\u003c/p\u003e\n\n\n\u003ch3 id=\"a-note-on-tooltips\"\u003eA Note on Tooltips\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eFrom a visual perspective, a tooltip is a popover\u003c/strong\u003e because it contains a tiny window that pops up when the tooltip is displayed.\u003c/p\u003e\n\n\n\n\u003cp\u003eI included \u003ccode\u003etooltip\u003c/code\u003e in the mental model because it is reasonable to implement \u003ccode\u003etooltip\u003c/code\u003e with the Popover API.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div popver role=\u0026#34;tooltip\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003etooltip\u003c/code\u003e role \u003ca href=\"https://sarahmhigley.com/writing/tooltips-in-wcag-21/#best-practices-summary\" rel=\"noopener\"\u003edoesn’t do much in screen readers today\u003c/a\u003e so you need to use \u003ccode\u003earia-describedby\u003c/code\u003e to create accessible tooltips. But it is still important because it may \u003ca href=\"https://www.tpgi.com/short-note-on-aria-label-aria-labelledby-and-aria-describedby/\" rel=\"noopener\"\u003eextend accessibility support\u003c/a\u003e for some software.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eBut, from an accessibility standpoint, tooltips are not popovers\u003c/strong\u003e. In the accessibility world, tooltips must not contain interactive content. If they contain interactive content, you’re not looking at a \u003ccode\u003etooltip\u003c/code\u003e, but a \u003ccode\u003edialog\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eYou’re thinking of dialogs. Use a dialog.\u003c/p\u003e\n\u003ccite\u003eHeydon Pickering, \u003ca href=\"https://heydonworks.com/article/your-tooltips-are-bogus/\" rel=\"noopener\"\u003e“Your Tooltips are Bogus”\u003c/a\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThis is also why \u003ccode\u003earia-haspopup\u003c/code\u003e doesn’t include \u003ccode\u003etooltip\u003c/code\u003e —\u003ccode\u003earia-haspopup\u003c/code\u003e is supposed to signify interactive content but a \u003ccode\u003etooltip\u003c/code\u003e must not contain interactive content.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith that, let’s move on to \u003ccode\u003estatus\u003c/code\u003e which is an interesting role that requires some explanation.\u003c/p\u003e\n\n\n\u003ch3 id=\"why-status-\"\u003eWhy \u003ccode\u003estatus\u003c/code\u003e?\u003c/h3\u003e\n\n\n\u003cp\u003eTooltips have a \u003ca href=\"https://sarahmhigley.com/writing/tooltips-in-wcag-21/\" rel=\"noopener\"\u003epretty complex history\u003c/a\u003e in the world of accessible interfaces so there’s a lot of discussion and contention over it.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo keep things short (again), there’s an accessibility issue with tooltips since tooltips should only show on hover. This means screen readers and mobile phone users won’t be able to see those tooltips (since they can’t hover on the interface).\u003c/p\u003e\n\n\n\n\u003cp\u003eSteve Faulkner created an alternative — \u003ca href=\"https://www.paciellogroup.com/blog/2016/01/simple-standalone-toggletip-widget-pattern/\" rel=\"noopener\"\u003etoggletips\u003c/a\u003e — to fill the gap. In doing so, he explained that toggletip content must be announced by screen readers through live regions.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen initially displayed content is announced by (most) screen readers that support \u003ccode\u003earia-live\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eHeydon Pickering later added that \u003ccode\u003estatus\u003c/code\u003e can be used in his article on \u003ca href=\"https://inclusive-components.design/tooltips-toggletips/#toggletipswithliveregions\" rel=\"noopener\"\u003etoggletips\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWe can supply an empty live region, and populate it with the toggletip “bubble” when it is invoked. This will both make the bubble appear visually and cause the live region to announce the tooltip’s information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Code example by Heydon --\u0026gt;\n\u0026lt;span class=\u0026#34;tooltip-container\u0026#34;\u0026gt; \n  \u0026lt;button type=\u0026#34;button\u0026#34; aria-label=\u0026#34;more info\u0026#34; data-toggletip-content=\u0026#34;This clarifies whatever needs clarifying\u0026#34;\u0026gt;i\u0026lt;/button\u0026gt; \n  \u0026lt;span role=\u0026#34;status\u0026#34;\u0026gt; \n    \u0026lt;span class=\u0026#34;toggletip-bubble\u0026#34;\u0026gt;This clarifies whatever needs clarifying\u0026lt;/span\u0026gt; \n  \u0026lt;/span\u0026gt;\n\u0026lt;/span\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is why \u003ccode\u003estatus\u003c/code\u003e can be a potential role for a \u003ccode\u003epopover\u003c/code\u003e, but you must use discretion when creating it.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, I’ve chosen not to include the \u003ccode\u003estatus\u003c/code\u003e role in the Popover mental model because \u003ccode\u003estatus\u003c/code\u003e is a live region role and hence different from the rest.\u003c/p\u003e\n\n\n\u003ch3 id=\"in-summary\"\u003eIn Summary\u003c/h3\u003e\n\n\n\u003cp\u003eHere’s a quick summary of the mental model:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePopover\u003c/strong\u003e is an umbrella term for any kind of on-demand popup.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDialog\u003c/strong\u003e is one type of popover — a kind that creates a new window (or card) to contain some content.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWhen you internalize this, it’s not hard to see why the Popover API can be used with the \u003ccode\u003edialog\u003c/code\u003e element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Uses the popover API. Role needs to be determined manually --\u0026gt;\n\u0026lt;div popover\u0026gt;...\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Dialog with the popover API. Role is dialog --\u0026gt;\n\u0026lt;dialog popover\u0026gt;...\u0026lt;/dialog\u0026gt;\n\n\u0026lt;!-- Dialog that doesn\u0026#39;t use the popover API. Role is dialog --\u0026gt;\n\u0026lt;dialog\u0026gt;...\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen choosing a \u003ccode\u003erole\u003c/code\u003e for your popover, you can use one of these roles safely.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emenu\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003elistbox\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003etree\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003egrid\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003etreegrid\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003edialog\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ealertdialog\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe added benefit is most of these roles work together with \u003ccode\u003earia-haspopup\u003c/code\u003e which gained \u003ca href=\"https://html5accessibility.com/stuff/2023/06/20/aria-haspopup-less-is-more/\" rel=\"noopener\"\u003edecent support\u003c/a\u003e in screen readers last year.\u003c/p\u003e\n\n\n\n\u003cp\u003eOf course, there are a couple more you can use like \u003ccode\u003estatus\u003c/code\u003e and \u003ccode\u003etooltip\u003c/code\u003e, but you won’t be able to use them together with \u003ccode\u003earia-haspopup\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"further-reading\"\u003eFurther Reading\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/wai-aria-1.2/#aria-haspopup\" rel=\"noopener\"\u003e\u003ccode\u003earia-haspopup\u003c/code\u003e property\u003c/a\u003e (WAI-ARIA Specification, Version 1.2)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://hidde.blog/popover-semantics/\" rel=\"noopener\"\u003eSemantics and the popover attribute: which role to use when?\u003c/a\u003e (Hidde de Vries)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://html5accessibility.com/stuff/2023/06/20/aria-haspopup-less-is-more/\" rel=\"noopener\"\u003e\u003ccode\u003earia-hasPopUp\u003c/code\u003e less is more\u003c/a\u003e (html5accessibility.com)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://inclusive-components.design/tooltips-toggletips/\" rel=\"noopener\"\u003eTooltips \u0026amp; Toggletips\u003c/a\u003e (Inclusive Components)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://frontendmasters.com/blog/whats-the-difference-between-htmls-dialog-element-and-popovers/\" rel=\"noopener\"\u003eWhat’s the Difference Between HTML’s Dialog Element and Popovers?\u003c/a\u003e (Chris Coyier)\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-10-23T07:20:46-06:00",
  "modifiedTime": "2024-10-23T07:20:48-06:00"
}
