{
  "id": "8a35521b-938b-4a31-b7ef-402cb8631ef5",
  "title": "Introducing Uniffi for React Native: Rust-Powered Turbo Modules",
  "link": "https://hacks.mozilla.org/2024/12/introducing-uniffi-for-react-native-rust-powered-turbo-modules/",
  "description": "Mozilla and Filament have introduced Uniffi for React Native, a tool that allows developers to leverage the safety and performance benefits of Rust in cross-platform React Native apps. The post Introducing Uniffi for React Native: Rust-Powered Turbo Modules appeared first on Mozilla Hacks - the Web developer blog.",
  "author": "Mark Mayo",
  "published": "Wed, 04 Dec 2024 19:38:01 +0000",
  "source": "https://hacks.mozilla.org/feed/",
  "categories": [
    "Developer Tools",
    "Featured Article",
    "c++",
    "firefox",
    "react",
    "rust"
  ],
  "byline": "",
  "length": 4351,
  "excerpt": "Uniffi for React Native: Mozilla and Filament's open-source tool lets you build high-performance Modules in Rust.",
  "siteName": "Mozilla Hacks – the Web developer blog",
  "favicon": "",
  "text": "Today Mozilla and Filament are releasing Uniffi for React Native, a new tool we’ve been using to build React Native Turbo Modules in Rust, under an open source license. This allows millions of developers writing cross-platform React Native apps to use Rust  – a modern programming language known for its safety and performance benefits to build single implementations of their app’s core logic to work seamlessly across iOS and Android.  This is a big win for us and for Filament who co-developed the library with Mozilla and James Hugman, the lead developer. We think it will be awesome for many other developers too. Less code is good. Memory safety is good. Performance is good. We get all three, plus the joy of using a language we love in more places. For those familiar with React Native, it’s a great framework for creating cross-platform apps, but it has its challenges. React Native apps rely on a single JavaScript thread, which can slow things down when handling complex tasks. Developers have traditionally worked around this by writing code twice – once for iOS and once for Android – or by using C++, which can be difficult to manage. Uniffi for React Native offers a better solution by enabling developers to offload heavy tasks to Rust, which is now easy to integrate with React Native. As a result, you’ve got faster, smoother apps and a streamlined development process. How Uniffi for React Native works Unifii for React Native is a uniFFI bindings generator for using Rust from React Native via Turbo Modules. It lets us work at an abstraction level high enough to stay focused on our applications’s needs rather than getting lost in the gory technical details of bespoke native cross-platform development  It provides tooling to generate: Typescript and JSI C++ to call Rust from Typescript and back again A Turbo-Module that installs the bindings into a running React Native library. We’re stoked about this work continuing. In 2020, we started with Uniffi as a modern day ‘write once; run anywhere’ toolset for Rust. Uniffi has come a long way since we developed the technology as a bit of a hack to get us a single implementation of Firefox Sync’s core (in Rust) that we could then deploy to both our Android and iOS apps! Since then Mozilla has used uniffi-rs to successfully deploy Rust in mobile and desktop products used by hundreds of millions of users. This Rust code runs important subsystems such as bookmarks and history sync, Firefox Suggest, telemetry and experimentation. Beyond Mozilla, Uniffi is used in Android (in AOSP), high-profile security products and some complex libraries familiar to the community. Currently the Uniffi for React Native project is an early release. We don’t have a cool landing page or examples in the repo (coming!), but open source contributor Johannes Marbach has already been sponsored by Unomed to use Uniffi for React Native to create a React Native Library for the Matrix SDK . Need an idea on how you might give it a whirl? I’ve got two uses that we’re very excited about: 1) Use Rust to offload computationally heavy code to a multi-threaded/memory-safe subsystem to escape single-threaded JS performance bottlenecks in React Native. If you know, you know. 2) Leverage the incredible library of Rust crates in your React Native app. One of the Filament devs showed how powerful this is, recently. With a rudimentary knowledge of Rust, they were able to find a fast blurhashing library on crates.io to replace a slow Typescript implementation and get it running the same day. We’re hoping we can really improve the tooling even more to make this kind of optimization as easy as possible. Uniffi represents a step forward in cross-platform development, combining the power of Rust with the flexibility of React Native to unlock new possibilities for app developers.  We’re excited to have the community explore what’s possible. Please check out the library on Github and jump into the conversation on Matrix.  Disclosure: in addition to this collaboration, Mozilla Ventures is an investor in Filament.  Technologist at Mozilla Innovations More articles by Mark Mayo… CEO at Filament More articles by Tony Haile…",
  "image": "https://hacks.mozilla.org/wp-content/uploads/2024/12/Screenshot-2024-12-04-at-19.23.36.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle role=\"article\"\u003e\n    \u003cp\u003e\u003cspan\u003eToday \u003c/span\u003e\u003ca href=\"https://www.mozilla.org/en-US/\"\u003e\u003cspan\u003eMozilla\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://filament.dm/\"\u003e\u003cspan\u003eFilament\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e are releasing \u003c/span\u003e\u003ca href=\"https://github.com/jhugman/uniffi-bindgen-react-native\"\u003e\u003cspan\u003eUniffi for React Native\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, a new tool we’ve been using to build React Native Turbo Modules in Rust, under an open source license. This allows millions of developers writing cross-platform \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/React_Native\"\u003e\u003cspan\u003eReact Native\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e apps to use\u003c/span\u003e\u003ca href=\"https://hacks.mozilla.org/2018/12/rust-2018-is-here/\"\u003e\u003cspan\u003e Rust \u003c/span\u003e\u003c/a\u003e\u003cspan\u003e – a modern programming language known for its safety and performance benefits to build single implementations of their app’s core logic to work seamlessly across iOS and Android. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThis is a big win for us and for \u003c/span\u003e\u003ca href=\"https://filament.dm/\"\u003e\u003cspan\u003eFilament\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e who co-developed the library with Mozilla and \u003c/span\u003e\u003ca href=\"https://github.com/jhugman\"\u003e\u003cspan\u003eJames Hugman\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, the lead developer. We think it will be awesome for many other developers too. Less code is good. Memory safety is good. Performance is good. We get all three, plus the joy of using a language we love in more places. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eFor those familiar with React Native, it’s a great framework for creating cross-platform apps, but it has its challenges. React Native apps rely on a single JavaScript thread, which can slow things down when handling complex tasks. Developers have traditionally worked around this by writing code twice – once for iOS and once for Android – or by using C++, which can be difficult to manage. Uniffi for React Native offers a better solution by enabling developers to offload heavy tasks to Rust, which is now easy to integrate with React Native. As a result, you’ve got faster, smoother apps and a streamlined development process.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eHow Uniffi for React Native works\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eUnifii for React Native is a uniFFI bindings generator for using Rust from React Native via Turbo Modules. It lets us work at an abstraction level high enough to stay focused on our applications’s needs rather than getting lost in the gory technical details of bespoke native cross-platform development  It provides tooling to generate:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eTypescript and JSI C++ to call Rust from Typescript and back again\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eA Turbo-Module that installs the bindings into a running React Native library.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan\u003eWe’re stoked about this work continuing. In 2020, we started with \u003c/span\u003e\u003ca href=\"https://mozilla.github.io/uniffi-rs/latest/\"\u003e\u003cspan\u003eUniffi \u003c/span\u003e\u003c/a\u003e\u003cspan\u003eas a modern day ‘write once; run anywhere’ toolset for Rust. Uniffi has come a long way since we developed the technology as a bit of a hack to get us a single implementation of Firefox Sync’s core (in Rust) that we could then deploy to both our Android and iOS apps! Since then Mozilla has used \u003c/span\u003e\u003ca href=\"https://mozilla.github.io/uniffi-rs/latest/\"\u003e\u003cspan\u003euniffi-rs\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e to successfully deploy Rust in mobile and desktop products used by hundreds of millions of users. This Rust code runs important subsystems such as bookmarks and history sync, Firefox Suggest, telemetry and experimentation. Beyond Mozilla, Uniffi is used in Android (in \u003c/span\u003e\u003ca href=\"https://android.googlesource.com/platform/external/rust/crates/uniffi/\"\u003e\u003cspan\u003eAOSP\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e), high-profile \u003c/span\u003e\u003ca href=\"https://nordsecurity.com/\"\u003e\u003cspan\u003esecurity\u003c/span\u003e\u003c/a\u003e \u003ca href=\"https://bitwarden.com/\"\u003e\u003cspan\u003eproducts\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and some \u003c/span\u003e\u003ca href=\"https://dotlottie.io/\"\u003e\u003cspan\u003ecomplex\u003c/span\u003e\u003c/a\u003e \u003ca href=\"https://native.live/\"\u003e\u003cspan\u003elibraries\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e familiar to the community.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eCurrently the Uniffi for React Native project is an early release. We don’t have a cool landing page or examples in the repo (coming!), but open source contributor \u003c/span\u003e\u003ca href=\"https://github.com/johennes\"\u003e\u003cspan\u003eJohannes Marbach\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e has already been sponsored by \u003c/span\u003e\u003ca href=\"https://www.unomed.ch/\"\u003e\u003cspan\u003eUnomed\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e to use Uniffi for React Native to create \u003c/span\u003e\u003ca href=\"https://github.com/unomed-dev/react-native-matrix-sdk\"\u003e\u003cspan\u003ea React Native Library for the Matrix SDK\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e .\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eNeed an idea on how you might give it a whirl? I’ve got two uses that we’re very excited about:\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e1) Use Rust to offload computationally heavy code to a multi-threaded/memory-safe subsystem to escape single-threaded JS performance bottlenecks in React Native. If you know, you know.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e2) Leverage the incredible library of \u003c/span\u003e\u003ca href=\"https://crates.io/\"\u003e\u003cspan\u003eRust crates\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e in your React Native app. One of the Filament devs showed how powerful this is, recently. With a rudimentary knowledge of Rust, they were able to find a fast blurhashing library on crates.io to replace a slow Typescript implementation and get it running the same day. We’re hoping we can really improve the tooling even more to make this kind of optimization as easy as possible.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eUniffi represents a step forward in cross-platform development, combining the power of Rust with the flexibility of React Native to unlock new possibilities for app developers. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eWe’re excited to have the community explore what’s possible. Please check out \u003c/span\u003e\u003ca href=\"https://github.com/jhugman/uniffi-bindgen-react-native\"\u003e\u003cspan\u003ethe library on Github\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://matrix.to/#/#uniffi-bindgen-js:matrix.org\"\u003e\u003cspan\u003ejump into the conversation on Matrix\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ci\u003e\u003cspan\u003eDisclosure: in addition to this collaboration, \u003c/span\u003e\u003c/i\u003e\u003ca href=\"https://mozilla.vc/\"\u003e\u003ci\u003e\u003cspan\u003eMozilla Ventures\u003c/span\u003e\u003c/i\u003e\u003c/a\u003e\u003ci\u003e\u003cspan\u003e is an investor in Filament. \u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\n\n    \u003csection\u003e\n                                \n                      \u003cp\u003eTechnologist at Mozilla Innovations\u003c/p\u003e\n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/mmayomozilla-com/\"\u003eMore articles by Mark Mayo…\u003c/a\u003e\u003c/p\u003e\n                  \n                      \u003cp\u003eCEO at Filament\n\u003c/p\u003e\n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/\"\u003eMore articles by Tony Haile…\u003c/a\u003e\u003c/p\u003e\n                  \u003c/section\u003e\n  \u003c/article\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
