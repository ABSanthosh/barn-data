{
  "id": "843212eb-e36b-4142-8ade-cb1113f2aff2",
  "title": "The What If Machine: Bringing the “Iffy” Future of CSS into the Present",
  "link": "https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/",
  "description": "My thesis for today's article offers further reassurance that inline conditionals are probably not the harbinger of the end of civilization: I reckon we can achieve the same functionality right now with style queries, which are gaining pretty good browser support. The What If Machine: Bringing the “Iffy” Future of CSS into the Present originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Lee Meyer",
  "published": "Mon, 17 Feb 2025 14:24:40 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "functions"
  ],
  "byline": "Lee Meyer",
  "length": 8309,
  "excerpt": "My thesis for today's article offers further reassurance that inline conditionals are probably not the harbinger of the end of civilization: I reckon we can achieve the same functionality right now with style queries, which are gaining pretty good browser support.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Geoff’s post about the CSS Working Group’s decision to work on inline conditionals inspired some drama in the comments section. Some developers are excited, but it angers others, who fear it will make the future of CSS, well, if-fy. Is this a slippery slope into a hellscape overrun with rogue developers who abuse CSS by implementing excessive logic in what was meant to be a styling language? Nah. Even if some jerk did that, no mainstream blog would ever publish the ramblings of that hypothetical nutcase who goes around putting crazy logic into CSS for the sake of it. Therefore, we know the future of CSS is safe. You say the whole world’s ending — honey, it already did My thesis for today’s article offers further reassurance that inline conditionals are probably not the harbinger of the end of civilization: I reckon we can achieve the same functionality right now with style queries, which are gaining pretty good browser support. If I’m right, Lea’s proposal is more like syntactic sugar which would sometimes be convenient and allow cleaner markup. It’s amusing that any panic-mongering about inline conditionals ruining CSS might be equivalent to catastrophizing adding a ternary operator for a language that already supports if statements. Indeed, Lea says of her proposed syntax, “Just like ternaries in JS, it may also be more ergonomic for cases where only a small part of the value varies.” She also mentions that CSS has always been conditional. Not that conditionality was ever verboten in CSS, but CSS isn’t always very good at it. Sold! I want a conditional oompa loompa now! Me too. And many other people, as proven by Lea’s curated list of amazingly complex hacks that people have discovered for simulating inline conditionals with current CSS. Some of these hacks are complicated enough that I’m still unsure if I understand them, but they certainly have cool names. Lea concludes: “If you’re aware of any other techniques, let me know so I can add them.” Hmm… surely I was missing something regarding the problems these hacks solve. I noted that Lea has a doctorate whereas I’m an idiot. So I scrolled back up and reread, but I couldn’t stop thinking: Are these people doing all this work to avoid putting an extra div around their widgets and using style queries? It’s fair if people want to avoid superfluous elements in the DOM, but Lea’s list of hacks shows that the alternatives are super complex, so it’s worth a shot to see how far style queries with wrapper divs can take us. Motivating examples Lea’s motivating examples revolve around setting a “variant” property on a callout, noting we can almost achieve what she wants with style queries, but this hypothetical syntax is sadly invalid: .callout { @container (style(--variant: success)) { border-color: var(--color-success-30); background-color: var(--color-success-95); \u0026::before { content: var(--icon-success); color: var(--color-success-05); } } } She wants to set styles on both the container itself and its descendants based on --variant. Now, in this specific example, I could get away with hacking the ::after pseudo-element with z-index to give the illusion that it’s the container. Then I could style the borders and background of that. Unfortunately, this solution is as fragile as my ego, and in this other motivating example, Lea wants to set flex-flow of the container based on the variant. In that situation, my pseudo-element solution is not good enough. Remember, the acceptance of Lea’s proposal into the CSS spec came as her birthday gift from the universe, so it’s not fair to try to replace her gift with one of those cheap fake containers I bought on Temu. She deserves an authentic container. Let’s try again. Busting out the gangsta wrapper One of the comments on Lea’s proposal mentions type grinding but calls it “a very (I repeat, very) convoluted but working” approach to solving the problem that inline conditionals are intended to solve. That’s not quite fair. Type grinding took me a bit to get my head around, but I think it is more approachable with fewer drawbacks than other hacks. Still, when you look at the samples, this kind of code in production would get annoying. Therefore, let’s bite the bullet and try to build an alternate version of Lea’s flexbox variant sample. My version doesn’t use type grinding or any hack, but “plain old” (not so old) style queries together with wrapper divs, to work around the problem that we can’t use style queries to style the container itself. The wrapper battles type grinding Comparing the code from Lea’s sample and my version can help us understand the differences in complexity. Here are the two versions of the CSS: And here are the two versions of the markup: So, simpler CSS and slightly more markup. Maybe we are onto something. What I like about style queries is that Lea’s proposal uses the style() function, so if and when her proposal makes it into browsers then migrating style queries to inline conditionals and removing the wrappers seems doable. This wouldn’t be a 2025 article if I didn’t mention that migrating this kind of code could be a viable use case for AI. And by the time we get inline conditionals, maybe AI won’t suck. But we’re getting ahead of ourselves. Have you ever tried to adopt some whizz-bang JavaScript framework that looks elegant in the “to-do list” sample? If so, you will know that solutions that appear compelling in simplistic examples can challenge your will to live in a realistic example. So, let’s see how using style queries in the above manner works out in a more realistic example. Seeking validation Combine my above sample with this MDN example of HTML5 Validation and Seth Jeffery’s cool demo of morphing pure CSS icons, then feed it all into the “What If” Machine to get the demo below. All the changes you see to the callout if you make the form valid are based on one custom property. This property is never directly used in CSS property values for the callout but controls the style queries that set the callout’s border color, icon, background color, and content. We set the --variant property at the .callout-wrapper level. I am setting it using CSS, like this: @property --variant { syntax: \"error | success\"; initial-value: error; inherits: true; } body:has(:invalid) .callout-wrapper { --variant: error; } body:not(:has(:invalid)) .callout-wrapper { --variant: success; } However, the variable could be set by JavaScript or an inline style in the HTML, like Lea’s samples. Form validation is just my way of making the demo more interactive to show that the callout can change dynamically based on --variant. Wrapping up It’s off-brand for me to write an article advocating against hacks that bend CSS to our will, and I’m all for “tricking” the language into doing what we want. But using wrappers with style queries might be the simplest thing that works till we get support for inline conditionals. If we want to feel more like we are living in the future, we could use the above approach as a basis for a polyfill for inline conditionals, or some preprocessor magic using something like a Parcel plugin or a PostCSS plugin — but my trigger finger will always itch for the Delete key on such compromises. Lea acknowledges, “If you can do something with style queries, by all means, use style queries — they are almost certainly a better solution.” I have convinced myself with the experiments in this article that style queries remain a cromulent option even in Lea’s motivating examples — but I still look forward to inline conditionals. In the meantime, at least style queries are easy to understand compared to the other known workarounds. Ironically, I agree with the comments questioning the need for the inline conditionals feature, not because it will ruin CSS but because I believe we can already achieve Lea’s examples with current modern CSS and without hacks. So, we may not need inline conditionals, but they could allow us to write more readable, succinct code. Let me know in the comment section if you can think of examples where we would hit a brick wall of complexity using style queries instead of inline conditionals.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/384446",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e\u003ca href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"\u003eGeoff’s post\u003c/a\u003e about the CSS Working Group’s decision to work on \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/10064#issuecomment-2165157958\" rel=\"noopener\"\u003einline conditionals\u003c/a\u003e inspired some drama in the comments section. Some developers are excited, but it angers others, who fear it will make the future of CSS, well, \u003cem\u003eif\u003c/em\u003e-fy. Is this a slippery slope into a hellscape overrun with rogue developers who abuse CSS by implementing excessive logic in what was meant to be a styling language? Nah. Even if some jerk did that, no mainstream blog would ever \u003ca href=\"https://css-tricks.com/generating-and-solving-sudokus-in-css/\"\u003epublish the ramblings of that hypothetical nutcase who goes around putting crazy logic into CSS for the sake of it\u003c/a\u003e. Therefore, we know the future of CSS is safe.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"you-say-the-whole-worlds-ending-honey-it-already-did\"\u003eYou say the whole world’s ending — honey, it already did\u003c/h3\u003e\n\n\n\u003cp\u003eMy thesis for today’s article offers further reassurance that inline conditionals are probably not the harbinger of the end of civilization: I reckon we can achieve the same functionality right now with \u003ca href=\"https://css-tricks.com/digging-deeper-into-container-style-queries/\"\u003estyle queries\u003c/a\u003e, which are gaining \u003ca href=\"https://caniuse.com/css-container-queries-style\" rel=\"noopener\"\u003epretty good browser support\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf I’m right, Lea’s proposal is more like syntactic sugar which would sometimes be convenient and allow cleaner markup. It’s amusing that any panic-mongering about inline conditionals ruining CSS might be equivalent to catastrophizing adding a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\" rel=\"noopener\"\u003eternary operator\u003c/a\u003e for a language that already supports \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\" rel=\"noopener\"\u003eif statements\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIndeed, Lea says of her proposed syntax, “Just like ternaries in JS, it may also be more ergonomic for cases where only a small part of the value varies.” She also mentions that CSS has always been conditional. Not that conditionality was ever verboten in CSS, but CSS isn’t always very good at it.\u003c/p\u003e\n\n\n\u003ch3 id=\"sold-i-want-a-conditional-oompa-loompa-now\"\u003eSold! I want a conditional oompa loompa now!\u003c/h3\u003e\n\n\n\u003cp\u003eMe too. And many other people, as proven by Lea’s curated list of \u003ca href=\"https://lea.verou.me/blog/2024/css-conditionals-now/#the-current-state-of-the-art\" rel=\"noopener\"\u003eamazingly complex hacks\u003c/a\u003e that people have discovered for simulating inline conditionals with current CSS. Some of these hacks are complicated enough that I’m still unsure if I understand them, but they certainly have cool names. Lea concludes: “If you’re aware of any other techniques, let me know so I can add them.”\u003c/p\u003e\n\n\n\n\u003cp\u003eHmm… surely I was missing something regarding the problems these hacks solve. I noted that Lea has a doctorate whereas I’m an idiot. So I scrolled back up and reread, but I couldn’t stop thinking: \u003cem\u003eAre these people doing all this work to avoid putting an extra div around their widgets and using style queries?\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s fair if people want to avoid superfluous elements in the DOM, but Lea’s list of hacks shows that the alternatives are super complex, so it’s worth a shot to see how far style queries with wrapper divs can take us.\u003c/p\u003e\n\n\n\u003ch3 id=\"motivating-examples\"\u003eMotivating examples\u003c/h3\u003e\n\n\n\u003cp\u003eLea’s motivating examples revolve around setting a “variant” property on a callout, noting we can almost achieve what she wants with style queries, but this hypothetical syntax is sadly \u003cstrong\u003einvalid\u003c/strong\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.callout { \n  @container (style(--variant: success)) {\n    border-color: var(--color-success-30);\n    background-color: var(--color-success-95);\n\n    \u0026amp;::before {\n      content: var(--icon-success);\n      color: var(--color-success-05);\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eShe wants to set styles on both the container itself and its descendants based on \u003ccode\u003e--variant\u003c/code\u003e. Now, in this specific example, I could get away with hacking the \u003ccode\u003e::after\u003c/code\u003e pseudo-element with \u003ccode\u003ez-index\u003c/code\u003e to give the illusion that it’s the container. Then I could style the borders and background of that. Unfortunately, this solution is as fragile as my ego, and in \u003ca href=\"https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f\" rel=\"noopener\"\u003ethis other motivating example\u003c/a\u003e, Lea wants to set \u003ccode\u003eflex-flow\u003c/code\u003e of the container based on the variant. In that situation, my pseudo-element solution is not good enough.\u003c/p\u003e\n\n\n\n\u003cp\u003eRemember, the acceptance of Lea’s proposal into the CSS spec came as her birthday gift from the universe, so it’s not fair to try to replace her gift with one of those cheap fake containers I bought on Temu. She deserves an authentic container.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s try again.\u003c/p\u003e\n\n\n\u003ch3 id=\"busting-out-the-gangsta-wrapper\"\u003eBusting out the gangsta wrapper\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/10064#issuecomment-2161742249\" rel=\"noopener\"\u003eOne of the comments\u003c/a\u003e on Lea’s proposal mentions \u003ca href=\"https://www.bitovi.com/blog/css-only-type-grinding-casting-tokens-into-useful-values\" rel=\"noopener\"\u003etype grinding\u003c/a\u003e but calls it “a \u003cem\u003every\u003c/em\u003e (I repeat, \u003cstrong\u003every\u003c/strong\u003e) convoluted but working” approach to solving the problem that inline conditionals are intended to solve. That’s not quite fair. Type grinding took me a bit to get my head around, but I think it is more approachable with fewer drawbacks than other hacks. Still, when you look at the samples, this kind of code in production would get annoying. Therefore, let’s bite the bullet and try to build an alternate version of Lea’s \u003ca href=\"https://codepen.io/leaverou/pen/OJYzQjN/c8ec7595b68381e99d38441487db546f\" rel=\"noopener\"\u003eflexbox variant sample\u003c/a\u003e. My version doesn’t use type grinding or any hack, but “plain old” (not so old) style queries together with wrapper divs, to work around the problem that we can’t use style queries to style the container itself.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"the-wrapper-battles-type-grinding\"\u003eThe wrapper battles type grinding\u003c/h3\u003e\n\n\n\u003cp\u003eComparing the code from Lea’s sample and my version can help us understand the differences in complexity.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are the two versions of the CSS:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1163\" height=\"710\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-1.png?resize=1163%2C710\u0026amp;ssl=1\" alt=\"CSS Code Comparison\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-1.png?w=1163\u0026amp;ssl=1 1163w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-1.png?resize=300%2C183\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-1.png?resize=1024%2C625\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-1.png?resize=768%2C469\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd here are the two versions of the markup:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"867\" height=\"611\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-2.png?resize=867%2C611\u0026amp;ssl=1\" alt=\"Markup Code Comparison\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-2.png?w=867\u0026amp;ssl=1 867w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-2.png?resize=300%2C211\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/css-code-2.png?resize=768%2C541\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSo, simpler CSS and slightly more markup. Maybe we are onto something.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat I like about style queries is that Lea’s proposal uses the \u003ccode\u003estyle()\u003c/code\u003e function, so if and when her proposal makes it into browsers then migrating style queries to inline conditionals and removing the wrappers seems doable. This wouldn’t be a 2025 article if I didn’t mention that migrating this kind of code could be a viable use case for AI. And by the time we get inline conditionals, maybe AI won’t suck.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut we’re getting ahead of ourselves. Have you ever tried to adopt some whizz-bang JavaScript framework that looks elegant in the “to-do list” sample? If so, you will know that solutions that appear compelling in simplistic examples can challenge your will to live in a realistic example. So, let’s see how using style queries in the above manner works out in a more realistic example.\u003c/p\u003e\n\n\n\u003ch3 id=\"seeking-validation\"\u003eSeeking validation\u003c/h3\u003e\n\n\n\u003cp\u003eCombine my above sample with this \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:valid\" rel=\"noopener\"\u003eMDN example of HTML5 Validation\u003c/a\u003e and Seth Jeffery’s \u003ca href=\"https://codepen.io/sethjeffery/pen/Empwyy\" rel=\"noopener\"\u003ecool demo\u003c/a\u003e of morphing pure CSS icons, then feed it all into the “What If” Machine to get the demo below.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAll the changes you see to the callout if you make the form valid are based on one custom property. This property is never directly used in CSS property values for the callout but controls the style queries that set the callout’s border color, icon, background color, and content. We set the \u003ccode\u003e--variant\u003c/code\u003e property at the \u003ccode\u003e.callout-wrapper\u003c/code\u003e level. I am setting it using CSS, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --variant {\n  syntax: \u0026#34;error | success\u0026#34;;\n  initial-value: error;\n  inherits: true;\n}\n\nbody:has(:invalid) .callout-wrapper {\n  --variant: error;\n}\n\nbody:not(:has(:invalid)) .callout-wrapper {\n  --variant: success;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, the variable could be set by JavaScript or an inline style in the HTML, like Lea’s samples. Form validation is just my way of making the demo more interactive to show that the callout can change dynamically based on \u003ccode\u003e--variant\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eIt’s off-brand for me to write an article advocating \u003cem\u003eagainst\u003c/em\u003e hacks that bend CSS to our will, and I’m all for “tricking” the language into doing what we want. But using wrappers with style queries might be the simplest thing that works till we get support for inline conditionals. If we want to feel more like we are living in the future, we could use the above approach as a basis for a polyfill for inline conditionals, or some preprocessor magic using something like a \u003ca href=\"https://parceljs.org/features/plugins/\" rel=\"noopener\"\u003eParcel plugin\u003c/a\u003e or a \u003ca href=\"https://postcss.org/\" rel=\"noopener\"\u003ePostCSS\u003c/a\u003e plugin — but my trigger finger will always itch for the \u003ccode\u003eDelete\u003c/code\u003e key on such compromises. Lea acknowledges, “If you can do something with style queries, by all means, use style queries — they are almost certainly a better solution.”\u003c/p\u003e\n\n\n\n\u003cp\u003eI have convinced myself with the experiments in this article that style queries remain a cromulent option even in Lea’s motivating examples — but I still look forward to inline conditionals. In the meantime, at least style queries are easy to understand compared to the other known workarounds. Ironically, I agree with the comments questioning the need for the inline conditionals feature, not because it will ruin CSS but because I believe we can already achieve Lea’s examples with current modern CSS and without hacks. So, we may not \u003cem\u003eneed\u003c/em\u003e inline conditionals, but they could allow us to write more readable, succinct code. Let me know in the comment section if you can think of examples where we would hit a brick wall of complexity using style queries instead of inline conditionals.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-02-17T07:24:40-07:00",
  "modifiedTime": "2025-02-17T07:24:42-07:00"
}
