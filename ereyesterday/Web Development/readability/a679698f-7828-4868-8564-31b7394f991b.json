{
  "id": "a679698f-7828-4868-8564-31b7394f991b",
  "title": "Web-Slinger.css: Across the Swiper-Verse",
  "link": "https://css-tricks.com/web-slinger-css-across-the-swiper-verse/",
  "description": "Lee Meyer with a super clever idea using scroll-driven animations as an interaction to \"like\" or \"dislike\" something. Web-Slinger.css: Across the Swiper-Verse originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Lee Meyer",
  "published": "Wed, 15 Jan 2025 15:03:25 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "Scroll Driven Animation"
  ],
  "byline": "Lee Meyer",
  "length": 8719,
  "excerpt": "Lee Meyer with a super clever idea using scroll-driven animations as an interaction to \"like\" or \"dislike\" something.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "My previous article warned that horizontal motion on Tinder has irreversible consequences. I’ll save venting on that topic for a different blog, but at first glance, swipe-based navigation seems like it could be a job for Web-Slinger.css, your friendly neighborhood experimental pure CSS Wow.js replacement for one-way scroll-triggered animations. I haven’t managed to fit that description into a theme song yet, but I’m working on it. In the meantime, can Web-Slinger.css swing a pure CSS Tinder-style swiping interaction to indicate liking or disliking an element? More importantly, will this experiment give me an excuse to use an image of Spider Pig, in response to popular demand in the bustling comments section of my previous article? Behold the Spider Pig swiper, which I propose as a replacement for captchas because every human with a pulse loves Spider Pig. With that unbiased statement in mind, swipe left or right below (only Chrome and Edge for now) to reveal a counter showing how many people share your stance on Spider Pig. Broaden your horizons The crackpot who invented Web-Slinger.css seems not to have considered horizontal scrolling, but we can patch that maniac’s monstrous creation like so: [class^=\"scroll-trigger-\"] { view-timeline-axis: x; } This overrides the default behavior for marker elements with class names using the Web-Slinger convention of scroll-trigger-n, which activates one-way, scroll-triggered animations. By setting the timeline axis to x, the scroll triggers only run when they are revealed by scrolling horizontally rather than vertically (which is the default). Otherwise, the triggers would run straightaway because although they are out of view due to the container’s width, they will all be above the fold vertically when we implement our swiper. My steps in laying the foundation for the above demo were to fork this awesome JavaScript demo of Tinder-style swiping by Nikolay Talanov, strip out the JavaScript and all the cards except for one, then import Web-Slinger.css and introduce the horizontal patch explained above. Next, I changed the card’s container to position: fixed, and introduced three scroll-snapping boxes side-by-side, each the height and width of the viewport. I set the middle slide to scroll-align: center so that the user starts in the middle of the page and has the option to scroll backwards or forwards. Sidenote: When unconventionally using scroll-driven animations like this, a good mindset is that the scrollable element needn’t be responsible for conventionally scrolling anything visible on the page. This approach is reminiscent of how the first thing you do when using checkbox hacks is hide the checkbox and make the label look like something else. We leverage the CSS-driven behaviors of a scrollable element, but we don’t need the default UI behavior. I put a div marked with scroll-trigger-1 on the third slide and used it to activate a rejection animation on the card like this: \u003cdiv class=\"demo__card on-scroll-trigger-1 reject\"\u003e \u003c!-- HTML for the card --\u003e \u003c/div\u003e \u003cmain\u003e \u003cdiv class=\"slide\"\u003e \u003c/div\u003e \u003cdiv id=\"middle\" class=\"slide\"\u003e \u003c/div\u003e \u003cdiv class=\"slide\"\u003e \u003cdiv class=\"scroll-trigger-1\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/main\u003e It worked the way I expected! I knew this would be easy! (Narrator: it isn’t, you’ll see why next.) \u003cdiv class=\"on-scroll-trigger-2 accept\"\u003e \u003cdiv class=\"demo__card on-scroll-trigger-2 reject\"\u003e \u003c!-- HTML for the card --\u003e \u003c/div\u003e \u003c/div\u003e \u003cmain\u003e \u003cdiv class=\"slide\"\u003e \u003cdiv class=\"scroll-trigger-2\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv id=\"middle\" class=\"slide\"\u003e \u003c/div\u003e \u003cdiv class=\"slide\"\u003e \u003cdiv class=\"scroll-trigger-1\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/main\u003e After adding this, Spider Pig is automatically ”liked” when the page loads. That would be appropriate for a card that shows a person like myself who everybody automatically likes — after all, a middle-aged guy who spends his days and nights hacking CSS is quite a catch. By contrast, it is possible Spider Pig isn’t everyone’s cup of tea. So, let’s understand why the swipe right implementation would behave differently than the swipe left implementation when we thought we applied the same principles to both implementations. Take a step back This bug drove home to me what view-timeline does and doesn’t do. The lunatic creator of Web-Slinger.css relied on tech that wasn’t made for animations which run only when the user scrolls backwards. This visualizer shows that no matter what options you choose for animation-range, the subject wants to complete its animation after it has crossed the viewport in the scrolling direction — which is exactly what we do not want to happen in this particular case. Fortunately, our friendly neighborhood Bramus from the Chrome Developer Team has a cool demo showing how to detect scroll direction in CSS. Using the clever --scroll-direction CSS custom property Bramus made, we can ensure Spider Pig animates at the right time rather than on load. The trick is to control the appearance of .scroll-trigger-2 using a style query like this: :root { animation: adjust-slide-index 3s steps(3, end), adjust-pos 1s; animation-timeline: scroll(root x); } @property --slide-index { syntax: \"\u003cnumber\u003e\"; inherits: true; initial-value: 0; } @keyframes adjust-slide-index { to { --slide-index: 3; } } .scroll-trigger-2 { display: none; } @container style(--scroll-direction: -1) and style(--slide-index: 0) { .scroll-trigger-2 { display: block; } } That style query means that the marker with the .scroll-trigger-2 class will not be rendered until we are on the previous slide and reach it by scrolling backward. Notice that we also introduced another variable named --slide-index, which is controlled by a three-second scroll-driven animation with three steps. It counts the slide we are on, and it is used because we want the user to swipe decisively to activate the dislike animation. We don’t want just any slight breeze to trigger a dislike. When the swipe has been concluded, one more like (I’m superhuman) As mentioned at the outset, measuring how many CSS-Tricks readers dislike Spider Pig versus how many have a soul is important. To capture this crucial stat, I’m using a third-party counter image as a background for the card underneath the Spider Pig card. It is third-party, but hopefully, it will always work because the website looks like it has survived since the dawn of the internet. I shouldn’t complain because the price is right. I chose the least 1990s-looking counter and used it like this: @container style(--scroll-trigger-1: 1) { .result { background-image: url('https://counter6.optistats.ovh/private/freecounterstat.php?c=qbgw71kxx1stgsf5shmwrb2aflk5wecz'); background-repeat: no-repeat; background-attachment: fixed; background-position: center; } .counter-description::after { content: 'who like spider pig'; } .scroll-trigger-2 { display: none; } } @container style(--scroll-trigger-2: 1) { .result { background-image: url('https://counter6.optistats.ovh/private/freecounterstat.php?c=abtwsn99snah6wq42nhnsmbp6pxbrwtj'); background-repeat: no-repeat; background-attachment: fixed; background-position: center; } .counter-description::after { content: 'who dislike spider pig'; } .scroll-trigger-1 { display: none; } } Scrolls of wisdom: Lessons learned This hack turned out more complex than I expected, mostly because of the complexity of using scroll-triggered animations that only run when you meet an element by scrolling backward which goes against assumptions made by the current API. That’s a good thing to know and understand. Still, it’s amazing how much power is hidden in the current spec. We can style things based on extremely specific scrolling behaviors if we believe in ourselves. The current API had to be hacked to unlock that power, but I wish we could do something like: [class^=\"scroll-trigger-\"] { view-timeline-axis: x; view-timeline-direction: backwards; /* \u003c-- this is speculative. do not use! */ } With an API like that allowing the swipe-right scroll trigger to behave the way I originally imagined, the Spider Pig swiper would not require hacking. I dream of wider browser support for scroll-driven animations. But I hope to see the spec evolve to give us more flexibility to encourage designers to build nonlinear storytelling into the experiences they create. If not, once animation timelines land in more browsers, it might be time to make Web-Slinger.css more complete and production-ready, to make the more advanced scrolling use cases accessible to the average CSS user.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383533",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eMy \u003ca href=\"https://css-tricks.com/web-slinger-css-like-wow-js-but-with-css-y-scroll-animations/\"\u003eprevious article\u003c/a\u003e warned that horizontal motion on Tinder has irreversible consequences. I’ll save venting on that topic for a different blog, but at first glance, swipe-based navigation seems like it could be a job for \u003ca href=\"https://codepen.io/leemeyer/pen/WNVdoNV\" rel=\"noopener\"\u003eWeb-Slinger.css\u003c/a\u003e, your friendly neighborhood experimental pure CSS \u003ca href=\"https://wowjs.uk/\" rel=\"noopener\"\u003eWow.js\u003c/a\u003e replacement for one-way scroll-triggered animations. I haven’t managed to fit that description into a theme song yet, but I’m working on it.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the meantime, can Web-Slinger.css swing a pure CSS Tinder-style swiping interaction to indicate liking or disliking an element? More importantly, will this experiment give me an excuse to use an image of \u003ca href=\"https://simpsons.fandom.com/wiki/Spider-Pig_(song\" rel=\"noopener\"\u003eSpider Pig\u003c/a\u003e, in response to popular demand in the bustling comments section of my previous article? Behold the Spider Pig swiper, which I propose as a replacement for captchas because every human with a pulse loves Spider Pig. With that unbiased statement in mind, swipe left or right below (only Chrome and Edge for now) to reveal a counter showing how many people share your stance on Spider Pig.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"broaden-your-horizons\"\u003eBroaden your horizons\u003c/h3\u003e\n\n\n\u003cp\u003eThe crackpot who invented Web-Slinger.css seems not to have considered horizontal scrolling, but we can patch that maniac’s monstrous creation like so:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[class^=\u0026#34;scroll-trigger-\u0026#34;] {\n  view-timeline-axis: x;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis overrides the default behavior for marker elements with class names using the Web-Slinger convention of \u003ccode\u003escroll-trigger-n\u003c/code\u003e, which activates one-way, scroll-triggered animations. By setting the timeline axis to \u003ccode\u003ex\u003c/code\u003e, the scroll triggers only run when they are revealed by scrolling horizontally rather than vertically (which is the default). Otherwise, the triggers would run straightaway because although they are out of view due to the container’s width, they will all be above the fold vertically when we implement our swiper.\u003c/p\u003e\n\n\n\n\u003cp\u003eMy steps in laying the foundation for the above demo were to \u003ca href=\"https://codepen.io/suez/pen/MaeVBy/\" rel=\"noopener\"\u003efork this awesome JavaScript demo of Tinder-style swiping by Nikolay Talanov\u003c/a\u003e, strip out the JavaScript and all the cards except for one, then import Web-Slinger.css and introduce the horizontal patch explained above. Next, I changed the card’s container to \u003ccode\u003eposition: fixed\u003c/code\u003e, and introduced three \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type\" rel=\"noopener\"\u003escroll-snapping\u003c/a\u003e boxes side-by-side, each the height and width of the viewport. I set the middle slide to \u003ccode\u003escroll-align: center\u003c/code\u003e so that the user starts in the middle of the page and has the option to scroll backwards or forwards.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSidenote:\u003c/strong\u003e When unconventionally using scroll-driven animations like this, a good mindset is that the scrollable element needn’t be responsible for conventionally scrolling anything visible on the page. This approach is reminiscent of how the first thing you do when using \u003ca href=\"https://css-tricks.com/the-checkbox-hack/\"\u003echeckbox hacks\u003c/a\u003e is hide the checkbox and make the label look like something else. We leverage the CSS-driven behaviors of a scrollable element, but we don’t need the default UI behavior.\u003c/p\u003e\n\n\n\n\u003cp\u003eI put a \u003ccode\u003ediv\u003c/code\u003e marked with \u003ccode\u003escroll-trigger-1\u003c/code\u003e on the third slide and used it to activate a rejection animation on the card like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;demo__card on-scroll-trigger-1 reject\u0026#34;\u0026gt;\n  \u0026lt;!-- HTML for the card --\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;main\u0026gt;\n  \u0026lt;div class=\u0026#34;slide\u0026#34;\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;div id=\u0026#34;middle\u0026#34; class=\u0026#34;slide\u0026#34;\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;slide\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;scroll-trigger-1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/main\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt worked the way I expected! I knew this would be easy! (Narrator: it isn’t, you’ll see why next.)\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;on-scroll-trigger-2 accept\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;demo__card on-scroll-trigger-2 reject\u0026#34;\u0026gt;\n  \u0026lt;!-- HTML for the card --\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;main\u0026gt;\n  \u0026lt;div class=\u0026#34;slide\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;scroll-trigger-2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;div id=\u0026#34;middle\u0026#34; class=\u0026#34;slide\u0026#34;\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;slide\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;scroll-trigger-1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/main\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAfter adding this, Spider Pig is automatically ”liked” when the page loads. That would be appropriate for a card that shows a person like myself who everybody automatically likes — after all, a middle-aged guy who spends his days and nights hacking CSS is quite a catch. By contrast, it is possible Spider Pig isn’t everyone’s cup of tea. So, let’s understand why the swipe right implementation would behave differently than the swipe left implementation when we thought we applied the same principles to both implementations.\u003c/p\u003e\n\n\n\u003ch3 id=\"take-a-step-back\"\u003eTake a step back\u003c/h3\u003e\n\n\n\u003cp\u003eThis bug drove home to me what \u003ccode\u003eview-timeline\u003c/code\u003e does and doesn’t do. The lunatic creator of Web-Slinger.css relied on tech that wasn’t made for animations which run only when the user scrolls \u003cem\u003ebackwards\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis \u003ca href=\"https://scroll-driven-animations.style/tools/view-timeline/ranges/\" rel=\"noopener\"\u003evisualizer\u003c/a\u003e shows that no matter what options you choose for \u003ccode\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-range\" rel=\"noopener\"\u003eanimation-range\u003c/a\u003e\u003c/code\u003e, the subject wants to complete its animation after it has crossed the viewport in the scrolling direction — which is exactly what we do \u003cem\u003enot\u003c/em\u003e want to happen in this particular case.\u003c/p\u003e\n\n\n\n\u003cp\u003eFortunately, our friendly neighborhood \u003ca href=\"https://www.bram.us\" rel=\"noopener\"\u003eBramus\u003c/a\u003e from the Chrome Developer Team \u003ca href=\"https://www.bram.us/2023/10/23/css-scroll-detection/\" rel=\"noopener\"\u003ehas a cool demo showing how to detect scroll direction in CSS\u003c/a\u003e. Using the clever \u003ccode\u003e--scroll-direction\u003c/code\u003e CSS \u003ca href=\"https://css-tricks.com/using-property-for-css-custom-properties/\"\u003ecustom property\u003c/a\u003e Bramus made, we can ensure Spider Pig animates at the right time rather than on load. The trick is to control the appearance of \u003ccode\u003e.scroll-trigger-2\u003c/code\u003e using a \u003ca href=\"https://css-tricks.com/digging-deeper-into-container-style-queries/\"\u003estyle query\u003c/a\u003e like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"20,21,22,23,24\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  animation: adjust-slide-index 3s steps(3, end), adjust-pos 1s;\n  animation-timeline: scroll(root x);\n}\n@property --slide-index {\n  syntax: \u0026#34;\u0026lt;number\u0026gt;\u0026#34;;\n  inherits: true;\n  initial-value: 0;\n}\n\n@keyframes adjust-slide-index {\n  to {\n    --slide-index: 3;\n  }\n}\n\n.scroll-trigger-2  {\n  display: none;\n}\n\n@container style(--scroll-direction: -1) and style(--slide-index: 0) {\n  .scroll-trigger-2 {\n    display: block;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat style query means that the marker with the \u003ccode\u003e.scroll-trigger-2\u003c/code\u003e class will not be rendered until we are on the previous slide \u003cstrong\u003eand\u003c/strong\u003e reach it by scrolling backward. Notice that we also introduced another variable named \u003ccode\u003e--slide-index\u003c/code\u003e, which is controlled by a three-second scroll-driven animation with three steps. It counts the slide we are on, and it is used because we want the user to swipe decisively to activate the dislike animation. We don’t want just any slight breeze to trigger a dislike.\u003c/p\u003e\n\n\n\u003ch3 id=\"when-the-swipe-has-been-concluded-one-more-like-i-m-superhuman-\"\u003eWhen the swipe has been concluded, one more like (I’m superhuman)\u003c/h3\u003e\n\n\n\u003cp\u003eAs mentioned at the outset, measuring how many CSS-Tricks readers dislike Spider Pig versus how many have a soul is important. To capture this crucial stat, I’m using a \u003ca href=\"https://www.freecounterstat.com/extensions-browser.php?referer=step_3\" rel=\"noopener\"\u003ethird-party counter image\u003c/a\u003e as a background for the card underneath the Spider Pig card. It is third-party, but hopefully, it will always work because the website looks like it has survived since the dawn of the internet. I shouldn’t complain because the price is right. I chose the least 1990s-looking counter and used it like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@container style(--scroll-trigger-1: 1) {\n  .result {\n    background-image: url(\u0026#39;https://counter6.optistats.ovh/private/freecounterstat.php?c=qbgw71kxx1stgsf5shmwrb2aflk5wecz\u0026#39;);\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: center;\n  }\n\n  .counter-description::after {\n    content: \u0026#39;who like spider pig\u0026#39;;\n  }\n\n  .scroll-trigger-2 {\n    display: none;\n  }\n}\n\n@container style(--scroll-trigger-2: 1) {\n  .result {\n    background-image: url(\u0026#39;https://counter6.optistats.ovh/private/freecounterstat.php?c=abtwsn99snah6wq42nhnsmbp6pxbrwtj\u0026#39;);\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: center;\n  }\n\n  .counter-description::after {\n    content: \u0026#39;who dislike spider pig\u0026#39;;\n  }\n\n  .scroll-trigger-1 {\n    display: none;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"scrolls-of-wisdom-lessons-learned\"\u003eScrolls of wisdom: Lessons learned\u003c/h3\u003e\n\n\n\u003cp\u003eThis hack turned out more complex than I expected, mostly because of the complexity of using scroll-triggered animations that only run when you meet an element by scrolling backward which goes against assumptions made by the current API. That’s a good thing to know and understand. Still, it’s amazing how much power is hidden in the current spec. We can style things based on extremely specific scrolling behaviors if we believe in ourselves. The current API had to be hacked to unlock that power, but I wish we could do something like:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[class^=\u0026#34;scroll-trigger-\u0026#34;] {\n  view-timeline-axis: x;\n  view-timeline-direction: backwards; /* \u0026lt;-- this is speculative. do not use! */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith an API like that allowing the swipe-right scroll trigger to behave the way I originally imagined, the Spider Pig swiper would not require hacking.\u003c/p\u003e\n\n\n\n\u003cp\u003eI dream of wider browser support for scroll-driven animations. But I hope to see the spec evolve to give us more flexibility to encourage designers to build nonlinear storytelling into the experiences they create. If not, once animation timelines land in more browsers, it might be time to make Web-Slinger.css more complete and production-ready, to make the more advanced scrolling use cases accessible to the average CSS user.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-01-15T08:03:25-07:00",
  "modifiedTime": "2025-01-15T08:03:58-07:00"
}
