{
  "id": "24f65a91-bce8-46af-8ab5-e0aa96988cb8",
  "title": "Insights sidebar in the DevTools Performance panel",
  "link": "https://developer.chrome.com/blog/devtools-insights-sidebar?hl=en",
  "description": "Learn about the new performance insights, the power of Lighthouse directly in the DevTools Performance panel.",
  "author": "",
  "published": "Wed, 02 Apr 2025 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 8953,
  "excerpt": "Learn about the new performance insights, the power of Lighthouse directly in the DevTools Performance panel.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/vd31e3ed8994e05c7f2cd0cf68a402ca7902bb92b6ec0977d7ef2a1c699fae3f9/chrome/images/favicon.png",
  "text": "Published: April 02, 2025 The Performance panel in Chrome DevTools is incredibly powerful, containing data for almost any possible problem in your site's runtime behavior. That wealth of data can be overwhelming, though: it can be difficult for many developers to know where to start, and even experts can have trouble isolating a particular issue within a complex page load. Tools like Lighthouse were developed to address this, analyzing performance traces and reporting a concise list of potential issues and how you might address them. But this has a tradeoff as well: disconnected from the details, it can be difficult to see when in the timeline that issues occur relative to each other. And, if you want to understand the context within the full trace, you have to start from scratch in the Performance panel. The new Insights sidebar is bridging the gap by bringing Lighthouse insights directly into the Performance panel. Recommendations are now right in the panel when looking at a trace, but, more importantly, the integration allows insights to highlight events and overlay explanations directly in the performance timeline. Hover over an insight to zoom in and highlight the relevant parts of the trace, visualize critical paths, or flag performance bottlenecks within their full context. The DevTools Performance panel with the Insights sidebar on the left You may have already noticed the new sidebar, which was added in Chrome 131 with some initial insights and has gained more insights in each new Chrome release since. To see it, hit Record in the Performance panel, load a URL or interact with a page, and then stop the recording. The sidebar may be collapsed to the left-hand side of the Performance panel if you've closed it in the past. To reveal it, click the button, and there will be a list of insights to serve as entry points to investigating performance issues. Similar to a Lighthouse report, the sidebar will list a set of insights for the recording you just took, identifying performance or UX issues, or providing data to help you filter and diagnose issues yourself. At the bottom is a collapsed Passed insights section, which has insights that weren't identified as problematic for this recording, whether because a particular performance issue didn't occur, or the insight just wasn't applicable at all (for example, if you took a trace of interactions with the page and didn't navigate). Screen recording of navigating the Insights sidebar Finally, if the trace you recorded includes navigations to multiple pages, each page will get its own set of insights that you can flip through to investigate each navigation separately. Click the icon next to the URL and the timeline view will zoom into the part of the trace which occurred while on that page. Insights for page load A fast page load is essential for a good user experience, and Largest Contentful Paint (LCP) is the Core Web Vital focused on measuring page load. The Insights sidebar offers dedicated insights for improving LCP, as well as insights for aspects of page load beyond LCP. LCP insights For understanding and improving LCP, a good place to start is with LCP phases, an approach to breaking down the time to LCP into four subparts and addressing them separately. Click LCP by phase in the Insights tab on the left, and the breakdown of time spent in each subpart is shown in the Insights tab. Hovering or clicking on each subpart in the Insights tab will highlight or zoom into each subpart in the performance timeline, to investigate events within that period. If you have Field data enabled and image LCP load data is available for your site, the 75th percentile values for the subparts will also be included in the insight. Screen recording of the LCP by phase insight LCP request discovery will suggest improvements in how to load the LCP resource, one of the most common issues affecting LCP across the web. It overlays the timeline with annotations that mark when the image could have been loaded, and the estimated loading time that could have been saved. Screenshot of the LCP request discovery insight Further insights help identify issues within LCP subparts. Document request latency highlights potential optimizations in the navigation request to the server. Render blocking requests points out requests that will block the initial render of the page until they are complete, even if content (like LCP) is ready to be displayed. Page load insights beyond LCP Additional insights help identify potential issues impacting overall page load performance beyond LCP. One of the biggest challenges is the performance of third party resources. Often they're necessary for business reasons, but web developers have little direct control over their performance. The 3rd parties insight categorizes resources and CPU activity by first and third-party entities, showing which entities consumed the most time and resources. Hovering over each entity will highlight their activity within the performance and network timelines. This insight works in tandem with the \"Dim 3rd parties\" checkbox and the new 1st/3rd party entries in the Summary tab. Screenshot of the 3rd parties insight Font display will list fonts that could have used font-display: swap or optional to not prevent text from being shown during font loads. Screenshot of the Font display insight Network dependency tree identifies long chains of dependencies within your page load, where resource A loads resource B loads resource C, and C is important for the look or functionality of the page. Each dependent request can add significant latency to loading the full chain, especially for users on worse connections. Screenshot of the Network dependency tree insight And finally, for image resources, Improve image delivery identifies images that could be significantly optimized, potentially wasting significant download time fetching unnecessary extra bytes. Screenshot of the Improve image delivery insight Insights for responsiveness Interaction to Next Paint (INP) can be broken down into subparts, similar to LCP. The INP by phase insight will add overlays to the performance timeline to highlight these subparts, helping you see their direct relation to main thread activity. Screenshot of the INP by phase insight Interactions that update the page often spend significant time recalculating styles and layout. One of the best predictors for how long style and layout will take is the size of the DOM, both in the total number of nodes and the depth of the tree. Optimize DOM size reports the page's DOM size, and highlights events that were likely made worse by the large DOM size. Screenshot of the Optimize DOM size insight Forced reflow alerts on a common threat to responsiveness: interleaved reads and writes to the DOM that require the browser to do layout, for example adding new elements to the DOM then calling a DOM function that reads the size of some element on screen. Even if you know that two parts of the DOM don't affect each other's layout, without explicit content containment, the browser may still be forced to re-layout the full page due to unknown dependencies between the two. Screenshot of the Forced reflow insight Most pages on the web now set an explicit mobile viewport, but if they don't, they risk spending hundreds of extra milliseconds on every click while the browser waits for possible additional input. The Optimize viewport for mobile insight alerts when the viewport isn't set correctly. Screenshot of the Optimize viewport for mobile insight Finally, if the Enable CSS Selector stats (slow) option is selected, the CSS selector costs insight will appear, providing an overview of style recalculation performance. Note that the Enable CSS selector stats (slow) option that needs to be enabled for this insight will slow down page performance significantly. Insights for layout stability Cumulative Layout Shift (CLS) gets its own Layout shifts track within the timeline, showing individual shifts grouped into windows (clusters) of up to five seconds, which are used to calculate the CLS score. The Layout shift culprits insight highlights the worst CLS cluster, and lists the individual layout shifts within it. Hovering over each shift in the list or the track will show a screenshot of the page, visualizing the shift with an animated overlay. Screen recording of the Layout shift culprits insight Conclusion Insights aim to bring the power of Lighthouse into the full context of the Performance panel, making traces easier to understand and making insights connected to the data they come from. We are actively improving the current insights and more are on the way. Try out the Insights sidebar and let us know all the ways they could be improved or what other insights you'd love to see.",
  "image": "https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/hero.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Brendan Kenny\" src=\"https://web.dev/images/authors/bckenny.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: April 02, 2025\n\u003c/p\u003e\n\n\n\n\n\u003cp\u003eThe \u003cstrong\u003ePerformance\u003c/strong\u003e panel in Chrome DevTools is incredibly powerful, containing data for almost any possible problem in your site\u0026#39;s runtime behavior. That wealth of data can be overwhelming, though: it can be difficult for many developers to know where to start, and even experts can have trouble isolating a particular issue within a complex page load.\u003c/p\u003e\n\n\u003cp\u003eTools like Lighthouse were developed to address this, analyzing performance traces and reporting a concise list of potential issues and how you might address them. But this has a tradeoff as well: disconnected from the details, it can be difficult to see when in the timeline that issues occur relative to each other. And, if you want to understand the context within the full trace, you have to start from scratch in the Performance panel.\u003c/p\u003e\n\n\u003cp\u003eThe new \u003cstrong\u003eInsights\u003c/strong\u003e sidebar is bridging the gap by bringing Lighthouse insights directly into the \u003cstrong\u003ePerformance\u003c/strong\u003e panel. Recommendations are now right in the panel when looking at a trace, but, more importantly, the integration allows insights to highlight events and overlay explanations directly in the performance timeline. Hover over an insight to zoom in and highlight the relevant parts of the trace, visualize critical paths, or flag performance bottlenecks within their full context.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/overview.png\" alt=\"The DevTools Performance panel with the Insights sidebar on the left, showing a list of insights for the trace\" width=\"850\" height=\"850\"/\u003e\n  \u003cfigcaption\u003eThe DevTools Performance panel with the Insights sidebar on the left\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou may have already noticed the new sidebar, which was added in Chrome 131 with some initial insights and has gained more insights in each new Chrome release since.\u003c/p\u003e\n\n\u003cp\u003eTo see it, hit  \u003cstrong\u003eRecord\u003c/strong\u003e in the Performance panel, load a URL or interact with a page, and then stop the recording. The sidebar may be collapsed to the left-hand side of the Performance panel if you\u0026#39;ve closed it in the past. To reveal it, click the  button, and there will be a list of insights to serve as entry points to investigating performance issues.\u003c/p\u003e\n\n\u003cp\u003eSimilar to a Lighthouse report, the sidebar will list a set of insights for the recording you just took, identifying performance or UX issues, or providing data to help you filter and diagnose issues yourself. At the bottom is a collapsed \u003cstrong\u003ePassed insights\u003c/strong\u003e section, which has insights that weren\u0026#39;t identified as problematic for this recording, whether because a particular performance issue didn\u0026#39;t occur, or the insight just wasn\u0026#39;t applicable at all (for example, if you took a trace of interactions with the page and didn\u0026#39;t navigate).\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" controls=\"\" width=\"820\" height=\"800\"\u003e\u003csource src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/sidebar-nav.mp4\" type=\"video/mp4\"/\u003e\u003c/video\u003e\n  \u003cfigcaption\u003eScreen recording of navigating the Insights sidebar\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eFinally, if the trace you recorded includes navigations to multiple pages, each page will get its own set of insights that you can flip through to investigate each navigation separately. Click the  icon next to the URL and the timeline view will zoom into the part of the trace which occurred while on that page.\u003c/p\u003e\n\n\u003ch2 id=\"insights_for_page_load\" data-text=\"Insights for page load\" tabindex=\"-1\"\u003eInsights for page load\u003c/h2\u003e\n\n\u003cp\u003eA fast page load is essential for a good user experience, and \u003ca href=\"https://web.dev/articles/lcp\"\u003eLargest Contentful Paint (LCP)\u003c/a\u003e is the Core Web Vital focused on measuring page load. The Insights sidebar offers dedicated insights for improving LCP, as well as insights for aspects of page load beyond LCP.\u003c/p\u003e\n\n\u003ch3 id=\"lcp_insights\" data-text=\"LCP insights\" tabindex=\"-1\"\u003eLCP insights\u003c/h3\u003e\n\n\u003cp\u003eFor understanding and improving LCP, a good place to start is with LCP phases, an \u003ca href=\"https://web.dev/articles/optimize-lcp#lcp-breakdown\"\u003eapproach to breaking down the time to LCP into four subparts and addressing them separately\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eClick \u003cstrong\u003eLCP by phase\u003c/strong\u003e in the Insights tab on the left, and the breakdown of time spent in each subpart is shown in the Insights tab. Hovering or clicking on each subpart in the Insights tab will highlight or zoom into each subpart in the performance timeline, to investigate events within that period. If you have \u003ca href=\"https://developer.chrome.com/docs/devtools/performance/overview#compare\"\u003eField data enabled\u003c/a\u003e and \u003ca href=\"https://developer.chrome.com/blog/crux-2025-02#lcp_image_subparts\"\u003eimage LCP load data is available for your site\u003c/a\u003e, the 75th percentile values for the subparts will also be included in the insight.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" controls=\"\" width=\"800\" height=\"720\"\u003e\u003csource src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/lcp-phases.mp4\" type=\"video/mp4\"/\u003e\u003c/video\u003e\n  \u003cfigcaption\u003eScreen recording of the LCP by phase insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eLCP request discovery\u003c/strong\u003e will suggest improvements in how to load the LCP resource, one of the \u003ca href=\"https://web.dev/blog/common-misconceptions-lcp\"\u003emost common issues affecting LCP\u003c/a\u003e across the web. It overlays the timeline with annotations that mark when the image could have been loaded, and the estimated loading time that could have been saved.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/request-discovery.png\" alt=\"The LCP request discovery insight, with an overlay over the network request showing the 201.83 millisecond duration after the earliest request start point\" width=\"950\" height=\"834\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the LCP request discovery insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eFurther insights help identify issues within LCP subparts. \u003cstrong\u003eDocument request latency\u003c/strong\u003e highlights potential optimizations in the navigation request to the server. \u003cstrong\u003eRender blocking requests\u003c/strong\u003e points out requests that will block the initial render of the page until they are complete, even if content (like LCP) is ready to be displayed.\u003c/p\u003e\n\n\u003ch3 id=\"page_load_insights_beyond_lcp\" data-text=\"Page load insights beyond LCP\" tabindex=\"-1\"\u003ePage load insights beyond LCP\u003c/h3\u003e\n\n\u003cp\u003eAdditional insights help identify potential issues impacting overall page load performance beyond LCP.\u003c/p\u003e\n\n\u003cp\u003eOne of the biggest challenges is the performance of third party resources. Often they\u0026#39;re necessary for business reasons, but web developers have little direct control over their performance. The \u003cstrong\u003e3rd parties\u003c/strong\u003e insight categorizes resources and CPU activity by first and third-party entities, showing which entities consumed the most time and resources. Hovering over each entity will highlight their activity within the performance and network timelines. This insight works in tandem with the \u003ca href=\"https://developer.chrome.com/blog/devtools-navigate-and-filter#dim_3rd-party_scripts\"\u003e\u0026#34;Dim 3rd parties\u0026#34; checkbox and the new 1st/3rd party entries in the Summary tab\u003c/a\u003e.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/third-party.png\" alt=\"The 3rd parties insight; Google Tag Manager is selected in the insight, and all the associated entries are highlighted in the performance timeline\" width=\"951\" height=\"489\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the 3rd parties insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eFont display\u003c/strong\u003e will list fonts that could have used \u003ccode translate=\"no\" dir=\"ltr\"\u003efont-display: swap\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003eoptional\u003c/code\u003e to not prevent text from being shown during font loads.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/font-display.png\" alt=\"The Font display insight, listing the fonts loaded by the page, potential time-until-painted savings, and the font requests highlighted in the network track\" width=\"469\" height=\"454\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Font display insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eNetwork dependency tree\u003c/strong\u003e identifies long chains of dependencies within your page load, where resource A loads resource B loads resource C, and C is important for the look or functionality of the page. Each dependent request can add significant latency to loading the full chain, especially for users on worse connections.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/network-dep-tree.png\" alt=\"The Network dependency tree insight, listing chains of dependencies that were needed to load a page, along with their cost\" width=\"266\" height=\"364\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Network dependency tree insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eAnd finally, for image resources, \u003cstrong\u003eImprove image delivery\u003c/strong\u003e identifies images that could be significantly optimized, potentially wasting significant download time fetching unnecessary extra bytes.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/improve-image-delivery.png\" alt=\"The Improve image delivery insight, highlighting images that could be significantly optimized\" width=\"700\" height=\"352\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Improve image delivery insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"insights_for_responsiveness\" data-text=\"Insights for responsiveness\" tabindex=\"-1\"\u003eInsights for responsiveness\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://web.dev/articles/inp\"\u003eInteraction to Next Paint (INP)\u003c/a\u003e can be \u003ca href=\"https://web.dev/articles/optimize-inp#optimize_interactions\"\u003ebroken down into subparts\u003c/a\u003e, similar to LCP. The \u003cstrong\u003eINP by phase\u003c/strong\u003e insight will add overlays to the performance timeline to highlight these subparts, helping you see their direct relation to main thread activity.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/inp-subparts.png\" alt=\"The INP by phase insight, highlighting the subparts of INP\" width=\"947\" height=\"458\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the INP by phase insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eInteractions that update the page often spend significant time recalculating styles and layout. One of the best predictors for how long style and layout will take is the size of the DOM, both in the total number of nodes and the depth of the tree. \u003cstrong\u003eOptimize DOM size\u003c/strong\u003e reports the page\u0026#39;s DOM size, and highlights events that were likely made worse by the large DOM size.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/optimize-dom-size.png\" alt=\"The Optimize DOM size insight, with highlighted trace events that were likely made worse by the large DOM size\" width=\"571\" height=\"362\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Optimize DOM size insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eForced reflow\u003c/strong\u003e alerts on a common threat to responsiveness: interleaved reads and writes to the DOM that require the browser to do layout, for example adding new elements to the DOM then calling a DOM function that reads the size of some element on screen. Even if you know that two parts of the DOM don\u0026#39;t affect each other\u0026#39;s layout, without explicit \u003ca href=\"https://developer.mozilla.org/docs/Web/CSS/content-visibility\"\u003econtent containment\u003c/a\u003e, the browser may still be forced to re-layout the full page due to unknown dependencies between the two.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/forced-reflow.png\" alt=\"The Forced reflow insight, showing the call stack that lead to the forced reflow, and the layout trace event highlighted in the performance timeline\" width=\"579\" height=\"387\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Forced reflow insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eMost pages on the web now set an explicit \u003ca href=\"https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag\"\u003emobile viewport\u003c/a\u003e, but if they don\u0026#39;t, they \u003ca href=\"https://developer.chrome.com/blog/300ms-tap-delay-gone-away\"\u003erisk spending hundreds of extra milliseconds on every click\u003c/a\u003e while the browser waits for possible additional input. The \u003cstrong\u003eOptimize viewport for mobile\u003c/strong\u003e insight alerts when the viewport isn\u0026#39;t set correctly.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/optimize-viewport.png\" alt=\"The Optimize viewport for mobile insight when the test page does not have a mobile-optimized viewport\" width=\"322\" height=\"110\"/\u003e\n  \u003cfigcaption\u003eScreenshot of the Optimize viewport for mobile insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eFinally, if the \u003cstrong\u003eEnable CSS Selector stats (slow)\u003c/strong\u003e option is selected, the \u003cstrong\u003eCSS selector costs\u003c/strong\u003e insight will appear, providing an overview of \u003ca href=\"https://developer.chrome.com/docs/devtools/performance/selector-stats\"\u003estyle recalculation performance\u003c/a\u003e. Note that the \u003cstrong\u003eEnable CSS selector stats (slow)\u003c/strong\u003e option that needs to be enabled for this insight will slow down page performance significantly.\u003c/p\u003e\n\n\u003ch2 id=\"insights_for_layout_stability\" data-text=\"Insights for layout stability\" tabindex=\"-1\"\u003eInsights for layout stability\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://web.dev/articles/cls\"\u003eCumulative Layout Shift (CLS)\u003c/a\u003e gets its own \u003cstrong\u003eLayout shifts\u003c/strong\u003e track within the timeline, showing individual shifts \u003ca href=\"https://web.dev/articles/cls#what-is-cls\"\u003egrouped into windows (clusters) of up to five seconds\u003c/a\u003e, which are used to calculate the CLS score.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eLayout shift culprits\u003c/strong\u003e insight highlights the worst CLS cluster, and lists the individual layout shifts within it. Hovering over each shift in the list or the track will show a screenshot of the page, visualizing the shift with an animated overlay.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" controls=\"\" width=\"820\" height=\"720\"\u003e\u003csource src=\"https://developer.chrome.com/static/blog/devtools-insights-sidebar/images/layout-shifts.mp4\" type=\"video/mp4\"/\u003e\u003c/video\u003e\n  \u003cfigcaption\u003eScreen recording of the Layout shift culprits insight\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"conclusion\" data-text=\"Conclusion\" tabindex=\"-1\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eInsights aim to bring the power of Lighthouse into the full context of the \u003cstrong\u003ePerformance\u003c/strong\u003e panel, making traces easier to understand and making insights connected to the data they come from.\u003c/p\u003e\n\n\u003cp\u003eWe are actively improving the current insights and more are on the way. Try out the Insights sidebar and \u003ca href=\"https://crbug.com/371170842\"\u003elet us know\u003c/a\u003e all the ways they could be improved or what other insights you\u0026#39;d love to see.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
