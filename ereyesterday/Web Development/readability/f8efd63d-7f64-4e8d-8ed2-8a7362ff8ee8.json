{
  "id": "f8efd63d-7f64-4e8d-8ed2-8a7362ff8ee8",
  "title": "Fluid Everything Else",
  "link": "https://css-tricks.com/fluid-everything-else/",
  "description": "We can apply the concept of fluid typography to almost anything. This way we can have a layout that fluidly changes with the size of its parent container. Few users will ever see the transition, but they will all appreciate the results. Honestly, they will. Fluid Everything Else originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Richard Hubbard",
  "published": "Tue, 05 Nov 2024 20:49:40 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "responsive"
  ],
  "byline": "Richard Hubbard",
  "length": 13522,
  "excerpt": "We can apply the concept of fluid typography to almost anything. This way we can have a layout that fluidly changes with the size of its parent container. Few users will ever see the transition, but they will all appreciate the results. Honestly, they will.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! We all know how to do responsive design, right? We use media queries. Well no, we use container queries now, don’t we? Sometimes we get inventive with flexbox or autoflowing grids. If we’re feeling really adventurous we can reach for fluid typography. I’m a bit uncomfortable that responsive design is often pushed into discreet chunks, like “layout A up to this size, then layout B until there’s enough space for layout C.” It’s OK, it works and fits into a workflow where screens are designed as static layouts in PhotoFigVa (caveat, I made that up). But the process feels like a compromise to me. I’ve long believed that responsive design should be almost invisible to the user. When they visit my site on a mobile device while waiting in line for K-Pop tickets, they shouldn’t notice that it’s different from just an hour ago, sitting at the huge curved gaming monitor they persuaded their boss they needed. Consider this simple hero banner and its mobile equivalent. Sorry for the unsophisticated design. The image is AI generated, but It’s the only thing about this article that is. The meerkat and the text are all positioned and sized differently. The traditional way to pull this off is to have two layouts, selected by a media, sorry, container query. There might be some flexibility in each layout, perhaps centering the content, and a little fluid typography on the font-size, but we’re going to choose a point at which we flip the layout in and out of the stacked version. As a result, there are likely to be widths near the breakpoint where the layout looks either a little empty or a little congested. Is there another way? It turns out there is. We can apply the concept of fluid typography to almost anything. This way we can have a layout that fluidly changes with the size of its parent container. Few users will ever see the transition, but they will all appreciate the results. Honestly, they will. Let’s get this styled up For the first step, let’s style the layouts individually, a little like we would when using width queries and a breakpoint. In fact, let’s use a container query and a breakpoint together so that we can easily see what properties need to change. This is the markup for our hero, and it won’t change: \u003cdiv id=\"hero\"\u003e \u003cdiv class=\"details\"\u003e \u003ch1\u003eLookOut\u003c/h1\u003e \u003cp\u003eEagle Defense System\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e This is the relevant CSS for the wide version: #hero { container-type: inline-size; max-width: 1200px; min-width: 360px; .details { position: absolute; z-index: 2; top: 220px; left: 565px; h1 { font-size: 5rem; } p { font-size: 2.5rem; } } \u0026::before { content: ''; position: absolute; z-index: 1; top: 0; left: 0; right: 0; bottom: 0; background-image: url(../meerkat.jpg); background-origin: content-box; background-repeat: no-repeat; background-position-x: 0; background-position-y: 0; background-size: auto 589px; } } I’ve attached the background image to a ::before pseudo-element so I can use container queries on it (because containers cannot query themselves). We’ll keep this later on so that we can use inline container query (cqi) units. For now, here’s the container query that just shows the values we’re going to make fluid: @container (max-width: 800px) { #hero { .details { top: 50px; left: 20px; h1 { font-size: 3.5rem; } p { font-size: 2rem; } } \u0026::before { background-position-x: -310px; background-position-y: -25px; background-size: auto 710px; } } } You can see the code running in a live demo — it’s entirely static to show the limitations of a typical approach. Let’s get fluid Now we can take those start and end points for the size and position of both the text and background and make them fluid. The text size uses fluid typography in a way you are already familiar with. Here’s the result — I’ll explain the expressions once you’ve looked at the code. First the changes to the position and size of the text: /* Line changes * -12,27 +12,32 */ .details { /* ... lines 14-16 unchanged */ /* Evaluates to 50px for a 360px wide container, and 220px for 1200px */ top: clamp(50px, 20.238cqi - 22.857px, 220px); /* Evaluates to 20px for a 360px wide container, and 565px for 1200px */ left: clamp(20px, 64.881cqi - 213.571px, 565px); /* ... lines 20-25 unchanged */ h1 { /* Evaluates to 3.5rem for a 360px wide container, and 5rem for 1200px */ font-size: clamp(3.5rem, 2.857rem + 2.857cqi, 5rem); /* ... font-weight unchanged */ } p { /* Evaluates to 2rem for a 360px wide container, and 2.5rem for 1200px */ font-size: clamp(2rem, 1.786rem + 0.952cqi, 2.5rem); } } And here’s the background position and size for the meerkat image: /* Line changes * -50,3 +55,8 */ /* Evaluates to -310px for a 360px wide container, and 0px for 1200px */ background-position-x: clamp(-310px, 36.905cqi - 442.857px, 0px); /* Evaluates to -25px for a 360px wide container, and 0px for 1200px */ background-position-y: clamp(-25px, 2.976cqi); /* Evaluates to 710px for a 360px wide container, and 589px for 1200px */ background-size: auto clamp(589px, 761.857px - 14.405cqi, 710px); Now we can drop the container query entirely. Let’s explain those clamp() expressions. We’ll start with the expression for the top property. /* Evaluates to 50px for a 360px wide container, and 220px for 1200px */ top: clamp(50px, 20.238cqi - 22.857px, 220px); You’ll have noticed there’s a comment there. These expressions are a good example of how magic numbers are a bad thing. But we can’t avoid them here, as they are the result of solving some simultaneous equations — which CSS cannot do! The upper and lower bounds passed to clamp() are clear enough, but the expression in the middle comes from these simultaneous equations: f + 12v = 220 f + 3.6v = 50 …where f is the number of fixed-size length units (i.e., px) and v is the variable-sized unit (cqi). In the first equation, we are saying that we want the expression to evaluate to 220px when 1cqi is equal to 12px. In the second equation, we’re saying we want 50px when 1cqi is 3.6px, which solves to: f = -22.857 v = 20.238 …and this tidies up to 20.238cqi – 22.857px in a calc()-friendly expression. When the fixed unit is different, we must change the size of the variable units accordingly. So for the \u003ch1\u003e element’s font-size we have; /* Evaluates to 2rem for a 360px wide container, and 2.5rem for 1200px */ font-size: clamp(2rem, 1.786rem + 0.952cqi, 2.5rem); This is solving these equations because, at a container width of 1200px, 1cqi is the same as 0.75rem (my rems are relative to the default UA stylesheet, 16px), and at 360px wide, 1cqi is 0.225rem. f + 0.75v = 2.5 f + 0.225v = 2 This is important to note: The equations are different depending on what unit you are targeting. Honestly, this is boring math to do every time, so I made a calculator you can use. Not only does it solve the equations for you (to three decimal places to keep your CSS clean) it also provides that helpful comment to use alongside the expression so that you can see where they came from and avoid magic numbers. Feel free to use it. Yes, there are many similar calculators out there, but they concentrate on typography, and so (rightly) fixate on rem units. You could probably port the JavaScript if you’re using a CSS preprocessor. The clamp() function isn’t strictly necessary at this point. In each case, the bounds of clamp() are set to the values of when the container is either 360px or 1200px wide. Since the container itself is constrained to those limits — by setting min-width and max-width values — the clamp() expression should never invoke either bound. However, I prefer to keep clamp() there in case we ever change our minds (which we are about to do) because implicit bounds like these are difficult to spot and maintain. Avoiding injury We could consider our work finished, but we aren’t. The layout still doesn’t quite work. The text passes right over the top of the meerkat’s head. While I have been assured this causes the meerkat no harm, I don’t like the look of it. So, let’s make some changes to make the text avoid hitting the meerkat. The first is simple. We’ll move the meerkat to the left more quickly so that it gets out of the way. This is done most easily by changing the lower end of the interpolation to a wider container. We’ll set it so that the meerkat is fully left by 450px rather than down to 360px. There’s no reason the start and end points for all of our fluid expressions need to align with the same widths, so we can keep the other expressions fluid down to 360px. Using my trusty calculator, all we need to do is change the clamp() expressions for the background-position properties: /* Line changes * -55,5 +55,5 */ /* Evaluates to -310px for a 450px wide container, and 0px for 1200px */ background-position-x: clamp(-310px, 41.333cqi - 496px, 0px); /* Evaluates to -25px for a 450px wide container, and 0px for 1200px */ background-position-y: clamp(-25px, 3.333cqi - 40px, 0px); This improves things, but not totally. I don’t want to move it any quicker, so next we’ll look at the path the text takes. At the moment it moves in a straight line, like this: But can we bend it? Yes, we can. A Bend in the path One way we can do this is by defining two different interpolations for the top coordinate that places the line at different angles and then choosing the smallest one. This way, it allows the steeper line to “win” at larger container widths, and the shallower line becomes the value that wins when the container is narrower than about 780px. The result is a line with a bend that misses the meerkat. All we’re changing is the top value, but we must calculate two intermediate values first: /* Line changes * -18,2 +18,9 @@ */ /* Evaluates to 220px for a 1200px wide container, and -50px for 360px */ --top-a: calc(32.143cqi - 165.714px); /* Evaluates to 120px for a 1200px wide container, and 50px for 360px */ --top-b: calc(20px + 8.333cqi); /* By taking the max, --topA is used at lower widths, with --topB taking over when wider. We only need to apply clamp when the value is actually used */ top: clamp(50px, max(var(--top-a), var(--top-b)), 220px); For these values, rather than calculating them formally using a carefully chosen midpoint, I experimented with the endpoints until I got the result I wanted. Experimentation is just as valid as calculation as a way of getting the result you need. In this case, I started with duplicates of the interpolation in custom variables. I could have split the path into explicit sections using a container query, but that doesn’t reduce the math overhead, and using the min() function is cleaner to my eye. Besides, this article isn’t strictly about container queries, is it? Now the text moves along this path. Open up the live demo to see it in action. CSS can’t do everything As a final note on the calculations, it’s worth pointing out that there are restrictions as far as what we can and can’t do. The first, which we have already mitigated a little, is that these interpolations are linear. This means that easing in or out, or other complex behavior, is not possible. Another major restriction is that CSS can only generate length values this way, so there is no way in pure CSS to apply, for example, opacity or a rotation angle that is fluid based on the container or viewport size. Preprocessors can’t help us here either because the limitation is on the way calc() works in the browser. Both of these restrictions can be lifted if you’re prepared to rely on a little JavaScript. A few lines to observe the width of the container and set a CSS custom property that is unitless is all that’s needed. I’m going to use that to make the text follow a quadratic Bezier curve, like this: There’s too much code to list here, and too much math to explain the Bezier curve, but go take a look at it in action in this live demo. We wouldn’t even need JavaScript if expressions like calc(1vw / 1px) didn’t fail in CSS. There is no reason for them to fail since they represent a ratio between two lengths. Just as there are 2.54cm in 1in, there are 8px in 1vw when the viewport is 800px wide, so calc(1vw / 1px) should evaluate to a unitless 8 value. They do fail though, so all we can do is state our case and move on. Fluid everything doesn’t solve all layouts There will always be some layouts that need size queries, of course; some designs will simply need to snap changes at fixed breakpoints. There is no reason to avoid that if it’s right. There is also no reason to avoid mixing the two, for example, by fluidly sizing and positioning the background while using a query to snap between grid definitions for the text placement. My meerkat example is deliberately contrived to be simple for the sake of demonstration. One thing I’ll add is that I’m rather excited by the possibility of using the new Anchor Positioning API for fluid positioning. There’s the possibility of using anchor positioning to define how two elements might flow around the screen together, but that’s for another time.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382107",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWe all know how to do responsive design, right? We use \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"\u003emedia queries\u003c/a\u003e. Well no, we use \u003ca href=\"https://css-tricks.com/css-container-queries/\"\u003econtainer queries\u003c/a\u003e now, don’t we? Sometimes we get inventive with \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003eflexbox\u003c/a\u003e or \u003ca href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\"\u003eautoflowing grids\u003c/a\u003e. If we’re feeling really adventurous we can reach for \u003ca href=\"https://css-tricks.com/simplified-fluid-typography/\"\u003efluid typography\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m a bit uncomfortable that responsive design is often pushed into discreet chunks, like “layout A up to this size, then layout B until there’s enough space for layout C.” It’s OK, it works and fits into a workflow where screens are designed as static layouts in PhotoFigVa (caveat, I made that up). But the process feels like a compromise to me. I’ve long believed that responsive design should be almost invisible to the user. When they visit my site on a mobile device while waiting in line for K-Pop tickets, they shouldn’t notice that it’s different from just an hour ago, sitting at the huge curved gaming monitor they persuaded their boss they needed.\u003c/p\u003e\n\n\n\n\u003cp\u003eConsider this simple hero banner and its mobile equivalent. Sorry for the unsophisticated design. The image is AI generated, but It’s the only thing about this article that is.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"375\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=1024%2C375\u0026amp;ssl=1\" alt=\"Hero banner displaying a meerkat standing on its hind legs next to a white heading to the right. A mobile version is next to thjat with the heading above the meerkat.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=1024%2C375\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=300%2C110\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=768%2C282\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=1536%2C563\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-01.webp?resize=2048%2C751\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe meerkat and the text are all positioned and sized differently. The traditional way to pull this off is to have two layouts, selected by a \u003cdel\u003emedia\u003c/del\u003e, sorry, container query. There might be some flexibility in each layout, perhaps centering the content, and a little fluid typography on the \u003ccode\u003efont-size\u003c/code\u003e, but we’re going to choose a point at which we flip the layout in and out of the stacked version. As a result, there are likely to be widths near the breakpoint where the layout looks either a little empty or a little congested.\u003c/p\u003e\n\n\n\n\u003cp\u003eIs there another way?\u003c/p\u003e\n\n\n\n\u003cp\u003eIt turns out there \u003cem\u003eis\u003c/em\u003e. We can apply the concept of fluid typography to almost anything. This way we can have a layout that fluidly changes with the size of its parent container. Few users will ever see the transition, but they will all appreciate the results. Honestly, they will.\u003c/p\u003e\n\n\n\u003ch3 id=\"let-s-get-this-styled-up\"\u003eLet’s get this styled up\u003c/h3\u003e\n\n\n\u003cp\u003eFor the first step, let’s style the layouts individually, a little like we would when using width queries and a breakpoint. In fact, let’s use a container query and a breakpoint together so that we can easily see what properties need to change.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is the markup for our hero, and it won’t change:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div id=\u0026#34;hero\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;details\u0026#34;\u0026gt;\n    \u0026lt;h1\u0026gt;LookOut\u0026lt;/h1\u0026gt;\n    \u0026lt;p\u0026gt;Eagle Defense System\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is the relevant CSS for the wide version:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#hero {\n  container-type: inline-size;\n  max-width: 1200px;\n  min-width: 360px;\n\n  .details {\n    position: absolute;\n    z-index: 2;\n\n    top: 220px;\n    left: 565px;\n\n    h1 { font-size: 5rem; }\n\n    p { font-size: 2.5rem; }\n  }\n\n  \u0026amp;::before {\n    content: \u0026#39;\u0026#39;;\n    position: absolute;\n    z-index: 1;\n\n    top: 0; left: 0; right: 0; bottom: 0;\n\n    background-image: url(../meerkat.jpg);\n    background-origin: content-box;\n    background-repeat: no-repeat;\n\n    background-position-x: 0;\n    background-position-y: 0;\n    background-size: auto 589px;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI’ve attached the background image to a \u003ccode\u003e::before\u003c/code\u003e pseudo-element so I can use container queries on it (because containers cannot query themselves). We’ll keep this later on so that we can use \u003ca href=\"https://css-tricks.com/css-container-queries/#aa-container-length-units\"\u003einline container query (\u003ccode\u003ecqi\u003c/code\u003e) units\u003c/a\u003e. For now, here’s the container query that just shows the values we’re going to make fluid:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@container (max-width: 800px) {\n  #hero {\n    .details {\n      top: 50px;\n      left: 20px;\n\n      h1 { font-size: 3.5rem; }\n\n      p { font-size: 2rem; }\n    }\n\n    \u0026amp;::before {\n      background-position-x: -310px;\n      background-position-y: -25px;\n      background-size: auto 710px;\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can see the code running in a \u003ca href=\"http://squid-app-42tdo.ondigitalocean.app/version1-static/\" rel=\"noopener\"\u003elive demo\u003c/a\u003e — it’s entirely static to show the limitations of a typical approach.\u003c/p\u003e\n\n\n\u003ch2 id=\"let-s-get-fluid\"\u003eLet’s get fluid\u003c/h2\u003e\n\n\n\u003cp\u003eNow we can take those start and end points for the size and position of both the text and background and make them fluid. The text size uses \u003ca href=\"https://css-tricks.com/simplified-fluid-typography/\"\u003efluid typography\u003c/a\u003e in a way you are already familiar with. Here’s the result — I’ll explain the expressions once you’ve looked at the code.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst the changes to the position and size of the text:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Line changes\n * -12,27 +12,32\n */\n  \n.details {\n  /* ... lines 14-16 unchanged */\n  /* Evaluates to 50px for a 360px wide container, and 220px for 1200px */\n  top: clamp(50px, 20.238cqi - 22.857px, 220px);\n\n  /* Evaluates to 20px for a 360px wide container, and 565px for 1200px */\n  left: clamp(20px, 64.881cqi - 213.571px, 565px);\n  \n  /* ... lines 20-25 unchanged */\n  h1 {\n    /* Evaluates to 3.5rem for a 360px wide container, and 5rem for 1200px */\n    font-size: clamp(3.5rem, 2.857rem + 2.857cqi, 5rem);\n    /* ... font-weight unchanged */\n\n  }\n\n  p {\n    /* Evaluates to 2rem for a 360px wide container, and 2.5rem for 1200px */\n    font-size: clamp(2rem, 1.786rem + 0.952cqi, 2.5rem);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd here’s the background position and size for the meerkat image:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Line changes\n * -50,3 +55,8\n */\n\n/* Evaluates to -310px for a 360px wide container, and 0px for 1200px */\nbackground-position-x: clamp(-310px, 36.905cqi - 442.857px, 0px);\n/* Evaluates to -25px for a 360px wide container, and 0px for 1200px */\nbackground-position-y: clamp(-25px, 2.976cqi);\n/* Evaluates to 710px for a 360px wide container, and 589px for 1200px */\nbackground-size: auto clamp(589px, 761.857px - 14.405cqi, 710px);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we can drop the container query entirely.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s explain those \u003ccode\u003eclamp()\u003c/code\u003e expressions. We’ll start with the expression for the \u003ccode\u003etop\u003c/code\u003e property.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Evaluates to 50px for a 360px wide container, and 220px for 1200px */\ntop: clamp(50px, 20.238cqi - 22.857px, 220px);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou’ll have noticed there’s a comment there. These expressions are a good example of how \u003ca href=\"https://css-tricks.com/magic-numbers-in-css/\"\u003emagic numbers are a bad thing\u003c/a\u003e. But we can’t avoid them here, as they are the result of solving some simultaneous equations — which CSS cannot do!\u003c/p\u003e\n\n\n\n\u003cp\u003eThe upper and lower bounds passed to \u003ccode\u003eclamp()\u003c/code\u003e are clear enough, but the expression in the middle comes from these simultaneous equations:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ef + 12v = 220\nf + 3.6v = 50\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…where \u003ccode\u003ef\u003c/code\u003e is the number of fixed-size length units (i.e., \u003ccode\u003epx\u003c/code\u003e) and \u003ccode\u003ev\u003c/code\u003e is the variable-sized unit (\u003ccode\u003ecqi\u003c/code\u003e). In the first equation, we are saying that we want the expression to evaluate to \u003ccode\u003e220px\u003c/code\u003e when \u003ccode\u003e1cqi\u003c/code\u003e is equal to \u003ccode\u003e12px\u003c/code\u003e. In the second equation, we’re saying we want \u003ccode\u003e50px\u003c/code\u003e when \u003ccode\u003e1cqi\u003c/code\u003e is \u003ccode\u003e3.6px\u003c/code\u003e, which solves to:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ef = -22.857\nv = 20.238\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…and this tidies up to \u003ccode\u003e20.238cqi – 22.857px\u003c/code\u003e in a \u003ccode\u003ecalc()\u003c/code\u003e-friendly expression.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen the fixed unit is different, we must change the size of the variable units accordingly. So for the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e element’s \u003ccode\u003efont-size\u003c/code\u003e we have;\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Evaluates to 2rem for a 360px wide container, and 2.5rem for 1200px */\nfont-size: clamp(2rem, 1.786rem + 0.952cqi, 2.5rem);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is solving these equations because, at a container width of \u003ccode\u003e1200px\u003c/code\u003e, \u003ccode\u003e1cqi\u003c/code\u003e is the same as \u003ccode\u003e0.75rem\u003c/code\u003e (my rems are relative to the default UA stylesheet, \u003ccode\u003e16px\u003c/code\u003e), and at \u003ccode\u003e360px\u003c/code\u003e wide, \u003ccode\u003e1cqi\u003c/code\u003e is \u003ccode\u003e0.225rem\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ef + 0.75v = 2.5\nf + 0.225v = 2\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is important to note: The equations are different depending on what unit you are targeting.\u003c/p\u003e\n\n\n\n\u003cp\u003eHonestly, this is boring math to do every time, so \u003ca href=\"http://squid-app-42tdo.ondigitalocean.app\" rel=\"noopener\"\u003eI made a calculator you can use\u003c/a\u003e. Not only does it solve the equations for you (to three decimal places to keep your CSS clean) it also provides that helpful comment to use alongside the expression so that you can see where they came from and avoid magic numbers. Feel free to use it. Yes, there are many similar calculators out there, but they concentrate on typography, and so (rightly) fixate on \u003ccode\u003erem\u003c/code\u003e units. You could probably port the JavaScript if you’re using a CSS preprocessor.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/min-max-and-clamp-are-css-magic/\"\u003e\u003ccode\u003eclamp()\u003c/code\u003e\u003c/a\u003e function isn’t strictly necessary at this point. In each case, the bounds of \u003ccode\u003eclamp()\u003c/code\u003e are set to the values of when the container is either \u003ccode\u003e360px\u003c/code\u003e or \u003ccode\u003e1200px\u003c/code\u003e wide. Since the container itself is constrained to those limits — by setting \u003ccode\u003emin-width\u003c/code\u003e and \u003ccode\u003emax-width\u003c/code\u003e values — the \u003ccode\u003eclamp()\u003c/code\u003e expression should never invoke either bound. However, I prefer to keep \u003ccode\u003eclamp()\u003c/code\u003e there in case we ever change our minds (which we are about to do) because implicit bounds like these are difficult to spot and maintain.\u003c/p\u003e\n\n\n\u003ch2 id=\"avoiding-injury\"\u003eAvoiding injury\u003c/h2\u003e\n\n\n\u003cp\u003eWe could consider our work finished, but we aren’t. The layout still doesn’t quite work. The text passes right over the top of the meerkat’s head. While I have been assured this causes the meerkat no harm, I don’t like the look of it. So, let’s make some changes to make the text avoid hitting the meerkat.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe first is simple. We’ll move the meerkat to the left more quickly so that it gets out of the way. This is done most easily by changing the lower end of the interpolation to a wider container. We’ll set it so that the meerkat is fully left by \u003ccode\u003e450px\u003c/code\u003e rather than down to \u003ccode\u003e360px\u003c/code\u003e. There’s no reason the start and end points for all of our fluid expressions need to align with the same widths, so we can keep the other expressions fluid down to \u003ccode\u003e360px\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eUsing my trusty calculator, all we need to do is change the \u003ccode\u003eclamp()\u003c/code\u003e expressions for the \u003ccode\u003ebackground-position\u003c/code\u003e properties:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Line changes\n * -55,5 +55,5\n */\n\n/* Evaluates to -310px for a 450px wide container, and 0px for 1200px */\nbackground-position-x: clamp(-310px, 41.333cqi - 496px, 0px);\n\n/* Evaluates to -25px for a 450px wide container, and 0px for 1200px */\nbackground-position-y: clamp(-25px, 3.333cqi - 40px, 0px);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis improves things, but not totally. I don’t want to move it any quicker, so next we’ll look at the path the text takes. At the moment it moves in a straight line, like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"1000\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=1024%2C1000\u0026amp;ssl=1\" alt=\"Showing the path the heading travels as the hero banner goes from a desktop size to a tablet size to a mobile size.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=1024%2C1000\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=300%2C293\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=768%2C750\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=1536%2C1500\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-02.webp?resize=2048%2C2000\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBut can we bend it? Yes, we can.\u003c/p\u003e\n\n\n\u003ch2 id=\"a-bend-in-the-path\"\u003eA Bend in the path\u003c/h2\u003e\n\n\n\u003cp\u003eOne way we can do this is by defining two different interpolations for the \u003ccode\u003etop\u003c/code\u003e coordinate that places the line at different angles and then choosing the smallest one. This way, it allows the steeper line to “win” at larger container widths, and the shallower line becomes the value that wins when the container is narrower than about \u003ccode\u003e780px\u003c/code\u003e. The result is a line with a bend that misses the meerkat.\u003c/p\u003e\n\n\n\n\u003cp\u003eAll we’re changing is the top value, but we must calculate two intermediate values first:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Line changes\n * -18,2 +18,9 @@\n */\n\n/* Evaluates to 220px for a 1200px wide container, and -50px for 360px */\n--top-a: calc(32.143cqi - 165.714px);\n\n/* Evaluates to 120px for a 1200px wide container, and 50px for 360px */\n--top-b: calc(20px + 8.333cqi);\n\n/* By taking the max, --topA is used at lower widths, with --topB taking over when wider.\nWe only need to apply clamp when the value is actually used */\ntop: clamp(50px, max(var(--top-a), var(--top-b)), 220px);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFor these values, rather than calculating them formally using a carefully chosen midpoint, I experimented with the endpoints until I got the result I wanted. Experimentation is just as valid as calculation as a way of getting the result you need. In this case, I started with duplicates of the interpolation in custom variables. I could have split the path into explicit sections using a container query, but that doesn’t reduce the math overhead, and using the \u003ccode\u003emin()\u003c/code\u003e function is cleaner to my eye. Besides, this article isn’t strictly about container queries, is it?\u003c/p\u003e\n\n\n\n\u003cp\u003eNow the text moves along this path. Open up the \u003ca href=\"http://squid-app-42tdo.ondigitalocean.app/version4-bent-path/\" rel=\"noopener\"\u003elive demo\u003c/a\u003e to see it in action.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1000\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=1024%2C1000\u0026amp;ssl=1\" alt=\"Showing the path the heading travels as the hero banner goes from a desktop size to a tablet size to a mobile size. The path makes a sharp angle as it travels over the meerkat.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=1024%2C1000\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=300%2C293\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=768%2C750\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=1536%2C1500\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-03.webp?resize=2048%2C2000\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch2 id=\"css-can-t-do-everything\"\u003eCSS can’t do everything\u003c/h2\u003e\n\n\n\u003cp\u003eAs a final note on the calculations, it’s worth pointing out that there are restrictions as far as what we can and can’t do. The first, which we have already mitigated a little, is that these interpolations are linear. This means that easing in or out, or other complex behavior, is not possible.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnother major restriction is that CSS can only generate length values this way, so there is no way in pure CSS to apply, for example, opacity or a rotation angle that is fluid based on the container or viewport size. Preprocessors can’t help us here either because the limitation is on the way \u003ccode\u003ecalc()\u003c/code\u003e works in the browser.\u003c/p\u003e\n\n\n\n\u003cp\u003eBoth of these restrictions can be lifted if you’re prepared to rely on a little JavaScript. A few lines to observe the width of the container and set a CSS custom property that is unitless is all that’s needed. I’m going to use that to make the text follow a quadratic Bezier curve, like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2400\" height=\"2456\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=2400%2C2456\u0026amp;ssl=1\" alt=\"Showing the path the heading travels as the hero banner goes from a desktop size to a tablet size to a mobile size. The path makes a smooth curve as it travels over the meerkat.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?w=2400\u0026amp;ssl=1 2400w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=293%2C300\u0026amp;ssl=1 293w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=1001%2C1024\u0026amp;ssl=1 1001w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=768%2C786\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=1501%2C1536\u0026amp;ssl=1 1501w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/fluid-04.webp?resize=2001%2C2048\u0026amp;ssl=1 2001w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThere’s too much code to list here, and too much math to explain the Bezier curve, but go take a look at it in action in \u003ca href=\"http://squid-app-42tdo.ondigitalocean.app/version5-bezier-path/\" rel=\"noopener\"\u003ethis live demo\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe wouldn’t even need JavaScript if expressions like \u003ccode\u003ecalc(1vw / 1px)\u003c/code\u003e didn’t fail in CSS. There is no reason for them to fail since they represent a ratio between two lengths. Just as there are \u003ccode\u003e2.54cm\u003c/code\u003e in \u003ccode\u003e1in\u003c/code\u003e, there are \u003ccode\u003e8px\u003c/code\u003e in \u003ccode\u003e1vw\u003c/code\u003e when the viewport is \u003ccode\u003e800px\u003c/code\u003e wide, so \u003ccode\u003ecalc(1vw / 1px)\u003c/code\u003e should evaluate to a unitless \u003ccode\u003e8\u003c/code\u003e value.\u003c/p\u003e\n\n\n\n\u003cp\u003eThey do fail though, so all we can do is state our case and move on.\u003c/p\u003e\n\n\n\u003ch2 id=\"fluid-everything-doesn-t-solve-all-layouts\"\u003eFluid everything doesn’t solve all layouts\u003c/h2\u003e\n\n\n\u003cp\u003eThere will always be some layouts that need size queries, of course; some designs will simply need to snap changes at fixed breakpoints. There is no reason to avoid that if it’s right. There is also no reason to avoid mixing the two, for example, by fluidly sizing and positioning the background while using a query to snap between grid definitions for the text placement. My meerkat example is deliberately contrived to be simple for the sake of demonstration.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne thing I’ll add is that I’m rather excited by the possibility of using the new \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eAnchor Positioning API\u003c/a\u003e for fluid positioning. There’s the possibility of using anchor positioning to define how two elements might flow around the screen together, but that’s for another time.\u003c/p\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2024-11-05T13:49:40-07:00",
  "modifiedTime": "2024-11-05T13:50:38-07:00"
}
