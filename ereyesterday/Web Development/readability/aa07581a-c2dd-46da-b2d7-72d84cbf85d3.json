{
  "id": "aa07581a-c2dd-46da-b2d7-72d84cbf85d3",
  "title": "How to Create Multi-Step Forms With Vanilla JavaScript and CSS",
  "link": "https://css-tricks.com/how-to-create-multi-step-forms-with-vanilla-javascript-and-css/",
  "description": "When was the last time you developed a multi-step form? There’s so much to think about and so many moving pieces that need to be managed. But doing it by hand can be a good exercise and a great way to polish the basics. Fatuma Abdullaho walks you through her first multi-step form using vanilla HTML, CSS, and JavaScript. How to Create Multi-Step Forms With Vanilla JavaScript and CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Fatuma Abdullaho",
  "published": "Wed, 18 Dec 2024 15:03:22 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "forms"
  ],
  "byline": "Fatuma Abdullaho",
  "length": 24508,
  "excerpt": "When was the last time you developed a multi-step form? There’s so much to think about and so many moving pieces that need to be managed. But doing it by hand can be a good exercise and a great way to polish the basics. Fatuma Abdullaho walks you through her first multi-step form using vanilla HTML, CSS, and JavaScript.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Multi-step forms are a good choice when your form is large and has many controls. No one wants to scroll through a super-long form on a mobile device. By grouping controls on a screen-by-screen basis, we can improve the experience of filling out long, complex forms. But when was the last time you developed a multi-step form? Does that even sound fun to you? There’s so much to think about and so many moving pieces that need to be managed that I wouldn’t blame you for resorting to a form library or even some type of form widget that handles it all for you. But doing it by hand can be a good exercise and a great way to polish the basics. I’ll show you how I built my first multi-step form, and I hope you’ll not only see how approachable it can be but maybe even spot areas to make my work even better. We’ll walk through the structure together. We’ll build a job application, which I think many of us can relate to these recent days. I’ll scaffold the baseline HTML, CSS, and JavaScript first, and then we’ll look at considerations for accessibility and validation. I’ve created a GitHub repo for the final code if you want to refer to it along the way. The structure of a multi-step form Our job application form has four sections, the last of which is a summary view, where we show the user all their answers before they submit them. To achieve this, we divide the HTML into four sections, each identified with an ID, and add navigation at the bottom of the page. I’ll give you that baseline HTML in the next section. Navigating the user to move through sections means we’ll also include a visual indicator for what step they are at and how many steps are left. This indicator can be a simple dynamic text that updates according to the active step or a fancier progress bar type of indicator. We’ll do the former to keep things simple and focused on the multi-step nature of the form., The structure and basic styles We’ll focus more on the logic, but I will provide the code snippets and a link to the complete code at the end. Let’s start by creating a folder to hold our pages. Then, create an index.html file and paste the following into it: Open HTML \u003cform id=\"myForm\"\u003e \u003csection class=\"group-one\" id=\"one\"\u003e \u003cdiv class=\"form-group\"\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"name\"\u003eName \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cinput type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name\"\u003e \u003c/div\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"idNum\"\u003eID number \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cinput type=\"number\" id=\"idNum\" name=\"idNum\" placeholder=\"Enter your ID number\"\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"email\"\u003eEmail \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cinput type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\"\u003e \u003c/div\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"birthdate\"\u003eDate of Birth \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cinput type=\"date\" id=\"birthdate\" name=\"birthdate\" max=\"2006-10-01\" min=\"1924-01-01\"\u003e \u003c/div\u003e \u003c/div\u003e \u003c/section\u003e \u003csection class=\"group-two\" id=\"two\"\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"document\"\u003eUpload CV \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cinput type=\"file\" name=\"document\" id=\"document\"\u003e \u003c/div\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"department\"\u003eDepartment \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003cselect id=\"department\" name=\"department\"\u003e \u003coption value=\"\"\u003eSelect a department\u003c/option\u003e \u003coption value=\"hr\"\u003eHuman Resources\u003c/option\u003e \u003coption value=\"it\"\u003eInformation Technology\u003c/option\u003e \u003coption value=\"finance\"\u003eFinance\u003c/option\u003e \u003c/select\u003e \u003c/div\u003e \u003c/section\u003e \u003csection class=\"group-three\" id=\"three\"\u003e \u003cdiv class=\"form-control\"\u003e \u003clabel for=\"skills\"\u003eSkills (Optional)\u003c/label\u003e \u003ctextarea id=\"skills\" name=\"skills\" rows=\"4\" placeholder=\"Enter your skills\"\u003e\u003c/textarea\u003e \u003c/div\u003e \u003cdiv class=\"form-control\"\u003e \u003cinput type=\"checkbox\" name=\"terms\" id=\"terms\"\u003e \u003clabel for=\"terms\"\u003eI agree to the terms and conditions \u003cspan style=\"color: red;\"\u003e*\u003c/span\u003e\u003c/label\u003e \u003c/div\u003e \u003cbutton id=\"btn\" type=\"submit\"\u003eConfirm and Submit\u003c/button\u003e \u003c/section\u003e \u003cdiv class=\"arrows\"\u003e \u003cbutton type=\"button\" id=\"navLeft\"\u003ePrevious\u003c/button\u003e \u003cspan id=\"stepInfo\"\u003e\u003c/span\u003e \u003cbutton type=\"button\" id=\"navRight\"\u003eNext\u003c/button\u003e \u003c/div\u003e \u003c/form\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e Looking at the code, you can see three sections and the navigation group. The sections contain form inputs and no native form validation. This is to give us better control of displaying the error messages because native form validation is only triggered when you click the submit button. Next, create a styles.css file and paste this into it: Open base styles :root { --primary-color: #8c852a; --secondary-color: #858034; } body { font-family: sans-serif; line-height: 1.4; margin: 0 auto; padding: 20px; background-color: #f4f4f4; max-width: 600px; } h1 { text-align: center; } form { background: #fff; padding: 40px; border-radius: 5px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; } .form-group { display: flex; gap: 7%; } .form-group \u003e div { width: 100%; } input:not([type=\"checkbox\"]), select, textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; } .form-control { margin-bottom: 15px; } button { display: block; width: 100%; padding: 10px; color: white; background-color: var(--primary-color); border: none; border-radius: 4px; cursor: pointer; font-size: 16px; } button:hover { background-color: var(--secondary-color); } .group-two, .group-three { display: none; } .arrows { display: flex; justify-content: space-between align-items: center; margin-top: 10px; } #navLeft, #navRight { width: fit-content; } @media screen and (max-width: 600px) { .form-group { flex-direction: column; } } Open up the HTML file in the browser, and you should get something like the two-column layout in the following screenshot, complete with the current page indicator and navigation. Adding functionality with vanilla JavaScript Now, create a script.js file in the same directory as the HTML and CSS files and paste the following JavaScript into it: Open base scripts const stepInfo = document.getElementById(\"stepInfo\"); const navLeft = document.getElementById(\"navLeft\"); const navRight = document.getElementById(\"navRight\"); const form = document.getElementById(\"myForm\"); const formSteps = [\"one\", \"two\", \"three\"]; let currentStep = 0; function updateStepVisibility() { formSteps.forEach((step) =\u003e { document.getElementById(step).style.display = \"none\"; }); document.getElementById(formSteps[currentStep]).style.display = \"block\"; stepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`; navLeft.style.display = currentStep === 0 ? \"none\" : \"block\"; navRight.style.display = currentStep === formSteps.length - 1 ? \"none\" : \"block\"; } document.addEventListener(\"DOMContentLoaded\", () =\u003e { navLeft.style.display = \"none\"; updateStepVisibility(); navRight.addEventListener(\"click\", () =\u003e { if (currentStep \u003c formSteps.length - 1) { currentStep++; updateStepVisibility(); } }); navLeft.addEventListener(\"click\", () =\u003e { if (currentStep \u003e 0) { currentStep--; updateStepVisibility(); } }); }); This script defines a method that shows and hides the section depending on the formStep values that correspond to the IDs of the form sections. It updates stepInfo with the current active section of the form. This dynamic text acts as a progress indicator to the user. It then adds logic that waits for the page to load and click events to the navigation buttons to enable cycling through the different form sections. If you refresh your page, you will see that the multi-step form works as expected. Multi-step form navigation Let’s dive deeper into what the Javascript code above is doing. In the updateStepVisibility() function, we first hide all the sections to have a clean slate: formSteps.forEach((step) =\u003e { document.getElementById(step).style.display = \"none\"; }); Then, we show the currently active section: document.getElementById(formSteps[currentStep]).style.display = \"block\";` Next, we update the text that indicators progress through the form: stepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`; Finally, we hide the Previous button if we are at the first step and hide the Next button if we are at the last section: navLeft.style.display = currentStep === 0 ? \"none\" : \"block\"; navRight.style.display = currentStep === formSteps.length - 1 ? \"none\" : \"block\"; Let’s look at what happens when the page loads. We first hide the Previous button as the form loads on the first section: document.addEventListener(\"DOMContentLoaded\", () =\u003e { navLeft.style.display = \"none\"; updateStepVisibility(); Then we grab the Next button and add a click event that conditionally increments the current step count and then calls the updateStepVisibility() function, which then updates the new section to be displayed: navRight.addEventListener(\"click\", () =\u003e { if (currentStep \u003c formSteps.length - 1) { currentStep++; updateStepVisibility(); } }); Finally, we grab the Previous button and do the same thing but in reverse. Here, we are conditionally decrementing the step count and calling the updateStepVisibility(): navLeft.addEventListener(\"click\", () =\u003e { if (currentStep \u003e 0) { currentStep--; updateStepVisibility(); } }); Handling errors Have you ever spent a good 10+ minutes filling out a form only to submit it and get vague errors telling you to correct this and that? I prefer it when a form tells me right away that something’s amiss so that I can correct it before I ever get to the Submit button. That’s what we’ll do in our form. Our principle is to clearly indicate which controls have errors and give meaningful error messages. Clear errors as the user takes necessary actions. Let’s add some validation to our form. First, let’s grab the necessary input elements and add this to the existing ones: const nameInput = document.getElementById(\"name\"); const idNumInput = document.getElementById(\"idNum\"); const emailInput = document.getElementById(\"email\"); const birthdateInput = document.getElementById(\"birthdate\") const documentInput = document.getElementById(\"document\"); const departmentInput = document.getElementById(\"department\"); const termsCheckbox = document.getElementById(\"terms\"); const skillsInput = document.getElementById(\"skills\"); Then, add a function to validate the steps: Open validation script function validateStep(step) { let isValid = true; if (step === 0) { if (nameInput.value.trim() === \"\") showError(nameInput, \"Name is required\"); isValid = false; } if (idNumInput.value.trim() === \"\") { showError(idNumInput, \"ID number is required\"); isValid = false; } if (emailInput.value.trim() === \"\" || !emailInput.validity.valid) { showError(emailInput, \"A valid email is required\"); isValid = false; } if (birthdateInput.value === \"\") { showError(birthdateInput, \"Date of birth is required\"); isValid = false; } else if (step === 1) { if (!documentInput.files[0]) { showError(documentInput, \"CV is required\"); isValid = false; } if (departmentInput.value === \"\") { showError(departmentInput, \"Department selection is required\"); isValid = false; } } else if (step === 2) { if (!termsCheckbox.checked) { showError(termsCheckbox, \"You must accept the terms and conditions\"); isValid = false; } } return isValid; } Here, we check if each required input has some value and if the email input has a valid input. Then, we set the isValid boolean accordingly. We also call a showError() function, which we haven’t defined yet. Paste this code above the validateStep() function: function showError(input, message) { const formControl = input.parentElement; const errorSpan = formControl.querySelector(\".error-message\"); input.classList.add(\"error\"); errorSpan.textContent = message; } Now, add the following styles to the stylesheet: Open validation styles input:focus, select:focus, textarea:focus { outline: .5px solid var(--primary-color); } input.error, select.error, textarea.error { outline: .5px solid red; } .error-message { font-size: x-small; color: red; display: block; margin-top: 2px; } .arrows { color: var(--primary-color); font-size: 18px; font-weight: 900; } #navLeft, #navRight { display: flex; align-items: center; gap: 10px; } #stepInfo { color: var(--primary-color); } If you refresh the form, you will see that the buttons do not take you to the next section till the inputs are considered valid: Finally, we want to add real-time error handling so that the errors go away when the user starts inputting the correct information. Add this function below the validateStep() function: Open real-time validation script function setupRealtimeValidation() { nameInput.addEventListener(\"input\", () =\u003e { if (nameInput.value.trim() !== \"\") clearError(nameInput); }); idNumInput.addEventListener(\"input\", () =\u003e { if (idNumInput.value.trim() !== \"\") clearError(idNumInput); }); emailInput.addEventListener(\"input\", () =\u003e { if (emailInput.validity.valid) clearError(emailInput); }); birthdateInput.addEventListener(\"change\", () =\u003e { if (birthdateInput.value !== \"\") clearError(birthdateInput); }); documentInput.addEventListener(\"change\", () =\u003e { if (documentInput.files[0]) clearError(documentInput); }); departmentInput.addEventListener(\"change\", () =\u003e { if (departmentInput.value !== \"\") clearError(departmentInput); }); termsCheckbox.addEventListener(\"change\", () =\u003e { if (termsCheckbox.checked) clearError(termsCheckbox); }); } This function clears the errors if the input is no longer invalid by listening to input and change events then calling a function to clear the errors. Paste the clearError() function below the showError() one: function clearError(input) { const formControl = input.parentElement; const errorSpan = formControl.querySelector(\".error-message\"); input.classList.remove(\"error\"); errorSpan.textContent = \"\"; } And now the errors clear when the user types in the correct value: The multi-step form now handles errors gracefully. If you do decide to keep the errors till the end of the form, then at the very least, jump the user back to the erroring form control and show some indication of how many errors they need to fix. Handling form submission In a multi-step form, it is valuable to show the user a summary of all their answers at the end before they submit and to offer them an option to edit their answers if necessary. The person can’t see the previous steps without navigating backward, so showing a summary at the last step gives assurance and a chance to correct any mistakes. Let’s add a fourth section to the markup to hold this summary view and move the submit button within it. Paste this just below the third section in index.html: Open HTML \u003csection class=\"group-four\" id=\"four\"\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eName: \u003c/p\u003e \u003cp id=\"name-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"name-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eID Number: \u003c/p\u003e \u003cp id=\"id-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"id-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eEmail: \u003c/p\u003e \u003cp id=\"email-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"email-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eDate of Birth: \u003c/p\u003e \u003cp id=\"bd-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"bd-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eCV/Resume: \u003c/p\u003e \u003cp id=\"cv-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"cv-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eDepartment: \u003c/p\u003e \u003cp id=\"dept-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"dept-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"summary-section\"\u003e \u003cp\u003eSkills: \u003c/p\u003e \u003cp id=\"skills-val\"\u003e\u003c/p\u003e \u003cbutton type=\"button\" class=\"edit-btn\" id=\"skills-edit\"\u003e \u003cspan\u003e✎\u003c/span\u003e \u003cspan\u003eEdit\u003c/span\u003e \u003c/button\u003e \u003c/div\u003e \u003cbutton id=\"btn\" type=\"submit\"\u003eConfirm and Submit\u003c/button\u003e \u003c/section\u003e Then update the formStep in your Javascript to read: const formSteps = [\"one\", \"two\", \"three\", \"four\"]; Finally, add the following classes to styles.css: .summary-section { display: flex; align-items: center; gap: 10px; } .summary-section p:first-child { width: 30%; flex-shrink: 0; border-right: 1px solid var(--secondary-color); } .summary-section p:nth-child(2) { width: 45%; flex-shrink: 0; padding-left: 10px; } .edit-btn { width: 25%; margin-left: auto; background-color: transparent; color: var(--primary-color); border: .7px solid var(--primary-color); border-radius: 5px; padding: 5px; } .edit-btn:hover { border: 2px solid var(--primary-color); font-weight: bolder; background-color: transparent; } Now, add the following to the top of the script.js file where the other consts are: const nameVal = document.getElementById(\"name-val\"); const idVal = document.getElementById(\"id-val\"); const emailVal = document.getElementById(\"email-val\"); const bdVal = document.getElementById(\"bd-val\") const cvVal = document.getElementById(\"cv-val\"); const deptVal = document.getElementById(\"dept-val\"); const skillsVal = document.getElementById(\"skills-val\"); const editButtons = \"name-edit\": 0, \"id-edit\": 0, \"email-edit\": 0, \"bd-edit\": 0, \"cv-edit\": 1, \"dept-edit\": 1, \"skills-edit\": 2 }; Then add this function in scripts.js: function updateSummaryValues() { nameVal.textContent = nameInput.value; idVal.textContent = idNumInput.value; emailVal.textContent = emailInput.value; bdVal.textContent = birthdateInput.value; const fileName = documentInput.files[0]?.name; if (fileName) const extension = fileName.split(\".\").pop(); const baseName = fileName.split(\".\")[0]; const truncatedName = baseName.length \u003e 10 ? baseName.substring(0, 10) + \"...\" : baseName; cvVal.textContent = `${truncatedName}.${extension}`; } else { cvVal.textContent = \"No file selected\"; } deptVal.textContent = departmentInput.value; skillsVal.textContent = skillsInput.value || \"No skills submitted\"; } This dynamically inserts the input values into the summary section of the form, truncates the file names, and offers a fallback text for the input that was not required. Then update the updateStepVisibility() function to call the new function: function updateStepVisibility() { formSteps.forEach((step) =\u003e { document.getElementById(step).style.display = \"none\"; }); document.getElementById(formSteps[currentStep]).style.display = \"block\"; stepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`; if (currentStep === 3) { updateSummaryValues(); } navLeft.style.display = currentStep === 0 ? \"none\" : \"block\"; navRight.style.display = currentStep === formSteps.length - 1 ? \"none\" : \"block\"; } Finally, add this to the DOMContentLoaded event listener: Object.keys(editButtons).forEach((buttonId) =\u003e { const button = document.getElementById(buttonId); button.addEventListener(\"click\", (e) =\u003e { currentStep = editButtons[buttonId]; updateStepVisibility(); }); }); Running the form, you should see that the summary section shows all the inputted values and allows the user to edit any before submitting the information: And now, we can submit our form: form.addEventListener(\"submit\", (e) =\u003e { e.preventDefault(); if (validateStep(2)) { alert(\"Form submitted successfully!\"); form.reset(); currentFormStep = 0; updateStepVisibility(); } }); Our multi-step form now allows the user to edit and see all the information they provide before submitting it. Accessibility tips Making multi-step forms accessible starts with the basics: using semantic HTML. This is half the battle. It is closely followed by using appropriate form labels. Other ways to make forms more accessible include giving enough room to elements that must be clicked on small screens and giving meaningful descriptions to the form navigation and progress indicators. Offering feedback to the user is an important part of it; it’s not great to auto-dismiss user feedback after a certain amount of time but to allow the user to dismiss it themselves. Paying attention to contrast and font choice is important, too, as they both affect how readable your form is. Let’s make the following adjustments to the markup for more technical accessibility: Add aria-required=\"true\" to all inputs except the skills one. This lets screen readers know the fields are required without relying on native validation. Add role=\"alert\" to the error spans. This helps screen readers know to give it importance when the input is in an error state. Add role=\"status\" aria-live=\"polite\" to the .stepInfo. This will help screen readers understand that the step info keeps tabs on a state, and the aria-live being set to polite indicates that should the value change, it does not need to immediately announce it. In the script file, replace the showError() and clearError() functions with the following: function showError(input, message) { const formControl = input.parentElement; const errorSpan = formControl.querySelector(\".error-message\"); input.classList.add(\"error\"); input.setAttribute(\"aria-invalid\", \"true\"); input.setAttribute(\"aria-describedby\", errorSpan.id); errorSpan.textContent = message; } function clearError(input) { const formControl = input.parentElement; const errorSpan = formControl.querySelector(\".error-message\"); input.classList.remove(\"error\"); input.removeAttribute(\"aria-invalid\"); input.removeAttribute(\"aria-describedby\"); errorSpan.textContent = \"\"; } Here, we programmatically add and remove attributes that explicitly tie the input with its error span and show that it is in an invalid state. Finally, let’s add focus on the first input of every section; add the following code to the end of the updateStepVisibility() function: const currentStepElement = document.getElementById(formSteps[currentStep]); const firstInput = currentStepElement.querySelector( \"input, select, textarea\" ); if (firstInput) { firstInput.focus(); } And with that, the multi-step form is much more accessible. Conclusion There we go, a four-part multi-step form for a job application! As I said at the top of this article, there’s a lot to juggle — so much so that I wouldn’t fault you for looking for an out-of-the-box solution. But if you have to hand-roll a multi-step form, hopefully now you see it’s not a death sentence. There’s a happy path that gets you there, complete with navigation and validation, without turning away from good, accessible practices. And this is just how I approached it! Again, I took this on as a personal challenge to see how far I could get, and I’m pretty happy with it. But I’d love to know if you see additional opportunities to make this even more mindful of the user experience and considerate of accessibility. References Here are some relevant links I referred to when writing this article: How to Structure a Web Form (MDN) Multi-page Forms (W3C.org) Create accessible forms (A11y Project)",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382857",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eMulti-step forms are a good choice when your form is large and has many controls. No one wants to scroll through a super-long form on a mobile device. By grouping controls on a screen-by-screen basis, we can improve the experience of filling out long, complex forms.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut when was the last time you developed a multi-step form? Does that even sound fun to you? There’s so much to think about and so many moving pieces that need to be managed that I wouldn’t blame you for resorting to a form library or even some type of form widget that handles it all for you.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut doing it by hand can be a good exercise and a great way to polish the basics. I’ll show you how I built my first multi-step form, and I hope you’ll not only see how approachable it can be but maybe even spot areas to make my work even better.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ll walk through the structure together. We’ll build a job application, which I think many of us can relate to these recent days. I’ll scaffold the baseline HTML, CSS, and JavaScript first, and then we’ll look at considerations for accessibility and validation.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve created a \u003ca href=\"https://github.com/FatumaA/mulit-step-form/\" rel=\"noopener\"\u003eGitHub repo for the final code\u003c/a\u003e if you want to refer to it along the way.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"the-structure-of-a-multi-step-form\"\u003eThe structure of a multi-step form\u003c/h3\u003e\n\n\n\u003cp\u003eOur job application form has four sections, the last of which is a summary view, where we show the user all their answers before they submit them. To achieve this, we divide the HTML into four sections, each identified with an ID, and add navigation at the bottom of the page. I’ll give you that baseline HTML in the next section.\u003c/p\u003e\n\n\n\n\u003cp\u003eNavigating the user to move through sections means we’ll also include a visual indicator for what step they are at and how many steps are left. This indicator can be a simple dynamic text that updates according to the active step or a fancier progress bar type of indicator. We’ll do the former to keep things simple and focused on the multi-step nature of the form.,\u003c/p\u003e\n\n\n\u003ch3 id=\"the-structure-and-basic-styles\"\u003eThe structure and basic styles\u003c/h3\u003e\n\n\n\u003cp\u003eWe’ll focus more on the logic, but I will provide the code snippets and a link to the complete code at the end.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s start by creating a folder to hold our pages. Then, create an \u003ccode\u003eindex.html\u003c/code\u003e file and paste the following into it:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open HTML      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;form id=\u0026#34;myForm\u0026#34;\u0026gt;\n  \u0026lt;section class=\u0026#34;group-one\u0026#34; id=\u0026#34;one\u0026#34;\u0026gt;\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n        \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n        \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Enter your name\u0026#34;\u0026gt;\n      \u0026lt;/div\u0026gt;\n\n      \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n        \u0026lt;label for=\u0026#34;idNum\u0026#34;\u0026gt;ID number \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n        \u0026lt;input type=\u0026#34;number\u0026#34; id=\u0026#34;idNum\u0026#34; name=\u0026#34;idNum\u0026#34; placeholder=\u0026#34;Enter your ID number\u0026#34;\u0026gt;\n      \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n      \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n        \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n        \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Enter your email\u0026#34;\u0026gt;\n      \u0026lt;/div\u0026gt;\n\n      \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n        \u0026lt;label for=\u0026#34;birthdate\u0026#34;\u0026gt;Date of Birth \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n        \u0026lt;input type=\u0026#34;date\u0026#34; id=\u0026#34;birthdate\u0026#34; name=\u0026#34;birthdate\u0026#34; max=\u0026#34;2006-10-01\u0026#34; min=\u0026#34;1924-01-01\u0026#34;\u0026gt;\n      \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/section\u0026gt;\n\n  \u0026lt;section class=\u0026#34;group-two\u0026#34; id=\u0026#34;two\u0026#34;\u0026gt;\n    \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n      \u0026lt;label for=\u0026#34;document\u0026#34;\u0026gt;Upload CV \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n      \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;document\u0026#34; id=\u0026#34;document\u0026#34;\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n      \u0026lt;label for=\u0026#34;department\u0026#34;\u0026gt;Department \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n      \u0026lt;select id=\u0026#34;department\u0026#34; name=\u0026#34;department\u0026#34;\u0026gt;\n        \u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;Select a department\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026#34;hr\u0026#34;\u0026gt;Human Resources\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026#34;it\u0026#34;\u0026gt;Information Technology\u0026lt;/option\u0026gt;\n        \u0026lt;option value=\u0026#34;finance\u0026#34;\u0026gt;Finance\u0026lt;/option\u0026gt;\n      \u0026lt;/select\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/section\u0026gt;\n\n  \u0026lt;section class=\u0026#34;group-three\u0026#34; id=\u0026#34;three\u0026#34;\u0026gt;\n    \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n      \u0026lt;label for=\u0026#34;skills\u0026#34;\u0026gt;Skills (Optional)\u0026lt;/label\u0026gt;\n      \u0026lt;textarea id=\u0026#34;skills\u0026#34; name=\u0026#34;skills\u0026#34; rows=\u0026#34;4\u0026#34; placeholder=\u0026#34;Enter your skills\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-control\u0026#34;\u0026gt;\n      \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;terms\u0026#34; id=\u0026#34;terms\u0026#34;\u0026gt;\n      \u0026lt;label for=\u0026#34;terms\u0026#34;\u0026gt;I agree to the terms and conditions \u0026lt;span style=\u0026#34;color: red;\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;button id=\u0026#34;btn\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Confirm and Submit\u0026lt;/button\u0026gt;\n  \u0026lt;/section\u0026gt;\n  \n  \u0026lt;div class=\u0026#34;arrows\u0026#34;\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; id=\u0026#34;navLeft\u0026#34;\u0026gt;Previous\u0026lt;/button\u0026gt;\n    \u0026lt;span id=\u0026#34;stepInfo\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; id=\u0026#34;navRight\u0026#34;\u0026gt;Next\u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/form\u0026gt;\n\n\u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eLooking at the code, you can see three sections and the navigation group. The sections contain form inputs and no native form validation. This is to give us better control of displaying the error messages because native form validation is only triggered when you click the submit button.\u003c/p\u003e\n\n\n\n\u003cp\u003eNext, create a \u003ccode\u003estyles.css\u003c/code\u003e file and paste this into it:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open base styles      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  --primary-color: #8c852a;\n  --secondary-color: #858034;\n}\n\nbody {\n  font-family: sans-serif;\n  line-height: 1.4;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f4f4f4;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n}\n\nform {\n  background: #fff;\n  padding: 40px;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n}\n\n.form-group {\n  display: flex;\n  gap: 7%;\n\n}\n\n.form-group \u0026gt; div {\n  width: 100%;\n}\n\ninput:not([type=\u0026#34;checkbox\u0026#34;]),\nselect,\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.form-control {\n  margin-bottom: 15px;\n}\n\nbutton {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  color: white;\n  background-color: var(--primary-color);\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n\n}\n\nbutton:hover {\n  background-color: var(--secondary-color);\n}\n\n.group-two, .group-three {\n  display: none;\n}\n\n.arrows {\n  display: flex;\n  justify-content: space-between\n  align-items: center;\n  margin-top: 10px;\n}\n\n#navLeft, #navRight {\n  width: fit-content;\n}\n\n@media screen and (max-width: 600px) {\n  .form-group {\n    flex-direction: column;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eOpen up the HTML file in the browser, and you should get something like the two-column layout in the following screenshot, complete with the current page indicator and navigation.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1600\" height=\"859\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?resize=1600%2C859\u0026amp;ssl=1\" alt=\"Page one of a three-page form with four fields in a two-column layout\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?w=1600\u0026amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?resize=300%2C161\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?resize=1024%2C550\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?resize=768%2C412\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-1.png?resize=1536%2C825\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"adding-functionality-with-vanilla-javascript\"\u003eAdding functionality with vanilla JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eNow, create a \u003ccode\u003escript.js\u003c/code\u003e file in the same directory as the HTML and CSS files and paste the following JavaScript into it:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open base scripts      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst stepInfo = document.getElementById(\u0026#34;stepInfo\u0026#34;);\nconst navLeft = document.getElementById(\u0026#34;navLeft\u0026#34;);\nconst navRight = document.getElementById(\u0026#34;navRight\u0026#34;);\nconst form = document.getElementById(\u0026#34;myForm\u0026#34;);\nconst formSteps = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;];\n\nlet currentStep = 0;\n\nfunction updateStepVisibility() {\n  formSteps.forEach((step) =\u0026gt; {\n    document.getElementById(step).style.display = \u0026#34;none\u0026#34;;\n  });\n\n  document.getElementById(formSteps[currentStep]).style.display = \u0026#34;block\u0026#34;;\n  stepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`;\n  navLeft.style.display = currentStep === 0 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\n  navRight.style.display =\n  currentStep === formSteps.length - 1 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\n}\n\ndocument.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; {\n  navLeft.style.display = \u0026#34;none\u0026#34;;\n  updateStepVisibility();\n  navRight.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    if (currentStep \u0026lt; formSteps.length - 1) {\n      currentStep++;\n      updateStepVisibility();\n    }\n  });\n\n  navLeft.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    if (currentStep \u0026gt; 0) {\n      currentStep--;\n      updateStepVisibility();\n    }\n  });\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eThis script defines a method that shows and hides the section depending on the \u003ccode\u003eformStep\u003c/code\u003e values that correspond to the IDs of the form sections. It updates \u003ccode\u003estepInfo\u003c/code\u003e with the current active section of the form. This dynamic text acts as a progress indicator to the user.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt then adds logic that waits for the page to load and click events to the navigation buttons to enable cycling through the different form sections. If you refresh your page, you will see that the multi-step form works as expected.\u003c/p\u003e\n\n\n\u003ch3 id=\"multi-step-form-navigation\"\u003eMulti-step form navigation\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s dive deeper into what the Javascript code above is doing. In the \u003ccode\u003eupdateStepVisibility()\u003c/code\u003e function, we first hide all the sections to have a clean slate:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eformSteps.forEach((step) =\u0026gt; {\n  document.getElementById(step).style.display = \u0026#34;none\u0026#34;;\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, we show the currently active section:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edocument.getElementById(formSteps[currentStep]).style.display = \u0026#34;block\u0026#34;;`\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, we update the text that indicators progress through the form:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003estepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, we hide the Previous button if we are at the first step and hide the Next button if we are at the last section:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enavLeft.style.display = currentStep === 0 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\nnavRight.style.display = currentStep === formSteps.length - 1 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s look at what happens when the page loads. We first hide the Previous button as the form loads on the first section:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edocument.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; {\nnavLeft.style.display = \u0026#34;none\u0026#34;;\nupdateStepVisibility();\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen we grab the Next button and add a click event that conditionally increments the current step count and then calls the \u003ccode\u003eupdateStepVisibility()\u003c/code\u003e function, which then updates the new section to be displayed:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enavRight.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n  if (currentStep \u0026lt; formSteps.length - 1) {\n    currentStep++;\n    updateStepVisibility();\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, we grab the Previous button and do the same thing but in reverse. Here, we are conditionally decrementing the step count and calling the \u003ccode\u003eupdateStepVisibility()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enavLeft.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n  if (currentStep \u0026gt; 0) {\n    currentStep--;\n    updateStepVisibility();\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"handling-errors\"\u003eHandling errors\u003c/h3\u003e\n\n\n\u003cp\u003eHave you ever spent a good 10+ minutes filling out a form only to submit it and get vague errors telling you to correct this and that? I prefer it when a form tells me right away that something’s amiss so that I can correct it \u003cem\u003ebefore\u003c/em\u003e I ever get to the Submit button. That’s what we’ll do in our form.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur principle is to clearly indicate which controls have errors and give meaningful error messages. Clear errors as the user takes necessary actions. Let’s add some validation to our form. First, let’s grab the necessary input elements and add this to the existing ones:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst nameInput = document.getElementById(\u0026#34;name\u0026#34;);\nconst idNumInput = document.getElementById(\u0026#34;idNum\u0026#34;);\nconst emailInput = document.getElementById(\u0026#34;email\u0026#34;);\nconst birthdateInput = document.getElementById(\u0026#34;birthdate\u0026#34;)\nconst documentInput = document.getElementById(\u0026#34;document\u0026#34;);\nconst departmentInput = document.getElementById(\u0026#34;department\u0026#34;);\nconst termsCheckbox = document.getElementById(\u0026#34;terms\u0026#34;);\nconst skillsInput = document.getElementById(\u0026#34;skills\u0026#34;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, add a function to validate the steps:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open validation script      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction validateStep(step) {\n  let isValid = true;\n  \n  if (step === 0) {\n    if (nameInput.value.trim() === \u0026#34;\u0026#34;) \n    showError(nameInput, \u0026#34;Name is required\u0026#34;);\n    isValid = false;\n  }\n\n  if (idNumInput.value.trim() === \u0026#34;\u0026#34;) {\n    showError(idNumInput, \u0026#34;ID number is required\u0026#34;);\n    isValid = false;\n  }\n\n  if (emailInput.value.trim() === \u0026#34;\u0026#34; || !emailInput.validity.valid) {\n    showError(emailInput, \u0026#34;A valid email is required\u0026#34;);\n    isValid = false;\n  }\n\n  if (birthdateInput.value === \u0026#34;\u0026#34;) {\n    showError(birthdateInput, \u0026#34;Date of birth is required\u0026#34;);\n    isValid = false;\n  }\n  \n  else if (step === 1) {\n\n    if (!documentInput.files[0]) {\n      showError(documentInput, \u0026#34;CV is required\u0026#34;);\n      isValid = false;\n    }\n\n    if (departmentInput.value === \u0026#34;\u0026#34;) {\n      showError(departmentInput, \u0026#34;Department selection is required\u0026#34;);\n      isValid = false;\n    }\n  } else if (step === 2) {\n\n    if (!termsCheckbox.checked) {\n      showError(termsCheckbox, \u0026#34;You must accept the terms and conditions\u0026#34;);\n      isValid = false;\n    }\n  }\n\n  return isValid;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eHere, we check if each required input has some value and if the email input has a valid input. Then, we set the isValid boolean accordingly. We also call a \u003ccode\u003eshowError()\u003c/code\u003e function, which we haven’t defined yet.\u003c/p\u003e\n\n\n\n\u003cp\u003ePaste this code above the \u003ccode\u003evalidateStep()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction showError(input, message) {\n  const formControl = input.parentElement;\n  const errorSpan = formControl.querySelector(\u0026#34;.error-message\u0026#34;);\n  input.classList.add(\u0026#34;error\u0026#34;);\n  errorSpan.textContent = message;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, add the following styles to the stylesheet:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open validation styles      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput:focus, select:focus, textarea:focus {\n  outline: .5px solid var(--primary-color);\n}\n\ninput.error, select.error, textarea.error {\n  outline: .5px solid red;\n}\n\n.error-message {\n  font-size: x-small;\n  color: red;\n  display: block;\n  margin-top: 2px;\n}\n\n.arrows {\n  color: var(--primary-color);\n  font-size: 18px;\n  font-weight: 900;\n\n}\n\n#navLeft, #navRight {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n#stepInfo {\n  color: var(--primary-color);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eIf you refresh the form, you will see that the buttons do not take you to the next section till the inputs are considered valid:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1470\" height=\"896\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-2.png?resize=1470%2C896\u0026amp;ssl=1\" alt=\"A personnel registration form with fields for name, ID number, email, and date of birth, all marked as required. Step 1 of 3 with a \u0026#34;Next\u0026#34; button.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-2.png?w=1470\u0026amp;ssl=1 1470w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-2.png?resize=300%2C183\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-2.png?resize=1024%2C624\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-2.png?resize=768%2C468\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFinally, we want to add real-time error handling so that the errors go away when the user starts inputting the correct information. Add this function below the \u003ccode\u003evalidateStep()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open real-time validation script      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction setupRealtimeValidation() {\n  nameInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; {\n    if (nameInput.value.trim() !== \u0026#34;\u0026#34;) clearError(nameInput);\n  });\n\n  idNumInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; {\n    if (idNumInput.value.trim() !== \u0026#34;\u0026#34;) clearError(idNumInput);\n  });\n  \n  emailInput.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; {\n    if (emailInput.validity.valid) clearError(emailInput);\n  });\n  \n  birthdateInput.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; {\n    if (birthdateInput.value !== \u0026#34;\u0026#34;) clearError(birthdateInput);\n  });\n  \n  documentInput.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; {\n    if (documentInput.files[0]) clearError(documentInput);\n  });\n  \n  departmentInput.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; {\n    if (departmentInput.value !== \u0026#34;\u0026#34;) clearError(departmentInput);\n  });\n  \n  termsCheckbox.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; {\n    if (termsCheckbox.checked) clearError(termsCheckbox);\n  });\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eThis function clears the errors if the input is no longer invalid by listening to input and change events then calling a function to clear the errors. Paste the \u003ccode\u003eclearError()\u003c/code\u003e function below the \u003ccode\u003eshowError()\u003c/code\u003e one:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction clearError(input) {\n  const formControl = input.parentElement;\n  const errorSpan = formControl.querySelector(\u0026#34;.error-message\u0026#34;);\n  input.classList.remove(\u0026#34;error\u0026#34;);\n  errorSpan.textContent = \u0026#34;\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd now the errors clear when the user types in the correct value:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1406\" height=\"874\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-3png.png?resize=1406%2C874\u0026amp;ssl=1\" alt=\"A personnel registration form with fields for name, email, ID number, and date of birth. Error messages indicate missing or invalid input. A \u0026#34;Step 1 of 3\u0026#34; label and \u0026#34;Next\u0026#34; button are shown.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-3png.png?w=1406\u0026amp;ssl=1 1406w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-3png.png?resize=300%2C186\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-3png.png?resize=1024%2C637\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-3png.png?resize=768%2C477\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe multi-step form now handles errors gracefully. If you do decide to keep the errors till the end of the form, then at the very least, jump the user back to the erroring form control and show some indication of how many errors they need to fix.\u003c/p\u003e\n\n\n\u003ch3 id=\"handling-form-submission\"\u003eHandling form submission\u003c/h3\u003e\n\n\n\u003cp\u003eIn a multi-step form, it is valuable to show the user a summary of all their answers at the end before they submit and to offer them an option to edit their answers if necessary. The person can’t see the previous steps without navigating backward, so showing a summary at the last step gives assurance and a chance to correct any mistakes.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s add a fourth section to the markup to hold this summary view and move the submit button within it. Paste this just below the third section in \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open HTML      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;section class=\u0026#34;group-four\u0026#34; id=\u0026#34;four\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Name: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;name-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;name-edit\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;ID Number: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;id-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;id-edit\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Email: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;email-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;email-edit\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Date of Birth: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;bd-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;bd-edit\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;CV/Resume: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;cv-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;cv-edit\u0026#34;\u0026gt;\n      \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n      \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n    \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Department: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;dept-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;dept-edit\u0026#34;\u0026gt;\n      \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n      \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n    \n  \u0026lt;div class=\u0026#34;summary-section\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Skills: \u0026lt;/p\u0026gt;\n    \u0026lt;p id=\u0026#34;skills-val\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;edit-btn\u0026#34; id=\u0026#34;skills-edit\u0026#34;\u0026gt;\n      \u0026lt;span\u0026gt;✎\u0026lt;/span\u0026gt;\n      \u0026lt;span\u0026gt;Edit\u0026lt;/span\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \n  \u0026lt;button id=\u0026#34;btn\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Confirm and Submit\u0026lt;/button\u0026gt;\n\u0026lt;/section\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eThen update the \u003ccode\u003eformStep\u003c/code\u003e in your Javascript to read:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst formSteps = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;, \u0026#34;four\u0026#34;];\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, add the following classes to \u003ccode\u003estyles.css\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.summary-section {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.summary-section p:first-child {\n  width: 30%;\n  flex-shrink: 0;\n  border-right: 1px solid var(--secondary-color);\n}\n\n.summary-section p:nth-child(2) {\n  width: 45%;\n  flex-shrink: 0;\n  padding-left: 10px;\n}\n\n.edit-btn {\n  width: 25%;\n  margin-left: auto;\n  background-color: transparent;\n  color: var(--primary-color);\n  border: .7px solid var(--primary-color);\n  border-radius: 5px;\n  padding: 5px;\n}\n\n.edit-btn:hover {\n  border: 2px solid var(--primary-color);\n  font-weight: bolder;\n  background-color: transparent;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, add the following to the top of the \u003ccode\u003escript.js\u003c/code\u003e file where the other \u003ccode\u003econst\u003c/code\u003es are:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst nameVal = document.getElementById(\u0026#34;name-val\u0026#34;);\nconst idVal = document.getElementById(\u0026#34;id-val\u0026#34;);\nconst emailVal = document.getElementById(\u0026#34;email-val\u0026#34;);\nconst bdVal = document.getElementById(\u0026#34;bd-val\u0026#34;)\nconst cvVal = document.getElementById(\u0026#34;cv-val\u0026#34;);\nconst deptVal = document.getElementById(\u0026#34;dept-val\u0026#34;);\nconst skillsVal = document.getElementById(\u0026#34;skills-val\u0026#34;);\nconst editButtons = \n  \u0026#34;name-edit\u0026#34;: 0,\n  \u0026#34;id-edit\u0026#34;: 0,\n  \u0026#34;email-edit\u0026#34;: 0,\n  \u0026#34;bd-edit\u0026#34;: 0,\n  \u0026#34;cv-edit\u0026#34;: 1,\n  \u0026#34;dept-edit\u0026#34;: 1,\n  \u0026#34;skills-edit\u0026#34;: 2\n};\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen add this function in \u003ccode\u003escripts.js\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction updateSummaryValues() {\n  nameVal.textContent = nameInput.value;\n  idVal.textContent = idNumInput.value;\n  emailVal.textContent = emailInput.value;\n  bdVal.textContent = birthdateInput.value;\n\n  const fileName = documentInput.files[0]?.name;\n  if (fileName) \n  const extension = fileName.split(\u0026#34;.\u0026#34;).pop();\n  const baseName = fileName.split(\u0026#34;.\u0026#34;)[0];\n  const truncatedName = baseName.length \u0026gt; 10 ? baseName.substring(0, 10) + \u0026#34;...\u0026#34; : baseName;\n  cvVal.textContent = `${truncatedName}.${extension}`;\n  } else {\n    cvVal.textContent = \u0026#34;No file selected\u0026#34;;\n  }\n\n  deptVal.textContent = departmentInput.value;\n  skillsVal.textContent = skillsInput.value || \u0026#34;No skills submitted\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis dynamically inserts the input values into the summary section of the form, truncates the file names, and offers a fallback text for the input that was not required.\u003c/p\u003e\n\n\n\n\u003cp\u003eThen update the \u003ccode\u003eupdateStepVisibility()\u003c/code\u003e function to call the new function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction updateStepVisibility() {\n  formSteps.forEach((step) =\u0026gt; {\n    document.getElementById(step).style.display = \u0026#34;none\u0026#34;;\n  });\n\n  document.getElementById(formSteps[currentStep]).style.display = \u0026#34;block\u0026#34;;\n  stepInfo.textContent = `Step ${currentStep + 1} of ${formSteps.length}`;\n  if (currentStep === 3) {\n    updateSummaryValues();\n  }\n\n  navLeft.style.display = currentStep === 0 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\n  navRight.style.display = currentStep === formSteps.length - 1 ? \u0026#34;none\u0026#34; : \u0026#34;block\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, add this to the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e event listener:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eObject.keys(editButtons).forEach((buttonId) =\u0026gt; {\n  const button = document.getElementById(buttonId);\n  button.addEventListener(\u0026#34;click\u0026#34;, (e) =\u0026gt; {\n    currentStep = editButtons[buttonId];\n    updateStepVisibility();\n  });\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eRunning the form, you should see that the summary section shows all the inputted values and allows the user to edit any before submitting the information:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1540\" height=\"1326\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?resize=1540%2C1326\u0026amp;ssl=1\" alt=\"Personnel registration form displaying personal details with options to edit each field, a \u0026#34;Confirm and Submit\u0026#34; button, and navigation for previous steps.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?w=1540\u0026amp;ssl=1 1540w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?resize=300%2C258\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?resize=1024%2C882\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?resize=768%2C661\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/multistep-form-4.png?resize=1536%2C1323\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd now, we can submit our form:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eform.addEventListener(\u0026#34;submit\u0026#34;, (e) =\u0026gt; {\n  e.preventDefault();\n\n  if (validateStep(2)) {\n    alert(\u0026#34;Form submitted successfully!\u0026#34;);\n    form.reset();\n    currentFormStep = 0;\n    updateStepVisibility();\n}\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOur multi-step form now allows the user to edit and see all the information they provide before submitting it.\u003c/p\u003e\n\n\n\u003ch3 id=\"accessibility-tips\"\u003eAccessibility tips\u003c/h3\u003e\n\n\n\u003cp\u003eMaking multi-step forms accessible starts with the basics: \u003cstrong\u003eusing semantic HTML.\u003c/strong\u003e This is half the battle. It is closely followed by using appropriate form labels.\u003c/p\u003e\n\n\n\n\u003cp\u003eOther ways to make forms more accessible include giving enough room to elements that must be clicked on small screens and giving meaningful descriptions to the form navigation and progress indicators.\u003c/p\u003e\n\n\n\n\u003cp\u003eOffering feedback to the user is an important part of it; it’s not great to auto-dismiss user feedback after a certain amount of time but to allow the user to dismiss it themselves. Paying attention to contrast and font choice is important, too, as they both affect how readable your form is.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s make the following adjustments to the markup for more technical accessibility:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eAdd \u003ccode\u003earia-required=\u0026#34;true\u0026#34;\u003c/code\u003e to all inputs except the skills one.\u003c/strong\u003e This lets screen readers know the fields are required without relying on native validation.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAdd \u003ccode\u003erole=\u0026#34;alert\u0026#34;\u003c/code\u003e to the error spans.\u003c/strong\u003e This helps screen readers know to give it importance when the input is in an error state.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAdd \u003ccode\u003erole=\u0026#34;status\u0026#34; aria-live=\u0026#34;polite\u0026#34;\u003c/code\u003e to the \u003ccode\u003e.stepInfo\u003c/code\u003e.\u003c/strong\u003e This will help screen readers understand that the step info keeps tabs on a state, and the aria-live being set to polite indicates that should the value change, it does not need to immediately announce it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eIn the script file, replace the \u003ccode\u003eshowError()\u003c/code\u003e and \u003ccode\u003eclearError()\u003c/code\u003e functions with the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction showError(input, message) {\n  const formControl = input.parentElement;\n  const errorSpan = formControl.querySelector(\u0026#34;.error-message\u0026#34;);\n  input.classList.add(\u0026#34;error\u0026#34;);\n  input.setAttribute(\u0026#34;aria-invalid\u0026#34;, \u0026#34;true\u0026#34;);\n  input.setAttribute(\u0026#34;aria-describedby\u0026#34;, errorSpan.id);\n  errorSpan.textContent = message;\n  }\n\n  function clearError(input) {\n  const formControl = input.parentElement;\n  const errorSpan = formControl.querySelector(\u0026#34;.error-message\u0026#34;);\n  input.classList.remove(\u0026#34;error\u0026#34;);\n  input.removeAttribute(\u0026#34;aria-invalid\u0026#34;);\n  input.removeAttribute(\u0026#34;aria-describedby\u0026#34;);\n  errorSpan.textContent = \u0026#34;\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere, we programmatically add and remove attributes that explicitly tie the input with its error span and show that it is in an invalid state.\u003c/p\u003e\n\n\n\n\u003cp\u003eFinally, let’s add focus on the first input of every section; add the following code to the end of the \u003ccode\u003eupdateStepVisibility()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst currentStepElement = document.getElementById(formSteps[currentStep]);\nconst firstInput = currentStepElement.querySelector(\n  \u0026#34;input, select, textarea\u0026#34;\n);\n\nif (firstInput) {\n  firstInput.focus();\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd with that, the multi-step form is much more accessible.\u003c/p\u003e\n\n\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\n\n\u003cp\u003eThere we go, a four-part multi-step form for a job application! As I said at the top of this article, there’s a lot to juggle — so much so that I wouldn’t fault you for looking for an out-of-the-box solution.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut if you have to hand-roll a multi-step form, hopefully now you see it’s not a death sentence. There’s a happy path that gets you there, complete with navigation and validation, without turning away from good, accessible practices.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd this is just how I approached it! Again, I took this on as a personal challenge to see how far I could get, and I’m pretty happy with it. But I’d love to know if you see additional opportunities to make this even more mindful of the user experience and considerate of accessibility.\u003c/p\u003e\n\n\n\u003ch3 id=\"resources\"\u003eReferences\u003c/h3\u003e\n\n\n\u003cp\u003eHere are some relevant links I referred to when writing this article:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/How_to_structure_a_web_form\" rel=\"noopener\"\u003eHow to Structure a Web Form\u003c/a\u003e (MDN)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.w3.org/WAI/tutorials/forms/multi-page/\" rel=\"noopener\"\u003eMulti-page Forms\u003c/a\u003e (W3C.org)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.a11yproject.com/posts/how-to-write-accessible-forms/\" rel=\"noopener\"\u003eCreate accessible forms\u003c/a\u003e (A11y Project)\u003c/li\u003e\n\u003c/ol\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "26 min read",
  "publishedTime": "2024-12-18T08:03:22-07:00",
  "modifiedTime": "2024-12-18T08:03:25-07:00"
}
