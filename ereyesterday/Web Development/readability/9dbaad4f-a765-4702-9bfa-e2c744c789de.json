{
  "id": "9dbaad4f-a765-4702-9bfa-e2c744c789de",
  "title": "CSS Tricks That Use Only One Gradient",
  "link": "https://css-tricks.com/css-tricks-that-use-only-one-gradient/",
  "description": "CSS gradients have been so long that there’s no need to rehash what they are and how to use them. You have surely encountered them at some point in your front-end journey, and if you follow me, you also … CSS Tricks That Use Only One Gradient originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Temani Afif",
  "published": "Fri, 11 Oct 2024 21:48:01 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "gradients"
  ],
  "byline": "Temani Afif",
  "length": 12529,
  "excerpt": "CSS gradients have been so long that there’s no need to rehash what they are and how to use them. You have surely encountered them at some point in your",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! CSS gradients have been so long that there’s no need to rehash what they are and how to use them. You have surely encountered them at some point in your front-end journey, and if you follow me, you also know that I use them all the time. I use them for CSS patterns, nice CSS decorations, and even CSS loaders. But even so, gradients have a tough syntax that can get very complicated very quickly if you’re not paying attention. In this article, we are not going to make complex stuff with CSS gradients. Instead, we’re keeping things simple and I am going to walk through all of the incredible things we can do with just one gradient. Only one gradient? In this case, reading the doc should be enough, no? No, not really. Follow along and you will see that gradients are easy at their most basic, but are super powerful if we push them — or in this case, just one — to their limits. CSS patterns One of the first things you learn with gradients is that we can establish repeatable patterns with them. You’ve probably seen some examples of checkerboard patterns in the wild. That’s something we can quickly pull off with a single CSS gradient. In this case, we can reach for the repeating-conic-gradient() function: background: repeating-conic-gradient(#000 0 25%, #fff 0 50%) 0 / 100px 100px; A more verbose version of that without the background shorthand: background-image: repeating-conic-gradient(#000 0 25%, #fff 0 50%); background-size: 100px 100px; Either way, the result is the same: Pretty simple so far, right? You have two colors that you can easily swap out for other colors, plus the background-size property to control the square shapes. If we change the color stops — where one color stops and another starts — we get another cool pattern based on triangles: background: repeating-conic-gradient(#000 0 12.5%, #fff 0 25%) 0 / 100px 100px; If you compare the CSS for the two demos we’ve seen so far, you’ll see that all I did was divide the color stops in half, 25% to 12.5% and 50% to 25%. Another one? Let’s go! This time I’m working with CSS variables. I like this because variables make it infinitely easier to configure the gradients by updating a few values without actually touching the syntax. The calculation is a little more complex this time around, as it relies on trigonometric functions to get accurate values. I know what you are thinking: Trigonometry? That sounds hard. That is certainly true, particularly if you’re new to CSS gradients. A good way to visualize the pattern is to disable the repetition using the no-repeat value. This isolates the pattern to one instance so that you clearly see what’s getting repeated. The following example declares background-image without a background-size so you can see the tile that repeats and better understand each gradient: I want to avoid a step-by-step tutorial for each and every example we’re covering so that I can share lots more examples without getting lost in the weeds. Instead, I’ll point you to three articles you can refer to that get into those weeds and allow you to pick apart our examples. How to create background patterns using CSS \u0026 conic-gradient (Verpex blog) Learn CSS radial-gradient by Building Background Patterns (freeCodeCamp) Background Patterns, Simplified by Conic Gradients (Ana Tudor) I’ll also encourage you to open my online collection of patterns for even more examples. Most of the examples are made with multiple gradients, but there are plenty that use only one. The goal of this article is to learn a few “single gradient” tricks — but the ultimate goal is to be able to combine as many gradients as possible to create cool stuff! Grid lines Let’s start with the following example: You might claim that this belongs under “Patterns” — and you are right! But let’s make it more flexible by adding variables for controlling the thickness and the total number of cells. In other words, let’s create a grid! .grid-lines { --n: 3; /* number of rows */ --m: 5; /* number of columns */ --s: 80px; /* control the size of the grid */ --t: 2px; /* the thickness */ width: calc(var(--m)*var(--s) + var(--t)); height: calc(var(--n)*var(--s) + var(--t)); background: conic-gradient(from 90deg at var(--t) var(--t), #0000 25%, #000 0) 0 0/var(--s) var(--s); } First of all, let’s isolate the gradient to better understand the repetition (like we did in the previous section). One repetition will give us a horizontal and a vertical line. The size of the gradient is controlled by the variable --s, so we define the width and height as a multiplier to get as many lines as we want to establish the grid pattern. What’s with “+ var(--t)” in the equation? The grid winds up like this without it: We are missing lines at the right and the bottom which is logical considering the gradient we are using. To fix this, the gradient needs to be repeated one more time, but not at full size. For this reason, we are adding the thickness to the equation to have enough space for the extra repetition and the get the missing lines. And what about a responsive configuration where the number of columns depends on the available space? We remove the --m variable and define the width like this: width: calc(round(down, 100%, var(--s)) + var(--t)); Instead of multiplying things, we use the round() function to tell the browser to make the element full width and round the value to be a multiple of --s. In other words, the browser will find the multiplier for us! Resize the below and see how the grid behaves: In the future, we will also be able to do this with the calc-size() function: width: calc-size(auto, round(down, size, var(--s)) + var(--t)); Using calc-size() is essentially the same as the last example, but instead of using 100% we consider auto to be the width value. It’s still early to adopt such syntax. You can test the result in the latest version of Chrome at the time of this writing: Dashed lines Let’s try something different: vertical (or horizontal) dashed lines where we can control everything. .dashed-lines { --t: 2px; /* thickness of the lines */ --g: 50px; /* gap between lines */ --s: 12px; /* size of the dashes */ background: conic-gradient(at var(--t) 50%, #0000 75%, #000 0) var(--g)/calc(var(--g) + var(--t)) var(--s); } Can you figure out how it works? Here is a figure with hints: Try creating the horizontal version on your own. Here’s a demo that shows how I tackled it, but give it a try before peeking at it. What about a grid with dashed lines — is that possible? Yes, but using two gradients instead of one. The code is published over at my collection of CSS shapes. And yes, the responsive behavior is there as well! Rainbow gradient How would you create the following gradient in CSS? You might start by picking as many color values along the rainbow as you can, then chaining them in a linear-gradient: linear-gradient(90deg, red, yellow, green, /* etc. */, red); Good idea, but it won’t get you all the way there. Plus, it requires you to juggle color stops and fuss with them until you get things just right. There is a simpler solution. We can accomplish this with just one color! background: linear-gradient(90deg in hsl longer hue, red 0 0); I know, the syntax looks strange if you’re seeing the new color interpolation for the first time. If I only declare this: background: linear-gradient(90deg, red, red); /* or (90deg, red 0 0) */ …the browser creates a gradient that goes from red to red… red everywhere! When we set this “in hsl“, we’re changing the color space used for the interpolation between the colors: background: linear-gradient(90deg in hsl, red, red); Now, the browser will create a gradient that goes from red to red… this time using the HSL color space rather than the default RGB color space. Nothing changes visually… still see red everywhere. The longer hue bit is what’s interesting. When we’re in the HSL color space, the hue channel’s value is an angle unit (e.g., 25deg). You can see the HSL color space as a circle where the angle defines the position of the color within that circle. Since it’s a circle, we can move between two points using a “short” path or “long” path. If we consider the same point (red in our case) it means that the “short” path contains only red and the “long” path runs into all the colors as it traverses the color space. Adam Argyle published a very detailed guide on high-definition colors in CSS. I recommend reading it because you will find all the features we’re covering (this section in particular) to get more context on how everything comes together. We can use the same technique to create a color wheel using a conic-gradient: background: conic-gradient(in hsl longer hue,red 0 0); And while we are on the topic of CSS colors, I shared another fun trick that allows you to define an array of color values… yes, in CSS! And it only uses a single gradient as well. Hover effects Let’s do another exercise, this time working with hover effects. We tend to rely on pseudo-elements and extra elements when it comes to things like applying underlines and overlays on hover, and we tend to forget that gradients are equally, if not more, effective for getting the job done. Case in point. Let’s use a single gradient to form an underline that slides on hover: h3 { background: linear-gradient(#1095c1 0 0) no-repeat var(--p,0) 100%/var(--p, 0) .1em; transition: 0.4s, background-position 0s; } h3:hover { --p: 100%; } You likely would have used a pseudo-element for this, right? I think that’s probably how most people would approach it. It’s a viable solution but I find that using a gradient instead results in cleaner, more concise CSS. You might be interested in another article I wrote for CSS-Tricks where I use the same technique to create a wide variety of cool hover effects. CSS shapes Creating shapes with gradients is my favorite thing to do in CSS. I’ve been doing it for what feels like forever and love it so much that I published a “Modern Guide for Making CSS Shapes” over at Smashing Magazine earlier this year. I hope you check it out not only to learn more tricks but to see just how many shapes we can create with such a small amount of code — many that rely only on a single CSS gradient. Some of my favorites include zig-zag borders: …and “scooped” corners: …as well as sparkles: …and common icons like the plus sign: I won’t get into the details of creating these shapes to avoid making this article long and boring. Read the guide and visit my CSS Shape collection and you’ll have everything you need to make these, and more! Border image tricks Let’s do one more before we put a cap on this. Earlier this year, I discovered how awesome the CSS border-image property is for creating different kinds of decorations and shapes. And guess what? border-image limits us to using just one gradient, so we are obliged to follow that restriction. Again, just one gradient and we get a bunch of fun results. I’ll drop in my favorites like I did in the last section. Starting with a gradient overlay: We can use this technique for a full-width background: …as well as heading dividers: …and even ribbons: All of these have traditionally required hacks, magic numbers, and other workarounds. It’s awesome to see modern CSS making things more effortless. Go read my article on this topic to find all the interesting stuff you can make using border-image. Wrapping up I hope you enjoyed this collection of “single-gradient” tricks. Most folks I know tend to use gradients to create, well, gradients. But as we’ve seen, they are more powerful and can be used for lots of other things, like drawing shapes. I like to add a reminder at the end of an article like this that the goal is not to restrict yourself to using one gradient. You can use more! The goal is to get a better handle on how gradients work and push them in interesting ways — that, in turn, makes us better at writing CSS. So, go forth and experiment — I’d love to see what you make!",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381773",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eCSS gradients have been so long that there’s no need to rehash \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\"\u003ewhat they are and how to use them\u003c/a\u003e. You have surely encountered them at some point in your front-end journey, and if you follow me, you also know that I use them all the time. I use them for \u003ca href=\"https://css-pattern.com\" rel=\"noopener\"\u003eCSS patterns\u003c/a\u003e, nice \u003ca href=\"https://css-generators.com\" rel=\"noopener\"\u003eCSS decorations\u003c/a\u003e, and even \u003ca href=\"https://css-loaders.com\" rel=\"noopener\"\u003eCSS loaders\u003c/a\u003e. But even so, gradients have a tough syntax that can get very complicated very quickly if you’re not paying attention.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this article, we are not going to make complex stuff with CSS gradients. Instead, we’re keeping things simple and I am going to walk through all of the incredible things we can do with just one gradient.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eOnly one gradient? In this case, reading the doc should be enough, no?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eNo, not really. Follow along and you will see that gradients are easy at their most basic, but are super powerful if we push them — or in this case, just one — to their limits.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"css-patterns\"\u003eCSS patterns\u003c/h3\u003e\n\n\n\u003cp\u003eOne of the first things you learn with gradients is that we can establish repeatable patterns with them. You’ve probably seen some examples of checkerboard patterns in the wild. That’s something we can quickly pull off with a single CSS gradient. In this case, we can reach for the \u003ccode\u003erepeating-conic-gradient()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: \n  repeating-conic-gradient(#000 0 25%, #fff 0 50%) \n  0 / 100px 100px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eA more verbose version of that without the \u003ccode\u003ebackground\u003c/code\u003e shorthand:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground-image: repeating-conic-gradient(#000 0 25%, #fff 0 50%);\nbackground-size: 100px 100px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eEither way, the result is the same:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003ePretty simple so far, right? You have two colors that you can easily swap out for other colors, plus the \u003ccode\u003ebackground-size\u003c/code\u003e property to control the square shapes.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we change the color stops — where one color stops and another starts — we get another cool pattern based on triangles:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: \n  repeating-conic-gradient(#000 0 12.5%, #fff 0 25%) \n  0 / 100px 100px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIf you compare the CSS for the two demos we’ve seen so far, you’ll see that all I did was divide the color stops in half, \u003ccode\u003e25%\u003c/code\u003e to \u003ccode\u003e12.5%\u003c/code\u003e and \u003ccode\u003e50%\u003c/code\u003e to \u003ccode\u003e25%\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnother one? Let’s go!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis time I’m working with CSS variables. I like this because variables make it infinitely easier to configure the gradients by updating a few values without actually touching the syntax. The calculation is a little more complex this time around, as it relies on trigonometric functions to get accurate values.\u003c/p\u003e\n\n\n\n\u003cp\u003eI know what you are thinking: \u003cem\u003eTrigonometry? That sounds hard.\u003c/em\u003e That is certainly true, particularly if you’re new to CSS gradients. A good way to visualize the pattern is to disable the repetition using the \u003ccode\u003eno-repeat\u003c/code\u003e value. This isolates the pattern to one instance so that you clearly see what’s getting repeated. The following example declares \u003ccode\u003ebackground-image\u003c/code\u003e without a \u003ccode\u003ebackground-size\u003c/code\u003e so you can see the tile that repeats and better understand each gradient:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI want to avoid a step-by-step tutorial for each and every example we’re covering so that I can share \u003cem\u003elots\u003c/em\u003e more examples without getting lost in the weeds. Instead, I’ll point you to three articles you can refer to that get into those weeds and allow you to pick apart our examples.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://verpex.com/blog/website-tips/how-to-create-background-pattern-using-css-conic-gradient\" rel=\"noopener\"\u003eHow to create background patterns using CSS \u0026amp; conic-gradient\u003c/a\u003e (Verpex blog)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.freecodecamp.org/news/css-radial-gradient/\" rel=\"noopener\"\u003eLearn CSS radial-gradient by Building Background Patterns\u003c/a\u003e (freeCodeCamp)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/background-patterns-simplified-by-conic-gradients/\"\u003eBackground Patterns, Simplified by Conic Gradients\u003c/a\u003e (Ana Tudor)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eI’ll also encourage you to open \u003ca href=\"https://css-pattern.com/\" rel=\"noopener\"\u003emy online collection of patterns\u003c/a\u003e for even more examples. Most of the examples are made with multiple gradients, but there are plenty that use only one. The goal of this article is to learn a few “single gradient” tricks — but the ultimate goal is to be able to combine as many gradients as possible to create cool stuff!\u003c/p\u003e\n\n\n\u003ch3 id=\"grid-lines\"\u003eGrid lines\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s start with the following example:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou might claim that this belongs under “Patterns” — and you are right! But let’s make it more flexible by adding variables for controlling the thickness and the total number of cells. In other words, let’s create a \u003cem\u003egrid\u003c/em\u003e!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.grid-lines {\n  --n: 3; /* number of rows */\n  --m: 5; /* number of columns */\n  --s: 80px; /* control the size of the grid */\n  --t: 2px; /* the thickness */\n\n  width: calc(var(--m)*var(--s) + var(--t));\n  height: calc(var(--n)*var(--s) + var(--t));\n  background:  \n    conic-gradient(from 90deg at var(--t) var(--t), #0000 25%, #000 0)\n      0 0/var(--s) var(--s);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFirst of all, let’s isolate the gradient to better understand the repetition (like we did in the previous section).\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOne repetition will give us a horizontal and a vertical line. The size of the gradient is controlled by the variable \u003ccode\u003e--s\u003c/code\u003e, so we define the width and height as a multiplier to get as many lines as we want to establish the grid pattern.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWhat’s with “\u003ccode\u003e+ var(--t)\u003c/code\u003e” in the equation?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe grid winds up like this without it:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe are missing lines at the right and the bottom which is logical considering the gradient we are using. To fix this, the gradient needs to be repeated one more time, but not at full size. For this reason, we are adding the thickness to the equation to have enough space for the extra repetition and the get the missing lines.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnd what about a responsive configuration where the number of columns depends on the available space? We remove the \u003ccode\u003e--m\u003c/code\u003e variable and define the width like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ewidth: calc(round(down, 100%, var(--s)) + var(--t));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eInstead of multiplying things, we use the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/round\" rel=\"noopener\"\u003e\u003ccode\u003eround()\u003c/code\u003e\u003c/a\u003e function to tell the browser to make the element full width and round the value to be a multiple of \u003ccode\u003e--s\u003c/code\u003e. In other words, the browser will find the multiplier for us!\u003c/p\u003e\n\n\n\n\u003cp\u003eResize the below and see how the grid behaves:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn the future, we will also be able to do this with the \u003ccode\u003ecalc-size()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ewidth: calc-size(auto, round(down, size, var(--s)) + var(--t));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://drafts.csswg.org/css-values-5/#calc-size\" rel=\"noopener\"\u003eUsing \u003ccode\u003ecalc-size()\u003c/code\u003e\u003c/a\u003e is essentially the same as the last example, but instead of using \u003ccode\u003e100%\u003c/code\u003e we consider \u003ccode\u003eauto\u003c/code\u003e to be the width value. It’s still early to adopt such syntax. You can test the result in the latest version of Chrome at the time of this writing:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"dashed-lines\"\u003eDashed lines\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s try something different: vertical (or horizontal) dashed lines where we can control everything.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.dashed-lines {\n  --t: 2px;  /* thickness of the lines */\n  --g: 50px; /* gap between lines */\n  --s: 12px; /* size of the dashes */\n  \n  background:\n    conic-gradient(at var(--t) 50%, #0000 75%, #000 0)\n    var(--g)/calc(var(--g) + var(--t)) var(--s);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eCan you figure out how it works? Here is a figure with hints:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"639\" height=\"346\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727173400934_image.png?resize=639%2C346\u0026amp;ssl=1\" alt=\"Outline of a rectangle with dashed green borders. Variables for t, g, and s are labeled.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727173400934_image.png?w=639\u0026amp;ssl=1 639w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727173400934_image.png?resize=300%2C162\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTry creating the horizontal version on your own. \u003ca href=\"https://codepen.io/t_afif/pen/ExqxGXr/86ba6e8a0e5663f3b3772c8545c24674\" rel=\"noopener\"\u003eHere’s a demo\u003c/a\u003e that shows how I tackled it, but give it a try before peeking at it.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWhat about a grid with dashed lines — is that possible?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eYes, but using two gradients instead of one. The code is published over at \u003ca href=\"https://css-shape.com/grid-lines/\" rel=\"noopener\"\u003emy collection of CSS shapes\u003c/a\u003e. And yes, the responsive behavior is there as well!\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"rainbow-gradient\"\u003eRainbow gradient\u003c/h3\u003e\n\n\n\u003cp\u003eHow would you create the following gradient in CSS?\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"929\" height=\"200\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727187858503_image.png?resize=929%2C200\u0026amp;ssl=1\" alt=\"The color spectrum from left to right.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727187858503_image.png?w=929\u0026amp;ssl=1 929w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727187858503_image.png?resize=300%2C65\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_C6B210E92D3B5D5EBEAC481DD5AD12F4A53B9A19FD9098C9EA5EA1B379ACF5A4_1727187858503_image.png?resize=768%2C165\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou might start by picking as many color values along the rainbow as you can, then chaining them in a \u003ccode\u003elinear-gradient\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003elinear-gradient(90deg, red, yellow, green, /* etc. */, red);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eGood idea, but it won’t get you all the way there. Plus, it requires you to juggle color stops and fuss with them until you get things just right.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere is a simpler solution. We can accomplish this with just one color!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: linear-gradient(90deg in hsl longer hue, red 0 0);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI know, the syntax looks strange if you’re seeing the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color-interpolation-method\" rel=\"noopener\"\u003enew color interpolation\u003c/a\u003e for the first time.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf I only declare this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: linear-gradient(90deg, red, red); /* or (90deg, red 0 0) */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…the browser creates a gradient that goes from red to red… red everywhere! When we set this “\u003ccode\u003ein hsl\u003c/code\u003e“, we’re changing the color space used for the interpolation between the colors:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: linear-gradient(90deg in hsl, red, red);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, the browser will create a gradient that goes from red to red… this time using the HSL color space rather than the default RGB color space. Nothing changes visually… still see red everywhere.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003elonger hue\u003c/code\u003e bit is what’s interesting. When we’re in the HSL color space, the hue channel’s value is an angle unit (e.g., \u003ccode\u003e25deg\u003c/code\u003e). You can see the HSL color space as a circle where the angle defines the position of the color within that circle.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"3282\" height=\"1431\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=3282%2C1431\u0026amp;ssl=1\" alt=\"3D models of the RGB and HSL color spaces.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?w=3282\u0026amp;ssl=1 3282w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=300%2C131\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=1024%2C446\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=768%2C335\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=1536%2C670\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?resize=2048%2C893\u0026amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/a-half-cut-open-rgb-cube-53a16bc324d2a-1.png?w=3000\u0026amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSince it’s a circle, we can move between two points using a “short” path or “long” path.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"389\" height=\"388\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/same-gradient-circle-1.png?resize=389%2C388\u0026amp;ssl=1\" alt=\"Showing the long and short ends of the hue in a color circle.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/same-gradient-circle-1.png?w=389\u0026amp;ssl=1 389w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/same-gradient-circle-1.png?resize=300%2C300\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/same-gradient-circle-1.png?resize=150%2C150\u0026amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf we consider the same point (\u003ccode\u003ered\u003c/code\u003e in our case) it means that the “short” path contains only red and the “long” path runs into all the colors as it traverses the color space.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAdam Argyle published a very detailed guide on \u003ca href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide\" rel=\"noopener\"\u003ehigh-definition colors in CSS\u003c/a\u003e. I recommend reading it because you will find all the features we’re covering (\u003ca href=\"https://developer.chrome.com/docs/css-ui/access-colors-spaces#color_interpolation\" rel=\"noopener\"\u003ethis section\u003c/a\u003e in particular) to get more context on how everything comes together.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can use the same technique to create \u003ca href=\"https://css-tip.com/color-wheel-gradient/\" rel=\"noopener\"\u003ea color wheel\u003c/a\u003e using a \u003ccode\u003econic-gradient\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground: conic-gradient(in hsl longer hue,red 0 0);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnd while we are on the topic of CSS colors, I shared another fun trick that allows you to \u003ca href=\"https://www.smashingmagazine.com/2023/07/define-array-colors-css/\" rel=\"noopener\"\u003edefine an array of color values… yes, in CSS\u003c/a\u003e! And it only uses a single gradient as well.\u003c/p\u003e\n\n\n\u003ch3 id=\"hover-effects\"\u003eHover effects\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s do another exercise, this time working with hover effects. We tend to rely on pseudo-elements and extra elements when it comes to things like applying underlines and overlays on hover, and we tend to forget that gradients are equally, if not more, effective for getting the job done.\u003c/p\u003e\n\n\n\n\u003cp\u003eCase in point. Let’s use a single gradient to form an underline that slides on hover:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh3 {\n  background: \n    linear-gradient(#1095c1 0 0) no-repeat\n    var(--p,0) 100%/var(--p, 0) .1em;\n  transition: 0.4s, background-position 0s;\n}\n\nh3:hover {\n  --p: 100%;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou likely would have used a pseudo-element for this, right? I think that’s probably how most people would approach it. It’s a viable solution but I find that using a gradient instead results in cleaner, more concise CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou might be interested in \u003ca href=\"https://css-tricks.com/cool-hover-effects-using-background-properties/\"\u003eanother article I wrote for CSS-Tricks\u003c/a\u003e where I use the same technique to create a wide variety of cool hover effects.\u003c/p\u003e\n\n\n\u003ch3 id=\"css-shapes\"\u003eCSS shapes\u003c/h3\u003e\n\n\n\u003cp\u003eCreating shapes with gradients is my favorite thing to do in CSS. I’ve been doing it for what feels like forever and love it so much that I published a \u003ca href=\"https://www.smashingmagazine.com/2024/05/modern-guide-making-css-shapes/\" rel=\"noopener\"\u003e“Modern Guide for Making CSS Shapes”\u003c/a\u003e over at Smashing Magazine earlier this year. I hope you check it out not only to learn more tricks but to see just how many shapes we can create with such a small amount of code — many that rely only on a single CSS gradient.\u003c/p\u003e\n\n\n\n\u003cp\u003eSome of my favorites include zig-zag borders:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e…and “scooped” corners:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e…as well as sparkles:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e…and common icons like the plus sign:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI won’t get into the details of creating these shapes to avoid making this article long and boring. \u003ca href=\"https://www.smashingmagazine.com/2024/05/modern-guide-making-css-shapes/\" rel=\"noopener\"\u003eR\u003c/a\u003e\u003ca href=\"https://www.smashingmagazine.com/2024/05/modern-guide-making-css-shapes/\" rel=\"noopener\"\u003eead the guide\u003c/a\u003e and visit \u003ca href=\"https://css-shape.com/\" rel=\"noopener\"\u003emy CSS Shape collection\u003c/a\u003e and you’ll have everything you need to make these, and more!\u003c/p\u003e\n\n\n\u003ch3 id=\"border-image-tricks\"\u003eBorder image tricks\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s do one more before we put a cap on this. \u003ca href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\" rel=\"noopener\"\u003eEarlier this year\u003c/a\u003e, I discovered how awesome the CSS \u003ccode\u003eborder-image\u003c/code\u003e property is for creating different kinds of decorations and shapes. And guess what? \u003ccode\u003eborder-image\u003c/code\u003e limits us to using just one gradient, so we are obliged to follow that restriction.\u003c/p\u003e\n\n\n\n\u003cp\u003eAgain, just one gradient and we get a bunch of fun results. I’ll drop in my favorites like I did in the last section. Starting with a gradient overlay:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe can use this technique for a full-width background:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e…as well as heading dividers:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e…and even ribbons:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAll of these have traditionally required hacks, magic numbers, and other workarounds. It’s awesome to see modern CSS making things more effortless. Go read \u003ca href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\" rel=\"noopener\"\u003emy article on this topic\u003c/a\u003e to find all the interesting stuff you can make using \u003ccode\u003eborder-image\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eI hope you enjoyed this collection of “single-gradient” tricks. Most folks I know tend to use gradients to create, well, gradients. But as we’ve seen, they are more powerful and can be used for lots of other things, like drawing shapes.\u003c/p\u003e\n\n\n\n\u003cp\u003eI like to add a reminder at the end of an article like this that the goal is not to restrict yourself to using one gradient. You can use more! The goal is to get a better handle on how gradients work and push them in interesting ways — that, in turn, makes us better at writing CSS. So, go forth and experiment — I’d love to see what you make!\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2024-10-11T15:48:01-06:00",
  "modifiedTime": "2024-10-11T17:20:45-06:00"
}
