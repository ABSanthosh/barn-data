{
  "id": "712c8844-fab6-4114-9e98-22915935a8f0",
  "title": "Popping Comments With CSS Anchor Positioning and View-Driven Animations",
  "link": "https://css-tricks.com/popping-comments-with-css-anchor-positioning-and-view-driven-animations/",
  "description": "The State of CSS 2024 survey wrapped up and the results are interesting, as always. Even though each section is worth analyzing, we are usually most hyped about the section on the most used CSS features. And if you ‚Ä¶ Popping Comments With CSS Anchor Positioning and View-Driven Animations originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodr√≠guez",
  "published": "Wed, 06 Nov 2024 15:31:20 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "anchor positioning",
    "Scroll Driven Animation"
  ],
  "byline": "Juan Diego Rodr√≠guez",
  "length": 9229,
  "excerpt": "The State of CSS 2024 survey wrapped up and the results are interesting, as always. Even though each section is worth analyzing, we are usually most hyped",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! The State of CSS 2024 survey wrapped up and the results are interesting, as always. Even though each section is worth analyzing, we are usually most hyped about the section on the most used CSS features. And if you are interested in writing about web development (maybe start writing with us üòâ), you will specifically want to check out the feature‚Äôs Reading List section. It holds the features that survey respondents wish to read about after completing the survey and is usually composed of up-and-coming features with low community awareness. One of the features I was excited to see was my 2024 top pick: CSS Anchor Positioning, ranking in the survey‚Äôs Top 4. Just below, you can find Scroll-Driven Animations, another amazing feature that gained broad browser support this year. Both are elegant and offer good DX, but combining them opens up new possibilities that clearly fall into what most of us would have considered JavaScript territory just last year. I want to show one of those possibilities while learning more about both features. Specifically, we will make the following blog post in which footnotes pop up as comments on the sides of each text. For this demo, our requirements will be: Pop the footnotes up when they get into the screen. Attach them to their corresponding texts. The footnotes are on the sides of the screen, so we need a mobile fallback. The Foundation To start, we will use the following everyday example of a blog post layout: title, cover image, and body of text: The only thing to notice about the markup is that now and then we have a paragraph with a footnote at the end: \u003cmain class=\"post\"\u003e \u003c!-- etc. --\u003e \u003cp class=\"note\"\u003e Super intereseting information! \u003cspan class=\"footnote\"\u003e A footnote about it \u003c/span\u003e \u003c/p\u003e \u003c/main\u003e Positioning the Footnotes In that demo, the footnotes are located inside the body of the post just after the text we want to note. However, we want them to be attached as floating bubbles on the side of the text. In the past, we would probably need a mix of absolute and relative positioning along with finding the correct inset properties for each footnote. However, we can now use anchor positioning for the job, a feature that allows us to position absolute elements relative to other elements ‚Äî rather than just relative to the containment context it is in. We will be talking about ‚Äúanchors‚Äù and ‚Äútargets‚Äù for a while, so a little terminology as we get going: Anchor: This is the element used as a reference for positioning other elements, hence the anchor name. Target: This is an absolutely-positioned element placed relative to one or more anchors. The target is the name we will use from now on, but you will often find it as just an ‚Äúabsolutely positioned element‚Äù in other resources. I won‚Äôt get into each detail, but if you want to learn more about it I highly recommend our Anchor Positioning Guide for complete information and examples. The Anchor and Target It‚Äôs easy to know that each .footnote is a target element. Picking our anchor, however, requires more nuance. While it may look like each .note element should be an anchor element, it‚Äôs better to choose the whole .post as the anchor. Let me explain if we set the .footnote position to absolute: .footnote { position: absolute; } You will notice that the .footnote elements on the post are removed from the normal document flow and they hover visually above their .note elements. This is great news! Since they are already aligned on the vertical axis, we just have to move them on the horizontal axis onto the sides using the post as an anchor. This is when we would need to find the correct inset property to place them on the sides. While this is doable, it‚Äôs a painful choice since: You would have to rely on a magic number. It depends on the viewport. It depends on the footnote‚Äôs content since it changes its width. Elements aren‚Äôt anchors by default, so to register the post as an anchor, we have to use the anchor-name property and give it a dashed-ident (a custom name starting with two dashes) as a name. .post { anchor-name: --post; } In this case, our target element would be the .footnote. To use a target element, we can keep the absolute positioning and select an anchor element using the position-anchor property, which takes the anchor‚Äôs dashed ident. This will make .post the default anchor for the target in the following step. .footnote { position: absolute; position-anchor: --post; } Moving the Target Around Instead of choosing an arbitrary inset value for the .footnote‚Äòs left or right properties, we can use the anchor() function. It returns a \u003clength\u003e value with the position of one side of the anchor, allowing us to always set the target‚Äôs inset properties correctly. So, we can connect the left side of the target to the right side of the anchor and vice versa: .footnote { position: absolute; position-anchor: --post; /* To place them on the right */ left: anchor(right); /* or to place them on the left*/ right: anchor(left); /* Just one of them at a time! */ } However, you will notice that it‚Äôs stuck to the side of the post with no space in between. Luckily, the margin property works just as you are hoping it does with target elements and gives a little space between the footnote target and the post anchor. We can also add a little more styles to make things prettier: .footnote { /* ... */ background-color: #fff; border-radius: 20px; margin: 0px 20px; padding: 20px; } Lastly, all our .footnote elements are on the same side of the post, if we want to arrange them one on each side, we can use the nth-of-type() selector to select the even and odd notes and set them on opposite sides. .note:nth-of-type(odd) .footnote { left: anchor(right); } .note:nth-of-type(even) .footnote { right: anchor(left); } We use nth-of-type() instead of nth-child since we just want to iterate over .note elements and not all the siblings. Just remember to remove the last inset declaration from .footnote, and tada! We have our footnotes on each side. You will notice I also added a little triangle on each footnote, but that‚Äôs beyond the scope of this post: The View-Driven Animation Let‚Äôs get into making the pop-up animation. I find it the easiest part since both view and scroll-driven animation are built to be as intuitive as possible. We will start by registering an animation using an everyday @keyframes. What we want is for our footnotes to start being invisible and slowly become bigger and visible: @keyframes pop-up { from { opacity: 0; transform: scale(0.5); } to { opacity: 1; } } That‚Äôs our animation, now we just have to add it to each .footnote: .footnote { /* ... */ animation: pop-up linear; } This by itself won‚Äôt do anything. We usually would have set an animation-duration for it to start. However, view-driven animations don‚Äôt run through a set time, rather the animation progression will depend on where the element is on the screen. To do so, we set the animation-timeline to view(). .footnote { /* ... */ animation: pop-up linear; animation-timeline: view(); } This makes the animation finish just as the element is leaving the screen. What we want is for it to finish somewhere more readable. The last touch is setting the animation-range to cover 0% cover 40%. This translates to, ‚ÄúI want the element to start its animation when it‚Äôs 0% in the view and end when it‚Äôs at 40% in the view.‚Äù .footnote { /* ... */ animation: pop-up linear; animation-timeline: view(); animation-range: cover 0% cover 40%; } This amazing tool by Bramus focused on scroll and view-driven animation better shows how the animation-range property works. What About Mobile? You may have noticed that this approach to footnotes doesn‚Äôt work on smaller screens since there is no space at the sides of the post. The fix is easy. What we want is for the footnotes to display as normal notes on small screens and as comments on larger screens, we can do that by making our comments only available when the screen is bigger than a certain threshold, which is about 1000px. If it isn‚Äôt, then the notes are displayed on the body of the post as any other note you may find on the web. .footnote { display: flex; gap: 10px; border-radius: 20px; padding: 20px; background-color: #fce6c2; \u0026::before { content: \"Note:\"; font-weight: 600; } } @media (width \u003e 1000px) { /* Styles */ } Now our comments should be displayed on the sides only when there is enough space for them: Wrapping Up If you also like writing about something you are passionate about, you will often find yourself going into random tangents or wanting to add a comment in each paragraph for extra context. At least, that‚Äôs my case, so having a way to dynamically show comments is a great addition. Especially when we achieved using only CSS ‚Äî in a way that we couldn‚Äôt just a year ago!",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382247",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e\u003ca href=\"https://css-tricks.com/state-of-css-2024-results/\"\u003eThe State of CSS 2024 survey\u003c/a\u003e wrapped up and \u003ca href=\"https://css-tricks.com/state-of-css-2024-results/\"\u003ethe results are interesting\u003c/a\u003e, as always. Even though each section is worth analyzing, we are usually most hyped about the section on the most used CSS features. And if you are interested in writing about web development (maybe \u003ca href=\"https://css-tricks.com/guest-writing/\"\u003estart writing with us\u003c/a\u003e üòâ), you will specifically want to check out the feature‚Äôs \u003ca href=\"https://2024.stateofcss.com/en-US/features/#reading_list\" rel=\"noopener\"\u003eReading List\u003c/a\u003e section. It holds the features that survey respondents wish to read about after completing the survey and is usually composed of up-and-coming features with low community awareness.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2080\" height=\"1856\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=2080%2C1856\u0026amp;ssl=1\" alt=\"Reading List Results, showing Anchor Positioning and View Driven Animations at the top 5\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?w=2080\u0026amp;ssl=1 2080w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=300%2C268\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=1024%2C914\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=768%2C685\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=1536%2C1371\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/reading-list.png?resize=2048%2C1827\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOne of the features I was excited to see was my 2024 top pick: \u003cstrong\u003e\u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eCSS Anchor Positioning\u003c/a\u003e\u003c/strong\u003e, ranking in the survey‚Äôs Top 4. Just below, you can find \u003cstrong\u003e\u003ca href=\"https://css-tricks.com/unleash-the-power-of-scroll-driven-animations/\"\u003eScroll-Driven Animations\u003c/a\u003e\u003c/strong\u003e, another amazing feature that gained broad browser support this year. Both are elegant and offer good \u003ca href=\"https://css-tricks.com/what-is-developer-experience-dx/\"\u003eDX\u003c/a\u003e, but combining them opens up new possibilities that clearly fall into what most of us would have considered JavaScript territory just last year.\u003c/p\u003e\n\n\n\n\u003cp\u003eI want to show one of those possibilities while learning more about both features. Specifically, we will make the following blog post in which footnotes pop up as comments on the sides of each text.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eFor this demo, our requirements will be:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ePop the footnotes up when they get into the screen.\u003c/li\u003e\n\n\n\n\u003cli\u003eAttach them to their corresponding texts.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe footnotes are on the sides of the screen, so we need a mobile fallback.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"the-foundation\"\u003eThe Foundation\u003c/h3\u003e\n\n\n\u003cp\u003eTo start, we will use the following everyday example of a blog post layout: title, cover image, and body of text:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe only thing to notice about the markup is that now and then we have a paragraph with a footnote at the end:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;main class=\u0026#34;post\u0026#34;\u0026gt;\n\n  \u0026lt;!-- etc. --\u0026gt;\n\n  \u0026lt;p class=\u0026#34;note\u0026#34;\u0026gt;\n    Super intereseting information!\n    \u0026lt;span class=\u0026#34;footnote\u0026#34;\u0026gt; A footnote about it \u0026lt;/span\u0026gt;\n  \u0026lt;/p\u0026gt;\n\u0026lt;/main\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"positioning-the-footnotes\"\u003ePositioning the Footnotes\u003c/h3\u003e\n\n\n\u003cp\u003eIn that demo, the footnotes are located inside the body of the post just after the text we want to note. However, we want them to be attached as floating bubbles on the side of the text. In the past, we would probably need a mix of absolute and relative positioning along with finding the correct inset properties for each footnote.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, we can now use anchor positioning for the job, a feature that allows us to position absolute elements relative to other elements ‚Äî rather than just relative to the containment context it is in. We will be talking about ‚Äúanchors‚Äù and ‚Äútargets‚Äù for a while, so a little terminology as we get going:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAnchor: \u003c/strong\u003eThis is the element used as a reference for positioning other elements, hence the anchor name.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTarget:\u003c/strong\u003e This is an absolutely-positioned element placed relative to one or more anchors. The target is the name we will use from now on, but you will often find it as just an ‚Äúabsolutely positioned element‚Äù in other resources.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eI won‚Äôt get into each detail, but if you want to learn more about it I highly recommend our \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eAnchor Positioning Guide\u003c/a\u003e for complete information and examples.\u003c/p\u003e\n\n\n\u003ch4 id=\"the-anchor-and-target\"\u003eThe Anchor and Target\u003c/h4\u003e\n\n\n\u003cp\u003eIt‚Äôs easy to know that each \u003ccode\u003e.footnote\u003c/code\u003e is a target element. Picking our anchor, however, requires more nuance. While it may look like each .note element should be an anchor element, it‚Äôs better to choose the whole \u003ccode\u003e.post\u003c/code\u003e as the anchor. Let me explain if we set the \u003ccode\u003e.footnote\u003c/code\u003e position to absolute:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  position: absolute;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou will notice that the \u003ccode\u003e.footnote\u003c/code\u003e elements on the post are removed from the normal document flow and they hover visually above their \u003ccode\u003e.note\u003c/code\u003e elements. This is great news! Since they are already aligned on the vertical axis, we just have to move them on the horizontal axis onto the sides using the post as an anchor.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?resize=1024%2C576\u0026amp;ssl=1\" alt=\"Example of the footnotes inside the posts and where do we want them\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?resize=1536%2C864\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/example1.png?w=1920\u0026amp;ssl=1 1920w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis is when we would need to find the correct inset property to place them on the sides. While this is doable, it‚Äôs a painful choice since:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eYou would have to rely on a magic number.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt depends on the viewport.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt depends on the footnote‚Äôs content since it changes its width.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eElements aren‚Äôt anchors by default, so to register the post as an anchor, we have to use the \u003ca href=\"https://css-tricks.com/almanac/properties/a/anchor-name/\"\u003e\u003ccode\u003eanchor-name\u003c/code\u003e\u003c/a\u003e property and give it a dashed-ident (a custom name starting with two dashes) as a name.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.post {\n  anchor-name: --post;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this case, our target element would be the \u003ccode\u003e.footnote\u003c/code\u003e. To use a target element, we can keep the absolute positioning and select an anchor element using the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/p/position-anchor/\"\u003eposition-anchor\u003c/a\u003e\u003c/code\u003e property, which takes the anchor‚Äôs dashed ident. This will make \u003ccode\u003e.post\u003c/code\u003e the default anchor for the target in the following step.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  position: absolute;\n  position-anchor: --post;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"moving-the-target-around\"\u003eMoving the Target Around\u003c/h4\u003e\n\n\n\u003cp\u003eInstead of choosing an arbitrary inset value for the \u003ccode\u003e.footnote\u003c/code\u003e‚Äòs \u003ccode\u003eleft\u003c/code\u003e or \u003ccode\u003eright\u003c/code\u003e properties, we can use the \u003ca href=\"https://css-tricks.com/almanac/functions/a/anchor/\"\u003e\u003ccode\u003eanchor()\u003c/code\u003e\u003c/a\u003e function. It returns a \u003ccode\u003e\u0026lt;length\u0026gt;\u003c/code\u003e value with the position of one side of the anchor, allowing us to always set the target‚Äôs inset properties correctly. So, we can connect the left side of the target to the right side of the anchor and vice versa:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  position: absolute;\n  position-anchor: --post;\n\n  /* To place them on the right */\n  left: anchor(right);\n\n  /* or to place them on the left*/\n  right: anchor(left);\n\n  /* Just one of them at a time! */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, you will notice that it‚Äôs stuck to the side of the post with no space in between. Luckily, the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/m/margin/\"\u003emargin\u003c/a\u003e\u003c/code\u003e property works just as you are hoping it does with target elements and gives a little space between the footnote target and the post anchor. We can also add a little more styles to make things prettier:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  /* ... */\n\n  background-color: #fff;\n  border-radius: 20px;\n  margin: 0px 20px;\n  padding: 20px;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLastly, all our \u003ccode\u003e.footnote\u003c/code\u003e elements are on the same side of the post, if we want to arrange them one on each side, we can use the \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/n/nth-of-type/\"\u003e\u003ccode\u003enth-of-type()\u003c/code\u003e\u003c/a\u003e selector to select the \u003ccode\u003eeven\u003c/code\u003e and \u003ccode\u003eodd\u003c/code\u003e notes and set them on opposite sides.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.note:nth-of-type(odd) .footnote {\n  left: anchor(right);\n}\n\n.note:nth-of-type(even) .footnote {\n  right: anchor(left);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe use \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/n/nth-of-type/\"\u003e\u003ccode\u003enth-of-type()\u003c/code\u003e\u003c/a\u003e instead of \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/n/nth-child/\"\u003e\u003ccode\u003enth-child\u003c/code\u003e\u003c/a\u003e since we just want to iterate over \u003ccode\u003e.note\u003c/code\u003e elements and not all the siblings.\u003c/p\u003e\n\n\n\n\u003cp\u003eJust remember to remove the last inset declaration from \u003ccode\u003e.footnote\u003c/code\u003e, and \u003cem\u003etada\u003c/em\u003e! We have our footnotes on each side. You will notice I also added a little triangle on each footnote, but that‚Äôs beyond the scope of this post:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"the-view-driven-animation\"\u003eThe View-Driven Animation\u003c/h3\u003e\n\n\n\u003cp\u003eLet‚Äôs get into making the pop-up animation. I find it the easiest part since both view and scroll-driven animation are built to be as intuitive as possible. We will start by registering an animation using an everyday \u003ccode\u003e@keyframes\u003c/code\u003e. What we want is for our footnotes to start being invisible and slowly become bigger and visible:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes pop-up {\n  from {\n    opacity: 0;\n    transform: scale(0.5);\n  }\n\n  to {\n    opacity: 1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat‚Äôs our animation, now we just have to add it to each \u003ccode\u003e.footnote\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  /* ... */\n  animation: pop-up linear;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis by itself won‚Äôt do anything. We usually would have set an \u003ca href=\"https://css-tricks.com/almanac/properties/a/animation/\"\u003e\u003ccode\u003eanimation-duration\u003c/code\u003e\u003c/a\u003e for it to start. However, view-driven animations don‚Äôt run through a set time, rather the animation progression will depend on where the element is on the screen. To do so, we set the \u003ccode\u003eanimation-timeline\u003c/code\u003e to \u003ccode\u003eview()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"4\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  /* ... */\n  animation: pop-up linear;\n  animation-timeline: view();\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis makes the animation finish just as the element is leaving the screen. What we want is for it to finish somewhere more readable. The last touch is setting the \u003ccode\u003eanimation-range\u003c/code\u003e to \u003ccode\u003ecover 0% cover 40%\u003c/code\u003e. This translates to, \u003cem\u003e‚ÄúI want the element to start its animation when it‚Äôs 0% in the view and end when it‚Äôs at 40% in the view.‚Äù\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"5\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  /* ... */\n  animation: pop-up linear;\n  animation-timeline: view();\n  animation-range: cover 0% cover 40%;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis amazing tool by Bramus focused on scroll and view-driven animation better shows how \u003ca href=\"https://scroll-driven-animations.style/tools/view-timeline/ranges/#range-start-name=cover\u0026amp;range-start-percentage=0\u0026amp;range-end-name=cover\u0026amp;range-end-percentage=40\u0026amp;view-timeline-axis=block\u0026amp;view-timeline-inset=0\u0026amp;subject-size=smaller\u0026amp;subject-animation=reveal\u0026amp;interactivity=clicktodrag\u0026amp;show-areas=yes\u0026amp;show-fromto=yes\u0026amp;show-labels=yes\" rel=\"noopener\"\u003ethe \u003ccode\u003eanimation-range\u003c/code\u003e property works\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-about-mobile-\"\u003eWhat About Mobile?\u003c/h3\u003e\n\n\n\u003cp\u003eYou may have noticed that this approach to footnotes doesn‚Äôt work on smaller screens since there is no space at the sides of the post. The fix is easy. What we want is for the footnotes to display as normal notes on small screens and as comments on larger screens, we can do that by making our comments only available when the screen is bigger than a certain threshold, which is about \u003ccode\u003e1000px\u003c/code\u003e. If it isn‚Äôt, then the notes are displayed on the body of the post as any other note you may find on the web.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.footnote {\n  display: flex;\n  gap: 10px;\n\n  border-radius: 20px;\n  padding: 20px;\n\n  background-color: #fce6c2;\n\n  \u0026amp;::before {\n    content: \u0026#34;Note:\u0026#34;;\n    font-weight: 600;\n  }\n}\n\n@media (width \u0026gt; 1000px) {\n  /* Styles */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow our comments should be displayed on the sides only when there is enough space for them:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"conclusion\"\u003eWrapping Up\u003c/h3\u003e\n\n\n\u003cp\u003eIf you also like writing about something you are passionate about, you will often find yourself going into random tangents or wanting to add a comment in each paragraph for extra context. At least, that‚Äôs my case, so having a way to dynamically show comments is a great addition. Especially when we achieved using only CSS ‚Äî in a way that we couldn‚Äôt just a year ago!\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2024-11-06T08:31:20-07:00",
  "modifiedTime": "2024-11-06T13:01:56-07:00"
}
