{
  "id": "b18e624f-fe8d-4818-8591-c7ac8b97e5b0",
  "title": "The Little Triangle in the Tooltip",
  "link": "https://css-tricks.com/the-little-triangle-in-the-tooltip/",
  "description": "Today, I want to focus on what I'll call the little triangle in the tooltip. It receives minimal attention but it amazes you by how many ways there are to make them. Let's start with the simplest and make our way up to the not-so-simple. The Little Triangle in the Tooltip originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Fri, 20 Dec 2024 16:31:05 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "tooltip"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 9235,
  "excerpt": "Today, I want to focus on what I'll call the little triangle in the tooltip. It receives minimal attention but it amazes you by how many ways there are to make them. Let's start with the simplest and make our way up to the not-so-simple.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Tooltips are like homemade food: everyone uses them and everyone has their own recipe to make them. If you don’t remember a particular recipe, you will search for one, follow it, and go on with your day. This “many ways to do the same thing” concept is general to web development and programming (and life!), but it’s something that especially rings true with tooltips. There isn’t a specialized way to make them — and at this point, it isn’t needed — so people come up with different ways to fill those gaps. Today, I want to focus on just one step of the recipe, which due to lack of a better name, I’ll just call the little triangle in the tooltip. It’s one of those things that receives minimal attention (admittedly, I didn’t know much before writing this) but it amazes you how many ways there are to make them. Let’s start with the simplest and make our way up to the not-so-simple. Ideally, the tooltip is just one element. We want to avoid polluting our markup just for that little triangle: \u003cspan class=\"tooltip\"\u003eI am a tooltip\u003c/span\u003e Clever border Before running, we have to learn to walk. And before connecting that little triangle we have to learn to make a triangle. Maybe the most widespread recipe for a triangle is the border trick, one that can be found in Stack Overflow issues from 2010 or even here by Chris in 2016. In a nutshell, borders meet each other at 45° angles, so if an element has a border but no width and height, the borders will make four perfect triangles. What’s left is to set three border colors to transparent and only one triangle will show! You can find an animated version on this CodePen by Chris Coyier Usually, our little triangle will be a pseudo-element of the tooltip, so we need to set its dimensions to 0px (which is something ::before and ::after already do) and only set one of the borders to a solid color. We can control the size of the triangle base by making the other borders wider, and the height by making the visible border larger. .tooltip { \u0026::before { content: \"\"; border-width: var(--triangle-base); border-style: solid; border-color: transparent; border-top: var(--triangle-height) solid red; } } Attaching the triangle to its tooltip is an art in itself, so I am going with the basics and setting the little triangle’s position to absolute and the .tooltip to relative, then playing with its inset properties to place it where we want. The only thing to notice is that we will have to translate the little triangle to account for its width, -50% if we are setting its position with the left property, and 50% if we are using right. .tooltip { position: relative; \u0026::before { /* ... */ position: absolute; top: var(--triangle-top); left: var(--triangle-left); transform: translateX(-50%); } } However, we could even use the new Anchor Positioning properties for the task. Whichever method you choose, we should now have that little triangle attached to the tooltip: Rotated square One drawback from that last example is that we are blocking the border property so that if we need it for something else, we are out of luck. However, there is another old-school method to make that little triangle: we rotate a square by 45° degrees and hide half of it behind the tooltip’s body. This way, only the corner shows in the shape of a triangle. We can make the square out of a pseudo-element: .tooltip { \u0026::before { content: \"\"; display: block; height: var(--triangle-size); width: var(--triangle-size); background-color: red; } } Then, position it behind the tooltip’s body. In this case, such that only one-half shows. Since the square is rotated, the transformation will be on both axes. .tooltip { position: relative; \u0026::before { /* ... */ position: absolute; top: 75%; left: 50%; z-index: -1; /* So it's behind the tooltip's body */ transform: translateX(-50%); transform: rotate(45deg) translateY(25%) translateX(-50%); } } I also found that this method works better with Anchor Positioning since we don’t have to change the little triangle’s styles whenever we move it around. Unlike the border method, in which the visible border changes depending on the direction. Trimming the square with clip-path Although I didn’t mention it before, you may have noticed some problems with that last approach. First off, it isn’t exactly a triangle, so it isn’t the most bulletproof take; if the tooltip is too short, the square could sneak out on the top, and moving the false triangle to the sides reveals its true square nature. We can solve both issues using the clip-path property. The clip-path property allows us to select a region of an element to display while clipping the rest. It works by providing the path we want to trim through, and since we want a triangle out of a square, we can use the polygon() function. It takes points in the element and trims through them in straight lines. The points can be written as percentages from the origin (i.e., top-left corner), and in this case, we want to trim through three points 0% 0% (top-left corner), 100% 0% (top-right corner) and 50% 100% (bottom-center point). So, the clip-path value would be the polygon() function with those three points in a comma-separated list: .tooltip { \u0026::before { content: \"\"; width: var(--triangle-base); height: var(--triangle-height); clip-path: polygon(0% 0%, 100% 0%, 50% 100%); transform: translate(-50%); background-color: red; } } This time, we will set the top and left properties using CSS variables, which will come in handy later. .tooltip { position: relative; \u0026::before { /* ... */ position: absolute; top: var(--triangle-top); /* 100% */ left: var(--triangle-left); /* 50% */ transform: translate(-50%); } } And now we should have a true little triangle attached to the tooltip: However, if we take the little triangle to the far end of any side, we can still see how it slips out of the tooltip’s body. Luckily, the clip-path property gives us better control of the triangle’s shape. In this case, we can change the points the trim goes through depending on the horizontal position of the little triangle. For the top-left corner, we want its horizontal value to approach 50% when the tooltip’s position approaches 0%, while the top-right corner should approach 50% when the tooltip position approaches 100%. The following min() + max() combo does exactly that: .tooltip { clip-path: polygon( max(50% - var(--triangle-left), 0%) 0, min(150% - var(--triangle-left), 100%) 0%, 50% 100% ); } The calc() function isn’t necessary inside math functions like min() and max(). Try to move the tooltip around and see how its shape changes depending on where it is on the horizontal axis: Using the border-image property It may look like our last little triangle is the ultimate triangle. However, imagine a situation where you have already used both pseudo-elements and can’t spare one for the little triangle, or simply put, you want a more elegant way of doing it without any pseudo-elements. The task may seem impossible, but we can use two properties for the job: the already-seen clip-path and the border-image property. Using the clip-path property, we could trim the shape of a tooltip — with the little triangle included! — directly out of the element. The problem is that the element’s background isn’t big enough to account for the little triangle. However, we can use the border-image property to make an overgrown background. The syntax is a bit complex, so I recommend reading this full dive into border-image by Temani Afif. In short, it allows us to use an image or CSS gradient as the border of an element. In this case, we are making a border as wide as the triangle height and with a solid color. .tooltip { border-image: fill 0 // var(--triangle-height) conic-gradient(red 0 0);; } The trim this time will be a little more complex, since we will also trim the little triangle, so more points are needed. Exactly, the following seven points: This translates to the following clip-path value: .tooltip { /* ... */ clip-path: polygon( 0% 100%, 0% 0%, 100% 0%, 100% 100%, calc(50% + var(--triangle-base) / 2) 100%, 50% calc(100% + var(--triangle-height)), calc(50% - var(--triangle-base) / 2) 100% ); } We can turn it smart by also capping the little triangle bottom point whenever it gets past any side of the tooltip: .tooltip { /* ... */ clip-path: polygon( 0% 100%, 0% 0%, 100% 0%, 100% 100%, min(var(--triangle-left) + var(--triangle-base) / 2, 100%) 100%, var(--triangle-left) calc(100% + var(--triangle-height)), max(var(--triangle-left) - var(--triangle-base) / 2, 0%) 100% ; } And now we have our final little triangle of the tooltip, one that is part of the main body and only uses one element! More information The Complex But Awesome CSS border-image Property (Temani Afif) Transforming Borders into Cool CSS Triangles (Optimistic Web)",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383224",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eTooltips are like homemade food: everyone uses them and everyone has their own recipe to make them. If you don’t remember a particular recipe, you will search for one, follow it, and go on with your day. This \u003ca href=\"https://css-tricks.com/left-and-right/\"\u003e“many ways to do the same thing”\u003c/a\u003e concept is general to web development and programming (and life!), but it’s something that especially rings true with tooltips. There isn’t a specialized way to make them — and at this point, it isn’t needed — so people come up with different ways to fill those gaps.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday, I want to focus on just one step of the recipe, which due to lack of a better name, I’ll just call the \u003cem\u003elittle triangle in the tooltip\u003c/em\u003e. It’s one of those things that receives minimal attention (admittedly, I didn’t know much before writing this) but it amazes you how many ways there are to make them. Let’s start with the simplest and make our way up to the not-so-simple.\u003c/p\u003e\n\n\n\n\u003cp\u003eIdeally, the tooltip is just one element. We want to avoid polluting our markup just for that little triangle:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;span class=\u0026#34;tooltip\u0026#34;\u0026gt;I am a tooltip\u0026lt;/span\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"clever-border\"\u003eClever border\u003c/h3\u003e\n\n\n\u003cp\u003eBefore running, we have to learn to walk. And before connecting that little triangle we have to learn to make a triangle. Maybe the most widespread recipe for a triangle is the border trick, one that can be found in \u003ca href=\"https://stackoverflow.com/questions/5623072/how-can-i-create-a-tooltip-tail-using-pure-css/5623150#5623150\" rel=\"noopener\"\u003eStack Overflow issues from 2010\u003c/a\u003e or even \u003ca href=\"https://css-tricks.com/snippets/css/css-triangle/\"\u003ehere by Chris in 2016\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn a nutshell, borders meet each other at 45° angles, so if an element has a border but no \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e, the borders will make four perfect triangles. What’s left is to set three border colors to \u003ccode\u003etransparent\u003c/code\u003e and only one triangle will show! You can find an animated version on this \u003ca href=\"https://codepen.io/chriscoyier/pen/DELgOJ\" rel=\"noopener\"\u003eCodePen by Chris Coyier\u003c/a\u003e\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eUsually, our little triangle will be a pseudo-element of the tooltip, so we need to set its dimensions to \u003ccode\u003e0px\u003c/code\u003e (which is something \u003ccode\u003e::before\u003c/code\u003e and \u003ccode\u003e::after\u003c/code\u003e already do) and only set one of the borders to a solid color. We can control the size of the triangle base by making the other borders wider, and the height by making the visible border larger.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  \u0026amp;::before {\n    content: \u0026#34;\u0026#34;;\n\n    border-width: var(--triangle-base);\n    border-style: solid;\n    border-color: transparent;\n\n    border-top: var(--triangle-height) solid red;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAttaching the triangle to its tooltip is an art in itself, so I am going with the basics and setting the little triangle’s position to \u003ccode\u003eabsolute\u003c/code\u003e and the \u003ccode\u003e.tooltip\u003c/code\u003e to \u003ccode\u003erelative\u003c/code\u003e, then playing with its inset properties to place it where we want. The only thing to notice is that we will have to translate the little triangle to account for its width, \u003ccode\u003e-50%\u003c/code\u003e if we are setting its position with the \u003ccode\u003eleft\u003c/code\u003e property, and \u003ccode\u003e50%\u003c/code\u003e if we are using \u003ccode\u003eright\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  position: relative;\n\n  \u0026amp;::before {\n    /* ... */\n    position: absolute;\n    top: var(--triangle-top);\n    left: var(--triangle-left);\n\n    transform: translateX(-50%);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, we could even use the new \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eAnchor Positioning\u003c/a\u003e properties for the task. Whichever method you choose, we should now have that little triangle attached to the tooltip:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"rotated-square\"\u003eRotated square\u003c/h3\u003e\n\n\n\u003cp\u003eOne drawback from that last example is that we are blocking the \u003ccode\u003eborder\u003c/code\u003e property so that if we need it for something else, we are out of luck. However, there is another old-school method to make that little triangle: we rotate a square by 45° degrees and hide half of it behind the tooltip’s body. This way, only the corner shows in the shape of a triangle. We can make the square out of a pseudo-element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  \u0026amp;::before {\n    content: \u0026#34;\u0026#34;;\n\n    display: block;\n    height: var(--triangle-size);\n    width: var(--triangle-size);\n\n    background-color: red;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, position it behind the tooltip’s body. In this case, such that only one-half shows. Since the square is rotated, the transformation will be on both axes.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  position: relative;\n\n  \u0026amp;::before {\n    /* ... */\n    position: absolute;\n    top: 75%;\n    left: 50%;\n    z-index: -1; /* So it\u0026#39;s behind the tooltip\u0026#39;s body */\n\n    transform: translateX(-50%);\n    transform: rotate(45deg) translateY(25%) translateX(-50%);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI also found that this method works better with Anchor Positioning since we don’t have to change the little triangle’s styles whenever we move it around. Unlike the border method, in which the visible border changes depending on the direction.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"trimming-the-square-with-clip-path\"\u003eTrimming the square with \u003ccode\u003eclip-path\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eAlthough I didn’t mention it before, you may have noticed some problems with that last approach. First off, it isn’t exactly a triangle, so it isn’t the most bulletproof take; if the tooltip is too short, the square could sneak out on the top, and moving the \u003cem\u003efalse triangle\u003c/em\u003e to the sides reveals its true square nature. We can solve both issues using the \u003ca href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"\u003e\u003ccode\u003eclip-path\u003c/code\u003e\u003c/a\u003e property.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eclip-path\u003c/code\u003e property allows us to select a region of an element to display while clipping the rest. It works by providing the path we want to trim through, and since we want a triangle out of a square, we can use the \u003ccode\u003epolygon()\u003c/code\u003e function. It takes points in the element and trims through them in straight lines. The points can be written as percentages from the origin (i.e., top-left corner), and in this case, we want to trim through three points \u003ccode\u003e0% 0%\u003c/code\u003e (top-left corner), \u003ccode\u003e100% 0%\u003c/code\u003e (top-right corner) and \u003ccode\u003e50% 100%\u003c/code\u003e (bottom-center point).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"Path to trim an isosceles triangle\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/clip-path.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSo, the \u003ccode\u003eclip-path\u003c/code\u003e value would be the \u003ccode\u003epolygon()\u003c/code\u003e function with those three points in a comma-separated list:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  \u0026amp;::before {\n    content: \u0026#34;\u0026#34;;\n\n    width: var(--triangle-base);\n    height: var(--triangle-height);\n\n    clip-path: polygon(0% 0%, 100% 0%, 50% 100%);\n    transform: translate(-50%);\n\n    background-color: red;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis time, we will set the \u003ccode\u003etop\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties using CSS variables, which will come in handy later.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  position: relative;\n\n  \u0026amp;::before {\n    /* ... */\n    position: absolute;\n    top: var(--triangle-top); /* 100% */\n    left: var(--triangle-left); /* 50% */\n\n    transform: translate(-50%);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd now we should have a true little triangle attached to the tooltip:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eHowever, if we take the little triangle to the far end of any side, we can still see how it slips out of the tooltip’s body. Luckily, the \u003ccode\u003eclip-path\u003c/code\u003e property gives us better control of the triangle’s shape. In this case, we can change the points the trim goes through depending on the horizontal position of the little triangle. For the top-left corner, we want its horizontal value to approach \u003ccode\u003e50%\u003c/code\u003e when the tooltip’s position approaches \u003ccode\u003e0%\u003c/code\u003e, while the top-right corner should approach \u003ccode\u003e50%\u003c/code\u003e when the tooltip position approaches \u003ccode\u003e100%\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"Path to trim right triangles\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/smart-clip-path.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe following \u003ccode\u003emin()\u003c/code\u003e + \u003ccode\u003emax()\u003c/code\u003e combo does exactly that:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  clip-path: polygon(\n    max(50% - var(--triangle-left), 0%) 0,\n    min(150% - var(--triangle-left), 100%) 0%,\n    50% 100%\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecalc()\u003c/code\u003e function isn’t necessary inside math functions like \u003ccode\u003emin()\u003c/code\u003e and \u003ccode\u003emax()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTry to move the tooltip around and see how its shape changes depending on where it is on the horizontal axis:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"border-image-clip-path\"\u003eUsing the \u003ccode\u003eborder-image\u003c/code\u003e property\u003c/h3\u003e\n\n\n\u003cp\u003eIt may look like our last little triangle is the ultimate triangle. However, imagine a situation where you have already used both pseudo-elements and can’t spare one for the little triangle, or simply put, you want a more elegant way of doing it without any pseudo-elements. The task may seem impossible, but we can use two properties for the job: the already-seen \u003ccode\u003eclip-path\u003c/code\u003e and the \u003ccode\u003eborder-image\u003c/code\u003e property.\u003c/p\u003e\n\n\n\n\u003cp\u003eUsing the \u003ccode\u003eclip-path\u003c/code\u003e property, we could trim the shape of a tooltip — with the little triangle included! — directly out of the element. The problem is that the element’s background isn’t big enough to account for the little triangle. However, we can use the \u003ccode\u003eborder-image\u003c/code\u003e property to make an overgrown background. The syntax is a bit complex, so I recommend reading this \u003ca href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\" rel=\"noopener\"\u003efull dive into \u003ccode\u003eborder-image\u003c/code\u003e by Temani Afif\u003c/a\u003e. In short, it allows us to use an image or CSS gradient as the border of an element. In this case, we are making a border as wide as the triangle height and with a solid color.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  border-image: fill 0 // var(--triangle-height) conic-gradient(red 0 0);;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe trim this time will be a little more complex, since we will also trim the little triangle, so more points are needed. Exactly, the following seven points:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"The clip-path trim the shape of a tooltip body and little triangle\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/border-image-and-clip-path-1.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis translates to the following \u003ccode\u003eclip-path\u003c/code\u003e value:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  /* ... */\n  clip-path: polygon(\n    0% 100%,\n    0% 0%,\n    100% 0%,\n    100% 100%,\n    calc(50% + var(--triangle-base) / 2) 100%,\n    50% calc(100% + var(--triangle-height)),\n    calc(50% - var(--triangle-base) / 2) 100%\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can turn it smart by also capping the little triangle bottom point whenever it gets past any side of the tooltip:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  /* ... */\n  clip-path: polygon(\n    0% 100%,\n    0% 0%,\n    100% 0%,\n    100% 100%,\n    min(var(--triangle-left) + var(--triangle-base) / 2, 100%) 100%,\n    var(--triangle-left) calc(100% + var(--triangle-height)),\n    max(var(--triangle-left) - var(--triangle-base) / 2, 0%) 100%\n  ;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd now we have our final little triangle of the tooltip, one that is part of the main body and only uses one element!\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"more-information\"\u003eMore information\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\" rel=\"noopener\"\u003eThe Complex But Awesome CSS \u003ccode\u003eborder-image\u003c/code\u003e Property\u003c/a\u003e (Temani Afif)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/shorts/CKVnZ4Cq23U\" rel=\"noopener\"\u003eTransforming Borders into Cool CSS Triangles\u003c/a\u003e (Optimistic Web)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n    \t\t\n    \n  \n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2024-12-20T09:31:05-07:00",
  "modifiedTime": "2024-12-20T09:51:39-07:00"
}
