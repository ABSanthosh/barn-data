{
  "id": "efcf9ff5-71bc-48b7-8240-9ea3ea8bb5b0",
  "title": "Chrome 139 beta",
  "link": "https://developer.chrome.com/blog/chrome-139-beta?hl=en",
  "description": "Find out about the new features coming to Chrome with the latest beta.",
  "author": "",
  "published": "Wed, 25 Jun 2025 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 14545,
  "excerpt": "Find out about the new features coming to Chrome with the latest beta.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/chrome/images/favicon.png",
  "text": "Published: June 25, 2025 Unless otherwise noted, the following changes apply to the newest Chrome beta channel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more about the features listed here through the provided links or from the list on ChromeStatus.com. Chrome 139 is beta as of 25 June 2025. You can download the latest on Google.com for desktop or on Google Play Store on Android. CSS This release adds six new CSS and UI features. Short-circuiting var() and attr() When the fallback is not taken, var() and attr() functions evaluate without looking for cycles in that fallback. The following CSS works, because --green and --blue exist. --green: green; --blue: blue; --a: var(--green, var(--b)); --b: var(--blue, var(--a)); CSS caret-animation property Chrome already supported animation of the caret-color property, but when animated the default blinking behavior of the caret interfered with the animation. The CSS caret-animation property has two possible values: auto and manual, where auto means browser default (blinking) and manual means the web developer is controlling the caret animation. The property also lets users disable blinking using a user stylesheet. Corner shaping Enable styling corners, on top of the existing border-radius, by specifying the shape or curvature of the corner. This lets you create shapes like squircles, notches, and scoops, and animate between them. Learn more in this post from Amit Sheen. Continue running transitions when switching to the initial transition value. When the transition related properties change, they are only supposed to affect newly started transitions. This means that if you change the transition properties, unless you also change the properties which have active transition animations, those transition animations will continue with the previously specified duration, easing, etc. Blink incorrectly canceled transitions when the transition property was set to \"none\", even though it doesn't cancel them if you only change the transition-duration. With this feature, blink will be consistent with webkit and gecko, allowing active transitions to continue running, unless or until their property value changes triggering a new transition update. CSS Custom Functions Custom Functions are similar to custom properties, but instead of returning a single, fixed value, they return values based on other custom properties, parameters, and conditionals. @function --negate(--value) { result: calc(var(--value) * -1); } div { --gap: 1em; margin-top: --negate(var(--gap)); } Support width and height as presentation attributes on nested \u003csvg\u003e elements Supports applying width and height as presentation attributes on nested \u003csvg\u003e elements through both SVG markup and CSS. This dual approach provides even greater flexibility, letting you manage and style SVG elements more efficiently within complex designs. Web APIs Web App Manifest: specify update eligibility, icon URLs are Cache-Control: immutable Specify an update eligibility algorithm in the manifest spec. This makes the update process more deterministic and predictable, giving developers more control over whether (and when) updates should apply to existing installations, and allowing removal of the 'update check throttle' that user agents currently need to implement to avoid wasting network resources. WebXR Depth Sensing Performance Improvements Exposes several new mechanisms to customize the behavior of the depth sensing feature within a WebXR session, with the goal of improving the performance of the generation or consumption of the depth buffer. The key mechanisms exposed are: the ability to request the raw or smooth depth buffer, the ability to request that the runtime stop or resume providing the depth buffer, and the ability to expose a depth buffer that does not align with the user's view exactly, so that the user agent does not need to perform unnecessary re-projections every frame. Allow more characters in JavaScript DOM APIs The HTML parser has always (or for a long time) allowed elements and attributes to have a wide variety of valid characters and names, but the JavaScript DOM APIs that create the same elements and attributes are more strict and don't match the parser. This change relaxes the validation of the JavaScript DOM APIs to match the HTML parser. request-close invoker command Dialog elements can be closed through a variety of mechanisms, sometimes developers want to have the ability to prevent closure. To achieve this dialogs fire a cancel event. Originally this was only fired via a close request (for example, Esc key press), recently a requestClose() JS function was added which also fires the cancel event. The request-close command brings that new ability to the declarative invoker commands API. WebGPU: 3D texture support for BC and ASTC compressed formats The texture-compression-bc-sliced-3d and texture-compression-astc-sliced-3d WebGPU features add respectively 3D texture support for BC and ASTC compressed formats. Secure Payment Confirmation: Browser Bound Keys Adds an additional cryptographic signature over Secure Payment Confirmation assertions and credential creation. The corresponding private key is not synced across devices. This helps web developers meet requirements for device binding for payment transactions. Secure Payment Confirmation: UX Refresh Updates the UX elements for the SPC dialog on Android Chrome. Other than just UX presentation the following are being added: Lets merchants provide an optional list of payment entity logos related to the payment that will be displayed. Returning different output states back to the merchant depending on whether the user wants to continue the transaction without SPC or to cancel the transaction. Adds a new payment detail label field to the payment instrument so the text is presented across two lines. WebGPU core-features-and-limits The core-features-and-limits feature signifies that a WebGPU adapter and device support the core features and limits of the spec. Scroll anchoring priority candidate fix Currently, the scroll anchoring algorithm selects priority candidates when they are available as anchor targets. The priority candidates are currently a focused editable element and find-in-page highlights. This can cause suboptimal user experience if there is a large focused contenteditable element that has content changed offscreen (the cursor ends up being shifted as a consequence). This fix changes the algorithm: instead of selecting the priority candidate as the anchor, use the candidate as the scope or root of the regular anchor selection algorithm that selects the deepest onscreen element as the anchor. Support the async attribute for SVG \u003cscript\u003e elements The SVGScriptElement interface in SVG 2.0 introduces the async attribute, similar to the HTMLScriptElement. This attribute allows scripts to be executed asynchronously, improving the performance and responsiveness of web applications that use SVG. On-device Web Speech API This feature adds on-device speech recognition support to the Web Speech API, allowing websites to ensure that neither audio nor transcribed speech are sent to a third-party service for processing. Websites can query the availability of on-device speech recognition for specific languages, prompt users to install the necessary resources for on-device speech recognition, and choose between on-device or cloud-based speech recognition as needed. Clear window.name for cross-site navigations that switch browsing context group The value of the window.name property is currently preserved throughout the lifetime of a tab, even with navigation that switches browsing context groups, which can leak information and potentially be used as a tracking vector. Clearing the window.name property addresses this issue. This should be a low risk change since looking up a browsing context by name already doesnâ€™t work if it's in another browsing context group, so the name isn't actually useful. Enterprise Policy: ClearWindowNameCrossSiteBrowsing (will stop working in Chrome 142). Web app scope extensions Adds a \"scope_extensions\" web app manifest field that enables web apps to extend their scope to other origins. This allows sites that control multiple subdomains and top level domains to be presented as a single web app. Requires listed origins to confirm association with the web app using a .well-known/web-app-origin-association configuration file. Specification-compliant JSON MIME type detection Chromium now recognizes all valid JSON MIME types as defined by the WHATWG mimesniff specification. This includes any MIME type whose subtype ends with +json, in addition to the traditional application/json and text/json. This change ensures that web APIs and features relying on JSON detection behave consistently with the web platform standard and other browsers. A key motivation for this change is to fix JSON module import behavior, where previously valid JSON MIME types like text/html+json and image/svg+json would fail to load as modules. Private Aggregation API: aggregate error reporting There are a range of error conditions that can be hit when using the Private Aggregation API. For example, the privacy budget could run out, preventing any further histogram contributions. This feature allows developers to register histogram contributions that should only be sent if a particular type of error occurs. This feature supports measuring the frequency of the error conditions and to split these measurements on relevant developer-specified dimensions (e.g. version of deployed code). As the errors themselves may be cross-site information, we cannot simply expose them to the page for users without third-party cookies. Instead, this feature reuses the existing aggregate, noised reporting pipelines through the Aggregation Service. Crash Reporting API: Specify crash-reporting to receive only crash reports This feature ensures developers receive only crash reports by specifying the endpoint named crash-reporting. By default, crash reports are delivered to the default endpoint which receives many other kinds of reports besides crash reports. Developers can supply a separate URL to the well-known endpoint named crash-reporting, to direct crash reports there, instead of the default endpoint. Reduces the amount of information the Accept-Language header value string exposes in HTTP requests and in navigator.languages. Instead of sending a full list of the user's preferred languages on every HTTP request with the Accept-Language header. We now send the userâ€™s most preferred language in the Accept-Language header. To minimize compatibility risks, the initial launch reduces the information in the HTTP header, weâ€™ll reduce the related navigator.languages JavaScript getters in the future. Fire error event instead of throwing for CSP blocked worker When blocked by Content Security Policy (CSP), Chrome currently throws a SecurityError from the constructor of Worker and SharedWorker. The specification requires CSP to be checked as part of fetch and fires error events asynchronously instead of throwing an exception when a script runs new Worker(url) or new SharedWorker(url). This change makes Chrome specification conformant: not throwing during constructor and firing error events asynchronously. Audio Level for RTC Encoded Frames Exposes to the web the audio level of an encoded frame transmitted with RTCPeerConnection and exposed using WebRTC Encoded Transform. New origin trials In Chrome 139 you can opt into the following new origin trials. Prompt API The Prompt API is designed for interacting with an AI language model using text, image, and audio inputs. It supports various use cases, from generating image captions and performing visual searches to transcribing audio, classifying sound events, generating text following specific instructions, and extracting information or insights from text. It supports structured outputs which ensure that responses adhere to a predefined format, typically expressed as a JSON schema, to enhance response conformance and facilitate seamless integration with downstream applications that require standardized output formats. This API is also exposed in Chrome Extensions. This origin trial is for exposure on the web. Full frame rate render blocking attribute We propose to add a new render blocking token full-frame-rate to the blocking attributes. When the renderer is blocked with the full-frame-rate token, the renderer will work at a lower frame rate so as to reserve more resources for loading. WebGPU Compatibility mode Adds an opt-in, lightly restricted subset of the WebGPU API capable of running older graphics APIs such as OpenGL and Direct3D11. By opting into this mode and obeying its constraints, developers can extend the reach of their WebGPU applications to many older devices that do not have the modern, explicit graphics APIs that core WebGPU requires. For simple applications, the only required change is to specify the \"compatibility\" featureLevel when calling requestAdapter. For more advanced applications, some modifications may be necessary to accommodate the mode's restrictions. Since Compatibility mode is a subset, the resulting applications are also valid WebGPU Core applications and will run even on user agents that do not support Compatibility mode. Deprecations and removals This version of Chrome introduces the deprecations and removals listed below. Visit ChromeStatus.com for lists of planned deprecations, current deprecations and previous removals. This release of Chrome removes two features. Remove support for macOS 11 Chrome 138 is the last release to support macOS 11. From Chrome 139 macOS 11 is not supported, as it is outside of its support window with Apple. Running on a supported operating system is essential to maintaining security. On Macs running macOS 11, Chrome will continue to work, showing a warning infobar, but will not update any further. If a user wishes to update Chrome, they need to update their computer to a supported version of macOS. For new installations of Chrome 139 and up, macOS 12 or greater will be required. Remove auto-detection of ISO-2022-JP charset in HTML There are known security issues around charset auto-detection for ISO-2022-JP. Given that the usage is very low, and Safari does not support auto-detection of ISO-2022-JP, Chrome removes support for it to eliminate the security issues.",
  "image": "https://developer.chrome.com/static/blog/chrome-139-beta/image/thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Rachel Andrew\" src=\"https://web.dev/images/authors/rachelandrew.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: June 25, 2025\n\u003c/p\u003e\n\n\n\u003cp\u003eUnless otherwise noted, the following changes apply to the newest Chrome beta\nchannel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more\nabout the features listed here through the provided links or from the list on\nChromeStatus.com. Chrome 139 is beta as of 25 June 2025. You can download the\nlatest on \u003ca href=\"https://www.google.com/chrome/beta/\"\u003eGoogle.com\u003c/a\u003e for desktop or on\nGoogle Play Store on Android.\u003c/p\u003e\n\n\u003ch2 id=\"css\" data-text=\"CSS\" tabindex=\"-1\"\u003eCSS\u003c/h2\u003e\n\n\u003cp\u003eThis release adds six new CSS and UI features.\u003c/p\u003e\n\n\u003ch3 id=\"short-circuiting_var_and_attr\" data-text=\"Short-circuiting var() and attr()\" tabindex=\"-1\"\u003eShort-circuiting \u003ccode translate=\"no\" dir=\"ltr\"\u003evar()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWhen the fallback is not taken, \u003ccode translate=\"no\" dir=\"ltr\"\u003evar()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr()\u003c/code\u003e functions evaluate without\nlooking for cycles in that fallback. The following CSS works, because \u003ccode translate=\"no\" dir=\"ltr\"\u003e--green\u003c/code\u003e\nand \u003ccode translate=\"no\" dir=\"ltr\"\u003e--blue\u003c/code\u003e exist.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e--green\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreen\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e--blue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e--a\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--green\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--b\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n\u003cspan\u003e--b\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--blue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--a\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch3 id=\"css_caret-animation_property\" data-text=\"CSS caret-animation property\" tabindex=\"-1\"\u003eCSS \u003ccode translate=\"no\" dir=\"ltr\"\u003ecaret-animation\u003c/code\u003e property\u003c/h3\u003e\n\n\u003cp\u003eChrome already supported animation of the \u003ccode translate=\"no\" dir=\"ltr\"\u003ecaret-color\u003c/code\u003e property, but when\nanimated the default blinking behavior of the caret interfered with the\nanimation. The CSS \u003ccode translate=\"no\" dir=\"ltr\"\u003ecaret-animation\u003c/code\u003e property has two possible values: \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e\nand \u003ccode translate=\"no\" dir=\"ltr\"\u003emanual\u003c/code\u003e, where \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e means browser default (blinking) and \u003ccode translate=\"no\" dir=\"ltr\"\u003emanual\u003c/code\u003e means\nthe web developer is controlling the caret animation. The property also lets\nusers disable blinking using a user stylesheet.\u003c/p\u003e\n\n\u003ch3 id=\"corner_shaping\" data-text=\"Corner shaping\" tabindex=\"-1\"\u003eCorner shaping\u003c/h3\u003e\n\n\u003cp\u003eEnable styling corners, on top of the existing \u003ccode translate=\"no\" dir=\"ltr\"\u003eborder-radius\u003c/code\u003e, by specifying\nthe shape or curvature of the corner. This lets you create shapes like\nsquircles, notches, and scoops, and animate between them. Learn more in \u003ca href=\"https://frontendmasters.com/blog/understanding-css-corner-shape-and-the-power-of-the-superellipse/\"\u003ethis\npost from Amit\nSheen\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"continue_running_transitions_when_switching_to_the_initial_transition_value\" data-text=\"Continue running transitions when switching to the initial transition value.\" tabindex=\"-1\"\u003eContinue running transitions when switching to the initial transition value.\u003c/h3\u003e\n\n\u003cp\u003eWhen the transition related properties change, they are only supposed to affect\nnewly started transitions. This means that if you change the transition\nproperties, unless you also change the properties which have active transition\nanimations, those transition animations will continue with the previously\nspecified duration, easing, etc. Blink incorrectly canceled transitions when the\ntransition property was set to \u0026#34;none\u0026#34;, even though it doesn\u0026#39;t cancel them if you\nonly change the transition-duration. With this feature, blink will be consistent\nwith webkit and gecko, allowing active transitions to continue running,\nunless or until their property value changes triggering a new transition update.\u003c/p\u003e\n\n\u003ch3 id=\"css_custom_functions\" data-text=\"CSS Custom Functions\" tabindex=\"-1\"\u003eCSS Custom Functions\u003c/h3\u003e\n\n\u003cp\u003eCustom Functions are similar to custom properties, but instead of returning a\nsingle, fixed value, they return values based on other custom properties,\nparameters, and conditionals.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--negate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--value\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecalc\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--value\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e--gap\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003eem\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003emargin-top\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003enegate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e--gap\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch3 id=\"support_width_and_height_as_presentation_attributes_on_nested_svg_elements\" data-text=\"Support width and height as presentation attributes on nested \u0026lt;svg\u0026gt; elements\" tabindex=\"-1\"\u003eSupport \u003ccode translate=\"no\" dir=\"ltr\"\u003ewidth\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight\u003c/code\u003e as presentation attributes on nested \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e elements\u003c/h3\u003e\n\n\u003cp\u003eSupports applying \u003ccode translate=\"no\" dir=\"ltr\"\u003ewidth\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight\u003c/code\u003e as presentation attributes on nested\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e elements through both SVG markup and CSS. This dual approach provides\neven greater flexibility, letting you manage and style SVG elements more\nefficiently within complex designs.\u003c/p\u003e\n\n\u003ch2 id=\"web_apis\" data-text=\"Web APIs\" tabindex=\"-1\"\u003eWeb APIs\u003c/h2\u003e\n\n\u003ch3 id=\"web_app_manifest_specify_update_eligibility_icon_urls_are_cache-control_immutable\" data-text=\"Web App Manifest: specify update eligibility, icon URLs are Cache-Control: immutable\" tabindex=\"-1\"\u003eWeb App Manifest: specify update eligibility, icon URLs are \u003ccode translate=\"no\" dir=\"ltr\"\u003eCache-Control: immutable\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eSpecify an update eligibility algorithm in the manifest spec. This makes the\nupdate process more deterministic and predictable, giving developers more\ncontrol over whether (and when) updates should apply to existing installations,\nand allowing removal of the \u0026#39;update check throttle\u0026#39; that user agents currently\nneed to implement to avoid wasting network resources.\u003c/p\u003e\n\n\u003ch3 id=\"webxr_depth_sensing_performance_improvements\" data-text=\"WebXR Depth Sensing Performance Improvements\" tabindex=\"-1\"\u003eWebXR Depth Sensing Performance Improvements\u003c/h3\u003e\n\n\u003cp\u003eExposes several new mechanisms to customize the behavior of the depth sensing\nfeature within a WebXR session, with the goal of improving the performance of\nthe generation or consumption of the depth buffer. The key mechanisms exposed\nare: the ability to request the raw or smooth depth buffer, the ability to\nrequest that the runtime stop or resume providing the depth buffer, and the\nability to expose a depth buffer that does not align with the user\u0026#39;s view\nexactly, so that the user agent does not need to perform unnecessary\nre-projections every frame.\u003c/p\u003e\n\n\u003ch3 id=\"allow_more_characters_in_javascript_dom_apis\" data-text=\"Allow more characters in JavaScript DOM APIs\" tabindex=\"-1\"\u003eAllow more characters in JavaScript DOM APIs\u003c/h3\u003e\n\n\u003cp\u003eThe HTML parser has always (or for a long time) allowed elements and attributes\nto have a wide variety of valid characters and names, but the JavaScript DOM\nAPIs that create the same elements and attributes are more strict and don\u0026#39;t\nmatch the parser. This change relaxes the validation of the JavaScript DOM APIs\nto match the HTML parser.\u003c/p\u003e\n\n\u003ch3 id=\"request-close_invoker_command\" data-text=\"request-close invoker command\" tabindex=\"-1\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003erequest-close\u003c/code\u003e invoker command\u003c/h3\u003e\n\n\u003cp\u003eDialog elements can be closed through a variety of mechanisms, sometimes\ndevelopers want to have the ability to prevent closure. To achieve this dialogs\nfire a cancel event. Originally this was only fired via a close request (for\nexample, \u003ccode translate=\"no\" dir=\"ltr\"\u003eEsc\u003c/code\u003e key press), recently a \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestClose()\u003c/code\u003e JS function was added\nwhich also fires the cancel event. The \u003ccode translate=\"no\" dir=\"ltr\"\u003erequest-close\u003c/code\u003e command brings that new\nability to the declarative invoker commands API.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_3d_texture_support_for_bc_and_astc_compressed_formats\" data-text=\"WebGPU: 3D texture support for BC and ASTC compressed formats\" tabindex=\"-1\"\u003eWebGPU: 3D texture support for BC and ASTC compressed formats\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003etexture-compression-bc-sliced-3d\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003etexture-compression-astc-sliced-3d\u003c/code\u003e\nWebGPU features add respectively 3D texture support for BC and ASTC compressed\nformats.\u003c/p\u003e\n\n\u003ch3 id=\"secure_payment_confirmation_browser_bound_keys\" data-text=\"Secure Payment Confirmation: Browser Bound Keys\" tabindex=\"-1\"\u003eSecure Payment Confirmation: Browser Bound Keys\u003c/h3\u003e\n\n\u003cp\u003eAdds an additional cryptographic signature over Secure Payment Confirmation\nassertions and credential creation. The corresponding private key is not synced\nacross devices. This helps web developers meet requirements for device binding\nfor payment transactions.\u003c/p\u003e\n\n\u003ch3 id=\"secure_payment_confirmation_ux_refresh\" data-text=\"Secure Payment Confirmation: UX Refresh\" tabindex=\"-1\"\u003eSecure Payment Confirmation: UX Refresh\u003c/h3\u003e\n\n\u003cp\u003eUpdates the UX elements for the SPC dialog on Android Chrome. Other than just UX\npresentation the following are being added:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLets merchants provide an optional list of payment entity logos related to\nthe payment that will be displayed.\u003c/li\u003e\n\u003cli\u003eReturning different output states back to the merchant depending on whether\nthe user wants to continue the transaction without SPC or to cancel the\ntransaction.\u003c/li\u003e\n\u003cli\u003eAdds a new payment detail label field to the payment instrument so the text\nis presented across two lines.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"webgpu_core-features-and-limits\" data-text=\"WebGPU core-features-and-limits\" tabindex=\"-1\"\u003eWebGPU \u003ccode translate=\"no\" dir=\"ltr\"\u003ecore-features-and-limits\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003ecore-features-and-limits\u003c/code\u003e feature signifies that a WebGPU adapter and\ndevice support the core features and limits of the spec.\u003c/p\u003e\n\n\u003ch3 id=\"scroll_anchoring_priority_candidate_fix\" data-text=\"Scroll anchoring priority candidate fix\" tabindex=\"-1\"\u003eScroll anchoring priority candidate fix\u003c/h3\u003e\n\n\u003cp\u003eCurrently, the scroll anchoring algorithm selects priority candidates when they\nare available as anchor targets. The priority candidates are currently a focused\neditable element and find-in-page highlights. This can cause suboptimal user\nexperience if there is a large focused contenteditable element that has content\nchanged offscreen (the cursor ends up being shifted as a consequence). This fix\nchanges the algorithm: instead of selecting the priority candidate as the\nanchor, use the candidate as the scope or root of the regular anchor selection\nalgorithm that selects the deepest onscreen element as the anchor.\u003c/p\u003e\n\n\u003ch3 id=\"support_the_async_attribute_for_svg_script_elements\" data-text=\"Support the async attribute for SVG \u0026lt;script\u0026gt; elements\" tabindex=\"-1\"\u003eSupport the \u003ccode translate=\"no\" dir=\"ltr\"\u003easync\u003c/code\u003e attribute for SVG \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;script\u0026gt;\u003c/code\u003e elements\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eSVGScriptElement\u003c/code\u003e interface in SVG 2.0 introduces the \u003ccode translate=\"no\" dir=\"ltr\"\u003easync\u003c/code\u003e attribute,\nsimilar to the \u003ccode translate=\"no\" dir=\"ltr\"\u003eHTMLScriptElement\u003c/code\u003e. This attribute allows scripts to be executed\nasynchronously, improving the performance and responsiveness of web applications\nthat use SVG.\u003c/p\u003e\n\n\u003ch3 id=\"on-device_web_speech_api\" data-text=\"On-device Web Speech API\" tabindex=\"-1\"\u003eOn-device Web Speech API\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds on-device speech recognition support to the Web Speech API,\nallowing websites to ensure that neither audio nor transcribed speech are sent\nto a third-party service for processing. Websites can query the availability of\non-device speech recognition for specific languages, prompt users to install the\nnecessary resources for on-device speech recognition, and choose between\non-device or cloud-based speech recognition as needed.\u003c/p\u003e\n\n\u003ch3 id=\"clear_windowname_for_cross-site_navigations_that_switch_browsing_context_group\" data-text=\"Clear window.name for cross-site navigations that switch browsing context group\" tabindex=\"-1\"\u003eClear \u003ccode translate=\"no\" dir=\"ltr\"\u003ewindow.name\u003c/code\u003e for cross-site navigations that switch browsing context group\u003c/h3\u003e\n\n\u003cp\u003eThe value of the \u003ccode translate=\"no\" dir=\"ltr\"\u003ewindow.name\u003c/code\u003e property is currently preserved throughout the\nlifetime of a tab, even with navigation that switches browsing context groups,\nwhich can leak information and potentially be used as a tracking vector.\nClearing the \u003ccode translate=\"no\" dir=\"ltr\"\u003ewindow.name\u003c/code\u003e property addresses this issue. This should be a low\nrisk change since looking up a browsing context by name already doesnâ€™t work if\nit\u0026#39;s in another browsing context group, so the name isn\u0026#39;t actually useful.\u003c/p\u003e\n\n\u003cp\u003eEnterprise Policy: \u003ccode translate=\"no\" dir=\"ltr\"\u003eClearWindowNameCrossSiteBrowsing\u003c/code\u003e (will stop working in\nChrome 142).\u003c/p\u003e\n\n\u003ch3 id=\"web_app_scope_extensions\" data-text=\"Web app scope extensions\" tabindex=\"-1\"\u003eWeb app scope extensions\u003c/h3\u003e\n\n\u003cp\u003eAdds a \u003ca href=\"https://developer.chrome.com/docs/capabilities/scope-extensions\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;scope_extensions\u0026#34;\u003c/code\u003e\u003c/a\u003e web app\nmanifest field that enables web apps to extend their scope to other origins.\u003c/p\u003e\n\n\u003cp\u003eThis allows sites that control multiple subdomains and top level domains to be\npresented as a single web app. Requires listed origins to confirm association\nwith the web app using a \u003ccode translate=\"no\" dir=\"ltr\"\u003e.well-known/web-app-origin-association\u003c/code\u003e configuration\nfile.\u003c/p\u003e\n\n\u003ch3 id=\"specification-compliant_json_mime_type_detection\" data-text=\"Specification-compliant JSON MIME type detection\" tabindex=\"-1\"\u003eSpecification-compliant JSON MIME type detection\u003c/h3\u003e\n\n\u003cp\u003eChromium now recognizes all valid JSON MIME types as defined by the WHATWG\nmimesniff specification. This includes any MIME type whose subtype ends with\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e+json\u003c/code\u003e, in addition to the traditional \u003ccode translate=\"no\" dir=\"ltr\"\u003eapplication/json\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003etext/json\u003c/code\u003e. This\nchange ensures that web APIs and features relying on JSON detection behave\nconsistently with the web platform standard and other browsers. A key motivation\nfor this change is to fix JSON module import behavior, where previously valid\nJSON MIME types like \u003ccode translate=\"no\" dir=\"ltr\"\u003etext/html+json\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eimage/svg+json\u003c/code\u003e would fail to load as\nmodules.\u003c/p\u003e\n\n\u003ch3 id=\"private_aggregation_api_aggregate_error_reporting\" data-text=\"Private Aggregation API: aggregate error reporting\" tabindex=\"-1\"\u003ePrivate Aggregation API: aggregate error reporting\u003c/h3\u003e\n\n\u003cp\u003eThere are a range of error conditions that can be hit when using the Private\nAggregation API. For example, the privacy budget could run out, preventing any\nfurther histogram contributions. This feature allows developers to register\nhistogram contributions that should only be sent if a particular type of error\noccurs. This feature supports measuring the frequency of the error conditions\nand to split these measurements on relevant developer-specified dimensions (e.g.\nversion of deployed code). As the errors themselves may be cross-site\ninformation, we cannot simply expose them to the page for users without\nthird-party cookies. Instead, this feature reuses the existing aggregate, noised\nreporting pipelines through the Aggregation Service.\u003c/p\u003e\n\n\u003ch3 id=\"crash_reporting_api_specify_crash-reporting_to_receive_only_crash_reports\" data-text=\"Crash Reporting API: Specify crash-reporting to receive only crash reports\" tabindex=\"-1\"\u003eCrash Reporting API: Specify crash-reporting to receive only crash reports\u003c/h3\u003e\n\n\u003cp\u003eThis feature ensures developers receive only crash reports by specifying the\nendpoint named \u003ccode translate=\"no\" dir=\"ltr\"\u003ecrash-reporting\u003c/code\u003e. By default, crash reports are delivered to\nthe \u003ccode translate=\"no\" dir=\"ltr\"\u003edefault\u003c/code\u003e endpoint which receives many other kinds of reports besides crash\nreports. Developers can supply a separate URL to the well-known endpoint named\n\u003ccode translate=\"no\" dir=\"ltr\"\u003ecrash-reporting\u003c/code\u003e, to direct crash reports there, instead of the \u003ccode translate=\"no\" dir=\"ltr\"\u003edefault\u003c/code\u003e\nendpoint.\u003c/p\u003e\n\n\n\n\u003cp\u003eReduces the amount of information the \u003ccode translate=\"no\" dir=\"ltr\"\u003eAccept-Language\u003c/code\u003e header value string\nexposes in HTTP requests and in \u003ccode translate=\"no\" dir=\"ltr\"\u003enavigator.languages\u003c/code\u003e. Instead of sending a full\nlist of the user\u0026#39;s preferred languages on every HTTP request with the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eAccept-Language\u003c/code\u003e header. We now send the userâ€™s most preferred language in the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eAccept-Language\u003c/code\u003e header. To minimize compatibility risks, the initial launch\nreduces the information in the HTTP header, weâ€™ll reduce the related\n\u003ccode translate=\"no\" dir=\"ltr\"\u003enavigator.languages\u003c/code\u003e JavaScript getters in the future.\u003c/p\u003e\n\n\u003ch3 id=\"fire_error_event_instead_of_throwing_for_csp_blocked_worker\" data-text=\"Fire error event instead of throwing for CSP blocked worker\" tabindex=\"-1\"\u003eFire error event instead of throwing for CSP blocked worker\u003c/h3\u003e\n\n\u003cp\u003eWhen blocked by Content Security Policy (CSP), Chrome currently throws a\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eSecurityError\u003c/code\u003e from the constructor of Worker and SharedWorker. The\nspecification requires CSP to be checked as part of fetch and fires error events\nasynchronously instead of throwing an exception when a script runs \u003ccode translate=\"no\" dir=\"ltr\"\u003enew\nWorker(url)\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003enew SharedWorker(url)\u003c/code\u003e. This change makes Chrome specification\nconformant: not throwing during constructor and firing error events\nasynchronously.\u003c/p\u003e\n\n\u003ch3 id=\"audio_level_for_rtc_encoded_frames\" data-text=\"Audio Level for RTC Encoded Frames\" tabindex=\"-1\"\u003eAudio Level for RTC Encoded Frames\u003c/h3\u003e\n\n\u003cp\u003eExposes to the web the audio level of an encoded frame transmitted with\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eRTCPeerConnection\u003c/code\u003e and exposed using WebRTC Encoded Transform.\u003c/p\u003e\n\n\u003ch2 id=\"new_origin_trials\" data-text=\"New origin trials\" tabindex=\"-1\"\u003eNew origin trials\u003c/h2\u003e\n\n\u003cp\u003eIn Chrome 139 you can opt into the following new \u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\"\u003eorigin\ntrials\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"prompt_api\" data-text=\"Prompt API\" tabindex=\"-1\"\u003ePrompt API\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.chrome.com/docs/ai/prompt-api\"\u003ePrompt API\u003c/a\u003e is designed for interacting with an AI\nlanguage model using text, image, and audio inputs. It supports various use\ncases, from generating image captions and performing visual searches to\ntranscribing audio, classifying sound events, generating text following specific\ninstructions, and extracting information or insights from text. It supports\n\u003ca href=\"https://developer.chrome.com/docs/ai/structured-output-for-prompt-api\"\u003estructured outputs\u003c/a\u003e which\nensure that responses adhere to a predefined format, typically expressed as a\nJSON schema, to enhance response conformance and facilitate seamless integration\nwith downstream applications that require standardized output formats. This API\nis also exposed in Chrome Extensions. This origin trial is for exposure on the\nweb.\u003c/p\u003e\n\n\u003ch3 id=\"full_frame_rate_render_blocking_attribute\" data-text=\"Full frame rate render blocking attribute\" tabindex=\"-1\"\u003eFull frame rate render blocking attribute\u003c/h3\u003e\n\n\u003cp\u003eWe propose to add a new render blocking token full-frame-rate to the blocking\nattributes. When the renderer is blocked with the full-frame-rate token, the\nrenderer will work at a lower frame rate so as to reserve more resources for\nloading.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_compatibility_mode\" data-text=\"WebGPU Compatibility mode\" tabindex=\"-1\"\u003eWebGPU Compatibility mode\u003c/h3\u003e\n\n\u003cp\u003eAdds an opt-in, lightly restricted subset of the WebGPU API capable of running\nolder graphics APIs such as OpenGL and Direct3D11. By opting into this mode and\nobeying its constraints, developers can extend the reach of their WebGPU\napplications to many older devices that do not have the modern, explicit\ngraphics APIs that core WebGPU requires. For simple applications, the only\nrequired change is to specify the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;compatibility\u0026#34;\u003c/code\u003e featureLevel when calling\n\u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapter\u003c/code\u003e. For more advanced applications, some modifications may be\nnecessary to accommodate the mode\u0026#39;s restrictions. Since Compatibility mode is a\nsubset, the resulting applications are also valid WebGPU Core applications and\nwill run even on user agents that do not support Compatibility mode.\u003c/p\u003e\n\n\u003ch2 id=\"deprecations_and_removals\" data-text=\"Deprecations and removals\" tabindex=\"-1\"\u003eDeprecations and removals\u003c/h2\u003e\n\n\u003cp\u003eThis version of Chrome introduces the deprecations and removals listed below.\nVisit ChromeStatus.com for lists of planned deprecations, current deprecations\nand previous removals.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome removes two features.\u003c/p\u003e\n\n\u003ch3 id=\"remove_support_for_macos_11\" data-text=\"Remove support for macOS 11\" tabindex=\"-1\"\u003eRemove support for macOS 11\u003c/h3\u003e\n\n\u003cp\u003eChrome 138 is the last release to support macOS 11. From Chrome 139 macOS 11 is\nnot supported, as it is outside of its support window with Apple. Running on a\nsupported operating system is essential to maintaining security. On Macs running\nmacOS 11, Chrome will continue to work, showing a warning infobar, but will not\nupdate any further. If a user wishes to update Chrome, they need to update their\ncomputer to a supported version of macOS. For new installations of Chrome 139\nand up, macOS 12 or greater will be required.\u003c/p\u003e\n\n\u003ch3 id=\"remove_auto-detection_of_iso-2022-jp_charset_in_html\" data-text=\"Remove auto-detection of ISO-2022-JP charset in HTML\" tabindex=\"-1\"\u003eRemove auto-detection of ISO-2022-JP charset in HTML\u003c/h3\u003e\n\n\u003cp\u003eThere are \u003ca href=\"https://www.sonarsource.com/blog/encoding-differentials-why-charset-matters/\"\u003eknown security\nissues\u003c/a\u003e\naround charset auto-detection for ISO-2022-JP. Given that the usage is very low,\nand Safari does not support auto-detection of ISO-2022-JP, Chrome removes\nsupport for it to eliminate the security issues.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": null,
  "modifiedTime": null
}
