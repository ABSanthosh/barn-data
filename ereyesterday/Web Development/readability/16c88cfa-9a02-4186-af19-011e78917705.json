{
  "id": "16c88cfa-9a02-4186-af19-011e78917705",
  "title": "Introducing command and commandfor",
  "link": "https://developer.chrome.com/blog/command-and-commandfor?hl=en",
  "description": "Learn about the new capabilities for declarative behavior on buttons.",
  "author": "",
  "published": "Fri, 07 Mar 2025 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 11202,
  "excerpt": "Learn about the new capabilities for declarative behavior on buttons.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v6bfb74446ce17cd0d3af9b93bf26e056161cb79c5a6475bd6a9c25286fcb7861/chrome/images/favicon.png",
  "text": "Introducing command and commandfor Stay organized with collections Save and categorize content based on your preferences. Published: March 7, 2025 Buttons are essential to making dynamic web applications. Buttons open menus, toggle actions, and submit forms. They provide the foundation of interactivity on the web. Making buttons simple and accessible can lead to some surprising challenges. Developers building micro-frontends or component systems can encounter solutions that become more complex than necessary. While frameworks help, the web can do more here. Chrome 135 introduces new capabilities for providing declarative behaviour with the new command and commandfor attributes, enhancing and replacing the popovertargetaction and popovertarget attributes. These new attributes can be added to buttons, letting the browser address some core issues around simplicity and accessibility, and provide built-in common functionality. Traditional patterns Building button behaviours without a framework can pose some interesting challenges as production code evolves. While HTML offers onclick handlers to buttons, these are often disallowed outside of demos or tutorials due to Content Security Policy (CSP) rules. While these events are dispatched on button elements, buttons are usually placed on a page to control other elements requiring code to control two elements at once. You also need to ensure this interaction is accessible to users of assistive technology. This often leads to code looking a bit like this: \u003cdiv class=\"menu-wrapper\"\u003e \u003cbutton class=\"menu-opener\" aria-expanded=\"false\"\u003e Open Menu \u003c/button\u003e \u003cdiv popover class=\"menu-content\"\u003e \u003c!-- ... --\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript type=\"module\"\u003e document.addEventListener('click', e =\u003e { const button = e.target; if (button.matches('.menu-opener')) { const menu = button .closest('.menu-wrapper') .querySelector('.menu-content'); if (menu) { button.setAttribute('aria-expanded', 'true'); menu.showPopover(); menu.addEventListener('toggle', e =\u003e { // reset back to aria-expanded=false on close if (e.newState == 'closed') { button.setAttribute('aria-expanded', 'false'); } }, {once: true}) } } }); \u003c/script\u003e This approach can be a little brittle, and frameworks aim to improve ergonomics. A common pattern with a framework like React might involve mapping the click to a state change: function MyMenu({ children }) { const [isOpen, setIsOpen] = useState(false); const open = useCallback(() =\u003e setIsOpen(true), []); const handleToggle = useCallback((e) =\u003e { // popovers have light dismiss which influences our state setIsOpen(e.newState === 'open') }, []); const popoverRef = useRef(null); useEffect(() =\u003e { if (popoverRef.current) { if (isOpen) { popoverRef.current.showPopover(); } else { popoverRef.current.hidePopover(); } } }, [popoverRef, isOpen]); return ( \u003c\u003e \u003cbutton onClick={open} aria-expanded={isOpen}\u003e Open Menu \u003c/button\u003e \u003cdiv popover onToggle={handleToggle} ref={popoverRef}\u003e {children} \u003c/div\u003e \u003c/\u003e ); } Many other frameworks also aim to provide similar ergonomics, for example this might be written in AlpineJS as: \u003cdiv x-data=\"{open: false}\"\u003e \u003cbutton @click=\"open = !open; $refs.popover.showPopover()\" :aria-expanded=\"open\"\u003e Open Menu \u003c/button\u003e \u003cdiv popover x-ref=\"popover\" @toggle=\"open = $event.newState === 'open'\"\u003e \u003c!-- ... --\u003e \u003c/div\u003e \u003c/div\u003e While writing this in Svelte might look something like: \u003cscript\u003e let popover; let open = false; function togglePopover() { open ? popover.hidePopover() : popover.showPopover(); open = !open; } \u003c/script\u003e \u003cbutton on:click={togglePopover} aria-expanded={open}\u003e Open Menu \u003c/button\u003e \u003cdiv bind:this={popover} popover\u003e \u003c!-- ... --\u003e \u003c/div\u003e Some design systems or libraries might go a step further, by providing wrappers around button elements that encapsulate the state changes. This abstracts state changes behind a trigger component, trading a little flexibility for improved ergonomics: import {MenuTrigger, MenuContent} from 'my-design-system'; function MyMenu({children}) { return ( \u003cMenuTrigger\u003e \u003cbutton\u003eOpen Menu\u003c/button\u003e \u003c/MenuTrigger\u003e \u003cMenuContent\u003e{children}\u003c/MenuContent\u003e ); } The command and commandfor pattern With the command and commandfor attributes, buttons can now perform actions on other elements declaratively, bringing the ergonomics of a framework without sacrificing flexibility. The commandfor button takes an ID—similar to the for attribute—while command accepts built-in values, enabling a more portable and intuitive approach. Example: An open menu button with command and commandfor The following HTML sets up declarative relationships between the button and the menu which lets the browser handle the logic and accessibility for you. There's no need to manage aria-expanded or add any additional JavaScript. \u003cbutton commandfor=\"my-menu\" command=\"show-popover\"\u003e Open Menu \u003c/button\u003e \u003cdiv popover id=\"my-menu\"\u003e \u003c!-- ... --\u003e \u003c/div\u003e Comparing command and commandfor with popovertargetaction and popovertarget If you've used popover before, you might be familiar with the popovertarget and popovertargetaction attributes. These work similarly to commandfor and command respectively—except they're specific to popovers. The command and commandfor attributes completely replace these older attributes. The new attributes support everything the older attributes did, as well as adding new capabilities. Built-in commands The command attribute has a set of built-in behaviours which map to various APIs for interactive elements: show-popover: Maps to el.showPopover(). hide-popover: Maps to el.hidePopover(). toggle-popover: Maps to el.togglePopover(). show-modal: Maps to dialogEl.showModal(). close: Maps to dialogEl.close(). These commands map to their JavaScript counterparts, while also streamlining accessibility (such as providing the aria-details and aria-expanded equivalent relations), focus management, and more. Example: A confirmation dialog with command and commandfor \u003cbutton commandfor=\"confirm-dialog\" command=\"show-modal\"\u003e Delete Record \u003c/button\u003e \u003cdialog id=\"confirm-dialog\"\u003e \u003cheader\u003e \u003ch1\u003eDelete Record?\u003c/h1\u003e \u003cbutton commandfor=\"confirm-dialog\" command=\"close\" aria-label=\"Close\" value=\"close\"\u003e \u003cimg role=\"none\" src=\"/close-icon.svg\"\u003e \u003c/button\u003e \u003c/header\u003e \u003cp\u003eAre you sure? This action cannot be undone\u003c/p\u003e \u003cfooter\u003e \u003cbutton commandfor=\"confirm-dialog\" command=\"close\" value=\"cancel\"\u003e Cancel \u003c/button\u003e \u003cbutton commandfor=\"confirm-dialog\" command=\"close\" value=\"delete\"\u003e Delete \u003c/button\u003e \u003c/footer\u003e \u003c/dialog\u003e Clicking the Delete Record button will open the dialog as a modal, while clicking the Close, Cancel, or Delete buttons will close the dialog while also dispatching a \"close\" event on the dialog, which has a returnValue property matching the button's value. This reduces the need for JavaScript beyond a single event listener on the dialog to determine what to do next: dialog.addEventListener(\"close\", (event) =\u003e { if (event.target.returnValue == \"cancel\") { console.log(\"cancel was clicked\"); } else if (event.target.returnValue == \"close\") { console.log(\"close was clicked\"); } else if (event.target.returnValue == \"delete\") { console.log(\"delete was clicked\"); } }); Custom commands In addition to the built-in commands, you can define custom commands using a -- prefix. Custom commands will dispatch a \"command\" event on the target element (just like the built-in commands), but otherwise will never perform any additional logic like the built-in values do. This gives flexibility for building components that can react to buttons in various ways without having to provide wrapper components, traverse the DOM for the target element, or mapping button clicks to state changes. This lets you provide an API within HTML for your components: \u003cbutton commandfor=\"the-image\" command=\"--rotate-landscape\"\u003e Landscape \u003c/button\u003e \u003cbutton commandfor=\"the-image\" command=\"--rotate-portrait\"\u003e Portrait \u003c/button\u003e \u003cimg id=\"the-image\" src=\"photo.jpg\"\u003e \u003cscript type=\"module\"\u003e const image = document.getElementById(\"the-image\"); image.addEventListener(\"command\", (event) =\u003e { if ( event.command == \"--rotate-landscape\" ) { image.style.rotate = \"-90deg\" } else if ( event.command == \"--rotate-portrait\" ) { image.style.rotate = \"0deg\" } }); \u003c/script\u003e Commands in the ShadowDOM Given the commandfor attribute takes an ID, there are restrictions around crossing the shadow DOM. In these cases you can use the JavaScript API to set the .commandForElement property which can set any element, across shadow roots: \u003cmy-element\u003e \u003ctemplate shadowrootmode=open\u003e \u003cbutton command=\"show-popover\"\u003eShow popover\u003c/button\u003e \u003cslot\u003e\u003c/slot\u003e \u003c/template\u003e \u003cdiv popover\u003e\u003c!-- ... --\u003e\u003c/div\u003e \u003c/my-element\u003e \u003cscript\u003e customElements.define(\"my-element\", class extends HTMLElement { connectedCallback() { const popover = this.querySelector('[popover]'); // The commandForElement can set cross-shadow root elements. this.shadowRoot.querySelector('button').commandForElement = popover; } }); \u003c/script\u003e Future proposals may provide a declarative way to share references across shadow boundaries, such as the Reference Target Proposal. What's next? We'll be continuing to explore possibilities for new built-in commands, to cover common functionality that websites use. Proposed ideas are covered in the Open UI Proposal. Some of the ideas already explored: Opening and closing \u003cdetails\u003e elements. A \"show-picker\" command for \u003cinput\u003e and \u003cselect\u003e elements, mapping to showPicker(). Playback commands for \u003cvideo\u003e and \u003caudio\u003e elements. Copying text content from elements. We welcome community input—if you have suggestions don't hesitate to file an issue on the Open UI Issue Tracker. Learn more Find more information about command and commandfor in the specification and on MDN. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-03-07 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2025-03-07 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/command-and-commandfor/image/hero.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv role=\"main\" id=\"main-content\" has-sidebar=\"\"\u003e\n          \n          \n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \u003ch2 tabindex=\"-1\"\u003e\n      Introducing command and commandfor\n      \n  \u003cp data-nosnippet=\"\"\u003e\n    \u003cdevsite-feature-tooltip ack-key=\"AckCollectionsBookmarkTooltipDismiss\" analytics-category=\"Site-Wide Custom Events\" analytics-action-show=\"Callout Profile displayed\" analytics-action-close=\"Callout Profile dismissed\" analytics-label=\"Create Collection Callout\" dismiss-button=\"true\" id=\"devsite-collections-dropdown\" dismiss-button-text=\"Dismiss\" close-button-text=\"Got it\"\u003e\n\n    \n    \u003cdevsite-bookmark\u003e\u003c/devsite-bookmark\u003e\n\n    \u003cspan slot=\"popout-heading\"\u003e\n      \n      Stay organized with collections\n    \u003c/span\u003e\n    \u003cspan slot=\"popout-contents\"\u003e\n      \n      Save and categorize content based on your preferences.\n    \u003c/span\u003e\n  \u003c/devsite-feature-tooltip\u003e\n  \u003c/p\u003e\n  \n    \u003c/h2\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \n\n  \n\n\n\n\n\n\n\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Keith Cirkel\" src=\"https://web.dev/images/authors/keithcirkel.jpeg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: March 7, 2025\n\u003c/p\u003e\n\n\n\u003cp\u003eButtons are essential to making dynamic web applications. Buttons open menus,\ntoggle actions, and submit forms. They provide the foundation of interactivity\non the web. Making buttons simple and accessible can lead to some surprising\nchallenges. Developers building micro-frontends or component systems can\nencounter solutions that become more complex than necessary. While frameworks\nhelp, the web can do more here.\u003c/p\u003e\n\n\u003cp\u003eChrome 135 introduces new capabilities for providing declarative behaviour with\nthe new \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e attributes, enhancing and replacing the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertargetaction\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertarget\u003c/code\u003e attributes. These new attributes can\nbe added to buttons, letting the browser address some core issues around\nsimplicity and accessibility, and provide built-in common functionality.\u003c/p\u003e\n\n\u003ch2 id=\"traditional_patterns\" data-text=\"Traditional patterns\" tabindex=\"-1\"\u003eTraditional patterns\u003c/h2\u003e\n\n\u003cp\u003eBuilding button behaviours without a framework can pose some interesting\nchallenges as production code evolves. While HTML offers \u003ccode translate=\"no\" dir=\"ltr\"\u003eonclick\u003c/code\u003e handlers to\nbuttons, these are often disallowed outside of demos or tutorials due to Content\nSecurity Policy (CSP) rules. While these events are dispatched on button\nelements, buttons are usually placed on a page to control \u003cem\u003eother\u003c/em\u003e elements\nrequiring code to control two elements at once. You also need to ensure this\ninteraction is accessible to users of assistive technology. This often leads to\ncode looking a bit like this:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div class=\u0026#34;menu-wrapper\u0026#34;\u0026gt;\n  \u0026lt;button class=\u0026#34;menu-opener\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt;\n    Open Menu\n  \u0026lt;/button\u0026gt;\n  \u0026lt;div popover class=\u0026#34;menu-content\u0026#34;\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt;\ndocument.addEventListener(\u0026#39;click\u0026#39;, e =\u0026gt; {  \n  const button = e.target;\n  if (button.matches(\u0026#39;.menu-opener\u0026#39;)) {\n    const menu = button\n      .closest(\u0026#39;.menu-wrapper\u0026#39;)\n      .querySelector(\u0026#39;.menu-content\u0026#39;);\n    if (menu) {\n      button.setAttribute(\u0026#39;aria-expanded\u0026#39;, \u0026#39;true\u0026#39;);\n      menu.showPopover();\n      menu.addEventListener(\u0026#39;toggle\u0026#39;, e =\u0026gt; {\n        // reset back to aria-expanded=false on close\n        if (e.newState == \u0026#39;closed\u0026#39;) {\n          button.setAttribute(\u0026#39;aria-expanded\u0026#39;, \u0026#39;false\u0026#39;);\n        }\n      }, {once: true})\n    }\n  }\n});\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eThis approach can be a little brittle, and frameworks aim to improve ergonomics.\nA common pattern with a framework like React might involve mapping the click to\na state change:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMyMenu\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eisOpen\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetIsOpen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseCallback\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetIsOpen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandleToggle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseCallback\u003c/span\u003e\u003cspan\u003e((\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// popovers have light dismiss which influences our state\u003c/span\u003e\n\u003cspan\u003e     \u003c/span\u003e\u003cspan\u003esetIsOpen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enewState\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;open\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisOpen\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowPopover\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehidePopover\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eisOpen\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u0026lt;\u0026gt;\n\u003cspan\u003e      \u003c/span\u003e\u0026lt;\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003earia\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eexpanded\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eisOpen\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u0026gt;\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eOpen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMenu\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u0026gt;\n\u003cspan\u003e      \u003c/span\u003e\u0026lt;\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eonToggle\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ehandleToggle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epopoverRef\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u0026gt;\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\n\u003cspan\u003e    \u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u0026gt;\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eMany other frameworks also aim to provide similar ergonomics, for example this\nmight be written in AlpineJS as:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div x-data=\u0026#34;{open: false}\u0026#34;\u0026gt;\n  \u0026lt;button @click=\u0026#34;open = !open; $refs.popover.showPopover()\u0026#34; :aria-expanded=\u0026#34;open\u0026#34;\u0026gt;\n    Open Menu\n  \u0026lt;/button\u0026gt;\n  \u0026lt;div popover x-ref=\u0026#34;popover\u0026#34; @toggle=\u0026#34;open = $event.newState === \u0026#39;open\u0026#39;\u0026#34;\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eWhile writing this in Svelte might look something like:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003cspan\u003escript\u003c/span\u003e\u0026gt;\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etogglePopover\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehidePopover\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowPopover\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u0026lt;\u003cspan\u003e/script\u003c/span\u003e\u0026gt;\n\u0026lt;\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eclick\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003etogglePopover\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003earia\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eexpanded\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u0026gt;\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eOpen\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMenu\u003c/span\u003e\n\u0026lt;\u003cspan\u003e/button\u003c/span\u003e\u0026gt;\n\u0026lt;\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebind\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epopover\u003c/span\u003e\u0026gt;\n\u003cspan\u003e  \u003c/span\u003e\u0026lt;\u003cspan\u003e!--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u0026gt;\n\u0026lt;\u003cspan\u003e/div\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eSome design systems or libraries might go a step further, by providing wrappers\naround button elements that encapsulate the state changes. This abstracts state\nchanges behind a trigger component, trading a little flexibility for improved\nergonomics:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eMenuTrigger\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMenuContent\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;my-design-system\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMyMenu\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u0026lt;\u003cspan\u003eMenuTrigger\u003c/span\u003e\u0026gt;\n\u003cspan\u003e      \u003c/span\u003e\u0026lt;\u003cspan\u003ebutton\u0026gt;Open\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMenu\u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u0026gt;\n\u003cspan\u003e    \u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eMenuTrigger\u003c/span\u003e\u0026gt;\n\u003cspan\u003e    \u003c/span\u003e\u0026lt;\u003cspan\u003eMenuContent\u003c/span\u003e\u0026gt;\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u0026lt;\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eMenuContent\u003c/span\u003e\u0026gt;\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"the_command_and_commandfor_pattern\" data-text=\"The command and commandfor pattern\" tabindex=\"-1\"\u003eThe command and commandfor pattern\u003c/h2\u003e\n\n\u003cp\u003eWith the \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e attributes, buttons can now perform actions\non other elements declaratively, bringing the ergonomics of a framework without\nsacrificing flexibility. The \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e button takes an ID—similar to the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003efor\u003c/code\u003e attribute—while \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e accepts built-in values, enabling a more\nportable and intuitive approach.\u003c/p\u003e\n\n\u003ch3 id=\"example_an_open_menu_button_with_command_and_commandfor\" data-text=\"Example: An open menu button with command and commandfor\" tabindex=\"-1\"\u003eExample: An open menu button with command and commandfor\u003c/h3\u003e\n\n\u003cp\u003eThe following HTML sets up declarative relationships between the button and the\nmenu which lets the browser handle the logic and accessibility for you. There\u0026#39;s\nno need to manage \u003ccode translate=\"no\" dir=\"ltr\"\u003earia-expanded\u003c/code\u003e or add any additional JavaScript.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;button commandfor=\u0026#34;my-menu\u0026#34; command=\u0026#34;show-popover\u0026#34;\u0026gt;\nOpen Menu\n\u0026lt;/button\u0026gt;\n\u0026lt;div popover id=\u0026#34;my-menu\u0026#34;\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch3 id=\"comparing_command_and_commandfor_with_popovertargetaction_and_popovertarget\" data-text=\"Comparing command and commandfor with popovertargetaction and popovertarget\" tabindex=\"-1\"\u003eComparing \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e with \u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertargetaction\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertarget\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIf you\u0026#39;ve used \u003ccode translate=\"no\" dir=\"ltr\"\u003epopover\u003c/code\u003e before, you might be familiar with the \u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertarget\u003c/code\u003e\nand \u003ccode translate=\"no\" dir=\"ltr\"\u003epopovertargetaction\u003c/code\u003e attributes. These work similarly to \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e and\n\u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e respectively—except they\u0026#39;re specific to popovers. The \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and\n\u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e attributes completely replace these older attributes. The new\nattributes support everything the older attributes did, as well as adding new\ncapabilities.\u003c/p\u003e\n\n\u003ch2 id=\"built-in_commands\" data-text=\"Built-in commands\" tabindex=\"-1\"\u003eBuilt-in commands\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e attribute has a set of built-in behaviours which map to various\nAPIs for interactive elements:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eshow-popover\u003c/code\u003e: Maps to \u003ccode translate=\"no\" dir=\"ltr\"\u003eel.showPopover()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003ehide-popover\u003c/code\u003e: Maps to \u003ccode translate=\"no\" dir=\"ltr\"\u003eel.hidePopover()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003etoggle-popover\u003c/code\u003e: Maps to \u003ccode translate=\"no\" dir=\"ltr\"\u003eel.togglePopover()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eshow-modal\u003c/code\u003e: Maps to \u003ccode translate=\"no\" dir=\"ltr\"\u003edialogEl.showModal()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eclose\u003c/code\u003e: Maps to \u003ccode translate=\"no\" dir=\"ltr\"\u003edialogEl.close()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese commands map to their JavaScript counterparts, while also streamlining\naccessibility (such as providing the \u003ccode translate=\"no\" dir=\"ltr\"\u003earia-details\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003earia-expanded\u003c/code\u003e\nequivalent relations), focus management, and more.\u003c/p\u003e\n\n\u003ch3 id=\"example_a_confirmation_dialog_with_command_and_commandfor\" data-text=\"Example: A confirmation dialog with command and commandfor\" tabindex=\"-1\"\u003eExample: A confirmation dialog with \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e\u003c/h3\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;button commandfor=\u0026#34;confirm-dialog\u0026#34; command=\u0026#34;show-modal\u0026#34;\u0026gt;\n  Delete Record\n\u0026lt;/button\u0026gt;\n\u0026lt;dialog id=\u0026#34;confirm-dialog\u0026#34;\u0026gt;\n  \u0026lt;header\u0026gt;\n    \u0026lt;h1\u0026gt;Delete Record?\u0026lt;/h1\u0026gt;\n    \u0026lt;button commandfor=\u0026#34;confirm-dialog\u0026#34; command=\u0026#34;close\u0026#34; aria-label=\u0026#34;Close\u0026#34; value=\u0026#34;close\u0026#34;\u0026gt;\n      \u0026lt;img role=\u0026#34;none\u0026#34; src=\u0026#34;/close-icon.svg\u0026#34;\u0026gt;\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/header\u0026gt;\n  \u0026lt;p\u0026gt;Are you sure? This action cannot be undone\u0026lt;/p\u0026gt;\n  \u0026lt;footer\u0026gt;\n    \u0026lt;button commandfor=\u0026#34;confirm-dialog\u0026#34; command=\u0026#34;close\u0026#34; value=\u0026#34;cancel\u0026#34;\u0026gt;\n      Cancel\n    \u0026lt;/button\u0026gt;\n    \u0026lt;button commandfor=\u0026#34;confirm-dialog\u0026#34; command=\u0026#34;close\u0026#34; value=\u0026#34;delete\u0026#34;\u0026gt;\n      Delete\n    \u0026lt;/button\u0026gt;\n  \u0026lt;/footer\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eClicking the \u003cstrong\u003eDelete Record\u003c/strong\u003e button will open the dialog as a modal, while\nclicking the \u003cstrong\u003eClose\u003c/strong\u003e, \u003cstrong\u003eCancel\u003c/strong\u003e, or \u003cstrong\u003eDelete\u003c/strong\u003e buttons will close the dialog while\nalso dispatching a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;close\u0026#34;\u003c/code\u003e event on the dialog, which has a \u003ccode translate=\"no\" dir=\"ltr\"\u003ereturnValue\u003c/code\u003e\nproperty matching the button\u0026#39;s value.\nThis reduces the need for JavaScript beyond a single event\nlistener on the dialog to determine what to do next:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003edialog\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddEventListener\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;close\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereturnValue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;cancel\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;cancel was clicked\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereturnValue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;close\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;close was clicked\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereturnValue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;delete\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;delete was clicked\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"custom_commands\" data-text=\"Custom commands\" tabindex=\"-1\"\u003eCustom commands\u003c/h2\u003e\n\n\u003cp\u003eIn addition to the built-in commands, you can define custom commands using a\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e--\u003c/code\u003e prefix. Custom commands will dispatch a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;command\u0026#34;\u003c/code\u003e event on the target\nelement (just like the built-in commands), but otherwise will never perform any\nadditional logic like the built-in values do. This gives flexibility for\nbuilding components that can react to buttons in various ways without having to\nprovide wrapper components, traverse the DOM for the target element, or mapping\nbutton clicks to state changes. This lets you provide an API \u003cem\u003ewithin\u003c/em\u003e HTML for\nyour components:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;button commandfor=\u0026#34;the-image\u0026#34; command=\u0026#34;--rotate-landscape\u0026#34;\u0026gt;\n Landscape\n\u0026lt;/button\u0026gt;\n\u0026lt;button commandfor=\u0026#34;the-image\u0026#34; command=\u0026#34;--rotate-portrait\u0026#34;\u0026gt;\n Portrait\n\u0026lt;/button\u0026gt;\n\n\u0026lt;img id=\u0026#34;the-image\u0026#34; src=\u0026#34;photo.jpg\u0026#34;\u0026gt;\n\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt;\n  const image = document.getElementById(\u0026#34;the-image\u0026#34;);\n  image.addEventListener(\u0026#34;command\u0026#34;, (event) =\u0026gt; {\n   if ( event.command == \u0026#34;--rotate-landscape\u0026#34; ) {\n    image.style.rotate = \u0026#34;-90deg\u0026#34;\n   } else if ( event.command == \u0026#34;--rotate-portrait\u0026#34; ) {\n    image.style.rotate = \u0026#34;0deg\u0026#34;\n   }\n  });\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"commands_in_the_shadowdom\" data-text=\"Commands in the ShadowDOM\" tabindex=\"-1\"\u003eCommands in the ShadowDOM\u003c/h2\u003e\n\n\u003cp\u003eGiven the \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e attribute takes an ID, there are restrictions around\ncrossing the shadow DOM. In these cases you can use the JavaScript API to set\nthe \u003ccode translate=\"no\" dir=\"ltr\"\u003e.commandForElement\u003c/code\u003e property which can set any element, across shadow\nroots:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;my-element\u0026gt;\n  \u0026lt;template shadowrootmode=open\u0026gt;\n    \u0026lt;button command=\u0026#34;show-popover\u0026#34;\u0026gt;Show popover\u0026lt;/button\u0026gt;\n    \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt;\n  \u0026lt;/template\u0026gt;\n  \u0026lt;div popover\u0026gt;\u0026lt;!-- ... --\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;/my-element\u0026gt;\n\u0026lt;script\u0026gt;\ncustomElements.define(\u0026#34;my-element\u0026#34;, class extends HTMLElement {\n  connectedCallback() {\n    const popover = this.querySelector(\u0026#39;[popover]\u0026#39;);\n    // The commandForElement can set cross-shadow root elements.\n    this.shadowRoot.querySelector(\u0026#39;button\u0026#39;).commandForElement = popover;\n  }\n});\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eFuture proposals may provide a declarative way to share references across shadow\nboundaries, such as the\n\u003ca href=\"https://github.com/WICG/webcomponents/blob/gh-pages/proposals/reference-target-explainer.md\"\u003eReference Target Proposal\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"whats_next\" data-text=\"What\u0026#39;s next?\" tabindex=\"-1\"\u003eWhat\u0026#39;s next?\u003c/h2\u003e\n\n\u003cp\u003eWe\u0026#39;ll be continuing to explore possibilities for new built-in commands, to cover\ncommon functionality that websites use. Proposed ideas are covered in the\n\u003ca href=\"https://open-ui.org/components/future-invokers.explainer/\"\u003eOpen UI Proposal\u003c/a\u003e.\nSome of the ideas already explored:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpening and closing \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements.\u003c/li\u003e\n\u003cli\u003eA \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;show-picker\u0026#34;\u003c/code\u003e command for \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;input\u0026gt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;select\u0026gt;\u003c/code\u003e elements, mapping to\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eshowPicker()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePlayback commands for \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;video\u0026gt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e elements.\u003c/li\u003e\n\u003cli\u003eCopying text content from elements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe welcome community input—if you have suggestions don\u0026#39;t hesitate to file an\nissue on the\n\u003ca href=\"https://github.com/openui/open-ui/issues/new\"\u003eOpen UI Issue Tracker\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"learn_more\" data-text=\"Learn more\" tabindex=\"-1\"\u003eLearn more\u003c/h2\u003e\n\n\u003cp\u003eFind more information about \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommand\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003ecommandfor\u003c/code\u003e in\n\u003ca href=\"https://html.spec.whatwg.org/multipage/form-elements.html#attr-button-command\"\u003ethe specification\u003c/a\u003e\nand on\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/Invoker_Commands_API\"\u003eMDN\u003c/a\u003e.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \n  \n\u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2025-03-07 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2025-03-07 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
