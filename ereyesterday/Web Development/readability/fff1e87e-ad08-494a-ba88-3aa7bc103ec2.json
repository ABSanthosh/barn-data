{
  "id": "fff1e87e-ad08-494a-ba88-3aa7bc103ec2",
  "title": "Case Study: Combining Cutting-Edge CSS Features Into a “Course Navigation” Component",
  "link": "https://css-tricks.com/case-study-combining-cutting-edge-css-features-into-a-course-navigation-component/",
  "description": "Having been tasked with creating a UI component for navigating the content of an online course, Daniel found himself neck-deep in a pool of new CSS features that he wound up using on the project. Case Study: Combining Cutting-Edge CSS Features Into a “Course Navigation” Component originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Daniel Schwarz",
  "published": "Tue, 25 Mar 2025 12:47:18 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "Case Studies"
  ],
  "byline": "Daniel Schwarz",
  "length": 17718,
  "excerpt": "Having been tasked with creating a UI component for navigating the content of an online course, Daniel found himself neck-deep in a pool of new CSS features that he wound up using on the project.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I came across this awesome article navigator by Jhey Tompkins: It solved a UX problem I was facing on a project, so I’ve adapted it to the needs of an online course — a “course navigator” if you will — and built upon it. And today I’m going to pick it apart and show you how it all works: You can see I’m imagining this as some sort of navigation that you might find in an online learning management system that powers an online course. To summarize what this component does, it: links to all course lessons, smoothly scrolls to anchored lesson headings, indicates how much of the current lesson has been read, toggles between light and dark modes, and sits fixed at the bottom and collapses on scroll. Also, while not a feature, we won’t be using JavaScript. You might think that’s impossible, but the spate of CSS features that have recently shipped make all of this possible with vanilla CSS, albeit using bleeding-edge techniques that are only fully supported by Chrome at the time I’m writing this. So, crack open the latest version and let’s do this together! The HTML We’re looking at a disclosure widget (the \u003cdetails\u003e element) pinned to the bottom of the page with fixed positioning. Behind it? A course lesson (or something of that effect) wrapped in an \u003carticle\u003e with ids on the headings for same-page anchoring. Clicking on the disclosure’s \u003csummary\u003e toggles the course navigation, which is wrapped in a ::details-content pseudo-element. This navigation links to other lessons but also scrolls to the aforementioned headings of the current lesson. The \u003csummary\u003e contains a label (since it functions as a toggle-disclosure button), the name of the current lesson, the distance scrolled, and a dark mode toggle. With me so far? \u003cdetails\u003e \u003c!-- The toggle (flex →) --\u003e \u003csummary\u003e \u003cspan\u003e\u003c!-- Toggle label --\u003e\u003c/span\u003e \u003cspan\u003e\u003c!-- Current lesson + % read --\u003e\u003c/span\u003e \u003clabel\u003e\u003c!-- Light/dark-mode toggle --\u003e\u003c/label\u003e \u003c/summary\u003e \u003c!-- ::details-content --\u003e \u003c!-- Course navigation --\u003e \u003c!-- /::details-content --\u003e \u003c/details\u003e \u003carticle\u003e \u003ch1 id=\"sectionA\"\u003eSection A\u003c/h1\u003e \u003cp\u003e...\u003c/p\u003e \u003ch2 id=\"sectionB\"\u003eSection B\u003c/h2\u003e \u003cp\u003e...\u003c/p\u003e \u003ch2 id=\"sectionC\"\u003eSection C\u003c/h2\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e Getting into position First, we’ll place the disclosure with fixed positioning so that it’s pinned to the bottom of the page: details { position: fixed; inset: 24px; /* Use as margin */ place-self: end center; /* y x */ } Setting up CSS-only dark mode (the new way) There are certain scenarios where dark mode is better for accessibility, especially for the legibility of long-form content, so let’s set that up. First, the HTML. We have an ugly checkbox input that’s hidden thanks to its hidden attribute, followed by an \u003ci\u003e which’ll be a better-looking faux checkbox once we’ve sprinkled on some Font Awesome, followed by a \u003cspan\u003e for the checkbox’s text label. All of this is then wrapped in an actual \u003clabel\u003e, which is wrapped by the \u003csummary\u003e. We wrap the label’s content in a \u003cspan\u003e so that flexbox gaps get applied between everything. Functionally, even though the checkbox is hidden, it toggles whenever its label is clicked. And on that note, it might be a good idea to place an explicit aria-label on this label, just to be 100% sure that screen readers announce a label, since implicit labels don’t always get picked up. \u003cdetails\u003e \u003csummary\u003e \u003c!-- ... --\u003e \u003clabel aria-label=\"Dark mode\"\u003e \u003cinput type=\"checkbox\" hidden\u003e \u003ci\u003e\u003c/i\u003e \u003cspan\u003eDark mode\u003c/span\u003e \u003c/label\u003e \u003c/summary\u003e \u003c!-- ... --\u003e \u003c/details\u003e Next we need to put the right icons in there, subject to a little conditional logic. Rather than use Font Awesome’s HTML classes and have to mess around with CSS overwrites, we’ll use Font Awesome’s CSS properties with our rule logic, as follows: If the \u003ci\u003e element is followed by (notice the next-sibling combinator) a checked checkbox, we’ll display a checked checkbox icon in it. If it’s followed by an unchecked checkbox, we’ll display an unchecked checkbox icon in it. It’s still the same rule logic even if you don’t use Font Awesome. /* Copied from Font Awesome’s CSS */ i::before { font-style: normal; font-family: \"Font Awesome 6 Free\"; display: inline-block; width: 1.25em; /* Prevents content shift when swapping to differently sized icons by making them all have the same width (this is equivalent to Font Awesome’s .fa-fw class) */ } /* If followed by a checked checkbox... */ input[type=checkbox]:checked + i::before { content: \"\\f058\"; font-weight: 900; } /* If followed by an unchecked checkbox... */ input[type=checkbox]:not(:checked) + i::before { content: \"\\f111\"; font-weight: 400; } We need to implement the modes at the root level (again, using a little conditional logic). If the root :has the checked checkbox, apply color-scheme: dark. If the root does :not(:has) the unchecked checkbox, then we apply color-scheme: light. /* If the root has a checked checkbox... */ :root:has(input[type=checkbox]:checked) { color-scheme: dark; } /* If the root does not have a checked checkbox... */ :root:not(:has(input[type=checkbox]:checked)) { color-scheme: light; } If you toggle the checkbox, your web browser’s UI will already toggle between light and dark color schemes. Now let’s make sure that our demo does the same thing using the light-dark() CSS function, which takes two values — the light mode color and then the dark mode color. You can utilize this function instead of any color data type (later on we’ll even use it within a conic gradient). In the demo I’m using the same HSL color throughout but with different lightness values, then flipping the lightness values based on the mode: color: light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%)); background: light-dark(hsl(var(--hs) 10%), hsl(var(--hs) 90%)); I don’t think the light-dark() function is any better than swapping out CSS variables, but I don’t believe it’s any worse either. Totally up to you as far as which approach you choose. Displaying scroll progress Now let’s display the amount read as defined by the scroll progress, first, as what I like to call a “progress pie” and then, second, as a plain-text percentage. These’ll go in the middle part of the \u003csummary\u003e: \u003cdetails\u003e \u003csummary\u003e \u003c!-- ... --\u003e \u003cspan\u003e \u003cspan id=\"progress-pie\"\u003e\u003c/span\u003e \u003cspan\u003e1. LessonA\u003c/span\u003e \u003cspan id=\"progress-percentage\"\u003e\u003c/span\u003e \u003c/span\u003e \u003c!-- ... --\u003e \u003c/summary\u003e \u003c!-- ... --\u003e \u003c/details\u003e What we need is to display the percentage and allow it to “count” as the scroll position changes. Normally, this is squarely in JavaScript territory. But now that we can define our own custom properties, we can establish a variable called --percentage that is formatted as an integer that defaults to a value of 0. This provides CSS with the context it needs to read and interpolate the value between 0 and 100, which is the maximum value we want to support. So, first, we define the variable as a custom property: @property --percentage { syntax: \"\u003cinteger\u003e\"; inherits: true; initial-value: 0; } Then we define the animation in keyframes so that the value of --percentage is updated from 0 to 100: @keyframes updatePercentage { to { --percentage: 100; } } And, finally, we apply the animation on the root element: :root { animation: updatePercentage; animation-timeline: scroll(); counter-reset: percentage var(--percentage); } Notice what we’re doing here: this is a scroll-driven animation! By setting the animation-timeline to scroll(), we’re no longer running the animation based on the document’s timeline but instead based on the user’s scroll position. You can dig deeper into scroll timelines in the CSS-Tricks Almanac. Since we’re dealing with an integer, we can target the ::before pseudo-element and place the percentage value inside of it using the content property and a little counter() hacking (followed by the percentage symbol): #progress-percentage::before { content: counter(percentage) \"%\"; min-width: 40px; display: inline-block; /* Prevents content shift */ } The progress pie is just as straightforward. It’s a conic gradient made up of two colors that are positioned using 0% and the scroll percentage! This means that you’ll need that --percentage variable as an actual percentage, but you can convert it into such by multiplying it by 1% (calc(var(--percentage) * 1%))! #progress-pie { aspect-ratio: 1; background: conic-gradient(hsl(var(--hs) 50%) calc(var(--percentage) * 1%), light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%)) 0%); border-radius: 50%; /* Make it a circle */ width: 17px; /* Same dimensions as the icons */ } Creating a (good) course navigation Now for the table contents containing the nested lists of lesson sections within them, starting with some resets. While there are more resets in the demo and more lines of code overall, two specific resets are vital to the UX of this component. First, here’s an example of how the nested lists are marked up: \u003cdetails\u003e \u003csummary\u003e \u003c!-- ... --\u003e \u003c/summary\u003e \u003col\u003e \u003cli class=\"active\"\u003e \u003ca\u003eLessonA\u003c/a\u003e \u003col\u003e \u003cli\u003e\u003ca href=\"#sectionA\"\u003eSectionA\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#sectionB\"\u003eSectionB\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#sectionC\"\u003eSectionC\u003c/a\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/li\u003e \u003cli\u003e\u003ca\u003eLessonB\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca\u003eLessonC\u003c/a\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/details\u003e Let’s reset the list spacing in CSS: ol { padding-left: 0; list-style-position: inside; } padding-left: 0 ensures that the parent list and all nested lists snap to the left side of the disclosure, minus any padding you might want to add. Don’t worry about the indentation of nested lists — we have something planned for those. list-style-position: inside ensures that the list markers snap to the side, rather than the text, causing the markers to overflow. After that, we slap color: transparent on the ::markers of nested \u003cli\u003e elements since we don’t need the lesson section titles to be numbered. We’re only using nested lists for semantics, and nested numbered lists specifically because a different type of list marker (e.g., bullets) would cause vertical misalignment between the course’s lesson titles and the lesson section titles. ol ol li::marker { color: transparent; } Finally, so that users can more easily traverse the current lesson, we’ll dim all list items that aren’t related to the current lesson. It’s a form of emphasizing something by de-emphasizing others: details { /* The default color */ color: light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%)); } /* \u003cli\u003es without .active that’re direct descendants of the parent \u003col\u003e */ ol:has(ol) \u003e li:not(.active) { /* A less intense color */ color: light-dark(hsl(var(--hs) 80%), hsl(var(--hs) 20%)); } /* Also */ a { color: inherit; } One more thing… those anchor links scroll users to specific headings, right? So, putting scroll-behavior: smooth on the root to enables smooth scrolling between them. And that percentage-read tracker that we created? Yep, that’ll work here as well. :root { scroll-behavior: smooth; /* Smooth anchor scrolling */ scroll-padding-top: 20px; /* A scroll offset, basically */ } Transitioning the disclosure Next, let’s transition the opening and closing of the ::details-content pseudo-element. By default, the \u003cdetails\u003e element snaps open and closed when clicked, but we want a smooth transition instead. Geoff recently detailed how to do this in a comprehensive set of notes about the \u003cdetails\u003e element, but we’ll break it down together. First, we’ll transition from height: 0 to height: auto. This is a brand-new feature in CSS! We start by “opting into” the feature at the root level with interpolate-size: allow-keywords`: :root { interpolate-size: allow-keywords; } I recommend setting overflow-y: clip on details::details-content to prevent the content from overflowing the disclosure as it transitions in and out: details::details-content { overflow-y: clip; } Another option is sliding the content out and then fading it in (and vice-versa), but you’ll need to be quite specific about the transition’s setup. First, for the “before” and “after” states, you’ll need to target both details[open] and details:not([open]), because vaguely targeting details and then overwriting the transitioning styles with details[open] doesn’t allow us to reverse the transition. After that, slap the same transition on both but with different values for the transition delays so that the fade happens after when opening but before when closing. Finally, you’ll also need to specify which properties are transitioned. We could simply put the all keyword in there, but that is neither performant nor allows us to set the transition durations and delays for each property. So we’ll list them individually instead in a comma-separated list. Notice that we’re specifically transitioning the content-visibility and using the allow-discrete keyword because it is a discrete property. this is why we opted into interpolate-size: allow-keywords earlier. details:not([open])::details-content { height: 0; opacity: 0; padding: 0 42px; filter: blur(10px); border-top: 0 solid light-dark(hsl(var(--hs) 30%), hsl(var(--hs) 70%)); transition: height 300ms 300ms, padding-top 300ms 300ms, padding-bottom 300ms 300ms, content-visibility 300ms 300ms allow-discrete, filter 300ms 0ms, opacity 300ms 0ms; } details[open]::details-content { height: auto; opacity: 1; padding: 42px; filter: blur(0); border-top: 1px solid light-dark(hsl(var(--hs) 30%), hsl(var(--hs) 70%)); transition: height 300ms 0ms, padding-top 300ms 0ms, padding-bottom 300ms 0ms, content-visibility 300ms 0ms allow-discrete, filter 300ms 300ms, opacity 300ms 300ms; } Giving the summary a label and icons Preceding the current lesson’s title, percentage read, and dark mode toggle, the \u003csummary\u003e element needs a label that helps describe what it does. I went with “Navigate course” and included an aria-label saying the same thing so that screen readers didn’t announce all that other stuff. \u003cdetails\u003e \u003csummary aria-label=\"Navigate course\"\u003e \u003cspan\u003e \u003ci\u003e\u003c/i\u003e \u003cspan\u003eNavigate course\u003c/span\u003e \u003c/span\u003e \u003c!-- ... --\u003e \u003c/summary\u003e \u003c!-- ... --\u003e \u003c/details\u003e In addition, the summary gets display: flex so that we can easily separate the three sections with a gap, which also removes the summary’s default marker, allowing you to use your own. (Again, I’m using Font Awesome in the demo.) i::before { width: 1.25em; font-style: normal; display: inline-block; font-family: \"Font Awesome 6 Free\"; } details i::before { content: \"\\f0cb\"; /* fa-list-ol */ } details[open] i::before { content: \"\\f00d\"; /* fa-xmark */ } /* For older Safari */ summary::-webkit-details-marker { display: none; } And finally, if you’re pro-cursor: pointer for most interactive elements, you’ll want to use it on the summary and manually make sure that the checkbox’s label inherits it, as it doesn’t do that automatically. summary { cursor: pointer; } label { cursor: inherit; } Giving the disclosure an auto-closure mechanism A tiny bit of JavaScript couldn’t hurt though, could it? I know I said this is a no-JavaScript deal, but this one-liner will automatically close the disclosure when the mouse leaves it: document.querySelector(\"details\").addEventListener(\"mouseleave\", e =\u003e e.target.removeAttribute(\"open\")); Annoying or useful? I’ll let you decide. Setting the preferred color scheme automatically Setting the preferred color scheme automatically is certainly useful, but if you like to avoid JavaScript wherever possible, I don’t think users will be too mad for not offering this feature. Either way, the following conditional snippet checks if the user’s preferred color scheme is “dark” by evaluating the relevant CSS media query (prefers-color-scheme: dark) using window.matchMedia and matches. If the condition is met, the checkbox gets checked, and then the CSS handles the rest. if (window.matchMedia(\"prefers-color-scheme: dark\").matches) { document.querySelector(\"input[type=checkbox]\").checked = true; } Recap This has been fun! It’s such a blessing we can combine all of these cutting-edge CSS features, not just into one project but into a single component. To summarize, that includes: a course navigator that shows the current lesson, all other lessons, and smooth scrolls between the different headings, a percentage-scrolled tracker that shows the amount read in plain text and as a conic gradient… pie chart, a light/dark-mode toggle (with some optional JavaScript that detects the preferred color scheme), and it is all packed into a single, floating, animated, native disclosure component. The newer CSS features we covered in the process: Scroll-driven animations interpolate-size: allow-keywords for transitioning between 0 and auto smooth scrolling by way of scroll-behavior: smooth dark mode magic using the light-dark() function a progress chart made with a conic-gradient() styling the ::details-content pseudo-element animating the \u003cdetails\u003e element Thanks to Jhey for the inspiration! If you’re not following Jhey on Bluesky or X, you’re missing out. You can also see his work on CodePen, some of which he has talked about right here on CSS-Tricks.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/course-navigation-ui.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI came across this awesome \u003ca href=\"https://codepen.io/jh3y/pen/NWQYPvy\" rel=\"noopener\"\u003earticle navigator\u003c/a\u003e by \u003ca href=\"https://jhey.dev/\" rel=\"noopener\"\u003eJhey Tompkins\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIt solved a UX problem I was facing on a project, so I’ve adapted it to the needs of an online course — a “course navigator” if you will — and built upon it. And today I’m going to pick it apart and show you how it all works:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou can see I’m imagining this as some sort of navigation that you might find in an online learning management system that powers an online course. To summarize what this component does, it:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003elinks to all course lessons,\u003c/li\u003e\n\n\n\n\u003cli\u003esmoothly scrolls to anchored lesson headings,\u003c/li\u003e\n\n\n\n\u003cli\u003eindicates how much of the current lesson has been read,\u003c/li\u003e\n\n\n\n\u003cli\u003etoggles between light and dark modes, and\u003c/li\u003e\n\n\n\n\u003cli\u003esits fixed at the bottom and collapses on scroll.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAlso, while not a feature, we won’t be using JavaScript. You might think that’s impossible, but the spate of CSS features that have recently shipped make all of this possible with vanilla CSS, albeit using bleeding-edge techniques that are only fully supported by Chrome at the time I’m writing this. So, crack open the latest version and let’s do this together!\u003c/p\u003e\n\n\n\u003ch3 id=\"the-html\"\u003eThe HTML\u003c/h3\u003e\n\n\n\u003cp\u003eWe’re looking at a disclosure widget (the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element) pinned to the bottom of the page with fixed positioning. Behind it? A course lesson (or something of that effect) wrapped in an \u003ccode\u003e\u0026lt;article\u0026gt;\u003c/code\u003e with \u003ccode\u003eid\u003c/code\u003es on the headings for same-page anchoring. Clicking on the disclosure’s \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e toggles the course navigation, which is wrapped in a \u003ccode\u003e::details-content\u003c/code\u003e pseudo-element. This navigation links to other lessons but also scrolls to the aforementioned headings of the current lesson.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e contains a label (since it functions as a toggle-disclosure button), the name of the current lesson, the distance scrolled, and a dark mode toggle.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith me so far?\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \n  \u0026lt;!-- The toggle (flex →) --\u0026gt;\n  \u0026lt;summary\u0026gt;\n    \u0026lt;span\u0026gt;\u0026lt;!-- Toggle label --\u0026gt;\u0026lt;/span\u0026gt;\n    \u0026lt;span\u0026gt;\u0026lt;!-- Current lesson + % read --\u0026gt;\u0026lt;/span\u0026gt;\n    \u0026lt;label\u0026gt;\u0026lt;!-- Light/dark-mode toggle --\u0026gt;\u0026lt;/label\u0026gt;\n  \u0026lt;/summary\u0026gt;\n  \n  \u0026lt;!-- ::details-content --\u0026gt;\n    \u0026lt;!-- Course navigation --\u0026gt;\n  \u0026lt;!-- /::details-content --\u0026gt;\n    \n\u0026lt;/details\u0026gt;\n\n\u0026lt;article\u0026gt;\n  \u0026lt;h1 id=\u0026#34;sectionA\u0026#34;\u0026gt;Section A\u0026lt;/h1\u0026gt;\n  \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;h2 id=\u0026#34;sectionB\u0026#34;\u0026gt;Section B\u0026lt;/h2\u0026gt;\n  \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;h2 id=\u0026#34;sectionC\u0026#34;\u0026gt;Section C\u0026lt;/h2\u0026gt;\n  \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n\u0026lt;/article\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"getting-into-position\"\u003eGetting into position\u003c/h3\u003e\n\n\n\u003cp\u003eFirst, we’ll place the disclosure with fixed positioning so that it’s pinned to the bottom of the page:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails {\n  position: fixed;\n  inset: 24px; /* Use as margin */\n  place-self: end center; /* y x */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"setting-up-css-only-dark-mode-the-new-way-\"\u003eSetting up CSS-only dark mode (the new way)\u003c/h3\u003e\n\n\n\u003cp\u003eThere are certain scenarios where dark mode is better for accessibility, especially for the legibility of long-form content, so let’s set that up.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, the HTML. We have an ugly checkbox input that’s hidden thanks to its \u003ccode\u003ehidden\u003c/code\u003e attribute, followed by an \u003ccode\u003e\u0026lt;i\u0026gt;\u003c/code\u003e which’ll be a better-looking faux checkbox once we’ve sprinkled on some \u003ca href=\"https://fontawesome.com\" rel=\"noopener\"\u003eFont Awesome\u003c/a\u003e, followed by a \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e for the checkbox’s text label. All of this is then wrapped in an actual \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e, which is wrapped by the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e. We wrap the label’s content in a \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e so that flexbox \u003ccode\u003egap\u003c/code\u003es get applied between everything.\u003c/p\u003e\n\n\n\n\u003cp\u003eFunctionally, even though the checkbox is hidden, it toggles whenever its label is clicked. And on that note, it might be a good idea to place an explicit \u003ccode\u003earia-label\u003c/code\u003e on this label, just to be 100% sure that screen readers announce a label, since implicit labels don’t always get picked up.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"7\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n\n  \u0026lt;summary\u0026gt;\n    \n    \u0026lt;!-- ... --\u0026gt;\n        \n    \u0026lt;label aria-label=\u0026#34;Dark mode\u0026#34;\u0026gt;\n      \u0026lt;input type=\u0026#34;checkbox\u0026#34; hidden\u0026gt;\n      \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\n      \u0026lt;span\u0026gt;Dark mode\u0026lt;/span\u0026gt;\n    \u0026lt;/label\u0026gt;\n        \n  \u0026lt;/summary\u0026gt;\n    \n  \u0026lt;!-- ... --\u0026gt;\n  \n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext we need to put the right icons in there, subject to a little conditional logic. Rather than use Font Awesome’s HTML classes and have to mess around with CSS overwrites, we’ll use \u003ca href=\"https://docs.fontawesome.com/web/add-icons/pseudo-elements\" rel=\"noopener\"\u003eFont Awesome’s CSS properties\u003c/a\u003e with our rule logic, as follows:\u003c/p\u003e\n\n\n\n\u003cp\u003eIf the \u003ccode\u003e\u0026lt;i\u0026gt;\u003c/code\u003e element is followed by (notice the \u003ca href=\"https://css-tricks.com/almanac/selectors/a/adjacent-sibling/\"\u003enext-sibling combinator\u003c/a\u003e) a checked checkbox, we’ll display a checked checkbox icon in it. If it’s followed by an unchecked checkbox, we’ll display an \u003cem\u003eunchecked\u003c/em\u003e checkbox icon in it. It’s still the same rule logic even if you don’t use Font Awesome.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Copied from Font Awesome’s CSS */\ni::before {\n  font-style: normal;\n  font-family: \u0026#34;Font Awesome 6 Free\u0026#34;;\n  display: inline-block;\n  width: 1.25em; /* Prevents content shift when swapping to differently sized icons by making them all have the same width (this is equivalent to Font Awesome’s .fa-fw class) */\n}\n\n/* If followed by a checked checkbox... */\ninput[type=checkbox]:checked + i::before {\n  content: \u0026#34;\\f058\u0026#34;;\n  font-weight: 900;\n}\n\n/* If followed by an unchecked checkbox... */\ninput[type=checkbox]:not(:checked) + i::before {\n  content: \u0026#34;\\f111\u0026#34;;\n  font-weight: 400;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe need to implement the modes at the root level (again, using a little conditional logic). If the root \u003ccode\u003e:has\u003c/code\u003e the checked checkbox, apply \u003ccode\u003ecolor-scheme: dark\u003c/code\u003e. If the root does \u003ccode\u003e:not(:has)\u003c/code\u003e the \u003cem\u003eunchecked\u003c/em\u003e checkbox, then we apply \u003ccode\u003ecolor-scheme: light\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* If the root has a checked checkbox... */\n:root:has(input[type=checkbox]:checked) {\n  color-scheme: dark;\n}\n\n/* If the root does not have a checked checkbox... */\n:root:not(:has(input[type=checkbox]:checked)) {\n  color-scheme: light;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf you toggle the checkbox, your web browser’s UI will already toggle between light and dark color schemes. Now let’s make sure that our demo does the same thing using the \u003ca href=\"https://css-tricks.com/almanac/functions/l/light-dark/\"\u003e\u003ccode\u003elight-dark()\u003c/code\u003e CSS function\u003c/a\u003e, which takes two values — the light mode color and then the dark mode color. You can utilize this function instead of any color data type (later on we’ll even use it within a conic gradient).\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"light-dark\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eIn the demo I’m using the same HSL color throughout but with different lightness values, then flipping the lightness values based on the mode:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ecolor: light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%));\nbackground: light-dark(hsl(var(--hs) 10%), hsl(var(--hs) 90%));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI don’t think the \u003ccode\u003elight-dark()\u003c/code\u003e function is any better than swapping out CSS variables, but I don’t believe it’s any worse either. Totally up to you as far as which approach you choose.\u003c/p\u003e\n\n\n\u003ch3 id=\"displaying-scroll-progress\"\u003eDisplaying scroll progress\u003c/h3\u003e\n\n\n\u003cp\u003eNow let’s display the amount read as defined by the scroll progress, first, as what I like to call a “progress pie” and then, second, as a plain-text percentage. These’ll go in the middle part of the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n\n  \u0026lt;summary\u0026gt;\n    \n    \u0026lt;!-- ... --\u0026gt;\n      \n    \u0026lt;span\u0026gt;\n      \u0026lt;span id=\u0026#34;progress-pie\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\n      \u0026lt;span\u0026gt;1. LessonA\u0026lt;/span\u0026gt;\n      \u0026lt;span id=\u0026#34;progress-percentage\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\n    \u0026lt;/span\u0026gt;\n        \n    \u0026lt;!-- ... --\u0026gt;\n\n  \u0026lt;/summary\u0026gt;\n    \n  \u0026lt;!-- ... --\u0026gt;\n    \n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhat we need is to display the percentage and allow it to “count” as the scroll position changes. Normally, this is squarely in JavaScript territory. But now that we can define our own custom properties, we can establish a variable called \u003ccode\u003e--percentage\u003c/code\u003e that is formatted as an integer that defaults to a value of \u003ccode\u003e0\u003c/code\u003e. This provides CSS with the context it needs to read and interpolate the value between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e100\u003c/code\u003e, which is the maximum value we want to support.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, first, we define the variable as a custom property:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --percentage {\n  syntax: \u0026#34;\u0026lt;integer\u0026gt;\u0026#34;;\n  inherits: true;\n  initial-value: 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen we define the animation in keyframes so that the value of \u003ccode\u003e--percentage\u003c/code\u003e is updated from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e100\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes updatePercentage {\n  to {\n    --percentage: 100;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd, finally, we apply the animation on the root element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"3\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  animation: updatePercentage;\n  animation-timeline: scroll();\n  counter-reset: percentage var(--percentage);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNotice what we’re doing here: this is a \u003cstrong\u003escroll-driven animation\u003c/strong\u003e! By setting the \u003ccode\u003eanimation-timeline\u003c/code\u003e to \u003ccode\u003escroll()\u003c/code\u003e, we’re no longer running the animation based on the document’s timeline but instead based on the user’s scroll position. \u003ca href=\"https://css-tricks.com/almanac/properties/a/animation-timeline/\"\u003eYou can dig deeper into scroll timelines in the CSS-Tricks Almanac.\u003c/a\u003e\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"scroll-driven-animations\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eSince we’re dealing with an integer, we can target the \u003ccode\u003e::before\u003c/code\u003e pseudo-element and place the percentage value inside of it using the \u003ccode\u003econtent\u003c/code\u003e property and a little \u003ccode\u003ecounter()\u003c/code\u003e hacking (followed by the percentage symbol):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#progress-percentage::before {\n  content: counter(percentage) \u0026#34;%\u0026#34;;\n  min-width: 40px; display: inline-block; /* Prevents content shift */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe progress pie is just as straightforward. It’s a \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/#h-conic-gradients\"\u003econic gradient\u003c/a\u003e made up of two colors that are positioned using \u003ccode\u003e0%\u003c/code\u003e and the scroll percentage! This means that you’ll need that \u003ccode\u003e--percentage\u003c/code\u003e variable as an actual percentage, but you can convert it into such by multiplying it by \u003ccode\u003e1%\u003c/code\u003e (\u003ccode\u003ecalc(var(--percentage) * 1%)\u003c/code\u003e)!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#progress-pie {\n  aspect-ratio: 1;\n  background: conic-gradient(hsl(var(--hs) 50%) calc(var(--percentage) * 1%), light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%)) 0%);\n  border-radius: 50%; /* Make it a circle */\n  width: 17px; /* Same dimensions as the icons */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"creating-a-good-course-navigation\"\u003eCreating a (good) course navigation\u003c/h3\u003e\n\n\n\u003cp\u003eNow for the table contents containing the nested lists of lesson sections within them, starting with some resets. While there are more resets in the demo and more lines of code overall, two specific resets are vital to the UX of this component.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, here’s an example of how the nested lists are marked up:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n\n  \u0026lt;summary\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;/summary\u0026gt;\n  \n  \u0026lt;ol\u0026gt;\n    \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;\n      \u0026lt;a\u0026gt;LessonA\u0026lt;/a\u0026gt;\n      \u0026lt;ol\u0026gt;\n        \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#sectionA\u0026#34;\u0026gt;SectionA\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#sectionB\u0026#34;\u0026gt;SectionB\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n        \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#sectionC\u0026#34;\u0026gt;SectionC\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n      \u0026lt;/ol\u0026gt;\n    \u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a\u0026gt;LessonB\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a\u0026gt;LessonC\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ol\u0026gt;\n    \n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s reset the list spacing in CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  padding-left: 0;\n  list-style-position: inside;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003epadding-left: 0\u003c/code\u003e ensures that the parent list and all nested lists snap to the left side of the disclosure, minus any padding you might want to add. Don’t worry about the indentation of nested lists — we have something planned for those. \u003ccode\u003elist-style-position: inside\u003c/code\u003e ensures that the \u003cem\u003elist markers\u003c/em\u003e snap to the side, rather than the text, causing the markers to overflow.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter that, we slap \u003ccode\u003ecolor: transparent\u003c/code\u003e on the \u003ccode\u003e::marker\u003c/code\u003es of nested \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements since we don’t need the lesson section titles to be numbered. We’re only using nested lists for semantics, and nested \u003cem\u003enumbered\u003c/em\u003e lists specifically because a different type of list marker (e.g., bullets) would cause vertical misalignment between the course’s lesson titles and the lesson section titles.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol ol li::marker {\n  color: transparent;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"marker\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eFinally, so that users can more easily traverse the current lesson, we’ll dim all list items that aren’t related to the current lesson. It’s a form of \u003ca href=\"https://nerdy.dev/notebook/has-hover-not-hover.html\" rel=\"noopener\"\u003eemphasizing something by de-emphasizing others\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails {\n  /* The default color */\n  color: light-dark(hsl(var(--hs) 90%), hsl(var(--hs) 10%));\n}\n\n/* \u0026lt;li\u0026gt;s without .active that’re direct descendants of the parent \u0026lt;ol\u0026gt; */\nol:has(ol) \u0026gt; li:not(.active) {\n  /* A less intense color */\n  color: light-dark(hsl(var(--hs) 80%), hsl(var(--hs) 20%));\n}\n\n/* Also */\na {\n  color: inherit;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOne more thing… those anchor links scroll users to specific headings, right? So, putting \u003ccode\u003escroll-behavior: smooth\u003c/code\u003e on the root to enables smooth scrolling between them. And that percentage-read tracker that we created? Yep, that’ll work here as well.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  scroll-behavior: smooth; /* Smooth anchor scrolling */\n  scroll-padding-top: 20px; /* A scroll offset, basically */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"transitioning-the-disclosure\"\u003eTransitioning the disclosure\u003c/h4\u003e\n\n\n\u003cp\u003eNext, let’s transition the opening and closing of the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/d/details-content/\"\u003e::details-content\u003c/a\u003e\u003c/code\u003e pseudo-element. By default, the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element snaps open and closed when clicked, but we want a smooth transition instead. \u003ca href=\"https://css-tricks.com/using-styling-the-details-element/#aa-animate-the-opening-and-closing\"\u003eGeoff recently detailed how to do this in a comprehensive set of notes about the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element\u003c/a\u003e, but we’ll break it down together.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, we’ll transition from \u003ccode\u003eheight: 0\u003c/code\u003e to \u003ccode\u003eheight: auto\u003c/code\u003e. \u003ca href=\"https://css-tricks.com/transitioning-to-auto-height/\"\u003eThis is a brand-new feature in CSS!\u003c/a\u003e We start by “opting into” the feature at the root level with \u003ca href=\"https://css-tricks.com/almanac/properties/i/interpolate-size/\"\u003e\u003ccode\u003einterpolate-size: allow-keywords\u003c/code\u003e\u003c/a\u003e`:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  interpolate-size: allow-keywords;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"interpolate-size\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eI recommend setting \u003ccode\u003eoverflow-y: clip\u003c/code\u003e on \u003ccode\u003edetails::details-content\u003c/code\u003e to prevent the content from overflowing the disclosure as it transitions in and out:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails::details-content {\n  overflow-y: clip;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"details-content\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eAnother option is sliding the content out and \u003cem\u003ethen\u003c/em\u003e fading it in (and vice-versa), but you’ll need to be quite specific about the transition’s setup.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, for the “before” and “after” states, you’ll need to target both \u003ccode\u003edetails[open]\u003c/code\u003e and \u003ccode\u003edetails:not([open])\u003c/code\u003e, because vaguely targeting \u003ccode\u003edetails\u003c/code\u003e and then overwriting the transitioning styles with \u003ccode\u003edetails[open]\u003c/code\u003e doesn’t allow us to reverse the transition.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter that, slap the same \u003ccode\u003etransition\u003c/code\u003e on both but with different values for the transition delays so that the fade happens after when opening but before when closing.\u003c/p\u003e\n\n\n\n\u003cp\u003eFinally, you’ll also need to specify which properties are transitioned. We could simply put the \u003ccode\u003eall\u003c/code\u003e keyword in there, but that is neither performant nor allows us to set the transition durations and delays for each property. So we’ll list them individually instead in a comma-separated list. Notice that we’re specifically transitioning the \u003ccode\u003econtent-visibility\u003c/code\u003e and using the \u003ccode\u003eallow-discrete\u003c/code\u003e keyword because it is a discrete property. this is why we opted into \u003ccode\u003einterpolate-size: allow-keywords\u003c/code\u003e earlier.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"8,9,10,11,12,13,23,24,25,26,27,28\"\u003e\u003ccode markup=\"tt\"\u003edetails:not([open])::details-content {\n  height: 0;\n  opacity: 0;\n  padding: 0 42px;\n  filter: blur(10px);\n  border-top: 0 solid light-dark(hsl(var(--hs) 30%), hsl(var(--hs) 70%));\n  transition:\n    height 300ms 300ms, \n    padding-top 300ms 300ms, \n    padding-bottom 300ms 300ms, \n    content-visibility 300ms 300ms allow-discrete, \n    filter 300ms 0ms, \n    opacity 300ms 0ms;\n}\n\ndetails[open]::details-content {\n  height: auto;\n  opacity: 1;\n  padding: 42px;\n  filter: blur(0);\n  border-top: 1px solid light-dark(hsl(var(--hs) 30%), hsl(var(--hs) 70%));\n  transition: \n    height 300ms 0ms, \n    padding-top 300ms 0ms, \n    padding-bottom 300ms 0ms, \n    content-visibility 300ms 0ms allow-discrete, \n    filter 300ms 300ms, \n    opacity 300ms 300ms;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"giving-the-summary-a-label-and-icons\"\u003eGiving the summary a label and icons\u003c/h3\u003e\n\n\n\u003cp\u003ePreceding the current lesson’s title, percentage read, and dark mode toggle, the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element needs a label that helps describe what it does. I went with “Navigate course” and included an \u003ccode\u003earia-label\u003c/code\u003e saying the same thing so that screen readers didn’t announce all that other stuff.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary aria-label=\u0026#34;Navigate course\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;\n      \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;\n      \u0026lt;span\u0026gt;Navigate course\u0026lt;/span\u0026gt;\n    \u0026lt;/span\u0026gt;\n    \n    \u0026lt;!-- ... --\u0026gt;\n\n  \u0026lt;/summary\u0026gt;\n  \n  \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn addition, the summary gets \u003ccode\u003edisplay: flex\u003c/code\u003e so that we can easily separate the three sections with a \u003ccode\u003egap\u003c/code\u003e, which also removes the summary’s default marker, allowing you to use your own. (Again, I’m using Font Awesome in the demo.)\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ei::before {\n  width: 1.25em;\n  font-style: normal;\n  display: inline-block;\n  font-family: \u0026#34;Font Awesome 6 Free\u0026#34;;\n}\n\ndetails i::before {\n  content: \u0026#34;\\f0cb\u0026#34;; /* fa-list-ol */\n}\n\ndetails[open] i::before {\n  content: \u0026#34;\\f00d\u0026#34;; /* fa-xmark */\n}\n\n\n/* For older Safari */\nsummary::-webkit-details-marker {\n   display: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd finally, if you’re pro-\u003ccode\u003ecursor: pointer\u003c/code\u003e for most interactive elements, you’ll want to use it on the summary and manually make sure that the checkbox’s label inherits it, as it doesn’t do that automatically.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esummary {\n  cursor: pointer;\n}\n\nlabel {\n  cursor: inherit;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"giving-the-disclosure-an-auto-closure-mechanism\"\u003eGiving the disclosure an auto-closure mechanism\u003c/h4\u003e\n\n\n\u003cp\u003eA tiny bit of JavaScript couldn’t hurt though, could it? I know I said this is a no-JavaScript deal, but this one-liner will automatically close the disclosure when the mouse leaves it:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edocument.querySelector(\u0026#34;details\u0026#34;).addEventListener(\u0026#34;mouseleave\u0026#34;, e =\u0026gt; e.target.removeAttribute(\u0026#34;open\u0026#34;));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnnoying or useful? I’ll let you decide.\u003c/p\u003e\n\n\n\u003ch4 id=\"setting-the-preferred-color-scheme-automatically\"\u003eSetting the preferred color scheme automatically\u003c/h4\u003e\n\n\n\u003cp\u003eSetting the preferred color scheme automatically is certainly useful, but if you like to avoid JavaScript wherever possible, I don’t think users will be too mad for not offering this feature. Either way, the following conditional snippet checks if the user’s preferred color scheme is “dark” by evaluating the relevant CSS media query (\u003ccode\u003eprefers-color-scheme: dark\u003c/code\u003e) using \u003ccode\u003ewindow.matchMedia\u003c/code\u003e and \u003ccode\u003ematches\u003c/code\u003e. If the condition is met, the checkbox gets checked, and then the CSS handles the rest.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eif (window.matchMedia(\u0026#34;prefers-color-scheme: dark\u0026#34;).matches) {\n  document.querySelector(\u0026#34;input[type=checkbox]\u0026#34;).checked = true;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"recap\"\u003eRecap\u003c/h3\u003e\n\n\n\u003cp\u003eThis has been fun! It’s such a blessing we can combine all of these cutting-edge CSS features, not just into one project but into a single component. To summarize, that includes:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ea course navigator that shows the current lesson, all other lessons, and smooth scrolls between the different headings,\u003c/li\u003e\n\n\n\n\u003cli\u003ea percentage-scrolled tracker that shows the amount read in plain text and as a conic gradient… \u003cem\u003epie chart\u003c/em\u003e,\u003c/li\u003e\n\n\n\n\u003cli\u003ea light/dark-mode toggle (with some optional JavaScript that detects the preferred color scheme), and it is\u003c/li\u003e\n\n\n\n\u003cli\u003eall packed into a single, floating, animated, native disclosure component.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe newer CSS features we covered in the process:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eScroll-driven animations\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003einterpolate-size: allow-keywords\u003c/code\u003e for transitioning between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003eauto\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003esmooth scrolling by way of \u003ccode\u003escroll-behavior: smooth\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003edark mode magic using the \u003ccode\u003elight-dark()\u003c/code\u003e function\u003c/li\u003e\n\n\n\n\u003cli\u003ea progress chart made with a \u003ccode\u003econic-gradient()\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003estyling the \u003ccode\u003e::details-content\u003c/code\u003e pseudo-element\u003c/li\u003e\n\n\n\n\u003cli\u003eanimating the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThanks to Jhey for the inspiration! If you’re not following Jhey on \u003ca href=\"https://bsky.app/profile/jhey.dev/\" rel=\"noopener\"\u003eBluesky\u003c/a\u003e or \u003ca href=\"https://x.com/jh3yy/\"\u003eX\u003c/a\u003e, you’re missing out. You can also see his work on \u003ca href=\"https://codepen.io/jh3y/\" rel=\"noopener\"\u003eCodePen\u003c/a\u003e, some of which he has talked about right here on \u003ca href=\"https://css-tricks.com/author/jheytompkins/\"\u003eCSS-Tricks\u003c/a\u003e.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "19 min read",
  "publishedTime": "2025-03-25T06:47:18-06:00",
  "modifiedTime": "2025-03-25T06:47:21-06:00"
}
