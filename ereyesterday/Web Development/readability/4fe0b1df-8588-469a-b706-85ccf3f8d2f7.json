{
  "id": "4fe0b1df-8588-469a-b706-85ccf3f8d2f7",
  "title": "The Lost CSS Tricks of Cohost.org",
  "link": "https://css-tricks.com/the-lost-css-tricks-of-cohost-org/",
  "description": "In this post, Blackle Mori shows you a few of the hacks found while trying to push the limits of Cohost’s HTML support. Use these if you dare, lest you too get labelled a CSS criminal. The Lost CSS Tricks of Cohost.org originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Blackle Mori",
  "published": "Thu, 24 Apr 2025 12:49:42 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "inspiration"
  ],
  "byline": "Blackle Mori",
  "length": 11498,
  "excerpt": "In this post, Blackle Mori shows you a few of the hacks found while trying to push the limits of Cohost’s HTML support. Use these if you dare, lest you too get labelled a CSS criminal.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "You would be forgiven if you’ve never heard of Cohost.org. The bespoke, Tumblr-like social media website came and went in a flash. Going public in June 2022 with invite-only registrations, Cohost’s peach and maroon landing page promised that it would be “posting, but better.” Just over two years later, in September 2024, the site announced its shutdown, its creators citing burnout and funding problems. Today, its servers are gone for good. Any link to cohost.org redirects to the Wayback Machine’s slow but comprehensive archive. The landing page for Cohost.org, featuring our beloved eggbug. Despite its short lifetime, I am confident in saying that Cohost delivered on its promise. This is in no small part due to its user base, consisting mostly of niche internet creatives and their friends — many of whom already considered “posting” to be an art form. These users were attracted to Cohost’s opinionated, anti-capitalist design that set it apart from the mainstream alternatives. The site was free of advertisements and follower counts, all feeds were purely chronological, and the posting interface even supported a subset of HTML. It was this latter feature that conjured a community of its own. For security reasons, any post using HTML was passed through a sanitizer to remove any malicious or malformed elements. But unlike most websites, Cohost’s sanitizer was remarkably permissive. The vast majority of tags and attributes were allowed — most notably inline CSS styles on arbitrary elements. Users didn’t take long to grasp the creative opportunities lurking within Cohost’s unassuming “new post” modal. Within 48 hours of going public, the fledgling community had figured out how to post poetry using the \u003cdetails\u003e tag, port the Apple homepage from 1999, and reimplement a quick-time WarioWare game. We called posts like these “CSS Crimes,” and the people who made them “CSS Criminals.” Without even intending to, the developers of Cohost had created an environment for a CSS community to thrive. In this post, I’ll show you a few of the hacks we found while trying to push the limits of Cohost’s HTML support. Use these if you dare, lest you too get labelled a CSS criminal. Width-hacking Many of the CSS crimes of Cohost were powered by a technique that user @corncycle dubbed “width-hacking.” Using a combination of the \u003cdetails\u003e element and the CSS calc() function, we can get some pretty wild functionality: combination locks, tile matching games, Zelda-style top-down movement, the list goes on. If you’ve been around the CSS world for a while, there’s a good chance you’ve been exposed to the old checkbox hack. By combining a checkbox, a label, and creative use of CSS selectors, you can use the toggle functionality of the checkbox to implement all sorts of things. Tabbed areas, push toggles, dropdown menus, etc. However, because this hack requires CSS selectors, that meant we couldn’t use it on Cohost — remember, we only had inline styles. Instead, we used the relatively new elements \u003cdetails\u003e and \u003csummary\u003e. These elements provide the same visibility-toggling logic, but now directly in HTML. No weird CSS needed. These elements work like so: All children of the \u003cdetails\u003e element are hidden by default, except for the \u003csummary\u003e element. When the summary is clicked, it “opens” the parent details element, causing its children to become visible. We can add all sorts of styles to these elements to make this example more interesting. Below, I have styled the constituent elements to create the effect of a button that lights up when you click on it. This is achieved by giving the \u003csummary\u003e element a fixed position and size, a grey background color, and an outset border to make it look like a button. When it’s clicked, a sibling \u003cdiv\u003e is revealed that covers the \u003csummary\u003e with its own red background and border. Normally, this \u003cdiv\u003e would block further click events, but I’ve given it the declaration pointer-events: none. Now all clicks pass right on through to the \u003csummary\u003e element underneath, allowing you to turn the button back off. This is all pretty nifty, but it’s ultimately the same logic as before: something is toggled either on or off. These are only two states. If we want to make games and other gizmos, we might want to represent hundreds to thousands of states. Width-hacking gives us exactly that. Consider the following example: In this example, three \u003cdetails\u003e elements live together in an inline-flex container. Because all the \u003csummary\u003e elements are absolutely-positioned, the width of their respective \u003cdetails\u003e elements are all zero when they’re closed. Now, each of these three \u003cdetails\u003e has a small \u003cdiv\u003e inside. The first has a child with a width of 1px, the second a child with a width of 2px, and the third a width of 4px. When a \u003cdetails\u003e element is opened, it reveals its hidden \u003cdiv\u003e, causing its own width to increase. This increases the width of the inline-flex container. Because the width of the container is the sum of its children, this means its width directly corresponds to the specific \u003cdetails\u003e elements that are open. For example, if just the first and third \u003cdetails\u003e are open, the inline-flex container will have the width 1px + 4px = 5px. Conversely, if the inline-flex container is 2px wide, we can infer that the only open \u003cdetails\u003e element is the second one. With this trick, we’ve managed to encode all eight states of the three \u003cdetails\u003e into the width of the container element. This is pretty cool. Maybe we could use this as an element of some kind of puzzle game? We could show a secret message if the right combination of buttons is checked. But how do we do that? How do we only show the secret message for a specific width of that container div? In the preceding CodePen, I’ve added a secret message as two nested divs. Currently, this message is always visible — complete with a TODO reminding us to implement the logic to hide it unless the correct combination is set. You may wonder why we’re using two nested divs for such a simple message. This is because we’ll be hiding the message using a peculiar method: We will make the width of the parent div.secret be zero. Because the overflow: hidden property is used, the child div.message will be clipped, and thus invisible. Now we’re ready to implement our secret message logic. Thanks to the fact that percentage sizes are relative to the parent, we can use 100% as a stand-in for the parent’s width. We can then construct a complicated CSS calc() formula that is 350px if the container div is our target size, and 0px otherwise. With that, our secret message will be visible only when the center button is active and the others are inactive. Give it a try! This complicated calc() function that’s controlling the secret div’s width has the following graph: You can see that it’s a piecewise linear curve, constructed from multiple pieces using min/max. These pieces are placed in just the right spots so that the function maxes out when the container div is 2px— which we’ve established is precisely when only the second button is active. A surprising variety of games can be implemented using variations on this technique. Here is a tower of Hanoi game I had made that uses both width and height to track the game’s state. SVG animation So far, we’ve seen some basic functionality for implementing a game. But what if we want our games to look good? What if we want to add ✨animations?✨ Believe it or not, this is actually possible entirely within inline CSS using the power of SVG. SVG (Scalable Vector Graphics) is an XML-based image format for storing vector images. It enjoys broad support on the web — you can use it in \u003cimg\u003e elements or as the URL of a background-image property, among other things. Like HTML, an SVG file is a collection of elements. For SVG, these elements are things like \u003crect\u003e, \u003ccircle\u003e, and \u003ctext\u003e, to name a few. These elements can have all sorts of properties defined, such as fill color, stroke width, and font family. A lesser-known feature of SVG is that it can contain \u003cstyle\u003e blocks for configuring the properties of these elements. In the example below, an SVG is used as the background for a div. Inside that SVG is a \u003cstyle\u003e block that sets the fillcolor of its \u003ccircle\u003e to red. An even lesser-known feature of SVG is that its styles can use media queries. The size used by those queries is the size of the div it is a background of. In the following example, we have a resizable \u003cdiv\u003e with an SVG background. Inside this SVG is a media query which will change the fill color of its \u003ccircle\u003e to blue when the width exceeds 100px. Grab the resize handle in its bottom right corner and drag until the circle turns blue. Because resize handles don’t quite work on mobile, unfortunately, this and the next couple of CodePens are best experienced on desktop. This is an extremely powerful technique. By mixing it with width-hacking, we could encode the state of a game or gizmo in the width of an SVG background image. This SVG can then show or hide specific elements depending on the corresponding game state via media queries. But I promised you animations. So, how is that done? Turns out you can use CSS animations within SVGs. By using the CSS transition property, we can make the color of our circle smoothly transition from red to blue. Amazing! But before you try this yourself, be sure to look at the source code carefully. You’ll notice that I’ve had to add a 1×1px, off-screen element with the ID #hack. This element has a very simple (and nearly unnoticeable) continuous animation applied. A “dummy animation” like this is necessary to get around some web browsers’ buggy detection of SVG animation. Without that hack, our transition property wouldn’t work consistently. For the fun of it, let’s combine this tech with our previous secret message example. Instead of toggling the secret message’s width between the values of 0px and 350px, I’ve adjusted the calc formula so that the secret message div is normally 350px, and becomes 351px if the right combination is set. Instead of HTML/CSS, the secret message is now just an SVG background with a \u003ctext\u003e element that says “secret message.” Using media queries, we change the transform scale of this \u003ctext\u003e to be zero unless the div is 351px. With the transition property applied, we get a smooth transition between these two states. Click the center button to activate the secret message: The first cohost user to discover the use of media queries within SVG backgrounds was @ticky for this post. I don’t recall who figured out they could animate, but I used the tech quite extensively for this quiz that tells you what kind of soil you’d like if you were a worm. Wrapping up And that’s will be all for now. There are a number of techniques I haven’t touched on — namely the fun antics one can get up to with the resize property. If you’d like to explore the world of CSS crimes further, I’d recommend this great linkdump by YellowAfterlife, or this video retrospective by rebane2001. It will always hurt to describe Cohost in the past tense. It truly was a magical place, and I don’t think I’ll be able to properly convey what it was like to be there at its peak. The best I can do is share the hacks we came up with: the lost CSS tricks we invented while “posting, but better.”",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/12/css-star-variations.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eYou would be forgiven if you’ve never heard of \u003ca href=\"http://cohost.org/\" rel=\"noopener\"\u003eCohost.org\u003c/a\u003e. The bespoke, Tumblr-like social media website came and went in a flash. Going public in June 2022 with invite-only registrations, Cohost’s peach and maroon landing page promised that it would be “posting, but better.” Just over two years later, in September 2024, the site announced its shutdown, its creators citing burnout and funding problems. Today, its servers are gone for good. Any link to \u003ca href=\"http://cohost.org/\" rel=\"noopener\"\u003ecohost.org\u003c/a\u003e redirects to the Wayback Machine’s slow but comprehensive archive.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1919\" height=\"966\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?resize=1919%2C966\u0026amp;ssl=1\" alt=\"Screenshot of the Cohost.org homepage before it was shut down.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?w=1919\u0026amp;ssl=1 1919w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?resize=300%2C151\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?resize=1024%2C515\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?resize=768%2C387\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/Screenshot-from-2025-04-13-05-34-34.png?resize=1536%2C773\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe landing page for \u003ca href=\"http://cohost.org/\" rel=\"noopener\"\u003eCohost.org\u003c/a\u003e, featuring our beloved eggbug.\u003c/p\u003e\n\n\n\n\u003cp\u003eDespite its short lifetime, I am confident in saying that Cohost delivered on its promise. This is in no small part due to its user base, consisting mostly of niche internet creatives and their friends — many of whom already considered “posting” to be an art form. These users were attracted to Cohost’s opinionated, anti-capitalist design that set it apart from the mainstream alternatives. The site was free of advertisements and follower counts, all feeds were purely chronological, and the posting interface even supported a subset of HTML.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt was this latter feature that conjured a community of its own. For security reasons, any post using HTML was passed through a sanitizer to remove any malicious or malformed elements. But unlike most websites, Cohost’s sanitizer was remarkably permissive. The vast majority of tags and attributes were allowed — most notably inline CSS styles on arbitrary elements.\u003c/p\u003e\n\n\n\n\u003cp\u003eUsers didn’t take long to grasp the creative opportunities lurking within Cohost’s unassuming “new post” modal. Within 48 hours of going public, the fledgling community had figured out how to post \u003ca href=\"https://web.archive.org/web/20250107154555mp_/https://cohost.org/everest/post/20330-the-entire-content-o\" rel=\"noopener\"\u003epoetry using the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e tag\u003c/a\u003e, port \u003ca href=\"https://web.archive.org/web/20250107154555mp_/https://cohost.org/ticky/post/15513-mods-are-asleep-post\" rel=\"noopener\"\u003ethe Apple homepage from 1999\u003c/a\u003e, and reimplement \u003ca href=\"https://web.archive.org/web/20250107154555mp_/https://cohost.org/mog/post/15769-details-summary-s\" rel=\"noopener\"\u003ea quick-time WarioWare game\u003c/a\u003e. We called posts like these “CSS Crimes,” and the people who made them “CSS Criminals.” Without even intending to, the developers of Cohost had created an environment for a CSS community to thrive.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this post, I’ll show you a few of the hacks we found while trying to push the limits of Cohost’s HTML support. Use these if you dare, lest you too get labelled a CSS criminal.\u003c/p\u003e\n\n\n\u003ch3 id=\"widthhacking\"\u003eWidth-hacking\u003c/h3\u003e\n\n\n\u003cp\u003eMany of the CSS crimes of Cohost were powered by a technique that user @corncycle dubbed “width-hacking.” Using a combination of the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element and the CSS \u003ccode\u003ecalc()\u003c/code\u003e function, we can get some pretty wild functionality: \u003ca href=\"https://web.archive.org/web/20250107014121/https://cohost.org/blackle/post/260204-div-style-width-60\" rel=\"noopener\"\u003ecombination locks\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20250107052244/https://cohost.org/rykarn/post/3328326-rotating-hexagonal-t\" rel=\"noopener\"\u003etile matching games\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20250107044611/https://cohost.org/Corncycle/post/362844-div-style-line-hei\" rel=\"noopener\"\u003eZelda-style top-down movement\u003c/a\u003e, the list goes on.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’ve been around the CSS world for a while, there’s a good chance you’ve been exposed to the old \u003ca href=\"https://css-tricks.com/the-checkbox-hack/\"\u003echeckbox hack\u003c/a\u003e. By combining a checkbox, a label, and creative use of CSS selectors, you can use the toggle functionality of the checkbox to implement all sorts of things. Tabbed areas, push toggles, dropdown menus, etc.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, because this hack requires CSS selectors, that meant we couldn’t use it on Cohost — remember, we only had inline styles. Instead, we used the relatively new elements \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e. These elements provide the same visibility-toggling logic, but now directly in HTML. No weird CSS needed.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThese elements work like so: All children of the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element are hidden by default, except for the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element. When the summary is clicked, it “opens” the parent details element, causing its children to become visible.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can add all sorts of styles to these elements to make this example more interesting. Below, I have styled the constituent elements to create the effect of a button that lights up when you click on it.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis is achieved by giving the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element a fixed position and size, a grey background color, and an outset border to make it look like a button. When it’s clicked, a sibling \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e is revealed that covers the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e with its own red background and border. Normally, this \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e would block further click events, but I’ve given it the declaration \u003ccode\u003epointer-events: none\u003c/code\u003e. Now all clicks pass right on through to the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element underneath, allowing you to turn the button back off.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is all pretty nifty, but it’s ultimately the same logic as before: something is toggled either on or off. These are only two states. If we want to make games and other gizmos, we might want to represent hundreds to thousands of states.\u003c/p\u003e\n\n\n\n\u003cp\u003eWidth-hacking gives us exactly that. Consider the following example:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn this example, three \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements live together in an \u003ccode\u003einline-flex\u003c/code\u003e container. Because all the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e elements are absolutely-positioned, the width of their respective \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements are all zero when they’re closed.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, each of these three \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e has a small \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e inside. The first has a child with a width of \u003ccode\u003e1px\u003c/code\u003e, the second a child with a width of \u003ccode\u003e2px\u003c/code\u003e, and the third a width of \u003ccode\u003e4px\u003c/code\u003e. When a \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is opened, it reveals its hidden \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, causing its own width to increase. This increases the width of the \u003ccode\u003einline-flex\u003c/code\u003e container. Because the width of the container is the sum of its children, this means its width \u003cem\u003edirectly corresponds\u003c/em\u003e to the specific \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements that are open.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, if just the first and third \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e are open, the \u003ccode\u003einline-flex\u003c/code\u003e container will have the width \u003ccode\u003e1px + 4px = 5px\u003c/code\u003e. Conversely, if the \u003ccode\u003einline-flex\u003c/code\u003e container is \u003ccode\u003e2px\u003c/code\u003e wide, we can infer that the only open \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is the second one. With this trick, we’ve managed to encode all eight states of the three \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e into the width of the container element.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is pretty cool. Maybe we could use this as an element of some kind of puzzle game? We could show a secret message if the right combination of buttons is checked. But how do we do that? How do we only show the secret message for a specific width of that container div?\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn the preceding CodePen, I’ve added a secret message as two nested divs. Currently, this message is always visible — complete with a TODO reminding us to implement the logic to hide it unless the correct combination is set.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou may wonder why we’re using two nested divs for such a simple message. This is because we’ll be hiding the message using a peculiar method: We will make the width of the parent \u003ccode\u003ediv.secret\u003c/code\u003e be zero. Because the \u003ccode\u003eoverflow: hidden\u003c/code\u003e property is used, the child \u003ccode\u003ediv.message\u003c/code\u003e will be clipped, and thus invisible.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow we’re ready to implement our secret message logic. Thanks to the fact that percentage sizes are relative to the parent, we can use \u003ccode\u003e100%\u003c/code\u003e as a stand-in for the parent’s width. We can then construct a complicated CSS \u003ccode\u003ecalc()\u003c/code\u003e formula that is \u003ccode\u003e350px\u003c/code\u003e if the container div is our target size, and \u003ccode\u003e0px\u003c/code\u003e otherwise. With that, our secret message will be visible only when the center button is active and the others are inactive. Give it a try!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis complicated \u003ccode\u003ecalc()\u003c/code\u003e function that’s controlling the secret div’s width has the following graph:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"715\" height=\"400\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/indicator_function_plain.jpg?resize=715%2C400\u0026amp;ssl=1\" alt=\"Line chart showing the width of the secret div when the container div is at different widths.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/indicator_function_plain.jpg?w=715\u0026amp;ssl=1 715w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/indicator_function_plain.jpg?resize=300%2C168\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can see that it’s a piecewise linear curve, constructed from multiple pieces using \u003ccode\u003emin\u003c/code\u003e/\u003ccode\u003emax\u003c/code\u003e. These pieces are placed in just the right spots so that the function maxes out when the container div is \u003ccode\u003e2px\u003c/code\u003e— which we’ve established is precisely when only the second button is active.\u003c/p\u003e\n\n\n\n\u003cp\u003eA surprising variety of games can be implemented using variations on this technique. Here is a \u003ca href=\"https://web.archive.org/web/20250107031033/https://cohost.org/blackle/post/1899723-div-style-width-40\" rel=\"noopener\"\u003etower of Hanoi\u003c/a\u003e game I had made that uses both width and height to track the game’s state.\u003c/p\u003e\n\n\n\u003ch3 id=\"svg-animation\"\u003eSVG animation\u003c/h3\u003e\n\n\n\u003cp\u003eSo far, we’ve seen some basic functionality for implementing a game. But what if we want our games to look \u003cem\u003egood\u003c/em\u003e? What if we want to add \u003cem\u003e✨animations\u003c/em\u003e?✨ Believe it or not, this is actually possible entirely within inline CSS using the power of SVG.\u003c/p\u003e\n\n\n\n\u003cp\u003eSVG (Scalable Vector Graphics) is an XML-based image format for storing vector images. It enjoys broad support on the web — you can use it in \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements or as the URL of a \u003ccode\u003ebackground-image\u003c/code\u003e property, among other things.\u003c/p\u003e\n\n\n\n\u003cp\u003eLike HTML, an SVG file is a collection of \u003cem\u003eelements\u003c/em\u003e. For SVG, these elements are things like \u003ccode\u003e\u0026lt;rect\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;text\u0026gt;\u003c/code\u003e, to name a few. These elements can have all sorts of properties defined, such as fill color, stroke width, and font family.\u003c/p\u003e\n\n\n\n\u003cp\u003eA lesser-known feature of SVG is that it can contain \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e blocks for configuring the properties of these elements. In the example below, an SVG is used as the background for a div. Inside that SVG is a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e block that sets the \u003ccode\u003efill\u003c/code\u003ecolor of its \u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e to \u003ccode\u003ered\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAn even \u003ci\u003elesser-known\u003c/i\u003e feature of SVG is that its styles can use \u003cem\u003emedia queries\u003c/em\u003e. The size used by those queries is the size of the div it is a background of.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the following example, we have a resizable \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an SVG background. Inside this SVG is a media query which will change the fill color of its \u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e to \u003ccode\u003eblue\u003c/code\u003e when the width exceeds \u003ccode\u003e100px\u003c/code\u003e. Grab the resize handle in its bottom right corner and drag until the circle turns blue.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eBecause resize handles don’t quite work on mobile, unfortunately, this and the next couple of CodePens are best experienced on desktop.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is an extremely powerful technique. By mixing it with width-hacking, we could encode the state of a game or gizmo in the width of an SVG background image. This SVG can then show or hide specific elements depending on the corresponding game state via media queries.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut I promised you animations. So, how is that done? Turns out you can use CSS animations \u003cem\u003ewithin\u003c/em\u003e SVGs. By using the CSS \u003ccode\u003etransition\u003c/code\u003e property, we can make the color of our circle smoothly transition from \u003ccode\u003ered\u003c/code\u003e to \u003ccode\u003eblue\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAmazing! But before you try this yourself, be sure to look at the source code carefully. You’ll notice that I’ve had to add a \u003ccode\u003e1\u003c/code\u003e×\u003ccode\u003e1px\u003c/code\u003e, off-screen element with the ID \u003ccode\u003e#hack\u003c/code\u003e. This element has a very simple (and nearly unnoticeable) continuous animation applied. A “dummy animation” like this is necessary to get around some web browsers’ buggy detection of SVG animation. Without that hack, our \u003ccode\u003etransition\u003c/code\u003e property wouldn’t work consistently.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor the fun of it, let’s combine this tech with our previous secret message example. Instead of toggling the secret message’s width between the values of \u003ccode\u003e0px\u003c/code\u003e and \u003ccode\u003e350px\u003c/code\u003e, I’ve adjusted the calc formula so that the secret message div is normally \u003ccode\u003e350px\u003c/code\u003e, and becomes \u003ccode\u003e351px\u003c/code\u003e if the right combination is set.\u003c/p\u003e\n\n\n\n\u003cp\u003eInstead of HTML/CSS, the secret message is now just an SVG background with a \u003ccode\u003e\u0026lt;text\u0026gt;\u003c/code\u003e element that says “secret message.” Using media queries, we change the transform scale of this \u003ccode\u003e\u0026lt;text\u0026gt;\u003c/code\u003e to be zero unless the div is \u003ccode\u003e351px\u003c/code\u003e. With the \u003ccode\u003etransition\u003c/code\u003e property applied, we get a smooth transition between these two states.\u003c/p\u003e\n\n\n\n\u003cp\u003eClick the center button to activate the secret message:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe first cohost user to discover the use of media queries within SVG backgrounds was @ticky for \u003ca href=\"https://cohost.org/ticky/post/27259-div-style-position\" rel=\"noopener\"\u003ethis post\u003c/a\u003e. I don’t recall who figured out they could animate, but I used the tech quite extensively for \u003ca href=\"https://web.archive.org/web/20250107020524/https://cohost.org/blackle/post/70692-we-got-buzzfeed-quiz\" rel=\"noopener\"\u003ethis quiz\u003c/a\u003e that tells you what kind of soil you’d like if you were a worm.\u003c/p\u003e\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eAnd that’s will be all for now. There are a number of techniques I haven’t touched on — namely the fun antics one can get up to with the \u003ccode\u003eresize\u003c/code\u003e property. If you’d like to explore the world of CSS crimes further, I’d recommend this great \u003ca href=\"https://yal.cc/cohost-css-crimes/\" rel=\"noopener\"\u003elinkdump\u003c/a\u003e by YellowAfterlife, or this \u003ca href=\"https://www.youtube.com/watch?v=LkMtiwitg-w\" rel=\"noopener\"\u003evideo retrospective\u003c/a\u003e by rebane2001.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIt will always hurt to describe Cohost in the past tense. It truly was a magical place, and I don’t think I’ll be able to properly convey what it was like to be there at its peak. The best I can do is share the hacks we came up with: the lost CSS tricks we invented while “posting, but better.”\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-04-24T06:49:42-06:00",
  "modifiedTime": "2025-04-24T06:49:44-06:00"
}
