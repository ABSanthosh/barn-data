{
  "id": "bf1608f7-ce0e-48a5-904b-dd27e546ecb9",
  "title": "A CSS Wishlist for 2025",
  "link": "https://css-tricks.com/a-css-wishlist-for-2025/",
  "description": "2024 has been one of the greatest years for CSS: cross-document view transitions, scroll-driven animations, anchor positioning, animate to height: auto, and many others. It seems out of touch to ask, but what else do we … A CSS Wishlist for 2025 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Mon, 23 Dec 2024 15:07:41 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "opinion"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 9950,
  "excerpt": "2024 has been one of the greatest years for CSS: cross-document view transitions, scroll-driven animations, anchor positioning, animate to height: auto, and",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "2024 has been one of the greatest years for CSS: cross-document view transitions, scroll-driven animations, anchor positioning, animate to height: auto, and many others. It seems out of touch to ask, but what else do we want from CSS? Well, many things! We put our heads together and came up with a few ideas… including several of yours. Geoff’s wishlist I’m of the mind that we already have a BUNCH of wonderful CSS goodies these days. We have so many wonderful — and new! — things that I’m still wrapping my head around many of them. But! There’s always room for one more good thing, right? Or maybe room for four new things. If I could ask for any new CSS features, these are the ones I’d go for. 1. A conditional if() statement It’s coming! Or it’s already here if you consider that the CSS Working Group (CSSWG) resolved to add an if() conditional to the CSS Values Module Level 5 specification. That’s a big step forward, even if it takes a year or two (or more?!) to get a formal definition and make its way into browsers. My understanding about if() is that it’s a key component for achieving Container Style Queries, which is what I ultimately want from this. Being able to apply styles conditionally based on the styles of another element is the white whale of CSS, so to speak. We can already style an element based on what other elements it :has() so this would expand that magic to include conditional styles as well. 2. CSS mixins This is more of a “nice-to-have” feature because I feel its squarely in CSS Preprocessor Territory and believe it’s nice to have some tooling for light abstractions, such as writing functions or mixins in CSS. But I certainly wouldn’t say “no” to having mixins baked right into CSS if someone was offering it to me. That might be the straw that breaks the CSS preprocessor back and allows me to write plain CSS 100% of the time because right now I tend to reach for Sass when I need a mixin or function. I wrote up a bunch of notes about the mixins proposal and its initial draft in the specifications to give you an idea of why I’d want this feature. Yes, please! It’s a minor developer convenience that brings CSS up to par with writing comments in other languages. I’m pretty sure that writing JavaScript comments in my CSS should be in my list of dumbest CSS mistakes (even if I didn’t put it in there). 4. font-size: fit I just hate doing math, alright?! Sometimes I just want a word or short heading sized to the container it’s in. We can use things like clamp() for fluid typesetting, but again, that’s math I can’t be bothered with. You might think there’s a possible solution with Container Queries and using container query units for the font-size but that doesn’t work any better than viewport units. Ryan’s wishlist I’m just a simple, small-town CSS developer, and I’m quite satisfied with all the new features coming to browsers over the past few years, what more could I ask for? 5. Anchor positioning in more browsers! I don’t need anymore convincing on CSS anchor positioning, I’m sold! After spending much of the month of November learning how it works, I went into December knowing I won’t really get to use it for a while. As we close out 2024, only Chromium-based browsers have support, and fallbacks and progressive enhancements are not easy, unfortunately. There is a polyfill available (which is awesome), however, that does mean adding another chunk of JavaScript, contrasting what anchor positioning solves. I’m patient though, I waited a long time for :has to come to browsers, which has been “newly available” in Baseline for a year now (can you believe it?). 6. Promoting elements to the #top-layer without popover? I like anchor positioning, I like popovers, and they go really well together! The neat thing with popovers is how they appear in the #top-layer, so you get to avoid stacking issues related to z-index. This is probably all most would need with it, but having some other way to move an element there would be interesting. Also, now that I know that the #top-layer exists, I want to do more with it — I want to know what’s up there. What’s really going on? Well, I probably should have started at the spec. As it turns out, the CSS Position Layout Module Level 4 draft talks about the #top-layer, what it’s useful for, and ways to approach styling elements contained within it. Interestingly, the #top-layer is controlled by the user agent and seems to be a byproduct of the Fullscreen API. Dialogs and popovers are the way to go for now but, optimistically speaking, these features existing might mean it’s possible to promote elements to the #top-layer in future ways. This very well may be a coyote/roadrunner-type situation, as I’m not quite sure what I’d do with it once I get it. 7. Adding a layer attribute to \u003clink\u003e tags Personally speaking, Cascade Layers have changed how I write CSS. One thing I think would be ace is if we could include a layer attribute on a \u003clink\u003e tag. Imagine being able to include a CSS reset in your project like: \u003clink rel=\"stylesheet\" href=\"https://cdn.com/some/reset.css\" layer=\"reset\"\u003e Or, depending on the page visited, dynamically add parts of CSS, blended into your cascade layers: \u003c!-- Global styles with layers defined, such as: @layer reset, typography, components, utilities; --\u003e \u003clink rel=\"stylesheet\" href=\"/styles/main.css\"\u003e \u003c!-- Add only to pages using card components --\u003e \u003clink rel=\"stylesheet\" href=\"/components/card.css\" layer=\"components\"\u003e This feature was proposed over on the CSSWG’s repo, and like most things in life: it’s complicated. Browsers are especially finicky with attributes they don’t know, plus definite concerns around handling fallbacks. The topic was also brought over to the W3C Technical Architecture Group (TAG) for discussion as well, so there’s still hope! Juandi’s Wishlist I must admit this, I wasn’t around when the web was wild and people had hit counters. In fact, I think I am pretty young compared to your average web connoisseur. While I do know how to make a layout using float (the first web course I picked up was pretty outdated), I didn’t have to suffer long before using things like Flexbox or CSS Grid and never grinded my teeth against IE and browser support. So, the following wishes may seem like petty requests compared to the really necessary features the web needed in the past — or even some in the present. Regardless, here are my three petty requests I would wish to see in 2025: 8. Get the children count and index as an integer This is one of those things that you swear it should already be possible with just CSS. The situation is the following: I find myself wanting to know the index of an element between its siblings or the total number of children. I can’t use the counter() function since sometimes I need an integer instead of a string. The current approach is either hardcoding an index on the HTML: \u003cul\u003e \u003cli style=\"--index: 0\"\u003eMilk\u003c/li\u003e \u003cli style=\"--index: 1\"\u003eEggs\u003c/li\u003e \u003cli style=\"--index: 2\"\u003eCheese\u003c/li\u003e \u003c/ul\u003e Or alternatively, write each index in CSS: li:nth-child(1) { --index: 0; } li:nth-child(2) { --index: 1; } li:nth-child(3) { --index: 2; } Either way, I always leave with the feeling that it should be easier to reference this number; the browser already has this info, it’s just a matter of exposing it to authors. It would make prettier and cleaner code for staggering animations, or simply changing the styles based on the total count. Luckily, there is a already proposal in Working Draft for sibling-count() and sibling-index() functions. While the syntax may change, I do hope to hear more about them in 2025. ul \u003e li { background-color: hsl(sibling-count() 50% 50%); } ul \u003e li { transition-delay: calc(sibling-index() * 500ms); } 9. A way to balance flex-wrap I’m stealing this one from Adam Argyle, but I do wish for a better way to balance flex-wrap layouts. When elements wrap one by one as their container shrinks, they either are left alone with empty space (which I don’t dislike) or grow to fill it (which hurts my soul): I wish for a more native way of balancing wrapping elements: It’s definitely annoying. 10. An easier way to read/research CSSWG discussions I am a big fan of the CSSWG and everything they do, so I spent a lot of time reading their working drafts, GitHub issues, or notes about their meetings. However, as much as I love jumping from link to link in their GitHub, it can be hard to find all the related issues to a specific discussion. I think this raises the barrier of entry to giving your opinion on some topics. If you want to participate in an issue, you should have the big picture of all the discussion (what has been said, why some things don’t work, others to consider, etc) but it’s usually scattered across several issues or meetings. While issues can be lengthy, that isn’t the problem (I love reading them), but rather not knowing part of a discussion existed somewhere in the first place. So, while it isn’t directly a CSS wish, I wish there was an easier way to get the full picture of the discussion before jumping in. What’s on your wishlist? We asked! You answered! Here are a few choice selections from the crowd: Rotate direct background-images, like background-rotate: 180deg CSS random(), with params for range, spread, and type A CSS anchor position mode that allows targeting the mouse cursor, pointer, or touch point positions A string selector to query a certain word in a block of text and apply styling every time that word occurs A native .visually-hidden class. position: sticky with a :stuck pseudo Wishing you a great 2025… CSS-Tricks trajectory hasn’t been the most smooth these last years, so our biggest wish for 2025 is to keep writing and sparking discussions about the web. Happy 2025!",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383249",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e2024 has been one of the greatest years for CSS: \u003ca href=\"https://css-tricks.com/tag/view-transitions/\"\u003ecross-document view transitions\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/unleash-the-power-of-scroll-driven-animations/\"\u003escroll-driven animations\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eanchor positioning\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/transitioning-to-auto-height/\"\u003eanimate to \u003ccode\u003eheight: auto\u003c/code\u003e\u003c/a\u003e, and many others. It seems out of touch to ask, but what else do we want from CSS? Well, many things!\u003c/p\u003e\n\n\n\n\u003cp\u003eWe put our heads together and came up with a few ideas… including several of yours.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"geoff-s-wishlist\"\u003eGeoff’s wishlist\u003c/h3\u003e\n\n\n\u003cp\u003eI’m of the mind that we already have a BUNCH of wonderful CSS goodies these days. We have so many wonderful — and new! — things that I’m still wrapping my head around many of them.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut! There’s always room for one more good thing, right? Or maybe room for \u003cem\u003efour\u003c/em\u003e new things. If I could ask for any new CSS features, these are the ones I’d go for.\u003c/p\u003e\n\n\n\u003ch4 id=\"if-\"\u003e1. A conditional \u003ccode\u003eif()\u003c/code\u003e statement\u003c/h4\u003e\n\n\n\u003cp\u003eIt’s coming! Or it’s already here if you consider that the CSS Working Group (CSSWG) \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/10064#issuecomment-2165157958\" rel=\"noopener\"\u003eresolved to add an \u003ccode\u003eif()\u003c/code\u003e conditional\u003c/a\u003e to the CSS Values Module Level 5 specification. That’s a big step forward, even if it takes a year or two (or more?!) to get a formal definition and make its way into browsers.\u003c/p\u003e\n\n\n\n\u003cp\u003eMy understanding about \u003ccode\u003eif()\u003c/code\u003e is that it’s a key component for achieving \u003ca href=\"https://css-tricks.com/css-container-queries/#aa-container-style-queries\"\u003eContainer Style Queries\u003c/a\u003e, which is what I ultimately want from this. Being able to apply styles conditionally based on the styles of another element is the white whale of CSS, so to speak. We can already style an element based on what other elements it \u003ccode\u003e:has()\u003c/code\u003e so this would expand that magic to include conditional styles as well.\u003c/p\u003e\n\n\n\u003ch4 id=\"mixins\"\u003e2. CSS mixins\u003c/h4\u003e\n\n\n\u003cp\u003eThis is more of a “nice-to-have” feature because I feel its squarely in CSS Preprocessor Territory and believe it’s nice to have some tooling for light abstractions, such as writing functions or mixins in CSS. But I certainly wouldn’t say “no” to having mixins baked right into CSS if someone was offering it to me. That might be the straw that breaks the CSS preprocessor back and allows me to write plain CSS 100% of the time because right now I tend to reach for Sass when I need a mixin or function.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://css-tricks.com/css-functions-and-mixins-module-notes/\"\u003eI wrote up a bunch of notes about the mixins proposal and its initial draft in the specifications\u003c/a\u003e to give you an idea of why I’d want this feature.\u003c/p\u003e\n\n\n\n\n\n\u003cp\u003eYes, please! It’s a minor developer convenience that brings CSS up to par with writing comments in other languages. I’m pretty sure that writing JavaScript comments in my CSS should be in \u003ca href=\"https://css-tricks.com/my-dumbest-css-mistakes/\"\u003emy list of dumbest CSS mistakes\u003c/a\u003e (even if I didn’t put it in there).\u003c/p\u003e\n\n\n\u003ch4 id=\"font-size-fit\"\u003e4. \u003ccode\u003efont-size: fit\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eI just hate doing math, alright?! Sometimes I just want a word or short heading sized to the container it’s in. \u003ca href=\"https://css-tricks.com/simplified-fluid-typography/\"\u003eWe can use things like \u003ccode\u003eclamp()\u003c/code\u003e for fluid typesetting\u003c/a\u003e, but again, that’s math I can’t be bothered with. You might think there’s a possible solution with Container Queries and \u003ca href=\"https://css-tricks.com/css-container-queries/#aa-container-length-units\"\u003eusing container query units\u003c/a\u003e for the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/f/font-size/\"\u003efont-size\u003c/a\u003e\u003c/code\u003e but that doesn’t work any better than \u003ca href=\"https://css-tricks.com/css-length-units/#aa-relative-units\"\u003eviewport units\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"ryans-wishlist\"\u003eRyan’s wishlist\u003c/h3\u003e\n\n\n\u003cp\u003eI’m just a simple, small-town CSS developer, and I’m quite satisfied with all the new features coming to browsers over the past few years, what more could I ask for?\u003c/p\u003e\n\n\n\u003ch4 id=\"anchor-positioning-in-more-browsers\"\u003e5. Anchor positioning in more browsers!\u003c/h4\u003e\n\n\n\u003cp\u003eI don’t need anymore convincing on CSS anchor positioning, \u003cem\u003eI’m sold!\u003c/em\u003e After spending much of the month of November \u003ca href=\"https://css-tricks.com/one-of-those-onboarding-uis-with-anchor-positioning/\"\u003elearning how it works\u003c/a\u003e, I went into December knowing I won’t \u003cem\u003ereally\u003c/em\u003e get to use it for a while. \u003c/p\u003e\n\n\n\n\u003cp\u003eAs we close out 2024, only Chromium-based browsers have support, and fallbacks and progressive enhancements are not easy, unfortunately. There is a polyfill available (which is awesome), however, that does mean adding another chunk of JavaScript, contrasting what anchor positioning solves.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m patient though, I waited a long time for \u003ccode\u003e:has\u003c/code\u003e to come to browsers, which has been “\u003cem\u003enewly available\u003c/em\u003e” in Baseline for a year now (can you believe it?).\u003c/p\u003e\n\n\n\u003ch4 id=\"a-way-to-move-an-element-to-the-top-layer-without-popover-would-be-nice\"\u003e6. Promoting elements to the \u003ccode\u003e#top-layer\u003c/code\u003e \u003cem\u003ewithout\u003c/em\u003e popover?\u003c/h4\u003e\n\n\n\u003cp\u003eI like anchor positioning, I like popovers, and they go really well together!\u003c/p\u003e\n\n\n\n\u003cp\u003eThe neat thing with popovers is how they appear in the \u003ccode\u003e#top-layer\u003c/code\u003e, so you get to avoid stacking issues related to \u003ccode\u003ez-index\u003c/code\u003e. This is probably all most would need with it, but having some other way to move an element there would be interesting. Also, now that I know that the \u003ccode\u003e#top-layer\u003c/code\u003e exists, I want to do \u003cem\u003emore\u003c/em\u003e with it — I want to know what’s up there. \u003cem\u003eWhat’s really going on?\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eWell, I probably should have started at the spec. As it turns out, the \u003ca href=\"https://drafts.csswg.org/css-position-4/#top-layer\" rel=\"noopener\"\u003eCSS Position Layout Module Level 4\u003c/a\u003e draft talks about the \u003ccode\u003e#top-layer\u003c/code\u003e, what it’s useful for, and ways to approach styling elements contained within it. Interestingly, the \u003ccode\u003e#top-layer\u003c/code\u003e is controlled by the user agent and seems to be a byproduct of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\" rel=\"noopener\"\u003eFullscreen API\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eDialogs and popovers are the way to go for now but, optimistically speaking, these features existing \u003cem\u003emight\u003c/em\u003e mean it’s possible to promote elements to the \u003ccode\u003e#top-layer\u003c/code\u003e in future ways. This very well may be a coyote/roadrunner-type situation, as I’m not quite sure what I’d do with it once I get it.\u003c/p\u003e\n\n\n\u003ch4 id=\"set-layers-from-a-link-tag\"\u003e7. Adding a layer attribute to \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags\u003c/h4\u003e\n\n\n\u003cp\u003ePersonally speaking, \u003ca href=\"https://css-tricks.com/css-cascade-layers/\"\u003eCascade Layers\u003c/a\u003e have changed how I write CSS. One thing I think would be ace is if we could include a \u003ccode\u003elayer\u003c/code\u003e attribute on a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag. Imagine being able to include a CSS reset in your project like:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.com/some/reset.css\u0026#34; layer=\u0026#34;reset\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr, depending on the page visited, dynamically add parts of CSS, blended into your cascade layers:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- \nGlobal styles with layers defined, such as:\n @layer reset, typography, components, utilities;\n--\u0026gt;\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/styles/main.css\u0026#34;\u0026gt; \n\n\u0026lt;!-- Add only to pages using card components  --\u0026gt;\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/components/card.css\u0026#34; layer=\u0026#34;components\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis feature was \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/5853\" rel=\"noopener\"\u003eproposed over on the CSSWG’s repo\u003c/a\u003e, and like most things in life: \u003cem\u003eit’s complicated\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eBrowsers are especially finicky with attributes they don’t know, plus definite concerns around handling fallbacks. The topic was also brought over to the W3C Technical Architecture Group (TAG) for \u003ca href=\"https://css-tricks.com/wp-admin/post.php?post=383249\u0026amp;action=edit\"\u003ediscussion as well\u003c/a\u003e, so there’s still hope!\u003c/p\u003e\n\n\n\u003ch3 id=\"juandi-s-wishlist\"\u003eJuandi’s Wishlist\u003c/h3\u003e\n\n\n\u003cp\u003eI must admit this, I wasn’t around when the web was wild and people had hit counters. In fact, I think I am pretty young compared to your average web \u003cem\u003econnoisseur\u003c/em\u003e. While I do know how to make a layout using \u003ccode\u003efloat\u003c/code\u003e (the first web course I picked up was \u003cem\u003epretty\u003c/em\u003e outdated), I didn’t have to suffer long before using things like Flexbox or CSS Grid and never grinded my teeth against IE and browser support.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, the following wishes may seem like petty requests compared to the really necessary features the web needed in the past — or even some in the present. Regardless, here are my three petty requests I would wish to see in 2025:\u003c/p\u003e\n\n\n\u003ch4 id=\"a-way-to-get-the-children-count-and-index-as-an-integer-\"\u003e8. Get the children count and index as an integer\u003c/h4\u003e\n\n\n\u003cp\u003eThis is one of those things that you swear it should already be possible with just CSS. The situation is the following: I find myself wanting to know the index of an element between its siblings or the total number of children. I can’t use the \u003ccode\u003ecounter()\u003c/code\u003e function since sometimes I need an integer instead of a string. The current approach is either hardcoding an index on the HTML:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ul\u0026gt;\n  \u0026lt;li style=\u0026#34;--index: 0\u0026#34;\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li style=\u0026#34;--index: 1\u0026#34;\u0026gt;Eggs\u0026lt;/li\u0026gt;\n  \u0026lt;li style=\u0026#34;--index: 2\u0026#34;\u0026gt;Cheese\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr alternatively, write each index in CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli:nth-child(1) { --index: 0; }\nli:nth-child(2) { --index: 1; }\nli:nth-child(3) { --index: 2; }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eEither way, I always leave with the feeling that it should be easier to reference this number; the browser already has this info, it’s just a matter of exposing it to authors. It would make prettier and cleaner code for staggering animations, or simply changing the styles based on the total count.\u003c/p\u003e\n\n\n\n\u003cp\u003eLuckily, there is a already proposal in Working Draft for \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/4559\" rel=\"noopener\"\u003e\u003ccode\u003esibling-count()\u003c/code\u003e and \u003ccode\u003esibling-index()\u003c/code\u003e\u003c/a\u003e functions. While the syntax may change, I do hope to hear more about them in 2025.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul \u0026gt; li {\n  background-color: hsl(sibling-count() 50% 50%);\n}\n\nul \u0026gt; li {\n  transition-delay: calc(sibling-index() * 500ms);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"a-way-to-balance-flex-wrap-\"\u003e9. A way to balance \u003ccode\u003eflex-wrap\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eI’m stealing this one from \u003ca href=\"https://nerdy.dev/css-wishlist-2025#flex-wrap-balance\" rel=\"noopener\"\u003eAdam Argyle\u003c/a\u003e, but I do wish for a better way to balance \u003ccode\u003eflex-wrap\u003c/code\u003e layouts. When elements wrap one by one as their container shrinks, they either are left alone with empty space (which I don’t dislike) or grow to fill it (which hurts my soul):\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"Flex Wrap leaving empty space or filling it completely\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-bad-example.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI wish for a more native way of balancing wrapping elements:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"Flex wrap balancing elements\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/flex-wrap-good-example.png.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIt’s definitely annoying.\u003c/p\u003e\n\n\n\u003ch4 id=\"an-easier-way-to-read-research-csswg-issues\"\u003e10. An easier way to read/research CSSWG discussions\u003c/h4\u003e\n\n\n\u003cp\u003eI am a big fan of the CSSWG and everything they do, so I spent a lot of time reading their working drafts, GitHub issues, or notes about their meetings. However, as much as I love jumping from link to link in their GitHub, it can be hard to find all the related issues to a specific discussion.\u003c/p\u003e\n\n\n\n\u003cp\u003eI think this raises the barrier of entry to giving your opinion on some topics. If you want to participate in an issue, you should have the big picture of all the discussion (what has been said, why some things don’t work, others to consider, etc) but it’s usually scattered across several issues or meetings. While issues can be lengthy, that isn’t the problem (I love reading them), but rather not knowing part of a discussion existed somewhere in the first place.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, while it isn’t directly a CSS wish, I wish there was an easier way to get the full picture of the discussion before jumping in.\u003c/p\u003e\n\n\n\u003ch3 id=\"whats-on-your-wishlist\"\u003eWhat’s on your wishlist?\u003c/h3\u003e\n\n\n\u003cp\u003eWe asked! You answered! Here are a few choice selections from the crowd:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eRotate direct \u003ccode\u003ebackground-images\u003c/code\u003e, like \u003ccode\u003ebackground-rotate: 180deg\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eCSS \u003ccode\u003erandom()\u003c/code\u003e, with params for \u003ccode\u003erange\u003c/code\u003e, \u003ccode\u003espread\u003c/code\u003e, and \u003ccode\u003etype\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eA CSS anchor position mode that allows targeting the mouse cursor, pointer, or touch point positions\u003c/li\u003e\n\n\n\n\u003cli\u003eA string selector to query a certain word in a block of text and apply styling every time that word occurs\u003c/li\u003e\n\n\n\n\u003cli\u003eA native \u003ccode\u003e.visually-hidden\u003c/code\u003e class.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eposition: sticky\u003c/code\u003e with a \u003ccode\u003e:stuck\u003c/code\u003e pseudo\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"and-a-bigger-wish-\"\u003eWishing you a great 2025…\u003c/h3\u003e\n\n\n\u003cp\u003eCSS-Tricks trajectory hasn’t been the most smooth these last years, so our biggest wish for 2025 is to keep writing and sparking discussions about the web. Happy 2025! \u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-12-23T08:07:41-07:00",
  "modifiedTime": "2024-12-23T08:08:37-07:00"
}
