{
  "id": "24ff9a03-1a84-4dc1-9477-7a1ea7c6b9df",
  "title": "Invoker Commands: Additional Ways to Work With Dialog, Popover… and More?",
  "link": "https://css-tricks.com/invoker-commands-additional-ways-to-work-with-dialog-popover-and-more/",
  "description": "Web browsers are experimenting with two HTML attributes — technically, they’re called “invoker commands” — that are designed to invoke popovers, dialogs, and further down the line, all kinds of actions without writing JavaScript. Although, if you do reach for JavaScript, the new attributes come with some new events that we can listen for. Invoker Commands: Additional Ways to Work With Dialog, Popover… and More? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Daniel Schwarz",
  "published": "Wed, 20 Nov 2024 15:12:34 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "attributes",
    "dialog",
    "popover"
  ],
  "byline": "Daniel Schwarz",
  "length": 10520,
  "excerpt": "Web browsers are experimenting with two HTML attributes — technically, they’re called “invoker commands” — that are designed to invoke popovers, dialogs, and further down the line, all kinds of actions without writing JavaScript. Although, if you do reach for JavaScript, the new attributes come with some new events that we can listen for.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "The Popover API and \u003cdialog\u003e element are two of my favorite new platform features. In fact, I recently [wrote a detailed overview of their use cases] and the sorts of things you can do with them, even learning a few tricks in the process that I couldn’t find documented anywhere else. I’ll admit that one thing that I really dislike about popovers and dialogs is that they could’ve easily been combined into a single API. They cover different use cases (notably, dialogs are typically modal) but are quite similar in practice, and yet their implementations are different. Well, web browsers are now experimenting with two HTML attributes — technically, they’re called “invoker commands” — that are designed to invoke popovers, dialogs, and further down the line, all kinds of actions without writing JavaScript. Although, if you do reach for JavaScript, the new attributes — command and commandfor — come with some new events that we can listen for. Invoker commands? I’m sure you have questions, so let’s dive in. We’re in experimental territory Before we get into the weeds, we’re dealing with experimental features. To use invoker commands today in November 2024 you’ll need Chrome Canary 134+ with the enable-experimental-web-platform-features flag set to Enabled, Firefox Nightly 135+ with the dom.element.invokers.enabled flag set to true, or Safari Technology Preview with the InvokerAttributesEnabled flag set to true. I’m optimistic we’ll get baseline coverage for command and commandfor in due time considering how nicely they abstract the kind of work that currently takes a hefty amount of scripting. Basic command and commandfor usage First, you’ll need a \u003cbutton\u003e or a button-esque \u003cinput\u003e along the lines of \u003cinput type=\"button\"\u003e or \u003cinput type=\"reset\"\u003e. Next, tack on the command attribute. The command value should be the command name that you want the button to invoke (e.g., show-modal). After that, drop the commandfor attribute in there referencing the dialog or popover you’re targeting by its id. \u003cbutton command=\"show-modal\" commandfor=\"dialogA\"\u003eShow dialogA\u003c/button\u003e \u003cdialog id=\"dialogA\"\u003e...\u003c/dialog\u003e In this example, I have a \u003cbutton\u003e element with a command attribute set to show-modal and a commandfor attribute set to dialogA, which matches the id of a \u003cdialog\u003e element we’re targeting: Let’s get into the possible values for these invoker commands and dissect what they’re doing. Looking closer at the attribute values The show-modal value is the command that I just showed you in that last example. Specifically, it’s the HTML-invoked equivalent of JavaScript’s showModal() method. The main benefit is that show-modal enables us to, well… show a modal without reaching directly for JavaScript. Yes, this is almost identical to how HTML-invoked popovers already work with thepopovertarget and popovertargetaction attributes, so it’s cool that the “balance is being redressed” as the Open UI explainer describes it, even more so because you can use the command and commandfor invoker commands for popovers too. There isn’t a show command to invoke show() for creating non-modal dialogs. I’ve mentioned before that non-modal dialogs are redundant now that we have the Popover API, especially since popovers have ::backdrops and other dialog-like features. My bold prediction is that non-modal dialogs will be quietly phased out over time. The close command is the HTML-invoked equivalent of JavaScript’s close() method used for closing the dialog. You probably could have guessed that based on the name alone! \u003cdialog id=\"dialogA\"\u003e \u003c!-- Close #dialogA --\u003e \u003cbutton command=\"close\" commandfor=\"dialogA\"\u003eClose dialogA\u003c/button\u003e \u003c/dialog\u003e The show-popover, hide-popover, and toggle-popover values \u003cbutton command=\"show-popover\" commandfor=\"id\"\u003e …invokes showPopover(), and is the same thing as: \u003cbutton popovertargetaction=\"show\" popovertarget=\"id\"\u003e Similarly: \u003cbutton command=\"hide-popover\" commandfor=\"id\"\u003e …invokes hidePopover(), and is the same thing as: \u003cbutton popovertargetaction=\"hide\" popovertarget=\"id\"\u003e Finally: \u003cbutton command=\"toggle-popover\" commandfor=\"id\"\u003e …invokes togglePopover(), and is the same thing as: \u003cbutton popovertargetaction=\"toggle\" popovertarget=\"id\"\u003e \u003c!-- or \u003cbutton popovertarget=\"id\"\u003e, since ‘toggle’ is the default action anyway. --\u003e I know all of this can be tough to organize in your mind’s eye, so perhaps a table will help tie things together: commandInvokespopovertargetaction equivalentshow-popovershowPopover()showhide-popoverhidePopover()hidetoggle-popovertogglePopover()toggle So… yeah, popovers can already be invoked using HTML attributes, making command and commandfor not all that useful in this context. But like I said, invoker commands also come with some useful JavaScript stuff, so let’s dive into all of that. Listening to commands with JavaScript Invoker commands dispatch a command event to the target whenever their source button is clicked on, which we can listen for and work with in JavaScript. This isn’t required for a \u003cdialog\u003e element’s close event, or a popover attribute’s toggle or beforetoggle event, because we can already listen for those, right? For example, the Dialog API doesn’t dispatch an event when a \u003cdialog\u003e is shown. So, let’s use invoker commands to listen for the command event instead, and then read event.command to take the appropriate action. // Select all dialogs const dialogs = document.querySelectorAll(\"dialog\"); // Loop all dialogs dialogs.forEach(dialog =\u003e { // Listen for close (as normal) dialog.addEventListener(\"close\", () =\u003e { // Dialog was closed }); // Listen for command dialog.addEventListener(\"command\", event =\u003e { // If command is show-modal if (event.command == \"show-modal\") { // Dialog was shown (modally) } // Another way to listen for close else if (event.command == \"close\") { // Dialog was closed } }); }); So invoker commands give us additional ways to work with dialogs and popovers, and in some scenarios, they’ll be less verbose. In other scenarios though, they’ll be more verbose. Your approach should depend on what you need your dialogs and popovers to do. For the sake of completeness, here’s an example for popovers, even though it’s largely the same: // Select all popovers const popovers = document.querySelectorAll(\"[popover]\"); // Loop all popovers popovers.forEach(popover =\u003e { // Listen for command popover.addEventListener(\"command\", event =\u003e { // If command is show-popover if (event.command == \"show-popover\") { // Popover was shown } // If command is hide-popover else if (event.command == \"hide-popover\") { // Popover was hidden } // If command is toggle-popover else if (event.command == \"toggle-popover\") { // Popover was toggled } }); }); Being able to listen for show-popover and hide-popover is useful as we otherwise have to write a sort of “if opened, do this, else do that” logic from within a toggle or beforetoggle event listener or toggle-popover conditional. But \u003cdialog\u003e elements? Yeah, those benefit more from the command and commandfor attributes than they do from this command JavaScript event. Another thing that’s available to us via JavaScript is event.source, which is the button that invokes the popover or \u003cdialog\u003e: if (event.command == \"toggle-popover\") { // Toggle the invoker’s class event.source.classList.toggle(\"active\"); } You can also set the command and commandfor attributes using JavaScript: const button = document.querySelector(\"button\"); const dialog = document.querySelector(\"dialog\"); button.command = \"show-modal\"; button.commandForElement = dialog; /* Not dialog.id */ …which is only slightly less verbose than: button.command = \"show-modal\"; button.setAttribute(\"commandfor\", dialog.id); Creating custom commands The command attribute also accepts custom commands prefixed with two dashes (--). I suppose this makes them like CSS custom properties but for JavaScript events and event handler HTML attributes. The latter observation is maybe a bit (or definitely a lot) controversial since using event handler HTML attributes is considered bad practice. But let’s take a look at that anyway, shall we? Custom commands look like this: \u003cbutton command=\"--spin-me-a-bit\" commandfor=\"record\"\u003eSpin me a bit\u003c/button\u003e \u003cbutton command=\"--spin-me-a-lot\" commandfor=\"record\"\u003eSpin me a lot\u003c/button\u003e \u003cbutton command=\"--spin-me-right-round\" commandfor=\"record\"\u003eSpin me right round\u003c/button\u003e const record = document.querySelector(\"#record\"); record.addEventListener(\"command\", event =\u003e { if (event.command == \"--spin-me-a-bit\") { record.style.rotate = \"90deg\"; } else if (event.command == \"--spin-me-a-lot\") { record.style.rotate = \"180deg\"; } else if (event.command == \"--spin-me-right-round\") { record.style.rotate = \"360deg\"; } }); event.command must match the string with the dashed (--) prefix. Are popover and \u003cdialog\u003e the only features that support invoker commands? According to Open UI, invokers targeting additional elements such as \u003cdetails\u003e were deferred from the initial release. I think this is because HTML-invoked dialogs and an API that unifies dialogs and popovers is a must-have, whereas other commands (even custom commands) feel more like a nice-to-have deal. However, based on experimentation (I couldn’t help myself!) web browsers have actually implemented additional invokers to varying degrees. For example, \u003cdetails\u003e commands work as expected whereas \u003cselect\u003e commands match event.command (e.g., show-picker) but fail to actually invoke the method (showPicker()). I missed all of this at first because MDN only mentions dialog and popover. Open UI also alludes to commands for \u003cinput type=\"file\"\u003e, \u003cinput type=\"number\"\u003e, \u003cvideo\u003e, \u003caudio\u003e, and fullscreen-related methods, but I don’t think that anything is certain at this point. So, what would be the benefits of invoker commands? Well, a whole lot less JavaScript for one, especially if more invoker commands are implemented over time. Additionally, we can listen for these commands almost as if they were JavaScript events. But if nothing else, invoker commands simply provide more ways to interact with APIs such as the Dialog and Popover APIs. In a nutshell, it seems like a lot of “dotting i’s” and “crossing-t’s” which is never a bad thing.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/invoker-commands.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003ePopover\u003c/a\u003e \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003eAPI\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/clarifying-the-relationship-between-popovers-and-dialogs/\"\u003e\u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element\u003c/a\u003e are two of my favorite new platform features. In fact, I recently [wrote a detailed overview of their use cases] and the sorts of things you can do with them, even learning a few tricks in the process that I couldn’t find documented anywhere else.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ll admit that one thing that I really dislike about popovers and dialogs is that they could’ve easily been combined into a single API. They cover different use cases (notably, dialogs are typically modal) but are quite similar in practice, and yet their implementations are different.\u003c/p\u003e\n\n\n\n\u003cp\u003eWell, web browsers are now experimenting with two HTML attributes — technically, they’re called “invoker commands” — that are designed to invoke popovers, dialogs, and further down the line, all kinds of actions without writing JavaScript. Although, if you \u003cem\u003edo\u003c/em\u003e reach for JavaScript, the new attributes — \u003ccode\u003e\u003cstrong\u003ecommand\u003c/strong\u003e\u003c/code\u003e and \u003ccode\u003e\u003cstrong\u003ecommandfor\u003c/strong\u003e\u003c/code\u003e — come with some new events that we can listen for.\u003c/p\u003e\n\n\n\n\u003cp\u003eInvoker commands? I’m sure you have questions, so let’s dive in.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"we-re-in-experimental-territory\"\u003eWe’re in experimental territory\u003c/h3\u003e\n\n\n\u003cp\u003eBefore we get into the weeds, we’re dealing with experimental features. To use invoker commands today in November 2024 you’ll need Chrome \u003cem\u003eCanary\u003c/em\u003e 134+ with the \u003ccode\u003eenable-experimental-web-platform-features\u003c/code\u003e flag set to \u003ccode\u003eEnabled\u003c/code\u003e, Firefox \u003cem\u003eNightly\u003c/em\u003e 135+ with the \u003ccode\u003edom.element.invokers.enabled\u003c/code\u003e flag set to \u003ccode\u003etrue\u003c/code\u003e, or Safari \u003cem\u003eTechnology Preview\u003c/em\u003e with the \u003ccode\u003eInvokerAttributesEnabled\u003c/code\u003e flag set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m optimistic we’ll get baseline coverage for \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e in due time considering how nicely they abstract the kind of work that currently takes a hefty amount of scripting.\u003c/p\u003e\n\n\n\u003ch3 id=\"basic-command-and-commandfor-usage\"\u003eBasic \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e usage\u003c/h3\u003e\n\n\n\u003cp\u003eFirst, you’ll need a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e or a button-esque \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e along the lines of \u003ccode\u003e\u0026lt;input type=\u0026#34;button\u0026#34;\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;input type=\u0026#34;reset\u0026#34;\u0026gt;\u003c/code\u003e. Next, tack on the \u003ccode\u003ecommand\u003c/code\u003e attribute. The \u003ccode\u003ecommand\u003c/code\u003e value should be the command name that you want the button to invoke (e.g., \u003ccode\u003eshow-modal\u003c/code\u003e). After that, drop the \u003ccode\u003ecommandfor\u003c/code\u003e attribute in there referencing the dialog or popover you’re targeting by its \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button command=\u0026#34;show-modal\u0026#34; commandfor=\u0026#34;dialogA\u0026#34;\u0026gt;Show dialogA\u0026lt;/button\u0026gt;\n\n\u0026lt;dialog id=\u0026#34;dialogA\u0026#34;\u0026gt;...\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this example, I have a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element with a \u003ccode\u003ecommand\u003c/code\u003e attribute set to \u003ccode\u003eshow-modal\u003c/code\u003e and a \u003ccode\u003ecommandfor\u003c/code\u003e attribute set to \u003ccode\u003edialogA\u003c/code\u003e, which matches the \u003ccode\u003eid\u003c/code\u003e of a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element we’re targeting:\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s get into the possible values for these invoker commands and dissect what they’re doing.\u003c/p\u003e\n\n\n\u003ch3 id=\"looking-closer-at-the-attribute-values\"\u003eLooking closer at the attribute values\u003c/h3\u003e\n\n\n\n\n\n\n\u003cp\u003eThe \u003ccode\u003eshow-modal\u003c/code\u003e value is the command that I just showed you in that last example. Specifically, it’s the HTML-invoked equivalent of JavaScript’s \u003ccode\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal\" rel=\"noopener\"\u003eshowModal()\u003c/a\u003e\u003c/code\u003e method.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe main benefit is that \u003ccode\u003eshow-modal\u003c/code\u003e enables us to, well… \u003cem\u003eshow\u003c/em\u003e a \u003cem\u003emodal\u003c/em\u003e without reaching directly for JavaScript. Yes, this is almost identical to \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003ehow HTML-invoked popovers already work with the\u003c/a\u003e\u003ca href=\"https://css-tricks.com/poppin-in/\"\u003e\u003ccode\u003epopovertarget\u003c/code\u003e and \u003ccode\u003epopovertargetaction\u003c/code\u003e attributes\u003c/a\u003e, so it’s cool that the “balance is being redressed” as \u003ca href=\"https://open-ui.org/components/invokers.explainer/\" rel=\"noopener\"\u003ethe Open UI explainer describes it\u003c/a\u003e, even more so because you can use the \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e invoker commands for popovers too.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThere isn’t a\u003c/strong\u003e \u003cstrong\u003e\u003ccode\u003eshow\u003c/code\u003e command\u003c/strong\u003e to invoke \u003ccode\u003eshow()\u003c/code\u003e for creating non-modal dialogs. I’ve \u003ca href=\"https://css-tricks.com/the-different-and-modern-ways-to-toggle-content/#aa-the-dialog-element-dialog\"\u003ementioned\u003c/a\u003e before that non-modal dialogs are redundant now that we have the Popover API, especially since popovers have \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/b/backdrop/\"\u003e\u003ccode\u003e::backdrop\u003c/code\u003es\u003c/a\u003e and other dialog-like features. My bold prediction is that non-modal dialogs will be quietly phased out over time.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003eclose\u003c/code\u003e command\u003c/strong\u003e is the HTML-invoked equivalent of JavaScript’s \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/close\" rel=\"noopener\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method used for closing the dialog. You probably could have guessed that based on the name alone!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog id=\u0026#34;dialogA\u0026#34;\u0026gt;\n  \u0026lt;!-- Close #dialogA --\u0026gt;\n  \u0026lt;button command=\u0026#34;close\u0026#34; commandfor=\u0026#34;dialogA\u0026#34;\u0026gt;Close dialogA\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"the-show-popover-hide-popover-and-toggle-popover-values\"\u003eThe \u003ccode\u003eshow-popover\u003c/code\u003e, \u003ccode\u003ehide-popover\u003c/code\u003e, and \u003ccode\u003etoggle-popover\u003c/code\u003e values\u003c/h3\u003e\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button command=\u0026#34;show-popover\u0026#34; commandfor=\u0026#34;id\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e …invokes \u003ccode\u003eshowPopover()\u003c/code\u003e, and is the same thing as:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button popovertargetaction=\u0026#34;show\u0026#34; popovertarget=\u0026#34;id\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSimilarly:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button command=\u0026#34;hide-popover\u0026#34; commandfor=\u0026#34;id\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e …invokes \u003ccode\u003ehidePopover()\u003c/code\u003e, and is the same thing as:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button popovertargetaction=\u0026#34;hide\u0026#34; popovertarget=\u0026#34;id\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button command=\u0026#34;toggle-popover\u0026#34; commandfor=\u0026#34;id\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e …invokes \u003ccode\u003etogglePopover()\u003c/code\u003e, and is the same thing as:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button popovertargetaction=\u0026#34;toggle\u0026#34; popovertarget=\u0026#34;id\u0026#34;\u0026gt;\n\u0026lt;!--  or \u0026lt;button popovertarget=\u0026#34;id\u0026#34;\u0026gt;, since ‘toggle’ is the default action anyway. --\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI know all of this can be tough to organize in your mind’s eye, so perhaps a table will help tie things together:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cstrong\u003e\u003ccode\u003ecommand\u003c/code\u003e\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eInvokes\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003ccode\u003epopovertargetaction\u003c/code\u003e equivalent\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003eshow-popover\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eshowPopover()\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eshow\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003ehide-popover\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ehidePopover()\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ehide\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003etoggle-popover\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etogglePopover()\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003etoggle\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSo… \u003cem\u003eyeah\u003c/em\u003e, popovers can already be invoked using HTML attributes, making \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e not all that useful in this context. But like I said, invoker commands also come with some useful JavaScript stuff, so let’s dive into all of that.\u003c/p\u003e\n\n\n\u003ch3 id=\"listening-to-commands-with-javascript\"\u003eListening to commands with JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eInvoker commands dispatch a \u003ccode\u003ecommand\u003c/code\u003e event to the target whenever their source button is clicked on, which we can listen for and work with in JavaScript. This isn’t required for a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element’s \u003ccode\u003eclose\u003c/code\u003e event, or a \u003ccode\u003epopover\u003c/code\u003e attribute’s \u003ccode\u003etoggle\u003c/code\u003e or \u003ccode\u003ebeforetoggle\u003c/code\u003e event, because we can already listen for those, right?\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, the Dialog API doesn’t dispatch an event when a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e is shown. So, let’s use invoker commands to listen for the \u003ccode\u003ecommand\u003c/code\u003e event instead, and then read \u003ccode\u003eevent.command\u003c/code\u003e to take the appropriate action.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Select all dialogs\nconst dialogs = document.querySelectorAll(\u0026#34;dialog\u0026#34;);\n\n// Loop all dialogs\ndialogs.forEach(dialog =\u0026gt; {\n\n  // Listen for close (as normal)\n  dialog.addEventListener(\u0026#34;close\u0026#34;, () =\u0026gt; {\n    // Dialog was closed\n  });\n\n  // Listen for command\n  dialog.addEventListener(\u0026#34;command\u0026#34;, event =\u0026gt; {\n\n    // If command is show-modal\n    if (event.command == \u0026#34;show-modal\u0026#34;) {\n      // Dialog was shown (modally)\n    }\n\n    // Another way to listen for close\n    else if (event.command == \u0026#34;close\u0026#34;) {\n      // Dialog was closed\n    }\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo invoker commands give us additional ways to work with dialogs and popovers, and in some scenarios, they’ll be less verbose. In other scenarios though, they’ll be \u003cem\u003emore\u003c/em\u003e verbose. Your approach should depend on what you need your dialogs and popovers to do.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor the sake of completeness, here’s an example for popovers, even though it’s largely the same:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Select all popovers\nconst popovers = document.querySelectorAll(\u0026#34;[popover]\u0026#34;);\n\n// Loop all popovers\npopovers.forEach(popover =\u0026gt; {\n\n  // Listen for command\n  popover.addEventListener(\u0026#34;command\u0026#34;, event =\u0026gt; {\n\n    // If command is show-popover\n    if (event.command == \u0026#34;show-popover\u0026#34;) {\n      // Popover was shown\n    }\n\n    // If command is hide-popover\n    else if (event.command == \u0026#34;hide-popover\u0026#34;) {\n      // Popover was hidden\n    }\n\n    // If command is toggle-popover\n    else if (event.command == \u0026#34;toggle-popover\u0026#34;) {\n      // Popover was toggled\n    }\n\n  });\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBeing able to listen for \u003ccode\u003eshow-popover\u003c/code\u003e and \u003ccode\u003ehide-popover\u003c/code\u003e is useful as we otherwise have to write a sort of “if opened, do this, else do that” logic from within a \u003ccode\u003etoggle\u003c/code\u003e or \u003ccode\u003ebeforetoggle\u003c/code\u003e event listener or \u003ccode\u003etoggle-popover\u003c/code\u003e conditional. But \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e elements? Yeah, those benefit more from the \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e attributes than they do from this \u003ccode\u003ecommand\u003c/code\u003e JavaScript event.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnother thing that’s available to us via JavaScript is \u003ccode\u003eevent.source\u003c/code\u003e, which is the button that invokes the \u003ccode\u003epopover\u003c/code\u003e or \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eif (event.command == \u0026#34;toggle-popover\u0026#34;) {\n  // Toggle the invoker’s class\n  event.source.classList.toggle(\u0026#34;active\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can also set the \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e attributes using JavaScript:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst button = document.querySelector(\u0026#34;button\u0026#34;);\nconst dialog = document.querySelector(\u0026#34;dialog\u0026#34;);\n\nbutton.command = \u0026#34;show-modal\u0026#34;;\nbutton.commandForElement = dialog; /* Not dialog.id */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…which is only slightly less verbose than:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebutton.command = \u0026#34;show-modal\u0026#34;;\nbutton.setAttribute(\u0026#34;commandfor\u0026#34;, dialog.id);\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"creating-custom-commands\"\u003eCreating custom commands\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003ecommand\u003c/code\u003e attribute also accepts custom commands prefixed with two dashes (\u003ccode\u003e--\u003c/code\u003e). I suppose this makes them like CSS custom properties but for JavaScript events and event handler HTML attributes. The latter observation is maybe a bit (or definitely a lot) controversial since \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_—_dont_use_these\" rel=\"noopener\"\u003eusing event handler HTML attributes is considered bad practice\u003c/a\u003e. But let’s take a look at that anyway, shall we?\u003c/p\u003e\n\n\n\n\u003cp\u003eCustom commands look like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button command=\u0026#34;--spin-me-a-bit\u0026#34; commandfor=\u0026#34;record\u0026#34;\u0026gt;Spin me a bit\u0026lt;/button\u0026gt;\n\u0026lt;button command=\u0026#34;--spin-me-a-lot\u0026#34; commandfor=\u0026#34;record\u0026#34;\u0026gt;Spin me a lot\u0026lt;/button\u0026gt;\n\u0026lt;button command=\u0026#34;--spin-me-right-round\u0026#34; commandfor=\u0026#34;record\u0026#34;\u0026gt;Spin me right round\u0026lt;/button\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst record = document.querySelector(\u0026#34;#record\u0026#34;);\n\nrecord.addEventListener(\u0026#34;command\u0026#34;, event =\u0026gt; {\n  if (event.command == \u0026#34;--spin-me-a-bit\u0026#34;) {\n    record.style.rotate = \u0026#34;90deg\u0026#34;;\n  } else if (event.command == \u0026#34;--spin-me-a-lot\u0026#34;) {\n    record.style.rotate = \u0026#34;180deg\u0026#34;;\n  } else if (event.command == \u0026#34;--spin-me-right-round\u0026#34;) {\n    record.style.rotate = \u0026#34;360deg\u0026#34;;\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003eevent.command\u003c/code\u003e must match the string with the dashed (\u003ccode\u003e--\u003c/code\u003e) prefix.\u003c/p\u003e\n\n\n\u003ch3 id=\"are-popover-and-dialog-the-only-features-that-support-invoker-commands-\"\u003eAre \u003ccode\u003epopover\u003c/code\u003e and \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e the only features that support invoker commands?\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://open-ui.org/components/invokers.explainer/\" rel=\"noopener\"\u003eAccording to Open UI\u003c/a\u003e, invokers targeting additional elements such as \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e were deferred from the initial release. I think this is because HTML-invoked dialogs and an API that unifies dialogs and popovers is a must-have, whereas other commands (even custom commands) feel more like a nice-to-have deal.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, based on experimentation (I couldn’t help myself!) web browsers have actually implemented additional invokers to varying degrees. For example, \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e commands work as expected whereas \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e commands match \u003ccode\u003eevent.command\u003c/code\u003e (e.g., \u003ccode\u003eshow-picker\u003c/code\u003e) but fail to actually invoke the method (\u003ccode\u003eshowPicker()\u003c/code\u003e). I missed all of this at first because \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API\" rel=\"noopener\"\u003eMDN only mentions dialog and popover\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eOpen UI also alludes to commands for \u003ccode\u003e\u0026lt;input type=\u0026#34;file\u0026#34;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;input type=\u0026#34;number\u0026#34;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e, and fullscreen-related methods, but I don’t think that anything is certain at this point.\u003c/p\u003e\n\n\n\u003ch3 id=\"so-what-would-be-the-benefits-of-invoker-commands-\"\u003eSo, what would be the benefits of invoker commands?\u003c/h3\u003e\n\n\n\u003cp\u003eWell, a whole lot less JavaScript for one, especially if more invoker commands are implemented over time. Additionally, we can listen for these commands almost as if they were JavaScript events. But if nothing else, invoker commands simply provide more ways to interact with APIs such as the Dialog and Popover APIs. In a nutshell, it seems like a lot of “dotting i’s” and “crossing-t’s” which is never a bad thing.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2024-11-20T08:12:34-07:00",
  "modifiedTime": "2024-11-22T06:53:39-07:00"
}
