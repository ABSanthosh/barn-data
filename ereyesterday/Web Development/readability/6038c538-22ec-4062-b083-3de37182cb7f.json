{
  "id": "6038c538-22ec-4062-b083-3de37182cb7f",
  "title": "Positioning Text Around Elements With CSS Offset",
  "link": "https://css-tricks.com/positioning-text-around-elements-with-css-offset/",
  "description": "When it comes to positioning elements on a page, including text, there are many ways to go about it in CSS — the literal position property with corresponding inset-* properties, translate, margin, anchor() (limited browser support at the moment), and so forth. The offset property is another one that belongs in that list. Positioning Text Around Elements With CSS Offset originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Preethi",
  "published": "Fri, 24 Jan 2025 14:59:25 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "offset",
    "positioning",
    "typography"
  ],
  "byline": "Preethi",
  "length": 7516,
  "excerpt": "When it comes to positioning elements on a page, including text, there are many ways to go about it in CSS — the literal position property with corresponding inset-* properties, translate, margin, anchor() (limited browser support at the moment), and so forth. The offset property is another one that belongs in that list.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "When it comes to positioning elements on a page, including text, there are many ways to go about it in CSS — the literal position property with corresponding inset-* properties, translate, margin, anchor() (limited browser support at the moment), and so forth. The offset property is another one that belongs in that list. The offset property is typically used for animating an element along a predetermined path. For instance, the square in the following example traverses a circular path: \u003cdiv class=\"circle\"\u003e \u003cdiv class=\"square\"\u003e\u003c/div\u003e \u003c/div\u003e @property --p { syntax: '\u003cpercentage\u003e'; inherits: false; initial-value: 0%; } .square { offset: top 50% right 50% circle(50%) var(--p); transition: --p 1s linear; /* Equivalent to: offset-position: top 50% right 50%; offset-path: circle(50%); offset-distance: var(--p); */ /* etc. */ } .circle:hover .square{ --p: 100%; } A registered CSS custom property (--p) is used to set and animate the offset distance of the square element. The animation is possible because an element can be positioned at any point in a given path using offset. and maybe you didn’t know this, but offset is a shorthand property comprised of the following constituent properties: offset-position: The path’s starting point offset-path: The shape along which the element can be moved offset-distance: A distance along the path on which the element is moved offset-rotate: The rotation angle of an element relative to its anchor point and offset path offset-anchor: A position within the element that’s aligned to the path The offset-path property is the one that’s important to what we’re trying to achieve. It accepts a shape value — including SVG shapes or CSS shape functions — as well as reference boxes of the containing element to create the path. Reference boxes? Those are an element’s dimensions according to the CSS Box Model, including content-box, padding-box, border-box, as well as SVG contexts, such as the view-box, fill-box, and stroke-box. These simplify how we position elements along the edges of their containing elements. Here’s an example: all the small squares below are placed in the default top-left corner of their containing elements’ content-box. In contrast, the small circles are positioned along the top-right corner (25% into their containing elements’ square perimeter) of the content-box, border-box, and padding-box, respectively. \u003cdiv class=\"big\"\u003e \u003cdiv class=\"small circle\"\u003e\u003c/div\u003e \u003cdiv class=\"small square\"\u003e\u003c/div\u003e \u003cp\u003eShe sells sea shells by the seashore\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"big\"\u003e \u003cdiv class=\"small circle\"\u003e\u003c/div\u003e \u003cdiv class=\"small square\"\u003e\u003c/div\u003e \u003cp\u003eShe sells sea shells by the seashore\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"big\"\u003e \u003cdiv class=\"small circle\"\u003e\u003c/div\u003e \u003cdiv class=\"small square\"\u003e\u003c/div\u003e \u003cp\u003eShe sells sea shells by the seashore\u003c/p\u003e \u003c/div\u003e .small { /* etc. */ position: absolute; \u0026.square { offset: content-box; border-radius: 4px; } \u0026.circle { border-radius: 50%; } } .big { /* etc. */ contain: layout; /* (or position: relative) */ \u0026:nth-of-type(1) { .circle { offset: content-box 25%; } } \u0026:nth-of-type(2) { border: 20px solid rgb(170 232 251); .circle { offset: border-box 25%; } } \u0026:nth-of-type(3) { padding: 20px; .circle { offset: padding-box 25%; } } } Note: You can separate the element’s offset-positioned layout context if you don’t want to allocated space for it inside its containing parent element. That’s how I’ve approached it in the example above so that the paragraph text inside can sit flush against the edges. As a result, the offset positioned elements (small squares and circles) are given their own contexts using position: absolute, which removes them from the normal document flow. This method, positioning relative to reference boxes, makes it easy to place elements like notification dots and ornamental ribbon tips along the periphery of some UI module. It further simplifies the placement of texts along a containing block’s edges, as offset can also rotate elements along the path, thanks to offset-rotate. A simple example shows the date of an article placed at a block’s right edge: \u003carticle\u003e \u003ch1\u003eThe Irreplaceable Value of Human Decision-Making in the Age of AI\u003c/h1\u003e \u003c!-- paragraphs --\u003e \u003cdiv class=\"date\"\u003ePublished on 11\u003csup\u003eth\u003c/sup\u003e Dec\u003c/div\u003e \u003ccite\u003eAn excerpt from the HBR article\u003c/cite\u003e \u003c/article\u003e article { container-type: inline-size; /* etc. */ } .date { offset: padding-box 100cqw 90deg / left 0 bottom -10px; /* Equivalent to: offset-path: padding-box; offset-distance: 100cqw; (100% of the container element's width) offset-rotate: 90deg; offset-anchor: left 0 bottom -10px; */ } As we just saw, using the offset property with a reference box path and container units is even more efficient — you can easily set the offset distance based on the containing element’s width or height. I’ll include a reference for learning more about container queries and container query units in the “Further Reading” section at the end of this article. There’s also the offset-anchor property that’s used in that last example. It provides the anchor for the element’s displacement and rotation — for instance, the 90 degree rotation in the example happens from the element’s bottom-left corner. The offset-anchor property can also be used to move the element either inward or outward from the reference box by adjusting inset-* values — for instance, the bottom -10px arguments pull the element’s bottom edge outwards from its containing element’s padding-box. This enhances the precision of placements, also demonstrated below. \u003cfigure\u003e \u003cdiv class=\"big\"\u003e4\u003c/div\u003e \u003cdiv class=\"small\"\u003enumber four\u003c/div\u003e \u003c/figure\u003e .small { width: max-content; offset: content-box 90% -54deg / center -3rem; /* Equivalent to: offset-path: content-box; offset-distance: 90%; offset-rotate: -54deg; offset-anchor: center -3rem; */ font-size: 1.5rem; color: navy; } As shown at the beginning of the article, offset positioning is animateable, which allows for dynamic design effects, like this: \u003carticle\u003e \u003cfigure\u003e \u003cdiv class=\"small one\"\u003e17\u003csup\u003eth\u003c/sup\u003e Jan. 2025\u003c/div\u003e \u003cspan class=\"big\"\u003eSeminar\u003cbr\u003eon\u003cbr\u003eLiterature\u003c/span\u003e \u003cdiv class=\"small two\"\u003eTickets Available\u003c/div\u003e \u003c/figure\u003e \u003c/article\u003e @property --d { syntax: \"\u003cpercentage\u003e\"; inherits: false; initial-value: 0%; } .small { /* other style rules */ offset: content-box var(--d) 0deg / left center; /* Equivalent to: offset-path: content-box; offset-distance: var(--d); offset-rotate: 0deg; offset-anchor: left center; */ transition: --d .2s linear; \u0026.one { --d: 2%; } \u0026.two { --d: 70%; } } article:hover figure { .one { --d: 15%; } .two { --d: 80%; } } Wrapping up Whether for graphic designs like text along borders, textual annotations, or even dynamic texts like error messaging, CSS offset is an easy-to-use option to achieve all of that. We can position the elements along the reference boxes of their containing parent elements, rotate them, and even add animation if needed. Further reading The CSS offset-path property: CSS-Tricks, MDN The CSS offset-anchor property: CSS-Tricks, MDN Container query length units: CSS-Tricks, MDN The @property at-rule: CSS-Tricks, web.dev The CSS Box Model: CSS-Tricks SVG Reference Boxes: W3C",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383506",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWhen it comes to positioning elements on a page, including text, there are many ways to go about it in CSS — the literal \u003ccode\u003eposition\u003c/code\u003e property with corresponding \u003ccode\u003einset-*\u003c/code\u003e properties, \u003ccode\u003etranslate\u003c/code\u003e, \u003ccode\u003emargin\u003c/code\u003e, \u003ccode\u003eanchor()\u003c/code\u003e (limited browser support at the moment), and so forth. The \u003ccode\u003eoffset\u003c/code\u003e property is another one that belongs in that list.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eoffset\u003c/code\u003e property is typically used for animating an element along a predetermined path. For instance, the square in the following example traverses a circular path:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;circle\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;square\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --p {\n  syntax: \u0026#39;\u0026lt;percentage\u0026gt;\u0026#39;;\n  inherits: false;\n  initial-value: 0%;\n}\n.square {\n  offset: top 50% right 50% circle(50%) var(--p);\n  transition: --p 1s linear;\n\n  /* Equivalent to:\n    offset-position: top 50% right 50%;\n    offset-path: circle(50%);\n    offset-distance: var(--p); */\n\n  /* etc. */\n}\n\n.circle:hover .square{ --p: 100%; }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eA registered CSS custom property (\u003ccode\u003e--p\u003c/code\u003e) is used to set and animate the offset distance of the square element. The animation is possible because \u003cstrong\u003ean element can be positioned at any point in a given path using \u003ccode\u003eoffset\u003c/code\u003e\u003c/strong\u003e. and maybe you didn’t know this, but \u003ccode\u003eoffset\u003c/code\u003e is a shorthand property comprised of the following constituent properties:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoffset-position\u003c/code\u003e:\u003c/strong\u003e The path’s starting point\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoffset-path\u003c/code\u003e:\u003c/strong\u003e The shape along which the element can be moved\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoffset-distance\u003c/code\u003e:\u003c/strong\u003e A distance along the path on which the element is moved\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoffset-rotate\u003c/code\u003e:\u003c/strong\u003e The rotation angle of an element relative to its anchor point and offset path\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoffset-anchor\u003c/code\u003e:\u003c/strong\u003e A position within the element that’s aligned to the path\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eoffset-path\u003c/code\u003e property is the one that’s important to what we’re trying to achieve. It accepts a shape value — including SVG shapes or CSS shape functions — as well as reference boxes of the containing element to create the path.\u003c/p\u003e\n\n\n\n\u003cp\u003eReference boxes? Those are an element’s dimensions according to the CSS Box Model, including \u003ccode\u003econtent-box\u003c/code\u003e, \u003ccode\u003epadding-box\u003c/code\u003e, \u003ccode\u003eborder-box\u003c/code\u003e, as well as SVG contexts, such as the \u003ccode\u003eview-box\u003c/code\u003e, \u003ccode\u003efill-box\u003c/code\u003e, and \u003ccode\u003estroke-box\u003c/code\u003e. \u003cstrong\u003eThese simplify how we position elements along the edges of their containing elements.\u003c/strong\u003e Here’s an example: all the small squares below are placed in the default top-left corner of their containing elements’ \u003ccode\u003econtent-box\u003c/code\u003e. In contrast, the small circles are positioned along the top-right corner (\u003ccode\u003e25%\u003c/code\u003e into their containing elements’ square perimeter) of the \u003ccode\u003econtent-box\u003c/code\u003e, \u003ccode\u003eborder-box\u003c/code\u003e, and \u003ccode\u003epadding-box\u003c/code\u003e, respectively.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;big\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;small circle\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;small square\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;p\u0026gt;She sells sea shells by the seashore\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div class=\u0026#34;big\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;small circle\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;small square\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;p\u0026gt;She sells sea shells by the seashore\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div class=\u0026#34;big\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;small circle\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;small square\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;p\u0026gt;She sells sea shells by the seashore\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.small {\n  /* etc. */\n  position: absolute;\n\n  \u0026amp;.square {\n    offset: content-box;\n    border-radius: 4px;\n  }\n\n  \u0026amp;.circle { border-radius: 50%; }\n}\n\n.big {\n  /* etc. */\n  contain: layout; /* (or position: relative) */\n\n  \u0026amp;:nth-of-type(1) {\n    .circle { offset: content-box 25%; }\n  }\n\n  \u0026amp;:nth-of-type(2) {\n    border: 20px solid rgb(170 232 251);\n    .circle { offset: border-box 25%; }\n  }\n\n  \u0026amp;:nth-of-type(3) {\n    padding: 20px;\n    .circle { offset: padding-box 25%; }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can separate the element’s offset-positioned layout context if you don’t want to allocated space for it inside its containing parent element. That’s how I’ve approached it in the example above so that the paragraph text inside can sit flush against the edges. As a result, the offset positioned elements (small squares and circles) are given their own contexts using \u003ccode\u003eposition: absolute\u003c/code\u003e, which removes them from the normal document flow.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis method, positioning relative to reference boxes, makes it easy to place elements like notification dots and ornamental ribbon tips along the periphery of some UI module. It further \u003cstrong\u003esimplifies the placement of texts along a containing block’s edges\u003c/strong\u003e, as \u003ccode\u003eoffset\u003c/code\u003e can also rotate elements along the path, thanks to \u003ccode\u003eoffset-rotate\u003c/code\u003e. A simple example shows the date of an article placed at a block’s right edge:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;article\u0026gt;\n  \u0026lt;h1\u0026gt;The Irreplaceable Value of Human Decision-Making in the Age of AI\u0026lt;/h1\u0026gt;\n  \u0026lt;!-- paragraphs --\u0026gt;\n  \u0026lt;div class=\u0026#34;date\u0026#34;\u0026gt;Published on 11\u0026lt;sup\u0026gt;th\u0026lt;/sup\u0026gt; Dec\u0026lt;/div\u0026gt;\n  \u0026lt;cite\u0026gt;An excerpt from the HBR article\u0026lt;/cite\u0026gt;\n\u0026lt;/article\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003earticle {\n  container-type: inline-size;\n  /* etc. */\n}\n\n.date {\n  offset: padding-box 100cqw 90deg / left 0 bottom -10px;\n  \n  /*\n    Equivalent to:\n    offset-path: padding-box;\n    offset-distance: 100cqw; (100% of the container element\u0026#39;s width)\n    offset-rotate: 90deg;\n    offset-anchor: left 0 bottom -10px;\n  */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAs we just saw, \u003cstrong\u003eusing the \u003ccode\u003eoffset\u003c/code\u003e property with a reference box path \u003cem\u003eand\u003c/em\u003e container units is even more efficient\u003c/strong\u003e — you can easily set the offset distance based on the containing element’s width or height. I’ll include a reference for learning more about container queries and container query units in the \u003ca href=\"#aa-further-reading\"\u003e“Further Reading”\u003c/a\u003e section at the end of this article.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s also the \u003ccode\u003eoffset-anchor\u003c/code\u003e property that’s used in that last example. It provides the anchor for the element’s displacement and rotation — for instance, the 90 degree rotation in the example happens from the element’s bottom-left corner. The \u003ccode\u003eoffset-anchor\u003c/code\u003e property can also be used to move the element either inward or outward from the reference box by adjusting \u003ccode\u003einset-*\u003c/code\u003e values — for instance, the \u003ccode\u003ebottom -10px\u003c/code\u003e arguments pull the element’s bottom edge outwards from its containing element’s \u003ccode\u003epadding-box\u003c/code\u003e. This enhances the precision of placements, also demonstrated below.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;figure\u0026gt;\n  \u0026lt;div class=\u0026#34;big\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;small\u0026#34;\u0026gt;number four\u0026lt;/div\u0026gt;\n\u0026lt;/figure\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.small {\n  width: max-content;\n  offset: content-box 90% -54deg / center -3rem;\n\n  /*\n    Equivalent to:\n    offset-path: content-box;\n    offset-distance: 90%;\n    offset-rotate: -54deg;\n    offset-anchor: center -3rem;\n  */\n\n  font-size: 1.5rem;\n  color: navy;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAs shown at the beginning of the article, offset positioning is animateable, which allows for dynamic design effects, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;article\u0026gt;\n  \u0026lt;figure\u0026gt;\n    \u0026lt;div class=\u0026#34;small one\u0026#34;\u0026gt;17\u0026lt;sup\u0026gt;th\u0026lt;/sup\u0026gt; Jan. 2025\u0026lt;/div\u0026gt;\n    \u0026lt;span class=\u0026#34;big\u0026#34;\u0026gt;Seminar\u0026lt;br\u0026gt;on\u0026lt;br\u0026gt;Literature\u0026lt;/span\u0026gt;\n    \u0026lt;div class=\u0026#34;small two\u0026#34;\u0026gt;Tickets Available\u0026lt;/div\u0026gt;\n  \u0026lt;/figure\u0026gt;\n\u0026lt;/article\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --d {\n  syntax: \u0026#34;\u0026lt;percentage\u0026gt;\u0026#34;;\n  inherits: false;\n  initial-value: 0%;\n}\n\n.small {\n  /* other style rules */\n  offset: content-box var(--d) 0deg / left center;\n\n  /*\n    Equivalent to:\n    offset-path: content-box;\n    offset-distance: var(--d);\n    offset-rotate: 0deg;\n    offset-anchor: left center;\n  */\n\n  transition: --d .2s linear;\n\n  \u0026amp;.one { --d: 2%; }\n  \u0026amp;.two { --d: 70%; }\n}\n\narticle:hover figure {\n  .one { --d: 15%;  }\n  .two { --d: 80%;  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eWhether for graphic designs like text along borders, textual annotations, or even dynamic texts like error messaging, CSS offset is an easy-to-use option to achieve all of that. We can position the elements along the reference boxes of their containing parent elements, rotate them, and even add animation if needed.\u003c/p\u003e\n\n\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThe CSS \u003ccode\u003eoffset-path\u003c/code\u003e property:\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/almanac/properties/o/offset-path/\"\u003eCSS-Tricks\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path\" rel=\"noopener\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eThe CSS \u003ccode\u003eoffset-anchor\u003c/code\u003e property:\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/almanac/properties/o/offset-anchor/\"\u003eCSS-Tricks\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchor\" rel=\"noopener\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eContainer query length units:\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/css-container-queries/#aa-container-length-units\"\u003eCSS-Tricks\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries#container_query_length_units\" rel=\"noopener\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eThe \u003ccode\u003e@property\u003c/code\u003e at-rule:\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/almanac/rules/p/property/\"\u003eCSS-Tricks\u003c/a\u003e, \u003ca href=\"https://web.dev/blog/at-property-baseline\" rel=\"noopener\"\u003eweb.dev\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eThe CSS Box Model:\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/the-css-box-model/\"\u003eCSS-Tricks\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSVG Reference Boxes:\u003c/strong\u003e \u003ca href=\"https://www.w3.org/Graphics/SVG/WG/wiki/Proposals/Bounding_boxes#Defining_the_Reference_Box\" rel=\"noopener\"\u003eW3C\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-01-24T07:59:25-07:00",
  "modifiedTime": "2025-01-24T07:59:29-07:00"
}
