{
  "id": "174da37f-683f-4bd2-9317-93b9c60aebe7",
  "title": "diceomatic: a DSL for making children's dice games",
  "link": "https://robertheaton.com/diceomatic/",
  "description": "My five year-old is into football. Really, really, won’t-sit-down, won’t-let-anyone-else-sit-down into football. My wife and I spend every free minute taking half-hearted shots on goal; feigning agony as a daring counterattack puts us 23-0 down; and answering quiz questions about which hospital Harry Kane was born in. To buy us a minute to breathe and shower, I invented a game called “Dice Football”. In Dice Football you roll two 6-sided dice, add up the numbers, then consult a table to see what happens next. When the match is over you enter the results in your tournament tracker. Then you start the next match. Hopefully you don’t get bored for at least an hour. Dice Football is a single-player game, which means that no one has to win or lose, and that mummy and daddy get to do something else for a bit. (Here’s a printable rules sheet for Dice Football, and one for the tournament tracker.) Dice Football was a surprise, obsessive, breakout hit. As long as we kept our son fed with pens and exercise books, we could have all the showers we wanted. Dice Football was also a gateway into the world of dice-based simulation games, and over the following weeks I could barely keep up with my son’s appetite for new games. His favourite was “Dice US Federal Election,” where you roll dice to figure out which party wins each state, and when you’re finished you borrow daddy’s phone to add up the electoral college votes. As the games kept coming, I ran out of interesting ways to generate sums with 6-sided dice. I bought some 20-siders, and these big boys kept things interesting for another week or two. But I started to chafe against the limits of any kind of simple polyhedra. I started to get ambitious. I wanted to make games that used sums with arbitrarily customisable structure and difficulty. For example, instead of the simple A+B = ?? (where 1\u003c=A\u003c=6 AND 1\u003c=B\u003c=6) form of two 6-sided dice, I wanted sums like: A*B + C*D = ?? (for example: 4*2 + 14*3 = ??) And the addition portion crosses a 10 boundary And A*B \u003c 20 and C*D \u003c 50 And all variables are between 2 and 100 If the answer is even then it’s a goal for Chelsea; if it’s odd then it’s a goal for Liverpool. Or whatever. I couldn’t build these sums using dice, and I certainly wasn’t going to construct them by hand. I needed a way to generate an infinite stream of super-specific questions. So I wrote one: diceomatic. diceomatic diceomatic is a Python library for building highly-customisable, infinite dice games. For example, to generate a stream of questions using the example constraints listed above, you write: from diceomatic import * # Declare the variables a, b, c, d, e = variables([\"a\", \"b\", \"c\", \"d\", \"e\"]) vs = [a, b, c, d, e] # Declare the form of the equation lhs = Add(Multiply(a, b), Multiply(c, d)) rhs = e # Declare the constraints constraints = [ AdditionCrosses10Boundary(Multiply(a, b), Multiply(c, d)), IsLessThan(Multiply(a, b), Literal(20)), IsLessThan(Multiply(c, d), Literal(50)), Equal(lhs, rhs), ] # Declare the domains over which to search for valid sums domains = uniform_domains(vs, range(2, 100)) # Find variable bindings that form a valid equation bindings = find_bindings(vs, domains, constraints, n_bindings=10) # Print each set of bindings as an equation with a random value held out for bnd in bindings: lhs_expr = expression_string(lhs, bnd, hold_out=e) rhs_expr = expression_string(rhs, bnd, hold_out=e) print(f\"{lhs_expr} = {rhs_expr}\") This prints: 9 * 2 + 11 * 2 = __ 4 * 2 + 10 * 4 = __ 2 * 5 + 16 * 3 = __ 6 * 2 + 5 * 6 = __ # ...and so on... You can then save the sums as a PDF, print the PDF on a sheet of paper, and use it to power games of Extreme Dice Football. Advanced usage You can do much more than print the questions though! You have programmatic access to them, which means you can do anything you want. You can put them on a website, or a game, or an app. Your code knows what the correct answer to each question is, so it can check whether the player’s answer is correct. You can even automatically adjust the difficulty of the generated questions based on how the player does. For example, I made a Streamlit app for displaying sums and checking their answers, and I deployed it to Streamlit cloud. Now I can write a new game with new rules, program its format into into the app, hand my son an iPad, and have the iPad generate the equations of the form and difficulty needed to power the game. Truly a stream of infinite fun. Try it yourself Install diceomatic using: pip install diceomatic See the GitHub repo for docs and examples. PRs welcome! Links diceomatic on GitHub Dice US Federal Election Dice Football Tournament tracker",
  "author": "",
  "published": "Wed, 11 Jun 2025 00:00:00 +0000",
  "source": "https://robertheaton.com/feed.xml",
  "categories": null,
  "byline": "",
  "length": 4709,
  "excerpt": "My five year-old is into football. Really, really, won’t-sit-down, won’t-let-anyone-else-sit-down into football. My wife and I spend every free minute taking half-hearted shots on goal; feigning agony as a daring counterattack puts us 23-0 down; and answering quiz questions about which hospital Harry Kane was born in.",
  "siteName": "Robert Heaton",
  "favicon": "https://robertheaton.com/images/fav.png",
  "text": "My five year-old is into football. Really, really, won’t-sit-down, won’t-let-anyone-else-sit-down into football. My wife and I spend every free minute taking half-hearted shots on goal; feigning agony as a daring counterattack puts us 23-0 down; and answering quiz questions about which hospital Harry Kane was born in. To buy us a minute to breathe and shower, I invented a game called “Dice Football”. In Dice Football you roll two 6-sided dice, add up the numbers, then consult a table to see what happens next. When the match is over you enter the results in your tournament tracker. Then you start the next match. Hopefully you don’t get bored for at least an hour. Dice Football is a single-player game, which means that no one has to win or lose, and that mummy and daddy get to do something else for a bit. (Here’s a printable rules sheet for Dice Football, and one for the tournament tracker.) Dice Football was a surprise, obsessive, breakout hit. As long as we kept our son fed with pens and exercise books, we could have all the showers we wanted. Dice Football was also a gateway into the world of dice-based simulation games, and over the following weeks I could barely keep up with my son’s appetite for new games. His favourite was “Dice US Federal Election,” where you roll dice to figure out which party wins each state, and when you’re finished you borrow daddy’s phone to add up the electoral college votes. As the games kept coming, I ran out of interesting ways to generate sums with 6-sided dice. I bought some 20-siders, and these big boys kept things interesting for another week or two. But I started to chafe against the limits of any kind of simple polyhedra. I started to get ambitious. I wanted to make games that used sums with arbitrarily customisable structure and difficulty. For example, instead of the simple A+B = ?? (where 1\u003c=A\u003c=6 AND 1\u003c=B\u003c=6) form of two 6-sided dice, I wanted sums like: A*B + C*D = ?? (for example: 4*2 + 14*3 = ??) And the addition portion crosses a 10 boundary And A*B \u003c 20 and C*D \u003c 50 And all variables are between 2 and 100 If the answer is even then it’s a goal for Chelsea; if it’s odd then it’s a goal for Liverpool. Or whatever. I couldn’t build these sums using dice, and I certainly wasn’t going to construct them by hand. I needed a way to generate an infinite stream of super-specific questions. So I wrote one: diceomatic. diceomatic diceomatic is a Python library for building highly-customisable, infinite dice games. For example, to generate a stream of questions using the example constraints listed above, you write: from diceomatic import * # Declare the variables a, b, c, d, e = variables([\"a\", \"b\", \"c\", \"d\", \"e\"]) vs = [a, b, c, d, e] # Declare the form of the equation lhs = Add(Multiply(a, b), Multiply(c, d)) rhs = e # Declare the constraints constraints = [ AdditionCrosses10Boundary(Multiply(a, b), Multiply(c, d)), IsLessThan(Multiply(a, b), Literal(20)), IsLessThan(Multiply(c, d), Literal(50)), Equal(lhs, rhs), ] # Declare the domains over which to search for valid sums domains = uniform_domains(vs, range(2, 100)) # Find variable bindings that form a valid equation bindings = find_bindings(vs, domains, constraints, n_bindings=10) # Print each set of bindings as an equation with a random value held out for bnd in bindings: lhs_expr = expression_string(lhs, bnd, hold_out=e) rhs_expr = expression_string(rhs, bnd, hold_out=e) print(f\"{lhs_expr} = {rhs_expr}\") This prints: 9 * 2 + 11 * 2 = __ 4 * 2 + 10 * 4 = __ 2 * 5 + 16 * 3 = __ 6 * 2 + 5 * 6 = __ # ...and so on... You can then save the sums as a PDF, print the PDF on a sheet of paper, and use it to power games of Extreme Dice Football. Advanced usage You can do much more than print the questions though! You have programmatic access to them, which means you can do anything you want. You can put them on a website, or a game, or an app. Your code knows what the correct answer to each question is, so it can check whether the player’s answer is correct. You can even automatically adjust the difficulty of the generated questions based on how the player does. For example, I made a Streamlit app for displaying sums and checking their answers, and I deployed it to Streamlit cloud. Now I can write a new game with new rules, program its format into into the app, hand my son an iPad, and have the iPad generate the equations of the form and difficulty needed to power the game. Truly a stream of infinite fun. Try it yourself Install diceomatic using: See the GitHub repo for docs and examples. PRs welcome! Links diceomatic on GitHub Dice US Federal Election Dice Football Tournament tracker",
  "image": "https://robertheaton.com/images/sumchef/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eMy five year-old is into football. Really, really, won’t-sit-down, won’t-let-anyone-else-sit-down into football. My wife and I spend every free minute taking half-hearted shots on goal; feigning agony as a daring counterattack puts us 23-0 down; and answering quiz questions about which hospital Harry Kane was born in.\u003c/p\u003e\n\n\u003cp\u003eTo buy us a minute to breathe and shower, I invented a game called \u003ca href=\"https://docs.google.com/document/d/1rLwTG3LiXmAVnodnl0yjB4a6idm_zt21jFutJeNiX14/edit\"\u003e“Dice Football”\u003c/a\u003e. In Dice Football you roll two 6-sided dice, add up the numbers, then consult a table to see what happens next. When the match is over you enter the results in \u003ca href=\"https://docs.google.com/spreadsheets/d/15mSKIDJ-Kh45pbUrwZ06DyPW7EcdG0dglga6R1CKTTM/edit?gid=0#gid=0\"\u003eyour tournament tracker\u003c/a\u003e. Then you start the next match. Hopefully you don’t get bored for at least an hour. Dice Football is a single-player game, which means that no one has to win or lose, and that mummy and daddy get to do something else for a bit.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://robertheaton.com/images/sumchef/dice-football.png\" alt=\"image\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(Here’s \u003ca href=\"https://docs.google.com/document/d/1rLwTG3LiXmAVnodnl0yjB4a6idm_zt21jFutJeNiX14/edit\"\u003ea printable rules sheet for Dice Football\u003c/a\u003e, and one for \u003ca href=\"https://docs.google.com/spreadsheets/d/15mSKIDJ-Kh45pbUrwZ06DyPW7EcdG0dglga6R1CKTTM/edit?gid=0#gid=0\"\u003ethe tournament tracker\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eDice Football was a surprise, obsessive, breakout hit. As long as we kept our son fed with pens and exercise books, we could have all the showers we wanted. Dice Football was also a gateway into the world of dice-based simulation games, and over the following weeks I could barely keep up with my son’s appetite for new games. His favourite was \u003ca href=\"https://docs.google.com/spreadsheets/d/1k-lIiQhSuXffkIQcMNFxZdhkG7C3CZBnJ9fw70pjEkY/edit?gid=0#gid=0\"\u003e“Dice US Federal Election,”\u003c/a\u003e where you roll dice to figure out which party wins each state, and when you’re finished you borrow daddy’s phone to add up the electoral college votes.\u003c/p\u003e\n\n\u003cp\u003eAs the games kept coming, I ran out of interesting ways to generate sums with 6-sided dice. I bought some 20-siders, and these big boys kept things interesting for another week or two. But I started to chafe against the limits of any kind of simple polyhedra. I started to get ambitious.\u003c/p\u003e\n\n\u003cp\u003eI wanted to make games that used sums with arbitrarily customisable structure and difficulty. For example, instead of the simple \u003ccode\u003eA+B = ?? (where 1\u0026lt;=A\u0026lt;=6 AND 1\u0026lt;=B\u0026lt;=6)\u003c/code\u003e form of two 6-sided dice, I wanted sums like:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eA*B + C*D = ??\u003c/code\u003e (for example: \u003ccode\u003e4*2 + 14*3 = ??\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eAnd the addition portion crosses a 10 boundary\u003c/li\u003e\n  \u003cli\u003eAnd \u003ccode\u003eA*B \u0026lt; 20\u003c/code\u003e and \u003ccode\u003eC*D \u0026lt; 50\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAnd all variables are between 2 and 100\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf the answer is even then it’s a goal for Chelsea; if it’s odd then it’s a goal for Liverpool. Or whatever.\u003c/p\u003e\n\n\u003cp\u003eI couldn’t build these sums using dice, and I certainly wasn’t going to construct them by hand. I needed a way to generate an infinite stream of super-specific questions.\u003c/p\u003e\n\n\u003cp\u003eSo I wrote one: \u003ccode\u003ediceomatic\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"diceomatic\"\u003e\u003ccode\u003ediceomatic\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003ediceomatic\u003c/code\u003e is a Python library for building highly-customisable, infinite dice games.\u003c/p\u003e\n\n\u003cp\u003eFor example, to generate a stream of questions using the example constraints listed above, you write:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003ediceomatic\u003c/span\u003e \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e\n\n\u003cspan\u003e# Declare the variables\n\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ed\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ee\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003evariables\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003cspan\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;d\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;e\u0026#34;\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\n\u003cspan\u003evs\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ed\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003e# Declare the form of the equation\n\u003c/span\u003e\u003cspan\u003elhs\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ed\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003cspan\u003erhs\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ee\u003c/span\u003e\n\n\u003cspan\u003e# Declare the constraints\n\u003c/span\u003e\u003cspan\u003econstraints\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n\t\u003cspan\u003eAdditionCrosses10Boundary\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ed\u003c/span\u003e\u003cspan\u003e)),\u003c/span\u003e\n\t\u003cspan\u003eIsLessThan\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eLiteral\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e)),\u003c/span\u003e\n\t\u003cspan\u003eIsLessThan\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMultiply\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ed\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eLiteral\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e50\u003c/span\u003e\u003cspan\u003e)),\u003c/span\u003e\n\t\u003cspan\u003eEqual\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elhs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003erhs\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\n\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e# Declare the domains over which to search for valid sums\n\u003c/span\u003e\u003cspan\u003edomains\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003euniform_domains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\n\u003cspan\u003e# Find variable bindings that form a valid equation\n\u003c/span\u003e\u003cspan\u003ebindings\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efind_bindings\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edomains\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003econstraints\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003en_bindings\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# Print each set of bindings as an equation with a random value held out\n\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003ebnd\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003ebindings\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\t\u003cspan\u003elhs_expr\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eexpression_string\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elhs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ebnd\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ehold_out\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\u003cspan\u003erhs_expr\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eexpression_string\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erhs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ebnd\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ehold_out\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003elhs_expr\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e = \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003erhs_expr\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis prints:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e9 * 2 + 11 * 2 = __\n4 * 2 + 10 * 4 = __\n2 * 5 + 16 * 3 = __\n6 * 2 + 5 * 6 = __\n# ...and so on...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eYou can then save the sums as a PDF, print the PDF on a sheet of paper, and use it to power games of Extreme Dice Football.\u003c/p\u003e\n\n\u003ch2 id=\"advanced-usage\"\u003eAdvanced usage\u003c/h2\u003e\n\n\u003cp\u003eYou can do much more than print the questions though! You have programmatic access to them, which means you can do anything you want. You can put them on a website, or a game, or an app. Your code knows what the correct answer to each question is, so it can check whether the player’s answer is correct. You can even automatically adjust the difficulty of the generated questions based on how the player does.\u003c/p\u003e\n\n\u003cp\u003eFor example, I made a \u003ca href=\"https://streamlit.io\"\u003eStreamlit\u003c/a\u003e app for displaying sums and checking their answers, and I deployed it to Streamlit cloud. Now I can write a new game with new rules, program its format into into the app, hand my son an iPad, and have the iPad generate the equations of the form and difficulty needed to power the game.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://robertheaton.com/images/sumchef/streamlit.png\" alt=\"image\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTruly a stream of infinite fun.\u003c/p\u003e\n\n\u003ch2 id=\"try-it-yourself\"\u003eTry it yourself\u003c/h2\u003e\n\n\u003cp\u003eInstall diceomatic using:\u003c/p\u003e\n\n\n\n\u003cp\u003eSee \u003ca href=\"https://github.com/robert/diceomatic\"\u003ethe GitHub repo\u003c/a\u003e for docs and examples. PRs welcome!\u003c/p\u003e\n\n\u003ch2 id=\"links\"\u003eLinks\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://github.com/robert/diceomatic\"\u003ediceomatic on GitHub\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.google.com/spreadsheets/d/1k-lIiQhSuXffkIQcMNFxZdhkG7C3CZBnJ9fw70pjEkY/edit?gid=0#gid=0\"\u003eDice US Federal Election\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.google.com/document/d/1rLwTG3LiXmAVnodnl0yjB4a6idm_zt21jFutJeNiX14/edit\"\u003eDice Football\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://docs.google.com/spreadsheets/d/15mSKIDJ-Kh45pbUrwZ06DyPW7EcdG0dglga6R1CKTTM/edit?gid=0#gid=0\"\u003eTournament tracker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
