{
  "id": "d09d7a5d-92fc-4edb-ab17-dc3598c1d402",
  "title": "AWS Cloud Development Kit Vulnerability Enables Full AWS Account Takeover",
  "link": "https://www.infoq.com/news/2024/12/aws-cdk-full-account-takeover/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "A new vulnerability discovered in AWS Cloud Development Kit (CDK) by security firm Aqua could lead to an attacker fully taking over a target AWS account due to manual deletion of artifact S3 buckets. While AWS fixed the vulnerability, you are still required to take action if you have used CDK version v2.148.1 or earlier. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Sun, 01 Dec 2024 17:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Cloud Security",
    "AWS",
    "Security Vulnerabilities",
    "DevOps",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3413,
  "excerpt": "A new vulnerability discovered in AWS Cloud Development Kit (CDK) by security firm Aqua could lead to an attacker fully taking over a target AWS account due to manual deletion of artifact S3 buckets.",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241128133034/apple-touch-icon.png",
  "text": "A new vulnerability discovered in AWS Cloud Development Kit (CDK) by security firm Aqua could lead to an attacker fully taking over a target AWS account due to manual deletion of artifact S3 buckets. While AWS fixed the vulnerability, you are still required to take action if you have used CDK version v2.148.1 or earlier. The AWS Cloud Development Kit (CDK) is an IaC a tool that allows developers to define cloud infrastructure using Python, TypeScript, or JavaScript. At the root of its vulnerability, explain Aqua security researchers Ofek Itach and Yakir Kadkoda, lies the use of an easily predictable S3 bucket name to store files required by CDK to bootstrap the process of creating AWS infrastructure based on the user's requirements. Those files, including several IAM roles, policies, and more, are all stored in the same S3 bucket named following the pattern cdk-{Qualifier}-{Description}-{Account-ID}-{Region}. Actually, the user can specify the Qualifier to use when running CDK, but, Since many users run the cdk bootstrap command without customizing the qualifier, the S3 bucket naming pattern of the staging bucket becomes predictable. This is because the default value for the bucket name qualifier is set to hnb659fds, making it easier to anticipate the bucket’s name. Knowing this, say the researches, an attacker could create ahead of time the S3 bucket CDK bootstrap would use for a given account, thus causing an error in case the legitimate account owner would attempt to use CDK bootstrap. This is in itself a kind of denial of service (DoS) attack but, worse, it could lead to complete account takeover. In fact, if the compromised S3 bucket is used both to read and write, an attacker could for example inject an admin role: The CDK staging bucket contains CloudFormation templates. If an attacker gains access to the CDK staging bucket of other users, these files can be easily tampered with and backdoored, enabling the injection of malicious resources into the victim’s account during deployment. This scenario is enabled, specifically, by the user deleting the CDK S3 bucket after bootstrapping it, for example to reduce the number of used buckets. As the researchers detail in their article, an attacker might \"hijack\" a released CDK S3 bucket and set up privileges and mechanisms to intercept any future attempt to run cdk bootstrap/cdk deploy on the owner's part. Essentially, we were able to create an admin role in a target account if someone deletes the CDK staging S3 bucket that was created during the bootstrap process and then tries to use CDK again. Based on their analysis of almost 40k accounts, the researchers estimated about 1% of CDK users to be vulnerable to this attack vector. While AWS fixed CDK from version 2.149.0 by using stricter ownership checks and updated the documentation to highlight the importance of using custom qualifiers, all users who bootstrapped CDK with any previous versions will remain vulnerable even if they update their CDK. In addition to update CDK, in fact, those users will need to run the cdk bootstrap command again or define an IAM policy condition to the FilePublishingRole CDK role: cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2024/12/aws-cdk-full-account-takeover/en/headerimage/aws-cdk-full-account-takeover-1733071989371.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eA new \u003ca href=\"https://www.aquasec.com/blog/aws-cdk-risk-exploiting-a-missing-s3-bucket-allowed-account-takeover/\"\u003evulnerability discovered in AWS Cloud Development Kit (CDK) by security firm Aqua\u003c/a\u003e could lead to an attacker fully taking over a target AWS account due to manual deletion of artifact S3 buckets. While AWS fixed the vulnerability, you are still required to take action if you have used CDK version v2.148.1 or earlier.\u003c/p\u003e\n\n\u003cp\u003eThe AWS Cloud Development Kit (CDK) is an IaC a tool that allows developers to define cloud infrastructure using Python, TypeScript, or JavaScript.\u003c/p\u003e\n\n\u003cp\u003eAt the root of its vulnerability, explain Aqua security researchers Ofek Itach and Yakir Kadkoda, lies the use of an easily predictable S3 bucket name to store files required by CDK to bootstrap the process of creating AWS infrastructure based on the user\u0026#39;s requirements. Those files, including several IAM roles, policies, and more, are all stored in the same S3 bucket named following the pattern \u003ccode\u003ecdk-{Qualifier}-{Description}-{Account-ID}-{Region}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eActually, the user can specify the \u003ccode\u003eQualifier\u003c/code\u003e to use when running CDK, but,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSince many users run the \u003ccode\u003ecdk bootstrap\u003c/code\u003e command without customizing the qualifier, the S3 bucket naming pattern of the staging bucket becomes predictable. This is because the default value for the bucket name qualifier is set to \u003ccode\u003ehnb659fds\u003c/code\u003e, making it easier to anticipate the bucket’s name.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eKnowing this, say the researches, an attacker could create ahead of time the S3 bucket \u003ccode\u003eCDK bootstrap\u003c/code\u003e would use for a given account, thus causing an error in case the legitimate account owner would attempt to use \u003ccode\u003eCDK bootstrap\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is in itself a kind of denial of service (DoS) attack but, worse, it could lead to complete account takeover. In fact, if the compromised S3 bucket is used both to read and write, an attacker could for example inject an admin role:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe CDK staging bucket contains CloudFormation templates. If an attacker gains access to the CDK staging bucket of other users, these files can be easily tampered with and backdoored, enabling the injection of malicious resources into the victim’s account during deployment.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis scenario is enabled, specifically, by the user deleting the CDK S3 bucket after bootstrapping it, for example to reduce the number of used buckets. As the researchers detail in their article, an attacker might \u0026#34;hijack\u0026#34; a released CDK S3 bucket and set up privileges and mechanisms to intercept any future attempt to run \u003ccode\u003ecdk bootstrap\u003c/code\u003e/\u003ccode\u003ecdk deploy\u003c/code\u003e on the owner\u0026#39;s part.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEssentially, we were able to create an admin role in a target account if someone deletes the CDK staging S3 bucket that was created during the bootstrap process and then tries to use CDK again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBased on their analysis of almost 40k accounts, the researchers estimated about 1% of CDK users to be vulnerable to this attack vector.\u003c/p\u003e\n\n\u003cp\u003eWhile AWS \u003ca href=\"https://github.com/aws/aws-cdk/releases/tag/v2.149.0\"\u003efixed CDK from version 2.149.0\u003c/a\u003e by using \u003ca href=\"https://github.com/aws/aws-cdk/pull/30823/files\"\u003estricter ownership checks\u003c/a\u003e and \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping-troubleshoot.html\"\u003eupdated the documentation to highlight the importance of using custom qualifiers\u003c/a\u003e, all users who bootstrapped CDK with any previous versions will remain vulnerable even if they update their CDK. In addition to update CDK, in fact, those users will need to run the \u003ccode\u003ecdk bootstrap\u003c/code\u003e command again or define an IAM policy condition to the \u003ccode\u003eFilePublishingRole\u003c/code\u003e CDK role: \u003ccode\u003ecdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}\u003c/code\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-01T00:00:00Z",
  "modifiedTime": null
}
