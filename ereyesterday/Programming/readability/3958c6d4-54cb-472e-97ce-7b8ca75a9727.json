{
  "id": "3958c6d4-54cb-472e-97ce-7b8ca75a9727",
  "title": "Amazon S3 Adds Sort and Z-Order Compaction to Improve Apache Iceberg Query Performance",
  "link": "https://www.infoq.com/news/2025/07/amazon-s3-iceberg-compaction/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "AWS has recently announced that Amazon S3 now supports sort and z-order compaction for Apache Iceberg tables. The new features reduce scan times and engine costs, and are available for both S3 Tables and traditional S3 buckets using AWS Glue Data Catalog optimization. By Renato Losio",
  "author": "Renato Losio",
  "published": "Wed, 16 Jul 2025 15:04:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "S3",
    "Data Analytics",
    "AWS",
    "Cloud",
    "Apache Iceberg",
    "AI, ML \u0026 Data Engineering",
    "Development",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 4100,
  "excerpt": "AWS has recently announced that Amazon S3 now supports sort and z-order compaction for Apache Iceberg tables. The new features reduce scan times and engine costs, and are available for both S3 Tables",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250716094357/apple-touch-icon.png",
  "text": "AWS has recently announced that Amazon S3 now supports sort and z-order compaction for Apache Iceberg tables. The new features reduce scan times and engine costs, and are available for both S3 Tables and traditional S3 buckets using AWS Glue Data Catalog optimization. Sort compaction minimizes the number of data files scanned by query engines, while z-order compaction provides additional performance benefits through efficient file pruning when querying across multiple columns simultaneously. Sébastien Stormacq, principal developer advocate at AWS, explains: When working with high-ingest or frequently updated datasets, data lakes can accumulate many small files that impact the cost and performance of your queries. (...) Although the default binpack strategy with managed compaction provides notable performance improvements, introducing sort and z-order compaction options for both S3 and S3 Tables delivers even greater gains for queries filtering across one or more dimensions. Sort compaction organizes files based on a user-defined column order. When tables have a defined sort order, S3 Tables compaction will now use sort to cluster similar values together during the compaction process. In Apache Iceberg, compaction can be used to combine small files into larger files (bin packing), merge delete files with data files, sort the data in accordance with query patterns or cluster the data by using space-filling curves to optimize for distinct query patterns (z-order sorting). S3 Tables provide a managed experience with automatic hierarchical sorting during compaction, based on defined table metadata. For equal prioritization of multiple query predicates, z-order compaction can be enabled via the maintenance API. For Iceberg tables in general-purpose S3 buckets, the compaction method can be configured in the Glue Data Catalog console. Stormacq adds: In my experience, depending on my data layout and query patterns, I observed performance improvements of threefold or more when switching from binpack to sort or z-order. Ruben Simon, product manager at BMW, comments: At BMW’s largest big data analytics platform, using thousands of S3 buckets and Iceberg tables, we saw major query performance gains with Z-ordering. (...) Bloom filters next would make it even more powerful. In the article \"S3 Managed Tables, Unmanaged Costs: The 20x Surprise with AWS S3 Tables\", Vinish Reddy Pannala, software engineer at Onehouse.ai, and Kyle Weller, VP of Product at Onehouse.ai, question the lack of configurable options for compaction: Roughly 3 hours after the table was created, S3 Tables finally triggered compaction executing 10 replace operations and compacting approximately 100 GB of data over the course of 1 hour. (...) This exposes a deeper flaw in the S3Tables approach, where it does not recognize that ideal compaction configurations are specific to different types of readers and writers. Existing compacted files will remain unchanged, and only new data written after enabling sort or z-order will be affected, unless the customer explicitly rewrites data using standard Iceberg tools or by increasing the target file size in the table maintenance settings. Yonatan Dolan, principal analytics specialist at AWS, warns: Everyone talks about Sort, Z-order, and BinPack compaction when tuning query performance in Apache Iceberg - and yes, sorting helps (when done right), and Z-order can outperform bin-packing on the right queries. But in my benchmarks using TPC-H SF100 lineitem (~600M rows / 17GB compressed), I found something even more influential: The starting size of your files before compaction can massively impact cost. Source: Yonatan Dolan’s post The new compaction options are available in all regions where S3 Tables are supported and, for standard S3 buckets, where integration with Glue Data Catalog is available. There are no specific costs associated with the new features. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2025/07/amazon-s3-iceberg-compaction/en/card_header_image/generatedCard-1752174393036.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAWS has recently announced that \u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2025/06/amazon-s3-sort-z-order-compaction-apache-iceberg-tables/\"\u003eAmazon S3 now supports sort and z-order compaction for Apache Iceberg tables\u003c/a\u003e. The new features reduce scan times and engine costs, and are available for both S3 Tables and traditional S3 buckets using AWS Glue Data Catalog optimization.\u003c/p\u003e\n\n\u003cp\u003eSort compaction minimizes the number of data files scanned by query engines, while z-order compaction provides additional performance benefits through efficient file pruning when querying across multiple columns simultaneously. \u003ca href=\"https://www.linkedin.com/in/sebastienstormacq/\"\u003eSébastien Stormacq\u003c/a\u003e, principal developer advocate at AWS, \u003ca href=\"https://aws.amazon.com/blogs/aws/new-improve-apache-iceberg-query-performance-in-amazon-s3-with-sort-and-z-order-compaction/\"\u003eexplains\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen working with high-ingest or frequently updated datasets, data lakes can accumulate many small files that impact the cost and performance of your queries. (...) Although the default binpack strategy with managed compaction provides notable performance improvements, introducing sort and z-order compaction options for both S3 and S3 Tables delivers even greater gains for queries filtering across one or more dimensions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSort compaction organizes files based on a user-defined column order. When tables have a defined sort order, S3 Tables compaction will now use \u003ccode\u003esort\u003c/code\u003e to cluster similar values together during the compaction process.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ca href=\"https://iceberg.apache.org/\"\u003eApache Iceberg\u003c/a\u003e, compaction can be used to combine small files into larger files (bin packing), merge delete files with data files, sort the data in accordance with query patterns or cluster the data by using space-filling curves to optimize for distinct query patterns (z-order sorting).\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables.html\"\u003eS3 Tables\u003c/a\u003e provide a managed experience with automatic hierarchical sorting during compaction, based on defined table metadata. For equal prioritization of multiple query predicates, \u003ccode\u003ez-order\u003c/code\u003e compaction can be enabled via the maintenance API. For Iceberg tables in general-purpose S3 buckets, the compaction method can be configured in the \u003ca href=\"https://docs.aws.amazon.com/glue/latest/dg/start-data-catalog.html\"\u003eGlue Data Catalog\u003c/a\u003e console. Stormacq adds:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn my experience, depending on my data layout and query patterns, I observed performance improvements of threefold or more when switching from binpack to sort or z-order.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eRuben Simon, product manager at BMW, \u003ca href=\"https://www.linkedin.com/feed/update/urn:li:activity:7343682092662210560?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7343682092662210560%2C7343719576360161280%29\u0026amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287343719576360161280%2Curn%3Ali%3Aactivity%3A7343682092662210560%29\"\u003ecomments\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt BMW’s largest big data analytics platform, using thousands of S3 buckets and Iceberg tables, we saw major query performance gains with Z-ordering. (...) Bloom filters next would make it even more powerful.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the article \u003ca href=\"https://www.onehouse.ai/blog/s3-managed-tables-unmanaged-costs-the-20x-surprise-with-aws-s3-tables\"\u003e\u0026#34;S3 Managed Tables, Unmanaged Costs: The 20x Surprise with AWS S3 Tables\u0026#34;\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/vinish-reddy-pannala-868702108/\"\u003eVinish Reddy Pannala\u003c/a\u003e, software engineer at Onehouse.ai, and \u003ca href=\"https://www.linkedin.com/in/lakehouse?miniProfileUrn=urn%3Ali%3Afs_miniProfile%3AACoAAAVk0jkBO_TUpPm0MEoz6EbZfnuEbYKPtsQ\u0026amp;lipi=urn%3Ali%3Apage%3Ad_flagship3_search_srp_all%3Bt6X8F3kBTW2k5PHMBR8R1g%3D%3D\"\u003eKyle Weller\u003c/a\u003e, VP of Product at Onehouse.ai, question the lack of configurable options for compaction:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eRoughly 3 hours after the table was created, S3 Tables finally triggered compaction executing 10 replace operations and compacting approximately 100 GB of data over the course of 1 hour. (...) This exposes a deeper flaw in the S3Tables approach, where it does not recognize that ideal compaction configurations are specific to different types of readers and writers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eExisting compacted files will remain unchanged, and only new data written after enabling sort or z-order will be affected, unless the customer explicitly rewrites data using standard Iceberg tools or by increasing the target file size in the table maintenance settings. Yonatan Dolan, principal analytics specialist at AWS, \u003ca href=\"https://www.linkedin.com/posts/ydolan_everyone-talks-about-sort-z-order-and-binpack-activity-7346475210461622272-3Trl\"\u003ewarns\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEveryone talks about Sort, Z-order, and BinPack compaction when tuning query performance in Apache Iceberg - and yes, sorting helps (when done right), and Z-order can outperform bin-packing on the right queries. But in my benchmarks using TPC-H SF100 lineitem (~600M rows / 17GB compressed), I found something even more influential: The starting size of your files before compaction can massively impact cost.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cem\u003e\u003cimg alt=\"Sort, Z-order, and BinPack compaction\" data-src=\"news/2025/07/amazon-s3-iceberg-compaction/en/resources/11751536179102-1752174504044.jpeg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/07/amazon-s3-iceberg-compaction/en/resources/11751536179102-1752174504044.jpeg\" rel=\"share\"/\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: Yonatan Dolan’s post\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe new compaction options are available in all regions where S3 Tables are supported and, for standard S3 buckets, where integration with Glue Data Catalog is available. There are no specific costs associated with the new features.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-07-16T00:00:00Z",
  "modifiedTime": null
}
