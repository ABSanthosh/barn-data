{
  "id": "96188d98-4e1c-47bf-a2f6-fcac016d1b08",
  "title": "Shifting left without slowing down: Q\u0026A with Moti Gindi of Apiiro",
  "link": "https://stackoverflow.blog/2025/02/10/shifting-left-without-slowing-down-q-and-a-with-moti-gindi-of-apiiro/",
  "description": "Can an org automate security, change its culture to up their dev velocity, and stave off burnout?",
  "author": "Ryan Donovan",
  "published": "Mon, 10 Feb 2025 20:48:10 GMT",
  "source": "https://stackoverflow.blog/feed/",
  "categories": [
    "se-tech",
    "se-stackoverflow",
    "security",
    "automation",
    "development-velocity",
    "qa"
  ],
  "byline": "Ryan Donovan",
  "length": 7828,
  "excerpt": "Fast, cheap, good: pick two. That was always the mantra in any design or process. But for software security, does this tradeoff have to exist? I spoke with Moti Gindi, Chief Product Officer at Apiiro about why compromising development velocity for security (or paying out the nose for both) isn’t always the rule for software development organizations.",
  "siteName": "",
  "favicon": "https://stackoverflow.blog/apple-touch-icon.png",
  "text": "Fast, cheap, good: pick two. That was always the mantra in any design or process. But for software security, does this tradeoff have to exist? I spoke with Moti Gindi, Chief Product Officer at Apiiro about why compromising development velocity for security (or paying out the nose for both) isn’t always the rule for software development organizations.Ryan Donovan: What is the traditional tradeoff between development velocity and strong security?Moti Gindi: For years, the traditional mindset assumed a tradeoff: accelerating development velocity meant compromising on security. Manual processes like threat modeling, security reviews, and compliance questionnaires often slowed innovation and deployment, creating this perceived tradeoff. However modern strategies—such as security-by-design, embedding security natively into the developer toolchain, and automation—enable organizations to integrate security into development workflows, proving that productivity and security can advance together without compromise.RD: There have been a lot of engineering org movements to focus on and systematize security engineering in the “shift left” movement, DevSecOps, and platform engineering. Do these make this tradeoff easier to balance?MG: Yes, these organizational investments aim to promote methodologies to embed security into the early stages of development, making it proactive and less disruptive. By automating processes with modern technologies and empowering developers with security ownership, risks are identified and mitigated earlier. This reduces the cost and time associated with vulnerabilities downstream while maintaining development velocity.RD: Does automation make this tradeoff moot or is there still a tradeoff to consider?MG: On the one hand, automation enabled by GenAI tools in software development is driving unprecedented developer productivity, further emphasizing the gap created by manual application security controls, like security reviews or threat modeling.But in parallel, recent advancements in code understanding enabled by these technologies, together with programmatic policy-as-code security policies, enable a giant leap in the value security automation can bring. Automating manual processes significantly reduces the friction with development velocity by streamlining processes, minimizing human error, and enabling early prevention and near real-time risk mitigation.However, it does not entirely eliminate the tradeoff. Initial setup, maintenance, and adapting automation tools to evolving requirements require investment and effort. Additionally, over-reliance on automation without human oversight can miss nuanced or contextual security issues, making a balance of automation and expertise critical.RD: Automation makes processes faster, easier to perform, and more reliable. However, it takes time to build/test initially and can make it harder (or at least perceived to be harder) to move to something different in the future. What factors do you consider on whether or not something should be automated?MG: Key considerations include security task frequency, complexity, risk of human error, and the efficiency gains from automation. High-frequency, repetitive, complex tasks critical to security—like security reviews, threat modeling, and risk analysis—are ideal candidates for automation, as they improve reliability, consistency, accuracy, and scalability.RD: Can automation mitigate supply chain risks via dependencies and vendors?MG: Automation is an essential element for mitigating supply chain risks, particularly when paired with innovative approaches like the eXtended Software Bill of Materials (XBOM), which enhances visibility by providing a graph-based inventory of application components, their interrelationships, and associated risks throughout the entire development lifecycle.By leveraging automation tools such as XBOM analyzers, organizations can achieve real-time monitoring and deeper contextual insights into risks associated with third-party dependencies, secrets, sensitive data, and infrastructure configurations. This continuous assessment ensures not only faster remediation but also a more holistic understanding of application and supply chain risks.RD: What cultural changes do engineering organizations need to make?MG: Organizations must cultivate a culture that values security as a shared responsibility across all teams. This involves empowering developers with tools and training, encouraging collaboration between security and development teams, and promoting transparency. A security-conscious culture should prioritize enabling teams rather than enforcing rigid controls.RD: What’s the first step?MG: The first step is recognizing security as a shared responsibility across the organization, not just a specialized function. Equipping teams with automated tools and clear processes helps integrate security into everyday workflows. Establishing measurable goals and metrics to track progress can also provide direction and accountability. Building cross-functional collaboration between security and development teams sets the foundation for long-term success.RD: Whenever I see “development velocity” and “cultural changes” together, I tend to wonder at the risk of burnout by adding so many responsibilities to software developers. How can we alleviate that?MG: Indeed. Especially when security is not a trivial domain and requires context and expertise to be implemented efficiently. The key is automation.Automation of security controls minimizes manual effort, allowing developers to focus on generating functional code that is secure from the beginning, and stays secure as the application evolves: start-secure and stay-secure. It saves the unexpected crisis derived from high-urgency security incidents discovered in production or the frustration of code being blocked from deployment due to downstream security measures out of the control of the developer. It enables developers to focus on building and creating, to feel empowered rather than overwhelmed.RD: What are the pitfalls and how have you seen organizations fail to achieve this balance?MG: A common pitfall is treating security as an afterthought, leading to disruptions that strain teams and delay releases. Conversely, overburdening developers with security responsibilities without proper support can lead to frustration and neglect of critical tasks. Failure to adopt automation or align security goals with development objectives often results in inefficiency and poor outcomes. Organizations that succeed focus on clear communication, balanced priorities, and leveraging tools that enhance both productivity and security.RD: Management and non-engineering folks can sometimes struggle to fully grasp the benefits of improving systems unless there’s an incident. How can teams get buy-in from the higher-ups to prioritize behind-the-scenes upgrades, the kind of stuff that ends up on tech debt wishlists?MG: The first step is aligning these initiatives with business goals to ensure leadership understands their strategic value.But in addition, and many organizations miss that, there is concrete dollar value achieved by automation, secure by design, and embedding security early into the development toolchain. It is the direct outcome of the advancements enabled by these approaches in terms of risk mitigation, cost savings, and developer efficiency. These are measured by clear KPIs, reduced MTTR (mean time to repair), Windows-of-Exposure, production security patches, security-originated production blocks, deployment rates, manual work hours reduction, etc. All of these can be directly translated to a concrete “business case” quantifying the benefits of investments in security automation. An example of such direct dollar savings can be found here.",
  "image": "https://cdn.stackoverflow.co/images/jo7n4k8s/production/bdb55c2f015d7059954169682c466f898a6853ce-12000x6300.jpg?w=1200\u0026fm=png\u0026auto=format",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\u003cp\u003e\u003cem\u003eFast, cheap, good: pick two. That was always the mantra in any design or process. But for software security, does this tradeoff have to exist? I spoke with \u003c/em\u003e\u003ca href=\"https://www.linkedin.com/in/moti-gindi-7667b\"\u003e\u003cem\u003eMoti Gindi\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, Chief Product Officer at \u003c/em\u003e\u003ca href=\"https://apiiro.com/\"\u003e\u003cem\u003eApiiro\u003c/em\u003e\u003c/a\u003e\u003cem\u003e about why compromising development velocity for security (or paying out the nose for both) isn’t always the rule for software development organizations.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRyan Donovan: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eWhat is the traditional tradeoff between development velocity and strong security?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMoti Gindi\u003c/strong\u003e: For years, the traditional mindset assumed a tradeoff: accelerating development velocity meant compromising on security. Manual processes like threat modeling, security reviews, and compliance questionnaires often slowed innovation and deployment, creating this perceived tradeoff. However modern strategies—such as security-by-design, embedding security natively into the developer toolchain, and automation—enable organizations to integrate security into development workflows, proving that productivity and security can advance together without compromise.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRD: \u003c/strong\u003e\u003cem\u003eThere have been a lot of engineering org movements to focus on and systematize security engineering in the “shift left” movement, DevSecOps, and platform engineering. Do these make this tradeoff easier to balance?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eYes, these organizational investments aim to promote methodologies to embed security into the early stages of development, making it proactive and less disruptive. By automating processes with modern technologies and empowering developers with security ownership, risks are identified and mitigated earlier. This reduces the cost and time associated with vulnerabilities downstream while maintaining development velocity.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRD: \u003c/strong\u003e\u003cem\u003eDoes automation make this tradeoff moot or is there still a tradeoff to consider?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eOn the one hand, automation enabled by GenAI tools in software development is driving unprecedented developer productivity, further emphasizing the gap created by manual application security controls, like security reviews or threat modeling.\u003c/p\u003e\u003cp\u003eBut in parallel, recent advancements in code understanding enabled by these technologies, together with programmatic policy-as-code security policies, enable a giant leap in the value security automation can bring. Automating manual processes significantly reduces the friction with development velocity by streamlining processes, minimizing human error, and enabling early prevention and near real-time risk mitigation.\u003c/p\u003e\u003cp\u003eHowever, it does not entirely eliminate the tradeoff. Initial setup, maintenance, and adapting automation tools to evolving requirements require investment and effort. Additionally, over-reliance on automation without human oversight can miss nuanced or contextual security issues, making a balance of automation and expertise critical.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eAutomation makes processes faster, easier to perform, and more reliable. However, it takes time to build/test initially and can make it harder (or at least perceived to be harder) to move to something different in the future. What factors do you consider on whether or not something should be automated?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eKey considerations include security task frequency, complexity, risk of human error, and the efficiency gains from automation. High-frequency, repetitive, complex tasks critical to security—like security reviews, threat modeling, and risk analysis—are ideal candidates for automation, as they improve reliability, consistency, accuracy, and scalability.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eCan automation mitigate supply chain risks via dependencies and vendors?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eAutomation is an essential element for mitigating supply chain risks, particularly when paired with innovative approaches like the eXtended Software Bill of Materials (XBOM), which enhances visibility by providing a graph-based inventory of application components, their interrelationships, and associated risks throughout the entire development lifecycle.\u003c/p\u003e\u003cp\u003eBy leveraging automation tools such as XBOM analyzers, organizations can achieve real-time monitoring and deeper contextual insights into risks associated with third-party dependencies, secrets, sensitive data, and infrastructure configurations. This continuous assessment ensures not only faster remediation but also a more holistic understanding of application and supply chain risks.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eWhat cultural changes do engineering organizations need to make?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eOrganizations must cultivate a culture that values security as a shared responsibility across all teams. This involves empowering developers with tools and training, encouraging collaboration between security and development teams, and promoting transparency. A security-conscious culture should prioritize enabling teams rather than enforcing rigid controls.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eWhat’s the first step?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eThe first step is recognizing security as a shared responsibility across the organization, not just a specialized function. Equipping teams with automated tools and clear processes helps integrate security into everyday workflows. Establishing measurable goals and metrics to track progress can also provide direction and accountability. Building cross-functional collaboration between security and development teams sets the foundation for long-term success.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eWhenever I see “development velocity” and “cultural changes” together, I tend to wonder at the risk of burnout by adding so many responsibilities to software developers. How can we alleviate that?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eIndeed. Especially when security is not a trivial domain and requires context and expertise to be implemented efficiently. The key is automation.\u003c/p\u003e\u003cp\u003eAutomation of security controls minimizes manual effort, allowing developers to focus on generating functional code that is secure from the beginning, and stays secure as the application evolves: start-secure and stay-secure. It saves the unexpected crisis derived from high-urgency security incidents discovered in production or the frustration of code being blocked from deployment due to downstream security measures out of the control of the developer. It enables developers to focus on building and creating, to feel empowered rather than overwhelmed.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eWhat are the pitfalls and how have you seen organizations fail to achieve this balance?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eA common pitfall is treating security as an afterthought, leading to disruptions that strain teams and delay releases. Conversely, overburdening developers with security responsibilities without proper support can lead to frustration and neglect of critical tasks. Failure to adopt automation or align security goals with development objectives often results in inefficiency and poor outcomes. Organizations that succeed focus on clear communication, balanced priorities, and leveraging tools that enhance both productivity and security.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003cem\u003eRD: \u003c/em\u003e\u003c/strong\u003e\u003cem\u003eManagement and non-engineering folks can sometimes struggle to fully grasp the benefits of improving systems unless there’s an incident. How can teams get buy-in from the higher-ups to prioritize behind-the-scenes upgrades, the kind of stuff that ends up on tech debt wishlists?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMG: \u003c/strong\u003eThe first step is aligning these initiatives with business goals to ensure leadership understands their strategic value.\u003c/p\u003e\u003cp\u003eBut in addition, and many organizations miss that, there is concrete dollar value achieved by automation, secure by design, and embedding security early into the development toolchain. It is the direct outcome of the advancements enabled by these approaches in terms of risk mitigation, cost savings, and developer efficiency. These are measured by clear KPIs, reduced MTTR (\u003cem\u003emean time to repair)\u003c/em\u003e, Windows-of-Exposure, production security patches, security-originated production blocks, deployment rates, manual work hours reduction, etc. All of these can be directly translated to a concrete “business case” quantifying the benefits of investments in security automation. An example of such direct dollar savings can be found \u003ca href=\"https://apiiro.com/blog/fortune-100-insurance-provider-projected-to-save-3mm-in-security-savings-with-appsec-automation-and-the-2nd-largest-aspm-deal-in-history/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
