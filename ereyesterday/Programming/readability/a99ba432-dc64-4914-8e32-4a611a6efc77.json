{
  "id": "a99ba432-dc64-4914-8e32-4a611a6efc77",
  "title": "Code review in the age of AI: Why developers will always own the merge button",
  "link": "https://github.blog/ai-and-ml/generative-ai/code-review-in-the-age-of-ai-why-developers-will-always-own-the-merge-button/",
  "description": "When it comes to merging code, developers will always make the final decision. But we’re rethinking how tools like GitHub Copilot can help. The post Code review in the age of AI: Why developers will always own the merge button appeared first on The GitHub Blog.",
  "author": "Elle Shwer",
  "published": "Mon, 14 Jul 2025 16:38:03 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "Generative AI",
    "agentic workflows",
    "AI agents",
    "code review",
    "GitHub Copilot"
  ],
  "byline": "Elle Shwer",
  "length": 8443,
  "excerpt": "When it comes to merging code, developers will always make the final decision. But we’re rethinking how tools like GitHub Copilot can help.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "When GitHub first shipped the pull request (PR) back in 2008, it wrapped a plain-text diff in a social workflow: comments, approvals, and a merge button that crucially refused to light up without at least one thumbs up from another developer. That design decision hard-wired accountability into modern software and let maintainers scale far beyond hallway conversations or e-mail patches. Seventeen years later, just about every “agentic” coding tool, from research demos to enterprise platforms, still funnels its work through that same merge gate. The PR remains the audit log, the governance layer, and the social contract that says nothing ships until a person is willing to own it. Now that large language models (LLM) can scaffold projects, file PRs, and even reply to review comments they wrote themselves, the obvious next question is, who is accountable for code that ships when part of it comes from a model?  At GitHub, we think the answer hasn’t fundamentally changed: it’s the developer who hits “Merge.” But what has changed is everything that happens before that click.  In this article, we’ll explore how we’re re-thinking code reviews for a world where developers increasingly work with AI (and how your team can, too).  What we learned from GitHub Copilot’s code review capabilities Earlier this year, the GitHub Copilot code review team conducted in-depth interviews with developers about their code review process. They also walked us through their code review workflow. These interviews revealed three consistent patterns: No special treatment for AI: Reviewers grilled model-generated diffs as hard as those from other developers. Self reviews raised the floor: Developers who ran a Copilot review before opening a PR often wiped out an entire class of trivial nit-picks (i.e., trimmed imports, missing tests), cutting out back-and-forth by roughly a third. AI was no replacement for human judgement: Programming often involves trade-offs. LLMs can inform you about those trade-offs, but someone has to make the call about what path to take based on your organization’s goals and standards.   An overarching principle quickly became clear: AI augments developer judgment; it can’t replace it. And our findings, from confidence scores to red-flag explanations, are informing how we’re building Copilot’s code review features. What AI can (and can’t) handle today LLMs are already great at the “grind” layer of a review: Mechanical scanning. “Is there a typo?” “Are all arguments used?” Pattern matching. “This looks like SQL injection” or “You forgot to await that promise.” Pedantic consistency. “Variable names snake_case here, camelCase there.” Soon they’ll be able to do even more, such as understand product and domain context.  But they still fall short on: Architecture and trade-offs. Should we split this service? Cache locally? Mentorship. Explaining why a pattern matters and when to break it. Values. Should we build this feature at all? Those gaps keep developers in the loop and in the pilot’s seat. That principle is foundational for us as we continue to develop GitHub Copilot.  A playbook for modern code reviews The most effective approach to AI-assisted code reviews starts before you even submit your pull request. Think of it as the golden rule of development: Treat code reviewers the way you’d like them to treat you. Use AI to self review your code in your IDE Before pushing your code, run GitHub Copilot code review in your IDE to catch the obvious stuff so your teammates can focus on the nuanced issues that require developer insight. Copilot code review can comb your staged diff, suggest docstrings, and flag null dereferences. From there, you can fix everything it finds before you submit your PR so teammates never see the noise. Take ownership of your code Just because you used AI to generate code doesn’t mean it’s not your code. Once you commit code, you’re responsible for it. That means understanding what it does, ensuring it follows your team’s standards, and making sure it integrates well with the rest of your codebase. If an AI agent writes code, it’s on me to clean it up before my name shows up in git blame. Jon Wiggins, Machine Learning Engineer at Respondology Run your code through automated CI gates Your pipeline should already be running unit tests, secret scanning, CodeQL, dependency checks, style linters. Keep doing that. Fail fast, fail loudly. Practical tips for personal code hygiene: Review your own code in your IDE. Ensure variable names, comments, and structure to match your team’s conventions. Test AI-generated code thoroughly before including it in pull requests. Use AI to focus on the areas where your judgement is critical The real power of AI in code reviews isn’t in replacing developers as the reviewers. It’s in handling the routine work that can bog down the review process, freeing developers to focus where their judgment is most valuable. AI doesn’t replace your existing automated checks.  Make sure tests pass, coverage metrics are met, and static analysis tools have done their work before developer reviews begin. This creates a solid foundation for more meaningful discussion.  You can use an LLM to catch not just syntax issues, but also patterns, potential bugs, and style inconsistencies. Ironically, LLMs are particularly good at catching the sorts of mistakes that LLMs make, which is increasingly relevant as more AI-generated code enters our codebases. Clearly define roles Set clear expectations about when AI feedback should be considered versus when human judgment takes precedence. For example, you should rely on other developers for code architecture and consistency with business goals and organizational values. It’s especially useful to use AI to review long repetitive PRs where it can be easy to miss little things. Implementation tips for building a sustainable AI-assisted review process Document clear guidelines that specify when to use AI in code reviews, what types of feedback to trust, and how to escalate when developers disagree with an AI code review. With GitHub Copilot, for instance, you can use custom instructions to set clear rules for how Copilot engages with your code.  Update guidelines regularly based on team feedback and evolving AI capabilities. Remember that as your codebase and AI tools evolve, what works today might not work tomorrow. Encourage open team discussions about the strengths and limitations of AI-assisted reviews. Share both positive and negative experiences to help everyone learn and improve their approach. Refine automation continuously by using feedback from reviewers to improve your automated testing strategy. Identify patterns where solutions to recurring issues could be automated. Developer judgement remains crucial While AI can handle much of the routine work in code reviews, developer judgment remains irreplaceable for architectural decisions, mentoring and knowledge transfer, and context-specific decisions that require understanding of your product and users.  And even as LLMs get smarter, three review tasks remain stubbornly human: Architecture trade-offs: Should we split this service? Cache locally? Pay tech debt now or later? Mentorship and culture: PR threads are team classrooms. A bot can’t tell a junior engineer the war story behind that odd regex. Ethics and product values: “Should we even build this?” is a question AI can’t answer. The goal is to make developers more effective by letting them focus on what they do best. Written by Senior Product Manager, GitHub Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2025 Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco. Register now",
  "image": "https://github.blog/wp-content/uploads/2025/05/github-generic-wallpaper-rubber-duck-invertocat.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWhen GitHub first shipped the pull request (PR) back in 2008, it wrapped a plain-text diff in a social workflow: comments, approvals, and a merge button that crucially refused to light up without at least one thumbs up from another developer. That design decision hard-wired accountability into modern software and let maintainers scale far beyond hallway conversations or e-mail patches.\u003c/p\u003e\n\n\n\n\u003cp\u003eSeventeen years later, just about every “agentic” coding tool, from research demos to enterprise platforms, still funnels its work through that same merge gate. The PR remains the audit log, the governance layer, and the social contract that says nothing ships until a person is willing to own it.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that large language models (LLM) can scaffold projects, file PRs, and even reply to review comments they wrote themselves, the obvious next question is, who is accountable for code that ships when part of it comes from a model? \u003c/p\u003e\n\n\n\n\u003cp\u003eAt GitHub, we think the answer hasn’t fundamentally changed: it’s the developer who hits “Merge.” But what has changed is everything that happens before that click. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn this article, we’ll explore how we’re re-thinking code reviews for a world where developers increasingly work with AI (and how your team can, too). \u003c/p\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"what-we-learned-from-github-copilots-code-review-capabilities\"\u003eWhat we learned from GitHub Copilot’s code review capabilities\u003c/h2\u003e\n\n\n\n\u003cp\u003eEarlier this year, the GitHub Copilot code review team conducted in-depth interviews with developers about their code review process. They also walked us through their code review workflow. These interviews revealed three consistent patterns:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eNo special treatment for AI:\u003c/strong\u003e Reviewers grilled model-generated diffs as hard as those from other developers.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSelf reviews raised the floor:\u003c/strong\u003e Developers who \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-code-review/using-copilot-code-review?tool=vscode#requesting-a-review-from-copilot\"\u003eran a Copilot review before opening a PR\u003c/a\u003e often wiped out an entire class of trivial nit-picks (i.e., trimmed imports, missing tests), cutting out back-and-forth by roughly a third.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAI was no replacement for human judgement: \u003c/strong\u003eProgramming often involves trade-offs. LLMs can inform you about those trade-offs, but someone has to make the call about what path to take based on your organization’s goals and standards.  \u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAn overarching principle quickly became clear: \u003cstrong\u003eAI augments developer judgment; it can’t replace it. \u003c/strong\u003eAnd our findings, from confidence scores to red-flag explanations, are informing how we’re building Copilot’s code review features.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003ch3 id=\"what-ai-can-and-cant-handle-today\"\u003eWhat AI can (and can’t) handle today\u003c/h3\u003e\n\n\n\n\u003cp\u003eLLMs are already great at the “grind” layer of a review:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMechanical scanning.\u003c/strong\u003e “Is there a typo?” “Are all arguments used?”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ePattern matching.\u003c/strong\u003e “This looks like SQL injection” or “You forgot to await that promise.”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ePedantic consistency.\u003c/strong\u003e “Variable names snake_case here, camelCase there.”\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSoon they’ll be able to do even more, such as understand product and domain context.  But they still fall short on:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eArchitecture and trade-offs.\u003c/strong\u003e Should we split this service? Cache locally?\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMentorship.\u003c/strong\u003e Explaining \u003cem\u003ewhy\u003c/em\u003e a pattern matters and when to break it.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eValues.\u003c/strong\u003e Should we build this feature at all?\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThose gaps keep developers in the loop and in the pilot’s seat. That principle is foundational for us as we continue to develop GitHub Copilot. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"a-playbook-for-modern-code-reviews\"\u003eA playbook for modern code reviews\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe most effective approach to AI-assisted code reviews starts before you even submit your pull request. Think of it as the golden rule of development: Treat code reviewers the way you’d like them to treat you.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"use-ai-to-self-review-your-code-in-your-ide\"\u003eUse AI to self review your code in your IDE\u003c/h3\u003e\n\n\n\n\u003cp\u003eBefore pushing your code, \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-code-review/using-copilot-code-review?tool=vscode#requesting-a-review-from-copilot\"\u003erun GitHub Copilot code review in your IDE\u003c/a\u003e to catch the obvious stuff so your teammates can focus on the nuanced issues that require developer insight. Copilot code review can comb your staged diff, suggest docstrings, and flag null dereferences. From there, you can fix everything it finds before you submit your PR so teammates never see the noise.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"take-ownership-of-your-code\"\u003eTake ownership of your code\u003c/h3\u003e\n\n\n\n\u003cp\u003eJust because you used AI to generate code doesn’t mean it’s not your code. Once you commit code, you’re responsible for it. That means understanding what it does, ensuring it follows your team’s standards, and making sure it integrates well with the rest of your codebase.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eIf an AI agent writes code, it’s on me to clean it up before my name shows up in git blame.\u003c/p\u003e\n\u003ccite\u003eJon Wiggins, Machine Learning Engineer at Respondology\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003ch3 id=\"run-your-code-through-automated-ci-gates\"\u003eRun your code through automated CI gates\u003c/h3\u003e\n\n\n\n\u003cp\u003eYour pipeline should already be running unit tests, secret scanning, CodeQL, dependency checks, style linters. Keep doing that. Fail fast, fail loudly.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"practical-tips-for-personal-code-hygiene\"\u003ePractical tips for personal code hygiene:\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eReview your own code in your IDE.\u003c/li\u003e\n\n\n\n\u003cli\u003eEnsure variable names, comments, and structure to match your team’s conventions.\u003c/li\u003e\n\n\n\n\u003cli\u003eTest AI-generated code thoroughly before including it in pull requests.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"use-ai-to-focus-on-the-areas-where-your-judgement-is-critical\"\u003eUse AI to focus on the areas where your judgement is critical\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe real power of AI in code reviews isn’t in replacing developers as the reviewers. It’s in handling the routine work that can bog down the review process, freeing developers to focus where their judgment is most valuable.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"ai-doesnt-replace-your-existing-automated-checks\"\u003eAI doesn’t replace your existing automated checks. \u003c/h3\u003e\n\n\n\n\u003cp\u003eMake sure tests pass, coverage metrics are met, and static analysis tools have done their work before developer reviews begin. This creates a solid foundation for more meaningful discussion. \u003c/p\u003e\n\n\n\n\u003cp\u003eYou can use an LLM to catch not just syntax issues, but also patterns, potential bugs, and style inconsistencies. Ironically, LLMs are particularly good at catching the sorts of mistakes that LLMs make, which is increasingly relevant as more AI-generated code enters our codebases.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"clearly-define-roles\"\u003eClearly define roles\u003c/h3\u003e\n\n\n\n\u003cp\u003eSet clear expectations about when AI feedback should be considered versus when human judgment takes precedence. For example, you should rely on other developers for code architecture and consistency with business goals and organizational values. It’s especially useful to use AI to review long repetitive PRs where it can be easy to miss little things.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"implementation-tips-for-building-a-sustainable-ai-assisted-review-process\"\u003eImplementation tips for building a sustainable AI-assisted review process\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDocument clear guidelines\u003c/strong\u003e that specify when to use AI in code reviews, what types of feedback to trust, and how to escalate when developers disagree with an AI code review. With GitHub Copilot, for instance, \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-code-review/using-copilot-code-review?tool=webui#customizing-copilots-reviews-with-custom-instructions\"\u003eyou can use custom instructions to set clear rules for how Copilot engages with your code\u003c/a\u003e. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eUpdate guidelines regularly\u003c/strong\u003e based on team feedback and evolving AI capabilities. Remember that as your codebase and AI tools evolve, what works today might not work tomorrow.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEncourage open team discussions\u003c/strong\u003e about the strengths and limitations of AI-assisted reviews. Share both positive and negative experiences to help everyone learn and improve their approach.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eRefine automation continuously\u003c/strong\u003e by using feedback from reviewers to improve your automated testing strategy. Identify patterns where solutions to recurring issues could be automated.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"developer-judgement-remains-crucial\"\u003eDeveloper judgement remains crucial\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile AI can handle much of the routine work in code reviews, developer judgment remains irreplaceable for architectural decisions, mentoring and knowledge transfer, and context-specific decisions that require understanding of your product and users. \u003c/p\u003e\n\n\n\n\u003cp\u003eAnd even as LLMs get smarter, three review tasks remain stubbornly human:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eArchitecture trade-offs\u003c/strong\u003e: Should we split this service? Cache locally? Pay tech debt now or later?\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMentorship and culture\u003c/strong\u003e: PR threads are team classrooms. A bot can’t tell a junior engineer the war story behind that odd regex.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEthics and product values\u003c/strong\u003e: “Should we even build this?” is a question AI can’t answer.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe goal is to make developers more effective by letting them focus on what they do best.\u003c/p\u003e\n\n\n\n\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/16601204?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/16601204?v=4\u0026amp;s=200\" alt=\"Elle Shwer\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eSenior Product Manager, GitHub\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2025\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2025\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eLast chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Register now; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=module\" target=\"_blank\" aria-label=\"Register now\"\u003e\n\t\t\t\t\tRegister now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-07-14T16:38:03Z",
  "modifiedTime": "2025-07-14T16:38:05Z"
}
