{
  "id": "8fe631a0-3681-41a7-a1ba-4d630dc1a028",
  "title": "Advanced Code Analysis in IntelliJ IDEA",
  "link": "https://blog.jetbrains.com/idea/2024/11/advanced-code-analysis-in-intellij-idea/",
  "description": "This series of blog posts covers several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous posts, we first looked at how the IDE can help you prevent problems while working with code in the editor before moving on to how to resolve problems […]",
  "author": "Marit van Dijk",
  "published": "Thu, 28 Nov 2024 13:40:19 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "idea",
    "java",
    "kotlin",
    "tutorials",
    "code-analysis",
    "intellij-idea"
  ],
  "byline": "Marit van Dijk",
  "length": 12462,
  "excerpt": "This series of blog posts covers several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous posts, we first looked at how the IDE can help you pr",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the Leading Java and Kotlin IDE, by JetBrains IntelliJ IDEA Java Kotlin TutorialsAdvanced Code Analysis in IntelliJ IDEA This series of blog posts covers several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous posts, we first looked at how the IDE can help you prevent problems while working with code in the editor before moving on to how to resolve problems throughout your entire project using predefined inspections. Part 1: Introduction to Code Analysis in IntelliJ IDEA Part 2: Code Analysis for Your Projects With IntelliJ IDEA and Qodana While the predefined inspections in IntelliJ IDEA and Qodana are very useful, occasionally you might need something different. In this blog post, we will look at how to find specific patterns in your code using IntelliJ IDEA’s various search functions, such as structural search and replace (SSR), as well as how to create custom inspections using either SSR or RegExp. Find and replace strings If you are looking for a specific string in your code, you can use Find in Files (⌘⇧F on macOS / Ctrl+Shift+F on Windows/Linux). For example, if you are searching for where an error is thrown, or a log line is written. You can use this option to find text strings. To replace text, use Find and Replace (⌘⇧R on macOS / Ctrl+Shift+R on Windows/Linux). Find in Files You can narrow your search by selecting options such as Words or Match case to find the exact word in a project or match the letter case. Alternatively, you can use the File mask option to narrow your search to a specific file type, for example, Java classes or markdown files.  Structural search and replace To search for more complicated code patterns, you can use structural search and replace.  Start by opening the Structural Search feature via Edit | Find | Search Structurally… or by entering it into Search Everywhere (⇧⇧ on macOS / Shift+Shift on Windows/Linux) and finding it there. You can either reuse existing templates or create your own. Below, we will illustrate how each of these methods works. Reuse existing templates When you open Structural Search, you’ll see that there are numerous search templates available, and these are grouped by language or type. Structural Search You can reuse existing templates and use modifiers to look for what you need. For example, let’s look for methods or constructors that use more than five parameters, as this could be considered a code smell. The quickest way to do so is to reuse an existing template. As you may know, menus in IntelliJ IDEA are searchable. Select the menu on the left, press Find (⌘F on macOS / Ctrl+F on Windows/Linux), and search for the template you want. In this case, if you enter the words “constructor” and “method”, you’ll find the existing Constructors \u0026 methods template. Select this template and change the minimum count value of the method parameters to 5. Then, run the search by clicking Find. Structural Search Create your own template Alternatively, you can create your own template. For example, let’s consider the following code:  String value = opt.orElse(null); if (value == null) {    throw new IllegalArgumentException(\"Missing value\"); } In this example, the null check can be integrated into Optional using orElseThrow(), as follows: String value = opt.orElseThrow(() -\u003e new IllegalArgumentException(\"Missing value\")); Rather than finding each occurrence of this pattern in our code base and changing them manually, you can create a custom inspection to do this for you.  Select an occurrence of the code pattern you want to change and open the Structural Search window via Search Structurally.  When you open Structural Search with your chosen code selected, the snippet will be prefilled in the Search Template field inside the Draft Template. Structural Search – Draft Template Since you want to replace this code pattern, you can click the Switch to Replace button in the top right-hand corner. Alternatively, you can go to Edit | Find | Replace Structurally… or use Find Action (⌘⇧A on macOS / Control+Shift+A on Windows/Linux) to open it directly. Then, add the desired pattern to the Replace template field in the Structural Replace popup. Structural Replace – Draft Template Now, you can define placeholders in the templates and add modifiers where needed. Make sure to match the placeholders from the Search template to the corresponding variables in the Replace template. In both templates, replace the value and opt variables with the placeholders $result$ and $Optional$, respectively. With the caret on $Optional$, click Add modifier in the right-hand pane, select Type, and set the Type to Optional.  Add Modifier The resulting template will look like this: Structural Replace When you have an example in our code for the template you are creating, you can make sure your template matches the code. IntelliJ IDEA will tell you right away if there are no matches to the specified template in your project. No Matches Click the Find button to find all matches to the specified search pattern in your code. Find Results In the Find results, you can choose to Replace All or Replace Selected to replace code according to the template you defined. Use Preview Replacement to see what the replacement will look like. Alternatively, you can create an inspection from our template, either by using the Draft Template or by clicking Create Inspection from Template… in the Find results.  Create Inspection From Template In the popup, you can fill in the metadata desired for your inspection, including an Inspection name, a Description, a Problem tooltip, and a Suppress ID.  Once you click OK, you’ll see that the code matching the newly created inspection is highlighted in the editor. Now, when you click Alt+Enter on the highlighted code, IntelliJ IDEA will suggest replacing the code according to your template. Replace Code If you wish to edit your custom inspection further, you can find it in Settings under Editor | Inspections. Custom inspections As described above, you can create a custom inspection from a search and replace template.  If you already know that you want to create a custom inspection, you can go ahead and do this right away. To create a custom inspection, go to Settings | Editor | Inspections, click Add Custom Inspection (⌘N on macOS) / Alt+Ins on Windows/Linux), and select the type of inspection you want to create. You can use search and replace templates or RegExp to do this. Add Custom Inspection Custom inspections using Structural Search To create an inspection using Structural Search, select Add Structural Search Inspection. To include a quick-fix in the inspection, select Add Structural Replace Inspection. Add Structural Search Inspection For example, you can create an inspection for the example above where you’re looking for methods or constructors that use more than five parameters. Just as in the previous example, you can use the existing Constructors \u0026 methods template and modify the minimum count value of the method parameters to 5. You can change the inspection name and add a tooltip that will show in the editor. Create Inspection You can also edit the Severity and Highlighting in editor fields. Severity You can edit or remove your custom inspection via Settings at any time. Custom inspections using regular expressions Alternatively, you can create inspections using regular expressions to search for and replace specific patterns of text. To create an inspection, open Settings and go to Editor | Inspections. Under User defined, select Regexp and click the + button on the right-hand side of the screen. Then, select Add RegExp Search Inspection…. Add Custom Inspection – RegExp You can now create your inspection by typing the regular expression. As this example uses Kotlin, select Language = Kotlin from the dropdown menu in the top right of the window. In this example, let’s look for println() methods, as you probably don’t want your debugging statements to end up in production. Since you are using regex, you’ll need to escape the brackets. Search for println\\(\".*?\"\\) to find any println() method with an argument. Create Custom Inspection – Regex Click OK to go to the User Defined Inspection in ‘Default’ popup and fill in the details for the inspection. For example, you can enter “println” in the Inspection name field, “Spot all println in the code” under Description, and “Spotted: #ref” in the Problem tooltip, where #ref will refer to the code in which println has been found. Finally, enter “PRINTLN” under Suppress ID and click OK. User Defined Inspection Custom Inspection – Regex You will now see the created custom inspection under User defined | RegExp with an exclamation mark, as the current Severity value is Warning. You can change the severity level as well as how this inspection will be highlighted in the editor in the panel on the right-hand side of the screen. Now, any code that meets this inspection will be highlighted in the editor. You might also want to add a quick-fix to the inspection. To do so, you’ll need to edit the inspection you just defined.  In Settings, go to Editor | Inspections, select the RegExp pattern in the bottom right-hand corner of the Settings screen, and click the Edit button. Edit RegExp Inspection In the RegExp popup that opens, click the Enable Replace button. Enable Replace In the Replacement field, you can enter any code you like. For example, you might decide to add // to comment out the code. In order to refer to the code you want to replace, you’ll need to capture the entire piece of code that you want to use in the Replacement field. You can do so by wrapping the code with brackets as follows: (println\\(\".*?\"\\)). This will now be your first regex group, and you can refer to it in the Replacement field as $1. Replace RegExp Now, when you press Alt+Enter on the highlighted code, you’ll be given the option to replace the code according to your RegExp template. Replace If you don’t want to replace the code according to the quick-fix, you can also suppress this inspection. Click the kebab menu (three dots) to the right-hand side of the inspection (or press the right arrow key), and select one of the Suppress options from the menu to suppress this inspection for the current file, method, or statement.  Suppress Selecting this option will add a @Suppress statement to the file. Suppress Statement Conclusion While IntelliJ IDEA comes with a large set of useful inspections, sometimes you may want to look for something specific in your project. You can search for specific strings or use Structural Search to look for patterns in your code that cannot be captured by a text string. You can also create custom inspections using either Structural Search or RegExp and even choose to define quick-fixes for them if you wish. This functionality makes improving your code base quicker and easier. In the previous posts of this series, we looked at how to use inspections in the editor and how to run inspections on our project. We hope you have enjoyed this series and hopefully learned something new. Please let us know in the comments! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/ij-social_share_blog_1280x720_en-11.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the Leading Java and Kotlin IDE, by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/java/\"\u003eJava\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/kotlin/\"\u003eKotlin\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eAdvanced Code Analysis in IntelliJ IDEA\u003c/h2\u003e                    \n                    \n\u003cp\u003eThis series of blog posts covers several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous posts, we first looked at how the IDE can help you prevent problems while working with code in the editor before moving on to how to resolve problems throughout your entire project using predefined inspections.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ePart 1: \u003ca href=\"https://blog.jetbrains.com/idea/2024/09/introduction-to-code-analysis-in-intellij-idea/\"\u003eIntroduction to Code Analysis in IntelliJ IDEA\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003ePart 2: \u003ca href=\"https://blog.jetbrains.com/idea/2024/10/code-analysis-for-your-projects-with-intellij-idea-and-qodana/\"\u003eCode Analysis for Your Projects With IntelliJ IDEA and Qodana\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWhile the predefined inspections in IntelliJ IDEA and Qodana are very useful, occasionally you might need something different. In this blog post, we will look at how to find specific patterns in your code using IntelliJ IDEA’s various search functions, such as structural search and replace (SSR), as well as how to create custom inspections using either SSR or RegExp.\u003c/p\u003e\n\n\n\n\u003ch2\u003eFind and replace strings\u003c/h2\u003e\n\n\n\n\u003cp\u003eIf you are looking for a specific string in your code, you can use \u003ca href=\"https://www.jetbrains.com/help/idea/finding-and-replacing-text-in-project.html\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003eFind in Files\u003c/em\u003e\u003c/a\u003e (\u003cem\u003e⌘⇧F\u003c/em\u003e on macOS / \u003cem\u003eCtrl+Shift+F\u003c/em\u003e on Windows/Linux). For example, if you are searching for where an error is thrown, or a log line is written. You can use this option to find text strings. To replace text, use \u003cem\u003eFind and Replace\u003c/em\u003e (\u003cem\u003e⌘⇧R\u003c/em\u003e on macOS / \u003cem\u003eCtrl+Shift+R\u003c/em\u003e on Windows/Linux).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfLZ03DHuVw7N7MwOWRK9c0XoZAZRsLaMwiRHnwNjY5pEVCcU5CTAk_ZOe-V0gJrRgZan-BEuE8gZhdWOgG4ggd2MsYUGkWBx1tyq7fPXt_MIlYNm2ch8vSBj6ToeVWTXrVy0LjTg?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eFind in Files\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can narrow your search by selecting options such as \u003cem\u003eWords\u003c/em\u003e or \u003cem\u003eMatch case\u003c/em\u003e to find the exact word in a project or match the letter case. Alternatively, you can use the \u003cem\u003eFile mask\u003c/em\u003e option to narrow your search to a specific file type, for example, Java classes or markdown files. \u003c/p\u003e\n\n\n\n\u003ch2\u003eStructural search and replace\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo search for more complicated code patterns, you can use \u003ca href=\"https://www.jetbrains.com/help/idea/structural-search-and-replace.html\" target=\"_blank\" rel=\"noopener\"\u003estructural search and replace\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eStart by opening the \u003cem\u003eStructural Search\u003c/em\u003e feature via \u003cem\u003eEdit | Find | Search Structurally…\u003c/em\u003e or by entering it into \u003cem\u003eSearch Everywhere\u003c/em\u003e (\u003cem\u003e⇧⇧\u003c/em\u003e on macOS / \u003cem\u003eShift+Shift\u003c/em\u003e\u003cstrong\u003e \u003c/strong\u003eon Windows/Linux) and finding it there. You can either reuse existing templates or create your own. Below, we will illustrate how each of these methods works.\u003c/p\u003e\n\n\n\n\u003ch2\u003eReuse existing templates\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen you open \u003cem\u003eStructural Search\u003c/em\u003e, you’ll see that there are numerous search templates available, and these are grouped by language or type.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdY48Yrwp3Dleflzle4LpcLig3XckEs3ke49G-30Lhbxr9MtkeLU6wLdx3ACzFM0ZqKweOsyDtsj8qzkw71I6a07VC09OerNcZLXELLtc3vYrJLlkqMGEldYdWmWHJefJ6Lw8L-lg?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStructural Search\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can reuse existing templates and use modifiers to look for what you need.\u003cstrong\u003e \u003c/strong\u003eFor example, let’s look for methods or constructors that use more than five parameters, as this could be considered a code smell. The quickest way to do so is to reuse an existing template. As you may know, menus in IntelliJ IDEA are searchable. Select the menu on the left, press \u003cem\u003eFind\u003c/em\u003e (\u003cem\u003e⌘F\u003c/em\u003e on macOS / \u003cem\u003eCtrl+F\u003c/em\u003e on Windows/Linux), and search for the template you want. In this case, if you enter the words “constructor” and “method”, you’ll find the existing \u003cem\u003eConstructors \u0026amp; methods\u003c/em\u003e template. Select this template and change the minimum count value of the method parameters to \u003cem\u003e5\u003c/em\u003e. Then, run the search by clicking \u003cem\u003eFind\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXczhRY0uCX84j6fneotSQEtuebCZ9guKqBhiblEzlsiKstGJw56SThTzUOQjgLVyypC2xaOJHIpR2O1cPm7GnpPazPk4CLVsxnfwUMMo5K_pAXI53WvjOTqAG7pflccmo_NSpjtNw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStructural Search\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCreate your own template\u003c/h2\u003e\n\n\n\n\u003cp\u003eAlternatively, you can create your own template.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, let’s consider the following code: \u003c/p\u003e\n\n\n\n\u003cpre\u003eString value = opt.orElse(null);\n\nif (value == null) {\n\n   throw new IllegalArgumentException(\u0026#34;Missing value\u0026#34;);\n\n}\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this example, the \u003ccode\u003enull\u003c/code\u003e check can be integrated into \u003ccode\u003eOptional\u003c/code\u003e using \u003ccode\u003eorElseThrow()\u003c/code\u003e, as follows:\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003e\u003ccode\u003eString value = opt.orElseThrow(() -\u0026gt; new IllegalArgumentException(\u0026#34;Missing value\u0026#34;));\u003c/code\u003e\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eRather than finding each occurrence of this pattern in our code base and changing them manually, you can create a custom inspection to do this for you. \u003c/p\u003e\n\n\n\n\u003cp\u003eSelect an occurrence of the code pattern you want to change and open the\u003cem\u003e Structural Search\u003c/em\u003e window via \u003cem\u003eSearch Structurally\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eWhen you open \u003cem\u003eStructural Search \u003c/em\u003ewith your chosen code selected, the snippet will be prefilled in the \u003cem\u003eSearch Template\u003c/em\u003e field inside the \u003cem\u003eDraft Template\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXceECxErKlYcuM1ZRSi4cQcJSBb6EIXfMBqgvExji9hAA_0PYJll4le41SzQDK1uDkzfNq24JdwproUyVHEk0mqO50q4wzC4Sgkjexq0ywghNzXDDpY8ztdXx3kH744dcgosT9Y?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStructural Search – Draft Template\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSince you want to replace this code pattern, you can click the \u003cem\u003eSwitch to Replace\u003c/em\u003e button in the top right-hand corner. Alternatively, you can go to \u003cem\u003eEdit | Find | Replace Structurally…\u003c/em\u003e or use \u003cem\u003eFind Action\u003c/em\u003e (\u003cem\u003e⌘⇧A\u003c/em\u003e on macOS / \u003cem\u003eControl+Shift+A\u003c/em\u003e\u003cstrong\u003e \u003c/strong\u003eon Windows/Linux) to open it directly. Then, add the desired pattern to the \u003cem\u003eReplace template\u003c/em\u003e field in the \u003cem\u003eStructural Replace\u003c/em\u003e popup.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe1dMxX5rG72jpVT5Nx2uEYVEI1QmV1OA09_2K51C6Tj1z5-JuqsszqrEbPcXNJhRO0rcG4WiQbB-GWdu_IW4KaGiETHnD-G1m3LKRRbLGiVMsE_4CUxlvCbJRQMiF5pITRxY6P8w?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStructural Replace – Draft Template\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, you can define placeholders in the templates and add modifiers where needed. Make sure to match the placeholders from the \u003cem\u003eSearch template\u003c/em\u003e to the corresponding variables in the \u003cem\u003eReplace template\u003c/em\u003e. In both templates, replace the \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003eopt\u003c/code\u003e variables with the placeholders \u003ccode\u003e$result$\u003c/code\u003e and \u003ccode\u003e$Optional$\u003c/code\u003e, respectively. With the caret on \u003ccode\u003e$Optional$\u003c/code\u003e, click \u003cem\u003eAdd modifier\u003c/em\u003e in the right-hand pane, select \u003cem\u003eType\u003c/em\u003e, and set the \u003cem\u003eType\u003c/em\u003e to \u003ccode\u003eOptional\u003c/code\u003e. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcKygC_felpXgsTHQon2udo7xgCcCG9gtDuLxHypRklSFpvI4ON9wNMDbCvfv2Kc2cXjhIwhuZbe9Ln50kqTgOlBxMv6Fa8qtApaCjO0ZvpnRlK_4S5kHWMCfB18F1t6z7QrqgP?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Modifier\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe resulting template will look like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcv4AOZL6sJ9VTQ3sEGrZx2IqyRv1y5iQnVhqivN--ASrVwBxjcv4MWkOSMwLB08p2Ga1Rl7T5S9eWrrg5SxQzq-WEt5KAvmXq7qiDerJ_sixn2K2fwrz8VDCqiq5fsQtWIgYwE?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStructural Replace\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhen you have an example in our code for the template you are creating, you can make sure your template matches the code. IntelliJ IDEA will tell you right away if there are no matches to the specified template in your project.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdr-meHKp4NjlCRNIAUoT_TwjjQAOiWLcGPLVnIQqKPiEmoOj1WCxwQZpMgkgioDeNN5EP46fZUxkCzw9K8uXlUnJPBXNnbswxLQtfEm35a9Cd241x9ZiMQAiGoihnu__ogCTot?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eNo Matches\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eClick the \u003cem\u003eFind\u003c/em\u003e button to find all matches to the specified search pattern in your code.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc1WEKhgWVSJ9cQx4WoN_3ftLq4HYfK5mklB37FRCrhqaaSSIzbRBNfHL6OpJUSXKDz4sOmzdN4Hk4d50Bs1EAL-l7cIaePbMwZKHf0e6KsNQptO0Pgc2QIpdEXCVQDvEPxA2WM?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eFind Results\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the \u003cem\u003eFind\u003c/em\u003e results, you can choose to \u003cem\u003eReplace All\u003c/em\u003e or \u003cem\u003eReplace Selected\u003c/em\u003e to replace code according to the template you defined. Use \u003cem\u003ePreview Replacement\u003c/em\u003e to see what the replacement will look like.\u003c/p\u003e\n\n\n\n\u003cp\u003eAlternatively, you can create an inspection from our template, either by using the \u003cem\u003eDraft Template \u003c/em\u003eor by clicking \u003cem\u003eCreate Inspection from Template…\u003c/em\u003e in the \u003cem\u003eFind\u003c/em\u003e results. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcXVpsqAl2ZMAV0j7Tg5p2ft7O0o1GTWdORcdsIO6PYcWGFo_8TkQSPFyODkJ11sYrPCizFlqsQdfwQIR7r1OEN0BPVTIyqlPe1RUhdOfnRGDLQBtvNDyumA-vCmP1QYVlReZHpow?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreate Inspection From Template\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the popup, you can fill in the metadata desired for your inspection, including an \u003cem\u003eInspection name\u003c/em\u003e, a \u003cem\u003eDescription\u003c/em\u003e, a \u003cem\u003eProblem \u003c/em\u003etooltip, and a \u003cem\u003eSuppress ID\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eOnce you click \u003cem\u003eOK\u003c/em\u003e, you’ll see that the code matching the newly created inspection is highlighted in the editor. Now, when you click \u003cem\u003eAlt+Enter\u003c/em\u003e on the highlighted code, IntelliJ IDEA will suggest replacing the code according to your template.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf2VZ6aJT8ygHpW8JshzlRxBxhzSibblP0dgxjBnBNTlPxvnt2rL270LS637Kj-Lkc8VrWmuX5mqeBI4ENUUHzCW3I_x8FKQP9tXrifgE22okpML97FBpZoHQRkDolmcq08C3XWFA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eReplace Code\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you wish to edit your custom inspection further, you can find it in \u003cem\u003eSettings\u003c/em\u003e under \u003cem\u003eEditor | Inspections\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCustom inspections\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs described above, you can create a custom inspection from a \u003cem\u003esearch and replace \u003c/em\u003etemplate. \u003c/p\u003e\n\n\n\n\u003cp\u003eIf you already know that you want to create a custom inspection, you can go ahead and do this right away.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo create a custom inspection, go to \u003cem\u003eSettings | Editor | Inspections\u003c/em\u003e, click \u003cem\u003eAdd Custom Inspection\u003c/em\u003e (\u003cem\u003e⌘N\u003c/em\u003e on macOS) / \u003cem\u003eAlt+Ins\u003c/em\u003e on Windows/Linux), and select the type of inspection you want to create. You can use search and replace templates or RegExp to do this.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeY7wfYA0e4yBKNmiFQ120fC3fPbEmdsdxzdmWlQxDYidlhoNjUcGDKbf5zxpXq_LDzvVtOwo_AUqyXTuXR2evf56R_JQroWV_tA6kRkmnTogCv2eTFH-1XRZsaEceqPsFe4Nj4EA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Custom Inspection\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCustom inspections using \u003cem\u003eStructural Search\u003c/em\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo create an inspection using \u003cem\u003eStructural Search\u003c/em\u003e, select \u003cem\u003eAdd Structural Search Inspection\u003c/em\u003e. To include a quick-fix in the inspection, select \u003cem\u003eAdd Structural Replace Inspection\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf6ex62laYdMQnLHtt3ouih3mKjSkwEQ7JKjVcbLt_VYlcxEkJmT9ZF_Vqne8VCSIqspC5hdeU_7oXE8YY8BkHA--2kmCqPj2WHcREj8mIfkOeo6LgVXeHFBDyTGm7bQGEGQFWWaw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Structural Search Inspection\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor example, you can create an inspection for the example above where you’re looking for methods or constructors that use more than five parameters.\u003c/p\u003e\n\n\n\n\u003cp\u003eJust as in the previous example, you can use the existing \u003cem\u003eConstructors \u0026amp; methods\u003c/em\u003e template and modify the minimum count value of the method parameters to \u003cem\u003e5\u003c/em\u003e. You can change the inspection name and add a tooltip that will show in the editor.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdlptEh4fMRbV22UorYwlcfrl5irjASDq2tkqpoIIpy1DfCV_NSzEkT4LDC9GBZNkKi1AkA1eyKM0vYizLcKV7bztxqAvijBqoMXhdIVhNhXuTX_D6tzg6bUbk6x_3nwvdGVq7ctA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreate Inspection\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can also edit the \u003cem\u003eSeverity\u003c/em\u003e and \u003cem\u003eHighlighting in editor \u003c/em\u003efields.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeztz290-IodsJyLEb2pTpWM5kPOKwbC0SzIBSrqELz8kbLxYNWtWmmV7mT_hZ7g68WpgQL-QB-yKzbPUdoHYvCwhCEkatL2l1mYVWDWIUPzhcBYRyf9oQy_I3r1_nx-zdQ49GYGw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eSeverity\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can edit or remove your custom inspection via \u003cem\u003eSettings\u003c/em\u003e at any time.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCustom inspections using regular expressions\u003c/h2\u003e\n\n\n\n\u003cp\u003eAlternatively, you can \u003ca href=\"https://www.jetbrains.com/help/idea/regex-search-and-replace-inspections.html\" target=\"_blank\" rel=\"noopener\"\u003ecreate inspections using regular expressions\u003c/a\u003e to search for and replace specific patterns of text.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo create an inspection, open \u003cem\u003eSettings\u003c/em\u003e and go to \u003cem\u003eEditor | Inspections\u003c/em\u003e. Under \u003cem\u003eUser defined\u003c/em\u003e, select \u003cem\u003eRegexp\u003c/em\u003e and click the \u003cem\u003e+\u003c/em\u003e button on the right-hand side of the screen. Then, select \u003cem\u003eAdd RegExp\u003c/em\u003e \u003cem\u003eSearch Inspection…\u003c/em\u003e.\u003cem\u003e\u003cbr/\u003e\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfyITtOMWDC9HQf0RAlQshmKmD3wsaNEj-ODFssRqwvi-ismHEGNSVcx6aVdJkaxFyWQdi4-9DWpr_AILjZ14Uzz4BKrjUpOl5D_bn406pFUz7vYigB8tB-3GIFHYP3oIPY1hlwwg?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Custom Inspection – RegExp\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can now create your inspection by typing the regular expression. As this example uses Kotlin, select \u003cem\u003eLanguage = Kotlin\u003c/em\u003e from the dropdown menu in the top right of the window.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this example, let’s look for \u003ccode\u003eprintln()\u003c/code\u003e methods, as you probably don’t want your debugging statements to end up in production. Since you are using regex, you’ll need to escape the brackets. Search for \u003ccode\u003eprintln\\(\u0026#34;.*?\u0026#34;\\)\u003c/code\u003e to find any \u003ccode\u003eprintln()\u003c/code\u003e method with an argument.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcXGhtKgC-SqisAzlOYa0z6Bax-U1n9zNS9kthLgxG565u-WgP0bF2fhfvL6vlqy8_LdJmsmLSwpboen-p0vuaMtpPsNAhU1y5DF7gBFZ9OLX5-tVydzMDIXED1XdFjc5OXShMxuA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreate Custom Inspection – Regex\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eClick \u003cem\u003eOK\u003c/em\u003e to go to the \u003cem\u003eUser Defined Inspection in ‘Default’\u003c/em\u003e popup and fill in the details for the inspection. For example, you can enter “println” in the \u003cem\u003eInspection name \u003c/em\u003efield, “Spot all println in the code” under \u003cem\u003eDescription\u003c/em\u003e, and “Spotted: #ref” in the \u003cem\u003eProblem \u003c/em\u003etooltip, where \u003ccode\u003e#ref\u003c/code\u003e will refer to the code in which \u003ccode\u003eprintln\u003c/code\u003e has been found. Finally, enter “PRINTLN” under \u003cem\u003eSuppress ID \u003c/em\u003eand click \u003cem\u003eOK\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdQ8KNI0xldkwd7OxOKtihipre6ZZGd9RqSFWgXgx5RGbGpiW0kT6sm3-iA44PdThbkBKnFkdPiHJE0ioHWbyGfoHCJvgLtkXmf2nxjWjeoRIUq3M9ZkkFHVj2DNZ_AxTXM0ufJhQ?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eUser Defined Inspection\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdXy8cLBnMOVem-OwcDz0dgZRz0nhMwPc_Tq-LQPSu2mAgFJ9eoRkDDDyB8ZCWqmvLu21N7wILXQ3coAQWSVVGGRi8Th6bOfsf__qjGQxXvM2lzxLyfQa7o4_L2gb06wlo0hQfL?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCustom Inspection – Regex\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou will now see the created custom inspection under \u003cem\u003eUser defined | RegExp\u003c/em\u003e with an exclamation mark, as the current \u003cem\u003eSeverity\u003c/em\u003e value is \u003cem\u003eWarning\u003c/em\u003e. You can change the severity level as well as how this inspection will be highlighted in the editor in the panel on the right-hand side of the screen.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, any code that meets this inspection will be highlighted in the editor. You might also want to add a quick-fix to the inspection. To do so, you’ll need to edit the inspection you just defined. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn \u003cem\u003eSettings, \u003c/em\u003ego to\u003cem\u003e Editor | Inspections\u003c/em\u003e, select the \u003cem\u003eRegExp \u003c/em\u003epattern in the bottom right-hand corner of the \u003cem\u003eSettings\u003c/em\u003e screen, and click the \u003cem\u003eEdit \u003c/em\u003ebutton.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcpno8_gW4jDvVqkinO5R4Wvjv3FUUJUVMGCXM4syTWxaW7-MiMrmblsAc91l2ptKtUKNIP5Jg-92MV77FzXm-2jMkXEfwYYaDP-zlz6SuOTfJdoPSo1ROWvdLMtGZRr7Bax3b1pw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eEdit RegExp Inspection\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the \u003cem\u003eRegExp\u003c/em\u003e popup that opens, click the \u003cem\u003eEnable Replace\u003c/em\u003e button.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Enable-Replace.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eEnable Replace\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the \u003cem\u003eReplacement\u003c/em\u003e field, you can enter any code you like. For example, you might decide to add \u003ccode\u003e//\u003c/code\u003e to comment out the code.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn order to refer to the code you want to replace, you’ll need to capture the entire piece of code that you want to use in the \u003cem\u003eReplacement\u003c/em\u003e field. You can do so by wrapping the code with brackets as follows: \u003ccode\u003e(println\\(\u0026#34;.*?\u0026#34;\\))\u003c/code\u003e. This will now be your first regex group, and you can refer to it in the \u003cem\u003eReplacement\u003c/em\u003e field as \u003ccode\u003e$1\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeCFGnZSZ3xRZFLpUSJI9N-fAJvcrf1G1Pd7X73GNMhTktTp87e2KJkO6uIIqf2iLlOxzDiuEXdUL61rQNfXGHVQ6_q6um6tiGxzPoe6bi1cA3piVY-XXTesdQ430tJQ72hqvuROw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eReplace RegExp\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, when you press \u003cem\u003eAlt+Enter\u003c/em\u003e on the highlighted code, you’ll be given the option to replace the code according to your RegExp template.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc214jGUEZL9Ej9A6uM6ouKbaKV_4EhokoB2XDhqYfgy-SHaMNp5ryFCwJXFCJpwwnF0Cj-3xtI1XjlKROnO5XUPnRErFB_g2Q8zIIs348FT0c4hqkd0VCRWBlRtRK7mNGLviMriA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eReplace\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you don’t want to replace the code according to the quick-fix, you can also suppress this inspection. Click the kebab menu (three dots) to the right-hand side of the inspection (or press the right arrow key), and select one of the\u003cem\u003e Suppress \u003c/em\u003eoptions from the menu to suppress this inspection for the current file, method, or statement. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfPuMFpEy2AydQMXDtlQURZ9m6MpkWFu5SzOdpGxYXDg__Y3cWcONapKPnadGr-6-q9oCo1XbXLigCIiksjYMi62Ohu0HNXHLEv0uMcYzP2uqlm0yiSBndmB_Gl-qpcpGfYa-zWHA?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eSuppress\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSelecting this option will add a \u003ccode\u003e@Suppress\u003c/code\u003e statement to the file.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfJYnv6QiZXpI80nV2uELDH8uDT_cbyw4cRCVzMFCR3HMqiZXQJQSchVZ2yA-yZ2BDD2MxmlpdnA_AEjrIGidVgzaYWygYmrKbbtaLHre8nTFcc55W0Os5ij5xtA7gHwEqxcV8CEw?key=xcpMbswevJV2EuoFTJAdBcAY\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eSuppress Statement\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile IntelliJ IDEA comes with a large set of useful inspections, sometimes you may want to look for something specific in your project. You can search for specific strings or use \u003cem\u003eStructural Search\u003c/em\u003e to look for patterns in your code that cannot be captured by a text string. You can also create custom inspections using either \u003cem\u003eStructural Search\u003c/em\u003e or \u003cem\u003eRegExp\u003c/em\u003e and even choose to define quick-fixes for them if you wish. This functionality makes improving your code base quicker and easier.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the previous posts of this series, we looked at \u003ca href=\"https://blog.jetbrains.com/idea/2024/09/introduction-to-code-analysis-in-intellij-idea/\"\u003ehow to use inspections in the editor\u003c/a\u003e and \u003ca href=\"https://blog.jetbrains.com/idea/2024/10/code-analysis-for-your-projects-with-intellij-idea-and-qodana/\"\u003ehow to run inspections on our project\u003c/a\u003e. We hope you have enjoyed this series and hopefully learned something new. Please let us know in the comments!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
