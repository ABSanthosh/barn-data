{
  "id": "53f2adf0-3c90-4706-8b56-b1d9d422c280",
  "title": "How to include file references in your CI/CD components",
  "link": "https://about.gitlab.com/blog/2024/10/16/how-to-include-file-references-in-your-ci-cd-components",
  "description": "",
  "author": "Itzik Gan Baruch",
  "published": "2024-10-16T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Itzik Gan Baruch",
  "length": 4234,
  "excerpt": "Learn how to include scripts and dependencies in your CI/CD components to minimize duplications and simplify maintenance. This tutorial takes you step-by-step through the process.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "I’m frequently asked whether included CI/CD components can reference additional files stored outside of the pipeline repository. While including components in your configuration is straightforward since they’re just YAML, many users want to know if those included components can access and execute additional files referenced by the components, like shell scripts or other dependencies. This challenge has been a common topic of discussion in threads across the GitLab Forum and Reddit. Now for the good news: CI/CD components not only allow you to reuse pipeline configurations, saving time and effort, but you can also go a step further. With the new CI/CD Steps programming language, you can directly reuse centralized automation scripts and dependencies in your pipelines. You'll gain even greater flexibility, making your pipelines more powerful and adaptable than ever. By storing your scripts in a central location and wrapping them in CI/CD Steps, you can easily call these steps from your CI/CD components. This eliminates the need to duplicate scripts across multiple repositories and CI/CD configurations, streamlining your workflow and reducing redundancy. Before we dive into the step-by-step guide, let’s briefly explore what CI/CD components and CI/CD Steps are. What are CI/CD components? CI/CD components are reusable units of pipeline configurations that get included in a pipeline when it’s created. The components bring additional jobs into the pipeline, however they can’t bring additional files as such reusable scripts. What are CI/CD Steps? CI/CD Steps are reusable units of a job. Each step defines structured inputs and outputs that can be consumed by other steps. Steps can come from local files, GitLab.com repositories, or any other Git source. Steps offer a structured alternative to shell scripts for running jobs. They are modular, can be composed, tested, and easily reused, providing greater flexibility and maintainability. What are the differences between CI/CD Steps and CI/CD components? Component and step definitions look very similar but they take effect at different phases in pipeline execution. Components are used when a pipeline is created while steps are used when individual jobs are running. When a step is running, the whole repository is being downloaded into the job environment along with extra files. A step-by-step guide Here is how CI/CD Steps and Components work together to access additional files. This diagram illustrates the process flow: Jobs defined within components are imported into the pipeline configuration (.gitlab-ci.yml) when the pipeline is created. During the pipeline's execution, a job’s steps are executed, and the entire Git repository is downloaded to the Step runner within the job’s context. This ensures that references to dependencies function correctly. 1. Define a component with run keyword that runs CI/CD Steps Run is a new keyword that supports running steps, see the example code below. You can use this guide to learn more on how to create Components. 2. Create a step.yml file in the project where your scripts and dependencies are located. In this code example, format.sh exists in the same directory as the step.yml. While the job is running, the Step runner will download the entire Git repository where the step is defined. The ${{ step_dir }} step expression references the directory of the locally cached step files, allowing you to access other files from the repository. In the example above, the “format” step invokes the format.sh script. 3. Make sure that any files accessed by the step are located in the same repository as the step.yml file. 4. Include the component in your CI/CD configuration. See this example code: Code example: You can find the entire code demonstrated in this blog in this GitLab Group. Important note: The CI/CD Steps feature is currently Experimental, and the syntax may change as we continue to iterate and refine it based on user feedback. Any feedback should be provided via this issue. Learn more Watch this walkthrough by Joe Burnett, principal engineer at GitLab, as he demonstrates the example discussed in the blog post. Introducing CI/CD Steps Introducing CI/CD components",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/DoeBNJVrhv9FpF3WCsHNc/9e80b67b7e2bc5bd60c0c92c8a944a9a/blog-image-template-1800x945__9_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-b794d8fe=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eI’m frequently asked whether included CI/CD components can reference additional files stored outside of the pipeline repository. While including components in your configuration is straightforward since they’re just YAML, many users want to know if those included components can access and execute additional files referenced by the components, like shell scripts or other dependencies.\u003c/p\u003e\n\u003cp\u003eThis challenge has been a common topic of discussion in threads across the \u003ca href=\"https://forum.gitlab.com/t/gitlab-ci-includes-a-file-from-another-project-that-executes-a-script-file/111698\"\u003eGitLab Forum\u003c/a\u003e and \u003ca href=\"https://www.reddit.com/r/gitlab/comments/18ma13x/gitlab_components_question/\"\u003eReddit\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNow for the good news: CI/CD components not only allow you to reuse pipeline configurations, saving time and effort, but you can also go a step further. With the new \u003ca href=\"https://about.gitlab.com/blog/2024/08/06/introducing-ci-cd-steps-a-programming-language-for-devsecops-automation/\"\u003eCI/CD Steps\u003c/a\u003e programming language, you can directly reuse centralized automation scripts and dependencies in your pipelines. You\u0026#39;ll gain even greater flexibility, making your pipelines more powerful and adaptable than ever.\u003c/p\u003e\n\u003cp\u003eBy storing your scripts in a central location and wrapping them in CI/CD Steps, you can easily call these steps from your CI/CD components. This eliminates the need to duplicate scripts across multiple repositories and CI/CD configurations, streamlining your workflow and reducing redundancy.\u003c/p\u003e\n\u003cp\u003eBefore we dive into the step-by-step guide, let’s briefly explore what CI/CD components and CI/CD Steps are.\u003c/p\u003e\n\u003ch2 id=\"what-are-cicd-components%3F\" tabindex=\"-1\"\u003eWhat are CI/CD components? \u003ca href=\"#what-are-cicd-components%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.gitlab.com/ee/ci/components/\"\u003eCI/CD components\u003c/a\u003e are reusable units of pipeline configurations that get included in a pipeline when it’s created. The components bring additional jobs into the pipeline, however they can’t bring additional files as such reusable scripts.\u003c/p\u003e\n\u003ch2 id=\"what-are-cicd-steps%3F\" tabindex=\"-1\"\u003eWhat are CI/CD Steps? \u003ca href=\"#what-are-cicd-steps%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.gitlab.com/ee/ci/steps/\"\u003eCI/CD Steps\u003c/a\u003e are reusable units of a job. Each step defines structured inputs and outputs that can be consumed by other steps. Steps can come from local files, GitLab.com repositories, or any other Git source. Steps offer a structured alternative to shell scripts for running jobs. They are modular, can be composed, tested, and easily reused, providing greater flexibility and maintainability.\u003c/p\u003e\n\u003ch2 id=\"what-are-the-differences-between-cicd-steps-and-ci%2Fcd-components%3F\" tabindex=\"-1\"\u003eWhat are the differences between CI/CD Steps and CI/CD components? \u003ca href=\"#what-are-the-differences-between-cicd-steps-and-ci%2Fcd-components%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eComponent and step definitions look very similar but they take effect at different phases in pipeline execution.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComponents are used when a pipeline is created while steps are used when individual jobs are running.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen a step is running, the whole repository is being downloaded into the job environment along with extra files.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"a-step-by-step-guide\" tabindex=\"-1\"\u003eA step-by-step guide \u003ca href=\"#a-step-by-step-guide\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHere is how CI/CD Steps and Components work together to access additional files.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2AqGmaJZmRChL6qunHWri1/502f45f593060a71811b3bdca03161a2/steps-diagram-for-blog.png\" alt=\"CI/CD Steps flow diagram\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis diagram illustrates the process flow: Jobs defined within components are imported into the pipeline configuration (\u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e) when the pipeline is created. During the pipeline\u0026#39;s execution, a job’s steps are executed, and the entire Git repository is downloaded to the \u003ca href=\"https://docs.gitlab.com/ee/ci/steps/#using-steps\"\u003eStep runner\u003c/a\u003e within the job’s context. This ensures that references to dependencies function correctly.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. Define a component with \u003ccode\u003erun\u003c/code\u003e keyword that runs CI/CD Steps\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRun is a new keyword that supports running steps, see the example code below. You can use \u003ca href=\"https://about.gitlab.com/blog/2023/12/21/introducing-the-gitlab-ci-cd-catalog-beta/\"\u003ethis guide\u003c/a\u003e to learn more on how to create Components.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/5dXcceE1fwtWY07TB1C8Xr/6a255c04bf7e79674c659ec27f768ad2/Screenshot_2024-10-13_at_8.22.00.png\" alt=\"template-yml\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Create a \u003ccode\u003estep.yml\u003c/code\u003e file in the project where your scripts and dependencies are located.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this code example, format.sh exists in the same directory as the \u003ccode\u003estep.yml\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4gSOGbbd3AmQexh7rZrfBZ/9c3e2b27c4731bdf1188e99544013882/Screenshot_2024-10-13_at_8.23.52.png\" alt=\"step.yml\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhile the job is running, the Step runner will download the entire Git repository where the step is defined. The \u003ccode\u003e${{ step_dir }}\u003c/code\u003e step expression references the directory of the locally cached step files, allowing you to access other files from the repository. In the example above, the “format” step invokes the format.sh script.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3. Make sure that any files accessed by the step are located in the same repository as the \u003ccode\u003estep.yml\u003c/code\u003e file.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e4. Include the component in your CI/CD configuration.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSee this example code:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3MK4l5PnsRwf6sqQFWUxGw/a2f5ed687f0a5901d27e820ee58d271a/Screenshot_2024-10-13_at_8.26.22.png\" alt=\".gitlab-ci.yml\"/\u003e\u003c/p\u003e\n\u003cp\u003eCode example: You can find the entire code demonstrated in this blog in this \u003ca href=\"https://gitlab.com/gitlab-da/use-cases/ci-steps\"\u003eGitLab Group\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant note:\u003c/strong\u003e The CI/CD Steps feature is currently \u003ca href=\"https://docs.gitlab.com/ee/policy/experiment-beta-support.html#experiment\"\u003eExperimental\u003c/a\u003e, and the syntax may change as we continue to iterate and refine it based on user feedback. Any feedback should be provided via \u003ca href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/493694\"\u003ethis issue\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWatch \u003ca href=\"https://youtu.be/qxTbeYXEQLM\"\u003ethis walkthrough\u003c/a\u003e by \u003ca href=\"https://about.gitlab.com/company/team/#josephburnett\"\u003eJoe Burnett\u003c/a\u003e, principal engineer at GitLab, as he demonstrates the example discussed in the blog post.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/08/06/introducing-ci-cd-steps-a-programming-language-for-devsecops-automation/\"\u003eIntroducing CI/CD Steps\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/blog/2023/07/10/introducing-ci-components/\"\u003eIntroducing CI/CD components\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-10-16T00:00:00Z",
  "modifiedTime": null
}
