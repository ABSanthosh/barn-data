{
  "id": "0cf1b81c-b5ec-47b8-9cd2-7deee86baf03",
  "title": "How Precision Time Protocol handles leap seconds",
  "link": "https://engineering.fb.com/2025/02/03/production-engineering/how-precision-time-protocol-ptp-handles-leap-seconds/",
  "description": "We’ve previously described why we think it’s time to leave the leap second in the past. In today’s rapidly evolving digital landscape, introducing new leap seconds to account for the long-term slowdown of the Earth’s rotation is a risky practice that, frankly, does more harm than good. This is particularly true in the data center [...] Read More... The post How Precision Time Protocol handles leap seconds appeared first on Engineering at Meta.",
  "author": "",
  "published": "Mon, 03 Feb 2025 17:00:34 +0000",
  "source": "https://engineering.fb.com/feed/",
  "categories": [
    "Networking \u0026 Traffic",
    "Production Engineering"
  ],
  "byline": "By Oleg Obleukhov, Patrick Cullen",
  "length": 5046,
  "excerpt": "We’ve previously described why we think it’s time to leave the leap second in the past. In today’s rapidly evolving digital landscape, introducing new leap seconds to account for the long-term slow…",
  "siteName": "Engineering at Meta",
  "favicon": "",
  "text": "We’ve previously described why we think it’s time to leave the leap second in the past. In today’s rapidly evolving digital landscape, introducing new leap seconds to account for the long-term slowdown of the Earth’s rotation is a risky practice that, frankly, does more harm than good. This is particularly true in the data center space, where new protocols like Precision Time Protocol (PTP) are allowing systems to be synchronized down to nanosecond precision.   With the ever-growing demand for higher precision time distribution, and the larger role of PTP for time synchronization in data centers, we need to consider how to address leap seconds within systems that use PTP and are thus much more time sensitive. Leap second smearing – a solution past its time Leap second smearing is a process of adjusting the speeds of clocks to accommodate the correction that has been a common method for handling leap seconds. At Meta, we’ve traditionally focused our smearing effort on NTP since it has been the de facto standard for time synchronization in data centers. In large NTP deployments, leap second smearing is generally performed at the Stratum 2 (layer), which consists of NTP servers that directly interact with NTP clients (the Stratum 3) that are the downstream users of the NTP service. There are multiple approaches to smearing. In the case of NTP, linear or quadratic smearing formulas can be applied. Quadratic smearing is often preferred due to the layered nature of the NTP protocol, where clients are encouraged to dynamically adjust their polling interval as the value of pending correction increases. This solution has its own tradeoffs, such as inconsistent adjustments, which can lead to different offset values across a large server fleet.  Linear smearing may be superior if an entire fleet is relying on the same time sources and performs smearing at the same time. In combination with more frequent sync cycles of typically once per second, this is a more predictable, precise and reliable approach. Handling leap seconds in PTP In contrast to NTP, which synchronizes at the millisecond level, PTP provides a level of precision typically in the range of nanoseconds. At this level of precision even periodic linear smearing would create too much delta across the fleet and violate guarantees provided to the customers. To handle leap seconds in a PTP environment we take an algorithmic approach that shifts time automatically for systems that use PTP and combine this with an emphasis on using Coordinated Universal Time (UTC) over International Atomic Time (TAI). Self-smearing At Meta, users interact with the PTP service via the fbclock library, which provides a tuple of values, {earliest_ns, latest_ns}, which represents a time interval referred to as the Window of Uncertainty (WOU). Each time the library is called during the smearing period we adjust the return values based on the smearing algorithm, which shifts the time values 1 nanosecond every 62.5 microseconds. This approach has a number of advantages, including being completely stateless and reproducible. The service continues to utilize TAI timestamps but can return UTC timestamps to clients via the API. And, as the start time is determined by tzdata timestamps, the current smearing position can be determined even after a server is rebooted. This approach does come with some tradeoffs. For example, as the leap smearing strategy differs between the NTP (quadratic) and PTP (linear) ecosystems, services may struggle to match timestamps acquired from different sources during the smearing period.  The difference between two approaches can mean differences of over 100 microseconds, creating challenges for services that consume time from both systems. UTC over TAI The smearing strategy we implemented in our fbclock library shows good performance. However, it still introduces significant time deltas between multiple hosts during the smearing period, despite being fully stateless and using small (1 nanosecond) and fixed step sizes.  Another significant drawback comes from periodically running jobs. Smearing time means our scheduling is off by close to 1 millisecond after 60 seconds for services that run at precise intervals.  This is not ideal for a service that guarantees nanosecond-level accuracy and precision. As a result, we recommend that customers use TAI over UTC and thus avoid having to deal with the leap seconds. Unfortunately, though, in most cases, the conversion to UTC is still required and eventually has to be performed somewhere. PTP without leap seconds At Meta, we support the recent push to freeze any new leap seconds after 2035. If we can cease the introduction of new leap seconds, then the entire industry can rely on UTC instead of TAI for higher precision timekeeping. This will simplify infrastructure and remove the need for different smearing solutions. Ultimately, a future without leap seconds is one where we can push systems to greater levels of timekeeping precision more easily and efficiently.",
  "image": "https://engineering.fb.com/wp-content/uploads/2025/02/Handling_leap_second_in_PTP.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003cspan\u003eWe’ve previously described why we think\u003c/span\u003e \u003ca href=\"https://engineering.fb.com/2022/07/25/production-engineering/its-time-to-leave-the-leap-second-in-the-past/\"\u003e\u003cspan\u003eit’s time to leave the leap second in the past\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e. In today’s rapidly evolving digital landscape, introducing new leap seconds to account for the long-term slowdown of the Earth’s rotation is a risky practice that, frankly,\u003c/span\u003e \u003cspan\u003edoes more harm than good\u003c/span\u003e\u003cspan\u003e. This is particularly true in the data center space, where new protocols like\u003c/span\u003e\u003ca href=\"https://engineering.fb.com/2022/11/21/production-engineering/precision-time-protocol-at-meta/\"\u003e \u003cspan\u003ePrecision Time Protocol (PTP)\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e are allowing systems to be synchronized down to nanosecond precision.  \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eWith the ever-growing demand for higher precision time distribution, and\u003c/span\u003e \u003ca href=\"https://engineering.fb.com/2022/11/21/production-engineering/precision-time-protocol-at-meta/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ethe larger role of PTP for time synchronization\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e in data centers, we need to consider how to address leap seconds within systems that use PTP and are thus much more time sensitive.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eLeap second smearing – a solution past its time\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eLeap second smearing is a process of adjusting the speeds of clocks to accommodate the correction that has been a common method for handling leap seconds. At Meta, we’ve traditionally focused our smearing effort on \u003ca href=\"https://engineering.fb.com/2020/03/18/production-engineering/ntp-service/\" target=\"_blank\" rel=\"noopener\"\u003eNTP\u003c/a\u003e since it has been the de facto standard for time synchronization in data centers.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eIn large NTP deployments, leap second smearing is generally performed at the\u003c/span\u003e \u003ca href=\"https://engineering.fb.com/2020/03/18/production-engineering/ntp-service/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eStratum 2 (layer\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e), which consists of NTP servers that directly interact with NTP clients (\u003c/span\u003e\u003cspan\u003ethe Stratum 3\u003c/span\u003e\u003cspan\u003e) that are the downstream users of the NTP service.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e \u003cimg decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2020/03/Time-Infra-NTP-Service.jpg\" width=\"2000\" height=\"1125\"/\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThere are multiple approaches to smearing. In the case of NTP, linear or quadratic smearing formulas can be applied.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eQuadratic smearing is often preferred due to the layered nature of the NTP protocol, where clients are encouraged to dynamically adjust their polling interval as the value of pending correction increases. This solution has its own tradeoffs, such as inconsistent adjustments, which can lead to different offset values across a large server fleet. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eLinear smearing may be superior if an entire fleet is relying on the same time sources and performs smearing at the same time. In combination with more frequent sync cycles of typically once per second, this is a more predictable, precise and reliable approach.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?w=1024\" alt=\"\" width=\"1024\" height=\"576\" srcset=\"https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png 2240w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=580,326 580w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=916,516 916w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=768,432 768w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=1024,576 1024w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=1536,865 1536w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=2048,1153 2048w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=96,54 96w, https://engineering.fb.com/wp-content/uploads/2025/02/Quadratic-Graph-White.png?resize=192,108 192w\" sizes=\"(max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eHandling leap seconds in PTP\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eIn contrast to NTP, which synchronizes at the millisecond level, PTP provides a level of precision typically in the range of nanoseconds. At this level of precision even periodic linear smearing would create too much delta across the fleet and violate guarantees provided to the customers.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eTo handle leap seconds in a PTP environment we take an algorithmic approach that shifts time automatically for systems that use PTP and combine this with an emphasis on using\u003c/span\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Coordinated_Universal_Time\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eCoordinated Universal Time (UTC)\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e over International Atomic Time (TAI).\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eSelf-smearing\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eAt Meta, users interact with the PTP service via the\u003c/span\u003e \u003ca href=\"https://engineering.fb.com/2022/11/21/production-engineering/precision-time-protocol-at-meta/#client\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003efbclock\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e library, which provides a tuple of values, \u003c/span\u003e\u003ci\u003e\u003cspan\u003e{\u003cspan\u003eearliest_ns, latest_ns}\u003c/span\u003e,\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e which represents a time interval referred to as the\u003c/span\u003e \u003cspan\u003eWindow of Uncertainty (WOU). Each time the library is called during the smearing period we adjust the return values based on the smearing algorithm, which shifts the time values 1 nanosecond every 62.5 microseconds.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThis approach has a number of advantages, including being completely stateless and reproducible. The service continues to utilize TAI timestamps but can return UTC timestamps to clients via the API. And, as the start time is determined by\u003c/span\u003e \u003ca href=\"https://engineering.fb.com/2020/03/18/production-engineering/ntp-service/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003etzdata\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e timestamps, the current smearing position can be determined even after a server is rebooted.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThis approach does come with some tradeoffs. For example, as the leap smearing strategy differs between the NTP (quadratic) and PTP (linear) ecosystems, services may struggle to match timestamps acquired from different sources during the smearing period. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThe difference between two approaches can mean differences of over 100 microseconds, creating challenges for services that consume time from both systems.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eUTC over TAI\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe smearing strategy we implemented in our fbclock library shows good performance. However, it still introduces significant time deltas between multiple hosts during the smearing period, despite being fully stateless and using small (1 nanosecond) and fixed step sizes. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eAnother significant drawback comes from periodically running jobs. Smearing time means our scheduling is off by close to 1 millisecond after 60 seconds for services that run at precise intervals. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?w=1024\" alt=\"\" width=\"1024\" height=\"617\" srcset=\"https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png 2240w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=916,552 916w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=768,463 768w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=1024,617 1024w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=1536,925 1536w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=2048,1233 2048w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=96,58 96w, https://engineering.fb.com/wp-content/uploads/2025/02/Intended-Graph-White.png?resize=192,116 192w\" sizes=\"auto, (max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThis is not ideal for a service that guarantees nanosecond-level accuracy and precision.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eAs a result, we recommend that customers use TAI over UTC and thus avoid having to deal with the leap seconds. Unfortunately, though, in most cases, the conversion to UTC is still required and eventually has to be performed somewhere.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003ePTP without leap seconds\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eAt Meta, we support the recent push to\u003c/span\u003e\u003ca href=\"https://www.nytimes.com/2022/11/19/science/time-leap-second-bipm.html\"\u003e \u003cspan\u003efreeze any new leap seconds after 2035\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e. If we can cease the introduction of new leap seconds, then the entire industry can rely on UTC instead of TAI for higher precision timekeeping. This will simplify infrastructure and remove the need for different smearing solutions.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eUltimately, a future without leap seconds is one where we can push systems to greater levels of timekeeping precision more easily and efficiently.\u003c/span\u003e\u003c/p\u003e\n\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-03T17:00:34Z",
  "modifiedTime": "2025-02-01T00:30:28Z"
}
