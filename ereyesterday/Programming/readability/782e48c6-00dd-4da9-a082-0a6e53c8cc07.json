{
  "id": "782e48c6-00dd-4da9-a082-0a6e53c8cc07",
  "title": "Phoenix.new Launches Remote Agent-Powered Dev Environments for Elixir",
  "link": "https://www.infoq.com/news/2025/06/phoenix-new/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Chris McCord has released Phoenix.new, a browser-native agent platform that gives large language models full-stack control over Elixir development environments. Designed to work entirely in the cloud, Phoenix.new spins up real Phoenix apps inside ephemeral VMs, allowing LLM agents to build, test, and iterate in real time. By Robert Krzaczyński",
  "author": "Robert Krzaczyński",
  "published": "Sun, 22 Jun 2025 10:55:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Virtual Machines",
    "Large language models",
    "Elixir",
    "Phoenix",
    "Development",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Robert Krzaczyński",
  "length": 2801,
  "excerpt": "Chris McCord has released Phoenix.new, a browser-native agent platform that gives large language models full-stack control over Elixir development environments. Designed to work entirely in the cloud,",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250605075544/apple-touch-icon.png",
  "text": "Chris McCord has released Phoenix.new, a browser-native agent platform that gives large language models full-stack control over Elixir development environments. Designed to work entirely in the cloud, Phoenix.new spins up real Phoenix apps inside ephemeral VMs—complete with root shell access, a full browser, GitHub integration, and live deployment URLs—allowing LLM agents to build, test, and iterate in real time. Phoenix.new allows users to spin up Elixir projects directly in their browser. The agents can install packages, modify code, launch servers, and even run integration tests, all without touching the local machine. Each environment is powered by Fly.io’s infrastructure and behaves like a full development system, complete with a root shell and live preview URLs. What distinguishes Phoenix.new is its alignment with the Phoenix framework’s real-time and collaborative features. When an agent adds a front-end component, it goes beyond verifying compilation—it launches a browser session, loads the application, and interacts with it programmatically. Updates are reflected live across open preview tabs, enabling continuous feedback during development. Phoenix.new agents can also explore live databases via CLI tools, propose schema-aware Ecto models, and generate full-stack apps that use WebSockets, LiveView, and Presence. Developers can guide the agents or let them work asynchronously—triaging GitHub issues, generating pull requests, and iterating independently on running codebases. In a live demo at ElixirConfEU, Phoenix.new generated a functional Tetris game using Phoenix LiveView from a single prompt. While there are few public examples combining LiveView with game logic, the agent was able to draw on general knowledge of web frameworks and interactive applications to complete the task. While Phoenix.new operates inside Fly.io’s virtual machines, questions have been raised about vendor lock-in. Responding to one such concern on Hacker News, McCord clarified: Everything starts as a stock phx.new app which uses SQLite by default. Nothing is specific to Fly. You should be able to copy the git clone URL, paste, cd \u0026\u0026 mix deps.get \u0026\u0026 mix phx.server locally and the app will just work. McCord envisions a future where agent collaboration happens not only during coding sessions but continuously, even while developers are offline. With growing support for multiple languages and frameworks beyond Elixir, Phoenix.new is poised to become a powerful entry point for cloud-native, AI-assisted development. The platform is available now at phoenix.new, with continued updates planned throughout 2025. About the Author Robert Krzaczyński",
  "image": "https://res.infoq.com/news/2025/06/phoenix-new/en/headerimage/generatedHeaderImage-1750589158778.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\u003e\u003cp\u003eChris McCord has released \u003ca href=\"https://fly.io/blog/phoenix-new-the-remote-ai-runtime/\"\u003ePhoenix.new\u003c/a\u003e, a browser-native agent platform that gives large language models full-stack control over Elixir development environments. Designed to work entirely in the cloud, Phoenix.new spins up real Phoenix apps inside ephemeral VMs—complete with root shell access, a full browser, GitHub integration, and live deployment URLs—allowing LLM agents to build, test, and iterate in real time.\u003c/p\u003e\u003cp\u003e\n\nPhoenix.new allows users to spin up Elixir projects directly in their browser. The agents can install packages, modify code, launch servers, and even run integration tests, all without touching the local machine. Each environment is powered by Fly.io’s infrastructure and behaves like a full development system, complete with a root shell and live preview URLs.\u003c/p\u003e\u003cp\u003e\n\nWhat distinguishes Phoenix.new is its alignment with the Phoenix framework’s real-time and collaborative features. When an agent adds a front-end component, it goes beyond verifying compilation—it launches a browser session, loads the application, and interacts with it programmatically. Updates are reflected live across open preview tabs, enabling continuous feedback during development.\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003ePhoenix.new agents can also explore live databases via CLI tools, propose schema-aware Ecto models, and generate full-stack apps that use WebSockets, LiveView, and Presence. Developers can guide the agents or let them work asynchronously—triaging GitHub issues, generating pull requests, and iterating independently on running codebases.\u003c/p\u003e\u003cp\u003e\n\nIn a \u003ca href=\"https://www.youtube.com/watch?v=ojL_VHc4gLk\u0026amp;t=3923s\"\u003elive demo\u003c/a\u003e at ElixirConfEU, Phoenix.new generated a functional Tetris game using Phoenix LiveView from a single prompt. While there are few public examples combining LiveView with game logic, the agent was able to draw on general knowledge of web frameworks and interactive applications to complete the task.\u003c/p\u003e\u003cp\u003e\n\nWhile Phoenix.new operates inside Fly.io’s virtual machines, questions have been raised about vendor lock-in. Responding to one such concern on Hacker News, McCord \u003ca href=\"https://news.ycombinator.com/item?id=44330087\"\u003eclarified\u003c/a\u003e:\u003c/p\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEverything starts as a stock phx.new app which uses SQLite by default. Nothing is specific to Fly. You should be able to copy the git clone URL, paste, \u003ccode\u003e cd \u0026amp;\u0026amp; mix deps.get \u0026amp;\u0026amp; mix phx.server \u003c/code\u003e locally and the app will just work.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv\u003e\u003cp\u003eMcCord envisions a future where agent collaboration happens not only during coding sessions but continuously, even while developers are offline. With growing support for multiple languages and frameworks beyond Elixir, Phoenix.new is poised to become a powerful entry point for cloud-native, AI-assisted development.\u003c/p\u003e\u003cp\u003e\n\nThe platform is available now at \u003ca href=\"https://phoenix.new\"\u003ephoenix.new\u003c/a\u003e, with continued updates planned throughout 2025.\u003c/p\u003e\u003c/div\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Robert-Krzaczyński\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRobert Krzaczyński\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-22T00:00:00Z",
  "modifiedTime": null
}
