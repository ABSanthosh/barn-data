{
  "id": "133cbcf8-55a5-4b63-bf63-d1792d8dc344",
  "title": ".NET 10 Preview 5 Brings Blazor Observability, XAML Simplification and More",
  "link": "https://www.infoq.com/news/2025/06/dotnet-10-preview-5/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Earlier this month, Microsoft announced the release of .NET 10 Preview 5, delivering updates across multiple components, including ASP.NET Core, .NET MAUI, Windows Presentation Foundation (WPF), and Entity Framework Core, and more. As reported, this preview introduces new features and improvements to enhance developer productivity, application observability, and customization. By Almir Vuk",
  "author": "Almir Vuk",
  "published": "Sat, 28 Jun 2025 13:18:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "ASP.NET",
    ".NET 9",
    ".NET Core",
    ".NET 10",
    ".NET 8",
    ".NET MAUI",
    ".NET",
    "Development",
    "news"
  ],
  "byline": "Almir Vuk",
  "length": 5095,
  "excerpt": "Earlier this month, Microsoft announced the release of .NET 10 Preview 5, delivering updates across multiple components, including ASP.NET Core, .NET MAUI, Windows Presentation Foundation (WPF), and E",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250605075448/apple-touch-icon.png",
  "text": "Earlier this month, Microsoft announced the release of .NET 10 Preview 5, delivering updates across multiple components, including ASP.NET Core, .NET MAUI, Windows Presentation Foundation (WPF), and Entity Framework Core. As reported, this preview introduces new features and improvements aimed at enhancing developer productivity, application observability, and customization. Regarding ASP.NET Core, a new capability allows developers to configure custom security descriptors for HTTP.sys request queues via the RequestQueueSecurityDescriptor property in HttpSysOptions. As stated, this feature offers better control over access to request queues at the OS level. Additionally, validation resolver APIs supporting Minimal APIs have been marked as experimental to allow future modifications, though the top-level AddValidation APIs remain stable. OpenAPI generation has been improved with support for version 3.1. The release also extends metadata extraction from XML documentation, recognizing \u003creturns\u003e and \u003cresponse\u003e tags for response descriptions. Furthermore, the Blazor framework introduces a method for easier rendering of Not Found pages by specifying a NotFoundPage component in the router configuration. As mentioned in the release notes, this approach is prioritized over the older NotFound fragment and is now included in default project templates. \u003cRouter AppAssembly=\"@typeof(Program).Assembly\" NotFoundPage=\"typeof(Pages.NotFound)\"\u003e \u003cFound Context=\"routeData\"\u003e \u003cRouteView RouteData=\"@routeData\" /\u003e \u003cFocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" /\u003e \u003c/Found\u003e \u003cNotFound\u003eThis content will be ignored because we have NotFoundPage defined.\u003c/NotFound\u003e \u003c/Router\u003e Notable addition in the Preview 5 is the introduction of detailed metrics and tracing capabilities for Blazor apps. As noted, Metrics are published via dedicated meters for components, lifecycle events, and server circuits. Tracing uses a new Microsoft.AspNetCore.Components activity source includes detailed instrumentation for navigation, event handling, and circuit lifecycles. With a note that developers can enable these diagnostics by configuring OpenTelemetry to collect data from the corresponding sources and meters. builder.Services.ConfigureOpenTelemetryMeterProvider(meterProvider =\u003e { meterProvider.AddMeter(\"Microsoft.AspNetCore.Components\"); meterProvider.AddMeter(\"Microsoft.AspNetCore.Components.Lifecycle\"); meterProvider.AddMeter(\"Microsoft.AspNetCore.Components.Server.Circuits\"); }); builder.Services.ConfigureOpenTelemetryTracerProvider(tracerProvider =\u003e { tracerProvider.AddSource(\"Microsoft.AspNetCore.Components\"); }); In .NET MAUI, support has been added for XAML Global and Implicit Namespaces. These features simplify markup by allowing developers to use controls without specifying multiple xmlns declarations. A new global namespace can include custom views, converters, and third-party libraries, enabling cleaner and more maintainable XAML. Implicit namespaces can be activated through project properties, reducing the need for verbose declarations. However, Microsoft notes that tooling errors may occur while this feature remains in preview. For more information on these features, David Ortinau, Principal Product Manager at Microsoft, has published a dedicated blog post covering the latest updates in .NET MAUI. Another notable addition to .NET MAUI is the ability to intercept web requests in HybridWebView. This is now possible by handling the WebResourceRequested event, developers can alter or block requests, enabling scenarios such as injecting custom headers or serving local resources. \u003cHybridWebView WebResourceRequested=\"HybridWebView_WebResourceRequested\" /\u003e The update for .NET for Android and Apple platforms, such as iOS, macOS, and tvOS, primarily focuses on quality and stability improvements. Specific details are available in the respective GitHub repositories. WPF introduces a shorthand syntax for Grid.RowDefinitions and Grid.ColumnDefinitions, making XAML as explained, more concise, and this will improve Hot Reload support. Font and globalization enhancements include the addition of the simsun-extg font to improve rendering in East Asian languages. Also, the Fluent theme has been refined, addressing crashes and improving styling for RTL layouts. Performance gains were achieved by reducing memory allocations and removing unused code paths. Lastly, Entity Framework Core 10 Preview 5 brings the ability to define custom names for default constraints, providing more control over database schema generation. Developers can now assign constraint names directly in model configuration or enable automatic naming for all default constraints using UseNamedDefaultConstraints. For interested readers, full release notes with all updates, fixes, and known issues are available through Microsoft’s official documentation and GitHub repositories. About the Author Almir Vuk",
  "image": "https://res.infoq.com/news/2025/06/dotnet-10-preview-5/en/headerimage/twitter_card+%2853%29-1751110443955.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eEarlier this month, Microsoft announced the release of \u003ca href=\"https://github.com/dotnet/core/discussions/9927\"\u003e.NET 10 Preview 5\u003c/a\u003e, delivering updates across multiple components, including ASP.NET Core, .NET MAUI, Windows Presentation Foundation (WPF), and Entity Framework Core. As reported, this preview introduces new features and improvements aimed at enhancing developer productivity, application observability, and customization.\u003c/p\u003e\n\n\u003cp\u003eRegarding ASP.NET Core, a \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/aspnetcore.md#configure-custom-security-descriptors-for-httpsys-request-queues\"\u003enew capability\u003c/a\u003e allows developers to configure custom security descriptors for \u003cem\u003eHTTP.sys\u003c/em\u003e request queues via the \u003cem\u003eRequestQueueSecurityDescriptor\u003c/em\u003e property in \u003cem\u003eHttpSysOptions\u003c/em\u003e. As stated, this feature offers better control over access to request queues at the OS level.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/aspnetcore.md#validation-resolver-apis-marked-as-experimental\"\u003evalidation resolver \u003c/a\u003eAPIs supporting Minimal APIs have been marked as experimental to allow future modifications, though the top-level \u003cem\u003eAddValidation\u003c/em\u003e APIs remain stable.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.openapis.org/\"\u003eOpenAPI\u003c/a\u003e generation has been improved with support for version 3.1. The release also extends metadata extraction from \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/aspnetcore.md#openapi-metadata-from-xml-doc-comments\"\u003eXML documentation\u003c/a\u003e, recognizing \u003cem\u003e\u0026lt;returns\u0026gt;\u003c/em\u003e and \u003cem\u003e\u0026lt;response\u0026gt; \u003c/em\u003etags for response descriptions.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, the Blazor framework introduces a method for easier rendering of \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/aspnetcore.md#add-a-not-found-page-using-the-blazor-router\"\u003e\u003cem\u003eNot Found\u003c/em\u003e pages\u003c/a\u003e by specifying a \u003cem\u003eNotFoundPage\u003c/em\u003e component in the router configuration. As mentioned in the release notes, this approach is prioritized over the older \u003cem\u003eNotFound\u003c/em\u003e fragment and is now included in default project templates.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;Router AppAssembly=\u0026#34;@typeof(Program).Assembly\u0026#34; NotFoundPage=\u0026#34;typeof(Pages.NotFound)\u0026#34;\u0026gt;\n    \u0026lt;Found Context=\u0026#34;routeData\u0026#34;\u0026gt;\n        \u0026lt;RouteView RouteData=\u0026#34;@routeData\u0026#34; /\u0026gt;\n        \u0026lt;FocusOnNavigate RouteData=\u0026#34;@routeData\u0026#34; Selector=\u0026#34;h1\u0026#34; /\u0026gt;\n    \u0026lt;/Found\u0026gt;\n    \u0026lt;NotFound\u0026gt;This content will be ignored because we have NotFoundPage defined.\u0026lt;/NotFound\u0026gt;\n\u0026lt;/Router\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNotable addition in the Preview 5 is the introduction of detailed \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/aspnetcore.md#blazor-metrics-and-tracing\"\u003emetrics and tracing capabilities\u003c/a\u003e for Blazor apps. As noted, Metrics are published via dedicated meters for components, lifecycle events, and server circuits.\u003c/p\u003e\n\n\u003cp\u003eTracing uses a new \u003cem\u003eMicrosoft.AspNetCore.Components\u003c/em\u003e activity source includes detailed instrumentation for navigation, event handling, and circuit lifecycles.\u003c/p\u003e\n\n\u003cp\u003eWith a note that developers can enable these diagnostics by configuring OpenTelemetry to collect data from the corresponding sources and meters.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebuilder.Services.ConfigureOpenTelemetryMeterProvider(meterProvider =\u0026gt;\n{\n    meterProvider.AddMeter(\u0026#34;Microsoft.AspNetCore.Components\u0026#34;);\n    meterProvider.AddMeter(\u0026#34;Microsoft.AspNetCore.Components.Lifecycle\u0026#34;);\n    meterProvider.AddMeter(\u0026#34;Microsoft.AspNetCore.Components.Server.Circuits\u0026#34;);\n});\n\nbuilder.Services.ConfigureOpenTelemetryTracerProvider(tracerProvider =\u0026gt;\n{\n    tracerProvider.AddSource(\u0026#34;Microsoft.AspNetCore.Components\u0026#34;);\n});\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cbr/\u003e\nIn \u003ca href=\"http://\u0026lt;HybridWebView WebResourceRequested=\" hybridwebview_webresourcerequested=\"\"\u003e.NET MAUI\u003c/a\u003e, support has been added for \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/dotnetmaui.md#xaml-global-namespaces\"\u003eXAML Global\u003c/a\u003e and \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/dotnetmaui.md#xaml-global-namespaces\"\u003eImplicit Namespaces\u003c/a\u003e. These features simplify markup by allowing developers to use controls without specifying multiple \u003cem\u003exmlns\u003c/em\u003e declarations. A new global namespace can include custom views, converters, and third-party libraries, enabling cleaner and more maintainable XAML.\u003c/p\u003e\n\n\u003cp\u003eImplicit namespaces can be activated through project properties, reducing the need for verbose declarations. However, Microsoft notes that tooling errors may occur while this feature remains in preview.\u003c/p\u003e\n\n\u003cp\u003eFor more information on these features, \u003cem\u003e\u003ca href=\"https://devblogs.microsoft.com/dotnet/author/davidortinau/\"\u003eDavid Ortinau\u003c/a\u003e\u003c/em\u003e, Principal Product Manager at Microsoft, has published a \u003ca href=\"https://devblogs.microsoft.com/dotnet/simpler-xaml-in-dotnet-maui-10/\"\u003ededicated blog post \u003c/a\u003ecovering the latest updates in .NET MAUI.\u003c/p\u003e\n\n\u003cp\u003eAnother notable addition to .NET MAUI is the ability to intercept web requests in \u003cem\u003eHybridWebView\u003c/em\u003e. This is now possible by handling the \u003cem\u003eWebResourceRequested\u003c/em\u003e event, developers can alter or block requests, enabling scenarios such as injecting custom headers or serving local resources.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;HybridWebView WebResourceRequested=\u0026#34;HybridWebView_WebResourceRequested\u0026#34; /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe update for .NET for Android and Apple platforms, such as iOS, macOS, and tvOS, primarily focuses on quality and stability improvements. Specific details are available in the respective GitHub repositories.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/wpf.md\"\u003eWPF\u003c/a\u003e introduces a shorthand syntax for \u003cem\u003eGrid.RowDefinitions\u003c/em\u003e and \u003cem\u003eGrid.ColumnDefinitions\u003c/em\u003e, making XAML as explained, more concise, and this will improve Hot Reload support.\u003c/p\u003e\n\n\u003cp\u003eFont and globalization enhancements include the addition of the \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/wpf.md#font-and-globalization-updates\"\u003e\u003cem\u003esimsun-extg\u003c/em\u003e\u003c/a\u003e font to improve rendering in East Asian languages. Also, the \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/wpf.md#fluent-theme-improvements\"\u003eFluent theme\u003c/a\u003e has been refined, addressing crashes and improving styling for RTL layouts. Performance gains were achieved by reducing memory allocations and removing unused code paths.\u003c/p\u003e\n\n\u003cp\u003eLastly, \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview5/efcore.md#customdefaultconstraintnames\"\u003eEntity Framework Core 10\u003c/a\u003e Preview 5 brings the ability to define custom names for default constraints, providing more control over database schema generation. Developers can now assign constraint names directly in model configuration or enable automatic naming for all default constraints using \u003cem\u003eUseNamedDefaultConstraints\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor interested readers, \u003ca href=\"https://github.com/dotnet/core/discussions/9927\"\u003efull release notes\u003c/a\u003e with all updates, fixes, and known issues are available through \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-10/overview\"\u003eMicrosoft’s official documentation\u003c/a\u003e and \u003ca href=\"https://github.com/dotnet/core\"\u003eGitHub repositories\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Almir-Vuk\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAlmir Vuk\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-06-28T00:00:00Z",
  "modifiedTime": null
}
