{
  "id": "b3b4dba9-fe4c-43b9-919c-040d82e9de55",
  "title": "Announcing CodeQL Community Packs",
  "link": "https://github.blog/security/vulnerability-research/announcing-codeql-community-packs/",
  "description": "We are excited to introduce the new CodeQL Community Packs, a comprehensive set of queries and models designed to enhance your code analysis capabilities. These packs are tailored to augment… The post Announcing CodeQL Community Packs appeared first on The GitHub Blog.",
  "author": "Alvaro Munoz",
  "published": "Mon, 23 Dec 2024 17:00:46 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Security",
    "Vulnerability research",
    "CodeQL",
    "GitHub Security Lab"
  ],
  "byline": "Alvaro Munoz",
  "length": 9715,
  "excerpt": "We are excited to introduce the new CodeQL Community Packs, a comprehensive set of queries and models designed to enhance your code analysis capabilities. These packs are tailored to augment…",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "We are excited to introduce the new CodeQL Community Packs, a comprehensive set of queries and models designed to enhance your code analysis capabilities. These packs are tailored to augment the standard set of CodeQL queries, providing additional resources for security researchers and developers alike. Why? CodeQL is a semantic code analysis tool that allows developers to query their codebases as databases, enabling the identification of vulnerabilities, bugs, and patterns efficiently. The standard set of CodeQL queries is focused on accuracy and low false positive rates, which is ideal for integration into CI/CD pipelines where alerts are primarily handled by developers. However, when alerts are operated by security engineers or researchers, the balance between false positives and false negatives can be adjusted to prioritize low false negatives, ensuring no bugs are left behind—albeit at the cost of more triaging. What? The CodeQL Community Packs is a set of CodeQL packs to augment the standard set queries. They include three main types of packs: Model packs: these packs contain additional models of Taint Tracking sources, sinks, and summaries for libraries and frameworks that are not supported by the default suites. Query packs: these packs contain additional security and audit queries to help identify potential vulnerabilities and improve code quality. Library packs: designed to be used by query packs, these packs do not contain queries themselves but provide essential libraries for more comprehensive analysis. How? The GitHub Security Lab has been extensively using these packs for the last few years and as our records show, they turned out to be very fruitful. In addition to the additional queries and models provided by the community packs, we have also been using the audit queries, which proved invaluable when running deep-dive manual code reviews, such as the ones we did for Datahub and Home Assistant. Being able to list all the files which introduced untrusted data into the application or that perform security-relevant operations was really helpful when exploring unfamiliar huge codebases, such as the Home Assistant one. The CodeQL Community Packs offer a variety of additional queries and models for languages, such as Java, C#, and Python. These packs are designed to move the Signal to Noise (SNR) ratio closer to the low false negatives end of the spectrum, making them particularly useful for security researchers. For example, the Java packs include: Java queries CVEs: queries for known CVEs such as Log4Shell. Security: dozens of new security queries contributed by CodeQL engineers and security researchers from the GitHub Security Lab, but also by the broader community of security researchers. Audit Exploration: queries to list all files, dependencies, untrusted data entry points, and hazardous sinks. Audit Templates: templates to build your own taint tracking queries, explore data paths, or “hoist” sinks to public method parameters. Library sources: special queries designed to find third-party APIs called with untrusted data. Java extension models This pack contains additional models which define additional remote flow sources, summaries and sinks for hundreds of APIs. Java libraries A collection of predicates and classes used by Java queries. Library extension models Additional threat model pack which defines library API method parameters as a source of untrusted data. Library extension models Remember Log4Shell? It was relatively easy for a SAST tool to detect, as the JNDI injection sink was well-known and covered by existing CodeQL models at that time. However, CodeQL’s default threat model, like most SAST tools, is based on modeling untrusted data as data that comes from the network. Therefore, CodeQL could have reported Log4Shell if we had analyzed an application that took untrusted data from the network (for example, a web application) and passed this untrusted data to Log4J logger methods. To enable CodeQL to report such a data flow path, we would have needed to provide CodeQL with the source code of both the web application and Log4J. Could we have reported Log4Shell by analyzing only the Log4J source code? Certainly! But we would have needed a different threat model, one in which the arguments of logger methods such as info or error were considered sources of untrusted data. But how could CodeQL know that these methods could introduce untrusted data in the first place? To support such a threat model, we developed the library source packs. We analyzed thousands of applications that took untrusted data and passed it to third-party APIs (such as Log4J’s error method). This analysis resulted in a list of third-party library methods used in real applications that are passed untrusted data. Once we collected this list, which contained API methods such as Log4J’s AbstractLogger.error, we used it to define new sources of untrusted data to be used when scanning library code, such as Log4J code. By doing this with Log4J code, we were able to first identify that logger methods can be called with untrusted data from network requests and second, report a JNDI injection in Log4J code when using the new library source QL packs! Exploration queries Reviewing a new, unfamiliar codebase is a difficult and lengthy process. Reducing the review surface to the most significant and relevant files is crucial to making this process as efficient as possible. When faced with similar reviews, the GitHub Security Lab likes to first map out the new codebase. We do this by listing all the entry points where potentially untrusted data enters the application and identifying operations that can be hazardous, such as file reads/writes, deserialization operations, or network requests. To achieve this, we use the RemoteFlowSources.ql query, which provides a list of all places identified by CodeQL where untrusted data enters the application. We also use the HotSpots query, which returns a list of all hazardous sinks in the application, regardless of evidence of untrusted data flowing into them. In addition to providing a good initial heat map of the codebase, this approach helps us better understand how well CodeQL covers the used libraries and whether additional modeling is needed. How to use them? The community packs are regular CodeQL packs and can be used both as part of GitHub’s code scanning workflows and with the CodeQL CLI. To use the CodeQL community packs in code scanning, specify a with: packs: entry in the uses: github/codeql-action/init@v3 section of your CodeQL code scanning workflow. See the examples below. Adding the community packs library extension models to a scan: - name: Initialize CodeQL uses: github/codeql-action/init@v3 with: languages: java packs: githubsecuritylab/codeql-java-library-sources,githubsecuritylab/codeql-java-extensions Running the community packs additional security queries: - name: Initialize CodeQL uses: github/codeql-action/init@v3 with: languages: java queries: java packs: githubsecuritylab/codeql-java-queries Running the community packs additional security queries with the additional community packs extension models: - name: Initialize CodeQL uses: github/codeql-action/init@v3 with: languages: java queries: java packs: githubsecuritylab/codeql-java-extensions,githubsecuritylab/codeql-java-queries Similarly, you can use the community packs from the CLI. Adding the community packs library extension models to a scan: codeql database analyze --download \u003cCodeQL DB\u003e --model-packs githubsecuritylab/codeql-java-extensions --model-packs githubsecuritylab/codeql-java-library-sources codeql/java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents Running the community packs additional security queries: codeql database analyze --download \u003cCodeQL DB\u003e githubsecuritylab/codeql-java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents Running the community packs additional security queries with the additional community packs extension models: codeql database analyze --download db --model-packs githubsecuritylab/codeql-java-extensions githubsecuritylab/codeql-java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents How to contribute? The most important aspect of the community packs is the community involvement! Sharing your models and queries with the community is the best way to help secure the open source software we all depend on. Contributions can range from simple Model As Data (MaD) lines to existing extension files or even the creation of new queries that model new vulnerability classes. Every contribution is welcome! Written by Related posts Uncovering GStreamer secrets In this post, I’ll walk you through the vulnerabilities I uncovered in the GStreamer library and how I built a custom fuzzing generator to target MP4 files. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Work at GitHub! Check out our current job openings. Apply now",
  "image": "https://github.blog/wp-content/uploads/2024/01/Security-DarkMode-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWe are excited to introduce the new \u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/\"\u003eCodeQL Community Packs\u003c/a\u003e, a comprehensive set of queries and models designed to enhance your code analysis capabilities. These packs are tailored to augment the standard set of CodeQL queries, providing additional resources for security researchers and developers alike.\u003c/p\u003e\n\u003ch2 id=\"why\" id=\"why\"\u003eWhy?\u003ca href=\"#why\" aria-label=\"Why?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCodeQL is a semantic code analysis tool that allows developers to query their codebases as databases, enabling the identification of vulnerabilities, bugs, and patterns efficiently.\u003c/p\u003e\n\u003cp\u003eThe standard set of CodeQL queries is focused on accuracy and low false positive rates, which is ideal for integration into CI/CD pipelines where alerts are primarily handled by developers. However, when alerts are operated by security engineers or researchers, the balance between false positives and false negatives can be adjusted to prioritize low false negatives, ensuring no bugs are left behind—albeit at the cost of more triaging.\u003c/p\u003e\n\u003ch2 id=\"what\" id=\"what\"\u003eWhat?\u003ca href=\"#what\" aria-label=\"What?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe CodeQL Community Packs is a set of CodeQL packs to augment the standard set queries. They include three main types of packs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModel packs\u003c/strong\u003e: these packs contain additional models of Taint Tracking sources, sinks, and summaries for libraries and frameworks that are not supported by the default suites.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eQuery packs\u003c/strong\u003e: these packs contain additional security and audit queries to help identify potential vulnerabilities and improve code quality.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLibrary packs\u003c/strong\u003e: designed to be used by query packs, these packs do not contain queries themselves but provide essential libraries for more comprehensive analysis.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"how\" id=\"how\"\u003eHow?\u003ca href=\"#how\" aria-label=\"How?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe GitHub Security Lab has been extensively using these packs for the last few years and \u003ca href=\"https://securitylab.github.com/codeql-wall-of-fame/\"\u003eas our records show\u003c/a\u003e, they turned out to be very fruitful.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/12/381-vulnerabilities.png?w=683\u0026amp;resize=683%2C529\" alt=\"Badge that says 381 vulnerabilities found with the help of CodeQL.\" width=\"683\" height=\"529\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/12/381-vulnerabilities.png?w=683 683w, https://github.blog/wp-content/uploads/2024/12/381-vulnerabilities.png?w=300 300w\" sizes=\"auto, (max-width: 683px) 100vw, 683px\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn addition to the additional queries and models provided by the community packs, we have also been using the audit queries, which proved invaluable when running deep-dive manual code reviews, such as the ones we did for \u003ca href=\"https://github.blog/security/vulnerability-research/github-security-lab-audited-datahub-heres-what-they-found/\"\u003eDatahub\u003c/a\u003e and \u003ca href=\"https://github.blog/security/vulnerability-research/securing-our-home-labs-home-assistant-code-review/\"\u003eHome Assistant\u003c/a\u003e. Being able to list all the files which introduced untrusted data into the application or that perform security-relevant operations was really helpful when exploring unfamiliar huge codebases, such as the Home Assistant one.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/12/home-assistant-codebas.png?w=746\u0026amp;resize=746%2C198\" alt=\"Screenshot of the section \u0026#39;Analyzing the code base\u0026#39; from a blog post about Home Assistant.\" width=\"746\" height=\"198\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/12/home-assistant-codebas.png?w=746 746w, https://github.blog/wp-content/uploads/2024/12/home-assistant-codebas.png?w=300 300w\" sizes=\"auto, (max-width: 746px) 100vw, 746px\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe CodeQL Community Packs offer a variety of additional queries and models for languages, such as Java, C#, and Python. These packs are designed to move the Signal to Noise (SNR) ratio closer to the low false negatives end of the spectrum, making them particularly useful for security researchers.\u003c/p\u003e\n\u003cp\u003eFor example, the Java packs include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/tree/main/java/src\"\u003eJava queries\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVEs\u003c/strong\u003e: queries for known CVEs such as Log4Shell.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity\u003c/strong\u003e: dozens of new security queries contributed by CodeQL engineers and security researchers from the GitHub Security Lab, but also by the broader community of security researchers.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAudit Exploration\u003c/strong\u003e: queries to list all files, dependencies, untrusted data entry points, and hazardous sinks.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAudit Templates\u003c/strong\u003e: templates to build your own taint tracking queries, explore data paths, or “hoist” sinks to public method parameters.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLibrary sources\u003c/strong\u003e: special queries designed to find third-party APIs called with untrusted data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/tree/main/java/ext\"\u003eJava extension models\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eThis pack contains additional models which define additional remote flow sources, summaries and sinks for hundreds of APIs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/blob/main/java/lib/qlpack.yml\"\u003eJava libraries\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eA collection of predicates and classes used by Java queries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/tree/main/java/ext-library-sources\"\u003eLibrary extension models\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eAdditional threat model pack which defines library API method parameters as a source of untrusted data. \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/12/file-tree.png?w=669\u0026amp;resize=669%2C1024\" alt=\"Screenshot of what is included in the Java CodeQL Community Pack\" width=\"669\" height=\"1024\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/12/file-tree.png?w=798 798w, https://github.blog/wp-content/uploads/2024/12/file-tree.png?w=196 196w, https://github.blog/wp-content/uploads/2024/12/file-tree.png?w=768 768w, https://github.blog/wp-content/uploads/2024/12/file-tree.png?w=669 669w\" sizes=\"auto, (max-width: 669px) 100vw, 669px\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"library-extension-models\" id=\"library-extension-models\"\u003eLibrary extension models\u003ca href=\"#library-extension-models\" aria-label=\"Library extension models\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRemember Log4Shell? It was relatively easy for a SAST tool to detect, as the JNDI injection sink was well-known and \u003ca href=\"https://github.com/github/codeql/blob/06b1d8e448c0f42848ca24500cac60ef6934f338/java/ql/lib/ext/javax.naming.model.yml\"\u003ecovered by existing CodeQL models\u003c/a\u003e at that time. However, CodeQL’s default threat model, like most SAST tools, is based on modeling untrusted data as data that comes from the network. Therefore, CodeQL could have reported Log4Shell if we had analyzed an application that took untrusted data from the network (for example, a web application) and passed this untrusted data to Log4J logger methods.\u003c/p\u003e\n\u003cp\u003eTo enable CodeQL to report such a data flow path, we would have needed to provide CodeQL with the source code of both the web application and Log4J. Could we have reported Log4Shell by analyzing only the Log4J source code? Certainly! But we would have needed a different threat model, one in which the arguments of logger methods such as \u003ccode\u003einfo\u003c/code\u003e or \u003ccode\u003eerror\u003c/code\u003e were considered sources of untrusted data. But how could CodeQL know that these methods could introduce untrusted data in the first place?\u003c/p\u003e\n\u003cp\u003eTo support such a threat model, we developed the library source packs. We analyzed thousands of applications that took untrusted data and passed it to third-party APIs (such as Log4J’s \u003ccode\u003eerror\u003c/code\u003e method). This analysis resulted in a list of third-party library methods used in real applications that are passed untrusted data.\u003c/p\u003e\n\u003cp\u003eOnce we collected this list, which contained API methods such as Log4J’s \u003ccode\u003eAbstractLogger.error\u003c/code\u003e, we used it to define new sources of untrusted data to be used when scanning library code, such as Log4J code. By doing this with Log4J code, we were able to first identify that logger methods can be called with untrusted data from network requests and second, report a JNDI injection in Log4J code when using the new library source QL packs!\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/12/kndi-lookup.png?w=1024\u0026amp;resize=1024%2C665\" alt=\"Screenshot of an open issue titled \u0026#39;JNDI-lookup with user-controlled name.\u0026#39; Beneath the title, there is a banner reading \u0026#39;Speed up the remediation of this alert with Copilot Autofix for CodeQL.\u0026#39;\" width=\"1024\" height=\"665\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/12/kndi-lookup.png?w=1185 1185w, https://github.blog/wp-content/uploads/2024/12/kndi-lookup.png?w=300 300w, https://github.blog/wp-content/uploads/2024/12/kndi-lookup.png?w=768 768w, https://github.blog/wp-content/uploads/2024/12/kndi-lookup.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"exploration-queries\" id=\"exploration-queries\"\u003eExploration queries\u003ca href=\"#exploration-queries\" aria-label=\"Exploration queries\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eReviewing a new, unfamiliar codebase is a difficult and lengthy process. Reducing the review surface to the most significant and relevant files is crucial to making this process as efficient as possible.\u003c/p\u003e\n\u003cp\u003eWhen faced with similar reviews, the GitHub Security Lab likes to first map out the new codebase. We do this by listing all the entry points where potentially untrusted data enters the application and identifying operations that can be hazardous, such as file reads/writes, deserialization operations, or network requests.\u003c/p\u003e\n\u003cp\u003eTo achieve this, we use the \u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/blob/main/java/src/audit/explore/RemoteFlowSources.ql\"\u003eRemoteFlowSources.ql\u003c/a\u003e query, which provides a list of all places identified by CodeQL where untrusted data enters the application. We also use the \u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/tree/main/ql/hotspots\"\u003eHotSpots\u003c/a\u003e query, which returns a list of all hazardous sinks in the application, regardless of evidence of untrusted data flowing into them.\u003c/p\u003e\n\u003cp\u003eIn addition to providing a good initial heat map of the codebase, this approach helps us better understand how well CodeQL covers the used libraries and whether additional modeling is needed.\u003c/p\u003e\n\u003ch3 id=\"how-to-use-them\" id=\"how-to-use-them\"\u003eHow to use them?\u003ca href=\"#how-to-use-them\" aria-label=\"How to use them?\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe community packs are regular \u003ca href=\"https://docs.github.com/code-security/codeql-cli/getting-started-with-the-codeql-cli/customizing-analysis-with-codeql-packs\"\u003eCodeQL packs\u003c/a\u003e and can be used both as part of GitHub’s code scanning workflows and with the CodeQL CLI.\u003c/p\u003e\n\u003cp\u003eTo use the CodeQL community packs in code scanning, specify a \u003ccode\u003ewith: packs:\u003c/code\u003e entry in the \u003ccode\u003euses: github/codeql-action/init@v3\u003c/code\u003e section of your CodeQL code scanning workflow. See the examples below.\u003c/p\u003e\n\u003cp\u003eAdding the community packs \u003cstrong\u003elibrary extension models\u003c/strong\u003e to a scan:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- name: Initialize CodeQL\n        uses: github/codeql-action/init@v3\n        with:\n          languages: java\n          packs: githubsecuritylab/codeql-java-library-sources,githubsecuritylab/codeql-java-extensions\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the community packs \u003cstrong\u003eadditional security queries\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- name: Initialize CodeQL\n        uses: github/codeql-action/init@v3\n        with:\n          languages: java          \n          queries: java\n          packs: githubsecuritylab/codeql-java-queries\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the community packs \u003cstrong\u003eadditional security queries\u003c/strong\u003e with the additional community packs \u003cstrong\u003eextension models\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- name: Initialize CodeQL\n        uses: github/codeql-action/init@v3\n        with:\n          languages: java          \n          queries: java\n          packs: githubsecuritylab/codeql-java-extensions,githubsecuritylab/codeql-java-queries\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, you can use the community packs from the CLI.\u003c/p\u003e\n\u003cp\u003eAdding the community packs \u003cstrong\u003elibrary extension models\u003c/strong\u003e to a scan:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecodeql database analyze --download \u0026lt;CodeQL DB\u0026gt; --model-packs githubsecuritylab/codeql-java-extensions --model-packs githubsecuritylab/codeql-java-library-sources codeql/java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the community packs additional \u003cstrong\u003esecurity queries\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecodeql database analyze --download \u0026lt;CodeQL DB\u0026gt; githubsecuritylab/codeql-java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the community packs additional \u003cstrong\u003esecurity queries\u003c/strong\u003e with the additional community packs \u003cstrong\u003eextension models\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecodeql database analyze --download db --model-packs githubsecuritylab/codeql-java-extensions githubsecuritylab/codeql-java-queries --format=sarif-latest --output=scan.sarif --sarif-add-file-contents\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"how-to-contribute\" id=\"how-to-contribute\"\u003eHow to contribute?\u003ca href=\"#how-to-contribute\" aria-label=\"How to contribute?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe most important aspect of the community packs is the community involvement! Sharing your models and queries with the community is the best way to help secure the open source software we all depend on. Contributions can range from simple \u003ca href=\"https://codeql.github.com/docs/codeql-language-guides/customizing-library-models-for-java-and-kotlin/\"\u003eModel As Data (MaD)\u003c/a\u003e lines to existing extension files or even the creation of new queries that model new vulnerability classes. \u003ca href=\"https://github.com/GitHubSecurityLab/CodeQL-Community-Packs/blob/main/CONTRIBUTING.md\"\u003eEvery contribution is welcome\u003c/a\u003e!\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/125701?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/125701?v=4\u0026amp;s=200\" alt=\"Alvaro Munoz\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\n\t\t\t\t\u003ch3\u003e\n\t\t\t\u003ca href=\"https://github.blog/security/vulnerability-research/uncovering-gstreamer-secrets/\" target=\"_self\"\u003e\n\t\t\t\tUncovering GStreamer secrets\t\t\t\u003c/a\u003e\n\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eIn this post, I’ll walk you through the vulnerabilities I uncovered in the GStreamer library and how I built a custom fuzzing generator to target MP4 files.\u003c/p\u003e\n\t\t\n\t\u003c/div\u003e\n\u003c/article\u003e\n\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Work at GitHub!\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tWork at GitHub!\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eCheck out our current job openings.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Apply now; ref_location:bottom recirculation;\" href=\"https://www.github.careers/careers-home\" target=\"_blank\" aria-label=\"Apply now\"\u003e\n\t\t\t\t\tApply now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-12-23T17:00:46Z",
  "modifiedTime": "2024-12-26T14:17:51Z"
}
