{
  "id": "1f71edd0-dd78-4051-87c3-f4e32a59fcf0",
  "title": "Open-sourcing Pyrefly: A faster Python type checker written in Rust",
  "link": "https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/",
  "description": "Back in 2017, engineers at Meta sought to create a type checker for Instagram’s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became Pyrefly.  Pyrefly is a new type checker and IDE experience for Python, written with Rust, and now available for the entire Python community to [...] Read More... The post Open-sourcing Pyrefly: A faster Python type checker written in Rust appeared first on Engineering at Meta.",
  "author": "",
  "published": "Thu, 15 May 2025 18:30:33 +0000",
  "source": "https://engineering.fb.com/feed/",
  "categories": [
    "Culture",
    "DevInfra",
    "Open Source",
    "Meta Tech Podcast"
  ],
  "byline": "By Pascal Hartig",
  "length": 1266,
  "excerpt": "Back in 2017, engineers at Meta sought to create a type checker for Instagram’s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became…",
  "siteName": "Engineering at Meta",
  "favicon": "",
  "text": "Back in 2017, engineers at Meta sought to create a type checker for Instagram’s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became Pyrefly.  Pyrefly is a new type checker and IDE experience for Python, written with Rust, and now available for the entire Python community to use! It’s open-source, supports both CLI usage and IDE integration. and is designed to help you catch errors before runtime in Python codebases of any size. On this episode of the Meta Tech Podcast, Pascal Hartig sits down with Maggie, Rebecca, and Neil — some of the team behind Pyrefly — to discuss this latest  release from Meta and how they built an incremental type checker that scales to mono repositories. Download or listen to the episode below: You can also find the episode wherever you get your podcasts, including: Spotify Apple Podcasts Pocket Casts The Meta Tech Podcast is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features. Send us feedback on Instagram, Threads, or X. And if you’re interested in learning more about career opportunities at Meta visit the Meta Careers page. Links Pyrefly Pyre Ruff PEP 484",
  "image": "https://engineering.fb.com/wp-content/uploads/2025/05/Meta-Tech-Podcast-episode-75-Pyrefly.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"single-wrapper\" tabindex=\"-1\"\u003e\n\t\t\u003cmain id=\"main\"\u003e\n\n\t\t\t\n\t\t\t\t\n\u003carticle id=\"post-22509\"\u003e\n\n\t\n\n\t\t\t\u003cfigure id=\"post-feat-image-container\"\u003e\n\t\t\t\t\u003cimg width=\"1200\" height=\"630\" src=\"https://engineering.fb.com/wp-content/uploads/2025/05/Meta-Tech-Podcast-episode-75-Pyrefly.png\" alt=\"\"/\u003e\t\t\t\t\t\t\u003c/figure\u003e\n\t\t\n\t\n\n\t\n\t\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003cspan\u003eBack in 2017, engineers at Meta sought to create a type checker for Instagram’s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became \u003ca href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python\"\u003ePyrefly. \u003c/a\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003ePyrefly is a new type checker and IDE experience for Python, written with Rust, and n\u003ca href=\"https://pyrefly.org\"\u003eow available for the entire Python community to use\u003c/a\u003e! It’s open-source, \u003cspan\u003esupports both CLI usage and IDE integration. and is designed to help you catch errors before runtime in Python codebases of any size.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eOn this episode of the Meta Tech Podcast, \u003ca href=\"https://www.threads.net/@passy_\" target=\"_blank\" rel=\"noopener\"\u003ePascal Hartig\u003c/a\u003e sits down with Maggie, Rebecca, and Neil \u003cspan\u003e— \u003c/span\u003esome of the team behind Pyrefly \u003cspan\u003e— \u003c/span\u003e to discuss this latest  release from Meta and how they built an incremental type checker that scales to mono repositories.\u003c/p\u003e\n\u003cp\u003eDownload or listen to the episode below:\u003c/p\u003e\n\n\u003cp\u003eYou can also find the episode wherever you get your podcasts, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://open.spotify.com/episode/4JhEid69dDIB2f82bkvjYu\" target=\"_blank\" rel=\"noopener\"\u003eSpotify\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://podcasts.apple.com/gb/podcast/open-sourcing-pyrefly-a-faster-python-type-checker/id1370910331?i=1000708623648\" target=\"_blank\" rel=\"noopener\"\u003eApple Podcasts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pca.st/v3dj86hr\" target=\"_blank\" rel=\"noopener\"\u003ePocket Casts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href=\"https://insidefacebookmobile.libsyn.com/\" target=\"_blank\" rel=\"noopener\"\u003eMeta Tech Podcast\u003c/a\u003e is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features.\u003c/p\u003e\n\u003cp\u003eSend us feedback on \u003ca href=\"https://instagram.com/metatechpod\" target=\"_blank\" rel=\"noopener\"\u003eInstagram\u003c/a\u003e, \u003ca href=\"https://threads.net/@metatechpod\" target=\"_blank\" rel=\"noopener\"\u003eThreads\u003c/a\u003e, or \u003ca href=\"https://twitter.com/metatechpod\" target=\"_blank\" rel=\"noopener\"\u003eX\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd if you’re interested in learning more about career opportunities at Meta visit the \u003ca href=\"https://www.metacareers.com/?ref=engineering.fb.com\" target=\"_blank\" rel=\"noopener\"\u003eMeta Careers\u003c/a\u003e page.\u003c/p\u003e\n\u003ch4 dir=\"ltr\"\u003e\u003cstrong\u003eLinks\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli dir=\"ltr\" role=\"presentation\"\u003e\u003ca href=\"https://pyrefly.org/\"\u003ePyrefly\u003c/a\u003e\u003c/li\u003e\n\u003cli dir=\"ltr\" role=\"presentation\"\u003e\u003ca href=\"https://pyre-check.org/\"\u003ePyre\u003c/a\u003e\u003c/li\u003e\n\u003cli dir=\"ltr\" role=\"presentation\"\u003e\u003ca href=\"https://github.com/astral-sh/ruff\"\u003eRuff\u003c/a\u003e\u003c/li\u003e\n\u003cli dir=\"ltr\" role=\"presentation\"\u003e\u003ca href=\"https://peps.python.org/pep-0484/\"\u003ePEP 484\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\t\t\n\t\u003c/div\u003e\n\n\n\u003c/article\u003e\n\n\n\n\n\n\n\n\n\t\t\t\t\t\n\t \n\n\t\t\n\t\t\t\t\n\t\t\t\n\t\t\u003c/main\u003e\n\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-05-15T18:30:33Z",
  "modifiedTime": "2025-05-15T18:32:04Z"
}
