{
  "id": "3797972a-45dc-4f6c-9d99-e9422cfb556e",
  "title": "Automating with GitLab Duo, Part 3: Validating testing",
  "link": "https://about.gitlab.com/blog/2024/12/17/automating-with-gitlab-duo-part-3-validating-testing",
  "description": "",
  "author": "Byron Boots",
  "published": "2024-12-17T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Byron Boots",
  "length": 2786,
  "excerpt": "Discover what test we ran to validate the impact of GitLab Duo on our team’s automated testing – and the results we achieved.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "In previous entries in this series, we covered how we used GitLab Duo to generate tests for our code as well as what we learned while using GitLab Duo for generating automated tests. We also shared some of the ways we addressed making changes to GitLab Duo generated tests. This last article in the series will cover a test we ran to validate the impact of GitLab Duo on our team’s automated testing and discuss the impressive results we have achieved thus far. Validation testing results To validate that our usage of GitLab Duo to generate tests was adding value the way we expected, we challenged ourselves and GitLab Duo to replace and increase test coverage. The team removed all previously written tests to get our test coverage to 0% and then methodically went through the repository and created new test files to store GitLab Duo-generated tests. From this starting point, the team followed the steps outlined in the first blog to generate tests. Tests and test files were unmodified by humans to provide a stable control group and a Tests Generated by Duo comment at the top of them were suffixed by duo.py to indicate where the tests came from. All iterations of the tests were only done through interactions with GitLab Duo through the Generate Tests and GitLab Duo Chat window as outlined in the second blog in the series. As we shared, we requested GitLab Duo to make updates based on encountered errors, test failures, and example code snippets for GitLab Duo to use as added context. At all times. when testing with GitLab Duo, we were running tests and coverage reports so we could see if our GitLab Duo-generated tests were increasing testing coverage and adding value as we expected. Taking advantage of GitLab's test coverage visualization, we were able to continuously monitor the results of our work. Ultimately, after using GitLab Duo to regenerate tests for code previously covered through our mostly manual testing, we were able to achieve test coverage of 84%. This was a great accomplishment for the team because: It was a significant improvement from prior coverage, which was at 74%. It took approximately two days by one engineer to achieve 84%, compared to the approximately four weeks across multiple engineers that the 74% had taken. Since this experiment, the team has increased coverage even further to 89% with the help of GitLab Duo, while continuing to introduce new features. Using GitLab Duo allowed for increased testing efficiency and coverage, and also allowed developers with lower context around existing code to write valuable tests, quickly. This has resulted in increased confidence on the team to develop new features without worrying about introducing errors. If you'd like to try GitLab Duo, sign up for a free, 60-day trial today!",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/3LZkiDjHLjhqEkvOvBsVKp/865f3b30b23c6b0be52fe3303de0266e/blog-image-template-1800x945__4_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-af247218=\"\" data-v-c7882276=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eIn previous entries in this series, we covered \u003ca href=\"https://about.gitlab.com/blog/2024/12/02/automating-with-gitlab-duo-part-1-generating-tests/\"\u003ehow we used GitLab Duo to generate tests for our code\u003c/a\u003e as well as \u003ca href=\"https://about.gitlab.com/blog/2024/12/10/automating-with-gitlab-duo-part-2-complex-testing/\"\u003ewhat we learned while using GitLab Duo for generating automated tests\u003c/a\u003e. We also shared some of the ways we addressed making changes to GitLab Duo generated tests. This last article in the series will cover a test we ran to validate the impact of GitLab Duo on our team’s automated testing and discuss the impressive results we have achieved thus far.\u003c/p\u003e\n\u003ch3 id=\"validation-testing-results\" tabindex=\"-1\"\u003eValidation testing results \u003ca href=\"#validation-testing-results\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo validate that our usage of GitLab Duo to generate tests was adding value the way we expected, we challenged ourselves and GitLab Duo to replace and increase test coverage. The team removed all previously written tests to get our test coverage to 0% and then methodically went through the repository and created new test files to store GitLab Duo-generated tests.\u003c/p\u003e\n\u003cp\u003eFrom this starting point, the team followed the steps outlined in \u003ca href=\"https://about.gitlab.com/blog/2024/12/02/automating-with-gitlab-duo-part-1-generating-tests/\"\u003ethe first blog\u003c/a\u003e to generate tests. Tests and test files were unmodified by humans to provide a stable control group and a \u003ccode\u003eTests Generated by Duo\u003c/code\u003e comment at the top of them were suffixed by \u003ccode\u003eduo.py\u003c/code\u003e to indicate where the tests came from.\u003c/p\u003e\n\u003cp\u003eAll iterations of the tests were only done through interactions with GitLab Duo through the \u003ccode\u003eGenerate Tests\u003c/code\u003e and GitLab Duo Chat window as outlined in \u003ca href=\"https://about.gitlab.com/blog/2024/12/10/automating-with-gitlab-duo-part-2-complex-testing/\"\u003ethe second blog in the series\u003c/a\u003e. As we shared, we requested GitLab Duo to make updates based on encountered errors, test failures, and example code snippets for GitLab Duo to use as added context.\u003c/p\u003e\n\u003cp\u003eAt all times. when testing with GitLab Duo, we were running tests and coverage reports so we could see if our GitLab Duo-generated tests were increasing testing coverage and adding value as we expected. Taking advantage of \u003ca href=\"https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization/\"\u003eGitLab\u0026#39;s test coverage visualization\u003c/a\u003e, we were able to continuously monitor the results of our work.\u003c/p\u003e\n\u003cp\u003eUltimately, after using GitLab Duo to regenerate tests for code previously covered through our mostly manual testing, we were able to achieve test coverage of 84%. This was a great accomplishment for the team because:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt was a significant improvement from prior coverage, which was at 74%.\u003c/li\u003e\n\u003cli\u003eIt took approximately two days by one engineer to achieve 84%, compared to the approximately four weeks across multiple engineers that the 74% had taken.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSince this experiment, the team has increased coverage even further to 89% with the help of GitLab Duo, while continuing to introduce new features.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4LEGVc0QFPMtBF286gqjcT/538103d1d316c306b2849e78f09061b0/image2.png\" alt=\"image of achievements\"/\u003e\u003c/p\u003e\n\u003cp\u003eUsing GitLab Duo allowed for increased testing efficiency and coverage, and also allowed developers with lower context around existing code to write valuable tests, quickly. This has resulted in increased confidence on the team to develop new features without worrying about introducing errors.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you\u0026#39;d like to \u003ca href=\"https://about.gitlab.com/solutions/gitlab-duo-pro/sales/\"\u003etry GitLab Duo\u003c/a\u003e, sign up for a free, 60-day trial today!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-17T00:00:00Z",
  "modifiedTime": null
}
