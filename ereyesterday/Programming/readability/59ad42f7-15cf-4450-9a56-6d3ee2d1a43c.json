{
  "id": "59ad42f7-15cf-4450-9a56-6d3ee2d1a43c",
  "title": "Distributed Multi-Modal Database Aerospike 8 Brings Support for Real-Time ACID Transactions",
  "link": "https://www.infoq.com/news/2025/02/aerospike-database-8-acid/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Aerospike has announced version 8.0 of its distributed multi-modal database, bringing support for distributed ACID transactions. This enables large-scale online transaction processing (OLTP) applications like banking, e-commerce, inventory management, health care, order processing, and more, says the company. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Sun, 16 Feb 2025 15:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "OLTP",
    "Distributed Systems",
    "NoSQL",
    "Database",
    "Transactions",
    "AI, ML \u0026 Data Engineering",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3293,
  "excerpt": "Aerospike has announced version 8.0 of its distributed multi-modal database, bringing support for distributed ACID transactions. This enables large-scale online transaction processing (OLTP) applicati",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250213201535/apple-touch-icon.png",
  "text": "Aerospike has announced version 8.0 of its distributed multi-modal database, bringing support for distributed ACID transactions. This enables large-scale online transaction processing (OLTP) applications like banking, e-commerce, inventory management, health care, order processing, and more, says the company. As Aerospike director of product Ronen Botzer explains, large-scale applications all require some horizontal scaling to support concurrent load and reduce latency, which inevitably brings the CAP Theorem into play. The CAP theorem states that when a network partitions due to some failure, a distributed system may be either consistent or available. In contrast, both of these properties can be guaranteed in the absence of partitions. For distributed database systems, the theorem led to RDBMS usually choosing consistency via ACID, with NoSQL databases favoring availability following the BASE paradigm. Belonging to the NoSQL camp, Aerospike was born as an AP (available and partition-tolerant) datastore. Later, it introduced support for ACID with its fourth release by allowing developers to select whether a namespace runs in a high-availability AP mode or a high-performance CP mode. CP mode in Aerospike is known as strong consistency (SC) and provides sequential consistency and linearizable reads, guaranteeing consistency for single objects. While Aerospike pre-8.0 has been great at satisfying the requirements of internet applications [...] limiting SC mode to single-record and batched commands left something to be desired. The denormalization approach works well in a system where objects are independent of each other [...] but in many applications, objects actually do have relationships between them. As Botzer explained, the existence of relationships between objects makes transactions necessary, and many developers had to build their own transaction mechanism on top of a distributed database. This is why Aerospike built native distributed transaction capabilities into Database 8, which meant providing strict serializability for multi-record updates and doing this without hampering performance. Aerospike distributed transactions have a cost, which includes four extra writes and one extra read, so it is important to understand the performance implications they have. Tests based on Luis Rocha’s Chinook database showed results in line with those extra operations, meaning that smaller transactions are affected most while overhead is amortized in larger ones. All in all, says Botzer, Transactions perform well when used judiciously together with single-record read and write workloads. ACID transactions display properties designed to ensure the reliability and consistency of database transactions, i.e., atomicity, consistency, isolation, and durability. They guarantee that database operations are executed correctly. If there is any failure, the database can recover to a previous state without losing any data or impacting the consistency of the data. BASE systems opt instead for being Basically Available, Soft-stated, and Eventually consistent, thus giving up on consistency. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/02/aerospike-database-8-acid/en/headerimage/aerospike-8-acid-1739716522803.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://aerospike.com/press-release/aerospike-8-delivers-the-first-real-time-distributed-acid-transaction/\"\u003eAerospike has announced version 8.0 of its distributed multi-modal database\u003c/a\u003e, bringing support for distributed ACID transactions. This enables large-scale online transaction processing (OLTP) applications like banking, e-commerce, inventory management, health care, order processing, and more, says the company.\u003c/p\u003e\n\n\u003cp\u003eAs Aerospike director of product Ronen Botzer explains, large-scale applications all require some horizontal scaling to support concurrent load and reduce latency, which inevitably brings the \u003ca href=\"https://en.wikipedia.org/wiki/CAP_theorem\"\u003eCAP Theorem\u003c/a\u003e into play.\u003c/p\u003e\n\n\u003cp\u003eThe CAP theorem states that when a network partitions due to some failure, a distributed system may be either consistent or available. In contrast, both of these properties can be guaranteed in the absence of partitions. \u003ca href=\"http://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed\"\u003eFor distributed database systems, the theorem led to RDBMS usually choosing consistency via ACID, with NoSQL databases favoring availability\u003c/a\u003e following the BASE paradigm.\u003c/p\u003e\n\n\u003cp\u003eBelonging to the NoSQL camp, Aerospike was born as an AP (available and partition-tolerant) datastore. Later, it introduced support for ACID with its fourth release by allowing developers to select whether a namespace runs in a high-availability AP mode or a high-performance CP mode. CP mode in Aerospike is known as strong consistency (SC) and provides sequential consistency and linearizable reads, guaranteeing consistency for single objects.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhile Aerospike pre-8.0 has been great at satisfying the requirements of internet applications [...] limiting SC mode to single-record and batched commands left something to be desired. The denormalization approach works well in a system where objects are independent of each other [...] but in many applications, objects actually do have relationships between them.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs Botzer explained, the existence of relationships between objects makes transactions necessary, and many developers had to build their own transaction mechanism on top of a distributed database. This is why Aerospike built native distributed transaction capabilities into Database 8, which meant providing \u003ca href=\"https://jepsen.io/consistency/models/strong-serializable\"\u003estrict serializability\u003c/a\u003e for multi-record updates and doing this without hampering performance.\u003c/p\u003e\n\n\u003cp\u003eAerospike distributed transactions have a cost, which includes four extra writes and one extra read, so it is important to understand the performance implications they have. Tests based on \u003ca href=\"https://github.com/lerocha/chinook-database\"\u003eLuis Rocha’s Chinook\u003c/a\u003e database showed results in line with those extra operations, meaning that smaller transactions are affected most while overhead is amortized in larger ones. All in all, says Botzer,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTransactions perform well \u003ca href=\"https://aerospike.com/docs/server/guide/transactions-create#best-practices\"\u003ewhen used judiciously\u003c/a\u003e together with single-record read and write workloads.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eACID transactions display properties designed to ensure the reliability and consistency of database transactions, i.e., atomicity, consistency, isolation, and durability. They guarantee that database operations are executed correctly. If there is any failure, the database can recover to a previous state without losing any data or impacting the consistency of the data. BASE systems opt instead for being Basically Available, Soft-stated, and Eventually consistent, thus giving up on consistency.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-02-16T00:00:00Z",
  "modifiedTime": null
}
