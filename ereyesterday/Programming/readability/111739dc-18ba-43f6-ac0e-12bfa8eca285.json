{
  "id": "111739dc-18ba-43f6-ac0e-12bfa8eca285",
  "title": "The Insane Innovation of TI Calculator Hobbyists",
  "link": "https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/",
  "description": "Table of Contents The platform Programming model Software projects Phoenix Grayscale on the TI-84 Plus Game Boy emulator for the TI-84 Plus Shells TI-84+ USB mass storage driver KnightOS The Axe Parser project Unity: Native code on the TI-81 Operating system hacks Signing keys arTIfice Whence from here? Further reading In the mid-to-late 2000s, you either knew, or were, that kid in grade school. You know. The one who could put games on your graphing calculator. You may be surprised to learn that some of these people didn’t exist totally in a vaccuum. There was in fact a thriving scene of hackers who had bent these calculators to their will, writing games, math software, and more generally hacking on the platform just for the sake of it. True to my interests, it’s all deeply embedded, pushing the limits of platforms that were obsolete when they were released. I’ll take you through some of the highlights of Texas Instruments calculator hacking done over the past two and a half decades, along with an explanation of why these projects are so technically impressive. This is xkcd #768. There are also 768 bytes in the RAM buffer used to hold TI display bitmaps. This is not a coincidence because nothing is ever a coincidence with xkcd. (source) Note Wow, it’s been a while since I’ve written anything. In the space of a year I’ve gotten a new job, bought a house, moved. Life comes at you fast. Thanks to everyone who has emailed to check on me—and I apologize for not being super responsive over email. I do plan to continue the articles I’ve started! The platform Throughout the 90s and 2000s, TI released a succession of z80-based graphing calculators. You might have heard of the z80—it was an improved version of the Intel 8080 developed by Zilog. Yeah. It’s old.1 They were quite nice 45 years ago when they were released! All TI calculators generally had similar low-end specs: z80 processor usually clocked at 8 or 10MHz—and note that the z80 can only retire one instruction every 4 cycles. 96x64 black and white LCD (a few models had a larger screen but this was by far the most common. The latest models finally have higher resolution color screens.) A link port which (ab)used the 2.5mm headphone jack connector Generally, 32KB of RAM, and on the 83+ and later, anywhere from 100KB to 2MB of flash storage (“archive”) TI’s operating system “TI-OS” (they call it “EOS” but nobody else does). TI-OS has: Arithmetic and graphing engine TI-BASIC scripting language On the models with flash, support for launching large “apps” stored exclusively in flash Needless to say, this is the very definition of a constrained environment. The most popular graphing calculators were of course the TI-83/84 Plus, which every American student for the past decade and a half has probably seen. I will use “TI-84 Plus” throughout here because it’s very likely the model you’re familiar with; however, it was more often referred to as the TI-83 Plus because they were basically identical. The 84 Plus had USB and a redesigned case, but the system was the same. Programming model The z80 assembly2 programming environment was pretty spartan: there was no supervisor or memory protection, so if you had a bug you were probably going to crash the calculator (the dreaded “RAM Cleared” message). The z80 is an 8-bit machine, with 16-bit pointers, so although archive was technically memory mapped, it wouldn’t all fit—it was actually paged in to a 16KB “window”: This diagram is heavily simplified, but you’ll notice the lack of any horsepower at all. There were several guides for learning assembly, but the best was by Sean McLaughlin, Learn TI-83 Plus Assembly in 28 Days. TI provided a very good SDK documentation about subroutines provided by TI-OS (and official support for Asm() programs), and with that you pretty much had free rein over the system. Software projects Those who followed calculator hacking news will surely recognize the individuals I’m calling out here, either by their name or, more likely, by their handle. For my own part, I was almost entirely a lurker, largely due to the influence of my parents who were not keen on talking to people online. (Remember, high school.) I was, however, a pretty good self-taught calculator programmer—more on that in a later article… Note A fair number of these links are starting to rot because development happened 20 years ago. Please do email me with corrections if you find a newly dead link. And of course massive kudos to the Internet Archive for preserving it all! Phoenix Easily the most famous3 graphing calculator game is Phoenix by Patrick Davidson. It’s a top-down space shoot-em-up similar to the arcade game Galaxian. The reason it is famous is not because it is fun—although it is—nor because it’s well implemented—although it is. Rather, this game is famous because it is one of the oldest, and Patrick and others have ported it to nearly every single z80 calculator ever released. Grayscale on the TI-84 Plus The first thing I remember being really wowed by was an RPG game called Desolate by Patrick Prendergast (tr1p1ea), which boasted four level grayscale. On top of that the game was not just a tech demo; it had a fully featured storyline and pretty good sprite art.4 Most emulators were able to detect that the application was doing grayscale and produce a clean rendering of it How was this possible on a device with only a black and white screen? The answer was that if you flickered pixels on and off fast enough, they would appear gray. Naïve attempts at this led to horrible jittery messes and found it difficult to get over 3 colors (black, white, gray). In contrast, Durk Kingma’s grayscale library that Desolate used achieved really nice 4-gray art by careful timing and by dithering the flickered pixels so that not all were on or off at once. Graphics consumed the majority of the compute budget for the game—but such is life for most video games! Game Boy emulator for the TI-84 Plus TI wasn’t the only company using z80 processors. The original Game Boy used them too! A natural question arises: maybe, possibly, could you run a Game Boy game on a calculator in some sort of hypervisor? Brendan Fletcher (calc84maniac) put a ton of engineering into TI-Boy SE, which does exactly that! A Game Boy cartridge is fairly large—Pokémon Red’s ROM is 1MB—so TI-Boy solves this by packing the ROM into a “shell” flash app using a PC program. Of course, you had to bring your own Game Boy cartridge ROM. The next problem is that many Game Boy cartridges have more RAM (up to 128KiB) than the TI-84 Plus (32KiB). (The Game Boy had only 8KiB built in, but cartridges could supply extra.) Here we’d seem to be stuck: how can you possibly emulate extra RAM? Xavier Andréani (critor) observed that TI calculators did in fact have extra RAM because the ASIC containing the z80 had more RAM than was exposed by default. TI-Boy reverse engineered the special commands to the hardware to bank-switch these into address space! The result is impressive: TI-Boy playing Legend of Zelda (via ticalc.org) Shells On calculators released before the TI-83 Plus, there was no official way to launch assembly language programs. These calculators had to be hacked using various techniques. The solution for end users was a shell - a launcher program that handled the annoying bits of transferring control from the OS. Many shells also provided additional routines a program could call. On the TI-82, the Ash shell accomplished this by sending a specially-crafted memory backup to the calculator. When the calculator next handled a keypress, the memory image redirected the CPU into the setup code. In a sense, this technique is one of the oldest exploits for any TI calculator. The shell that you are most likely to remember is MirageOS for the 84+. MirageOS was a popular tag-along with games shared peer-to-peer with a link cable, because the games needed it to run. It was also a flash app, so it persisted through RAM clears. I remember not being entirely clear on why its splash screen was so elaborate when I first encountered it, but now I appreciate the artwork! Shells got more elaborate over time, culminating in Doors CS by Christopher Mitchell (KermMartian), which had icons for assembly programs, a cursor-based UI, and a bunch of routines for programs to use. TI-84+ USB mass storage driver The 84+ had a really wacky USB port: it was an On-the-Go port, very obscure when it was released. This technically meant that the 84+ could act as a USB host. Dan Englender’s Usb8x supplied the missing driver code, allowing you to use a mouse (of questionable utility), keyboard, or more importantly, a flash drive. The calculator’s boot code provided low-level USB routines for get/send, but the impressive part is the upper USB stack including the mass storage and FAT16 driver “msd8x”—all, of course, in z80 assembly! Usb8x enabled, among other things, a hilarious demo: Michael Vincent may be one of the only people to have ever watched The Matrix on his calculator. (via ticalc.org) KnightOS Drew DeVault (SirCmpwn) was working on a promising project replacing TI-OS entirely with a from-scratch Unix-inspired, multitasking system called KnightOS. The cool part about this system is that it drew a lot from the multitasking paradigms we take for granted on a Mac or Linux box, but did it all with barely any help from the hardware. Programs were relocatable, there was preemptive multitasking, and there were loadable libraries that worked exactly like shared objects do in Unix. There was also a “real” filesystem with directories, flash wear leveling, and a protocol to connect to a computer. (It even has its own USB PID—0xCA1C.) Of course, the whole thing was all carefully implemented in z80 assembly, and kernel and library routines documented the contents of each register. It’s not vaporware; there’s autogenerated builds you can download and install on your calculator, and the source is on GitHub. Unfortunately its broad scope prevented it from achieving a stable release, but the bones are there and they are cool. I actually contributed a little to this project: I remember just having learned about synchronization primitives (mutexes and condition variables) and I easily knew enough about the z80 to be able to implement them for KnightOS. The Axe Parser project As you might imagine, there are two problems with writing assembly programs. First, you generally need a PC to do it properly, and most budding programmers were in school for most of their day. Second, and more importantly, z80 assembly is pretty arcane if you’re coming from BASIC. With the Axe Parser5, Kevin Horowitz (Quigibo) attempted to solve these problems by creating a new programming language that compiled into native code on the calculator. Axe is an app that reads a “TI-BASIC program” written with the built-in editor, but Axe redefined the grammar and semantics to provide a language that was very well suited to writing games. It’s quite an elegant solution: using the built-in editor means Axe didn’t have to ship an editor for its language. Rather, Axe is a compiler—it spends its engineering budget on producing better assembly code, with pages and pages of forum threads devoted to optimization. And further, Axe is extensible with new primitives provided as “Axioms”—plugins that further manipulate the grammar of the language. Here’s a hello world program in Axe. The Str1 token has been co-opted into a 16-bit pointer variable—this compiles on-calculator to an assembly program called HELLO! :.HELLO :\"Hello World\"→Str1 :Disp Str1 Unity: Native code on the TI-81 The TI-81 was an absolute potato of a calculator. Not only did it lack archive memory, it also lacked a link port, and lacked the Asm() command, meaning you were stuck with TI-BASIC. Stuck, that is, until Ben Moody (floppusmaximus) released Unity, a loader that exploited a buffer overflow in the primitive TI-OS, then installed itself to help load other assembly programs. With no link port, how did you get Unity or other assembly programs on the calculator? You typed them in, by hand! The installation instructions are reminiscent of typing in BASIC programs out of BYTE magazine: I suspect Randy Compton, who originally discovered the OS bug, did so by dumping the ROM with physical disassembly. z80 assembly is extremely amenable to reverse engineering because it’s hand-written. Operating system hacks While most projects ran on TI-OS, some ran up against TI-OS in order to make the hardware do things that TI preferred they didn’t do. There were scruples. Most people wanted to avoid the ire of Texas Instruments because (a) even the threat of lawyers tends to have a chilling effect on high school students and (b) people generally wanted to avoid besmirching the community’s image. And so there were certain things that were mostly considered off-limits, namely programs that were designed to help cheat on tests. Signing keys Really all anyone wanted to do was run their own code on their own hardware. TI had a crude but effective cryptographic signature check for apps and operating systems, which used the Rabin cryptosystem. They had released the signing key for TI-83 Plus apps as part of the SDK. However, the other keys that allowed signing OS images for the 83+, 84+, and apps and operating systems for the TI-89, were still secret. Using math against calculator enthusiasts—what did TI expect to happen?! Ben Moody realized that the state of the art in 2009 was enough to directly crack the ten year old 512-bit keys. His post (enigmatically titled “Fun Number Theory Facts”) revealed that he had found the prime factors of the public key for the 83+ operating system. Initially flabbergasted, the community threw together a BOINC cluster which cracked all the remaining keys in a few weeks without breaking a sweat. Texas Instruments threw a tantrum, lobbing legal threats that were, frankly, 100% bullshit abuses of the DMCA. The Electronic Frontier Foundation intervened on the hobbyists' behalf, explaining to TI that there is nothing illegal about knowing the prime factors of certain integers. The whole thing earned its own Wikipedia article. Today, you can easily find these keys on any enthusiast site, including right here. arTIfice Fairly recently (late 2020), TI decided what everyone really needed was a cold shower, and announced they’d be disabling all this assembly business with a software update for the TI-84+ CE (the newest color calculator), dubiously claiming that this would improve exam security, etc, etc.6 To quote Lionel Debroux: This slam shuts [sic] a golden age of over two decades (!) of native code being officially supported on at least one actively maintained TI graphing calculator. […] Like all true calculator enthusiasts, we have hard feelings about the matter. The community had always been nice to TI - nothing really damaging for TI’s business was ever released over 20+ years! - but a moral barrier has probably been broken today… As an olive branch they offered Python bindings; everyone immediately pointed out that Python is wicked slow in embedded environments and absolutely cannot replicate what native code can do.7 If you’ve read this far, you’ll note this isn’t the first time TI has been a little tone-deaf toward enthusiasts. Enter arTIfice8 - a proper jailbreak for these calculators. You simply install the CabriJr geometry app, and open a special data file with it, and suddenly you’re presented with a menu allowing you to run whatever you like. What’s cool about this is that it’s a jailbreak, not just a sweet hack that uses the hardware. Just like you may be familiar with jailbreaking an iPhone or Xbox, starting from within the sandbox and getting out, this abuses bugs in the wildly complicated CabriJr geometry app (signed and blessed to run by TI) to reenable arbitrary code execution and literally pop a shell or install hooks into the OS.9 The arTIfice exploit is just 927 bytes, and it packs a simple UI and loader in behind the shellcode. Being this small, the underlying exploit is probably the lowest hanging fruit of plenty of zero-days in this and other TI software. So yeah, now exams are secure, or something. Whence from here? For every project I listed, there were ten others that I didn’t. (And if I missed yours, I mean no disrespect!) The breadth and depth of tinkering is staggering: I haven’t even touched the scene for the ARM-based Nspire. There are always challengers to Texas Instruments' entrenchment in high schools; Casio in particular has made some attractive devices. There has been a modest amount of scene releases for Casio calculators as well. The startup Numworks makes calculators based on a very capable STM32F429 microcontroller. Until recently, the Numworks had an open-source operating system and I had half-hoped that it might spark a renaissance of handheld calculators. The hardware is available and pretty nice, but they’ve closed the source code license, so I don’t think it will see any grassroots adoption by the calculator scene. But no matter the platform, the steady stream of bored nerds in high school cannot be quenched, and they will have the support of smart engineers with free time. In the true hacker spirit, I suspect people will continue to push the boundaries of whatever hardware they find in their hands. Further reading Casual readers may wish to browse ticalc.org’s news (which goes back to 1997) for the most interesting news, or spelunk in their massive archives. Or, dive into the phpBB rabbit holes of the community’s forums, some dead and some still thriving! ticalc.org: one part forum, one part news source, three parts massive archive of nearly all software released for any TI calculator Cemetech: fairly formal, moderate amount of chatter but with pretty good signal to noise ratio and with very knowledgeable people. Still very active. Omnimaga: less formal, lots of projects, with a sprawling offtopic section and very elaborate forum signatures. Datamath: a large “online museum” with hardware teardowns, reverse engineering, and documentation of nearly every calculator ever released. TI-Planet: a French forum that was linked a lot, with a large downloads section and active community; unfortunately I don’t know much about it firsthand because I don’t speak French. calc.org (Wayback link): also used to be called Dimension-TI. A now-defunct forum and download host. Unfortunately it was before my time and I don’t know much about it. Oh, and other calculator nerds: keep me honest. Corrections welcome by comment or email. A popular hobbyist project is to build your own homebrew z80 computer, precisely because it is so simple that you can understand the foundations of the system. My favorite is probably Jim MacAurthur’s beautiful minimal z80 in a laser cut case with a hand crank to single-step instructions! ↩︎ The z80 generally made life pretty difficult for people who attempted to make a good C compiler for it. I believe I have the only remaining copy of HITECH-C for DOS, which was actually a decent C compiler. As I said, more on that in a later article. ↩︎ Your fame results may vary. Seemed this way to me, anyway. ↩︎ It’s good enough to have garnered at least a few fan ports to ZX Spectrum and some old Soviet computers. ↩︎ Wow, the Axe user manual takes me back—it was my first exposure to xkcd! ↩︎ Feels like they got advice from the Playstation Linux team. ↩︎ As far as I can tell, they are likely using MicroPython—implementing a Python from scratch would be a huge task—but I can’t find any MIT license disclosure. ↩︎ Holy moly does this page cause my CPU fans to spin… ↩︎ I’ll point out that all these hooks were already possible and remain supported by the OS itself; it’s how apps like Inequalz (which graphs inequalities) work - they hook the graph equation screens and the drawing routines, using official APIs. ↩︎",
  "author": "George Hilliard",
  "published": "Wed, 06 Oct 2021 08:42:00 -0500",
  "source": "https://www.thirtythreeforty.net/posts/index.xml",
  "categories": null,
  "byline": "",
  "length": 20013,
  "excerpt": "Never underestimate the determination of a kid who is time-rich and cash-poor",
  "siteName": "",
  "favicon": "https://www.thirtythreeforty.net/apple-touch-icon-144-precomposed.png",
  "text": "Table of Contents The platform Programming model Software projects Phoenix Grayscale on the TI-84 Plus Game Boy emulator for the TI-84 Plus Shells TI-84+ USB mass storage driver KnightOS The Axe Parser project Unity: Native code on the TI-81 Operating system hacks Signing keys arTIfice Whence from here? Further reading In the mid-to-late 2000s, you either knew, or were, that kid in grade school. You know. The one who could put games on your graphing calculator. You may be surprised to learn that some of these people didn’t exist totally in a vaccuum. There was in fact a thriving scene of hackers who had bent these calculators to their will, writing games, math software, and more generally hacking on the platform just for the sake of it. True to my interests, it’s all deeply embedded, pushing the limits of platforms that were obsolete when they were released. I’ll take you through some of the highlights of Texas Instruments calculator hacking done over the past two and a half decades, along with an explanation of why these projects are so technically impressive. This is xkcd #768. There are also 768 bytes in the RAM buffer used to hold TI display bitmaps. This is not a coincidence because nothing is ever a coincidence with xkcd. (source) Note Wow, it’s been a while since I’ve written anything. In the space of a year I’ve gotten a new job, bought a house, moved. Life comes at you fast. Thanks to everyone who has emailed to check on me—and I apologize for not being super responsive over email. I do plan to continue the articles I’ve started! The platform Throughout the 90s and 2000s, TI released a succession of z80-based graphing calculators. You might have heard of the z80—it was an improved version of the Intel 8080 developed by Zilog. Yeah. It’s old.1 They were quite nice 45 years ago when they were released! All TI calculators generally had similar low-end specs: z80 processor usually clocked at 8 or 10MHz—and note that the z80 can only retire one instruction every 4 cycles. 96x64 black and white LCD (a few models had a larger screen but this was by far the most common. The latest models finally have higher resolution color screens.) A link port which (ab)used the 2.5mm headphone jack connector Generally, 32KB of RAM, and on the 83+ and later, anywhere from 100KB to 2MB of flash storage (“archive”) TI’s operating system “TI-OS” (they call it “EOS” but nobody else does). TI-OS has: Arithmetic and graphing engine TI-BASIC scripting language On the models with flash, support for launching large “apps” stored exclusively in flash Needless to say, this is the very definition of a constrained environment. The most popular graphing calculators were of course the TI-83/84 Plus, which every American student for the past decade and a half has probably seen. I will use “TI-84 Plus” throughout here because it’s very likely the model you’re familiar with; however, it was more often referred to as the TI-83 Plus because they were basically identical. The 84 Plus had USB and a redesigned case, but the system was the same. Programming model The z80 assembly2 programming environment was pretty spartan: there was no supervisor or memory protection, so if you had a bug you were probably going to crash the calculator (the dreaded “RAM Cleared” message). The z80 is an 8-bit machine, with 16-bit pointers, so although archive was technically memory mapped, it wouldn’t all fit—it was actually paged in to a 16KB “window”: This diagram is heavily simplified, but you’ll notice the lack of any horsepower at all. There were several guides for learning assembly, but the best was by Sean McLaughlin, Learn TI-83 Plus Assembly in 28 Days. TI provided a very good SDK documentation about subroutines provided by TI-OS (and official support for Asm() programs), and with that you pretty much had free rein over the system. Software projects Those who followed calculator hacking news will surely recognize the individuals I’m calling out here, either by their name or, more likely, by their handle. For my own part, I was almost entirely a lurker, largely due to the influence of my parents who were not keen on talking to people online. (Remember, high school.) I was, however, a pretty good self-taught calculator programmer—more on that in a later article… Note A fair number of these links are starting to rot because development happened 20 years ago. Please do email me with corrections if you find a newly dead link. And of course massive kudos to the Internet Archive for preserving it all! Phoenix Easily the most famous3 graphing calculator game is Phoenix by Patrick Davidson. It’s a top-down space shoot-em-up similar to the arcade game Galaxian. The reason it is famous is not because it is fun—although it is—nor because it’s well implemented—although it is. Rather, this game is famous because it is one of the oldest, and Patrick and others have ported it to nearly every single z80 calculator ever released. Grayscale on the TI-84 Plus The first thing I remember being really wowed by was an RPG game called Desolate by Patrick Prendergast (tr1p1ea), which boasted four level grayscale. On top of that the game was not just a tech demo; it had a fully featured storyline and pretty good sprite art.4 Most emulators were able to detect that the application was doing grayscale and produce a clean rendering of it How was this possible on a device with only a black and white screen? The answer was that if you flickered pixels on and off fast enough, they would appear gray. Naïve attempts at this led to horrible jittery messes and found it difficult to get over 3 colors (black, white, gray). In contrast, Durk Kingma’s grayscale library that Desolate used achieved really nice 4-gray art by careful timing and by dithering the flickered pixels so that not all were on or off at once. Graphics consumed the majority of the compute budget for the game—but such is life for most video games! Game Boy emulator for the TI-84 Plus TI wasn’t the only company using z80 processors. The original Game Boy used them too! A natural question arises: maybe, possibly, could you run a Game Boy game on a calculator in some sort of hypervisor? Brendan Fletcher (calc84maniac) put a ton of engineering into TI-Boy SE, which does exactly that! A Game Boy cartridge is fairly large—Pokémon Red’s ROM is 1MB—so TI-Boy solves this by packing the ROM into a “shell” flash app using a PC program. Of course, you had to bring your own Game Boy cartridge ROM. The next problem is that many Game Boy cartridges have more RAM (up to 128KiB) than the TI-84 Plus (32KiB). (The Game Boy had only 8KiB built in, but cartridges could supply extra.) Here we’d seem to be stuck: how can you possibly emulate extra RAM? Xavier Andréani (critor) observed that TI calculators did in fact have extra RAM because the ASIC containing the z80 had more RAM than was exposed by default. TI-Boy reverse engineered the special commands to the hardware to bank-switch these into address space! The result is impressive: TI-Boy playing Legend of Zelda (via ticalc.org) Shells On calculators released before the TI-83 Plus, there was no official way to launch assembly language programs. These calculators had to be hacked using various techniques. The solution for end users was a shell - a launcher program that handled the annoying bits of transferring control from the OS. Many shells also provided additional routines a program could call. On the TI-82, the Ash shell accomplished this by sending a specially-crafted memory backup to the calculator. When the calculator next handled a keypress, the memory image redirected the CPU into the setup code. In a sense, this technique is one of the oldest exploits for any TI calculator. The shell that you are most likely to remember is MirageOS for the 84+. MirageOS was a popular tag-along with games shared peer-to-peer with a link cable, because the games needed it to run. It was also a flash app, so it persisted through RAM clears. I remember not being entirely clear on why its splash screen was so elaborate when I first encountered it, but now I appreciate the artwork! Shells got more elaborate over time, culminating in Doors CS by Christopher Mitchell (KermMartian), which had icons for assembly programs, a cursor-based UI, and a bunch of routines for programs to use. TI-84+ USB mass storage driver The 84+ had a really wacky USB port: it was an On-the-Go port, very obscure when it was released. This technically meant that the 84+ could act as a USB host. Dan Englender’s Usb8x supplied the missing driver code, allowing you to use a mouse (of questionable utility), keyboard, or more importantly, a flash drive. The calculator’s boot code provided low-level USB routines for get/send, but the impressive part is the upper USB stack including the mass storage and FAT16 driver “msd8x”—all, of course, in z80 assembly! Usb8x enabled, among other things, a hilarious demo: Michael Vincent may be one of the only people to have ever watched The Matrix on his calculator. (via ticalc.org) KnightOS Drew DeVault (SirCmpwn) was working on a promising project replacing TI-OS entirely with a from-scratch Unix-inspired, multitasking system called KnightOS. The cool part about this system is that it drew a lot from the multitasking paradigms we take for granted on a Mac or Linux box, but did it all with barely any help from the hardware. Programs were relocatable, there was preemptive multitasking, and there were loadable libraries that worked exactly like shared objects do in Unix. There was also a “real” filesystem with directories, flash wear leveling, and a protocol to connect to a computer. (It even has its own USB PID—0xCA1C.) Of course, the whole thing was all carefully implemented in z80 assembly, and kernel and library routines documented the contents of each register. It’s not vaporware; there’s autogenerated builds you can download and install on your calculator, and the source is on GitHub. Unfortunately its broad scope prevented it from achieving a stable release, but the bones are there and they are cool. I actually contributed a little to this project: I remember just having learned about synchronization primitives (mutexes and condition variables) and I easily knew enough about the z80 to be able to implement them for KnightOS. The Axe Parser project As you might imagine, there are two problems with writing assembly programs. First, you generally need a PC to do it properly, and most budding programmers were in school for most of their day. Second, and more importantly, z80 assembly is pretty arcane if you’re coming from BASIC. With the Axe Parser5, Kevin Horowitz (Quigibo) attempted to solve these problems by creating a new programming language that compiled into native code on the calculator. Axe is an app that reads a “TI-BASIC program” written with the built-in editor, but Axe redefined the grammar and semantics to provide a language that was very well suited to writing games. It’s quite an elegant solution: using the built-in editor means Axe didn’t have to ship an editor for its language. Rather, Axe is a compiler—it spends its engineering budget on producing better assembly code, with pages and pages of forum threads devoted to optimization. And further, Axe is extensible with new primitives provided as “Axioms”—plugins that further manipulate the grammar of the language. Here’s a hello world program in Axe. The Str1 token has been co-opted into a 16-bit pointer variable—this compiles on-calculator to an assembly program called HELLO! :.HELLO :\"Hello World\"→Str1 :Disp Str1 Unity: Native code on the TI-81 The TI-81 was an absolute potato of a calculator. Not only did it lack archive memory, it also lacked a link port, and lacked the Asm() command, meaning you were stuck with TI-BASIC. Stuck, that is, until Ben Moody (floppusmaximus) released Unity, a loader that exploited a buffer overflow in the primitive TI-OS, then installed itself to help load other assembly programs. With no link port, how did you get Unity or other assembly programs on the calculator? You typed them in, by hand! The installation instructions are reminiscent of typing in BASIC programs out of BYTE magazine: I suspect Randy Compton, who originally discovered the OS bug, did so by dumping the ROM with physical disassembly. z80 assembly is extremely amenable to reverse engineering because it’s hand-written. Operating system hacks While most projects ran on TI-OS, some ran up against TI-OS in order to make the hardware do things that TI preferred they didn’t do. There were scruples. Most people wanted to avoid the ire of Texas Instruments because (a) even the threat of lawyers tends to have a chilling effect on high school students and (b) people generally wanted to avoid besmirching the community’s image. And so there were certain things that were mostly considered off-limits, namely programs that were designed to help cheat on tests. Signing keys Really all anyone wanted to do was run their own code on their own hardware. TI had a crude but effective cryptographic signature check for apps and operating systems, which used the Rabin cryptosystem. They had released the signing key for TI-83 Plus apps as part of the SDK. However, the other keys that allowed signing OS images for the 83+, 84+, and apps and operating systems for the TI-89, were still secret. Using math against calculator enthusiasts—what did TI expect to happen?! Ben Moody realized that the state of the art in 2009 was enough to directly crack the ten year old 512-bit keys. His post (enigmatically titled “Fun Number Theory Facts”) revealed that he had found the prime factors of the public key for the 83+ operating system. Initially flabbergasted, the community threw together a BOINC cluster which cracked all the remaining keys in a few weeks without breaking a sweat. Texas Instruments threw a tantrum, lobbing legal threats that were, frankly, 100% bullshit abuses of the DMCA. The Electronic Frontier Foundation intervened on the hobbyists' behalf, explaining to TI that there is nothing illegal about knowing the prime factors of certain integers. The whole thing earned its own Wikipedia article. Today, you can easily find these keys on any enthusiast site, including right here. arTIfice Fairly recently (late 2020), TI decided what everyone really needed was a cold shower, and announced they’d be disabling all this assembly business with a software update for the TI-84+ CE (the newest color calculator), dubiously claiming that this would improve exam security, etc, etc.6 To quote Lionel Debroux: This slam shuts [sic] a golden age of over two decades (!) of native code being officially supported on at least one actively maintained TI graphing calculator. […] Like all true calculator enthusiasts, we have hard feelings about the matter. The community had always been nice to TI - nothing really damaging for TI’s business was ever released over 20+ years! - but a moral barrier has probably been broken today… As an olive branch they offered Python bindings; everyone immediately pointed out that Python is wicked slow in embedded environments and absolutely cannot replicate what native code can do.7 If you’ve read this far, you’ll note this isn’t the first time TI has been a little tone-deaf toward enthusiasts. Enter arTIfice8 - a proper jailbreak for these calculators. You simply install the CabriJr geometry app, and open a special data file with it, and suddenly you’re presented with a menu allowing you to run whatever you like. What’s cool about this is that it’s a jailbreak, not just a sweet hack that uses the hardware. Just like you may be familiar with jailbreaking an iPhone or Xbox, starting from within the sandbox and getting out, this abuses bugs in the wildly complicated CabriJr geometry app (signed and blessed to run by TI) to reenable arbitrary code execution and literally pop a shell or install hooks into the OS.9 The arTIfice exploit is just 927 bytes, and it packs a simple UI and loader in behind the shellcode. Being this small, the underlying exploit is probably the lowest hanging fruit of plenty of zero-days in this and other TI software. So yeah, now exams are secure, or something. Whence from here? For every project I listed, there were ten others that I didn’t. (And if I missed yours, I mean no disrespect!) The breadth and depth of tinkering is staggering: I haven’t even touched the scene for the ARM-based Nspire. There are always challengers to Texas Instruments' entrenchment in high schools; Casio in particular has made some attractive devices. There has been a modest amount of scene releases for Casio calculators as well. The startup Numworks makes calculators based on a very capable STM32F429 microcontroller. Until recently, the Numworks had an open-source operating system and I had half-hoped that it might spark a renaissance of handheld calculators. The hardware is available and pretty nice, but they’ve closed the source code license, so I don’t think it will see any grassroots adoption by the calculator scene. But no matter the platform, the steady stream of bored nerds in high school cannot be quenched, and they will have the support of smart engineers with free time. In the true hacker spirit, I suspect people will continue to push the boundaries of whatever hardware they find in their hands. Further reading Casual readers may wish to browse ticalc.org’s news (which goes back to 1997) for the most interesting news, or spelunk in their massive archives. Or, dive into the phpBB rabbit holes of the community’s forums, some dead and some still thriving! ticalc.org: one part forum, one part news source, three parts massive archive of nearly all software released for any TI calculator Cemetech: fairly formal, moderate amount of chatter but with pretty good signal to noise ratio and with very knowledgeable people. Still very active. Omnimaga: less formal, lots of projects, with a sprawling offtopic section and very elaborate forum signatures. Datamath: a large “online museum” with hardware teardowns, reverse engineering, and documentation of nearly every calculator ever released. TI-Planet: a French forum that was linked a lot, with a large downloads section and active community; unfortunately I don’t know much about it firsthand because I don’t speak French. calc.org (Wayback link): also used to be called Dimension-TI. A now-defunct forum and download host. Unfortunately it was before my time and I don’t know much about it. Oh, and other calculator nerds: keep me honest. Corrections welcome by comment or email. A popular hobbyist project is to build your own homebrew z80 computer, precisely because it is so simple that you can understand the foundations of the system. My favorite is probably Jim MacAurthur’s beautiful minimal z80 in a laser cut case with a hand crank to single-step instructions! ↩︎ The z80 generally made life pretty difficult for people who attempted to make a good C compiler for it. I believe I have the only remaining copy of HITECH-C for DOS, which was actually a decent C compiler. As I said, more on that in a later article. ↩︎ Your fame results may vary. Seemed this way to me, anyway. ↩︎ It’s good enough to have garnered at least a few fan ports to ZX Spectrum and some old Soviet computers. ↩︎ Wow, the Axe user manual takes me back—it was my first exposure to xkcd! ↩︎ Feels like they got advice from the Playstation Linux team. ↩︎ As far as I can tell, they are likely using MicroPython—implementing a Python from scratch would be a huge task—but I can’t find any MIT license disclosure. ↩︎ Holy moly does this page cause my CPU fans to spin… ↩︎ I’ll point out that all these hooks were already possible and remain supported by the OS itself; it’s how apps like Inequalz (which graphs inequalities) work - they hook the graph equation screens and the drawing routines, using official APIs. ↩︎",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n\u003clabel for=\"tocToggle\"\u003eTable of Contents\u003c/label\u003e\u003c/p\u003e\u003cnav id=\"TableOfContents\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#the-platform\"\u003eThe platform\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#programming-model\"\u003eProgramming model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#software-projects\"\u003eSoftware projects\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#phoenix\"\u003ePhoenix\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#grayscale-on-the-ti-84-plus\"\u003eGrayscale on the TI-84 Plus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#game-boy-emulator-for-the-ti-84-plus\"\u003eGame Boy emulator for the TI-84 Plus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#shells\"\u003eShells\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ti-84-usb-mass-storage-driver\"\u003eTI-84+ USB mass storage driver\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#knightos\"\u003eKnightOS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#the-axe-parser-project\"\u003eThe Axe Parser project\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#unity-native-code-on-the-ti-81\"\u003eUnity: Native code on the TI-81\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#operating-system-hacks\"\u003eOperating system hacks\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#signing-keys\"\u003eSigning keys\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#artifice\"\u003earTIfice\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#whence-from-here\"\u003eWhence from here?\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#further-reading\"\u003eFurther reading\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/nav\u003e\n\u003c/div\u003e\n\u003cp\u003eIn the mid-to-late 2000s, you either knew, or were, \u003cem\u003ethat kid\u003c/em\u003e in grade school.\nYou know. The one who could put games on your graphing calculator.\nYou may be surprised to learn that some of these people didn’t exist totally in a vaccuum.\nThere was in fact a thriving scene of hackers who had bent these calculators to their will, writing games, math software, and more generally \u003cem\u003ehacking\u003c/em\u003e on the platform just for the sake of it.\u003c/p\u003e\n\u003cp\u003eTrue to my interests, it’s all deeply embedded, pushing the limits of platforms that were obsolete when they were released.\nI’ll take you through some of the highlights of Texas Instruments calculator hacking done over the past two and a half decades, along with an explanation of \u003cem\u003ewhy\u003c/em\u003e these projects are so technically impressive.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/1996.png\" alt=\"College Board issues aside, I have fond memories of TI-BASIC, writing in it a 3D graphing engine and a stock market analyzer. With enough patience, I could make anything ... but friends. (Although with my chatterbot experiments, I certainly tried.)\"/\u003e\u003cfigcaption\u003e\n\u003cp\u003eThis is xkcd #768. There are also 768 bytes in the RAM buffer used to hold TI display bitmaps. This is not a coincidence because nothing is ever a coincidence with xkcd.\n\u003ca href=\"https://xkcd.com/768/\"\u003e(source)\u003c/a\u003e\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cblockquote\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e\u003cbr/\u003e\nWow, it’s been a while since I’ve written anything.\nIn the space of a year I’ve gotten a new job, bought a house, moved.\nLife comes at you fast.\nThanks to everyone who has emailed to check on me—and I apologize for not being super responsive over email.\nI do plan to continue the articles I’ve started!\n\u003c/blockquote\u003e\n\u003ch2 id=\"the-platform\"\u003eThe platform\u003c/h2\u003e\n\u003cp\u003eThroughout the 90s and 2000s, TI released a succession of z80-based graphing calculators.\nYou might have heard of the z80—it was an improved version of the Intel 8080 developed by Zilog.\nYeah. It’s old.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\nThey were quite nice \u003cem\u003e45 years ago\u003c/em\u003e when they were released!\nAll TI calculators generally had similar low-end specs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ez80 processor\u003c/strong\u003e usually clocked at 8 or 10MHz—and note that the z80 can only retire one instruction every 4 cycles.\u003c/li\u003e\n\u003cli\u003e96x64 black and white \u003cstrong\u003eLCD\u003c/strong\u003e (a few models had a larger screen but this was by far the most common. The latest models finally have higher resolution color screens.)\u003c/li\u003e\n\u003cli\u003eA \u003cstrong\u003elink port\u003c/strong\u003e which (ab)used the 2.5mm headphone jack connector\u003c/li\u003e\n\u003cli\u003eGenerally, \u003cstrong\u003e32KB of RAM\u003c/strong\u003e, and on the 83+ and later, anywhere from 100KB to 2MB of \u003cstrong\u003eflash storage\u003c/strong\u003e (“archive”)\u003c/li\u003e\n\u003cli\u003eTI’s operating system “TI-OS” (they call it “EOS” but nobody else does). TI-OS has:\n\u003cul\u003e\n\u003cli\u003eArithmetic and graphing engine\u003c/li\u003e\n\u003cli\u003eTI-BASIC scripting language\u003c/li\u003e\n\u003cli\u003eOn the models with flash, support for launching large “apps” stored exclusively in flash\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNeedless to say, this is the very definition of a constrained environment.\u003c/p\u003e\n\u003cp\u003eThe most popular graphing calculators were of course the TI-83/84 Plus, which every American student for the past decade and a half has probably seen.\nI will use “TI-84 Plus” throughout here because it’s very likely the model you’re familiar with; however, it was more often referred to as the TI-83 Plus because they were basically identical.\nThe 84 Plus had USB and a redesigned case, but the system was the same.\u003c/p\u003e\n\u003ch3 id=\"programming-model\"\u003eProgramming model\u003c/h3\u003e\n\u003cp\u003eThe z80 assembly\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e programming environment was pretty spartan: there was no supervisor or memory protection, so if you had a bug you were probably going to crash the calculator (the dreaded “RAM Cleared” message).\nThe z80 is an 8-bit machine, with 16-bit pointers, so although archive was technically memory mapped, it wouldn’t all fit—it was actually paged in to a 16KB “window”:\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/ti-z80.svg\" alt=\"This diagram is heavily simplified, but you\u0026amp;rsquo;ll notice the lack of any horsepower at all.\"/\u003e\u003cfigcaption\u003e\n\u003cp\u003eThis diagram is heavily simplified, but you’ll notice the lack of any horsepower at all.\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eThere were several guides for learning assembly, but the best was by Sean McLaughlin, \u003ca href=\"https://tutorials.eeems.ca/ASMin28Days/welcome.html\"\u003e\u003cem\u003eLearn TI-83 Plus Assembly in 28 Days\u003c/em\u003e\u003c/a\u003e.\nTI provided a very good \u003ca href=\"https://education.ti.com/en/guidebook/details/en/830D08FF31804AEAA2F03B8F5E89AD14/83psdk\"\u003eSDK documentation\u003c/a\u003e about subroutines provided by TI-OS (and official support for \u003ccode\u003eAsm()\u003c/code\u003e programs), and with that you pretty much had free rein over the system.\u003c/p\u003e\n\u003ch2 id=\"software-projects\"\u003eSoftware projects\u003c/h2\u003e\n\u003cp\u003eThose who followed calculator hacking news will surely recognize the individuals I’m calling out here, either by their name or, more likely, by their handle.\nFor my own part, I was almost entirely a lurker, largely due to the influence of my parents who were not keen on talking to people online.\n(Remember, high school.)\nI was, however, a pretty good self-taught calculator programmer—more on that in a later article…\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e\u003cbr/\u003e\nA fair number of these links are starting to rot because development happened 20 years ago. Please do email me with corrections if you find a newly dead link. And of course massive kudos to the Internet Archive for preserving it all!\n\u003c/blockquote\u003e\n\u003ch3 id=\"phoenix\"\u003ePhoenix\u003c/h3\u003e\n\u003cp\u003eEasily the most famous\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e graphing calculator game is \u003ca href=\"https://www.ocf.berkeley.edu/~pad/game-ti83p-phoenixz.html\"\u003e\u003cem\u003ePhoenix\u003c/em\u003e\u003c/a\u003e by \u003ca href=\"https://www.ocf.berkeley.edu/~pad/\"\u003ePatrick Davidson\u003c/a\u003e.\nIt’s a top-down space shoot-em-up similar to the arcade game Galaxian.\nThe reason it is famous is not because it is fun—although it is—nor because it’s well implemented—although it is.\nRather, this game is famous because it is one of the oldest, and Patrick and others have ported it to nearly every single z80 calculator ever released.\u003c/p\u003e\n\u003ch3 id=\"grayscale-on-the-ti-84-plus\"\u003eGrayscale on the TI-84 Plus\u003c/h3\u003e\n\u003cp\u003eThe first thing I remember being really wowed by was an RPG game called \u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/331/33153.html\"\u003e\u003cem\u003eDesolate\u003c/em\u003e\u003c/a\u003e by Patrick Prendergast (tr1p1ea), which boasted \u003cem\u003efour level grayscale\u003c/em\u003e.\nOn top of that the game was not just a tech demo; it had a fully featured storyline and pretty good sprite art.\u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/desolate.gif\" alt=\"Most emulators were able to detect that the application was doing grayscale and produce a clean rendering of it\"/\u003e\u003cfigcaption\u003e\n\u003cp\u003eMost emulators were able to detect that the application was doing grayscale and produce a clean rendering of it\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eHow was this possible on a device with only a black and white screen?\nThe answer was that if you flickered pixels on and off fast enough, they would \u003cem\u003eappear\u003c/em\u003e gray.\nNaïve attempts at this led to horrible jittery messes and found it difficult to get over 3 colors (black, white, gray).\nIn contrast, Durk Kingma’s \u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/295/29520.html\"\u003egrayscale library\u003c/a\u003e that \u003cem\u003eDesolate\u003c/em\u003e used achieved really nice 4-gray art by careful timing and by dithering the flickered pixels so that not all were on or off at once.\nGraphics consumed the majority of the compute budget for the game—but such is life for most video games!\u003c/p\u003e\n\u003ch3 id=\"game-boy-emulator-for-the-ti-84-plus\"\u003eGame Boy emulator for the TI-84 Plus\u003c/h3\u003e\n\u003cp\u003eTI wasn’t the only company using z80 processors.\nThe original Game Boy used them too!\nA natural question arises: maybe, possibly, could you run a Game Boy game on a calculator in some sort of hypervisor?\u003c/p\u003e\n\u003cp\u003eBrendan Fletcher (calc84maniac) put a \u003cem\u003eton\u003c/em\u003e of engineering into \u003ca href=\"https://github.com/calc84maniac/tiboyse\"\u003eTI-Boy SE\u003c/a\u003e, which does exactly that!\nA Game Boy cartridge is fairly large—\u003cem\u003ePokémon Red\u003c/em\u003e’s ROM is 1MB—so TI-Boy solves this by packing the ROM into a “shell” flash app using a PC program.\nOf course, you had to bring your own Game Boy cartridge ROM.\u003c/p\u003e\n\u003cp\u003eThe next problem is that many Game Boy cartridges have more RAM (up to 128KiB) than the TI-84 Plus (32KiB).\n(The Game Boy had only 8KiB built in, but cartridges could supply extra.)\nHere we’d seem to be stuck: how can you possibly emulate extra RAM?\u003c/p\u003e\n\u003cp\u003eXavier Andréani (critor) observed that TI calculators did in fact have extra RAM because the ASIC containing the z80 had more RAM than was exposed by default.\nTI-Boy reverse engineered the special commands to the hardware to bank-switch these into address space!\u003c/p\u003e\n\u003cp\u003eThe result is impressive:\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/ti-boy-se.gif\" alt=\"TI-Boy playing Legend of Zelda\"/\u003e\u003cfigcaption\u003e\n\u003cp\u003eTI-Boy playing \u003cem\u003eLegend of Zelda\u003c/em\u003e\n\u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/419/41990.html\"\u003e(via ticalc.org)\u003c/a\u003e\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003ch3 id=\"shells\"\u003eShells\u003c/h3\u003e\n\u003cp\u003eOn calculators released before the TI-83 Plus, there was no official way to launch assembly language programs.\nThese calculators had to be hacked using various techniques.\nThe solution for end users was a \u003cem\u003eshell\u003c/em\u003e - a launcher program that handled the annoying bits of transferring control from the OS.\nMany shells also provided additional routines a program could call.\u003c/p\u003e\n\u003cp\u003eOn the TI-82, the \u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/14/1411.html\"\u003eAsh shell\u003c/a\u003e accomplished this by sending a specially-crafted memory backup to the calculator.\nWhen the calculator next handled a keypress, the memory image redirected the CPU into the setup code.\nIn a sense, this technique is one of the oldest exploits for any TI calculator.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/mirageos.gif\"/\u003e\n\u003c/figure\u003e\n\u003cp\u003eThe shell that you are most likely to remember is MirageOS for the 84+.\nMirageOS was a popular tag-along with games shared peer-to-peer with a link cable, because the games needed it to run.\nIt was also a flash app, so it persisted through RAM clears.\nI remember not being entirely clear on why its splash screen was so elaborate when I first encountered it, but now I appreciate the artwork!\u003c/p\u003e\n\u003cp\u003eShells got more elaborate over time, culminating in \u003ca href=\"https://dcs.cemetech.net/index.php?title=Main_Page\"\u003eDoors CS\u003c/a\u003e by Christopher Mitchell (KermMartian), which had icons for assembly programs, a cursor-based UI, and a bunch of routines for programs to use.\u003c/p\u003e\n\u003ch3 id=\"ti-84-usb-mass-storage-driver\"\u003eTI-84+ USB mass storage driver\u003c/h3\u003e\n\u003cp\u003eThe 84+ had a really wacky USB port: it was an On-the-Go port, very obscure when it was released.\nThis technically meant that the 84+ could act as a USB host.\nDan Englender’s Usb8x supplied the missing driver code, allowing you to use a mouse (of questionable utility), keyboard, or more importantly, a flash drive.\u003c/p\u003e\n\u003cp\u003eThe calculator’s boot code provided low-level USB routines for get/send, but the impressive part is the upper USB stack including the mass storage and FAT16 driver “msd8x”—all, of course, \u003ca href=\"http://usb8x.sourceforge.net/\"\u003ein z80 assembly\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003eUsb8x enabled, among other things, a hilarious demo: Michael Vincent may be one of the only people to have ever watched \u003cem\u003eThe Matrix\u003c/em\u003e on his calculator.\u003c/p\u003e\n\u003cp\u003e\n\u003ciframe src=\"https://www.youtube.com/embed/L0EUP1pAW48\" allowfullscreen=\"\" title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.ticalc.org/archives/news/articles/13/130/130297.html\"\u003e(via ticalc.org)\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"knightos\"\u003eKnightOS\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://drewdevault.com/\"\u003eDrew DeVault\u003c/a\u003e (SirCmpwn) was working on a promising project \u003cem\u003ereplacing\u003c/em\u003e TI-OS entirely with a from-scratch Unix-inspired, multitasking system called \u003ca href=\"https://knightos.org/\"\u003eKnightOS\u003c/a\u003e.\nThe cool part about this system is that it drew a lot from the multitasking paradigms we take for granted on a Mac or Linux box, but did it all with barely any help from the hardware.\nPrograms were relocatable, there was preemptive multitasking, and there were loadable libraries that worked exactly like shared objects do in Unix.\nThere was also a “real” filesystem with directories, flash wear leveling, and a protocol to connect to a computer.\n(It even has its \u003ca href=\"https://pid.codes/1209/CA1C/\"\u003eown USB PID\u003c/a\u003e—\u003ccode\u003e0xCA1C\u003c/code\u003e.)\nOf course, the whole thing was all carefully implemented in z80 assembly, and kernel and library routines documented the contents of each register.\u003c/p\u003e\n\u003cp\u003eIt’s not vaporware; there’s autogenerated builds you can download and install on your calculator, and the source is \u003ca href=\"https://github.com/KnightOS/KnightOS\"\u003eon GitHub\u003c/a\u003e.\nUnfortunately its broad scope prevented it from achieving a stable release, but the bones are there and they are cool.\u003c/p\u003e\n\u003cp\u003eI actually contributed a little to this project: I remember just having learned about synchronization primitives (mutexes and condition variables) and I easily knew enough about the z80 to be able to \u003ca href=\"https://github.com/KnightOS/kernel/blob/master/src/00/concurrency.asm\"\u003eimplement them for KnightOS\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"the-axe-parser-project\"\u003eThe Axe Parser project\u003c/h3\u003e\n\u003cp\u003eAs you might imagine, there are two problems with writing assembly programs.\nFirst, you generally need a PC to do it properly, and most budding programmers were in school for most of their day.\nSecond, and more importantly, z80 assembly is pretty arcane if you’re coming from BASIC.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/axe.gif\"/\u003e\n\u003c/figure\u003e\n\u003cp\u003eWith the \u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/456/45659.html\"\u003eAxe Parser\u003c/a\u003e\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" role=\"doc-noteref\"\u003e5\u003c/a\u003e\u003c/sup\u003e, Kevin Horowitz (Quigibo) attempted to solve these problems by creating a new programming language that compiled into native code \u003cem\u003eon\u003c/em\u003e the calculator.\nAxe is an app that reads a “TI-BASIC program” written with the built-in editor, but Axe redefined the grammar and semantics to provide a language that was very well suited to writing games.\u003c/p\u003e\n\u003cp\u003eIt’s quite an elegant solution: using the built-in editor means Axe didn’t have to ship an editor for its language.\nRather, Axe is a \u003cem\u003ecompiler\u003c/em\u003e—it spends its engineering budget on producing better assembly code, with \u003ca href=\"https://www.omnimaga.org/the-axe-parser-project/assembly-programmers-help-axe-optimize!/\"\u003epages and pages\u003c/a\u003e of forum threads devoted to optimization.\nAnd further, Axe is \u003cem\u003eextensible\u003c/em\u003e with new primitives provided as “Axioms”—plugins that further manipulate the grammar of the language.\u003c/p\u003e\n\u003cp\u003eHere’s a hello world program in Axe.\nThe \u003ccode\u003eStr1\u003c/code\u003e token has been co-opted into a 16-bit pointer variable—this compiles on-calculator to an assembly program called HELLO!\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"text\"\u003e:.HELLO\n:\u0026#34;Hello World\u0026#34;→Str1\n:Disp Str1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"unity-native-code-on-the-ti-81\"\u003eUnity: Native code on the TI-81\u003c/h3\u003e\n\u003cp\u003eThe TI-81 was an absolute potato of a calculator. Not only did it lack archive memory, it also lacked a link port, and lacked the \u003ccode\u003eAsm()\u003c/code\u003e command, meaning you were stuck with TI-BASIC.\u003c/p\u003e\n\u003cp\u003eStuck, that is, until Ben Moody (floppusmaximus) released \u003ca href=\"https://www.ticalc.org/archives/files/fileinfo/425/42572.html\"\u003eUnity\u003c/a\u003e, a \u003cem\u003eloader\u003c/em\u003e that exploited a buffer overflow in the primitive TI-OS, then installed itself to help load other assembly programs.\u003c/p\u003e\n\u003cp\u003eWith no link port, how did you get Unity or other assembly programs on the calculator?\nYou typed them in, by hand!\nThe installation instructions are reminiscent of typing in BASIC programs out of BYTE magazine:\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/unity-installer.png\"/\u003e\n\u003c/figure\u003e\n\u003cp\u003eI suspect Randy Compton, who \u003ca href=\"https://www.ticalc.org/archives/news/articles/14/145/145220.html\"\u003eoriginally discovered\u003c/a\u003e the OS bug, did so by dumping the ROM with physical disassembly.\nz80 assembly is extremely amenable to reverse engineering because it’s hand-written.\u003c/p\u003e\n\u003ch2 id=\"operating-system-hacks\"\u003eOperating system hacks\u003c/h2\u003e\n\u003cp\u003eWhile most projects ran on TI-OS, some ran up \u003cem\u003eagainst\u003c/em\u003e TI-OS in order to make the hardware do things that TI preferred they didn’t do.\u003c/p\u003e\n\u003cp\u003eThere were scruples.\nMost people wanted to avoid the ire of Texas Instruments because (a) even the threat of lawyers tends to have a chilling effect on high school students and (b) people generally wanted to avoid besmirching the community’s image.\nAnd so there were certain things that were mostly considered off-limits, namely programs that were designed to help cheat on tests.\u003c/p\u003e\n\u003ch3 id=\"signing-keys\"\u003eSigning keys\u003c/h3\u003e\n\u003cp\u003eReally all anyone wanted to do was run their own code on their own hardware.\nTI had a crude but effective cryptographic signature check for apps and operating systems, which used the \u003ca href=\"https://en.wikipedia.org/wiki/Rabin_cryptosystem\"\u003eRabin cryptosystem\u003c/a\u003e.\nThey had released the signing key for TI-83 Plus apps as part of the SDK.\nHowever, the other keys that allowed signing OS images for the 83+, 84+, and apps and operating systems for the TI-89, were still secret.\u003c/p\u003e\n\u003cp\u003eUsing \u003cem\u003emath\u003c/em\u003e against \u003cem\u003ecalculator enthusiasts\u003c/em\u003e—what did TI expect to happen?!\nBen Moody realized that the state of the art in 2009 was enough to directly crack the ten year old 512-bit keys.\nHis \u003ca href=\"https://web.archive.org/web/20090805011013/http://www.unitedti.org/index.php?showtopic=8888\"\u003epost\u003c/a\u003e (enigmatically titled “Fun Number Theory Facts”) revealed that he had found the prime factors of the public key for the 83+ operating system.\u003c/p\u003e\n\u003cp\u003eInitially flabbergasted, the community threw together a BOINC cluster which cracked all the remaining keys in a few weeks without breaking a sweat.\u003c/p\u003e\n\u003cp\u003eTexas Instruments threw a tantrum, lobbing legal threats that were, frankly, 100% bullshit abuses of the DMCA.\nThe Electronic Frontier Foundation intervened on the hobbyists\u0026#39; behalf, \u003ca href=\"https://www.eff.org/deeplinks/2009/09/ti-leave-those-kids-alone\"\u003eexplaining to TI\u003c/a\u003e that there is nothing illegal about knowing the prime factors of certain integers.\nThe whole thing earned its own \u003ca href=\"https://en.wikipedia.org/wiki/Texas_Instruments_signing_key_controversy\"\u003eWikipedia article\u003c/a\u003e.\nToday, you can easily find these keys on any enthusiast site, including \u003ca href=\"https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/keys.zip\"\u003eright here\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"artifice\"\u003earTIfice\u003c/h3\u003e\n\u003cp\u003eFairly recently (late 2020), TI decided what everyone really needed was a cold shower, and \u003ca href=\"https://www.hackster.io/news/texas-instruments-under-fire-for-removing-asm-c-programming-features-from-ti-83-ti-84-calculators-ba55bdcb0547\"\u003eannounced\u003c/a\u003e they’d be disabling all this assembly business with a software update for the TI-84+ CE (the newest color calculator), dubiously claiming that this would improve exam security, etc, etc.\u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" role=\"doc-noteref\"\u003e6\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eTo \u003ca href=\"https://www.ticalc.org/archives/news/articles/14/149/149342.html\"\u003equote\u003c/a\u003e Lionel Debroux:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis slam shuts [sic] a golden age of over two decades (!) of native code being officially supported on at least one actively maintained TI graphing calculator.\n[…]\nLike all true calculator enthusiasts, we have hard feelings about the matter. The community had always been nice to TI - nothing really damaging for TI’s business was ever released over 20+ years! - but a moral barrier has probably been broken today…\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs an olive branch they offered Python bindings; everyone immediately pointed out that Python is wicked slow in embedded environments and absolutely cannot replicate what native code can do.\u003csup id=\"fnref:7\"\u003e\u003ca href=\"#fn:7\" role=\"doc-noteref\"\u003e7\u003c/a\u003e\u003c/sup\u003e\nIf you’ve read this far, you’ll note this isn’t the first time TI has been a little tone-deaf toward enthusiasts.\u003c/p\u003e\n\u003cp\u003eEnter \u003ca href=\"https://yvantt.github.io/arTIfiCE/\"\u003earTIfice\u003c/a\u003e\u003csup id=\"fnref:8\"\u003e\u003ca href=\"#fn:8\" role=\"doc-noteref\"\u003e8\u003c/a\u003e\u003c/sup\u003e - a proper jailbreak for these calculators. You simply install the CabriJr geometry app, and open a \u003cem\u003especial\u003c/em\u003e data file with it, and suddenly you’re presented with a menu allowing you to run whatever you like.\u003c/p\u003e\n\u003cp\u003eWhat’s cool about this is that it’s a \u003cem\u003ejailbreak\u003c/em\u003e, not just a sweet hack that uses the hardware.\nJust like you may be familiar with jailbreaking an iPhone or Xbox, starting from within the sandbox and getting out, this abuses bugs in the wildly complicated CabriJr geometry app (signed and blessed to run by TI) to reenable arbitrary code execution and literally pop a shell or install hooks into the OS.\u003csup id=\"fnref:9\"\u003e\u003ca href=\"#fn:9\" role=\"doc-noteref\"\u003e9\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003eThe arTIfice exploit is just 927 bytes, and it packs a simple UI and loader in behind the shellcode.\nBeing this small, the underlying exploit is probably the lowest hanging fruit of plenty of zero-days in this and other TI software.\u003c/p\u003e\n\u003cp\u003eSo yeah, now exams are secure, or something.\u003c/p\u003e\n\u003ch2 id=\"whence-from-here\"\u003eWhence from here?\u003c/h2\u003e\n\u003cp\u003eFor every project I listed, there were ten others that I didn’t.\n(And if I missed yours, I mean no disrespect!)\nThe breadth and depth of tinkering is staggering: I haven’t even touched the scene for the ARM-based Nspire.\u003c/p\u003e\n\u003cp\u003eThere are always challengers to Texas Instruments\u0026#39; entrenchment in high schools; Casio in particular has made some attractive devices.\nThere has been a modest amount of scene releases for Casio calculators as well.\u003c/p\u003e\n\u003cp\u003eThe startup \u003ca href=\"https://www.numworks.com/\"\u003eNumworks\u003c/a\u003e makes calculators based on a very capable STM32F429 microcontroller.\nUntil recently, the Numworks had an open-source operating system and I had half-hoped that it might spark a renaissance of handheld calculators.\nThe hardware is available and pretty nice, but they’ve closed the source code license, so I don’t think it will see any grassroots adoption by the calculator scene.\u003c/p\u003e\n\u003cp\u003eBut no matter the platform, the steady stream of bored nerds in high school cannot be quenched, and they will have the support of smart engineers with free time.\nIn the true hacker spirit, I suspect people will continue to push the boundaries of whatever hardware they find in their hands.\u003c/p\u003e\n\u003ch3 id=\"further-reading\"\u003eFurther reading\u003c/h3\u003e\n\u003cp\u003eCasual readers may wish to browse \u003ca href=\"https://www.ticalc.org/\"\u003e\u003cstrong\u003eticalc.org\u003c/strong\u003e’s news\u003c/a\u003e (which \u003ca href=\"https://www.ticalc.org/archives/news/\"\u003egoes back to 1997\u003c/a\u003e) for the most interesting news, or spelunk in their massive archives.\nOr, dive into the phpBB rabbit holes of the community’s forums, some dead and some still thriving!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ticalc.org\"\u003e\u003cstrong\u003eticalc.org\u003c/strong\u003e\u003c/a\u003e: one part forum, one part news source, three parts massive archive of nearly all software released for any TI calculator\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cemetech.net\"\u003e\u003cstrong\u003eCemetech\u003c/strong\u003e\u003c/a\u003e: fairly formal, moderate amount of chatter but with pretty good signal to noise ratio and with very knowledgeable people. Still very active.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://omnimaga.org\"\u003e\u003cstrong\u003eOmnimaga\u003c/strong\u003e\u003c/a\u003e: less formal, lots of projects, with a sprawling offtopic section and very elaborate forum signatures.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.datamath.org/\"\u003e\u003cstrong\u003eDatamath\u003c/strong\u003e\u003c/a\u003e: a large “online museum” with hardware teardowns, reverse engineering, and documentation of nearly every calculator ever released.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tiplanet.org\"\u003e\u003cstrong\u003eTI-Planet\u003c/strong\u003e\u003c/a\u003e: a French forum that was linked a lot, with a large downloads section and active community; unfortunately I don’t know much about it firsthand because I don’t speak French.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20000520035955/http://www.calc.org/\"\u003e\u003cstrong\u003ecalc.org\u003c/strong\u003e\u003c/a\u003e (Wayback link): also used to be called Dimension-TI. A now-defunct forum and download host. Unfortunately it was before my time and I don’t know much about it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOh, and other calculator nerds: keep me honest. Corrections welcome by comment or email.\u003c/p\u003e\n\u003csection role=\"doc-endnotes\"\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\" role=\"doc-endnote\"\u003e\n\u003cp\u003eA \u003ca href=\"https://hackaday.com/tag/z80\"\u003epopular hobbyist project\u003c/a\u003e is to build your own homebrew z80 computer, precisely because it is so simple that you can understand the foundations of the system. My favorite is probably \u003ca href=\"https://hackaday.com/2014/12/01/a-z80-computer-with-switches-and-blinkenlights/\"\u003eJim MacAurthur’s beautiful minimal z80\u003c/a\u003e in a laser cut case with a \u003cem\u003ehand crank\u003c/em\u003e to single-step instructions! \u003ca href=\"#fnref:1\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\" role=\"doc-endnote\"\u003e\n\u003cp\u003eThe z80 generally made life pretty difficult for people who attempted to make a good C compiler for it. I believe I have the only remaining copy of HITECH-C for DOS, which was actually a decent C compiler. As I said, more on that in a later article. \u003ca href=\"#fnref:2\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\" role=\"doc-endnote\"\u003e\n\u003cp\u003eYour fame results may vary. Seemed this way to me, anyway. \u003ca href=\"#fnref:3\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:4\" role=\"doc-endnote\"\u003e\n\u003cp\u003eIt’s good enough to have garnered at least a few fan ports to \u003ca href=\"https://github.com/nzeemin/spectrum-desolate\"\u003eZX Spectrum\u003c/a\u003e and some \u003ca href=\"https://github.com/nzeemin/uknc-desolate\"\u003eold Soviet computers\u003c/a\u003e. \u003ca href=\"#fnref:4\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:5\" role=\"doc-endnote\"\u003e\n\u003cp\u003eWow, the Axe user manual takes me back—it was my first exposure to xkcd! \u003ca href=\"#fnref:5\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:6\" role=\"doc-endnote\"\u003e\n\u003cp\u003eFeels like they got advice from \u003ca href=\"https://en.wikipedia.org/wiki/OtherOS\"\u003ethe Playstation Linux team\u003c/a\u003e. \u003ca href=\"#fnref:6\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:7\" role=\"doc-endnote\"\u003e\n\u003cp\u003eAs far as I can tell, they are likely using MicroPython—implementing a Python from scratch would be a huge task—but I can’t find any MIT license disclosure. \u003ca href=\"#fnref:7\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:8\" role=\"doc-endnote\"\u003e\n\u003cp\u003eHoly moly does this page cause my CPU fans to spin… \u003ca href=\"#fnref:8\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:9\" role=\"doc-endnote\"\u003e\n\u003cp\u003eI’ll point out that all these hooks were already possible and remain supported by the OS itself; it’s how apps like Inequalz (which graphs inequalities) work - they hook the graph equation screens and the drawing routines, using official APIs. \u003ca href=\"#fnref:9\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/section\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "22 min read",
  "publishedTime": "2021-10-06T08:42:00-05:00",
  "modifiedTime": "2021-10-06T08:42:00-05:00"
}
