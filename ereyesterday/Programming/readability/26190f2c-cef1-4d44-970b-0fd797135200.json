{
  "id": "26190f2c-cef1-4d44-970b-0fd797135200",
  "title": "From code to production: A guide to continuous deployment with GitLab",
  "link": "https://about.gitlab.com/blog/2025/01/28/from-code-to-production-a-guide-to-continuous-deployment-with-gitlab",
  "description": "",
  "author": "Benjamin Skierlak",
  "published": "2025-01-28T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Benjamin Skierlak, James Wormwell",
  "length": 19165,
  "excerpt": "Learn how to get started building a robust continuous deployment pipeline in GitLab. Follow these step-by-step instructions, practical examples, and best practices.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Continuous deployment is a game-changing practice that enables teams to deliver value faster, with higher confidence. However, diving into advanced deployment workflows — such as GitOps, container orchestration with Kubernetes, or dynamic environments — can be intimidating for teams just starting out. At GitLab, we're committed to making delivery seamless and scalable. By enabling teams to focus on the fundamentals, we empower them to build a strong foundation that supports growth into more complex strategies over time. This guide provides essential steps to begin implementing continuous deployment with GitLab, laying the foundation for your long-term success. Start with a workflow plan Before diving into the technical implementation, take time to map out your deployment workflow. Success lies in careful planning and a methodical approach. Artifact management strategy In the context of continuous deployment, artifacts are the packaged outputs of your build process that need to be stored, versioned, and deployed. These could be: container images for your applications packages compiled binaries or executables libraries configuration files documentation packages other artifacts Each type of artifact plays a specific role in your deployment process. For example, a typical web application might generate: a container image for the backend service a ZIP archive of compiled frontend assets SQL files for database changes environment-specific configuration files Managing these artifacts effectively is crucial for successful deployments. Here's how to approach artifact management. Artifacts and releases versioning strategies A best practice to get you started with a clean structure is to establish a clear versioning strategy for your artifacts. When creating releases: Use semantic versioning (major.minor.patch) for release tags Example: myapp:1.2.3 for a stable release Major version changes (2.0.0) for breaking changes Minor version changes (1.3.0) for new features Patch version changes (1.2.4) for bug fixes Maintain a 'latest' tag for the most recent stable version Example: myapp:latest for automated deployments Include commit SHA for precise version tracking Example: myapp:1.2.3-abc123f for debugging Consider branch-based tags for development environments Example: myapp:feature-user-auth for feature testing Build artifacts retention Implement defined retention rules: Set explicit expiration timeframes for temporary artifacts Define which artifacts need permanent retention Configure cleanup policies to manage storage Registry access and authentication Secure your artifacts with proper access controls: Implement Personal Access Tokens for developer access Configure CI/CD variables for pipeline authentication Set up proper access scopes Environment strategy Consider your environments early, as they shape your entire deployment pipeline: Development, staging, and production environment configurations Environment-specific variables and secrets Access controls and protection rules Deployment tracking and monitoring approach Deployment targets Be intentional as to where and how you'll deploy, these decisions matter and the benefits and drawbacks of each should be consider: Infrastructure requirements (VMs, containers, cloud services) Network access and security configurations Authentication mechanisms (SSH keys, access tokens) Resource allocation and scaling considerations With our strategy defined and foundational decisions made, we can now translate these plans into a working pipeline. We'll build a practical example that demonstrates these concepts, starting with a simple application and progressively adding deployment capabilities. Implementing your CD pipeline A step-by-step example Let's walk through implementing a basic continuous deployment pipeline for a web application. We'll use a simple HTML application as an example, but these principles apply to any type of application. We’re also going to deploy our application as a Docker image on a simple virtual machine. This will allow us to lean on a curated image with minimum dependencies, and to ensure no environment specific requirements are unintentionally brought in. By working on a virtual machine, we won’t be leveraging GitLab’s native integrations, allowing us to work on an easier but less scalable setup to begin with. Prerequisites In this example, we’ll aim to containerize an application that we’ll run on a virtual machine hosted on a cloud provider. We’ll also test this application locally on our machine. This list of prerequisites is only needed for this scenario. Virtual machine setup Provision a VM in your preferred cloud provider (e.g., GCP, AWS, Azure) Configure network rules to allow access on ports 22, 80, and 443 Record the machine's public IP address for deployment Set up SSH authentication: Generate a public/private key pair for the machine In GitLab, go to Settings \u003e CI/CD \u003e Variables Create a variable called GITLAB_KEY Set Type to \"File\" (required for SSH authentication) Paste the private key in the Value field Define a USER variable, this is the user logging in and running the scripts on your VM Configure deployment variables Create variables for your deployment targets: STAGING_TARGET: Your staging server IP/domain PRODUCTION_TARGET: Your production server IP/domain Local development setup Install Docker on your local machine for testing deployments GitLab Container Registry access Locate your registry path: Navigate to Deploy \u003e Container Registry Copy the registry path (e.g., registry.gitlab.com/group/project) Set up authentication: Go to Settings \u003e Access Tokens Create a new token with registry access Token expiration: Maximum 1 year Save the token securely Configure local registry access: docker login registry.gitlab.com # The username if you are using a PAT is gitlab-ci-token # Password: your-access-token 1. Create your application Start with a basic web application. For our example, we're using a simple HTML page: \u003c!-- index.html --\u003e \u003chtml\u003e \u003chead\u003e \u003cstyle\u003e body { background-color: #171321; /* GitLab dark */ } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- Your content here --\u003e \u003c/body\u003e \u003c/html\u003e 2. Containerize your application Create a Dockerfile to package your application: FROM nginx:1.26.2 COPY index.html /usr/share/nginx/html/index.html This Dockerfile: Uses nginx as a base image for serving web content Copies your HTML file to the correct location in the nginx directory structure 3. Set up your CI/CD pipeline Create a .gitlab-ci.yml file to define your pipeline stages: variables: TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA stages: - publish - deploy Let's break it down: TAG_LATEST is made up of three parts: $CI_REGISTRY_IMAGE is the path to your project's container registry in GitLab For example: registry.gitlab.com/your-group/your-project $CI_COMMIT_REF_NAME is the name of your branch or tag For example, if you're on main branch: /main, and if you're on a feature branch: /feature-login :latest is a fixed suffix So if you're on the main branch, TAG_LATEST becomes: registry.gitlab.com/your-group/your-project/main:latest. TAG_COMMIT is almost identical, but instead of :latest, it uses: $CI_COMMIT_SHA which is the commit identifier, for example: :abc123def456. So for that same commit on main branch, TAG_COMMIT becomes:registry.gitlab.com/your-group/your-project/main:abc123def456. The reason for having both is TAG_LATEST gives you an easy way to always get the newest version, and TAG_COMMIT gives you a specific version you can return to if needed. 4. Publish to the container registry Add the publish job to your pipeline: publish: stage: publish image: docker:latest services: - docker:dind script: - docker build -t $TAG_LATEST -t $TAG_COMMIT . - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - docker push $TAG_LATEST - docker push $TAG_COMMIT This job: Uses Docker-in-Docker to build images Creates two tagged versions of your image Authenticates with the GitLab registry Pushes both versions to the registry Now that our images are safely stored in the registry, we can focus on deploying them to our target environments. Let's start with local testing to validate our setup before moving to production deployments. 5. Deploy to your environment Before deploying to production, you can test locally. We just published our image to the GitLab repository, which we’ll pull locally. If you’re unsure of the exact path, navigate to Deploy \u003e Container Registry, and you should see an icon to copy the path of your image at the end of the line for the container image you want to test. docker login registry.gitlab.com docker run -p 80:80 registry.gitlab.com/your-project-path/main:latest By doing so you should be able to access your application locally on your localhost address through your web browser. You can now add a deployment job to your pipeline: deploy: stage: deploy image: alpine:latest script: - chmod 400 $GITLAB_KEY - apk add openssh-client - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$TARGET_SERVER docker pull $TAG_COMMIT \u0026\u0026 docker rm -f myapp || true \u0026\u0026 docker run -d -p 80:80 --name myapp $TAG_COMMIT This job: Sets up SSH access to your deployment target Pulls the latest image Removes any existing container Deploys the new version 6. Track deployments Enable deployment tracking by adding environment configuration: deploy: environment: name: production url: https://your-application-url.com This creates an environment object in GitLab's Operate \u003e Environments section, providing: Deployment history Current deployment status Quick access to your application While a single environment pipeline is a good starting point, most teams need to manage multiple environments for proper testing and staging. Let's expand our pipeline to handle this more realistic scenario. 7. Set up multiple environments For a more robust pipeline, configure staging and production deployments: stages: - publish - staging - release - version - production staging: stage: staging rules: - if: $CI_COMMIT_BRANCH == \"main\" \u0026\u0026 $CI_COMMIT_TAG == null environment: name: staging url: https://staging.your-app.com # deployment script here production: stage: production rules: - if: $CI_COMMIT_TAG environment: name: production url: https://your-app.com # deployment script here This setup: Deploys to staging from your main branch Uses GitLab tags to trigger production deployments Provides separate tracking for each environment Here and in our next step, we’re leveraging a very useful GitLab feature: tags. By manually creating a tag in the Code \u003e Tags section, the $CI_COMMIT_TAG gets created, which allows us to trigger jobs accordingly. 8. Create automated release notes We'll be using GitLab's release capabilities through our CI/CD pipeline. First, update your stages in .gitlab-ci.yml: stages: - publish - staging - release # New stage for releases - version - production Next, add the release job: release_job: stage: release image: registry.gitlab.com/gitlab-org/release-cli:latest rules: - if: $CI_COMMIT_TAG # Only run when a tag is created script: - echo \"Creating release for $CI_COMMIT_TAG\" release: # Release configuration name: 'Release $CI_COMMIT_TAG' description: 'Release created from $CI_COMMIT_TAG' tag_name: '$CI_COMMIT_TAG' # The tag to create ref: '$CI_COMMIT_TAG' # The tag to base release on You can enhance this by adding links to your container images: release: name: 'Release $CI_COMMIT_TAG' description: 'Release created from $CI_COMMIT_TAG' tag_name: '$CI_COMMIT_TAG' ref: '$CI_COMMIT_TAG' assets: links: - name: 'Container Image' url: '$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG' link_type: 'image' For meaningful automated release notes: Use conventional commits (feat:, fix:, etc.) Include issue numbers (#123) Separate subject from body with blank line If you want custom release notes with deployment info: release_job: script: - | DEPLOY_TIME=$(date '+%Y-%m-%d %H:%M:%S') CHANGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:\"- %s\") cat \u003e release_notes.md \u003c\u003c EOF ## Deployment Info - Deployed on: $DEPLOY_TIME - Environment: Production - Version: $CI_COMMIT_TAG ## Changes $CHANGES ## Artifacts - Container Image: \\`$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\\` EOF release: description: './release_notes.md' Once configured, releases will be created automatically when you create a Git tag. You can view them in GitLab under Deploy \u003e Releases. 9. Put it all together This is what our final YAML file looks like: variables: TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA STAGING_TARGET: $STAGING_TARGET # Set in CI/CD Variables PRODUCTION_TARGET: $PRODUCTION_TARGET # Set in CI/CD Variables stages: - publish - staging - release - version - production # Build and publish to registry publish: stage: publish image: docker:latest services: - docker:dind rules: - if: $CI_COMMIT_BRANCH == \"main\" \u0026\u0026 $CI_COMMIT_TAG == null script: - docker build -t $TAG_LATEST -t $TAG_COMMIT . - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - docker push $TAG_LATEST - docker push $TAG_COMMIT # Deploy to staging staging: stage: staging image: alpine:latest rules: - if: $CI_COMMIT_BRANCH == \"main\" \u0026\u0026 $CI_COMMIT_TAG == null script: - chmod 400 $GITLAB_KEY - apk add openssh-client - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$STAGING_TARGET \" docker pull $TAG_COMMIT \u0026\u0026 docker rm -f myapp || true \u0026\u0026 docker run -d -p 80:80 --name myapp $TAG_COMMIT\" environment: name: staging url: http://$STAGING_TARGET # Create release release_job: stage: release image: registry.gitlab.com/gitlab-org/release-cli:latest rules: - if: $CI_COMMIT_TAG script: - | DEPLOY_TIME=$(date '+%Y-%m-%d %H:%M:%S') CHANGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:\"- %s\") cat \u003e release_notes.md \u003c\u003c EOF ## Deployment Info - Deployed on: $DEPLOY_TIME - Environment: Production - Version: $CI_COMMIT_TAG ## Changes $CHANGES ## Artifacts - Container Image: \\`$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\\` EOF release: name: 'Release $CI_COMMIT_TAG' description: './release_notes.md' tag_name: '$CI_COMMIT_TAG' ref: '$CI_COMMIT_TAG' assets: links: - name: 'Container Image' url: '$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG' link_type: 'image' # Version the image with release tag version_job: stage: version image: docker:latest services: - docker:dind rules: - if: $CI_COMMIT_TAG script: - docker pull $TAG_COMMIT - docker tag $TAG_COMMIT $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - docker push $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG # Deploy to production production: stage: production image: alpine:latest rules: - if: $CI_COMMIT_TAG script: - chmod 400 $GITLAB_KEY - apk add openssh-client - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$PRODUCTION_TARGET \" docker pull $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG \u0026\u0026 docker rm -f myapp || true \u0026\u0026 docker run -d -p 80:80 --name myapp $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\" environment: name: production url: http://$PRODUCTION_TARGET This complete pipeline: Publishes images to the registry (main branch) Deploys to staging (main branch) Creates releases (on tags) Versions images with release tags Deploys to production (on tags) Key benefits: Clean reproducible, local development and testing environment Clear path to production environments with structure to build confidence in what is deployed Pattern to recover from unexpected failures, etc. Ready to scale/adopt more complex deployment strategies Best practices Throughout implementation, maintain these principles: Document everything, from variable usage to deployment procedures Use GitLab's built-in features (environments, releases, registry) Implement proper access controls and security measures Plan for failure with robust rollback procedures Keep your pipeline configurations DRY (Don't Repeat Yourself) Scale your deployment strategy What next? Here are some aspects to consider as your continuous deployment strategy matures. Advanced security measures Enhance security through: Protected environments with restricted access Required approvals for production deployments Integrated security scanning Automated vulnerability assessments Branch protection rules for deployment-related changes Progressive delivery strategies Implement advanced deployment strategies: Feature flags for controlled rollouts Canary deployments for risk mitigation Blue-green deployment strategies A/B testing capabilities Dynamic environment management Monitoring and optimization Establish robust monitoring practices: Track deployment metrics Set up performance monitoring Configure deployment alerts Establish deployment SLOs Regular pipeline optimization Why GitLab? GitLab's continuous deployment capabilities make it a standout choice for modern deployment workflows. The platform excels in streamlining the path from code to production, offering built-in container registry, environment management, and deployment tracking all within a single interface. GitLab's environment-specific variables, deployment approval gates, and rollback capabilities provide the security and control needed for production deployments, while features like review apps and feature flags enable progressive delivery approaches. As part of GitLab's complete DevSecOps platform, these CD capabilities seamlessly integrate with your entire software lifecycle. Get started today The journey to continuous deployment is an evolution, not a revolution. Start with the fundamentals, build a solid foundation, and gradually incorporate advanced features as your team's needs grow. GitLab provides the tools and flexibility to support you at every stage of this journey, from your first automated deployment to complex, multi-environment delivery pipelines. Sign up for a free, 60-day trial of GitLab Ultimate to get started with continous deployment today.",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/76Tn5jFmEHY5LFj8RdDjNY/49f23277263a127bab8482ea2841cfa7/REFERENCE_-_Use_this_page_as_a_reference_for_thumbnail_sizes.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eContinuous deployment is a game-changing practice that enables teams to deliver value faster, with higher confidence. However, diving into advanced deployment workflows — such as GitOps, container orchestration with Kubernetes, or dynamic environments — can be intimidating for teams just starting out.\u003c/p\u003e\n\u003cp\u003eAt GitLab, we\u0026#39;re committed to making delivery seamless and scalable. By enabling teams to focus on the fundamentals, we empower them to build a strong foundation that supports growth into more complex strategies over time. This guide provides essential steps to begin implementing continuous deployment with GitLab, laying the foundation for your long-term success.\u003c/p\u003e\n\u003ch2 id=\"start-with-a-workflow-plan\" tabindex=\"-1\"\u003eStart with a workflow plan \u003ca href=\"#start-with-a-workflow-plan\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore diving into the technical implementation, take time to map out your deployment workflow. Success lies in careful planning and a methodical approach.\u003c/p\u003e\n\u003ch3 id=\"artifact-management-strategy\" tabindex=\"-1\"\u003eArtifact management strategy \u003ca href=\"#artifact-management-strategy\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn the context of continuous deployment, artifacts are the packaged outputs of your build process that need to be stored, versioned, and deployed. These could be:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003econtainer images for your applications\u003c/li\u003e\n\u003cli\u003epackages\u003c/li\u003e\n\u003cli\u003ecompiled binaries or executables\u003c/li\u003e\n\u003cli\u003elibraries\u003c/li\u003e\n\u003cli\u003econfiguration files\u003c/li\u003e\n\u003cli\u003edocumentation packages\u003c/li\u003e\n\u003cli\u003eother artifacts\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach type of artifact plays a specific role in your deployment process. For example, a typical web application might generate:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea container image for the backend service\u003c/li\u003e\n\u003cli\u003ea ZIP archive of compiled frontend assets\u003c/li\u003e\n\u003cli\u003eSQL files for database changes\u003c/li\u003e\n\u003cli\u003eenvironment-specific configuration files\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eManaging these artifacts effectively is crucial for successful deployments. Here\u0026#39;s how to approach artifact management.\u003c/p\u003e\n\u003ch4 id=\"artifacts-and-releases-versioning-strategies\" tabindex=\"-1\"\u003eArtifacts and releases versioning strategies \u003ca href=\"#artifacts-and-releases-versioning-strategies\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eA best practice to get you started with a clean structure is to establish a clear versioning strategy for your artifacts. When creating releases:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse semantic versioning (major.minor.patch) for release tags\n\u003cul\u003e\n\u003cli\u003eExample: \u003ccode\u003emyapp:1.2.3\u003c/code\u003e for a stable release\u003c/li\u003e\n\u003cli\u003eMajor version changes (2.0.0) for breaking changes\u003c/li\u003e\n\u003cli\u003eMinor version changes (1.3.0) for new features\u003c/li\u003e\n\u003cli\u003ePatch version changes (1.2.4) for bug fixes\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMaintain a \u0026#39;latest\u0026#39; tag for the most recent stable version\n\u003cul\u003e\n\u003cli\u003eExample: \u003ccode\u003emyapp:latest\u003c/code\u003e for automated deployments\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eInclude commit SHA for precise version tracking\n\u003cul\u003e\n\u003cli\u003eExample: \u003ccode\u003emyapp:1.2.3-abc123f\u003c/code\u003e for debugging\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eConsider branch-based tags for development environments\n\u003cul\u003e\n\u003cli\u003eExample: \u003ccode\u003emyapp:feature-user-auth\u003c/code\u003e for feature testing\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"build-artifacts-retention\" tabindex=\"-1\"\u003eBuild artifacts retention \u003ca href=\"#build-artifacts-retention\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eImplement defined retention rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet explicit expiration timeframes for temporary artifacts\u003c/li\u003e\n\u003cli\u003eDefine which artifacts need permanent retention\u003c/li\u003e\n\u003cli\u003eConfigure cleanup policies to manage storage\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"registry-access-and-authentication\" tabindex=\"-1\"\u003eRegistry access and authentication \u003ca href=\"#registry-access-and-authentication\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eSecure your artifacts with proper access controls:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eImplement Personal Access Tokens for developer access\u003c/li\u003e\n\u003cli\u003eConfigure CI/CD variables for pipeline authentication\u003c/li\u003e\n\u003cli\u003eSet up proper access scopes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"environment-strategy\" tabindex=\"-1\"\u003eEnvironment strategy \u003ca href=\"#environment-strategy\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eConsider your environments early, as they shape your entire deployment pipeline:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDevelopment, staging, and production environment configurations\u003c/li\u003e\n\u003cli\u003eEnvironment-specific variables and secrets\u003c/li\u003e\n\u003cli\u003eAccess controls and protection rules\u003c/li\u003e\n\u003cli\u003eDeployment tracking and monitoring approach\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"deployment-targets\" tabindex=\"-1\"\u003eDeployment targets \u003ca href=\"#deployment-targets\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBe intentional as to where and how you\u0026#39;ll deploy, these decisions matter and the benefits and drawbacks of each should be consider:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInfrastructure requirements (VMs, containers, cloud services)\u003c/li\u003e\n\u003cli\u003eNetwork access and security configurations\u003c/li\u003e\n\u003cli\u003eAuthentication mechanisms (SSH keys, access tokens)\u003c/li\u003e\n\u003cli\u003eResource allocation and scaling considerations\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith our strategy defined and foundational decisions made, we can now translate these plans into a working pipeline. We\u0026#39;ll build a practical example that demonstrates these concepts, starting with a simple application and progressively adding deployment capabilities.\u003c/p\u003e\n\u003ch2 id=\"implementing-your-cd-pipeline\" tabindex=\"-1\"\u003eImplementing your CD pipeline \u003ca href=\"#implementing-your-cd-pipeline\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"a-step-by-step-example\" tabindex=\"-1\"\u003eA step-by-step example \u003ca href=\"#a-step-by-step-example\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet\u0026#39;s walk through implementing a basic continuous deployment pipeline for a web application. We\u0026#39;ll use a simple HTML application as an example, but these principles apply to any type of application. We’re also going to deploy our application as a Docker image on a simple virtual machine. This will allow us to lean on a curated image with minimum dependencies, and to ensure no environment specific requirements are unintentionally brought in. By working on a virtual machine, we won’t be leveraging GitLab’s native integrations, allowing us to work on an easier but less scalable setup to begin with.\u003c/p\u003e\n\u003ch4 id=\"prerequisites\" tabindex=\"-1\"\u003ePrerequisites \u003ca href=\"#prerequisites\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eIn this example, we’ll aim to containerize an application that we’ll run on a virtual machine hosted on a cloud provider. We’ll also test this application locally on our machine. This list of prerequisites is only needed for this scenario.\u003c/p\u003e\n\u003ch5 id=\"virtual-machine-setup\" tabindex=\"-1\"\u003eVirtual machine setup \u003ca href=\"#virtual-machine-setup\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eProvision a VM in your preferred cloud provider (e.g., GCP, AWS, Azure)\u003c/li\u003e\n\u003cli\u003eConfigure network rules to allow access on ports 22, 80, and 443\u003c/li\u003e\n\u003cli\u003eRecord the machine\u0026#39;s public IP address for deployment\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"set-up-ssh-authentication\" tabindex=\"-1\"\u003eSet up SSH authentication: \u003ca href=\"#set-up-ssh-authentication\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eGenerate a public/private key pair for the machine\u003c/li\u003e\n\u003cli\u003eIn GitLab, go to \u003cstrong\u003eSettings \u0026gt; CI/CD \u0026gt; Variables\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCreate a variable called \u003ccode\u003eGITLAB_KEY\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSet Type to \u0026#34;File\u0026#34; (required for SSH authentication)\u003c/li\u003e\n\u003cli\u003ePaste the private key in the Value field\u003c/li\u003e\n\u003cli\u003eDefine a USER variable, this is the user logging in and running the scripts on your VM\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"configure-deployment-variables\" tabindex=\"-1\"\u003eConfigure deployment variables \u003ca href=\"#configure-deployment-variables\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eCreate variables for your deployment targets:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTAGING_TARGET\u003c/code\u003e: Your staging server IP/domain\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePRODUCTION_TARGET\u003c/code\u003e: Your production server IP/domain\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"local-development-setup\" tabindex=\"-1\"\u003eLocal development setup \u003ca href=\"#local-development-setup\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eInstall Docker on your local machine for testing deployments\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"gitlab-container-registry-access\" tabindex=\"-1\"\u003eGitLab Container Registry access \u003ca href=\"#gitlab-container-registry-access\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003eLocate your registry path:\n\u003cul\u003e\n\u003cli\u003eNavigate to \u003cstrong\u003eDeploy \u0026gt; Container Registry\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCopy the registry path (e.g., registry.gitlab.com/group/project)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSet up authentication:\n\u003cul\u003e\n\u003cli\u003eGo to \u003cstrong\u003eSettings \u0026gt; Access Tokens\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCreate a new token with registry access\u003c/li\u003e\n\u003cli\u003eToken expiration: Maximum 1 year\u003c/li\u003e\n\u003cli\u003eSave the token securely\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eConfigure local registry access:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003edocker login registry.gitlab.com\n# The username if you are using a PAT is gitlab-ci-token\n# Password: your-access-token\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"1.-create-your-application\" tabindex=\"-1\"\u003e1. Create your application \u003ca href=\"#1.-create-your-application\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eStart with a basic web application. For our example, we\u0026#39;re using a simple HTML page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- index.html --\u0026gt;\n\u0026lt;html\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;style\u0026gt;\n      body {\n        background-color: #171321; /* GitLab dark */\n      }\n    \u0026lt;/style\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n    \u0026lt;!-- Your content here --\u0026gt;\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"2.-containerize-your-application\" tabindex=\"-1\"\u003e2. Containerize your application \u003ca href=\"#2.-containerize-your-application\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eCreate a Dockerfile to package your application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFROM nginx:1.26.2\nCOPY index.html /usr/share/nginx/html/index.html\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis Dockerfile:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUses nginx as a base image for serving web content\u003c/li\u003e\n\u003cli\u003eCopies your HTML file to the correct location in the nginx directory structure\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3.-set-up-your-cicd-pipeline\" tabindex=\"-1\"\u003e3. Set up your CI/CD pipeline \u003ca href=\"#3.-set-up-your-cicd-pipeline\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eCreate a \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file to define your pipeline stages:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evariables:\n  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest\n  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA\n\nstages:\n  - publish\n  - deploy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0026#39;s break it down:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTAG_LATEST\u003c/code\u003e is made up of three parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$CI_REGISTRY_IMAGE\u003c/code\u003e is the path to your project\u0026#39;s container registry in GitLab\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example: \u003ccode\u003eregistry.gitlab.com/your-group/your-project\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$CI_COMMIT_REF_NAME\u003c/code\u003e is the name of your branch or tag\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, if you\u0026#39;re on main branch: \u003ccode\u003e/main\u003c/code\u003e, and if you\u0026#39;re on a feature branch: \u003ccode\u003e/feature-login\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:latest\u003c/code\u003e is a fixed suffix\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo if you\u0026#39;re on the main branch, \u003ccode\u003eTAG_LATEST\u003c/code\u003e becomes: \u003ccode\u003eregistry.gitlab.com/your-group/your-project/main:latest\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTAG_COMMIT\u003c/code\u003e is almost identical, but instead of \u003ccode\u003e:latest\u003c/code\u003e, it uses: \u003ccode\u003e$CI_COMMIT_SHA\u003c/code\u003e which is the commit identifier, for example: \u003ccode\u003e:abc123def456\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo for that same commit on main branch, \u003ccode\u003eTAG_COMMIT\u003c/code\u003e becomes:\u003ccode\u003eregistry.gitlab.com/your-group/your-project/main:abc123def456\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe reason for having both is \u003ccode\u003eTAG_LATEST\u003c/code\u003e gives you an easy way to always get the newest version, and \u003ccode\u003eTAG_COMMIT\u003c/code\u003e gives you a specific version you can return to if needed.\u003c/p\u003e\n\u003ch4 id=\"4.-publish-to-the-container-registry\" tabindex=\"-1\"\u003e4. Publish to the container registry \u003ca href=\"#4.-publish-to-the-container-registry\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eAdd the publish job to your pipeline:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublish:\n  stage: publish\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t $TAG_LATEST -t $TAG_COMMIT .\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - docker push $TAG_LATEST\n    - docker push $TAG_COMMIT\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis job:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUses Docker-in-Docker to build images\u003c/li\u003e\n\u003cli\u003eCreates two tagged versions of your image\u003c/li\u003e\n\u003cli\u003eAuthenticates with the GitLab registry\u003c/li\u003e\n\u003cli\u003ePushes both versions to the registry\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow that our images are safely stored in the registry, we can focus on deploying them to our target environments. Let\u0026#39;s start with local testing to validate our setup before moving to production deployments.\u003c/p\u003e\n\u003ch4 id=\"5.-deploy-to-your-environment\" tabindex=\"-1\"\u003e5. Deploy to your environment \u003ca href=\"#5.-deploy-to-your-environment\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eBefore deploying to production, you can test locally. We just published our image to the GitLab repository, which we’ll pull locally. If you’re unsure of the exact path, navigate to \u003cstrong\u003eDeploy \u0026gt; Container Registry\u003c/strong\u003e, and you should see an icon to copy the path of your image at the end of the line for the container image you want to test.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker login registry.gitlab.com \ndocker run -p 80:80 registry.gitlab.com/your-project-path/main:latest\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy doing so you should be able to access your application locally on your localhost address through your web browser.\u003c/p\u003e\n\u003cp\u003eYou can now add a deployment job to your pipeline:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edeploy:\n  stage: deploy\n  image: alpine:latest\n  script:\n    - chmod 400 $GITLAB_KEY\n    - apk add openssh-client\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$TARGET_SERVER \n      docker pull $TAG_COMMIT \u0026amp;\u0026amp;\n      docker rm -f myapp || true \u0026amp;\u0026amp;\n      docker run -d -p 80:80 --name myapp $TAG_COMMIT\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis job:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSets up SSH access to your deployment target\u003c/li\u003e\n\u003cli\u003ePulls the latest image\u003c/li\u003e\n\u003cli\u003eRemoves any existing container\u003c/li\u003e\n\u003cli\u003eDeploys the new version\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"6.-track-deployments\" tabindex=\"-1\"\u003e6. Track deployments \u003ca href=\"#6.-track-deployments\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eEnable deployment tracking by adding environment configuration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edeploy:\n  environment:\n    name: production\n    url: https://your-application-url.com \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis creates an environment object in GitLab\u0026#39;s \u003cstrong\u003eOperate \u0026gt; Environments\u003c/strong\u003e section, providing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeployment history\u003c/li\u003e\n\u003cli\u003eCurrent deployment status\u003c/li\u003e\n\u003cli\u003eQuick access to your application\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile a single environment pipeline is a good starting point, most teams need to manage multiple environments for proper testing and staging. Let\u0026#39;s expand our pipeline to handle this more realistic scenario.\u003c/p\u003e\n\u003ch4 id=\"7.-set-up-multiple-environments\" tabindex=\"-1\"\u003e7. Set up multiple environments \u003ca href=\"#7.-set-up-multiple-environments\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eFor a more robust pipeline, configure staging and production deployments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n  - publish\n  - staging\n  - release\n  - version\n  - production\n\nstaging:\n  stage: staging\n  rules:\n    - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; \u0026amp;\u0026amp; $CI_COMMIT_TAG == null\n  environment:\n    name: staging\n    url: https://staging.your-app.com\n  # deployment script here\n\nproduction:\n  stage: production\n  rules:\n    - if: $CI_COMMIT_TAG\n  environment:\n    name: production\n    url: https://your-app.com\n  # deployment script here\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis setup:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeploys to staging from your main branch\u003c/li\u003e\n\u003cli\u003eUses GitLab tags to trigger production deployments\u003c/li\u003e\n\u003cli\u003eProvides separate tracking for each environment\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere and in our next step, we’re leveraging a very useful GitLab feature: tags. By manually creating a tag in the \u003cstrong\u003eCode \u0026gt; Tags\u003c/strong\u003e section, the \u003ccode\u003e$CI_COMMIT_TAG\u003c/code\u003e gets created, which allows us to trigger jobs accordingly.\u003c/p\u003e\n\u003ch4 id=\"8.-create-automated-release-notes\" tabindex=\"-1\"\u003e8. Create automated release notes \u003ca href=\"#8.-create-automated-release-notes\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eWe\u0026#39;ll be using GitLab\u0026#39;s release capabilities through our CI/CD pipeline. First, update your stages in \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n\n- publish\n- staging\n- release # New stage for releases\n- version\n- production\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, add the release job:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erelease_job:\n  stage: release\n  image: registry.gitlab.com/gitlab-org/release-cli:latest\n  rules:\n    - if: $CI_COMMIT_TAG                  # Only run when a tag is created\n  script:\n    - echo \u0026#34;Creating release for $CI_COMMIT_TAG\u0026#34;\n  release:                                # Release configuration\n    name: \u0026#39;Release $CI_COMMIT_TAG\u0026#39;\n    description: \u0026#39;Release created from $CI_COMMIT_TAG\u0026#39;\n    tag_name: \u0026#39;$CI_COMMIT_TAG\u0026#39;           # The tag to create\n    ref: \u0026#39;$CI_COMMIT_TAG\u0026#39;                # The tag to base release on\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can enhance this by adding links to your container images:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erelease:\n  name: \u0026#39;Release $CI_COMMIT_TAG\u0026#39;\n  description: \u0026#39;Release created from $CI_COMMIT_TAG\u0026#39;\n  tag_name: \u0026#39;$CI_COMMIT_TAG\u0026#39;\n  ref: \u0026#39;$CI_COMMIT_TAG\u0026#39;\n  assets:\n    links:\n      - name: \u0026#39;Container Image\u0026#39;\n        url: \u0026#39;$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\u0026#39;\n        link_type: \u0026#39;image\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor meaningful automated release notes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse conventional commits (feat:, fix:, etc.)\u003c/li\u003e\n\u003cli\u003eInclude issue numbers (#123)\u003c/li\u003e\n\u003cli\u003eSeparate subject from body with blank line\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you want custom release notes with deployment info:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erelease_job:\n  script:\n    - |\n      DEPLOY_TIME=$(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\n      CHANGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:\u0026#34;- %s\u0026#34;)\n      cat \u0026gt; release_notes.md \u0026lt;\u0026lt; EOF\n      ## Deployment Info\n      - Deployed on: $DEPLOY_TIME\n      - Environment: Production\n      - Version: $CI_COMMIT_TAG\n\n      ## Changes\n      $CHANGES\n\n      ## Artifacts\n      - Container Image: \\`$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\\`\n      EOF\n  release:\n    description: \u0026#39;./release_notes.md\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce configured, releases will be created automatically when you create a Git tag. You can view them in GitLab under \u003cstrong\u003eDeploy \u0026gt; Releases\u003c/strong\u003e.\u003c/p\u003e\n\u003ch4 id=\"9.-put-it-all-together\" tabindex=\"-1\"\u003e9. Put it all together \u003ca href=\"#9.-put-it-all-together\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eThis is what our final YAML file looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evariables:\n  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest\n  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA\n  STAGING_TARGET: $STAGING_TARGET    # Set in CI/CD Variables\n  PRODUCTION_TARGET: $PRODUCTION_TARGET  # Set in CI/CD Variables\n\nstages:\n  - publish\n  - staging\n  - release\n  - version\n  - production\n\n# Build and publish to registry\npublish:\n  stage: publish\n  image: docker:latest\n  services:\n    - docker:dind\n  rules:\n    - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; \u0026amp;\u0026amp; $CI_COMMIT_TAG == null\n  script:\n    - docker build -t $TAG_LATEST -t $TAG_COMMIT .\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - docker push $TAG_LATEST\n    - docker push $TAG_COMMIT\n\n# Deploy to staging\nstaging:\n  stage: staging\n  image: alpine:latest\n  rules:\n    - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; \u0026amp;\u0026amp; $CI_COMMIT_TAG == null\n  script:\n    - chmod 400 $GITLAB_KEY\n    - apk add openssh-client\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$STAGING_TARGET \u0026#34;\n        docker pull $TAG_COMMIT \u0026amp;\u0026amp;\n        docker rm -f myapp || true \u0026amp;\u0026amp;\n        docker run -d -p 80:80 --name myapp $TAG_COMMIT\u0026#34;\n  environment:\n    name: staging\n    url: http://$STAGING_TARGET\n\n# Create release\nrelease_job:\n  stage: release\n  image: registry.gitlab.com/gitlab-org/release-cli:latest\n  rules:\n    - if: $CI_COMMIT_TAG\n  script:\n    - |\n      DEPLOY_TIME=$(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\n      CHANGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:\u0026#34;- %s\u0026#34;)\n      cat \u0026gt; release_notes.md \u0026lt;\u0026lt; EOF\n      ## Deployment Info\n      - Deployed on: $DEPLOY_TIME\n      - Environment: Production\n      - Version: $CI_COMMIT_TAG\n\n      ## Changes\n      $CHANGES\n\n      ## Artifacts\n      - Container Image: \\`$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\\`\n      EOF\n  release:\n    name: \u0026#39;Release $CI_COMMIT_TAG\u0026#39;\n    description: \u0026#39;./release_notes.md\u0026#39;\n    tag_name: \u0026#39;$CI_COMMIT_TAG\u0026#39;\n    ref: \u0026#39;$CI_COMMIT_TAG\u0026#39;\n    assets:\n      links:\n        - name: \u0026#39;Container Image\u0026#39;\n          url: \u0026#39;$CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\u0026#39;\n          link_type: \u0026#39;image\u0026#39;\n\n# Version the image with release tag\nversion_job:\n  stage: version\n  image: docker:latest\n  services:\n    - docker:dind\n  rules:\n    - if: $CI_COMMIT_TAG\n  script:\n    - docker pull $TAG_COMMIT\n    - docker tag $TAG_COMMIT $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - docker push $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\n\n# Deploy to production\nproduction:\n  stage: production\n  image: alpine:latest\n  rules:\n    - if: $CI_COMMIT_TAG\n  script:\n    - chmod 400 $GITLAB_KEY\n    - apk add openssh-client\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - ssh -i $GITLAB_KEY -o StrictHostKeyChecking=no $USER@$PRODUCTION_TARGET \u0026#34;\n        docker pull $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG \u0026amp;\u0026amp;\n        docker rm -f myapp || true \u0026amp;\u0026amp;\n        docker run -d -p 80:80 --name myapp $CI_REGISTRY_IMAGE/main:$CI_COMMIT_TAG\u0026#34;\n  environment:\n    name: production\n    url: http://$PRODUCTION_TARGET\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis complete pipeline:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePublishes images to the registry (main branch)\u003c/li\u003e\n\u003cli\u003eDeploys to staging (main branch)\u003c/li\u003e\n\u003cli\u003eCreates releases (on tags)\u003c/li\u003e\n\u003cli\u003eVersions images with release tags Deploys to production (on tags)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKey benefits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClean reproducible, local development and testing environment\u003c/li\u003e\n\u003cli\u003eClear path to production environments with structure to build confidence in what is deployed\u003c/li\u003e\n\u003cli\u003ePattern to recover from unexpected failures, etc.\u003c/li\u003e\n\u003cli\u003eReady to scale/adopt more complex deployment strategies\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"best-practices\" tabindex=\"-1\"\u003eBest practices \u003ca href=\"#best-practices\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThroughout implementation, maintain these principles:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocument everything, from variable usage to deployment procedures\u003c/li\u003e\n\u003cli\u003eUse GitLab\u0026#39;s built-in features (environments, releases, registry)\u003c/li\u003e\n\u003cli\u003eImplement proper access controls and security measures\u003c/li\u003e\n\u003cli\u003ePlan for failure with robust rollback procedures\u003c/li\u003e\n\u003cli\u003eKeep your pipeline configurations DRY (Don\u0026#39;t Repeat Yourself)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"scale-your-deployment-strategy\" tabindex=\"-1\"\u003eScale your deployment strategy \u003ca href=\"#scale-your-deployment-strategy\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhat next? Here are some aspects to consider as your continuous deployment strategy matures.\u003c/p\u003e\n\u003ch3 id=\"advanced-security-measures\" tabindex=\"-1\"\u003eAdvanced security measures \u003ca href=\"#advanced-security-measures\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEnhance security through:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProtected environments with restricted access\u003c/li\u003e\n\u003cli\u003eRequired approvals for production deployments\u003c/li\u003e\n\u003cli\u003eIntegrated security scanning\u003c/li\u003e\n\u003cli\u003eAutomated vulnerability assessments\u003c/li\u003e\n\u003cli\u003eBranch protection rules for deployment-related changes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"progressive-delivery-strategies\" tabindex=\"-1\"\u003eProgressive delivery strategies \u003ca href=\"#progressive-delivery-strategies\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eImplement advanced deployment strategies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFeature flags for controlled rollouts\u003c/li\u003e\n\u003cli\u003eCanary deployments for risk mitigation\u003c/li\u003e\n\u003cli\u003eBlue-green deployment strategies\u003c/li\u003e\n\u003cli\u003eA/B testing capabilities\u003c/li\u003e\n\u003cli\u003eDynamic environment management\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"monitoring-and-optimization\" tabindex=\"-1\"\u003eMonitoring and optimization \u003ca href=\"#monitoring-and-optimization\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEstablish robust monitoring practices:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTrack deployment metrics\u003c/li\u003e\n\u003cli\u003eSet up performance monitoring\u003c/li\u003e\n\u003cli\u003eConfigure deployment alerts\u003c/li\u003e\n\u003cli\u003eEstablish deployment SLOs\u003c/li\u003e\n\u003cli\u003eRegular pipeline optimization\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"why-gitlab%3F\" tabindex=\"-1\"\u003eWhy GitLab? \u003ca href=\"#why-gitlab%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitLab\u0026#39;s continuous deployment capabilities make it a standout choice for modern deployment workflows. The platform excels in streamlining the path from code to production, offering built-in container registry, environment management, and deployment tracking all within a single interface. GitLab\u0026#39;s environment-specific variables, deployment approval gates, and rollback capabilities provide the security and control needed for production deployments, while features like review apps and feature flags enable progressive delivery approaches. As part of GitLab\u0026#39;s complete DevSecOps platform, these CD capabilities seamlessly integrate with your entire software lifecycle.\u003c/p\u003e\n\u003ch2 id=\"get-started-today\" tabindex=\"-1\"\u003eGet started today \u003ca href=\"#get-started-today\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe journey to continuous deployment is an evolution, not a revolution. Start with the fundamentals, build a solid foundation, and gradually incorporate advanced features as your team\u0026#39;s needs grow. GitLab provides the tools and flexibility to support you at every stage of this journey, from your first automated deployment to complex, multi-environment delivery pipelines.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSign up for a \u003ca href=\"https://about.gitlab.com/free-trial/devsecops/\"\u003efree, 60-day trial of GitLab Ultimate\u003c/a\u003e to get started with continous deployment today.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": "2025-01-28T00:00:00Z",
  "modifiedTime": null
}
