{
  "id": "856bb383-28bb-40a9-9e91-3afe07770e6b",
  "title": "Typed Python in 2024: Well adopted, yet usability challenges persist",
  "link": "https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/",
  "description": "Ten years after the introduction of PEP 484, we surveyed the current state of the Python type system and the tools developers are using. [...] Read More... The post Typed Python in 2024: Well adopted, yet usability challenges persist appeared first on Engineering at Meta.",
  "author": "",
  "published": "Mon, 09 Dec 2024 17:00:14 +0000",
  "source": "https://engineering.fb.com/feed/",
  "categories": [
    "Culture",
    "DevInfra"
  ],
  "byline": "By Aaron Pollack",
  "length": 7282,
  "excerpt": "Ten years after the introduction of PEP 484, we surveyed the current state of the Python type system and the tools developers are using.",
  "siteName": "Engineering at Meta",
  "favicon": "",
  "text": "Ten years after the introduction of PEP 484, we surveyed the current state of the Python type system and the tools developers are using. This summer, JetBrains, Meta, and Microsoft collaborated to conduct a comprehensive survey on the state of Python typing*. The survey aimed to understand how developers in the open source community are using type hints, the challenges they face, and the tools they rely on. Over 1,000 people took the survey and we are delighted to share the findings. Despite the positive typing sentiment, we received fantastic (even if a little biting at times) feedback about the type system. We’ll give a summary of the findings including usage statistics, overall sentiment and takeaways that can improve Python developer tooling.  Overall findings 88% of respondents “Always” or “Often” use Types in their Python code. IDE tooling, documentation, and catching bugs are drivers for the high adoption of types in survey responses, The usability of types and ability to express complex patterns still are challenges that leave some code unchecked. Latency in tooling and lack of types in popular libraries are limiting the effectiveness of type checkers. Inconsistency in type check implementations and poor discoverability of the documentation create friction in onboarding types into a project and seeking help when using the tools.  Survey methodology A survey about types is likely to attract a lot of typing enthusiasts, so we don’t take this to be an unbiased nor representative view of everyone in the community. We did our best to distribute to as many developers as possible and aimed for easy-to-understand questions for all skill levels. We created questions that would give a picture of developer profiles, tools, and overall sentiment towards typed Python. Beyond metrics, we wanted to get a sense of the current mood and are thankful for the detailed and candid feedback.  Developer cohorts As a general purpose language, it was not surprising to see Python types used across many fields. Scripting/automation, web development, data analysis, AI/ML, devOps and teaching all had large representation. One surprising finding was the value Python types are demonstrating outside of collaborative environments.  A significant portion of respondents use Python types in personal projects (66% of respondents who only use Python personally “Always” or “Often” use types, compared to 78% of only “Professional” developers) and without CI (29.6% respondents don’t have type checking in CI use types “Always” or “Often”). IDEs and type checkers When it comes to development environments, Visual Studio (VS) Code emerged as the most popular choice. The most popular configuration of IDE plus type checker was VS Code with Mypy followed by PyCharm with Mypy. Mypy remains the most popular type checker, with 67% of respondents using it and 38% using Pyright (24% use both). Emacs or NeoVIM also has a strong user base at 11% combined. The community’s preference for both IDE and type checker tooling is still quite varied. While not a static type checker, 62% of developers use Pydantic and 14% only use Pydantic, showing the use of the type system extending into runtime use cases. What people love Despite the challenges, developers appreciate the enhanced autocompletion and improved code clarity that type hints provide. “Better IDE Support” was the most useful feature (59%) followed by “Preventing Bugs” (49.8%) and “Documentation” (49.2%). They value the ability to catch potential bugs early and the ease of refactoring code. The optional nature of typing allows for gradual adoption, which many find beneficial. “It finds real bugs. It often points to design flaws when typing is hard or impossible.” Common issues with type system documentation and usability We gave developers the opportunity to provide freeform feedback and saw several issues with the current type system come up repeatedly. The most common concerns are the complexity of the type system of expressing dynamic features (29 responses), the slow performance of type checkers like Mypy (22 responses), and the inconsistencies across different type checkers (21 responses). Lack of clarity in documentation, especially for advanced constructs, was also a pain point (10 responses).  “Numerous libraries lack any type annotations, hindering code analysis and potentially leading to runtime errors.” “The hoops you sometimes have to jump through to at least somewhat correctly express runtime dynamic features, and even then they are often not correctly covered.” Why developers don’t use types Among respondents, 321 (29%) of developers cited the following reasons for not using types in their Python code. The primary reason for not using types is, “Not required for my projects,” which accounted for 11% of total survey responses. Interestingly, among the 321 developers who cited this reason, the majority (60%) still reported using types “Always” or “Often.” This is 28 points below the overall survey average, yet it remains a substantial proportion. Recommendations for Python language maintainers and tooling authors Developers are asking for better standardization and consistency across tools. Improving support for dynamic and complex patterns, as well as enhancing runtime type checking, are all key areas for further thought. Better type checker performance was a common pain point cited by developers in all cohorts. Beyond features and performance, the accessibility and discoverability of Python documentation was mentioned numerous times. The Python 3 typing docs were the most popular way for people to learn about types or get help with issues. There was consistent feedback asking for better documentation, particularly for advanced typing features that included examples. “Lack of familiarity” was the second highest reason (8% of all responses) people are not using types. There is an opportunity to improve discoverability and usability of documentation. Thank you! Let’s do this again! Thanks to everyone who helped create and share the survey. An extra big thanks for everyone who filled out the survey and gave honest, detailed feedback. We had more responses than expected! It’s encouraging to see so much engagement from the community, and look forward to incorporating the feedback into discussions around the future of Python type checking and tools.  We hope to run the survey again in summer 2025 to see how sentiment changes and the adoption of tooling grows. We have a few ideas for how to improve the survey for next year. We want to ensure that many opinions across the community are heard and that we can capture typing sentiment from folks of different ranges of experience and levels of enthusiasm for typing.  What would you like to see in the survey next year? How can the Python Type System evolve to meet your needs? Join the conversation on discourse. You can also explore the data yourself through this tool and comment below with your insights.  *Based on an online survey conducted among 1,083 people distributed through X, LinkedIn, Reddit,and other social media platforms for targeting Python developers. The research was conducted by Meta, Microsoft and JetBrains. Data was collected between 07/29/2024 and 10/08/2024.",
  "image": "https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-HeroImage_dark.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\t\t\tTen years after the introduction of PEP 484, we surveyed the current state of the Python type system and the tools developers are using.\n\t\t\u003c/p\u003e\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003cspan\u003eThis summer, JetBrains, Meta, and Microsoft collaborated to conduct a comprehensive survey on the state of Python typing*. The survey aimed to understand how developers in the open source community are using type hints, the challenges they face, and the tools they rely on. Over 1,000 people took the survey and we are delighted to share the findings. Despite the positive typing sentiment, we received fantastic (even if a little biting at times) feedback about the type system. We’ll give a summary of the findings including usage statistics, overall sentiment and takeaways that can improve Python developer tooling. \u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003eOverall findings\u003c/h2\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e88% of respondents “Always” or “Often” use Types in their Python code.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eIDE tooling, documentation, and catching bugs are drivers for the high adoption of types in survey responses,\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eThe usability of types and ability to express complex patterns still are challenges that leave some code unchecked.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eLatency in tooling and lack of types in popular libraries are limiting the effectiveness of type checkers.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eInconsistency in type check implementations and poor discoverability of the documentation create friction in onboarding types into a project and seeking help when using the tools. \u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSurvey methodology\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eA survey about types is likely to attract a lot of typing enthusiasts, so we don’t take this to be an unbiased nor representative view of everyone in the community. We did our best to distribute to as many developers as possible and aimed for easy-to-understand questions for all skill levels. We created questions that would give a picture of developer profiles, tools, and overall sentiment towards typed Python. Beyond metrics, we wanted to get a sense of the current mood and are thankful for the detailed and candid feedback. \u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003eDeveloper cohorts\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eAs a general purpose language, it was not surprising to see Python types used across many fields. Scripting/automation, web development, data analysis, AI/ML, devOps and teaching all had large representation. One surprising finding was the value Python types are demonstrating outside of collaborative environments.  A significant portion of respondents use Python types in personal projects (66% of respondents who only use Python personally “Always” or “Often” use types, compared to 78% of only “Professional” developers) and without CI (29.6% respondents don’t have type checking in CI use types “Always” or “Often”).\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?w=1024\" alt=\"\" width=\"1024\" height=\"620\" srcset=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png 1114w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?resize=916,554 916w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?resize=768,465 768w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?resize=1024,620 1024w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?resize=96,58 96w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Development_Cohorts_dark_V1.png?resize=192,116 192w\" sizes=\"(max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003ch2\u003eIDEs and type checkers\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eWhen it comes to development environments, Visual Studio (VS) Code emerged as the most popular choice. The most popular configuration of IDE plus type checker was VS Code with Mypy followed by PyCharm with Mypy. Mypy remains the most popular type checker, with 67% of respondents using it and 38% using Pyright (24% use both). Emacs or NeoVIM also has a strong user base at 11% combined. The community’s preference for both IDE and type checker tooling is still quite varied. While not a static type checker, 62% of developers use Pydantic and 14% \u003c/span\u003e\u003ci\u003e\u003cspan\u003eonly\u003c/span\u003e\u003c/i\u003e\u003cspan\u003e use Pydantic, showing the use of the type system extending into runtime use cases.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?w=1024\" alt=\"\" width=\"1024\" height=\"649\" srcset=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png 1038w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?resize=916,581 916w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?resize=768,487 768w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?resize=1024,649 1024w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?resize=96,61 96w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-piechart_dark.png?resize=192,122 192w\" sizes=\"(max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003ch2\u003eWhat people love\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eDespite the challenges, developers appreciate the enhanced autocompletion and improved code clarity that type hints provide. “Better IDE Support” was the most useful feature (59%) followed by “Preventing Bugs” (49.8%) and “Documentation” (49.2%). They value the ability to catch potential bugs early and the ease of refactoring code. The optional nature of typing allows for gradual adoption, which many find beneficial.\u003c/span\u003e\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan\u003e“\u003c/span\u003e\u003cb\u003eIt finds real bugs.\u003c/b\u003e\u003cspan\u003e It often points to design flaws when typing is hard or impossible.”\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2\u003eCommon issues with type system documentation and usability\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eWe gave developers the opportunity to provide freeform feedback and saw several issues with the current type system come up repeatedly. The most common concerns are the complexity of the type system of expressing dynamic features (29 responses), the slow performance of type checkers like Mypy (22 responses), and the inconsistencies across different type checkers (21 responses). Lack of clarity in documentation, especially for advanced constructs, was also a pain point (10 responses). \u003c/span\u003e\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan\u003e“Numerous libraries lack any type annotations, hindering code analysis and potentially leading to runtime errors.”\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\u003cp\u003e\u003cspan\u003e“The hoops you sometimes have to jump through to at least somewhat correctly express runtime dynamic features, and even then they are often not correctly covered.”\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2\u003eWhy developers don’t use types\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eAmong respondents, 321 (29%) of developers cited the following reasons for not using types in their Python code. The primary reason for not using types is, “Not required for my projects,” which accounted for 11% of total survey responses. Interestingly, among the 321 developers who cited this reason, the majority (60%) still reported using types “Always” or “Often.” This is 28 points below the overall survey average, yet it remains a substantial proportion.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?w=1024\" alt=\"\" width=\"1024\" height=\"538\" srcset=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png 1126w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?resize=916,482 916w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?resize=768,404 768w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?resize=1024,538 1024w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?resize=96,50 96w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Static-Types_Dark.png?resize=192,101 192w\" sizes=\"auto, (max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003ch2\u003eRecommendations for Python language maintainers and tooling authors\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eDevelopers are asking for better standardization and consistency across tools. Improving support for dynamic and complex patterns, as well as enhancing runtime type checking, are all key areas for further thought. Better type checker performance was a common pain point cited by developers in all cohorts. Beyond features and performance, the accessibility and discoverability of Python documentation was mentioned numerous times. \u003c/span\u003e\u003ca href=\"https://docs.python.org/3/library/typing.html\"\u003e\u003cspan\u003eThe Python 3 typing docs\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e were the most popular way for people to learn about types or get help with issues. There was consistent feedback asking for better documentation, particularly for advanced typing features that included examples. “Lack of familiarity” was the second highest reason (8% of all responses) people are not using types. There is an opportunity to improve discoverability and usability of documentation.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?w=1024\" alt=\"\" width=\"1024\" height=\"702\" srcset=\"https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png 1172w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?resize=916,628 916w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?resize=768,527 768w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?resize=1024,702 1024w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?resize=96,66 96w, https://engineering.fb.com/wp-content/uploads/2024/12/Meta-Python-typing-survey-2024-Help-dark.png?resize=192,132 192w\" sizes=\"auto, (max-width: 992px) 100vw, 62vw\"/\u003e\u003c/p\u003e\n\u003ch2\u003eThank you! Let’s do this again!\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eThanks to everyone who helped create and share the survey. An extra big thanks for everyone who filled out the survey and gave honest, detailed feedback. We had more responses than expected! It’s encouraging to see so much engagement from the community, and look forward to incorporating the feedback into discussions around the future of Python type checking and tools. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eWe hope to run the survey again in summer 2025 to see how sentiment changes and the adoption of tooling grows. We have a few ideas for how to improve the survey for next year. We want to ensure that many opinions across the community are heard and that we can capture typing sentiment from folks of different ranges of experience and levels of enthusiasm for typing. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eWhat would you like to see in the survey next year? How can the Python Type System evolve to meet your needs? Join the conversation on \u003c/span\u003e\u003ca href=\"https://discuss.python.org/c/typing/32\"\u003e\u003cspan\u003ediscourse\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e. You can also \u003c/span\u003e\u003ca href=\"https://lookerstudio.google.com/reporting/15599c5b-0e51-4423-8998-cf5c1bfeea00/page/8lQ9D/edit\"\u003e\u003cspan\u003eexplore the data yourself through this tool\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and comment below with your insights. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ci\u003e\u003cspan\u003e*Based on an online survey conducted among 1,083 people distributed through X, LinkedIn, Reddit,and other social media platforms for targeting Python developers. The research was conducted by Meta, Microsoft and JetBrains. Data was collected between 07/29/2024 and 10/08/2024.\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\n\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-12-09T17:00:14Z",
  "modifiedTime": "2024-12-06T17:25:38Z"
}
