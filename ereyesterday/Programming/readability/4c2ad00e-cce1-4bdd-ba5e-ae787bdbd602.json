{
  "id": "4c2ad00e-cce1-4bdd-ba5e-ae787bdbd602",
  "title": "Automating Agile workflows with the gitlab-triage gem",
  "link": "https://about.gitlab.com/blog/2025/03/13/automating-agile-workflows-with-the-gitlab-triage-gem",
  "description": "",
  "author": "GitLab",
  "published": "2025-03-13T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "GitLab",
  "length": 9796,
  "excerpt": "Learn how to automate repetitive tasks like triaging issues and merge requests to free up valuable developer time in our \"Getting Started with GitLab\" series.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Welcome to our \"Getting started with GitLab\" series, where we help newcomers get familiar with the GitLab DevSecOps platform. This post dives into the gitlab-triage gem, a powerful tool that lets you create bots to automate your Agile workflow. Say goodbye to manual tasks and hello to streamlined efficiency. Why automate your workflow? Efficiency is key in software development. Automating repetitive tasks like triaging issues and merge requests frees up valuable time for your team to focus on what matters most: building amazing software. With gitlab-triage, you can: Ensure consistency: Apply labels and assign issues automatically based on predefined rules. Improve response times: Get immediate feedback on new issues and merge requests. Reduce manual effort: Eliminate the need for manual triage and updates. Boost productivity: Free up your team to focus on coding and innovation. Introducing the gitlab-triage gem The gitlab-triage gem is a Ruby library that allows you to create bots that interact with your GitLab projects. These bots can automatically perform a wide range of actions, including: Labeling: Automatically categorize issues and merge requests. Commenting: Provide updates, request information, or give feedback. Assigning: Assign issues and merge requests to the appropriate team members. Closing: Close stale or resolved issues and merge requests. Creating: Generate new issues based on specific events or conditions. And much more! Check out the gitlab-triage gem repository. Setting up your triage bot Let's get your first triage bot up and running! Install the gem. (Note: The gem command is available with Ruby programming language installed.) gem install gitlab-triage Get your GitLab API token. Go to your GitLab profile settings. Navigate to Access Tokens. Create a new token with the api scope. Keep your token secure and set an expiration date for it based on when you will be done with this walkthrough! Define your triage policies. Create a file named .triage-policies.yml in your project's root directory. This file will contain the rules that govern your bot's behavior. Here's a simple example: --- - name: \"Apply 'WIP' label\" condition: draft: true action: labels: - status::wip - name: \"Request more information on old issue\" condition: date: attribute: updated_at condition: older_than interval_type: months interval: 12 action: comment: | {{author}} This issue has been open for more than 12 months, is this still an issue? This configuration defines two policies: The first policy applies the status::wip label to any issue that is in draft. The second policy adds a comment to an issue that the issue has not been updated in 12 months. Run your bot. You can run your bot manually using the following command: gitlab-triage -t \u003cyour_api_token\u003e -p \u003cyour_project_id\u003e Replace \u003cyour_api_token\u003e with your GitLab API token and \u003cyour_project_id\u003e with the ID of your GitLab project. If you would like to see the impact of actions before they are taken, you can add the -n or --dry-run to test out the policies first. Automating with GitLab CI/CD To automate the execution of your triage bot, integrate it with GitLab CI/CD. Here's an example .gitlab-ci.yml configuration: triage: script: - gem install gitlab-triage - gitlab-triage -t $GITLAB_TOKEN -p $CI_PROJECT_ID only: - schedules This configuration defines a job named \"triage\" that installs the gitlab-triage gem and runs the bot using the $GITLAB_TOKEN (a predefined CI/CD variable) and the $CI_PROJECT_ID variable. The only: schedules clause ensures that the job runs only on a schedule. To create a schedule, go to your project's CI/CD settings and navigate to Schedules. Create a new schedule and define the frequency at which you want your bot to run (e.g., daily, hourly). Advanced triage policies gitlab-triage offers a range of advanced features for creating more complex triage policies: Regular expressions: Use regular expressions for more powerful pattern matching. Summary policies: Consolidate related issues into a single summary issue. Custom actions: Define custom actions using Ruby code blocks to perform more complex operations using the GitLab API. Here are two advanced real-world examples from the triage bot used by the Developer Advocacy team at GitLab. You can view the full policies in this file. - name: Issues where DA team member is an assignee outside DA-Meta project i.e. DevRel-Influenced conditions: assignee_member: source: group condition: member_of source_id: 1008 state: opened ruby: get_project_id != 18 forbidden_labels: - developer-advocacy actions: labels: - developer-advocacy - DevRel-Influenced - DA-Bot::Skip This example for issues across a group, excluding those in the project with the ID of 18, have assignees who are members of the group with ID of 1008 and do not have the label developer-advocacy on them. This policy helps the Developer Advocacy team at GitLab to find issues members of the team are assigned to but are not in their team’s project. This helps the team identify and keep track of contributions made outside of the team by adding the teams’ labels. - name: Missing Due Dates conditions: ruby: missing_due_date state: opened labels: - developer-advocacy forbidden_labels: - DA-Due::N/A - DA-Bot::Skip - DA-Status::FYI - DA-Status::OnHold - CFP - DA-Bot::Triage actions: labels: - DA-Bot-Auto-Due-Date comment: | /due #{get_current_quarter_last_date} This second example checks for all issues with the developer-advocacy label, which do not include labels in the forbidden labels list and when their due dates have passed. It updates the due dates automatically by commenting on the issue with a slash command and a date that is generated using Ruby. The Ruby scripts used in the policies are defined in a separate file as shown below. This feature allows you to be flexible in working with your filters and actions. You can see functions are created for different Ruby commands that we used in our policies. require 'json' require 'date' require \"faraday\" require 'dotenv/load' module DATriagePlugin def last_comment_at conn = Faraday.new( url: notes_url+\"?sort=desc\u0026order_by=created_at\u0026pagination=keyset\u0026per_page=1\", headers: {'PRIVATE-TOKEN' =\u003e ENV.fetch(\"PRIV_KEY\"), 'Content-Type' =\u003e 'application/json' } ) response = conn.get() if response.status == 200 jsonData = JSON.parse(response.body) if jsonData.length \u003e 0 Date.parse(jsonData[0]['created_at']) else Date.parse(resource[:created_at]) end else Date.parse(resource[:created_at]) end end def notes_url resource[:_links][:notes] end def get_project_id resource[:project_id] end def get_current_quarter_last_date() yr = Time.now.year case Time.now.month when 2..4 lm = 4 when 5..7 lm = 7 when 8..10 lm = 10 when 11..12 lm = 1 yr = yr + 1 else lm = 1 end return Date.new(yr, lm, -1) end def one_week_to_due_date if(resource[:due_date] == nil) false else days_to_due = (Date.parse(resource[:due_date]) - Date.today).to_i if(days_to_due \u003e 0 \u0026\u0026 days_to_due \u003c 7) true else false end end end def due_date_past if(resource[:due_date] == nil) false else Date.today \u003e Date.parse(resource[:due_date]) end end def missing_due_date if(resource[:due_date] == nil) true else false end end end Gitlab::Triage::Resource::Context.include DATriagePlugin The triage bot is executed using the command: `gitlab-triage -r ./triage_bot/issue_triage_plugin.rb --debug --token $PRIV_KEY --source-id gitlab-com --source groups` -r: Passes in a file of requirements for the performing triage. In this case we are passing in our Ruby functions. --debug: Prints debugging information as part of the output. --token: Is used to pass in a valid GitLab API token. --source: Specifies if the sources of the issues it will search is within a group or a project. --source-id: Takes in the ID of the selected source type – in this case, a group. The GitLab triage-ops project is another another real-world example that is more complex and you can learn how to build your own triage bot. Best practices Start simple: Begin with basic policies and gradually increase complexity as needed. Test thoroughly: Test your policies in a staging environment before deploying them to production. Monitor regularly: Monitor your bot's activity to ensure it's behaving as expected. Use descriptive names: Give your policies clear and descriptive names for easy maintenance. Be mindful of the scope of your filters: You might be tempted to filter issues across groups where thousands of issues exist. However, this can slow down the triage and also make the process fail due to rate limitations against the GitLab API. Prioritize using labels for triages: To avoid spamming other users, labels are a good way to perform triages without cluttering comments and issues. Take control of your workflow With the gitlab-triage gem, you can automate your GitLab workflow and unlock new levels of efficiency. Start by creating simple triage bots and gradually explore the more advanced features. You'll be amazed at how much time and effort you can save! Getting started with GitLab series Check out more articles in our \"Getting Started with GitLab\" series below: How to manage users How to import your projects to GitLab Mastering project management",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/cFwd8DYFLekdnOLmbbChp/5514b1d9934fad010f5bf4968a38a15b/blog-getting-started-with-gitlab-banner-0497-option4-fy25.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003e\u003cem\u003eWelcome to our \u0026#34;Getting started with GitLab\u0026#34; series, where we help newcomers get familiar with the GitLab DevSecOps platform.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis post dives into the \u003ca href=\"https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage\"\u003e\u003ccode\u003egitlab-triage\u003c/code\u003e\u003c/a\u003e gem, a powerful tool that lets you create bots to automate your Agile workflow. Say goodbye to manual tasks and hello to streamlined efficiency.\u003c/p\u003e\n\u003ch2 id=\"why-automate-your-workflow%3F\" tabindex=\"-1\"\u003eWhy automate your workflow? \u003ca href=\"#why-automate-your-workflow%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEfficiency is key in software development. Automating repetitive tasks like triaging issues and merge requests frees up valuable time for your team to focus on what matters most: building amazing software.\u003c/p\u003e\n\u003cp\u003eWith \u003ccode\u003egitlab-triage\u003c/code\u003e, you can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEnsure consistency:\u003c/strong\u003e Apply labels and assign issues automatically based on predefined rules.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImprove response times:\u003c/strong\u003e Get immediate feedback on new issues and merge requests.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReduce manual effort:\u003c/strong\u003e Eliminate the need for manual triage and updates.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBoost productivity:\u003c/strong\u003e Free up your team to focus on coding and innovation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introducing-the-gitlab-triage-gem\" tabindex=\"-1\"\u003eIntroducing the \u003ccode\u003egitlab-triage\u003c/code\u003e gem \u003ca href=\"#introducing-the-gitlab-triage-gem\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003egitlab-triage\u003c/code\u003e gem is a Ruby library that allows you to create bots that interact with your GitLab projects. These bots can automatically perform a wide range of actions, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLabeling:\u003c/strong\u003e Automatically categorize issues and merge requests.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommenting:\u003c/strong\u003e Provide updates, request information, or give feedback.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAssigning:\u003c/strong\u003e Assign issues and merge requests to the appropriate team members.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClosing:\u003c/strong\u003e Close stale or resolved issues and merge requests.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCreating:\u003c/strong\u003e Generate new issues based on specific events or conditions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAnd much more!\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCheck out the \u003ca href=\"https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage\"\u003e\u003ccode\u003egitlab-triage\u003c/code\u003e gem repository\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"setting-up-your-triage-bot\" tabindex=\"-1\"\u003eSetting up your triage bot \u003ca href=\"#setting-up-your-triage-bot\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLet\u0026#39;s get your first triage bot up and running!\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall the gem. (Note: The gem command is available with Ruby programming language installed.)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003egem install gitlab-triage\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eGet your GitLab API token.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eGo to your GitLab \u003ca href=\"https://gitlab.com/-/profile/preferences\"\u003eprofile settings\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eNavigate to \u003cstrong\u003eAccess Tokens\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a new token with the \u003ccode\u003eapi\u003c/code\u003e scope.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKeep your token secure and set an expiration date for it based on when you will be done with this walkthrough!\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eDefine your triage policies.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCreate a file named \u003ccode\u003e.triage-policies.yml\u003c/code\u003e in your project\u0026#39;s root directory. This file will contain the rules that govern your bot\u0026#39;s behavior. Here\u0026#39;s a simple example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n---\n- name: \u0026#34;Apply \u0026#39;WIP\u0026#39; label\u0026#34;\n  condition:\n    draft: true\n  action:\n    labels:\n      - status::wip\n\n- name: \u0026#34;Request more information on old issue\u0026#34;\n  condition:\n   date:\n    attribute: updated_at\n    condition: older_than\n    interval_type: months\n    interval: 12\n  action:\n    comment: |\n      {{author}} This issue has been open for more than 12 months, is this still an issue?\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis configuration defines two policies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe first policy applies the \u003ccode\u003estatus::wip\u003c/code\u003e label to any issue that is in draft.\u003c/li\u003e\n\u003cli\u003eThe second policy adds a comment to an issue that the issue has not been updated in 12 months.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003eRun your bot.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can run your bot manually using the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egitlab-triage -t \u0026lt;your_api_token\u0026gt; -p \u0026lt;your_project_id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReplace \u003ccode\u003e\u0026lt;your_api_token\u0026gt;\u003c/code\u003e with your GitLab API token and \u003ccode\u003e\u0026lt;your_project_id\u0026gt;\u003c/code\u003e with the \u003ca href=\"https://docs.gitlab.com/user/project/working_with_projects/#access-a-project-by-using-the-project-id\"\u003eID of your GitLab project\u003c/a\u003e. If you would like to see the impact of actions before they are taken, you can add the \u003ccode\u003e-n\u003c/code\u003e or \u003ccode\u003e--dry-run\u003c/code\u003e to test out the policies first.\u003c/p\u003e\n\u003ch2 id=\"automating-with-gitlab-cicd\" tabindex=\"-1\"\u003eAutomating with GitLab CI/CD \u003ca href=\"#automating-with-gitlab-cicd\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo automate the execution of your triage bot, integrate it with \u003ca href=\"https://about.gitlab.com/blog/2025/01/06/ultimate-guide-to-ci-cd-fundamentals-to-advanced-implementation/\"\u003eGitLab CI/CD\u003c/a\u003e. Here\u0026#39;s an example \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e configuration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ntriage:\n  script:\n    - gem install gitlab-triage\n    - gitlab-triage -t $GITLAB_TOKEN -p $CI_PROJECT_ID\n  only:\n    - schedules\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis configuration defines a job named \u0026#34;triage\u0026#34; that installs the \u003ccode\u003egitlab-triage\u003c/code\u003e gem and runs the bot using the \u003ccode\u003e$GITLAB_TOKEN\u003c/code\u003e (a predefined \u003ca href=\"https://docs.gitlab.com/ci/variables/\"\u003eCI/CD variable\u003c/a\u003e) and the \u003ccode\u003e$CI_PROJECT_ID\u003c/code\u003e variable. The \u003ccode\u003eonly: schedules\u003c/code\u003e clause ensures that the job runs only on a schedule.\u003c/p\u003e\n\u003cp\u003eTo create a \u003ca href=\"https://docs.gitlab.com/ee/ci/pipelines/schedules.html\"\u003eschedule\u003c/a\u003e, go to your project\u0026#39;s \u003cstrong\u003eCI/CD\u003c/strong\u003e settings and navigate to \u003cstrong\u003eSchedules\u003c/strong\u003e. Create a new schedule and define the frequency at which you want your bot to run (e.g., daily, hourly).\u003c/p\u003e\n\u003ch2 id=\"advanced-triage-policies\" tabindex=\"-1\"\u003eAdvanced triage policies \u003ca href=\"#advanced-triage-policies\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egitlab-triage\u003c/code\u003e offers a range of advanced features for creating more complex triage policies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRegular expressions:\u003c/strong\u003e Use regular expressions for more powerful pattern matching.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSummary policies:\u003c/strong\u003e Consolidate related issues into a single summary issue.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom actions:\u003c/strong\u003e Define custom actions using \u003ca href=\"https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage#can-i-customize\"\u003eRuby code blocks\u003c/a\u003e to perform more complex operations using the GitLab API.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere are two advanced real-world examples from the triage bot used by the Developer Advocacy team at GitLab. You can view the full policies in \u003ca href=\"https://gitlab.com/gitlab-da/projects/devrel-bot/-/blob/master/.triage-policies.yml?ref_type=heads\"\u003ethis file\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- name: Issues where DA team member is an assignee outside DA-Meta project i.e. DevRel-Influenced\n  conditions:\n    assignee_member:\n      source: group\n      condition: member_of\n      source_id: 1008\n    state: opened\n    ruby: get_project_id != 18 \n    forbidden_labels:\n      - developer-advocacy\n  actions:   \n    labels:\n      - developer-advocacy\n      - DevRel-Influenced\n      - DA-Bot::Skip\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example for issues across a group, excluding those in the project with the ID of 18, have assignees who are members of the group with ID of 1008 and do not have the label \u003ccode\u003edeveloper-advocacy\u003c/code\u003e on them. This policy helps the Developer Advocacy team at GitLab to find issues members of the team are assigned to but are not in their team’s project. This helps the team identify and keep track of contributions made outside of the team by adding the teams’ labels.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- name: Missing Due Dates\n  conditions:\n    ruby: missing_due_date\n    state: opened\n    labels:\n      - developer-advocacy\n    forbidden_labels:\n      - DA-Due::N/A\n      - DA-Bot::Skip\n      - DA-Status::FYI\n      - DA-Status::OnHold\n      - CFP\n      - DA-Bot::Triage\n  actions:\n    labels:\n      - DA-Bot-Auto-Due-Date\n    comment: |\n      /due #{get_current_quarter_last_date}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis second example checks for all issues with the \u003ccode\u003edeveloper-advocacy\u003c/code\u003e label, which do not include labels in the forbidden labels list and when their due dates have passed. It updates the due dates automatically by commenting on the issue with a slash command and a date that is generated using Ruby.\u003c/p\u003e\n\u003cp\u003eThe Ruby scripts used in the policies are defined in a separate file as shown below. This feature allows you to be flexible in working with your filters and actions. You can see functions are created for different Ruby commands that we used in our policies.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire \u0026#39;json\u0026#39;\nrequire \u0026#39;date\u0026#39;\nrequire \u0026#34;faraday\u0026#34;\nrequire \u0026#39;dotenv/load\u0026#39;\n\nmodule DATriagePlugin\n  def last_comment_at\n    conn = Faraday.new(\n      url: notes_url+\u0026#34;?sort=desc\u0026amp;order_by=created_at\u0026amp;pagination=keyset\u0026amp;per_page=1\u0026#34;,\n      headers: {\u0026#39;PRIVATE-TOKEN\u0026#39; =\u0026gt; ENV.fetch(\u0026#34;PRIV_KEY\u0026#34;), \u0026#39;Content-Type\u0026#39; =\u0026gt; \u0026#39;application/json\u0026#39; }\n    )\n\n    response = conn.get()\n    if response.status == 200\n      jsonData = JSON.parse(response.body)\n      if jsonData.length \u0026gt; 0\n        Date.parse(jsonData[0][\u0026#39;created_at\u0026#39;])\n      else\n        Date.parse(resource[:created_at])\n      end\n    else\n      Date.parse(resource[:created_at])\n    end\n  end\n\n  def notes_url\n    resource[:_links][:notes]\n  end\n\n  def get_project_id\n    resource[:project_id]\n  end\n\n  def get_current_quarter_last_date()\n    yr = Time.now.year\n    case Time.now.month\n    when 2..4\n      lm = 4\n    when 5..7\n      lm = 7\n    when 8..10\n      lm = 10\n    when 11..12\n      lm = 1\n      yr = yr + 1\n    else\n      lm = 1    \n    end\n\n    return Date.new(yr, lm, -1) \n  end\n\n  def one_week_to_due_date\n    if(resource[:due_date] == nil)\n      false\n    else\n      days_to_due = (Date.parse(resource[:due_date]) - Date.today).to_i\n      if(days_to_due \u0026gt; 0 \u0026amp;\u0026amp; days_to_due \u0026lt; 7)\n        true\n      else\n        false\n      end\n    end\n  end\n\n  def due_date_past\n    if(resource[:due_date] == nil)\n      false\n    else\n      Date.today \u0026gt; Date.parse(resource[:due_date])\n    end\n  end\n\n  def missing_due_date\n    if(resource[:due_date] == nil)\n      true\n    else\n      false\n    end\n  end\n\nend\n\nGitlab::Triage::Resource::Context.include DATriagePlugin\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe triage bot is executed using the command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e`gitlab-triage -r ./triage_bot/issue_triage_plugin.rb --debug --token $PRIV_KEY --source-id gitlab-com --source groups`  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-r\u003c/code\u003e: Passes in a  file of requirements for the performing triage. In this case we are passing in our Ruby functions.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--debug\u003c/code\u003e: Prints debugging information as part of the output.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--token\u003c/code\u003e: Is used to pass in a valid GitLab API token.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--source\u003c/code\u003e: Specifies if the sources of the issues it will search is within a group or a project.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--source-id\u003c/code\u003e: Takes in the ID of the selected source type – in this case, a group.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe GitLab \u003ca href=\"https://gitlab.com/gitlab-org/quality/triage-ops\"\u003etriage-ops\u003c/a\u003e project is another another real-world example that is more complex and you can learn how to build your own triage bot.\u003c/p\u003e\n\u003ch2 id=\"best-practices\" tabindex=\"-1\"\u003eBest practices \u003ca href=\"#best-practices\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStart simple:\u003c/strong\u003e Begin with basic policies and gradually increase complexity as needed.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTest thoroughly:\u003c/strong\u003e Test your policies in a staging environment before deploying them to production.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMonitor regularly:\u003c/strong\u003e Monitor your bot\u0026#39;s activity to ensure it\u0026#39;s behaving as expected.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUse descriptive names:\u003c/strong\u003e Give your policies clear and descriptive names for easy maintenance.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe mindful of the scope of your filters:\u003c/strong\u003e You might be tempted to filter issues across groups where thousands of issues exist. However, this can slow down the triage and also make the process fail due to rate limitations against the GitLab API.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePrioritize using labels for triages:\u003c/strong\u003e To avoid spamming other users, labels are a good way to perform triages without cluttering comments and issues.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"take-control-of-your-workflow\" tabindex=\"-1\"\u003eTake control of your workflow \u003ca href=\"#take-control-of-your-workflow\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWith the \u003ccode\u003egitlab-triage\u003c/code\u003e gem, you can automate your GitLab workflow and unlock new levels of efficiency. Start by creating simple triage bots and gradually explore the more advanced features. You\u0026#39;ll be amazed at how much time and effort you can save!\u003c/p\u003e\n\u003ch2 id=\"getting-started-with-gitlab-series\" tabindex=\"-1\"\u003eGetting started with GitLab series \u003ca href=\"#getting-started-with-gitlab-series\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCheck out more articles in our \u0026#34;Getting Started with GitLab\u0026#34; series below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/14/getting-started-with-gitlab-how-to-manage-users/\"\u003eHow to manage users\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/28/getting-started-with-gitlab-how-to-import-your-projects-to-gitlab/\"\u003eHow to import your projects to GitLab\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/02/11/getting-started-with-gitlab-mastering-project-management/\"\u003eMastering project management\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-03-13T00:00:00Z",
  "modifiedTime": null
}
