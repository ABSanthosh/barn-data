{
  "id": "b91e8b9b-ab35-465e-adfa-f5039bfc8b85",
  "title": "WebStorm 2024.3: Built-In Database Tools and SQL Support, Better AI-driven Code Completion, and More",
  "link": "https://blog.jetbrains.com/webstorm/2024/11/webstorm-2024-3/",
  "description": "Our third major release of 2024 is here! In this version, you’ll find built-in database tools and SQL support, various quality enhancements, better code completion with AI Assistant, and a whole lot more. DOWNLOAD WEBSTORM 2024.3 If you only have a few minutes to explore the highlights of WebStorm 2024.3, check out our quick review […]",
  "author": "David Watson",
  "published": "Tue, 12 Nov 2024 16:05:08 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "releases",
    "webstorm-2024-3"
  ],
  "byline": "David Watson",
  "length": 10355,
  "excerpt": "WebStorm 2024.3, the third major update of the year, is out! Try the latest release today.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The JavaScript and TypeScript IDE News ReleasesWebStorm 2024.3: Built-In Database Tools and SQL Support, Better AI-driven Code Completion, and More Our third major release of 2024 is here! In this version, you’ll find built-in database tools and SQL support, various quality enhancements, better code completion with AI Assistant, and a whole lot more. DOWNLOAD WEBSTORM 2024.3 If you only have a few minutes to explore the highlights of WebStorm 2024.3, check out our quick review video above for the top highlights. If you want to dive deeper into what you can expect in the release, just carry on reading! The new features and improvements in v2024.3 include: Key Highlights: Improved framework component navigation and renaming, built-in support for database tools and SQL, better code completion with AI Assistant. Frameworks and Technologies: Color preview for Tailwind CSS classes, improvements for Angular, and more. User Experience: Optimized placement for the Rename action, cleaner search results for directories, highlighting for occurrences of selected text, and more. Integrated Developer Tools: Option to disable background pre-commit checks, new Docker Compose build attributes, and more. Key Highlights Improved framework component navigation and renaming WebStorm 2024.3 now supports the Show component usages action for Vue, Svelte, and Astro and detects component usages both in imports and templates. You can also use this functionality by invoking the Find Usages action on the component file in the Project view: The Rename refactoring has also been enhanced to include component usages renaming. When renaming a component file or explicitly defined name, the associated usages in templates will also be updated! This behavior can be disabled by toggling the Search for component usages option during the renaming process and in the Find dialog. Built-in support for database tools and SQL The Database Tools and SQL plugin, which was previously only available via a separate paid subscription, is now bundled with WebStorm at no extra cost. You can query, create, and manage databases directly in the IDE. This extends WebStorm’s capabilities for backend and full-stack development. It also makes switching between JetBrains IDEs easier, as most of them include this functionality. Better code completion with AI Assistant  WebStorm 2024.3 has significantly improved AI-driven code completion for JavaScript and TypeScript. The new approach combines fast, local full-line completion with powerful cloud-based suggestions powered by JetBrains’ in-house LLMs. This hybrid approach enhances speed, accuracy, and usability while reducing the frequency of lengthy and irrelevant suggestions. Here are some of the key improvements: Highlighting is now applied to the suggested code, which previously was just plain gray text. Partial acceptance allows you to apply suggestions granularly, giving you more control over changes to your code: Accept suggestions word by word – ⌥ → / Alt+Right. Accept suggestions line by line – ⌘ → / Ctrl+Right. As before, you can explicitly call completion with ⇧ ⌥ / / Shift+Alt. Context collection has been enhanced using RAG strategies. Completion suggestions are now provided in more locations, and are now triggered during typing, not only on Enter keystrokes. Support for AI-based code completion has also been extended to HTML and CSS (including .css, .less, .scss, .sass, .pcss). Please refer to this blog post for more insights. Frameworks and Technologies Color preview for Tailwind CSS classes  In WebStorm 2024.3, color previews for Tailwind CSS classes are now shown inline in the editor. We’ve added support for the textDocument/documentColor method of the Language Server Protocol (LSP), so all LSP-based plugins now support this functionality out of the box. Improvements for Angular  For projects with Angular 19, WebStorm now defaults to standalone mode for components, directives, and pipes. Quick-fixes have been added to help convert between standalone and non-standalone components. Unused standalone imports can be automatically removed during code reformatting or via a new inspection. Support for the @let syntax has also been improved. Correct handling of .prettierignore in subfolders  WebStorm 2024.3 now properly handles .prettierignore files in subfolders with a package.json, ensuring ignored files aren’t formatted. A new option also lets you specify custom ignore files in Settings | Languages \u0026 Frameworks | JavaScript | Prettier. Bundled Vue Language Server  The Vue Language Server is now bundled with WebStorm to enhance reliability and prevent issues with loading on WSL. We may do the same for Svelte, Astro, and other technologies in the future.  Improvements for Svelte WebStorm 2024.3 provides support for the \u003cscript module\u003e attribute, ensuring symbols from these blocks are resolved correctly. Additionally, there’s a new checkbox to disable SvelteKit a11y warnings, giving you more control over accessibility warnings.  Support for CSS exported via package.json  WebStorm 2024.3 includes support for the exports field in package.json for CSS, Sass, SCSS, and Less. If styles are exported via package.json, WebStorm will no longer show warnings about unresolved variables. Bun debugging support for Windows  Basic Bun debugging, previously available only on macOS and Linux, is now supported on Windows. You can set breakpoints, step through code, inspect variables, and evaluate expressions within WebStorm. User Experience Optimized placement for the Rename action We’ve optimized the placement of the Rename action in the context menu when it’s called on elements in the editor and the Project tool window. The action is now at the top level, making it easier to quickly rename files, variables, and other elements. Cleaner search results for directories WebStorm now excludes node_modules results by default when using Find in Files in project directories, reducing clutter from irrelevant files. You can restore the previous behavior by enabling the Search in library files when “Directory” is selected in Find in Files option under Settings | Advanced Settings. Highlight occurrences of selected text By default, WebStorm will now automatically highlight all instances of the text you select within a file. This makes it easier to track where your selected text appears throughout your code. You can customize the feature in Settings | Editor | General | Appearance. .idea directory displayed by default Previously, the .idea folder – a place where WebStorm stores internal configuration settings – was hidden by default. This made it harder for some users to commit project-wide configurations. To address this, we’ve made it visible in the Project tool window. Better recognition of generated files WebStorm 2024.3 will automatically exclude unnecessary files in the dist folder from indexing to optimize CPU usage and decrease indexing time. Better support for projects in WSL We’ve improved the reliability of projects that are hosted on WSL and opened from Windows in WebStorm. In particular, support for symlinks has been added, and interaction with WSL has been switched to Hyper-V sockets, which has improved the performance of IDE interaction with WSL. New features available during indexing When you open or update your project, WebStorm indexes it, making some features temporarily inaccessible. We’re working to improve this by allowing more functionality during indexing. With this update, Search Everywhere (Shift+Shift) now works for already indexed parts of the project, along with spelling and grammar checks. Integrated Developer Tools Option to disable background pre-commit checks You can now manage background checks during the commit process with a new option under Settings | Version Control | Commit | Advanced Commit Checks | Run advanced checks after a commit is done. This setting lets you decide if tests and inspections should run after making a commit. If you want to wait for these checks to complete, simply disable this option. New Docker Compose build attributes WebStorm 2024.3 adds support for new Docker Compose attributes that give you better control over builds, resource management, service orchestration, and networking within Docker Compose, making development more efficient and flexible. Improved compatibility for Dev Container templates We’ve improved the compatibility of Dev Container templates, which weren’t originally designed to operate in remote environments. Previously, Dev Container templates often included configurations that assumed local execution, leading to issues when running containers on remote Docker instances. Now, WebStorm ensures that templates that are not optimized for remote use still function correctly. There are lots of new improvements and enhancements to try out in this latest WebStorm release. If you’d like a list of everything included in WebStorm 2024.3, please check out the release notes. We hope you enjoy this release. As always, please share your feedback with us and report any issues you find to our issue tracker. The WebStorm team Subscribe to WebStorm Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/ws-2024-3-Social_Share.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/webstorm/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/WebStorm-2.svg\" alt=\"Webstorm logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe JavaScript and TypeScript IDE\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/webstorm/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/webstorm/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eWebStorm 2024.3: Built-In Database Tools and SQL Support, Better AI-driven Code Completion, and More\u003c/h2\u003e                    \n                    \n\u003cp\u003eOur third major release of 2024 is here! In this version, you’ll find built-in database tools and SQL support, various quality enhancements, better code completion with AI Assistant, and a whole lot more.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/imXCmeQo1GU?si=6WHb9FORyB1CYtfU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/webstorm/download\" target=\"_blank\" rel=\"noopener\"\u003eDOWNLOAD WEBSTORM 2024.3\u003c/a\u003e\u003c/p\u003e\n\n\n\u003cp\u003eIf you only have a few minutes to explore the highlights of WebStorm 2024.3, check out our quick review video above for the top highlights. If you want to dive deeper into what you can expect in the release, just carry on reading!\u003c/p\u003e\n\n\n\n\u003cp\u003eThe new features and improvements in v2024.3 include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#Highlights\"\u003e\u003cstrong\u003eKey Highlights\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e:\u003c/strong\u003e Improved framework component navigation and renaming, built-in support for database tools and SQL, better code completion with AI Assistant.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#Frameworks\"\u003e\u003cstrong\u003eFrameworks and Technologies\u003c/strong\u003e\u003c/a\u003e: Color preview for Tailwind CSS classes, improvements for Angular, and more.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#UX\"\u003e\u003cstrong\u003eUser Experience\u003c/strong\u003e\u003c/a\u003e: Optimized placement for the \u003cem\u003eRename\u003c/em\u003e action, cleaner search results for directories, highlighting for occurrences of selected text, and more.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#Integrated\"\u003e\u003cstrong\u003eIntegrated Developer Tools\u003c/strong\u003e\u003c/a\u003e: Option to disable background pre-commit checks, new Docker Compose build attributes, and more.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"Highlights\"\u003eKey Highlights\u003c/h2\u003e\n\n\n\n\u003ch3\u003eImproved framework component navigation and renaming\u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm 2024.3 now supports the\u003cem\u003e Show component usages\u003c/em\u003e action for Vue, Svelte, and Astro and detects component usages both in imports and templates. You can also use this functionality by invoking the \u003cem\u003eFind Usages\u003c/em\u003e action on the component file in the \u003cem\u003eProject\u003c/em\u003e view:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Component-usages-810.png\" alt=\"component usages demo with refactoring\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Component-usages-810.gif\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe\u003cem\u003e Rename\u003c/em\u003e refactoring has also been enhanced to include component usages renaming. When renaming a component file or explicitly defined name, the associated usages in templates will also be updated! This behavior can be disabled by toggling the \u003cem\u003eSearch for component usages\u003c/em\u003e option during the renaming process and in the \u003cem\u003eFind\u003c/em\u003e dialog.\u003c/p\u003e\n\n\n\n\u003ch3\u003eBuilt-in support for database tools and SQL\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe Database Tools and SQL plugin, which was previously only available via a separate paid subscription, is now bundled with WebStorm at no extra cost. You can query, create, and manage databases directly in the IDE. This extends WebStorm’s capabilities for backend and full-stack development. It also makes switching between JetBrains IDEs easier, as most of them include this functionality.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Database-plugin-810.png\" alt=\"Demo showing the database plugin features in WebStorm\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Database-plugin-810.gif\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eBetter code completion with AI Assistant \u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm 2024.3 has significantly improved AI-driven code completion for JavaScript and TypeScript. The new approach combines fast, local full-line completion with powerful cloud-based suggestions powered by JetBrains’ in-house LLMs. This hybrid approach enhances speed, accuracy, and usability while reducing the frequency of lengthy and irrelevant suggestions.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are some of the key improvements:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\n\u003cli\u003eHighlighting is now applied to the suggested code, which previously was just plain gray text.\u003c/li\u003e\n\u003cli\u003ePartial acceptance allows you to apply suggestions granularly, giving you more control over changes to your code:\n\n\u003c/li\u003e\u003cli\u003eAccept suggestions word by word –\u003cem\u003e ⌥ → / Alt+Right\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eAccept suggestions line by line – \u003cem\u003e⌘ → / Ctrl+Right\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eAs before, you can explicitly call completion with \u003cem\u003e⇧ ⌥ / / Shift+Alt\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eContext collection has been enhanced using RAG strategies.\u003c/li\u003e\n\n\u003c/ul\u003e\n\n\n\u003cp\u003eCompletion suggestions are now provided in more locations, and are now triggered during typing, not only on \u003cem\u003eEnter\u003c/em\u003e keystrokes. Support for AI-based code completion has also been extended to HTML and CSS (including \u003ccode\u003e.css\u003c/code\u003e, \u003ccode\u003e.less\u003c/code\u003e, \u003ccode\u003e.scss\u003c/code\u003e, \u003ccode\u003e.sass\u003c/code\u003e, \u003ccode\u003e.pcss\u003c/code\u003e). Please refer to \u003ca href=\"https://blog.jetbrains.com/ai/2024/10/complete-the-un-completable-the-state-of-ai-completion-in-jetbrains-ides/\"\u003ethis blog post\u003c/a\u003e for more insights.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/AI-completion-810.png\" alt=\"tab-labels\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/AI-completion-810.gif\"/\u003e\u003c/figure\u003e\n\n\n\u003ch2 id=\"Frameworks\"\u003eFrameworks and Technologies\u003c/h2\u003e\n\n\n\u003ch3\u003eColor preview for Tailwind CSS classes \u003c/h3\u003e\n\n\n\u003cp\u003eIn WebStorm 2024.3, color previews for Tailwind CSS classes are now shown inline in the editor. We’ve added support for the \u003ccode\u003etextDocument/documentColor\u003c/code\u003e method of the Language Server Protocol (LSP), so all LSP-based plugins now support this functionality out of the box.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Tailwind-css-color-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eImprovements for Angular \u003c/h3\u003e\n\n\n\u003cp\u003eFor projects with \u003ca href=\"https://blog.angular.dev/the-future-is-standalone-475d7edbc706\" target=\"_blank\" rel=\"noopener\"\u003eAngular 19\u003c/a\u003e, WebStorm now defaults to standalone mode for components, directives, and pipes. Quick-fixes have been added to help convert between standalone and non-standalone components. Unused standalone imports can be automatically removed during code reformatting or via a new inspection. Support for the \u003ccode\u003e@let\u003c/code\u003e syntax has also been improved.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Angular-optimize-810.png\" alt=\"Angular improvements demo showing the standalone imports being removed when not used\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Angular-optimize-810-1.gif\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003eCorrect handling of \u003ccode\u003e.prettierignore\u003c/code\u003e in subfolders \u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm 2024.3 now properly handles \u003ccode\u003e.prettierignore\u003c/code\u003e files in subfolders with a \u003ccode\u003epackage.json\u003c/code\u003e, ensuring ignored files aren’t formatted. A new option also lets you specify custom ignore files in \u003cem\u003eSettings | Languages \u0026amp; Frameworks | JavaScript | Prettier\u003c/em\u003e.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Prettier-ignore-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eBundled Vue Language Server \u003c/h3\u003e\n\n\n\u003cp\u003eThe Vue Language Server is now bundled with WebStorm to enhance reliability and prevent issues with loading on WSL. We may do the same for Svelte, Astro, and other technologies in the future. \u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Vue-language-server-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eImprovements for Svelte\u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm 2024.3 provides support for the \u003ccode\u003e\u0026lt;script module\u0026gt;\u003c/code\u003e attribute, ensuring symbols from these blocks are resolved correctly. Additionally, there’s a new checkbox to disable SvelteKit a11y warnings, giving you more control over accessibility warnings. \u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Svelte-setting-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eSupport for CSS exported via \u003ccode\u003epackage.json\u003c/code\u003e \u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm 2024.3 includes support for the \u003ccode\u003eexports\u003c/code\u003e field in \u003ccode\u003epackage.json\u003c/code\u003e for CSS, Sass, SCSS, and Less. If styles are exported via \u003ccode\u003epackage.json\u003c/code\u003e, WebStorm will no longer show warnings about unresolved variables.\u003c/p\u003e\n\n\n\u003ch3\u003eBun debugging support for Windows \u003c/h3\u003e\n\n\n\u003cp\u003eBasic Bun debugging, previously available only on macOS and Linux, is now supported on Windows. You can set breakpoints, step through code, inspect variables, and evaluate expressions within WebStorm.\u003c/p\u003e\n\n\n\u003ch2 id=\"UX\"\u003eUser Experience\u003c/h2\u003e\n\n\n\u003ch3\u003eOptimized placement for the \u003cem\u003eRename\u003c/em\u003e action\u003c/h3\u003e\n\n\n\u003cp\u003eWe’ve optimized the placement of the \u003cem\u003eRename\u003c/em\u003e action in the context menu when it’s called on elements in the editor and the\u003cem\u003e Project\u003c/em\u003e tool window. The action is now at the top level, making it easier to quickly rename files, variables, and other elements.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Rename-ui-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eCleaner search results for directories\u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm now excludes \u003ccode\u003enode_modules\u003c/code\u003e results by default when using \u003cem\u003eFind in Files\u003c/em\u003e in project directories, reducing clutter from irrelevant files. You can restore the previous behavior by enabling the \u003cem\u003eSearch in library files when “Directory” is selected in Find in Files\u003c/em\u003e option under \u003cem\u003eSettings | Advanced Settings\u003c/em\u003e.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Clear-find-module-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eHighlight occurrences of selected text\u003c/h3\u003e\n\n\n\u003cp\u003eBy default, WebStorm will now automatically highlight all instances of the text you select within a file. This makes it easier to track where your selected text appears throughout your code. You can customize the feature in \u003cem\u003eSettings | Editor | General | Appearance\u003c/em\u003e.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Text-occurances-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003e\u003ccode\u003e.idea\u003c/code\u003e directory displayed by default\u003c/h3\u003e\n\n\n\u003cp\u003ePreviously, the \u003ccode\u003e.idea\u003c/code\u003e folder – a place where WebStorm stores internal configuration settings – was hidden by default. This made it harder for some users to commit project-wide configurations. To address this, we’ve made it visible in the \u003cem\u003eProject \u003c/em\u003etool window.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/idea-folder-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eBetter recognition of generated files\u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm 2024.3 will automatically exclude unnecessary files in the \u003ccode\u003edist\u003c/code\u003e folder from indexing to optimize CPU usage and decrease indexing time.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Dist-ignored-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eBetter support for projects in WSL\u003c/h3\u003e\n\n\n\u003cp\u003eWe’ve improved the reliability of projects that are hosted on WSL and opened from Windows in WebStorm. In particular, support for symlinks has been added, and interaction with WSL has been switched to Hyper-V sockets, which has improved the performance of IDE interaction with WSL.\u003c/p\u003e\n\n\n\u003ch3\u003eNew features available during indexing\u003c/h3\u003e\n\n\n\u003cp\u003eWhen you open or update your project, WebStorm indexes it, making some features temporarily inaccessible. We’re working to improve this by allowing more functionality during indexing. With this update, \u003cem\u003eSearch Everywhere\u003c/em\u003e (\u003cem\u003eShift+Shift\u003c/em\u003e) now works for already indexed parts of the project, along with spelling and grammar checks.\u003c/p\u003e\n\n\n\u003ch2 id=\"Integrated\"\u003eIntegrated Developer Tools\u003c/h2\u003e\n\n\n\u003ch3\u003eOption to disable background pre-commit checks\u003c/h3\u003e\n\n\n\u003cp\u003eYou can now manage background checks during the commit process with a new option under \u003cem\u003eSettings | Version Control | Commit | Advanced Commit Checks | Run advanced checks after a commit is done\u003c/em\u003e. This setting lets you decide if tests and inspections should run after making a commit. If you want to wait for these checks to complete, simply disable this option.\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1620\" height=\"724\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Run-advanced-checks-810.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eNew Docker Compose build attributes\u003c/h3\u003e\n\n\n\u003cp\u003eWebStorm 2024.3 adds support for new Docker Compose attributes that give you better control over builds, resource management, service orchestration, and networking within Docker Compose, making development more efficient and flexible.\u003c/p\u003e\n\n\n\u003ch3\u003eImproved compatibility for Dev Container templates\u003c/h3\u003e\n\n\n\u003cp\u003eWe’ve improved the compatibility of Dev Container templates, which weren’t originally designed to operate in remote environments. Previously, Dev Container templates often included configurations that assumed local execution, leading to issues when running containers on remote Docker instances. Now, WebStorm ensures that templates that are not optimized for remote use still function correctly.\u003c/p\u003e\n\n\n\u003cp\u003eThere are lots of new improvements and enhancements to try out in this latest WebStorm release. If you’d like a list of everything included in \u003ca href=\"https://www.jetbrains.com/webstorm/download\" target=\"_blank\" rel=\"noopener\"\u003eWebStorm 2024.3\u003c/a\u003e, please check out the \u003ca href=\"https://youtrack.jetbrains.com/articles/WEB-A-233538548/WebStorm-2024.3-243.21565.180-build-Release-Notes\" target=\"_blank\" rel=\"noopener\"\u003erelease notes\u003c/a\u003e. We hope you enjoy this release. As always, please share your feedback with us and report any issues you find to our \u003ca href=\"https://youtrack.jetbrains.com/issues/WEB\" target=\"_blank\" rel=\"noopener\"\u003eissue tracker\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cem\u003eThe WebStorm team\u003c/em\u003e\u003c/p\u003e\n\n\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to WebStorm Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
