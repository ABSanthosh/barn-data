{
  "id": "ba2ef2bf-6710-4bcf-998a-200a685f0988",
  "title": "QCon SF: Large Scale Search and Ranking Systems at Netflix",
  "link": "https://www.infoq.com/news/2024/11/qcon-sf-netflix-search-recommend/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Moumita Bhattacharya spoke at QCon SF 2024 about state-of-the-art search and ranking systems. She gave an overview of the typical structure of these systems and followed with a deep dive into how Netflix created a single combined model to handle both tasks. By Anthony Alford",
  "author": "Anthony Alford",
  "published": "Tue, 19 Nov 2024 23:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Netflix",
    "QCon San Francisco 2024",
    "Deep Learning",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Anthony Alford",
  "length": 3413,
  "excerpt": "Moumita Bhattacharya spoke at QCon SF 2024 about state-of-the-art search and ranking systems. She gave an overview of the typical structure of these systems and followed with a deep dive into how Netf",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241119073511/apple-touch-icon.png",
  "text": "Moumita Bhattacharya spoke at QCon SF 2024 about state-of-the-art search and ranking systems. She gave an overview of the typical structure of these systems and followed with a deep dive into how Netflix created a single combined model to handle both tasks. Dr. Bhattacharya, a Senior Research Scientist at Netflix, began by outlining the problem and common solution patterns. Many consumer websites these days have millions of users and millions of items or products, and to provide their users with a good experience they must help users find the products they are interested in, whether via direct search by the user or by recommending products automatically. The two problems of search and recommendation both can be solved via ranking, but the scale of the problems means it's not possible to dynamically rank all the products for each user in real time. The typical solution is a two-step system, where the first step selects a few hundred or thousand candidate products from the full catalog of millions, then the second step ranks these candidates. The first pass needs to have high recall, meaning it should return a high fraction of all relevant products. The second step is where often \"heavy machine learning algorithms are deployed.\"  Bhattacharya then explored some specific use cases at Netflix. First was a recommendation use case: anticipatory search. Because many Netflix users are interacting with the site via a television remote, it is difficult for them to enter search queries, so Netflix tries to predict a query the user is likely to enter and recommend movies based on that. While Netflix does include a user's long-term history data in its models, it also uses \"in-session\" browsing signals to determine the user's current intent. The second use case presented Unified Contextual Recommender (UniCoRn), a single model that can handle both search and recommendation tasks. It supports both text-based search queries, for example when a user types a movie title, as well \"more like this\" recommendations which, given one movie, suggest additional movies to watch. The key differences in these tasks are the context (search query vs source movie), engagement data, the candidate set, and any post-ranking business logic. Bhattacharya pointed out that having the single model trained for multiple tasks actually increased its performance. Netflix found that UniCoRn produced 7% and 10% lift, respectively, for search and recommendation. After her talk, Bhattacharya took questions from the audience. One question was that, although a combined model might have better performance, did it have any drawbacks. Bhattacharya said that Netflix did need to work to ensure \"personalization is not overpowering relevance,\" and how they merged these two was important. Another drawback was that the model was quite large, and so inference latency was a challenge. Another audience member asked how the scheme would scale for domains where the number of products was much higher, such as e-commerce. Bhattacharya said she believed it would, since the model would be operating in the second step of the pipeline, after the first step produced a candidate set. However, she noted that it would require a good first-pass retrieval algorithm. About the Author Anthony Alford",
  "image": "https://res.infoq.com/news/2024/11/qcon-sf-netflix-search-recommend/en/headerimage/generatedHeaderImage-1732030129885.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/moumitab/\"\u003eMoumita Bhattacharya\u003c/a\u003e spoke at \u003ca href=\"https://qconsf.com/presentation/nov2024/recommender-and-search-ranking-systems-large-scale-real-world-applications\"\u003eQCon SF 2024 about state-of-the-art search and ranking systems\u003c/a\u003e. She gave an overview of the typical structure of these systems and followed with a deep dive into how Netflix created a single combined model to handle both tasks.\u003c/p\u003e\n\n\u003cp\u003eDr. Bhattacharya, a Senior Research Scientist at Netflix, began by outlining the problem and common solution patterns. Many consumer websites these days have millions of users and millions of items or products, and to provide their users with a good experience they must help users find the products they are interested in, whether via direct search by the user or by recommending products automatically. The two problems of search and recommendation both can be solved via ranking, but the scale of the problems means it\u0026#39;s not possible to dynamically rank all the products for each user in real time.\u003c/p\u003e\n\n\u003cp\u003eThe typical solution is a two-step system, where the first step selects a few hundred or thousand candidate products from the full catalog of millions, then the second step ranks these candidates. The first pass needs to have high recall, meaning it should return a high fraction of all relevant products. The second step is where often \u0026#34;heavy machine learning algorithms are deployed.\u0026#34; \u003c/p\u003e\n\n\u003cp\u003eBhattacharya then explored some specific use cases at Netflix. First was a recommendation use case: anticipatory search. Because many Netflix users are interacting with the site via a television remote, it is difficult for them to enter search queries, so Netflix tries to predict a query the user is likely to enter and recommend movies based on that. While Netflix does include a user\u0026#39;s long-term history data in its models, it also uses \u0026#34;in-session\u0026#34; browsing signals to determine the user\u0026#39;s current intent.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Netflix UniCoRn Search/Recommendation Model\" data-src=\"news/2024/11/qcon-sf-netflix-search-recommend/en/resources/1netflix-unicorn-model-1732030292077.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/qcon-sf-netflix-search-recommend/en/resources/1netflix-unicorn-model-1732030292077.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe second use case presented \u003ca href=\"https://dl.acm.org/doi/abs/10.1145/3640457.3688034\"\u003eUnified Contextual Recommender\u003c/a\u003e (UniCoRn), a single model that can handle both search and recommendation tasks. It supports both text-based search queries, for example when a user types a movie title, as well \u0026#34;more like this\u0026#34; recommendations which, given one movie, suggest additional movies to watch. The key differences in these tasks are the context (search query vs source movie), engagement data, the candidate set, and any post-ranking business logic. Bhattacharya pointed out that having the single model trained for multiple tasks actually increased its performance. Netflix found that UniCoRn produced 7% and 10% lift, respectively, for search and recommendation.\u003c/p\u003e\n\n\u003cp\u003eAfter her talk, Bhattacharya took questions from the audience. One question was that, although a combined model might have better performance, did it have any drawbacks. Bhattacharya said that Netflix did need to work to ensure \u0026#34;personalization is not overpowering relevance,\u0026#34; and how they merged these two was important. Another drawback was that the model was quite large, and so inference latency was a challenge.\u003c/p\u003e\n\n\u003cp\u003eAnother audience member asked how the scheme would scale for domains where the number of products was much higher, such as e-commerce. Bhattacharya said she believed it would, since the model would be operating in the second step of the pipeline, after the first step produced a candidate set. However, she noted that it would require a good first-pass retrieval algorithm.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Anthony-Alford\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAnthony Alford\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-19T00:00:00Z",
  "modifiedTime": null
}
