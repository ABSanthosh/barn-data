{
  "id": "0987f796-1a61-4bf7-81d1-846cb790078f",
  "title": "Should Your Company Adopt Remote Development?",
  "link": "https://blog.jetbrains.com/codecanvas/2024/10/should-your-company-adopt-remote-development/",
  "description": "Adopting remote development is a significant decision for any company. At JetBrains, we talk to many customers about this shift. While we see growing demand, we also encounter many misconceptions about what remote development with cloud development environments (CDEs) can and cannot do. 1. What problems can you solve with remote development Before diving into […]",
  "author": "Alexey Totin",
  "published": "Thu, 24 Oct 2024 16:34:18 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "insights",
    "codecanvas"
  ],
  "byline": "Alexey Totin",
  "length": 27905,
  "excerpt": "Adopting remote development is a significant decision for any company. At JetBrains, we talk to many customers about this shift. While we see growing demand, we also encounter many misconceptions abou",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The ultimate platform for managing cloud development environments Insights Adopting remote development is a significant decision for any company. At JetBrains, we talk to many customers about this shift. While we see growing demand, we also encounter many misconceptions about what remote development with cloud development environments (CDEs) can and cannot do. 1. What problems can you solve with remote development Before diving into whether CDEs make sense for your business, let’s identify the core problems that remote development helps to solve: Non-productive timeMuch development time is wasted on setting up development environments (e.g. when onboarding new staff or dealing with “works on my machine” issues), switching branches for small tasks (IDEs need to reindex the codebase, rebuild the project, etc.), and waiting for builds to complete. This time could be better spent on actual development work. CDEs can help minimize these delays by providing standardized, ready-to-use environments for each task. Security risksFor industries like finance, healthcare, or companies that use contractors, local development poses numerous security risks: Company code is more vulnerable when stored on local machines, and the possibility of policy violations or data breaches is greater. With CDEs, code and sensitive data are stored in the cloud, with strict access control and monitoring. Local machine limitationsDevelopers often face hardware constraints, such as insufficient RAM, CPU, or GPUs for heavy machine learning tasks. CDEs scale with your needs, providing the necessary resources on demand to eliminate these limitations. However, the simple fact that you’re facing these challenges doesn’t automatically mean that remote development is the right solution for your team. Whether it’s worth adopting remote development depends on various factors, such as the scale of your team, your development workflows and infrastructure, and many others. This post will guide you through these considerations in the form of a questionnaire. We’ll explore key areas like: Organization scale: How the size and distribution of your team affect the need for remote development. Development process: The type of projects you work on and your development workflows can heavily influence how beneficial CDEs will be for your team. Security and compliance: How remote development environments can help you meet security and compliance requirements. Infrastructure and resources: How your current infrastructure and internet connection may impact the usage of CDEs. Additional considerations: Other factors like software licensing and disaster recovery that might affect your decision. JetBrains CodeCanvas In September 2024, we announced the release of CodeCanvas, our solution for remote development. CodeCanvas is a CDE orchestration tool that can help you centralize the configuration of dev environments for specific projects, manage the CDE lifecycle (from creation to deletion), and benefit from the support of the majority of JetBrains IDEs and VS Code. For more details, check out our announcement blog post and watch the overview video. 2. Organization scale a. Number of developers in your company 0–30 developersFor smaller teams, traditional local development may still be a cost-effective solution. The overhead of managing cloud infrastructure, setting up CDEs, and maintaining cloud resources might not justify the benefits of CDEs.Recommendation: Stick to local development unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc. 30+ developersAt this scale, managing multiple development environments can become a challenge, especially when different projects require different configurations. Here, remote environments can simplify onboarding and make transitions between projects easier. With tools like CodeCanvas, setting up and managing these environments at scale becomes more efficient.Recommendation: Consider hybrid solutions, where some environments are remote and others are local. 100+ developersManaging local development at scale can be highly inefficient. As your team grows, CDEs simplify scaling by enabling centralized management, enforcing security, and minimizing local machine setup.Recommendation: CDEs are highly recommended at this scale. b. Number of projects and project complexity It’s challenging to provide a definitive answer based solely on the number of projects your company is developing. The impact of multiple projects on your development process depends on several key factors. Key considerations: Project complexity: Even a single project in development may require complex configuration: multiple modules, numerous dependencies, specialized hardware requirements (like GPUs for AI/ML tasks), and so on. These complexities are also constantly evolving, with updates to dependencies, frameworks, or hardware demands that each developer must keep up with. CDEs overcome these challenges by providing standardized and ready-to-use environments for all developers. Developer workload and context switching: Consider how many projects a single developer works on and how frequently they switch between them. Frequent switching can lead to significant downtime due to a need to configure different local setups in the same local environment. CDEs eliminate the need to switch contexts in the same environment by providing pre-configured environments for each project. Environment consistency: The more projects your team handles, the harder it is to ensure that all developers are working with the same environment configuration. Variations in local setups can result in the “works on my machine” problem. CDEs centralize environment configuration, ensuring every developer works with consistent setups across all projects. Recommendation:  Few projects, low complexity: If your company develops a small number of simple projects, CDEs might not offer significant benefits, as the overhead of local environment management remains manageable. Multiple projects, high complexity: CDEs are highly beneficial for companies managing multiple and/or complex projects – especially those involving AI/ML workflows. They reduce setup time, improve consistency, and help scale GPU resources efficiently. c. Geographical distribution of your team When considering CDEs, latency is the critical factor that can make or break the experience. Latency is recommended to stay under 100 ms for a smooth and responsive development workflow.  All your developers are in one locationIf your entire team is located in one place with fast and stable access to nearby cloud services, maintaining low network latency is simpler. You have distributed teams across the globeNetwork latency can have a more noticeable impact on globally distributed teams. Latency greater than 100 ms can disrupt the responsiveness of CDEs, causing developers to experience delays while coding​. To mitigate this, you must deploy dev environment clusters as close to your developers as possible, often in different regions. This reduces latency but introduces additional operational costs for setup and maintenance. Recommendations: Assess network conditions: Evaluate the latency between your developers’ locations and the cloud regions where CDEs can be hosted. Keep latency below 100 ms to ensure a smooth development experience. Regional deployments: If feasible, deploy dev environment clusters in each region where your developers are located. This setup reduces latency but requires more operational overhead. Hybrid approach: Consider a hybrid model where developers in regions with low latency to cloud data centers use CDEs while others continue with local dev environments. d. Growth rate of your team You have a stable team sizeIf your development team is stable or only slowly growing, local environments or a traditional development setup might still be manageable. However, adopting CDEs can still provide significant benefits, like standardized environments, improved developer productivity, and better security. Other sections of this blog post address all these benefits. You have a rapidly growing teamFor rapidly growing development teams, adopting CDEs is not just a benefit – it’s almost essential for managing scale, streamlining onboarding, and controlling infrastructure costs: Resource scaling: As your team grows, managing individual machines and scaling hardware can quickly become overwhelming. CDEs can dynamically allocate the necessary compute resources for your team. Onboarding efficiency: Onboarding new developers quickly is essential in a fast-growing team. Case studies show that new hires can jump straight into development with pre-configured environments, reducing onboarding time from days to minute​s. Cost efficiency: CDEs prevent overspending on idle resources by scaling down when not in use, allowing infrastructure to grow in line with team size. 3. Development process a. Type of developed applications Understanding the nature of the applications your team develops is crucial in determining whether CDEs are suitable for your workflow. Server-side applications (web apps, backends, APIs)CDEs are well-suited for server-side development, which typically doesn’t require a graphical user interface (GUI) or specialized hardware. CDEs support port forwarding, allowing developers to run their applications remotely and access them through the web browser on their local machine.Recommendation: CDEs are a great fit. Client-side web applicationsAs with server-side apps, if a client-side app doesn’t require a native GUI, CDEs can effectively replace local machines.Recommendation: CDEs are a great fit. Mobile applications (iOS and Android) iOS apps: CDEs have limitations for iOS development because of Apple’s ecosystem requirements. Xcode (the essential tool for iOS development) doesn’t currently support remote development. Android apps: Android development is supported in CDEs. However, there may be challenges running the Android Emulator, which is a separate resource-intensive application. Recommendation: Remote development isn’t fully available to mobile devices yet. For iOS development, using local macOS machines or VDI solutions is the only viable option. For Android development, CDEs are supported, though there may be some nuances to consider. Desktop applicationsCDEs are typically Linux-based (like CodeCanvas). You can use VNC to access desktop windows, which allows you to visually interact with applications. However, there are limitations, especially if you are developing for other operating systems. Even if you’re building cross-platform apps, testing and building for macOS or Windows still require their own respective environments.Recommendation: CDEs are a good fit for Linux apps but not for macOS and Windows. Game developmentGame development with engines like Unity or Unreal Engine requires running the engine application alongside your IDE. This means the engine window must be somehow shared between the remote dev environment and a local machine. Though this can be done via VNC, the problem here is that both Unity and Unreal Engine require GPUs for real-time rendering and other tasks. However, VNC doesn’t support hardware-accelerated rendering, meaning that while you can use VNC to view the remote desktop, it won’t perform well with these game engines.Recommendation: Developing games in CDEs is not recommended at this point. Specialized applications (embedded systems, IoT, hardware integration)Developing and testing applications for embedded systems, IoT devices, and hardware-integrated solutions often requires direct access to hardware, such as microcontrollers, sensors, and other external peripherals.Recommendation: Stick to local environments unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc. b. Branching strategies Branching strategies play a significant role in your development workflow and can influence the benefits of CDEs for your team. Your team uses flows with feature branchesIf your team utilizes a branching strategy that involves creating feature branches for new features, bug fixes, or experiments (e.g. GitFlow, GitHub Flow, or others), CDEs can offer substantial advantages: Isolated environments: Developers can easily create a dedicated CDE for each feature branch, ensuring that changes are isolated and do not interfere with other work. Quick context switching: Developers can switch between different tasks or features by simply launching the corresponding CDEs. This means there are no overheads like those associated with changing branches locally, which often requires rebuilding indexes, fetching dependencies, and waiting for the environment to be ready. Consistent setups: Each CDE is a fresh environment based on the branch’s code, reducing issues caused by leftover artifacts or configurations from previous work.For example, a developer is assigned to fix a bug while already working on a new feature. Instead of stashing changes or juggling branches locally, they can: Keep the CDE for the new feature runningю Run a new CDE for the bug fix on the appropriate branch. Switch between CDEs instantly, maintaining productivity and reducing context-switching costs. Recommendation: Adopting CDEs can significantly speed up the development. Your team uses flows without feature branchesIf your team employs trunk-based development or ad hoc commits to main, CDEs can still provide some benefits: Fresh environments for each task: When starting a new task in the morning, developers must fetch the latest changes from the main branch. On large projects, this could mean pulling in 100+ commits each day. After fetching, the IDE needs to rebuild indexes and dependencies, which can take up to 30 minutes or more. With CDEs, the warmup feature automatically builds and prepares all the data overnight, meaning the developers can start their work almost immediately. Reduced local setup overhead: CDEs eliminate the need to manage local environments, reducing issues related to configuration drift or dependency conflicts. Task isolation: Even without branches, using separate CDEs for different tasks can help isolate work and prevent unintended interactions between changes. Recommendation: Even without branches, CDEs can help maintain a clean working state and reduce setup time. c. Code reviews and merge requests Your team uses code reviews and merge requestsCode reviews and merge requests that require approval are essential practices for maintaining high code quality. If your workflow includes these practices, CDEs can greatly enhance their efficiency: Instant environment setup: Very few developers are willing to switch their entire local project to a review branch, as this can result in hours of setup – especially when new dependencies are introduced during the review. With CDEs, reviewers can quickly spin up a dedicated dev environment with a specific branch or commit under review. In-depth analysis and experimentation: With a CDE, reviewers can open the reviewed code in a full-featured IDE, allowing them to navigate the codebase, understand the context, and even run/debug the code. Moreover, they can test proposed changes without affecting their local setup. Your team doesn’t use code reviews and merge requestsWithout these practices, the benefits of CDEs in this context may be insignificant. However, we strongly recommend implementing code reviews and merge requests, at least for critical parts of your codebase, as they can greatly enhance code quality and collaboration. Recommendation: If you rely on code reviews and merge requests, CDEs will perfectly fit into your workflow. d. Onboarding of new developers The complexity of your development environment can greatly impact the time it takes for new hires to become effective team members. Quick onboarding (less than a day)If your current setup allows new developers to install and configure their local environments in just a few hours, CDEs may offer limited additional value.Recommendation: Stick with local development unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc. Complex onboarding (several days or more)During onboarding, setting up a development environment with complex configurations, access setup, multiple dependencies, or large codebases can take days or weeks. Recommendation: Adopt CDEs, such as CodeCanvas, to significantly reduce onboarding time. Pre-configured environments allow developers to avoid the time-consuming task of local setup and start working right away. Frequent onboarding (rapid growth or high turnover) If your company is rapidly expanding or experiencing high turnover, the cumulative time spent on onboarding becomes significant. Ensuring each new developer has a consistent environment is critical to maintaining productivity and reducing errors. Recommendation: Regardless of how long onboarding takes in your company, CDEs will help you greatly improve this process. e. Internal tools Your company has platform teams building internal developer toolsIn large organizations, platform teams often create specialized tools for developers, such as custom authentication mechanisms, CLI tools for managing cloud resources, and others. The challenge lies in delivering and configuring this tooling consistently across all developer machines.With the centralized management of CDEs, this becomes much easier. Platform teams can ensure that all required tools, configurations, and updates are included in the standard CDE templates – all developers will work in properly configured environments without needing to install or update the tools themselves manually.Recommendation: CDEs can significantly simplify tool adoption. Your company doesn’t have such teamsRecommendation: Stick to local environments unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc. 4. Security and compliance a. Strict security or compliance requirements You have significant compliance needs (e.g. fintech, healthcare)If your organization operates in industries with stringent security or compliance mandates – such as finance, healthcare, or government – CDEs can offer several security advantages: Data isolation: With CDEs, your source code remains within the secure cloud infrastructure, reducing the risk of local device vulnerabilities or leaks. Of course, users can still retrieve the data from a remote environment if they really need to, and you can minimize this risk further with third-party solutions, such as data loss prevention (DLP) or monitoring tools. Centralized control and role-based access (RBAC): Tools like CodeCanvas make it easier to enforce access controls, track activity, and comply with strict regulations like SOC 2 or HIPAA. Built-in RBAC ensures that only authorized personnel can access specific data, adding an extra layer of security​. Recommendation: CDEs are a valuable tool for meeting stringent industry regulations. You have standard security measuresFor organizations without strict compliance requirements, CDEs still offer better security than local machines, simply “by design”. Code and data are housed in secure cloud environments, preventing the risks associated with local storage. Recommendation: Evaluate CDEs for additional security benefits. b. Use of contractors or third-party developers Your team works with contractors or third-party developersWhen working with external teams, security is the main concern, and CDEs can be a great solution: Fast onboarding via provisioning pre-configured dev environments. Limited access with role-based access control (RBAC): Contractors have access only to the specific dev environments they need. Once a contractor completes their work, CDEs allow you to swiftly revoke access. Recommendation: CDEs are highly beneficial. Your team doesn’t work with contractors or third-party developersEven if contractors or third-party developers are not part of your workflow, CDEs may still offer benefits in terms of team management and security. Recommendation: Evaluate CDEs for additional security benefits. c. Need for audit trails and activity logs Your team requires audit trails and activity logsCDEs can track key actions related to development environments, such as when a CDE is created, modified, or run for a specific project. This allows for transparent tracking of who accessed what and when, a critical requirement for security reviews and audits. Recommendation: CDEs are recommended for teams requiring centralized tracking of environment-related actions: creation, usage, changes to configuration templates, and so on. Your team doesn’t need audit trails or detailed logsEven if audit trails and detailed logging aren’t critical to your organization, CDEs may still offer benefits in terms of team management and security. Recommendation: Evaluate CDEs for additional security benefits. 5. Infrastructure and resources a. Infrastructure setup Your team uses local machines onlyThe truth about remote development is that using local machines will always be cheaper in terms of pure infrastructure costs. However, the benefits of CDEs lead to indirect savings: Reduced non-productive time (NPT): Remote development reduces the time developers spend setting up environments, switching branches, or waiting for indexing. These tasks, often seen as downtime, are greatly minimized. Lower hardware costs: With CDEs, developers no longer need powerful machines, as heavy computing tasks happen in the cloud. This approach significantly reduces the need to provide high-end hardware for every developer. If developers occasionally need more powerful hardware, they can access it through the cloud without needing a dedicated machine. Your team uses virtual machines for developmentIf you’re already using VMs, adopting CDEs with orchestration tools like CodeCanvas can further optimize your costs: Scalable resources: CDEs offer dynamic scaling, ensuring that you only use resources as needed, preventing over-provisioning or leaving VMs idle. Auto-shutdown: Automatically shutting down environments when they’re not in use helps reduce costs and avoids wasting resources. Cheaper storage: Tools like CodeCanvas can automatically move data of inactive dev environments to more cost-effective storage, further reducing infrastructure expenses. Auto cleanup: Unused or abandoned CDEs can be automatically deleted, freeing up pricy cloud storage. Your team has some infrastructure in the cloud (AWS, Azure, Google Cloud)For companies already using cloud infrastructure, integrating CDEs into the existing setup can be a smoother and potentially more cost-effective process: Existing expertise: Your cloud experts can easily set up and maintain an orchestration tool like CodeCanvas. Access to cloud resources: CDEs have built-in access to the resources hosted in the same cloud (via Kubernetes service accounts). Cost benefits through scale: By moving the local development to the cloud, you might see cost advantages through bulk usage or negotiated discounts with cloud providers​. Recommendation: Be prepared for remote development to be more expensive in terms of infrastructure costs, but you may save indirectly through improved productivity, reduced expenses on local hardware, and optimized resource management. The actual savings depend on factors like team size and project duration – the more developers you have and the longer the time frame, the more you save. b. Internet connection reliability Remote development heavily depends on fast and stable internet connections. Your team has strong, reliable internetIf your internet is reliable and provides low latency (under 100 ms) to major cloud service providers (AWS, Google Cloud, Azure), then CDEs are a suitable option for you. Your team experiences intermittent internet issues or has slower bandwidthWith remote development, no internet means no development. Slow or unreliable internet can significantly impact productivity. Latency greater than 100 ms can make interactions with the remote IDE frustrating, causing delays during typing. Recommendation: If you want to adopt CDEs, ensure your latency to cloud providers is consistently below 100 ms. Additionally, it’s vital to have a backup internet plan. Without the internet, you won’t be able to access your dev environments or code, so ensure you have a second provider, among other backup options. 6. Additional considerations a. Software licensing and compliance IDE licensing: When using CDEs, IDE licenses (e.g. for JetBrains IDEs) function as they would locally. Developers are required to have valid licenses to use their chosen IDE within the cloud environment, as CDEs do not manage or provide these licenses automatically. Licensing for additional tools and dependencies: Licensing may be more complex for specialized development tools, frameworks, or dependencies. Some tools may have specific licensing models for cloud usage, such as geographic restrictions or limits on the number of users. Before deploying these tools in CDEs, it’s essential to verify whether additional steps are needed to comply with licensing terms. License management: CDEs do not offer centralized management for software licenses. If you’re using multiple third-party tools, managing these licenses (e.g. tracking usage, renewals, and compliance) may require an external license management system to prevent over-deployment or violations. b. Disaster recovery and business continuity Recovery time: In traditional local setups, recovery time depends heavily on your ability to restore hardware, retrieve backups, and reconfigure environments. In CDEs, recovery times can be significantly reduced as dev environments are created on demand from pre-configured templates. Internet dependency: Since CDEs depend on constant internet access, a failure in connectivity could result in a total development halt. It’s critical to have a backup internet connection in place or alternative local environments that can be activated in the case of extended internet outages​. Cost and complexity: Implementing a fail-safe infrastructure in CDEs can increase both the cost and complexity of your setup. However, the trade-off is enhanced resilience and potentially reduced downtime​. c. CDEs and AI development AI and autonomous developers: As we move toward a future where AI-autonomous developers become a reality, CDEs will play a crucial role. Remote development offers the infrastructure and scalability necessary for AI agents to run. AI models can use CDEs to perform code generation, testing, and deployment autonomously. Useful links To try CodeCanvas or schedule a demo, contact our Ssales team CodeCanvas documentation CodeCanvas overview video Subscribe to CodeCanvas Blog Updates",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/10/should-your-company-adopt-remote-development_social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/codecanvas/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/CodeCanvas.svg\" alt=\"Codecanvas logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe ultimate platform for managing cloud development environments\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/codecanvas/category/insights/\"\u003eInsights\u003c/a\u003e\u003c/p\u003e                    \n                    \n\u003cp\u003eAdopting remote development is a significant decision for any company. At JetBrains, we talk to many customers about this shift. While we see growing demand, we also encounter many misconceptions about what remote development with cloud development environments (CDEs) can and cannot do.\u003c/p\u003e\n\n\n\n\u003ch2\u003e1. What problems can you solve with remote development\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore diving into whether CDEs make sense for your business, let’s identify the core problems that remote development helps to solve:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNon-productive time\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eMuch development time is wasted on setting up development environments (e.g. when onboarding new staff or dealing with “works on my machine” issues), switching branches for small tasks (IDEs need to reindex the codebase, rebuild the project, etc.), and waiting for builds to complete. This time could be better spent on actual development work. CDEs can help minimize these delays by providing standardized, ready-to-use environments for each task.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSecurity risks\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eFor industries like finance, healthcare, or companies that use contractors, local development poses numerous security risks: Company code is more vulnerable when stored on local machines, and the possibility of policy violations or data breaches is greater. With CDEs, code and sensitive data are stored in the cloud, with strict access control and monitoring.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLocal machine limitations\u003cbr/\u003e\u003c/strong\u003eDevelopers often face hardware constraints, such as insufficient RAM, CPU, or GPUs for heavy machine learning tasks. CDEs scale with your needs, providing the necessary resources on demand to eliminate these limitations.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eHowever, the simple fact that you’re facing these challenges doesn’t automatically mean that remote development is the right solution for your team. Whether it’s worth adopting remote development depends on various factors, such as the scale of your team, your development workflows and infrastructure, and many others. This post will guide you through these considerations in the form of a questionnaire. We’ll explore key areas like:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#2.-organization-scale\" data-type=\"internal\" data-id=\"#2.-organization-scale\"\u003eOrganization scale\u003c/a\u003e: How the size and distribution of your team affect the need for remote development.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#3.-development-process\" data-type=\"internal\" data-id=\"#3.-development-process\"\u003eDevelopment process\u003c/a\u003e: The type of projects you work on and your development workflows can heavily influence how beneficial CDEs will be for your team.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#4.-security-and-compliance\" data-type=\"internal\" data-id=\"#4.-security-and-compliance\"\u003eSecurity and compliance\u003c/a\u003e: How remote development environments can help you meet security and compliance requirements.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#5.-infrastructure-and-resources\" data-type=\"internal\" data-id=\"#5.-infrastructure-and-resources\"\u003eInfrastructure and resources\u003c/a\u003e: How your current infrastructure and internet connection may impact the usage of CDEs.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#6.-additional-considerations\" data-type=\"internal\" data-id=\"#6.-additional-considerations\"\u003eAdditional considerations\u003c/a\u003e: Other factors like software licensing and disaster recovery that might affect your decision.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eJetBrains CodeCanvas\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn September 2024, we announced the release of \u003ca href=\"https://jetbrains.com/codecanvas\" target=\"_blank\" rel=\"noopener\"\u003eCodeCanvas\u003c/a\u003e, our solution for remote development. CodeCanvas is a CDE orchestration tool that can help you centralize the configuration of dev environments for specific projects, manage the CDE lifecycle (from creation to deletion), and benefit from the support of the majority of JetBrains IDEs and VS Code. For more details, check out our \u003ca href=\"https://blog.jetbrains.com/blog/2024/09/17/introducing-codecanvas/\"\u003eannouncement blog post\u003c/a\u003e and watch the \u003ca href=\"https://youtu.be/g_FYa-4wqPE\" target=\"_blank\" rel=\"noopener\"\u003eoverview video\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1999\" height=\"237\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/image1_organization-scale.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e2. Organization scale\u003c/h2\u003e\n\n\n\n\u003ch3\u003ea. Number of developers in your company\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e0–30 developers\u003c/strong\u003e\u003cbr/\u003eFor smaller teams, traditional local development may still be a cost-effective solution. The overhead of managing cloud infrastructure, setting up CDEs, and maintaining cloud resources might not justify the benefits of CDEs.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Stick to local development unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e30+ developers\u003c/strong\u003e\u003cbr/\u003eAt this scale, managing multiple development environments can become a challenge, especially when different projects require different configurations. Here, remote environments can simplify onboarding and make transitions between projects easier. With tools like CodeCanvas, setting up and managing these environments at scale becomes more efficient.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Consider hybrid solutions, where some environments are remote and others are local.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e100+ developers\u003c/strong\u003e\u003cbr/\u003eManaging local development at scale can be highly inefficient. As your team grows, CDEs simplify scaling by enabling centralized management, enforcing security, and minimizing local machine setup.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: CDEs are highly recommended at this scale.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eb. Number of projects and project complexity\u003c/h3\u003e\n\n\n\n\u003cp\u003eIt’s challenging to provide a definitive answer based solely on the number of projects your company is developing. The impact of multiple projects on your development process depends on several key factors.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eKey considerations\u003c/strong\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eProject complexity\u003c/strong\u003e: Even a single project in development may require complex configuration: multiple modules, numerous dependencies, specialized hardware requirements (like GPUs for AI/ML tasks), and so on. These complexities are also constantly evolving, with updates to dependencies, frameworks, or hardware demands that each developer must keep up with. CDEs overcome these challenges by providing standardized and ready-to-use environments for all developers.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDeveloper workload and context switching\u003c/strong\u003e: Consider how many projects a single developer works on and how frequently they switch between them. Frequent switching can lead to significant downtime due to a need to configure different local setups in the same local environment. CDEs eliminate the need to switch contexts in the same environment by providing pre-configured environments for each project.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEnvironment consistency\u003c/strong\u003e: The more projects your team handles, the harder it is to ensure that all developers are working with the same environment configuration. Variations in local setups can result in the “works on my machine” problem. CDEs centralize environment configuration, ensuring every developer works with consistent setups across all projects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation: \u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFew projects, low complexity\u003c/strong\u003e: If your company develops a small number of simple projects, CDEs might not offer significant benefits, as the overhead of local environment management remains manageable.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMultiple projects, high complexity\u003c/strong\u003e: CDEs are highly beneficial for companies managing multiple and/or complex projects – especially those involving AI/ML workflows. They reduce setup time, improve consistency, and help scale GPU resources efficiently.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003ec. Geographical distribution of your team\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhen considering CDEs, latency is the critical factor that can make or break the experience. Latency is recommended to stay under 100 ms for a smooth and responsive development workflow. \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAll your developers are in one location\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf your entire team is located in one place with fast and stable access to nearby cloud services, maintaining low network latency is simpler.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYou have distributed teams across the globe\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eNetwork latency can have a more noticeable impact on globally distributed teams. Latency greater than 100 ms can disrupt the responsiveness of CDEs, causing developers to experience delays while coding​. To mitigate this, you must deploy dev environment clusters as close to your developers as possible, often in different regions. This reduces latency but introduces additional operational costs for setup and maintenance.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendations:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAssess network conditions:\u003c/strong\u003e Evaluate the latency between your developers’ locations and the cloud regions where CDEs can be hosted. Keep latency below 100 ms to ensure a smooth development experience.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eRegional deployments:\u003c/strong\u003e If feasible, deploy dev environment clusters in each region where your developers are located. This setup reduces latency but requires more operational overhead.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eHybrid approach:\u003c/strong\u003e Consider a hybrid model where developers in regions with low latency to cloud data centers use CDEs while others continue with local dev environments.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003ed. Growth rate of your team\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYou have a stable team size\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf your development team is stable or only slowly growing, local environments or a traditional development setup might still be manageable. However, adopting CDEs can still provide significant benefits, like standardized environments, improved developer productivity, and better security. Other sections of this blog post address all these benefits.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYou have a rapidly growing team\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eFor rapidly growing development teams, adopting CDEs is not just a benefit – it’s almost essential for managing scale, streamlining onboarding, and controlling infrastructure costs:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eResource scaling\u003c/strong\u003e: As your team grows, managing individual machines and scaling hardware can quickly become overwhelming. CDEs can dynamically allocate the necessary compute resources for your team.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eOnboarding efficiency\u003c/strong\u003e: Onboarding new developers quickly is essential in a fast-growing team. Case studies show that new hires can jump straight into development with pre-configured environments, reducing onboarding time from days to minute​s.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCost efficiency\u003c/strong\u003e: CDEs prevent overspending on idle resources by scaling down when not in use, allowing infrastructure to grow in line with team size.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1999\" height=\"255\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/image-2_development-process.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e3. Development process\u003c/h2\u003e\n\n\n\n\u003ch3\u003ea. Type of developed applications\u003c/h3\u003e\n\n\n\n\u003cp\u003eUnderstanding the nature of the applications your team develops is crucial in determining whether CDEs are suitable for your workflow.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eServer-side applications (web apps, backends, APIs)\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eCDEs are well-suited for server-side development, which typically doesn’t require a graphical user interface (GUI) or specialized hardware. CDEs support port forwarding, allowing developers to run their applications remotely and access them through the web browser on their local machine.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: CDEs are a great fit.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eClient-side web applications\u003c/strong\u003e\u003cbr/\u003eAs with server-side apps, if a client-side app doesn’t require a native GUI, CDEs can effectively replace local machines.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: CDEs are a great fit.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMobile applications (iOS and Android)\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eiOS apps\u003c/strong\u003e: CDEs have limitations for iOS development because of Apple’s ecosystem requirements. Xcode (the essential tool for iOS development) doesn’t currently support remote development.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAndroid apps\u003c/strong\u003e: Android development is supported in CDEs. However, there may be challenges running the Android Emulator, which is a separate resource-intensive application.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Remote development isn’t fully available to mobile devices yet. For iOS development, using local macOS machines or VDI solutions is the only viable option. For Android development, CDEs are supported, though there may be some nuances to consider.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDesktop applications\u003c/strong\u003e\u003cbr/\u003eCDEs are typically Linux-based (like CodeCanvas). You can use VNC\u003cstrong\u003e \u003c/strong\u003eto access desktop windows, which allows you to visually interact with applications. However, there are limitations, especially if you are developing for other operating systems. Even if you’re building cross-platform apps, testing and building for macOS or Windows still require their own respective environments.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: CDEs are a good fit for Linux apps but not for macOS and Windows.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGame development\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eGame development with engines like Unity or Unreal Engine requires running the engine application alongside your IDE. This means the engine window must be somehow shared between the remote dev environment and a local machine. Though this can be done via VNC, the problem here is that both Unity and Unreal Engine require GPUs for real-time rendering and other tasks. However, VNC doesn’t support hardware-accelerated rendering, meaning that while you can use VNC to view the remote desktop, it won’t perform well with these game engines.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Developing games in CDEs is not recommended at this point.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSpecialized applications (embedded systems, IoT, hardware integration)\u003cbr/\u003e\u003c/strong\u003eDeveloping and testing applications for embedded systems, IoT devices, and hardware-integrated solutions often requires direct access to hardware, such as microcontrollers, sensors, and other external peripherals.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Stick to local environments unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eb. Branching strategies\u003c/h3\u003e\n\n\n\n\u003cp\u003eBranching strategies play a significant role in your development workflow and can influence the benefits of CDEs for your team.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team uses flows with feature branches\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf your team utilizes a branching strategy that involves creating feature branches for new features, bug fixes, or experiments (e.g. GitFlow, GitHub Flow, or others), CDEs can offer substantial advantages:\u003cbr/\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIsolated environments:\u003c/strong\u003e Developers can easily create a dedicated CDE for each feature branch, ensuring that changes are isolated and do not interfere with other work.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eQuick context switching:\u003c/strong\u003e Developers can switch between different tasks or features by simply launching the corresponding CDEs. This means there are no overheads like those associated with changing branches locally, which often requires rebuilding indexes, fetching dependencies, and waiting for the environment to be ready.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eConsistent setups:\u003c/strong\u003e Each CDE is a fresh environment based on the branch’s code, reducing issues caused by leftover artifacts or configurations from previous work.\u003cp\u003eFor example, a developer is assigned to fix a bug while already working on a new feature. Instead of stashing changes or juggling branches locally, they can:\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eKeep the CDE for the new feature runningю\u003c/li\u003e\n\n\n\n\u003cli\u003eRun a new CDE for the bug fix on the appropriate branch.\u003c/li\u003e\n\n\n\n\u003cli\u003eSwitch between CDEs instantly, maintaining productivity and reducing context-switching costs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Adopting CDEs can significantly speed up the development.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team uses flows without feature branches\u003c/strong\u003e\u003cbr/\u003eIf your team employs trunk-based development or ad hoc commits to main, CDEs can still provide some benefits:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFresh environments for each task:\u003c/strong\u003e When starting a new task in the morning, developers must fetch the latest changes from the main branch. On large projects, this could mean pulling in 100+ commits each day. After fetching, the IDE needs to rebuild indexes and dependencies, which can take up to 30 minutes or more. With CDEs, the warmup feature automatically builds and prepares all the data overnight, meaning the developers can start their work almost immediately.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eReduced local setup overhead:\u003c/strong\u003e CDEs eliminate the need to manage local environments, reducing issues related to configuration drift or dependency conflicts.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTask isolation:\u003c/strong\u003e Even without branches, using separate CDEs for different tasks can help isolate work and prevent unintended interactions between changes.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Even without branches, CDEs can help maintain a clean working state and reduce setup time.\u003c/p\u003e\n\n\n\n\u003ch3\u003ec. Code reviews and merge requests\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team uses code reviews and merge requests\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eCode reviews and merge requests that require approval are essential practices for maintaining high code quality. If your workflow includes these practices, CDEs can greatly enhance their efficiency:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInstant environment setup\u003c/strong\u003e: Very few developers are willing to switch their entire local project to a review branch, as this can result in hours of setup – especially when new dependencies are introduced during the review. With CDEs, reviewers can quickly spin up a dedicated dev environment with a specific branch or commit under review.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eIn-depth analysis and experimentation\u003c/strong\u003e: With a CDE, reviewers can open the reviewed code in a full-featured IDE, allowing them to navigate the codebase, understand the context, and even run/debug the code. Moreover, they can test proposed changes without affecting their local setup.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYour team doesn’t use code reviews and merge requests\u003c/strong\u003e\u003cbr/\u003eWithout these practices, the benefits of CDEs in this context may be insignificant. However, we strongly recommend implementing code reviews and merge requests, at least for critical parts of your codebase, as they can greatly enhance code quality and collaboration.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: If you rely on code reviews and merge requests, CDEs will perfectly fit into your workflow.\u003c/p\u003e\n\n\n\n\u003ch2\u003ed. Onboarding of new developers\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe complexity of your development environment can greatly impact the time it takes for new hires to become effective team members.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eQuick onboarding (less than a day)\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf your current setup allows new developers to install and configure their local environments in just a few hours, CDEs may offer limited additional value.\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Stick with local development unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eComplex onboarding (several days or more)\u003c/strong\u003e\u003cbr/\u003eDuring onboarding, setting up a development environment with complex configurations, access setup, multiple dependencies, or large codebases can take days or weeks.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Adopt CDEs, such as CodeCanvas, to significantly reduce onboarding time. Pre-configured environments allow developers to avoid the time-consuming task of local setup and start working right away.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFrequent onboarding (rapid growth or high turnover)\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eIf your company is rapidly expanding or experiencing high turnover, the cumulative time spent on onboarding becomes significant. Ensuring each new developer has a consistent environment is critical to maintaining productivity and reducing errors.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Regardless of how long onboarding takes in your company, CDEs will help you greatly improve this process.\u003c/p\u003e\n\n\n\n\u003ch2\u003ee. Internal tools\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour company has platform teams building internal developer tools\u003c/strong\u003e\u003cp\u003eIn large organizations, platform teams often create specialized tools for developers, such as custom authentication mechanisms, CLI tools for managing cloud resources, and others. The challenge lies in delivering and configuring this tooling consistently across all developer machines.\u003c/p\u003e\u003cp\u003eWith the centralized management of CDEs, this becomes much easier. Platform teams can ensure that all required tools, configurations, and updates are included in the standard CDE templates – all developers will work in properly configured environments without needing to install or update the tools themselves manually.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: CDEs can significantly simplify tool adoption.\u003c/p\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYour company doesn’t have such teams\u003c/strong\u003e\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Stick to local environments unless you need CDEs for other reasons, such as enhanced security, standardized environments, etc.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1999\" height=\"232\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/image3_security-and-compliance.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e4. Security and compliance\u003c/h2\u003e\n\n\n\n\u003ch3\u003ea. Strict security or compliance requirements\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYou have significant compliance needs (e.g. fintech, healthcare)\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf your organization operates in industries with stringent security or compliance mandates – such as finance, healthcare, or government – CDEs can offer several security advantages:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eData isolation: \u003c/strong\u003eWith CDEs, your source code remains within the secure cloud infrastructure, reducing the risk of local device vulnerabilities or leaks. Of course, users can still retrieve the data from a remote environment if they really need to, and you can minimize this risk further with third-party solutions, such as data loss prevention (DLP) or monitoring tools.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCentralized control and role-based access (RBAC)\u003c/strong\u003e:\u003cstrong\u003e \u003c/strong\u003eTools like \u003ca href=\"https://jetbrains.com/codecanvas\" target=\"_blank\" rel=\"noopener\"\u003eCodeCanvas\u003c/a\u003e make it easier to enforce access controls, track activity, and comply with strict regulations like SOC 2 or HIPAA. Built-in RBAC ensures that only authorized personnel can access specific data, adding an extra layer of security​.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e CDEs are a valuable tool for meeting stringent industry regulations.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYou have standard security measures\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eFor organizations without strict compliance requirements, CDEs still offer better security than local machines, simply “by design”. Code and data are housed in secure cloud environments, preventing the risks associated with local storage.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e Evaluate CDEs for additional security benefits.\u003c/p\u003e\n\n\n\n\u003ch3\u003eb. Use of contractors or third-party developers\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team works with contractors or third-party developers\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eWhen working with external teams, security is the main concern, and CDEs can be a great solution:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFast onboarding\u003c/strong\u003e via provisioning pre-configured dev environments.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLimited access\u003c/strong\u003e \u003cstrong\u003ewith role-based access control (RBAC)\u003c/strong\u003e: Contractors have access only to the specific dev environments they need. Once a contractor completes their work, CDEs allow you to swiftly revoke access.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e CDEs are highly beneficial.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team doesn’t work with contractors or third-party developers\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eEven if contractors or third-party developers are not part of your workflow, CDEs may still offer benefits in terms of team management and security.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e Evaluate CDEs for additional security benefits.\u003c/p\u003e\n\n\n\n\u003ch3\u003ec. Need for audit trails and activity logs\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team requires audit trails and activity logs\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eCDEs can track key actions related to development environments, such as when a CDE is created, modified, or run for a specific project. This allows for transparent tracking of who accessed what and when, a critical requirement for security reviews and audits.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e CDEs are recommended for teams requiring centralized tracking of environment-related actions: creation, usage, changes to configuration templates, and so on.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team doesn’t need audit trails or detailed logs\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eEven if audit trails and detailed logging aren’t critical to your organization, CDEs may still offer benefits in terms of team management and security.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation:\u003c/strong\u003e Evaluate CDEs for additional security benefits.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1566\" height=\"234\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/infrastructure-and-resources.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e5. Infrastructure and resources\u003c/h2\u003e\n\n\n\n\u003ch3\u003ea. Infrastructure setup\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team uses local machines only\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eThe truth about remote development is that \u003cstrong\u003eusing local machines will always be cheaper in terms of pure infrastructure costs\u003c/strong\u003e. However, the benefits of CDEs lead to indirect savings:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eReduced non-productive time (NPT)\u003c/strong\u003e: Remote development reduces the time developers spend setting up environments, switching branches, or waiting for indexing. These tasks, often seen as downtime, are greatly minimized.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLower hardware costs: \u003c/strong\u003eWith CDEs, developers no longer need powerful machines, as heavy computing tasks happen in the cloud. This approach significantly reduces the need to provide high-end hardware for every developer. If developers occasionally need more powerful hardware, they can access it through the cloud without needing a dedicated machine.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYour team uses virtual machines for development\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf you’re already using VMs, adopting CDEs with orchestration tools like CodeCanvas can further optimize your costs:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eScalable resources\u003c/strong\u003e:\u003cstrong\u003e \u003c/strong\u003eCDEs offer dynamic scaling, ensuring that you only use resources as needed, preventing over-provisioning or leaving VMs idle.\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAuto-shutdown\u003c/strong\u003e:\u003cstrong\u003e \u003c/strong\u003eAutomatically shutting down environments when they’re not in use helps reduce costs and avoids wasting resources.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCheaper storage\u003c/strong\u003e: Tools like CodeCanvas can automatically move data of inactive dev environments to more cost-effective storage, further reducing infrastructure expenses.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAuto cleanup\u003c/strong\u003e: Unused or abandoned CDEs can be automatically deleted, freeing up pricy cloud storage.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYour team has some infrastructure in the cloud (AWS, Azure, Google Cloud)\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eFor companies already using cloud infrastructure, integrating CDEs into the existing setup can be a smoother and potentially more cost-effective process:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExisting expertise\u003c/strong\u003e: Your cloud experts can easily set up and maintain an orchestration tool like CodeCanvas.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAccess to cloud resources\u003c/strong\u003e: CDEs have built-in access to the resources hosted in the same cloud (via Kubernetes service accounts).\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCost benefits through scale\u003c/strong\u003e: By moving the local development to the cloud, you might see cost advantages through bulk usage or negotiated discounts with cloud providers​.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: Be prepared for remote development to be more expensive in terms of infrastructure costs, but you may save indirectly through improved productivity, reduced expenses on local hardware, and optimized resource management. The actual savings depend on factors like team size and project duration – the more developers you have and the longer the time frame, the more you save.\u003c/p\u003e\n\n\n\n\u003ch3\u003eb. Internet connection reliability\u003c/h3\u003e\n\n\n\n\u003cp\u003eRemote development heavily depends on fast and stable internet connections.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYour team has strong, reliable internet\u003c/strong\u003e\u003cbr/\u003eIf your internet is reliable and provides low latency (under 100 ms) to major cloud service providers (AWS, Google Cloud, Azure), then CDEs are a suitable option for you.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eYour team experiences intermittent internet issues or has slower bandwidth\u003c/strong\u003e\u003cbr/\u003eWith remote development, no internet means no development. Slow or unreliable internet can significantly impact productivity. Latency greater than 100 ms can make interactions with the remote IDE frustrating, causing delays during typing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e: If you want to adopt CDEs, ensure your latency to cloud providers is consistently below 100 ms. Additionally, it’s vital to have a backup internet plan. Without the internet, you won’t be able to access your dev environments or code, so ensure you have a second provider, among other backup options.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1999\" height=\"317\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/additional-considerations.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e6. Additional considerations\u003c/h2\u003e\n\n\n\n\u003ch3\u003ea. Software licensing and compliance\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIDE licensing\u003c/strong\u003e: When using CDEs, IDE licenses (e.g. for \u003ca href=\"https://www.jetbrains.com/ides/\" target=\"_blank\" rel=\"noopener\"\u003eJetBrains IDEs\u003c/a\u003e) function as they would locally. Developers are required to have valid licenses to use their chosen IDE within the cloud environment, as CDEs do not manage or provide these licenses automatically.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLicensing for additional tools and dependencies\u003c/strong\u003e: Licensing may be more complex for specialized development tools, frameworks, or dependencies. Some tools may have specific licensing models for cloud usage, such as geographic restrictions or limits on the number of users. Before deploying these tools in CDEs, it’s essential to verify whether additional steps are needed to comply with licensing terms.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLicense management\u003c/strong\u003e: CDEs do not offer centralized management for software licenses. If you’re using multiple third-party tools, managing these licenses (e.g. tracking usage, renewals, and compliance) may require an external license management system to prevent over-deployment or violations.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eb. Disaster recovery and business continuity\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRecovery time\u003c/strong\u003e: In traditional local setups, recovery time depends heavily on your ability to restore hardware, retrieve backups, and reconfigure environments. In CDEs, recovery times can be significantly reduced as dev environments are created on demand from pre-configured templates.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eInternet dependency\u003c/strong\u003e: Since CDEs depend on constant internet access, a failure in connectivity could result in a total development halt. It’s critical to have a backup internet connection in place or alternative local environments that can be activated in the case of extended internet outages​.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCost and complexity\u003c/strong\u003e: Implementing a fail-safe infrastructure in CDEs can increase both the cost and complexity of your setup. However, the trade-off is enhanced resilience and potentially reduced downtime​.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003ec. CDEs and AI development\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eAI and autonomous developers\u003c/strong\u003e: As we move toward a future where AI-autonomous developers become a reality, CDEs will play a crucial role. Remote development offers the infrastructure and scalability necessary for AI agents to run. AI models can use CDEs to perform code generation, testing, and deployment autonomously.\u003c/p\u003e\n\n\n\n\u003ch2\u003eUseful links\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eTo try CodeCanvas or schedule a demo, \u003ca href=\"https://www.jetbrains.com/codecanvas/?_gl=1*14w4ij1*_gcl_au*MTgxMTA0NTU0MS4xNzIxNzQ1NTA1*_ga*MjA4OTY2Nzg4LjE2MzcwNjczMzA.*_ga_9J976DJZ68*MTcyODU2MTM1NS4zNy4xLjE3Mjg1NjE0OTAuNjAuMC4w#contact-sales\" target=\"_blank\" rel=\"noopener\"\u003econtact our Ssales team\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/help/codecanvas/introduction.html\" target=\"_blank\" rel=\"noopener\"\u003eCodeCanvas documentation\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtu.be/g_FYa-4wqPE\" target=\"_blank\" rel=\"noopener\"\u003eCodeCanvas overview video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to CodeCanvas Blog Updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "30 min read",
  "publishedTime": null,
  "modifiedTime": null
}
