{
  "id": "3bba0721-f900-4271-9f69-7fa828429f1a",
  "title": "Aurora Serverless v2 Adds Zero-Capacity Scaling for True Serverless",
  "link": "https://www.infoq.com/news/2024/12/aurora-serverless-zero-capacity/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Amazon Aurora Serverless v2 has recently announced that it now supports scaling to zero capacity, enabling the database to automatically pause after a period of inactivity based on database connections. The lack of the ability to scale to zero capacity for Aurora's on-demand automatic scaling configuration has been a contentious topic for many years. By Renato Losio",
  "author": "Renato Losio",
  "published": "Sun, 01 Dec 2024 03:38:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Cloud",
    "Database",
    "Amazon RDS",
    "AWS",
    "MySQL",
    "Architecture \u0026 Design",
    "Development",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 4126,
  "excerpt": "Amazon Aurora Serverless v2 has recently announced that it now supports scaling to zero capacity, enabling the database to automatically pause after a period of inactivity based on database connection",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241128133046/apple-touch-icon.png",
  "text": "Amazon Aurora Serverless v2 has recently announced that it now supports scaling to zero capacity, enabling the database to automatically pause after a period of inactivity based on database connections. The lack of the ability to scale to zero capacity for Aurora's on-demand automatic scaling configuration has been a contentious topic for many years. Jason Pedreza, senior database specialist solutions architect at AWS, and Anum Jang Sher, product manager at AWS, explain: Automatic pause and resume feature helps you manage costs for applications that don't have a stringent service-level objective. For workloads, that can tolerate a resume time of approximately 15 seconds, you can use this feature in the following cases: clusters used for development and testing and applications where a cold start is acceptable while the database resumes. Announced in preview at re:Invent four years ago and generally available since spring 2023, Aurora Serverless v2 previously required a minimum capacity of 0.5 ACU, with one ACU equating to approximately 2 GiB of memory, along with corresponding CPU and networking resources. Since the typical time to resume is approximately 15 seconds and requested connections are established only after the database instance finishes resuming, the cloud provider recommends configuring client timeout settings (such as the connectTimeout and sslResponseTimeout for the JDBC driver) to exceed this duration. Reflecting on the \"pre:Invent\" announcements, Jeremy Daly, co-founder of Ampt and author of the serverless newsletter Off-by-none, comments: Perhaps one of the biggest announcements was that Amazon Aurora Serverless v2 now supports scaling to zero capacity. This was available in v1, which made it an excellent choice for development environments, but when v2 launched, it was no longer an option. There's still a 15 second cold start, but unless you have highly predictable traffic patterns, I wouldn't enable this in production. Earlier this year, AWS announced the retirement of Aurora Serverless v1, with the primary complaint from the community being the lack of a \"scale to zero\" option for the managed relational database on AWS. The SecondsUntilAutoPause property now determines how long a database instance must remain without open connections before pausing, with a minimum (default) value of 5 minutes and a maximum of 1 day. AWS cautions that when an Aurora Serverless v2 instance resumes, its initial capacity may be lower than it was before pausing. There are also notable differences in auto-pause behavior between Aurora Serverless v2 and the deprecated Aurora Serverless v1. Additionally, certain scenarios prevent scaling to zero ACU, such as when using an RDS Proxy or any proxy that maintains an open connection to a database instance in the cluster. According to the documentation, when the database is paused and a new connection is requested, it will automatically resume and scale to meet application demand. Manual stopping and starting of a cluster is still possible when the auto-pause feature is enabled, but any paused instances will automatically resume upon restart. While Yan Cui writes \"Finally lives up to its name!\", Corey Quinn, chief cloud economist at The Duckbill Group, comments: After fighting it for years and failing at their attempt to retcon their own history, Amazon finally wakes up to the realization that Serverless does in fact mean \"scales to zero.\" AWS emphasizes several application design considerations for the Aurora Serverless v2 auto-pause feature. When implementing connection logic, it is recommended to retry the connection if the initial attempt returns an error. Additionally, applications should avoid leaving client sessions or programming tools with open connections to the database. The ability to scale to zero capacity is currently supported for Aurora PostgreSQL versions 13.15+, 14.12+, 15.7+, and 16.3+, as well as Aurora MySQL version 3.08+. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2024/12/aurora-serverless-zero-capacity/en/headerimage/generatedHeaderImage-1732887631067.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAmazon Aurora Serverless v2 has recently announced that it now \u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2024/11/amazon-aurora-serverless-v2-scaling-zero-capacity/\"\u003esupports scaling to zero capacity\u003c/a\u003e, enabling the database to automatically pause after a period of inactivity based on database connections. The lack of the ability to scale to zero capacity for Aurora\u0026#39;s on-demand automatic scaling configuration has been a contentious topic for many years.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/jpedreza/\"\u003eJason Pedreza\u003c/a\u003e, senior database specialist solutions architect at AWS, and \u003ca href=\"https://www.linkedin.com/in/anumjangsher/\"\u003eAnum Jang Sher\u003c/a\u003e, product manager at AWS, \u003ca href=\"https://aws.amazon.com/blogs/database/introducing-scaling-to-0-capacity-with-amazon-aurora-serverless-v2/\"\u003eexplain\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAutomatic pause and resume feature helps you manage costs for applications that don\u0026#39;t have a stringent service-level objective. For workloads, that can tolerate a resume time of approximately 15 seconds, you can use this feature in the following cases: clusters used for development and testing and applications where a cold start is acceptable while the database resumes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnnounced in preview at re:Invent \u003ca href=\"https://www.infoq.com/news/2020/12/aws-reinvent-2020/\"\u003efour years ago\u003c/a\u003e and \u003ca href=\"https://www.infoq.com/news/2022/04/amazon-aurora-serverless-v2/\"\u003egenerally available since spring 2023\u003c/a\u003e, Aurora Serverless v2 previously required a minimum capacity of 0.5 ACU, with one ACU equating to approximately 2 GiB of memory, along with corresponding CPU and networking resources.\u003c/p\u003e\n\n\u003cp\u003eSince the typical time to resume is approximately 15 seconds and requested connections are established only after the database instance finishes resuming, the cloud provider recommends configuring client timeout settings (such as the \u003ccode\u003econnectTimeout\u003c/code\u003e and \u003ccode\u003esslResponseTimeout\u003c/code\u003e for the JDBC driver) to exceed this duration. Reflecting on the \u0026#34;pre:Invent\u0026#34; announcements, Jeremy Daly, co-founder of Ampt and author of the serverless newsletter Off-by-none, \u003ca href=\"https://offbynone.io/issues/307/\"\u003ecomments\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ePerhaps one of the biggest announcements was that Amazon Aurora Serverless v2 now supports scaling to zero capacity. This was available in v1, which made it an excellent choice for development environments, but when v2 launched, it was no longer an option. There\u0026#39;s still a 15 second cold start, but unless you have highly predictable traffic patterns, I wouldn\u0026#39;t enable this in production.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEarlier this year, AWS announced the \u003ca href=\"https://www.reddit.com/r/aws/comments/vgt42y/no_aws_aurora_serverless_v2_is_not_serverless/\"\u003eretirement of Aurora Serverless v1\u003c/a\u003e, with the primary complaint from the community being the \u003ca href=\"https://www.reddit.com/r/aws/comments/vgt42y/no_aws_aurora_serverless_v2_is_not_serverless/\"\u003elack of a \u0026#34;scale to zero\u0026#34;\u003c/a\u003e option for the managed relational database on AWS.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSecondsUntilAutoPause\u003c/code\u003e property now determines how long a database instance must remain without open connections before pausing, with a minimum (default) value of 5 minutes and a maximum of 1 day. AWS cautions that when an Aurora Serverless v2 instance resumes, its initial capacity may be lower than it was before pausing. There are also \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2-auto-pause.html#auto-pause-differences\"\u003enotable differences in auto-pause behavior\u003c/a\u003e between Aurora Serverless v2 and the deprecated Aurora Serverless v1. Additionally, \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2-auto-pause.html#auto-pause-prereqs\"\u003ecertain scenarios prevent scaling to zero ACU\u003c/a\u003e, such as when using an RDS Proxy or any proxy that maintains an open connection to a database instance in the cluster.\u003c/p\u003e\n\n\u003cp\u003eAccording to the \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2-auto-pause.html\"\u003edocumentation\u003c/a\u003e, when the database is paused and a new connection is requested, it will automatically resume and scale to meet application demand. Manual stopping and starting of a cluster is still possible when the auto-pause feature is enabled, but any paused instances will automatically resume upon restart. While Yan Cui \u003ca href=\"https://www.linkedin.com/posts/theburningmonk_amazon-aurora-serverless-v2-supports-scaling-activity-7265133608661610496-pSw_?utm_source=share\u0026amp;utm_medium=member_desktop\"\u003ewrites\u003c/a\u003e \u0026#34;Finally lives up to its name!\u0026#34;, Corey Quinn, chief cloud economist at The Duckbill Group, \u003ca href=\"https://www.lastweekinaws.com/newsletter/\"\u003ecomments\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAfter fighting it for years and failing at their attempt to retcon their own history, Amazon finally wakes up to the realization that Serverless does in fact mean \u0026#34;scales to zero.\u0026#34;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAWS emphasizes several application design considerations for the Aurora Serverless v2 auto-pause feature. When implementing connection logic, it is recommended to retry the connection if the initial attempt returns an error. Additionally, applications should avoid leaving client sessions or programming tools with open connections to the database.\u003c/p\u003e\n\n\u003cp\u003eThe ability to scale to zero capacity is currently supported for Aurora PostgreSQL versions 13.15+, 14.12+, 15.7+, and 16.3+, as well as Aurora MySQL version 3.08+.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-12-01T00:00:00Z",
  "modifiedTime": null
}
