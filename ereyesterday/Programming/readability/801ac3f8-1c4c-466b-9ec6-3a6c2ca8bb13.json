{
  "id": "801ac3f8-1c4c-466b-9ec6-3a6c2ca8bb13",
  "title": "Cloud Giants Collaborate on New Kubernetes Resource Management Tool",
  "link": "https://www.infoq.com/news/2025/02/kube-resource-orchestrator/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Google Cloud, AWS, and Microsoft Azure have jointly announced a new open-source project called Kube Resource Orchestrator (kro, pronounced \"crow\"). The project is an attempt to standardise how Kubernetes resources are grouped together and deployed, and it aims to make it easier for platform teams to deploy workloads. By Matt Saunders",
  "author": "Matt Saunders",
  "published": "Fri, 28 Feb 2025 16:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Google Cloud",
    "Kubernetes",
    "helm",
    "AWS",
    "Kubernetes Operator",
    "Microsoft Azure",
    "DevOps",
    "news"
  ],
  "byline": "Matt Saunders",
  "length": 5917,
  "excerpt": "Google Cloud, AWS, and Microsoft Azure have jointly announced a new open-source project called Kube Resource Orchestrator (kro, pronounced \u0026quot;crow\u0026quot;). The project is an attempt to standardise how Kuberne",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250228123450/apple-touch-icon.png",
  "text": "Google Cloud, AWS, and Microsoft Azure have jointly announced a new open-source project called Kube Resource Orchestrator (kro, pronounced \"crow\"). The project is an attempt to standardise how Kubernetes resources are grouped together and deployed, and it aims to make it easier for platform teams to deploy workloads. The announcement explains that Kubernetes lacks a native method for platform teams to create custom groups of resources that can be used by development teams, with many organisations using client-side templating tools like Helm or Kustomize, or building their own custom Kubernetes controllers. These approaches often proved costly to maintain and difficult for non-specialists to use effectively. With kro, you can group your applications and their dependencies as a single resource that can be easily consumed by end users - Abdelfettah Sghiouar and Nic Slattery The core innovation of kro is the introduction of the ResourceGraphDefinition custom resource. kro encapsulates a Kubernetes deployment and its dependencies into a single API, enabling custom end-user interfaces that expose only the parameters applicable to a non-platform engineer. This masking hides the complexity of API endpoints for Kubernetes and cloud providers that are not useful in a deployment context. The post outlines two practical examples of kro's application. In the first scenario, a platform engineer uses kro to give organisation members self-service access to create Google Kubernetes Engine (GKE) clusters with pre-configured administrative workloads, policies, and security settings. The second example demonstrates how DevOps engineers can create reusable definitions for web applications, encapsulating all necessary resources from deployments and services to monitoring agents and cloud storage. Kro works seamlessly with the existing cloud provider Kubernetes extensions that are available to manage cloud resources from Kubernetes. These are AWS Controllers for Kubernetes (ACK), Google's Config Connector (KCC), and Azure Service Operator (ASO). kro enables standardised, reusable service templates that promote consistency across different projects and environments, with the benefit of being entirely Kubernetes-native. It is still in the early stages of development. \"As an early-stage project, kro is not yet ready for production use, but we still encourage you to test it out in your own Kubernetes development environments,\" the post states. In a post on the AKS Engineering Blog, Bridget Kromhout and Matthew Christopher offer a brief overview of the kro project from Microsoft's perspective. This post emphasises Microsoft Azure's collaboration with AWS and Google Cloud on this Kubernetes-native tool designed to simplify resource management. Kromhout and Christopher also offer Azure-specific implementation examples and highlights opportunities for community involvement. We're centering the needs of customers and the cloud native community to offer tooling that works seamlessly no matter where you run your K8s clusters - Matthew Christopher \u0026 Bridget Kromhout A walkthrough on the kro website goes under the hood to explain how kro works, explaining how kro creates a ResourceGraphDefinition by first generating a Directed Acyclic Graph (DAG) to understand the dependencies of a definition, validating them and establishing the correct deployment order. It then creates a new CustomResourceDefinition (CRD) in the Kubernetes cluster for the resources. Some community commentary has pondered kro's ability to augment or replace other well-established tools, such as Crossplane - an open-source CNCF project that lets users orchestrate cloud resources with Kubernetes, and Helm, the package manager for defining, installing and upgrading Kubernetes applications. In a YouTube video on the DevOps Toolkit channel, Viktor Farcic discusses kro's launch. He also considers its impact on Crossplane. Farcic was initially excited by kro's potential to simplify composing cloud resources, and he successfully created a simple application definition that generated correct Kubernetes resources. However, Farcic found that more complex scenarios involving conditional resource creation and database integration caused numerous issues, such as missing default values and owner references and changes from ResourceGroups not propagating properly to existing resources. He also notes that using YAML for imperative constructs isn't ideal, and that adding more logic to a format not designed for it could lead to \"abominations\". Most significantly for the Crossplane community, Farcic questioned kro's purpose given its functional overlap with existing tools. \"kro is serving more or less the same function as other tools created a while ago without any compelling improvement,\" he observed. While kro appeared to offer a simpler syntax with less boilerplate, he says it currently provides only a fraction of Crossplane's features and is not yet a viable replacement, especially as Crossplane supports multiple languages. In a blog post pondering \"Is the Helm Killer Finally Here?\", Wilson Spearman of Parity suggests that Helm's architecture has fundamental constraints in managing dependencies, handling CRD upgrades and in properly managing lifecycles, and kro succeeds in having a more human-friendly and readable syntax. Spearman concludes with a prediction that Helm will continue for open-source and smaller organisations, with kro taking mindshare in the enterprise. The kro project is available on GitHub under joint ownership by teams from Google, AWS, and Microsoft, with the community invited to contribute to its development. Comprehensive documentation and example use cases are available on the project's website. About the Author Matt Saunders",
  "image": "https://res.infoq.com/news/2025/02/kube-resource-orchestrator/en/headerimage/generatedHeaderImage-1740757017262.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eGoogle Cloud, AWS, and Microsoft Azure have \u003ca href=\"https://cloud.google.com/blog/products/containers-kubernetes/introducing-kube-resource-orchestrator\"\u003ejointly announced a new open-source project\u003c/a\u003e called Kube Resource Orchestrator (kro, pronounced \u0026#34;crow\u0026#34;). The project is an attempt to standardise how Kubernetes resources are grouped together and deployed, and it aims to make it easier for platform teams to deploy workloads.\u003c/p\u003e\n\n\u003cp\u003eThe announcement explains that Kubernetes lacks a native method for platform teams to create custom groups of resources that can be used by development teams, with many organisations using client-side templating tools like \u003ca href=\"https://helm.sh/\"\u003eHelm\u003c/a\u003e or \u003ca href=\"https://kustomize.io\"\u003eKustomize\u003c/a\u003e, or building their own custom Kubernetes controllers. These approaches often proved costly to maintain and difficult for non-specialists to use effectively.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWith kro, you can group your applications and their dependencies as a single resource that can be easily consumed by end users\u003c/p\u003e\n\n\u003cp\u003e- Abdelfettah Sghiouar and Nic Slattery\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe core innovation of kro is the introduction of the \u003ca href=\"https://kro.run/docs/concepts/resource-group-definitions/\"\u003e\u003ctt\u003eResourceGraphDefinition\u003c/tt\u003e\u003c/a\u003e \u003ca href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\"\u003ecustom resource\u003c/a\u003e. kro encapsulates a Kubernetes deployment and its dependencies into a single API, enabling custom end-user interfaces that expose only the parameters applicable to a non-platform engineer. This masking hides the complexity of API endpoints for Kubernetes and cloud providers that are not useful in a deployment context.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/02/kube-resource-orchestrator/en/resources/11_oVHxwcn.max-1200x1200-1740757016392.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/02/kube-resource-orchestrator/en/resources/11_oVHxwcn.max-1200x1200-1740757016392.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe post outlines two practical examples of kro\u0026#39;s application. In the first scenario, a platform engineer uses kro to give organisation members self-service access to create Google Kubernetes Engine (GKE) clusters with pre-configured administrative workloads, policies, and security settings. The second example demonstrates how DevOps engineers can create reusable definitions for web applications, encapsulating all necessary resources from deployments and services to monitoring agents and cloud storage.\u003c/p\u003e\n\n\u003cp\u003eKro works seamlessly with the existing cloud provider Kubernetes extensions that are available to manage cloud resources from Kubernetes. These are \u003ca href=\"https://github.com/aws-controllers-k8s/community\"\u003eAWS Controllers for Kubernetes\u003c/a\u003e (ACK), \u003ca href=\"https://cloud.google.com/config-connector/docs/overview\"\u003eGoogle\u0026#39;s Config Connector\u003c/a\u003e (KCC), and \u003ca href=\"https://azure.github.io/azure-service-operator/\"\u003eAzure Service Operator\u003c/a\u003e (ASO).\u003c/p\u003e\n\n\u003cp\u003ekro enables standardised, reusable service templates that promote consistency across different projects and environments, with the benefit of being entirely Kubernetes-native. It is still in the early stages of development. \u0026#34;As an early-stage project, kro is not yet ready for production use, but we still encourage you to test it out in your own Kubernetes development environments,\u0026#34; the post states.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003ca href=\"https://azure.github.io/AKS/2025/01/30/kube-resource-orchestrator\"\u003epost on the AKS Engineering Blog\u003c/a\u003e, Bridget Kromhout and Matthew Christopher offer a brief overview of the kro project from Microsoft\u0026#39;s perspective. This post emphasises Microsoft Azure\u0026#39;s collaboration with AWS and Google Cloud on this Kubernetes-native tool designed to simplify resource management. Kromhout and Christopher also offer Azure-specific implementation examples and highlights opportunities for community involvement.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe\u0026#39;re centering the needs of customers and the cloud native community to offer tooling that works seamlessly no matter where you run your K8s clusters\u003c/p\u003e\n\n\u003cp\u003e- Matthew Christopher \u0026amp; Bridget Kromhout\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA \u003ca href=\"https://kro.run/docs/getting-started/deploy-a-resource-graph-definition/\"\u003ewalkthrough\u003c/a\u003e on the kro website goes under the hood to explain how kro works, explaining how kro creates a \u003ctt\u003eResourceGraphDefinition\u003c/tt\u003e by first generating a Directed Acyclic Graph (DAG) to understand the dependencies of a definition, validating them and establishing the correct deployment order. It then creates a new \u003ctt\u003eCustomResourceDefinition\u003c/tt\u003e (CRD) in the Kubernetes cluster for the resources.\u003c/p\u003e\n\n\u003cp\u003eSome community commentary has pondered kro\u0026#39;s ability to augment or replace other well-established tools, such as \u003ca href=\"https://www.crossplane.io/\"\u003eCrossplane\u003c/a\u003e - an open-source CNCF project that lets users orchestrate cloud resources with Kubernetes, and Helm, the package manager for defining, installing and upgrading Kubernetes applications.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003ca href=\"https://www.youtube.com/watch?v=8zQtpcxmdhs\"\u003eYouTube video\u003c/a\u003e on the DevOps Toolkit channel, Viktor Farcic discusses kro\u0026#39;s launch. He also considers its impact on Crossplane. Farcic was initially excited by kro\u0026#39;s potential to simplify composing cloud resources, and he successfully created a simple application definition that generated correct Kubernetes resources. However, Farcic found that more complex scenarios involving conditional resource creation and database integration caused numerous issues, such as missing default values and owner references and changes from ResourceGroups not propagating properly to existing resources.\u003c/p\u003e\n\n\u003cp\u003eHe also notes that using YAML for imperative constructs isn\u0026#39;t ideal, and that adding more logic to a format not designed for it could lead to \u0026#34;abominations\u0026#34;. Most significantly for the Crossplane community, Farcic questioned kro\u0026#39;s purpose given its functional overlap with existing tools. \u0026#34;kro is serving more or less the same function as other tools created a while ago without any compelling improvement,\u0026#34; he observed. While kro appeared to offer a simpler syntax with less boilerplate, he says it currently provides only a fraction of Crossplane\u0026#39;s features and is not yet a viable replacement, especially as Crossplane supports multiple languages.\u003c/p\u003e\n\n\u003cp\u003eIn a blog post pondering \u0026#34;\u003ca href=\"https://www.tryparity.com/blog/is-the-helm-killer-finally-here-enter-kro\"\u003eIs the Helm Killer Finally Here?\u003c/a\u003e\u0026#34;, Wilson Spearman of Parity suggests that Helm\u0026#39;s architecture has fundamental constraints in managing dependencies, handling CRD upgrades and in properly managing lifecycles, and kro succeeds in having a more human-friendly and readable syntax. Spearman concludes with a prediction that Helm will continue for open-source and smaller organisations, with kro taking mindshare in the enterprise.\u003c/p\u003e\n\n\u003cp\u003eThe kro project is \u003ca href=\"https://github.com/kro-run/kro\"\u003eavailable on GitHub\u003c/a\u003e under joint ownership by teams from Google, AWS, and Microsoft, with the community invited to contribute to its development. Comprehensive documentation and example use cases are available on the \u003ca href=\"https://kro.run/\"\u003eproject\u0026#39;s website\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Matt-Saunders\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMatt Saunders\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-02-28T00:00:00Z",
  "modifiedTime": null
}
