{
  "id": "f8b0c3be-b394-4803-9379-29f327ea9335",
  "title": "Debugging UI with AI: GitHub Copilot agent mode meets MCP servers",
  "link": "https://github.blog/ai-and-ml/github-copilot/debugging-ui-with-ai-github-copilot-agent-mode-meets-mcp-servers/",
  "description": "Explore how I use agentic tools like GitHub Copilot agent mode and the Playwright MCP server to accelerate troubleshooting and debugging of UI issues, while revisiting the importance of clear requirements. The post Debugging UI with AI: GitHub Copilot agent mode meets MCP servers appeared first on The GitHub Blog.",
  "author": "Chris Reddington",
  "published": "Tue, 22 Jul 2025 21:58:35 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "agent mode",
    "agentic AI",
    "MCP",
    "Rubber Duck Thursdays"
  ],
  "byline": "Chris Reddington",
  "length": 14961,
  "excerpt": "Use agentic tools like GitHub Copilot agent mode and the Playwright MCP server to accelerate troubleshooting and debugging of UI issues.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "If you’ve ever dusted off an old project and thought, “How did I leave things in such a mess?”, you’re in good company. On my latest Rubber Duck Thursdays stream, I dove back into my OctoArcade Next.js app, only to rediscover a host of UI gremlins. So, we experimented with something that felt like magic: letting GitHub Copilot agent mode, paired with Playwright MCP server, identify and fix UI bugs. Along the way, I learned (again) how crucial it is to provide AI tools like Copilot with clear, detailed requirements.  Let’s walk through how I used these agentic tools to debug, test, and (mostly) solve some tricky layout issues, while covering practical tips for anyone looking to leverage Copilot’s agent workflows in real-world projects. The setup: Revisiting OctoArcade (and its bugs) I started by firing up OctoArcade, my collection of GitHub-themed mini-games built with Next.js and TypeScript. Within minutes, I realized I had been introducing a new game to the app, but hadn’t quite gotten around to fixing some bugs. Here’s what we accomplished in one stream session: Problem: Navigation header overlapping game content across all games Solution: Copilot agent mode and Playwright MCP server identified the issue through visual inspection, and implemented a global header fix Bonus: Fixed some additional UI issues (unintended gaps between the game canvas and footer) discovered during testing Result: Hands-off debugging that solved problems I’d stepped away from, and had previously spent some cycles on fixing Let me walk you through how this worked and what you can learn for your own debugging workflows. Making sure Copilot custom instructions are set up With my environment set up in VS Code Insiders, I checked that my Copilot custom instruction files (.github/copilot-instructions.md, *.instructions.md files) were up to date. This is usually my first step before using any agentic features, as these instructions provide important context on my expectations, coding styles, and working practices — influencing how Copilot responds and interacts with my codebase. In my last blog post, we spent time exploring recommended practices when setting up Copilot custom instructions. We also covered how the copilot-setup-steps.yml sets up a developer environment when using Copilot coding agent. Take a look at that blog post on using GitHub Copilot coding agents to refactor and automate developer workflows to learn more. Always keep your Copilot custom instructions current (including descriptions of your repository structure, common steps like building and testing, and any expectations before making commits). Copilot agents depend on this context to deliver relevant changes. When I think my instructions file is out of date, I typically prompt Copilot in agent mode with a prompt along the lines of: Based on the #codebase, please can you update the custom instructions file for accuracy? Please make sure to keep the structure (i.e. headings etc.) as-is. Thanks! In some of my instruction files, I’ve even instructed Copilot to keep key documentation (README, .github/copilot-instructions.md, etc.) up to date when it makes significant changes (like refactoring files or adding new features). Agentic debugging: UI troubleshooting with Playwright MCP Playwright MCP server is a powerful tool for end-to-end testing and UI automation. Since it’s an MCP server, you can access it through your favorite AI tools that support the Model Context Protocol, like Copilot agent mode and Copilot coding agent! In agent mode, Copilot can use Playwright’s structured tools to: Load web pages Simulate user actions (clicks, navigation) Inspect rendered layouts without needing vision models This means you can ask Copilot to “see” what a human would, spot layout issues, and even propose CSS or component fixes. To get started with Playwright, it’s as easy as adding the below to your MCP configuration: {   \"mcpServers\": {     \"playwright\": {       \"command\": \"npx\",       \"args\": [\"@playwright/mcp@latest\"]     }   } } Once you have started the MCP server, you should see that Copilot now has access to a suite of new tools for browser interaction like: browser_snapshot – Capture accessibility snapshots of pages browser_navigate – Navigate to URLs browser_click, browser_type, browser_hover – Interact with elements browser_resize – Test different viewport sizes browser_take_screenshot – Visual documentation And many more: You can find the full list in the tools section of Playwright MCP server’s README With access to a new set of tools to solve the UI challenges, it was time to point Copilot at the problem. Meaning, I now had the task of clearly defining the requirements in my initial prompt…easier said than done. The debugging journey: Real-time fixes and lessons learned 1. Describe the problem and let agent mode work I noticed that, in several pages, the main content was tucked behind the navigation bar. This was particularly noticeable on any pages that rendered games. On some pages (like OctoPong), I saw inconsistent spacing between game elements and the footer. To get Copilot agent mode started, I aimed to be as explicit as possible in my prompts: I have spotted that there is a bit of a UI error. It seems like the main content of any page \"starts\" behind the navigation bar. This is more evident on the games like octosnap, octopong and octobrickbreaker. Can you take a look at the site using Playwright (you'll need to spin up an instance of the server), take a look at the pages, and then investigate? Thanks! It loaded up the pages to configure each game, but didn’t try loading the games themselves (so missed some context). I followed up in a separate prompt: Sorry, I wanted you to take a look when a game is actually loaded too. Can you play the game Octopong and Octosnap – I think it’s very visible in those? Do that before you build a plan. Lesson: The more context and specifics you provide, the better Copilot performs, just like a teammate.  After spinning up Playwright MCP, I watched Copilot: Launch a browser Navigate through the app’s pages Diagnose where and why content was hidden or misaligned Ultimately, we had to evolve the way that we were rendering the navigation bar. The current implementation had a separate navigation bar (DynamicHeader component) on each of the game pages with its own local state, overlaying the “main” navigation bar. Instead, Copilot suggested using the navigation bar from the root layout and passing the relevant context up, so that only one component is updated and the root layout gets updated as needed.. Hands-off debugging: At this stage, I was literally hands off, watching as Copilot tried fixes, reran the app, and checked the results visually. As it implemented the new approach with a new header-context file, Copilot recognized linting errors, and iteratively fixed them. 2. Iterating on UI requirements Fixing bugs is rarely one-and-done. I noticed another bug, specifically for OctoPong. There was a small gap between the game board and the footer, which didn’t show up clearly on the livestream, but was noticeable on my own screen. Fortunately as developers, we’re used to small iterative and incremental improvements. So once again, I turned to Copilot. However, as I iterated, Copilot would make changes, but they didn’t fully achieve what I needed. The problem wasn’t Copilot though; it was me and my unclear requirements. PromptResultReflectionI’ve noticed a minor UI bug on the Octopong game page (this only happens when the game is actually live). There is a small space between the game itself and the footer. I want the game to extend all the way to the footer (not necessarily push the footer beyond the fold though). Can you use the Playwright MCP server to explore what’s going on, build a structured plan / todo list to resolve the actions? ThanksIt achieved what I had asked, but the pong paddles no longer displayed (which was a side effect of the container now being 0 height). Through no fault of Copilot, I hadn’t asked for the game components (e.g. Paddle/Ball) to be visible in the game area. The game was still playing (in a 0 height container), but the key components were not visible to me as the player.– Good clarity on tools to use.– Good clarity on asking for a plan (as Copilot asked me to review/approve before making the changes).– Lack of clarity on the full requirements (i.e. having the game components be visible and working).Just to jump in, can you test again? It looks like the paddles and the ball are now missing as a result of the change?The game began working again, however it introduced the gap that we early sought to resolve.– Solved the immediate challenge of making game components visible.– Lack of clarity that the earlier requirements were still required.Can you check the game once again? The spacing issues are still there.The requirements are:1. The game is playable (i.e. balls and paddles are visible and one paddle is usable for the player).2. The game area covers the “full space” between header and footer.I think the space problem is back. You must meet both requirements please, thanks.Once again, Copilot fulfilled the requirements! But this time, the game extended beyond the viewport, and so a user would have to scroll to move the paddle to prevent the ball scoring against them (which is not an ideal experience!).– Solved all of the requirements we outlined– Lack of clarity in the actual requirements (that the game should not extend beyond the viewport).Thanks! Sorry, I forgot to give you a third requirement. Your solution makes the game extend beyond the fold,  which makes the user have to “scroll” to play the game.These are the requirements you must meet:1. The game is fully functional (paddles/ball working and visible).2. There is no space between the game and the footer.3. The game must not extend beyond the fold (i.e. the user must not have to scroll to see any part of the game board. So the game board at maximum must end at the bottom of the screen). The footer can be below the fold.Please feel free to reword/rewrite my requirements, as I struggled to define  them. Make sure you confirm with me the requirements are accurate.Success! After we prompted Copilot with our full requirements, it was able to think through and iteratively approach the problem to get to the working layout.– A full set of requirements solved all of the requirements we outlined.– While there were some minor issues in the mobile view, (a small gap between the navigation bar and game), other pages hadn’t yet been optimised for mobile. Since this isn’t a priority, it can be a task for later.  Each prompt brought incremental improvements, but also new side effects (like games extending past the viewport or missing paddles in Pong). Key insight: Context is important, and making sure that we clearly articulate our requirements is a key part of that. The biggest challenge wasn’t technical, but precisely describing what I wanted. Getting the requirements right took several attempts…And lots of feedback from our viewers in the livestream chat.  Practical tips: Working with Copilot agent mode and MCP servers Here’s what I learned (or relearned) during this session: Keep Copilot custom instructions up to date: The agent relies on these files for repo context and best practices. Give Copilot more power with MCP: Playwright MCP enables true end-to-end testing and UI inspection, making it invaluable for debugging complex web apps. Be explicit with requirements: Like any collaborator, Copilot only knows what you tell it. List out your must-haves, expected behaviors, and edge cases. Iterate in small steps: Commit changes frequently. It’s easier to roll back and diagnose issues when your history is granular. Conclusion: Progress, not perfection This live debugging session reminded me of two things: Agentic tools like Copilot and Playwright MCP can genuinely accelerate troubleshooting. Especially when you provide the right context. Describing requirements is hard. And that’s okay! Iteration, feedback, and even a few missteps are part of the process (both in terms of learning, and solving bugs). If you’re navigating similar challenges, dive in, experiment, and remember: progress beats perfection. Update Copilot custom instructions files for your repo. If you’re using Copilot coding agent, make sure to configure the copilot-setup-steps.yml. Install and start the Playwright MCP server in VS Code to provide Copilot access to a browser for UI testing. Describe your bug or feature clearly in a new chat with Copilot agent mode. Let Copilot propose and apply fixes. But always review code changes and test results. Iterate on requirements based on what you see. Clarify as needed. Make sure you’re being clear in your requirements too. Commit frequently! Work in a branch and save your progress at each step. Are you using the Playwright MCP server for UI testing? Or maybe you have another favorite MCP server? Let us know — we’d love to hear how you’re using Copilot agent mode and MCP servers as part of your development workflow!In the meantime, mark your calendars for our next Rubber Duck Thursdays stream, subscribe to us on YouTube, and check out skills.github.com for interactive GitHub learning. See you next time! Learn how to set Copilot coding agent up for success with custom instruction and Copilot setup steps \u003e Tags: agent mode agentic AI GitHub Copilot MCP Rubber Duck Thursdays Written by Chris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2025 Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco. Register now",
  "image": "https://github.blog/wp-content/uploads/2025/06/wallpaper-copilot-generic-logo-dark.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eIf you’ve ever dusted off an old project and thought, “How did I leave things in such a mess?”, you’re in good company.\u003c/p\u003e\n\n\n\n\u003cp\u003eOn my latest \u003cstrong\u003eRubber Duck Thursdays\u003c/strong\u003e stream, I dove back into my OctoArcade Next.js app, only to rediscover a host of UI gremlins. So, we experimented with something that felt like magic: letting GitHub Copilot agent mode, paired with Playwright MCP server, identify and fix UI bugs. Along the way, I learned (again) how crucial it is to provide AI tools like Copilot with clear, detailed requirements. \u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s walk through how I used these agentic tools to debug, test, and (mostly) solve some tricky layout issues, while covering practical tips for anyone looking to leverage Copilot’s agent workflows in real-world projects.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Rubber Duck Thursdays - Copilot agent mode, coding agent and MCP servers\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/n2Np16Grulo?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"h-the-setup-revisiting-octoarcade-and-its-bugs\"\u003eThe setup: Revisiting OctoArcade (and its bugs)\u003c/h2\u003e\n\n\n\n\u003cp\u003eI started by firing up OctoArcade, my collection of GitHub-themed mini-games built with Next.js and TypeScript. Within minutes, I realized I had been introducing a new game to the app, but hadn’t quite gotten around to fixing some bugs.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s what we accomplished in one stream session:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eProblem:\u003c/strong\u003e Navigation header overlapping game content across all games\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSolution:\u003c/strong\u003e Copilot agent mode and Playwright MCP server identified the issue through visual inspection, and implemented a global header fix\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eBonus:\u003c/strong\u003e Fixed some additional UI issues (unintended gaps between the game canvas and footer) discovered during testing\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eResult:\u003c/strong\u003e Hands-off debugging that solved problems I’d stepped away from, and had previously spent some cycles on fixing\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLet me walk you through how this worked and what you can learn for your own debugging workflows.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-making-sure-copilot-custom-instructions-are-set-up\"\u003eMaking sure Copilot custom instructions are set up\u003c/h2\u003e\n\n\n\n\u003cp\u003eWith my environment set up in VS Code Insiders, I checked that my \u003ca href=\"https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot\"\u003eCopilot custom instruction files\u003c/a\u003e (\u003ccode\u003e.github/copilot-instructions.md\u003c/code\u003e, \u003ccode\u003e*.instructions.md\u003c/code\u003e files) were up to date. This is usually my first step before using any agentic features, as these instructions provide important context on my expectations, coding styles, and working practices — influencing how Copilot responds and interacts with my codebase.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn my last blog post, we spent time exploring recommended practices when setting up Copilot custom instructions. We also covered how the \u003ccode\u003ecopilot-setup-steps.yml\u003c/code\u003e sets up a developer environment when using Copilot coding agent. Take a look at \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/from-chaos-to-clarity-using-github-copilot-agents-to-improve-developer-workflows/\"\u003ethat blog post on using GitHub Copilot coding agents to refactor and automate developer workflows\u003c/a\u003e to learn more.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAlways keep your Copilot custom instructions current (including descriptions of your repository structure, common steps like building and testing, and any expectations before making commits). Copilot agents depend on this context to deliver relevant changes. When I think my instructions file is out of date, I typically prompt Copilot in agent mode with a prompt along the lines of:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eBased on the #codebase, please can you update the custom instructions file for accuracy? Please make sure to keep the structure (i.e. headings etc.) as-is. Thanks!\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Keeping Copilot Instruction files up to date\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/SwpFAxCtdbU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn some of my instruction files, I’ve even instructed Copilot to keep key documentation (\u003ccode\u003eREADME\u003c/code\u003e, \u003ccode\u003e.github/copilot-instructions.md\u003c/code\u003e, etc.) up to date when it makes significant changes (like refactoring files or adding new features).\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-agentic-debugging-ui-troubleshooting-with-playwright-mcp\"\u003eAgentic debugging: UI troubleshooting with Playwright MCP\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/microsoft/playwright\"\u003ePlaywright MCP server\u003c/a\u003e is a powerful tool for end-to-end testing and UI automation. Since it’s an MCP server, you can access it through your favorite AI tools that support the Model Context Protocol, like Copilot agent mode and Copilot coding agent! In agent mode, Copilot can use Playwright’s structured tools to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eLoad web pages\u003c/li\u003e\n\n\n\n\u003cli\u003eSimulate user actions (clicks, navigation)\u003c/li\u003e\n\n\n\n\u003cli\u003eInspect rendered layouts without needing vision models\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis means you can ask Copilot to “see” what a human would, spot layout issues, and even propose CSS or component fixes. To get started with Playwright, it’s as easy as adding the below to your MCP configuration:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e{\n\n  \u0026#34;mcpServers\u0026#34;: {\n\n    \u0026#34;playwright\u0026#34;: {\n\n      \u0026#34;command\u0026#34;: \u0026#34;npx\u0026#34;,\n\n      \u0026#34;args\u0026#34;: [\u0026#34;@playwright/mcp@latest\u0026#34;]\n\n    }\n\n  }\n\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOnce you have started the MCP server, you should see that Copilot now has access to a suite of new tools for browser interaction like:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebrowser_snapshot\u003c/code\u003e – Capture accessibility snapshots of pages\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebrowser_navigate\u003c/code\u003e – Navigate to URLs\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebrowser_click\u003c/code\u003e, \u003ccode\u003ebrowser_type\u003c/code\u003e, \u003ccode\u003ebrowser_hover\u003c/code\u003e – Interact with elements\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebrowser_resize\u003c/code\u003e – Test different viewport sizes\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebrowser_take_screenshot\u003c/code\u003e – Visual documentation\u003c/li\u003e\n\n\n\n\u003cli\u003eAnd many more: You can find the full list in the \u003ca href=\"https://github.com/microsoft/playwright-mcp?tab=readme-ov-file#tools\"\u003etools section of Playwright MCP server’s README\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWith access to a new set of tools to solve the UI challenges, it was time to point Copilot at the problem. Meaning, I now had the task of clearly defining the requirements in my initial prompt…easier said than done.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-the-debugging-journey-real-time-fixes-and-lessons-learned\"\u003eThe debugging journey: Real-time fixes and lessons learned\u003c/h2\u003e\n\n\n\n\u003ch3 id=\"h-1-describe-the-problem-and-let-agent-mode-work\"\u003e1. Describe the problem and let agent mode work\u003c/h3\u003e\n\n\n\n\u003cp\u003eI noticed that, in several pages, the main content was tucked behind the navigation bar. This was particularly noticeable on any pages that rendered games. On some pages (like OctoPong), I saw inconsistent spacing between game elements and the footer.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo get Copilot agent mode started, I aimed to be as explicit as possible in my prompts:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eI have spotted that there is a bit of a UI error. It seems like the main content of any page \u0026#34;starts\u0026#34; behind the navigation bar. This is more evident on the games like octosnap, octopong and octobrickbreaker.\n\nCan you take a look at the site using Playwright (you\u0026#39;ll need to spin up an instance of the server), take a look at the pages, and then investigate? Thanks!\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt loaded up the pages to configure each game, but didn’t try loading the games themselves (so missed some context). I followed up in a separate prompt:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eSorry, I wanted you to take a look when a game is actually loaded too. Can you play the game Octopong and Octosnap – I think it’s very visible in those? Do that before you build a plan.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eLesson:\u003c/strong\u003e \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/beyond-prompt-crafting-how-to-be-a-better-partner-for-your-ai-pair-programmer/\"\u003eThe more context and specifics you provide, the better Copilot performs\u003c/a\u003e, just like a teammate. \u003c/p\u003e\n\n\n\n\u003cp\u003eAfter spinning up Playwright MCP, I watched Copilot:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eLaunch a browser\u003c/li\u003e\n\n\n\n\u003cli\u003eNavigate through the app’s pages\u003c/li\u003e\n\n\n\n\u003cli\u003eDiagnose where and why content was hidden or misaligned\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Using Playwright MCP Server with Copilot agent mode\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/nfDa0QObQhs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eUltimately, we had to evolve the way that we were rendering the navigation bar. The current implementation had a separate navigation bar (DynamicHeader component) on each of the game pages with its own local state, overlaying the “main” navigation bar. Instead, Copilot suggested using the navigation bar from the root layout and passing the relevant context up, so that only one component is updated and the root layout gets updated as needed..\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHands-off debugging:\u003c/strong\u003e At this stage, I was literally hands off, watching as Copilot tried fixes, reran the app, and checked the results visually. As it implemented the new approach with a new header-context file, Copilot recognized linting errors, and iteratively fixed them.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"h-2-iterating-on-ui-requirements\"\u003e2. Iterating on UI requirements\u003c/h3\u003e\n\n\n\n\u003cp\u003eFixing bugs is rarely one-and-done. I noticed another bug, specifically for OctoPong. There was a small gap between the game board and the footer, which didn’t show up clearly on the livestream, but was noticeable on my own screen. Fortunately as developers, we’re used to small iterative and incremental improvements.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo once again, I turned to Copilot. However, as I iterated, Copilot would make changes, but they didn’t fully achieve what I needed. The problem wasn’t Copilot though; it was me and my unclear requirements.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cstrong\u003ePrompt\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eResult\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eReflection\u003c/strong\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eI’ve noticed a minor UI bug on the Octopong game page (this only happens when the game is actually live). There is a small space between the game itself and the footer. I want the game to extend all the way to the footer (not necessarily push the footer beyond the fold though). Can you use the Playwright MCP server to explore what’s going on, build a structured plan / todo list to resolve the actions? Thanks\u003c/td\u003e\u003ctd\u003eIt achieved what I had asked, but the pong paddles no longer displayed (which was a side effect of the container now being 0 height). Through no fault of Copilot, I hadn’t asked for the game components (e.g. Paddle/Ball) to be visible in the game area. The game was still playing (in a 0 height container), but the key components were not visible to me as the player.\u003c/td\u003e\u003ctd\u003e– Good clarity on tools to use.\u003cp\u003e– Good clarity on asking for a plan (as Copilot asked me to review/approve before making the changes).\u003c/p\u003e\u003cp\u003e– Lack of clarity on the full requirements (i.e. having the game components be visible and working).\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eJust to jump in, can you test again? It looks like the paddles and the ball are now missing as a result of the change?\u003c/td\u003e\u003ctd\u003eThe game began working again, however it introduced the gap that we early sought to resolve.\u003c/td\u003e\u003ctd\u003e– Solved the immediate challenge of making game components visible.\u003cp\u003e– Lack of clarity that the earlier requirements were still required.\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eCan you check the game once again? The spacing issues are still there.\u003cp\u003eThe requirements are:\u003c/p\u003e\u003cp\u003e1. The game is playable (i.e. balls and paddles are visible and one paddle is usable for the player).\u003cbr/\u003e2. The game area covers the “full space” between header and footer.\u003c/p\u003e\u003cp\u003eI think the space problem is back. You must meet both requirements please, thanks.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003eOnce again, Copilot fulfilled the requirements! But this time, the game extended beyond the viewport, and so a user would have to scroll to move the paddle to prevent the ball scoring against them (which is not an ideal experience!).\u003c/td\u003e\u003ctd\u003e– Solved all of the requirements we outlined\u003cp\u003e– Lack of clarity in the actual requirements (that the game should not extend beyond the viewport).\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eThanks! Sorry, I forgot to give you a third requirement. Your solution makes the game extend beyond the fold,  which makes the user have to “scroll” to play the game.\u003cp\u003eThese are the requirements you must meet:\u003c/p\u003e\u003cp\u003e1. The game is fully functional (paddles/ball working and visible).\u003cbr/\u003e2. There is no space between the game and the footer.\u003cbr/\u003e3. The game must not extend beyond the fold (i.e. the user must not have to scroll to see any part of the game board. So the game board at maximum must end at the bottom of the screen). The footer can be below the fold.\u003c/p\u003e\u003cp\u003ePlease feel free to reword/rewrite my requirements, as I struggled to define  them. Make sure you confirm with me the requirements are accurate.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003eSuccess! After we prompted Copilot with our full requirements, it was able to think through and iteratively approach the problem to get to the working layout.\u003c/td\u003e\u003ctd\u003e– A full set of requirements solved all of the requirements we outlined.\u003cp\u003e– While there were some minor issues in the mobile view, (a small gap between the navigation bar and game), other pages hadn’t yet been optimised for mobile. Since this isn’t a priority, it can be a task for later. \u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEach prompt brought incremental improvements, but also new side effects (like games extending past the viewport or missing paddles in Pong).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Clear requirements are important when prompting Copilot\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/XAY6kaWebz4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eKey insight:\u003c/strong\u003e Context is important, and making sure that we clearly articulate our requirements is a key part of that. The biggest challenge wasn’t technical, but precisely describing what I wanted. Getting the requirements right took several attempts…And lots of feedback from our viewers in the livestream chat. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-practical-tips-working-with-copilot-agent-mode-and-mcp-servers\"\u003ePractical tips: Working with Copilot agent mode and MCP servers\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere’s what I learned (or relearned) during this session:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKeep Copilot custom instructions up to date:\u003c/strong\u003e The agent relies on these files for repo context and best practices.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGive Copilot more power with MCP:\u003c/strong\u003e Playwright MCP enables true end-to-end testing and UI inspection, making it invaluable for debugging complex web apps.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eBe explicit with requirements:\u003c/strong\u003e Like any collaborator, Copilot only knows what you tell it. List out your must-haves, expected behaviors, and edge cases.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eIterate in small steps:\u003c/strong\u003e Commit changes frequently. It’s easier to roll back and diagnose issues when your history is granular.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-conclusion-progress-not-perfection\"\u003eConclusion: Progress, not perfection\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis live debugging session reminded me of two things:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eAgentic tools like Copilot and Playwright MCP can genuinely accelerate troubleshooting\u003c/strong\u003e. Especially when you provide the right context.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDescribing requirements is hard\u003c/strong\u003e. And that’s okay! Iteration, feedback, and even a few missteps are part of the process (both in terms of learning, and solving bugs).\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eIf you’re navigating similar challenges, dive in, experiment, and remember: progress beats perfection.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot\"\u003e\u003cstrong\u003eUpdate Copilot custom instructions files\u003c/strong\u003e\u003c/a\u003e for your repo. If you’re using Copilot coding agent, make sure to \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent?versionId=free-pro-team%40latest\u0026amp;productId=copilot\u0026amp;restPage=how-tos%2Ccustom-instructions%2Cadding-repository-custom-instructions-for-github-copilot\"\u003econfigure the \u003ccode\u003ecopilot-setup-steps.yml\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/playwright-mcp?tab=readme-ov-file#getting-started\"\u003e\u003cstrong\u003eInstall and start the Playwright MCP server\u003c/strong\u003e\u003c/a\u003e in VS Code to provide Copilot access to a browser for UI testing.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDescribe your bug or feature clearly\u003c/strong\u003e in a new chat with Copilot agent mode.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eLet Copilot propose and apply fixes\u003c/strong\u003e. But always review code changes and test results.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eIterate on requirements\u003c/strong\u003e based on what you see. Clarify as needed. Make sure you’re being clear in your requirements too.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCommit frequently!\u003c/strong\u003e Work in a branch and save your progress at each step.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eAre you using the Playwright MCP server for UI testing? Or maybe you have another favorite MCP server? Let us know — we’d love to hear how you’re using Copilot agent mode and MCP servers as part of your development workflow!\u003c/p\u003e\u003cp\u003eIn the meantime, mark your calendars for our \u003ca href=\"https://gh.io/rubberduckthursdays\"\u003enext \u003cstrong\u003eRubber Duck Thursdays\u003c/strong\u003e stream\u003c/a\u003e, subscribe to us on \u003ca href=\"https://www.youtube.com/@github\"\u003eYouTube\u003c/a\u003e, and check out \u003ca href=\"https://skills.github.com\"\u003eskills.github.com\u003c/a\u003e for interactive GitHub learning. See you next time!\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cp\u003eLearn how to set Copilot coding agent up for success with \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/from-chaos-to-clarity-using-github-copilot-agents-to-improve-developer-workflows/\"\u003ecustom instruction and Copilot setup steps \u0026gt;\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/agent-mode/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tagent mode\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/agentic-ai/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tagentic AI\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/mcp/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tMCP\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/rubber-duck-thursdays/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tRubber Duck Thursdays\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" alt=\"Chris Reddington\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eChris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2025\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2025\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eLast chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Register now; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=module\" target=\"_blank\" aria-label=\"Register now\"\u003e\n\t\t\t\t\tRegister now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-07-22T21:58:35Z",
  "modifiedTime": "2025-07-22T21:58:37Z"
}
