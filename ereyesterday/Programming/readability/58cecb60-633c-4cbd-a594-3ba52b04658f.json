{
  "id": "58cecb60-633c-4cbd-a594-3ba52b04658f",
  "title": "Deno 2 Released, Focuses on Interoperability with Legacy JavaScript Infrastructure and Use at Scale",
  "link": "https://www.infoq.com/news/2024/12/deno-2-released/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The Deno team recently released Deno 2. According to the team, Deno 2 provides seamless interoperability with legacy JavaScript infrastructure, a stabilized standard library, a modern registry for sharing JavaScript libraries across runtimes, and more. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Tue, 31 Dec 2024 00:20:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "TypeScript",
    "Web Development",
    "Deno",
    "JavaScript",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 3101,
  "excerpt": "The Deno team recently released Deno 2. According to the team, Deno 2 provides seamless interoperability with legacy JavaScript infrastructure, a stabilized standard library, a modern registry for sha",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241210082921/apple-touch-icon.png",
  "text": "The Deno team recently released Deno 2. According to the team, Deno 2 provides seamless interoperability with legacy JavaScript infrastructure, a stabilized standard library, a modern registry for sharing JavaScript libraries across runtimes, and more. Deno 2 touts backward compatibility with Node and npm. The release note explains: Deno 2 understands package.json, the node_modules folder, and even npm workspaces, allowing you to run Deno in any Node project using ESM. And if there are minor syntax adjustments needed, you can fix them with deno lint --fix. The aforementioned compatibility enables teams to incrementally adopt Deno and its all-in-one toolchain. Deno developers can import npm packages via the npm: specifier: import chalk from \"npm:chalk@5.3.0\"; console.log(chalk.blue(\"Hello, world!\")); // Hello, world! (in blue) Developers can also leverage import maps to set a bare specifier for their npm package: // deno.json { \"imports\": { \"chalk\": \"npm:chalk@5.3.0\" } } The module can then be used with its bare specifier: import chalk from \"chalk\"; console.log(chalk.blue(\"Hello, world!\")); // Hello, world! (in blue) Deno 2 also claims to support a large list of commonly used web frameworks (e.g., including Next.js, Astro, Remix, Angular, SvelteKit, QwikCity). Deno 2 additionally supports dependency management with deno install, deno add, and deno remove. The latter two commands respectively add and remove packages from a package.json file. The Deno Standard Library is now stable and included in Deno 2. It consists of dozens of audited utility modules covering data manipulation, web-related logic, JavaScript-specific functionalities, and more. Developers can review the complete list of modules from the standard library on Deno’s JavaScript Registry (JSR), an open source JavaScript registry that embraces ESM (JavaScript native modules), and natively accepts TypeScript packages. The release note explains the benefits of JSR: It supports TypeScript natively (you can publish modules as TypeScript source code), handles the module loading intricacies multiple runtimes and environments, only allows ESM, auto-generates documentation from JSDoc-style comments, and can be used with npm- and npx-like systems (yes, JSR turns TypeScript into .js and .d.ts files, as well). Deno also supports workspaces (also known as “monorepos”) to manage multiple related and interdependent packages simultaneously. Deno workspaces support using a Deno-first package from an existing npm package, easing the migration from npm workspaces, Developers can install the production release from dotcom–2.deno. Developers are encouraged to review the original release note, which includes the full list of features, improvements, and bug fixes. Deno is open-source software that is available under the MIT license. Contributions are encouraged via the Deno Project and should follow the Deno contribution guidelines. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2024/12/deno-2-released/en/headerimage/generatedHeaderImage-1735603579570.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe Deno team \u003ca href=\"https://deno.com/blog/v2.0\"\u003erecently released Deno 2\u003c/a\u003e. According to the team, Deno 2 provides seamless interoperability with legacy JavaScript infrastructure, a stabilized standard library, a modern registry for sharing JavaScript libraries across runtimes, and more.\u003c/p\u003e\n\u003cp\u003eDeno 2 touts backward compatibility with Node and npm. The release note explains:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDeno 2 understands \u003ccode\u003epackage.json\u003c/code\u003e, the \u003ccode\u003enode_modules\u003c/code\u003e folder, and even npm workspaces, allowing you to run Deno in any Node project using ESM. And if there are minor syntax adjustments needed, you can fix them with \u003ccode\u003edeno lint --fix\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe aforementioned compatibility enables teams to incrementally adopt Deno and its all-in-one toolchain. Deno developers can import npm packages via the \u003ccode\u003enpm:\u003c/code\u003e specifier:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e chalk \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;npm:chalk@5.3.0\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nconsole\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003echalk\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e// Hello, world! (in blue)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDevelopers can also leverage import maps to set a bare specifier for their npm package:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// deno.json\u003c/span\u003e\n\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;imports\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;chalk\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;npm:chalk@5.3.0\u0026#34;\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe module can then be used with its bare specifier:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e chalk \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#34;chalk\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\nconsole\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003echalk\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e// Hello, world! (in blue)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDeno 2 also claims to support a large list of commonly used web frameworks (e.g., including Next.js, Astro, Remix, Angular, SvelteKit, QwikCity).\u003c/p\u003e\n\u003cp\u003eDeno 2 additionally supports dependency management with \u003ccode\u003edeno install\u003c/code\u003e, \u003ccode\u003edeno add\u003c/code\u003e, and \u003ccode\u003edeno remove\u003c/code\u003e. The latter two commands respectively add and remove packages from a \u003ccode\u003epackage.json\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://docs.deno.com/runtime/fundamentals/standard_library/\"\u003eDeno Standard Library\u003c/a\u003e is now stable and included in Deno 2. It consists of dozens of audited utility modules covering data manipulation, web-related logic, JavaScript-specific functionalities, and more. Developers can \u003ca href=\"https://jsr.io/@std\"\u003ereview the complete list of modules\u003c/a\u003e from the standard library on Deno’s JavaScript Registry (JSR), an open source JavaScript registry that embraces ESM (JavaScript native modules), and natively accepts TypeScript packages.\u003c/p\u003e\n\u003cp\u003eThe release note explains the benefits of JSR:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIt supports TypeScript natively (you can publish modules as TypeScript source code), handles the module loading intricacies multiple runtimes and environments, only allows ESM, \u003ca href=\"https://deno.com/blog/document-javascript-package\"\u003eauto-generates documentation from JSDoc-style comments\u003c/a\u003e, and can be used with npm- and npx-like systems (yes, JSR turns TypeScript into \u003ccode\u003e.js\u003c/code\u003e and \u003ccode\u003e.d.ts\u003c/code\u003e files, as well).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://docs.deno.com/runtime/fundamentals/workspaces/\"\u003eDeno also supports workspaces\u003c/a\u003e (also known as “monorepos”) to manage multiple related and interdependent packages simultaneously. Deno workspaces support using a Deno-first package from an existing npm package, easing the migration from  npm  workspaces,\u003c/p\u003e\n\u003cp\u003eDevelopers can install the production release from  \u003ca href=\"https://dotcom--2.deno.dev/\"\u003edotcom–2.deno\u003c/a\u003e. Developers are encouraged to  \u003ca href=\"https://deno.com/blog/v1.40\"\u003ereview the original release note\u003c/a\u003e, which includes the full list of features, improvements, and bug fixes. Deno is open-source software that is available under the MIT license. Contributions are encouraged via the  \u003ca href=\"https://github.com/denoland/deno\"\u003eDeno Project\u003c/a\u003e  and should follow the  \u003ca href=\"https://github.com/denolib/awesome-deno/blob/master/CONTRIBUTING.md\"\u003eDeno contribution guidelines\u003c/a\u003e.\u003c/p\u003e\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-31T00:00:00Z",
  "modifiedTime": null
}
