{
  "id": "9409a143-ce73-4717-b639-ea4a55507f6b",
  "title": "How to Perform MS SQL Server Restore with RECOVERY and NORECOVERY Options",
  "link": "https://stackabuse.com/how-to-perform-ms-sql-server-restore-with-recovery-and-norecovery-options/",
  "description": "Introduction Backing up the database in MS SQL Server is vital to safeguard and recover the data in case of scenarios, like hardware failure, server failure, database corruption, etc. MS SQL Server provides different types of backups, such as differential, transactional, and full backup. A full backup allows you to",
  "author": "Guest Contributor",
  "published": "Wed, 19 Mar 2025 06:52:59 GMT",
  "source": "https://stackabuse.com/rss/",
  "categories": [
    "sql",
    "database"
  ],
  "byline": "Guest Contributor",
  "length": 6090,
  "excerpt": "Backing up the database in MS SQL Server is vital to safeguard and recover the data in case of scenarios, like hardware failure, server failure, database corru...",
  "siteName": "Stack Abuse",
  "favicon": "",
  "text": "Introduction Backing up the database in MS SQL Server is vital to safeguard and recover the data in case of scenarios, like hardware failure, server failure, database corruption, etc. MS SQL Server provides different types of backups, such as differential, transactional, and full backup. A full backup allows you to restore the database in exactly the same form as it was at the time of creating the backup. The differential backup stores only the edits since the last full backup was created, whereas the transaction log backup is an incremental backup that stores all the transaction logs. When you restore SQL database backup, SQL Server offers two options to control the state of the database after restore. These are: RESTORE WITH RECOVERY When you use the RESTORE WITH RECOVERY option, it indicates no more restores are required and the state of database changes to online after the restore operation. RESTORE WITH NORECOVERY You can select the WITH NORECOVERY option when you want to continue restoring additional backup files, like transactional or differential. It changes the database to restoring state until it’s recovered. Now, let’s learn how to use the WITH RECOVERY and NORECOVERY options when restoring the database. How to Restore MS SQL Server Database with the RECOVERY Option? You can use the WITH RECOVERY option to restore a database from full backup. It is the default option in the Restore Database window and is used when restoring the last backup or only the backup in a restore sequence. You can restore database WITH RECOVERY option by using SQL Server Management Studio (SSMS) or T-SQL commands. 1. Restore Database with RECOVERY Option using SSMS If you want to restore database without writing code and scripts, then you can use the graphical user interface in SSMS. Here are the steps to restore database WITH RECOVERY using SSMS: Open SSMS and connect to your SQL Server instance. Go to Object Explorer, expand databases, and right-click on the database. Click Tasks \u003e Restore. On the Restore database page, under General, select the database you want to restore and the available backup. Next, on the same page, click Options. In the Options window, select the recovery state as RESTORE WITH RECOVERY. Click OK. 2. Restore Database with RECOVERY Option using T-SQL Command If you have a large number of operations that need to be managed or you want to automate the tasks, then you can use T-SQL commands. You can use the below T-SQL command to restore the database with the RECOVERY option. RESTORE DATABASE [DBName] FROM DISK = 'C:\\Backup\\DB.bak' WITH RECOVERY; How to Restore MS SQL Server Database with NORECOVERY Option? You can use the NORECOVERY option to restore multiple backup files. For example, if your system fails and you need to restore the SQL Server database to the point just before the failure occurred, then you need a multi-step restore. In this, each backup should be in a sequence, like Full Backup \u003e Differential \u003e Transaction log. Here, you need to select the database in NORECOVERY mode except for the last one. This option changes the state of the database to RESTORING and makes the database inaccessible to the users unless additional backups are restored. You can restore the database with the NORECOVERY option by using SSMS or T-SQL commands. 1. Using T-SQL Commands Here are the steps to restore MS SQL database with the NORECOVERY option by using T-SQL commands: Step 1: First, you need to restore the Full Backup by using the below command: RESTORE DATABASE [YourDatabaseName] FROM DISK = N'C:\\Path\\To\\Your\\FullBackup.bak' WITH NORECOVERY, STATS = 10; Step 2: Then, you need to restore the Differential Backup. Use the below command: RESTORE DATABASE [YourDatabaseName] FROM DISK = N'C:\\Path\\To\\Your\\DifferentialBackup.bak' WITH NORECOVERY, STATS = 10; Check out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually learn it!Step 3: Now, you have to restore the Transaction log backup (last backup WITH RECOVERY). Here’s the command: RESTORE LOG [YourDatabaseName] FROM DISK = N'C:\\Path\\To\\Your\\LastTransactionLogBackup.bak' WITH RECOVERY, STATS = 10; 2. Using SQL Server Management Studio (SSMS) You can follow the below steps to restore the database with NORECOVERY option using the SSMS: In SSMS, go to the Object Explorer, expand databases, and right-click the database node. Click Tasks, select Restore, and click Database. In the Restore Database page, select the source (i.e. full backup), and the destination. Click OK. Next, add the information about the selected backup file in the option labelled - Backup sets to restore. Next, on the same Restore Database page, click Options. On the Options page, click RESTORE WITH NORECOVERY in the Recovery state field. Click OK. What if the SQL Database Backup File is Corrupted? Sometimes, the restore process can fail due to corruption in the database backup file. If your backup file is corrupted or you've not created a backup file, then you can take the help of a professional MS SQL repair tool, like Stellar Repair for MS SQL Technician. It is an advanced SQL repair tool to repair corrupt databases and backup files with complete integrity. The tool can repair backup files of any type - transactional log, full backup, and differential - without any file-size limitations. It can even restore deleted items from the backup database file. The tool is compatible with MS SQL Server version 2022, 2019, and earlier. Conclusion Above, we have discussed the stepwise process to restore the SQL database with RECOVERY and NORECOVERY options in MS SQL Server. If you face any error or issue while restoring the backup, then you can use a professional SQL repair tool, like Stellar Repair for MS SQL Technician. It can easily restore all the data from corrupt backup (.bak) files and save it in a new database file with complete precision. The tool can help resolve all the errors related to corruption in SQL database and backup (.bak) files.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBacking up the database in MS SQL Server is vital to safeguard and recover the data in case of scenarios, like hardware failure, server failure, database corruption, etc. MS SQL Server provides different types of backups, such as differential, transactional, and full backup. A full backup allows you to restore the database in exactly the same form as it was at the time of creating the backup. The differential backup stores only the edits since the last full backup was created, whereas the transaction log backup is an incremental backup that stores all the transaction logs.\u003c/p\u003e\n\u003cp\u003eWhen you \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.stellarinfo.com/restore-sql-database.php\"\u003erestore SQL database\u003c/a\u003e backup, SQL Server offers two options to control the state of the database after restore. These are:\u003c/p\u003e\n\u003ch3 id=\"restorewithrecovery\"\u003eRESTORE WITH RECOVERY\u003c/h3\u003e\n\u003cp\u003eWhen you use the RESTORE WITH RECOVERY option, it indicates no more restores are required and the state of database changes to online after the restore operation.\u003c/p\u003e\n\u003ch3 id=\"restorewithnorecovery\"\u003eRESTORE WITH NORECOVERY\u003c/h3\u003e\n\u003cp\u003eYou can select the WITH NORECOVERY option when you want to continue restoring additional backup files, like transactional or differential. It changes the database to restoring state until it’s recovered.\u003c/p\u003e\n\u003cp\u003eNow, let’s learn how to use the WITH RECOVERY and NORECOVERY options when restoring the database.\u003c/p\u003e\n\u003ch2 id=\"howtorestoremssqlserverdatabasewiththerecoveryoption\"\u003eHow to Restore MS SQL Server Database with the RECOVERY Option?\u003c/h2\u003e\n\u003cp\u003eYou can use the WITH RECOVERY option to restore a database from full backup. It is the default option in the Restore Database window and is used when restoring the last backup or only the backup in a restore sequence. You can restore database WITH RECOVERY option by using SQL Server Management Studio (SSMS) or T-SQL commands.\u003c/p\u003e\n\u003ch3 id=\"1restoredatabasewithrecoveryoptionusingssms\"\u003e1. Restore Database with RECOVERY Option using SSMS\u003c/h3\u003e\n\u003cp\u003eIf you want to restore database without writing code and scripts, then you can use the graphical user interface in SSMS. Here are the steps to restore database WITH RECOVERY using SSMS:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen SSMS and connect to your SQL Server instance.\u003c/li\u003e\n\u003cli\u003eGo to \u003cstrong\u003eObject Explorer\u003c/strong\u003e, expand databases, and right-click on the database.\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eTasks \u0026gt; Restore\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eOn the \u003cstrong\u003eRestore database\u003c/strong\u003e page, under \u003cstrong\u003eGeneral\u003c/strong\u003e, select the database you want to restore and the available backup.\u003c/li\u003e\n\u003cli\u003eNext, on the same page, click \u003cstrong\u003eOptions\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eIn the \u003cstrong\u003eOptions\u003c/strong\u003e window, select the recovery state as RESTORE WITH RECOVERY. Click \u003cstrong\u003eOK\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"2restoredatabasewithrecoveryoptionusingtsqlcommand\"\u003e2. Restore Database with RECOVERY Option using T-SQL Command\u003c/h3\u003e\n\u003cp\u003eIf you have a large number of operations that need to be managed or you want to automate the tasks, then you can use T-SQL commands. You can use the below T-SQL command to restore the database with the RECOVERY option.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRESTORE DATABASE [DBName] FROM DISK = \u0026#39;C:\\Backup\\DB.bak\u0026#39; WITH RECOVERY;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"howtorestoremssqlserverdatabasewithnorecoveryoption\"\u003eHow to Restore MS SQL Server Database with NORECOVERY Option?\u003c/h2\u003e\n\u003cp\u003eYou can use the NORECOVERY option to restore multiple backup files. For example, if your system fails and you need to restore the SQL Server database to the point just before the failure occurred, then you need a multi-step restore. In this, each backup should be in a sequence, like Full Backup \u0026gt; Differential \u0026gt; Transaction log. Here, you need to select the database in NORECOVERY mode except for the last one. This option changes the state of the database to RESTORING and makes the database inaccessible to the users unless additional backups are restored. You can restore the database with the NORECOVERY option by using SSMS or T-SQL commands.\u003c/p\u003e\n\u003ch3 id=\"1usingtsqlcommands\"\u003e1. Using T-SQL Commands\u003c/h3\u003e\n\u003cp\u003eHere are the steps to restore MS SQL database with the NORECOVERY option by using T-SQL commands:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1:\u003c/strong\u003e  First, you need to restore the Full Backup by using the below command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRESTORE DATABASE [YourDatabaseName]\n\u003cspan\u003eFROM\u003c/span\u003e DISK \u003cspan\u003e=\u003c/span\u003e N\u003cspan\u003e\u0026#39;C:\\Path\\To\\Your\\FullBackup.bak\u0026#39;\u003c/span\u003e\n\u003cspan\u003eWITH\u003c/span\u003e NORECOVERY,\nSTATS \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eStep 2:\u003c/strong\u003e Then, you need to restore the Differential Backup. Use the below command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRESTORE DATABASE [YourDatabaseName]\n\u003cspan\u003eFROM\u003c/span\u003e DISK \u003cspan\u003e=\u003c/span\u003e N\u003cspan\u003e\u0026#39;C:\\Path\\To\\Your\\DifferentialBackup.bak\u0026#39;\u003c/span\u003e\n\u003cspan\u003eWITH\u003c/span\u003e NORECOVERY,\nSTATS \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv data-nosnippet=\"\" id=\"ad-lead-magnet\"\u003e\u003cp\u003eCheck out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually \u003cem\u003elearn\u003c/em\u003e it!\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eStep 3:\u003c/strong\u003e Now, you have to restore the Transaction log backup (last backup WITH RECOVERY). Here’s the command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRESTORE LOG [YourDatabaseName]\n\u003cspan\u003eFROM\u003c/span\u003e DISK \u003cspan\u003e=\u003c/span\u003e N\u003cspan\u003e\u0026#39;C:\\Path\\To\\Your\\LastTransactionLogBackup.bak\u0026#39;\u003c/span\u003e\n\u003cspan\u003eWITH\u003c/span\u003e RECOVERY,\nSTATS \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"2usingsqlservermanagementstudiossms\"\u003e2. Using SQL Server Management Studio (SSMS)\u003c/h3\u003e\n\u003cp\u003eYou can follow the below steps to restore the database with NORECOVERY option using the SSMS:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIn SSMS, go to the \u003cstrong\u003eObject Explorer\u003c/strong\u003e, expand databases, and right-click the database node.\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eTasks\u003c/strong\u003e, select \u003cstrong\u003eRestore\u003c/strong\u003e, and click \u003cstrong\u003eDatabase\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eIn the \u003cstrong\u003eRestore Database\u003c/strong\u003e page, select the source (i.e. full backup), and the destination. Click \u003cstrong\u003eOK\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eNext, add the information about the selected backup file in the option labelled - \u003cstrong\u003eBackup sets to restore\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eNext, on the same \u003cstrong\u003eRestore Database\u003c/strong\u003e page, click \u003cstrong\u003eOptions\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eOn the \u003cstrong\u003eOptions\u003c/strong\u003e page, click \u003cstrong\u003eRESTORE WITH NORECOVERY\u003c/strong\u003e in the \u003cstrong\u003eRecovery state\u003c/strong\u003e field. Click \u003cstrong\u003eOK\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"whatifthesqldatabasebackupfileiscorrupted\"\u003eWhat if the SQL Database Backup File is Corrupted?\u003c/h2\u003e\n\u003cp\u003eSometimes, the restore process can fail due to corruption in the database backup file. If your backup file is corrupted or you\u0026#39;ve not created a backup file, then you can take the help of a professional MS SQL repair tool, like Stellar Repair for MS SQL Technician. It is an advanced SQL repair tool to repair corrupt databases and backup files with complete integrity. The tool can repair backup files of any type - transactional log, full backup, and differential - without any file-size limitations. It can even restore deleted items from the backup database file. The tool is compatible with MS SQL Server version 2022, 2019, and earlier.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAbove, we have discussed the stepwise process to restore the SQL database with \u003cstrong\u003eRECOVERY\u003c/strong\u003e and \u003cstrong\u003eNORECOVERY\u003c/strong\u003e options in MS SQL Server. If you face any error or issue while restoring the backup, then you can use a professional SQL repair tool, like \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.stellarinfo.com/sql-recovery.php\"\u003eStellar Repair for MS SQL\u003c/a\u003e Technician. It can easily restore all the data from corrupt backup (.bak) files and save it in a new database file with complete precision. The tool can help resolve all the errors related to corruption in SQL database and backup (.bak) files.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-03-19T06:52:59Z",
  "modifiedTime": "2025-03-20T11:41:23Z"
}
