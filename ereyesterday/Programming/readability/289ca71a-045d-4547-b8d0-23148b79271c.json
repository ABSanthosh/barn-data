{
  "id": "289ca71a-045d-4547-b8d0-23148b79271c",
  "title": "Code Faster with JetBrains AI in PyCharm",
  "link": "https://blog.jetbrains.com/pycharm/2024/11/code-faster-with-jetbrains-ai-in-pycharm/",
  "description": "PyCharm 2024.3 comes with many improvements to JetBrains AI to help you code faster. I’m going to walk you through some of these updates in this blog post.  Natural language inline AI prompt You can now use JetBrains AI by typing straight into your editor in natural language without opening the AI Assistant tool window. […]",
  "author": "Helen Scott",
  "published": "Tue, 19 Nov 2024 15:25:51 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "ai-assistant",
    "productivity"
  ],
  "byline": "Helen Scott",
  "length": 6216,
  "excerpt": "PyCharm 2024.3 comes with many improvements to JetBrains AI to help you code faster. I’m going to walk you through some of these updates in this blog post.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The Python IDE for data science and web development AI AssistantCode Faster with JetBrains AI in PyCharm PyCharm 2024.3 comes with many improvements to JetBrains AI to help you code faster. I’m going to walk you through some of these updates in this blog post.  Natural language inline AI prompt You can now use JetBrains AI by typing straight into your editor in natural language without opening the AI Assistant tool window. If you use either IntelliJ IDEA or PyCharm, you might already be familiar with natural language AI prompts, but let me walk you through the process.  If you’re typing in the gutter you can start typing your request straight into the editor, and then press Tab. Here’s an example of one such request: write a script to capture a date input from a user and print it out prefixed by a message stating that their birthday is on that date. You can then iterate on the initial input by clicking on the purple block in the gutter or by pressing ⌘\\ or Ctrl+\\ and pressing Enter: add error handling so that when a birthday is in the future, we dont accept it You can use  ⌘\\ or Ctrl+\\ to keep iterating until you’re happy with the result. For example, we can use the prompt: print out the day of the week as well as their birthday date And then:  change the format of day_of_week to short This feature is available for Python, JavaScript, TypeScript, JSON, and YAML files. Let’s look at some more examples. We can get JetBrains AI Assistant to help us generate new code with a prompt like this: Write code that lists the latest polls, shows poll details, handles voting, updates votes, and displays poll results, ensuring only published polls are accessible. Or add some error handling to our code: Add edge case handling to this code Remember, context is everything. Where you start your natural language prompt is important, as PyCharm uses the placement of your caret to figure out the context. You don’t need to prefix your query with a ? or $ if you start typing in the gutter because the context is the file, but if your caret is indented, you’ll need to start your query with the ? or $ character so PyCharm knows you’re crafting a natural language query. In this example, we want to refactor existing code, so we need to prefix our query with the ? character: ?create a dedicated function for printing the schedule and remove the code from here Try JetBrains AI for free Running code in the Python console We know that JetBrains AI can generate code for you, but now you can run that code in the Python console without leaving the AI Assistant tool window by clicking the green run arrow. For example, let’s say you have the following prompt: Create a python script that asks for a birthday date in standard format yyy-MM-dd then converts it and prints it back out in a written format such as 22nd January 1991  You can now click the green run arrow on the top-right of the code snippet to run it in your Python console: Even more features In addition to the new functionality for natural language and code completion for PyCharm highlighted above, there are several other improvements to JetBrains AI.  Faster code completion We have introduced a new model for faster cloud-based completion with AI Assistant which is showing very promising results. Faster documentation If documentation isn’t your thing, you can now hand off writing your Python docstrings to JetBrains AI. If you type either single or double quotes to enter a docstring and then press Return, you’ll see a prompt that says Generate with AI Assistant. Click that prompt and let JetBrains AI generate the documentation for you: Help at your fingertips We all need a little help now and again, and we can get JetBrains AI to help us here too. We’ve added a /docs prompt to the JetBrains AI tool window. This prompt will query the PyCharm documentation to save you from switching out of the context you’re working in! Ability to choose your LLM For AI Chat, you can now select a different LLM from the drop-down menu in the chat window itself. There are lots of options for you to choose from: More context in Jupyter notebooks We’ve also improved how JetBrains AI works for data scientists. JetBrains AI now recognizes DataFrames and variables in your notebook. You can prefix your DataFrame or variable with # so that JetBrains AI considers it as part of the context.  Summary JetBrains AI is available inside PyCharm, right where you need it. This release brings many improvements, from writing in natural language inside the editor and running AI-generated Python snippets in the console to generating documentation.  Remember, if you’re in the gutter, you can start typing in natural language and then press Tab to get AI Assistant to generate the code. If you’re inside a method or function, you need to prefix your natural language query with either ? or $. You can then iterate on the generated code as many times as you like as you build out your new functionality and explore further. Try JetBrains AI for free Subscribe to PyCharm Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/pc-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/pycharm/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/PyCharm-1.svg\" alt=\"Pycharm logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe Python IDE for data science and web development\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/pycharm/category/ai-assistant/\"\u003eAI Assistant\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCode Faster with JetBrains AI in PyCharm\u003c/h2\u003e                    \n                    \n\u003cp\u003ePyCharm 2024.3 comes with many improvements to JetBrains AI to help you code faster. I’m going to walk you through some of these updates in this blog post. \u003c/p\u003e\n\n\n\n\u003ch2\u003eNatural language inline AI prompt\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou can now use JetBrains AI by typing straight into your editor in natural language without opening the AI Assistant tool window. If you use either IntelliJ IDEA or PyCharm, you might already be familiar with natural language AI prompts, but let me walk you through the process. \u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’re typing in the gutter you can start typing your request straight into the editor, and then press \u003cem\u003eTab\u003c/em\u003e. Here’s an example of one such request:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003ewrite a script to capture a date input from a user and print it out prefixed by a message stating that their birthday is on that date.\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can then iterate on the initial input by clicking on the purple block in the gutter or by pressing \u003cem\u003e⌘\\ or Ctrl+\\\u003c/em\u003e and pressing \u003cem\u003eEnter\u003c/em\u003e:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eadd error handling so that when a birthday is in the future, we dont accept it\n\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can use  \u003cem\u003e⌘\\ or Ctrl+\\\u003c/em\u003e to keep iterating until you’re happy with the result. For example, we can use the prompt:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eprint out the day of the week as well as their birthday date\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd then: \u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003echange the format of day_of_week to short\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/code-iterate1.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis feature is available for Python, JavaScript, TypeScript, JSON, and YAML files.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s look at some more examples. We can get JetBrains AI Assistant to help us generate new code with a prompt like this:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eWrite code that lists the latest polls, shows poll details, handles voting, updates votes, and displays poll results, ensuring only published polls are accessible.\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/add-code-polls1.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOr add some error handling to our code:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eAdd edge case handling to this code\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/edge-case-handling.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eRemember, context is everything. Where you start your natural language prompt is important, as PyCharm uses the placement of your caret to figure out the context. You don’t need to prefix your query with a ? or $ if you start typing in the gutter because the context is the file, but if your caret is indented, you’ll need to start your query with the ? or $ character so PyCharm knows you’re crafting a natural language query.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this example, we want to refactor existing code, so we need to prefix our query with the ? character:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e?create a dedicated function for printing the schedule and remove the code from here\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/print-example.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\n    \u003ca href=\"https://jb.gg/olx3f2\" target=\"_blank\" rel=\"noopener\"\u003e      \n        Try JetBrains AI for free\n    \u003c/a\u003e\n\u003c/p\u003e\n\n\n\n\u003ch2\u003eRunning code in the Python console\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe know that JetBrains AI can generate code for you, but now you can run that code in the Python console without leaving the AI Assistant tool window by clicking the green run arrow.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, let’s say you have the following prompt:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"md\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eCreate a python script that asks for a birthday date in standard format yyy-MM-dd then converts it and prints it back out in a written format such as 22nd January 1991 \u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can now click the green run arrow on the top-right of the code snippet to run it in your Python console:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/run-python-code.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eEven more features\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn addition to the new functionality for natural language and code completion for PyCharm highlighted above, there are several other improvements to JetBrains AI. \u003c/p\u003e\n\n\n\n\u003ch3\u003eFaster code completion\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe have introduced a \u003ca href=\"https://blog.jetbrains.com/blog/2024/10/22/introducing-mellum-jetbrains-new-llm-built-for-developers/\"\u003enew model for faster cloud-based completion with AI Assistant\u003c/a\u003e which is showing very promising results.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1200\" height=\"675\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/Post_Infographics_UPD.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eFaster documentation\u003c/h3\u003e\n\n\n\n\u003cp\u003eIf documentation isn’t your thing, you can now hand off writing your Python docstrings to JetBrains AI. If you type either single or double quotes to enter a docstring and then press \u003cem\u003eReturn\u003c/em\u003e, you’ll see a prompt that says \u003cem\u003eGenerate with AI Assistant\u003c/em\u003e. Click that prompt and let JetBrains AI generate the documentation for you:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/generate-docs.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eHelp at your fingertips\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe all need a little help now and again, and we can get JetBrains AI to help us here too. We’ve added a /docs prompt to the JetBrains AI tool window. This prompt will query the PyCharm documentation to save you from switching out of the context you’re working in!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/getting-help.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eAbility to choose your LLM\u003c/h3\u003e\n\n\n\n\u003cp\u003eFor AI Chat, you can now select a different LLM from the drop-down menu in the chat window itself. There are lots of options for you to choose from:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/choose-llm.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eMore context in Jupyter notebooks\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe’ve also improved how JetBrains AI works for data scientists. JetBrains AI now recognizes DataFrames and variables in your notebook. You can prefix your DataFrame or variable with # so that JetBrains AI considers it as part of the context. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/jupyter-hash-code-context.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\n\n\u003cp\u003eJetBrains AI is available inside PyCharm, right where you need it. This release brings many improvements, from writing in natural language inside the editor and running AI-generated Python snippets in the console to generating documentation. \u003c/p\u003e\n\n\n\n\u003cp\u003eRemember, if you’re in the gutter, you can start typing in natural language and then press Tab to get AI Assistant to generate the code. If you’re inside a method or function, you need to prefix your natural language query with either ? or $. You can then iterate on the generated code as many times as you like as you build out your new functionality and explore further.\u003c/p\u003e\n\n\n\n\u003cp\u003e\n    \u003ca href=\"https://jb.gg/olx3f2\" target=\"_blank\" rel=\"noopener\"\u003e      \n        Try JetBrains AI for free\n\u003c/a\u003e\u003c/p\u003e\n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to PyCharm Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
