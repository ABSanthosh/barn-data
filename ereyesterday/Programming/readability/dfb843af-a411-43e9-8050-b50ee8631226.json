{
  "id": "dfb843af-a411-43e9-8050-b50ee8631226",
  "title": "SwiftUI for iOS 26 Embraces LiquidGlass, Introduces WebView and Rich Text Editing",
  "link": "https://www.infoq.com/news/2025/06/swiftui-ios26-liquid-glass/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "At WWDC 2025, Apple unveiled the latest iteration of its declarative UI framework, SwiftUI, featuring two major additions: a new SwiftUI-native WebView type and support for rich-text editing within TextView controls. The update also brings a plethora of additional improvements and new performance tools. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Wed, 25 Jun 2025 07:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "User Interface",
    "Declarative Programming",
    "GUI",
    "SwiftUI",
    "Apple",
    "Mobile",
    "iOS",
    "Swift",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3690,
  "excerpt": "At WWDC 2025, Apple unveiled the latest iteration of its declarative UI framework, SwiftUI, featuring two major additions: a new SwiftUI-native WebView type and support for rich-text editing within Te",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250605075544/apple-touch-icon.png",
  "text": "At WWDC 2025, Apple unveiled the latest iteration of its declarative UI framework, SwiftUI, featuring two major additions: a new SwiftUI-native WebView type and support for rich-text editing within TextView controls. The update also brings a plethora of additional improvements and new performance tools. The new WebView type displays HTML, CSS, and JavaScript content within an app. By default, the view provides a familiar browsing experience, including support for navigating between web pages using links, and forward and back buttons. However, you can fully customize navigation behavior by associating a WebView with a WebPage. This is an @Observable class that exposes web content properties and allows tracking changes to them. For example, you can track when a page is fully loaded observing currentNavigationEvent. To make rich-text editing easy to implement, SwiftUI in iOS 26 extends the TextEditor view with support for AttributedString. As Apple demonstrated at WWDC, enabling rich-text editing is as simple as changing the type of the bound state passed to TextEditor during initialization: struct RichEditorView: View { @State private var text = AttributedString() var body: some View { TextEditor(text: $text) } } Apple has provided a code sample that developers can use to explore the full range of capabilities, including adding custom controls and limiting the formatting options available in the editor. A new macro, @Animatable, simplifies animating views, view modifiers, text renderers, shapes, and other structs or classes. It automatically synthesizes conformance to the Animatable protocol by implementing the animatableData property based on the animatable properties declared in the type. For instance, you can use it like shown below to animate the width and angle properties while excluding non-animatable properties like isOpaque: @Animatable struct CoolShape: Shape { var width: CGFloat var angle: Angle @AnimatableIgnored var isOpaque: Bool // ... } Several additions benefit developers working with both UIKit and SwiftUI. Notably, the new UIHostingSceneDelegate class enables bridging SwiftUI scenes into UIKit, much like how UIHostingController allows managing a SwiftUI view. This extends integration capabilities to full scenes, not just individual views. Last but not least, SwiftUI fully supports the new Liquid Glass design language. Liquid Glass is a dynamic material combining the optical properties of glass with a sense of fluidity. It refracts content from below it, reflects light from around it, and has a lensing effect along its edges, giving interfaces a sense of depth and motion. To take advantage of it, apps do not need to be redesigned, just rebuilt with Xcode 26 to take advantage of the new design. However, to fully embrace Liquid Glass, Apple recommends reviewing how foreground elements contrast with dynamic backgrounds, and optionally using new system materials to ensure accessibility and visual harmony. On a related note, iOS 26 also includes an enhanced version of Swift Charts, now with support for 3D graphics. This update allows developers to plot data in three dimensions, visualize mathematical surfaces, and create more immersive and informative visualizations. Swift Charts now lets developers configure the camera, adjust lighting and materials, and fine-tune rendering properties. SwiftUI 26 includes far more than we can cover here, so be sure to check out the official WWDC sessions for the full detail. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/06/swiftui-ios26-liquid-glass/en/card_header_image/generatedCard-1750831959434.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAt WWDC 2025, Apple unveiled the latest iteration of its \u003ca href=\"https://developer.apple.com/wwdc25/guides/swiftui/\"\u003edeclarative UI framework, SwiftUI\u003c/a\u003e, featuring two major additions: a new SwiftUI-native \u003ccode\u003eWebView\u003c/code\u003e type and support for rich-text editing within TextView controls. The update also brings a plethora of \u003ca href=\"https://developer.apple.com/documentation/updates/swiftui\"\u003eadditional improvements\u003c/a\u003e and new performance tools.\u003c/p\u003e\n\n\u003cp\u003eThe new \u003ca href=\"https://developer.apple.com/documentation/WebKit/WebView-swift.struct\"\u003e\u003ccode\u003eWebView\u003c/code\u003e type\u003c/a\u003e displays HTML, CSS, and JavaScript content within an app. By default, the view provides a familiar browsing experience, including support for navigating between web pages using links, and forward and back buttons. However, you can fully customize navigation behavior by associating a \u003ccode\u003eWebView\u003c/code\u003e with a \u003ca href=\"https://developer.apple.com/documentation/WebKit/WebPage\"\u003e\u003ccode\u003eWebPage\u003c/code\u003e\u003c/a\u003e. This is an \u003ccode\u003e@Observable\u003c/code\u003e class that exposes web content properties and allows tracking changes to them. For example, you can track when a page is fully loaded observing \u003ca href=\"https://developer.apple.com/documentation/webkit/webpage/currentnavigationevent\"\u003e\u003ccode\u003ecurrentNavigationEvent\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo make rich-text editing easy to implement, SwiftUI in iOS 26 extends the \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/TextEditor\"\u003e\u003ccode\u003eTextEditor\u003c/code\u003e view\u003c/a\u003e with support for \u003ca href=\"https://developer.apple.com/documentation/Foundation/AttributedString\"\u003e\u003ccode\u003eAttributedString\u003c/code\u003e\u003c/a\u003e. As Apple \u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/280/?time=75\"\u003edemonstrated at WWDC\u003c/a\u003e, enabling rich-text editing is as simple as changing the type of the bound state passed to \u003ccode\u003eTextEditor\u003c/code\u003e during initialization:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003estruct RichEditorView: View {\n    @State private var text = AttributedString()\n\n    var body: some View {\n        TextEditor(text: $text)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eApple has provided a \u003ca href=\"https://developer.apple.com/documentation/swiftui/building-rich-swiftui-text-experiences\"\u003ecode sample\u003c/a\u003e that developers can use to explore the full range of capabilities, including adding custom controls and limiting the formatting options available in the editor.\u003c/p\u003e\n\n\u003cp\u003eA new macro, \u003ccode\u003e@Animatable\u003c/code\u003e, simplifies animating views, view modifiers, text renderers, shapes, and other structs or classes. It automatically synthesizes conformance to the \u003ca href=\"https://developer.apple.com/documentation/swiftui/animatable\"\u003e\u003ccode\u003eAnimatable\u003c/code\u003e protocol\u003c/a\u003e by implementing the \u003ccode\u003eanimatableData\u003c/code\u003e property based on the animatable properties declared in the type. For instance, you can use it like shown below to animate the \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eangle\u003c/code\u003e properties while excluding non-animatable properties like \u003ccode\u003eisOpaque\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Animatable\nstruct CoolShape: Shape {\n    var width: CGFloat\n    var angle: Angle\n    @AnimatableIgnored var isOpaque: Bool\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSeveral additions benefit developers working with both UIKit and SwiftUI. Notably, the new \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/UIHostingSceneDelegate\"\u003e\u003ccode\u003eUIHostingSceneDelegate\u003c/code\u003e\u003c/a\u003e class enables bridging SwiftUI scenes into UIKit, much like how \u003ca href=\"https://developer.apple.com/documentation/swiftui/uihostingcontroller\"\u003e\u003ccode\u003eUIHostingController\u003c/code\u003e\u003c/a\u003e allows managing a SwiftUI view. This extends integration capabilities to full scenes, not just individual views.\u003c/p\u003e\n\n\u003cp\u003eLast but not least, SwiftUI fully supports the new Liquid Glass design language. \u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/356/\"\u003eLiquid Glass\u003c/a\u003e is a dynamic material combining the optical properties of glass with a sense of fluidity. It refracts content from below it, reflects light from around it, and has a lensing effect along its edges, giving interfaces a sense of depth and motion.\u003c/p\u003e\n\n\u003cp\u003eTo take advantage of it, apps do not need to be redesigned, just rebuilt with Xcode 26 to take advantage of the new design. However, to fully embrace Liquid Glass, Apple recommends reviewing how foreground elements contrast with dynamic backgrounds, and optionally using new system materials to ensure accessibility and visual harmony.\u003c/p\u003e\n\n\u003cp\u003eOn a related note, iOS 26 also includes an enhanced version of \u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/313/\"\u003eSwift Charts, now with support for 3D graphics\u003c/a\u003e. This update allows developers to plot data in three dimensions, visualize mathematical surfaces, and create more immersive and informative visualizations. Swift Charts now lets developers configure the camera, adjust lighting and materials, and fine-tune rendering properties.\u003c/p\u003e\n\n\u003cp\u003eSwiftUI 26 includes far more than we can cover here, so be sure to check out the official \u003ca href=\"https://developer.apple.com/wwdc25/guides/swiftui/\"\u003eWWDC sessions\u003c/a\u003e for the full detail.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-06-25T00:00:00Z",
  "modifiedTime": null
}
