{
  "id": "dd5ef6d8-1489-40e3-b319-975e9b465baa",
  "title": "IDE Workspaces Development: Challenges and Plans",
  "link": "https://blog.jetbrains.com/idea/2025/03/ide-workspaces-development-challenges-and-plans/",
  "description": "It’s been a while since we announced workspaces for IntelliJ IDEA – a feature that lets you manage multiple projects in a single IDE window – and we’ve received tons of feedback and made a lot of improvements since then. We see this feature as a tool to improve the developer experience by allowing you […]",
  "author": "Andrey Belyaev",
  "published": "Wed, 26 Mar 2025 11:27:42 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "releases",
    "challenges",
    "ide",
    "intellij-idea",
    "plans",
    "workspaces"
  ],
  "byline": "Andrey Belyaev",
  "length": 8809,
  "excerpt": "It’s been a while since we announced workspaces for IntelliJ IDEA – a feature that lets you manage multiple projects in a single IDE window – and we’ve received tons of feedback and made a lot of impr",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the IDE for Professional Development in Java and Kotlin News ReleasesIDE Workspaces Development: Challenges and Plans It’s been a while since we announced workspaces for IntelliJ IDEA – a feature that lets you manage multiple projects in a single IDE window – and we’ve received tons of feedback and made a lot of improvements since then. We see this feature as a tool to improve the developer experience by allowing you to: Conveniently arrange multiple projects in a single IDE window so you can work on them without switching contexts. Share pre-defined setups for multiple projects via a workspace definition with the projects’ settings. Save system resources by performing a partial workspace checkout and loading required projects later on. With the new major IntelliJ IDEA release coming soon, you may be wondering whether workspaces will be released as a stable feature or remain in incubation. The answer is that the feature will stay in the preview state for a while longer. We’ve decided not to deliver it as part of version 2025.1. Instead, we’re addressing inconsistencies in IntelliJ IDEA workflows to improve the user experience of workspaces. In this article, you’ll find a detailed explanation of the reasons behind this decision and information about what you can expect with the next plugin update. TL;DR: The workspaces feature is more than just a folder for multiple projects. It is an additional workflow, and it affects a lot of areas in the IDE. Since the IntelliJ Platform was not developed with the concept behind workspaces in mind, we need to make some improvements in order to be able to make the feature really helpful.   Where are the pain points? One of the most important things we were aiming to deliver in IntelliJ IDEA 2025.1 was the ability to share workspaces via VCS, so developers would be able to collaborate using pre-defined workspaces with proper settings, run configurations, etc. However, there were some impediments. First, sharing the full internal state of a workspace is tricky. If you’ve ever opened the .idea folder, you may have seen a lot of .xml files. Those are descriptors for data sources, run configurations, bookmarks, VCS settings, compiler settings, etc. It turned out that these files change asynchronously and inconsistently across different IDE instances. This makes it hard to synchronize via VCS in a single commit. If two developers were to use the same workspace and commit it to a VCS, the next pull could unpredictably break the state of someone else’s workspace. Second, IntelliJ IDEA’s UI workflows were mainly designed for the “one-repository – multi-module project” approach, and some still remain that way. We’re working on pinpointing these specific workflows and bringing them in line with new development workflows. As an example, compare the previous Create New Branch dialog to the new one we introduced for a multi-repository development environment. Unlike the previous version, the new version allows you to select a VCS root for branching. Third, similar to the UI workflows, some core features, like syncing from build tools, are based on assumptions that make them unfit for the multi-project scenario. Fourth, some plugins have been generating code files, performing config searches, etc. in workspaces but not in their “home” projects. This can be irritating, as you might find a file in the wrong place, and it can even break application code. The list is not exhaustive – there are other smaller issues we are working on. We are gradually improving the UI, internal APIs, and UX workflows to make workspaces easy to use and reliable. What are we doing? To make things easier for everyone, we’ve decided to change our approach and simplify state storage for workspaces. Now, a workspace is responsible for storing two things:  The workspace folder structure. Projects’ VCS roots. Everything else, like run configurations, compiler settings, etc., should remain on the project level, where it can be managed locally. Basically, you can share a workspace as a single XML file, which looks like this. \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject version=\"4\"\u003e \u003ccomponent name=\"WorkspaceSettings\"\u003e \u003cproject name=\"docker-infra\" path=\"$PROJECT_DIR$/../docker-infra\"\u003e \u003cvcs id=\"Git\" remoteUrl=\"https://github.com/feature-tracker/docker-infra.git\" /\u003e \u003c/project\u003e \u003cproject name=\"api-gateway\" path=\"$PROJECT_DIR$/../api-gateway\"\u003e \u003cvcs id=\"Git\" remoteUrl=\"https://github.com/feature-tracker/api-gateway.git\" /\u003e \u003c/project\u003e \u003cproject name=\"feature-service\" path=\"$PROJECT_DIR$/../feature-service\"\u003e \u003cvcs id=\"Git\" remoteUrl=\"https://github.com/feature-tracker/feature-service.git\" /\u003e \u003c/project\u003e \u003coption name=\"workspace\" value=\"true\" /\u003e \u003c/component\u003e \u003c/project\u003e This solution allows us to implement a bunch of new features in addition to simplifying workspace sharing via VCS. Partial project checkout Since a workspace is now essentially a list of projects, when a developer checks out, they can select which projects to fetch into the local file system. Other projects will be present in the structure but won’t be downloaded. So, if an organization has a workspace that contains all microservices, a developer can check out only the ones required for their tasks.  Project unload We’ve implemented an action that unloads project source code and made it a first-class citizen in workspaces. Now if you have too many projects in your workspace on disk, you can unload some of them to reduce the workload of IntelliJ IDEA for indexing, resolving references, etc. (allowing you to spend less time waiting). Files on the disk stay intact, so the project can be loaded again if required.  Workspace-wide dependency reference It’s common to update libraries along with the app they are used from. The problem is that you usually need to republish the library to the local repository after every change to be able to use a new version in the application.  With workspaces, we can solve this problem: IntelliJ IDEA resolves dependencies across projects in a workspace and runs the application with updated code, bypassing the “publish to repository” stage.  The “update library code -\u003e publish -\u003e update dependency in app -\u003e run app -\u003e debug” cycle becomes “update library code -\u003e run app -\u003e debug”. It currently works fine for Maven-based projects, and we’re working on making the Gradle experience the same. In order to deploy the app to production or to run it from the command line, you’ll still need to publish the libraries to the repository as usual.  Conclusion Workspaces are evolving and we’re actively developing them. The IntelliJ IDEA codebase is big and has a long history, and the implementation of workspaces affects a lot of workflows. So, we are taking the time to ensure this feature meets the standards expected in IntelliJ IDEA, prioritizing stability and usability. This is the main reason why it will stay in an incubation state for a while.  In the next major plugin update for IntelliJ IDEA 2025.1, we’re planning to deliver: Workspace sharing via VCS and partial checkout. The ability to unload projects from the workspace without removing them from the disk. On-the-fly library updates on app run for Maven-based projects, with Gradle to follow in the future. We hope that these features will improve your development experience and productivity. Thanks for your valuable feedback, comments, issues, and suggestions; they are very much appreciated! Feel free to post your thoughts in the corresponding issue in YouTrack or leave a comment below this blog post.  Happy developing! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/03/ij-social_share_blog_1280x720_en-6.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the IDE for Professional Development in Java and Kotlin\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eIDE Workspaces Development: Challenges and Plans\u003c/h2\u003e                    \n                    \n\u003cp\u003eIt’s been a while since we announced \u003ca href=\"https://blog.jetbrains.com/idea/2024/08/workspaces-in-intellij-idea/\"\u003eworkspaces\u003c/a\u003e for IntelliJ IDEA – a feature that lets you manage multiple projects in a single IDE window – and we’ve received tons of feedback and made a lot of improvements since then. We see this feature as a tool to improve the developer experience by allowing you to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eConveniently arrange multiple projects in a single IDE window so you can work on them without switching contexts.\u003c/li\u003e\n\n\n\n\u003cli\u003eShare pre-defined setups for multiple projects via a workspace definition with the projects’ settings.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave system resources by performing a partial workspace checkout and loading required projects later on.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWith the new major IntelliJ IDEA release coming soon, you may be wondering whether workspaces will be released as a stable feature or remain in incubation. The answer is that the feature will stay in the preview state for a while longer. We’ve decided not to deliver it as part of version 2025.1. Instead, we’re addressing inconsistencies in IntelliJ IDEA workflows to improve the user experience of workspaces. In this article, you’ll find a detailed explanation of the reasons behind this decision and information about what you can expect with the next plugin update.\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e: The workspaces feature is more than just a folder for multiple projects. It is an additional workflow, and it affects a lot of areas in the IDE. Since the IntelliJ Platform was not developed with the concept behind workspaces in mind, we need to make some improvements in order to be able to make the feature really helpful.  \u003c/p\u003e\n\n\n\n\u003ch2\u003eWhere are the pain points?\u003c/h2\u003e\n\n\n\n\u003cp\u003eOne of the most important things we were aiming to deliver in IntelliJ IDEA 2025.1 was the ability to share workspaces via VCS, so developers would be able to collaborate using pre-defined workspaces with proper settings, run configurations, etc. However, there were some impediments.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eFirst\u003c/strong\u003e, sharing the full internal state of a workspace is tricky. If you’ve ever opened the \u003ccode\u003e.idea\u003c/code\u003e folder, you may have seen a lot of \u003cem\u003e.xml\u003c/em\u003e files. Those are descriptors for data sources, run configurations, bookmarks, VCS settings, compiler settings, etc. It turned out that these files change asynchronously and inconsistently across different IDE instances. This makes it hard to synchronize via VCS in a single commit. If two developers were to use the same workspace and commit it to a VCS, the next pull could unpredictably break the state of someone else’s workspace.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSecond\u003c/strong\u003e, IntelliJ IDEA’s UI workflows were mainly designed for the “one-repository – multi-module project” approach, and some still remain that way. We’re working on pinpointing these specific workflows and bringing them in line with new development workflows.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs an example, compare the previous \u003cem\u003eCreate New Branch\u003c/em\u003e dialog to the new one we introduced for a multi-repository development environment. Unlike the previous version, the new version allows you to select a VCS root for branching.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1006\" height=\"268\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/Screenshot-2025-03-25-at-17.47.46.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThird\u003c/strong\u003e, similar to the UI workflows, some core features, like syncing from build tools, are based on assumptions that make them unfit for the multi-project scenario.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eFourth\u003c/strong\u003e, some plugins have been generating code files, performing config searches, etc. in workspaces but not in their “home” projects. This can be irritating, as you might find a file in the wrong place, and it can even break application code.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe list is not exhaustive – there are other smaller issues we are working on. We are gradually improving the UI, internal APIs, and UX workflows to make workspaces easy to use and reliable.\u003c/p\u003e\n\n\n\n\u003ch2\u003eWhat are we doing?\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo make things easier for everyone, we’ve decided to change our approach and simplify state storage for workspaces. Now, a workspace is responsible for storing two things: \u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eThe workspace folder structure.\u003c/li\u003e\n\n\n\n\u003cli\u003eProjects’ VCS roots.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eEverything else, like run configurations, compiler settings, etc., should remain on the project level, where it can be managed locally. Basically, you can share a workspace as a single XML file, which looks like this.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"xml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u0026lt;project version=\u0026#34;4\u0026#34;\u0026gt;\n  \u0026lt;component name=\u0026#34;WorkspaceSettings\u0026#34;\u0026gt;\n    \u0026lt;project name=\u0026#34;docker-infra\u0026#34; path=\u0026#34;$PROJECT_DIR$/../docker-infra\u0026#34;\u0026gt;\n      \u0026lt;vcs id=\u0026#34;Git\u0026#34; remoteUrl=\u0026#34;https://github.com/feature-tracker/docker-infra.git\u0026#34; /\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \u0026lt;project name=\u0026#34;api-gateway\u0026#34; path=\u0026#34;$PROJECT_DIR$/../api-gateway\u0026#34;\u0026gt;\n      \u0026lt;vcs id=\u0026#34;Git\u0026#34; remoteUrl=\u0026#34;https://github.com/feature-tracker/api-gateway.git\u0026#34; /\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \u0026lt;project name=\u0026#34;feature-service\u0026#34; path=\u0026#34;$PROJECT_DIR$/../feature-service\u0026#34;\u0026gt;\n      \u0026lt;vcs id=\u0026#34;Git\u0026#34; remoteUrl=\u0026#34;https://github.com/feature-tracker/feature-service.git\u0026#34; /\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \u0026lt;option name=\u0026#34;workspace\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt;\n  \u0026lt;/component\u0026gt;\n\u0026lt;/project\u0026gt;\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis solution allows us to implement a bunch of new features in addition to simplifying workspace sharing via VCS.\u003c/p\u003e\n\n\n\n\u003ch3\u003ePartial project checkout\u003c/h3\u003e\n\n\n\n\u003cp\u003eSince a workspace is now essentially a list of projects, when a developer checks out, they can select which projects to fetch into the local file system. Other projects will be present in the structure but won’t be downloaded. So, if an organization has a workspace that contains all microservices, a developer can check out only the ones required for their tasks. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/workspaces-checkout.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eProject unload\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe’ve implemented an action that unloads project source code and made it a first-class citizen in workspaces. Now if you have too many projects in your workspace on disk, you can unload some of them to reduce the workload of IntelliJ IDEA for indexing, resolving references, etc. (allowing you to spend less time waiting). Files on the disk stay intact, so the project can be loaded again if required. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/workspaces-unload.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eWorkspace-wide dependency reference\u003c/h3\u003e\n\n\n\n\u003cp\u003eIt’s common to update libraries along with the app they are used from. The problem is that you usually need to republish the library to the local repository after every change to be able to use a new version in the application. \u003c/p\u003e\n\n\n\n\u003cp\u003eWith workspaces, we can solve this problem: IntelliJ IDEA resolves dependencies across projects in a workspace and runs the application with updated code, bypassing the “publish to repository” stage. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe “update library code -\u0026gt; publish -\u0026gt; update dependency in app -\u0026gt; run app -\u0026gt; debug” cycle becomes “update library code -\u0026gt; run app -\u0026gt; debug”. It currently works fine for Maven-based projects, and we’re working on making the Gradle experience the same. In order to deploy the app to production or to run it from the command line, you’ll still need to publish the libraries to the repository as usual. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/idea/lib-resolve-2.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\n\n\n\u003cp\u003eWorkspaces are evolving and we’re actively developing them. The IntelliJ IDEA codebase is big and has a long history, and the implementation of workspaces affects a lot of workflows. So, we are taking the time to ensure this feature meets the standards expected in IntelliJ IDEA, prioritizing stability and usability. This is the main reason why it will stay in an incubation state for a while. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn the next major plugin update for IntelliJ IDEA 2025.1, we’re planning to deliver:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eWorkspace sharing via VCS and partial checkout.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe ability to unload projects from the workspace without removing them from the disk.\u003c/li\u003e\n\n\n\n\u003cli\u003eOn-the-fly library updates on app run for Maven-based projects, with Gradle to follow in the future.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe hope that these features will improve your development experience and productivity. Thanks for your valuable feedback, comments, issues, and suggestions; they are very much appreciated! Feel free to post your thoughts in the \u003ca href=\"https://youtrack.jetbrains.com/issue/IDEA-352824/Workspace-introduce-new-project-type-and-corresponding-UI\" target=\"_blank\" rel=\"noopener\"\u003ecorresponding issue\u003c/a\u003e in YouTrack or leave a comment below this blog post. \u003c/p\u003e\n\n\n\n\u003cp\u003eHappy developing!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
