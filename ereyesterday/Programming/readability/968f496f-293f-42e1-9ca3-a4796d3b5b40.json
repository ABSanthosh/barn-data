{
  "id": "968f496f-293f-42e1-9ca3-a4796d3b5b40",
  "title": "Video: How to run dependency audits with GitHub Copilot",
  "link": "https://github.blog/developer-skills/github/video-how-to-run-dependency-audits-with-github-copilot/",
  "description": "Learn to automate dependency management using GitHub Copilot, GitHub Actions, and Dependabot to eliminate manual checks, improve security, and save time for what really matters. The post Video: How to run dependency audits with GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Andrea Griffiths",
  "published": "Wed, 05 Mar 2025 18:03:54 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Developer skills",
    "GitHub",
    "CI/CD",
    "Dependabot",
    "GitHub Actions",
    "GitHub Copilot",
    "supply chain security"
  ],
  "byline": "Andrea Griffiths",
  "length": 7047,
  "excerpt": "Learn to automate dependency management using GitHub Copilot, GitHub Actions, and Dependabot to eliminate manual checks, improve security, and save time.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Every software project faces the inevitable challenge of dependency management. Over time, dependencies become outdated, leading to security vulnerabilities. Others go unused, needlessly bloating build times. For many development teams, addressing these issues means running manual scripts, reviewing output files, and hoping nothing falls through the cracks. I recently transformed this error-prone manual process into an automated solution using a few tools on GitHub—GitHub Copilot, GitHub Actions, and Dependabot, to be specific (just in case you’re wondering). Here’s how you can do the same! So, let’s jump in (and make sure to watch the video above, too!). The problem with manual dependency audits Most teams start with a simple approach to dependency management. This often includes a Bash script that runs periodically. Here’s what our manual script looks like: #!/bin/bash echo \"Starting manual dependency audit...\" # List all dependencies echo \"Installed dependencies:\" npm list --depth=0 \u003e deps.txt cat deps.txt # Check for outdated ones echo -e \"\\nChecking outdated dependencies...\" npm outdated \u003e outdated.txt cat outdated.txt # Guess at unused ones (very crude) echo -e \"\\nLooking for potentially unused dependencies...\" for dep in $(npm list --depth=0 | grep '├──' | cut -d' ' -f2 | cut -d@ -f1); do if ! find . -type f -name \"*.js\" -o -name \"*.tsx\" -o -name \"*.ts\" | xargs grep -l \"$dep\" \u003e /dev/null 2\u003e\u00261; then echo \"$dep might be unused\" fi done echo \"Done! Check deps.txt and outdated.txt manually. Phew that was a lot of work!\" This approach has several limitations, including: It’s manual, so someone has to remember to run it (and let’s be honest, I often forget to run these in my own codebases). The unused dependency check is crude, and often inaccurate. Results are scattered across multiple output files. It’s not integrated with workflows or CI/CD pipelines. There has to be a better way than this—right? How to simplify dependency audits on GitHub Luckily there is, in fact, a better solution than manual Bash script if you’re working on GitHub—and it starts with using a combination of our AI developer tool, GitHub Copilot, our automation and CI/CD tool. GitHub Actions, and Dependabot, our automated dependency tool. Here’s a step-by-step guide you can use to do this. Step 1: Use GitHub Copilot to create the action Agent mode takes GitHub Copilot from suggesting code to owning tasks, like transforming our bash script into a GitHub Actions workflow. Here is our prompt: “Create a GitHub Action for dependency auditing with depcheck and issue posting. And a separate Dependabot workflow for managing outdated dependencies.” Remember our original bash script? With just a prompt, I shared the context (package.json and our manual script) and asked it to create an action that uses the dependency checker tool depcheck for more accurate detection of unused dependencies. Step 2: GitHub Copilot writes the GitHub Action To implement this GitHub Action, GitHub Copilot creates the new workflow file in .github/workflows/dependency-audit.yml. Here’s the workflow file Copilot helped create: name: Dependency Audit on: schedule: - cron: '0 0 * * 1' # Run weekly on Mondays workflow_dispatch: # Allow manual triggering jobs: audit: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Set up Node.js uses: actions/setup-node@v4 with: node-version: '18' - name: Install dependencies run: npm ci - name: Install depcheck run: npm install -g depcheck - name: Run depcheck for unused dependencies run: depcheck --json \u003e unused-deps.json - name: Run npm audit run: npm audit --json \u003e security-audit.json - name: Generate report run: | echo \"# Dependency Audit Report $(date)\" \u003e report.md echo \"## Unused Dependencies\" \u003e\u003e report.md cat unused-deps.json | jq -r '.dependencies[]' \u003e\u003e report.md echo \"## Security Issues\" \u003e\u003e report.md cat security-audit.json | jq '.metadata.vulnerabilities' \u003e\u003e report.md - name: Create issue if problems found uses: peter-evans/create-issue-from-file@v4 if: ${{ success() }} with: title: Weekly Dependency Audit content-filepath: ./report.md labels: maintenance, dependencies Step 3: Enable Dependabot While our custom action focuses on finding unused dependencies, we can use Dependabot to automatically create pull requests for outdated packages. Dependabot can be configured either via a simple YAML file or automatically by turning it on from your repository settings. Here’s the YAML file that Copilot created: # .github/dependabot.yml version: 2 updates: - package-ecosystem: \"npm\" directory: \"/\" schedule: interval: \"weekly\" open-pull-requests-limit: 10 The result: a fully automated dependency audit With that, our dependency management is now fully automated. Let’s recap how it works: Our custom action uses depcheck to accurately identify unused dependencies. Dependabot creates pull requests for outdated packages, complete with changelogs and risk assessments. Security vulnerabilities are detected and reported weekly. Everything is documented in GitHub Issues for team visibility. This approach not only saves time but also significantly reduces the security risks and performance issues that stem from poorly managed dependencies. By combining the AI capabilities of GitHub Copilot with GitHub Actions and Dependabot, we’ve turned a tedious manual task into an automated, integrated solution that keeps our codebase lean and secure. And I’ll take those time savings to do something more interesting, like unraveling the mystery of those weird goats in the TV show Severance. Or who knows, maybe I’ll finally figure out what macrodata refinement even means in that show (does anyone have any idea yet? Season two is killing me). Try GitHub Copilot free and activate DependabotLearn more about GitHub Copilot for Business or start your free trial of GitHub Enterprise today. Tags: CI/CD Dependabot GitHub Actions GitHub Copilot supply chain security Written by Related posts Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Work at GitHub! Check out our current job openings. Apply now",
  "image": "https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eEvery software project faces the inevitable challenge of dependency management. Over time, dependencies become outdated, leading to security vulnerabilities. Others go unused, needlessly bloating build times. For many development teams, addressing these issues means running manual scripts, reviewing output files, and hoping nothing falls through the cracks.\u003c/p\u003e\n\u003cp\u003eI recently transformed this error-prone manual process into an automated solution using a few tools on GitHub—GitHub Copilot, GitHub Actions, and Dependabot, to be specific (just in case you’re wondering). Here’s how you can do the same!\u003c/p\u003e\n\u003cp\u003eSo, let’s jump in (and make sure to watch the video above, too!).\u003c/p\u003e\n\u003ch2 id=\"the-problem-with-manual-dependency-audits\" id=\"the-problem-with-manual-dependency-audits\"\u003eThe problem with manual dependency audits\u003ca href=\"#the-problem-with-manual-dependency-audits\" aria-label=\"The problem with manual dependency audits\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMost teams start with a simple approach to dependency management. This often includes a Bash script that runs periodically. Here’s what our manual script looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/bin/bash\necho \u0026#34;Starting manual dependency audit...\u0026#34;\n\n# List all dependencies\necho \u0026#34;Installed dependencies:\u0026#34;\nnpm list --depth=0 \u0026gt; deps.txt\ncat deps.txt\n\n# Check for outdated ones\necho -e \u0026#34;\\nChecking outdated dependencies...\u0026#34;\nnpm outdated \u0026gt; outdated.txt\ncat outdated.txt\n\n# Guess at unused ones (very crude)\necho -e \u0026#34;\\nLooking for potentially unused dependencies...\u0026#34;\nfor dep in $(npm list --depth=0 | grep \u0026#39;├──\u0026#39; | cut -d\u0026#39; \u0026#39; -f2 | cut -d@ -f1); do\n    if ! find . -type f -name \u0026#34;*.js\u0026#34; -o -name \u0026#34;*.tsx\u0026#34; -o -name \u0026#34;*.ts\u0026#34; | xargs grep -l \u0026#34;$dep\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then\n        echo \u0026#34;$dep might be unused\u0026#34;\n    fi\ndone\n\necho \u0026#34;Done! Check deps.txt and outdated.txt manually. Phew that was a lot of work!\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis approach has several limitations, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt’s manual, so someone has to remember to run it (and let’s be honest, I often forget to run these in my own codebases).  \u003c/li\u003e\n\u003cli\u003eThe unused dependency check is crude, and often inaccurate.  \u003c/li\u003e\n\u003cli\u003eResults are scattered across multiple output files.  \u003c/li\u003e\n\u003cli\u003eIt’s not integrated with workflows or CI/CD pipelines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere has to be a better way than this—right?\u003c/p\u003e\n\u003ch2 id=\"how-to-simplify-dependency-audits-on-github\" id=\"how-to-simplify-dependency-audits-on-github\"\u003eHow to simplify dependency audits on GitHub\u003ca href=\"#how-to-simplify-dependency-audits-on-github\" aria-label=\"How to simplify dependency audits on GitHub\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLuckily there is, in fact, a better solution than manual Bash script if you’re working on GitHub—and it starts with using a combination of our AI developer tool, GitHub Copilot, our automation and CI/CD tool. GitHub Actions, and Dependabot, our automated dependency tool.\u003c/p\u003e\n\u003cp\u003eHere’s a step-by-step guide you can use to do this.\u003c/p\u003e\n\u003ch3 id=\"step-1-use-github-copilot-to-create-the-action\" id=\"step-1-use-github-copilot-to-create-the-action\"\u003eStep 1: Use GitHub Copilot to create the action\u003ca href=\"#step-1-use-github-copilot-to-create-the-action\" aria-label=\"Step 1: Use GitHub Copilot to create the action\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/news-insights/product-news/github-copilot-the-agent-awakens/\"\u003eAgent mode takes GitHub Copilot from suggesting code to owning tasks\u003c/a\u003e, like transforming our bash script into a GitHub Actions workflow.\u003c/p\u003e\n\u003cp\u003eHere is our prompt:\u003c/p\u003e\n\u003cp\u003e“Create a GitHub Action for dependency auditing with depcheck and issue posting. And a separate Dependabot workflow for managing outdated dependencies.”\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?resize=1024%2C576\" alt=\"A screenshot of VS Code showing a Bash script for manual dependency auditing. The script named \u0026#39;manual-audit.sh\u0026#39; is open in the editor, displaying code that lists dependencies, checks for outdated ones, and identifies potentially unused packages. The script outputs results to deps.txt and outdated.txt files. The left panel shows a file explorer with various project files including JavaScript files and configuration files. On the right side, there\u0026#39;s a prompt to GitHub Copilot  to \u0026#39;Create a GitHub Action for dependency auditing with depcheck and issue posting. And a separate Dependabot workflow for managing outdated dependencies.\u0026#39;\" width=\"1024\" height=\"576\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?w=1600 1600w, https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/03/manual-dependency-auditing.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eRemember our original bash script? With just a prompt, I shared the context (package.json and our manual script) and asked it to create an action that uses the dependency checker tool \u003ca href=\"https://www.npmjs.com/package/depcheck\"\u003edepcheck\u003c/a\u003e for more accurate detection of unused dependencies.\u003c/p\u003e\n\u003ch3 id=\"step-2-github-copilot-writes-the-github-action\" id=\"step-2-github-copilot-writes-the-github-action\"\u003eStep 2: GitHub Copilot writes the GitHub Action\u003ca href=\"#step-2-github-copilot-writes-the-github-action\" aria-label=\"Step 2: GitHub Copilot writes the GitHub Action\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo implement this GitHub Action, GitHub Copilot creates the new workflow file in \u003ccode\u003e.github/workflows/dependency-audit.yml\u003c/code\u003e. Here’s the workflow file Copilot helped create:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ename: Dependency Audit\non:\n  schedule:\n    - cron: \u0026#39;0 0 * * 1\u0026#39;  # Run weekly on Mondays\n  workflow_dispatch:  # Allow manual triggering\n\njobs:\n  audit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: \u0026#39;18\u0026#39;\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Install depcheck\n        run: npm install -g depcheck\n\n      - name: Run depcheck for unused dependencies\n        run: depcheck --json \u0026gt; unused-deps.json\n\n      - name: Run npm audit\n        run: npm audit --json \u0026gt; security-audit.json\n\n      - name: Generate report\n        run: |\n          echo \u0026#34;# Dependency Audit Report $(date)\u0026#34; \u0026gt; report.md\n          echo \u0026#34;## Unused Dependencies\u0026#34; \u0026gt;\u0026gt; report.md\n          cat unused-deps.json | jq -r \u0026#39;.dependencies[]\u0026#39; \u0026gt;\u0026gt; report.md\n          echo \u0026#34;## Security Issues\u0026#34; \u0026gt;\u0026gt; report.md\n          cat security-audit.json | jq \u0026#39;.metadata.vulnerabilities\u0026#39; \u0026gt;\u0026gt; report.md\n\n      - name: Create issue if problems found\n        uses: peter-evans/create-issue-from-file@v4\n        if: ${{ success() }}\n        with:\n          title: Weekly Dependency Audit\n          content-filepath: ./report.md\n          labels: maintenance, dependencies\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step-3-enable-dependabot\" id=\"step-3-enable-dependabot\"\u003eStep 3: Enable Dependabot\u003ca href=\"#step-3-enable-dependabot\" aria-label=\"Step 3: Enable Dependabot\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhile our custom action focuses on finding unused dependencies, we can use Dependabot to automatically create pull requests for outdated packages. Dependabot can be configured either via a simple YAML file \u003ca href=\"https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide#enabling-dependabot-for-your-repository\"\u003eor automatically by turning it on from your repository settings\u003c/a\u003e. Here’s the YAML file that Copilot created:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# .github/dependabot.yml\nversion: 2\nupdates:\n  - package-ecosystem: \u0026#34;npm\u0026#34;\n    directory: \u0026#34;/\u0026#34;\n    schedule:\n      interval: \u0026#34;weekly\u0026#34;\n    open-pull-requests-limit: 10\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"the-result-a-fully-automated-dependency-audit\" id=\"the-result-a-fully-automated-dependency-audit\"\u003eThe result: a fully automated dependency audit\u003ca href=\"#the-result-a-fully-automated-dependency-audit\" aria-label=\"The result: a fully automated dependency audit\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWith that, our dependency management is now fully automated. Let’s recap how it works:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOur custom action uses depcheck to accurately identify unused dependencies.  \u003c/li\u003e\n\u003cli\u003eDependabot creates pull requests for outdated packages, complete with changelogs and risk assessments.  \u003c/li\u003e\n\u003cli\u003eSecurity vulnerabilities are detected and reported weekly.  \u003c/li\u003e\n\u003cli\u003eEverything is documented in GitHub Issues for team visibility.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis approach not only saves time but also significantly reduces the security risks and performance issues that stem from poorly managed dependencies.\u003c/p\u003e\n\u003cp\u003eBy combining the AI capabilities of GitHub Copilot with GitHub Actions and Dependabot, we’ve turned a tedious manual task into an automated, integrated solution that keeps our codebase lean and secure. And I’ll take those time savings to do something more interesting, like unraveling the mystery of those weird goats in the TV show \u003cem\u003eSeverance\u003c/em\u003e. Or who knows, maybe I’ll finally figure out what macrodata refinement even means in that show (does anyone have any idea yet? Season two is killing me).\u003c/p\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTry GitHub Copilot free and activate Dependabot\u003c/strong\u003e\u003cbr/\u003eLearn more about \u003ca href=\"https://gh.io/dependencieswithcopilot\"\u003eGitHub Copilot for Business\u003c/a\u003e or start your free trial of \u003ca href=\"https://gh.io/try-enterprise\"\u003eGitHub Enterprise\u003c/a\u003e today.\u003c/p\u003e\n\u003c/div\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/ci-cd/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tCI/CD\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/dependabot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tDependabot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-actions/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Actions\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/supply-chain-security/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tsupply chain security\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/20666190?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/20666190?v=4\u0026amp;s=200\" alt=\"Andrea Griffiths\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Work at GitHub!\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tWork at GitHub!\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eCheck out our current job openings.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Apply now; ref_location:bottom recirculation;\" href=\"https://www.github.careers/careers-home\" target=\"_blank\" aria-label=\"Apply now\"\u003e\n\t\t\t\t\tApply now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-03-05T18:03:54Z",
  "modifiedTime": null
}
