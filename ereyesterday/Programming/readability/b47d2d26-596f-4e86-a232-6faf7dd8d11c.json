{
  "id": "b47d2d26-596f-4e86-a232-6faf7dd8d11c",
  "title": "Tutorial: How to set up your first GitLab CI/CD component",
  "link": "https://about.gitlab.com/blog/2024/11/12/tutorial-how-to-set-up-your-first-gitlab-ci-cd-component",
  "description": "",
  "author": "Noah Ing",
  "published": "2024-11-12T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Noah Ing, Sophia Manicor",
  "length": 5838,
  "excerpt": "Use Python scripts in your GitLab CI/CD pipelines to improve usability. In this step-by-step guide, you'll learn how to get started building your own CI/CD component.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Do you use Python scripts in your GitLab CI pipelines? Do you want to create pipelines at scale? This tutorial shows how to set up your first GitLab CI/CD component to deploy Python scripts. A CI/CD component is a reusable single pipeline configuration unit. Use components to create a small part of a larger pipeline, or even to compose a complete pipeline configuration. Prerequisites Basic Python knowledge Working knowledge of GitLab CI 8 minutes Python script The demo Python script This Python script utilizes a library called ArgParse . ArgParse allows you to pass variables to script through the command line. This script takes in three arguments: Python_container_image: This is the Python container image you wish to use. Stage: This is the GitLab CI stage in which you job will run in. Name: This is your name. import argparse parser = argparse.ArgumentParser(description='Python CICD Component Boilerplate') parser.add_argument('python_container_image', type=str, help='python:3.10-slim') parser.add_argument('stage', type=str, help='Build') parser.add_argument('persons_name', type=str, help='Noah') args = parser.parse_args() python_container_image = args.python_container_image stage = args.stage persons_name = args.persons_name This will take in these three variables and print out simple statements: print(\"You have chosen \" + python_container_image + \" as the container image\") print(\"You have chosen \" + stage + \" as the stage to run this job\") print(\"Thank you \" + persons_name + \"! you are succesfully using GitLab CI with a Python script.\") To test this script locally, you can call on the script by utilizing the following command: python3 src/script.py python_container_image stage name Modify this script accordingly if you’d like to add in your own arguments! Template Demo of template Note: As long as the gitlab-ci.yml is placed in the templates/directory, the CI/CD component will know to pick it up. We named our template templates.yml, but any name would work for this YAML file. Now, getting into the fun part of CI/CD components, inputs! Inputs allow you to pass through variables into your pipeline. spec: inputs: python_container_image: default: python:3.10-slim description: \"Define any python container image\" stage: default: build description: \"Define the stage this job will run in\" persons_name: default: Noah description: \"Put your name here\" Here we have defined the three inputs that are our arguments in our Python script. You can see for each input we have added in a default value – this will be what the input is set to if not overridden. If we took out this default keyword the input would become mandatory when we use our component. As it is written now, adding in these inputs when we use our component is optional due to our default values. We can also set descriptions to ensure that other developers can understand what to input when they use our component. Descriptions are optional but they provide self documentation within the code itself, which is always nice. After we set up our inputs, let’s write the rest of our component: component: image: $[[ inputs.python_container_image ]] stage: $[[ inputs.stage ]] before_script: - pip3 install -r src/requirements.txt script: python3 src/script.py $[[ inputs.python_container_image ]] $[[ inputs.stage ]] $[[ inputs.persons_name ]] To use inputs in our component, we need to use the syntax $[[ inputs.$VARIABLE ]]. In the above code, you can see that we use inputs to define our image and stage with $[[ inputs.python_container_image ]] and $[[ inputs.stage ]]. script: python3 src/script.py $[[ inputs.python_container_image ]] $[[ inputs.stage ]] $[[ inputs.persons_name ]] Diving into the script section, you can see we call upon our Python script.. We are able to pass our inputs in with the help of the ArgParse. Now that you have reviewed how the Python script works and the template has been set up, it is time to use the component! Using the component **A demo of including the component In order to utilize the CI/CD component we just created, we need to include it in the .gitlab-ci.yml file that is in the root of our directory. include: # include the component located in the current project from the current SHA - component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/template@$CI_COMMIT_SHA inputs: python_container_image: python:3.11-slim stage: test persons_name: Tanuki One way to include it is to call upon it locally in the current project from the current Commit SHA. You can find other ways to reference a component in our documentation. To override the defaults, we have passed in other inputs so we get the correct image, stage, and name for our job. Try and change the persons_names to your own and watch the pipeline run! Voila! You have learned how to set up a basic C/ICD component utilizing a Python ArgParse script! What's next? In the Python script, there is a commented out GitLab Python library and OS library. If you would like to interact with the GitLab API, you can uncomment these and add in a GitLab personal access token to the CI/CD variables named GLPAT. import gitlab import os Afterwards you can then interact with the GitLab API. glpat = os.environ['GLPAT'] gl = gitlab.Gitlab(private_token=glpat) # SELF_HOSTED gl = gitlab.Gitlab(url='https://gitlab.example.com', private_token='xxxxxxxxxxxxxx') try: projects = gl.projects.list(get_all=True) print(projects) except Exception as error: print(\"Error:\", error) Learn more about CI/CD components and how to avoid building pipelines from scratch with the GitLab CI/CD Catalog. Read more FAQ: GitLab CI/CD Catalog Introducing CI/CD Steps, a programming language for DevSecOps automation A CI/CD component builder's journey",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/3lH4gZFVIGCndksN6Rlg85/a6b99b2d87dc52678ba976e7b3360555/blog-image-template-1800x945__26_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-af247218=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eDo you use Python scripts in your GitLab CI pipelines? Do you want to create pipelines at scale? This tutorial shows how to set up your first \u003ca href=\"https://docs.gitlab.com/ee/ci/components/\"\u003eGitLab CI/CD component\u003c/a\u003e to deploy Python scripts.\u003c/p\u003e\n\u003cp\u003eA \u003ca href=\"https://about.gitlab.com/blog/2023/07/10/introducing-ci-components/\"\u003eCI/CD component is a reusable single pipeline configuration unit\u003c/a\u003e. Use components to create a small part of a larger pipeline, or even to compose a complete pipeline configuration.\u003c/p\u003e\n\u003ch2 id=\"prerequisites\" tabindex=\"-1\"\u003ePrerequisites \u003ca href=\"#prerequisites\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBasic Python knowledge\u003c/li\u003e\n\u003cli\u003eWorking knowledge of GitLab CI\u003c/li\u003e\n\u003cli\u003e8 minutes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"python-script\" tabindex=\"-1\"\u003ePython script \u003ca href=\"#python-script\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://gitlab.com/demos/templates/gitlab-python-cicd-component/-/blob/main/src/script.py?ref_type=heads\"\u003eThe demo Python script\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis Python script utilizes a library called \u003ca href=\"https://docs.python.org/3/library/argparse.html\"\u003eArgParse\u003c/a\u003e . ArgParse allows you to pass variables to script through the command line. This script takes in three arguments:\n\u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/#image\"\u003ePython_container_image\u003c/a\u003e: This is the Python container image you wish to use.\n\u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/#stage\"\u003eStage\u003c/a\u003e: This is the GitLab CI stage in which you job will run in.\nName: This is your name.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport argparse\n\nparser = argparse.ArgumentParser(description=\u0026#39;Python CICD Component Boilerplate\u0026#39;)\nparser.add_argument(\u0026#39;python_container_image\u0026#39;, type=str, help=\u0026#39;python:3.10-slim\u0026#39;)\nparser.add_argument(\u0026#39;stage\u0026#39;, type=str, help=\u0026#39;Build\u0026#39;)\nparser.add_argument(\u0026#39;persons_name\u0026#39;, type=str, help=\u0026#39;Noah\u0026#39;)\nargs = parser.parse_args()\n\npython_container_image = args.python_container_image\nstage = args.stage\npersons_name = args.persons_name\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will take in these three variables and print out simple statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eprint(\u0026#34;You have chosen \u0026#34; + python_container_image + \u0026#34; as the container image\u0026#34;)\nprint(\u0026#34;You have chosen \u0026#34; + stage + \u0026#34; as the stage to run this job\u0026#34;)\nprint(\u0026#34;Thank you \u0026#34; + persons_name + \u0026#34;! you are succesfully using GitLab CI with a Python script.\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo test this script locally, you can call on the script by utilizing the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython3 src/script.py python_container_image stage name\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eModify this script accordingly if you’d like to add in your own arguments!\u003c/p\u003e\n\u003ch2 id=\"template\" tabindex=\"-1\"\u003eTemplate \u003ca href=\"#template\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://gitlab.com/demos/templates/gitlab-python-cicd-component/-/blob/main/templates/template.yml?ref_type=heads\"\u003eDemo of template\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e As long as the \u003ccode\u003egitlab-ci.yml\u003c/code\u003e is placed in the templates/directory, the CI/CD component will know to pick it up. We named our template \u003ccode\u003etemplates.yml\u003c/code\u003e, but any name would work for this YAML file.\u003c/p\u003e\n\u003cp\u003eNow, getting into the fun part of CI/CD components, inputs!  \u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/inputs.html\"\u003eInputs\u003c/a\u003e allow you to pass through variables into your pipeline.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003espec:\n  inputs:\n    python_container_image:\n      default: python:3.10-slim\n      description: \u0026#34;Define any python container image\u0026#34;\n    stage:\n      default: build\n      description: \u0026#34;Define the stage this job will run in\u0026#34;\n    persons_name:\n      default: Noah\n      description: \u0026#34;Put your name here\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we have defined the three inputs that are our arguments in our Python script. You can see for each input we have added in a default value – this will be what the input is set to if not overridden. If we took out this default keyword the input would become mandatory when we use our component. As it is written now, adding in these inputs when we use our component is optional due to our default values.\u003c/p\u003e\n\u003cp\u003eWe can also set descriptions to ensure that other developers can understand what to input when they use our component. Descriptions are optional but they provide self documentation within the code itself, which is always nice.\u003c/p\u003e\n\u003cp\u003eAfter we set up our inputs, let’s write the rest of our component:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomponent:\n  image: $[[ inputs.python_container_image ]]\n  stage: $[[ inputs.stage ]]\n  before_script:\n    - pip3 install -r src/requirements.txt\n  script: python3 src/script.py $[[ inputs.python_container_image ]] $[[ inputs.stage ]] $[[ inputs.persons_name ]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo use inputs in our component, we need to use the syntax \u003ccode\u003e$[[ inputs.$VARIABLE ]]\u003c/code\u003e. In the above code, you can see that we use inputs to define our image and stage with  \u003ccode\u003e$[[ inputs.python_container_image ]]\u003c/code\u003e and   \u003ccode\u003e$[[ inputs.stage ]]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003escript: python3 src/script.py $[[ inputs.python_container_image ]] $[[ inputs.stage ]] $[[ inputs.persons_name ]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDiving into the script section, you can see we call upon our Python script.. We are able to pass our inputs in with the help of the ArgParse.\u003c/p\u003e\n\u003cp\u003eNow that you have reviewed how the Python script works and the template has been set up, it is time to use the component!\u003c/p\u003e\n\u003ch2 id=\"using-the-component\" tabindex=\"-1\"\u003eUsing the component \u003ca href=\"#using-the-component\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e**\u003ca href=\"https://gitlab.com/demos/templates/gitlab-python-cicd-component/-/blob/main/.gitlab-ci.yml?ref_type=heads\"\u003eA demo of including the component\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn order to utilize the CI/CD component we just created, we need to include it in the \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file that is in the root of our directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einclude:\n  # include the component located in the current project from the current SHA\n  - component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/template@$CI_COMMIT_SHA\n    inputs:\n      python_container_image: python:3.11-slim\n      stage: test\n      persons_name: Tanuki\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOne way to include it is to call upon it locally in the current project from the current \u003ccode\u003eCommit SHA\u003c/code\u003e. You can find other ways to \u003ca href=\"https://docs.gitlab.com/ee/ci/components/#use-a-component\"\u003ereference a component in our documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo override the defaults, we have passed in other inputs so we get the correct image, stage, and name for our job.\u003c/p\u003e\n\u003cp\u003eTry and change the \u003ccode\u003epersons_names\u003c/code\u003e to your own and watch the pipeline run!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1DFkV07STdqkREFL3rJlai/376cb83733afc7a23e38331d70fed7f1/image1.png\" alt=\"ci/cd component tutorial - pipeline running\"/\u003e\u003c/p\u003e\n\u003cp\u003eVoila! You have learned how to set up a basic C/ICD component utilizing a Python ArgParse script!\u003c/p\u003e\n\u003ch2 id=\"what\u0026#39;s-next%3F\" tabindex=\"-1\"\u003eWhat\u0026#39;s next? \u003ca href=\"#what\u0026#39;s-next%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn the Python script, there is a commented out GitLab Python library and OS library. If you would like to interact with the GitLab API, you can uncomment these and add in a \u003ca href=\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\"\u003eGitLab personal access token\u003c/a\u003e to the \u003ca href=\"https://docs.gitlab.com/ee/ci/variables/\"\u003eCI/CD variables\u003c/a\u003e named \u003ccode\u003eGLPAT\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport gitlab\nimport os\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfterwards you can then interact with the GitLab API.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eglpat = os.environ[\u0026#39;GLPAT\u0026#39;]\n\ngl = gitlab.Gitlab(private_token=glpat)\n# SELF_HOSTED gl = gitlab.Gitlab(url=\u0026#39;https://gitlab.example.com\u0026#39;, private_token=\u0026#39;xxxxxxxxxxxxxx\u0026#39;)\ntry:\n   projects = gl.projects.list(get_all=True)\n   print(projects)\nexcept Exception as error:\n   print(\u0026#34;Error:\u0026#34;, error)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eLearn more about CI/CD components and how to avoid building pipelines from scratch with the \u003ca href=\"https://about.gitlab.com/blog/2024/05/08/ci-cd-catalog-goes-ga-no-more-building-pipelines-from-scratch/\"\u003eGitLab CI/CD Catalog\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"read-more\" tabindex=\"-1\"\u003eRead more \u003ca href=\"#read-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/08/01/faq-gitlab-ci-cd-catalog/\"\u003eFAQ: GitLab CI/CD Catalog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/08/06/introducing-ci-cd-steps-a-programming-language-for-devsecops-automation/\"\u003eIntroducing CI/CD Steps, a programming language for DevSecOps automation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/06/04/a-ci-component-builders-journey/\"\u003eA CI/CD component builder\u0026#39;s journey\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-11-12T00:00:00Z",
  "modifiedTime": null
}
