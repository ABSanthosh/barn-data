{
  "id": "6944f8ad-09f7-45f5-ae68-bfc2ddc2ce87",
  "title": "Learnings from Working with Programming Rules and Guidelines",
  "link": "https://www.infoq.com/news/2025/03/learnings-programming-rules/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Programming rules and guidelines improve code consistency, but misapplication can lead to poor results. Arne Mertz suggests that software developers selectively adopt rules and guidelines, and document deviations with clear explanations. They can discuss their experiences in communities or during their daily work, to foster collaboration and improve code quality without unnecessary bureaucracy. By Ben Linders",
  "author": "Ben Linders",
  "published": "Thu, 13 Mar 2025 11:56:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Code Quality",
    "Agile Conferences",
    "Collaboration",
    "Checklists and Guides",
    "Coding Standards",
    "C++",
    "Development",
    "Culture \u0026 Methods",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Ben Linders",
  "length": 4488,
  "excerpt": "Programming rules and guidelines improve code consistency, but misapplication can lead to poor results. Arne Mertz suggests that software developers selectively adopt rules and guidelines, and documen",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250306064810/apple-touch-icon.png",
  "text": "Programming rules and guidelines improve code consistency, but misapplication can lead to poor results. Arne Mertz suggests that software developers selectively adopt rules and guidelines, and document deviations with clear explanations. They can discuss their experiences in communities or during their daily work, to foster collaboration and improve code quality without unnecessary bureaucracy. Arne Mertz gave a talk about programming rules and guidelines at NDC Tech Town. Programming rules and guidelines help developers work together, which can result in more consistent and better code. However, using them the wrong way can have the opposite result - code that is cumbersome to read or solves problems in suboptimal or even wrong ways, as Mertz explained in the InfoQ article how to use programming rules and guidelines. As an example, Mertz mentioned the C++ Core Guideline don’t make data members const or references in a copyable or movable type. The second part gets omitted quite often but is important, as he explained: A const member can not be reassigned, a reference member can not be directed to refer to something else, so a type with this kind of member can not be assigned to normally. The compiler will not be able to generate move and copy assignment operators for these types. Therefore, these members should not be used in types that are designed to have value semantics. While these types usually make up a large part of an application’s types, there are others that do not have value semantics, Mertz said. He mentioned application services and repositories as examples. For these latter types, it is perfectly acceptable and normal to have reference members, Mertz said. Mertz suggested thinking about which guidelines to adopt, and how to document them. A 50-page Word document tucked away in some SharePoint page is rarely read, he mentioned. Developers will not know and therefore ignore most of the guidelines in there. Many guidelines can be checked automatically, e.g. using clang tidy, but then we need a way to turn warnings off in specific cases, because, after all, guidelines are not rules, Mertz said. Mertz mentioned that they have an active C++ community in their company where they exchange their experiences in different projects. More experienced developers support their colleagues by answering questions and giving advice, he explained: We have a C++ example project with a typical clang-tidy file to provide some sensible defaults for automatic checks of the C++ Core Guidelines and more. Mertz mentioned they sometimes discuss the customer’s guideline document in their weekly developer sync. But they also come up with their own, more specific guidelines when they find they need them: The process is pragmatic and not too formal, but we found that over time that leads to more consistent and higher quality code without the overhead of bureaucracy. Part of these meetings could be seen as a \"technical retrospective\" where they discuss what works best for them and how to avoid pitfalls that they came across in their specific code base, Mertz concluded. InfoQ interviewed Arne Mertz about coding rules and guidelines. InfoQ: How do rules and guidelines differ from each other? Arne Mertz: A rule is more or less absolute, it has to be followed wherever it applies. A guideline is a best practice or sensible default, people may diverge and that’s OK. Since guidelines are not rules, I suggest documenting when you deliberately do not follow a guideline, e.g. with a comment explaining the reasons. Rules are convenient - we, or our automatic tools, can just point to them and say \"wrong\", and we have to fix our code. Guidelines give more freedom, but also more responsibility - we cannot simply follow them on auto pilot. Yet, they are an important tool. InfoQ: What benefits can software development teams get from using guidelines? Mertz: When a team follows common guidelines, we know what to expect from code. The \"Principle of Least Surprise\" is an important design principle that makes code easier to read and understand. Even as a reader of code, knowing the guidelines it follows is useful: if a reader is familiar with coding guidelines and writing conventions in general, it is easier to spot unconventional code that might need a closer look. About the Author Ben Linders",
  "image": "https://res.infoq.com/news/2025/03/learnings-programming-rules/en/headerimage/generatedHeaderImage-1739955861658.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eProgramming rules and guidelines improve code consistency, but misapplication can lead to poor results. Arne Mertz suggests that software developers selectively adopt rules and guidelines, and document deviations with clear explanations. They can discuss their experiences in communities or during their daily work, to foster collaboration and improve code quality without unnecessary bureaucracy.\u003c/p\u003e\n\n\u003cp\u003eArne Mertz gave a talk about programming rules and guidelines at \u003ca href=\"https://ndctechtown.com/\"\u003eNDC Tech Town\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eProgramming rules and guidelines help developers work together, which can result in more consistent and better code. However, using them the wrong way can have the opposite result - code that is cumbersome to read or solves problems in suboptimal or even wrong ways, as Mertz explained in the InfoQ article \u003ca href=\"https://www.infoq.com/news/2024/11/programming-rules-guidelines/\"\u003ehow to use programming rules and guidelines\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs an example, Mertz mentioned the C++ Core Guideline \u003ca href=\"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-constref\"\u003edon’t make data members const or references in a copyable or movable type\u003c/a\u003e. The second part gets omitted quite often but is important, as he explained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA const member can not be reassigned, a reference member can not be directed to refer to something else, so a type with this kind of member can not be assigned to normally. The compiler will not be able to generate move and copy assignment operators for these types. Therefore, these members should not be used in types that are designed to have value semantics.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile these types usually make up a large part of an application’s types, there are others that do not have value semantics, Mertz said. He mentioned application services and repositories as examples. For these latter types, it is perfectly acceptable and normal to have reference members, Mertz said.\u003c/p\u003e\n\n\u003cp\u003eMertz suggested thinking about which guidelines to adopt, and how to document them. A 50-page Word document tucked away in some SharePoint page is rarely read, he mentioned. Developers will not know and therefore ignore most of the guidelines in there.\u003c/p\u003e\n\n\u003cp\u003eMany guidelines can be checked automatically, e.g. using \u003ca href=\"https://clang.llvm.org/extra/clang-tidy/\"\u003eclang tidy\u003c/a\u003e, but then we need a way to turn warnings off in specific cases, because, after all, guidelines are not rules, Mertz said.\u003c/p\u003e\n\n\u003cp\u003eMertz mentioned that they have an active C++ community in their company where they exchange their experiences in different projects. More experienced developers support their colleagues by answering questions and giving advice, he explained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe have a C++ example project with a typical clang-tidy file to provide some sensible defaults for automatic checks of the C++ Core Guidelines and more.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMertz mentioned they sometimes discuss the customer’s guideline document in their weekly developer sync. But they also come up with their own, more specific guidelines when they find they need them:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe process is pragmatic and not too formal, but we found that over time that leads to more consistent and higher quality code without the overhead of bureaucracy.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003ePart of these meetings could be seen as a \u0026#34;technical retrospective\u0026#34; where they discuss what works best for them and how to avoid pitfalls that they came across in their specific code base, Mertz concluded.\u003c/p\u003e\n\n\u003cp\u003eInfoQ interviewed \u003ca href=\"https://www.linkedin.com/in/arne-mertz/\"\u003eArne Mertz\u003c/a\u003e about coding rules and guidelines.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How do rules and guidelines differ from each other?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eArne Mertz\u003c/strong\u003e: A rule is more or less absolute, it has to be followed wherever it applies. A guideline is a best practice or sensible default, people may diverge and that’s OK. Since guidelines are not rules, I suggest documenting when you deliberately do not follow a guideline, e.g. with a comment explaining the reasons.\u003c/p\u003e\n\n\u003cp\u003eRules are convenient - we, or our automatic tools, can just point to them and say \u0026#34;wrong\u0026#34;, and we have to fix our code. Guidelines give more freedom, but also more responsibility - we cannot simply follow them on auto pilot. Yet, they are an important tool.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: What benefits can software development teams get from using guidelines?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMertz\u003c/strong\u003e: When a team follows common guidelines, we know what to expect from code. The \u0026#34;\u003ca href=\"https://en.wikipedia.org/wiki/Principle_of_least_astonishment\"\u003ePrinciple of Least Surprise\u003c/a\u003e\u0026#34; is an important design principle that makes code easier to read and understand.\u003c/p\u003e\n\n\u003cp\u003eEven as a reader of code, knowing the guidelines it follows is useful: if a reader is familiar with coding guidelines and writing conventions in general, it is easier to spot unconventional code that might need a closer look.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Ben-Linders\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBen Linders\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-03-13T00:00:00Z",
  "modifiedTime": null
}
