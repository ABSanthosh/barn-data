{
  "id": "ca201fcb-4266-44f7-9907-f4237cb05eb8",
  "title": "Apigee announces general availability of APIM Extension Processor",
  "link": "https://developers.googleblog.com/en/apigee-announces-general-availability-of-apim-extension-processor/",
  "description": "The Apigee Extension Processor enhances Apigee's capabilities by enabling it to manage gRPC streaming and integrate with Google Cloud services through Cloud Load Balancing, allowing for applying Apigee policies to a wider range of backend services, and improving secure access to Google Cloud infrastructure.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Ishita Saxena, Sanjay Pujare",
  "length": 12308,
  "excerpt": "The Apigee Extension Processor enhances Apigee's capabilities by enabling it to manage gRPC streaming and integrate with Google Cloud services through Cloud Load Balancing, allowing for applying Apigee policies to a wider range of backend services, and improving secure access to Google Cloud infrastructure.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "We are excited to announce the General Availability (GA) of the Apigee Extension Processor (version 1.0)! This powerful new capability significantly expands the reach and flexibility of Apigee, making it easier than ever to manage and secure a wider range of backend services and modern application architectures.For developers embracing modern deployment models, the Extension Processor offers seamless integration with Cloud Run, allowing you to apply Apigee policies to your scalable containerized applications.The Extension Processor also unlocks powerful new communication patterns. Now you can easily manage advanced real-time interactions with gRPC bidirectional streaming, enabling highly interactive and low-latency applications. Furthermore, for event-driven architectures, the Extension Processor provides a pathway to manage and secure Server-Sent Events (SSE), facilitating efficient data streaming to clients.But the benefits extend beyond application deployment and communication protocols. The Apigee Extension Processor, coupled with Google Token Injection policies, dramatically simplifies secure access to your Google Cloud infrastructure. You can seamlessly connect and control access to powerful data services like Bigtable, and leverage the intelligence of Vertex AI for your machine learning workloads, all while maintaining Apigee's consistent security framework.Finally, by integrating with the intelligent traffic management capabilities of Google's Cloud Load Balancing, the Extension Processor offers unparalleled flexibility in routing and managing diverse traffic flows. This powerful combination opens up countless possibilities for managing even the most complex API landscapes.This blog outlines a powerful solution to a key challenge in today's landscape of high-performance and real-time applications: managing gRPC streaming within Apigee. While gRPC is a cornerstone of efficient microservices, its streaming nature presents a challenge for organizations leveraging Google Cloud's Apigee as an inline proxy (traditional mode). We'll explore how the Apigee Extension Processor enables Apigee's data plane to enforce policies on gRPC streaming traffic as it passes through the Application Load Balancer (ALB). This is achieved via a Service Extension (traffic extension), allowing for effective management and routing without the gRPC stream directly traversing the Apigee gateway.Read along as we delve into the core elements of this solution, highlighting its benefits and providing a high-level overview of a real-world use case involving a Cloud Run backend.Understanding the Apigee Extension ProcessorThe Apigee Extension Processor is a powerful traffic extension (a type of service extension) that enables you to leverage Cloud Load Balancing to send callouts to Apigee as part of its API management. This enables Apigee to apply API management policies to requests before the ALB forwards them to user-managed backend services, effectively extending Apigee's robust API management capabilities to workloads fronted by Cloud Load Balancing.Infrastructure and Data FlowThe diagram outlines the required components of the Apigee Extension Processor configuration:The Apigee Extension Processor configuration involves several key components. These include an ALB, an Apigee instance with the Extension Processor enabled, a Service Extension. For a detailed description of these components, please refer to the Apigee Extension Processor overview. The following numbered steps correspond to the numbered arrows in the flow diagram, illustrating the sequence of events:1: The client sends a request to the ALB2: The ALB acting as the Policy Enforcement Point (PEP), processes the traffic . As part of this processing, it calls out to Apigee via the configured Service Extension (traffic extension).3: The Apigee Extension Processor, acting as the Policy Decision Point (PDP), receives the callout, applies the relevant API management policies to the request, and returns the processed request to the ALB (PEP).4: The ALB completes processing and forwards the request to the backend service.The backend service initiates the response, which is received by the ALB. The ALB may call out to Apigee again via the Service Extension to enforce policies on the response before forwarding it to the client.Bridging the gap: Enabling gRPC streaming pass-throughMany modern applications require and use the power of streaming gRPC, but Apigee - used as an inline proxy - does not currently support streaming. This is where the Apigee Extension Processor becomes invaluable - by allowing the ALB to process the streaming gRPC traffic and act as the PEP (policy enforcement point) while the Apigee runtime acts as the PDP (policy decision point).Main elements needed to enable gRPC streaming pass-through with ApigeeTo enable gRPC streaming pass-through using the Apigee Extension Processor, the following key elements are required. For detailed configuration instructions, please refer to Get started with the Apigee Extension Processor.gRPC streaming backend service: A gRPC service implementing the necessary streaming capabilities (server, client, or bidirectional).Application Load Balancer (ALB): The entry point for client requests, configured to route traffic and call the Apigee Service Extension.Apigee Instance with Extension Processor enabled:An Apigee instance and environment configured with the Extension Processor feature uses a targetless API proxy for ext-proc processing of traffic from the Service Extension.Service Extension configuration: A traffic extension (a type of Service Extension) acting as the bridge between the ALB and Apigee runtime (ideally using Private Service Connect (PSC)).Network connectivity: Proper network setup allowing communication between all components (client to ALB, ALB to Apigee, ALB to backend).Use Case: Securing and managing gRPC streaming services on Cloud Run with ApigeeConsider a scenario where a customer develops a high-performance backend service with gRPC streaming capabilities, such as providing real-time application logs. For scalability and ease of management, this backend application is deployed on Google Cloud Run within their primary Google Cloud project. Now, the customer wants to expose this gRPC streaming service to their clients through a well-managed and secure API gateway. They choose Apigee for this purpose, leveraging its robust API management features like authentication, authorization, rate limiting and other policies.The ChallengeAs mentioned earlier, Apigee doesn't natively support gRPC streaming when used in the inline proxy mode. Direct exposure of the Cloud Run gRPC service through standard Apigee configurations would not support any of the streaming use-cases: client, server or bi-di streaming.SolutionThe Apigee Extension Processor provides the necessary bridge to manage gRPC streaming traffic destined for a backend application deployed on Cloud Run within the same Google Cloud project.Here's a simplified flow:1: Client initiationThe client application initiates a gRPC streaming request.This request is directed towards the public IP address or DNS name of the ALB that serves as the entry point.2: Application Load Balancer processing and Service Extension calloutThe ALB receives the incoming gRPC streaming request.The ALB is configured with a backend service that uses a serverless Network Endpoint Group (NEG) pointing to the backend on Cloud Run.The ALB is also configured with a Service Extension (Traffic extension) that has a specific Apigee runtime backend configured.The ALB first calls out to this Service Extension for relevant traffic.3: Apigee proxy processingThe gRPC request is forwarded to the designated Apigee API proxy via the Service Extension.Within this Apigee X proxy, various API management policies are executed. This can include authentication, authorization, and rate limiting.Note: The Apigee proxy in this scenario is a no-target proxy, that is, it doesnâ€™t have a Target Endpoint configured.It relies on the ALB for final routing.4: Return to ALBAs the Apigee proxy has no target, after policy processing, control returns to the ALB via the Service Extension response.5: Routing to Backend in Cloud Run by Load BalancerThe ALB, based on its backend service configuration, forwards the gRPC streaming request to the appropriate backend service which is mapped to the serverless NEG where Cloud Run service resides.The ALB handles the underlying routing to the Cloud Run instance.6: Response handlingResponse handling follows a similar pattern to the request flow. The backend initiates the response, which is then handled by the ALB. The ALB may call out to Apigee via the Service Extension (traffic extension) for policy enforcement before forwarding the response to the client.This simplified use case demonstrates how the Apigee Extension Processor can be used to apply API management policies to gRPC streaming traffic destined for an application deployed on Cloud Run within the same Google Cloud project. The ALB primarily handles the routing to the Cloud Run service based on its NEG configuration.Benefits of Leveraging the Apigee Extension Processor for gRPC StreamingUtilizing the Apigee Extension Processor to manage gRPC streaming services on backend offers several key advantages, extending Apigee's core strengths to this new application of the platform:Extending Apigee's reachThis approach successfully extends Apigee's robust API management capabilities to gRPC streaming, a streaming communication pattern not natively supported by the Apigee platform's core proxy.Leveraging existing investmentsFor organizations already using Apigee for their RESTful APIs, this solution enables them to manage their gRPC streaming services within Apigee. While requiring the use of the Extension Processor, it leverages familiar API management concepts and reduces the need for separate tools.Centralized policy managementApigee provides a centralized platform for defining and enforcing API management policies. By integrating gRPC streaming through the Extension Processor, you can maintain consistent governance and security across all your API endpoints.Monetization potentialIf you are exposing gRPC streaming services as a product, Apigee's Monetization features can be leveraged. You can generate revenue whenever your gRPC streaming APIs are used by adding rate plans to customized API products you create within Apigee.Improved observability and traceabilityWhile detailed gRPC protocol-level analytics might be limited in a pass-through scenario, Apigee still provides valuable insights into the traffic flowing to your streaming services, including connection attempts, error rates, and overall usage patterns. This observability is crucial for monitoring and troubleshooting.Apigee's distributed tracing systems can help you track requests in distributed systems that involve your gRPC streaming services, providing end-to-end visibility across multiple applications, services, and databases.Business intelligenceApigee API Analytics collects the wealth of information flowing through your load balancer, providing data visualization in the UI or the ability to download data for offline analysis. This data can be invaluable for understanding usage patterns, identifying performance bottlenecks, and making informed business decisions.By considering these benefits, it becomes clear that the Apigee Extension Processor offers a valuable and practical way to bring essential API management capabilities to gRPC streaming services on Google Cloud.Looking AheadThe Apigee Extension Processor represents a significant step forward in extending Apigee's capabilities. We envision a future where any gateway, anywhere can leverage the power of Apigee's policy enforcement capability. This will involve harnessing the ext-proc protocol and integrating with various Envoy-based load balancers and gateways, enabling them to act as Policy Enforcement Points (PEPs) with the Apigee runtime serving as the Policy Decision Point (PDP). This evolution will further empower organizations to consistently manage and secure their digital assets in increasingly distributed and heterogeneous environments.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Apigee-API-Hub-Feature_1.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"7bvem\"\u003eWe are excited to announce the \u003ca href=\"https://cloud.google.com/apigee/docs/api-platform/service-extensions/extension-processor-overview\"\u003eGeneral Availability (GA) of the Apigee Extension Processor\u003c/a\u003e (version 1.0)! This powerful new capability significantly expands the reach and flexibility of Apigee, making it easier than ever to manage and secure a wider range of backend services and modern application architectures.\u003c/p\u003e\u003cp data-block-key=\"9uln2\"\u003eFor developers embracing modern deployment models, the Extension Processor offers seamless integration with \u003ca href=\"https://cloud.google.com/run/docs/overview/what-is-cloud-run\"\u003e\u003cb\u003eCloud Run\u003c/b\u003e\u003c/a\u003e, allowing you to apply Apigee policies to your scalable containerized applications.\u003c/p\u003e\u003cp data-block-key=\"218t2\"\u003eThe Extension Processor also unlocks powerful new communication patterns. Now you can easily manage advanced real-time interactions with \u003ca href=\"https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc\"\u003e\u003cb\u003egRPC bidirectional streaming\u003c/b\u003e\u003c/a\u003e, enabling highly interactive and low-latency applications. Furthermore, for event-driven architectures, the Extension Processor provides a pathway to manage and secure \u003ca href=\"https://en.wikipedia.org/wiki/Server-sent_events\"\u003e\u003cb\u003eServer-Sent Events (SSE)\u003c/b\u003e\u003c/a\u003e, facilitating efficient data streaming to clients.\u003c/p\u003e\u003cp data-block-key=\"oofd\"\u003eBut the benefits extend beyond application deployment and communication protocols. The Apigee Extension Processor, coupled with Google Token Injection policies, dramatically simplifies secure access to your \u003cb\u003eGoogle Cloud\u003c/b\u003e infrastructure. You can seamlessly connect and control access to powerful data services like \u003ca href=\"https://cloud.google.com/bigtable/docs/overview\"\u003e\u003cb\u003eBigtable\u003c/b\u003e\u003c/a\u003e, and leverage the intelligence of \u003ca href=\"https://cloud.google.com/vertex-ai/docs\"\u003e\u003cb\u003eVertex AI\u003c/b\u003e\u003c/a\u003e for your machine learning workloads, all while maintaining Apigee\u0026#39;s consistent security framework.\u003c/p\u003e\u003cp data-block-key=\"critf\"\u003eFinally, by integrating with the intelligent traffic management capabilities of \u003ca href=\"https://cloud.google.com/load-balancing/docs/application-load-balancer\"\u003e\u003cb\u003eGoogle\u0026#39;s Cloud Load Balancing\u003c/b\u003e\u003c/a\u003e, the Extension Processor offers unparalleled flexibility in routing and managing diverse traffic flows. This powerful combination opens up countless possibilities for managing even the most complex API landscapes.\u003c/p\u003e\u003cp data-block-key=\"70nc3\"\u003eThis blog outlines a powerful solution to a key challenge in today\u0026#39;s landscape of high-performance and real-time applications: managing gRPC streaming within Apigee. While gRPC is a cornerstone of efficient microservices, its streaming nature presents a challenge for organizations leveraging Google Cloud\u0026#39;s Apigee as an inline proxy (traditional mode). We\u0026#39;ll explore how the Apigee Extension Processor enables Apigee\u0026#39;s data plane to enforce policies on gRPC streaming traffic as it passes through the \u003ca href=\"https://cloud.google.com/load-balancing/docs/load-balancing-overview#application-lb\"\u003eApplication Load Balancer\u003c/a\u003e (ALB). This is achieved via a \u003ca href=\"https://cloud.google.com/service-extensions/docs/configure-traffic-extensions\"\u003eService Extension (traffic extension)\u003c/a\u003e, allowing for effective management and routing without the gRPC stream directly traversing the Apigee gateway.\u003c/p\u003e\u003cp data-block-key=\"9cso8\"\u003eRead along as we delve into the core elements of this solution, highlighting its benefits and providing a high-level overview of a real-world use case involving a Cloud Run backend.\u003c/p\u003e\u003ch2 data-block-key=\"3t4tt\"\u003e\u003cbr/\u003eUnderstanding the Apigee Extension Processor\u003c/h2\u003e\u003cp data-block-key=\"2ehmb\"\u003eThe Apigee Extension Processor is a powerful \u003ca href=\"https://cloud.google.com/service-extensions/docs/lb-extensions-overview#traffic-extensions\"\u003etraffic extension\u003c/a\u003e (a type of service extension) that enables you to leverage Cloud Load Balancing to send callouts to Apigee as part of its API management. This enables Apigee to apply API management policies to requests before the ALB forwards them to user-managed backend services, effectively extending Apigee\u0026#39;s robust API management capabilities to workloads fronted by Cloud Load Balancing.\u003c/p\u003e\u003ch2 data-block-key=\"ak3t8\"\u003e\u003cbr/\u003eInfrastructure and Data Flow\u003c/h2\u003e\u003cp data-block-key=\"4uv1m\"\u003eThe diagram outlines the required components of the Apigee Extension Processor configuration:\u003c/p\u003e\u003cp data-block-key=\"dfn6f\"\u003eThe Apigee Extension Processor configuration involves several key components. These include an ALB, an Apigee instance with the Extension Processor enabled, a Service Extension. For a detailed description of these components, please refer to the \u003ca href=\"https://cloud.google.com/apigee/docs/api-platform/service-extensions/extension-processor-overview#how-apigee-extension-processor-works\"\u003eApigee Extension Processor overview\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/data-flow-diagram-apigee-services-extensions.original.png\" alt=\"Data flow diagram for Apigee Services extensions\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cdiv\u003e\n    \u003cp data-block-key=\"7bvem\"\u003eThe following numbered steps correspond to the numbered arrows in the flow diagram, illustrating the sequence of events:\u003c/p\u003e\u003cp data-block-key=\"59tvf\"\u003e1: The client sends a request to the ALB\u003c/p\u003e\u003cp data-block-key=\"2tghr\"\u003e2: The ALB acting as the \u003cb\u003ePolicy Enforcement Point (PEP)\u003c/b\u003e, processes the traffic . As part of this processing, it calls out to Apigee via the configured Service Extension (traffic extension).\u003c/p\u003e\u003cp data-block-key=\"ecj45\"\u003e3: The Apigee Extension Processor, acting as the \u003cb\u003ePolicy Decision Point (PDP)\u003c/b\u003e, receives the callout, applies the relevant API management policies to the request, and returns the processed request to the ALB (PEP).\u003c/p\u003e\u003cp data-block-key=\"enj1a\"\u003e4: The ALB completes processing and forwards the request to the backend service.\u003c/p\u003e\u003cp data-block-key=\"dqgqh\"\u003eThe backend service initiates the response, which is received by the ALB. The ALB may call out to Apigee again via the Service Extension to enforce policies on the response before forwarding it to the client.\u003c/p\u003e\u003ch2 data-block-key=\"7pp64\"\u003e\u003cbr/\u003eBridging the gap: Enabling gRPC streaming pass-through\u003c/h2\u003e\u003cp data-block-key=\"730c8\"\u003eMany modern applications require and use the power of streaming gRPC, but Apigee - used as an inline proxy - does not currently support streaming. This is where the Apigee Extension Processor becomes invaluable - by allowing the ALB to process the streaming gRPC traffic and act as the PEP (policy enforcement point) while the Apigee runtime acts as the PDP (policy decision point).\u003c/p\u003e\u003ch3 data-block-key=\"fngug\"\u003e\u003cbr/\u003e\u003cb\u003eMain elements needed to enable gRPC streaming pass-through with Apigee\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"estjk\"\u003eTo enable gRPC streaming pass-through using the Apigee Extension Processor, the following key elements are required. For detailed configuration instructions, please refer to \u003ca href=\"https://cloud.google.com/apigee/docs/api-platform/service-extensions/extension-processor-quickstart\"\u003eGet started with the Apigee Extension Processor.\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"fk3c1\"\u003e\u003cb\u003egRPC streaming backend service:\u003c/b\u003e A gRPC service implementing the necessary streaming capabilities (server, client, or bidirectional).\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"4fi8c\"\u003e\u003ca href=\"https://cloud.google.com/load-balancing/docs/load-balancing-overview#application-lb\"\u003e\u003cb\u003eApplication Load Balancer\u003c/b\u003e\u003c/a\u003e\u003cb\u003e (ALB):\u003c/b\u003e The entry point for client requests, configured to route traffic and call the Apigee Service Extension.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"6sc8p\"\u003e\u003cb\u003eApigee Instance with Extension Processor enabled:\u003c/b\u003eAn Apigee instance and environment configured with the Extension Processor feature uses a targetless API proxy for ext-proc processing of traffic from the Service Extension.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"cq800\"\u003e\u003cb\u003eService Extension configuration:\u003c/b\u003e A traffic extension (a type of Service Extension) acting as the bridge between the ALB and Apigee runtime (ideally using Private Service Connect (PSC)).\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"5bbhi\"\u003e\u003cb\u003eNetwork connectivity:\u003c/b\u003e Proper network setup allowing communication between all components (client to ALB, ALB to Apigee, ALB to backend).\u003c/li\u003e\u003c/ul\u003e\u003ch2 data-block-key=\"butkv\"\u003eUse Case: Securing and managing gRPC streaming services on Cloud Run with Apigee\u003c/h2\u003e\u003cp data-block-key=\"3rme7\"\u003eConsider a scenario where a customer develops a high-performance backend service with gRPC streaming capabilities, such as providing real-time application logs. For scalability and ease of management, this backend application is deployed on Google Cloud Run within their primary Google Cloud project. Now, the customer wants to expose this gRPC streaming service to their clients through a well-managed and secure API gateway. They choose Apigee for this purpose, leveraging its robust API management features like authentication, authorization, rate limiting and other \u003ca href=\"https://cloud.google.com/apigee/docs/api-platform/reference/policies/reference-overview-policy\"\u003epolicies\u003c/a\u003e.\u003c/p\u003e\u003ch3 data-block-key=\"bshru\"\u003e\u003cbr/\u003e\u003cb\u003eThe Challenge\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"cff8\"\u003eAs mentioned earlier, Apigee doesn\u0026#39;t natively support gRPC streaming when used in the inline proxy mode. Direct exposure of the Cloud Run gRPC service through standard Apigee configurations would not support any of the streaming use-cases: client, server or bi-di streaming.\u003c/p\u003e\u003ch3 data-block-key=\"d7kui\"\u003e\u003cbr/\u003e\u003cb\u003eSolution\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"1trk\"\u003eThe Apigee Extension Processor provides the necessary bridge to manage gRPC streaming traffic destined for a backend application deployed on Cloud Run within the same Google Cloud project.\u003c/p\u003e\u003cp data-block-key=\"ftr6d\"\u003eHere\u0026#39;s a simplified flow:\u003c/p\u003e\u003ch3 data-block-key=\"eptms\"\u003e\u003cb\u003e\u003cbr/\u003e1: Client initiation\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"bf5nk\"\u003eThe client application initiates a gRPC streaming request.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"foku6\"\u003eThis request is directed towards the public IP address or DNS name of the ALB that serves as the entry point.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"b53n3\"\u003e\u003cb\u003e\u003cbr/\u003e2:\u003c/b\u003e \u003ca href=\"https://cloud.google.com/load-balancing/docs/load-balancing-overview#application-lb\"\u003e\u003cb\u003eApplication Load Balancer\u003c/b\u003e\u003c/a\u003e\u003cb\u003e processing and Service Extension callout\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"3sfd1\"\u003eThe ALB receives the incoming gRPC streaming request.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"chu6f\"\u003eThe ALB is configured with a backend service that uses a serverless Network Endpoint Group (NEG) pointing to the backend on Cloud Run.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"89rva\"\u003eThe ALB is also configured with a Service Extension (Traffic extension) that has a specific Apigee runtime backend configured.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"cn2e\"\u003eThe ALB first calls out to this Service Extension for relevant traffic.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"c45lj\"\u003e\u003cb\u003e\u003cbr/\u003e3: Apigee proxy processing\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"3rqqt\"\u003eThe gRPC request is forwarded to the designated Apigee API proxy via the Service Extension.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"8cjgs\"\u003eWithin this Apigee X proxy, various API management policies are executed. This can include authentication, authorization, and rate limiting.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote data-block-key=\"cgj7c\"\u003e\u003cb\u003e\u003csup\u003eNote:\u003c/sup\u003e\u003c/b\u003e\u003csup\u003e The Apigee proxy in this scenario is a no-target proxy, that is, it doesnâ€™t have a Target Endpoint configured.It relies on the ALB for final routing.\u003c/sup\u003e\u003c/blockquote\u003e\u003ch3 data-block-key=\"dg14p\"\u003e\u003cb\u003e\u003cbr/\u003e4: Return to ALB\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"3sk76\"\u003eAs the Apigee proxy has no target, after policy processing, control returns to the ALB via the Service Extension response.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"97rm6\"\u003e\u003cb\u003e\u003cbr/\u003e5: Routing to Backend in Cloud Run by Load Balancer\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"5gnur\"\u003eThe ALB, based on its backend service configuration, forwards the gRPC streaming request to the appropriate backend service which is mapped to the serverless NEG where Cloud Run service resides.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"fin1u\"\u003eThe ALB handles the underlying routing to the Cloud Run instance.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"4gphp\"\u003e\u003cb\u003e\u003cbr/\u003e6: Response handling\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"1pusn\"\u003eResponse handling follows a similar pattern to the request flow. The backend initiates the response, which is then handled by the ALB. The ALB may call out to Apigee via the Service Extension (traffic extension) for policy enforcement before forwarding the response to the client.\u003c/p\u003e\u003cp data-block-key=\"6flsm\"\u003e\u003cbr/\u003eThis simplified use case demonstrates how the Apigee Extension Processor can be used to apply API management policies to gRPC streaming traffic destined for an application deployed on Cloud Run within the same Google Cloud project. The ALB primarily handles the routing to the Cloud Run service based on its NEG configuration.\u003c/p\u003e\u003ch2 data-block-key=\"mvfe\"\u003e\u003cbr/\u003eBenefits of Leveraging the Apigee Extension Processor for gRPC Streaming\u003c/h2\u003e\u003cp data-block-key=\"3uvfa\"\u003eUtilizing the Apigee Extension Processor to manage gRPC streaming services on backend offers several key advantages, extending Apigee\u0026#39;s core strengths to this new application of the platform:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"bishf\"\u003e\u003cb\u003eExtending Apigee\u0026#39;s reach\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"6g92j\"\u003eThis approach successfully extends Apigee\u0026#39;s robust API management capabilities to \u003cb\u003egRPC streaming\u003c/b\u003e, a \u003ci\u003estreaming communication pattern\u003c/i\u003e not natively supported by the Apigee platform\u0026#39;s core proxy.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"7aaft\"\u003e\u003cb\u003eLeveraging existing investments\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"1u0d0\"\u003eFor organizations already using Apigee for their RESTful APIs, this solution enables them to manage their gRPC streaming services \u003ci\u003ewithin\u003c/i\u003e Apigee. While requiring the use of the Extension Processor, it leverages familiar API management concepts and reduces the need for separate tools.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"6gdd2\"\u003e\u003cb\u003eCentralized policy management\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"bia17\"\u003eApigee provides a centralized platform for defining and enforcing API management policies. By integrating gRPC streaming through the Extension Processor, you can maintain consistent governance and security across all your API endpoints.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"1trj\"\u003e\u003cb\u003eMonetization potential\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"a5rki\"\u003eIf you are exposing gRPC streaming services as a product, Apigee\u0026#39;s \u003cb\u003eMonetization\u003c/b\u003e features can be leveraged. You can generate revenue whenever your gRPC streaming APIs are used by adding rate plans to customized API products you create within Apigee.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"dr18a\"\u003e\u003cb\u003eImproved observability and traceability\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"5o59k\"\u003eWhile detailed gRPC protocol-level analytics might be limited in a pass-through scenario, Apigee still provides valuable insights into the traffic flowing to your streaming services, including connection attempts, error rates, and overall usage patterns. This observability is crucial for monitoring and troubleshooting.\u003c/p\u003e\u003cp data-block-key=\"8hed8\"\u003eApigee\u0026#39;s \u003cb\u003edistributed tracing systems\u003c/b\u003e can help you track requests in distributed systems that involve your gRPC streaming services, providing end-to-end visibility across multiple applications, services, and databases.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"eclge\"\u003e\u003cb\u003eBusiness intelligence\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"37t7g\"\u003eApigee API Analytics collects the wealth of information flowing through your load balancer, providing data visualization in the UI or the ability to download data for offline analysis. This data can be invaluable for understanding usage patterns, identifying performance bottlenecks, and making informed business decisions.\u003c/p\u003e\u003cp data-block-key=\"75muj\"\u003eBy considering these benefits, it becomes clear that the Apigee Extension Processor offers a valuable and practical way to bring essential API management capabilities to gRPC streaming services on Google Cloud.\u003c/p\u003e\u003ch2 data-block-key=\"aec0q\"\u003e\u003cbr/\u003eLooking Ahead\u003c/h2\u003e\u003cp data-block-key=\"5mu34\"\u003eThe \u003ca href=\"https://cloud.google.com/apigee/docs/api-platform/service-extensions/extension-processor-overview#how-apigee-extension-processor-works\"\u003eApigee Extension Processor\u003c/a\u003e represents a significant step forward in extending Apigee\u0026#39;s capabilities. We envision a future where any gateway, anywhere can leverage the power of Apigee\u0026#39;s policy enforcement capability. This will involve harnessing the ext-proc protocol and integrating with various Envoy-based load balancers and gateways, enabling them to act as Policy Enforcement Points (PEPs) with the Apigee runtime serving as the Policy Decision Point (PDP). This evolution will further empower organizations to consistently manage and secure their digital assets in increasingly distributed and heterogeneous environments.\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-04-15T00:00:00Z",
  "modifiedTime": null
}
