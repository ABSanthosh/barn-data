{
  "id": "3ada62c6-00b7-41bd-acd8-8b8ee4df7c49",
  "title": "Designing data products: Working backwards from use cases",
  "link": "https://martinfowler.com/articles/designing-data-products.html",
  "description": "",
  "author": "",
  "published": "2024-12-03T09:04:00-05:00",
  "source": "https://martinfowler.com/feed.atom",
  "categories": null,
  "byline": "Kiran Prakash",
  "length": 12035,
  "excerpt": "A step-by-step, systematic approach to defining data products by working backward from use cases.",
  "siteName": "martinfowler.com",
  "favicon": "",
  "text": "One of the earliest questions organisations need to answer when adopting data mesh is: “Which data products should we build first, and how do we identify them?” Questions like “What are the boundaries of data product?”, “How big or small should it be?”, and “Which domain do they belong to?” often arise. We’ve seen many organisations get stuck in this phase, engaging in elaborate design exercises that last for months and involve endless meetings. We’ve been practicing a methodical approach to quickly answer these important design questions, offering just enough details for wider stakeholders to align on goals and understand the expected high-level outcome, while granting data product teams the autonomy to work out the implementation details and jump into action. What are data products? Before we begin designing data products, let’s first establish a shared understanding of what they are and what they aren’t. Data products are the building blocks of a data mesh, they serve analytical data, and must exhibit the eight characteristics outlined by Zhamak in her book Data Mesh: Delivering Data-Driven Value at Scale. Discoverable Data consumers should be able to easily explore available data products, locate the ones they need, and determine if they fit their use case. Addressable A data product should offer a unique, permanent address (e.g., URL, URI) that allows it to be accessed programmatically or manually. Understandable (Self Describable) Data consumers should be able to easily grasp the purpose and usage patterns of the data product by reviewing its documentation, which should include details such as its purpose, field-level descriptions, access methods, and, if applicable, a sample dataset. Trustworthy A data product should transparently communicate its service level objectives (SLOs) and adherence to them (SLIs), ensuring consumers can trust it enough to build their use cases with confidence. Natively Accessible A data product should cater to its different user personas through their preferred modes of access. For example, it might provide a canned report for managers, an easy SQL-based connection for data science workbenches, and an API for programmatic access by other backend services. Interoperable (Composable) A data product should be seamlessly composable with other data products, enabling easy linking, such as joining, filtering, and aggregation, regardless of the team or domain that created it. This requires supporting standard business keys and supporting standard access patterns. Valuable on its own A data product should represent a cohesive information concept within its domain and provide value independently, without needing joins with other data products to be useful. Secure A data product must implement robust access controls to ensure that only authorized users or systems have access, whether programmatic or manual. Encryption should be employed where appropriate, and all relevant domain-specific regulations must be strictly followed. Simply put, it's a self-contained, deployable, and valuable way to work with data. The concept applies the proven mindset and methodologies of software product development to the data space. Data products package structured, semi-structured or unstructured analytical data for effective consumption and data driven decision making, keeping in mind specific user groups and their consumption pattern for these analytical data In modern software development, we decompose software systems into easily composable units, ensuring they are discoverable, maintainable, and have committed service level objectives (SLOs). 1 Similarly, a data product is the smallest valuable unit of analytical data, sourced from data streams, operational systems, or other external sources and also other data products, packaged specifically in a way to deliver meaningful business value. It includes all the necessary machinery to efficiently achieve its stated goal using automation. Data products package structured, semi-structured or unstructured analytical data for effective consumption and data driven decision making, keeping in mind specific user groups and their consumption pattern for these analytical data. What they are not I believe a good definition not only specifies what something is, but also clarifies what it isn’t. Since data products are the foundational building blocks of your data mesh, a narrower and more specific definition makes them more valuable to your organization. A well-defined scope simplifies the creation of reusable blueprints and facilitates the development of “paved paths” for building and managing data products efficiently. Conflating data product with too many different concepts not only creates confusion among teams but also makes it significantly harder to develop reusable blueprints. With data products, we apply many effective software engineering practices to analytical data to address common ownership and quality issues. These issues, however, aren't limited to analytical data—they exist across software engineering. There’s often a tendency to tackle all ownership and quality problems in the enterprise by riding on the coattails of data mesh and data products. While the intentions are good, we've found that this approach can undermine broader data mesh transformation efforts by diluting the language and focus. One of the most prevalent misunderstandings is conflating data products with data-driven applications. Data products are natively designed for programmatic access and composability, whereas data-driven applications are primarily intended for human interaction and are not inherently composable. Here are some common misrepresentations that I’ve observed and the reasoning behind it : NameReasonsMissing Characteristic Data warehouseToo large to be an independent composable unit. not interoperable not self-describing PDF reportNot meant for programmatic access. not interoperable not native-access DashboardNot meant for programmatic access. While a data product can have a dashboard as one of its outputs or dashboards can be created by consuming one or more data products, a dashboard on its own do not qualify as a data product. not interoperable not native-access Table in a warehouseWithout proper metadata or documentation is not a data product. not self-describing not valuable on its own Kafka topic They are typically not meant for analytics. This is reflected in their storage structure — Kafka stores data as a sequence of messages in topics, unlike the column-based storage commonly used in data analytics for efficient filtering and aggregation. They can serve as sources or input ports for data products. not analytical data Working backwards from a use case Working backwards from the end goal is a core principle of software development, and we’ve found it to be highly effective in modelling data products as well. This approach forces us to focus on end users and systems, considering how they prefer to consume data products (through natively accessible output ports). It provides the data product team with a clear objective to work towards, while also introducing constraints that prevent over-design and minimise wasted time and effort. It may seem like a minor detail, but we can’t stress this enough: there's a common tendency to start with the data sources and define data products. Without the constraints of a tangible use case, you won’t know when your design is good enough to move forward with implementation, which often leads to analysis paralysis and lots of wasted effort. How to do it? The setup This process is typically conducted through a series of short workshops. Participants should include potential users of the data product, domain experts, and the team responsible for building and maintaining it. A white-boarding tool and a dedicated facilitator are essential to ensure a smooth workflow. The process Let's take a common use case we find in fashion retail. Use case: As a customer relationship manager, I need timely reports that provide insights into our most valuable and least valuable customers. This will help me take action to retain high-value customers and improve the experience of low-value customers. To address this use case, let's define a data product called “Customer Lifetime Value” (CLV). This product will assign each registered customer a score that represents their value to the business, along with recommendations for the next best action that a customer relationship manager can take based on the predicted score. Figure 1: The Customer Relations team uses the Customer Lifetime Value data product through a weekly report to guide their engagement strategies with high-value customers. Working backwards from CLV, we should consider what additional data products are needed to calculate it. These would include a basic customer profile (name, age, email, etc.) and their purchase history. Figure 2: Additional source data products are required to calculate Customer Lifetime Values If you find it difficult to describe a data product in one or two simple sentences, it’s likely not well-defined The key question we need to ask, where domain expertise is crucial, is whether each proposed data product represents a cohesive information concept. Are they valuable on their own? A useful test is to define a job description for each data product. If you find it difficult to do so concisely in one or two simple sentences, or if the description becomes too long, it’s likely not a well-defined data product. Let’s apply this test to above data products Customer Lifetime Value (CLV) : Delivers a predicted customer lifetime value as a score along with a suggested next best action for customer representatives. Customer-marketing 360 : Offers a comprehensive view of the customer from a marketing perspective. Historical Purchases: Provides a list of historical purchases (SKUs) for each customer. Returns : List of customer-initiated returns. By working backwards from the “Customer - Marketing 360”, “Historical Purchases”, and “Returns” data products, we should identify the system of records for this data. This will lead us to the relevant transactional systems that we need to integrate with in order to ingest the necessary data. Figure 3: System of records or transactional systems that expose source data products We're releasing this article in installments. The next installment will describe how we introduce other use cases, and sort out domain ownership and service level objectives.. To find out when we publish the next installment subscribe to this site's RSS feed, or Martin's feeds on Mastodon, Bluesky, LinkedIn, or X (Twitter).",
  "image": "https://martinfowler.com/articles/designing-data-products/card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eOne of the earliest questions organisations need to answer when adopting\n    data mesh is: “Which data products should we build first, and how do we\n    identify them?” Questions like “What are the boundaries of data product?”,\n    “How big or small should it be?”, and “Which domain do they belong to?”\n    often arise. We’ve seen many organisations get stuck in this phase, engaging\n    in elaborate design exercises that last for months and involve endless\n    meetings.\u003c/p\u003e\n\n\u003cp\u003eWe’ve been practicing a methodical approach to quickly answer these\n    important design questions, offering just enough details for wider\n    stakeholders to align on goals and understand the expected high-level\n    outcome, while granting data product teams the autonomy to work\n    out the implementation details and jump into action.\u003c/p\u003e\n\n\u003csection id=\"WhatAreDataProducts\"\u003e\n\u003ch2\u003eWhat are data products?\u003c/h2\u003e\n\n\u003cp\u003eBefore we begin designing data products, let’s first establish a shared\n      understanding of what they are and what they aren’t.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://martinfowler.com/articles/data-mesh-principles.html#DataAsAProduct\"\u003eData products\u003c/a\u003e are the building blocks\n      of a data mesh, they serve analytical data, and must exhibit the \u003ca href=\"https://martinfowler.com/articles/fitness-functions-data-products.html#ArchitecturalCharacteristicsOfADataProduct\"\u003e\n      eight characteristics \u003c/a\u003e outlined by Zhamak in her book\n      \u003ca href=\"https://www.amazon.com/gp/product/1492092398/ref=as_li_tl?ie=UTF8\u0026amp;camp=1789\u0026amp;creative=9325\u0026amp;creativeASIN=1492092398\u0026amp;linkCode=as2\u0026amp;tag=martinfowlerc-20\"\u003eData Mesh: Delivering Data-Driven Value\n        at Scale.\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cp\u003eDiscoverable\u003c/p\u003e\n\n\u003cp\u003eData consumers should be able to easily explore available data\n            products, locate the ones they need, and determine if they fit their\n            use case.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eAddressable\u003c/p\u003e\n\n\u003cp\u003eA data product should offer a unique, permanent address\n            (e.g., URL, URI) that allows it to be accessed programmatically or manually.\n          \u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eUnderstandable (Self Describable)\u003c/p\u003e\n\n\u003cp\u003eData consumers should be able to\n            easily grasp the purpose and usage patterns of the data product by\n            reviewing its documentation, which should include details such as\n            its purpose, field-level descriptions, access methods, and, if\n            applicable, a sample dataset.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eTrustworthy\u003c/p\u003e\n\n\u003cp\u003eA data product should transparently communicate its service level\n              objectives (SLOs) and adherence to them (SLIs), ensuring consumers\n              can\n              trust\n              it enough to build their use cases with confidence.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eNatively Accessible\u003c/p\u003e\n\n\u003cp\u003eA data product should cater to its different user personas through\n            their preferred modes of access. For example, it might provide a canned\n            report for managers, an easy SQL-based connection for data science\n            workbenches, and an API for programmatic access by other backend services.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eInteroperable (Composable)\u003c/p\u003e\n\n\u003cp\u003eA data product should be seamlessly composable with other data products,\n            enabling easy linking, such as joining, filtering, and aggregation,\n            regardless of the team or domain that created it. This requires\n            supporting standard business keys and supporting standard access\n            patterns.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eValuable on its own\u003c/p\u003e\n\n\u003cp\u003eA data product should represent a cohesive information concept\n            within its domain and provide value independently, without needing\n            joins with other data products to be useful.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eSecure\u003c/p\u003e\n\n\u003cp\u003eA data product must implement robust access controls to ensure that\n          only authorized users or systems have access, whether programmatic or manual.\n          Encryption should be employed where appropriate, and all relevant\n          domain-specific regulations must be strictly followed.\n          \u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSimply put, it\u0026#39;s a\n      self-contained, deployable, and valuable way to work with data. The\n      concept applies the proven mindset and methodologies of software product\n      development to the data space.\u003c/p\u003e\n\n\u003cp\u003eData products package structured, semi-structured or unstructured\n      analytical data for effective consumption and data driven decision making,\n      keeping in mind specific user groups and their consumption pattern for\n      these analytical data\u003c/p\u003e\n\n\u003cp\u003eIn modern software development, we decompose software systems into\n      easily composable units, ensuring they are discoverable, maintainable, and\n      have committed service level objectives (SLOs). \u003cspan data-footnote=\"footnote-arch-quantum\"\u003e1\u003c/span\u003e\n      Similarly, a data product\n      is the smallest valuable unit of analytical data, sourced from data\n      streams, operational systems, or other external sources and also other\n      data products, packaged specifically in a way to deliver meaningful\n      business value. It includes all the necessary machinery to efficiently\n      achieve its stated goal using automation.\u003c/p\u003e\n\n\n\n\u003cp\u003eData products package structured, semi-structured or unstructured\n      analytical data for effective consumption and data driven decision making,\n      keeping in mind specific user groups and their consumption pattern for\n      these analytical data.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"WhatTheyAreNot\"\u003e\n\u003ch2\u003eWhat they are not\u003c/h2\u003e\n\n\u003cp\u003eI believe a good definition not only specifies what something is, but\n      also clarifies what it isn’t.\u003c/p\u003e\n\n\u003cp\u003eSince data products are the foundational building blocks of your\n      data mesh, a narrower and more specific definition makes them more\n      valuable to your organization. A well-defined scope simplifies the\n      creation of reusable blueprints and facilitates the development of\n      “paved paths” for building and managing data products efficiently.\u003c/p\u003e\n\n\u003cp\u003eConflating data product with too many different concepts not only creates\n      confusion among teams but also makes it significantly harder to develop\n      reusable blueprints.\u003c/p\u003e\n\n\u003cp\u003eWith data products, we apply many\n      effective software engineering practices to analytical data to address\n      common ownership and quality issues. These issues, however, aren\u0026#39;t limited\n      to analytical data—they exist across software engineering. There’s often a\n      tendency to tackle all ownership and quality problems in the enterprise by\n      riding on the coattails of data mesh and data products. While the\n      intentions are good, we\u0026#39;ve found that this approach can undermine broader\n      data mesh transformation efforts by diluting the language and focus.\u003c/p\u003e\n\n\u003cp\u003eOne of the most prevalent misunderstandings is conflating data\n        products with data-driven applications. Data products are natively\n        designed for programmatic access and composability, whereas\n        data-driven applications are primarily intended for human interaction\n        and are not inherently composable.\n      \u003c/p\u003e\n\n\u003cp\u003eHere are some common misrepresentations that I’ve observed and the\n      reasoning behind it :\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\u003ctr\u003e\u003cth\u003eName\u003c/th\u003e\u003cth\u003eReasons\u003c/th\u003e\u003cth\u003eMissing Characteristic\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003eData warehouse\u003c/td\u003e\u003ctd\u003eToo large to be an independent composable unit. \u003c/td\u003e\u003ctd\u003e\n\u003cul\u003e\n\u003cli\u003enot interoperable\u003c/li\u003e\n\n\u003cli\u003enot self-describing\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003ePDF report\u003c/td\u003e\u003ctd\u003eNot meant for programmatic access.\u003c/td\u003e\u003ctd\u003e\n\u003cul\u003e\n\u003cli\u003enot interoperable\u003c/li\u003e\n\n\u003cli\u003enot native-access\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eDashboard\u003c/td\u003e\u003ctd\u003eNot meant for programmatic access. While a data product can\n          have a dashboard as one of its outputs or dashboards can be created by\n          consuming one or more data products, a dashboard on its own do not\n          qualify as a data product.\u003c/td\u003e\u003ctd\u003e\n\u003cul\u003e\n\u003cli\u003enot interoperable\u003c/li\u003e\n\n\u003cli\u003enot native-access\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eTable in a warehouse\u003c/td\u003e\u003ctd\u003eWithout proper metadata or documentation is not a data\n          product.\u003c/td\u003e\u003ctd\u003e\n\u003cul\u003e\n\u003cli\u003enot self-describing\u003c/li\u003e\n\n\u003cli\u003enot valuable on its own\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eKafka topic\u003c/td\u003e\u003ctd\u003e They are typically not meant for analytics. This is reflected\n          in their storage structure — Kafka stores data as a sequence of\n          messages in topics, unlike the column-based storage commonly used in\n          data analytics for efficient filtering and aggregation. They can serve\n          as sources or input ports for data products.\u003c/td\u003e\u003ctd\u003e\n\u003cul\u003e\n\u003cli\u003enot analytical data\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/section\u003e\n\n\u003csection id=\"WorkingBackwardsFromAUseCase\"\u003e\n\u003ch2\u003eWorking backwards from a use case\u003c/h2\u003e\n\n\u003cp\u003eWorking backwards from the end goal is a core principle of software\n      development,\n      and we’ve found it to be highly effective\n      in modelling data products as well. This approach forces us to focus on\n      end users and systems, considering how they prefer to consume data\n      products (through natively accessible output ports). It provides the data\n      product team with a clear objective to work towards, while also\n      introducing constraints that prevent over-design and minimise wasted time\n      and effort.\u003c/p\u003e\n\n\u003cp\u003eIt may seem like a minor detail, but we can’t stress this enough:\n      there\u0026#39;s a common tendency to start with the data sources and define data\n      products. Without the constraints of a tangible use case, you won’t know\n      when your design is good enough to move forward with implementation, which\n      often leads to analysis paralysis and lots of wasted effort.\u003c/p\u003e\n\n\u003csection id=\"HowToDoIt\"\u003e\n\u003ch3\u003eHow to do it?\u003c/h3\u003e\n\n\u003csection id=\"TheSetup\"\u003e\n\u003ch4\u003eThe setup\u003c/h4\u003e\n\n\u003cp\u003eThis process is typically conducted through a series of \u003ca href=\"https://martinfowler.com/articles/data-mesh-accelerate-workshop.html\"\u003eshort workshops.\u003c/a\u003e Participants\n          should include potential users of the data\n          product, domain experts, and the team responsible for building and\n          maintaining it. A white-boarding tool and a dedicated facilitator\n          are essential to ensure a smooth workflow.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"TheProcess\"\u003e\n\u003ch4\u003eThe process\u003c/h4\u003e\n\n\u003cp\u003eLet\u0026#39;s take a common use case we find in fashion retail.\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eUse case:\u003c/p\u003e\n\n\u003cp\u003eAs a customer relationship manager, I need timely reports that\n          provide insights into our most valuable and least valuable customers.\n          This will help me take action to retain high-value customers and\n          improve the experience of low-value customers.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eTo address this use case, let\u0026#39;s define a data product called\n          \u003ci\u003e“Customer Lifetime Value”\u003c/i\u003e (CLV). This product will assign each\n          registered customer a score that represents their value to the\n          business, along with recommendations for the next best action that a\n          customer relationship manager can take based on the predicted\n          score.\u003c/p\u003e\n\n\u003cdiv id=\"interaction_map_1.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/designing-data-products/interaction_map_1.png\"/\u003e\u003c/p\u003e\u003cp\u003eFigure 1: The Customer Relations team\n            uses the Customer Lifetime Value data product through a weekly\n            report to guide their engagement strategies with high-value customers.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWorking backwards from CLV, we should consider what additional\n          data products are needed to calculate it. These would include a basic\n          customer profile (name, age, email, etc.) and their purchase\n          history.\u003c/p\u003e\n\n\u003cdiv id=\"interaction_map_2.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/designing-data-products/interaction_map_2.png\" width=\"900\"/\u003e\u003c/p\u003e\u003cp\u003eFigure 2: Additional source data\n            products are required to calculate Customer Lifetime Values\n          \u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIf you find it difficult to describe a data product in one\n          or two simple sentences, it’s likely not well-defined\u003c/p\u003e\n\n\u003cp\u003eThe key question we need to ask, where domain expertise is\n          crucial, is whether each proposed data product represents a cohesive\n          information concept. Are they valuable on their own? A useful test is\n          to define a job description for each data product. If you find it\n          difficult to do so concisely in one or two simple sentences, or if\n          the description becomes too long, it’s likely not a well-defined data\n          product.\u003c/p\u003e\n\n\u003cp\u003eLet’s apply this test to above data products\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cp\u003eCustomer Lifetime Value (CLV) :\u003c/p\u003e\n\n\u003cp\u003eDelivers a predicted customer lifetime value as a score along\n              with a suggested next best action for customer representatives.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eCustomer-marketing 360 : \u003c/p\u003e\n\n\u003cp\u003eOffers a comprehensive view of the\n              customer from a marketing perspective.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eHistorical Purchases: \u003c/p\u003e\n\n\u003cp\u003eProvides a list of historical purchases\n              (SKUs) for each customer.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eReturns : \u003c/p\u003e\n\n\u003cp\u003eList of customer-initiated returns.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBy working backwards from the \u003ci\u003e“Customer - Marketing 360”\u003c/i\u003e,\n            \u003ci\u003e“Historical Purchases”\u003c/i\u003e, and \u003ci\u003e“Returns”\u003c/i\u003e data\n            products, we should identify the system\n          of records for this data. This will lead us to the relevant\n          transactional systems that we need to integrate with in order to\n          ingest the necessary data.\u003c/p\u003e\n\n\u003cdiv id=\"interaction_map_3.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/designing-data-products/interaction_map_3.png\" width=\"900\"/\u003e\u003c/p\u003e\u003cp\u003eFigure 3: System of records\n            or transactional systems that expose source data products\n            \u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eWe\u0026#39;re releasing this article in installments. The next installment will\n        describe how we introduce other use cases, and sort out domain ownership\n        and service level objectives..\u003c/p\u003e\n\n\u003cp\u003e To find out when we publish the next installment subscribe to this\n        site\u0026#39;s\n        \u003ca href=\"https://martinfowler.com/feed.atom\"\u003eRSS feed\u003c/a\u003e, or Martin\u0026#39;s feeds on \n        \u003ca href=\"https://toot.thoughtworks.com/@mfowler\"\u003eMastodon\u003c/a\u003e,\n        \u003ca href=\"https://bsky.app/profile/martinfowler.com\"\u003eBluesky\u003c/a\u003e,\n        \u003ca href=\"https://www.linkedin.com/in/martin-fowler-com/\"\u003eLinkedIn\u003c/a\u003e, or\n        \u003ca href=\"https://twitter.com/martinfowler\"\u003eX (Twitter)\u003c/a\u003e.\n        \u003c/p\u003e\n\n\u003c/div\u003e\n\n\u003chr/\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": null,
  "modifiedTime": "2024-12-03T00:00:00Z"
}
