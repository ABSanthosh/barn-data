{
  "id": "0024cffb-23be-4c2e-b023-7e0f91c31422",
  "title": "AWS Introduces CDK Garbage Collection",
  "link": "https://www.infoq.com/news/2025/03/aws-cdk-garbage-collection/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Amazon recently introduced the preview of garbage collection in the AWS CDK. The new feature automatically deletes old assets in bootstrapped S3 buckets and ECR repositories, reducing maintenance and deployment costs. By Renato Losio",
  "author": "Renato Losio",
  "published": "Mon, 03 Mar 2025 19:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "AWS",
    "Infrastructure as Code",
    "CloudFormation",
    "Development",
    "DevOps",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 3518,
  "excerpt": "Amazon recently introduced the preview of garbage collection in the AWS CDK. The new feature automatically deletes old assets in bootstrapped S3 buckets and ECR repositories, reducing maintenance and",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250228123444/apple-touch-icon.png",
  "text": "Amazon recently introduced the preview of garbage collection in the AWS CDK. The new feature automatically deletes old assets in bootstrapped S3 buckets and ECR repositories, reducing maintenance and deployment costs. The recent cdk gc command performs garbage collection on unused assets stored in the resources of the bootstrap stack, allowing developers to view, manage, and delete assets that are no longer needed. Kaizen Conroy, software engineer at AWS, and Adam Keller, senior cloud architect at AWS, explain: For CDK developers that leverage assets at scale, they may notice over time that the bootstrapped bucket or repository accumulated old or unused data. If users wanted to clean this data on their own, CDK didn’t provide a clear way of determining which data is safe to delete. (...) We expect CDK Garbage Collection to help AWS CDK customers save on storage costs associated with using the product while not affecting how customers use CDK. Source: AWS GitHub account. The AWS Cloud Development Kit (CDK) is an open source framework that provides higher-level abstractions and enables developers to define cloud infrastructure using TypeScript, JavaScript, Python, Java, C#/.NET, and Go. Developers define reusable cloud components known as constructs that can be composed together into stacks and apps. The garbage collection feature has been a long-standing request by the community, with Janne Sinivirta, principal DevOps consultant at Polar Squad, highlighting the issue as far back as 2019: Each cdk build creates a new assets folder under cdk.out. If this includes node_modules, the total size of the cdk.out folder can add up pretty quickly (mine was over 10Gb)! According to the documentation, the cdk gc command is still in development and preview mode, and while the current features of this command are considered production-ready and safe to use, the scope of the command and its features might be subject to change. Developers are required to explicitly opt-in by providing the --unstable=gc option. For example, while the current version of garbage collection is scoped to an individual account and region, there is a feature request to scope it instead to each stack. CDK Garbage Collection exposes some parameters to help developers customize the experience, determining how aggressive the garbage collection should be. This is achieved using the --rollback-buffer-days and --created-buffer-days parameters, specifying respectively the days an asset has to be marked as isolated before it is eligible for deletion and the days the asset must live before it is eligible for deletion. Conroy and Keller clarify: Rollback Buffer Days should be considered when you are not using cdk deploy and instead use a deployment method that operates on templates only, like a pipeline. If your pipeline can rollback without any involvement of the CDK CLI, this parameter will help ensure that assets are not prematurely deleted. Adam Keller, senior cloud architect at AWS, summarizes on LinkedIn: This was a pain point for a lot of folks as they were required to clean up resources on their own without any sort of intervention from the CDK. With the new garbage collection feature in the CDK toolkit, old, unused assets can be cleaned up with ease. The CDK Garbage Collection is available starting in AWS CDK version 2.165.0. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2025/03/aws-cdk-garbage-collection/en/headerimage/generatedHeaderImage-1740931338658.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAmazon recently introduced the preview of \u003ca href=\"https://aws.amazon.com/blogs/devops/announcing-cdk-garbage-collection/\"\u003egarbage collection in the AWS CDK\u003c/a\u003e. The new feature automatically deletes old assets in bootstrapped S3 buckets and ECR repositories, reducing maintenance and deployment costs.\u003c/p\u003e\n\n\u003cp\u003eThe recent \u003ccode\u003ecdk gc\u003c/code\u003e command performs garbage collection on unused assets stored in the resources of the bootstrap stack, allowing developers to view, manage, and delete assets that are no longer needed. Kaizen Conroy, software engineer at AWS, and Adam Keller, senior cloud architect at AWS, explain:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eFor CDK developers that leverage assets at scale, they may notice over time that the bootstrapped bucket or repository accumulated old or unused data. If users wanted to clean this data on their own, CDK didn’t provide a clear way of determining which data is safe to delete. (...) We expect CDK Garbage Collection to help AWS CDK customers save on storage costs associated with using the product while not affecting how customers use CDK.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/03/aws-cdk-garbage-collection/en/resources/1415746535-dc012ed3-5015-40af-846b-70cc62145b88-1740931499122.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/03/aws-cdk-garbage-collection/en/resources/1415746535-dc012ed3-5015-40af-846b-70cc62145b88-1740931499122.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: AWS GitHub account.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/home.html\"\u003eAWS Cloud Development Kit (CDK)\u003c/a\u003e is an open source framework that provides higher-level abstractions and enables developers to define cloud infrastructure using TypeScript, JavaScript, Python, Java, C#/.NET, and Go. Developers define reusable cloud components known as constructs that can be composed together into stacks and apps. The garbage collection feature has been a \u003ca href=\"https://github.com/aws/aws-cdk/issues/3749\"\u003elong-standing request\u003c/a\u003e by the community, with Janne Sinivirta, principal DevOps consultant at Polar Squad, highlighting the issue as far back as 2019:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEach cdk build creates a new assets folder under cdk.out. If this includes node_modules, the total size of the cdk.out folder can add up pretty quickly (mine was over 10Gb)!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccording to the \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/ref-cli-cmd-gc.html\"\u003edocumentation\u003c/a\u003e, the \u003ccode\u003ecdk gc command\u003c/code\u003e is still in development and preview mode, and while the current features of this command are considered production-ready and safe to use, the scope of the command and its features might be subject to change. Developers are required to explicitly opt-in by providing the --\u003ccode\u003eunstable=gc\u003c/code\u003e option. For example, while the current version of garbage collection is scoped to an individual account and region, there is a \u003ca href=\"https://github.com/aws/aws-cdk/issues/32799\"\u003efeature request\u003c/a\u003e to scope it instead to each stack.\u003c/p\u003e\n\n\u003cp\u003eCDK Garbage Collection exposes some parameters to help developers customize the experience, determining how aggressive the garbage collection should be. This is achieved using the --\u003ccode\u003erollback-buffer-days\u003c/code\u003e and --\u003ccode\u003ecreated-buffer-days\u003c/code\u003e parameters, specifying respectively the days an asset has to be marked as isolated before it is eligible for deletion and the days the asset must live before it is eligible for deletion. Conroy and Keller clarify:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eRollback Buffer Days should be considered when you are not using \u003ccode\u003ecdk deploy\u003c/code\u003e and instead use a deployment method that operates on templates only, like a pipeline. If your pipeline can rollback without any involvement of the CDK CLI, this parameter will help ensure that assets are not prematurely deleted.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAdam Keller, senior cloud architect at AWS, \u003ca href=\"https://www.linkedin.com/posts/adamkeller_announcing-cdk-garbage-collection-amazon-activity-7298745226485997569-ridz?utm_source=share\u0026amp;utm_medium=member_desktop\u0026amp;rcm=ACoAABaQ5R4B1z_TPIVzQKBvbJ9SpDn29zaiJcY\"\u003esummarizes\u003c/a\u003e on LinkedIn:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThis was a pain point for a lot of folks as they were required to clean up resources on their own without any sort of intervention from the CDK. With the new garbage collection feature in the CDK toolkit, old, unused assets can be cleaned up with ease.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe CDK Garbage Collection is available starting in AWS CDK version 2.165.0.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-03-03T00:00:00Z",
  "modifiedTime": null
}
