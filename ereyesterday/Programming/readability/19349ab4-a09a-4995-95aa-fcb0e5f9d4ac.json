{
  "id": "19349ab4-a09a-4995-95aa-fcb0e5f9d4ac",
  "title": "Activision Reduces Build Time of Call of Duty by 50% with MSVC Build Insights",
  "link": "https://www.infoq.com/news/2025/04/activision-build-time/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Activision has cut build times for Call of Duty: Modern Warfare II (COD) in half by profiling and optimizing their C++ build system with MSVC Build Insights to uncover bottlenecks in their compilation pipeline. The effort unblocked developers, accelerated delivery, and reduced idle time. By Matt Foster",
  "author": "Matt Foster",
  "published": "Fri, 25 Apr 2025 13:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Visual C++",
    "C++",
    "Continuous Integration",
    "Development",
    "Architecture \u0026 Design",
    "DevOps",
    "news"
  ],
  "byline": "Matt Foster",
  "length": 3617,
  "excerpt": "Activision has cut build times for Call of Duty: Modern Warfare II (COD) in half by profiling and optimizing their C++ build system with MSVC Build Insights to uncover bottlenecks in their compilation",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250422123038_u1/apple-touch-icon.png",
  "text": "Activision has cut build times for Call of Duty: Modern Warfare II (COD) in half by profiling and optimizing their C++ build system with MSVC Build Insights to uncover bottlenecks in their compilation pipeline. The effort unblocked developers, accelerated delivery, and reduced idle time. Their success reflects a broader trend across the industry, with teams at Netflix, Canva, and Honeycomb investing in CI performance engineering as a way to improve both productivity and developer experience. Activision observed that persistent build delays were eroding developer flow and limiting delivery velocity. In response, the Activision team collaborated with Microsoft's Xbox Advanced Technology Group to instrument and streamline their compilation pipeline. By using MSVC (Microsoft Visual C++) Build Insights, a profiling tool for C++ builds, engineers identified a number of key inefficiencies in their build process. While these specific issues are rooted in C++, they reflect familiar challenges faced when working with large codebases and compute heavy builds. Among the core inefficiencies, excessive inlining was inflating compile units, link-time optimizations were dragging due to complex initializations, and inefficient symbol resolution was creating CPU stalls during the final linking stage. Each issue contributed to delay in a different part of the process, and together they highlighted how localized inefficiencies - when multiplied across a large codebase - significantly extended build time. These targeted optimizations led to a substantial reduction in build times - from approximately 28 minutes to 14 minutes. This improvement had significant implications for Activision's development workflow. Faster builds meant more pull requests merged, more builds, less idle time and ultimately more frequent feature delivery. But reducing build time isn't just a technical improvement - it has measurable effects on the developer experience. Michael Vance, SVP and software engineer at Activision, noted that \"slow builds create bottlenecks in our continuous integration pipelines, delaying the verification of every piece of code and content that goes into our games.\" The team's build time improvements were not just a performance win, but a way to unblock developers and maintain velocity in a tightly integrated workflow. This aligns with broader industry findings that highlight developer experience as a key contributor to engineering throughput. Research from GitHub and Microsoft suggests that satisfaction with internal tooling, including CI/CD pipelines, correlates strongly with productivity metrics such as PR cycle time, deployment frequency, and time to resolve issues. Activision's experience is indicative of a broader shift in how organizations approach CI performance. As build and test pipelines grow in complexity, teams are applying similar discipline to their profiling and instrumentation as they are with the build artifacts. Netflix reported faster iteration cycles and improved efficiency for Android developers after tuning their Gradle builds. Canva reduced CI durations from over 80 minutes to under 30, improving release velocity and reducing developer frustration. Honeycomb set internal objectives to keep build times under 15 minutes, framing CI speed as a first-class developer productivity metric. In each case, pipeline performance improvements were directly tied to happier, more effective engineering teams. About the Author Matt Foster",
  "image": "https://res.infoq.com/news/2025/04/activision-build-time/en/headerimage/generatedHeaderImage-1745455505857.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eActivision has cut build times for Call of Duty: Modern Warfare II (COD) in half by \u003ca href=\"https://developer.microsoft.com/en-us/games/articles/2025/03/gdc-2025-build-insights-call-of-duty-modern-warfare/\"\u003eprofiling and optimizing their C++ build system\u003c/a\u003e with MSVC Build Insights to uncover bottlenecks in their compilation pipeline.\u003c/p\u003e\n\n\u003cp\u003eThe effort unblocked developers, accelerated delivery, and reduced idle time. Their success reflects a broader trend across the industry, with teams at \u003ca href=\"https://gradle.com/customers/story/netflix/\"\u003eNetflix\u003c/a\u003e, \u003ca href=\"https://www.canva.dev/blog/engineering/faster-ci-builds-at-canva/\"\u003eCanva\u003c/a\u003e, and \u003ca href=\"https://www.honeycomb.io/blog/most-important-developer-productivity-metric-build-times\"\u003eHoneycomb\u003c/a\u003e investing in CI performance engineering as a way to improve both productivity and developer experience.\u003c/p\u003e\n\n\u003cp\u003eActivision observed that persistent build delays were eroding developer flow and limiting delivery velocity. In response, the Activision team collaborated with Microsoft\u0026#39;s Xbox Advanced Technology Group to instrument and streamline their compilation pipeline. By using \u003ca href=\"https://learn.microsoft.com/en-us/cpp/build-insights/?view=msvc-170\"\u003eMSVC (Microsoft Visual C++) Build Insights\u003c/a\u003e, a profiling tool for C++ builds, engineers identified a number of key inefficiencies in their build process. While these specific issues are rooted in C++, they reflect familiar challenges faced when working with large codebases and compute heavy builds.\u003c/p\u003e\n\n\u003cp\u003eAmong the core inefficiencies, excessive inlining was inflating compile units, link-time optimizations were dragging due to complex initializations, and inefficient symbol resolution was creating CPU stalls during the final linking stage. Each issue contributed to delay in a different part of the process, and together they highlighted how localized inefficiencies - when multiplied across a large codebase - significantly extended build time.\u003c/p\u003e\n\n\u003cp\u003eThese targeted optimizations led to a substantial reduction in build times - from approximately 28 minutes to 14 minutes. This improvement had significant implications for Activision\u0026#39;s development workflow. Faster builds meant more pull requests merged, more builds, less idle time and ultimately more frequent feature delivery.\u003c/p\u003e\n\n\u003cp\u003eBut reducing build time isn\u0026#39;t just a technical improvement - it has measurable effects on the developer experience. Michael Vance, SVP and software engineer at Activision, noted that \u0026#34;slow builds create bottlenecks in our continuous integration pipelines, delaying the verification of every piece of code and content that goes into our games.\u0026#34; The team\u0026#39;s build time improvements were not just a performance win, but a way to unblock developers and maintain velocity in a tightly integrated workflow.\u003c/p\u003e\n\n\u003cp\u003eThis aligns with broader industry findings that highlight developer experience as a key contributor to engineering throughput. Research from \u003ca href=\"https://resources.github.com/developer-productivity/why-developer-satisfaction-is-your-best-productivity-metric\"\u003eGitHub\u003c/a\u003e and \u003ca href=\"https://azure.microsoft.com/en-us/blog/quantifying-the-impact-of-developer-experience\"\u003eMicrosoft\u003c/a\u003e suggests that satisfaction with internal tooling, including CI/CD pipelines, correlates strongly with productivity metrics such as PR cycle time, deployment frequency, and time to resolve issues.\u003c/p\u003e\n\n\u003cp\u003eActivision\u0026#39;s experience is indicative of a broader shift in how organizations approach CI performance. As build and test pipelines grow in complexity, teams are applying similar discipline to their profiling and instrumentation as they are with the build artifacts. \u003ca href=\"https://gradle.com/customers/story/netflix/\"\u003eNetflix\u003c/a\u003e reported faster iteration cycles and improved efficiency for Android developers after tuning their Gradle builds. \u003ca href=\"https://www.canva.dev/blog/engineering/faster-ci-builds-at-canva/\"\u003eCanva\u003c/a\u003e reduced CI durations from over 80 minutes to under 30, improving release velocity and reducing developer frustration. \u003ca href=\"https://www.honeycomb.io/blog/most-important-developer-productivity-metric-build-times\"\u003eHoneycomb\u003c/a\u003e set internal objectives to keep build times under 15 minutes, framing CI speed as a first-class developer productivity metric. In each case, pipeline performance improvements were directly tied to happier, more effective engineering teams.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Matt-Foster\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMatt Foster\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-25T00:00:00Z",
  "modifiedTime": null
}
