{
  "id": "bb617ba5-73b0-47b9-b5c9-d44165935cb4",
  "title": "Java News Roundup: Java Turns 30, Hibernate ORM 7.0, Embabel, jaz, Open Liberty, Eclipse DataGrid",
  "link": "https://www.infoq.com/news/2025/05/java-news-roundup-may19-2025/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "This week's Java roundup for May 19th, 2025 features news highlighting: Java’s 30th birthday; the release of Hibernate ORM 7.0 and Hibernate Validator 9.0; the May 2025 edition of Open Liberty; the first beta release of JobRunr 8.0; and the introduction of Embabel, jaz, and Eclipse DataGrid. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Mon, 26 May 2025 23:30:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Hibernate ORM",
    "Azure",
    "Java",
    "Embabel",
    "JobRunr",
    "Open Liberty",
    "Quarkus",
    "Open JDK",
    "MicroStream",
    "JDK 25",
    "Jakarta EE",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 8342,
  "excerpt": "This week's Java roundup for May 19th, 2025 features news highlighting: Java’s 30th birthday; the release of Hibernate ORM 7.0 and Hibernate Validator 9.0; the May 2025 edition of Open Liberty; the fi",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250513062617/apple-touch-icon.png",
  "text": "This week's Java roundup for May 19th, 2025 features news highlighting: Java's 30th birthday; the release of Hibernate ORM 7.0 and Hibernate Validator 9.0; the May 2025 edition of Open Liberty; the first beta release of JobRunr 8.0; and the introduction of Embabel, jaz, and Eclipse DataGrid. Happy 30th Birthday, Java! On May 23rd, 1995 at the Sun World conference in San Francisco, California, Sun Microsystems formally introduced the Java programming language. Oracle marked this milestone with their 30th Birthday Event, hosted by Java Developer Advocates, Ana-Maria Mihalceanu, Billy Korando and Nicolai Parlog along with Sharat Chander, Senior Director, Product Management \u0026 Developer Engagement at Oracle. This special six-hour event featured many guests on a variety of topics. InfoQ will follow up with a more detailed news story. OpenJDK With Rampdown Phase One scheduled for June 5, 2025, the following JEPs have been elevated from Proposed to Target to Targeted for JDK 25: JEP 519: Compact Object Headers (announced here) JEP 515: Ahead-of-Time Method Profiling (announced here) JEP 514: Ahead-of-Time Command-Line Ergonomics (announced here) JEP 508: Vector API (Tenth Incubator) (announced here) JEP 507: Primitive Types in Patterns, instanceof, and switch (Third Preview) (announced here) Similarly, the following JEPs have been elevated from Candidate to Proposed to Target for JDK 25: JEP 521: Generational Shenandoah (announced here) JEP 520: JFR Method Timing \u0026 Tracing (announced here) JEP 518: JFR Cooperative Sampling (announce here) JEP 470: PEM Encodings of Cryptographic Objects (Preview) (announced here) The reviews for the JEPs that have been Proposed to Target are expected to conclude by Tuesday, May 27, 2025. Version 7.5.2 of the Regression Test Harness for the JDK, jtreg, has been released and ready for integration in the JDK. The most significant changes include: support for using the ${test.main.class} template to use the current class name for test actions; the ability to configure the default timeout value in jtreg tests via a properties file; and support for .jasm and .jcod files in patched Java modules. Further details on this release may be found in the release notes. JDK 25 Build 24 of the JDK 25 early-access builds was made available this past week featuring updates from Build 23 that include fixes for various issues. More details on this release may be found in the release notes. For JDK 25, developers are encouraged to report bugs via the Java Bug Database. Jakarta EE In his weekly Hashtag Jakarta EE blog, Ivar Grimstad, Jakarta EE Developer Advocate at the Eclipse Foundation, provided an update on Jakarta EE 11 and Jakarta EE 12, writing: The Jakarta EE 11 TCK is very close to being finalized, so it looks like we are on the path of getting the Jakarta EE 11 Platform release out the door in the middle of June. The work with Jakarta EE 12 is on track according to the Jakarta EE 12 Release Plan. Plan reviews have been completed, and discussions right now are around which specifications to add (if any) to the Platform, and which to possibly deprecate. The road to Jakarta EE 11 included five milestone releases, the release of the Core Profile in December 2024, the release of Web Profile in April 2025, and a first release candidate of the Platform before its anticipated GA release in June 2025. Spring Framework It was a busy week over at Spring as the various teams have delivered GA releases of Spring Boot, Spring Security, Spring Authorization Server, Spring Session, Spring Integration, Spring for GraphQL, Spring AI and Spring Web Services. Further details may be found in this InfoQ news story. The Spring Data team has introduced their plan to lower the barrier to entry related to the different approaches with technologies (GraalVM, CRaC, CDS, etc.) that reduce application startup times. With the upcoming release of Spring Data 2025.1 (AKA version 4.0), repositories will be migrating to Ahead-of-Time compilation. This means they will be shifting all the \"repository preparations that are done at application startup to build time.\" This may be accomplished by setting the spring.aot.repositories.enabled property to true. Microsoft Azure Microsoft has introduced their new Azure Command Launcher for Java, named jaz, to address \"suboptimal resource utilization in cloud-based deployments, where memory and CPU tend to be dedicated for application workloads (use of containers and VMs) but still require intelligent management to maximize efficiency and cost-effectiveness.\" This means that instead of writing: $ JAVA_OPTS=\"-XX:... several JVM tuning flags\" $ java $JAVA_OPTS -jar myapp.jar\" Developers can now write: $ jaz -jar myapp.jar jaz is currently in private preview and requests for access may be made here. Open Liberty IBM has released version 25.0.0.5 of Open Liberty featuring bug fixes and the ability for the MicroProfile Telemetry 2.0 (mpTelemetry-2.0) feature to collect and send Open Liberty HTTP access logs, such as export traces, metrics, and logs, to OpenTelemetry. Quarkus The Quarkus team has announced that Quarkus MCP Server 1.2.0 now supports streamable HTTP, along with the stdio and SSE transports, that make it possible to connect mobile applications and cloud services to MCP servers. While this is considered a full implementation, the Quarkus team plans future releases to include resumability and redelivery. Hibernate The release of Hibernate ORM 7.0.0.Final delivers new features such as: a new QuerySpecification interface that provides a common set of methods for all query specifications that allow for iterative, programmatic building of a query; and a migration from Hibernate Commons Annotations (HCANN) to the new Hibernate Models project for low-level processing of an application domain model. There is also support for the Jakarta Persistence 3.2 specification, the latest version targeted for Jakarta EE 11. More details on this release may be found in the release notes and the migration guide. The release of Hibernate Validator 9.0.0.Final provides bug fixes, dependency upgrades and notable changes such as: new constraints, @KorRRN and @BitcoinAddress, annotations that check for a valid Korean resident registration number and a well-formed BTC (Bitcoin) Mainnet address, respectively; and a new BOM that provides dependency management for all of the published artifacts. This release is the compatible implementation of the Jakarta Validation 3.1 specification. Details on both of these releases may be found in this blog post by Gavin King, Senior Distinguished Engineer at IBM and creator of Hibernate. Embabel Agent Framework Rod Johnson, former CEO at Atomist and father of the Spring Framework, has introduced the Embabel Agent Framework for the JVM written in Kotlin. As described by Johnson: It introduces some ideas that I think are novel: a planning step using a non-LLM AI algorithm; and a rich domain model that can expose behavior as LLM tools as well as in Java or Kotlin code. Embabel was built on Spring and offers a full MCP integration with Spring AI. InfoQ will follow up with a more detailed news story. JobRunr The first beta release of JobRunr 8.0.0 features: ahead-of-time scheduled recurring jobs where JobRunr schedules a recurring job as soon as the previous run is finished; and support for Kotlin serialization with a new KotlinxSerializationJsonMapper class, an implementation of the JsonMapper interface, for an improved experience when writing JobRunr applications in Kotlin. Further details on this release may be found in the release notes. Eclipse DataStore The Eclipse Foundation and Microstream have introduced a new open-source project, Eclipse DataGrid, designed to be a pure Java in-memory data processing layer for distributed EclipseStore applications. As a result, Microstream will open-source their in-memory data platform and transfer the codebase to Eclipse DataGrid. Features include: a distributed Java object graph model; seamless integration with the Java Streams API; and integration with Apache Lucene and Kubernetes. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2025/05/java-news-roundup-may19-2025/en/headerimage/java-istock-image-01-1748288532679.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThis week\u0026#39;s Java roundup for May 19th, 2025 features news highlighting: Java\u0026#39;s 30th birthday; the release of Hibernate ORM 7.0 and Hibernate Validator 9.0; the May 2025 edition of Open Liberty; the first beta release of JobRunr 8.0; and the introduction of Embabel, \u003cstrong\u003e\u003ccode\u003ejaz\u003c/code\u003e\u003c/strong\u003e, and Eclipse DataGrid.\u003c/p\u003e\n\n\u003ch4\u003eHappy 30th Birthday, Java!\u003c/h4\u003e\n\n\u003cp\u003eOn May 23rd, 1995 at the Sun World conference in San Francisco, California, Sun Microsystems formally introduced the Java programming language. Oracle marked this milestone with their \u003ca href=\"https://dev.java/community/java-30-anniversary/\"\u003e30th Birthday Event\u003c/a\u003e, hosted by Java Developer Advocates, \u003ca href=\"https://www.linkedin.com/in/ana-maria-mihalceanu-1508/\"\u003eAna-Maria Mihalceanu\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/billy-korando-129b8197/\"\u003eBilly Korando\u003c/a\u003e and \u003ca href=\"https://nipafx.dev/\"\u003eNicolai Parlog\u003c/a\u003e along with \u003ca href=\"https://www.linkedin.com/in/sharatchander/\"\u003eSharat Chander\u003c/a\u003e, Senior Director, Product Management \u0026amp; Developer Engagement at Oracle. This special six-hour event featured many guests on a variety of topics. InfoQ will follow up with a more detailed news story.\u003c/p\u003e\n\n\u003ch4\u003eOpenJDK\u003c/h4\u003e\n\n\u003cp\u003eWith Rampdown Phase One scheduled for June 5, 2025, the following JEPs have been elevated from \u003cstrong\u003eProposed to Target\u003c/strong\u003e to \u003cstrong\u003eTargeted\u003c/strong\u003e for JDK 25:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eJEP 519: \u003ca href=\"https://openjdk.org/jeps/519\"\u003eCompact Object Headers\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010121.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 515: \u003ca href=\"https://openjdk.org/jeps/515\"\u003eAhead-of-Time Method Profiling\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010156.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 514: \u003ca href=\"https://openjdk.org/jeps/514\"\u003eAhead-of-Time Command-Line Ergonomics\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010155.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 508: \u003ca href=\"https://openjdk.org/jeps/508\"\u003eVector API (Tenth Incubator)\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010108.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 507: \u003ca href=\"https://openjdk.org/jeps/507\"\u003ePrimitive Types in Patterns, instanceof, and switch (Third Preview)\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010152.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSimilarly, the following JEPs have been elevated from \u003cstrong\u003eCandidate\u003c/strong\u003e to \u003cstrong\u003eProposed to Target\u003c/strong\u003e for JDK 25:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eJEP 521: \u003ca href=\"https://openjdk.org/jeps/521\"\u003eGenerational Shenandoah\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010116.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 520: \u003ca href=\"https://openjdk.org/jeps/520\"\u003eJFR Method Timing \u0026amp; Tracing\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010112.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 518: \u003ca href=\"https://openjdk.org/jeps/518\"\u003eJFR Cooperative Sampling\u003c/a\u003e (announce \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010107.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\t\u003cli\u003eJEP 470: \u003ca href=\"https://openjdk.org/jeps/470\"\u003ePEM Encodings of Cryptographic Objects (Preview)\u003c/a\u003e (announced \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010117.html\"\u003ehere\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe reviews for the JEPs that have been \u003cstrong\u003eProposed to Target\u003c/strong\u003e are expected to conclude by Tuesday, May 27, 2025.\u003c/p\u003e\n\n\u003cp\u003eVersion 7.5.2 of the Regression Test Harness for the JDK, \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://openjdk.org/jtreg/\"\u003ejtreg\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, has been \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-May/010110.html\"\u003ereleased\u003c/a\u003e and ready for integration in the JDK. The most significant changes include: support for using the \u003cstrong\u003e\u003ccode\u003e${test.main.class}\u003c/code\u003e\u003c/strong\u003e template to use the current class name for test actions; the ability to configure the default timeout value in \u003cstrong\u003e\u003ccode\u003ejtreg\u003c/code\u003e\u003c/strong\u003e tests via a properties file; and support for \u003cstrong\u003e\u003ccode\u003e.jasm\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003e.jcod\u003c/code\u003e\u003c/strong\u003e files in patched Java modules. Further details on this release may be found in the \u003ca href=\"https://github.com/openjdk/jtreg/blob/jtreg-7.5.2+1/CHANGELOG.md\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eJDK 25\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/openjdk/jdk/releases/tag/jdk-25%2B24\"\u003eBuild 24\u003c/a\u003e of the JDK 25 \u003ca href=\"https://jdk.java.net/25/\"\u003eearly-access builds\u003c/a\u003e was made available this past week featuring \u003ca href=\"https://github.com/openjdk/jdk/compare/jdk-25%2B23...jdk-25%2B24\"\u003eupdates\u003c/a\u003e from Build 23 that include fixes for various \u003ca href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2025%20and%20%22resolved%20in%20build%22%20%3D%20b24%20order%20by%20component%2C%20subcomponent\"\u003eissues\u003c/a\u003e. More details on this release may be found in the \u003ca href=\"https://jdk.java.net/25/release-notes\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor \u003ca href=\"https://openjdk.org/projects/jdk/25/\"\u003eJDK 25\u003c/a\u003e, developers are encouraged to report bugs via the \u003ca href=\"https://bugreport.java.com/bugreport/\"\u003eJava Bug Database\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eJakarta EE\u003c/h4\u003e\n\n\u003cp\u003eIn his weekly \u003ca href=\"https://www.agilejava.eu/\"\u003eHashtag Jakarta EE\u003c/a\u003e blog, \u003ca href=\"https://se.linkedin.com/in/ivargrimstad\"\u003eIvar Grimstad\u003c/a\u003e, Jakarta EE Developer Advocate at the Eclipse Foundation, provided an \u003ca href=\"https://www.agilejava.eu/2025/05/25/hashtag-jakarta-ee-282/\"\u003eupdate\u003c/a\u003e on Jakarta EE 11 and Jakarta EE 12, writing:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe Jakarta EE 11 TCK is very close to being finalized, so it looks like we are on the path of getting the \u003ca href=\"https://jakarta.ee/specifications/platform/11/\"\u003eJakarta EE 11 Platform\u003c/a\u003e release out the door in the middle of June.\u003c/p\u003e\n\n\u003cp\u003eThe work with \u003ca href=\"https://jakarta.ee/specifications/platform/12/\"\u003eJakarta EE 12\u003c/a\u003e is on track according to the \u003ca href=\"https://jakartaee.github.io/platform/jakartaee12/JakartaEE12ReleasePlan\"\u003eJakarta EE 12 Release Plan\u003c/a\u003e. Plan reviews have been completed, and discussions right now are around which specifications to add (if any) to the Platform, and which to possibly deprecate.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe road to Jakarta EE 11 included five milestone releases, the release of the \u003ca href=\"https://jakarta.ee/specifications/coreprofile/\"\u003eCore Profile\u003c/a\u003e in December 2024, the release of \u003ca href=\"https://jakarta.ee/specifications/webprofile/\"\u003eWeb Profile\u003c/a\u003e in April 2025, and a first release candidate of the \u003ca href=\"https://jakarta.ee/specifications/platform/\"\u003ePlatform\u003c/a\u003e before its anticipated GA release in June 2025.\u003c/p\u003e\n\n\u003ch4\u003eSpring Framework\u003c/h4\u003e\n\n\u003cp\u003eIt was a busy week over at Spring as the various teams have delivered GA releases of \u003ca href=\"https://spring.io/projects/spring-boot\"\u003eSpring Boot\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-security\"\u003eSpring Security\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-authorization-server\"\u003eSpring Authorization Server\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-session\"\u003eSpring Session\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-integration\"\u003eSpring Integration\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-graphql\"\u003eSpring for GraphQL\u003c/a\u003e, \u003ca href=\"https://spring.io/projects/spring-ai\"\u003eSpring AI\u003c/a\u003e and \u003ca href=\"https://spring.io/projects/spring-ws\"\u003eSpring Web Services\u003c/a\u003e. Further details may be found in this InfoQ \u003ca href=\"https://www.infoq.com/news/2025/05/spring-news-roundup-may19-2025/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe Spring Data team has \u003ca href=\"https://spring.io/blog/2025/05/22/spring-data-ahead-of-time-repositories\"\u003eintroduced\u003c/a\u003e their plan to lower the barrier to entry related to the different approaches with technologies (GraalVM, CRaC, CDS, etc.) that reduce application startup times. With the upcoming release of Spring Data 2025.1 (AKA version 4.0), repositories will be migrating to Ahead-of-Time compilation. This means they will be shifting all the \u0026#34;\u003cem\u003erepository preparations that are done at application startup to build time.\u003c/em\u003e\u0026#34; This may be accomplished by setting the \u003cstrong\u003e\u003ccode\u003espring.aot.repositories.enabled\u003c/code\u003e\u003c/strong\u003e property to \u003cstrong\u003e\u003ccode\u003etrue\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch4\u003eMicrosoft Azure\u003c/h4\u003e\n\n\u003cp\u003eMicrosoft has \u003ca href=\"https://devblogs.microsoft.com/java/announcing-azure-command-launcher-for-java/\"\u003eintroduced\u003c/a\u003e their new Azure Command Launcher for Java, named \u003cstrong\u003e\u003ca href=\"https://learn.microsoft.com/en-us/java/jaz/overview\"\u003ejaz\u003c/a\u003e\u003c/strong\u003e, to address \u0026#34;\u003cem\u003esuboptimal resource utilization in cloud-based deployments, where memory and CPU tend to be dedicated for application workloads (use of containers and VMs) but still require intelligent management to maximize efficiency and cost-effectiveness.\u003c/em\u003e\u0026#34; This means that instead of writing:\u003c/p\u003e\n\n\u003cpre\u003e    \u003ccode\u003e\n$ JAVA_OPTS=\u0026#34;-XX:... several JVM tuning flags\u0026#34;\n$ java $JAVA_OPTS -jar myapp.jar\u0026#34;\n    \u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eDevelopers can now write:\u003c/p\u003e\n\n\u003cpre\u003e    \u003ccode\u003e\n$ jaz -jar myapp.jar\n    \u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ejaz\u003c/code\u003e\u003c/strong\u003e is currently in private preview and requests for access may be made \u003ca href=\"https://aka.ms/jaz-privatepreview\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eOpen Liberty\u003c/h4\u003e\n\n\u003cp\u003eIBM has \u003ca href=\"https://openliberty.io/blog/2025/05/20/25.0.0.5.html\"\u003ereleased\u003c/a\u003e version 25.0.0.5 of \u003ca href=\"https://openliberty.io/\"\u003eOpen Liberty\u003c/a\u003e featuring bug fixes and the ability for the \u003ca href=\"https://openliberty.io/docs/latest/microprofile-telemetry.html\"\u003eMicroProfile Telemetry 2.0\u003c/a\u003e (\u003cstrong\u003e\u003ccode\u003empTelemetry-2.0\u003c/code\u003e\u003c/strong\u003e) feature to collect and send Open Liberty \u003ca href=\"https://openliberty.io/docs/latest/access-logging.html\"\u003eHTTP access logs\u003c/a\u003e, such as export traces, metrics, and logs, to OpenTelemetry.\u003c/p\u003e\n\n\u003ch4\u003eQuarkus\u003c/h4\u003e\n\n\u003cp\u003eThe Quarkus team has \u003ca href=\"https://quarkus.io/blog/streamable-http-mcp/\"\u003eannounced\u003c/a\u003e that \u003ca href=\"https://github.com/quarkiverse/quarkus-mcp-server/blob/main/README.md\"\u003eQuarkus MCP Server\u003c/a\u003e 1.2.0 now supports streamable HTTP, along with the \u003cstrong\u003e\u003ccode\u003estdio\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003eSSE\u003c/code\u003e\u003c/strong\u003e transports, that make it possible to connect mobile applications and cloud services to MCP servers. While this is considered a full implementation, the Quarkus team plans future releases to include \u003ca href=\"https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#resumability-and-redelivery\"\u003eresumability and redelivery\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eHibernate\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://in.relation.to/2025/05/19/orm-70/\"\u003erelease\u003c/a\u003e of \u003ca href=\"https://hibernate.org/orm/\"\u003eHibernate ORM\u003c/a\u003e 7.0.0.Final delivers new features such as: a new \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.jboss.org/hibernate/orm/7.0/javadocs/org/hibernate/query/specification/QuerySpecification.html\"\u003eQuerySpecification\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e interface that provides a common set of methods for all query specifications that allow for iterative, programmatic building of a query; and a migration from \u003ca href=\"https://github.com/hibernate/hibernate-commons-annotations/\"\u003eHibernate Commons Annotations\u003c/a\u003e (HCANN) to the new \u003ca href=\"https://github.com/hibernate/hibernate-models/blob/main/README.adoc\"\u003eHibernate Models\u003c/a\u003e project for low-level processing of an application domain model. There is also support for the \u003ca href=\"https://jakarta.ee/specifications/persistence/3.2/\"\u003eJakarta Persistence 3.2\u003c/a\u003e specification, the latest version targeted for Jakarta EE 11. More details on this release may be found in the \u003ca href=\"https://github.com/hibernate/hibernate-orm/releases/tag/7.0.0\"\u003erelease notes\u003c/a\u003e and the \u003ca href=\"https://docs.jboss.org/hibernate/orm/7.0/migration-guide/migration-guide.html\"\u003emigration guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://in.relation.to/2025/05/20/hibernate-validator-9-0-0-Final/\"\u003erelease\u003c/a\u003e of \u003ca href=\"https://hibernate.org/validator/\"\u003eHibernate Validator\u003c/a\u003e 9.0.0.Final provides bug fixes, dependency upgrades and notable changes such as: new constraints, \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.jboss.org/hibernate/stable/validator/api/org/hibernate/validator/constraints/kor/KorRRN.html\"\u003e@KorRRN\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.jboss.org/hibernate/stable/validator/api/org/hibernate/validator/constraints/BitcoinAddress.html\"\u003e@BitcoinAddress\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, annotations that check for a valid Korean resident registration number and a well-formed BTC (Bitcoin) Mainnet address, respectively; and a new BOM that provides dependency management for all of the published artifacts. This release is the compatible implementation of the \u003ca href=\"https://jakarta.ee/specifications/bean-validation/3.1/\"\u003eJakarta Validation 3.1\u003c/a\u003e specification.\u003c/p\u003e\n\n\u003cp\u003eDetails on both of these releases may be found in this \u003ca href=\"https://in.relation.to/2025/05/20/hibernate-orm-seven/\"\u003eblog post\u003c/a\u003e by \u003ca href=\"https://www.linkedin.com/in/gavinking/\"\u003eGavin King\u003c/a\u003e, Senior Distinguished Engineer at IBM and creator of Hibernate.\u003c/p\u003e\n\n\u003ch4\u003eEmbabel Agent Framework\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/johnsonroda/\"\u003eRod Johnson\u003c/a\u003e, former CEO at Atomist and father of the Spring Framework, has \u003ca href=\"https://medium.com/@springrod/embabel-a-new-agent-platform-for-the-jvm-1c83402e0014\"\u003eintroduced\u003c/a\u003e the \u003ca href=\"https://github.com/embabel/embabel-agent/blob/main/README.md\"\u003eEmbabel Agent Framework\u003c/a\u003e for the JVM written in Kotlin. As described by Johnson:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt introduces some ideas that I think are novel: a planning step using a non-LLM AI algorithm; and a rich domain model that can expose behavior as LLM tools as well as in Java or Kotlin code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEmbabel was built on Spring and offers a full MCP integration with Spring AI. InfoQ will follow up with a more detailed news story.\u003c/p\u003e\n\n\u003ch4\u003eJobRunr\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003efirst beta release\u003c/em\u003e of JobRunr 8.0.0 features: ahead-of-time scheduled recurring jobs where JobRunr schedules a recurring job as soon as the previous run is finished; and support for Kotlin serialization with a new \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://github.com/jobrunr/jobrunr/blob/v8/language-support/jobrunr-kotlin-21-support/src/main/kotlin/org/jobrunr/kotlin/utils/mapper/KotlinxSerializationJsonMapper.kt\"\u003eKotlinxSerializationJsonMapper\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e class, an implementation of the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://github.com/jobrunr/jobrunr/blob/master/core/src/main/java/org/jobrunr/utils/mapper/JsonMapper.java\"\u003eJsonMapper\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e interface, for an improved experience when writing JobRunr applications in Kotlin. Further details on this release may be found in the \u003ca href=\"https://github.com/jobrunr/jobrunr/releases/tag/v8.0.0-beta.1\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eEclipse DataStore\u003c/h4\u003e\n\n\u003cp\u003eThe Eclipse Foundation and Microstream have \u003ca href=\"https://microstream.one/blog/2025/05/20/announcing-eclipse-data-grid-for-distributed-eclipsestore-applications/\"\u003eintroduced\u003c/a\u003e a new open-source project, \u003ca href=\"https://projects.eclipse.org/proposals/eclipse-datagrid\"\u003eEclipse DataGrid\u003c/a\u003e, designed to be a pure Java in-memory data processing layer for distributed \u003ca href=\"https://eclipsestore.io/\"\u003eEclipseStore\u003c/a\u003e applications. As a result, Microstream will open-source their in-memory data platform and transfer the codebase to Eclipse DataGrid. Features include: a distributed Java object graph model; seamless integration with the Java Streams API; and integration with \u003ca href=\"https://lucene.apache.org/\"\u003eApache Lucene\u003c/a\u003e and Kubernetes.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-05-26T00:00:00Z",
  "modifiedTime": null
}
