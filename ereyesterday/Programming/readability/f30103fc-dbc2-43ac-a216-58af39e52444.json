{
  "id": "f30103fc-dbc2-43ac-a216-58af39e52444",
  "title": "JBang Jash Brings Streamlined Process Execution to Java",
  "link": "https://www.infoq.com/news/2025/05/jbang-jash/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The JBang team has introduced JBang Jash, a Java library designed to simplify the execution of external processes and shell commands through a fluent and predictable API, aiming to addresses the common complexities and boilerplate developers face when using standard Java APIs like java.lang.ProcessBuilder and Runtime.exec for these tasks. By Diogo Carleto",
  "author": "Diogo Carleto",
  "published": "Fri, 09 May 2025 15:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Software Development",
    "Web Development",
    "Java",
    "JBang",
    "Development",
    "news"
  ],
  "byline": "Diogo Carleto",
  "length": 3731,
  "excerpt": "The JBang team has introduced JBang Jash, a Java library designed to simplify the execution of external processes and shell commands through a fluent and predictable API, aiming to addresses the commo",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250506220132/apple-touch-icon.png",
  "text": "The JBang team has introduced JBang Jash (pronounced Jazz), a Java library designed to simplify the execution of external processes and shell commands through a fluent and predictable API, aiming to addresses the common complexities and boilerplate developers face when using standard Java APIs like ProcessBuilder and the overloaded exec() method, defined in Runtime, for these tasks. JBang Jash aims to facilitate intuitive and chainable process execution, automatically handling the underlying management of input/output streams. Non-zero exit codes are handled as exceptions by default, a behavior which can be customized. It also supports piping commands in a pipeline, eliminating the needs of manual stream forwarding, and also detects the appropriate shell environment, such as Bash, CMD, or Powershell, based on the operation system. Let's see a shell example using pure Java that requires manual stream handling, and explicit error checking, the example just run the \"git status\" and capture the output: //without Jash ProcessBuilder builder = new ProcessBuilder(\"git\", \"status\"); builder.redirectErrorStream(true); Process process = builder.start(); BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream())); String line; while ((line = reader.readLine()) != null) { System.out.println(line); } int exitCode = process.waitFor(); if (exitCode != 0) { throw new RuntimeException(\"Process exited with error code \" + exitCode); } and with Jash: Jash.start(\"git\", \"status\").stream().forEach(System.out::println); Let's also see an example of how to piping commands in Java, where a lowercase text is transformed to uppercase by piping the output of echo into the tr command: //without Jash ProcessBuilder echoBuilder = new ProcessBuilder(\"echo\", \"hello world\"); Process echoProcess = echoBuilder.start(); ProcessBuilder trBuilder = new ProcessBuilder(\"tr\", \"a-z\", \"A-Z\"); Process trProcess = trBuilder.start(); try ( BufferedReader reader = new BufferedReader(new InputStreamReader(echoProcess.getInputStream())); BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(trProcess.getOutputStream())) ) { String line; while ((line = reader.readLine()) != null) { writer.write(line); writer.newLine(); } writer.flush(); trProcess.getOutputStream().close(); // signal EOF to tr } int echoExit = echoProcess.waitFor(); int trExit = trProcess.waitFor(); if (echoExit != 0) { throw new RuntimeException(\"echo failed with code \" + echoExit); } try (BufferedReader resultReader = new BufferedReader(new InputStreamReader(trProcess.getInputStream()))) { String line; while ((line = resultReader.readLine()) != null) { System.out.println(line); // Expected: HELLO WORLD } } if (trExit != 0) { throw new RuntimeException(\"tr failed with code \" + trExit); } and with Jash: String result = Jash.start(\"echo\", \"hello world\") .pipe(\"tr\", \"a-z\", \"A-Z\") .get(); System.out.println(result.trim()); // Outputs: HELLO WORLD JBang Jash is based on a project named \"fluent-process\" by OnGres, Inc. in 2020. After years without an official release, the project was forked and renamed to \"jash\" (a reference to Java and Shell) in 2025 to reflect its focus on providing a more idiomatic Java 17+ interface for working with shell processes and streams. It is important to note that Jash can be integrated to any Java Project, without needing to use the JBang CLI tool. More examples and details about JBang Jash can be found in the GitHub repository. About the Author Diogo Carleto",
  "image": "https://res.infoq.com/news/2025/05/jbang-jash/en/headerimage/generatedHeaderImage-1746802170927.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe \u003ca href=\"https://www.jbang.dev/\"\u003eJBang\u003c/a\u003e team has introduced \u003ca href=\"https://github.com/jbangdev/jbang-jash/blob/main/README.md\"\u003eJBang Jash\u003c/a\u003e (pronounced Jazz), a Java library designed to simplify the execution of external processes and shell commands through a fluent and predictable API, aiming to addresses the common complexities and boilerplate developers face when using standard Java APIs like \u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/ProcessBuilder.html\"\u003eProcessBuilder\u003c/a\u003e\u003c/code\u003e and the overloaded \u003ccode\u003eexec()\u003c/code\u003e method, defined in \u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/Runtime.html\"\u003eRuntime\u003c/a\u003e\u003c/code\u003e, for these tasks.\u003c/p\u003e\n\n\u003cp\u003eJBang Jash aims to facilitate intuitive and chainable process execution, automatically handling the underlying management of input/output streams. Non-zero exit codes are handled as exceptions by default, a behavior which can be customized. It also supports piping commands in a pipeline, eliminating the needs of manual stream forwarding, and also detects the appropriate shell environment, such as Bash, CMD, or Powershell, based on the operation system.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s see a shell example using pure Java that requires manual stream handling, and explicit error checking, the example just run the \u0026#34;git status\u0026#34; and capture the output:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e//without Jash\nProcessBuilder builder = new ProcessBuilder(\u0026#34;git\u0026#34;, \u0026#34;status\u0026#34;);\nbuilder.redirectErrorStream(true);\nProcess process = builder.start();\n\nBufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\nString line;\nwhile ((line = reader.readLine()) != null) {\n   System.out.println(line);\n}\n\nint exitCode = process.waitFor();\nif (exitCode != 0) {\n   throw new RuntimeException(\u0026#34;Process exited with error code \u0026#34; + exitCode);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand with Jash:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eJash.start(\u0026#34;git\u0026#34;, \u0026#34;status\u0026#34;).stream().forEach(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eLet\u0026#39;s also see an example of how to piping commands in Java, where a lowercase text is transformed to uppercase by piping the output of \u003ccode\u003eecho\u003c/code\u003e into the \u003ccode\u003etr\u003c/code\u003e command:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e//without Jash\nProcessBuilder echoBuilder = new ProcessBuilder(\u0026#34;echo\u0026#34;, \u0026#34;hello world\u0026#34;);\nProcess echoProcess = echoBuilder.start();\n\nProcessBuilder trBuilder = new ProcessBuilder(\u0026#34;tr\u0026#34;, \u0026#34;a-z\u0026#34;, \u0026#34;A-Z\u0026#34;);\nProcess trProcess = trBuilder.start();\n\ntry (\n      BufferedReader reader = new BufferedReader(new InputStreamReader(echoProcess.getInputStream()));\n      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(trProcess.getOutputStream()))\n) {\n   String line;\n   while ((line = reader.readLine()) != null) {\n      writer.write(line);\n      writer.newLine();\n   }\n   writer.flush();\n   trProcess.getOutputStream().close(); // signal EOF to tr\n}\n\nint echoExit = echoProcess.waitFor();\nint trExit = trProcess.waitFor();\n\nif (echoExit != 0) {\n   throw new RuntimeException(\u0026#34;echo failed with code \u0026#34; + echoExit);\n}\n\ntry (BufferedReader resultReader = new BufferedReader(new InputStreamReader(trProcess.getInputStream()))) {\n   String line;\n   while ((line = resultReader.readLine()) != null) {\n      System.out.println(line); // Expected: HELLO WORLD\n   }\n}\n\nif (trExit != 0) {\n   throw new RuntimeException(\u0026#34;tr failed with code \u0026#34; + trExit);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand with Jash:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eString result = Jash.start(\u0026#34;echo\u0026#34;, \u0026#34;hello world\u0026#34;)\n      .pipe(\u0026#34;tr\u0026#34;, \u0026#34;a-z\u0026#34;, \u0026#34;A-Z\u0026#34;)\n      .get();\n\nSystem.out.println(result.trim()); // Outputs: HELLO WORLD\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eJBang Jash is based on a project named \u0026#34;fluent-process\u0026#34; by OnGres, Inc. in 2020. After years without an official release, the project was forked and renamed to \u0026#34;jash\u0026#34; (a reference to Java and Shell) in 2025 to reflect its focus on providing a more idiomatic Java 17+ interface for working with shell processes and streams.\u003c/p\u003e\n\n\u003cp\u003eIt is important to note that Jash can be integrated to any Java Project, without needing to use the JBang CLI tool.\u003c/p\u003e\n\n\u003cp\u003eMore examples and details about JBang Jash can be found in the \u003ca href=\"https://github.com/jbangdev/jbang-jash\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Diogo-Carleto\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eDiogo Carleto\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-05-09T00:00:00Z",
  "modifiedTime": null
}
