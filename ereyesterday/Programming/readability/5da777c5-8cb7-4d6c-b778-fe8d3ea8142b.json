{
  "id": "5da777c5-8cb7-4d6c-b778-fe8d3ea8142b",
  "title": "Podcast: Building a Product-First Engineering Culture in the Age of AI",
  "link": "https://www.infoq.com/podcasts/building-product-first-engineering-culture/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "In this podcast, Shane Hastie, Lead Editor for Culture \u0026 Methods, spoke to Zach Lloyd about building a product-first engineering culture, and the critical importance of developers learning to effectively use AI tools while maintaining responsibility for code quality and understanding fundamental programming principles. By Zach Lloyd",
  "author": "Zach Lloyd",
  "published": "Fri, 18 Jul 2025 11:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Careers",
    "Engineering Culture Podcast",
    "Teamwork",
    "Productivity",
    "Artificial Intelligence",
    "Leadership",
    "Developer Experience",
    "AI, ML \u0026 Data Engineering",
    "Culture \u0026 Methods",
    "podcast"
  ],
  "byline": "Shane Hastie",
  "length": 24635,
  "excerpt": "Shane Hastie, Lead Editor for Culture \u0026 Methods, spoke to Zach Lloyd about building a product-first engineering culture, and the critical importance of developers learning to effectively use AI tools.",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250717100249/apple-touch-icon.png",
  "text": "Transcript Shane Hastie: Good day folks. This is Shane Hastie for the InfoQ Engineering Culture podcast. Today I get to sit down with Zach Lloyd. Zach, welcome. Thanks for taking the time to talk to us. Introductions [00:48] Zach Lloyd: I'm really excited to be here, Shane. Thanks for having me. Shane Hastie: I'd like to start these conversations with who's Zach? Zach Lloyd: Let's see how I describe myself. So I'm an engineer I'd say first and foremost. I've been a software engineer for, oh God, 25-ish years now. I've had a career where I've gotten the chance to build some really cool stuff. I was a principal engineer at Google. I used to lead engineering for the Google Docs Suite. I helped build really a lot of Google's spreadsheet product, which was very, very cool experience. I was also an engineering manager and managed a significant team of engineers there. I have been out of Google. I'm a two-time startup founder and my current company is a company called Warp, which is a AI-powered developer tool. It's really like a reimagination of the command line terminal, such that as a developer you can, instead of typing commands, you can just tell your terminal what you want it to do and it will agentically do it for you. I had a brief stint as the CTO at Time Magazine, which was interesting. So I've kind of been, it was my only real thing outside of the technology industry. I'd say what really motivates me is I love building software products. My goal is to just build stuff that is useful for people, whether it's useful for knowledge workers or useful, most recently for developers, love solving interesting technical problems. But really I'm passionate about building something that other people find useful. That's a quick summary. Shane Hastie: Cool. One of the things that got us in touch was you published the Warp, how we work. I'd call it a page, a site, a ... There are a whole lot of principles and ideas. What made you want to make that so visible? The \"How we Work\" document [02:49] Zach Lloyd: Yes. So what it is it's basically my accumulated, I guess, knowledge from being an engineer and an engineering manager. I had a period in between the two companies that I founded where I was like, \"You know what? I really want to get this all down. I want to get this down from my head, how I think about hiring, how I think about building an engineering culture, how I think about values, all the way into the minutia of how people should structure pull requests and use feature flags, really down into this is my playbook, or if I were to build an engineering team, build an engineering organization or product team, what are the key things that matter to me?\" I put it down initially for myself and then I shared it with friends. I used it a little bit as a basis for doing some consulting for other startups and advising for other startups. And then when I founded Warp, I was like, this is an awesome thing to publish because from an internal perspective, it's like our operating system as a team, and then from an external perspective it lets people get a very good sense of the culture we're building and how we work. And so it lets people who are interested in working with us self-select in. It lets people who are like, \"No, I don't like that culture\", be like, \"Okay, that's not the team for me\". And that's also, it's a very useful tool from a hiring standpoint in that regard. Shane Hastie: So what would you say is the core of culture? Core engineering culture values [04:33] Zach Lloyd: I think it starts with the values that we care about. I think different leaders, different cultures are going to value different things, but for me, the type of place that I want to work and the type of people I want to work with, there's a common set of values that I care about. And for me, those happen to be sort of honesty. Are we able to be very honest and transparent at all times, kind of a no BS type culture? Is it a culture where people are concerned with hierarchy? 'Cause I really don't like that. I think that the best ideas are coming from any place in the company. Is it a place where it's like people's ideas, the best ideas went out? That really matters to me. A second value that I, again, this might be different for other people, but for me was being pragmatic, and to me that's where I see things go wrong. I've seen things go wrong in my career is when there's dogmatism or very rigid thinking in how you do something. I want to work someplace where we realize that solving real world problems is messy, that perfection can actually get in the way and that we're trying to make a reasonable set of trade-offs and having like-minded people who aren't so anchored to particular ideas that they won't adjust them in sort of the face of new information, that really matters to me. Product-first vs code-first engineers [06:03] A third value for us is being user-focused or product-focused. The reason I bring this up, so I wrote this essay which I think is maybe somewhat controversial where I distinguish between engineers who are product-first and engineers who are code-first. And as a product-first engineer, what I'm looking for is are you always thinking about the why that you're building something? What problem is it solving for a user? And if you can't name the problem, I think probably going off track. Whereas sometimes what I think of more as a code-first approach is there's a class of engineering who's like, they're really into building with the latest technology. Are my APIs right? Are my abstractions right? And it's like looking at the code for the sake of the code. And I don't care about that. I care about good code in the service of a great user experience. I don't care about ... Users don't use code, let me put it like that. They use the thing that you've built. And so I really emphasize that. And that actually is a great filter. Some engineers do not agree with what I'm saying at all here, but to me it's very, very important value. So I would start with if you're someone who's building a team or you're hiring or you're managing, I would always start with what are those core values that you really care about, that you believe in, that you can embody? And then try to build a team of people who subscribe and believe in those same values I think is a good place to start. Shane Hastie: One of the things that I see in there is just fix small issues because that almost contradict with the product-first versus the code-first engineer? Zach Lloyd: No, 'cause the idea behind that is that it encourages a culture of ownership. So it's like the anti-pattern to me would be working someplace where when someone sees an issue, they throw it into Slack or the bug tracker or they're like, \"Hey, I noticed this other engineer on the team broke this thing. They have to fix it\". And so it creates communication overhead and it creates a lack of ownership. So what I'm trying to accomplish with that particular rule or guideline is like we're all owners of this thing. We also feel responsibility. If you see something, just fix it. And I'm assuming that they're fixing something that matters to a user. Let me put it that way. If it doesn't matter to a user, then don't fix it. But if it's something that is impacting a user, I would love, I'd love it when engineers just fix stuff. Shane Hastie: You said that this feeds into your hiring process. How do you hire and how do you hire well? How do you hire well? [08:59] Zach Lloyd: Yes, this is really, really hard. I think it's hard to hire perfectly. So we are looking for generalists, product-focused engineers who have a strong fundamental background in computer science and programming, and also who subscribe to these values, put it that way. So finding those people is like, those are great people. Everyone wants those people. It's hard to find those people. When we hire, it basically comes, there's three sources of people. I don't know how into the weeds to go here, but you have people who apply. So you have a sort of inbound. You have people who are referred from people who currently work there. And then you have people who aren't looking for a job, who we have identified is like, \"Hey, this person looks like an awesome potential fit. Who we reach out to?\" And that's the three things. It's essentially a sales process, whether you're starting your own company or you're trying to attract people to your team inside of a big organization. I remember doing this at Google. I was constantly trying to sell great engineers to come work with me. So I think you have to get good at communicating why someone should do that. And then, once you've done that, you got to know what you're looking for. And so for us it's like product-focused, generalists, really, really strong CS foundations. The reason I focus on generalists by the way, is it's partly the domain that I'm in. We're not doing super specialized stuff. You don't need PhD-level expertise, although we're now opening up some roles on the AI side that are a little bit more specialized. But in general, I like people who just have great problem-solving skills, agnostic to the technology 'cause the technologies, we tend to choose the right technology to solve the problem. And so anchoring on a technology ahead of time is like an anti-pattern to me. I like people who can work fully across the stack. So I never hire back end versus front end. And again, there's totally valid differing schools of thought, but to me the best way to get a product feature that works well for a user is if the engineer builds the entire thing. There's some efficiency here to that, but I think it aligns the incentive of the engineer and the user the best. So those are some of the principles. Shane Hastie: What does great technical leadership look like? Models of technical leadership [11:29] Zach Lloyd: Yes, great question. Actually let me ask you this. Are you asking about management? I see leadership. How do you think of it? Or should I just give you my whole lay of the land? Shane Hastie: Let's go top to bottom. Zach Lloyd: Yes. Okay. So there's this traditional distinction where it's like you can have people who are tech leads, maybe not managers, but are like your architects. They're super knowledgeable about the system. And then flip that they have a counterpart who is a engineering manager whose specialty is maybe more like people management type thing. So it's like how do you help an engineer develop their career? How do you help them get promoted? And at most big tech companies, those roles bifurcate. So you have two separate things. My personal view on this is that I actually like a combo. So when I was at Google, I was always on what was the individual contributor track, but I managed people and I always found that my authority as a manager came at least in part because I understood the technology very, very deeply and still contributed as an engineer. That's my personal preference. However, I've seen people be very successful just as pure ICs. If they're going to do that, I think they really need to excel in terms of teaching other people on their team the technical skills in terms of doing things like great code review, great design documents, really modeling what technical excellence looks like so that the people who they're trying to get to build things the right way, do that, see what technical excellence is. On the flip side, if you're an engineering manager, I think that the thing that makes the most successful engineering managers I know successful is really deeply felt empathy and really aligning with the interests and being very good at understanding what is the motivation of an engineer who's on their team? Are they trying to up-level their technical skills? Are they trying to get exposed to more leadership opportunities? Are they trying to run bigger projects? I'm not quite as great at that. I mean I'm not bad at that, but there are some people who I've worked with who just excel and really take joy out of helping other engineers on their team succeed and understanding what their goals are. So that's how I would think about that role. Shane Hastie:How do we help engineers grow their careers? Growing engineering careers [14:08] Zach Lloyd: There's a bunch of ways to answer this. So depending on where you're at in your career, there's probably some next up skillset that you want to improve upon. So when you're really early in your career, and we hire a bunch of people who are right out of college at work, the first thing I emphasize is just become an excellent software engineer. And what that means is can you write code that is production quality code? Is it well-tested? When there's a bug in it, are you proactive in fixing it? Do you take code review comments well and adjust? Do you really learn the language? So at the beginning of the career, my advice is hone your technical skills, just become an excellent IC engineer. Usually when engineers are a couple years into doing that, I think that the focus shifts a bit to taking on more responsibility, shipping things that have more impact, maybe leading smaller teams, building some other skills that you're going to need if eventually you're going to be either the technical lead archetype or you're going to be an engineering manager. And so I think that's about finding the right opportunities when people have demonstrated that they have the technical skills to take on projects that have higher scope or projects that require a leadership aspect. As an engineering manager, the trickiness there tends to be like, are there enough opportunities for that type of thing? At Google, I saw some crazy anti-patterns around optimizing for people's promotions, which was really interesting. At Google, I don't know how much digressing to this, but at Google, everyone is at a level. So you start as a SWE-2 or SWE-3, become a senior engineer or staff engineer or senior staff engineer or principal engineer. And a lot of what seems to drive career progression is can you get to that next level on the ladder? And each level on the ladder has a very well-defined rubric and that rubric is sliced up into, I think I forget what it is, like four things. It's like impact, scope, leadership, whatever. And so there's a lot of managing to the rubric, which I do think can create these perverse incentives where it's like you're not necessarily managing to what the person truly needs in order to develop themselves. It's like you're managing so that you can put together a promotion packet that a committee of other managers will look at and be like, \"Yes, this person deserves to go up one rung on the ladder\". And there's huge amounts of money at stake in this, right? It's a very high stakes type thing. And so that I try to stay away from. We don't organize Warps career progression around that. And the other problem with that is that it creates adverse business outcomes because you end up having as a manager to create opportunities for people to demonstrate these checkbox skills on the ladder, which the canonical examples, you make a project that doesn't need to exist in order to give someone a leadership opportunity to ship a project and you end up, this happens all the time. It's like a crazy system. I would try to avoid that and try and just focus on genuinely what is it that the person wants to grow at and how can you help them succeed. Shane Hastie: I know you have some thoughts on, we're in the world of AI today, on engineers using the generative AI tools. AI tools for engineers [17:47] Zach Lloyd: So I just posted something on LinkedIn on this and I got in a lot of trouble, but my thought is it's not a question of if, it's a question of when as far as developers really need to learn to use these tools as best they can to ship more software. There is fear around them. There is I think rightful frustration around using them. I don't know if you've used them, but if you used them six months ago, nine months ago and you asked AI to build you a feature, you'd probably get something that didn't work very well and you might just decide, \"Hey, this isn't worth my time. This isn't worthwhile. Technology's not good enough\". The technology is changing extremely quickly to the point where I think it is useful not for every task. I also think the correct way of thinking about it right now as an engineer is as another tool in your toolbox. So it's raising the abstraction level from, it's not that dissimilar, the shift from assembly language to programming language, formal programming language. And then even within formal programming languages, there's a huge difference between working in C and working in Python or JavaScript. And this is a step change to where the way that you can work is by simply directing an AI to do some amount of the work for you. You should consider it like a draft where you then review it and iterate and get to a point where it's at the quality bar where if you had written it by hand that it's still there. But I basically think as an engineer, if you want to continue in this field, you need to start thinking of yourself not as a coder, but as a producer of software and the way you produce software, you have to use the best possible method for that. And that might not be writing code by hand. That might be guiding AI and hopping in and iterating with it. And so that's my take on it. It is a struggle as an engineering manager and leader to change the habits of people on my team to approach programming problems in this way. And this is where I got in trouble on LinkedIn because I was like, \"How do you get senior engineers who want to use these tools?\" And then a lot of people were like, \"The engineers know best about what tools they should be using. Why are you telling them to use these tools? They'll use them when the tools are good enough\". And there's truth to that. But I actually think people need a nudge and people need to learn a new skill set 'cause there's actually skill in how do you prompt the AI, how do you work with it. So that's my take on it. Shane Hastie: One of the things we have seen with the take-up of these tools, a couple of things happening. One, pull requests seem to have got bigger. One study done in Australia, 300% more code being produced when using the generative AI tools, and about 400% more bugs. AI tool challenges [20:54] Zach Lloyd: Yes. That doesn't surprise me. More code equals more bugs almost axiomatically. And one of the best engineers I ever worked with a Google, I was like, \"What's your main principle for writing great code?\" And he's like, \"Write less code\". The more you can delete, the better. So that's not a good sign. I would say that using these tools, you cannot advocate responsibility for the quality of the code any more than if you were using IntelliSense in your IDE and be like, \"Oh well, the tab complete, put this function so I just used it\". That's totally unacceptable. And so you as an engineer using the tool, have to maintain responsibility for the thing that you're submitting. I also think one of just the cardinal rules of good software engineering is small PRs, small discrete changes. And so one of the anti-patterns to me in using AI is trying to one shot or zero shot through one prompt a huge thing. And this is where I think there's actual skill in using this stuff. You should still decompose the problem exactly as though you were going to write the components one by one, but you can just save a ton of time. And that's actually the interesting part of the engineering a lot of the times, it's like what's the right decomposition? And then you should use the AI to help you write the components. But what you shouldn't do is be like, \"Write me this whole app that does this or this whole system that does that\", because the more code there is, the less you're going to comprehend it, the more bugs that are going to be. And so that's, I think I diagnosed that as a misuse, not an intrinsic issue with AI. That's my take. But I don't know, people probably disagree. Shane Hastie: For the junior engineer who's coming into the profession today and these tools are their norm, one of the concerns that I've certainly heard and seen is how do we help that person get the underlying skills to do that decomposition well? The impact on junior engineers? [23:13] Zach Lloyd: Yes, it's a great question. I have some friends who run coding bootcamps and I know professors of CS and I think that you, it's like when I was in college, I learned C, and I've never written a professional program in C in my life, but I am glad that I learned C because it lets you learn, understand how memory works, how the function call stack works, basically how computers work. And so what I think will be problematic for junior engineers is if you don't learn the basics and you are just trying to go straight to the AI that is making your apps for you, I think that's a recipe for stuff that doesn't work in a production environment. I think that's fine for prototyping. I think that's fine for low stakes applications. Like you're making, I don't know, a landing page or something like that, but I don't think anyone who's working at Google or at a bank or at SpaceX or whatever should ever be generating code without an understanding of how code works. So I would still teach people the fundamentals. And then I think that to your question, how do you teach people to do production software engineering, decomposing things right, I don't know, the main way that I learned that I still think works, which is I got code reviews and design doc reviews from engineers who knew what they were doing when I didn't know what I was doing. And I think this is one of the reason why I think it's important that the more senior engineers learn how to use these AI tools is because they'll learn how to review and improve the experience of junior developers using these AI tools. Changes needed in the ways we train engineers [25:11] I think a bad outcome would be a world where the more experienced generation of developers shuns these tools. The junior developers use these tools. The more advanced or experienced developer just think that the junior developers are misusing these tools and it's just a mess. So I think there needs to be almost a redesign of the engineering curriculum and engineering like how you teach an engineer in light of the fact that these tools now exist. That's what I think. Shane Hastie: Yes. I have a grandson who's studying computer science at the moment, and they're making them write their test programs on paper by hand. Zach Lloyd: Oh my god. What? Is that to prevent cheating with AI or what is that? Shane Hastie: That is what I believe it's about. Zach Lloyd: That's not good. Wait, that's not ... Yes. I think that the curriculum has to be re-imagined so that you learn the basics, but then you learn the tools you're going to use as a pro engineer, and AI is definitely going to be one of them, and you learn how to use it correctly. The risk is this stuff is changing so so quickly that I think it's very hard to know what the heck to do 'cause the technology has advanced tremendously in the last six to nine months, so it's a hard thing to figure out exactly what to do. Shane Hastie: Well, Zach, we've meandered a lot, a lot of really interesting stuff in there. If people want to continue the conversation, where do they find you? Zach Lloyd: Yes, I think the easiest thing is to just reach out to me on LinkedIn. I'll respond to people DMing me there. I'm also on Twitter, X. I don't use that as much. I think for this group of people, LinkedIn is probably the best place. Shane Hastie: Well, thank you so much for taking the time to talk to us. Zach Lloyd: Thank you for having me, Shane. This was awesome. I hope people enjoyed it. Mentioned: Code first vs product first article  Zach Lloyd on LinkedIn About the Author Zach Lloyd You can keep up-to-date with the podcasts via our RSS Feed, and they are available via SoundCloud, Apple Podcasts, Spotify, Overcast and YouTube. From this page you also have access to our recorded show notes. They all have clickable links that will take you directly to that part of the audio.",
  "image": "https://res.infoq.com/podcasts/building-product-first-engineering-culture/en/card_header_image/zach-loyd-twitter-card-1752490298012.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t \t\u003ch2\u003eTranscript\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Good day folks. This is Shane Hastie for the InfoQ Engineering Culture podcast. Today I get to sit down with Zach Lloyd. Zach, welcome. Thanks for taking the time to talk to us.\u003c/p\u003e\n\n\u003ch2\u003eIntroductions [00:48]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: I\u0026#39;m really excited to be here, Shane. Thanks for having me.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: I\u0026#39;d like to start these conversations with who\u0026#39;s Zach?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Let\u0026#39;s see how I describe myself. So I\u0026#39;m an engineer I\u0026#39;d say first and foremost. I\u0026#39;ve been a software engineer for, oh God, 25-ish years now. I\u0026#39;ve had a career where I\u0026#39;ve gotten the chance to build some really cool stuff. I was a principal engineer at Google. I used to lead engineering for the Google Docs Suite. I helped build really a lot of Google\u0026#39;s spreadsheet product, which was very, very cool experience. I was also an engineering manager and managed a significant team of engineers there.\u003c/p\u003e\n\n\u003cp\u003eI have been out of Google. I\u0026#39;m a two-time startup founder and my current company is a company called Warp, which is a AI-powered developer tool. It\u0026#39;s really like a reimagination of the command line terminal, such that as a developer you can, instead of typing commands, you can just tell your terminal what you want it to do and it will agentically do it for you.\u003c/p\u003e\n\n\u003cp\u003eI had a brief stint as the CTO at Time Magazine, which was interesting. So I\u0026#39;ve kind of been, it was my only real thing outside of the technology industry.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;d say what really motivates me is I love building software products. My goal is to just build stuff that is useful for people, whether it\u0026#39;s useful for knowledge workers or useful, most recently for developers, love solving interesting technical problems. But really I\u0026#39;m passionate about building something that other people find useful. That\u0026#39;s a quick summary.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Cool.\u003c/p\u003e\n\n\u003cp\u003eOne of the things that got us in touch was you published the Warp, how we work.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;d call it a page, a site, a ... There are a whole lot of principles and ideas. What made you want to make that so visible?\u003c/p\u003e\n\n\u003ch2\u003eThe \u0026#34;How we Work\u0026#34; document [02:49]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes. So what it is it\u0026#39;s basically my accumulated, I guess, knowledge from being an engineer and an engineering manager. I had a period in between the two companies that I founded where I was like, \u0026#34;You know what? I really want to get this all down. I want to get this down from my head, how I think about hiring, how I think about building an engineering culture, how I think about values, all the way into the minutia of how people should structure pull requests and use feature flags, really down into this is my playbook, or if I were to build an engineering team, build an engineering organization or product team, what are the key things that matter to me?\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eI put it down initially for myself and then I shared it with friends. I used it a little bit as a basis for doing some consulting for other startups and advising for other startups.\u003c/p\u003e\n\n\u003cp\u003eAnd then when I founded Warp, I was like, this is an awesome thing to publish because from an internal perspective, it\u0026#39;s like our operating system as a team, and then from an external perspective it lets people get a very good sense of the culture we\u0026#39;re building and how we work. And so it lets people who are interested in working with us self-select in. It lets people who are like, \u0026#34;No, I don\u0026#39;t like that culture\u0026#34;, be like, \u0026#34;Okay, that\u0026#39;s not the team for me\u0026#34;. And that\u0026#39;s also, it\u0026#39;s a very useful tool from a hiring standpoint in that regard.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: So what would you say is the core of culture?\u003c/p\u003e\n\n\u003ch2\u003eCore engineering culture values [04:33]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: I think it starts with the values that we care about. I think different leaders, different cultures are going to value different things, but for me, the type of place that I want to work and the type of people I want to work with, there\u0026#39;s a common set of values that I care about. And for me, those happen to be sort of honesty. Are we able to be very honest and transparent at all times, kind of a no BS type culture? Is it a culture where people are concerned with hierarchy? \u0026#39;Cause I really don\u0026#39;t like that. I think that the best ideas are coming from any place in the company. Is it a place where it\u0026#39;s like people\u0026#39;s ideas, the best ideas went out? That really matters to me.\u003c/p\u003e\n\n\u003cp\u003eA second value that I, again, this might be different for other people, but for me was being pragmatic, and to me that\u0026#39;s where I see things go wrong. I\u0026#39;ve seen things go wrong in my career is when there\u0026#39;s dogmatism or very rigid thinking in how you do something. I want to work someplace where we realize that solving real world problems is messy, that perfection can actually get in the way and that we\u0026#39;re trying to make a reasonable set of trade-offs and having like-minded people who aren\u0026#39;t so anchored to particular ideas that they won\u0026#39;t adjust them in sort of the face of new information, that really matters to me.\u003c/p\u003e\n\n\u003ch2\u003eProduct-first vs code-first engineers [06:03]\u003c/h2\u003e\n\n\u003cp\u003eA third value for us is being user-focused or product-focused. The reason I bring this up, so I wrote this essay which I think is maybe somewhat controversial where I distinguish between engineers who are product-first and engineers who are code-first. And as a product-first engineer, what I\u0026#39;m looking for is are you always thinking about the why that you\u0026#39;re building something? What problem is it solving for a user?\u003c/p\u003e\n\n\u003cp\u003eAnd if you can\u0026#39;t name the problem, I think probably going off track. Whereas sometimes what I think of more as a code-first approach is there\u0026#39;s a class of engineering who\u0026#39;s like, they\u0026#39;re really into building with the latest technology. Are my APIs right? Are my abstractions right? And it\u0026#39;s like looking at the code for the sake of the code. And I don\u0026#39;t care about that. I care about good code in the service of a great user experience. I don\u0026#39;t care about ... Users don\u0026#39;t use code, let me put it like that. They use the thing that you\u0026#39;ve built. And so I really emphasize that. And that actually is a great filter. Some engineers do not agree with what I\u0026#39;m saying at all here, but to me it\u0026#39;s very, very important value.\u003c/p\u003e\n\n\u003cp\u003eSo I would start with if you\u0026#39;re someone who\u0026#39;s building a team or you\u0026#39;re hiring or you\u0026#39;re managing, I would always start with what are those core values that you really care about, that you believe in, that you can embody? And then try to build a team of people who subscribe and believe in those same values I think is a good place to start.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: One of the things that I see in there is just fix small issues because that almost contradict with the product-first versus the code-first engineer?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: No, \u0026#39;cause the idea behind that is that it encourages a culture of ownership. So it\u0026#39;s like the anti-pattern to me would be working someplace where when someone sees an issue, they throw it into Slack or the bug tracker or they\u0026#39;re like, \u0026#34;Hey, I noticed this other engineer on the team broke this thing. They have to fix it\u0026#34;. And so it creates communication overhead and it creates a lack of ownership. So what I\u0026#39;m trying to accomplish with that particular rule or guideline is like we\u0026#39;re all owners of this thing. We also feel responsibility. If you see something, just fix it. And I\u0026#39;m assuming that they\u0026#39;re fixing something that matters to a user. Let me put it that way. If it doesn\u0026#39;t matter to a user, then don\u0026#39;t fix it. But if it\u0026#39;s something that is impacting a user, I would love, I\u0026#39;d love it when engineers just fix stuff.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: You said that this feeds into your hiring process. How do you hire and how do you hire well?\u003c/p\u003e\n\n\u003ch2\u003eHow do you hire well? [08:59]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes, this is really, really hard. I think it\u0026#39;s hard to hire perfectly. So we are looking for generalists, product-focused engineers who have a strong fundamental background in computer science and programming, and also who subscribe to these values, put it that way. So finding those people is like, those are great people. Everyone wants those people. It\u0026#39;s hard to find those people.\u003c/p\u003e\n\n\u003cp\u003eWhen we hire, it basically comes, there\u0026#39;s three sources of people. I don\u0026#39;t know how into the weeds to go here, but you have people who apply. So you have a sort of inbound. You have people who are referred from people who currently work there. And then you have people who aren\u0026#39;t looking for a job, who we have identified is like, \u0026#34;Hey, this person looks like an awesome potential fit. Who we reach out to?\u0026#34; And that\u0026#39;s the three things.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s essentially a sales process, whether you\u0026#39;re starting your own company or you\u0026#39;re trying to attract people to your team inside of a big organization. I remember doing this at Google. I was constantly trying to sell great engineers to come work with me. So I think you have to get good at communicating why someone should do that. And then, once you\u0026#39;ve done that, you got to know what you\u0026#39;re looking for. And so for us it\u0026#39;s like product-focused, generalists, really, really strong CS foundations.\u003c/p\u003e\n\n\u003cp\u003eThe reason I focus on generalists by the way, is it\u0026#39;s partly the domain that I\u0026#39;m in. We\u0026#39;re not doing super specialized stuff. You don\u0026#39;t need PhD-level expertise, although we\u0026#39;re now opening up some roles on the AI side that are a little bit more specialized. But in general, I like people who just have great problem-solving skills, agnostic to the technology \u0026#39;cause the technologies, we tend to choose the right technology to solve the problem. And so anchoring on a technology ahead of time is like an anti-pattern to me.\u003c/p\u003e\n\n\u003cp\u003eI like people who can work fully across the stack. So I never hire back end versus front end. And again, there\u0026#39;s totally valid differing schools of thought, but to me the best way to get a product feature that works well for a user is if the engineer builds the entire thing. There\u0026#39;s some efficiency here to that, but I think it aligns the incentive of the engineer and the user the best. So those are some of the principles.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: What does great technical leadership look like?\u003c/p\u003e\n\n\u003ch2\u003eModels of technical leadership [11:29]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes, great question. Actually let me ask you this. Are you asking about management? I see leadership. How do you think of it? Or should I just give you my whole lay of the land?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Let\u0026#39;s go top to bottom.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes. Okay. So there\u0026#39;s this traditional distinction where it\u0026#39;s like you can have people who are tech leads, maybe not managers, but are like your architects. They\u0026#39;re super knowledgeable about the system. And then flip that they have a counterpart who is a engineering manager whose specialty is maybe more like people management type thing. So it\u0026#39;s like how do you help an engineer develop their career? How do you help them get promoted? And at most big tech companies, those roles bifurcate. So you have two separate things.\u003c/p\u003e\n\n\u003cp\u003eMy personal view on this is that I actually like a combo. So when I was at Google, I was always on what was the individual contributor track, but I managed people and I always found that my authority as a manager came at least in part because I understood the technology very, very deeply and still contributed as an engineer.\u003c/p\u003e\n\n\u003cp\u003eThat\u0026#39;s my personal preference. However, I\u0026#39;ve seen people be very successful just as pure ICs. If they\u0026#39;re going to do that, I think they really need to excel in terms of teaching other people on their team the technical skills in terms of doing things like great code review, great design documents, really modeling what technical excellence looks like so that the people who they\u0026#39;re trying to get to build things the right way, do that, see what technical excellence is.\u003c/p\u003e\n\n\u003cp\u003eOn the flip side, if you\u0026#39;re an engineering manager, I think that the thing that makes the most successful engineering managers I know successful is really deeply felt empathy and really aligning with the interests and being very good at understanding what is the motivation of an engineer who\u0026#39;s on their team? Are they trying to up-level their technical skills? Are they trying to get exposed to more leadership opportunities? Are they trying to run bigger projects?\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m not quite as great at that. I mean I\u0026#39;m not bad at that, but there are some people who I\u0026#39;ve worked with who just excel and really take joy out of helping other engineers on their team succeed and understanding what their goals are. So that\u0026#39;s how I would think about that role.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e:How do we help engineers grow their careers?\u003c/p\u003e\n\n\u003ch2\u003eGrowing engineering careers [14:08]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: There\u0026#39;s a bunch of ways to answer this. So depending on where you\u0026#39;re at in your career, there\u0026#39;s probably some next up skillset that you want to improve upon. So when you\u0026#39;re really early in your career, and we hire a bunch of people who are right out of college at work, the first thing I emphasize is just become an excellent software engineer. And what that means is can you write code that is production quality code? Is it well-tested? When there\u0026#39;s a bug in it, are you proactive in fixing it? Do you take code review comments well and adjust? Do you really learn the language?\u003c/p\u003e\n\n\u003cp\u003eSo at the beginning of the career, my advice is hone your technical skills, just become an excellent IC engineer. Usually when engineers are a couple years into doing that, I think that the focus shifts a bit to taking on more responsibility, shipping things that have more impact, maybe leading smaller teams, building some other skills that you\u0026#39;re going to need if eventually you\u0026#39;re going to be either the technical lead archetype or you\u0026#39;re going to be an engineering manager.\u003c/p\u003e\n\n\u003cp\u003eAnd so I think that\u0026#39;s about finding the right opportunities when people have demonstrated that they have the technical skills to take on projects that have higher scope or projects that require a leadership aspect. As an engineering manager, the trickiness there tends to be like, are there enough opportunities for that type of thing? At Google, I saw some crazy anti-patterns around optimizing for people\u0026#39;s promotions, which was really interesting. At Google, I don\u0026#39;t know how much digressing to this, but at Google, everyone is at a level. So you start as a SWE-2 or SWE-3, become a senior engineer or staff engineer or senior staff engineer or principal engineer. And a lot of what seems to drive career progression is can you get to that next level on the ladder? And each level on the ladder has a very well-defined rubric and that rubric is sliced up into, I think I forget what it is, like four things. It\u0026#39;s like impact, scope, leadership, whatever.\u003c/p\u003e\n\n\u003cp\u003eAnd so there\u0026#39;s a lot of managing to the rubric, which I do think can create these perverse incentives where it\u0026#39;s like you\u0026#39;re not necessarily managing to what the person truly needs in order to develop themselves. It\u0026#39;s like you\u0026#39;re managing so that you can put together a promotion packet that a committee of other managers will look at and be like, \u0026#34;Yes, this person deserves to go up one rung on the ladder\u0026#34;. And there\u0026#39;s huge amounts of money at stake in this, right? It\u0026#39;s a very high stakes type thing. And so that I try to stay away from. We don\u0026#39;t organize Warps career progression around that.\u003c/p\u003e\n\n\u003cp\u003eAnd the other problem with that is that it creates adverse business outcomes because you end up having as a manager to create opportunities for people to demonstrate these checkbox skills on the ladder, which the canonical examples, you make a project that doesn\u0026#39;t need to exist in order to give someone a leadership opportunity to ship a project and you end up, this happens all the time. It\u0026#39;s like a crazy system. I would try to avoid that and try and just focus on genuinely what is it that the person wants to grow at and how can you help them succeed.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: I know you have some thoughts on, we\u0026#39;re in the world of AI today, on engineers using the generative AI tools.\u003c/p\u003e\n\n\u003ch2\u003eAI tools for engineers [17:47]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: So I just posted something on LinkedIn on this and I got in a lot of trouble, but my thought is it\u0026#39;s not a question of if, it\u0026#39;s a question of when as far as developers really need to learn to use these tools as best they can to ship more software. There is fear around them. There is I think rightful frustration around using them. I don\u0026#39;t know if you\u0026#39;ve used them, but if you used them six months ago, nine months ago and you asked AI to build you a feature, you\u0026#39;d probably get something that didn\u0026#39;t work very well and you might just decide, \u0026#34;Hey, this isn\u0026#39;t worth my time. This isn\u0026#39;t worthwhile. Technology\u0026#39;s not good enough\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eThe technology is changing extremely quickly to the point where I think it is useful not for every task. I also think the correct way of thinking about it right now as an engineer is as another tool in your toolbox. So it\u0026#39;s raising the abstraction level from, it\u0026#39;s not that dissimilar, the shift from assembly language to programming language, formal programming language. And then even within formal programming languages, there\u0026#39;s a huge difference between working in C and working in Python or JavaScript.\u003c/p\u003e\n\n\u003cp\u003eAnd this is a step change to where the way that you can work is by simply directing an AI to do some amount of the work for you. You should consider it like a draft where you then review it and iterate and get to a point where it\u0026#39;s at the quality bar where if you had written it by hand that it\u0026#39;s still there. But I basically think as an engineer, if you want to continue in this field, you need to start thinking of yourself not as a coder, but as a producer of software and the way you produce software, you have to use the best possible method for that. And that might not be writing code by hand. That might be guiding AI and hopping in and iterating with it. And so that\u0026#39;s my take on it.\u003c/p\u003e\n\n\u003cp\u003eIt is a struggle as an engineering manager and leader to change the habits of people on my team to approach programming problems in this way. And this is where I got in trouble on LinkedIn because I was like, \u0026#34;How do you get senior engineers who want to use these tools?\u0026#34; And then a lot of people were like, \u0026#34;The engineers know best about what tools they should be using. Why are you telling them to use these tools? They\u0026#39;ll use them when the tools are good enough\u0026#34;. And there\u0026#39;s truth to that. But I actually think people need a nudge and people need to learn a new skill set \u0026#39;cause there\u0026#39;s actually skill in how do you prompt the AI, how do you work with it. So that\u0026#39;s my take on it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: One of the things we have seen with the take-up of these tools, a couple of things happening. One, pull requests seem to have got bigger. One study done in Australia, 300% more code being produced when using the generative AI tools, and about 400% more bugs.\u003c/p\u003e\n\n\u003ch2\u003eAI tool challenges [20:54]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes. That doesn\u0026#39;t surprise me. More code equals more bugs almost axiomatically. And one of the best engineers I ever worked with a Google, I was like, \u0026#34;What\u0026#39;s your main principle for writing great code?\u0026#34; And he\u0026#39;s like, \u0026#34;Write less code\u0026#34;. The more you can delete, the better. So that\u0026#39;s not a good sign.\u003c/p\u003e\n\n\u003cp\u003eI would say that using these tools, you cannot advocate responsibility for the quality of the code any more than if you were using IntelliSense in your IDE and be like, \u0026#34;Oh well, the tab complete, put this function so I just used it\u0026#34;. That\u0026#39;s totally unacceptable. And so you as an engineer using the tool, have to maintain responsibility for the thing that you\u0026#39;re submitting.\u003c/p\u003e\n\n\u003cp\u003eI also think one of just the cardinal rules of good software engineering is small PRs, small discrete changes. And so one of the anti-patterns to me in using AI is trying to one shot or zero shot through one prompt a huge thing. And this is where I think there\u0026#39;s actual skill in using this stuff. You should still decompose the problem exactly as though you were going to write the components one by one, but you can just save a ton of time. And that\u0026#39;s actually the interesting part of the engineering a lot of the times, it\u0026#39;s like what\u0026#39;s the right decomposition? And then you should use the AI to help you write the components. But what you shouldn\u0026#39;t do is be like, \u0026#34;Write me this whole app that does this or this whole system that does that\u0026#34;, because the more code there is, the less you\u0026#39;re going to comprehend it, the more bugs that are going to be. And so that\u0026#39;s, I think I diagnosed that as a misuse, not an intrinsic issue with AI. That\u0026#39;s my take. But I don\u0026#39;t know, people probably disagree.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: For the junior engineer who\u0026#39;s coming into the profession today and these tools are their norm, one of the concerns that I\u0026#39;ve certainly heard and seen is how do we help that person get the underlying skills to do that decomposition well?\u003c/p\u003e\n\n\u003ch2\u003eThe impact on junior engineers? [23:13]\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes, it\u0026#39;s a great question. I have some friends who run coding bootcamps and I know professors of CS and I think that you, it\u0026#39;s like when I was in college, I learned C, and I\u0026#39;ve never written a professional program in C in my life, but I am glad that I learned C because it lets you learn, understand how memory works, how the function call stack works, basically how computers work. And so what I think will be problematic for junior engineers is if you don\u0026#39;t learn the basics and you are just trying to go straight to the AI that is making your apps for you, I think that\u0026#39;s a recipe for stuff that doesn\u0026#39;t work in a production environment.\u003c/p\u003e\n\n\u003cp\u003eI think that\u0026#39;s fine for prototyping. I think that\u0026#39;s fine for low stakes applications. Like you\u0026#39;re making, I don\u0026#39;t know, a landing page or something like that, but I don\u0026#39;t think anyone who\u0026#39;s working at Google or at a bank or at SpaceX or whatever should ever be generating code without an understanding of how code works.\u003c/p\u003e\n\n\u003cp\u003eSo I would still teach people the fundamentals. And then I think that to your question, how do you teach people to do production software engineering, decomposing things right, I don\u0026#39;t know, the main way that I learned that I still think works, which is I got code reviews and design doc reviews from engineers who knew what they were doing when I didn\u0026#39;t know what I was doing. And I think this is one of the reason why I think it\u0026#39;s important that the more senior engineers learn how to use these AI tools is because they\u0026#39;ll learn how to review and improve the experience of junior developers using these AI tools.\u003c/p\u003e\n\n\u003ch2\u003eChanges needed in the ways we train engineers [25:11]\u003c/h2\u003e\n\n\u003cp\u003eI think a bad outcome would be a world where the more experienced generation of developers shuns these tools. The junior developers use these tools. The more advanced or experienced developer just think that the junior developers are misusing these tools and it\u0026#39;s just a mess. So I think there needs to be almost a redesign of the engineering curriculum and engineering like how you teach an engineer in light of the fact that these tools now exist. That\u0026#39;s what I think.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Yes. I have a grandson who\u0026#39;s studying computer science at the moment, and they\u0026#39;re making them write their test programs on paper by hand.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Oh my god. What? Is that to prevent cheating with AI or what is that?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: That is what I believe it\u0026#39;s about.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: That\u0026#39;s not good. Wait, that\u0026#39;s not ... Yes. I think that the curriculum has to be re-imagined so that you learn the basics, but then you learn the tools you\u0026#39;re going to use as a pro engineer, and AI is definitely going to be one of them, and you learn how to use it correctly. The risk is this stuff is changing so so quickly that I think it\u0026#39;s very hard to know what the heck to do \u0026#39;cause the technology has advanced tremendously in the last six to nine months, so it\u0026#39;s a hard thing to figure out exactly what to do.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Well, Zach, we\u0026#39;ve meandered a lot, a lot of really interesting stuff in there. If people want to continue the conversation, where do they find you?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Yes, I think the easiest thing is to just reach out to me on LinkedIn. I\u0026#39;ll respond to people DMing me there. I\u0026#39;m also on Twitter, X. I don\u0026#39;t use that as much. I think for this group of people, LinkedIn is probably the best place.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShane Hastie\u003c/strong\u003e: Well, thank you so much for taking the time to talk to us.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e: Thank you for having me, Shane. This was awesome. I hope people enjoyed it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMentioned\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ca href=\"https://thezbook.com/code-first-vs-product-first\"\u003eCode first vs product first\u003c/a\u003e article \u003c/li\u003e\n\t\u003cli\u003eZach Lloyd on \u003ca href=\"https://www.linkedin.com/in/zachlloyd/\"\u003eLinkedIn\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Zach-Lloyd\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eZach Lloyd\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t \u003c/div\u003e\u003cp\u003e\n\t\t\t\t\t\t\t\tYou can keep up-to-date with the podcasts via our \u003ca href=\"http://www.infoq.com/podcasts/building-product-first-engineering-culture/\" target=\"_blank\"\u003eRSS Feed\u003c/a\u003e, and they are available via\n\t\t\t\t\t\t\t\t\u003ca href=\"https://soundcloud.com/infoq-engineering-culture\" target=\"_blank\"\u003eSoundCloud\u003c/a\u003e,\n\t\t\t\t\t\t\t\t\u003ca href=\"https://itunes.apple.com/gb/podcast/engineering-culture-by-infoq/id1161431874?mt=2\" target=\"_blank\"\u003eApple Podcasts\u003c/a\u003e,\n\t\t\t\t\t\t\t\t\u003ca href=\"https://open.spotify.com/show/5YAzpmLjbNhQVVg7HkfIHP\" target=\"_blank\"\u003eSpotify\u003c/a\u003e,\n\t\t\t\t\t\t\t\t\u003ca href=\"https://overcast.fm/itunes1161431874/engineering-culture-by-infoq\" target=\"_blank\"\u003eOvercast\u003c/a\u003e\n\t\t\t\t\t\t\t\tand \u003ca href=\"https://youtube.com/playlist?list=PLndbWGuLoHeYaFgbuLnvO5Qab2pFBaSWX\u0026amp;si=CbKqeKewkXZSXYW-\" target=\"_blank\"\u003eYouTube\u003c/a\u003e.\n\t\t\t\t\t\t\t\tFrom this page you also have access to our recorded show notes. They all have clickable links that will take you directly to that part of the audio.\n\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\u003c/p\u003e\u003c/div\u003e",
  "readingTime": "26 min read",
  "publishedTime": "2025-07-18T00:00:00Z",
  "modifiedTime": null
}
