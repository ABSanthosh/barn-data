{
  "id": "22bd6db9-e346-48e6-add2-b83e069c4e0f",
  "title": "Qodana 2024.3 Is Here Along With a Special Offer for New Users!",
  "link": "https://blog.jetbrains.com/qodana/2025/01/qodana-2024-3-is-here-along-with-a-special-offer-for-new-users/",
  "description": "Happy New Year! In case you missed it, the Qodana team ended 2024 with a bang and released Qodana 2024.3. What’s in the latest release? New security functionality, a fresh set of Android linter rules, and more to help your team prioritize code excellence. Let’s take a look at what’s available in more detail.  To […]",
  "author": "Kerry Beetge",
  "published": "Fri, 03 Jan 2025 11:40:53 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "releases",
    "java",
    "kotlin",
    "qodana"
  ],
  "byline": "Kerry Beetge",
  "length": 5912,
  "excerpt": "Happy New Year! In case you missed it, the Qodana team ended 2024 with a bang and released Qodana 2024.3. What’s in the latest release?",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "ReleasesQodana 2024.3 Is Here Along With a Special Offer for New Users! Happy New Year! In case you missed it, the Qodana team ended 2024 with a bang and released Qodana 2024.3. What’s in the latest release? New security functionality, a fresh set of Android linter rules, and more to help your team prioritize code excellence. Let’s take a look at what’s available in more detail.  Security analysis for Java and Kotlin DFA for Go New Android lint checks 25% off for new users switching to Qodana To The Documentation Robust security analysis for Java and Kotlin Our latest release introduces a security analysis inspection for Java and Kotlin, enabled by default in the Qodana for JVM linter with the ultimate subscription plan.  This means advanced interprocedural data flow analysis capabilities, providing deeper analysis for Java and Kotlin.  As a result, you can find and fix security vulnerabilities, ensuring your code is both more efficient and more secure.  Example of SQL injection vulnerability: User data from the HTTP request is propagated to the statement.execute method without any sanitization. This allows manipulation of the SQL query being executed, which could be exploited to compromise security. The inspection helps to detect and prevent the following types of vulnerabilities: Cross-Site Scripting (XSS) Command Injection SQL Injection Path Traversal This functionality is also available in IntelliJ IDEA Ultimate starting from v2024.3.1 with the Security Analysis by Qodana plugin installed. New DFA checks for qodana-go Data Flow Analysis (DFA) is a form of static code analysis that checks how data flows through software programs. This kind of analysis can help you track errors occurring during value propagation. The Qodana 2024.3 release introduces three new dataflow based inspections enabled by default in the Go linter to help you improve the quality of your code. These inspections, which were present in prior releases of GoLand and focused on local data flow within the function scope, have now appeared in the linter in this iteration after the RML engine was integrated as a platform module. Constant Condition This inspection identifies conditions that always evaluate to either true or false. It helps uncover redundant code branches and logical errors. Here’s an example: 2. Nil dereference This inspection highlights calls where the receiver might be nil. This inspection helps prevent runtime crashes and ensures safer code execution. Let’s take a look at this below: 3. Error maybe not nil This inspection highlights calls without proper error handling. The error variable should always be checked for nil before the value variable can be used. Here’s an example of error handling to avoid: app.Close invocation is safe from nil errors only when it’s checked against err == nil . In this example, app.Close was invoked without err variable checking. This inspection highlights these kinds of instances. Simply update your Qodana linter to 2024.3 to enable this new functionality by default. Android Lint checks added to qodana-android checks Good news! The new Android linter checks are enabled by default in your qodana.recommended profile in 2024.3 and can also be included in custom profiles. By updating these inspections, we aim to enhance the overall development experience, particularly for Android.  Learn more about our checks The Android linter provides inspections for Android-specific code to help you improve code quality and maintainability. Let’s explore a few examples below.  Layout inflation without a parent (ID: AndroidLintInflateParams) Using traditional XML inflation for displaying popups in Android is a popular approach, but one issue with inflating popups this way is that your popup_layout.xml may rely on information from a parent view. As a result, you might run into challenges if the context of that view changes.  The alternative is to try Layout Inflation Without A Parent. Find out more about this inspection here.  Ensuring user understanding Incomplete transition (ID: AndroidLintMissingTranslation) Fully translating your app is crucial if you want to reach a diverse audience and ensure a good user experience for various demographics. It can also impact sales and decrease confusion. Make sure you don’t miss anything with this lint check. Maintaining responsiveness Nested Layout Weights (ID: AndroidLintNestedWeights) When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increases exponentially. In some cases, the responsiveness of the application will decrease if this pattern is repeated enough. You can maintain responsiveness by checking for the usage of weight attributes in nested LinearLayout components within an Android layout.  These are just some of the new checks you can use with Qodana on your Android project. Find the full list here.  Switch to Qodana for code analysis and get 25% off Qodana gets better with every release and provides a cost-effective way for teams to build confidence in code quality.  With this in mind, we’re offering you 25% off your first year of Qodana if you switch from a comparable commercial solution. Click on the button below to speak to our team.  Switch To Qodana Subscribe to Qodana Blog updates",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/01/qd-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eQodana 2024.3 Is Here Along With a Special Offer for New Users!\u003c/h2\u003e                    \n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/qd-featured_blog_1280x720_en-2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHappy New Year! In case you missed it, the Qodana team ended 2024 with a bang and released Qodana 2024.3. What’s in the latest release? New security functionality, a fresh set of Android linter rules, and more to help your team prioritize code excellence. Let’s take a look at what’s available in more detail. \u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#robust-security-analysis-for-java-and-kotlin\"\u003eSecurity analysis for Java and Kotlin\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#new-dfa-checks-for-qodana-go\"\u003eDFA for Go\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#android-lint-checks-added-to-qodana-android-checks\"\u003eNew Android lint checks\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"http://Switch-to-Qodana-for-code-analysis-and-get-25%-off\" target=\"_blank\"\u003e25% off for new users switching to Qodana\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"To The Documentation\" href=\"https://www.jetbrains.com/help/qodana/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/help/qodana/getting-started.html\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eTo The Documentation\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"robust-security-analysis-for-java-and-kotlin\"\u003eRobust security analysis for Java and Kotlin\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1600\" height=\"872\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/image.gif\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOur latest release introduces a\u003ca href=\"https://www.jetbrains.com/help/qodana/taint-analysis.html#jvm\" target=\"_blank\" rel=\"noopener\"\u003e security analysis inspection for Java and Kotlin\u003c/a\u003e, enabled by default in the\u003ca href=\"https://www.jetbrains.com/help/qodana/jvm.html\" target=\"_blank\" rel=\"noopener\"\u003e Qodana for JVM linter\u003c/a\u003e with the\u003ca href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" target=\"_blank\" rel=\"noopener\"\u003e ultimate subscription plan\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis means advanced interprocedural data flow analysis capabilities, providing deeper analysis for Java and Kotlin. \u003c/p\u003e\n\n\n\n\u003cp\u003eAs a result, you can find and fix security vulnerabilities, ensuring your code is both more efficient and more secure. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXd1mdTm7BZIRtFaGpERbQzabmv4BSVAAZP0a2QahsTdzGsVAvOV44LehQ_WVbmqtkcroHRTLTOZm_zkiPvK_nflMnjebzjt662MMcTz-RgY48OMfzzvh2r8BOJKq8y49BVvsn8?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eExample of SQL injection vulnerability:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdfggh4qM1yB4FRNlNw6Sok6dmjaONBqDWMjhU-kXIMRxonoJjJ00MQ2JHwK2tdCFixGYwZMN-hyv3gje-laQUFJRzy-L79pDBC6FA-10ewW6zJ2-q8YqqonAi15W2F4vRTqJk?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eUser data from the HTTP request is propagated to the statement.execute method without any sanitization. This allows manipulation of the SQL query being executed, which could be exploited to compromise security.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe inspection helps to detect and prevent the following types of vulnerabilities:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eCross-Site Scripting (XSS)\u003c/li\u003e\n\n\n\n\u003cli\u003eCommand Injection\u003c/li\u003e\n\n\n\n\u003cli\u003eSQL Injection\u003c/li\u003e\n\n\n\n\u003cli\u003ePath Traversal\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis functionality is also available in IntelliJ IDEA Ultimate starting from v2024.3.1 with the\u003ca href=\"https://plugins.jetbrains.com/plugin/25724-security-analysis-by-qodana/edit\" target=\"_blank\" rel=\"noopener\"\u003e Security Analysis by Qodana plugin\u003c/a\u003e installed.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"new-dfa-checks-for-qodana-go\"\u003eNew DFA checks for qodana-go\u003c/h2\u003e\n\n\n\n\u003cp\u003eData Flow Analysis (DFA) is a form of static code analysis that checks how data flows through software programs. This kind of analysis can help you track errors occurring during value propagation. The Qodana 2024.3 release introduces three new dataflow based inspections enabled by default in the Go linter to help you improve the quality of your code.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese inspections, which were present in \u003ca href=\"https://blog.jetbrains.com/go/2024/03/26/data-flow-analysis-for-go/\"\u003eprior releases of GoLand\u003c/a\u003e and focused on local data flow within the function scope, have now appeared in the linter in this iteration after the RML engine was integrated as a platform module.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eConstant Condition\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThis inspection identifies conditions that always evaluate to either true or false. It helps uncover redundant code branches and logical errors.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s an example:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcwn58RqsLRtU2QXR4yX4qv9Xi0iEWDEfG2cyP7Xb9143iVBz_UeYXGHw0NgUln4HjvlQQIgU3rspbpZsX6xhOWFjrxoDZboAhBF9GS-Yy5nwq61YVWurA0nXsMnxqyuXXa8bs?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e2. Nil dereference\u003c/p\u003e\n\n\n\n\u003cp\u003eThis inspection highlights calls where the receiver might be nil. This inspection helps prevent runtime crashes and ensures safer code execution.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s take a look at this below:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc8TSk9iNbsP0BTOAEy8OM6psOVnoNfllkBITLMoai8R3lN6vXLbMkYu8PTb-KAqX0PJg2du2p7jZX06b-5XTbPIfu9xZh9auerwNsBr9t8zhZl-j3G5pwuFhx2c0z7AiI_p0pI?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e3. Error maybe not nil\u003c/p\u003e\n\n\n\n\u003cp\u003eThis inspection highlights calls without proper error handling. The error variable should always be checked for nil before the value variable can be used.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s an example of error handling to avoid:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe-zy0KZ4lJizG7MEKxTXcw1N9xQTx_dgVOJxaEtYPc1WXCrstQUBQOdmRyjkr2cqdXo_xA2sBtdilI5LlCJinCoD7tw-FKhNtQfp9t7e9S6DDxQ624u2Cx_okwDwzahuAFqgXw?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eapp.Close invocation is safe from nil errors only when it’s checked against err == nil . In this example, app.Close was invoked without err variable checking.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis inspection highlights these kinds of instances.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfbbdpj3X0HEBtjDhLYoAqPV_ryQ1_PiqM4GJoxoXTxQbb4YKbRsgjgbjmfrc7ayNmYOh_HIMAEeMtiiYXpDewEhpGFKAXKag-Sgjm_vTUzXBumfy5Edd2o7ROHrCtEzJVy4b8?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSimply update your Qodana linter to 2024.3 to enable this new functionality by default.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"android-lint-checks-added-to-qodana-android-checks\"\u003eAndroid Lint checks added to qodana-android checks\u003c/h2\u003e\n\n\n\n\u003cp\u003eGood news! The new Android linter checks are enabled by default in your qodana.recommended profile in 2024.3 and can also be \u003ca href=\"https://github.com/JetBrains/qodana-profiles/blob/3b79ca5df521e1bc80401a817f9fcbcf9b2a5925/.idea/inspectionProfiles/qodana.recommended.all.yaml#L17\" target=\"_blank\" rel=\"noopener\"\u003eincluded in custom profiles\u003c/a\u003e. By updating these inspections, we aim to enhance the overall development experience, particularly for Android. \u003c/p\u003e\n\n\n\n\u003ch3 id=\"learn-more-about-our-checks\"\u003eLearn more about our checks\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe Android linter provides inspections for Android-specific code to help you improve code quality and maintainability. Let’s explore a few examples below. \u003c/p\u003e\n\n\n\n\n\n\n\n\u003ch4 id=\"layout-inflation-without-a-parent-id-android-lint-inflate-params\"\u003eLayout inflation without a parent (ID: AndroidLintInflateParams)\u003c/h4\u003e\n\n\n\n\u003cp\u003eUsing traditional XML inflation for displaying popups in Android is a popular approach, but one issue with inflating popups this way is that your popup_layout.xml may rely on information from a parent view. As a result, you might run into challenges if the context of that view changes. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe alternative is to try \u003cem\u003eLayout Inflation Without A Parent\u003c/em\u003e. Find out more about this inspection \u003ca href=\"https://googlesamples.github.io/android-custom-lint-rules/checks/InflateParams.md.html\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXduLT8hkckn5tkDUjFFYvUDxfT0YRNsbB_ldGdBTOo9pnsuZVCrjJwUtVipMYvG2hLmxcOnC20YIwfGbucKMDEQRfAHnUGCmOp5trmrnpc8XdirfPDZ50i4f9AGHT8pwtmwzARS?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"ensuring-user-understanding\"\u003eEnsuring user understanding\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"incomplete-transition-id-android-lint-missing-translation\"\u003eIncomplete transition (ID: AndroidLintMissingTranslation)\u003c/h4\u003e\n\n\n\n\u003cp\u003eFully translating your app is crucial if you want to reach a diverse audience and ensure a good user experience for various demographics. It can also impact sales and decrease confusion. Make sure you don’t miss anything with this lint check.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc7tDmcj_paOn1z0wG6rzKk5AlXk7M4mgC8NzlN5iz8Qfr-PiVHzw0H21D73E8lsTNedt6DxK2QrX5VTHiHdx5iGegFV3k7OtegBndJXONyakXNZw3j-lPCRUjTTN5AX0xYep3M?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"maintaining-responsiveness\"\u003eMaintaining responsiveness\u003c/h3\u003e\n\n\n\n\u003cp\u003eNested Layout Weights (ID: AndroidLintNestedWeights)\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increases exponentially. In some cases, the responsiveness of the application will decrease if this pattern is repeated enough. You can maintain responsiveness by checking for the usage of weight attributes in nested LinearLayout components within an Android layout. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcicbcBTnLWdCib1JzbB-LXG7DyJvikCl1ZWTQlZ_SDlQXz61gWJHZuKijz3tQZ0L98Is-QRGP78ugmdT8MoPlX9qoc31PGNIj4E6VVG5nHmswP6WcgRQIecwtbk7FZBYpWu2n3?key=1kf-F1bRMkTZjqmfG4HYkQjD\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThese are just some of the new checks you can use with Qodana on your Android project. Find the full list \u003ca href=\"https://googlesamples.github.io/android-custom-lint-rules/checks/vendors.md.html\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"Switch-to-Qodana-for-code-analysis-and-get-25%-off\"\u003e\u003cstrong\u003eSwitch to Qodana for code analysis and get 25% off\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eQodana gets better with every release and provides a cost-effective way for teams to build confidence in code quality. \u003c/p\u003e\n\n\n\n\u003cp\u003eWith this in mind, we’re offering you 25% off your first year of Qodana if you switch from a comparable commercial solution. Click on the button below to speak to our team. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Switch To Qodana\" href=\"https://www.jetbrains.com/support/sales/#email-sales\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/support/sales/#email-sales\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eSwitch To Qodana\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
