{
  "id": "16b9dc90-4c03-4fc4-8e4b-1e5ef9279842",
  "title": "Tutorial: Integrate GitLab Merge Request approvals with external systems",
  "link": "https://about.gitlab.com/blog/2024/10/08/tutorial-integrate-gitlab-merge-request-approvals-with-external-systems",
  "description": "",
  "author": "Samer Akkoub",
  "published": "2024-10-08T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Samer Akkoub",
  "length": 4899,
  "excerpt": "Learn how to improve GitLab extensibility and integration with external applications in this demo. The result: a seamless integration that provides more control over merge requests.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "GitLab customers often ask how to connect merge requests to external applications, such as ServiceNow or custom-built applications, to control approvals for the merging of code into a target branch from these external systems. To address this need, GitLab offers External Status Check, a powerful feature that allows the sending of API calls to external systems to request the status of an external requirement, providing seamless integration and control over your merge requests. In this article, I'll demonstrate this feature by explaining how to deploy an application I developed. The application is designed to receive status check requests from GitLab Merge Requests, list them, and enable external users to approve/reject these requests without logging in to the GitLab console. As a result, GitLab platform architects will better understand GitLab extensibility and integration with external systems. The provided sample application can: Receive API requests from merge requests. Store the requests in AlchemyDB running on the same instance. Show Approve/Reject buttons for each row to approve or reject the corresponding merge request status check. How to deploy the status review demo application Import this GitLab repo project to your GitLab account. The project pipeline will deploy the application to a Kubernetes cluster. To achieve this, define a GitLab Agent for Kubernetes in a separate project and include a path to the cloned project under the “user_access” section in the agent configuration. Add a new environment variable KUBE_CONTEXT, with the value equal to the used agent path:name, similar to the following structure path/to/agent/project:agent-name. The status check application will be deployed to the approval-app namespace by default. Create the approval-app namespace in the target Kubernetes cluster. In the created namespace, add a secret named gitlab-token with the value set to the personal access token (PAT) of the user who will be approving the requests. The approval application will use this PAT to communicate back to the GitLab instance. Run the status check application pipeline on the main branch. Once deployed, the application will be exposed behind a load balancer. Use this command to grab the public IP address of the load balancer: kubectl get services -n approval-app. The application can then be accessed using this URL: http://EXTERNAL-IP/approval-apps/. Replace the EXTERNAL-IP with the value of the external IP address from the previous step. The resulting page should look like below (the table would be empty as we have not added any new merge requests yet). Configure status check in GitLab In the GitLab project where the external status check needs to be configured, from the left menu, navigate under settings -\u003e Merge Request and scroll down to Status checks. Click on Add status check. Add a service name. For the API to check enter: [http://EXTERNAL-IP[/approval-apps/status_check. Replace the EXTERNAL-IP with the external IP address found in the previous steps. Leave the Target Branch to the default, or select branch if you want this check to be triggered only for merge requests against certain branches. Leave HMAC Shared Secret as it is and click Add status check. Test everything together In the project where you have configured the external check, create a new merge request from any branch targeting the main branch (assuming the main branch was selected when the external check was configured in the previous section). In the merge request details, look for the Status checks section and it should show 1 Pending. Now, in a new tab, open the deployed external check application using this URL (replace EXTERNAL-IP with the value of the external IP address from the previous steps): http://EXTERNAL-IP/approval-apps/. A new entry should show in the list for the request external check from the merge request just created. Click on Approve. Switch back to the merge request's details screen and notice how the merge request is showing an approved status now. Debugging tips Use the following notes to debug if something does not go as planned: It is always helpful to view the logs for the external status check application. To do so: Extract the name of the application pod using this command: kubectl get pods -n approval-app. View the pod logs kubectl logs [THE NAME OF THE POD] -n approval-app. You can SSH into the application pod and view the database (Alchemydb), which is used for the application. kubectl exec -it \\[POD-NAME\\] -n approval-app -- /bin/sh cd instance sqlite3 gitlab_status_checks.db To view the database tables, type .tables. To describe the table structure, type PRAGMA table_info('status_check');. To view all the records in the status_check table, type select * from status_check. Discover more about GitLab External Status Check and how to gain more control over merge requests.",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/1EgGNIQbNGm20VE1h3RNjr/07eb80dfbb1b55b856a7d4ad892dc23d/blog-image-template-1800x945.svg?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-b794d8fe=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eGitLab customers often ask how to connect merge requests to external applications, such as ServiceNow or custom-built applications, to control approvals for the merging of code into a target branch from these external systems. To address this need, GitLab offers \u003ca href=\"https://docs.gitlab.com/ee/user/project/merge_requests/status_checks.html\"\u003eExternal Status Check\u003c/a\u003e, a powerful feature that allows the sending of API calls to external systems to request the status of an external requirement, providing seamless integration and control over your merge requests.\u003c/p\u003e\n\u003cp\u003eIn this article, I\u0026#39;ll demonstrate this feature by explaining how to deploy an application I developed. The application is designed to receive status check requests from GitLab Merge Requests, list them, and enable external users to approve/reject these requests without logging in to the GitLab console. As a result, GitLab platform architects will better understand GitLab extensibility and integration with external systems.\u003c/p\u003e\n\u003cp\u003eThe provided sample application can:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eReceive API requests from merge requests.\u003c/li\u003e\n\u003cli\u003eStore the requests in AlchemyDB running on the same instance.\u003c/li\u003e\n\u003cli\u003eShow Approve/Reject buttons for each row to approve or reject the corresponding merge request status check.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"how-to-deploy-the-status-review-demo-application\" tabindex=\"-1\"\u003eHow to deploy the status review demo application \u003ca href=\"#how-to-deploy-the-status-review-demo-application\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eImport this \u003ca href=\"https://gitlab.com/sakkoub-publicgroup/external-approval-app\"\u003eGitLab repo project\u003c/a\u003e to your GitLab account.\u003c/li\u003e\n\u003cli\u003eThe project pipeline will deploy the application to a Kubernetes cluster. To achieve this, define a \u003ca href=\"https://docs.gitlab.com/ee/user/clusters/agent/install/index.html\"\u003eGitLab Agent\u003c/a\u003e for Kubernetes in a separate project and include a path to the cloned project under the “\u003ca href=\"https://docs.gitlab.com/ee/user/clusters/agent/user_access.html\"\u003euser_access\u003c/a\u003e” section in the agent configuration.\u003c/li\u003e\n\u003cli\u003eAdd a new environment variable \u003ccode\u003eKUBE_CONTEXT\u003c/code\u003e, with the value equal to the used agent path:name, similar to the following structure \u003ccode\u003epath/to/agent/project:agent-name\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe status check application will be deployed to the \u003ccode\u003eapproval-app\u003c/code\u003e namespace by default.\u003c/li\u003e\n\u003cli\u003eCreate the \u003ccode\u003eapproval-app\u003c/code\u003e namespace in the target Kubernetes cluster.\u003c/li\u003e\n\u003cli\u003eIn the created namespace, add a secret named \u003ccode\u003egitlab-token\u003c/code\u003e with the value set to the personal access token (PAT) of the user who will be approving the requests. The approval application will use this PAT to communicate back to the GitLab instance.\u003c/li\u003e\n\u003cli\u003eRun the status check application pipeline on the main branch.\u003c/li\u003e\n\u003cli\u003eOnce deployed, the application will be exposed behind a load balancer. Use this command to grab the public IP address of the load balancer: \u003ccode\u003ekubectl get services -n approval-app\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe application can then be accessed using this URL: http://EXTERNAL-IP/approval-apps/. Replace the \u003ccode\u003eEXTERNAL-IP\u003c/code\u003e with the value of the external IP address from the previous step. The resulting page should look like below (the table would be empty as we have not added any new merge requests yet).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3avVnSB9GlZKW3kFgExYk/4e5d25cc4c2a72925085c1f1ae9e2ade/image1.png\" alt=\"Table showing IP address\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"configure-status-check-in-gitlab\" tabindex=\"-1\"\u003eConfigure status check in GitLab \u003ca href=\"#configure-status-check-in-gitlab\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn the GitLab project where the external status check needs to be configured, from the left menu, navigate under settings \u003cstrong\u003e-\u0026gt; Merge Request\u003c/strong\u003e and scroll down to \u003cstrong\u003eStatus checks\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eClick on \u003cstrong\u003eAdd status check\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eAdd a service name.\u003c/li\u003e\n\u003cli\u003eFor the API to check enter: \u003ccode\u003e[http://EXTERNAL-IP[/approval-apps/status_check\u003c/code\u003e. Replace the \u003ccode\u003eEXTERNAL-IP\u003c/code\u003e with the external IP address found in the previous steps.\u003c/li\u003e\n\u003cli\u003eLeave the \u003ccode\u003eTarget Branch\u003c/code\u003e to the default, or select branch if you want this check to be triggered only for merge requests against certain branches.\u003c/li\u003e\n\u003cli\u003eLeave \u003ccode\u003eHMAC Shared Secret\u003c/code\u003e as it is and click \u003cstrong\u003eAdd status check\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/63kv1mZiVtpRnqC5VXwB4P/b5fcb1a590d72f8e5c8201b5c6db0299/image1.png\" alt=\"How to configure status check\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"test-everything-together\" tabindex=\"-1\"\u003eTest everything together \u003ca href=\"#test-everything-together\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIn the project where you have configured the external check, create a new merge request from any branch targeting the main branch (assuming the main branch was selected when the external check was configured in the previous section).\u003c/li\u003e\n\u003cli\u003eIn the merge request details, look for the \u003cstrong\u003eStatus checks\u003c/strong\u003e section and it should show \u003ccode\u003e1 Pending\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eNow, in a new tab, open the deployed external check application using this URL (replace \u003ccode\u003eEXTERNAL-IP\u003c/code\u003e with the value of the external IP address from the previous steps): \u003ccode\u003ehttp://EXTERNAL-IP/approval-apps/\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA new entry should show in the list for the request external check from the merge request just created. Click on \u003cstrong\u003eApprove\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eSwitch back to the merge request\u0026#39;s details screen and notice how the merge request is showing an approved status now.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"debugging-tips\" tabindex=\"-1\"\u003eDebugging tips \u003ca href=\"#debugging-tips\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUse the following notes to debug if something does not go as planned:\u003c/p\u003e\n\u003cp\u003eIt is always helpful to view the logs for the external status check application. To do so:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eExtract the name of the application pod using this command: \u003ccode\u003ekubectl get pods -n approval-app\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eView the pod logs \u003ccode\u003ekubectl logs [THE NAME OF THE POD] -n approval-app\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can SSH into the application pod and view the database (Alchemydb), which is used for the application.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ekubectl exec -it \\[POD-NAME\\] -n approval-app -- /bin/sh\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecd instance\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esqlite3 gitlab_status_checks.db\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTo view the database tables, type \u003ccode\u003e.tables\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTo describe the table structure, type \u003ccode\u003ePRAGMA table_info(\u0026#39;status_check\u0026#39;);\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTo view all the records in the \u003ccode\u003estatus_check\u003c/code\u003e table, type \u003ccode\u003eselect * from status_check\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDiscover more about \u003ca href=\"https://docs.gitlab.com/ee/user/project/merge_requests/status_checks.html\"\u003eGitLab External Status Check\u003c/a\u003e and how to gain more control over merge requests.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-10-08T00:00:00Z",
  "modifiedTime": null
}
