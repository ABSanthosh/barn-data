{
  "id": "8c5ce419-19b2-4d95-ae4d-33dbbcccbcc9",
  "title": "Pulumi Enables Direct Consumption of Terraform Modules",
  "link": "https://www.infoq.com/news/2025/07/pulumi-terraform-module-support/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Pulumi now empowers developers to use Terraform modules directly, streamlining the migration process. This preview feature eliminates barriers, enabling seamless integration with existing Terraform code while allowing new projects in Pulumi. With robust support and a focus on gradual transitions, teams can modernize their infrastructure without a complete rewrite. By Mark Silvester",
  "author": "Mark Silvester",
  "published": "Sun, 20 Jul 2025 10:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Terraform",
    "Infrastructure as Code",
    "Development",
    "Architecture \u0026 Design",
    "DevOps",
    "news"
  ],
  "byline": "Mark Silvester",
  "length": 3228,
  "excerpt": "Pulumi now empowers developers to use Terraform modules directly, streamlining the migration process. This preview feature eliminates barriers, enabling seamless integration with existing Terraform co",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250717100249/apple-touch-icon.png",
  "text": "Pulumi now allows developers to use Terraform modules directly, without converting them first. This preview feature allows Pulumi programs written in TypeScript, Python, Go, C# or Java to consume Terraform modules as-is, removing one of the key barriers to adoption. Writing in the announcement post, Pulumi engineer Anton Tayanovskyy said the feature “addresses one of the most significant challenges our users face when migrating from Terraform to Pulumi” particularly for teams with deep investments in Terraform modules. He explained that it “gives you the best of both worlds: the ability to start new projects in Pulumi immediately while preserving your existing Terraform modules until you’re ready to migrate them”. Support is provided through the pulumi package add terraform-module command, available from CLI version 3.178.0. Under the hood, Pulumi wraps Terraform’s execution engine using the terraform-module provider. This allows infrastructure defined in .tf modules to behave like native Pulumi components, while still integrating with Pulumi’s state backend, secrets management and automation workflows. Enterprise accounts lead Dipali Patel described the announcement as a turning point, writing on LinkedIn that “Pulumi just made your Terraform life way easier,” and calling it “the ultimate ‘no excuses’ moment to start modernising your Infra as Code, without the pain of a full rewrite.” Her comments highlight a recognition among teams of the value in tooling that supports gradual transitions over all-or-nothing migrations. The official Pulumi LinkedIn account echoed that message, stating the new functionality solves “one of the biggest challenges in migrating complex infrastructure.” Pulumi has positioned itself as a platform that allows developers to work in general-purpose languages without giving up compatibility with existing tools and ecosystems. The feature remains in preview, and Pulumi has been clear about its limitations. The GitHub documentation notes that “Terraform modules have insufficient metadata to precisely identify the type of every module output,” and recommends overriding inferred types manually where needed. Feedback is actively encouraged as the company works to improve compatibility and stability. Pulumi’s support for Terraform modules mirrors similar features in other widely used tools. CDK for Terraform allows infrastructure to be defined in TypeScript, Python, Java, C# or Go while using existing Terraform modules from the Terraform Registry. Terragrunt also supports referencing remote Terraform modules, helping teams manage shared infrastructure configurations more easily. By enabling direct module support, Pulumi aligns with this broader trend of integrating with Terraform ecosystems rather than replacing them. The feature allows Pulumi to interoperate more easily with existing Terraform code, offering teams a way to incorporate familiar modules while exploring Pulumi’s language-based approach. It is intended to support gradual adoption without requiring full migration up front. About the Author Mark Silvester",
  "image": "https://res.infoq.com/news/2025/07/pulumi-terraform-module-support/en/headerimage/header-1752699630403.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\nPulumi now allows developers to use Terraform modules directly, without converting them first. This preview feature allows Pulumi programs written in TypeScript, Python, Go, C# or Java to consume Terraform modules as-is, removing one of the key barriers to adoption.\n\u003c/p\u003e\n\u003cp\u003e\nWriting in the\u003ca href=\"https://www.pulumi.com/blog/announcing-direct-tf-modules/\"\u003e announcement post\u003c/a\u003e, Pulumi engineer Anton Tayanovskyy said the feature “addresses one of the most significant challenges our users face when migrating from Terraform to Pulumi” particularly for teams with deep investments in Terraform modules. He explained that it “gives you the best of both worlds: the ability to start new projects in Pulumi immediately while preserving your existing Terraform modules until you’re ready to migrate them”.\n\u003c/p\u003e\n\u003cp\u003e\nSupport is provided through the pulumi package \u003ca href=\"https://www.pulumi.com/docs/iac/extending-pulumi/use-terraform-module/\"\u003eadd terraform-module command\u003c/a\u003e, available from CLI version 3.178.0. Under the hood, Pulumi wraps Terraform’s execution engine using the terraform-module provider. This allows infrastructure defined in .tf modules to behave like native Pulumi components, while still integrating with Pulumi’s state backend, secrets management and automation workflows.\n\u003c/p\u003e\n\u003cp\u003e\nEnterprise accounts lead Dipali Patel described the announcement as a turning point, writing on\u003ca href=\"https://www.linkedin.com/posts/dipalipatel1_new-use-terraform-modules-in-pulumi-without-activity-7344383732201517057-QKFt\"\u003e LinkedIn\u003c/a\u003e that “Pulumi just made your Terraform life way easier,” and calling it “the ultimate ‘no excuses’ moment to start modernising your Infra as Code, without the pain of a full rewrite.” Her comments highlight a recognition among teams of the value in tooling that supports gradual transitions over all-or-nothing migrations.\n\u003c/p\u003e\n\u003cp\u003e\nThe\u003ca href=\"https://www.linkedin.com/posts/pulumi_new-use-terraform-modules-in-pulumi-without-activity-7343307085083774980-KNxR\"\u003e official Pulumi LinkedIn account\u003c/a\u003e echoed that message, stating the new functionality solves “one of the biggest challenges in migrating complex infrastructure.” Pulumi has positioned itself as a platform that allows developers to work in general-purpose languages without giving up compatibility with existing tools and ecosystems.\n\u003c/p\u003e\n\u003cp\u003e\nThe feature remains in preview, and Pulumi has been clear about its limitations. The\u003ca href=\"https://github.com/pulumi/pulumi-terraform-module\"\u003e GitHub documentation\u003c/a\u003e notes that “Terraform modules have insufficient metadata to precisely identify the type of every module output,” and recommends overriding inferred types manually where needed. Feedback is actively encouraged as the company works to improve compatibility and stability.\n\u003c/p\u003e\n\u003cp\u003e\nPulumi’s support for Terraform modules mirrors similar features in other widely used tools. \u003ca href=\"https://developer.hashicorp.com/terraform/cdktf\"\u003eCDK for Terraform\u003c/a\u003e allows infrastructure to be defined in TypeScript, Python, Java, C# or Go while using existing Terraform modules from the \u003ca href=\"https://registry.terraform.io/\"\u003eTerraform Registry\u003c/a\u003e. \u003ca href=\"https://terragrunt.gruntwork.io/docs/\"\u003eTerragrunt\u003c/a\u003e also supports referencing remote Terraform modules, helping teams manage shared infrastructure configurations more easily. By enabling direct module support, Pulumi aligns with this broader trend of integrating with Terraform ecosystems rather than replacing them.\n\u003c/p\u003e\n\u003cp\u003e\nThe feature allows Pulumi to interoperate more easily with existing Terraform code, offering teams a way to incorporate familiar modules while exploring Pulumi’s language-based approach. It is intended to support gradual adoption without requiring full migration up front.\n\u003c/p\u003e\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Mark-Silvester\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMark Silvester\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-07-20T00:00:00Z",
  "modifiedTime": null
}
