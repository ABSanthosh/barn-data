{
  "id": "6fb2e7ca-bfa8-4f0a-82da-f24c1c035800",
  "title": "Architecture Is Designing Knowledge Flow – Diana Montalion at Explore DDD",
  "link": "https://www.infoq.com/news/2025/04/designing-knowledge-flow/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "At the Explore DDD conference, Diana Montalion said software architecture is about designing for knowledge flow, with the goal of software teams to learn more about the system they are building. This contrasts with the traditional focus on knowledge stock, which is about information that is already known. She sees effective architects as librarians, helping disseminate knowledge. By Thomas Betts",
  "author": "Thomas Betts",
  "published": "Sat, 19 Apr 2025 20:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Domain-Driven Design",
    "Architecture",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Thomas Betts",
  "length": 6468,
  "excerpt": "At the Explore DDD conference, Diana Montalion said software architecture is about designing for knowledge flow, with the goal of software teams to learn more about the system they are building. This",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250413214503/apple-touch-icon.png",
  "text": "At the Explore DDD conference in Denver, Colorado, Diana Montalion said software architecture is about designing for knowledge flow, with the goal of software teams learning more about the system they are building. Knowledge flow contrasts with the common focus on knowledge stock, which is about information that is already known. She sees effective architects as librarians, helping disseminate knowledge. In the words of Dave Snowden, \"The flow of knowledge is more important than the storage of knowledge.\" This thinking is analogous to the differences between a growth versus a fixed mindset, terms coined by Carol S. Dweck. In her keynote presentation, Montalion described organizations seeking a transformation because their legacy systems and processes encountered various limitations. However, those orgs expect a new architecture will stay within existing boundaries and provide rational, predictable results. This will result in something \"new\" that faces the same limitations and does not greatly enhance the systems' capabilities. The audience was receptive to an anecdote where a company wanted microservices without understanding what that really meant or wanting to make all the changes necessary to successfully operate a distributed system. Among the many quotes she shared throughout the presentation was one from Robert M. Pirsig: \"If a factory is torn down, but the rationality which produced it is left standing, then that rationality will simply produce another factory.\" She thinks back-to-the-office mandates have roots in a resurgence of this type of thinking. In order to achieve a change in the team's mindset, architects need to fully understand what created the current mindset. Using an iceberg metaphor, she said it's easy to focus on what is visible. Not only is this a limited view of the system, it can be very biased by what people complain about, ranging from users, to other teams, to legacy code, or almost anything.  To gain a better understanding of a system, look under the surface to find patterns, trends, values and beliefs that shape the system. She said this \"helps identify the mindset out of which the system's goals, power structures, rules and culture arises.\" Identifying this mindset allows you to avoid a lift-and-shift to a new architecture that has all the same problems underneath the surface. Montalion walked through six elements that she believes architecture should include when the goal is knowledge flow. First, communicate the context, because all stakeholders and the software team must have a shared understanding of the context to be aligned on what needs to be developed. Next, cultivate a growth mindset. Montalion quoated Peter Senge, saying, \"Sharing knowledge occurs when people are genuinely interested in helping one another develop new capacities for action; it is about creating learning processes.\" The third element is understanding the relationships in the system and what effects they produce. Bounded contexts are part of a system, but they also have relationships to each other, and that is what generates a core domain. She cited Russel Ackoff, who said, \"A system is never the sum of its parts - it’s the product of their interaction.\" Those interactions also include relationships between people and teams, because a socio-technical system has both software parts and people parts. Next, we need to architect capabilities rather than \"platforms\" or \"pipelines\" or \"microservices.\" By focusing on what a system must do, adapt to, and make sense of within a domain (rather than how to build or deploy it) means thinking at a higher level, almost \"designing the system of designing the system.\" Montalion believe this is critical because \"transformation doesn't scale through procedures and pipelines - it scales through capabilities. And capabilities are architected, not engineered.\" To achieve maximum transformation, look for leverage points. These are places in the system where a small shift in the structure can produce significant, lasting change. This allows teams to unlock and release the energy that's bound up in \"legacy\" processes and thinking. However, finding these is not the same as being able to exploit them. In the words of Donella Meadows, \"We know from bitter experience that when we do discover the system's leverage points, hardly anybody will believe us.\" Montalion calls this The 18-Month Rule, because people are slow to change how they see and do things. When they eventually reach the same conclusion, they won't believe it's what you told them 18 months ago. Going through all the previous steps places architects and leaders in a position to cultivate and generate knowledge flow. \"Leadership is about powering a company that leverages its knowledge,\" said Montalion. Architects are often asked to create a diagram showing exactly what to build, but the real request is for knowledge flow. Montalion acknowledged this is an ability that grows over time. \"We need to practice knowledge flow to learn knowledge flow.\" Having provided the general concept of knowledge flow, Montalion used examples to explain some techniques and practices architects can adopt. Because large systems are complex, and understanding everything will take time, it helps to just get started, and have documentation and processes that can evolve organically.  Too often there is not one place where someone can go to learn about a system, its capabilities, and the domain. Even when some documentation exists, it's difficult to \"click into\" an area to see more detail. The goal is to create a knowledge graph with collections, views, tags, and bidirectional links for relationships. Although these concepts are not new, and go back to the basic idea of hypertext and hypermedia, there is room for improvement in the technology available to create knowledge graphs. Creating a knowledge repository is one tangible artifact along the journey of architecting for knowledge flow. Architects know \"it depends\" is often the right answer. Montalion was enthusiastic about this, because \"we get to figure out what it depends on. That's wisdom.\" Architects can facilitate the sharing of knowledge, which encourages the development of new capacities for action. That is what is needed to achieve a transformation. About the Author Thomas Betts",
  "image": "https://res.infoq.com/news/2025/04/designing-knowledge-flow/en/headerimage/generatedHeaderImage-1745083048362.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAt the Explore DDD conference in Denver, Colorado, Diana Montalion said software architecture is about designing for knowledge flow, with the goal of software teams learning more about the system they are building. Knowledge flow contrasts with the common focus on knowledge stock, which is about information that is already known. She sees effective architects as librarians, helping disseminate knowledge.\u003c/p\u003e\n\n\u003cp\u003eIn the words of Dave Snowden, \u0026#34;The flow of knowledge is more important than the storage of knowledge.\u0026#34; This thinking is analogous to the differences between a growth versus a fixed mindset, terms coined by Carol S. Dweck.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Photo of title slide saying Architecture is Designing Knowledge Flow\" data-src=\"news/2025/04/designing-knowledge-flow/en/resources/2Architecture is designing knowledge flow-1745083507906.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/designing-knowledge-flow/en/resources/2Architecture is designing knowledge flow-1745083507906.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eIn her keynote presentation, Montalion described organizations seeking a transformation because their legacy systems and processes encountered various limitations. However, those orgs expect a new architecture will stay within existing boundaries and provide rational, predictable results. This will result in something \u0026#34;new\u0026#34; that faces the same limitations and does not greatly enhance the systems\u0026#39; capabilities. The audience was receptive to an anecdote where a company wanted microservices without understanding what that really meant or wanting to make all the changes necessary to successfully operate a distributed system.\u003c/p\u003e\n\n\u003cp\u003eAmong the many quotes she shared throughout the presentation was one from Robert M. Pirsig: \u0026#34;If a factory is torn down, but the rationality which produced it is left standing, then that rationality will simply produce another factory.\u0026#34; She thinks back-to-the-office mandates have roots in a resurgence of this type of thinking.\u003c/p\u003e\n\n\u003cp\u003eIn order to achieve a change in the team\u0026#39;s mindset, architects need to fully understand what created the current mindset. Using an iceberg metaphor, she said it\u0026#39;s easy to focus on what is visible. Not only is this a limited view of the system, it can be very biased by what people complain about, ranging from users, to other teams, to legacy code, or almost anything. \u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Iceberg model of systems thinking\" data-src=\"news/2025/04/designing-knowledge-flow/en/resources/1iceberg model-1745083740122.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/designing-knowledge-flow/en/resources/1iceberg model-1745083740122.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo gain a better understanding of a system, look under the surface to find patterns, trends, values and beliefs that shape the system. She said this \u0026#34;helps identify the mindset out of which the system\u0026#39;s goals, power structures, rules and culture arises.\u0026#34; Identifying this mindset allows you to avoid a lift-and-shift to a new architecture that has all the same problems underneath the surface.\u003c/p\u003e\n\n\u003cp\u003eMontalion walked through six elements that she believes architecture should include when the goal is knowledge flow. First, communicate the context, because all stakeholders and the software team must have a shared understanding of the context to be aligned on what needs to be developed. Next, cultivate a growth mindset. Montalion quoated Peter Senge, saying, \u0026#34;Sharing knowledge occurs when people are genuinely interested in helping one another develop new capacities for action; it is about creating learning processes.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Six elements that architecture includes for knowledge flow\" data-src=\"news/2025/04/designing-knowledge-flow/en/resources/1Six elements that architecture includes for knoweldge flow-1745083740122.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/designing-knowledge-flow/en/resources/1Six elements that architecture includes for knoweldge flow-1745083740122.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe third element is understanding the relationships in the system and what effects they produce. Bounded contexts are part of a system, but they also have relationships to each other, and that is what generates a core domain. She cited Russel Ackoff, who said, \u0026#34;A system is never the sum of its parts - it’s the product of their interaction.\u0026#34; Those interactions also include relationships between people and teams, because a socio-technical system has both software parts and people parts.\u003c/p\u003e\n\n\u003cp\u003eNext, we need to architect capabilities rather than \u0026#34;platforms\u0026#34; or \u0026#34;pipelines\u0026#34; or \u0026#34;microservices.\u0026#34; By focusing on what a system must do, adapt to, and make sense of within a domain (rather than how to build or deploy it) means thinking at a higher level, almost \u0026#34;designing the system of designing the system.\u0026#34; Montalion believe this is critical because \u0026#34;transformation doesn\u0026#39;t scale through procedures and pipelines - it scales through capabilities. And capabilities are architected, not engineered.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eTo achieve maximum transformation, look for leverage points. These are places in the system where a small shift in the structure can produce significant, lasting change. This allows teams to unlock and release the energy that\u0026#39;s bound up in \u0026#34;legacy\u0026#34; processes and thinking. However, finding these is not the same as being able to exploit them. In the words of Donella Meadows, \u0026#34;We know from bitter experience that when we do discover the system\u0026#39;s leverage points, hardly anybody will believe us.\u0026#34; Montalion calls this The 18-Month Rule, because people are slow to change how they see and do things. When they eventually reach the same conclusion, they won\u0026#39;t believe it\u0026#39;s what you told them 18 months ago.\u003c/p\u003e\n\n\u003cp\u003eGoing through all the previous steps places architects and leaders in a position to cultivate and generate knowledge flow. \u0026#34;Leadership is about powering a company that leverages its knowledge,\u0026#34; said Montalion. Architects are often asked to create a diagram showing exactly what to build, but the real request is for knowledge flow. Montalion acknowledged this is an ability that grows over time. \u0026#34;We need to practice knowledge flow to learn knowledge flow.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eHaving provided the general concept of knowledge flow, Montalion used examples to explain some techniques and practices architects can adopt. Because large systems are complex, and understanding everything will take time, it helps to just get started, and have documentation and processes that can evolve organically. \u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Related collections: Groups of artifacts interrelated to capabilities\" data-src=\"news/2025/04/designing-knowledge-flow/en/resources/1Related connections-1745083997250.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/designing-knowledge-flow/en/resources/1Related connections-1745083997250.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eToo often there is not one place where someone can go to learn about a system, its capabilities, and the domain. Even when some documentation exists, it\u0026#39;s difficult to \u0026#34;click into\u0026#34; an area to see more detail. The goal is to create a knowledge graph with collections, views, tags, and bidirectional links for relationships. Although these concepts are not new, and go back to the basic idea of hypertext and hypermedia, there is room for improvement in the technology available to create knowledge graphs.\u003c/p\u003e\n\n\u003cp\u003eCreating a knowledge repository is one tangible artifact along the journey of architecting for knowledge flow. Architects know \u0026#34;it depends\u0026#34; is often the right answer. Montalion was enthusiastic about this, because \u0026#34;we get to figure out what it depends on. That\u0026#39;s wisdom.\u0026#34; Architects can facilitate the sharing of knowledge, which encourages the development of new capacities for action. That is what is needed to achieve a transformation.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Quote from Peter Senge\" data-src=\"news/2025/04/designing-knowledge-flow/en/resources/2Peter Senge quote-1745084885511.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/designing-knowledge-flow/en/resources/2Peter Senge quote-1745084885511.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Thomas-Betts\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eThomas Betts\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-04-19T00:00:00Z",
  "modifiedTime": null
}
