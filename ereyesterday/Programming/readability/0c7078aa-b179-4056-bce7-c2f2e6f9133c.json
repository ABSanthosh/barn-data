{
  "id": "0c7078aa-b179-4056-bce7-c2f2e6f9133c",
  "title": "Exact Code Search: Find code faster across repositories",
  "link": "https://about.gitlab.com/blog/exact-code-search-find-code-faster-across-repositories/",
  "description": "",
  "author": "Dmitry Gruzd",
  "published": "2025-06-25T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Dmitry Gruzd",
  "length": 18644,
  "excerpt": "Discover how this new GitLab feature can find exact matches, use regex patterns, and see contextual results across terabytes of codebases.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/images/ico/favicon-192x192.png",
  "text": "TL;DR: What if you could find any line of code across 48 TB of repositories in milliseconds? GitLab's new Exact Code Search makes this possible, delivering pinpoint precision, powerful regex support, and contextual multi-line results that transform how teams work with large codebases. Why traditional code search is challenging Anyone who works with code knows the frustration of searching across repositories. Whether you're a developer debugging an issue, a DevOps engineer examining configurations, a security analyst searching for vulnerabilities, a technical writer updating documentation, or a manager reviewing implementation, you know exactly what you need, but traditional search tools often fail you. These conventional tools return dozens of false positives, lack the context needed to understand results, and slow to a crawl as codebases grow. The result? Valuable time spent hunting for needles in haystacks instead of building, securing, or improving your software. GitLab's code search functionality has historically been backed by Elasticsearch or OpenSearch. While these are excellent for searching issues, merge requests, comments, and other data containing natural language, they weren't specifically designed for code. After evaluating numerous options, we developed a better solution. Introducing Exact Code Search: Three game-changing capabilities Enter GitLab's Exact Code Search, currently in beta testing and powered by Zoekt (pronounced \"zookt\", Dutch for \"search\"). Zoekt is an open-source code search engine originally created by Google and now maintained by Sourcegraph, specifically designed for fast, accurate code search at scale. We've enhanced it with GitLab-specific integrations, enterprise-scale improvements, and seamless permission system integration. This feature revolutionizes how you find and understand code with three key capabilities: 1. Exact Match mode: Zero false positives When toggled to Exact Match mode, the search engine returns only results that match your query exactly as entered, eliminating false positives. This precision is invaluable when: Searching for specific error messages Looking for particular function signatures Finding instances of specific variable names 2. Regular Expression mode: Powerful pattern matching For complex search needs, Regular Expression mode allows you to craft sophisticated search patterns: Find functions following specific naming patterns Locate variables matching certain constraints Identify potential security vulnerabilities using pattern matching 3. Multiple-line matches: See code in context Instead of seeing just a single line with your matching term, you get the surrounding context that's crucial for understanding the code. This eliminates the need to click through to files for basic comprehension, significantly accelerating your workflow. From features to workflows: Real-world use cases and impact Let's see how these capabilities translate to real productivity gains in everyday development scenarios: Debugging: From error message to root cause in seconds Before Exact Code Search: Copy an error message, search, wade through dozens of partial matches in comments and documentation, click through multiple files, and eventually find the actual code. With Exact Code Search: Copy the exact error message Paste it into Exact Code Search with Exact Match mode Instantly find the precise location where the error is thrown, with surrounding context Impact: Reduce debugging time from minutes to seconds, eliminating the frustration of false positives. Code exploration: Master unfamiliar codebases quickly Before Exact Code Search: Browse through directories, make educated guesses about file locations, open dozens of files, and slowly build a mental map of the codebase. With Exact Code Search: Search for key methods or classes with Exact Match mode Review multiple line matches to understand implementation details Use Regular Expression mode to find similar patterns across the codebase Impact: Build a mental map of code structure in minutes rather than hours, dramatically accelerating onboarding and cross-team collaboration. Refactoring with confidence Before Exact Code Search: Attempt to find all instances of a method, miss some occurrences, and introduce bugs through incomplete refactoring. With Exact Code Search: Use Exact Match mode to find all occurrences of methods or variables Review context to understand usage patterns Plan your refactoring with complete information about impact Impact: Eliminate the \"missed instance\" bugs that often plague refactoring efforts, improving code quality and reducing rework. Security auditing: Finding vulnerable patterns Security teams can: Create regex patterns matching known vulnerable code Search across all repositories in a namespace Quickly identify potential security issues with context that helps assess risk Impact: Transform security audits from manual, error-prone processes to systematic, comprehensive reviews. Cross-repository insights Search across your entire namespace or instance to: Identify similar implementations across different projects Discover opportunities for shared libraries or standardization Impact: Break down silos between projects and identify opportunities for code reuse and standardization. The technical foundation: How Zoekt delivers speed and precision Before diving into our scale achievements, let's explore what makes Zoekt fundamentally different from traditional search engines — and why it can find exact matches so incredibly fast. Positional trigrams: The secret to lightning-fast exact matches Zoekt's speed comes from its use of positional trigrams — a technique that indexes every sequence of three characters along with their exact positions in files. This approach solves one of the biggest pain points developers have had with Elasticsearch-based code search: false positives. Here's how it works: Traditional full-text search engines like Elasticsearch tokenize code into words and lose positional information. When you search for getUserId(), they might return results containing user, get, and Id scattered throughout a file — leading to those frustrating false positives for GitLab users. Zoekt's positional trigrams maintain exact character sequences and their positions. When you search for getUserId(), Zoekt looks for the exact trigrams like get, etU, tUs, Use, ser, erI, rId, Id(\", \"d(), all in the correct sequence and position. This ensures that only exact matches are returned. The result? Search queries that previously returned hundreds of irrelevant results now return only the precise matches you're looking for. This was one of our most requested features for good reason - developers were losing significant time sifting through false positives. Regular expression performance at scale Zoekt excels at exact matches and is optimized for regular expression searches. The engine uses sophisticated algorithms to convert regex patterns into efficient trigram queries when possible, maintaining speed even for complex patterns across terabytes of code. Built for enterprise scale Exact Code Search is powerful and built to handle massive scale with impressive performance. This is not just a new UI feature — it's powered by a completely reimagined backend architecture. Handling terabytes of code with ease On GitLab.com alone, our Exact Code Search infrastructure indexes and searches over 48 TB of code data while maintaining lightning-fast response times. This scale represents millions of repositories across thousands of namespaces, all searchable within milliseconds. To put this in perspective: This scale represents more code than the entire Linux kernel, Android, and Chromium projects combined. Yet Exact Code Search can find a specific line across this massive codebase in milliseconds. Self-registering node architecture Our innovative implementation features: Automatic node registration: Zoekt nodes register themselves with GitLab Dynamic shard assignment: The system automatically assigns namespaces to nodes Health monitoring: Nodes that don't check in are automatically marked offline This self-configuring architecture dramatically simplifies scaling. When more capacity is needed, administrators can simply add more nodes without complex reconfiguration. Distributed system with intelligent load balancing Behind the scenes, Exact Code Search operates as a distributed system with these key components: Specialized search nodes: Purpose-built servers that handle indexing and searching Smart sharding: Code is distributed across nodes based on namespaces Automatic load balancing: The system intelligently distributes work based on capacity High availability: Multiple replicas ensure continuous operation even if nodes fail Note: High availability is built into the architecture but not yet fully enabled. See Issue 514736 for updates. Seamless security integration Exact Code Search automatically integrates with GitLab's permission system: Search results are filtered based on the user's access rights Only code from projects the user has access to is displayed Security is built into the core architecture, not added as an afterthought Optimized performance Efficient indexing: Large repositories are indexed in tens of seconds Fast query execution: Most searches return results with sub-second response times Streaming results: The new gRPC-based federated search streams results as they're found Early termination: Once enough results are collected, the system pauses searching From library to distributed system: Engineering challenges we solved While Zoekt provided the core search technology, it was originally designed as a minimal library for managing .zoekt index files - not a distributed database or enterprise-scale service. Here are the key engineering challenges we overcame to make it work at GitLab's scale\" Challenge 1: Building a orchestration layer The problem: Zoekt was designed to work with local index files, not distributed across multiple nodes serving many concurrent users. Our solution: We built a comprehensive orchestration layer that: Creates and manages database models to track nodes, indices, repositories, and tasks Implements a self-registering node architecture (inspired by GitLab Runner) Handles automatic shard assignment and load balancing across nodes Provides bidirectional API communication between GitLab Rails and Zoekt nodes Challenge 2: Scaling storage and indexing The problem: How do you efficiently manage terabytes of index data across multiple nodes while ensuring fast updates? Our solution: We implemented: Intelligent sharding: Namespaces are distributed across nodes based on capacity and load Independent replication: Each node independently indexes from Gitaly (our Git storage service), eliminating complex synchronization Watermark management: Sophisticated storage allocation that prevents nodes from running out of space Unified binary architecture: A single gitlab-zoekt binary that can operate in both indexer and webserver modes Challenge 3: Permission Integration The problem: Zoekt had no concept of GitLab's complex permission system - users should only see results from projects they can access. Our solution: We built native permission filtering directly into the search flow: Search requests include user permission context Results are filtered to include only those the user can access in case permissions change before indexing completes Challenge 4: Operational simplicity The problem: Managing a distributed search system shouldn't require a dedicated team. Our solution: Auto-scaling: Adding capacity is as simple as deploying more nodes - they automatically register and start handling work Self-healing: Nodes that don't check in are automatically marked offline and their work redistributed Zero-configuration sharding: The system automatically determines optimal shard assignments Gradual rollout: Minimizing risk at scale Rolling out a completely new search backend to millions of users required careful planning. Here's how we minimized customer impact while ensuring reliability: Phase 1: Controlled testing (gitlab-org group) We started by enabling Exact Code Search only for the gitlab-org group - our own internal repositories. This allowed us to: Test the system with real production workloads Identify and fix performance bottlenecks Streamline the deployment process Learn from real users' workflows and feedback Phase 2: Performance validation and optimization Before expanding, we focused on ensuring the system could handle GitLab.com's scale: Implemented comprehensive monitoring and alerting Validated storage management with real production data growth Phase 3: Incremental customer expansion We gradually expanded to customers interested in testing Exact Code Search: Gathered feedback on performance and user experience Refined the search UI based on real user workflows Optimized indexing performance (large repositories like gitlab-org/gitlab now index in ~10 seconds) Refined the architecture based on operational learnings Massively increased indexing throughput and improved state transition livecycle Phase 4: Broad rollout Today, over 99% of Premium and Ultimate licensed groups on GitLab.com have access to Exact Code Search. Users can: Toggle between regex and exact search modes Experience the benefits without any configuration changes Fall back to the previous search if needed (though few choose to) Rolling this out gradually meant users didn't experience service disruptions, performance degradation, or feature gaps during the transition. We've already received positive feedback from users as they notice their results becoming more relevant and faster. For technical deep dive: Interested in the detailed architecture and implementation? Check out our comprehensive design document for in-depth technical details about how we built this distributed search system. Getting started with Exact Code Search Getting started with Exact Code Search is simple because it's already enabled by default for Premium and Ultimate groups on GitLab.com (over 99% of eligible groups currently have access). Quickstart guide Navigate to the Advanced Search in your GitLab project or group Enter your search term in the code tab Toggle between Exact Match and Regular Expression modes Use filters to refine your search Basic search syntax Whether using Exact Match or Regular Expression mode, you can refine your search with modifiers: Query Example What It Does file:js Searches only in files containing \"js\" in their name foo -bar Finds \"foo\" but excludes results with \"bar\" lang:ruby Searches only in Ruby files sym:process Finds \"process\" in symbols (methods, classes, variables) Pro Tip: For the most efficient searches, start specific and then broaden if needed. Using file: and lang: filters dramatically increases relevance. Advanced search techniques Stack multiple filters for precision: is_expected file:rb -file:spec This finds \"is_expected\" in Ruby files that don't have \"spec\" in their name. Use regular expressions for powerful patterns: token.*=.*[\\\"'] Watch this search performed against the GitLab Zoekt repository. The search helps find hardcoded passwords, which, if not found, can be a security issue. For more detailed syntax information, check the Exact Code Search documentation. Availability and deployment Current availability Exact Code Search is currently in Beta for GitLab.com users with Premium and Ultimate licenses: Available for over 99% of licensed groups Search in the UI automatically uses Zoekt when available, Exact Code Search in Search API is behind a feature flag Self-managed deployment options For self-managed instances, we offer several deployment methods: Kubernetes/Helm: Our most well-supported method, using our gitlab-zoekt Helm chart Other deployment options: We're working on streamlining deployment for Omnibus and other installation methods System requirements depend on your codebase size, but the architecture is designed to scale horizontally and/or vertically as your needs grow. What's coming next While Exact Code Search is already powerful, we're continuously improving it: Scale optimizations to support instances with hundreds of thousands of repositories Improved self-managed deployment options, including streamlined Omnibus support Full high availability support with automatic failover and load balancing Stay tuned for updates as we move from Beta to General Availability. Transform how you work with code GitLab's Exact Code Search represents a fundamental rethinking of code discovery. By delivering exact matches, powerful regex support, and contextual results, it solves the most frustrating aspects of code search: No more wasting time with irrelevant results No more missing important matches No more clicking through files just to understand basic context No more performance issues as codebases grow The impact extends beyond individual productivity: Teams collaborate better with easy code referencing Knowledge sharing accelerates when patterns are discoverable Onboarding becomes faster with quick codebase comprehension Security improves with effective pattern auditing Technical debt reduction becomes more feasible Exact Code Search isn't just a feature, it's a better way to understand and work with code. Stop searching and start finding. We'd love to hear from you! Share your experiences, questions, or feedback about Exact Code Search in our feedback issue. Your input helps us prioritize improvements and new features. Ready to experience smarter code search? Learn more in our documentation or try it now by performing a search in your Premium or Ultimate licensed namespaces or projects. Not a GitLab user yet? Try a free, 60-day trial of GitLab Ultimate with Duo!",
  "image": "https://about.gitlab.com/images/open-graph/open-graph-gitlab.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-c4ab8db4=\"\" data-v-69df7a1a=\"\" data-v-b7392a61=\"\"\u003e\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e What if you could find any line of code across 48 TB of repositories in milliseconds? GitLab\u0026#39;s new \u003ca href=\"https://docs.gitlab.com/ee/user/search/exact_code_search.html\"\u003eExact Code Search\u003c/a\u003e makes this possible, delivering pinpoint precision, powerful regex support, and contextual multi-line results that transform how teams work with large codebases.\u003c/p\u003e\n\u003ch2 id=\"why-traditional-code-search-is-challenging\" tabindex=\"-1\"\u003eWhy traditional code search is challenging \u003ca href=\"#why-traditional-code-search-is-challenging\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAnyone who works with code knows the frustration of searching across repositories. Whether you\u0026#39;re a developer debugging an issue, a DevOps engineer examining configurations, a security analyst searching for vulnerabilities, a technical writer updating documentation, or a manager reviewing implementation, you know exactly what you need, but traditional search tools often fail you.\u003c/p\u003e\n\u003cp\u003eThese conventional tools return dozens of false positives, lack the context needed to understand results, and slow to a crawl as codebases grow. The result? Valuable time spent hunting for needles in haystacks instead of building, securing, or improving your software.\u003c/p\u003e\n\u003cp\u003eGitLab\u0026#39;s code search functionality has historically been backed by Elasticsearch or OpenSearch. While these are excellent for searching issues, merge requests, comments, and other data containing natural language, they weren\u0026#39;t specifically designed for code. After \u003ca href=\"https://gitlab.com/groups/gitlab-org/-/epics/7404\"\u003eevaluating numerous options\u003c/a\u003e, we developed a better solution.\u003c/p\u003e\n\u003ch2 id=\"introducing-exact-code-search-three-game-changing-capabilities\" tabindex=\"-1\"\u003eIntroducing Exact Code Search: Three game-changing capabilities \u003ca href=\"#introducing-exact-code-search-three-game-changing-capabilities\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEnter GitLab\u0026#39;s \u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/search/exact_code_search.html\"\u003eExact Code Search\u003c/a\u003e\u003c/strong\u003e, currently in beta testing and powered by \u003ca href=\"https://github.com/sourcegraph/zoekt\"\u003eZoekt\u003c/a\u003e (pronounced \u0026#34;zookt\u0026#34;, Dutch for \u0026#34;search\u0026#34;). Zoekt is an open-source code search engine originally created by Google and now maintained by Sourcegraph, specifically designed for fast, accurate code search at scale. We\u0026#39;ve enhanced it with GitLab-specific integrations, enterprise-scale improvements, and seamless permission system integration.\u003c/p\u003e\n\u003cp\u003eThis feature revolutionizes how you find and understand code with three key capabilities:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. Exact Match mode: Zero false positives\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen toggled to \u003cstrong\u003eExact Match mode\u003c/strong\u003e, the search engine returns only results that match your query exactly as entered, eliminating false positives. This precision is invaluable when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSearching for specific error messages\u003c/li\u003e\n\u003cli\u003eLooking for particular function signatures\u003c/li\u003e\n\u003cli\u003eFinding instances of specific variable names\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e2. Regular Expression mode: Powerful pattern matching\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor complex search needs, Regular Expression mode allows you to craft sophisticated search patterns:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFind functions following specific naming patterns\u003c/li\u003e\n\u003cli\u003eLocate variables matching certain constraints\u003c/li\u003e\n\u003cli\u003eIdentify potential security vulnerabilities using pattern matching\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e3. Multiple-line matches: See code in context\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/about-gitlab-com/image/upload/v1750704179/ttjuilkt3v7gtyywnchx.png\" alt=\"Exact Code Search\"/\u003e\u003c/p\u003e\n\u003cp\u003eInstead of seeing just a single line with your matching term, you get the surrounding context that\u0026#39;s crucial for understanding the code. This eliminates the need to click through to files for basic comprehension, significantly accelerating your workflow.\u003c/p\u003e\n\u003ch2 id=\"from-features-to-workflows-real-world-use-cases-and-impact\" tabindex=\"-1\"\u003eFrom features to workflows: Real-world use cases and impact \u003ca href=\"#from-features-to-workflows-real-world-use-cases-and-impact\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLet\u0026#39;s see how these capabilities translate to real productivity gains in everyday development scenarios:\u003c/p\u003e\n\u003ch3 id=\"debugging-from-error-message-to-root-cause-in-seconds\" tabindex=\"-1\"\u003eDebugging: From error message to root cause in seconds \u003ca href=\"#debugging-from-error-message-to-root-cause-in-seconds\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBefore Exact Code Search:\nCopy an error message, search, wade through dozens of partial matches in comments and documentation, click through multiple files, and eventually find the actual code.\u003c/p\u003e\n\u003cp\u003eWith Exact Code Search:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCopy the exact error message\u003c/li\u003e\n\u003cli\u003ePaste it into Exact Code Search with Exact Match mode\u003c/li\u003e\n\u003cli\u003eInstantly find the precise location where the error is thrown, with surrounding context\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eImpact:\u003c/strong\u003e Reduce debugging time from minutes to seconds, eliminating the frustration of false positives.\u003c/p\u003e\n\u003ch3 id=\"code-exploration-master-unfamiliar-codebases-quickly\" tabindex=\"-1\"\u003eCode exploration: Master unfamiliar codebases quickly \u003ca href=\"#code-exploration-master-unfamiliar-codebases-quickly\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBefore Exact Code Search:\nBrowse through directories, make educated guesses about file locations, open dozens of files, and slowly build a mental map of the codebase.\u003c/p\u003e\n\u003cp\u003eWith Exact Code Search:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSearch for key methods or classes with Exact Match mode\u003c/li\u003e\n\u003cli\u003eReview multiple line matches to understand implementation details\u003c/li\u003e\n\u003cli\u003eUse Regular Expression mode to find similar patterns across the codebase\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eImpact:\u003c/strong\u003e Build a mental map of code structure in minutes rather than hours, dramatically accelerating onboarding and cross-team collaboration.\u003c/p\u003e\n\u003ch3 id=\"refactoring-with-confidence\" tabindex=\"-1\"\u003eRefactoring with confidence \u003ca href=\"#refactoring-with-confidence\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBefore Exact Code Search:\nAttempt to find all instances of a method, miss some occurrences, and introduce bugs through incomplete refactoring.\u003c/p\u003e\n\u003cp\u003eWith Exact Code Search:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse Exact Match mode to find all occurrences of methods or variables\u003c/li\u003e\n\u003cli\u003eReview context to understand usage patterns\u003c/li\u003e\n\u003cli\u003ePlan your refactoring with complete information about impact\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eImpact:\u003c/strong\u003e Eliminate the \u0026#34;missed instance\u0026#34; bugs that often plague refactoring efforts, improving code quality and reducing rework.\u003c/p\u003e\n\u003ch3 id=\"security-auditing-finding-vulnerable-patterns\" tabindex=\"-1\"\u003eSecurity auditing: Finding vulnerable patterns \u003ca href=\"#security-auditing-finding-vulnerable-patterns\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSecurity teams can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate regex patterns matching known vulnerable code\u003c/li\u003e\n\u003cli\u003eSearch across all repositories in a namespace\u003c/li\u003e\n\u003cli\u003eQuickly identify potential security issues with context that helps assess risk\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eImpact:\u003c/strong\u003e Transform security audits from manual, error-prone processes to systematic, comprehensive reviews.\u003c/p\u003e\n\u003ch3 id=\"cross-repository-insights\" tabindex=\"-1\"\u003eCross-repository insights \u003ca href=\"#cross-repository-insights\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSearch across your entire namespace or instance to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIdentify similar implementations across different projects\u003c/li\u003e\n\u003cli\u003eDiscover opportunities for shared libraries or standardization\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eImpact:\u003c/strong\u003e Break down silos between projects and identify opportunities for code reuse and standardization.\u003c/p\u003e\n\u003ch2 id=\"the-technical-foundation-how-zoekt-delivers-speed-and-precision\" tabindex=\"-1\"\u003eThe technical foundation: How Zoekt delivers speed and precision \u003ca href=\"#the-technical-foundation-how-zoekt-delivers-speed-and-precision\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore diving into our scale achievements, let\u0026#39;s explore what makes Zoekt fundamentally different from traditional search engines — and why it can find exact matches so incredibly fast.\u003c/p\u003e\n\u003ch3 id=\"positional-trigrams-the-secret-to-lightning-fast-exact-matches\" tabindex=\"-1\"\u003ePositional trigrams: The secret to lightning-fast exact matches \u003ca href=\"#positional-trigrams-the-secret-to-lightning-fast-exact-matches\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eZoekt\u0026#39;s speed comes from its use of \u003cstrong\u003epositional trigrams\u003c/strong\u003e — a technique that indexes every sequence of three characters along with their exact positions in files. This approach solves one of the biggest pain points developers have had with Elasticsearch-based code search: false positives.\u003c/p\u003e\n\u003cp\u003eHere\u0026#39;s how it works:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTraditional full-text search engines\u003c/strong\u003e like Elasticsearch tokenize code into words and lose positional information. When you search for \u003ccode\u003egetUserId()\u003c/code\u003e, they might return results containing \u003cstrong\u003euser\u003c/strong\u003e, \u003cstrong\u003eget\u003c/strong\u003e, and \u003cstrong\u003eId\u003c/strong\u003e scattered throughout a file — leading to those frustrating false positives for GitLab users.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eZoekt\u0026#39;s positional trigrams\u003c/strong\u003e maintain exact character sequences and their positions. When you search for \u003ccode\u003egetUserId()\u003c/code\u003e, Zoekt looks for the exact trigrams like \u003cstrong\u003eget\u003c/strong\u003e, \u003cstrong\u003eetU\u003c/strong\u003e, \u003cstrong\u003etUs\u003c/strong\u003e, \u003cstrong\u003eUse\u003c/strong\u003e, \u003cstrong\u003eser\u003c/strong\u003e, \u003cstrong\u003eerI\u003c/strong\u003e, \u003cstrong\u003erId\u003c/strong\u003e, \u003cstrong\u003eId(\u0026#34;, \u0026#34;d()\u003c/strong\u003e, all in the correct sequence and position. This ensures that only exact matches are returned.\u003c/p\u003e\n\u003cp\u003eThe result? Search queries that previously returned hundreds of irrelevant results now return only the precise matches you\u0026#39;re looking for. This was \u003ca href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/325234\"\u003eone of our most requested features\u003c/a\u003e for good reason - developers were losing significant time sifting through false positives.\u003c/p\u003e\n\u003ch3 id=\"regular-expression-performance-at-scale\" tabindex=\"-1\"\u003eRegular expression performance at scale \u003ca href=\"#regular-expression-performance-at-scale\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eZoekt excels at exact matches and is optimized for regular expression searches. The engine uses sophisticated algorithms to convert regex patterns into efficient trigram queries when possible, maintaining speed even for complex patterns across terabytes of code.\u003c/p\u003e\n\u003ch2 id=\"built-for-enterprise-scale\" tabindex=\"-1\"\u003eBuilt for enterprise scale \u003ca href=\"#built-for-enterprise-scale\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eExact Code Search is powerful and built to handle massive scale with impressive performance. This is not just a new UI feature — it\u0026#39;s powered by a completely reimagined backend architecture.\u003c/p\u003e\n\u003ch3 id=\"handling-terabytes-of-code-with-ease\" tabindex=\"-1\"\u003eHandling terabytes of code with ease \u003ca href=\"#handling-terabytes-of-code-with-ease\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOn GitLab.com alone, our Exact Code Search infrastructure indexes and searches over \u003cstrong\u003e48 TB\u003c/strong\u003e of code data while maintaining lightning-fast response times. This scale represents millions of repositories across thousands of namespaces, all searchable within milliseconds. To put this in perspective: This scale represents more code than the entire Linux kernel, Android, and Chromium projects combined. Yet Exact Code Search can find a specific line across this massive codebase in milliseconds.\u003c/p\u003e\n\u003ch3 id=\"self-registering-node-architecture\" tabindex=\"-1\"\u003eSelf-registering node architecture \u003ca href=\"#self-registering-node-architecture\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOur innovative implementation features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic node registration:\u003c/strong\u003e Zoekt nodes register themselves with GitLab\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDynamic shard assignment:\u003c/strong\u003e The system automatically assigns namespaces to nodes\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHealth monitoring:\u003c/strong\u003e Nodes that don\u0026#39;t check in are automatically marked offline\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis self-configuring architecture dramatically simplifies scaling. When more capacity is needed, administrators can simply add more nodes without complex reconfiguration.\u003c/p\u003e\n\u003ch3 id=\"distributed-system-with-intelligent-load-balancing\" tabindex=\"-1\"\u003eDistributed system with intelligent load balancing \u003ca href=\"#distributed-system-with-intelligent-load-balancing\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBehind the scenes, Exact Code Search operates as a distributed system with these key components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpecialized search nodes:\u003c/strong\u003e Purpose-built servers that handle indexing and searching\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSmart sharding:\u003c/strong\u003e Code is distributed across nodes based on namespaces\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic load balancing:\u003c/strong\u003e The system intelligently distributes work based on capacity\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHigh availability:\u003c/strong\u003e Multiple replicas ensure continuous operation even if nodes fail\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNote: High availability is built into the architecture but not yet fully enabled. See \u003ca href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/514736\"\u003eIssue 514736\u003c/a\u003e for updates.\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"seamless-security-integration\" tabindex=\"-1\"\u003eSeamless security integration \u003ca href=\"#seamless-security-integration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eExact Code Search automatically integrates with GitLab\u0026#39;s permission system:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSearch results are filtered based on the user\u0026#39;s access rights\u003c/li\u003e\n\u003cli\u003eOnly code from projects the user has access to is displayed\u003c/li\u003e\n\u003cli\u003eSecurity is built into the core architecture, not added as an afterthought\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"optimized-performance\" tabindex=\"-1\"\u003eOptimized performance \u003ca href=\"#optimized-performance\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEfficient indexing:\u003c/strong\u003e Large repositories are indexed in tens of seconds\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFast query execution:\u003c/strong\u003e Most searches return results with sub-second response times\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStreaming results:\u003c/strong\u003e The new gRPC-based federated search streams results as they\u0026#39;re found\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEarly termination:\u003c/strong\u003e Once enough results are collected, the system pauses searching\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"from-library-to-distributed-system-engineering-challenges-we-solved\" tabindex=\"-1\"\u003eFrom library to distributed system: Engineering challenges we solved \u003ca href=\"#from-library-to-distributed-system-engineering-challenges-we-solved\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhile Zoekt provided the core search technology, it was originally designed as a minimal library for managing \u003ccode\u003e.zoekt\u003c/code\u003e index files - not a distributed database or enterprise-scale service. Here are the key engineering challenges we overcame to make it work at GitLab\u0026#39;s scale\u0026#34;\u003c/p\u003e\n\u003ch3 id=\"challenge-1-building-a-orchestration-layer\" tabindex=\"-1\"\u003eChallenge 1: Building a orchestration layer \u003ca href=\"#challenge-1-building-a-orchestration-layer\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem:\u003c/strong\u003e Zoekt was designed to work with local index files, not distributed across multiple nodes serving many concurrent users.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOur solution:\u003c/strong\u003e We built a comprehensive orchestration layer that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreates and manages database models to track nodes, indices, repositories, and tasks\u003c/li\u003e\n\u003cli\u003eImplements a self-registering node architecture (inspired by GitLab Runner)\u003c/li\u003e\n\u003cli\u003eHandles automatic shard assignment and load balancing across nodes\u003c/li\u003e\n\u003cli\u003eProvides bidirectional API communication between GitLab Rails and Zoekt nodes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"challenge-2-scaling-storage-and-indexing\" tabindex=\"-1\"\u003eChallenge 2: Scaling storage and indexing \u003ca href=\"#challenge-2-scaling-storage-and-indexing\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem:\u003c/strong\u003e How do you efficiently manage terabytes of index data across multiple nodes while ensuring fast updates?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOur solution:\u003c/strong\u003e We implemented:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIntelligent sharding: Namespaces are distributed across nodes based on capacity and load\u003c/li\u003e\n\u003cli\u003eIndependent replication: Each node independently indexes from \u003ca href=\"https://gitlab.com/gitlab-org/gitaly\"\u003eGitaly\u003c/a\u003e (our Git storage service), eliminating complex synchronization\u003c/li\u003e\n\u003cli\u003eWatermark management: Sophisticated storage allocation that prevents nodes from running out of space\u003c/li\u003e\n\u003cli\u003eUnified binary architecture: A single \u003ccode\u003egitlab-zoekt\u003c/code\u003e binary that can operate in both indexer and webserver modes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"challenge-3-permission-integration\" tabindex=\"-1\"\u003eChallenge 3: Permission Integration \u003ca href=\"#challenge-3-permission-integration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem:\u003c/strong\u003e Zoekt had no concept of GitLab\u0026#39;s complex permission system - users should only see results from projects they can access.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOur solution:\u003c/strong\u003e We built native permission filtering directly into the search flow:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSearch requests include user permission context\u003c/li\u003e\n\u003cli\u003eResults are filtered to include only those the user can access in case permissions change before indexing completes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"challenge-4-operational-simplicity\" tabindex=\"-1\"\u003eChallenge 4: Operational simplicity \u003ca href=\"#challenge-4-operational-simplicity\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem:\u003c/strong\u003e Managing a distributed search system shouldn\u0026#39;t require a dedicated team.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOur solution:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAuto-scaling: Adding capacity is as simple as deploying more nodes - they automatically register and start handling work\u003c/li\u003e\n\u003cli\u003eSelf-healing: Nodes that don\u0026#39;t check in are automatically marked offline and their work redistributed\u003c/li\u003e\n\u003cli\u003eZero-configuration sharding: The system automatically determines optimal shard assignments\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"gradual-rollout-minimizing-risk-at-scale\" tabindex=\"-1\"\u003eGradual rollout: Minimizing risk at scale \u003ca href=\"#gradual-rollout-minimizing-risk-at-scale\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRolling out a completely new search backend to millions of users required careful planning. Here\u0026#39;s how we minimized customer impact while ensuring reliability:\u003c/p\u003e\n\u003ch3 id=\"phase-1-controlled-testing-(gitlab-org-group)\" tabindex=\"-1\"\u003ePhase 1: Controlled testing (gitlab-org group) \u003ca href=\"#phase-1-controlled-testing-(gitlab-org-group)\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe started by enabling Exact Code Search only for the \u003ccode\u003egitlab-org\u003c/code\u003e group - our own internal repositories. This allowed us to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTest the system with real production workloads\u003c/li\u003e\n\u003cli\u003eIdentify and fix performance bottlenecks\u003c/li\u003e\n\u003cli\u003eStreamline the deployment process\u003c/li\u003e\n\u003cli\u003eLearn from real users\u0026#39; workflows and feedback\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2-performance-validation-and-optimization\" tabindex=\"-1\"\u003ePhase 2: Performance validation and optimization \u003ca href=\"#phase-2-performance-validation-and-optimization\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBefore expanding, we focused on ensuring the system could handle GitLab.com\u0026#39;s scale:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eImplemented comprehensive monitoring and alerting\u003c/li\u003e\n\u003cli\u003eValidated storage management with real production data growth\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3-incremental-customer-expansion\" tabindex=\"-1\"\u003ePhase 3: Incremental customer expansion \u003ca href=\"#phase-3-incremental-customer-expansion\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe gradually expanded to customers interested in testing Exact Code Search:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGathered feedback on performance and user experience\u003c/li\u003e\n\u003cli\u003eRefined the search UI based on real user workflows\u003c/li\u003e\n\u003cli\u003eOptimized indexing performance (large repositories like \u003ccode\u003egitlab-org/gitlab\u003c/code\u003e now index in ~10 seconds)\u003c/li\u003e\n\u003cli\u003eRefined the architecture based on operational learnings\u003c/li\u003e\n\u003cli\u003eMassively increased indexing throughput and improved state transition livecycle\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-4-broad-rollout\" tabindex=\"-1\"\u003ePhase 4: Broad rollout \u003ca href=\"#phase-4-broad-rollout\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eToday, over 99% of Premium and Ultimate licensed groups on GitLab.com have access to Exact Code Search. Users can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eToggle between regex and exact search modes\u003c/li\u003e\n\u003cli\u003eExperience the benefits without any configuration changes\u003c/li\u003e\n\u003cli\u003eFall back to the previous search if needed (though few choose to)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRolling this out gradually meant users didn\u0026#39;t experience service disruptions, performance degradation, or feature gaps during the transition. We\u0026#39;ve already received positive feedback from users as they notice their results becoming more relevant and faster.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFor technical deep dive:\u003c/strong\u003e Interested in the detailed architecture and implementation? Check out our comprehensive \u003ca href=\"https://handbook.gitlab.com/handbook/engineering/architecture/design-documents/code_search_with_zoekt/\"\u003edesign document\u003c/a\u003e for in-depth technical details about how we built this distributed search system.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"getting-started-with-exact-code-search\" tabindex=\"-1\"\u003eGetting started with Exact Code Search \u003ca href=\"#getting-started-with-exact-code-search\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGetting started with Exact Code Search is simple because it\u0026#39;s already enabled by default for Premium and Ultimate groups on GitLab.com (over 99% of eligible groups currently have access).\u003c/p\u003e\n\u003ch3 id=\"quickstart-guide\" tabindex=\"-1\"\u003eQuickstart guide \u003ca href=\"#quickstart-guide\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the Advanced Search in your GitLab project or group\u003c/li\u003e\n\u003cli\u003eEnter your search term in the code tab\u003c/li\u003e\n\u003cli\u003eToggle between Exact Match and Regular Expression modes\u003c/li\u003e\n\u003cli\u003eUse filters to refine your search\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"basic-search-syntax\" tabindex=\"-1\"\u003eBasic search syntax \u003ca href=\"#basic-search-syntax\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhether using Exact Match or Regular Expression mode, you can refine your search with modifiers:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eQuery Example\u003c/th\u003e\n\u003cth\u003eWhat It Does\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efile:js\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSearches only in files containing \u0026#34;js\u0026#34; in their name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efoo -bar\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFinds \u0026#34;foo\u0026#34; but excludes results with \u0026#34;bar\u0026#34;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elang:ruby\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSearches only in Ruby files\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003esym:process\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFinds \u0026#34;process\u0026#34; in symbols (methods, classes, variables)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePro Tip:\u003c/strong\u003e For the most efficient searches, start specific and then broaden if needed. Using \u003ccode\u003efile:\u003c/code\u003e and \u003ccode\u003elang:\u003c/code\u003e filters dramatically increases relevance.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"advanced-search-techniques\" tabindex=\"-1\"\u003eAdvanced search techniques \u003ca href=\"#advanced-search-techniques\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eStack multiple filters for precision:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eis_expected file:rb -file:spec\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis finds \u0026#34;is_expected\u0026#34; in Ruby files that don\u0026#39;t have \u0026#34;spec\u0026#34; in their name.\u003c/p\u003e\n\u003cp\u003eUse regular expressions for powerful patterns:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etoken.*=.*[\\\u0026#34;\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://gitlab.com/search?search=token.*%3D.*%5B%5C%22\u0026#39;%5D\u0026amp;nav_source=navbar\u0026amp;project_id=46649240\u0026amp;group_id=9970\u0026amp;search_code=true\u0026amp;repository_ref=main\u0026amp;regex=true\"\u003eWatch this search performed against the GitLab Zoekt repository.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe search helps find hardcoded passwords, which, if not found, can be a security issue.\u003c/p\u003e\n\u003cp\u003eFor more detailed syntax information, check the \u003ca href=\"https://docs.gitlab.com/user/search/exact_code_search/#syntax\"\u003eExact Code Search documentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"availability-and-deployment\" tabindex=\"-1\"\u003eAvailability and deployment \u003ca href=\"#availability-and-deployment\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"current-availability\" tabindex=\"-1\"\u003eCurrent availability \u003ca href=\"#current-availability\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eExact Code Search is currently in Beta for GitLab.com users with Premium and Ultimate licenses:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAvailable for over 99% of licensed groups\u003c/li\u003e\n\u003cli\u003eSearch in the UI automatically uses Zoekt when available, Exact Code Search in Search API is behind a feature flag\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"self-managed-deployment-options\" tabindex=\"-1\"\u003eSelf-managed deployment options \u003ca href=\"#self-managed-deployment-options\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eFor self-managed instances, we offer several deployment methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKubernetes/Helm: Our most well-supported method, using our \u003ca href=\"https://gitlab.com/gitlab-org/cloud-native/charts/gitlab-zoekt\"\u003e\u003ccode\u003egitlab-zoekt\u003c/code\u003e Helm chart\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOther deployment options: We\u0026#39;re working on streamlining deployment for Omnibus and other installation methods\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSystem requirements depend on your codebase size, but the architecture is designed to scale horizontally and/or vertically as your needs grow.\u003c/p\u003e\n\u003ch2 id=\"what\u0026#39;s-coming-next\" tabindex=\"-1\"\u003eWhat\u0026#39;s coming next \u003ca href=\"#what\u0026#39;s-coming-next\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhile Exact Code Search is already powerful, we\u0026#39;re continuously improving it:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eScale optimizations\u003c/strong\u003e to support instances with hundreds of thousands of repositories\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImproved self-managed deployment\u003c/strong\u003e options, including streamlined Omnibus support\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFull high availability support\u003c/strong\u003e with automatic failover and load balancing\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStay tuned for updates as we move from Beta to General Availability.\u003c/p\u003e\n\u003ch2 id=\"transform-how-you-work-with-code\" tabindex=\"-1\"\u003eTransform how you work with code \u003ca href=\"#transform-how-you-work-with-code\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitLab\u0026#39;s Exact Code Search represents a fundamental rethinking of code discovery. By delivering exact matches, powerful regex support, and contextual results, it solves the most frustrating aspects of code search:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNo more wasting time with irrelevant results\u003c/li\u003e\n\u003cli\u003eNo more missing important matches\u003c/li\u003e\n\u003cli\u003eNo more clicking through files just to understand basic context\u003c/li\u003e\n\u003cli\u003eNo more performance issues as codebases grow\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe impact extends beyond individual productivity:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTeams collaborate better\u003c/strong\u003e with easy code referencing\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKnowledge sharing accelerates\u003c/strong\u003e when patterns are discoverable\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOnboarding becomes faster\u003c/strong\u003e with quick codebase comprehension\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity improves\u003c/strong\u003e with effective pattern auditing\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTechnical debt reduction\u003c/strong\u003e becomes more feasible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExact Code Search isn\u0026#39;t just a feature, it\u0026#39;s a better way to understand and work with code. Stop searching and start finding.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWe\u0026#39;d love to hear from you!\u003c/strong\u003e Share your experiences, questions, or feedback about Exact Code Search in our \u003ca href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/420920\"\u003efeedback issue\u003c/a\u003e. Your input helps us prioritize improvements and new features.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch4 id=\"ready-to-experience-smarter-code-search-learn-more-in-our-documentation-or-try-it-now-by-performing-a-search-in-your-premium-or-ultimate-licensed-namespaces-or-projects-not-a-gitlab-user-yet-try-a-free-60-day-trial-of-gitlab-ultimate-with-duo!\" tabindex=\"-1\"\u003eReady to experience smarter code search? Learn more in our \u003ca href=\"https://docs.gitlab.com/ee/user/search/exact_code_search.html\"\u003edocumentation\u003c/a\u003e or try it now by performing a search in your Premium or Ultimate licensed namespaces or projects. Not a GitLab user yet? Try \u003ca href=\"https://about.gitlab.com/free-trial/\"\u003ea free, 60-day trial of GitLab Ultimate with Duo\u003c/a\u003e! \u003ca href=\"#ready-to-experience-smarter-code-search-learn-more-in-our-documentation-or-try-it-now-by-performing-a-search-in-your-premium-or-ultimate-licensed-namespaces-or-projects-not-a-gitlab-user-yet-try-a-free-60-day-trial-of-gitlab-ultimate-with-duo!\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h4\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": "2025-06-25T00:00:00Z",
  "modifiedTime": null
}
