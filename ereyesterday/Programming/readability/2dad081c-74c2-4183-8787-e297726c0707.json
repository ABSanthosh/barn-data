{
  "id": "2dad081c-74c2-4183-8787-e297726c0707",
  "title": "MPS 2024.3 Is Out!",
  "link": "https://blog.jetbrains.com/mps/2025/01/mps-2024-3-is-out/",
  "description": "In this release, you’ll find improvements to the UI, reworked internals for various components, and a binary-enabled textgen. MPS 2024.3 also brings enhanced support for icons, an applicability condition for quick-fixes, and numerous platform updates. DOWNLOAD MPS 2024.3 What’s new Let’s check out the new features we’ve prepared for you in this release. Top-level folder […]",
  "author": "Vaclav Pech",
  "published": "Tue, 21 Jan 2025 17:01:08 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "releases",
    "release"
  ],
  "byline": "Vaclav Pech",
  "length": 4973,
  "excerpt": "In this release, you’ll find improvements to the UI, reworked internals for various components, and a binary-enabled textgen. MPS 2024.3 also brings enhanced support for icons, an applicability condit",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "ReleasesMPS 2024.3 Is Out! In this release, you’ll find improvements to the UI, reworked internals for various components, and a binary-enabled textgen. MPS 2024.3 also brings enhanced support for icons, an applicability condition for quick-fixes, and numerous platform updates. DOWNLOAD MPS 2024.3 What’s new Let’s check out the new features we’ve prepared for you in this release. Top-level folder for transient and checkpoint models The ProjectView tool now provides three top-level folders to keep the structure of the project better organized: Project Name Modules Pool Checkpoints and Transient Models The Checkpoints and Transient Models folder is always displayed below the Modules Pool, and is empty unless any transient or checkpoint models are available. These models are displayed under this folder, and not at the top level as they used to be. As a side effect, the new Checkpoints and Transient Models folder allows the ProjectView to remember the expanded and collapsed subtrees of the project structure across MPS restarts. Enable preview tag option The following options to enable/disable the Preview Tab provided by the IntelliJ Platform are now respected by MPS and guarantee the same behavior of the editor as in other JetBrains tools: Settings | Editor | General | Editor Tabs | Opening Policy | Enable preview tab Logical View | Behavior | Enable Preview Tab Applicability condition for a quick-fix A new section named applicable has been added to Quick-Fix definitions to let you control the applicability of a quick-fix. The default value \u003calways\u003e guarantees unrestricted applicability. Icon handling Icons and images that use a path relative to the module are no longer copied during generation next to the places of their individual usage. Instead, they are copied to the distribution module once as image files and are available for use at this single location. This has two immediate benefits: avoiding the duplication of image files to save disk space and the ability to access the images both from the distribution and from the source module. Constant icons In addition to the existing TextIcon and FileIcon concepts, a new ConstantFieldIcon concept is now available. It allows an icon to be specified by reference to a concrete static field declaration holding an instance of javax.swing.Icon. TextGen binary outcome Inspired by the need for better handling of icon files, we’ve added a new mechanism to produce binary output during the TextGen process, instead of text. The new API consists of a write operation that directly manipulates data as instances of byte[]. Tool windows migrated away from ProjectComponent All tool windows, such as Inspector, HierarchyView, and Usages, have been reworked to no longer follow the long-deprecated mechanism of the IntelliJ Platform’s project components (ProjectComponent). The changes to the API have been minimal, but for some tool windows, there is a change in how they are obtained from code: The Project.getComponent() method no longer returns any of the tool windows. Tools that are implemented as an MPS tool concept can be obtained using com.intellij.openapi.project.Project.tool\u003cToolConcept\u003e. Tools that are frequently used from Java provide a static getInstance() method: UsagesViewTool.getInstance() InspectorTool.getInstance() The Inspector tool is traditionally also available from EditorContext.inspectorTool(). IntelliJ Platform components and services In addition to tool windows, most of the MPS core functionality has been reworked not to use IntelliJ IDEA’s ApplicationComponent and ProjectComponent. MPS used to rely heavily on the IntelliJ Platform facilities to compose the complete application. Now, most of the legacy components have been refactored to use contemporary MPS or IntelliJ IDEA APIs (like IntelliJ IDEA’s application/project services and extension points, MPS’ CoreComponents and extensions, etc.). There are still a few components left, which the MPS team plans to get rid of completely in the next release. Most users probably won’t notice any difference, with the exception of reduced startup times. Please consult the Migration Guide if your code fails to locate any of the platform components because it uses an obsolete retrieval mechanism. Switched to the new UI MPS now uses the new UI. The old version of the UI can be enabled by installing the Classic UI plugin. More new features… Check out the What’s New page to learn all about the new features. You can find a full list of fixed issues here. Your JetBrains MPS team Subscribe to MPS Blog updates",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/12/Social_Share_Blog_1280x720-2x.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/mps/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eMPS 2024.3 Is Out!\u003c/h2\u003e                    \n                    \u003cp\u003eIn this release, you’ll find improvements to the UI, reworked internals for various components, and a binary-enabled textgen. MPS 2024.3 also brings enhanced support for icons, an applicability condition for quick-fixes, and numerous platform updates.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/mps/download/\" target=\"_blank\" rel=\"noopener\"\u003eDOWNLOAD MPS 2024.3\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eWhat’s new\u003c/h2\u003e\n\u003cp\u003eLet’s check out the new features we’ve prepared for you in this release.\u003c/p\u003e\n\u003ch2\u003eTop-level folder for transient and checkpoint models\u003c/h2\u003e\n\u003cp\u003eThe \u003ci\u003eProjectView\u003c/i\u003e tool now provides three top-level folders to keep the structure of the project better organized:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ci\u003eProject Name\u003c/i\u003e\u003c/li\u003e\n\u003cli\u003e\u003ci\u003eModules Pool\u003c/i\u003e\u003c/li\u003e\n\u003cli\u003e\u003ci\u003eCheckpoints and Transient Models\u003c/i\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ci\u003eCheckpoints and Transient Models\u003c/i\u003e folder is always displayed below the \u003ci\u003eModules Pool\u003c/i\u003e, and is empty unless any transient or checkpoint models are available. These models are displayed under this folder, and not at the top level as they used to be.\u003cbr/\u003e\nAs a side effect, the new \u003ci\u003eCheckpoints and Transient Models\u003c/i\u003e folder allows the \u003ci\u003eProjectView\u003c/i\u003e to remember the expanded and collapsed subtrees of the project structure across MPS restarts.\u003cbr/\u003e\n\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/Logical_View_Roots.png\" alt=\"The Checkpoints and Transient Models folder in Project View\"/\u003e\u003c/p\u003e\n\u003ch2\u003eEnable preview tag option\u003c/h2\u003e\n\u003cp\u003eThe following options to enable/disable the \u003ci\u003ePreview Tab\u003c/i\u003e provided by the IntelliJ Platform are now respected by MPS and guarantee the same behavior of the editor as in other JetBrains tools:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ci\u003eSettings | Editor | General | Editor Tabs | Opening Policy | Enable preview tab\u003c/i\u003e\u003c/li\u003e\n\u003cli\u003e\u003ci\u003eLogical View | Behavior | Enable Preview Tab\u003c/i\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/Enable_Preview_Tab.png\" alt=\"The Enable preview tag option\"/\u003e\u003c/p\u003e\n\u003ch2\u003eApplicability condition for a quick-fix\u003c/h2\u003e\n\u003cp\u003eA new section named \u003ci\u003eapplicable\u003c/i\u003e has been added to \u003ci\u003eQuick-Fix\u003c/i\u003e definitions to let you control the applicability of a quick-fix. The default value \u003ci\u003e\u0026lt;always\u0026gt;\u003c/i\u003e guarantees unrestricted applicability.\u003cbr/\u003e\n\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/Quick_fix.png\" alt=\"Applicability condition for a quick-fix\"/\u003e\u003c/p\u003e\n\u003ch2\u003eIcon handling\u003c/h2\u003e\n\u003cp\u003eIcons and images that use a path relative to the module are no longer copied during generation next to the places of their individual usage. Instead, they are copied to the distribution module once as image files and are available for use at this single location. This has two immediate benefits: avoiding the duplication of image files to save disk space and the ability to access the images both from the distribution and from the source module.\u003c/p\u003e\n\u003ch2\u003eConstant icons\u003c/h2\u003e\n\u003cp\u003eIn addition to the existing \u003ci\u003eTextIcon\u003c/i\u003e and \u003ci\u003eFileIcon\u003c/i\u003e concepts, a new \u003ci\u003eConstantFieldIcon\u003c/i\u003e concept is now available. It allows an icon to be specified by reference to a concrete static field declaration holding an instance of \u003ci\u003ejavax.swing.Icon\u003c/i\u003e.\u003cbr/\u003e\n\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/Constant_Icon.png\" alt=\"A constant icon definition example\"/\u003e\u003c/p\u003e\n\u003ch2\u003eTextGen binary outcome\u003c/h2\u003e\n\u003cp\u003eInspired by the need for better handling of icon files, we’ve added a new mechanism to produce binary output during the TextGen process, instead of text. The new API consists of a write operation that directly manipulates data as instances of \u003ci\u003ebyte[]\u003c/i\u003e.\u003c/p\u003e\n\u003ch2\u003eTool windows migrated away from \u003ci\u003eProjectComponent\u003c/i\u003e\u003c/h2\u003e\n\u003cp\u003eAll tool windows, such as \u003ci\u003eInspector\u003c/i\u003e, \u003ci\u003eHierarchyView\u003c/i\u003e, and \u003ci\u003eUsages\u003c/i\u003e, have been reworked to no longer follow the long-deprecated mechanism of the IntelliJ Platform’s project components (\u003ci\u003eProjectComponent\u003c/i\u003e). The changes to the API have been minimal, but for some tool windows, there is a change in how they are obtained from code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ci\u003eProject.getComponent()\u003c/i\u003e method no longer returns any of the tool windows.\u003c/li\u003e\n\u003cli\u003eTools that are implemented as an MPS tool concept can be obtained using \u003ci\u003ecom.intellij.openapi.project.Project.tool\u0026lt;ToolConcept\u0026gt;\u003c/i\u003e.\u003c/li\u003e\n\u003cli\u003eTools that are frequently used from Java provide a static \u003ci\u003egetInstance()\u003c/i\u003e method:\n\u003cul\u003e\n\u003cli\u003e\u003ci\u003eUsagesViewTool.getInstance()\u003c/i\u003e\u003c/li\u003e\n\u003cli\u003e\u003ci\u003eInspectorTool.getInstance()\u003c/i\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe Inspector tool is traditionally also available from \u003ci\u003eEditorContext.inspectorTool()\u003c/i\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntelliJ Platform components and services\u003c/h2\u003e\n\u003cp\u003eIn addition to tool windows, most of the MPS core functionality has been reworked not to use IntelliJ IDEA’s \u003ci\u003eApplicationComponent\u003c/i\u003e and \u003ci\u003eProjectComponent\u003c/i\u003e.\u003c/p\u003e\n\u003cp\u003eMPS used to rely heavily on the IntelliJ Platform facilities to compose the complete application. Now, most of the legacy components have been refactored to use contemporary MPS or IntelliJ IDEA APIs (like IntelliJ IDEA’s application/project services and extension points, MPS’ \u003ci\u003eCoreComponents\u003c/i\u003e and extensions, etc.). There are still a few components left, which the MPS team plans to get rid of completely in the next release.\u003c/p\u003e\n\u003cp\u003eMost users probably won’t notice any difference, with the exception of reduced startup times.\u003c/p\u003e\n\u003cp\u003ePlease consult the \u003ca href=\"”https://www.jetbrains.com/help/mps/migration-guide.html#ideaplatformcomponentsandservices”\"\u003eMigration Guide\u003c/a\u003e if your code fails to locate any of the platform components because it uses an obsolete retrieval mechanism.\u003c/p\u003e\n\u003ch2\u003eSwitched to the new UI\u003c/h2\u003e\n\u003cp\u003eMPS now uses the new UI. The old version of the UI can be enabled by installing the \u003ca href=\"https://plugins.jetbrains.com/plugin/24468-classic-ui\" target=\"_blank\" rel=\"noopener\"\u003eClassic UI plugin\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eMore new features…\u003c/h2\u003e\n\u003cp\u003eCheck out the \u003ca href=\"https://www.jetbrains.com/mps/whatsnew/\" target=\"_blank\" rel=\"noopener\"\u003eWhat’s New\u003c/a\u003e page to learn all about the new features.\u003c/p\u003e\n\u003cp\u003eYou can find a full list of fixed issues \u003ca href=\"https://youtrack.jetbrains.com/issues/MPS?q=state:Resolved%20version:%20%7B2024.3*%7D%20order%20by:%20Priority%20%20\u0026amp;_ga=2.231099997.350008667.1687951340-393819702.1681896790\u0026amp;_gl=1*183w1l3*_ga*MzkzODE5NzAyLjE2ODE4OTY3OTA.*_ga_9J976DJZ68*MTY4Nzk2NjcyOS4zMC4xLjE2ODc5Njc0MzYuNy4wLjA.\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003cbr/\u003e\nYour JetBrains MPS team\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to MPS Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
