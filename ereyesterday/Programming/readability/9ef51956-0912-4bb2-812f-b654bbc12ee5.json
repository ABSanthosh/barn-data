{
  "id": "9ef51956-0912-4bb2-812f-b654bbc12ee5",
  "title": "Google Cloud integrations for secure Cloud Run deployments at GitLab",
  "link": "https://about.gitlab.com/blog/2025/01/15/google-cloud-integrations-for-secure-cloud-run-deployments-at-gitlab",
  "description": "",
  "author": "Matt Genelin",
  "published": "2025-01-15T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Matt Genelin, Regnard Raquedan",
  "length": 9387,
  "excerpt": "This tutorial demonstrates how to use GitLab’s Google Artifact Management integration to deploy to Google Cloud Run, a serverless runtime for containers application.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "This tutorial is from a recent Arctiq, GitLab, and Google in-person workshop. The goal was to explore common security challenges faced by organizations as they journey to the cloud. This tutorial will help you learn about the Google Cloud integrations in GitLab. These features are meant to help accelerate and improve security of deployments to Google Cloud. Prerequisites Google Cloud project Appropriate IAM permissions for security, Artifact Registry, and Cloud Run usage. For this tutorial, ensure you have the \"Owner\" role with the aforementioned project. Setting up Workload Identity Federation In this step, we configure GitLab to connect Google Cloud's Workload Identity Federation to reduce the need for service accounts and let the two platforms use short-lived credentials on-demand. On the left sidebar, select Search or go to and find your group or project. If you configure this in a group, settings apply to all projects within by default. Select Settings \u003e Integrations. Select Google Cloud IAM. Input the Project ID and Project number in the respective fields. This information can be obtained from the Google Cloud console Welcome page of your project. Input the desired Pool ID and Provider ID in the respective fields. These are values that you provide and must be unique from other Pool and Provider IDs. Copy the generated command and then go to the Google Cloud console. Run Cloud Shell and execute the generated command from the Workload Identity Federation integration page. Once successful, the Google Cloud IAM integration will be designated as active in the Integrations list at the GitLab project. Artifact Registry configuration As an alternative to GitLab's own place to host artifacts, deploying to Google Cloud's Artifact Registry is another way to leverage their infrastructure. This section will provide steps on how to use GitLab's native integration with Artifact Registry. Note that Workload Identity Federation must already be configured prior to this. At the Google Cloud console, go to Artifact Registry via search or the main navigation. Create a new repository by clicking the \"+\" icon. At the creation page, provide a name and keep the Docker format and Standard mode selected. Select Region and choose us-central1. Leave the rest at the default settings and click Create. Once the repository is created and confirmed, go back to your GitLab project. In your GitLab project, on the left sidebar, select Settings \u003e Integrations. Then select Google Artifact Registry. Under Enable integration, select the Active checkbox, then complete the fields: Google Cloud project ID: The ID of the Google Cloud project where your Artifact Registry repository is located. Repository name: The name of your Artifact Registry repository. Repository location: The location of your Artifact Registry repository. (us-central1 is assumed.) In Configure Google Cloud IAM policies, follow the onscreen instructions to set up the IAM policies in Google Cloud. These policies are required to use the Artifact Registry repository in your GitLab project. Select Save changes. To view your Google Cloud artifacts, on the left sidebar, select Deploy \u003e Google Artifact Registry. Cloud Run configuration Enable the Cloud Run API, if not done already. Go to APIs \u0026 Services \u003e Enabled APIs \u0026 Services. From there, click Enable APIs \u0026 Services at the top and search for Cloud Run Admin API. Select the search result and enable the API. Configure the IAM policies in Google Cloud to grant permissions to allow the Cloud Run CI/CD component to deploy to Cloud Run. GCP_PROJECT_ID=\"\u003cPROJECT ID\u003e\" GCP_PROJECT_NUMBER=\"\u003cPROJECT NUMBER\u003e\" GCP_WORKLOAD_IDENTITY_POOL=\"\u003cPOOL ID\u003e\" gcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\ --member=\"principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\" \\ --role='roles/run.admin' gcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\ --member=\"principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\" \\ --role='roles/iam.serviceAccountUser' gcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\ --member=\"principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\" \\ --role='roles/cloudbuild.builds.editor' Deploy to Cloud Run In this section, you will use Gitlab's CI/CD components to deploy to Cloud Run, Google Cloud's serverless runtime for containers. Go to the GitLab project and from the list of files in the source code, find .gitlab-ci.yaml. Click the file name and the single file editor will show up. Click the Edit button and select the Open in Web IDE option. In Web IDE, copy-paste the following code: stages: - build - upload - deploy This code snippet sets up three stages in the pipeline: build, upload, and deploy. The next step is to create two CI/CD variables in the same YAML file: variables: GITLAB_IMAGE: $CI_REGISTRY_IMAGE/main:$CI_COMMIT_SHORT_SHA AR_IMAGE: $GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_LOCATION-docker.pkg.dev/$GOOGLE_ARTIFACT_REGISTRY_PROJECT_ID/$GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_NAME/main:$CI_COMMIT_SHORT_SHA The first variable, GITLAB\\_IMAGE, denotes the container image that the pipeline creates by default. The second one, AR\\_IMAGE, denotes the location at Google Cloud's Artifact Registry where the container image will be pushed to. Next, define the code that will build the container image: build: image: docker:24.0.5 stage: build services: - docker:24.0.5-dind before_script: - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY script: - docker build -t $GITLAB_IMAGE . - docker push $GITLAB_IMAGE This code uses pre-defined CI/CD variables for the Docker commands. The final step is using two CI/CD components to deploy to Google Cloud. The first component integrates with Artifact Registry and the second is the deployment to Cloud Run: include: - component: gitlab.com/google-gitlab-components/artifact-registry/upload-artifact-registry@main inputs: stage: upload source: $GITLAB_IMAGE target: $AR_IMAGE - component: gitlab.com/google-gitlab-components/cloud-run/deploy-cloud-run@main inputs: stage: deploy project_id: \"\u003cPROJECT_ID\u003e\" service: \"tanuki-racing\" region: \"\u003cREGION\u003e\" image: $AR_IMAGE Replace \u003cPROJECT_ID\u003e with your Google Cloud Project ID. Replace with the Google Cloud region most appropriate to your location. us-central1 is assumed. Commit the changes and push to the main branch. For reference, the final .gitlab-ci.yaml should look like this, noting to replace the and with the appropriate values: stages: - build - upload - deploy variables: GITLAB_IMAGE: $CI_REGISTRY_IMAGE/main:$CI_COMMIT_SHORT_SHA AR_IMAGE: $GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_LOCATION-docker.pkg.dev/$GOOGLE_ARTIFACT_REGISTRY_PROJECT_ID/$GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_NAME/main:$CI_COMMIT_SHORT_SHA build: image: docker:24.0.5 stage: build services: - docker:24.0.5-dind before_script: - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY script: - docker build -t $GITLAB_IMAGE . - docker push $GITLAB_IMAGE include: - component: gitlab.com/google-gitlab-components/artifact-registry/upload-artifact-registry@main inputs: stage: upload source: $GITLAB_IMAGE target: $AR_IMAGE - component: gitlab.com/google-gitlab-components/cloud-run/deploy-cloud-run@main inputs: stage: deploy project_id: \"\u003cPROJECT_ID\u003e\" service: \"tanuki-racing\" region: \"\u003cREGION\u003e\" image: $AR_IMAGE Go back to the main GitLab project and view the pipeline that was just initiated. Take note of the stages that should be the same stages that were defined in Step 2. Once the pipeline is complete, go to the Google Cloud console and then Cloud Run via search or navigation. A new Cloud Run service called tanuki-racing should be created. Click the service name and then go to the Security tab. Ensure that the service is set to Allow unauthenticated invocations. This will make the deployed app publicly available. The app URL posted on screen is now available and should open a new browser tab when clicked. By utilizing GitLab’s CI/CD pipelines to build and push a containerized application to Google Artifact Registry, you can see the power of GitLab’s AI-powered DevSecOps Platform as a means to building secure applications. GitLab also deployed the containerized application to Google’s Cloud Run as a low-cost running application on the public internet. Using GitLab to instrument building an application, pushing a container and triggering a cloud run deployment allows DevOps engineers to have the assurance that secure applications are being run on the public-facing internet. Sign up for a 60-day free trial of GitLab Ultimate to begin working with these integrations. Also, check out our solutions architecture area for more Gitlab and Google Cloud tutorials.",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/fJKX41PJHKCfSOWw4xQxm/ec9dd7c7d90d06b63926d25f72b84f8d/blog-image-template-1800x945.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003e\u003cem\u003eThis tutorial is from a recent Arctiq, GitLab, and Google in-person workshop. The goal was to explore common security challenges faced by organizations as they journey to the cloud.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis tutorial will help you learn about the \u003ca href=\"https://cloud.google.com/docs/gitlab\"\u003eGoogle Cloud integrations in GitLab\u003c/a\u003e. These features are meant to help accelerate and improve security of deployments to Google Cloud.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/75hahkyZZ8T7tCKDuTZ4eI/6ba8dbc29e97c1440d201b5f9794075e/image2.png\" alt=\"Google integrations list\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"prerequisites\" tabindex=\"-1\"\u003ePrerequisites \u003ca href=\"#prerequisites\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\"\u003eGoogle Cloud project\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAppropriate \u003ca href=\"https://cloud.google.com/iam/docs/\"\u003eIAM permissions\u003c/a\u003e for security, Artifact Registry, and Cloud Run usage. For this tutorial, ensure you have the \u0026#34;Owner\u0026#34; role with the aforementioned project.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"setting-up-workload-identity-federation\" tabindex=\"-1\"\u003eSetting up Workload Identity Federation \u003ca href=\"#setting-up-workload-identity-federation\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn this step, we configure GitLab to connect Google Cloud\u0026#39;s Workload Identity Federation to reduce the need for service accounts and let the two platforms use short-lived credentials on-demand.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOn the left sidebar, select \u003cstrong\u003eSearch\u003c/strong\u003e or go to and find your group or project. If you configure this in a group, settings apply to all projects within by default.\u003c/li\u003e\n\u003cli\u003eSelect \u003cstrong\u003eSettings \u0026gt; Integrations\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eSelect \u003cstrong\u003eGoogle Cloud IAM\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eInput the Project ID and Project number in the respective fields. This information can be obtained from the Google Cloud console \u003ca href=\"https://console.cloud.google.com/welcome\"\u003eWelcome\u003c/a\u003e page of your project.\u003c/li\u003e\n\u003cli\u003eInput the desired Pool ID and Provider ID in the respective fields. These are values that you provide and must be unique from other Pool and Provider IDs.\u003c/li\u003e\n\u003cli\u003eCopy the generated command and then go to the \u003cstrong\u003eGoogle Cloud console\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eRun \u003cstrong\u003eCloud Shell\u003c/strong\u003e and execute the generated command from the Workload Identity Federation integration page.\u003c/li\u003e\n\u003cli\u003eOnce successful, the \u003cstrong\u003eGoogle Cloud IAM\u003c/strong\u003e integration will be designated as active in the Integrations list at the GitLab project.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"artifact-registry-configuration\" tabindex=\"-1\"\u003eArtifact Registry configuration \u003ca href=\"#artifact-registry-configuration\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAs an alternative to GitLab\u0026#39;s own place to host artifacts, deploying to Google Cloud\u0026#39;s Artifact Registry is another way to leverage their infrastructure. This section will provide steps on how to use GitLab\u0026#39;s native integration with Artifact Registry. Note that Workload Identity Federation must already be configured prior to this.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAt the \u003cstrong\u003eGoogle Cloud\u003c/strong\u003e console, go to \u003cstrong\u003eArtifact Registry\u003c/strong\u003e via search or the main navigation.\u003c/li\u003e\n\u003cli\u003eCreate a new repository by clicking the \u003cstrong\u003e\u0026#34;+\u0026#34;\u003c/strong\u003e icon. At the creation page, provide a name and keep the \u003cstrong\u003eDocker\u003c/strong\u003e format and \u003cstrong\u003eStandard\u003c/strong\u003e mode selected. Select \u003cstrong\u003eRegion\u003c/strong\u003e and choose \u003cstrong\u003eus-central1\u003c/strong\u003e. Leave the rest at the default settings and click \u003cstrong\u003eCreate\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eOnce the repository is created and confirmed, go back to your GitLab project.\u003c/li\u003e\n\u003cli\u003eIn your GitLab project, on the left sidebar, select \u003cstrong\u003eSettings \u0026gt; Integrations\u003c/strong\u003e. Then select \u003cstrong\u003eGoogle Artifact Registry\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eUnder Enable integration, select the \u003cstrong\u003eActive\u003c/strong\u003e checkbox, then complete the fields:\n\u003cul\u003e\n\u003cli\u003eGoogle Cloud project ID: The ID of the Google Cloud project where your Artifact Registry repository is located.\u003c/li\u003e\n\u003cli\u003eRepository name: The name of your Artifact Registry repository.\u003c/li\u003e\n\u003cli\u003eRepository location: The location of your Artifact Registry repository. (\u003ccode\u003eus-central1\u003c/code\u003e is assumed.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIn \u003cstrong\u003eConfigure Google Cloud IAM policies\u003c/strong\u003e, follow the onscreen instructions to set up the IAM policies in Google Cloud. These policies are required to use the Artifact Registry repository in your GitLab project. Select \u003cstrong\u003eSave\u003c/strong\u003e changes.\u003c/li\u003e\n\u003cli\u003eTo view your Google Cloud artifacts, on the left sidebar, select \u003cstrong\u003eDeploy \u0026gt; Google Artifact Registry\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"cloud-run-configuration\" tabindex=\"-1\"\u003eCloud Run configuration \u003ca href=\"#cloud-run-configuration\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eEnable the Cloud Run API, if not done already. Go to \u003cstrong\u003eAPIs \u0026amp; Services \u0026gt; Enabled APIs \u0026amp; Services\u003c/strong\u003e. From there, click \u003cstrong\u003eEnable APIs \u0026amp; Services\u003c/strong\u003e at the top and search for \u003cstrong\u003eCloud Run Admin API\u003c/strong\u003e. Select the search result and enable the API.\u003c/li\u003e\n\u003cli\u003eConfigure the IAM policies in Google Cloud to grant permissions to allow the Cloud Run CI/CD component to deploy to Cloud Run.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eGCP_PROJECT_ID=\u0026#34;\u0026lt;PROJECT ID\u0026gt;\u0026#34;\nGCP_PROJECT_NUMBER=\u0026#34;\u0026lt;PROJECT NUMBER\u0026gt;\u0026#34;\nGCP_WORKLOAD_IDENTITY_POOL=\u0026#34;\u0026lt;POOL ID\u0026gt;\u0026#34;\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member=\u0026#34;principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\u0026#34; \\\n  --role=\u0026#39;roles/run.admin\u0026#39;\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member=\u0026#34;principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\u0026#34; \\\n  --role=\u0026#39;roles/iam.serviceAccountUser\u0026#39;\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member=\u0026#34;principalSet://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_POOL}/attribute.developer_access/true\u0026#34; \\\n  --role=\u0026#39;roles/cloudbuild.builds.editor\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"deploy-to-cloud-run\" tabindex=\"-1\"\u003eDeploy to Cloud Run \u003ca href=\"#deploy-to-cloud-run\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn this section, you will use Gitlab\u0026#39;s CI/CD components to deploy to Cloud Run, Google Cloud\u0026#39;s serverless runtime for containers.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGo to the GitLab project and from the list of files in the source code, find \u003ccode\u003e.gitlab-ci.yaml\u003c/code\u003e. Click the \u003cstrong\u003efile name\u003c/strong\u003e and the single file editor will show up. Click the \u003cstrong\u003eEdit\u003c/strong\u003e button and select the \u003cstrong\u003eOpen in Web IDE\u003c/strong\u003e option.\u003c/li\u003e\n\u003cli\u003eIn Web IDE, copy-paste the following code:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n    - build\n    - upload\n    - deploy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code snippet sets up three stages in the pipeline: build, upload, and deploy.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe next step is to create two CI/CD variables in the same YAML file:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003evariables:\n    GITLAB_IMAGE: $CI_REGISTRY_IMAGE/main:$CI_COMMIT_SHORT_SHA\n    AR_IMAGE: $GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_LOCATION-docker.pkg.dev/$GOOGLE_ARTIFACT_REGISTRY_PROJECT_ID/$GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_NAME/main:$CI_COMMIT_SHORT_SHA\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first variable, \u003ccode\u003eGITLAB\\_IMAGE\u003c/code\u003e, denotes the container image that the pipeline creates by default. The second one, \u003ccode\u003eAR\\_IMAGE\u003c/code\u003e, denotes the location at Google Cloud\u0026#39;s Artifact Registry where the container image will be pushed to.\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eNext, define the code that will build the container image:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ebuild:\n    image: docker:24.0.5\n    stage: build\n    services:\n        - docker:24.0.5-dind\n    before_script:\n        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    script:\n        - docker build -t $GITLAB_IMAGE .\n        - docker push $GITLAB_IMAGE\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code uses \u003ca href=\"https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\"\u003epre-defined CI/CD variables\u003c/a\u003e for the Docker commands.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eThe final step is using two CI/CD components to deploy to Google Cloud. The first component integrates with Artifact Registry and the second is the deployment to Cloud Run:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003einclude:\n    - component: gitlab.com/google-gitlab-components/artifact-registry/upload-artifact-registry@main\n      inputs:\n        stage: upload\n        source: $GITLAB_IMAGE\n        target: $AR_IMAGE\n\n    - component: gitlab.com/google-gitlab-components/cloud-run/deploy-cloud-run@main\n      inputs:\n        stage: deploy\n        project_id: \u0026#34;\u0026lt;PROJECT_ID\u0026gt;\u0026#34;\n        service: \u0026#34;tanuki-racing\u0026#34;\n        region: \u0026#34;\u0026lt;REGION\u0026gt;\u0026#34;\n        image: $AR_IMAGE\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReplace \u0026lt;PROJECT_ID\u0026gt; with your Google Cloud Project ID. Replace with the \u003ca href=\"https://cloud.google.com/compute/docs/regions-zones\"\u003eGoogle Cloud region\u003c/a\u003e most appropriate to your location. \u003ccode\u003eus-central1\u003c/code\u003e is assumed.\u003c/p\u003e\n\u003cp\u003eCommit the changes and push to the main branch. For reference, the final \u003ccode\u003e.gitlab-ci.yaml\u003c/code\u003e should look like this, noting to replace the \u003cproject\u003e and \u003cregion\u003e with the appropriate values:\u003c/region\u003e\u003c/project\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n    - build\n    - upload\n    - deploy\nvariables:\n    GITLAB_IMAGE: $CI_REGISTRY_IMAGE/main:$CI_COMMIT_SHORT_SHA\n    AR_IMAGE: $GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_LOCATION-docker.pkg.dev/$GOOGLE_ARTIFACT_REGISTRY_PROJECT_ID/$GOOGLE_ARTIFACT_REGISTRY_REPOSITORY_NAME/main:$CI_COMMIT_SHORT_SHA\n\nbuild:\n    image: docker:24.0.5\n    stage: build\n    services:\n        - docker:24.0.5-dind\n    before_script:\n        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    script:\n        - docker build -t $GITLAB_IMAGE .\n        - docker push $GITLAB_IMAGE\n\ninclude:\n    - component: gitlab.com/google-gitlab-components/artifact-registry/upload-artifact-registry@main\n      inputs:\n        stage: upload\n        source: $GITLAB_IMAGE\n        target: $AR_IMAGE\n\n    - component: gitlab.com/google-gitlab-components/cloud-run/deploy-cloud-run@main\n      inputs:\n        stage: deploy\n        project_id: \u0026#34;\u0026lt;PROJECT_ID\u0026gt;\u0026#34;\n        service: \u0026#34;tanuki-racing\u0026#34;\n        region: \u0026#34;\u0026lt;REGION\u0026gt;\u0026#34;\n        image: $AR_IMAGE\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eGo back to the main GitLab project and view the pipeline that was just initiated. Take note of the stages that should be the same stages that were defined in Step 2.\u003c/li\u003e\n\u003cli\u003eOnce the pipeline is complete, go to the Google Cloud console and then \u003cstrong\u003eCloud Run\u003c/strong\u003e via search or navigation. A new Cloud Run service called \u003ccode\u003etanuki-racing\u003c/code\u003e should be created.\u003c/li\u003e\n\u003cli\u003eClick the \u003cstrong\u003eservice name\u003c/strong\u003e and then go to the \u003cstrong\u003eSecurity\u003c/strong\u003e tab. Ensure that the service is set to \u003cstrong\u003eAllow unauthenticated invocations\u003c/strong\u003e. This will make the deployed app publicly available. The app URL posted on screen is now available and should open a new browser tab when clicked.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy utilizing GitLab’s CI/CD pipelines to build and push a containerized application to Google Artifact Registry, you can see the power of GitLab’s AI-powered DevSecOps Platform as a means to building secure applications. GitLab also deployed the containerized application to Google’s Cloud Run as a low-cost running application on the public internet. Using GitLab to instrument building an application, pushing a container and triggering a cloud run deployment allows DevOps engineers to have the assurance that secure applications are being run on the public-facing internet.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://about.gitlab.com/free-trial/devsecops/\"\u003eSign up for a 60-day free trial of GitLab Ultimate\u003c/a\u003e to begin working with these integrations. Also, check out our \u003ca href=\"https://about.gitlab.com/blog/tags/solutions-architecture/\"\u003esolutions architecture area\u003c/a\u003e for more Gitlab and Google Cloud tutorials.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-01-15T00:00:00Z",
  "modifiedTime": null
}
