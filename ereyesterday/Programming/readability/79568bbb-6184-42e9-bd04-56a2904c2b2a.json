{
  "id": "79568bbb-6184-42e9-bd04-56a2904c2b2a",
  "title": "How To Turn Red Energy Into Strategy And Migrate All Your Tests While You‚Äôre At It",
  "link": "https://engineering.prezi.com/how-to-turn-red-energy-into-strategy-and-migrate-all-your-tests-while-youre-at-it-12b29c665ec5?source=rss----911e72786e31---4",
  "description": "",
  "author": "Attila V√°g√≥",
  "published": "Tue, 26 Nov 2024 04:13:06 GMT",
  "source": "https://engineering.prezi.com/feed",
  "categories": [
    "quality-assurance",
    "coding",
    "software-testing",
    "engineering-mangement",
    "software-development"
  ],
  "byline": "Attila V√°g√≥",
  "length": 13798,
  "excerpt": "One of the more major challenges a software engineering organisation tends to face at one point or another in their lifetime is technical debt that simply cannot be ‚Äúpaid back‚Äù. Even with the best of‚Ä¶",
  "siteName": "Prezi Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*U0lNGgJfm0Qo1ZfYDS36KA.png",
  "text": "An in-depth look at migrating over 140 Ruby-based Cucumber tests to a Java-based test automation framework‚Ä¶One of the more major challenges a software engineering organisation tends to face at one point or another in their lifetime is technical debt that simply cannot be ‚Äúpaid back‚Äù. Even with the best of intentions, it does happen, and it can happen for a myriad of reasons, one of them being a stack change over time or a certain language or framework‚Äôs fall from grace over the space of a decade or two. Add to that some inevitable brain drain, and you have yourself a migration trifecta.Over the last few years, an ongoing conversation between engineering teams was our hefty suite of Cucumber regression (E2E) tests written in Ruby. As the years have gone by, Ruby has slowly become the abandoned child of our stack. There was a lot of appetite for it initially, and fairly widespread skillset in the teams. The language was popular, Cucumber was popular, so writing tests in Ruby was also popular. Until it wasn‚Äôt. By 2021, whenever our Cucumber tests came up in conversation, you could feel the dread setting in. Everyone wanted to get rid of them, but nobody had the time, will, or energy to do it. After all, we were talking about roughly 200 tests.By the end of 2023 we had virtually no Ruby skills left in the company. Be that infrastructure or development side.Because it‚Äôs important to remember that regression tests don‚Äôt just run in a vacuum or on local machines. Writing them, updating them, is only half the equation. The other half is an entire infrastructure that enables those tests to run as part of your CI pipelines. At this point, it wasn‚Äôt just developers who wanted to ‚Äî and I quote word for word ‚Äî ‚Äúkill it with fire‚Äù, our developer experience team (DX), who were tasked with maintaining the Ruby infrastructure were also getting exhausted by its costly and unsustainable maintenance, nevermind the risk of ending up in a situation where some dependencies would simply not be supported at all anymore, blocking the pipelines and thus critical releases to production of our products. I mean, just look at these gems, and I say that both literally and figuratively:ruby 2.5: release: release date: 2017-12-25, EOL: 2021-04-05 (latest version: 3.3.6)google chrome 75: release: 2019-06-04 (latest version: 131)bundler gem v1.17.3: release: 2018-12-27 (latest version: 2.5.23)cucumber 3.1: release: 2017-11-28As one of my DX team-mates aptly put, it was a time-bomb ready to blow at any time. The last time I heard that, I had to migrate an entire frontend from Angular 1 to React and do so while also moving a monolith to microfrontends.But I‚Äôll be honest, I also tend to be intrigued by challenges that keep not getting solved for a long time. Perhaps it‚Äôs a form of self-validation or just ‚Äúred energy‚Äù as one of my therapist friends calls it.If you ever used anger to fuel positive change, you used red energy.By spring of 2024 it was decided. I am going to make it my personal goal for the year to once and for all migrate all the Ruby Cucumber tests to our Java-based E2E framework. I was hell-bent on doing whatever was necessary to get it done. Unbeknownst to me, Turu, a colleague of mine from the QA team had a very similar energy fueling a very similar goal. I know that 9/10 times the word ‚Äúsynergy‚Äù is used completely unnecessarily in conversations, and we‚Äôre all tired of hearing it, but this time the synergy was real. I was going to need the QA team‚Äôs support to some extent anyway, but seeing our goals intersect ‚Äî love the boardroom lingo, aye? üôÇ ‚Äî was a massive relief as it meant we were going to be able to share the load somewhat more evenly and accomplish ‚Äî now our collective goal ‚Äî faster. Believe it or not, sometimes throwing more people at the problem does help. As much as I love Fred Brooks‚Äô timeless software engineering classic, it doesn‚Äôt always apply.A few words on strategyIn short? Let‚Äôs call it the ‚Äú80 days around the world‚Äù strategy. I could say we time boxed it, but that sounds boring, and tying our success somehow to Jules Verne sounds more fun. Regardless of what you call it, that aspect ‚Äî especially in hindsight, and hindsight is always 20‚Äì20 ‚Äî was crucial to getting this migration done.I have learnt this doing a lot of proof-of-concept projects and hackathons. Creating an unmovable constraint ‚Äî designers know this first-hand ‚Äî inspires people. Creative ideas surface, people suddenly become more dynamic, adaptable, and start focusing on what truly matters ‚Äî the outcome by a certain date. In this case, we really did give ourselves around 80 days with a singular goal: migrate everything.Migrate everything in 80 days. How? Doesn‚Äôt matter. Get creative. Stay pragmatic. Get. It. Done.Anyone who works in software development knows that prioritisation is a tricky business. A lot hinges on it. In this case, everything did. I ran all the Cucumber tests locally, and quickly realised we will have to be smart about what we migrate, when and why, so to make sure we stayed efficient:I reached out to teams to find out if they had any redundant or deprecated tests. Some did, so I marked them for deletion.I looked at the currently passing tests, and created the first batch to migrate. These got priority because all of these tests were running on live software, used by millions of customers. If, for whatever reason, we would suddenly end up running out of time, we‚Äôd at least have the most important tests migrated.Then I created a second batch, while my colleagues from QA already began giving a helping hand in migrating them to our own test automation framework (TAF). This second batch was all the flaky tests, the ones failing for whatever reason or the disabled ones.Finally, there was a last set of tests that covered some of our A/B tests. Initially, I almost made the mistake of starting with these, but then I realised by the time we‚Äôre done with the migration, most of these A/B tests will have already been concluded. That turned out to be true, and out of 20 or so, we only had to write tests for 3.Once prioritisation was ready, the QA team (partially) and myself (full-time) got working on the implementation part. Tests after test, one by one, day after day, we could see the progress. We used a traffic-light system. Tests that we migrated, we marked with green üü¢, tests we were working on we marked with amber üü†, and tests we found did not need migrating, we marked with red ‚ùå. At all times, everyone involved knew who was working on what test. I decided to waste as little time with Jira tickets as possible, so we did most of the tracking in a Confluence doc.Were we ruthless with our time-saving measures? Perhaps. But did we deliver the work on time? You bet!Once all the tests were migrated, QA did a final review to make sure we tagged everything correctly, important test cases weren‚Äôt missed, and as an output, we created a log table that showed what Cucumber test ended up in what TAF test. Literally within days of migrating, we already had engineers making use of this log as they now had to find the old Cucumber test cases in their new home.A diagram of the entire process created by the author in Freeform.The final step in the strategy was setting up the CI appropriately. We wanted to make sure these tests were parallelised, but in doing so, we had to keep infrastructure cost in mind. Our Ruby tests, while a pain in the neck in every other way, they used a fairly low amount of resources, while the Java tests were a tad more resource-hungry, but DX figured out a good resource to test ratio to keep costs in check. With that in place, I had the honour of pressing the archive button on the repository and announcing to the entire company that we have finally killed all our Cucumber tests.What ultimately enabled a successful migrationLooking back, trying to run a retrospective in my head of what went well, and why we finally managed to pull this migration off, there are a few things that come to mind, and some of these I have come to consider key to any successful project going forward.We had a common goal. It cannot be understated just how important it is for everyone to row in the same direction. It empowers those doing the work to focus on it and do it well. So, the support of both my team and the QA team was crucial. Turu, our senior automated QA specialist had this migration as a personal 3rd quarter goal just as much as I did, so we were both heavily vested in getting the work done successfully.Zero wasted time. Apart from a few initial meetings with QA, my team and I had around what we wanted to achieve and some historical context, the only meetings we had were a weekly 1-hour sync between Turu and myself. That‚Äôs roughly a day‚Äôs worth of meetings over a 10-week project. That‚Äôs not to say that meetings are bad, but every so often they cost the project, and we couldn‚Äôt afford that.Keeping the goal in mind and the goal was clear: migrate all the tests as effectively as possible within the time we had. At times, that meant merging more test scenarios into one, or moving a test into another existing test as a scenario rather than a standalone test.For each test, we did whatever made most sense instead of sticking to a 1:1 carbon-copy approach.Translated to tangible business outcomesBut that‚Äôs the engineering (including QA) success story and as I mentioned in ‚ÄúHow to Sell Engineering Needs To Product Managers‚Äù we owe ourselves and the business as engineers to translate engineering needs to business needs. I‚Äôd be the first to shy away from work that makes no business sense. While I‚Äôm no CFO, nor do I intend to ever become one, any effort that doesn‚Äôt make any business sense doesn‚Äôt sit well with me. That said, no project will ever be done ‚Äúbecause it sits well with Attila‚Äù, so let me translate this particular engineering need to a business need.When you have tests written in a language that nobody knows or cares to learn, those tests will be either poorly written or not written at all. This increases the chance of customer-blocking bugs that could go unnoticed until customer support is alerted, at which point it‚Äôs already too late and costly. So, a more robust product results in less customer support calls, aka money saved.The other downside of a severely outdated test infrastructure is maintenance. Ideally, a software company wants to spend as little money as possible on maintenance. Features or A/B tests are more interesting, and they make more money. Maintenance that costs 10 times more than it should, is a waste of finances, brings down morale and might even be the cause of being unable to hire new engineers. There‚Äôs only so much money in an engineering pot, and we much preferred spending it on new tools or perhaps even additional headcount than maintaining a severely aged infrastructure.Reducing complexity increases velocity. It really does come down to that.As our DX team repeatedly highlighted, we were sitting on a time-bomb. Waking up every day to the very real possibility that one of our Ruby-Cucumber dependencies gets nixed because of its age is not a great place to be in when the core functionality of your product ‚Äî such as signup, payments, and analytics ‚Äî depends on it. Such a situation would have caused severe disruption for Product, wasted A/B testing runtime, increased manual QA and customer support costs for weeks if not months, potential loss of customers and revenue. This is unacceptable, especially when you are on a growth trajectory.Finally, this migration was also a massive enabler. Within weeks of completion, having all of our tests in one place, we were already able to identify areas where we can make our tests more efficient, spend less time in the CI, and be more confident in what is being tested ‚Äî aka have a real and meaningful understanding of our coverage. This can only mean one thing: better velocity in 2025 and beyond, and if there is one thing that Product Managers love hearing, is higher throughput. üòâClosing thoughts on migrations, AI, and machine learningAs QA and I were wrapping the migration up, I couldn‚Äôt help but reach certain tangential conclusions that, I feel, will be food for thought for many of us software engineers and quality engineers in the coming year(s).While completing a migration like this is an exciting opportunity for some of us ‚Äî myself included ‚Äî it‚Äôs not something most engineers would volunteer for, and for good reason. Migrations can be a can of worms, you‚Äôre touching a lot of legacy code you‚Äôve never seen before and have no historical context on. You‚Äôre likely going in a little blind.Then there‚Äôs also the monotonous aspect of the job. Especially when it comes to writing E2E tests, once you have everything in the framework available to you, writing the tests themselves can feel like more of the same, which brings me to my next point and an interesting realisation.At one point, by pure luck, I downloaded the latest version of IntelliJ that features Full Line code completion. Within minutes, I started seeing the IDE suggesting my next line of code, be that a new page object or an assertion, and what do you know? It was often right! Often enough, that I saved 2‚Äì3 days‚Äô worth of time over the course of the migration. This was machine learning in action, under human supervision, which made me think‚Ä¶If there is one job that I‚Äôd like generative AI to do in the future, it‚Äôs maintenance and migrations.It would have been great to feed a model our Cucumber and TAF tests, let it figure out what was missing, migrate those tests, run them and even deploy them with minimal human supervision. Now that‚Äôs something I could really get behind, and who knows, with another healthy dose of red energy it might soon become reality. üòâ",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*hrjJ3SqpTiGLQxHHzsaBUQ.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"dcbe\"\u003eAn in-depth look at migrating over 140 Ruby-based Cucumber tests to a Java-based test automation framework‚Ä¶\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://attilavago.medium.com/?source=post_page---byline--12b29c665ec5---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Attila V√°g√≥\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*Ilzy6aGvG__n7QzdkiL41A.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://engineering.prezi.com/?source=post_page---byline--12b29c665ec5---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Prezi Engineering\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*ecIYF5KMJj1G4-_pkFWy0g.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"18c6\"\u003e\u003cspan\u003eO\u003c/span\u003ene of the more major challenges a software engineering organisation tends to face at one point or another in their lifetime is technical debt that simply cannot be ‚Äúpaid back‚Äù. Even with the best of intentions, it does happen, and it can happen for a myriad of reasons, one of them being a stack change over time or a certain language or framework‚Äôs fall from grace over the space of a decade or two. Add to that some inevitable brain drain, and you have yourself a migration trifecta.\u003c/p\u003e\u003cp id=\"6f9c\"\u003eOver the last few years, an ongoing conversation between engineering teams was our hefty suite of Cucumber regression (E2E) tests written in Ruby. As the years have gone by, Ruby has slowly become the abandoned child of our stack. There was a lot of appetite for it initially, and fairly widespread skillset in the teams. The language was popular, Cucumber was popular, so writing tests in Ruby was also popular. Until it wasn‚Äôt. By 2021, whenever our Cucumber tests came up in conversation, you could feel the dread setting in. Everyone wanted to get rid of them, but nobody had the time, will, or energy to do it. After all, we were talking about roughly 200 tests.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"df0b\"\u003eBy the end of 2023 we had virtually no Ruby skills left in the company. Be that infrastructure or development side.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"d7dd\"\u003eBecause it‚Äôs important to remember that regression tests don‚Äôt just run in a vacuum or on local machines. Writing them, updating them, is only half the equation. The other half is an entire infrastructure that enables those tests to run as part of your CI pipelines. At this point, it wasn‚Äôt just developers who wanted to ‚Äî and I quote word for word ‚Äî\u003cem\u003e ‚Äúkill it with fire‚Äù\u003c/em\u003e, our developer experience team (DX), who were tasked with maintaining the Ruby infrastructure were also getting exhausted by its costly and unsustainable maintenance, nevermind the risk of ending up in a situation where some dependencies would simply not be supported at all anymore, blocking the pipelines and thus critical releases to production of our products. I mean, just look at these gems, and I say that both literally and figuratively:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2600\"\u003eruby 2.5: release: release date: 2017-12-25, EOL: 2021-04-05 (latest version: 3.3.6)\u003cbr/\u003egoogle chrome 75:  release: 2019-06-04 (latest version: 131)\u003cbr/\u003ebundler gem v1.17.3: release: 2018-12-27 (latest version: 2.5.23)\u003cbr/\u003ecucumber 3.1: release: 2017-11-28\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"cd52\"\u003eAs one of my DX team-mates aptly put, it was a time-bomb ready to blow at any time. The last time I heard that, I had to migrate an entire frontend from Angular 1 to React and do so while also \u003ca href=\"https://medium.com/p/8373a6e67ac8\" rel=\"noopener\"\u003emoving a monolith to microfrontends\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"131f\"\u003eBut I‚Äôll be honest, I also tend to be intrigued by challenges that keep not getting solved for a long time. Perhaps it‚Äôs a form of self-validation or just ‚Äúred energy‚Äù as one of my therapist friends calls it.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"5931\"\u003eIf you ever used anger to fuel positive change, you used red energy.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"2b70\"\u003eBy spring of 2024 it was decided. I am going to make it my personal goal for the year to once and for all migrate all the Ruby Cucumber tests to our Java-based E2E framework. I was hell-bent on doing whatever was necessary to get it done. Unbeknownst to me, Turu, a colleague of mine from the QA team had a very similar energy fueling a very similar goal. I know that 9/10 times the word ‚Äúsynergy‚Äù is used completely unnecessarily in conversations, and we‚Äôre all tired of hearing it, but this time the synergy was real. I was going to need the QA team‚Äôs support to some extent anyway, but seeing our goals intersect ‚Äî love the boardroom lingo, aye? üôÇ ‚Äî was a massive relief as it meant we were going to be able to share the load somewhat more evenly and accomplish ‚Äî now our collective goal ‚Äî faster. Believe it or not, sometimes throwing more people at the problem does help. As much as I love Fred Brooks‚Äô timeless software engineering classic, it doesn‚Äôt always apply.\u003c/p\u003e\u003ch2 id=\"1f4e\"\u003eA few words on strategy\u003c/h2\u003e\u003cp id=\"0f27\"\u003eIn short? Let‚Äôs call it the ‚Äú80 days around the world‚Äù strategy. I could say we time boxed it, but that sounds boring, and tying our success somehow to Jules Verne sounds more fun. Regardless of what you call it, that aspect ‚Äî especially in hindsight, and hindsight is always 20‚Äì20 ‚Äî was crucial to getting this migration done.\u003c/p\u003e\u003cp id=\"7095\"\u003eI have learnt this doing a lot of proof-of-concept projects and hackathons. Creating an unmovable constraint ‚Äî designers know this first-hand ‚Äî inspires people. Creative ideas surface, people suddenly become more dynamic, adaptable, and start focusing on what truly matters ‚Äî the outcome by a certain date. In this case, we really did give ourselves around 80 days with a singular goal: migrate everything.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"2a62\"\u003eMigrate everything in 80 days. How? Doesn‚Äôt matter. Get creative. Stay pragmatic. Get. It. Done.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"ded3\"\u003eAnyone who works in software development knows that prioritisation is a tricky business. A lot hinges on it. In this case, everything did. I ran all the Cucumber tests locally, and quickly realised we will have to be smart about what we migrate, when and why, so to make sure we stayed efficient:\u003c/p\u003e\u003cul\u003e\u003cli id=\"f07a\"\u003eI reached out to teams to find out if they had any redundant or deprecated tests. Some did, so I marked them for deletion.\u003c/li\u003e\u003cli id=\"78e5\"\u003eI looked at the currently passing tests, and created the first batch to migrate. These got priority because all of these tests were running on live software, used by millions of customers. If, for whatever reason, we would suddenly end up running out of time, we‚Äôd at least have the most important tests migrated.\u003c/li\u003e\u003cli id=\"af16\"\u003eThen I created a second batch, while my colleagues from QA already began giving a helping hand in migrating them to our own test automation framework (TAF). This second batch was all the flaky tests, the ones failing for whatever reason or the disabled ones.\u003c/li\u003e\u003cli id=\"71eb\"\u003eFinally, there was a last set of tests that covered some of our A/B tests. Initially, I almost made the mistake of starting with these, but then I realised by the time we‚Äôre done with the migration, most of these A/B tests will have already been concluded. That turned out to be true, and out of 20 or so, we only had to write tests for 3.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1198\"\u003eOnce prioritisation was ready, the QA team (partially) and myself (full-time) got working on the implementation part. Tests after test, one by one, day after day, we could see the progress. We used a traffic-light system. Tests that we migrated, we marked with green üü¢, tests we were working on we marked with amber üü†, and tests we found did not need migrating, we marked with red ‚ùå. At all times, everyone involved knew who was working on what test. I decided to waste as little time with Jira tickets as possible, so we did most of the tracking in a Confluence doc.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"759c\"\u003eWere we ruthless with our time-saving measures? Perhaps. But did we deliver the work on time? You bet!\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"a3c0\"\u003eOnce all the tests were migrated, QA did a final review to make sure we tagged everything correctly, important test cases weren‚Äôt missed, and as an output, we created a log table that showed what Cucumber test ended up in what TAF test. Literally within days of migrating, we already had engineers making use of this log as they now had to find the old Cucumber test cases in their new home.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA diagram of the entire process created by the author in Freeform.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"cfb0\"\u003eThe final step in the strategy was setting up the CI appropriately. We wanted to make sure these tests were parallelised, but in doing so, we had to keep infrastructure cost in mind. Our Ruby tests, while a pain in the neck in every other way, they used a fairly low amount of resources, while the Java tests were a tad more resource-hungry, but DX figured out a good resource to test ratio to keep costs in check. With that in place, I had the honour of pressing the archive button on the repository and announcing to the entire company that we have finally killed all our Cucumber tests.\u003c/p\u003e\u003ch2 id=\"1845\"\u003eWhat ultimately enabled a successful migration\u003c/h2\u003e\u003cp id=\"4339\"\u003eLooking back, trying to run a retrospective in my head of what went well, and why we finally managed to pull this migration off, there are a few things that come to mind, and some of these I have come to consider key to any successful project going forward.\u003c/p\u003e\u003cp id=\"4f3e\"\u003e\u003cstrong\u003eWe had a common goal.\u003c/strong\u003e It cannot be understated just how important it is for everyone to row in the same direction. It empowers those doing the work to focus on it and do it well. So, the support of both my team and the QA team was crucial. Turu, our senior automated QA specialist had this migration as a personal 3rd quarter goal just as much as I did, so we were both heavily vested in getting the work done successfully.\u003c/p\u003e\u003cp id=\"8aa0\"\u003e\u003cstrong\u003eZero wasted time.\u003c/strong\u003e Apart from a few initial meetings with QA, my team and I had around what we wanted to achieve and some historical context, the only meetings we had were a weekly 1-hour sync between Turu and myself. That‚Äôs roughly a day‚Äôs worth of meetings over a 10-week project. That‚Äôs not to say that meetings are bad, but every so often they cost the project, and we couldn‚Äôt afford that.\u003c/p\u003e\u003cp id=\"f14c\"\u003e\u003cstrong\u003eKeeping the goal in mind \u003c/strong\u003eand the goal was clear: migrate all the tests as effectively as possible within the time we had. At times, that meant merging more test scenarios into one, or moving a test into another existing test as a scenario rather than a standalone test.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"0fe6\"\u003eFor each test, we did whatever made most sense instead of sticking to a 1:1 carbon-copy approach.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"34d5\"\u003eTranslated to tangible business outcomes\u003c/h2\u003e\u003cp id=\"871c\"\u003eBut that‚Äôs the engineering (including QA) success story and as I mentioned in \u003ca href=\"https://medium.com/gitconnected/how-to-sell-engineering-needs-to-product-managers-2a4f379103b6?sk=60f7bf95b768bc5dbdcd463bddf56e84\" rel=\"noopener\"\u003e‚ÄúHow to Sell Engineering Needs To Product Managers‚Äù\u003c/a\u003e we owe ourselves and the business as engineers to translate engineering needs to business needs. I‚Äôd be the first to shy away from work that makes no business sense. While I‚Äôm no CFO, nor do I intend to ever become one, any effort that doesn‚Äôt make any business sense doesn‚Äôt sit well with me. That said, no project will ever be done \u003cem\u003e‚Äúbecause it sits well with Attila‚Äù\u003c/em\u003e, so let me translate this particular engineering need to a business need.\u003c/p\u003e\u003cp id=\"8381\"\u003eWhen you have tests written in a language that nobody knows or cares to learn, those tests will be either poorly written or not written at all. This increases the chance of customer-blocking bugs that could go unnoticed until customer support is alerted, at which point it‚Äôs already too late and costly. So, a more robust product results in less customer support calls, aka money saved.\u003c/p\u003e\u003cp id=\"6981\"\u003eThe other downside of a severely outdated test infrastructure is maintenance. Ideally, a software company wants to spend as little money as possible on maintenance. Features or A/B tests are more interesting, and they make more money. Maintenance that costs 10 times more than it should, is a waste of finances, brings down morale and might even be the cause of being unable to hire new engineers. There‚Äôs only so much money in an engineering pot, and we much preferred spending it on new tools or perhaps even additional headcount than maintaining a severely aged infrastructure.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"1f60\"\u003eReducing complexity increases velocity. It really does come down to that.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"5b1b\"\u003eAs our DX team repeatedly highlighted, we were sitting on a time-bomb. Waking up every day to the very real possibility that one of our Ruby-Cucumber dependencies gets nixed because of its age is not a great place to be in when the core functionality of your product ‚Äî such as signup, payments, and analytics ‚Äî depends on it. Such a situation would have caused severe disruption for Product, wasted A/B testing runtime, increased manual QA and customer support costs for weeks if not months, potential loss of customers and revenue. This is unacceptable, especially when you are on a growth trajectory.\u003c/p\u003e\u003cp id=\"357b\"\u003eFinally, this migration was also a massive enabler. Within weeks of completion, having all of our tests in one place, we were already able to identify areas where we can make our tests more efficient, spend less time in the CI, and be more confident in what is being tested ‚Äî aka have a real and meaningful understanding of our coverage. This can only mean one thing: better velocity in 2025 and beyond, and if there is one thing that Product Managers love hearing, is higher throughput. üòâ\u003c/p\u003e\u003ch2 id=\"ba1a\"\u003eClosing thoughts on migrations, AI, and machine learning\u003c/h2\u003e\u003cp id=\"bae8\"\u003eAs QA and I were wrapping the migration up, I couldn‚Äôt help but reach certain tangential conclusions that, I feel, will be food for thought for many of us software engineers and quality engineers in the coming year(s).\u003c/p\u003e\u003cp id=\"e196\"\u003eWhile completing a migration like this is an exciting opportunity for some of us ‚Äî myself included ‚Äî it‚Äôs not something most engineers would volunteer for, and for good reason. Migrations can be a can of worms, you‚Äôre touching a lot of legacy code you‚Äôve never seen before and have no historical context on. You‚Äôre likely going in a little blind.\u003c/p\u003e\u003cp id=\"40fa\"\u003eThen there‚Äôs also the monotonous aspect of the job. Especially when it comes to writing E2E tests, once you have everything in the framework available to you, writing the tests themselves can feel like more of the same, which brings me to my next point and an interesting realisation.\u003c/p\u003e\u003cp id=\"0847\"\u003eAt one point, by pure luck, I downloaded the latest version of \u003ca href=\"https://www.jetbrains.com/help/idea/full-line-code-completion.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIntelliJ that features Full Line code completion\u003c/a\u003e. Within minutes, I started seeing the IDE suggesting my next line of code, be that a new page object or an assertion, and what do you know? It was often right! Often enough, that I saved 2‚Äì3 days‚Äô worth of time over the course of the migration. This was machine learning in action, under human supervision, which made me think‚Ä¶\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"f98f\"\u003eIf there is one job that I‚Äôd like generative AI to do in the future, it‚Äôs maintenance and migrations.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"67e8\"\u003eIt would have been great to feed a model our Cucumber and TAF tests, let it figure out what was missing, migrate those tests, run them and even deploy them with minimal human supervision. Now that‚Äôs something I could really get behind, and who knows, with another healthy dose of red energy it might soon become reality. üòâ\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2024-11-26T04:13:06.72Z",
  "modifiedTime": null
}
