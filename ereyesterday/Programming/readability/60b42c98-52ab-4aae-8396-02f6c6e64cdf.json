{
  "id": "60b42c98-52ab-4aae-8396-02f6c6e64cdf",
  "title": ".NET 10 Preview 6 Introduces Blazor Enhancements, Memory Optimization, and SDK Improvements",
  "link": "https://www.infoq.com/news/2025/07/dotnet-10-preview-6/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Microsoft has announced the sixth preview of .NET 10, introducing a broad range of enhancements across the .NET Runtime, SDK, libraries, C#, ASP.NET Core, Blazor, and .NET MAUI. As stated in the official release, the update focuses on improving performance, developer experience, and cross-platform tooling. By Almir Vuk",
  "author": "Almir Vuk",
  "published": "Thu, 24 Jul 2025 16:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    ".NET 8",
    ".NET",
    ".NET 9",
    ".NET Core",
    ".NET 10",
    ".NET 7",
    "Development",
    "news"
  ],
  "byline": "Almir Vuk",
  "length": 4333,
  "excerpt": "Microsoft has announced the sixth preview of .NET 10, introducing a broad range of enhancements across the .NET Runtime, SDK, libraries, C#, ASP.NET Core, Blazor, and .NET MAUI. As stated in the offic",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250724113909/apple-touch-icon.png",
  "text": "Microsoft has announced the sixth preview of .NET 10, introducing a broad range of enhancements across the .NET Runtime, SDK, libraries, C#, ASP.NET Core, Blazor, and .NET MAUI. As stated in the official release, the update focuses on improving performance, developer experience, and cross-platform tooling. In the realm of ASP.NET Core, memory management has been refined. Kestrel, IIS, and HTTP.sys now supports automatic eviction of unused memory from its internal pools when applications are idle. As reported, this change requires no developer action and is designed to reduce memory usage efficiently. Metrics for memory pools are now exposed under Microsoft.AspNetCore.MemoryPool, and developers can build custom memory pools using the new IMemoryPoolFactory interface. Blazor also receives several key updates. A new \u003cLinkPreload /\u003e component offers more control over preloading framework assets, improving performance and base URL detection. Blazor WebAssembly projects can now generate output compatible with JavaScript bundlers like webpack by setting WasmBundlerFriendlyBootConfig to true, allowing, as stated, better integration with modern frontend pipelines. Validation support in Blazor has been extended to include nested objects and collections within forms. This new capability is enabled through AddValidation() and the [ValidatableType] attribute. With a note that the attribute remains experimental and requires diagnostic suppression. Blazor diagnostics were improved as well, with traces for server circuits now exposed as top-level activities, simplifying telemetry in tools like Application Insights. Blazor Server now supports persisting circuit state, allowing users to resume activity after reconnecting, even after server-side eviction. Developers can control circuit behavior through the new Blazor.pause() and Blazor.resume() APIs, as explained this will help reduce server resource consumption during idle periods. Navigation behavior in Blazor was updated for consistency, with a configuration switch now opt-in to disable NavigationException usage. ASP.NET Core Identity now includes support for passkeys, enabling modern, phishing-resistant authentication using the WebAuthn and FIDO2 standards. The Blazor Web App template includes built-in support for this. Minimal APIs can now integrate validation error responses using IProblemDetailsService, offering more consistent and customizable error output. As reported, the validation APIs have moved to a new Microsoft.Extensions.Validation package and namespace, broadening their usage beyond ASP.NET Core. Regarding the .NET MAUI, the MediaPicker component was enhanced to support multiple file selection and in-API image compression. Developers can also now intercept web requests within BlazorWebView and HybridWebView, enabling advanced scenarios like modifying headers or injecting custom responses. Furthermore, various UI fixes were implemented across controls, including CollectionView, CarouselView, and SearchBar, along with memory leak resolutions and improved rendering on Windows, Android, and iOS. Additionally, .NET now supports Android API levels 35 and 36, and includes diagnostics and interop performance improvements. On Apple platforms, the release aligns with Xcode 16.4 and brings reliability and runtime enhancements. The .NET SDK introduces major improvements for tool authors, including support for platform-specific tools within a single package, and the new dotnet tool exec command, which, as described in the official docs, allows one-shot execution without installation. Also the lightweight dnx script further simplifies tool execution. CLI introspection capabilities were extended with the --cli-schema option, which outputs a machine-readable JSON representation of commands, aiding automation and scripting. File-based apps received additional improvements, including support for native AOT publishing, project references, and enhanced shebang support for shell execution. For interested readers, full release notes and further technical documentation are available on the official .NET documentation, also the developers can join the GitHub discussion. About the Author Almir Vuk",
  "image": "https://res.infoq.com/news/2025/07/dotnet-10-preview-6/en/headerimage/twitter_card+%2854%29-1753180105767.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eMicrosoft has announced the \u003ca href=\"https://devblogs.microsoft.com/dotnet/dotnet-10-preview-6/\"\u003esixth preview of .NET 10\u003c/a\u003e, introducing a broad range of enhancements across the .NET Runtime, SDK, libraries, C#, ASP.NET Core, Blazor, and .NET MAUI. As stated in the official release, the update focuses on improving performance, developer experience, and cross-platform tooling.\u003c/p\u003e\n\n\u003cp\u003eIn the realm of \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview6/aspnetcore.md\"\u003eASP.NET Core\u003c/a\u003e, memory management has been refined. Kestrel, IIS, and HTTP.sys now supports automatic eviction of unused memory from its internal pools when applications are idle. As reported, this change requires no developer action and is designed to reduce memory usage efficiently. Metrics for memory pools are now exposed under \u003cem\u003eMicrosoft.AspNetCore.MemoryPool\u003c/em\u003e, and developers can build custom memory pools using the new \u003cem\u003eIMemoryPoolFactory\u003c/em\u003e interface.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview6/aspnetcore.md#blazor-webassembly-preloading\"\u003eBlazor\u003c/a\u003e also receives several key updates. A new \u003cem\u003e\u0026lt;LinkPreload /\u0026gt;\u003c/em\u003e component offers more control over preloading framework assets, improving performance and base URL detection. Blazor WebAssembly projects can now generate output compatible with JavaScript bundlers like webpack by setting \u003cem\u003eWasmBundlerFriendlyBootConfig\u003c/em\u003e to \u003cem\u003etrue\u003c/em\u003e, allowing, as stated, better integration with modern frontend pipelines.\u003c/p\u003e\n\n\u003cp\u003eValidation support in Blazor has been extended to include nested objects and collections within forms. This new capability is enabled through \u003cem\u003eAddValidation()\u003c/em\u003e and the \u003cem\u003e[ValidatableType] \u003c/em\u003eattribute. With a note that the attribute remains experimental and requires diagnostic suppression. Blazor diagnostics were improved as well, with traces for server circuits now exposed as top-level activities, simplifying telemetry in tools like \u003ca href=\"https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview\"\u003eApplication Insights\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBlazor Server now supports persisting circuit state, allowing users to resume activity after reconnecting, even after server-side eviction. Developers can control circuit behavior through the new \u003cem\u003eBlazor.pause()\u003c/em\u003e and \u003cem\u003eBlazor.resume()\u003c/em\u003e APIs, as explained this will help reduce server resource consumption during idle periods.\u003c/p\u003e\n\n\u003cp\u003eNavigation behavior in Blazor was updated for consistency, with a configuration switch now opt-in to disable \u003cem\u003eNavigationException\u003c/em\u003e usage. ASP.NET Core Identity now includes support for passkeys, enabling modern, phishing-resistant authentication using the WebAuthn and FIDO2 standards. The Blazor Web App template includes built-in support for this.\u003c/p\u003e\n\n\u003cp\u003eMinimal APIs can now integrate validation error responses using \u003cem\u003eIProblemDetailsService\u003c/em\u003e, offering more consistent and customizable error output. As reported, the validation APIs have moved to a new \u003cem\u003eMicrosoft.Extensions.Validation\u003c/em\u003e package and namespace, broadening their usage beyond ASP.NET Core.\u003c/p\u003e\n\n\u003cp\u003eRegarding the \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview6/dotnetmaui.md\"\u003e.NET MAUI\u003c/a\u003e, the \u003cem\u003eMediaPicker\u003c/em\u003e component was enhanced to support multiple file selection and in-API image compression. Developers can also now intercept web requests within \u003cem\u003eBlazorWebView\u003c/em\u003e and \u003cem\u003eHybridWebView\u003c/em\u003e, enabling advanced scenarios like modifying headers or injecting custom responses.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, various UI fixes were implemented across controls, including \u003cem\u003eCollectionView\u003c/em\u003e, \u003cem\u003eCarouselView\u003c/em\u003e, and \u003cem\u003eSearchBar\u003c/em\u003e, along with memory leak resolutions and improved rendering on Windows, Android, and iOS. Additionally, .NET now supports Android API levels 35 and 36, and includes diagnostics and interop performance improvements. On Apple platforms, the release aligns with Xcode 16.4 and brings reliability and runtime enhancements.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview6/sdk.md\"\u003e.NET SDK\u003c/a\u003e introduces major improvements for tool authors, including support for platform-specific tools within a single package, and the new \u003cem\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools\"\u003edotnet tool\u003c/a\u003e exec\u003c/em\u003e command, which, as described in the official docs, allows one-shot execution without installation. Also \u003ca href=\"https://github.com/dotnet/core/blob/main/release-notes/10.0/preview/preview6/sdk.md#the-new-dnx-tool-execution-script\"\u003ethe lightweight \u003cem\u003ednx\u003c/em\u003e\u003c/a\u003e script further simplifies tool execution.\u003c/p\u003e\n\n\u003cp\u003eCLI introspection capabilities were extended with the \u003cem\u003e--cli-schema\u003c/em\u003e option, which outputs a machine-readable JSON representation of commands, aiding automation and scripting. File-based apps received additional improvements, including support for native AOT publishing, project references, and enhanced shebang support for shell execution.\u003c/p\u003e\n\n\u003cp\u003eFor interested readers, \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-10/overview\"\u003efull release notes\u003c/a\u003e and further technical documentation are available on the official .NET documentation, also the developers can join the \u003ca href=\"https://github.com/dotnet/core/discussions/9974\"\u003eGitHub discussion\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Almir-Vuk\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAlmir Vuk\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-07-24T00:00:00Z",
  "modifiedTime": null
}
