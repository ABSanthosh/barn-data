{
  "id": "df261d6d-df45-4bf2-b029-014fdd528e4f",
  "title": "From chaos to clarity: Using GitHub Copilot agents to improve developer workflows",
  "link": "https://github.blog/ai-and-ml/github-copilot/from-chaos-to-clarity-using-github-copilot-agents-to-improve-developer-workflows/",
  "description": "Explore how you can set Copilot coding agent up for success with custom instruction and Copilot setup steps. The post From chaos to clarity: Using GitHub Copilot agents to improve developer workflows appeared first on The GitHub Blog.",
  "author": "Chris Reddington",
  "published": "Tue, 15 Jul 2025 16:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "coding agent",
    "Rubber Duck Thursdays"
  ],
  "byline": "Chris Reddington",
  "length": 12022,
  "excerpt": "Explore how you can set Copilot coding agent up for success with custom instruction and Copilot setup steps.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Modern development often starts with good intentions: a quick script, a prototype, maybe an action to automate one small thing. But as projects evolve, those early efforts can become brittle. What if you could bring clarity and structure to those projects without slowing down your momentum? This tutorial shows how we used GitHub Copilot coding agent to refactor and enhance a personal GitHub Actions project called validate-file-exists. What started as a patchwork utility became well-structured, test-covered, documented, and set up for success with Copilot agent mode and coding agent. We’ll walk through my example of: Updating Copilot custom instructions for better task alignment. Creating the copilot-setup-steps.yaml file to give the coding agent the needed tools in its environment. Working with Copilot to identify technical debt. Collaborating with Copilot in pull requests. Partnering with Copilot to iteratively improve the UI on a separate project. The GitHub Action that started it all Back in November 2024, I created a small GitHub Action called validate-file-exists. I wanted to ensure certain files (like a dependabot.yml file, or .github/copilot-instructions.md) were present in a repository. If not, then the GitHub Actions workflow would fail. It supported comma-separated inputs and was meant to be part of a larger “baseline” of quality gates I use across projects. It was functional, but I could have improved it further. It was missing docs, had inconsistent metadata, some gaps in input validation, and didn’t have Copilot custom instructions or Copilot setup steps to help set Copilot up for success. Time to fix that—with help from Copilot agent mode in VS Code. Step one: Improve custom instructions Before bringing in the agent, I reviewed the existing copilot-instructions.md. It was sparse, without any description of the repository’s purpose, usage, or structure, nor any clear guidance for Copilot. Action: I based the instructions on best practices for using Copilot to work on tasks, by providing the sample custom instructions file in my prompt, and asking Copilot to update based on the codebase. In other words, I wanted it to provide:  A clear summary of the repository/codebase and what the action does. Contribution guidelines (how to build, format, lint, and test the codebase, including expectations before committing). Project structure overview. Key technical principles (strict TypeScript, incorporating TSDoc, and focused and manageable functions). Result:  Copilot had the right context on my expectations to guide it toward meaningful contributions. You can find the latest version here, but here’s a snapshot below: # Validate File Exists Action This is a TypeScript-based GitHub Action that validates whether specified files exist in a repository. It takes a comma-separated list of files and validates their existence, failing the workflow if any files are missing. Please follow these guidelines when contributing: ## Code Standards ### Required Before Each Commit - Run `npm run format:write` to ensure consistent code formatting with Prettier - Run `npm run lint` to check for ESLint violations - Run `npm run test` to ensure all tests pass - Run `npm run local-action` to test the action locally with a `.env` file ### Development Flow - Build: `npm run package` (compiles TypeScript and bundles with ncc) - Test: `npm run test` or `npm run ci-test` - Coverage: `npm run coverage` (generates coverage badge) - Full check: `npm run all` (format, lint, test, coverage, package) - Local testing: `npm run local-action` (test action locally with .env file) ## Repository Structure - `src/`: Core TypeScript source code - `main.ts`: Main entry point and action orchestration - `fileValidator.ts`: Core file validation logic - `index.ts`: Action entrypoint that calls run() - `types.ts`: TypeScript type definitions - `__tests__/`: Jest unit tests for all source files - `dist/`: Compiled and bundled JavaScript output (generated) - `action.yml`: GitHub Action metadata and interface definition - `script/`: Release automation scripts - `badges/`: Generated coverage and status badges ## Key Guidelines 1. Follow TypeScript strict mode and best practices 1. Use clear, descriptive variable and function names 1. Add TSDoc comments for all public methods and classes 1. Write comprehensive unit tests using Jest for all new functionality 1. Keep functions focused and manageable (generally under 50 lines) 1. Use consistent error handling with @actions/core.setFailed() 1. Validate inputs and provide meaningful error messages 1. Use @actions/core for all GitHub Actions integrations (inputs, outputs, logging) 1. Maintain backwards compatibility for action inputs/outputs Step two: Add copilot-setup-steps.yaml Like any of us developers, Copilot coding agent needs a proper environment to work. That means setting up any required frameworks, installing dependencies, and making sure Copilot has access to the right tools to get the job done. Action: I created .github/copilot-setup-steps.yaml using the GitHub docs on customizing the development environment for Copilot coding agent. The example checks out the code, sets up Node.js, and installs the needed dependencies. Given this is a TypeScript action, that’s pretty much all I needed!I made one minor change to the workflow: changing the node-version to be sourced from the .node-version file, to be consistent with my CI workflow:  - name: Setup Node.js id: setup-node uses: actions/setup-node@v4 with: node-version-file: .node-version cache: npm Result: Copilot coding agent has the needed dependencies and tools to build, lint, and test the codebase. As it makes changes to the codebase, it will be able to check for quality (as requested in our custom instructions) using the tools that were installed in the copilot-setup-steps.yml. Step three: Let Copilot find technical debt With the setup steps and custom instructions in place, it was time to find a task. So of course, I turned to Copilot. Using Copilot Chat in VS Code, we asked Copilot: “What technical debt exists in this project? Please give me a prioritized list of areas we need to focus on. I would like to create a GitHub Issue with the top 2 or 3 items. Please include a brief problem statement, a set of acceptance criteria, and pointers on what files need to be added/updated.” Within minutes, it explored the codebase and came back with a list of suggestions: Inconsistent package metadata. README mismatches (wrong input names). No validation for empty or malformed inputs. Notice how we asked for a problem statement, acceptance criteria, and guidance on the files to add/update? These come from the best practices for using Copilot to work on tasks. In other words, make sure your issues are well-scoped! Action: I asked Copilot to write an issue that addresses those three items. Once I created the issue, I assigned it to Copilot. Step four: Copilot coding agent in action Once assigned, the agent kicked off a new pull request. Here’s what it did, asynchronously: Explored the contents of the repository to build up its understanding of the problem. Created a plan based on its exploration. Fixed the package.json name, description, URLs, and author field. Updated the README usage examples to match the code. Added input validation logic: Reject empty or whitespace-only strings. Reject inputs that are just commas. Wrote four new tests for these edge cases. Confirmed linting, formatting, and coverage were intact. Updated the pull request body with a checklist of work completed. As I delegated the task to Copilot, it freed me up to explain to the audience what it was doing, and how the Copilot setup steps and instructions work in the context of the agent’s session. Result: Copilot completed all tasks in just over 11 minutes. After a review of the agent’s approach, I approved the CI workflow so that it could run the standard quality checks on the codebase. The workflow failed, but through no fault of Copilot. I had some additional Markdown linting checks in the CI that weren’t in the instructions. Real-time debugging and linting fixes While I could have fixed it manually, it was a good opportunity to show how we can iterate on changes with Copilot. I added a new comment to the pull request, and asked Copilot:  “Our GitHub Action had a linting error for the markdown, can you fix that please?” (Also pasting the error from the GitHub Actions workflow.) A few minutes later, it updated the code, pushed a new commit, and the pull request passed. And while Copilot was working on my task in the background, I was able to wrap up the stream. Bonus: Making UI changes with Copilot coding agent and the Playwright MCP server While Copilot worked on the initial code changes for the GitHub Action, I showed off a second project: a Trend Radar visualisation app (here’s the repository) that I built using Next.js and Tailwind CSS. Problem: Users had to manually input point data into forms. I wanted to: Let users click on the radar to place a point. Enable drag-and-drop repositioning to change a point’s category or likelihood.  Solution: I filed a GitHub issue describing the UX, acceptance criteria, and references. After a few iterations of comments by working through the pull request, Copilot coding agent: Implemented click-to-place logic. Added drag-and-drop support. Wrote unit tests. Took screenshots and attached them to the pull request. Updated the pull request (and responded with comments) with summaries of the work that had been completed Playwright is now installed by default with the Copilot coding agent, which lets Copilot validate visual behaviors too. Final thoughts This wasn’t just a cleanup session. It was a lesson in modern software collaboration. Copilot coding agent is our new teammate. By structuring our repositories with context and intent, we invite Copilot to contribute meaningfully. If you haven’t tried Copilot coding agent yet, think through your existing projects: Clean up an old GitHub Action. Refactor a neglected repository. Add validations and tests. You might be surprised how much progress you can make in an afternoon. Write clear, concise copilot-instructions.md to steer the agent. Use copilot-setup-steps.yaml to give the agent the tools it needs. Setting a clear and well-scoped piece of work is important when working with Copilot. Copilot now has access to a browser, thanks to the Playwright MCP server – enabling it to interact with web pages, and add screenshots to the pull request. You don’t have to work on new projects to try out Copilot and its agentic capabilities. Which existing project could you get started on? Written by Chris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2025 Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco. Register now",
  "image": "https://github.blog/wp-content/uploads/2025/04/wallpaper-copilot-mona-logo-generic.png?fit=1920%2C1080",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eModern development often starts with good intentions: a quick script, a prototype, maybe an action to automate one small thing. But as projects evolve, those early efforts can become brittle. What if you could bring clarity and structure to those projects without slowing down your momentum?\u003c/p\u003e\n\n\n\n\u003cp\u003eThis tutorial shows how we used \u003cstrong\u003eGitHub Copilot coding agent\u003c/strong\u003e to refactor and enhance a personal GitHub Actions project called \u003ca href=\"https://github.com/chrisreddington/validate-file-exists\"\u003e\u003ccode\u003evalidate-file-exists\u003c/code\u003e\u003c/a\u003e. What started as a patchwork utility became well-structured, test-covered, documented, and set up for success with Copilot agent mode and coding agent.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ll walk through my example of:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eUpdating \u003ca href=\"https://docs.github.com/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot\"\u003eCopilot custom instructions\u003c/a\u003e for better task alignment.\u003c/li\u003e\n\n\n\n\u003cli\u003eCreating the \u003ca href=\"https://docs.github.com/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent\"\u003e\u003ccode\u003ecopilot-setup-steps.yaml\u003c/code\u003e\u003c/a\u003e file to give the coding agent the needed tools in its environment.\u003c/li\u003e\n\n\n\n\u003cli\u003eWorking with Copilot to identify technical debt.\u003c/li\u003e\n\n\n\n\u003cli\u003eCollaborating with Copilot in pull requests.\u003c/li\u003e\n\n\n\n\u003cli\u003ePartnering with Copilot to iteratively improve the UI on a separate project.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Rubber Duck Thursdays - Let\u0026#39;s build with agents\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/fWsj8caUPt0?list=PL0lo9MOBetEEkxEQuYjIvrCbJTrsvRj36\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-the-github-action-that-started-it-all\"\u003eThe GitHub Action that started it all\u003c/h2\u003e\n\n\n\n\u003cp\u003eBack in November 2024, I created a small GitHub Action called \u003ca href=\"https://github.com/chrisreddington/validate-file-exists\"\u003e\u003ccode\u003evalidate-file-exists\u003c/code\u003e\u003c/a\u003e. I wanted to ensure certain files (like a \u003ccode\u003edependabot.yml\u003c/code\u003e file, or \u003ccode\u003e.github/\u003ca href=\"http://copilot-instructions.md\"\u003ecopilot-instructions.md\u003c/a\u003e\u003c/code\u003e) were present in a repository. If not, then the GitHub Actions workflow would fail. It supported comma-separated inputs and was meant to be part of a larger “baseline” of quality gates I use across projects.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt was functional, but I could have improved it further. It was missing docs, had inconsistent metadata, some gaps in input validation, and didn’t have Copilot custom instructions or Copilot setup steps to help set Copilot up for success. Time to fix that—with help from Copilot agent mode in VS Code.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-step-one-improve-custom-instructions\"\u003eStep one: Improve custom instructions\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore bringing in the agent, I reviewed the existing \u003ccode\u003ecopilot-instructions.md\u003c/code\u003e. It was sparse, without any description of the repository’s purpose, usage, or structure, nor any clear guidance for Copilot.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"h-action\"\u003eAction:\u003c/h3\u003e\n\n\n\n\u003cp\u003eI based the instructions on \u003ca href=\"https://docs.github.com/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#adding-custom-instructions-to-your-repository\"\u003ebest practices for using Copilot to work on tasks\u003c/a\u003e, by providing the sample custom instructions file in my prompt, and asking Copilot to update based on the codebase. In other words, I wanted it to provide: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA clear summary of the repository/codebase and what the action does.\u003c/li\u003e\n\n\n\n\u003cli\u003eContribution guidelines (how to build, format, lint, and test the codebase, including expectations before committing).\u003c/li\u003e\n\n\n\n\u003cli\u003eProject structure overview.\u003c/li\u003e\n\n\n\n\u003cli\u003eKey technical principles (strict TypeScript, incorporating TSDoc, and focused and manageable functions).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"h-result-nbsp\"\u003eResult: \u003c/h3\u003e\n\n\n\n\u003cp\u003eCopilot had the right context on my expectations to guide it toward meaningful contributions. You can find the \u003ca href=\"https://github.com/chrisreddington/validate-file-exists/blob/main/.github/copilot-instructions.md\"\u003elatest version here\u003c/a\u003e, but here’s a snapshot below:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e# Validate File Exists Action\n\nThis is a TypeScript-based GitHub Action that validates whether specified files\nexist in a repository. It takes a comma-separated list of files and validates\ntheir existence, failing the workflow if any files are missing. Please follow\nthese guidelines when contributing:\n\n## Code Standards\n\n### Required Before Each Commit\n\n- Run `npm run format:write` to ensure consistent code formatting with Prettier\n- Run `npm run lint` to check for ESLint violations\n- Run `npm run test` to ensure all tests pass\n- Run `npm run local-action` to test the action locally with a `.env` file\n\n### Development Flow\n\n- Build: `npm run package` (compiles TypeScript and bundles with ncc)\n- Test: `npm run test` or `npm run ci-test`\n- Coverage: `npm run coverage` (generates coverage badge)\n- Full check: `npm run all` (format, lint, test, coverage, package)\n- Local testing: `npm run local-action` (test action locally with .env file)\n\n## Repository Structure\n\n- `src/`: Core TypeScript source code\n  - `main.ts`: Main entry point and action orchestration\n  - `fileValidator.ts`: Core file validation logic\n  - `index.ts`: Action entrypoint that calls run()\n  - `types.ts`: TypeScript type definitions\n- `__tests__/`: Jest unit tests for all source files\n- `dist/`: Compiled and bundled JavaScript output (generated)\n- `action.yml`: GitHub Action metadata and interface definition\n- `script/`: Release automation scripts\n- `badges/`: Generated coverage and status badges\n\n## Key Guidelines\n\n1. Follow TypeScript strict mode and best practices\n1. Use clear, descriptive variable and function names\n1. Add TSDoc comments for all public methods and classes\n1. Write comprehensive unit tests using Jest for all new functionality\n1. Keep functions focused and manageable (generally under 50 lines)\n1. Use consistent error handling with @actions/core.setFailed()\n1. Validate inputs and provide meaningful error messages\n1. Use @actions/core for all GitHub Actions integrations (inputs, outputs,\n   logging)\n1. Maintain backwards compatibility for action inputs/outputs\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"step-two-add-copilot-setup-steps-yaml\"\u003eStep two: Add copilot-setup-steps.yaml\u003c/h2\u003e\n\n\n\n\u003cp\u003eLike any of us developers, Copilot coding agent needs a proper environment to work. That means setting up any required frameworks, installing dependencies, and making sure Copilot has access to the right tools to get the job done.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"action\"\u003eAction:\u003c/h3\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eI created \u003ccode\u003e.github/copilot-setup-steps.yaml\u003c/code\u003e using the GitHub docs on \u003ca href=\"https://docs.github.com/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent#preinstalling-tools-or-dependencies-in-copilots-environment\"\u003ecustomizing the development environment for Copilot coding agent\u003c/a\u003e. The example checks out the code, sets up Node.js, and installs the needed dependencies. Given this is a TypeScript action, that’s pretty much all I needed!\u003c/p\u003e\u003cp\u003eI made one minor change to the workflow: changing the node-version to be sourced from the \u003ccode\u003e.node-version\u003c/code\u003e file, to be consistent \u003ca href=\"https://github.com/chrisreddington/validate-file-exists/blob/main/.github/workflows/ci.yml\"\u003ewith my CI workflow\u003c/a\u003e: \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e- name: Setup Node.js\nid: setup-node\nuses: actions/setup-node@v4\nwith:\nnode-version-file: .node-version\ncache: npm\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"result\"\u003eResult:\u003c/h3\u003e\n\n\n\n\u003cp\u003eCopilot coding agent has the needed dependencies and tools to build, lint, and test the codebase. As it makes changes to the codebase, it will be able to check for quality (as requested in our custom instructions) using the tools that were installed in the \u003ccode\u003ecopilot-setup-steps.yml\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"step-three-let-copilot-find-technical-debt\"\u003eStep three: Let Copilot find technical debt\u003c/h2\u003e\n\n\n\n\u003cp\u003eWith the setup steps and custom instructions in place, it was time to find a task. So of course, I turned to Copilot. Using Copilot Chat in VS Code, we asked Copilot:\u003c/p\u003e\n\n\n\n\u003cp\u003e“What technical debt exists in this project? Please give me a prioritized list of areas we need to focus on. I would like to create a GitHub Issue with the top 2 or 3 items. Please include a brief problem statement, a set of acceptance criteria, and pointers on what files need to be added/updated.”\u003c/p\u003e\n\n\n\n\u003cp\u003eWithin minutes, it explored the codebase and came back with a list of suggestions:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eInconsistent package metadata.\u003c/li\u003e\n\n\n\n\u003cli\u003eREADME mismatches (wrong input names).\u003c/li\u003e\n\n\n\n\u003cli\u003eNo validation for empty or malformed inputs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eNotice how we asked for a problem statement, acceptance criteria, and guidance on the files to add/update? These come from the \u003ca href=\"https://docs.github.com/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#making-sure-your-issues-are-well-scoped\"\u003ebest practices for using Copilot to work on tasks\u003c/a\u003e. In other words, make sure your issues are well-scoped!\u003c/p\u003e\n\n\n\n\u003ch3 id=\"action\"\u003eAction:\u003c/h3\u003e\n\n\n\n\u003cp\u003eI asked Copilot to write an issue that addresses those three items. Once I created the issue, I assigned it to Copilot.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-step-four-copilot-coding-agent-in-action\"\u003eStep four: Copilot coding agent in action\u003c/h2\u003e\n\n\n\n\u003cp\u003eOnce assigned, the agent kicked off a new pull request. Here’s what it did, asynchronously:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eExplored the contents of the repository to build up its understanding of the problem.\u003c/li\u003e\n\n\n\n\u003cli\u003eCreated a plan based on its exploration.\u003c/li\u003e\n\n\n\n\u003cli\u003eFixed the \u003ccode\u003epackage.json\u003c/code\u003e name, description, URLs, and author field.\u003c/li\u003e\n\n\n\n\u003cli\u003eUpdated the README usage examples to match the code.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdded input validation logic:\n\u003cul\u003e\n\u003cli\u003eReject empty or whitespace-only strings.\u003c/li\u003e\n\n\n\n\u003cli\u003eReject inputs that are just commas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eWrote four new tests for these edge cases.\u003c/li\u003e\n\n\n\n\u003cli\u003eConfirmed linting, formatting, and coverage were intact.\u003c/li\u003e\n\n\n\n\u003cli\u003eUpdated the pull request body with a checklist of work completed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAs I delegated the task to Copilot, it freed me up to explain to the audience what it was doing, and how the Copilot setup steps and instructions work in the context of the agent’s session.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"result\"\u003eResult:\u003c/h3\u003e\n\n\n\n\u003cp\u003eCopilot completed all tasks in just over 11 minutes. After a review of the agent’s approach, I approved the CI workflow so that it could run the standard quality checks on the codebase. The workflow failed, but through no fault of Copilot. I had some additional Markdown linting checks in the CI that weren’t in the instructions.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"real-time-debugging-and-linting-fixes\"\u003eReal-time debugging and linting fixes\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile I could have fixed it manually, it was a good opportunity to show how we can iterate on changes with Copilot. I added a new comment to the pull request, and asked Copilot: \u003c/p\u003e\n\n\n\n\u003cp\u003e“Our GitHub Action had a linting error for the markdown, can you fix that please?” (Also pasting the error from the GitHub Actions workflow.)\u003c/p\u003e\n\n\n\n\u003cp\u003eA few minutes later, it updated the code, pushed a new commit, and the pull request passed. And while Copilot was working on my task in the background, I was able to wrap up the stream.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"bonus-making-ui-changes-with-copilot-coding-agent-and-the-playwright-mcp-server\"\u003eBonus: Making UI changes with Copilot coding agent and the Playwright MCP server\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile Copilot worked on the initial code changes for the GitHub Action, I showed off a second project: a \u003ca href=\"https://chrisreddington.com/trend-radar/\"\u003e\u003cstrong\u003eTrend Radar visualisation app\u003c/strong\u003e\u003c/a\u003e (\u003ca href=\"https://github.com/chrisreddington/trend-radar\"\u003ehere’s the repository\u003c/a\u003e) that I built using Next.js and Tailwind CSS.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"problem\"\u003eProblem:\u003c/h3\u003e\n\n\n\n\u003cp\u003eUsers had to manually input point data into forms. I wanted to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eLet users click on the radar to place a point.\u003c/li\u003e\n\n\n\n\u003cli\u003eEnable drag-and-drop repositioning to change a point’s category or likelihood. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"solution\"\u003eSolution:\u003c/h3\u003e\n\n\n\n\u003cp\u003eI filed a GitHub issue describing the UX, acceptance criteria, and references.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter a few iterations of comments by working through the pull request, Copilot coding agent:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eImplemented click-to-place logic.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdded drag-and-drop support.\u003c/li\u003e\n\n\n\n\u003cli\u003eWrote unit tests.\u003c/li\u003e\n\n\n\n\u003cli\u003eTook screenshots and attached them to the pull request.\u003c/li\u003e\n\n\n\n\u003cli\u003eUpdated the pull request (and responded with comments) with summaries of the work that had been completed\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.blog/changelog/2025-07-02-copilot-coding-agent-now-has-its-own-web-browser/\"\u003ePlaywright is now installed by default\u003c/a\u003e with the Copilot coding agent, which lets Copilot validate visual behaviors too.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"final-thoughts\"\u003eFinal thoughts\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis wasn’t just a cleanup session. It was a lesson in modern software collaboration. Copilot coding agent is our new teammate.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy structuring our repositories with context and intent, we invite Copilot to contribute meaningfully.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you haven’t tried Copilot coding agent yet, think through your existing projects:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eClean up an old GitHub Action.\u003c/li\u003e\n\n\n\n\u003cli\u003eRefactor a neglected repository.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdd validations and tests.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eYou might be surprised how much progress you can make in an afternoon.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#adding-custom-instructions-to-your-repository\"\u003eWrite clear, concise \u003ccode\u003ecopilot-instructions.md\u003c/code\u003e\u003c/a\u003e to steer the agent.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent#preinstalling-tools-or-dependencies-in-copilots-environment\"\u003eUse \u003ccode\u003ecopilot-setup-steps.yaml\u003c/code\u003e\u003c/a\u003e to give the agent the tools it needs.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#making-sure-your-issues-are-well-scoped\"\u003eSetting a clear and well-scoped piece of work\u003c/a\u003e is important when working with Copilot.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.blog/changelog/2025-07-02-copilot-coding-agent-now-has-its-own-web-browser/\"\u003eCopilot now has access to a browser\u003c/a\u003e, thanks to the Playwright MCP server – enabling it to interact with web pages, and add screenshots to the pull request.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou don’t have to work on new projects to try out Copilot and its agentic capabilities. Which existing project could you get started on?\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" alt=\"Chris Reddington\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eChris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2025\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2025\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eLast chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Register now; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=module\" target=\"_blank\" aria-label=\"Register now\"\u003e\n\t\t\t\t\tRegister now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-07-15T16:00:00Z",
  "modifiedTime": null
}
