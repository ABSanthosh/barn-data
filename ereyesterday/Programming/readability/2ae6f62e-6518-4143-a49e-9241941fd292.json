{
  "id": "2ae6f62e-6518-4143-a49e-9241941fd292",
  "title": "Atlassian's 4 Million PostgreSQL Database Migration: When Standard Cloud Strategies Fail",
  "link": "https://www.infoq.com/news/2025/07/atlassian-jira-postgresql-aurora/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Atlassian recently migrated 4 million Jira databases to Amazon Aurora, intending to reduce costs and improve the reliability of its Jira Cloud platform. Due to the large number of files involved and the constraints of managed services, the team developed a custom tool to orchestrate the process, as traditional cloud migration strategies were not viable. By Renato Losio",
  "author": "Renato Losio",
  "published": "Sat, 05 Jul 2025 14:43:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "AWS",
    "Relational Databases",
    "Postgres",
    "Cloud",
    "Sharding",
    "Amazon RDS",
    "Jira",
    "Architecture \u0026 Design",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 4236,
  "excerpt": "Atlassian recently migrated 4 million Jira databases to Amazon Aurora, intending to reduce costs and improve the reliability of its Jira Cloud platform. Due to the large number of files involved and t",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250605075448/apple-touch-icon.png",
  "text": "Atlassian recently migrated 4 million Jira databases to Amazon Aurora, intending to reduce costs and improve the reliability of its Jira Cloud platform. Due to the large number of files involved and the constraints of managed services, the team developed a custom tool to orchestrate the process, as traditional cloud migration strategies were not viable. In an article on the Atlassian engineering blog, the team describes the technical challenges and outcomes of migrating thousands of PostgreSQL clusters with up to 4000 databases each. Atlassian’s architecture for Jira uses one database per tenant (an approach that is usually justified when the tenant count is small), which translates into over 4 million PostgreSQL databases. Pat Rubis, principal site reliability engineer at Atlassian, explains: One database per tenant is an uncommon architecture, and we’ve opted for it in order to maximize isolation, scalability, and operational control at Atlassian’s massive scale. It makes it much easier to ensure that data from one tenant cannot accidentally or maliciously be accessed by another, and allows us to scale our fleet horizontally, balancing load and optimising performance for tenants of significantly different sizes. Due to the specific architecture, the team has to occasionally rebalance the databases across instances to maintain an even spread of load. In late 2023, the team decided to perform a replatform of the entire fleet to Amazon Aurora, involving all the accounts of the Jira Cloud platform. The goals were to take advantage of Aurora's better SLA (99.99%), increase elasticity by autoscaling the reader instances, and achieve some cost optimizations. The project was estimated to last a few months, minimizing tenant downtime and migration costs. It was orchestrated using AWS Step Functions and relied on feature flags to immediately override the tenants' database endpoints on the application servers. While the conversion of an Amazon RDS for PostgreSQL instance to Aurora is usually a simple task, the large number of databases per instance forces a cutover in unison for all those tenants, each with their own connection endpoint and credentials. Furthermore, as a single Jira database corresponds to about 5000 files on disk, the overall number of files per PostgreSQL instance was in the millions, hitting a limitation on Aurora's side, with the new replica instance timing out while performing a status check activity and impacting Atlassian's ability to convert the clusters safely. A different approach, called \"draining,\" was devised to orchestrate the migration, reducing first the number of tenants on instances to be converted and controlling the number of databases moved across clusters. Source: Atlassian blog To minimize the impact on normal operations during the migration process, one of the challenges of the project was controlling both source and destination concurrency. Rubis adds: Ultimately, we had to find a balance between how much additional infrastructure we wanted in each region to perform the migrations (and how much that would cost), and how long we were comfortable with each region taking to complete. At peak, Atlassian managed to migrate up to 90000 Jira databases per day, with an average of 38000 databases per day. Cassian Cox, senior engineering manager at Atlassian, comments on LinkedIn: This was a huge piece of infrastructure work that's been a big part of my time at Atlassian. This unlocked huge improvements in scalability, reliability, and cost efficiency. Source: Atlassian Engineering Blog The entire project involved 2403 RDS database instances to be converted, with 2.6 million databases migrated and 1.8 million databases drained from the source instances. Overall, the team estimates the total number of database files used in Jira at over 27.4 billion but has not disclosed additional metrics or details on the cost savings achieved. The startup timeout threshold experienced by Atlassian is currently not documented on the Amazon Aurora quotas and constraints page. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2025/07/atlassian-jira-postgresql-aurora/en/headerimage/generatedHeaderImage-1751645288090.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAtlassian recently migrated 4 million Jira databases to Amazon Aurora, intending to reduce costs and improve the reliability of its Jira Cloud platform. Due to the large number of files involved and the constraints of managed services, the team developed a custom tool to orchestrate the process, as traditional cloud migration strategies were not viable.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.atlassian.com/blog/atlassian-engineering/migrating-jira-database-platform-to-aws-aurora\"\u003eIn an article on the Atlassian engineering blog\u003c/a\u003e, the team describes the technical challenges and outcomes of migrating thousands of PostgreSQL clusters with up to 4000 databases each.\u003c/p\u003e\n\n\u003cp\u003eAtlassian’s architecture for Jira uses one database per tenant (an approach that is usually justified when the tenant count is small), which translates into over 4 million PostgreSQL databases. \u003ca href=\"https://www.linkedin.com/in/pat-rubis-b82074255\"\u003ePat Rubis\u003c/a\u003e, principal site reliability engineer at Atlassian, explains:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOne database per tenant is an uncommon architecture, and we’ve opted for it in order to maximize isolation, scalability, and operational control at Atlassian’s massive scale. It makes it much easier to ensure that data from one tenant cannot accidentally or maliciously be accessed by another, and allows us to scale our fleet horizontally, balancing load and optimising performance for tenants of significantly different sizes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDue to the specific architecture, the team has to occasionally rebalance the databases across instances to maintain an even spread of load. In late 2023, the team decided to perform a replatform of the entire fleet to \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html\"\u003eAmazon Aurora\u003c/a\u003e, involving all the accounts of the Jira Cloud platform. The goals were to take advantage of Aurora\u0026#39;s better SLA (99.99%), increase elasticity by autoscaling the reader instances, and achieve some cost optimizations.\u003c/p\u003e\n\n\u003cp\u003eThe project was estimated to last a few months, minimizing tenant downtime and migration costs. It was orchestrated using \u003ca href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\"\u003eAWS Step Functions\u003c/a\u003e and relied on feature flags to immediately override the tenants\u0026#39; database endpoints on the application servers. While the conversion of an Amazon RDS for PostgreSQL instance to Aurora is \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Migrating.html#AuroraPostgreSQL.Migrating.RDSPostgreSQL.Replica\"\u003eusually a simple task\u003c/a\u003e, the large number of databases per instance forces a cutover in unison for all those tenants, each with their own connection endpoint and credentials.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, as a single Jira database corresponds to about 5000 files on disk, the overall number of files per PostgreSQL instance was in the millions, hitting a limitation on Aurora\u0026#39;s side, with the new replica instance timing out while performing a status check activity and impacting Atlassian\u0026#39;s ability to convert the clusters safely. A different approach, called \u0026#34;draining,\u0026#34; was devised to orchestrate the migration, reducing first the number of tenants on instances to be converted and controlling the number of databases moved across clusters.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e\u003cimg alt=\"Database draining\" data-src=\"news/2025/07/atlassian-jira-postgresql-aurora/en/resources/1untitled-2025-05-09-10564-scaled-1751645458579.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/07/atlassian-jira-postgresql-aurora/en/resources/1untitled-2025-05-09-10564-scaled-1751645458579.png\" rel=\"share\"/\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: Atlassian blog\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eTo minimize the impact on normal operations during the migration process, one of the challenges of the project was controlling both source and destination concurrency. Rubis adds:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eUltimately, we had to find a balance between how much additional infrastructure we wanted in each region to perform the migrations (and how much that would cost), and how long we were comfortable with each region taking to complete.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAt peak, Atlassian managed to migrate up to 90000 Jira databases per day, with an average of 38000 databases per day. Cassian Cox, senior engineering manager at Atlassian, \u003ca href=\"https://www.linkedin.com/feed/update/urn:li:activity:7345985714263572480/\"\u003ecomments\u003c/a\u003e on LinkedIn:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThis was a huge piece of infrastructure work that\u0026#39;s been a big part of my time at Atlassian. This unlocked huge improvements in scalability, reliability, and cost efficiency.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cem\u003e\u003cimg alt=\"Migrations by day\" data-src=\"news/2025/07/atlassian-jira-postgresql-aurora/en/resources/1dbmigrationsperday-1751645458579.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/07/atlassian-jira-postgresql-aurora/en/resources/1dbmigrationsperday-1751645458579.png\" rel=\"share\"/\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: Atlassian Engineering Blog\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe entire project involved 2403 RDS database instances to be converted, with 2.6 million databases migrated and 1.8 million databases drained from the source instances.\u003c/p\u003e\n\n\u003cp\u003eOverall, the team estimates the total number of database files used in Jira at over 27.4 billion but has not disclosed additional metrics or details on the cost savings achieved.\u003c/p\u003e\n\n\u003cp\u003eThe startup timeout threshold experienced by Atlassian is currently not documented on the \u003ca href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_Limits.html\"\u003eAmazon Aurora quotas and constraints page\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-07-05T00:00:00Z",
  "modifiedTime": null
}
