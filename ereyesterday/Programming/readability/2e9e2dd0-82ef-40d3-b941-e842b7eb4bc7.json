{
  "id": "2e9e2dd0-82ef-40d3-b941-e842b7eb4bc7",
  "title": "How to create issues and pull requests in record time on GitHub",
  "link": "https://github.blog/developer-skills/github/how-to-create-issues-and-pull-requests-in-record-time-on-github/",
  "description": "Learn how to spin up a GitHub Issue, hand it to Copilot, and get a draft pull request in the same workflow you already know. The post How to create issues and pull requests in record time on GitHub appeared first on The GitHub Blog.",
  "author": "Jon Peck",
  "published": "Thu, 05 Jun 2025 16:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Developer skills",
    "GitHub",
    "GitHub Copilot",
    "GitHub Issues"
  ],
  "byline": "Jon Peck",
  "length": 9281,
  "excerpt": "Learn how to spin up a GitHub Issue, hand it to Copilot, and get a draft pull request in the same workflow you already know.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Software development has always started with a conversation: What problem are we solving, why does it matter, and what does “finished” look like? On GitHub, that conversation crystallizes in an issue. No matter what tools you’re using or who you’re working with, a well-designed issue still sets the agenda for pull requests (PR), reviews, tests, and deploys. That principle hasn’t changed—but how we get from idea to issue to PR is changing fast, with Copilot helping to speed things up. By asking Copilot to draft an issue, you can quickly design a clear plan for moving forward. Then (and here’s the fun part) you can assign that issue directly to the new GitHub Copilot coding agent, which will asynchronously work to execute on the task at hand and give you a PR.  This is a new way of working. But the basic developer experience is simple, familiar and—dare I say—GitHubby.  In this blog, we’ll talk about: Why issues remain the backbone of work on GitHub—whether they’re written by you or drafted by Copilot. Best practices for building great issues when working with your team or Copilot. How a Copilot-oriented workflow helps you move faster, enforces consistency, and tees up the Copilot coding agent for hands‑off fixes. Let’s jump in.  Why great issues and pull requests are critical GitHub Issues and pull requests are some of the core building blocks on GitHub. Each issue describes a discrete piece of work, and offers helpful details, requirements, and more for whoever picks up that piece of work. PRs bundle the completed work for code reviews and merging.  Even in an AI‑accelerated workflow, these two artifacts are how present and future teams understand what happened and why. Regardless of who (or what) authors them, well‑structured issues and pull requests deliver four key benefits: Shared context: One URL captures the problem statement, reproduction steps, and definition of done. Anyone joining next week—or next year—can catch up in minutes. And as we say at GitHub, if it doesn’t have a URL it didn’t happen.  Async coordination: Whether teams are working across timezones, or simply looking to stay heads-down, meetings often add complexity and overhead. Issues free up time by letting developers work asynchronously, meeting only when it will add value.  Audit and analytics: Labels, milestones, and templates feed dashboards, SLAs, and compliance reporting. Automation hooks: Actions workflows, project boards, and agentic tools rely on predictable metadata attached to every issue. Miss the structure and every downstream step—human or AI—slows down. Need an example? Here’s an issue I’ve been looking at today (and no, I’m not going to name and shame anyone): Issue #12609: Found broken link. Please fix! …and that’s it! Just a title with no explanation in the body, no actual link, no context, no environment or version info, and no reproducible example or proposed fix.  As developers, we need well-crafted issues in order to dive into any project we get asked to do, and we need to write good issues to help teammates work effectively. AI is no exception: Large language models perform best when objectives, constraints, and success criteria are explicit. A vague prompt leads to vague output, whether it’s created by a human or a machine. Here’s the thing: By allowing Copilot to assist with issue creation, you get to focus on clarity, not copy pasting, as Copilot locates the relevant references, builds out the initial issue structure, and even adds labels or project assignments. The anatomy of a great GitHub Issue Use this checklist when you create—or review—an issue (yes, Copilot writes these for you, but you’re still in charge): Action‑forward title: Lead with the noun and follow with the verb: “Login button – disable on Safari 17 beta” beats “Some login thing?” Problem or user story: Frame the pain: “As a shopper, I can’t click Buy on mobile Safari, so I abandon the cart and cry.” Expected vs. actual behavior: Two quick bullets: “Should render primary button” vs. “Button unclickable, no CSS pointer‑events.” Reproduction steps or visual evidence: GIFs, screenshots, or command-line specifics—whatever helps a teammate (or Copilot) quickly understand the problem. Acceptance criteria / definition of done: Straightforward pass/fail criteria, such as “all tests pass”, “Lighthouse score \u003e 90”, “feature flag removed”. Scope and constraints: Guardrails to prevent yak‑shaving: perf budgets, browser list, no new dependencies. Metadata (labels, assignee, milestone, project): It’s the secret sauce that powers boards, filters, and Slack notifications. Miss anything and async breaks down. Nail this format and Copilot—and your team—can move fast. How to draft issues on GitHub faster with Copilot Great issues share two traits: they’re fast to write and rich in context. GitHub Copilot’s Create Issue flow gives you both. Instead of hopping between fields or copy‑pasting snippets, you can open Copilot Chat and describe the problem in plain language:  \"Create a bug report about a 500 error on the login form in octo-org/octo‑web.\" Copilot drafts the title, body, and even suggests labels and an assignee—drawing on your repository’s preferred template so the issue lands in the right format every time. Here’s the step-by-step guide:  Open Copilot Chat’s immersive view at github.com/copilot. Describe what you need. Mention the repo (org/repo) or let Copilot infer it from where you last filed an issue. Drop in a screenshot if a picture tells the story faster; Copilot will embed it in the draft and reference it in the description. Review the draft. Ask follow‑up prompts (“add repro steps,” “switch to the bug template”) or tweak the Markdown directly. Template switches keep your content—no rewriting required. Click Create when it looks good. Tips for building great issues with GitHub Copilot What you doHow Copilot helpsWhy it mattersLead with context (expected vs. actual, repro steps)Parses your wording into the right template sections.Teammates (or Copilot) get clarity.Attach evidence (screens, logs)“Image‑to‑issue” persists the file in the issue body.Future debuggers see exactly what you saw.Tag next actions (“assign to Copilot”, “label frontend”)Adds assignee, labels, milestones in one go.Keeps boards tidy and workflows automated.Batch related bugs in one promptGenerates multiple drafts you can individually approve.Zero tab switching when you’re in triage mode. How to turn an issue into a draft PR with the coding agent in GitHub Copilot  Ok—now that you have a clear issue in hand thanks to Copilot,  you can assign it to Copilot via the coding agent (yes, it shows up like any teammate) or ask: \"Assign this to Copilot.\" When you hit Create, Copilot takes ownership and starts working on a fix—look for the 👀 reaction on the issue thread. Behind the scenes, here’s what happens: Copilot spins up a secure GitHub Actions workspace. It clones the repo, does a semantic code search (RAG‑style), and plots a fix plan. Commits roll into a draft PR you can watch in real time—no surprise force‑pushes. Your standard branch protections and CI gates still run, because we ♥️ you‑who‑likes‑passing‑tests. Here’s why this is helpful: Parallelization: You review while Copilot writes, so dev cycles overlap nicely. Auditability: Every commit, diff, and comment is right there, so there’s no black‑box AI mystery. Guardrails: Same CODEOWNERS, same signing rules. Velocity without the cortisol. Common questions, speedy answers “Won’t Copilot flood my repo with low‑quality issues?” It drafts, you refine and press Create. Same rate limits, same templates—just less typing.  “Can it update existing issues?” Not yet. Today is net‑new only; Update Issue is on the roadmap. “Does it understand my custom templates?” Yes! Copilot infers from your repo, and you can switch templates mid‑draft without losing your prompt context. “Mobile support?” Desktop for now; mobile is on the horizon (because phones exist). Now it’s your turn Next time your brain yells “Ugh, filing this bug will take longer than fixing it,” open Copilot Chat and let the robot handle the form fields while you capture intent. The faster you translate thought to issue to PR, the sooner users get features—and the sooner you get back to the fun bits. Now go forth, issue wisely, and may your PRs get greenlit.  Happy coding! Want to learn more about GitHub Copilot? Explore our Docs \u003e Written by Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/06/wallpaper-copilot-generic-logo-dark.png?fit=1920%2C1080",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eSoftware development has always started with a conversation: \u003cem\u003eWhat problem are we solving, why does it matter, and what does “finished” look like?\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eOn GitHub, that conversation crystallizes in an \u003cstrong\u003eissue\u003c/strong\u003e. No matter what tools you’re using or who you’re working with, a well-designed issue still sets the agenda for pull requests (PR), reviews, tests, and deploys.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat principle hasn’t changed—but how we get from idea to issue to PR is changing fast, with Copilot helping to speed things up. By asking Copilot to \u003ca href=\"https://github.blog/changelog/2025-05-19-creating-issues-with-copilot-on-github-com-is-in-public-preview/\"\u003e\u003cstrong\u003edraft an issue\u003c/strong\u003e\u003c/a\u003e, you can quickly design a clear plan for moving forward. Then (and here’s the fun part) you can \u003ca href=\"https://github.blog/changelog/2025-05-19-github-copilot-coding-agent-in-public-preview/\"\u003eassign that issue directly to the new GitHub Copilot coding agent\u003c/a\u003e, which will asynchronously work to execute on the task at hand and give you a PR. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis is a new way of working. But the basic developer experience is simple, familiar and—dare I say—\u003cem\u003eGitHubby\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn this blog, we’ll talk about:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eWhy issues remain the backbone of work on GitHub—whether they’re written by you or drafted by Copilot.\u003c/li\u003e\n\n\n\n\u003cli\u003eBest practices for building great issues when working with your team or Copilot.\u003c/li\u003e\n\n\n\n\u003cli\u003eHow a Copilot-oriented workflow helps you move faster, enforces consistency, and tees up the Copilot coding agent for hands‑off fixes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLet’s jump in. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-why-great-issues-and-pull-requests-are-critical\"\u003eWhy great issues and pull requests are critical\u003c/h2\u003e\n\n\n\n\u003cp\u003eGitHub Issues and pull requests are some of the core building blocks on GitHub. Each issue describes a discrete piece of work, and offers helpful details, requirements, and more for whoever picks up that piece of work. PRs bundle the completed work for code reviews and merging. \u003c/p\u003e\n\n\n\n\u003cp\u003eEven in an AI‑accelerated workflow, these two artifacts are how present and future teams understand what happened and why.\u003c/p\u003e\n\n\n\n\u003cp\u003eRegardless of who (or what) authors them, well‑structured issues and pull requests deliver four key benefits:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eShared context\u003c/strong\u003e: One URL captures the problem statement, reproduction steps, and definition of done. Anyone joining next week—or next year—can catch up in minutes. And as we say at GitHub, if it doesn’t have a URL it didn’t happen. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAsync coordination\u003c/strong\u003e: Whether teams are working across timezones, or simply looking to stay heads-down, meetings often add complexity and overhead. Issues free up time by letting developers work asynchronously, meeting only when it will add value. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAudit and analytics\u003c/strong\u003e: Labels, milestones, and templates feed dashboards, SLAs, and compliance reporting.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAutomation hooks\u003c/strong\u003e: Actions workflows, project boards, and agentic tools rely on predictable metadata attached to every issue.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eMiss the structure and every downstream step—human or AI—slows down. Need an example? Here’s an issue I’ve been looking at today (and no, I’m not going to name and shame anyone):\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIssue #12609: Found broken link. Please fix!\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e…and that’s it! Just a title with no explanation in the body, no actual link, no context, no environment or version info, and no reproducible example or proposed fix. \u003c/p\u003e\n\n\n\n\u003cp\u003eAs developers, we need well-crafted issues in order to dive into any project we get asked to do, and we need to write good issues to help teammates work effectively. AI is no exception: Large language models perform best when objectives, constraints, and success criteria are explicit. A vague prompt leads to vague output, whether it’s created by a human or a machine.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s the thing: By allowing Copilot to assist with issue creation, you get to focus on clarity, not copy pasting, as Copilot locates the relevant references, builds out the initial issue structure, and even adds labels or project assignments.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-the-anatomy-of-a-great-github-issue\"\u003eThe anatomy of a great GitHub Issue\u003c/h2\u003e\n\n\n\n\u003cp\u003eUse this checklist when you create—or review—an issue (yes, Copilot writes these for you, but you’re still in charge):\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAction‑forward title: \u003c/strong\u003eLead with the noun and follow with the verb: “Login button – disable on Safari 17 beta” beats “Some login thing?”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eProblem or user story: \u003c/strong\u003eFrame the pain: \u003cem\u003e“As a shopper, I can’t click Buy on mobile Safari, so I abandon the cart and cry.”\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eExpected vs. actual behavior: \u003c/strong\u003eTwo quick bullets: \u003cem\u003e“Should render primary button”\u003c/em\u003e vs. \u003cem\u003e“Button unclickable, no CSS pointer‑events.”\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eReproduction steps or visual evidence: \u003c/strong\u003eGIFs, screenshots, or command-line specifics—whatever helps a teammate (or Copilot) quickly understand the problem.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAcceptance criteria / definition of done: \u003c/strong\u003eStraightforward pass/fail criteria, such as “all tests pass”, “Lighthouse score \u0026gt; 90”, “feature flag removed”.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eScope and constraints: \u003c/strong\u003eGuardrails to prevent yak‑shaving: perf budgets, browser list, no new dependencies.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMetadata (labels, assignee, milestone, project): \u003c/strong\u003eIt’s the secret sauce that powers boards, filters, and Slack notifications.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eMiss anything and async breaks down. Nail this format and Copilot—and your team—can move fast.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-how-to-draft-issues-on-github-faster-with-copilot\"\u003eHow to draft issues on GitHub faster with Copilot\u003c/h2\u003e\n\n\n\n\u003cp\u003eGreat issues share two traits: they’re fast to write and rich in context. GitHub Copilot’s \u003cstrong\u003eCreate Issue\u003c/strong\u003e flow gives you both. Instead of hopping between fields or copy‑pasting snippets, \u003ca href=\"https://github.com/copilot\"\u003eyou can open Copilot Chat\u003c/a\u003e and describe the problem in plain language: \u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e\u0026#34;Create a bug report about a 500 error on the login form in octo-org/octo‑web.\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot drafts the title, body, and even suggests labels and an assignee—drawing on your repository’s preferred template so the issue lands in the right format every time.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHere’s the step-by-step guide: \u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOpen Copilot Chat’s immersive view\u003c/strong\u003e at \u003ca href=\"http://github.com/copilot\"\u003egithub.com/copilot\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDescribe what you need\u003c/strong\u003e. Mention the repo (\u003ccode\u003eorg/repo\u003c/code\u003e) or let Copilot infer it from where you last filed an issue.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDrop in a screenshot\u003c/strong\u003e if a picture tells the story faster; Copilot will embed it in the draft and reference it in the description.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eReview the draft\u003c/strong\u003e. Ask follow‑up prompts (“add repro steps,” “switch to the bug template”) or tweak the Markdown directly. Template switches keep your content—no rewriting required.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eClick Create\u003c/strong\u003e when it looks good.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"h-tips-for-building-great-issues-with-github-copilot\"\u003eTips for building great issues with GitHub Copilot\u003c/h3\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eWhat you do\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eHow Copilot helps\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eWhy it matters\u003c/strong\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eLead with context\u003c/strong\u003e (expected vs. actual, repro steps)\u003c/td\u003e\u003ctd\u003eParses your wording into the right template sections.\u003c/td\u003e\u003ctd\u003eTeammates (or Copilot) get clarity.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eAttach evidence\u003c/strong\u003e (screens, logs)\u003c/td\u003e\u003ctd\u003e“Image‑to‑issue” persists the file in the issue body.\u003c/td\u003e\u003ctd\u003eFuture debuggers see exactly what you saw.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eTag next actions\u003c/strong\u003e (“assign to Copilot”, “label frontend”)\u003c/td\u003e\u003ctd\u003eAdds assignee, labels, milestones in one go.\u003c/td\u003e\u003ctd\u003eKeeps boards tidy and workflows automated.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eBatch related bugs\u003c/strong\u003e in one prompt\u003c/td\u003e\u003ctd\u003eGenerates multiple drafts you can individually approve.\u003c/td\u003e\u003ctd\u003eZero tab switching when you’re in triage mode.\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-how-to-turn-an-issue-into-a-draft-pr-with-the-coding-agent-in-github-copilot-nbsp\"\u003eHow to turn an issue into a draft PR with the coding agent in GitHub Copilot \u003c/h2\u003e\n\n\n\n\u003cp\u003eOk—now that you have a clear issue in hand thanks to Copilot,  you can assign it to \u003cstrong\u003eCopilot via the coding agent\u003c/strong\u003e (yes, it shows up like any teammate) or ask:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e\u0026#34;Assign this to Copilot.\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/06/Screenshot-2025-06-04-at-1.05.06 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/06/442425807-6a98cb6d-1246-43da-85fe-fa3a75dda17b.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhen you hit \u003cstrong\u003eCreate\u003c/strong\u003e, Copilot takes ownership and starts working on a fix—look for the 👀 reaction on the issue thread. Behind the scenes, here’s what happens:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eCopilot spins up a secure GitHub Actions workspace.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt clones the repo, does a semantic code search (RAG‑style), and plots a fix plan.\u003c/li\u003e\n\n\n\n\u003cli\u003eCommits roll into a \u003cstrong\u003edraft PR\u003c/strong\u003e you can watch in real time—no surprise force‑pushes.\u003c/li\u003e\n\n\n\n\u003cli\u003eYour standard branch protections and CI gates still run, because we ♥️ you‑who‑likes‑passing‑tests.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eHere’s why this is helpful:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eParallelization\u003c/strong\u003e: You review while Copilot writes, so dev cycles overlap nicely.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAuditability\u003c/strong\u003e: Every commit, diff, and comment is right there, so there’s no black‑box AI mystery.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGuardrails\u003c/strong\u003e: Same CODEOWNERS, same signing rules. Velocity without the cortisol.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-common-questions-speedy-answers\"\u003eCommon questions, speedy answers\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e“Won’t Copilot flood my repo with low‑quality issues?”\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eIt drafts, \u003cem\u003eyou\u003c/em\u003e refine and press Create. Same rate limits, same templates—just less typing.\u003ca href=\"https://cassidoo.co/blog/?utm_source=chatgpt.com\"\u003e \u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e“Can it update existing issues?”\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eNot yet. Today is net‑new only; \u003cem\u003eUpdate Issue\u003c/em\u003e is on the roadmap.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e“Does it understand my custom templates?”\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eYes! Copilot infers from your repo, and you can switch templates mid‑draft without losing your prompt context.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e“Mobile support?”\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eDesktop for now; mobile is on the horizon (because phones exist).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-now-it-s-your-turn\"\u003eNow it’s your turn\u003c/h2\u003e\n\n\n\n\u003cp\u003eNext time your brain yells “Ugh, filing this bug will take longer than fixing it,” open Copilot Chat and let the robot handle the form fields while you capture intent. The faster you translate thought to issue to PR, the sooner users get features—and the sooner you get back to the fun bits.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow go forth, issue wisely, and may your PRs get greenlit. \u003c/p\u003e\n\n\n\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cp\u003e\u003cstrong\u003eWant to learn more about GitHub Copilot? \u003cbr/\u003e\u003c/strong\u003e\u003ca href=\"https://docs.github.com/en/copilot/about-github-copilot/what-is-github-copilot\"\u003eExplore our Docs \u0026gt;\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/5299412?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/5299412?v=4\u0026amp;s=200\" alt=\"Jon Peck\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-06-05T16:00:00Z",
  "modifiedTime": null
}
