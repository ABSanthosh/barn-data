{
  "id": "7c3a49f8-776e-4ceb-8381-6d5dd1816ecd",
  "title": "CLion 2025.1 Goes Beta With Enhanced CLion Nova, Debugger, and Embedded Development",
  "link": "https://blog.jetbrains.com/clion/2025/03/clion-2025-1-beta/",
  "description": "The Beta version of CLion 2025.1 is now available with key improvements and changes announced for the upcoming release. You can download build 251.23774.112 for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2025.1 BETA Read the full release notes on YouTrack. Below […]",
  "author": "Oleg Zinovyev",
  "published": "Mon, 17 Mar 2025 08:59:17 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "eap",
    "news",
    "beta",
    "clionnova",
    "debugger",
    "embedded",
    "natvis",
    "qt",
    "zephyr-west"
  ],
  "byline": "Oleg Zinovyev",
  "length": 7521,
  "excerpt": "The Beta version of CLion 2025.1 is now available with key improvements and changes announced for the upcoming release. You can download build 251.23774.112 for free from the link below, via the Toolb",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A Cross-Platform IDE for C and C++ Early Access Program NewsCLion 2025.1 Goes Beta With Enhanced CLion Nova, Debugger, and Embedded Development The Beta version of CLion 2025.1 is now available with key improvements and changes announced for the upcoming release. You can download build 251.23774.112 for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2025.1 BETA Read the full release notes on YouTrack. Below is a brief overview of the major features and bug fixes that are now available in Beta ahead of their inclusion in the stable CLion 2025.1 release. The key features Throughout the 2025.1 EAP, we’ve added a variety of new features for CLion Nova, debugging, embedded development, project formats, and more. Here are the most important ones. CLion Nova Support for out-of-project files. Header and source files that are not included in a project now get full code analysis and code assistance functionality, just like regular project files. The current implementation covers the vast majority of known use cases, though there are still some edge cases that we plan to address after receiving user feedback. Basic support for Objective-C. You can now work with Objective-C source files and see syntax highlighting, warnings, code completion suggestions, and other Clangd-based features. Support for GoogleTest and Catch2 in Bazel projects. CLion Nova now supports the GoogleTest and Catch2 testing frameworks when working with Bazel projects. We’ve also implemented several settings, actions, and smart keys that were available in CLion Classic but missing in CLion Nova, making development with the new engine more convenient: C/C++ auto-import options such as Auto import local files with quotes and Auto import on completion. Editor actions, including the ability to move a caret to a code block end or start using a shortcut. Smart keys such as Unindent on Backspace and Surround selection on typing quote or brace. Learn more about these features in our blog post. Debugger Support for Qt renderers. Qt renderers, also known as Qt pretty printers and Qt debugging helpers, allow you to view Qt variables such as QString, QByteArray, and other data types in a human-readable form. Support for a custom LLDB debugger. You can now use a custom LLDB when working on macOS or Linux in addition to the bundled LLDB v19.1.3. This allows you to choose the LLDB version best suited to the requirements of your project. Viewing two-channel OpenCV matrices as images. When you’re debugging code that uses a two-channel OpenCV matrix, such as cv::Mat m(2, 3, CV_8UC2), CLion’s debugger gives you the option to view it as an image. Custom location for .natvis files. When working with the MSVC debugger, you can now specify a custom location for your .natvis files. This provides more flexibility when using Git or other version control systems. Embedded development The new STM32CubeMX Project Wizard. We’ve reworked the approach to creating new STM32CubeMX projects to make it more convenient and provide support for more STM32 chips and project types. CLion now relies on the native STM32CubeMX generation of CMake, so project creation in CLion aligns with the vendor’s approach and toolset. However, we understand that the current method of creating an STM32CubeMX project is still not ideal. We’ll continue to improve it and make it easier to use. Your feedback on the new STM32CubeMX Project Wizard is greatly appreciated (CPP-42553). The ST-LINK debug server. When debugging STM32 projects, you can now use the ST-LINK debug server template. Designed specifically for STM32 chips, it simplifies the configuration process. Debug Servers is still an experimental feature with some limitations. See our documentation for more information. Serial Port Monitor plugin improvements. We’ve added the ability to view and manage hardware control signals, as well as the ability to view timestamps in the monitor output. This gives you more control over your attached devices and makes tracking serial monitor data easier when debugging or troubleshooting. Project formats and build tools West build options. You can use West project settings to pass additional parameters for the west build command, such as a path to a custom board or options for the underlying build tool. Sysbuild support. This high-level build system allows you to build multiple images for boards with multiple SoCs (systems on chip) or SoCs with multiple CPU cores. CMake 3.31.4 bundled with CMake Presets v10. We’ve updated the bundled CMake version to the latest, v3.31.4. Among other things, it includes support for CMake Presets v10. CMake Presets are stored as JSON files and are useful when you want to specify common configuration and build options for a CMake project to share them with other users. Other features Natural language inline prompts for C/C++. You can now interact with AI Assistant directly in the editor using natural language prompts. After you write a prompt and press Tab, AI Assistant interprets it and translates it into code changes, taking into account the project context. You can undo the changes, modify your prompt, or add a follow-up message if you want to improve some of the suggested changes. The feature is only available to users with a trial or paid subscription to the JetBrains AI Assistant plugin. Cl6x compiler support improvements. CLion now parses cl6x output more accurately when configuring this compiler as a custom compiler option with the corresponding YAML file. Key bug fixes Here are the major bug fixes that we’ve included in CLion 2025.1 Beta: When using CLion Nova, changes to the tab width in the Code Style settings are no longer reset after a project reloads. CLion Nova now correctly handles _Float types in the implementation of the std::format, which means resolving std::format when using GCC now works as expected. Creating a new PlatformIO project from CLion’s Welcome screen now works as intended. Opening a file in LightEdit mode no longer crashes the IDE. The debugger now works correctly when using an OpenOCD run/debug configuration with a path to a board that contains spaces. DOWNLOAD CLION 2025.1 BETA Your CLion teamJetBrainsThe Drive to Develop Subscribe to CLion Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/03/Social_Share_Blog_1280x720.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/clion/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/CLion-1.svg\" alt=\"Clion logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA Cross-Platform IDE for C and C++\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/clion/category/eap/\"\u003eEarly Access Program\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/clion/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCLion 2025.1 Goes Beta With Enhanced CLion Nova, Debugger, and Embedded Development\u003c/h2\u003e                    \n                    \n\u003cp\u003eThe Beta version of CLion 2025.1 is now available with key improvements and changes announced for the upcoming release. You can download build 251.23774.112 for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/nextversion/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2025.1 BETA\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eRead the full release notes on \u003ca href=\"https://youtrack.jetbrains.com/articles/CPP-A-230654390\" target=\"_blank\" rel=\"noopener\"\u003eYouTrack\u003c/a\u003e. Below is a brief overview of the major features and bug fixes that are now available in Beta ahead of their inclusion in the stable CLion 2025.1 release.\u003c/p\u003e\n\n\n\n\u003ch2\u003eThe key features\u003c/h2\u003e\n\n\n\n\u003cp\u003eThroughout the 2025.1 EAP, we’ve added a variety of new features for CLion Nova, debugging, embedded development, project formats, and more. Here are the most important ones.\u003c/p\u003e\n\n\n\n\u003ch3\u003eCLion Nova\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSupport for out-of-project files.\u003c/strong\u003e Header and source files that are not included in a \u003ca href=\"https://www.jetbrains.com/help/clion/project.html\" target=\"_blank\" rel=\"noopener\"\u003eproject\u003c/a\u003e now get full code analysis and code assistance functionality, just like regular project files. The current implementation covers the vast majority of known use cases, though there are still \u003ca href=\"https://youtrack.jetbrains.com/issue/CPP-38040/Theres-no-backend-support-for-out-of-project-files#focus=Comments-27-11617242.0-0\" target=\"_blank\" rel=\"noopener\"\u003esome edge cases\u003c/a\u003e that we plan to address after receiving user feedback.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eBasic support for Objective-C.\u003c/strong\u003e You can now work with Objective-C source files and see syntax highlighting, warnings, code completion suggestions, and other Clangd-based features.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1885\" height=\"851\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/obj-c.png\" alt=\"Basic support for Objective-C\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSupport for GoogleTest and Catch2 in Bazel projects.\u003c/strong\u003e CLion Nova now supports the GoogleTest and Catch2 testing frameworks when working with Bazel projects.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ve also implemented several settings, actions, and smart keys that were available in CLion Classic but missing in CLion Nova, making development with the new engine more convenient:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eC/C++ auto-import options\u003c/strong\u003e such a\u003cem\u003es Auto import local files with quotes\u003c/em\u003e and \u003cem\u003eAuto import on completion\u003c/em\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEditor actions,\u003c/strong\u003e including the ability to move a caret to a code block end or start \u003ca href=\"https://www.jetbrains.com/help/clion/basic-editing.html\" target=\"_blank\" rel=\"noopener\"\u003eusing a shortcut\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSmart keys\u003c/strong\u003e such as \u003cem\u003eUnindent on Backspace\u003c/em\u003e and \u003cem\u003eSurround selection on typing quote or brace\u003c/em\u003e. Learn more about these features in \u003ca href=\"https://blog.jetbrains.com/clion/2025/01/2025-1-eap-open/#smart-keys\"\u003eour blog post\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eDebugger\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSupport for Qt renderers.\u003c/strong\u003e Qt renderers, also known as Qt pretty printers and Qt debugging helpers, allow you to view Qt variables such as \u003ccode\u003eQString\u003c/code\u003e, \u003ccode\u003eQByteArray\u003c/code\u003e, and other data types in a human-readable form.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1579\" height=\"882\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/qt_renderers.png\" alt=\"Viewing Qt variables in the debugger\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSupport for a custom LLDB debugger.\u003c/strong\u003e You can now use a custom LLDB when working on macOS or Linux in addition to the bundled LLDB v19.1.3. This allows you to choose the LLDB version best suited to the requirements of your project.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eViewing two-channel OpenCV matrices as images.\u003c/strong\u003e When you’re debugging code that uses a two-channel OpenCV matrix, such as \u003ccode\u003ecv::Mat m(2, 3, CV_8UC2)\u003c/code\u003e, CLion’s debugger gives you the option to view it as an image.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2566\" height=\"1398\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/opencv.png\" alt=\"Viewing a two-channel OpenCV matrix as an image in the debugger\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCustom location for \u003ccode\u003e.natvis\u003c/code\u003e files.\u003c/strong\u003e When working with the MSVC debugger, you can now specify a custom location for your \u003ccode\u003e.natvis\u003c/code\u003e files. This provides more flexibility when using Git or other version control systems.\u003c/p\u003e\n\n\n\n\u003ch3\u003eEmbedded development\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThe new STM32CubeMX Project Wizard.\u003c/strong\u003e We’ve reworked the approach to creating new STM32CubeMX projects to make it more convenient and provide support for more STM32 chips and project types. CLion now relies on the native STM32CubeMX generation of CMake, so project creation in CLion aligns with the vendor’s approach and toolset.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, we understand that the current method of creating an STM32CubeMX project is still not ideal. We’ll continue to improve it and make it easier to use. Your feedback on the new STM32CubeMX Project Wizard is greatly appreciated (\u003ca href=\"https://youtrack.jetbrains.com/issue/CPP-42553\" target=\"_blank\" rel=\"noopener\"\u003eCPP-42553\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThe ST-LINK debug server.\u003c/strong\u003e When debugging STM32 projects, you can now use the ST-LINK debug server template. Designed specifically for STM32 chips, it simplifies the configuration process.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1778\" height=\"764\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/st-link-2.png\" alt=\"Configuring an ST-LINK debug server\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eDebug Servers\u003c/em\u003e is still an experimental feature with some limitations. See \u003ca href=\"https://www.jetbrains.com/help/clion/debug-servers.html\" target=\"_blank\" rel=\"noopener\"\u003eour documentation\u003c/a\u003e for more information.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSerial Port Monitor plugin improvements.\u003c/strong\u003e We’ve added the ability to view and manage hardware control signals, as well as the ability to view timestamps in the monitor output. This gives you more control over your attached devices and makes tracking serial monitor data easier when debugging or troubleshooting.\u003c/p\u003e\n\n\n\n\u003ch3\u003eProject formats and build tools\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWest build options.\u003c/strong\u003e You can use West project settings to pass additional parameters for the \u003ccode\u003ewest build\u003c/code\u003e command, such as a path to a custom board or options for the underlying build tool.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1506\" height=\"902\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/west-build-options.png\" alt=\"Configuring west build options\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSysbuild support.\u003c/strong\u003e This high-level build system allows you to build multiple images for boards with multiple SoCs (systems on chip) or SoCs with multiple CPU cores.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCMake 3.31.4 bundled with CMake Presets v10.\u003c/strong\u003e We’ve updated the bundled CMake version to the latest, v3.31.4. Among other things, it includes support for CMake Presets v10. CMake Presets are stored as JSON files and are useful when you want to specify common configuration and build options for a CMake project to share them with other users.\u003c/p\u003e\n\n\n\n\u003ch3\u003eOther features\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNatural language inline prompts for C/C++. \u003c/strong\u003eYou can now interact with AI Assistant directly in the editor using natural language prompts. After you write a prompt and press \u003cem\u003eTab\u003c/em\u003e, AI Assistant interprets it and translates it into code changes, taking into account the project context.\u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/ai-inline-prompt-new.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/ai-inline-prompt-new-stab.jpg\" alt=\"Using a natural language prompt for AI Assistant\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003eYou can undo the changes, modify your prompt, or add a follow-up message if you want to improve some of the suggested changes. The feature is only available to users with a \u003ca href=\"https://www.jetbrains.com/ai/#plans-and-pricing\" target=\"_blank\" rel=\"noopener\"\u003etrial or paid subscription\u003c/a\u003e to the JetBrains AI Assistant plugin.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCl6x compiler support improvements.\u003c/strong\u003e CLion now parses cl6x output more accurately when configuring this compiler as a \u003ca href=\"https://www.jetbrains.com/help/clion/custom-compilers.html\" target=\"_blank\" rel=\"noopener\"\u003ecustom compiler\u003c/a\u003e option with the \u003ca href=\"https://github.com/JetBrains/clion-custom-defined-compiler-examples/tree/master/CMake-Texas-Instruments-C6000-CGT\" target=\"_blank\" rel=\"noopener\"\u003ecorresponding YAML file\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eKey bug fixes\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere are the major bug fixes that we’ve included in CLion 2025.1 Beta:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eWhen using CLion Nova, changes to the tab width in the \u003cem\u003eCode Style\u003c/em\u003e settings are no longer reset after a project reloads.\u003c/li\u003e\n\n\n\n\u003cli\u003eCLion Nova now correctly handles \u003ccode\u003e_Float\u003c/code\u003e types in the implementation of the \u003ccode\u003estd::format\u003c/code\u003e, which means resolving \u003ccode\u003estd::format\u003c/code\u003e when using GCC now works as expected.\u003c/li\u003e\n\n\n\n\u003cli\u003eCreating a new PlatformIO project from CLion’s \u003cem\u003eWelcome\u003c/em\u003e screen now works as intended.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpening a file in LightEdit mode no longer crashes the IDE.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe debugger now works correctly when using an OpenOCD run/debug configuration with a path to a board that contains spaces.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/nextversion/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2025.1 BETA\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eYour CLion team\u003cbr/\u003e\u003cem\u003eJetBrains\u003c/em\u003e\u003cbr/\u003e\u003cem\u003eThe Drive to Develop\u003c/em\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to CLion Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
