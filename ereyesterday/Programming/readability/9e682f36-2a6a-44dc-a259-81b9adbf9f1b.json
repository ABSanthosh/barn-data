{
  "id": "9e682f36-2a6a-44dc-a259-81b9adbf9f1b",
  "title": "GitHub for Beginners: Security best practices with GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-security-best-practices-with-github-copilot/",
  "description": "Learn how to leverage GitHub Copilot to make your code more secure. The post GitHub for Beginners: Security best practices with GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 14 Apr 2025 13:00:29 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "GitHub for beginners",
    "Security"
  ],
  "byline": "Kedasha Kerr",
  "length": 9476,
  "excerpt": "Learn how to leverage GitHub Copilot to make your code more secure.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome to the next episode in our GitHub for Beginners series, where we are diving into the world of GitHub Copilot. This is our fourth episode, and we’ve already talked about Copilot in general, some of its essential features, and how to write good prompts to get the most out of Copilot. We have all the previous episodes on our blog and available as videos. Today we’re going to be talking about security. Everyone knows that you should make your code secure and no one wants to be responsible for any potential hacks. But did you know that GitHub Copilot can help you with some security best practices? We’ll show you how you can use it and other tools to help make your projects more secure from day one. Let’s talk security Most security teams, through no fault of their own, don’t have sufficient time or resources to properly secure their companies’ code. That makes developers the first line of defense, which is tough because many developers don’t have enough formal security training to do the job properly. For those who don’t have the proper training, they’re often forced to learn these skills on the job. Fortunately, GitHub is here to help—both with GitHub Copilot and a bunch of security tools you can use for free if you’re building open source code. Copilot to the rescue GitHub Copilot doesn’t just know how to write code; it also understands how to make code more secure. But it isn’t perfect, so you have to know what to ask. You also shouldn’t rely on it as your only security tool. Let’s start with a simple example. Let’s say you’re working with a SQL database using an INSERT statement to add data. Now, you may have heard of SQL injection. If you haven’t, or if you need a refresher, that’s where someone sneaks in a malicious command through a regular text field, like a comment box or name input. This could be a command like DROP TABLE, which could delete your entire database. One way to protect your code is to ask GitHub Copilot to regenerate it. Delete the code that uses the INSERT command and write a clear comment explaining what you want to do. For example, you could insert the following comment: /* insert from cart using a parameterized query: mail, product_name, user_name, product_id, address, phone, ship_date, price\" and get a Copilot suggestion */ Copilot will suggest a safer, parameterized query—because security shouldn’t be guesswork. Once you’ve added that comment, if GitHub Copilot is enabled in your IDE, it’ll suggest some code for you. Before accepting the code, be sure to review what Copilot wrote—it’s a helpful assistant, but it’s your job to verify and validate. Once you’ve verified the output, hit Tab to accept the suggestion. https://github.blog/wp-content/uploads/2025/04/sanitize_input.mp4#t=0.001 Now, what if you don’t want to delete your existing code? You may have a chunk of code that you want to check. In this case, you can ask Copilot to look through your code and fix it. To do this, highlight the code you want to review, open Copilot Chat and ask “are there any vulnerabilities in this function?” https://github.blog/wp-content/uploads/2025/04/vulns_in_function.mp4#t=0.001 If you want to expand the scope, you could select the whole file or use @workspace in the Copilot Chat window. Using @workspace tells Copilot to look at all the files in your workspace, not just the ones that you currently have open. A great prompt to try is: “@workspace what’s the attack surface?” That’s a fancy way of asking how someone might try to attack this project. Copilot will scan your code and offer suggestions it can find. These might include individual changes to the code or certain packages you might want to consider adding to the project to make it more secure. You can take this a step further by using the slash command /fix, to get suggestions for improving overall code quality and efficiency. Don’t forget that you can always follow up with more detailed questions after Copilot gives you a response or makes a suggestion. You can ask Copilot questions like: “What does this vulnerability mean?” “Can you suggest a safer way to do this?” For more sample prompts, check out our Copilot Chat Cookbook. The section on Finding vulnerabilities is particularly appropriate for this topic. While Github Copilot is powerful, it’s not meant to replace all your security tools. This is partly because Copilot is a generalist, not a specialist. It can’t always see the full context of your production environment. Built-to-purpose security tools can take other factors into account, such as your compiler, your environment variables, and your deployment method. Fortunately, GitHub has a number of free security offerings for open source maintainers. This means you can use them at no cost on your public repositories. Let’s take a look at some of them. Dependabot If you’ve been working on code in a public GitHub repository, you may have noticed a pull request from someone called dependabot. That’s GitHub’s tool that checks to make sure your dependencies are vulnerability-free and up-to-date. To enable or disable Dependabot, click the Settings tab for your repository. Scroll down and click Code security in the left-hand menu. In this menu, there is an entire section for Dependabot. You can enable or disable alerts as well as automatic updates. Code scanning \u0026 CodeQL The next section in a public repository is Code scanning. If you don’t see this section, it likely means you’re working in a private repository. Code scanning will automatically detect common vulnerabilities and coding errors, such as the SQL injection vulnerability we talked about at the beginning of this post. We highly recommend you enable CodeQL analysis. To do so, click the Set up button, and select Default from the menu that appears. Then click the green Enable CodeQL button at the bottom of the pop up window. This enables GitHub to look for pattern-based vulnerabilities in your code. This happens automatically when you commit new code to your repository, when you make pull requests, and as a periodic scan. If GitHub finds a new problem, it will send you a notification so you can fix it. Copilot Autofix If you want to have Copilot automatically suggest fixes to these vulnerabilities, enable Copilot Autofix. It can be found on the Code security page, under the button to Enable CodeQL. With this enabled, GitHub will run Copilot when it discovers a problem, and it will create a pull request with a suggested solution provided by Copilot. Once you review the solution, you’ll have the option to accept the pull request, eliminating the need for you to manually run Copilot to generate a possible solution. https://github.blog/wp-content/uploads/2025/04/copilot_autofix.mp4#t=0.001 Secret scanning The next security tool we want to point out is secret scanning. You can find the option for secret scanning at the bottom of the Code security page. By enabling secret scanning, GitHub scans your code to look for possible exposed secrets, such as passwords or security tokens. You never want these directly embedded in your code because of the security risk. With Push protection enabled, GitHub will proactively block any new secrets from being committed to your GitHub-hosted code. There are several other features that we don’t have time to explore here. If you’d like to read more on your own, check out our documentation about GitHub security features and our quickstart for securing your repository. Your next steps Security is an incredibly deep topic, and we don’t expect you to be an expert. For now, remember these three things: Ask Copilot to find and fix vulnerabilities. This might be as simple as running /fix in Copilot Chat, or it could be more detailed such as selecting some code and asking Copilot to check it for vulnerabilities. Ask Copilot for more details when problems are found. It’s important to understand the solution, both to make sure you can verify its work and also as a learning opportunity to help you in the future. Enable Dependabot, code scanning, and secret scanning. These tools in the Code security settings will be useful for sending you alerts when there are potential problems you want to be aware of. And remember that Copilot can help you fix them! Don’t forget that you can use GitHub Copilot for free! If you have any questions, pop them in the GitHub Community thread, and we’ll be sure to respond. Join us for the next part in this series, where we’ll learn how to build a REST API with Copilot. Happy coding! Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png?fit=2400%2C1260",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome to the next episode in our GitHub for Beginners series, where we are diving into the world of \u003ca href=\"https://www.youtube.com/watch?v=n0NlxUyA7FI\u0026amp;list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\u0026amp;index=6\"\u003eGitHub Copilot\u003c/a\u003e. This is our fourth episode, and we’ve already talked about Copilot in general, some of its essential features, and how to write good prompts to get the most out of Copilot. We have all the previous episodes on \u003ca href=\"https://github.blog/tag/github-for-beginners/\"\u003eour blog\u003c/a\u003e and available \u003ca href=\"https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\"\u003eas videos\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eToday we’re going to be talking about security. Everyone knows that you should make your code secure and no one wants to be responsible for any potential hacks. But did you know that GitHub Copilot can help you with some security best practices? We’ll show you how you can use it and other tools to help make your projects more secure from day one.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/9x4ekT65HX8?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\n\u003ch2 id=\"lets-talk-security\" id=\"lets-talk-security\"\u003eLet’s talk security\u003ca href=\"#lets-talk-security\" aria-label=\"Let’s talk security\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMost security teams, through no fault of their own, don’t have sufficient time or resources to properly secure their companies’ code. That makes developers the first line of defense, which is tough because many developers don’t have enough formal security training to do the job properly. For those who don’t have the proper training, they’re often forced to learn these skills on the job.\u003c/p\u003e\n\u003cp\u003eFortunately, GitHub is here to help—both with GitHub Copilot and a bunch of security tools you can use for free if you’re building open source code.\u003c/p\u003e\n\u003ch2 id=\"copilot-to-the-rescue\" id=\"copilot-to-the-rescue\"\u003eCopilot to the rescue\u003ca href=\"#copilot-to-the-rescue\" aria-label=\"Copilot to the rescue\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Copilot doesn’t just know how to write code; it also understands how to make code more secure. But it isn’t perfect, so you have to know what to ask. You also shouldn’t rely on it as your \u003cstrong\u003eonly\u003c/strong\u003e security tool.\u003c/p\u003e\n\u003cp\u003eLet’s start with a simple example.\u003c/p\u003e\n\u003cp\u003eLet’s say you’re working with a SQL database using an \u003ccode\u003eINSERT\u003c/code\u003e statement to add data. Now, you may have heard of SQL injection. If you haven’t, or if you need a refresher, that’s where someone sneaks in a malicious command through a regular text field, like a comment box or name input. This could be a command like \u003ccode\u003eDROP TABLE\u003c/code\u003e, which could delete your entire database.\u003c/p\u003e\n\u003cp\u003eOne way to protect your code is to ask GitHub Copilot to regenerate it. Delete the code that uses the \u003ccode\u003eINSERT\u003c/code\u003e command and write a clear comment explaining what you want to do. For example, you could insert the following comment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\ninsert from cart using a parameterized query:\nmail, product_name, user_name, product_id, address, phone, ship_date, price\u0026#34; and get a Copilot suggestion\n*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopilot will suggest a safer, parameterized query—because security shouldn’t be guesswork.\u003c/p\u003e\n\u003cp\u003eOnce you’ve added that comment, if GitHub Copilot is enabled in your IDE, it’ll suggest some code for you. Before accepting the code, be sure to review what Copilot wrote—it’s a helpful assistant, but it’s your job to verify and validate. Once you’ve verified the output, hit Tab to accept the suggestion.\u003c/p\u003e\n\u003cp\u003e\n\u003cvideo id=\"video-86371-1\" width=\"1436\" height=\"810\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/sanitize_input.mp4#t=0.001?_=1\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/sanitize_input.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/sanitize_input.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eNow, what if you don’t want to delete your existing code? You may have a chunk of code that you want to check. In this case, you can ask Copilot to look through your code and fix it. To do this, highlight the code you want to review, open Copilot Chat and ask “are there any vulnerabilities in this function?”\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86371-2\" width=\"1436\" height=\"810\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/vulns_in_function.mp4#t=0.001?_=2\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/vulns_in_function.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/vulns_in_function.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eIf you want to expand the scope, you could select the whole file or use \u003ccode\u003e@workspace\u003c/code\u003e in the Copilot Chat window. Using \u003ccode\u003e@workspace\u003c/code\u003e tells Copilot to look at all the files in your workspace, not just the ones that you currently have open. A great prompt to try is: “\u003ccode\u003e@workspace\u003c/code\u003e what’s the attack surface?” That’s a fancy way of asking how someone might try to attack this project.\u003c/p\u003e\n\u003cp\u003eCopilot will scan your code and offer suggestions it can find. These might include individual changes to the code or certain packages you might want to consider adding to the project to make it more secure.\u003c/p\u003e\n\u003cp\u003eYou can take this a step further by using the slash command \u003ccode\u003e/fix\u003c/code\u003e, to get suggestions for improving overall code quality and efficiency.\u003c/p\u003e\n\u003cp\u003eDon’t forget that you can always follow up with more detailed questions after Copilot gives you a response or makes a suggestion. You can ask Copilot questions like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“What does this vulnerability mean?”  \u003c/li\u003e\n\u003cli\u003e“Can you suggest a safer way to do this?”\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor more sample prompts, check out our \u003ca href=\"https://docs.github.com/copilot/copilot-chat-cookbook\"\u003eCopilot Chat Cookbook\u003c/a\u003e. The section on \u003ca href=\"https://docs.github.com/copilot/copilot-chat-cookbook/security-analysis/finding-existing-vulnerabilities-in-code\"\u003eFinding vulnerabilities\u003c/a\u003e is particularly appropriate for this topic.\u003c/p\u003e\n\n\u003cp\u003eWhile Github Copilot is powerful, it’s not meant to replace all your security tools. This is partly because Copilot is a generalist, not a specialist. It can’t always see the full context of your production environment. Built-to-purpose security tools can take other factors into account, such as your compiler, your environment variables, and your deployment method.\u003c/p\u003e\n\u003cp\u003eFortunately, GitHub has a number of free security offerings for open source maintainers. This means you can use them at no cost on your public repositories. Let’s take a look at some of them.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDependabot\u003c/strong\u003e\u003cbr/\u003e\nIf you’ve been working on code in a public GitHub repository, you may have noticed a pull request from someone called \u003cstrong\u003edependabot\u003c/strong\u003e. That’s GitHub’s tool that checks to make sure your dependencies are vulnerability-free and up-to-date.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/dependabot.png?resize=1024%2C578\" alt=\"A pull request from Dependabot.\" width=\"1024\" height=\"578\" srcset=\"https://github.blog/wp-content/uploads/2025/04/dependabot.png?w=1436 1436w, https://github.blog/wp-content/uploads/2025/04/dependabot.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/dependabot.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/dependabot.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo enable or disable Dependabot, click the \u003cstrong\u003eSettings\u003c/strong\u003e tab for your repository. Scroll down and click \u003cstrong\u003eCode security\u003c/strong\u003e in the left-hand menu. In this menu, there is an entire section for \u003cstrong\u003eDependabot\u003c/strong\u003e. You can enable or disable alerts as well as automatic updates.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCode scanning \u0026amp; CodeQL\u003c/strong\u003e\u003cbr/\u003e\nThe next section in a public repository is \u003cstrong\u003eCode scanning\u003c/strong\u003e. If you don’t see this section, it likely means you’re working in a private repository. Code scanning will automatically detect common vulnerabilities and coding errors, such as the SQL injection vulnerability we talked about at the beginning of this post. We highly recommend you enable \u003cstrong\u003eCodeQL analysis\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/codeql.png?resize=1024%2C578\" alt=\"A screenshot showing the window where you can enable CodeQL analysis.\" width=\"1024\" height=\"578\" srcset=\"https://github.blog/wp-content/uploads/2025/04/codeql.png?w=1436 1436w, https://github.blog/wp-content/uploads/2025/04/codeql.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/codeql.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/codeql.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo do so, click the \u003cstrong\u003eSet up\u003c/strong\u003e button, and select \u003cstrong\u003eDefault\u003c/strong\u003e from the menu that appears. Then click the green \u003cstrong\u003eEnable CodeQL\u003c/strong\u003e button at the bottom of the pop up window. This enables GitHub to look for pattern-based vulnerabilities in your code. This happens automatically when you commit new code to your repository, when you make pull requests, and as a periodic scan. If GitHub finds a new problem, it will send you a notification so you can fix it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCopilot Autofix\u003c/strong\u003e\u003cbr/\u003e\nIf you want to have Copilot automatically suggest fixes to these vulnerabilities, enable \u003cstrong\u003eCopilot Autofix\u003c/strong\u003e. It can be found on the \u003cstrong\u003eCode security\u003c/strong\u003e page, under the button to \u003cstrong\u003eEnable CodeQL\u003c/strong\u003e. With this enabled, GitHub will run Copilot when it discovers a problem, and it will create a pull request with a suggested solution provided by Copilot. Once you review the solution, you’ll have the option to accept the pull request, eliminating the need for you to manually run Copilot to generate a possible solution.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86371-3\" width=\"1436\" height=\"810\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/copilot_autofix.mp4#t=0.001?_=3\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/copilot_autofix.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/copilot_autofix.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSecret scanning\u003c/strong\u003e\u003cbr/\u003e\nThe next security tool we want to point out is \u003cstrong\u003esecret scanning\u003c/strong\u003e. You can find the option for secret scanning at the bottom of the \u003cstrong\u003eCode security\u003c/strong\u003e page. By enabling secret scanning, GitHub scans your code to look for possible exposed secrets, such as passwords or security tokens. You never want these directly embedded in your code because of the security risk. With \u003cstrong\u003ePush protection\u003c/strong\u003e enabled, GitHub will proactively block any new secrets from being committed to your GitHub-hosted code.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/push_protection.png?resize=1024%2C578\" alt=\"A screenshot showing how to enable Push protection.\" width=\"1024\" height=\"578\" srcset=\"https://github.blog/wp-content/uploads/2025/04/push_protection.png?w=1436 1436w, https://github.blog/wp-content/uploads/2025/04/push_protection.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/push_protection.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/push_protection.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThere are several other features that we don’t have time to explore here. If you’d like to read more on your own, check out our documentation about \u003ca href=\"https://docs.github.com/code-security/getting-started/github-security-features\"\u003eGitHub security features\u003c/a\u003e and our \u003ca href=\"https://docs.github.com/code-security/getting-started/quickstart-for-securing-your-repository\"\u003equickstart for securing your repository\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"your-next-steps\" id=\"your-next-steps\"\u003eYour next steps\u003ca href=\"#your-next-steps\" aria-label=\"Your next steps\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSecurity is an incredibly deep topic, and we don’t expect you to be an expert. For now, remember these three things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eAsk Copilot to find and fix vulnerabilities.\u003c/strong\u003e This might be as simple as running \u003ccode\u003e/fix\u003c/code\u003e in Copilot Chat, or it could be more detailed such as selecting some code and asking Copilot to check it for vulnerabilities.  \u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAsk Copilot for more details when problems are found.\u003c/strong\u003e It’s important to understand the solution, both to make sure you can verify its work and also as a learning opportunity to help you in the future.  \u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnable Dependabot, code scanning, and secret scanning.\u003c/strong\u003e These tools in the \u003cstrong\u003eCode security\u003c/strong\u003e settings will be useful for sending you alerts when there are potential problems you want to be aware of. And remember that Copilot can help you fix them!\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e! If you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e, and we’ll be sure to respond. Join us for the next part in this series, where we’ll learn how to build a REST API with Copilot.\u003c/p\u003e\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-04-14T13:00:29Z",
  "modifiedTime": null
}
