{
  "id": "96191ac0-40e8-4aef-94a0-d02f8e7a0e1b",
  "title": "Tutorial: Security scanning in air-gapped environments",
  "link": "https://about.gitlab.com/blog/2025/02/05/tutorial-security-scanning-in-air-gapped-environments",
  "description": "",
  "author": "Fernando Diaz",
  "published": "2025-02-05T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Fernando Diaz",
  "length": 14127,
  "excerpt": "Security scanning remains crucial even in air-gapped environments to detect internal threats, prevent data exfiltration, and maintain operational integrity. Learn how GitLab can help get air-gapped environments secure.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Air-gapped environments are computer networks or systems that are physically isolated from unsecured networks, such as the public internet or unsecured local area networks. This isolation is implemented as a security measure to protect sensitive data and critical systems from external cyber threats by providing: Enhanced security: By physically isolating systems from external networks, air-gapped environments help prevent remote attacks, malware infections, and unauthorized data access. This is crucial for highly sensitive data and critical systems. Data protection: Air-gapping provides the strongest protection against data exfiltration since there's no direct connection that attackers could use to steal information. Critical infrastructure protection: For systems that control vital infrastructure (like power plants, water treatment facilities, or military systems), air-gapping helps prevent potentially catastrophic cyber attacks. Compliance requirements: Many regulatory frameworks require air-gapping for certain types of sensitive data or critical systems, particularly in government, healthcare, and financial sectors. Malware protection: Without network connectivity, systems are protected from network-based malware infections and ransomware attacks. Even though air-gapped systems are isolated, they can still have vulnerabilities. Regular security scanning helps identify these weaknesses before they can be exploited. In this article, you will learn the different security scanners GitLab provides and how they can be added/updated in a limited-connectivity environment. GitLab security scanners in air-gapped environments GitLab provides a variety of different security scanners for the complete application lifecycle. The scanners that support air-gapped environments include: Static Application Security Testing (SAST) Dynamic Application Security Testing (DAST) Secret Detection Container Scanning Dependency Scanning API Fuzzing License Scanning By default, GitLab Self-Managed instances pull security scanner images from the public GitLab container registry (registry.gitlab.com) and store them within the built-in local GitLab container registry. I will demonstrate this flow below by running the following pipeline that scans for secrets on a sample project: include: - template: Jobs/Secret-Detection.gitlab-ci.yml When running the job in an internet-connected GitLab instance the job passes: GitLab Runner with internet access successfully pulling from external registry However, If I disable internet access to the VM running GitLab, the secret-detection job will fail to download the container image, causing the job to fail: GitLab Runner without internet access failing to pull from external registry Alternatively, if I set my GitLab Runners’ pull image policy to if-not-present from always, I can load the cached version of the scanner if it was run before on the internet by using the image stored in our local docker: GitLab Runner without internet access successfully pulling from internal registry cache Setting up offline scanning prerequisites Running these security scanners in an air-gapped environment requires the following: GitLab Ultimate subscription Offline cloud license GitLab Self-Managed cluster You can follow along with this tutorial in any GitLab Self-Managed EE instance (even those that are not air-gapped) to learn how to transfer and run images in an air-gapped environment. In this tutorial, I will demonstrate how to load scanner images onto a GitLab-EE instance running in a Google Compute VM where I cut off the EGRESS to everything by implementing firewall rules: # egress firewall rule to block all outbound traffic to the internet $ gcloud compute firewall-rules create deny-internet-egress \\ --direction=EGRESS \\ --priority=1000 \\ --network=default \\ --action=DENY \\ --rules=all \\ --destination-ranges=0.0.0.0/0 \\ --target-tags=no-internet # Create an allow rule for internal traffic with higher priority $ gcloud compute firewall-rules create allow-internal-egress \\ --direction=EGRESS \\ --priority=900 \\ --network=default \\ --action=ALLOW \\ --rules=all \\ --destination-ranges=10.0.0.0/8,192.168.0.0/16,172.16.0.0/12 \\ --target-tags=no-internet # Apply tag to VM $ gcloud compute instances add-tags YOUR_VM_NAME \\ --zone=YOUR_ZONE \\ --tags=no-internet Then, once I SSH into my VM, you can see we cannot connect to registry.gitlab.com: # showing I can’t access the gitlab container registry $ ping registry.gitlab.com PING registry.gitlab.com (35.227.35.254) 56(84) bytes of data. ^C --- registry.gitlab.com ping statistics --- 3 packets transmitted, 0 received, 100% packet loss, time 2031ms Note: I am still allowing ingress so I can copy files and SSH into the machine. Load security scanners in air-gapped environments To use the various security scanners on air-gapped environments, the GitLab Runner must be able to fetch the scanner container images from GitLab’s built-in container registry. This means that the container images for the security scanners must be downloaded and packaged in a separate environment with access to the public internet. The process of loading security scanners onto an air-gapped environment includes the following: Download and package container images from the public internet. Transfer images to offline environment. Load transferred images into offline container registry. Now let’s go over how we can implement GitLab Secret Detection in an air-gapped environment. Download and package container images from public internet Let’s download the container image for secret detection and store it within our local container registry. Other scanner images can be found in the offline deployments documentation. I will be using Podman desktop to download these images, but you can use Docker desktop or other alternatives. Pull the GitLab Secret Detection image. $ podman pull registry.gitlab.com/security-products/secrets:6 Trying to pull registry.gitlab.com/security-products/secrets:6... Getting image source signatures Copying blob sha256:999745130ac045f2b1c29ecce088b43fc4a95bbb82b7960fb7b8abe0e3801bf8 Copying blob sha256:a4f7c013bb259c146cd8455b7c3943df7ed84b157e42a2348eef16546d8179b1 Copying blob sha256:1f3e46996e2966e4faa5846e56e76e3748b7315e2ded61476c24403d592134f0 Copying blob sha256:400a41f248eb3c870bd2b07073632c49f1e164c8efad56ea3b24098a657ec625 Copying blob sha256:9090f17a5a1bb80bcc6f393b0715210568dd0a7749286e3334a1a08fb32d34e6 Copying blob sha256:c7569783959081164164780f6c1b0bbe1271ee8d291d3e07b2749ae741621ea3 Copying blob sha256:20c7ca6108f808ad5905f6db4f7e3c02b21b69abdea8b45abfa34c0a2ba8bdb5 Copying blob sha256:e8645a00be64d77c6ff301593ce34cd8c17ffb2b36252ca0f2588009a7918d2e Copying config sha256:0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894 Writing manifest to image destination WARNING: image platform (linux/amd64) does not match the expected platform (linux/arm64) 0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894 $ podman images REPOSITORY TAG IMAGE ID CREATED SIZE registry.gitlab.com/security-products/secrets 6 0235ed43fc7f 4 hours ago 85.3 MB Save the image as a tarball. $ podman save -o secret-detection.tar registry.gitlab.com/security-products/secrets:6 $ chmod +r secret-detection.tar $ ls -al secret-detection.tar -rw-r--r--@ 1 fern staff 85324800 Jan 10 10:25 secret-detection.tar Alternatively, you can use the official GitLab template on an environment with internet access to download the container images needed for the security scanners and save them as job artifacts or push them to the container registry of the project where the pipeline is executed. Transfer images to offline environment Next, let's transfer the tarball to our air-gapped environment. This can be done in several ways, depending on your needs, such as: Physical media transfer Data diodes Guard systems Cross-domain solutions (CDS) I will SCP (Secure Copy Protocol) the tarball directly to my VM that does not have egress access, but does allow ingress. As this is just for demonstration purposes, make sure to consult your organization's security policies and transfer procedures for air-gapped environments. Verify the image is not cached Before transferring the file, I’ll delete the Docker images on my GitLab instance pertaining to secret detection to make sure they aren't cached: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE registry.gitlab.com/security-products/secrets 6 0235ed43fc7f 9 hours ago 84.8MB registry.gitlab.com/security-products/secrets \u003cnone\u003e 16d88433af61 17 hours ago 74.9MB $ docker image rmi 16d88433af61 -f Untagged: registry.gitlab.com/security-products/secrets@sha256:f331da6631d791fcd58d3f23d868475a520f50b02d64000e2faf1def66c75d48 Deleted: sha256:16d88433af618f0b405945031de39fe40b3e8ef1bddb91ca036de0f5b32399d7 Deleted: sha256:1bb06f72f06810e95a70039e797481736e492201f51a03b02d27db055248ab6f Deleted: sha256:a5ef2325ce4be9b39993ce301f8ed7aad1c854d7ee66f26a56a96967c6606510 Deleted: sha256:f7cdac818a36d6c023763b76a6589c0db7609ca883306af4f38b819e62f29471 Deleted: sha256:5eabf4d47287dee9887b9692d55c8b5f848b50b3b7248f67913036014e74a0e9 Deleted: sha256:51b7cb600604c0737356f17bc02c22bac3a63697f0bf95ba7bacb5b421fdb7da Deleted: sha256:1546193b011d192aa769a15d3fdd55eb4e187f201f5ff7506243abb02525dc06 Deleted: sha256:1ea72408d0484c3059cc0008539e6f494dc829caa1a97d156795687d42d9cb57 Deleted: sha256:1313ee9da7716d85f63cfdd1129f715e9bbb6c9c0306e4708ee73672b3e40f26 Deleted: sha256:954ebfd83406f0dfed93eb5157ba841af5426aa95d4054174fff45095fd873a1 $ docker image rmi 0235ed43fc7f -f Untagged: registry.gitlab.com/security-products/secrets:6 Deleted: sha256:0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894 Deleted: sha256:f05f85850cf4fac79e279d93afb6645c026de0223d07b396fce86c2f76096c1f Deleted: sha256:7432b0766b885144990edd3166fbabed081be71d28d186f4d525e52729f06b1f Deleted: sha256:2c6e3361c2ee2f43bd75fb9c7c12d981ce06df2d51a134965fa47754760efff0 Deleted: sha256:7ad7f7245b45fbe758ebd5788e0ba268a56829715527a9a4bc51708c21af1c7f Deleted: sha256:3b73a621115a59564979f41552181dce07f3baa17e27428f7fff2155042a1901 Deleted: sha256:78648c2606a7c4c76885806ed976b13e4d008940bd3d7a18b52948a6be71b60d Deleted: sha256:383d4a6dc5be9914878700809b4a3925379c80ab792dfe9e79d14b0c1d6b5fad Then I'll rerun the job to show the failure: GitLab Runner without internet access fails to pull an image from internal registry cache SCP file to GitLab instance Now, from my local machine, I will SCP the file to my GitLab instance as follows: $ gcloud compute scp secret-detection.tar INSTANCE:~ --zone=ZONE secret-detection.tar 100% 81MB 21.5MB/s 00:03 Load transferred images into offline container registry Next, I'll SSH into my VM and load the Docker image: $ gcloud compute ssh INSTANCE --zone=ZONE $ sudo docker load -i secret-detection.tar c3c8e454c212: Loading layer [==================================================\u003e] 2.521MB/2.521MB 51e93afaeedc: Loading layer [==================================================\u003e] 32.55MB/32.55MB e8a25e39bb30: Loading layer [==================================================\u003e] 221.2kB/221.2kB 390704968493: Loading layer [==================================================\u003e] 225.8kB/225.8kB 76cf57e75f63: Loading layer [==================================================\u003e] 17.64MB/17.64MB c4c7a681fd10: Loading layer [==================================================\u003e] 4.608kB/4.608kB f0690f406157: Loading layer [==================================================\u003e] 24.01MB/24.01MB Loaded image: registry.gitlab.com/security-products/secrets:6 Run the scanners I'll re-run the pipeline manually and the scanner will be pulled from the cache. Once the pipeline completes, we can see the secret detection job is successful: GitLab Runner without internet access successfully pulling from internal registry cache after image loaded If you want to pull the image from a different location or you tag your images in a different way, you can edit the config as follows: include: - template: Jobs/Secret-Detection.gitlab-ci.yml variables: SECURE_ANALYZERS_PREFIX: \"localhost:5000/analyzers\" See the offline environments documentation for more information. View scanner results Once the scanner completes on the default branch, a vulnerability report is populated with all the findings. The vulnerability report provides information about vulnerabilities from scans of the default branch. You can access the vulnerability report by navigating to the side tab and selecting Secure \u003e Vulnerability Report: GitLab Vulnerability Report with secret detection findings The project’s vulnerability report provides: totals of vulnerabilities per severity level filters for common vulnerability attributes details of each vulnerability, presented in tabular layout a timestamp showing when it was updated, including a link to the latest pipeline We can see that two vulnerabilities were detected by the Secret Detection scanner. If we click on a vulnerability, we will be transported to its vulnerability page: GitLab Vulnerability Page showing detailed insights The vulnerability page provides details of the vulnerability, which can be used to triage and find a path to remediation. These vulnerability details include: description when it was detected current status available actions linked issues actions log filename and line number of the vulnerability (if available) severity Read more To learn more about GitLab and running security scanners in air-gapped environments, check out the following resources: GitLab Ultimate GitLab Security and Compliance Solutions GitLab Offline Deployments Documentation GitLab Application Security Documentation",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/6gTk7M1DNx0tFuovupVFB1/34420865874ada19d36cb0b2401c2e2c/AdobeStock_1097303277.jpeg?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eAir-gapped environments are computer networks or systems that are physically isolated from unsecured networks, such as the public internet or unsecured local area networks. This isolation is implemented as a security measure to protect sensitive data and critical systems from external cyber threats by providing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnhanced security: By physically isolating systems from external networks, air-gapped environments help prevent remote attacks, malware infections, and unauthorized data access. This is crucial for highly sensitive data and critical systems.\u003c/li\u003e\n\u003cli\u003eData protection: Air-gapping provides the strongest protection against data exfiltration since there\u0026#39;s no direct connection that attackers could use to steal information.\u003c/li\u003e\n\u003cli\u003eCritical infrastructure protection: For systems that control vital infrastructure (like power plants, water treatment facilities, or military systems), air-gapping helps prevent potentially catastrophic cyber attacks.\u003c/li\u003e\n\u003cli\u003eCompliance requirements: Many regulatory frameworks require air-gapping for certain types of sensitive data or critical systems, particularly in government, healthcare, and financial sectors.\u003c/li\u003e\n\u003cli\u003eMalware protection: Without network connectivity, systems are protected from network-based malware infections and ransomware attacks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven though air-gapped systems are isolated, they can still have vulnerabilities. Regular security scanning helps identify these weaknesses before they can be exploited. In this article, you will learn the different security scanners GitLab provides and how they can be added/updated in a limited-connectivity environment.\u003c/p\u003e\n\u003ch2 id=\"gitlab-security-scanners-in-air-gapped-environments\" tabindex=\"-1\"\u003eGitLab security scanners in air-gapped environments \u003ca href=\"#gitlab-security-scanners-in-air-gapped-environments\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitLab provides a variety of different security scanners for the complete application lifecycle. The scanners that support air-gapped environments include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/index.html#running-sast-in-an-offline-environment\"\u003eStatic Application Security Testing (SAST)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/offline_configuration.html\"\u003eDynamic Application Security Testing (DAST\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/index.html#offline-configuration\"\u003eSecret Detection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#running-container-scanning-in-an-offline-environment\"\u003eContainer Scanning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html#offline-environment\"\u003eDependency Scanning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/api_fuzzing/configuration/offline_configuration.html\"\u003eAPI Fuzzing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/compliance/license_scanning_of_cyclonedx_files/index.html#running-in-an-offline-environment\"\u003eLicense Scanning\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy default, GitLab Self-Managed instances pull security scanner images from the public GitLab container registry (registry.gitlab.com) and store them within the \u003ca href=\"https://docs.gitlab.com/ee/user/packages/container_registry/\"\u003ebuilt-in local GitLab container registry\u003c/a\u003e. I will demonstrate this flow below by running the following pipeline that scans for secrets on a \u003ca href=\"https://gitlab.com/gitlab-da/tutorials/security-and-governance/owasp/juice-shop\"\u003esample project\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einclude:\n  - template: Jobs/Secret-Detection.gitlab-ci.yml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen running the job in an internet-connected GitLab instance the job passes:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1xjIX1SEB9aG51s9Y71EiE/30da85dd73d7c426408bc3e38f4f6eac/pass-1.png\" alt=\"GitLab Runner with internet access successfully pulling from external registry\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Runner with internet access successfully pulling from external registry\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003e\nHowever, If I disable internet access to the VM running GitLab, the \u003ccode\u003esecret-detection\u003c/code\u003e job will fail to download the container image, causing the job to fail:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/25NWzvQA2RceTQlb2aLmzk/fa6e62e89a3835be5b9ff02a8fb245da/fail-1.png\" alt=\"GitLab Runner without internet access failing to pull from external registry\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Runner without internet access failing to pull from external registry\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eAlternatively, if I set my GitLab Runners’ pull image policy to \u003ccode\u003eif-not-present\u003c/code\u003e from \u003ccode\u003ealways\u003c/code\u003e, I can load the cached version of the scanner if it was run before on the internet by using the image stored in our local docker:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/48sKSLIBwq6wuqo6jLCMg6/c286af66ec43c2aefd67d3735d175c57/pass-2.png\" alt=\"GitLab Runner without internet access successfully pulling from internal registry cache\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Runner without internet access successfully pulling from internal registry cache\u003c/i\u003e\u003c/center\u003e\n\n\u003ch3 id=\"setting-up-offline-scanning-prerequisites\" tabindex=\"-1\"\u003eSetting up offline scanning prerequisites \u003ca href=\"#setting-up-offline-scanning-prerequisites\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eRunning these security scanners in an air-gapped environment requires the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/pricing/ultimate/\"\u003eGitLab Ultimate subscription\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/pricing/licensing-faq/cloud-licensing/#offline-cloud-licensing\"\u003eOffline cloud license\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitLab Self-Managed cluster\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can follow along with this tutorial in any GitLab Self-Managed EE instance (even those that are not air-gapped) to learn how to transfer and run images in an air-gapped environment. In this tutorial, I will demonstrate how to load scanner images onto a GitLab-EE instance running in a Google Compute VM where I cut off the \u003ccode\u003eEGRESS\u003c/code\u003e to everything by implementing firewall rules:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# egress firewall rule to block all outbound traffic to the internet\n$ gcloud compute firewall-rules create deny-internet-egress \\\n    --direction=EGRESS \\\n    --priority=1000 \\\n    --network=default \\\n    --action=DENY \\\n    --rules=all \\\n    --destination-ranges=0.0.0.0/0 \\\n    --target-tags=no-internet\n\n# Create an allow rule for internal traffic with higher priority\n$ gcloud compute firewall-rules create allow-internal-egress \\\n    --direction=EGRESS \\\n    --priority=900 \\\n    --network=default \\\n    --action=ALLOW \\\n    --rules=all \\\n    --destination-ranges=10.0.0.0/8,192.168.0.0/16,172.16.0.0/12 \\\n    --target-tags=no-internet\n\n# Apply tag to VM\n$ gcloud compute instances add-tags YOUR_VM_NAME \\\n    --zone=YOUR_ZONE \\\n    --tags=no-internet\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, once I SSH into my VM, you can see we cannot connect to registry.gitlab.com:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# showing I can’t access the gitlab container registry\n$ ping registry.gitlab.com\nPING registry.gitlab.com (35.227.35.254) 56(84) bytes of data.\n^C\n--- registry.gitlab.com ping statistics ---\n3 packets transmitted, 0 received, 100% packet loss, time 2031ms\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e I am still allowing ingress so I can copy files and SSH into the machine.\u003c/p\u003e\n\u003ch2 id=\"load-security-scanners-in-air-gapped-environments\" tabindex=\"-1\"\u003eLoad security scanners in air-gapped environments \u003ca href=\"#load-security-scanners-in-air-gapped-environments\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo use the various security scanners on air-gapped environments, the GitLab Runner must be able to fetch the scanner container images from GitLab’s built-in container registry. This means that the container images for the security scanners must be downloaded and packaged in a separate environment with access to the public internet. The process of loading security scanners onto an air-gapped environment includes the following:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDownload and package container images from the public internet.\u003c/li\u003e\n\u003cli\u003eTransfer images to offline environment.\u003c/li\u003e\n\u003cli\u003eLoad transferred images into offline container registry.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNow let’s go over how we can implement GitLab Secret Detection in an air-gapped environment.\u003c/p\u003e\n\u003ch3 id=\"download-and-package-container-images-from-public-internet\" tabindex=\"-1\"\u003eDownload and package container images from public internet \u003ca href=\"#download-and-package-container-images-from-public-internet\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet’s download the container image for secret detection and store it within our local container registry. Other scanner images can be found in the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/offline_deployments/\"\u003eoffline deployments documentation\u003c/a\u003e. I will be using Podman desktop to download these images, but you can use Docker desktop or other alternatives.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ePull the GitLab Secret Detection image.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e$ podman pull registry.gitlab.com/security-products/secrets:6\nTrying to pull registry.gitlab.com/security-products/secrets:6...\nGetting image source signatures\nCopying blob sha256:999745130ac045f2b1c29ecce088b43fc4a95bbb82b7960fb7b8abe0e3801bf8\nCopying blob sha256:a4f7c013bb259c146cd8455b7c3943df7ed84b157e42a2348eef16546d8179b1\nCopying blob sha256:1f3e46996e2966e4faa5846e56e76e3748b7315e2ded61476c24403d592134f0\nCopying blob sha256:400a41f248eb3c870bd2b07073632c49f1e164c8efad56ea3b24098a657ec625\nCopying blob sha256:9090f17a5a1bb80bcc6f393b0715210568dd0a7749286e3334a1a08fb32d34e6\nCopying blob sha256:c7569783959081164164780f6c1b0bbe1271ee8d291d3e07b2749ae741621ea3\nCopying blob sha256:20c7ca6108f808ad5905f6db4f7e3c02b21b69abdea8b45abfa34c0a2ba8bdb5\nCopying blob sha256:e8645a00be64d77c6ff301593ce34cd8c17ffb2b36252ca0f2588009a7918d2e\nCopying config sha256:0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894\nWriting manifest to image destination\nWARNING: image platform (linux/amd64) does not match the expected platform (linux/arm64)\n0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894\n\n$ podman images\nREPOSITORY                                                  TAG         IMAGE ID      CREATED      SIZE\nregistry.gitlab.com/security-products/secrets               6           0235ed43fc7f  4 hours ago  85.3 MB\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eSave the image as a tarball.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e$ podman save -o secret-detection.tar registry.gitlab.com/security-products/secrets:6\n$ chmod +r secret-detection.tar\n$ ls -al secret-detection.tar\n-rw-r--r--@ 1 fern  staff  85324800 Jan 10 10:25 secret-detection.tar\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternatively, you can use the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/offline_deployments/#using-the-official-gitlab-template\"\u003eofficial GitLab template\u003c/a\u003e on an environment with internet access to download the container images needed for the security scanners and save them as job artifacts or push them to the container registry of the project where the pipeline is executed.\u003c/p\u003e\n\u003ch3 id=\"transfer-images-to-offline-environment\" tabindex=\"-1\"\u003eTransfer images to offline environment \u003ca href=\"#transfer-images-to-offline-environment\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNext, let\u0026#39;s transfer the tarball to our air-gapped environment. This can be done in several ways, depending on your needs, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePhysical media transfer\u003c/li\u003e\n\u003cli\u003eData diodes\u003c/li\u003e\n\u003cli\u003eGuard systems\u003c/li\u003e\n\u003cli\u003eCross-domain solutions (CDS)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI will SCP (Secure Copy Protocol) the tarball directly to my VM that does not have egress access, but does allow ingress. As this is just for demonstration purposes, make sure to consult your organization\u0026#39;s security policies and transfer procedures for air-gapped environments.\u003c/p\u003e\n\u003ch4 id=\"verify-the-image-is-not-cached\" tabindex=\"-1\"\u003eVerify the image is not cached \u003ca href=\"#verify-the-image-is-not-cached\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eBefore transferring the file, I’ll delete the Docker images on my GitLab instance pertaining to secret detection to make sure they aren\u0026#39;t cached:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ docker images\nREPOSITORY                                                          TAG              IMAGE ID       CREATED        SIZE\nregistry.gitlab.com/security-products/secrets                       6                0235ed43fc7f   9 hours ago    84.8MB\nregistry.gitlab.com/security-products/secrets                       \u0026lt;none\u0026gt;           16d88433af61   17 hours ago   74.9MB\n\n$ docker image rmi 16d88433af61 -f\nUntagged: registry.gitlab.com/security-products/secrets@sha256:f331da6631d791fcd58d3f23d868475a520f50b02d64000e2faf1def66c75d48\nDeleted: sha256:16d88433af618f0b405945031de39fe40b3e8ef1bddb91ca036de0f5b32399d7\nDeleted: sha256:1bb06f72f06810e95a70039e797481736e492201f51a03b02d27db055248ab6f\nDeleted: sha256:a5ef2325ce4be9b39993ce301f8ed7aad1c854d7ee66f26a56a96967c6606510\nDeleted: sha256:f7cdac818a36d6c023763b76a6589c0db7609ca883306af4f38b819e62f29471\nDeleted: sha256:5eabf4d47287dee9887b9692d55c8b5f848b50b3b7248f67913036014e74a0e9\nDeleted: sha256:51b7cb600604c0737356f17bc02c22bac3a63697f0bf95ba7bacb5b421fdb7da\nDeleted: sha256:1546193b011d192aa769a15d3fdd55eb4e187f201f5ff7506243abb02525dc06\nDeleted: sha256:1ea72408d0484c3059cc0008539e6f494dc829caa1a97d156795687d42d9cb57\nDeleted: sha256:1313ee9da7716d85f63cfdd1129f715e9bbb6c9c0306e4708ee73672b3e40f26\nDeleted: sha256:954ebfd83406f0dfed93eb5157ba841af5426aa95d4054174fff45095fd873a1\n\n$ docker image rmi 0235ed43fc7f -f\nUntagged: registry.gitlab.com/security-products/secrets:6\nDeleted: sha256:0235ed43fc7fb2852c76e2d6196601968ae0375c72a517bef714cd712600f894\nDeleted: sha256:f05f85850cf4fac79e279d93afb6645c026de0223d07b396fce86c2f76096c1f\nDeleted: sha256:7432b0766b885144990edd3166fbabed081be71d28d186f4d525e52729f06b1f\nDeleted: sha256:2c6e3361c2ee2f43bd75fb9c7c12d981ce06df2d51a134965fa47754760efff0\nDeleted: sha256:7ad7f7245b45fbe758ebd5788e0ba268a56829715527a9a4bc51708c21af1c7f\nDeleted: sha256:3b73a621115a59564979f41552181dce07f3baa17e27428f7fff2155042a1901\nDeleted: sha256:78648c2606a7c4c76885806ed976b13e4d008940bd3d7a18b52948a6be71b60d\nDeleted: sha256:383d4a6dc5be9914878700809b4a3925379c80ab792dfe9e79d14b0c1d6b5fad\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen I\u0026#39;ll rerun the job to show the failure:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4Qv6C0DQfEWoWqGykW2lNU/be3d6cc478d4d86182f47bc2f8341ade/image2.png\" alt=\"GitLab Runner without internet access fails to pull an image from internal registry cache\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Runner without internet access fails to pull an image from internal registry cache\u003c/i\u003e\u003c/center\u003e\n\u003ch4 id=\"scp-file-to-gitlab-instance\" tabindex=\"-1\"\u003eSCP file to GitLab instance \u003ca href=\"#scp-file-to-gitlab-instance\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eNow, from my local machine, I will SCP the file to my GitLab instance as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ gcloud compute scp secret-detection.tar INSTANCE:~ --zone=ZONE\nsecret-detection.tar                                                          100%   81MB  21.5MB/s   00:03\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"load-transferred-images-into-offline-container-registry\" tabindex=\"-1\"\u003eLoad transferred images into offline container registry \u003ca href=\"#load-transferred-images-into-offline-container-registry\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNext, I\u0026#39;ll SSH into my VM and load the Docker image:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ gcloud compute ssh INSTANCE --zone=ZONE\n\n$ sudo docker load -i secret-detection.tar\nc3c8e454c212: Loading layer [==================================================\u0026gt;]  2.521MB/2.521MB\n51e93afaeedc: Loading layer [==================================================\u0026gt;]  32.55MB/32.55MB\ne8a25e39bb30: Loading layer [==================================================\u0026gt;]  221.2kB/221.2kB\n390704968493: Loading layer [==================================================\u0026gt;]  225.8kB/225.8kB\n76cf57e75f63: Loading layer [==================================================\u0026gt;]  17.64MB/17.64MB\nc4c7a681fd10: Loading layer [==================================================\u0026gt;]  4.608kB/4.608kB\nf0690f406157: Loading layer [==================================================\u0026gt;]  24.01MB/24.01MB\nLoaded image: registry.gitlab.com/security-products/secrets:6\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"run-the-scanners\" tabindex=\"-1\"\u003eRun the scanners \u003ca href=\"#run-the-scanners\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eI\u0026#39;ll \u003ca href=\"https://docs.gitlab.com/ee/ci/pipelines/#run-a-pipeline-manually\"\u003ere-run the pipeline manually\u003c/a\u003e and the scanner will be pulled from the cache. Once the pipeline completes, we can see the secret detection job is successful:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2NwioKHVElZI8RWYLnpVGs/90b6a76f403eb46ff8171df844d1f47b/image7.png\" alt=\"GitLab Runner without internet access successfully pulling from internal registry cache after image loaded\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Runner without internet access successfully pulling from internal registry cache after image loaded\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eIf you want to pull the image from a different location or you tag your images in a different way, you can edit the config as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einclude:\n  - template: Jobs/Secret-Detection.gitlab-ci.yml\n\nvariables:\n  SECURE_ANALYZERS_PREFIX: \u0026#34;localhost:5000/analyzers\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/offline_deployments/\"\u003eoffline environments documentation\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch3 id=\"view-scanner-results\" tabindex=\"-1\"\u003eView scanner results \u003ca href=\"#view-scanner-results\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOnce the scanner completes on the default branch, a vulnerability report is populated with all the findings. The vulnerability report provides information about vulnerabilities from scans of the default branch.\u003c/p\u003e\n\u003cp\u003eYou can access the vulnerability report by navigating to the side tab and selecting \u003cstrong\u003eSecure \u0026gt; Vulnerability Report\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3Mf0eQrW7abnwowcEE1Fyq/96edfacb8008b7cf1bb74e391c218f27/vulnerability_report.png\" alt=\"GitLab Vulnerability Report with secret detection findings\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Vulnerability Report with secret detection findings\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eThe project’s vulnerability report provides:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etotals of vulnerabilities per severity level\u003c/li\u003e\n\u003cli\u003efilters for common vulnerability attributes\u003c/li\u003e\n\u003cli\u003edetails of each vulnerability, presented in tabular layout\u003c/li\u003e\n\u003cli\u003ea timestamp showing when it was updated, including a link to the latest pipeline\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe can see that two vulnerabilities were detected by the Secret Detection scanner. If we click on a vulnerability, we will be transported to its vulnerability page:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1xA76q6EapOqhyuG03eLXr/1aedd70afd87becbb099140facadbaf2/insights.png\" alt=\"GitLab Vulnerability Page showing detailed insights\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Vulnerability Page showing detailed insights\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eThe vulnerability page provides details of the vulnerability, which can be used to triage and find a path to remediation. These vulnerability details include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edescription\u003c/li\u003e\n\u003cli\u003ewhen it was detected\u003c/li\u003e\n\u003cli\u003ecurrent status\u003c/li\u003e\n\u003cli\u003eavailable actions\u003c/li\u003e\n\u003cli\u003elinked issues\u003c/li\u003e\n\u003cli\u003eactions log\u003c/li\u003e\n\u003cli\u003efilename and line number of the vulnerability (if available)\u003c/li\u003e\n\u003cli\u003eseverity\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"read-more\" tabindex=\"-1\"\u003eRead more \u003ca href=\"#read-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo learn more about GitLab and running security scanners in air-gapped environments, check out the following resources:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/pricing/ultimate/\"\u003eGitLab Ultimate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/security-compliance/\"\u003eGitLab Security and Compliance Solutions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/offline_deployments/\"\u003eGitLab Offline Deployments Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/\"\u003eGitLab Application Security Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-02-05T00:00:00Z",
  "modifiedTime": null
}
