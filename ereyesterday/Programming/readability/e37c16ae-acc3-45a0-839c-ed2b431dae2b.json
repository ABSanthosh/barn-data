{
  "id": "e37c16ae-acc3-45a0-839c-ed2b431dae2b",
  "title": "jOOQ 3.20 released with ClickHouse, Databricks, and much more DuckDB support, new modules, Oracle type hierarchies, more spatial support, decfloat and synonym support, hidden columns, Scala 3, Kotlin 2, and much more",
  "link": "https://blog.jooq.org/jooq-3-20-released-with-clickhouse-databricks-and-much-more-duckdb-support-new-modules-oracle-type-hierarchies-more-spatial-support-decfloat-and-synonym-support-hidden-columns-scala-3-kotlin/",
  "description": "New dialects: jOOQ 3.20 ships with 2 new experimental dialects: ClickHouse is a fast-moving SQL dialect with a historic vendor-specific syntax that is gradually migrated to a more standards compliant alternative, which is why our support is still experimental. A lot of behaviours differ from what one would expect elsewhere, including NULL handling, which is … Continue reading jOOQ 3.20 released with ClickHouse, Databricks, and much more DuckDB support, new modules, Oracle type hierarchies, more spatial support, decfloat and synonym support, hidden columns, Scala 3, Kotlin 2, and much more →",
  "author": "lukaseder",
  "published": "Thu, 20 Feb 2025 10:27:54 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "jooq-development",
    "clickhouse",
    "databricks",
    "decfloat",
    "dirty tracking",
    "dml join",
    "duckdb",
    "hidden columns",
    "jdk 21",
    "jooq",
    "jooq 3.20",
    "kotlin 2",
    "MERGE",
    "oracle plsql types",
    "scala 3",
    "spatial"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 7167,
  "excerpt": "New dialects: jOOQ 3.20 ships with 2 new experimental dialects: ClickHouse in all editions, including the jOOQ Open Source Edition Databricks in the jOOQ Enterprise Edition ClickHouse is a fast-mov…",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "New dialects: jOOQ 3.20 ships with 2 new experimental dialects: ClickHouse in all editions, including the jOOQ Open Source Edition Databricks in the jOOQ Enterprise Edition ClickHouse is a fast-moving SQL dialect with a historic vendor-specific syntax that is gradually migrated to a more standards compliant alternative, which is why our support is still experimental. A lot of behaviours differ from what one would expect elsewhere, including NULL handling, which is very different from standard SQL. Future jOOQ versions will continue deepening this integration. Databricks offers a very promising SQL dialect with a lot of functionality, which we’re going to cover in full with the next version jOOQ 3.21. An initial version of the dialect is shipped already in 3.20 as an experimental dialect. 3.20 will continue to receive bug fixes and Databricks improvements as we work with early adopting customers. DuckDB improvements We continue supporting various DuckDB SQL features, including: ARRAY, ROW, and STRUCT support MULTISET support JSON support Date time arithmetic Sequences More DDL support More DML support Spatial support And much more In order to better integrate with Reactor, probably the most popular reactive streams API on the JVM, we’ve added a new jOOQ-reactor-extensions module, which offers an implementation of the new SubscriberProvider SPI, a new SPI in the Configuration that helps make jOOQ’s R2DBC specific internals Reactor Context aware. The jOOQ-beans-extensions module now hosts our support for the @ConstructorProperties annotation in the DefaultRecordMapper, an annotation that is located in the JDK’s jdk.desktop module. This allows us to move the heavy module dependency out of jOOQ’s core library, which is useful for those applications that want to omit shipping the complete JDK and keep low footprints. The jOOQ-jpa-extensions module now hosts our support for the various JPA annotations like @Column, @Table, also in the DefaultRecordMapper, effectively removing the optional jakarta.persistence dependency from the core library, as well as offering alternative implementations of annotation based mapping. Support for Oracle type hierarchies Oracle is the most sophisticated ORDBMS implementation, with a rich set of object-oriented PL/SQL language features. jOOQ 3.20 finally adds support for PL/SQL OBJECT type hierarchies both in our code generator as well as in the runtime library, making jOOQ an even strong match for your PL/SQL language usage This is a commercial only feature. Better spatial support A lot of additional spatial functions have been added to jOOQ’s spatial support. These efforts also include many improvements to the DuckDB and Oracle spatial implementations. For more information, refer to: https://www.jooq.org/doc/dev/manual/sql-building/column-expressions/spatial-functions/ https://www.jooq.org/doc/dev/manual/sql-building/conditional-expressions/spatial-predicates/ This is a commercial only feature. DECFLOAT support A variety of dialects offer an additional decimal floating point data type, DECFLOAT, in addition to the binary floating point types REAL (32 bit), DOUBLE PRECISION (64 bit), and FLOAT (variable sized). Our new org.jooq.Decfloat type allows for capturing these types in our code generator and runtime. Synonym support A variety of dialects support the concept of a SYNONYM or ALIAS where an alternative name can be given to any object type. jOOQ 3.20 supports these synonyms both in the code generator as well as the DDL API. Future jOOQ versions may continue to improve synonym support, e.g. by generating type aliases in Kotlin or Scala. For more information, refer to: https://www.jooq.org/doc/dev/manual/code-generation/codegen-synonyms/ This is a commercial only feature. Hidden columns Just like a few dialects support hidden or invisible columns, this is now possible in jOOQ as well, at the client side. Hiding columns effectively removes them from: Asterisk expansions selectFrom() and similar calls Generated records, POJOs, and interfaces At the same time, the columns are still available for explicit references. This feature can be useful for schema evolution purposes, where data of deprecated columns is kept around for historic purposes. It works well together with the column deprecation feature of the code generator: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-comments/ For more information about hidden columns, refer to: https://www.jooq.org/doc/dev/manual/sql-building/column-expressions/hidden-columns/ This is a commercial only feature. Kotlin 2 and Scala 3 support Starting from jOOQ 3.20, we formally support both Kotlin 2 and Scala 3 and fully integration tests both the core libraries as well as the code generator and extension libraries on these language versions. For Scala support, please also consider our support matrix: https://www.jooq.org/download/support-matrix-scala JDK baselines The jOOQ Open Source Edition 3.20 increases its baseline to JDK 21. Support for older JDKs is available int he commercial distributions, see: https://www.jooq.org/download/support-matrix-jdk Record dirty tracking jOOQ has long supported record dirty tracking in its UpdatableRecord allowing for a simple way of performing CRUD. With jOOQ 3.20, it will be possible for users to override the default behaviour of the dirty flag from a “touched” semantics to a “modified” semantics, effectively sending only actual modifications to the database. For more information, refer to: https://www.jooq.org/doc/dev/manual/sql-building/dsl-context/custom-settings/settings-dirty-tracking/ DML join improvements jOOQ 3.20 now supports the useful DELETE .. USING and UPDATE .. FROM syntaxes on all RDBMS through a new set of SQL transformations that allow for these vendor specific JOIN syntaxes to be used in DML statements even in the absence of MERGE statement support. At the same time, MERGE itself also received an upgrade, including: BY SOURCE and BY TARGET support Multiple WHEN NOT MATCHED AND .. clause support For more information, refer to: https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/update-statement/update-from/ https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/delete-statement/delete-using/ https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/merge-statement/ Code generation improvements A lot of problems related to the generation of interfaces, immutablePojos, UDTs, etc. have been addressed in this release, making generated code more sound for various configuration edge cases where these features are combined. Manual search We have (at last!) added in-page search functionality to our user manual, so users can better find information on our website. More improvements For information about the many other minor improvements, bug fixes, etc., please refer to the release notes.",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12884\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003ch2\u003eNew dialects:\u003c/h2\u003e\n\n\n\n\u003cp\u003ejOOQ 3.20 ships with 2 new experimental dialects:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eClickHouse in all editions, including the jOOQ Open Source Edition\u003c/li\u003e\n\n\n\n\u003cli\u003eDatabricks in the jOOQ Enterprise Edition\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eClickHouse is a fast-moving SQL dialect with a historic vendor-specific syntax that is gradually migrated to a more standards compliant alternative, which is why our support is still experimental. A lot of behaviours differ from what one would expect elsewhere, including NULL handling, which is very different from standard SQL. Future jOOQ versions will continue deepening this integration. \u003c/p\u003e\n\n\n\n\u003cp\u003eDatabricks offers a very promising SQL dialect with a lot of functionality, which we’re going to cover in full with the next version jOOQ 3.21. An initial version of the dialect is shipped already in 3.20 as an experimental dialect. 3.20 will continue to receive bug fixes and Databricks improvements as we work with early adopting customers.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDuckDB improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe continue supporting various DuckDB SQL features, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eARRAY, ROW, and STRUCT support\u003c/li\u003e\n\n\n\n\u003cli\u003eMULTISET support\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON support\u003c/li\u003e\n\n\n\n\u003cli\u003eDate time arithmetic\u003c/li\u003e\n\n\n\n\u003cli\u003eSequences\u003c/li\u003e\n\n\n\n\u003cli\u003eMore DDL support\u003c/li\u003e\n\n\n\n\u003cli\u003eMore DML support\u003c/li\u003e\n\n\n\n\u003cli\u003eSpatial support\u003c/li\u003e\n\n\n\n\u003cli\u003eAnd much more\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn order to better integrate with Reactor, probably the most popular reactive streams API on the JVM, we’ve added a new jOOQ-reactor-extensions module, which offers an implementation of the new \u003ccode\u003eSubscriberProvider\u003c/code\u003e SPI, a new SPI in the Configuration that helps make jOOQ’s R2DBC specific internals Reactor Context aware.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe jOOQ-beans-extensions module now hosts our support for the \u003ccode\u003e@ConstructorProperties\u003c/code\u003e annotation in the \u003ccode\u003eDefaultRecordMapper\u003c/code\u003e, an annotation that is located in the JDK’s \u003ccode\u003ejdk.desktop\u003c/code\u003e module. This allows us to move the heavy module dependency out of jOOQ’s core library, which is useful for those applications that want to omit shipping the complete JDK and keep low footprints. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe jOOQ-jpa-extensions module now hosts our support for the various JPA annotations like \u003ccode\u003e@Column\u003c/code\u003e, \u003ccode\u003e@Table\u003c/code\u003e, also in the \u003ccode\u003eDefaultRecordMapper\u003c/code\u003e, effectively removing the optional \u003ccode\u003ejakarta.persistence\u003c/code\u003e dependency from the core library, as well as offering alternative implementations of annotation based mapping.\u003c/p\u003e\n\n\n\n\u003ch2\u003eSupport for Oracle type hierarchies\u003c/h2\u003e\n\n\n\n\u003cp\u003eOracle is the most sophisticated ORDBMS implementation, with a rich set of object-oriented PL/SQL language features. jOOQ 3.20 finally adds support for PL/SQL OBJECT type hierarchies both in our code generator as well as in the runtime library, making jOOQ an even strong match for your PL/SQL language usage \u003c/p\u003e\n\n\n\n\u003cp\u003eThis is a commercial only feature.\u003c/p\u003e\n\n\n\n\u003ch2\u003eBetter spatial support\u003c/h2\u003e\n\n\n\n\u003cp\u003eA lot of additional spatial functions have been added to jOOQ’s spatial support. These efforts also include many improvements to the DuckDB and Oracle spatial implementations.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor more information, refer to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/dev/manual/sql-building/column-expressions/spatial-functions/\"\u003ehttps://www.jooq.org/doc/dev/manual/sql-building/column-expressions/spatial-functions/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/dev/manual/sql-building/conditional-expressions/spatial-predicates/\"\u003ehttps://www.jooq.org/doc/dev/manual/sql-building/conditional-expressions/spatial-predicates/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is a commercial only feature.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDECFLOAT support\u003c/h2\u003e\n\n\n\n\u003cp\u003eA variety of dialects offer an additional decimal floating point data type, \u003ccode\u003eDECFLOAT\u003c/code\u003e, in addition to the binary floating point types \u003ccode\u003eREAL\u003c/code\u003e (32 bit), \u003ccode\u003eDOUBLE PRECISION\u003c/code\u003e (64 bit), and \u003ccode\u003eFLOAT\u003c/code\u003e (variable sized). Our new \u003ccode\u003eorg.jooq.Decfloat\u003c/code\u003e type allows for capturing these types in our code generator and runtime.\u003c/p\u003e\n\n\n\n\u003ch2\u003eSynonym support\u003c/h2\u003e\n\n\n\n\u003cp\u003eA variety of dialects support the concept of a \u003ccode\u003eSYNONYM\u003c/code\u003e or \u003ccode\u003eALIAS\u003c/code\u003e where an alternative name can be given to any object type.\u003c/p\u003e\n\n\n\n\u003cp\u003ejOOQ 3.20 supports these synonyms both in the code generator as well as the DDL API. Future jOOQ versions may continue to improve synonym support, e.g. by generating type aliases in Kotlin or Scala.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor more information, refer to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/dev/manual/code-generation/codegen-synonyms/\"\u003ehttps://www.jooq.org/doc/dev/manual/code-generation/codegen-synonyms/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is a commercial only feature.\u003c/p\u003e\n\n\n\n\u003ch2\u003eHidden columns\u003c/h2\u003e\n\n\n\n\u003cp\u003eJust like a few dialects support hidden or invisible columns, this is now possible in jOOQ as well, at the client side. Hiding columns effectively removes them from:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAsterisk expansions\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eselectFrom()\u003c/code\u003e and similar calls\u003c/li\u003e\n\n\n\n\u003cli\u003eGenerated records, POJOs, and interfaces\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAt the same time, the columns are still available for explicit references. This feature can be useful for schema evolution purposes, where data of deprecated columns is kept around for historic purposes. It works well together with the column deprecation feature of the code generator:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-comments/\"\u003ehttps://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-comments/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFor more information about hidden columns, refer to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/dev/manual/sql-building/column-expressions/hidden-columns/\"\u003ehttps://www.jooq.org/doc/dev/manual/sql-building/column-expressions/hidden-columns/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is a commercial only feature.\u003c/p\u003e\n\n\n\n\u003ch2\u003eKotlin 2 and Scala 3 support\u003c/h2\u003e\n\n\n\n\u003cp\u003eStarting from jOOQ 3.20, we formally support both Kotlin 2 and Scala 3 and fully integration tests both the core libraries as well as the code generator and extension libraries on these language versions. For Scala support, please also consider our support matrix:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/download/support-matrix-scala\"\u003ehttps://www.jooq.org/download/support-matrix-scala\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eJDK baselines\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe jOOQ Open Source Edition 3.20 increases its baseline to JDK 21. Support for older JDKs is available int he commercial distributions, see:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/download/support-matrix-jdk\"\u003ehttps://www.jooq.org/download/support-matrix-jdk\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eRecord dirty tracking\u003c/h2\u003e\n\n\n\n\u003cp\u003ejOOQ has long supported record dirty tracking in its \u003ccode\u003eUpdatableRecord\u003c/code\u003e allowing for a simple way of performing CRUD. With jOOQ 3.20, it will be possible for users to override the default behaviour of the dirty flag from a “touched” semantics to a “modified” semantics, effectively sending only actual modifications to the database.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor more information, refer to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/dev/manual/sql-building/dsl-context/custom-settings/settings-dirty-tracking/\"\u003ehttps://www.jooq.org/doc/dev/manual/sql-building/dsl-context/custom-settings/settings-dirty-tracking/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eDML join improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003ejOOQ 3.20 now supports the useful \u003ccode\u003eDELETE .. USING\u003c/code\u003e and \u003ccode\u003eUPDATE .. FROM\u003c/code\u003e syntaxes on all RDBMS through a new set of SQL transformations that allow for these vendor specific JOIN syntaxes to be used in DML statements even in the absence of \u003ccode\u003eMERGE\u003c/code\u003e statement support.\u003c/p\u003e\n\n\n\n\u003cp\u003eAt the same time, \u003ccode\u003eMERGE\u003c/code\u003e itself also received an upgrade, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eBY SOURCE\u003c/code\u003e and \u003ccode\u003eBY TARGET\u003c/code\u003e support\u003c/li\u003e\n\n\n\n\u003cli\u003eMultiple \u003ccode\u003eWHEN NOT MATCHED AND ..\u003c/code\u003e clause support\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFor more information, refer to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/update-statement/update-from/\"\u003ehttps://www.jooq.org/doc/latest/manual/sql-building/sql-statements/update-statement/update-from/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/delete-statement/delete-using/\"\u003ehttps://www.jooq.org/doc/latest/manual/sql-building/sql-statements/delete-statement/delete-using/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/latest/manual/sql-building/sql-statements/merge-statement/\"\u003ehttps://www.jooq.org/doc/latest/manual/sql-building/sql-statements/merge-statement/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eCode generation improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003eA lot of problems related to the generation of interfaces, immutablePojos, UDTs, etc. have been addressed in this release, making generated code more sound for various configuration edge cases where these features are combined.\u003c/p\u003e\n\n\n\n\u003ch2\u003eManual search\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe have (at last!) added in-page search functionality to our user manual, so users can better find information on our website.\u003c/p\u003e\n\n\n\n\u003ch2\u003eMore improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003eFor information about the many other minor improvements, bug fixes, etc., please refer to the \u003ca href=\"https://www.jooq.org/notes\" data-type=\"link\" data-id=\"https://www.jooq.org/notes\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-02-20T10:27:54Z",
  "modifiedTime": "2025-02-20T10:27:54Z"
}
