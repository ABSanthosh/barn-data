{
  "id": "85b395c2-dc13-4ae1-8348-a06e6ba234b7",
  "title": "Introducing Pyrefly: A new type checker and IDE experience for Python",
  "link": "https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/",
  "description": "Today we are announcing an alpha version of Pyrefly, an open source Python type checker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage [...] Read More... The post Introducing Pyrefly: A new type checker and IDE experience for Python appeared first on Engineering at Meta.",
  "author": "",
  "published": "Thu, 15 May 2025 18:30:08 +0000",
  "source": "https://engineering.fb.com/feed/",
  "categories": [
    "DevInfra",
    "Open Source"
  ],
  "byline": "",
  "length": 5512,
  "excerpt": "Today we are announcing an alpha version of Pyrefly, an open source Python type checker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type ‚Ä¶",
  "siteName": "Engineering at Meta",
  "favicon": "",
  "text": "Today we are announcing an alpha version of Pyrefly, an open source Python type checker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage to give you flexibility in how you incorporate it into your workflow.¬† The open source community is the backbone of the Python language. We are eager to collaborate on Pyrefly with the community and improve Python‚Äôs type system and the many libraries that we all rely on.¬†¬† Get started Ready to dive in? The official Pyrefly website has all the details, but to quickly get started: Install Pyrefly on the command-line: pip install pyrefly. Migrate your existing type checker configuration to Pyrefly. Enhance Your IDE: Download the Pyrefly extension for VSCode and enjoy a lightning fast IDE experience from starter projects to monorepos. Leave feedback for us on GitHub. Why we built Pyrefly Back in 2017, we embarked on a mission to create a type checker that could handle Instagram‚Äôs massive codebase of typed Python. This mission led to the birth of the Pyre type checker, inspired by the robust designs of Hack and Flow, and written in OCaml to deliver scalable performance.¬† Over the years, Pyre served us well, but as the type system evolved and the need for typechecking to drive responsive IDE emerged, it was clear that we needed to take a new approach. We explored alternate solutions and leveraged community tools like Pyright for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly.¬† The principles behind Pyrefly Today, we‚Äôre excited to unveil Pyrefly, a project we‚Äôve been developing openly on GitHub. We invite you to explore our work and try it out on your own project. While a project like Pyrefly is the sum of thousands of technical choices, a few notable principles we‚Äôve followed are: Performance We want to shift checks that used to happen later on CI to happening on every single keystroke. That requires checking code at speed (on large codebases we can check 1.8 million lines of code per second!) and careful thought to incrementality and updates. Pyrefly is implemented in Rust and designed for high performance on codebases of all sizes. IDE first We want the IDE and command line to share a consistent view of the world, which means crafting abstractions that capture the differences without incurring unnecessary costs. Designing these abstractions from the beginning is much easier than retrofitting them, which we tried with Pyre. Inference Some Python programs are typed, but many aren‚Äôt. We want users to benefit from types even if they haven‚Äôt annotated their code ‚Äì so automatically infer types for returns and local variables and display them in the IDE. What‚Äôs more, in the IDE you can even double click to insert these inferred types if you think that would make the program better. Open source Python is open source, and hugely popular. The Python typing specification is open source, which made Pyrefly vastly easier to develop. Many of the libraries Meta contributes to are open source,( e.g., PyTorch). Pyrefly is also open source, available on GitHub under the MIT license, and we encourage pull requests and issue reports. We also have a Discord channel for more free flowing discussions. We would love to build a community around Pyrefly. The future of Pyrefly We will work with the Python community to drive the language forward and improve the developer experience. Since the beginning of Pyre, we open sourced our code and contributed a number of PEPs alongside the community of type checker maintainers. We feel we can do more with Pyrefly to help Python developers leverage the benefits of types for developers, library authors, and folks just learning the language.¬† Meta has leveraged types in dynamic languages from the beginning and knows the significant benefits it brings to developer productivity and security. We plan to share more of our learnings and tooling with blogs, better types in the ecosystem and language enhancements.¬† Today we‚Äôre releasing Pyrefly as an alpha. At the same time, we‚Äôre busy burning down the long-tail of bugs and features aiming to remove the alpha label this Summer. Your feedback is invaluable to get there, so please give it a try and report your bugs or things you think can be improved. Even if Pyrefly isn‚Äôt right for your project, we would love to hear how you use types and what you would like to see improved in your editor. Join us on the journey as we help illuminate your bugs with Pyrefly. Happy coding! üêç‚ú® Hear more about Pyrefly¬† Check out the episode of the Meta Tech Podcast where several team members share their experience developing Pyrefly and technical details for how it works. We also just talked at PyCon US about high-performance Python through faster type checking and free threaded execution. To learn more about Meta Open Source, visit our open source site, subscribe to our YouTube channel, or follow us on Facebook, Threads, X, and LinkedIn. Acknowledgements¬† Pyrefly was created By Meta‚Äôs Python Language Tooling Team: Jia Chen, Rebecca Chen, Sam Goldman, David Luo, Kyle Into, Zeina Migeed, Neil Mitchell, Maggie Moss, Conner Nilsen, Aaron Pollack, Teddy Sudol, Steven Troxler, Lucian Wischik, Danny Yang, and Sam Zhou.",
  "image": "https://engineering.fb.com/wp-content/uploads/2025/05/Pyrefly-Feature-Image.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003cspan\u003eToday we are announcing an alpha version of \u003c/span\u003e\u003ca href=\"https://pyrefly.org/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePyrefly\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, an open source Python type checker and IDE extension crafted in \u003ca href=\"https://engineering.fb.com/2021/04/29/developer-tools/rust/\" target=\"_blank\" rel=\"noopener\"\u003eRust\u003c/a\u003e. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage to give you flexibility in how you incorporate it into your workflow.¬†\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThe open source community is the backbone of the Python language. We are eager to collaborate on Pyrefly with the community and improve Python‚Äôs type system and the many libraries that we all rely on.¬†¬†\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eGet started\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eReady to dive in? \u003c/span\u003e\u003ca href=\"https://pyrefly.org\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eThe official Pyrefly website\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e has all the details, but to quickly get started:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003ca href=\"https://pyrefly.org/en/docs/installation/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eInstall\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e Pyrefly on the command-line: \u003c/span\u003e\u003cspan\u003epip install pyrefly\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003ca href=\"https://pyrefly.org/en/docs/migrating-to-pyrefly/\" target=\"_blank\" rel=\"noopener\"\u003eMigrate your existing type checker configuration to Pyrefly\u003c/a\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eEnhance Your IDE: Download the \u003c/span\u003e\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePyrefly extension for VSCode\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and enjoy a lightning fast IDE experience from starter projects to monorepos.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eLeave feedback for us on \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/issues\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eGitHub\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e\u003cspan\u003eWhy we built Pyrefly\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eBack in 2017, we embarked on a mission to create a type checker that could handle \u003c/span\u003e\u003ca href=\"https://instagram-engineering.com/web-service-efficiency-at-instagram-with-python-4976d078e366\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eInstagram‚Äôs massive codebase\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e of typed Python. This mission led to the birth of the \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyre-check\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePyre\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e type checker, inspired by the robust designs of \u003c/span\u003e\u003ca href=\"https://hacklang.org/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eHack\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://flow.org/\"\u003e\u003cspan\u003eFlow\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, and written in OCaml to deliver scalable performance.¬†\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eOver the years, Pyre served us well, but as the type system evolved and the need for typechecking to drive responsive IDE emerged, it was clear that we needed to take a new approach. We explored alternate solutions and leveraged community tools like \u003c/span\u003e\u003ca href=\"https://github.com/Microsoft/pyright\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePyright\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly.¬†\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eThe principles behind Pyrefly\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eToday, we‚Äôre excited to unveil Pyrefly, a project \u003ca href=\"https://github.com/facebook/pyrefly\" target=\"_blank\" rel=\"noopener\"\u003ewe‚Äôve been developing openly on \u003c/a\u003e\u003c/span\u003e\u003cspan\u003eGitHub\u003c/span\u003e\u003cspan\u003e. We invite you to explore our work and try it out on your own project. While a project like Pyrefly is the sum of thousands of technical choices, a few notable principles we‚Äôve followed are:\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003ePerformance\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eWe want to shift checks that used to happen later on CI to happening on every single keystroke. That requires checking code at speed (on large codebases we can check 1.8 million lines of code per second!) and careful thought to incrementality and updates. Pyrefly is implemented in Rust and designed for high performance on codebases of all sizes.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003eIDE first\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eWe want the IDE and command line to share a consistent view of the world, which means crafting abstractions that capture the differences without incurring unnecessary costs. Designing these abstractions from the beginning is much easier than retrofitting them, which we tried with Pyre.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003eInference\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eSome \u003c/span\u003e\u003ca href=\"https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePython programs are typed\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, but many aren‚Äôt. We want users to benefit from types even if they haven‚Äôt annotated their code ‚Äì so automatically infer types for returns and local variables and display them in the IDE. What‚Äôs more, in the IDE you can even double click to insert these inferred types if you think that would make the program better.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003eOpen source\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003ePython is open source, and hugely popular. The \u003c/span\u003e\u003ca href=\"https://typing.python.org/en/latest/spec/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePython typing specification\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e is open source, which made Pyrefly vastly easier to develop. Many of the libraries Meta contributes to are open source,( e.g., \u003c/span\u003e\u003ca href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePyTorch\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e).\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003ePyrefly is also open source, \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eavailable on GitHub\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e under the \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eMIT license\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, and we encourage \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/pulls\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003epull requests\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/issues\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eissue reports\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e. We also have a \u003c/span\u003e\u003ca href=\"https://discord.gg/Cf7mFQtW7W\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eDiscord channel\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e for more free flowing discussions. We would love to build a community around Pyrefly.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eThe future of Pyrefly\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eWe will work with the Python community to drive the language forward and improve the developer experience. Since the beginning of Pyre, we open sourced our code and contributed a number of PEPs alongside the community of type checker maintainers. We feel we can do more with Pyrefly to help Python developers leverage the benefits of types for developers, library authors, and folks just learning the language.¬†\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eMeta has leveraged types in dynamic languages from the beginning and knows the significant benefits it brings to developer productivity and security. We plan to share more of our learnings and tooling with \u003c/span\u003e\u003ca href=\"https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eblogs\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, better types in the ecosystem and language enhancements.¬†\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eToday we‚Äôre releasing Pyrefly as an alpha. At the same time, we‚Äôre busy burning down the long-tail of bugs and features aiming to remove the alpha label this Summer. Your feedback is invaluable to get there, so please give it a try and \u003c/span\u003e\u003ca href=\"https://github.com/facebook/pyrefly/issues\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ereport your bugs\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e or things you think can be improved. Even if Pyrefly isn‚Äôt right for your project, we would love to hear how you use types and what you would like to see improved in your editor.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eJoin us on the journey as we help illuminate your bugs with Pyrefly. Happy coding! üêç‚ú®\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eHear more about Pyrefly¬†\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eCheck out the \u003ca href=\"https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust\" target=\"_blank\" rel=\"noopener\"\u003eepisode of the Meta Tech Podcast\u003c/a\u003e where several team members share their experience developing Pyrefly and technical details for how it works. We also just \u003c/span\u003e\u003ca href=\"https://us.pycon.org/2025/schedule/presentation/118/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003etalked at PyCon US\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e about high-performance Python through faster type checking and free threaded execution.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eTo learn more about Meta Open Source, visit our \u003c/span\u003e\u003ca href=\"https://opensource.fb.com/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eopen source site\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, subscribe to our \u003c/span\u003e\u003ca href=\"https://www.youtube.com/channel/UCCQY962PmHabTjaHv2wJzfQ\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eYouTube channel\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, or follow us on \u003c/span\u003e\u003ca href=\"https://www.facebook.com/MetaOpenSource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eFacebook\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href=\"https://www.threads.net/@metaopensource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eThreads\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href=\"https://x.com/MetaOpenSource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eX\u003c/span\u003e\u003c/a\u003e,\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://www.linkedin.com/showcase/meta-open-source?fbclid=IwZXh0bgNhZW0CMTEAAR2fEOJNb7zOi8rJeRvQry5sRxARpdL3OpS4sYLdC1_npkEy60gBS1ynXwQ_aem_mJUK6jEUApFTW75Emhtpqw\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eLinkedIn\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eAcknowledgements¬†\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ci\u003e\u003cspan\u003ePyrefly was created By Meta‚Äôs Python Language Tooling Team: Jia Chen, Rebecca Chen, Sam Goldman, David Luo, Kyle Into, Zeina Migeed, Neil Mitchell, Maggie Moss, Conner Nilsen, Aaron Pollack, Teddy Sudol, Steven Troxler, Lucian Wischik, Danny Yang, and Sam Zhou.\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\n\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-05-15T18:30:08Z",
  "modifiedTime": "2025-05-16T15:19:23Z"
}
