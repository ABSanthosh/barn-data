{
  "id": "9d46187f-c50a-43ef-a1a8-844f2aa5abdb",
  "title": "Qodana Leadership Series",
  "link": "https://blog.jetbrains.com/qodana/2025/06/qodana-leadership-series-minaev/",
  "description": "Progress Or Perfection? Staying Quality-Focused as a Team Under Pressure Everyone from growth-mindset gurus to Agile die-hards talk about ways in which we can iterate as developers. Release an MVP, build as you go, “minimize waste, maximize value” to stay lean, and do it all while prioritizing user feedback.  But as much merit as these […]",
  "author": "Kerry Beetge",
  "published": "Mon, 30 Jun 2025 15:47:16 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "qodana",
    "webstorm"
  ],
  "byline": "Kerry Beetge",
  "length": 12535,
  "excerpt": "Join Vladislav Minaev in this installment of the Qodana Leadership series to find out how he deals with creating the balance between progress and perfection.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams Qodana Leadership Series Progress Or Perfection? Staying Quality-Focused as a Team Under Pressure Qodana Leadership Series: An interview with Vladislav Minaev and Konstantin Ulitin. Everyone from growth-mindset gurus to Agile die-hards talk about ways in which we can iterate as developers. Release an MVP, build as you go, “minimize waste, maximize value” to stay lean, and do it all while prioritizing user feedback.  But as much merit as these principles have, what is the biggest price we pay for doing things quickly and in stages? Some research suggests code quality and maintainability in the long term suffers when teams deliver new iterations too quickly – a sentiment that’s echoed by software development author Martin Fowler.  So, with this in mind, what does it take to find balance in a team that maintains one of the most popular IDEs in the world? We turned to Vlad (WebStorm Team Lead) and Konstantin (WebStorm Tech Lead) for some answers. In your experience, what’s the biggest obstacle to defining ‘code quality’ within a development team? How do you tailor this definition to the JavaScript community specifically? Vlad: Code quality is already subjective, and different devs have different backgrounds and personal preferences. Definitions of “clean” and “quality” can vary, especially from one ecosystem to another. In full-stack projects, where JavaScript parts are placed alongside the backend, developers have the ability to change code outside of their primary ecosystem. This can create friction, particularly when developers from the backend world start to engage in areas they’re less familiar with. This applies to frameworks as well.  How have you seen subjective interpretations of ‘good code’ lead to conflict or inefficiencies? One particular example is when code reviews turn heated because reviewers have different opinions on naming, architectural choices, etc. Feedback loops can sometimes become more about personal preference. This can take time and affect output and maintainability. Can you share an example of a time when different team members had significantly different ideas about what constituted ‘high-quality code’ and how it impacted the project? I’ve noticed that it’s not necessarily just about code coverage – it’s a broader issue. In many cases, it comes down to code reviews and the different approaches to development. Each approach has its own strengths. One is very structured, involving detailed planning, feature design, and documentation. It’s a more analytic method.  The other is highly iterative, practical, and focused on implementing ideas quickly and adjusting on the fly. Rather than doing extensive upfront analysis, this approach favors immediate action. There’s no right or wrong here – both can work well depending on the context. Sometimes, the structured approach pays off in the long run, especially when working with complex codebases that require collaboration between multiple developers. In these situations, a careful, well-documented process can be really beneficial. On the other hand, when it comes to building user-facing functionality, the choice between a documented versus agile process often depends on business needs. For example, in an MVP or startup environment, the main goal is usually to deliver results quickly – especially when deadlines are tight or events are coming up. In these cases, speed can sometimes outweigh quality. That said, developers are often tightly aligned with business needs, and there are plenty of cases where skilled engineers, committed to code quality, find their priorities clashing with business demands. It really depends on the nature of the project. If you’re working on something long-term that will need ongoing support and evolution, enforcing quality standards is definitely valuable. But if you expect to frequently revisit or rework the code, strict standards might not always be necessary. Vlad and Konstantin are from the WebStorm team – a JavaScript and TypeScript IDE by JetBrains. How do you handle situations where strong opinions or ‘ego’ get in the way of establishing consensus on code quality standards?I can’t say that I have a silver bullet here, because as a manager, you can’t simply “fix people.”  The smarter approach is to try and harness their strengths. For example, if someone has a strong opinion, it might be helpful to assign them a specific part of the system or a dedicated project. That way, you’re matching their personality to the project. But sometimes, tension is unavoidable. What we can do is try to spark discussions and facilitate open dialogue. We can also collaborate on common practices, like code reviews.For instance, we reviewed our code review practices with the WebStorm team. Konstantin can provide more technical details on that, but it was one of the artifacts. The discussion was intense. It’s not simple. In real-life scenarios, you might have a strong tech lead who can enforce a clear vision, and if the rest of the team is aligned, it’s easy to agree on strict rules. But that’s not always the case. In larger teams, you’ll often have several high-level, passionate developers who each have strong opinions, and those differences can lead to conflict. Connecting those people is a really tough process. Konstantin: In addition to what Vlad said, I think it’s important for developers to have some freedom in the specific areas of code they’re responsible for. Common code quality standards are needed because everyone is working on the same codebase and reading their colleagues’ code, but also it’s important to have a feeling of ownership. As everyone works on the same codebase together, they naturally find common ground regarding standards. Have you ever had to mediate a conflict related to code quality standards? If so, what approach did you take? Vlad: It’s crucial as a team leader to provide a safe and comfortable environment for people to share their opinions, but sometimes these discussions can lead to tense dialogues, and we have definitely experienced this. As a tech leader, you should default to the technical agreements in your team rather than focusing on personal preference and sometimes speak to your team members in private. For example, you can have a separate conversation and use phrases like “I really value your contribution” and “Thanks for a constructive and productive conversation” – sincerely, of course.  A good example of this is applying overly strict code coverage and linting rules directly in the editor, which can be counterproductive. Pursuing exact code coverage numbers is often unnecessary and ineffective. I doubt there are exact numbers, as they vary related to the nature of the project. In some cases it leads to really weird constructions to test pieces of code, and people struggle and spend a lot of time doing that instead of moving forward with features. Being flexible on code coverage metrics is good because restrictions like 80 or 90 percent code coverage  might not work well, and things like this need to be discussed.  I guess that’s also very tough. So one solution might be automated checks? In our case, the IntelliJ department says you can’t push your changes into master if they don’t pass zero tolerance inspections (provided by Qodana), which are Java inspections followed by a comprehensive suite of tests. So yes, that can be one solution. How important is documenting code quality standards, and what’s the best way to make them accessible and understandable to the entire team? It depends on the project. If you’re working together with one developer, it’s easy enough to just communicate verbally. But other situations might call for the opposite approach. Imagine a huge open-source project with a bunch of external contributors. In that case, it’s crucial to create some sort of contribution guide and to access project resources.  How do you ensure that code quality standards are regularly reviewed and updated to reflect evolving project needs and best practices? In practice, code quality standards are often revisited reactively, typically after an issue arises. It’s not something most teams schedule weekly or even annually. For open source projects, this often happens after the first few pull requests, when contributors submit code that doesn’t meet unstated expectations. If quality checks aren’t automated through CI tools at that point, it’s a clear signal that they need to be introduced. If you anticipate a project will be long-running, it’s best to define and implement standards from the start. Experience plays a big role here. You start to recognize what’s necessary early on. If I were to start a new project, especially in the open-source space, I’d make a point to study similar projects. I’d look at how their CI pipelines are structured, what tools they use (like Docker for isolation), and what quality gates they’ve implemented. That research often inspires improvements I bring into my own projects. It’s a continuous learning process driven both by necessity and by observing best practices in the wider development community. How do you tailor code quality standards to the specific context of a project or tech stack? The structure and architecture of a project play a significant role in shaping code quality standards. For example, in large monorepos or distributed systems composed of multiple microservices across separate repositories, integration testing often becomes more valuable than unit testing alone. You need to align your testing strategy and broader quality standards with the scale, structure, and operational requirements of the system. What works for a small library may not make sense for a large-scale, service-oriented architecture. Tailoring standards means considering not just the tech stack but also how the code fits into the overall architecture and deployment model. What code quality metrics do you find most valuable, and why? While metrics like cyclomatic complexity, maintainability index, and code coverage have their place, it’s important not to over-rely on any single one, especially code coverage. High coverage doesn’t always mean high-quality tests. Static analysis tools are incredibly valuable because they catch issues early, often before code is even run. Even for small or personal projects, setting up basic static checks in a CI pipeline is worth the effort. Platforms like GitHub and GitLab make this easy, and these checks help enforce a consistent baseline of quality, especially when you’re likely to forget to run them manually. In short, I prioritize metrics that contribute to early detection of issues and long-term maintainability, rather than just hitting arbitrary numerical targets. Qodana can help you prioritize code quality while you iterate Thanks for reading this installment of the Qodana Leadership Series. Special thanks to Vladimir, Konstantin and the WebStorm team for their participation. Have questions? Drop them in the comment section below. You can also read another installment for more insider information on how today’s team leads are tackling challenges.If you’re looking to iterate without compromising on the quality of your products, try Qodana.  Try Qodana Next up Check out Leadership Strategies for Finding Quality Focused Developers. Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/06/QD-social-BlogSocialShare-1280x720-2x-2.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                                        \u003ch2 id=\"major-updates\"\u003eQodana Leadership Series\u003c/h2\u003e                    \n                    \n\u003ch2\u003eProgress Or Perfection? Staying Quality-Focused as a Team Under Pressure\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/06/QD-social-BlogSocialShare-1280x720-2x.png\" alt=\"Qodana and Webstorm\"/\u003e\u003cfigcaption\u003eQodana Leadership Series: An interview with Vladislav Minaev and Konstantin Ulitin.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEveryone from growth-mindset gurus to Agile die-hards talk about ways in which we can iterate as developers. Release an MVP, build as you go, “minimize waste, maximize value” to stay lean, and do it all while prioritizing user feedback. \u003c/p\u003e\n\n\n\n\u003cp\u003eBut as much merit as these principles have, what is the biggest price we pay for doing things quickly and in stages? Some research suggests code quality and maintainability in the long term suffers when teams deliver new iterations too quickly – a sentiment that’s \u003ca href=\"https://martinfowler.com/articles/is-quality-worth-cost.html\" target=\"_blank\" rel=\"noopener\"\u003eechoed by software development author Martin Fowler\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eSo, with this in mind, what does it take to find balance in a team that maintains one of the most popular IDEs in the world? We turned to Vlad (WebStorm Team Lead) and Konstantin (WebStorm Tech Lead) for some answers.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eIn your experience, what’s the biggest obstacle to defining ‘code quality’ within a development team? How do you tailor this definition to the JavaScript community specifically?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eVlad:\u003c/strong\u003e Code quality is already subjective, and different devs have different backgrounds and personal preferences. Definitions of “clean” and “quality” can vary, especially from one ecosystem to another. \u003c/p\u003e\u003cp\u003eIn full-stack projects, where JavaScript parts are placed alongside the backend, developers have the ability to change code outside of their primary ecosystem. This can create friction, particularly when developers from the backend world start to engage in areas they’re less familiar with. This applies to frameworks as well. \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow have you seen subjective interpretations of ‘good code’ lead to conflict or inefficiencies?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eOne particular example is when code reviews turn heated because reviewers have different opinions on naming, architectural choices, etc. Feedback loops can sometimes become more about personal preference. This can take time and affect output and maintainability.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCan you share an example of a time when different team members had significantly different ideas about what constituted ‘high-quality code’ and how it impacted the project?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve noticed that it’s not necessarily just about code coverage – it’s a broader issue. In many cases, it comes down to code reviews and the different approaches to development. Each approach has its own strengths. One is very structured, involving detailed planning, feature design, and documentation. It’s a more analytic method. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe other is highly iterative, practical, and focused on implementing ideas quickly and adjusting on the fly. Rather than doing extensive upfront analysis, this approach favors immediate action. There’s no right or wrong here – both can work well depending on the context.\u003c/p\u003e\n\n\n\n\u003cp\u003eSometimes, the structured approach pays off in the long run, especially when working with complex codebases that require collaboration between multiple developers. In these situations, a careful, well-documented process can be really beneficial. On the other hand, when it comes to building user-facing functionality, the choice between a documented versus agile process often depends on business needs. For example, in an MVP or startup environment, the main goal is usually to deliver results quickly – especially when deadlines are tight or events are coming up. In these cases, speed can sometimes outweigh quality.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, developers are often tightly aligned with business needs, and there are plenty of cases where skilled engineers, committed to code quality, find their priorities clashing with business demands. It really depends on the nature of the project. If you’re working on something long-term that will need ongoing support and evolution, enforcing quality standards is definitely valuable. But if you expect to frequently revisit or rework the code, strict standards might not always be necessary.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"What Is WebStorm?\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/2w3NBtqMdmw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003cfigcaption\u003eVlad and Konstantin are from the WebStorm team – a JavaScript and TypeScript IDE by JetBrains. \u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow do you handle situations where strong opinions or ‘ego’ get in the way of establishing consensus on code quality standards?\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003e\u003cbr/\u003eI can’t say that I have a silver bullet here, because as a manager, you can’t simply “fix people.” \u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eThe smarter approach is to try and harness their strengths. For example, if someone has a strong opinion, it might be helpful to assign them a specific part of the system or a dedicated project. That way, you’re matching their personality to the project. But sometimes, tension is unavoidable. What we can do is try to spark discussions and facilitate open dialogue. We can also collaborate on common practices, like code reviews.\u003c/p\u003e\u003cp\u003eFor instance, we reviewed our code review practices with the WebStorm team. Konstantin can provide more technical details on that, but it was one of the artifacts.\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eThe discussion was intense. It’s not simple. In real-life scenarios, you might have a strong tech lead who can enforce a clear vision, and if the rest of the team is aligned, it’s easy to agree on strict rules. But that’s not always the case. In larger teams, you’ll often have several high-level, passionate developers who each have strong opinions, and those differences can lead to conflict. Connecting those people is a really tough process.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eKonstantin: \u003c/strong\u003eIn addition to what Vlad said, I think it’s important for developers to have some freedom in the specific areas of code they’re responsible for. Common code quality standards are needed because everyone is working on the same codebase and reading their colleagues’ code, but also it’s important to have a feeling of ownership. As everyone works on the same codebase together, they naturally find common ground regarding standards.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHave you ever had to mediate a conflict related to code quality standards? If so, what approach did you take?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eVlad: \u003c/strong\u003eIt’s crucial as a team leader to provide a safe and comfortable environment for people to share their opinions, but sometimes these discussions can lead to tense dialogues, and we have definitely experienced this. As a tech leader, you should default to the technical agreements in your team rather than focusing on personal preference and sometimes speak to your team members in private. For example, you can have a separate conversation and use phrases like “I really value your contribution” and “Thanks for a constructive and productive conversation” – sincerely, of course. \u003c/p\u003e\n\n\n\n\u003cp\u003eA good example of this is applying overly strict code coverage and linting rules directly in the editor, which can be counterproductive. Pursuing exact code coverage numbers is often unnecessary and ineffective. I doubt there are exact numbers, as they vary related to the nature of the project. In some cases it leads to really weird constructions to test pieces of code, and people struggle and spend a lot of time doing that instead of moving forward with features. Being flexible on code coverage metrics is good because restrictions like 80 or 90 percent code coverage  might not work well, and things like this need to be discussed. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eI guess that’s also very tough. So one solution might be automated checks?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIn our case, the IntelliJ department says you can’t push your changes into master if they don’t pass zero tolerance inspections (provided by Qodana), which are Java inspections followed by a comprehensive suite of tests. So yes, that can be one solution.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow important is documenting code quality standards,\u003c/strong\u003e \u003cstrong\u003eand what’s the best way to make them accessible and understandable to the entire team?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIt depends on the project. If you’re working together with one developer, it’s easy enough to just communicate verbally. But other situations might call for the opposite approach. Imagine a huge open-source project with a bunch of external contributors. In that case, it’s crucial to create some sort of contribution guide and to \u003ca href=\"https://blog.jetbrains.com/qodana/2024/04/javascript-code-quality-tools-qodana/\"\u003eaccess project resources\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow do you ensure that code quality standards are regularly reviewed and updated to reflect evolving project needs and best practices?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIn practice, code quality standards are often revisited reactively, typically after an issue arises. It’s not something most teams schedule weekly or even annually. For open source projects, this often happens after the first few pull requests, when contributors submit code that doesn’t meet unstated expectations. If quality checks aren’t automated through CI tools at that point, it’s a clear signal that they need to be introduced.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you anticipate a project will be long-running, it’s best to define and implement standards from the start. Experience plays a big role here. You start to recognize what’s necessary early on.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf I were to start a new project, especially in the open-source space, I’d make a point to study similar projects. I’d look at how their CI pipelines are structured, what tools they use (like Docker for isolation), and what quality gates they’ve implemented. That research often inspires improvements I bring into my own projects. It’s a continuous learning process driven both by necessity and by observing best practices in the wider development community.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow do you tailor code quality standards to the specific context of a project or tech stack?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThe structure and architecture of a project play a significant role in shaping code quality standards. For example, in large monorepos or distributed systems composed of multiple microservices across separate repositories, integration testing often becomes more valuable than unit testing alone. You need to align your testing strategy and broader quality standards with the scale, structure, and operational requirements of the system.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat works for a small library may not make sense for a large-scale, service-oriented architecture. Tailoring standards means considering not just the tech stack but also how the code fits into the overall architecture and deployment model.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWhat code quality metrics do you find most valuable, and why?\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile metrics like cyclomatic complexity, maintainability index, and code coverage have their place, it’s important not to over-rely on any single one, especially code coverage. High coverage doesn’t always mean high-quality tests.\u003c/p\u003e\n\n\n\n\u003cp\u003eStatic analysis tools are incredibly valuable because they catch issues early, often before code is even run. Even for small or personal projects, setting up basic static checks in a CI pipeline is worth the effort. Platforms like GitHub and GitLab make this easy, and these checks help enforce a consistent baseline of quality, especially when you’re likely to forget to run them manually.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn short, I prioritize metrics that contribute to early detection of issues and long-term maintainability, rather than just hitting arbitrary numerical targets.\u003c/p\u003e\n\n\n\n\u003ch2\u003eQodana can help you prioritize code quality while you iterate\u003c/h2\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eThanks for reading this installment of the Qodana Leadership Series. Special thanks to Vladimir, Konstantin and the WebStorm team for their participation. Have questions? Drop them in the comment section below. You can also read \u003ca href=\"https://blog.jetbrains.com/qodana/2025/02/managing-conflict/#:~:text=Embracing%20new%20technology%20with%20an,buy%2Din%20and%20new%20perspectives.\"\u003eanother installment\u003c/a\u003e for more insider information on how today’s team leads are tackling challenges.\u003c/p\u003e\u003cp\u003eIf you’re looking to iterate without compromising on the quality of your products, try Qodana. \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Qodana\" href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eTry Qodana\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eNext up\u003c/h2\u003e\n\n\n\n\u003cp\u003eCheck out Leadership Strategies for \u003ca href=\"https://blog.jetbrains.com/qodana/2024/07/leadership-code-quality/\"\u003eFinding Quality Focused Developers. \u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1200\" height=\"630\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/06/image-41.png\" alt=\"\"/\u003e\u003c/figure\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
