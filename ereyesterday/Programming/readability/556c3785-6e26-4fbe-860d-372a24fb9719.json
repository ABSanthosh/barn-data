{
  "id": "556c3785-6e26-4fbe-860d-372a24fb9719",
  "title": "Refactoring JavaScript to TypeScript with GitLab Duo Workflow",
  "link": "https://about.gitlab.com/blog/2025/05/22/refactoring-javascript-to-typescript-with-gitlab-duo-workflow",
  "description": "",
  "author": "Frédéric Caplette",
  "published": "2025-05-22T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Frédéric Caplette",
  "length": 6950,
  "excerpt": "Learn how we used our autonomous AI agent, which sits in your development environment, to convert a real-world JavaScript application to TypeScript.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "TypeScript adoption continues to grow, with over 88% of developers reporting they either use or want to use it. Yet, migrating existing JavaScript codebases to TypeScript is often a time-consuming process. Enter GitLab Duo Workflow: secure, agentic AI that sits right inside your development environment, helping transform high-level tasks into executable workflows. In this article, you'll learn how we used Duo Workflow to update Duo Workflow, converting a real-world JavaScript application to TypeScript. We'll also review the technical process and broader implications for development workflows. This video walks through visually what you'll read below: The challenge: Refactor JS to TS We decided to migrate Duo Workflow client-related logic to TypeScript for better type safety and auto-complete. A JavaScript-to-TypeScript migration involves more than just changing file extensions. It requires: Analyzing existing code patterns to determine appropriate types Handling edge cases where type inference is ambiguous Ensuring consistency across the codebase Managing dependencies and third-party libraries Validating that runtime behavior remains unchanged Doing all of this work manually can be very time consuming and not much fun. Thankfully, managing your projects is easier and more efficient with Duo Workflow – even when the project is Duo Workflow. How it works If you've used AI coding assistants before, you're likely familiar with their chat-based interfaces (like GitLab Duo Chat). These chats can provide code snippets, suggested directory structures, and more. GitLab Duo Workflow fundamentally differs from these in several key ways: It's contextually aware of your entire codebase, not just open files or highlighted text. You can also add context from relevant GitLab issues or merge requests. It develops and executes a multi-stage plan, allowing for more complete solutions. It keeps a human in the loop, ensuring you understand and approve of what is happening at each step of the way. It stages changes to your repository, giving you control over what to accept. Duo Workflow uses an agentic AI approach, powered by Claude 3.5 Sonnet, to understand code semantics while maintaining a deep integration with GitLab's DevOps platform. Let's walk through a real-world example of refactoring a JavaScript file using GitLab Duo Workflow. In our case, we started with the prompt: I need to refactor a JavaScript file packages/webview_duo_workflow/src/app/stores/workflow.js to TypeScript. Please analyze the code, identify any issues, and convert it to TypeScript with appropriate type definitions. Analysis After prompting, Duo Workflow first analyzed the codebase structure: Identified that workflow.js is a Pinia store implementation Noted it uses imports from various modules including constants.ts (which was already in TypeScript) Recognized GraphQL queries import exists but the file wasn't accessible Based on this analysis, Duo Workflow identified specific typing needs: Type definitions needed for: Store State interface with precise types: areWorkflowsLoading: boolean isLoadingWorkflow: boolean isLoadingRecentWorkflows: boolean recentWorkflows: array workflows: array workflowsPageInfo: object initialState: object activeWorkflow: object with specific shape Interface definitions required: Workflow interface with properties: id: string goal: string status: string checkpoint: object type: string Parameter types needed for: GraphQL response types for workflows data Event handler parameter types Function parameter types for actions like getWorkflowById, runWorkflow, etc. Duo Workflow identified several complex patterns requiring special handling: Uses optional chaining extensively Has nested object destructuring Contains GraphQL integration Uses Pinia store patterns with state, getters, and actions Implements an events mapping system The system recognized external type dependencies: Pinia store types GraphQL query response types Functions from an internal Bridge module were also properly recognized (for sendRequest, sendGraphqlRequest) The final analysis concluded: \"The file will need to be renamed from .js to .ts and appropriate type definitions added while maintaining the existing functionality.\" Planning Based on this thorough analysis, Duo Workflow created a structured plan consisting of specific tasks: Create a new TypeScript file workflow.ts in the same directory as the original JS file. Create TypeScript interfaces for the store state and workflow types at the top of the new file, including: WorkflowState interface for store state Workflow interface for workflow object structure WorkflowPageInfo interface for pagination info WorkflowCheckpoint interface for checkpoint data Copy and add type annotations to the store implementation from workflow.js, including: State return type Getter return types Action parameter types Action return types Update all imports in workflow.ts to: Add type imports from Pinia Update local imports to use .ts extensions where applicable Import any required type definitions Execution After the plan is complete, we were prompted to “Approve plan.” Before clicking approve, we reviewed each step and ensured we were comfortable with the plan. After approval, Duo Workflow showed its progress through each step with visual indicators and explanations of what API operations were supporting each task (like \"Supported by: create_file_with_contents\" or \"Supported by: edit_file\"). When the work was done, we reviewed the changes before committing. What we learned This JavaScript-to-TypeScript migration example showcases a significant evolution in AI-assisted development. What makes GitLab Duo Workflow particularly interesting is its approach to: Task-oriented programming vs. suggestion-only assistance Unlike many AI assistants that simply offer code snippets or suggestions, Duo Workflow understands and executes complete tasks. The difference is significant — rather than saying \"here's some TypeScript code you might use,\" it says \"I'll convert this file for you, here's my plan, and here are the changes I'm making.\" Contextual understanding of the entire codebase The tool demonstrates awareness of project structure, related files (like constants.ts and GraphQL queries), and the relationships between components. This contextual understanding allows for more sophisticated conversions than localized transformations. Step-by-step execution with visibility The plan-based approach, with clear steps and progress indicators, provides transparency into what would otherwise be a black-box process. This allows developers to understand what the AI is doing and how it's approaching the problem. GitLab Duo Workflow is currently available in private beta for GitLab Ultimate customers. Sign up for the waitlist today! Learn more Agentic AI guides and resources GitLab Duo Workflow What is agentic AI?",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/2gQoQIbY9NvjLFpXtsxtXy/0a68928510160166d6beee5d417ff048/Workflow_1800x945.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-67d56f21=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eTypeScript adoption continues to grow, with over 88% of developers reporting they either use or want to use it. Yet, migrating existing JavaScript codebases to TypeScript is often a time-consuming process. Enter \u003ca href=\"https://about.gitlab.com/blog/2025/02/24/gitlab-duo-workflow-enterprise-visibility-and-control-for-agentic-ai/\"\u003eGitLab Duo Workflow\u003c/a\u003e: secure, agentic AI that sits right inside your development environment, helping transform high-level tasks into executable workflows. In this article, you\u0026#39;ll learn how we used Duo Workflow to update Duo Workflow, converting a real-world JavaScript application to TypeScript. We\u0026#39;ll also review the technical process and broader implications for development workflows.\u003c/p\u003e\n\u003cp\u003eThis video walks through visually what you\u0026#39;ll read below:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1085078036?badge=0\u0026amp;autopause=0\u0026amp;player_id=0\u0026amp;app_id=58479\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media\" title=\"Refactor JavaScript to TypeScript with GitLab Duo Workflow\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003ch2 id=\"the-challenge-refactor-js-to-ts\" tabindex=\"-1\"\u003eThe challenge: Refactor JS to TS \u003ca href=\"#the-challenge-refactor-js-to-ts\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe decided to migrate Duo Workflow client-related logic to TypeScript for better type safety and auto-complete. A JavaScript-to-TypeScript migration involves more than just changing file extensions. It requires:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAnalyzing existing code patterns to determine appropriate types\u003c/li\u003e\n\u003cli\u003eHandling edge cases where type inference is ambiguous\u003c/li\u003e\n\u003cli\u003eEnsuring consistency across the codebase\u003c/li\u003e\n\u003cli\u003eManaging dependencies and third-party libraries\u003c/li\u003e\n\u003cli\u003eValidating that runtime behavior remains unchanged\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDoing all of this work manually can be very time consuming and not much fun. Thankfully, managing your projects is easier and more efficient with Duo Workflow – even when the project is Duo Workflow.\u003c/p\u003e\n\u003ch2 id=\"how-it-works\" tabindex=\"-1\"\u003eHow it works \u003ca href=\"#how-it-works\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIf you\u0026#39;ve used AI coding assistants before, you\u0026#39;re likely familiar with their chat-based interfaces (like \u003ca href=\"https://about.gitlab.com/blog/2024/04/18/gitlab-duo-chat-now-generally-available/\"\u003eGitLab Duo Chat\u003c/a\u003e). These chats can provide code snippets, suggested directory structures, and more. GitLab Duo Workflow fundamentally differs from these in several key ways:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt\u0026#39;s contextually aware of your entire codebase, not just open files or highlighted text. You can also add context from relevant GitLab issues or merge requests.\u003c/li\u003e\n\u003cli\u003eIt develops and executes a multi-stage plan, allowing for more complete solutions.\u003c/li\u003e\n\u003cli\u003eIt keeps a human in the loop, ensuring you understand and approve of what is happening at each step of the way.\u003c/li\u003e\n\u003cli\u003eIt stages changes to your repository, giving you control over what to accept.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDuo Workflow uses an agentic AI approach, powered by Claude 3.5 Sonnet, to understand code semantics while maintaining a deep integration with GitLab\u0026#39;s DevOps platform.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s walk through a real-world example of refactoring a JavaScript file using GitLab Duo Workflow. In our case, we started with the prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eI need to refactor a JavaScript file packages/webview_duo_workflow/src/app/stores/workflow.js to TypeScript. Please analyze the code, identify any issues, and convert it to TypeScript with appropriate type definitions.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"analysis\" tabindex=\"-1\"\u003eAnalysis \u003ca href=\"#analysis\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAfter prompting, Duo Workflow first analyzed the codebase structure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIdentified that \u003ccode\u003eworkflow.js\u003c/code\u003e is a Pinia store implementation\u003c/li\u003e\n\u003cli\u003eNoted it uses imports from various modules including \u003ccode\u003econstants.ts\u003c/code\u003e (which was already in TypeScript)\u003c/li\u003e\n\u003cli\u003eRecognized GraphQL queries import exists but the file wasn\u0026#39;t accessible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBased on this analysis, Duo Workflow identified specific typing needs:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eType definitions needed for:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStore State interface with precise types:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eareWorkflowsLoading\u003c/code\u003e: boolean\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisLoadingWorkflow\u003c/code\u003e: boolean\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisLoadingRecentWorkflows\u003c/code\u003e: boolean\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erecentWorkflows\u003c/code\u003e: array\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworkflows\u003c/code\u003e: array\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eworkflowsPageInfo\u003c/code\u003e: object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einitialState\u003c/code\u003e: object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eactiveWorkflow\u003c/code\u003e: object with specific shape\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eInterface definitions required:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWorkflow interface with properties:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eid\u003c/code\u003e: string\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egoal\u003c/code\u003e: string\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatus\u003c/code\u003e: string\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echeckpoint\u003c/code\u003e: object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e: string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eParameter types needed for:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraphQL response types for workflows data\u003c/li\u003e\n\u003cli\u003eEvent handler parameter types\u003c/li\u003e\n\u003cli\u003eFunction parameter types for actions like \u003ccode\u003egetWorkflowById\u003c/code\u003e, \u003ccode\u003erunWorkflow\u003c/code\u003e, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDuo Workflow identified several complex patterns requiring special handling:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUses optional chaining extensively\u003c/li\u003e\n\u003cli\u003eHas nested object destructuring\u003c/li\u003e\n\u003cli\u003eContains GraphQL integration\u003c/li\u003e\n\u003cli\u003eUses Pinia store patterns with state, getters, and actions\u003c/li\u003e\n\u003cli\u003eImplements an events mapping system\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe system recognized external type dependencies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePinia store types\u003c/li\u003e\n\u003cli\u003eGraphQL query response types\u003c/li\u003e\n\u003cli\u003eFunctions from an internal Bridge module were also properly recognized (for \u003ccode\u003esendRequest\u003c/code\u003e, \u003ccode\u003esendGraphqlRequest\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe final analysis concluded: \u0026#34;The file will need to be renamed from .js to .ts and appropriate type definitions added while maintaining the existing functionality.\u0026#34;\u003c/p\u003e\n\u003ch3 id=\"planning\" tabindex=\"-1\"\u003ePlanning \u003ca href=\"#planning\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eBased on this thorough analysis, Duo Workflow created a structured plan consisting of specific tasks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a new TypeScript file\u003c/strong\u003e \u003ccode\u003eworkflow.ts\u003c/code\u003e in the same directory as the original JS file.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate TypeScript interfaces\u003c/strong\u003e for the store state and workflow types at the top of the new file, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWorkflowState interface for store state\u003c/li\u003e\n\u003cli\u003eWorkflow interface for workflow object structure\u003c/li\u003e\n\u003cli\u003eWorkflowPageInfo interface for pagination info\u003c/li\u003e\n\u003cli\u003eWorkflowCheckpoint interface for checkpoint data\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCopy and add type annotations\u003c/strong\u003e to the store implementation from \u003ccode\u003eworkflow.js\u003c/code\u003e, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eState return type\u003c/li\u003e\n\u003cli\u003eGetter return types\u003c/li\u003e\n\u003cli\u003eAction parameter types\u003c/li\u003e\n\u003cli\u003eAction return types\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate all imports\u003c/strong\u003e in \u003ccode\u003eworkflow.ts\u003c/code\u003e to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd type imports from Pinia\u003c/li\u003e\n\u003cli\u003eUpdate local imports to use .ts extensions where applicable\u003c/li\u003e\n\u003cli\u003eImport any required type definitions\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"execution\" tabindex=\"-1\"\u003eExecution \u003ca href=\"#execution\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAfter the plan is complete, we were prompted to  “Approve plan.” Before clicking approve, we reviewed each step and ensured we were comfortable with the plan. After approval, Duo Workflow showed its progress through each step with visual indicators and explanations of what API operations were supporting each task (like \u0026#34;Supported by: create_file_with_contents\u0026#34; or \u0026#34;Supported by: edit_file\u0026#34;). When the work was done, we reviewed the changes before committing.\u003c/p\u003e\n\u003ch2 id=\"what-we-learned\" tabindex=\"-1\"\u003eWhat we learned \u003ca href=\"#what-we-learned\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis JavaScript-to-TypeScript migration example showcases a significant evolution in AI-assisted development. What makes GitLab Duo Workflow particularly interesting is its approach to:\u003c/p\u003e\n\u003ch3 id=\"task-oriented-programming-vs.-suggestion-only-assistance\" tabindex=\"-1\"\u003eTask-oriented programming vs. suggestion-only assistance \u003ca href=\"#task-oriented-programming-vs.-suggestion-only-assistance\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eUnlike many AI assistants that simply offer code snippets or suggestions, Duo Workflow understands and executes complete tasks. The difference is significant — rather than saying \u0026#34;here\u0026#39;s some TypeScript code you might use,\u0026#34; it says \u0026#34;I\u0026#39;ll convert this file for you, here\u0026#39;s my plan, and here are the changes I\u0026#39;m making.\u0026#34;\u003c/p\u003e\n\u003ch3 id=\"contextual-understanding-of-the-entire-codebase\" tabindex=\"-1\"\u003eContextual understanding of the entire codebase \u003ca href=\"#contextual-understanding-of-the-entire-codebase\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe tool demonstrates awareness of project structure, related files (like constants.ts and GraphQL queries), and the relationships between components. This contextual understanding allows for more sophisticated conversions than localized transformations.\u003c/p\u003e\n\u003ch3 id=\"step-by-step-execution-with-visibility\" tabindex=\"-1\"\u003eStep-by-step execution with visibility \u003ca href=\"#step-by-step-execution-with-visibility\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe plan-based approach, with clear steps and progress indicators, provides transparency into what would otherwise be a black-box process. This allows developers to understand what the AI is doing and how it\u0026#39;s approaching the problem.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGitLab Duo Workflow is currently available in private beta for GitLab Ultimate customers. \u003ca href=\"https://about.gitlab.com/gitlab-duo/workflow/\"\u003eSign up for the waitlist today!\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/05/07/agentic-ai-guides-and-resources/\"\u003eAgentic AI guides and resources\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/02/24/gitlab-duo-workflow-enterprise-visibility-and-control-for-agentic-ai/\"\u003eGitLab Duo Workflow\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/topics/agentic-ai/\"\u003eWhat is agentic AI?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-05-22T00:00:00Z",
  "modifiedTime": null
}
