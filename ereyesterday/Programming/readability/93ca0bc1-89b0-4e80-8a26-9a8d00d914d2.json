{
  "id": "93ca0bc1-89b0-4e80-8a26-9a8d00d914d2",
  "title": "Git 2.48: Modernized with Meson Build System, Memory Leaks Fixed",
  "link": "https://www.infoq.com/news/2025/01/git-modernized-meson-build/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Git 2.48 now supports the Meson build system, a modern alternative to the existing Makefile, Autoconf, and CMake-based systems. This change addresses limitations in IDE support and maintenance issues with older systems. By Aditya Kulkarni",
  "author": "Aditya Kulkarni",
  "published": "Thu, 30 Jan 2025 14:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Git",
    "Development",
    "DevOps",
    "news"
  ],
  "byline": "Aditya Kulkarni",
  "length": 3534,
  "excerpt": "Git 2.48 now supports the Meson build system, a modern alternative to the existing Makefile, Autoconf, and CMake-based systems. This change addresses limitations in IDE support and maintenance issues",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250129235939/apple-touch-icon.png",
  "text": "Git 2.48 now supports the Meson build system, a modern alternative to the existing Makefile, Autoconf, and CMake-based systems. This change addresses limitations in IDE support and maintenance issues with older systems. According to Christian Couder, GitLab's Git Expert, Meson offers several key advantages over previous build systems in Git 2.48. These include a user-friendly syntax, broad compatibility, support for modern features, and easy access to build options. The Meson build process involves setting up a build directory, compiling, testing, and installing using straightforward commands. Git 2.48 has achieved a major milestone: it is now free of memory leaks, as exercised by its test suite. Previously, 223 test files had memory leaks, which were reduced to 60 by Git 2.47 and are now resolved. This accomplishment is aligned with the goal of \"libifying\" Git's internal components (turning them into libraries) and optimizing memory usage. Unless exceptional justification is provided, new tests must now be leak-free by default. Similar to regular fetches, fetches using bundle URIs can now undergo comprehensive validation using the fsck mechanism. This enhancement provides granular control over what issues are accepted or rejected based on severity levels. Previously unavailable for bundle fetches, this feature improves repository safety and usability. In Git 2.48, work on reference consistency checks has progressed further. The git-fsck command can now detect issues such as invalid reference content or symbolic references pointing to non-existent targets. These checks were integrated into git-fsck after being developed as part of the Google Summer of Code (GSoC) 2024. The tech communities on Lobster and Reddit engaged in discussions and shared their opinions on the announcement. This conversation thread on Lobsters noted that Git and GitHub still rely on SHA-1, despite known vulnerabilities. While Git includes safety measures, concerns exist about interoperability issues and the potential for accidental triggering of collision detection mechanisms. Furthermore, Reftables, introduced in Git 2.45 as a backend for storing references (e.g., branches and tags), have seen performance improvements through iterator reuse. Previously, reading references required creating new iterators for each operation, which was inefficient for repeated reads. Now, a single iterator can be reused across multiple reads, resulting in a 7% speedup in creating references during transactions with random reads and the potential for further optimizations by reusing more states within iterators. Git 2.48 has also added support for migrating reflogs between backends using the git refs migrate command. Previously, reflogs could not be converted between file-based and reftables backends during migration efforts introduced in Git 2.46. While this tool still cannot handle repositories with multiple worktrees, it removes a critical limitation for users adopting reftables in their repositories. The ref-filter subsystem, used by commands like git branch, git tag, and git for-each-ref, has been optimized to improve performance when processing large numbers of references in repositories. The original announcement blog highlights a number of contributors for their efforts and a complete list of contributors can be found in the project release notes. About the Author Aditya Kulkarni",
  "image": "https://res.infoq.com/news/2025/01/git-modernized-meson-build/en/headerimage/generatedHeaderImage-1737909639507.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eGit 2.48 now supports the Meson build system, a modern alternative to the existing \u003ca href=\"https://en.wikipedia.org/wiki/GNU_Make\"\u003eMakefile\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Autoconf\"\u003eAutoconf\u003c/a\u003e, and \u003ca href=\"https://cmake.org/\"\u003eCMake\u003c/a\u003e-based systems. This change addresses limitations in IDE support and maintenance issues with older systems.\u003c/p\u003e\n\n\u003cp\u003eAccording to \u003ca href=\"https://www.linkedin.com/in/christian-couder-569a731/\"\u003eChristian Couder\u003c/a\u003e, GitLab\u0026#39;s Git Expert, \u003ca href=\"https://mesonbuild.com/\"\u003eMeson\u003c/a\u003e offers several key advantages over previous build systems \u003ca href=\"https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/\"\u003ein Git 2.48\u003c/a\u003e. These include a user-friendly syntax, broad compatibility, support for modern features, and easy access to build options. The Meson build process involves setting up a build directory, compiling, testing, and installing using straightforward commands.\u003c/p\u003e\n\n\u003cp\u003eGit 2.48 has achieved a major milestone: it is now free of memory leaks, as exercised by its test suite. Previously, 223 test files had memory leaks, which were reduced to 60 by Git 2.47 and are now resolved. This accomplishment is aligned with the goal of \u0026#34;libifying\u0026#34; Git\u0026#39;s internal components (turning them into libraries) and optimizing memory usage. Unless exceptional justification is provided, new tests must now be leak-free by default.\u003c/p\u003e\n\n\u003cp\u003eSimilar to regular fetches, fetches using bundle URIs can now undergo comprehensive validation using the \u003ccode\u003e\u003ca href=\"https://git-scm.com/docs/git-fsck#_fsck_messages\"\u003efsck mechanism\u003c/a\u003e\u003c/code\u003e. This enhancement provides granular control over what issues are accepted or rejected based on severity levels. Previously unavailable for bundle fetches, this feature improves repository safety and usability.\u003c/p\u003e\n\n\u003cp\u003eIn Git 2.48, work on reference consistency checks has progressed further. The \u003ccode\u003egit-fsck\u003c/code\u003e command can \u003ca href=\"https://lore.kernel.org/git/ZrtrT1CPI4YUf5db@ArchLinux/\"\u003enow detect issues such as invalid reference content\u003c/a\u003e or symbolic references pointing to non-existent targets. These checks were integrated into \u003ccode\u003egit-fsck\u003c/code\u003e after being developed as part of the Google Summer of Code (GSoC) 2024.\u003c/p\u003e\n\n\u003cp\u003eThe tech communities on Lobster and Reddit engaged in discussions and shared their \u003ca href=\"https://www.reddit.com/r/git/comments/1hytibc/git_248_released/\"\u003eopinions\u003c/a\u003e on the announcement. This \u003ca href=\"https://lobste.rs/s/rnti2j/highlights_from_git_2_48#c_ctkrcb\"\u003econversation thread on Lobsters\u003c/a\u003e noted that Git and GitHub still rely on SHA-1, despite known vulnerabilities. While Git includes safety measures, concerns exist about interoperability issues and the potential for accidental triggering of collision detection mechanisms.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, Reftables, introduced in Git 2.45 as a backend for storing references (e.g., branches and tags), have seen \u003ca href=\"https://lore.kernel.org/git/cover.1730732881.git.ps@pks.im/\"\u003eperformance improvements through iterator reuse\u003c/a\u003e. Previously, reading references required creating new iterators for each operation, which was inefficient for repeated reads. Now, a single iterator can be reused across multiple reads, resulting in a 7% speedup in creating references during transactions with random reads and the potential for further optimizations by reusing more states within iterators.\u003c/p\u003e\n\n\u003cp\u003eGit 2.48 has also added support for migrating reflogs between backends using the \u003ccode\u003egit refs migrate\u003c/code\u003e command. Previously, reflogs could not be converted between file-based and reftables backends during migration efforts \u003ca href=\"https://about.gitlab.com/blog/2024/07/29/whats-new-in-git-2-46-0/#tooling-to-migrate-reference-backends\"\u003eintroduced in Git 2.46\u003c/a\u003e. While this tool still cannot handle repositories with multiple worktrees, it removes a critical limitation for users adopting reftables in their repositories.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eref-filter\u003c/code\u003e subsystem, used by commands like \u003ccode\u003egit branch\u003c/code\u003e, \u003ccode\u003egit tag\u003c/code\u003e, and \u003ccode\u003egit for-each-ref\u003c/code\u003e, has been \u003ca href=\"https://lore.kernel.org/git/d23c3e3ee7fdb49fcd05b4f2e52dd2a1cfdc10f2.1729510342.git.ps@pks.im/\"\u003eoptimized to improve performance\u003c/a\u003e when processing large numbers of references in repositories.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/\"\u003eoriginal announcement blog\u003c/a\u003e highlights a number of contributors for their efforts and a complete list of contributors can be found in the \u003ca href=\"https://lore.kernel.org/git/xmqqplku7cvm.fsf@gitster.g/\"\u003eproject release notes\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Aditya-Kulkarni\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAditya Kulkarni\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-01-30T00:00:00Z",
  "modifiedTime": null
}
