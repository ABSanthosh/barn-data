{
  "id": "29127a1e-0fb6-4c13-babb-7e9eaeb0277d",
  "title": "Building a more accessible GitHub CLI",
  "link": "https://github.blog/engineering/user-experience/building-a-more-accessible-github-cli/",
  "description": "How do we translate web accessibility standards to command line applications? This is GitHub CLI's journey toward making terminal experiences for all developers. The post Building a more accessible GitHub CLI appeared first on The GitHub Blog.",
  "author": "Ryan Hecht",
  "published": "Fri, 02 May 2025 14:30:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Engineering",
    "User experience",
    "accessibility",
    "CLI",
    "GitHub CLI"
  ],
  "byline": "Ryan Hecht, Andrew Feller",
  "length": 9158,
  "excerpt": "How do we translate web accessibility standards to command line applications? This is GitHub CLI's journey toward making terminal experiences for all developers.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "At GitHub, we’re committed to making our tools truly accessible for every developer, regardless of ability or toolset. The command line interface (CLI) is a vital part of the developer experience, and the GitHub CLI is our product that brings the power of GitHub to your terminal. When it comes to accessibility, the terminal is fundamentally different from a web browser or a graphical user interface, with a lineage that predates the web itself. While standards like the Web Content Accessibility Guidelines (WCAG) provide a clear path for making web and graphical applications accessible, there is no equivalent, comprehensive standard for the terminal and CLIs. The W3C offers some high-level guidance for non-web software, but it stops short of prescribing concrete techniques, leaving much open to interpretation and innovation. This gap has challenged us to think creatively and purposefully about what accessibility should look like in the terminal. Our recent Public Preview is focused on addressing the needs of three key groups: users who rely on screen readers, users who need high contrast between background and text, and users who require customizable color options. Our work aims to make the GitHub CLI more inclusive for all, regardless of how you interact with your terminal. Run gh a11y in the latest version of the GitHub CLI to enable these features, or read on to learn about our path to designing and implementing them. Understanding the terminal landscape Text-based and command-line applications differ fundamentally from graphical or web applications. On a web page, assistive technologies like screen readers make use of the document object model (DOM) to infer structure and context of the page. Web pages can be designed such that the DOM’s structure is friendly to these technologies without impacting the visual design of the page.  By contrast, CLI’s primary output is plain text, without hidden markup. A terminal emulator acts as the “user agent” for text apps, rendering characters as directed by the server application. Assistive technologies access this matrix of characters, analyze its layout, and try to infer structure. As the WCAG2ICT guidance notes, accessibility in this space means ensuring that all text output is available to assistive technologies, and that structural information is conveyed in a way that’s programmatically determinable—even if no explicit markup is present. In our quest to improve the GitHub CLI’s usability for blind, low-vision, and colorblind users, we found ourselves navigating a landscape with lots of guidance, but few concrete techniques for implementing accessible experiences. We studied how assistive technology interacts with terminals: how screen readers review output, how color and contrast can be customized, and how structural cues can be inferred from plain text. Our recent Public Preview contains explorations into various use cases in these spaces.  Rethinking prompts and progress for screen readers One of the GitHub CLI’s strengths as a command-line application is its rich prompting experience, which gives our users an interactive interface to enter command options. However, this rich interactive experience poses a hurdle for speech synthesis screen readers: Non-alphanumeric visual cues and uses of constant screen redraws for visual or other effects can be tricky to correctly interpret as speech.\u2028 A demo video with sound of screen reader reading legacy prompter. To reduce confusion and make it easier for blind and low vision users to confidently answer questions and navigate choices, we’re introducing a prompting experience that allows speech synthesis screen readers to accurately convey prompts to users. Our new prompter is built using Charm’s open source charmbracelet/huh prompting library. A demo of a screenreader correctly reading a prompt. Another use case where the terminal is redrawn for visual effect is when showing progress bars. Our existing implementation uses a “spinner” made by redrawing the screen to display different braille characters (yes, we appreciate the irony) to give the user the indication that their command is executing. Speech synthesis screen readers do not handle this well: A demo of a screenreader and an old spinner. This has been replaced with a static text progress indicator (with a relevant message to the action being taken where possible, falling back to a general “Working…” message). We’re working on identifying other areas we can further improve the contextual text. A demo video of the new progress indicator experience. Color, contrast, and customization Color is more than decoration in the terminal: It’s a vital tool for highlighting information, signaling errors, and guiding workflows. But color can also be a barrier—if contrast between the color of the terminal background and the text displayed on it is too low, some users will have difficulty discerning the displayed information. Unlike in a web browser, a terminal’s background color is not set by the application. That task is handled by the user’s terminal emulator. In order to maintain contrast, it is important that a command line application takes into account this variable. Our legacy color palette used for rendering Markdown did not take the terminal’s background color into account, leading to low contrast in some cases. The colors themselves also matter. Different terminal environments have varied color capabilities (some support 4-bit, some 8-bit, some 24-bit, etc). No matter the capability, terminals enable users to customize their color preferences, choosing how different hues are displayed. However, most terminals only support changing a limited subset of colors: namely, the sixteen colors in the ANSI 4-bit color table. The GitHub CLI has made extensive efforts to align our color palettes to 4-bit colors so our users can completely customize their experience using their terminal preferences. We built on top of the accessibility foundations pioneered by Primer when deciding which 4-bit colors to use. Our improvements aim to support a wide range of developer needs, from blind users who need screen readers, to low vision users who need high contrast, to colorblind users who require customizable color options. But this Public Preview does not mark the end of our team’s commitment to enabling all developers to use the GitHub CLI. We intend to make it easier for our extension authors to implement the same accessibility improvements that we’ve made to the core CLI. This will allow users to have a cohesive experience across all GitHub CLI commands, official or community-maintained, and so that more workflows can be made accessible by default. We’re also looking into experiences to customize the formatting of tables output by commands to be more easily read/interpreted by screen readers. We’re excited to continue our accessibility journey.We couldn’t have come this far without collaboration with our friends at Charm and our colleagues on the GitHub Accessibility team.  A call for feedback We invite you to help us in our goal to make the GitHub CLI an experience for all developers: Try it out: Update the GitHub CLI to v2.72.0 and run gh a11y in your terminal to learn more about enabling these new accessible features. Share your experience: Join our GitHub CLI accessibility discussion to provide feedback or suggestions. Connect with us: If you have a lived experience relevant to our accessibility personas, reach out to the accessibility team or get involved in our discussion panel. Looking forward Adapting accessibility standards for the command line is a challenge—and an opportunity. We’re committed to sharing our approach, learning from the community, and helping set a new standard for accessible CLI tools. Thank you for building a more accessible GitHub with us. Want to help us make GitHub the home for all developers? Learn more about GitHub’s accessibility efforts. Written by GitHub Product Manager GitHub Sr. Software Engineer Related posts How the GitHub CLI can now enable triangular workflows The GitHub CLI now supports common Git configurations for triangular workflows. Learn more about triangular workflows, how they work, and how to configure them for your Git workflows. Then, see how you can leverage these using the GitHub CLI. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/03/github_logo_invertocat_dark_5.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eAt GitHub, we’re committed to making our tools truly accessible for every developer, regardless of ability or toolset. The command line interface (CLI) is a vital part of the developer experience, and the \u003ca href=\"https://cli.github.com/\"\u003eGitHub CLI\u003c/a\u003e is our product that brings the power of GitHub to your terminal.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen it comes to accessibility, the terminal is fundamentally different from a web browser or a graphical user interface, with a lineage that predates the web itself. While standards like the Web Content Accessibility Guidelines (WCAG) provide a clear path for making web and graphical applications accessible, there is no equivalent, comprehensive standard for the terminal and CLIs. The W3C offers \u003ca href=\"https://www.w3.org/TR/wcag2ict-22/#applying-wcag-2-to-text-applications\"\u003esome high-level guidance for non-web software\u003c/a\u003e, but it stops short of prescribing concrete techniques, leaving much open to interpretation and innovation.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis gap has challenged us to think creatively and purposefully about what accessibility should look like in the terminal. Our recent \u003ca href=\"https://github.blog/changelog/2025-05-01-improved-accessibility-features-in-github-cli/\"\u003ePublic Preview\u003c/a\u003e is focused on addressing the needs of three key groups: users who rely on screen readers, users who need high contrast between background and text, and users who require customizable color options. Our work aims to make the GitHub CLI more inclusive for all, regardless of how you interact with your terminal. Run \u003ccode\u003egh a11y\u003c/code\u003e in the latest version of the GitHub CLI to enable these features, or read on to learn about our path to designing and implementing them.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-understanding-the-terminal-landscape\"\u003eUnderstanding the terminal landscape\u003c/h2\u003e\n\n\n\n\u003cp\u003eText-based and command-line applications differ fundamentally from graphical or web applications. On a web page, assistive technologies like screen readers make use of the document object model (DOM) to infer structure and context of the page. Web pages can be designed such that the DOM’s structure is friendly to these technologies without impacting the visual design of the page.  By contrast, CLI’s primary output is plain text, without hidden markup. A terminal emulator acts as the “user agent” for text apps, rendering characters as directed by the server application. Assistive technologies access this matrix of characters, analyze its layout, and try to infer structure. As the \u003ca href=\"https://www.w3.org/TR/wcag2ict-22/\"\u003eWCAG2ICT guidance\u003c/a\u003e notes, accessibility in this space means ensuring that all text output is available to assistive technologies, and that structural information is conveyed in a way that’s programmatically determinable—even if no explicit markup is present.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn our quest to improve the GitHub CLI’s usability for blind, low-vision, and colorblind users, we found ourselves navigating a landscape with lots of guidance, but few concrete techniques for implementing accessible experiences. We studied how assistive technology interacts with terminals: how screen readers review output, how color and contrast can be customized, and how structural cues can be inferred from plain text. Our recent Public Preview contains explorations into various use cases in these spaces. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-rethinking-prompts-and-progress-for-screen-readers\"\u003eRethinking prompts and progress for screen readers\u003c/h2\u003e\n\n\n\n\u003cp\u003eOne of the GitHub CLI’s strengths as a command-line application is its rich prompting experience, which gives our users an interactive interface to enter command options. However, this rich interactive experience poses a hurdle for speech synthesis screen readers: Non-alphanumeric visual cues and uses of constant screen redraws for visual or other effects can be tricky to correctly interpret as speech.\u2028\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-legacy-prompting-screenreader.mp4\"\u003e\u003c/video\u003e\u003cfigcaption\u003eA demo video with sound of screen reader reading legacy prompter.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo reduce confusion and make it easier for blind and low vision users to confidently answer questions and navigate choices, we’re introducing a prompting experience that allows speech synthesis screen readers to accurately convey prompts to users. Our new prompter is built using Charm’s open source \u003ccode\u003echarmbracelet/huh\u003c/code\u003e \u003ca href=\"https://github.com/charmbracelet/huh\"\u003eprompting library\u003c/a\u003e.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-accessible-prompting-screenreader.mp4\"\u003e\u003c/video\u003e\u003cfigcaption\u003eA demo of a screenreader correctly reading a prompt.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnother use case where the terminal is redrawn for visual effect is when showing progress bars. Our existing implementation uses a “spinner” made by redrawing the screen to display different braille characters (yes, we appreciate the irony) to give the user the indication that their command is executing. Speech synthesis screen readers do not handle this well:\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-legacy-spinner.mp4\"\u003e\u003c/video\u003e\u003cfigcaption\u003eA demo of a screenreader and an old spinner.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis has been replaced with a static text progress indicator (with a relevant message to the action being taken where possible, falling back to a general “Working…” message). We’re working on identifying other areas we can further improve the contextual text.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-accessible-spinner.mp4\"\u003e\u003c/video\u003e\u003cfigcaption\u003eA demo video of the new progress indicator experience.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-color-contrast-and-customization\"\u003eColor, contrast, and customization\u003c/h2\u003e\n\n\n\n\u003cp\u003eColor is more than decoration in the terminal: It’s a vital tool for highlighting information, signaling errors, and guiding workflows. But color can also be a barrier—if contrast between the color of the terminal background and the text displayed on it is too low, some users will have difficulty discerning the displayed information. Unlike in a web browser, a terminal’s background color is not set by the application. That task is handled by the user’s terminal emulator. In order to maintain contrast, it is important that a command line application takes into account this variable.\n\nOur legacy color palette used for rendering Markdown did not take the terminal’s background color into account, leading to low contrast in some cases.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"614\" height=\"662\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-legacy-markdown-palette.png?resize=614%2C662\" alt=\"A screenshot of the legacy Markdown palette.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/github-cli-legacy-markdown-palette.png?w=614 614w, https://github.blog/wp-content/uploads/2025/05/github-cli-legacy-markdown-palette.png?w=278 278w\" sizes=\"auto, (max-width: 614px) 100vw, 614px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe colors themselves also matter. Different terminal environments have varied color capabilities (some support 4-bit, some 8-bit, some 24-bit, etc). No matter the capability, terminals enable users to customize their color preferences, choosing how different hues are displayed. However, most terminals only support changing a limited subset of colors: namely, the sixteen colors in the ANSI 4-bit color table. The GitHub CLI has made extensive efforts to align our color palettes to 4-bit colors so our users can completely customize their experience using their terminal preferences. We built on top of \u003ca href=\"https://primer.style/accessibility/color-considerations/\"\u003ethe accessibility foundations pioneered by Primer\u003c/a\u003e when deciding which 4-bit colors to use.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"614\" height=\"662\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/github-cli-improved-markdown-palette.png?resize=614%2C662\" alt=\"A screenshot showing the improved Markdown palette.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/github-cli-improved-markdown-palette.png?w=614 614w, https://github.blog/wp-content/uploads/2025/05/github-cli-improved-markdown-palette.png?w=278 278w\" sizes=\"auto, (max-width: 614px) 100vw, 614px\"/\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003cdiv\u003e\u003cp\u003eOur improvements aim to support a wide range of developer needs, from blind users who need screen readers, to low vision users who need high contrast, to colorblind users who require customizable color options. But this Public Preview does not mark the end of our team’s commitment to enabling all developers to use the GitHub CLI. We intend to make it easier for our extension authors to implement the same accessibility improvements that we’ve made to the core CLI. This will allow users to have a cohesive experience across all GitHub CLI commands, official or community-maintained, and so that more workflows can be made accessible by default. We’re also looking into experiences to customize the formatting of tables output by commands to be more easily read/interpreted by screen readers. We’re excited to continue our accessibility journey.\u003c/p\u003e\u003cp\u003eWe couldn’t have come this far without collaboration with our friends at \u003ca href=\"https://github.com/charmbracelet\"\u003eCharm\u003c/a\u003e and our colleagues on the GitHub Accessibility team. \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003ch2 id=\"h-a-call-for-feedback\"\u003eA call for feedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe invite you to help us in our goal to make the GitHub CLI an experience for all developers:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTry it out\u003c/strong\u003e: Update the GitHub CLI to \u003ca href=\"https://github.com/cli/cli/releases/tag/v2.72.0\"\u003ev2.72.0\u003c/a\u003e and run \u003ccode\u003egh a11y\u003c/code\u003e in your terminal to learn more about enabling these new accessible features.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eShare your experience\u003c/strong\u003e: Join our \u003ca href=\"https://github.com/orgs/community/discussions/158037\"\u003eGitHub CLI accessibility discussion\u003c/a\u003e to provide feedback or suggestions.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eConnect with us\u003c/strong\u003e: If you have a lived experience relevant to our accessibility personas, reach out to the accessibility team or get involved in our \u003ca href=\"https://github.com/orgs/community/discussions/128172\"\u003ediscussion panel\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-looking-forward\"\u003eLooking forward\u003c/h2\u003e\n\n\n\n\u003cp\u003eAdapting accessibility standards for the command line is a challenge—and an opportunity. We’re committed to sharing our approach, learning from the community, and helping set a new standard for accessible CLI tools.\u003c/p\u003e\n\n\n\n\u003cp\u003eThank you for building a more accessible GitHub with us.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWant to help us make GitHub the home for all developers?\u003c/strong\u003e \u003ca href=\"https://accessibility.github.com/feedback\"\u003eLearn more\u003c/a\u003e about GitHub’s accessibility efforts.\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/5344055?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/5344055?v=4\u0026amp;s=200\" alt=\"Ryan Hecht\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eGitHub Product Manager\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/2089743?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/2089743?v=4\u0026amp;s=200\" alt=\"Andrew Feller\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eGitHub Sr. Software Engineer\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\u003ch3\u003e\n\t\t\t\t\u003ca href=\"https://github.blog/open-source/git/how-the-github-cli-can-now-enable-triangular-workflows/\" target=\"_self\"\u003e\n\t\t\t\t\tHow the GitHub CLI can now enable triangular workflows\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/h3\u003e\n\t\t\t\u003cp\u003eThe GitHub CLI now supports common Git configurations for triangular workflows. Learn more about triangular workflows, how they work, and how to configure them for your Git workflows. Then, see how you can leverage these using the GitHub CLI.\u003c/p\u003e\n\t\t\u003c/div\u003e\n\u003c/article\u003e\n\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-05-02T14:30:00Z",
  "modifiedTime": "2025-05-02T19:59:23Z"
}
