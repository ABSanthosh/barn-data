{
  "id": "c8c7d303-c38d-4d71-a1a8-7ca460322722",
  "title": "How engineering teams can thrive in 2025",
  "link": "https://stackoverflow.blog/2025/01/28/how-engineering-teams-can-thrive-in-2025/",
  "description": "New year, new approach.",
  "author": "",
  "published": "Tue, 28 Jan 2025 17:00:00 GMT",
  "source": "https://stackoverflow.blog/feed/",
  "categories": [
    "se-tech",
    "se-stackoverflow",
    "business",
    "software-engineering",
    "software-development",
    "engineering-leadership"
  ],
  "byline": "",
  "length": 10929,
  "excerpt": "In 2025, forward-thinking engineering teams are reshaping their approach to work, combining emerging technologies with new approaches to collaboration. Successful teams are leaning into AI-powered engineering while rethinking their role in an AI-enhanced business world.",
  "siteName": "",
  "favicon": "https://stackoverflow.blog/apple-touch-icon.png",
  "text": "In 2025, forward-thinking engineering teams are reshaping their approach to work, combining emerging technologies with new approaches to collaboration. Successful teams are leaning into AI-powered engineering while rethinking their role in an AI-enhanced business world.In this article, we explore how top teams are adapting to AI-first development, embracing new ways of working, and adapting to stay ahead in unpredictable economic times.The world of business as a whole underwent significant upheaval in 2024, marked by ongoing layoffs in tech firms and significant investment in AI across many industries including financial services and beyond. Engineering teams responded by adapting to the new market realities and building resilience into their strategy, combining new technologies and ways of working.The uptake of AI developer tools continues at pace. According to our 2024 Developer Survey with input from over 65,000 developers, 76% of respondents were using or planning to use AI tools in their development process, up 6% from the year before. Many new AI firms have entered the arena, launching new tools and services including HUGS (Hugging Face for Generative AI Services,) an open-source tool to automate chatbots, and Tabnine which generates, explains and tests code, creating documentation and suggesting fixes. Enterprise's refined focus on data-driven decisions means engineering teams need to adapt to respond quicker to business change. The traditional boundaries between development, operations, and data science are increasingly fluid. Engineers need to show their value through more than just coding skills; they must bring strategy, creativity, and problem-solving to the table.Software development has always been fast-moving, with new tools transforming how engineers approach their role in driving innovation. In 2025, smart AI coding assistants and no-code low-code platforms are reshaping priorities and developments in API and cloud-native systems are creating more seamless workflows and improved efficiency.The initial wave of AI coding assistants has matured. These platforms can now do far more than just autocomplete code. AI assistants can support the full product development lifecycle, from requirements analysis to deployment and maintenance. They save time by letting engineers focus on more challenging tasks. Early adoption data from GitHub's Copilot showed developers using the tool completed tasks 55% faster than those who didn't.These AI coding tools have created new markets for no-code and low-code platforms, shifting engineering teams' priorities. Instead of focusing solely on writing code, engineers are becoming platform architects and automation specialists. They're designing and maintaining the systems that enable citizen developers with limited coding skills to produce apps and software. This has opened up new career paths for developers to become trainers and system custodians.Engineers collaborating with citizen developers inside the enterprise should lead on standards and uphold good governance and review processes. With increased risks from automated and algorithmic decision-making, a focus on cybersecurity has become a higher priority for tech teams and the C-suite. Engineering teams are implementing privacy-by-design principles from the start of development, using automated tools that scan for security vulnerabilities and privacy issues in code and AI model outputs. Engineers must implement robust data governance frameworks and ensure AI systems handle sensitive information appropriately.AI advancements set new expectations about what development teams can achieve. McKinsey research shows that AI and low-code can improve developers’ productivity by as much as 45%, which could reduce development costs considerably.AI agents can help with many tasks on the developer's to-do list. As well as drafting code, they can help with scheduling meetings, producing report summaries, and even ordering the pizzas for a lunch and learn session.In late 2024, Microsoft launched Copilot Studio, a build-your-own AI agent platform with off-the-shelf bots for routine tasks. ServiceNow Assist improves productivity and efficiency, and Salesforce’s Agentforce supports everyday business tasks. These tools, trained on wide data sources, have expertise in many domains, and this is just the start.We’re observing the shift from AI assistants to autonomous AI agents, so-called agentic AI where a system makes decisions and takes actions to achieve its goal.Agentic AI represents one of the most valuable opportunities for engineering teams today. Autonomous agents will soon lead the delivery of repeatable and standardised tasks. As the tech evolves and agents get to know us better, they can do more than just regurgitate existing knowledge. They could become personalized advisors, analyzing our personal and team data to recommend how we can best manage resources, stakeholders, and projects. Intelligent data analysis could find gaps in the market, with faster software development supporting new product launches ahead of the competition.While the shift to AI-first development shows promise, it’s far from perfect. Google’s announcement that 25% of its code is now AI-generated has drawn criticism from industry insiders who point out the continuing need for review and debugging. Engineering teams must balance efficiency with quality, determining what \"good enough\" means from both user and enterprise perspectives.API ecosystems and cloud-native architecture are indispensable for developing and hosting AI-powered systems.Cloud-based tools are helping businesses stuck with slow rollouts due to disconnected systems. Combining cloud platforms like GCP or AWS with containers and CI/CD (continuous integration and continuous delivery) results in smoother workflows. Cloud-native isn’t suitable for some technologies needing access to sensitive data, but many that do transition find their efforts well-rewarded by gains in productivity, collaboration, and ease of use.Last year, Spotify moved to a fully cloud-native architecture. Before it had a labyrinth of legacy systems and siloed data centers needing manual deployment processes. New features took weeks or months to deploy. Its new streamlined system halved the time taken to deploy changes and reduced incident rates, making it faster and more efficient to launch new product features.Bridging varied internal and third-party data sources, APIs allow developers to pipe in the good-quality data needed for training and deploying AI systems. In response, many developers are now adopting API-first design, planning API integration during the early stages of product design.AI is driving innovation and changing how software engineers work together. This shift calls for new team structures and collaboration efforts across business functions. Though it may feel as if the sands are continuously shifting as businesses and technologies change, opportunities are within reach for engineering teams that can adapt and invest in their people.The traditional siloed approach to engineering has given way to more fluid cross-functional teams. In some tech departments, we’re seeing the rise of full-stack engineers who build applications from start to finish, taking responsibility for the front end, back end and infrastructure. For example, Netflix’s full-stack engineering teams combine development, operations, and data expertise. The centralized platform engineering team focuses on the developer experience. The team’s responsibilities span code creation to deployment, with dedicated internal customer support and resources that allow engineers to focus on their core responsibilities and domains of expertise.Data engineering has become essential to software development, particularly for AI. It provides the infrastructure for algorithms. Clean, structured data enables accurate predictions and automated decision-making while boosting model performance. High-performing engineering teams now seamlessly blend software and data practices, following examples like Airbnb's Data Portal project, which showed how to provide accessible data while maintaining security and quality.Unlike more predictable times where skills remained relevant for years or decades, the rapid advance of AI has dramatically shortened the half-life of technical skills—that is, the point where they need to be topped off. Engineering teams must now embed continuous learning into daily operations, combining formal and accredited training with hands-on experimentation to explore emerging opportunities like prompt engineering. To complement formal and accredited learning, sharing knowledge within your teams helps developers with the skills needed for project delivery. Stack Overflow for Teams brings AI and your knowledge community together to surface trusted answers into your developers' workflows.Need a refreshed knowledge management strategy for 2025?Stack Overflow for Teams is the enterprise knowledge management platform made for innovative teams.Adopting a \"fail forward\" mentality is crucial as teams experiment with AI and other emerging technologies. Engineering teams are embracing controlled experimentation and rapid iteration, learning from failures and building knowledge. Google's Project Oxygen showed what good management looks like in a tech-first firm. The structured program encouraged experimentation while maintaining proper risk management. It showcased the success of learning-oriented engineering cultures; teams with strong learning environments outperformed those without. It’s long been our view that prioritizing learning results in resilient, high-performing teams.Top engineering teams will combine emerging technologies with new ways of working. They’re not just adopting AI—they’re rethinking how software is developed and maintained as a result of it. Teams will need to stay agile to lead the way. Collaboration within the business and access to a multidisciplinary talent base is the recipe for success.Engineering teams should proactively scenario plan to manage uncertainty by adopting agile frameworks like the \"5Ws\" (Who, What, When, Where, and Why.) This approach allows organizations to tailor tech adoption strategies and marry regulatory compliance with innovation.Engineering teams should also actively address AI bias and ensure fair and responsible AI deployment. Many enterprises are hiring responsible AI specialists and ethicists as regulatory standards are now in force, including the EU AI Act, which impacts organizations with users in the European Union.As AI improves, the expertise and technical skills that proved valuable before need to be continually reevaluated. Organizations that successfully adopt AI and emerging tech will thrive. Engineering teams now need to have the talent and tech in place to meet the wave we’re in and where we’re headed.",
  "image": "https://cdn.stackoverflow.co/images/jo7n4k8s/production/334904781855a45b642d7c78798e1b1a88602d44-12000x6300.jpg?w=1200\u0026fm=png\u0026auto=format",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\u003cp\u003eIn 2025, forward-thinking engineering teams are reshaping their approach to work, combining emerging technologies with new approaches to collaboration. Successful teams are leaning into AI-powered engineering while rethinking their role in an AI-enhanced business world.\u003c/p\u003e\u003cp\u003eIn this article, we explore how top teams are adapting to AI-first development, embracing new ways of working, and adapting to stay ahead in unpredictable economic times.\u003c/p\u003e\u003cp\u003eThe world of business as a whole underwent significant upheaval in 2024, marked by ongoing \u003ca href=\"https://techcrunch.com/2025/01/14/tech-layoffs-2024-list/\"\u003elayoffs in tech firms\u003c/a\u003e and significant investment in AI across many industries including financial services and beyond. Engineering teams responded by adapting to the new market realities and building resilience into their strategy, combining new technologies and ways of working.\u003c/p\u003e\u003cp\u003eThe uptake of AI developer tools continues at pace. According to our \u003ca href=\"https://survey.stackoverflow.co/2024/\"\u003e2024 Developer Survey with input from over 65,000 developers\u003c/a\u003e, 76% of respondents were using or planning to use AI tools in their development process, up 6% from the year before. Many new AI firms have entered the arena, launching new tools and services including HUGS (Hugging Face for Generative AI Services,) an open-source tool to automate chatbots, and Tabnine which generates, explains and tests code, creating documentation and suggesting fixes. Enterprise\u0026#39;s refined focus on data-driven decisions means engineering teams need to adapt to respond quicker to business change. The traditional boundaries between development, operations, and data science are increasingly fluid. Engineers need to show their value through more than just coding skills; they must bring strategy, creativity, and problem-solving to the table.\u003c/p\u003e\u003cp\u003eSoftware development has always been fast-moving, with new tools transforming how engineers approach their role in driving innovation. In 2025, smart AI coding assistants and no-code low-code platforms are reshaping priorities and developments in API and cloud-native systems are creating more seamless workflows and improved efficiency.\u003c/p\u003e\u003cp\u003eThe initial wave of AI coding assistants has matured. These platforms can now do far more than just autocomplete code. AI assistants can support the full product development lifecycle, from requirements analysis to deployment and maintenance. They save time by letting engineers focus on more challenging tasks. \u003ca href=\"https://github.blog/news-insights/research/research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/\"\u003eEarly adoption data from GitHub\u0026#39;s Copilot \u003c/a\u003eshowed developers using the tool completed tasks 55% faster than those who didn\u0026#39;t.\u003c/p\u003e\u003cp\u003eThese AI coding tools have created new markets for no-code and low-code platforms, shifting engineering teams\u0026#39; priorities. Instead of focusing solely on writing code, engineers are becoming platform architects and automation specialists. They\u0026#39;re designing and maintaining the systems that enable citizen developers with limited coding skills to produce apps and software. This has opened up new career paths for developers to become trainers and system custodians.\u003c/p\u003e\u003cp\u003eEngineers collaborating with citizen developers inside the enterprise should lead on standards and uphold good governance and review processes. With increased risks from automated and algorithmic decision-making, a focus on cybersecurity has become a higher priority for tech teams and the C-suite. Engineering teams are implementing privacy-by-design principles from the start of development, using automated tools that scan for security vulnerabilities and privacy issues in code and AI model outputs. Engineers must implement robust data governance frameworks and ensure AI systems handle sensitive information appropriately.\u003c/p\u003e\u003cp\u003eAI advancements set new expectations about what development teams can achieve. \u003ca href=\"https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/navigating-the-generative-ai-disruption-in-software\"\u003eMcKinsey research\u003c/a\u003e shows that AI and low-code can improve developers’ productivity by as much as 45%, which could reduce development costs considerably.\u003c/p\u003e\u003cp\u003eAI agents can help with many tasks on the developer\u0026#39;s to-do list. As well as drafting code, they can help with scheduling meetings, producing report summaries, and even ordering the pizzas for a lunch and learn session.\u003c/p\u003e\u003cp\u003eIn late 2024, Microsoft launched \u003ca href=\"https://www.microsoft.com/en-gb/microsoft-copilot/microsoft-copilot-studio?ef_id=_k_Cj0KCQiAv628BhC2ARIsAIJIiK-selm92hXKQpt5pzk4jk2JlieED7xedvz8Ij4hA04jc9rf5CwPsm8aArdaEALw_wcB_k_\u0026amp;OCID=AIDcmmorqeo08r_SEM__k_Cj0KCQiAv628BhC2ARIsAIJIiK-selm92hXKQpt5pzk4jk2JlieED7xedvz8Ij4hA04jc9rf5CwPsm8aArdaEALw_wcB_k_\u0026amp;gad_source=1\u0026amp;gclid=Cj0KCQiAv628BhC2ARIsAIJIiK-selm92hXKQpt5pzk4jk2JlieED7xedvz8Ij4hA04jc9rf5CwPsm8aArdaEALw_wcB\"\u003eCopilot Studio\u003c/a\u003e, a build-your-own AI agent platform with off-the-shelf bots for routine tasks. ServiceNow Assist improves productivity and efficiency, and Salesforce’s Agentforce supports everyday business tasks. These tools, trained on wide data sources, have expertise in many domains, and this is just the start.\u003c/p\u003e\u003cp\u003eWe’re observing the shift from AI assistants to autonomous AI agents, so-called agentic AI where a system makes decisions and takes actions to achieve its goal.\u003c/p\u003e\u003cp\u003eAgentic AI represents one of the most valuable opportunities for engineering teams today. Autonomous agents will soon lead the delivery of repeatable and standardised tasks. As the tech evolves and agents get to know us better, they can do more than just regurgitate existing knowledge. They could become personalized advisors, analyzing our personal and team data to recommend how we can best manage resources, stakeholders, and projects. Intelligent data analysis could find gaps in the market, with faster software development supporting new product launches ahead of the competition.\u003c/p\u003e\u003cp\u003eWhile the shift to AI-first development shows promise, it’s far from perfect. \u003ca href=\"https://arstechnica.com/ai/2024/10/google-ceo-says-over-25-of-new-google-code-is-generated-by-ai/\"\u003eGoogle’s announcement\u003c/a\u003e that 25% of its code is now AI-generated has drawn criticism from industry insiders who point out the continuing need for review and debugging. Engineering teams must balance efficiency with quality, determining what \u0026#34;good enough\u0026#34; means from both user and enterprise perspectives.\u003c/p\u003e\u003cp\u003eAPI ecosystems and cloud-native architecture are indispensable for developing and hosting AI-powered systems.\u003c/p\u003e\u003cp\u003eCloud-based tools are helping businesses stuck with slow rollouts due to disconnected systems. Combining cloud platforms like GCP or AWS with containers and CI/CD (continuous integration and continuous delivery) results in smoother workflows. Cloud-native isn’t suitable for some technologies needing access to sensitive data, but many that do transition find their efforts well-rewarded by gains in productivity, collaboration, and ease of use.\u003c/p\u003e\u003cp\u003eLast year, \u003ca href=\"https://www.latesttechinsights.com/2024/03/case-study-spotify-cloud-.html\"\u003eSpotify moved\u003c/a\u003e to a fully cloud-native architecture. Before it had a labyrinth of legacy systems and siloed data centers needing manual deployment processes. New features took weeks or months to deploy. Its new streamlined system halved the time taken to deploy changes and reduced incident rates, making it faster and more efficient to launch new product features.\u003c/p\u003e\u003cp\u003eBridging varied internal and third-party data sources, APIs allow developers to pipe in the good-quality data needed for training and deploying AI systems. In response, many developers are now adopting API-first design, planning API integration during the early stages of product design.\u003c/p\u003e\u003cp\u003eAI is driving innovation and changing how software engineers work together. This shift calls for new team structures and collaboration efforts across business functions. Though it may feel as if the sands are continuously shifting as businesses and technologies change, opportunities are within reach for engineering teams that can adapt and invest in their people.\u003c/p\u003e\u003cp\u003eThe traditional siloed approach to engineering has given way to more fluid cross-functional teams. In some tech departments, we’re seeing the rise of full-stack engineers who build applications from start to finish, taking responsibility for the front end, back end and infrastructure. For example, \u003ca href=\"https://www.kandasoft.com/blog/structuring-your-product-engineering-team-for-growth-and-scalability#best-practices-in-building-successful-engineering-teams-netflix-developer-productivity-engineering-team\"\u003eNetflix’s full-stack engineering teams\u003c/a\u003e combine development, operations, and data expertise. The centralized platform engineering team focuses on the developer experience. The team’s responsibilities span code creation to deployment, with dedicated internal customer support and resources that allow engineers to focus on their core responsibilities and domains of expertise.\u003c/p\u003e\u003cp\u003eData engineering has become essential to software development, particularly for AI. It provides the infrastructure for algorithms. Clean, structured data enables accurate predictions and automated decision-making while boosting model performance. High-performing engineering teams now seamlessly blend software and data practices, following examples like Airbnb\u0026#39;s \u003ca href=\"https://atlan.com/airbnb-data-catalog-dataportal/\"\u003eData Portal project\u003c/a\u003e, which showed how to provide accessible data while maintaining security and quality.\u003c/p\u003e\u003cp\u003eUnlike more predictable times where skills remained relevant for years or decades, the rapid advance of AI has dramatically shortened \u003ca href=\"https://stackoverflow.blog/2024/01/16/Kian-Katanforoosh-standford-deep-learning-ai-skills/\"\u003ethe half-life of technical skills\u003c/a\u003e—that is, the point where they need to be topped off. Engineering teams must now embed continuous learning into daily operations, combining formal and accredited training with hands-on experimentation to explore emerging opportunities like prompt engineering. To complement formal and accredited learning, sharing knowledge within your teams helps developers with the skills needed for project delivery. \u003ca href=\"https://stackoverflow.co/teams/\"\u003eStack Overflow for Teams\u003c/a\u003e brings AI and your knowledge community together to surface trusted answers into your developers\u0026#39; workflows.\u003c/p\u003e\u003cdiv\u003e\u003ch2\u003eNeed a refreshed knowledge management strategy for 2025?\u003c/h2\u003e\u003cp\u003eStack Overflow for Teams is the enterprise knowledge management platform made for innovative teams.\u003c/p\u003e\u003c/div\u003e\u003cp\u003eAdopting a \u0026#34;fail forward\u0026#34; mentality is crucial as teams experiment with AI and other emerging technologies. Engineering teams are embracing controlled experimentation and rapid iteration, learning from failures and building knowledge. Google\u0026#39;s \u003ca href=\"https://rework.withgoogle.com/en/subjects/managers\"\u003eProject Oxygen\u003c/a\u003e showed what good management looks like in a tech-first firm. The structured program encouraged experimentation while maintaining proper risk management. It showcased the success of learning-oriented engineering cultures; teams with strong learning environments outperformed those without. It’s long been our view that \u003ca href=\"https://stackoverflow.co/teams/resources/prioritize-learning/\"\u003eprioritizing learning results in resilient, high-performing teams\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eTop engineering teams will combine emerging technologies with new ways of working. They’re not just adopting AI—they’re rethinking how software is developed and maintained as a result of it. Teams will need to stay agile to lead the way. Collaboration within the business and access to a multidisciplinary talent base is the recipe for success.\u003c/p\u003e\u003cp\u003eEngineering teams should proactively scenario plan to manage uncertainty by adopting agile frameworks like the \u0026#34;\u003ca href=\"https://www.reuters.com/legal/legalindustry/developing-your-companys-generative-ai-policy-start-with-an-agile-5ws-framework-2024-11-18/?utm_source=chatgpt.com\"\u003e5Ws\u003c/a\u003e\u0026#34; (Who, What, When, Where, and Why.) This approach allows organizations to tailor tech adoption strategies and marry regulatory compliance with innovation.\u003c/p\u003e\u003cp\u003eEngineering teams should also actively address AI bias and ensure fair and responsible AI deployment. Many enterprises are hiring responsible AI specialists and ethicists as regulatory standards are now in force, including the EU AI Act, which impacts organizations with users in the European Union.\u003c/p\u003e\u003cp\u003eAs AI improves, the expertise and technical skills that proved valuable before need to be continually reevaluated. Organizations that successfully adopt AI and emerging tech will thrive. Engineering teams now need to have the talent and tech in place to meet the wave we’re in and where we’re headed.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
