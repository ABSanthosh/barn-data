{
  "id": "7876073d-0b6b-41f5-8e8f-0f81c7fcb3da",
  "title": "What’s New in Bazel Plugin 2025.1",
  "link": "https://blog.jetbrains.com/idea/2025/04/what-s-new-in-bazel-plugin-2025-1/",
  "description": "We’re excited to tell you about all the changes we’ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we’ve been shipping updates to JetBrains Marketplace with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the […]",
  "author": "Justin Kaeser",
  "published": "Tue, 15 Apr 2025 13:12:01 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "build-system",
    "intellij",
    "idea",
    "releases",
    "bazel",
    "build",
    "build-tools",
    "intellij-idea",
    "java",
    "kotlin",
    "plugin",
    "python",
    "scala",
    "starlark"
  ],
  "byline": "Justin Kaeser",
  "length": 9959,
  "excerpt": "We're excited to tell you about all the changes we've made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we've been shipping updates to JetBrains Mar",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the IDE for Professional Development in Java and Kotlin Build System IntelliJ IntelliJ IDEA ReleasesWhat’s New in Bazel Plugin 2025.1 We’re excited to tell you about all the changes we’ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we’ve been shipping updates to JetBrains Marketplace with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the 2024.3 and 2025.1 versions of the Bazel plugin, but if you see something here that you’re missing, try upgrading! Here’s a more detailed look at what we improved and added: Spotlight features: Bazel 8, faster sync, Python, and Scala phased sync in action on the Bazel project Full Bazel 8 and nested modules support: Bazel 8 projects should now work seamlessly. This includes support for nested modules. This Bazel feature allows structuring large projects less monolithically, enabling teams to work on and import sub-modules somewhat independently, which the plugin now fully understands. You can import these modules individually or treat the whole repository as one unit. Phased sync (experimental): Try it! Designed to drastically reduce the time you spend waiting for initial project syncs. Enable this experimental mode under Settings | Build, Execution, Deployment | Build Tools | Bazel | Advanced Settings, and the plugin performs a quicker initial import phase. You can start browsing and editing your code almost immediately, while heavier tasks like resolving all dependencies and indexing generated code happen concurrently in the background. This means less upfront delay and fewer distracting red squiggles while background work completes. Python and Scala support: These languages are now officially supported targets. This means you get the full IDE experience: sync Python and Scala targets, enjoy code assistance during editing, run and debug your code – all integrated with Bazel’s build process. JVM project enhancements: smoother sailing Improved project structure handling: The plugin is now smarter at detecting common project layouts, particularly Maven-style structures where all sources in a directory belong to a single target. This translates to IntelliJ’s own features (like package prefix detection and source root identification), working more reliably out of the box. Getting started \u0026 managing dependencies: Less friction add dependencies on the fly Quick start project templates: For those new to Bazel or starting a fresh project, we’ve added basic project templates for Java and Kotlin. These provide a minimal, working Bazel setup (MODULE.bazel, BUILD files) so you’re not starting from a completely blank slate. Add dependencies directly from code: When you use a class from another part of your Bazel project that isn’t yet a dependency, IntelliJ’s standard Alt+Enter intention actions will now offer an Add dependency on module… option. Selecting this automatically finds the target defining the class and adds the necessary dependency line to your current target’s BUILD file. This is a significant time-saver, bypassing manual BUILD file editing and requiring no Bazel sync afterward. Working with targets: More convenient actions Shift-Shift to your target of choice Create Bazel packages from the context menu: Right-click a directory in the Project view and select the option to create a new Bazel package. The plugin will create the directory (if needed) and a blank BUILD or BUILD.bazel file, reducing boilerplate. Easier access from source file tabs: Right-clicking on an open editor tab now gives you quick actions to navigate to the corresponding BUILD file for that source file, or to copy the file’s Bazel target label (e.g. //path/to:target) to the clipboard for use elsewhere. You can assign keyboard shortcuts to these actions for maximum efficiency. Search Everywhere finds targets: Bazel targets are now integrated into IntelliJ IDEA’s powerful Search Everywhere (Shift+Shift) feature. Type part of a target name, and you can jump directly to its definition in the corresponding BUILD file. The preview shows you where you will go right away. Running tests: Debugging, coverage, and more run tests – with or without coverage Debugging and coverage for Bazel tests: You can now launch Bazel test targets directly from the IDE with the debugger attached or with code coverage enabled, using IntelliJ IDEA’s standard testing UI and tools. Run multiple tests easily: Right-click a directory in the Project tree view, or a target node in the Bazel tool window, to run all tests contained within that scope. This provides a convenient way to execute logical groups of tests without defining specific test_suite targets. More informative JUnit 5 output: For projects using JUnit 5, the test results for failed tests displayed in the IDE’s run console are now even more informative and include the whole stack trace. Navigation aids Clickable Targets in the Sync console: When the Bazel Sync console outputs messages containing target labels, those labels are now often hyperlinked. Clicking them will navigate you directly to the target’s definition in its BUILD file, useful for diagnosing sync issues or exploring project structure. Starlark language support: Improving the build language experience Starlark is the language of Bazel BUILD and .bzl files and we’re making it easier to write code in it. In-Editor Quick Documentation: Place your cursor on a native Bazel rule (like java_library) or its attributes within a BUILD or .bzl file and invoke Quick Documentation (Ctrl+Q or F1). You’ll see documentation directly in the editor – no need to constantly refer to the Bazel website. Comprehensive Code Completions: Get intelligent suggestions as you type for: Native Bazel rule names (java_..., py_...) and their parameters. File paths within your workspace. Target labels (e.g., //path/to:target, dependencies). External repository names and library targets (e.g., @maven//:). Visibility specifications (//visibility:public, //project:__pkg__).  Glob Function Expansion: Curious what files a glob([“*.java”]) expression actually matched during the last sync? You can now navigate on the glob function to see the expanded list of files, which is helpful for debugging glob patterns. Project View file editor (.bazelproject) Improving the experience of editing the plugin’s own configuration file. Enhanced Editor Experience: The .bazelproject file now has better syntax highlighting, making it easier to read. Standard Commenting: You can use the standard IDE shortcut (Ctrl+/ or Cmd+/) to toggle comments for lines in this file. Code Style Configuration: Control formatting options like indentation for your .bazelproject file under Settings | Editor | Code Style | Bazel ProjectView. Tools for project administrators: Taming complexity Advanced features for those maintaining the build infrastructure. Shard sync for large projects: If your project is so large that Bazel runs out of memory during sync, you can enable shard sync. Add shard_sync: true to your .bazelproject file. This tells the plugin to break the sync process into smaller, independent chunks (shards), significantly reducing the peak memory requirement for each chunk – at the cost of increased sync times. Managed .bazelproject for consistency: To ensure developers working in your monorepo have a consistent and sensible starting configuration, you can check a tools/intellij/.managed.bazelproject file into your repository. When a user imports the project for the first time, the plugin will use a copy of this managed file instead of potentially inconsistent application defaults, reducing setup friction and “works on my machine” issues. Import shared run configurations: Define standard run/debug configurations (e.g. for common services or test suites) in the format used by the original Bazel plugin by Google and check them into version control. Use the import_run_configurations directive in your .bazelproject file to tell the plugin which of these configurations should be automatically imported into the IDE during sync, making them readily available to the whole team. Credit where it’s due Big props to our external contributors, especially Mihai Toader for the excellent .bazelrc support and students from the University of Warsaw – Stanislaw Solarewicz, Piotr Plywacz, Robert Grigoryan, and Andzrej Jablonski – for many improvements to the Starlark editor experience. We welcome any contributions here. But I found a problem! We got you. Please report any issues, ideas, improvements straight to our issue tracker. You’ll also find us on the Bazel community Slack in the #intellij channel. See you there! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/ij-social_share_blog_1280x720_en-4.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the IDE for Professional Development in Java and Kotlin\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/build-system/\"\u003eBuild System\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/intellij/\"\u003eIntelliJ\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eWhat’s New in Bazel Plugin 2025.1\u003c/h2\u003e                    \n                    \n\u003cp\u003eWe’re excited to tell you about all the changes we’ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we’ve been shipping updates to \u003ca href=\"https://plugins.jetbrains.com/plugin/22977-bazel-eap-/edit/versions\" target=\"_blank\" rel=\"noopener\"\u003eJetBrains Marketplace\u003c/a\u003e with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the 2024.3 and 2025.1 versions of the Bazel plugin, but if you see something here that you’re missing, try upgrading!\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s a more detailed look at what we improved and added:\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003e\u003cstrong\u003eSpotlight features: Bazel 8, faster sync, Python, and Scala\u003c/strong\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1400\" height=\"775\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/phased-sync-1.webp\" alt=\"phased sync in action on the Bazel project\"/\u003e\u003cfigcaption\u003ephased sync in action on the Bazel project\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFull Bazel 8 and nested modules support:\u003c/strong\u003e Bazel 8 projects should now work seamlessly. This includes support for \u003cstrong\u003enested modules\u003c/strong\u003e. This Bazel feature allows structuring large projects less monolithically, enabling teams to work on and import sub-modules somewhat independently, which the plugin now fully understands. You can import these modules individually or treat the whole repository as one unit.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ePhased sync (experimental): Try it!\u003c/strong\u003e Designed to drastically reduce the time you spend waiting for initial project syncs. Enable this experimental mode under \u003cem\u003eSettings | Build, Execution, Deployment | Build Tools | Bazel | Advanced Settings\u003c/em\u003e, and the plugin performs a quicker initial import phase. You can start browsing and editing your code almost immediately, while heavier tasks like resolving all dependencies and indexing generated code happen concurrently in the background. This means less upfront delay and fewer distracting red squiggles while background work completes.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ePython and Scala support:\u003c/strong\u003e These languages are now officially supported targets. This means you get the full IDE experience: sync Python and Scala targets, enjoy code assistance during editing, run and debug your code – all integrated with Bazel’s build process.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eJVM project enhancements: smoother sailing\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eImproved project structure handling:\u003c/strong\u003e The plugin is now smarter at detecting common project layouts, particularly Maven-style structures where all sources in a directory belong to a single target. This translates to IntelliJ’s own features (like package prefix detection and source root identification), working more reliably out of the box.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eGetting started \u0026amp; managing dependencies: Less friction\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1400\" height=\"721\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/add-module-dependency-1.webp\" alt=\"add dependencies on the fly\"/\u003e\u003cfigcaption\u003eadd dependencies on the fly\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cstrong\u003eQuick start project templates:\u003c/strong\u003e\u003c/strong\u003e For those new to Bazel or starting a fresh project, we’ve added basic project templates for Java and Kotlin. These provide a minimal, working Bazel setup (\u003ccode\u003eMODULE.bazel\u003c/code\u003e, \u003ccode\u003eBUILD\u003c/code\u003e files) so you’re not starting from a completely blank slate.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003cstrong\u003eAdd dependencies directly from code\u003c/strong\u003e:\u003c/strong\u003e When you use a class from another part of your Bazel project that isn’t yet a dependency, IntelliJ’s standard \u003ckbd\u003eAlt+Enter\u003c/kbd\u003e intention actions will now offer an \u003cem\u003eAdd dependency on module… \u003c/em\u003eoption. Selecting this automatically finds the target defining the class and adds the necessary dependency line to your current target’s \u003ccode\u003eBUILD\u003c/code\u003e file. This is a significant time-saver, bypassing manual \u003ccode\u003eBUILD\u003c/code\u003e file editing and \u003cstrong\u003erequiring no Bazel sync\u003c/strong\u003e afterward.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003e\u003cstrong\u003eWorking with targets: More convenient actions\u003c/strong\u003e\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1400\" height=\"560\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/targets-search-everywhere-1.webp\" alt=\"Shift-Shift to your target of choice\"/\u003e\u003cfigcaption\u003e\u003ckbd\u003eShift-Shift\u003c/kbd\u003e to your target of choice\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCreate Bazel packages from the context menu:\u003c/strong\u003e Right-click a directory in the \u003cem\u003eProject\u003c/em\u003e view and select the option to create a new Bazel package. The plugin will create the directory (if needed) and a blank \u003ccode\u003eBUILD\u003c/code\u003e or \u003ccode\u003eBUILD.bazel\u003c/code\u003e file, reducing boilerplate.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003cstrong\u003eEasier access from source file tabs\u003c/strong\u003e:\u003c/strong\u003e Right-clicking on an open editor tab now gives you quick actions to navigate to the corresponding BUILD file for that source file, or to copy the file’s Bazel target label (e.g. \u003ccode\u003e//path/to:target\u003c/code\u003e) to the clipboard for use elsewhere. You can assign keyboard shortcuts to these actions for maximum efficiency.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cem\u003eSearch Everywhere\u003c/em\u003e finds targets\u003c/strong\u003e\u003c/strong\u003e: Bazel targets are now integrated into IntelliJ IDEA’s powerful \u003cem\u003eSearch Everywhere\u003c/em\u003e (\u003ckbd\u003eShift+Shift\u003c/kbd\u003e) feature. Type part of a target name, and you can jump directly to its definition in the corresponding \u003ccode\u003eBUILD\u003c/code\u003e file. The preview shows you where you will go right away.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eRunning tests: Debugging, coverage, and more\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2080\" height=\"468\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/run-with-coverage.png\" alt=\"run tests - with or without coverage\"/\u003e\u003cfigcaption\u003erun tests – with or without coverage\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDebugging and coverage for Bazel tests:\u003c/strong\u003e You can now launch Bazel test targets directly from the IDE with the debugger attached or with code coverage enabled, using IntelliJ IDEA’s standard testing UI and tools.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003cstrong\u003eRun multiple tests easily\u003c/strong\u003e:\u003c/strong\u003e Right-click a directory in the \u003cem\u003eProject\u003c/em\u003e tree view, or a target node in the Bazel tool window, to run all tests contained within that scope. This provides a convenient way to execute logical groups of tests without defining specific \u003ccode\u003etest_suite\u003c/code\u003e targets.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMore informative JUnit 5 output:\u003c/strong\u003e For projects using JUnit 5, the test results for failed tests displayed in the IDE’s run console are now even more informative and include the whole stack trace.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eNavigation aids\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eClickable Targets in the \u003cem\u003eSync\u003c/em\u003e console:\u003c/strong\u003e When the Bazel Sync console outputs messages containing target labels, those labels are now often hyperlinked. Clicking them will navigate you directly to the target’s definition in its \u003ccode\u003eBUILD\u003c/code\u003e file, useful for diagnosing sync issues or exploring project structure.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eStarlark language support: Improving the build language experience\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eStarlark is the language of Bazel \u003ccode\u003eBUILD\u003c/code\u003e and \u003ccode\u003e.bzl\u003c/code\u003e files and we’re making it easier to write code in it.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2452\" height=\"734\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/target-completion.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIn-Editor Quick Documentation:\u003c/strong\u003e Place your cursor on a native Bazel rule (like java_library) or its attributes within a \u003ccode\u003eBUILD\u003c/code\u003e or \u003ccode\u003e.bzl\u003c/code\u003e file and invoke \u003cem\u003eQuick Documentation\u003c/em\u003e (\u003ckbd\u003eCtrl+Q\u003c/kbd\u003e or \u003ckbd\u003eF1\u003c/kbd\u003e). You’ll see documentation directly in the editor – no need to constantly refer to the Bazel website.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eComprehensive Code Completions:\u003c/strong\u003e Get intelligent suggestions as you type for: \u003cscreenshots\u003e\n\n\u003c/screenshots\u003e\n\u003cul\u003e\n\u003cli\u003eNative Bazel rule names (\u003ccode\u003ejava_...\u003c/code\u003e, \u003ccode\u003epy_...\u003c/code\u003e) and their parameters.\u003c/li\u003e\n\n\n\n\u003cli\u003eFile paths within your workspace.\u003c/li\u003e\n\n\n\n\u003cli\u003eTarget labels (e.g., \u003ccode\u003e//path/to:target\u003c/code\u003e, dependencies).\u003c/li\u003e\n\n\n\n\u003cli\u003eExternal repository names and library targets (e.g., \u003ccode\u003e@maven//:\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eVisibility specifications (\u003ccode\u003e//visibility:public\u003c/code\u003e, \u003ccode\u003e//project:__pkg__\u003c/code\u003e). \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGlob Function Expansion:\u003c/strong\u003e Curious what files a glob([“*.java”]) expression actually matched during the last sync? You can now navigate on the glob function to see the expanded list of files, which is helpful for debugging glob patterns.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cem\u003eProject View\u003c/em\u003e\u003cstrong\u003e file editor (\u003ccode\u003e.bazelproject\u003c/code\u003e)\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eImproving the experience of editing the plugin’s own configuration file.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced Editor Experience:\u003c/strong\u003e The \u003ccode\u003e.bazelproject\u003c/code\u003e file now has better syntax highlighting, making it easier to read.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eStandard Commenting:\u003c/strong\u003e You can use the standard IDE shortcut (\u003ckbd\u003eCtrl+/\u003c/kbd\u003e or \u003ckbd\u003eCmd+/\u003c/kbd\u003e) to toggle comments for lines in this file.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCode Style Configuration:\u003c/strong\u003e Control formatting options like indentation for your \u003ccode\u003e.bazelproject\u003c/code\u003e file under \u003cem\u003eSettings | Editor | Code Style | Bazel ProjectView\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eTools for project administrators: Taming complexity\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAdvanced features for those maintaining the build infrastructure.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eShard sync for large projects:\u003c/strong\u003e If your project is so large that Bazel runs out of memory during sync, you can enable shard sync. Add \u003ccode\u003eshard_sync: true\u003c/code\u003e to your \u003ccode\u003e.bazelproject\u003c/code\u003e file. This tells the plugin to break the sync process into smaller, independent chunks (shards), significantly reducing the peak memory requirement for each chunk – at the cost of increased sync times.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eManaged \u003ccode\u003e.bazelproject\u003c/code\u003e for consistency:\u003c/strong\u003e To ensure developers working in your monorepo have a consistent and sensible starting configuration, you can check a \u003ccode\u003etools/intellij/.managed.bazelproject\u003c/code\u003e file into your repository. When a user imports the project for the first time, the plugin will use a copy of this managed file instead of potentially inconsistent application defaults, reducing setup friction and “works on my machine” issues.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eImport shared run configurations:\u003c/strong\u003e Define standard run/debug configurations (e.g. for common services or test suites) in the format used by the original Bazel plugin by Google and check them into version control. Use the \u003ccode\u003eimport_run_configurations\u003c/code\u003e directive in your \u003ccode\u003e.bazelproject\u003c/code\u003e file to tell the plugin which of these configurations should be automatically imported into the IDE during sync, making them readily available to the whole team.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eCredit where it’s due\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eBig props to our external contributors, especially Mihai Toader for the excellent \u003ccode\u003e.bazelrc\u003c/code\u003e support and students from the University of Warsaw – Stanislaw Solarewicz, Piotr Plywacz, Robert Grigoryan, and Andzrej Jablonski – for many improvements to the Starlark editor experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe welcome any contributions \u003ca href=\"http://github.com/JetBrains/hirschgarten/\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eBut I found a problem!\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe got you. Please report any issues, ideas, improvements straight to \u003ca href=\"http://youtrack.jetbrains.com/issues/bazel\" target=\"_blank\" rel=\"noopener\"\u003eour issue tracker\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou’ll also find us on the\u003ca href=\"https://bazelbuild.slack.com/ssb/redirect\" target=\"_blank\" rel=\"noopener\"\u003e Bazel community Slack\u003c/a\u003e in the \u003ca href=\"https://bazelbuild.slack.com/archives/C025SBYFC4E\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003e#intellij\u003c/code\u003e channel\u003c/a\u003e. See you there!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
