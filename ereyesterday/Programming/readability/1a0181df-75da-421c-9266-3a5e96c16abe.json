{
  "id": "1a0181df-75da-421c-9266-3a5e96c16abe",
  "title": "AWS CodeBuild Adds Parallel Test Execution for Faster CI",
  "link": "https://www.infoq.com/news/2025/04/aws-codebuild-parallel-test/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "AWS CodeBuild now supports parallel test execution, significantly reducing build times by allowing concurrent test suite runs across multiple environments. This feature addresses long CI pipeline cycles that impede productivity and increase costs. With intelligent test distribution and automatic result merging, developers can enhance efficiency and streamline feedback loops. By Steef-Jan Wiggers",
  "author": "Steef-Jan Wiggers",
  "published": "Sat, 05 Apr 2025 10:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "AWS",
    "Cloud",
    "Build",
    "Continuous Integration",
    "Amazon Web Services",
    "Amazon",
    "Architecture \u0026 Design",
    "DevOps",
    "Development",
    "news"
  ],
  "byline": "Steef-Jan Wiggers",
  "length": 4350,
  "excerpt": "AWS CodeBuild now supports parallel test execution, significantly reducing build times by allowing concurrent test suite runs across multiple environments. This feature addresses long CI pipeline cycl",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250328105617-1/apple-touch-icon.png",
  "text": "AWS has announced the availability of parallel test execution in AWS CodeBuild, a fully-managed continuous integration service. According to the company, this new feature significantly reduces build times by allowing test suites to run concurrently across multiple build compute environments. The announcement highlights the growing challenge of lengthy test execution times in continuous integration (CI) pipelines as projects become increasingly complex. These long cycles can delay feature delivery, hinder developer productivity, and increase costs. Thomas Fernandez wrote in a Semaphore blog post on parallel testing: Parallel testing lets us do more while waiting less. It’s an essential tool to keep sharp and ready so we can always establish a fast feedback loop.  With parallel test execution in CodeBuild, developers can now configure their build process to split test suites and run them in parallel across multiple independent build nodes. CodeBuild provides environment variables to identify the current node and the total number of nodes, enabling intelligent test distribution. The feature supports a sharding approach with two main strategies: Equal distribution: Sorts test files alphabetically and distributes them evenly across parallel environments. Stability: Uses a consistent hashing algorithm to maintain file-to-shard assignments even when test files are added or removed. To enable parallel testing, developers configure the batch fanout section in their buildspec.xml file, specifying the desired level of parallelism. The pre-installed codebuild-tests-run utility is used in the build step to manage test execution and sharding based on the chosen strategy. A sample of a buildspec.yml that shows parallel test execution with Cucumber on a Linux platform looks like: version: 0.2 batch: fast-fail: false build-fanout: parallelism: 5 ignore-failure: false phases: install: commands: - echo 'Installing Ruby dependencies' - gem install bundler - bundle install pre_build: commands: - echo 'prebuild' build: commands: - echo 'Running Cucumber Tests' - cucumber --init - | codebuild-tests-run \\ --test-command \"cucumber\" \\ --files-search \"codebuild-glob-search '**/*.feature'\" post_build: commands: - echo \"Test execution completed\" CodeBuild also offers automatic merging of test reports from the parallel executions into a single, consolidated test summary. This simplifies result analysis by providing aggregated pass/fail statuses, test durations, and failure details in the CodeBuild console, via the AWS CLI, or through integration with other reporting tools. (Source: AWS Documentation) A demonstration highlighted in an AWS blog post on the feature showed a reduction in total test time from 35 minutes to 6 minutes (including environment provisioning) for a Python project with 1,800 tests when running on ten parallel compute environments. Sébastien Stormacq, a principal developer advocate at AWS, wrote: The 1,800 tests of the demo project take one second each to complete. When I run this test suite sequentially, it took 35 minutes to complete. When I run the test suite in parallel on ten compute environments, it took 6 minutes to complete, including the time to provision the environments. The parallel run took 17.9 percent of the time of the sequential run. This new capability is compatible with all testing frameworks, and the AWS documentation provides examples for popular languages and frameworks like Django, Elixir, Go, Java (Maven), Javascript (Jest), Kotlin, PHPUnit, Pytest, Ruby (Cucumber), and Ruby (RSpec). For frameworks with specific requirements for test file lists, CodeBuild provides the CODEBUILD_CURRENT_SHARD_FILES environment variable, which contains a newline-separated list of test files for the current shard. Parallel test execution in AWS CodeBuild is available today in all AWS regions where CodeBuild is offered, across all three compute modes: on-demand, reserved capacity, and AWS Lambda compute, with no additional cost beyond the standard CodeBuild pricing for the resources used. About the Author Steef-Jan Wiggers",
  "image": "https://res.infoq.com/news/2025/04/aws-codebuild-parallel-test/en/headerimage/generatedHeaderImage-1743378426210.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAWS has announced the availability of parallel test execution in \u003ca href=\"https://aws.amazon.com/codebuild/\"\u003eAWS CodeBuild\u003c/a\u003e, a fully-managed continuous integration service. According to the company, this new feature significantly reduces build times by allowing test suites to run concurrently across multiple build compute environments.\u003c/p\u003e\n\n\u003cp\u003eThe announcement highlights the growing challenge of lengthy test execution times in \u003ca href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#continuous_integration\"\u003econtinuous integration\u003c/a\u003e (CI) pipelines as projects become increasingly complex. These long cycles can delay feature delivery, hinder developer productivity, and increase costs.\u003c/p\u003e\n\n\u003cp\u003eThomas Fernandez wrote in a Semaphore \u003ca href=\"https://semaphore.io/blog/revving-up-continuous-integration-with-parallel-testing\"\u003eblog post on parallel testing\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eParallel testing lets us do more while waiting less. It’s an essential tool to keep sharp and ready so we can always establish a fast feedback loop. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith parallel test execution in CodeBuild, developers can now configure their build process to split test suites and run them in parallel across multiple independent build nodes. CodeBuild provides environment variables to identify the current node and the total number of nodes, enabling intelligent test distribution. The feature supports a sharding approach with two main strategies:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEqual distribution: Sorts test files alphabetically and distributes them evenly across parallel environments.\u003c/li\u003e\n\t\u003cli\u003eStability: Uses a consistent hashing algorithm to maintain file-to-shard assignments even when test files are added or removed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo enable parallel testing, developers configure the \u003ca href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/batch-build-buildspec.html#build-spec.batch.build-fanout\"\u003ebatch fanout\u003c/a\u003e section in their buildspec.xml file, specifying the desired level of parallelism. The pre-installed \u003ca href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/parallel-test-tests-run.html\"\u003ecodebuild-tests-run\u003c/a\u003e utility is used in the build step to manage test execution and sharding based on the chosen strategy. A sample of a buildspec.yml that shows parallel test execution with Cucumber on a Linux platform looks like:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eversion: 0.2\n\nbatch:\n  fast-fail: false\n  build-fanout:\n    parallelism: 5\n    ignore-failure: false\n\nphases:\n  install:\n    commands:\n      - echo \u0026#39;Installing Ruby dependencies\u0026#39;\n      - gem install bundler\n      - bundle install\n  pre_build:\n    commands:\n      - echo \u0026#39;prebuild\u0026#39;\n  build:\n    commands:\n      - echo \u0026#39;Running Cucumber Tests\u0026#39;\n      - cucumber --init\n      - |\n        codebuild-tests-run \\\n         --test-command \u0026#34;cucumber\u0026#34; \\\n         --files-search \u0026#34;codebuild-glob-search \u0026#39;**/*.feature\u0026#39;\u0026#34;\n  post_build:\n    commands:\n      - echo \u0026#34;Test execution completed\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCodeBuild also offers automatic merging of test reports from the parallel executions into a single, consolidated test summary. This simplifies result analysis by providing aggregated pass/fail statuses, test durations, and failure details in the \u003ca href=\"https://console.aws.amazon.com/codebuild\"\u003eCodeBuild console\u003c/a\u003e, via the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eAWS CLI\u003c/a\u003e, or through integration with other reporting tools.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://docs.aws.amazon.com/images/codebuild/latest/userguide/images/parallel-test.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(Source: AWS \u003ca href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/parallel-test.html\"\u003eDocumentation\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eA demonstration highlighted in an AWS \u003ca href=\"https://aws.amazon.com/blogs/aws/accelerating-ci-with-aws-codebuild-parallel-test-execution-now-available/\"\u003eblog post\u003c/a\u003e on the feature showed a reduction in total test time from 35 minutes to 6 minutes (including environment provisioning) for a Python project with 1,800 tests when running on ten parallel compute environments.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://x.com/sebsto\"\u003eSébastien Stormacq\u003c/a\u003e, a principal developer advocate at AWS, wrote:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe 1,800 tests of the demo project take one second each to complete. When I run this test suite sequentially, it took 35 minutes to complete. When I run the test suite in parallel on ten compute environments, it took 6 minutes to complete, including the time to provision the environments. The parallel run took 17.9 percent of the time of the sequential run.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis new capability is compatible with all testing frameworks, and the AWS \u003ca href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/sample-parallel-test.html\"\u003edocumentation\u003c/a\u003e provides examples for popular languages and frameworks like Django, Elixir, Go, Java (Maven), Javascript (Jest), Kotlin, PHPUnit, Pytest, Ruby (Cucumber), and Ruby (RSpec). For frameworks with specific requirements for test file lists, CodeBuild provides the CODEBUILD_CURRENT_SHARD_FILES environment variable, which contains a newline-separated list of test files for the current shard.\u003c/p\u003e\n\n\u003cp\u003eParallel test execution in AWS CodeBuild is available today in all AWS regions where CodeBuild is offered, across all three compute modes: on-demand, reserved capacity, and AWS Lambda compute, with no additional cost beyond the standard CodeBuild pricing for the resources used.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Steef~Jan-Wiggers\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSteef-Jan Wiggers\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-05T00:00:00Z",
  "modifiedTime": null
}
