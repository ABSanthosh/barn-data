{
  "id": "667ed50e-fc4b-46d9-b347-8fecbdb9f5f7",
  "title": "Zendesk Streamlines Infrastructure Provisioning with Foundation Interface Platform",
  "link": "https://www.infoq.com/news/2025/07/zendesk-interface-platform/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Zendesk has unveiled its new Foundation Interface, a unified platform designed to transform infrastructure provisioning into a fully self-service experience. This platform enables engineers to request infrastructure components, such as databases, object storage, compute resources, and secrets, by simply defining requirements in a declarative YAML file. By Craig Risi",
  "author": "Craig Risi",
  "published": "Mon, 21 Jul 2025 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Infrastructure",
    "DevOps",
    "news"
  ],
  "byline": "Craig Risi",
  "length": 5913,
  "excerpt": "Zendesk has unveiled its new Foundation Interface, a unified platform designed to transform infrastructure provisioning into a fully self-service experience. This platform enables engineers to request",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250717100249/apple-touch-icon.png",
  "text": "Zendesk has unveiled its new Foundation Interface, a unified platform designed to transform infrastructure provisioning into a fully self-service experience. This platform enables engineers to request infrastructure components, such as databases, object storage, compute resources, and secrets, by simply defining requirements in a declarative YAML file. These requests are then automatically validated, provisioned, and monitored through a seamless workflow integrated with Spinnaker and Kubernetes. The result is a major reduction in the time, friction, and uncertainty that previously accompanied infrastructure requests. At the heart of this transformation lies a robust internal architecture that Zendesk engineers describe as a \"genie and helpers\" model. The Gatekeeper acts as the initial validator of requests, ensuring correct syntax, resource definitions, and permission scopes. Once approved, requests are routed to the Orchestrator, which breaks them down into Kubernetes-native constructs, specifically, Custom Resources (CRs). These CRs are then handled by domain-specific Kubernetes operators. The Watchdog component continuously monitors the state of these Custom Resources, ensuring all provisioning tasks succeed and signaling Spinnaker when it is safe to proceed with application deployments. Kubernetes operators are central to this process. An operator is a software extension that uses Kubernetes APIs and the controller pattern to manage complex, stateful applications or infrastructure services. Operators are typically implemented using controller frameworks such as the Operator SDK, Kubebuilder, or Metacontroller. These frameworks enable teams to define Custom Resource Definitions (CRDs) that extend the Kubernetes API to include new object types, for example, an Aurora Database or a Redis instance. Paired with each CRD is a controller loop that watches for changes to these resources and reconciles the desired state with the actual cluster state. In practice, this means that when an engineer requests a database through the Foundation Interface, the corresponding operator provisions that database by interfacing with cloud provider APIs, applies configuration, and monitors for success or failure, all without human intervention. This model ensures that each infrastructure component, be it S3 buckets, RDS instances, or more bespoke services, has a dedicated operator that knows how to provision, configure, and manage its lifecycle. Operators are designed to be idempotent, meaning they can safely reapply the desired state if conditions change, and they can handle edge cases or error recovery without manual intervention. The use of Kubernetes-native tools also means that Zendesk benefits from observability, auditability, and consistency across all provisioned resources. By integrating this architecture with Spinnaker pipelines, Zendesk engineers can now deploy applications alongside their supporting infrastructure in a single, repeatable flow. The Foundation Interface ensures that infrastructure is provisioned securely and consistently, with automated checks and centralized tracking. Developers are no longer required to submit tickets or wait for manual approvals; they simply write a YAML file and trigger a deployment. The system handles everything else, from validation and resource creation to health checks and status reporting. Darragh Kennedy, Director of Software Engineering at Zendesk, shared on LinkedIn that the journey toward a self-service infrastructure began years ago with the creation of the Foundation group. He highlighted how the team \"built this from the ground up and iterated on it over the years to create a flexible and robust entry point\", underscoring the carefully engineered foundation behind the platform. His post illustrates the long-term commitment and internal evolution leading to the current system: \"It seems like an age ago that we created the Zendesk Foundation group... we built this from the ground up and iterated on it over the years to create a flexible and robust entry point.\" This commentary reflects a deeper understanding of the engineering effort behind the Foundation Interface, emphasizing that it's not a quick fix but a mature, iterative platform designed to scale with Zendesk's engineering needs. However, functionality like this is not unique to Zendesk. A recent example is Pulumi IDP, launched in May 2025. It offers a \"golden path\" through standardized infrastructure components and a private registry. This allows developers to consume reusable, policy‑approved configurations (in YAML) for provisioning infrastructure safely and efficiently. Unlike portal‑centric platforms, Pulumi IDP focuses tightly on infrastructure delivery patterns shaped and consumed via platform engineering practices. The broader industry trend toward Internal Developer Platforms (IDPs) built on Kubernetes is gaining momentum. These platforms abstract Kubernetes complexity behind declarative interfaces and pre‑packaged workflows, enabling teams to self‑serve environments, deploy apps, and manage resources without needing to learn Kubernetes internals. Analysts highlight that success depends not only on technology but also on clear documentation, developer education, and strong platform governance Platform Engineering. These parallels demonstrate that Zendesk's choice to define infrastructure through YAML, validated via Kubernetes CustomResources and orchestrated through operators and pipelines, aligns closely with a growing movement. Organizations across sectors are adopting Kubernetes‑based self‑service platforms that abstract complexity, enforce policy, and promote developer productivity, just as Zendesk's Foundation Interface aims to do. About the Author Craig Risi",
  "image": "https://res.infoq.com/news/2025/07/zendesk-interface-platform/en/headerimage/generatedHeaderImage-1752833463855.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp dir=\"ltr\"\u003eZendesk has unveiled its new \u003ca href=\"https://zendesk.engineering/a-journey-to-empowerment-how-zendesk-engineers-transformed-infrastructure-provisioning-377769097cf7\"\u003eFoundation Interface\u003c/a\u003e, a unified platform designed to transform infrastructure provisioning into a fully self-service experience. This platform enables engineers to request infrastructure components, such as databases, object storage, compute resources, and secrets, by simply defining requirements in a \u003ca href=\"https://docs.openrewrite.org/reference/yaml-format-reference\"\u003edeclarative YAML file.\u003c/a\u003e These requests are then automatically validated, provisioned, and monitored through a seamless workflow integrated with \u003ca href=\"https://spinnaker.io/\"\u003eSpinnaker\u003c/a\u003e and \u003ca href=\"https://kubernetes.io/\"\u003eKubernetes\u003c/a\u003e. The result is a major reduction in the time, friction, and uncertainty that previously accompanied infrastructure requests.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eAt the heart of this transformation lies a robust internal architecture that Zendesk engineers describe as a \u0026#34;genie and helpers\u0026#34; model. The Gatekeeper acts as the initial validator of requests, ensuring correct syntax, resource definitions, and permission scopes. Once approved, requests are routed to the Orchestrator, which breaks them down into Kubernetes-native constructs, specifically, Custom Resources (CRs). These CRs are then handled by domain-specific Kubernetes operators. The Watchdog component continuously monitors the state of these Custom Resources, ensuring all provisioning tasks succeed and signaling Spinnaker when it is safe to proceed with application deployments.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eKubernetes operators are central to this process. An operator is a software extension that uses Kubernetes APIs and the controller pattern to manage complex, stateful applications or infrastructure services.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eOperators are typically implemented using controller frameworks such as the \u003ca href=\"https://sdk.operatorframework.io/\"\u003eOperator SDK\u003c/a\u003e, \u003ca href=\"https://book.kubebuilder.io/\"\u003eKubebuilder\u003c/a\u003e, or \u003ca href=\"https://metacontroller.github.io/metacontroller/intro.html\"\u003eMetacontroller\u003c/a\u003e. These frameworks enable teams to define \u003ca href=\"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/\"\u003eCustom Resource Definitions\u003c/a\u003e (CRDs) that extend the Kubernetes API to include new object types, for example, an \u003ca href=\"https://aws.amazon.com/rds/aurora/\"\u003eAurora Database\u003c/a\u003e or a\u003ca href=\"https://redis.io/\"\u003e Redis instance\u003c/a\u003e. Paired with each CRD is a controller loop that watches for changes to these resources and reconciles the desired state with the actual cluster state.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eIn practice, this means that when an engineer requests a database through the Foundation Interface, the corresponding operator provisions that database by interfacing with cloud provider APIs, applies configuration, and monitors for success or failure, all without human intervention.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eThis model ensures that each infrastructure component, be it S3 buckets, RDS instances, or more bespoke services, has a dedicated operator that knows how to provision, configure, and manage its lifecycle. Operators are designed to be idempotent, meaning they can safely reapply the desired state if conditions change, and they can handle edge cases or error recovery without manual intervention. The use of Kubernetes-native tools also means that Zendesk benefits from observability, auditability, and consistency across all provisioned resources.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eBy integrating this architecture with Spinnaker pipelines, Zendesk engineers can now deploy applications alongside their supporting infrastructure in a single, repeatable flow. The Foundation Interface ensures that infrastructure is provisioned securely and consistently, with automated checks and centralized tracking. Developers are no longer required to submit tickets or wait for manual approvals; they simply write a YAML file and trigger a deployment. The system handles everything else, from validation and resource creation to health checks and status reporting.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eDarragh Kennedy, Director of Software Engineering at Zendesk, \u003ca href=\"https://www.linkedin.com/pulse/resilient-hardened-foundation-darragh-kennedy-isglc/\"\u003eshared on LinkedIn\u003c/a\u003e that the journey toward a self-service infrastructure began years ago with the creation of the Foundation group. He highlighted how the team \u0026#34;built this from the ground up and iterated on it over the years to create a flexible and robust entry point\u0026#34;, underscoring the carefully engineered foundation behind the platform.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eHis post illustrates the long-term commitment and internal evolution leading to the current system:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp dir=\"ltr\"\u003e\u0026#34;It seems like an age ago that we created the Zendesk Foundation group... we built this from the ground up and iterated on it over the years to create a flexible and robust entry point.\u0026#34;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp dir=\"ltr\"\u003eThis commentary reflects a deeper understanding of the engineering effort behind the Foundation Interface, emphasizing that it\u0026#39;s not a quick fix but a mature, iterative platform designed to scale with Zendesk\u0026#39;s engineering needs.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eHowever, functionality like this is not unique to Zendesk. A recent example is \u003ca href=\"https://www.infoq.com/news/2025/05/pulumi-idp/\"\u003ePulumi IDP\u003c/a\u003e, launched in May 2025. It offers a \u0026#34;golden path\u0026#34; through standardized infrastructure components and a private registry. This allows developers to consume reusable, policy‑approved configurations (in YAML) for provisioning infrastructure safely and efficiently. Unlike portal‑centric platforms, Pulumi IDP focuses tightly on infrastructure delivery patterns shaped and consumed via platform engineering practices.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eThe broader industry trend toward \u003ca href=\"https://platformengineering.org/blog/why-companies-fail-at-internal-developer-platforms\"\u003eInternal Developer Platforms (IDPs)\u003c/a\u003e built on Kubernetes is gaining momentum. These platforms abstract Kubernetes complexity behind declarative interfaces and pre‑packaged workflows, enabling teams to self‑serve environments, deploy apps, and manage resources without needing to learn Kubernetes internals. Analysts highlight that success depends not only on technology but also on clear documentation, developer education, and strong platform governance Platform Engineering.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eThese parallels demonstrate that Zendesk\u0026#39;s choice to define infrastructure through YAML, validated via \u003ca href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\"\u003eKubernetes CustomResources\u003c/a\u003e and orchestrated through operators and pipelines, aligns closely with a growing movement. Organizations across sectors are adopting Kubernetes‑based self‑service platforms that abstract complexity, enforce policy, and promote developer productivity, just as Zendesk\u0026#39;s Foundation Interface aims to do.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Craig-Risi\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eCraig Risi\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-07-21T00:00:00Z",
  "modifiedTime": null
}
