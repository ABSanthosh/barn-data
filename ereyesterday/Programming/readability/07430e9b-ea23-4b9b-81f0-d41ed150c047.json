{
  "id": "07430e9b-ea23-4b9b-81f0-d41ed150c047",
  "title": "How GitHub Built Sub-Issues into Its Issue Tracking System",
  "link": "https://www.infoq.com/news/2025/04/github-subissues-journey/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Coinciding with the generally availability of sub-issues, GitHub engineer Shaun Wong shared insights about how they added support for hierarchical issue structures, the lessons learned during development, and the key role sub-issues played in their workflow. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Sat, 19 Apr 2025 17:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Design",
    "github",
    "Issue Tracking Tools",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 2794,
  "excerpt": "Coinciding with the generally availability of sub-issues, GitHub engineer Shaun Wong shared insights about how they added support for hierarchical issue structures, the lessons learned during developm",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250413214448/apple-touch-icon.png",
  "text": "Coinciding with the generally availability of sub-issues, GitHub engineer Shaun Wong shared insights about how they added support for hierarchical issue structures, the lessons learned during development, and the key role sub-issues played in their workflow. Launched in preview a few months ago, GitHub sub-issues enable developers to organize tasks using a parent-child hierarchy. This structure helps break down complex tasks into smaller, more manageable components. Additionally, by grouping related activities in a hierarchical format, teams can track progress more effectively and provide detailed insights into how each sub-task contributes to the overall project. For example, a parent issue can broken down into discrete sub-tasks, each assigned to a distinct team in the organization— such as marketing, UI/UX design, backend development, frontend development, and so on. The first decision GitHub engineers faced was whether to modify the existing task list functionality or design an entirely new hierarchical structure. They ultimately chose the latter, which required significant changes to the underlying data models and rendering logic. From a data modeling perspective, the sub-issues table stores the relationships between parent and child issues. For example, if Issue X is a parent of Issue Y, the sub-issues table would store this link, ensuring the hierarchical relationship is maintained. One key feature was the automatic updating of a parent issue’s progress based on its sub-issues, using a sub-issue list table. This eliminated the need to manually check or navigate through the hierarchy to monitor status. At the implementation level, sub-issues are modeled using MySQL relationships and exposed via GraphQL endpoints, enabling efficient and flexible data retrieval. According to Wong, their internal use of sub-issues across multiple projects has proven effective in simplifying and accelerating project management. Our teams found that sub-Issues significantly improved their ability to manage large projects. By breaking down tasks into smaller, actionable items, they maintained better visibility and control over their work. The hierarchical structure also made it easier to identify dependencies and ensure nothing fell through the cracks. Alongside sub-issues, GitHub also promoted other previewed features to general availability several. These include issue types, which allow classification of issues as bugs, features, tasks, etc; advanced search, with support for complex queries using and and or; and an increased issue limit in GitHub Projects, now supporting up to 50,000 issues. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/04/github-subissues-journey/en/headerimage/github-subissues-journey-1745080955141.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eCoinciding with the generally availability of sub-issues, GitHub engineer Shaun Wong \u003ca href=\"https://github.blog/engineering/architecture-optimization/introducing-sub-issues-enhancing-issue-management-on-github/\"\u003eshared insights about how they added support for hierarchical issue structures\u003c/a\u003e, the lessons learned during development, and the key role sub-issues played in their workflow.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.infoq.com/news/2025/02/github-issues/\"\u003eLaunched in preview a few months ago\u003c/a\u003e, GitHub sub-issues enable developers to organize tasks using a parent-child hierarchy. This structure helps break down complex tasks into smaller, more manageable components. Additionally, by grouping related activities in a hierarchical format, teams can track progress more effectively and provide detailed insights into how each sub-task contributes to the overall project.\u003c/p\u003e\n\n\u003cp\u003eFor example, a parent issue can broken down into discrete sub-tasks, each assigned to a distinct team in the organization— such as marketing, UI/UX design, backend development, frontend development, and so on.\u003c/p\u003e\n\n\u003cp\u003eThe first decision GitHub engineers faced was whether to modify the existing \u003ca href=\"https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/about-task-lists\"\u003etask list functionality\u003c/a\u003e or design an entirely new hierarchical structure. They ultimately chose the latter, which required significant changes to the underlying data models and rendering logic.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eFrom a data modeling perspective, the sub-issues table stores the relationships between parent and child issues. For example, if Issue X is a parent of Issue Y, the sub-issues table would store this link, ensuring the hierarchical relationship is maintained.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOne key feature was the automatic updating of a parent issue’s progress based on its sub-issues, using a sub-issue list table. This eliminated the need to manually check or navigate through the hierarchy to monitor status.\u003c/p\u003e\n\n\u003cp\u003eAt the implementation level, sub-issues are modeled using MySQL relationships and exposed via GraphQL endpoints, enabling efficient and flexible data retrieval.\u003c/p\u003e\n\n\u003cp\u003eAccording to Wong, their internal use of sub-issues across multiple projects has proven effective in simplifying and accelerating project management.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOur teams found that sub-Issues significantly improved their ability to manage large projects. By breaking down tasks into smaller, actionable items, they maintained better visibility and control over their work. The hierarchical structure also made it easier to identify dependencies and ensure nothing fell through the cracks.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAlongside sub-issues, GitHub also promoted \u003ca href=\"https://github.blog/changelog/2025-04-09-evolving-github-issues-and-projects\"\u003eother previewed features to general availability several\u003c/a\u003e. These include issue types, which allow classification of issues as bugs, features, tasks, etc; advanced search, with support for complex queries using \u003ccode\u003eand\u003c/code\u003e and \u003ccode\u003eor\u003c/code\u003e; and an increased issue limit in GitHub Projects, now supporting up to 50,000 issues.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-04-19T00:00:00Z",
  "modifiedTime": null
}
