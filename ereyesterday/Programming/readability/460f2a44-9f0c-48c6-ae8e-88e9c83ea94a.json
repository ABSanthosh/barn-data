{
  "id": "460f2a44-9f0c-48c6-ae8e-88e9c83ea94a",
  "title": "What Does \"use client\" Do?",
  "link": "https://overreacted.io/what-does-use-client-do/",
  "description": "Two worlds, two doors.",
  "author": "",
  "published": "Fri, 25 Apr 2025 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 18671,
  "excerpt": "Two worlds, two doors.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "React Server Components (in?)famously has no API surface. It’s an entire programming paradigm largely stemming from two directives: 'use client' 'use server' I’d like to make a bold claim that their invention belongs in the same category as structured programming (if / while), first-class functions, and async/await. In other words, I expect them to survive past React and to become common sense. The server needs to send code to the client (by sending a \u003cscript\u003e). The client needs to talk back to the server (by doing a fetch). The 'use client' and 'use server' directives abstract over those, offering a first-class, typed, and statically analyzable way to pass control to a piece of your codebase on another computer: 'use client' is a typed \u003cscript\u003e. 'use server' is a typed fetch(). Together, these directives let you express the client/server boundary within the module system. They let you model a client/server application as a single program spanning the two machines without losing sight of the reality of the network and serialization gap. That, in turn, allows seamless composition across the network. Even if you never plan to use React Server Components, I think you should learn about these directives and how they work anyway. They’re not even about React. They are about the module system. 'use server' First, let’s look at 'use server'. Suppose you’re writing a backend server that has some API routes: async function likePost(postId) { const userId = getCurrentUser(); await db.likes.create({ postId, userId }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } async function unlikePost(postId) { const userId = getCurrentUser(); await db.likes.destroy({ where: { postId, userId } }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } app.post('/api/like', async (req, res) =\u003e { const { postId } = req.body; const json = await likePost(postId); res.json(json); }); app.post('/api/unlike', async (req, res) =\u003e { const { postId } = req.body; const json = await unlikePost(postId); res.json(json); }); Then you have some frontend code that calls these API routes: document.getElementById('likeButton').onclick = async function() { const postId = this.dataset.postId; if (this.classList.contains('liked')) { const response = await fetch('/api/unlike', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ postId }) }); const { likes } = await response.json(); this.classList.remove('liked'); this.textContent = likes + ' Likes'; } else { const response = await fetch('/api/like', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ postId, userId }) }); const { likes } = await response.json(); this.classList.add('liked'); this.textContent = likes + ' Likes'; } }); (For simplicity, this example doesn’t try to handle race conditions and errors.) This code is all dandy and fine, but it is “stringly-typed”. What we’re trying to do is to call a function on another computer. However, since the backend and the frontend are two separate programs, we have no way to express that other than a fetch. Now imagine we thought about the frontend and the backend as a single program split between two machines. How would we express the fact that a piece of code wants to call another piece of code? What is the most direct way to express that? If we set aside our preconceived notions about how the backend and the frontend “should” be built for a moment, we can remember that all we’re really trying to say is that we want to call likePost and unlikePost from our frontend code: import { likePost, unlikePost } from './backend'; // This doesn't work :( document.getElementById('likeButton').onclick = async function() { const postId = this.dataset.postId; if (this.classList.contains('liked')) { const { likes } = await unlikePost(postId); this.classList.remove('liked'); this.textContent = likes + ' Likes'; } else { const { likes } = await likePost(postId); this.classList.add('liked'); this.textContent = likes + ' Likes'; } }; The problem is, of course, likePost and unlikePost cannot actually execute on the frontend. We can’t literally import their implementations into the frontend. Importing the backend directly from the frontend is by definition meaningless. However, suppose that there was a way to annotate the likePost and unlikePost functions as being exported from the server at the module level: 'use server'; // Mark all exports as \"callable\" from the frontend export async function likePost(postId) { const userId = getCurrentUser(); await db.likes.create({ postId, userId }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } export async function unlikePost(postId) { const userId = getCurrentUser(); await db.likes.destroy({ where: { postId, userId } }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } We could then automate setting up the HTTP endpoints behind the scenes. And now that we have an opt-in syntax for exporting functions over the network, we could assign meaning to importing them from the frontend code—importing them could simply give us async functions that perform those HTTP calls: import { likePost, unlikePost } from './backend'; document.getElementById('likeButton').onclick = async function() { const postId = this.dataset.postId; if (this.classList.contains('liked')) { const { likes } = await unlikePost(postId); // HTTP call this.classList.remove('liked'); this.textContent = likes + ' Likes'; } else { const { likes } = await likePost(postId); // HTTP call this.classList.add('liked'); this.textContent = likes + ' Likes'; } }; That’s precisely what the 'use server' directive is. This is not a new idea—RPC has been around for decades. This is just a specific flavor of RPC for client-server applications where the server code can designate some functions as “server exports” ('use server'). Importing likePost from the server code works the same as a normal import, but importing likePost from the client code gives you an async function that performs the HTTP call. Have another look at this pair of files: 'use server'; // Mark all exports as \"callable\" from the frontend export async function likePost(postId) { const userId = getCurrentUser(); await db.likes.create({ postId, userId }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } export async function unlikePost(postId) { const userId = getCurrentUser(); await db.likes.destroy({ where: { postId, userId } }); const count = await db.likes.count({ where: { postId } }); return { likes: count }; } import { likePost, unlikePost } from './backend'; document.getElementById('likeButton').onclick = async function() { const postId = this.dataset.postId; if (this.classList.contains('liked')) { const { likes } = await unlikePost(postId); // HTTP call this.classList.remove('liked'); this.textContent = likes + ' Likes'; } else { const { likes } = await likePost(postId); // HTTP call this.classList.add('liked'); this.textContent = likes + ' Likes'; } }; You may have objections—yes, it doesn’t allow multiple consumers of the API (unless they’re within the same codebase); yes, it requires some thought as to versioning and deployment; yes, it is more implicit than writing a fetch. But if you adopt the view that the backend and a frontend are a single program split across two computers, you can’t really “unsee” it. There is now a direct and visceral connection between the two modules. You can add types to narrow down their contract (and enforce that their types are serializable). You can use “Find All References” to see which functions from the server are used on the client. Unused endpoints can be automatically flagged and/or eliminated with dead code analysis. Most importantly, you can now create self-contained abstractions that fully encapsulate both sides—a “frontend” attached to its corresponding “backend” piece. You don’t need to worry about an explosion of API routes—the server/client split can be as modular as your abstractions. There is no global naming scheme; you organize the code using export and import, wherever you need them. The 'use server' directive makes the connection between the server and the client syntactic. It is no longer a matter of convention—it’s in your module system. It opens a door to the server. 'use client' Now suppose that you want to pass some information from the backend to the frontend code. For example, you might render some HTML with a \u003cscript\u003e: app.get('/posts/:postId', async (req, res) =\u003e { const { postId } = req.params; const userId = getCurrentUser(); const likeCount = await db.likes.count({ where: { postId } }); const isLiked = await db.likes.count({ where: { postId, userId } }) \u003e 0; const html = `\u003chtml\u003e \u003cbody\u003e \u003cbutton id=\"likeButton\" className=\"${isLiked ? 'liked' : ''}\" data-postid=\"${Number(postId)}\"\u003e ${likeCount} Likes \u003c/button\u003e \u003cscript src=\"./frontend.js\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e`; res.text(html); }); The browser will load that \u003cscript\u003e which will attach the interactive logic: document.getElementById('likeButton').onclick = async function() { const postId = this.dataset.postId; if (this.classList.contains('liked')) { // ... } else { // ... } }; This works but leaves a few things to be desired. For one, you probably don’t want the frontend logic to be “global”—ideally, it should be possible to render multiple Like buttons, each receiving its own data and maintaining its own local state. It would also be nice to unify the display logic between the template in the HTML and the interactive JavaScript event handlers. We know how to solve these problems. That’s what component libraries are for! Let’s reimplement the frontend logic as a declarative LikeButton component: function LikeButton({ postId, likeCount, isLiked }) { function handleClick() { // ... } return ( \u003cbutton className={isLiked ? 'liked' : ''}\u003e {likeCount} Likes \u003c/button\u003e ); } For simplicity, let’s temporarily drop down to purely client-side rendering. With purely client-side rendering, our server code’s job is just to pass the initial props: app.get('/posts/:postId', async (req, res) =\u003e { const { postId } = req.params; const userId = getCurrentUser(); const likeCount = await db.likes.count({ where: { postId } }); const isLiked = await db.likes.count({ where: { postId, userId } }) \u003e 0; const html = `\u003chtml\u003e \u003cbody\u003e \u003cscript src=\"./frontend.js\u003e\u003c/script\u003e \u003cscript\u003e const output = LikeButton(${JSON.stringify({ postId, likeCount, isLiked })}); render(document.body, output); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e`; res.text(html); }); Then the LikeButton can appear on the page with these props: function LikeButton({ postId, likeCount, isLiked }) { function handleClick() { // ... } return ( \u003cbutton className={isLiked ? 'liked' : ''}\u003e {likeCount} Likes \u003c/button\u003e ); } This makes sense, and is in fact exactly how React used to be integrated in server-rendered applications before the advent of client-side routing. You’d need to write a \u003cscript\u003e to the page with your client-side code, and you would write another \u003cscript\u003e with the inline data (i.e. the initial props) needed by that code. Let’s entertain the shape of this code for a little bit longer. There’s something curious happening: the backend code clearly wants to pass information to the frontend code. However, the act of passing information is again stringly-typed! What’s going on here? app.get('/posts/:postId', async (req, res) =\u003e { // ... const html = `\u003chtml\u003e \u003cbody\u003e \u003cscript src=\"./frontend.js\u003e\u003c/script\u003e \u003cscript\u003e const output = LikeButton(${JSON.stringify({ postId, likeCount, isLiked })}); render(document.body, output); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e`; res.text(html); }); What we seem to be saying is: have the browser load frontend.js, then find the LikeButton function in that file, and then pass this JSON to that function. So what if could just say that? import { LikeButton } from './frontend'; app.get('/posts/:postId', async (req, res) =\u003e { // ... const jsx = ( \u003chtml\u003e \u003cbody\u003e \u003cLikeButton postId={postId} likeCount={likeCount} isLiked={isLiked} /\u003e \u003c/body\u003e \u003c/html\u003e ); // ... }); 'use client'; // Mark all exports as \"renderable\" from the backend export function LikeButton({ postId, likeCount, isLiked }) { function handleClick() { // ... } return ( \u003cbutton className={isLiked ? 'liked' : ''}\u003e {likeCount} Likes \u003c/button\u003e ); } We’re taking a conceptual leap there but stick with me. What we’re saying is, these are still two separate runtime environments—the backend and the frontend—but we’re looking at them as a single program rather than as two separate programs. This is why we set up a syntactic connection between the place that passes the information (the backend) and the function that needs to receive it (the frontend). And the most natural way to express that connection is, again, a plain import. Note how, here too, importing from a file decorated with 'use client' from the backend doesn’t give us the LikeButton function itself. Instead, it gives a client reference—something that we can turn into a \u003cscript\u003e tag under the hood later. Let’s see how this works. This JSX: import { LikeButton } from './frontend'; // \"/src/frontend.js#LikeButton\" // ... \u003chtml\u003e \u003cbody\u003e \u003cLikeButton postId={42} likeCount={8} isLiked={true} /\u003e \u003c/body\u003e \u003c/html\u003e produces this JSON: { type: \"html\", props: { children: { type: \"body\", props: { children: { type: \"/src/frontend.js#LikeButton\", // A client reference! props: { postId: 42 likeCount: 8 isLiked: true } } } } } } And this information—this client reference—lets us generate the \u003cscript\u003e tags that load the code from the right file and call the right function under the hood: \u003cscript src=\"./frontend.js\"\u003e\u003c/script\u003e \u003cscript\u003e const output = LikeButton({ postId: 42, likeCount: 8, isLiked: true }); // ... \u003c/script\u003e In fact, we also have enough information that we can run the same function on the server to pregenerate the initial HTML, which we lost with client rendering: \u003c!-- Optional: Initial HTML --\u003e \u003cbutton class=\"liked\"\u003e 8 Likes \u003c/button\u003e \u003c!-- Interactivity --\u003e \u003cscript src=\"./frontend.js\"\u003e\u003c/script\u003e \u003cscript\u003e const output = LikeButton({ postId: 42, likeCount: 8, isLiked: true }); // ... \u003c/script\u003e Prerendering the initial HTML is optional, but it works using the same primitives. Now that you know how it works, look over this code one more time: import { LikeButton } from './frontend'; // \"/src/frontend.js#LikeButton\" app.get('/posts/:postId', async (req, res) =\u003e { // ... const jsx = ( \u003chtml\u003e \u003cbody\u003e \u003cLikeButton postId={postId} likeCount={likeCount} isLiked={isLiked} /\u003e \u003c/body\u003e \u003c/html\u003e ); // ... }); 'use client'; // Mark all exports as \"renderable\" from the backend export function LikeButton({ postId, likeCount, isLiked }) { function handleClick() { // ... } return ( \u003cbutton className={isLiked ? 'liked' : ''}\u003e {likeCount} Likes \u003c/button\u003e ); } If you set aside your existing notions of how the backend and the frontend code should interact, you’ll see that there’s something special happening here. The backend code references the frontend code by using an import with 'use client'. In other words, it expresses a direct connection within the module system between the part of the program that sends the \u003cscript\u003e and the part of the program that lives within that \u003cscript\u003e. Since there is a direct connection, it can be typechecked, you can use “Find All References”, and all tooling is aware of it. Like 'use server' before it, 'use client' makes the connection between the server and the client syntactic. Whereas 'use server' opens a door from the client to the server, 'use client' opens a door from the server to the client. It’s like two worlds with two doors between them. Two Worlds, Two Doors This is why 'use client' and 'use server' should not be seen as ways to “mark” code as being “on the client” or “on the server”. That is not what they do. Rather, they let you open the door from one environment to the other: 'use client' exports client functions to the server. Under the hood, the backend code sees them as references like '/src/frontend.js#LikeButton'. They can be rendered as JSX tags and will ultimately turn into \u003cscript\u003e tags. (You can optionally pre-run those scripts on the server to get their initial HTML.) 'use server' exports server functions to the client. Under the hood, the frontend sees them as async functions that call the backend via HTTP. These directives express the network gap within your module system. They let you describe a client/server application as a single program spanning two environments. They acknowledge and fully embrace the fact that these environments don’t share any execution context—this is why neither import executes any code. Instead, they only let one side refer to code on the other side—and pass information to it. Together, they let you “weave” the two sides of your program by creating and composing reusable abstractions with logic from both sides. But I think the pattern extends beyond React and even beyond JavaScript. Really, this is just RPC at the module system level with a mirror twin for sending more code to the client. The server and the client are two sides of a single program. They’re separated by time and space so they can’t share the execution context and directly import each other. The directives “open the doors” across time and space: the server can render the client as a \u003cscript\u003e; the client can talk back to the server via fetch(). But import is the most direct way to express that, so the directives let you use it. Makes sense, doesn’t it? P.S. Here’s a little architectural diagram that you can use for your slides:",
  "image": "https://overreacted.io/what-does-use-client-do/opengraph-image?5b0b970dfd19bb8c",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eReact Server Components (in?)famously has no API surface. It’s an entire programming paradigm largely stemming from two directives:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI’d like to make a bold claim that their invention belongs in the same category as structured programming (\u003ccode\u003eif\u003c/code\u003e / \u003ccode\u003ewhile\u003c/code\u003e), first-class functions, \u003ca target=\"_blank\" href=\"https://tirania.org/blog/archive/2013/Aug-15.html\"\u003eand \u003ccode\u003easync\u003c/code\u003e/\u003ccode\u003eawait\u003c/code\u003e.\u003c/a\u003e In other words, I expect them to survive past React and to become common sense.\u003c/p\u003e\n\u003cp\u003eThe server \u003cem\u003eneeds\u003c/em\u003e to send code to the client (by sending a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e). The client \u003cem\u003eneeds\u003c/em\u003e to talk back to the server (by doing a \u003ccode\u003efetch\u003c/code\u003e). The \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e directives abstract over those, offering a first-class, typed, and statically analyzable way to pass control to a piece of your codebase on another computer:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e is a typed \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e is a typed \u003ccode\u003efetch()\u003c/code\u003e.\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTogether, these directives let you express the client/server boundary \u003cem\u003ewithin\u003c/em\u003e the module system. They let you model a client/server application \u003cem\u003eas a single program spanning the two machines\u003c/em\u003e without losing sight of the reality of the network and serialization gap. That, in turn, allows \u003ca href=\"https://overreacted.io/impossible-components/\"\u003eseamless composition across the network.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eEven if you never plan to use React Server Components, I think you should learn about these directives and how they work anyway. They’re not even about React.\u003c/p\u003e\n\u003cp\u003eThey are about the module system.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"use-server\"\u003e\u003ca target=\"_self\" href=\"#use-server\"\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eFirst, let’s look at \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSuppose you’re writing a backend server that has some API routes:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e unlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edestroy\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/like\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003elikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  res\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/unlike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eunlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  res\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThen you have some frontend code that calls these API routes:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003elikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eonclick\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const \u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/unlike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      method\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      headers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eapplication/json\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      body\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e JSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await response\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eremove\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const \u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/like\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      method\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003ePOST\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      headers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eapplication/json\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      body\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e JSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await response\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003e(For simplicity, this example doesn’t try to handle race conditions and errors.)\u003c/p\u003e\n\u003cp\u003eThis code is all dandy and fine, but it is \u003ca target=\"_blank\" href=\"https://www.hanselman.com/blog/stringly-typed-vs-strongly-typed\"\u003e“stringly-typed”\u003c/a\u003e. What we’re trying to do is to \u003cem\u003ecall a function on another computer\u003c/em\u003e. However, since the backend and the frontend are two separate programs, we have no way to express that other than a \u003ccode\u003efetch\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow imagine we thought about the frontend and the backend as \u003cem\u003ea single program split between two machines\u003c/em\u003e. How would we express the fact that a piece of code wants to call another piece of code? What is the most direct way to express that?\u003c/p\u003e\n\u003cp\u003eIf we set aside our preconceived notions about how the backend and the frontend “should” be built for a moment, we can remember that all we’re \u003cem\u003ereally\u003c/em\u003e trying to say is that we want to \u003cem\u003ecall\u003c/em\u003e \u003ccode\u003elikePost\u003c/code\u003e and \u003ccode\u003eunlikePost\u003c/code\u003e from our frontend code:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e unlikePost \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./backend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // This doesn\u0026#39;t work :(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003elikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eonclick\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eunlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eremove\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003elikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThe problem is, of course, \u003ccode\u003elikePost\u003c/code\u003e and \u003ccode\u003eunlikePost\u003c/code\u003e cannot actually execute on the frontend. We can’t literally import their implementations \u003cem\u003einto\u003c/em\u003e the frontend. Importing the backend directly from the frontend is by definition \u003cem\u003emeaningless.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eHowever, suppose that there was a way to annotate the \u003ccode\u003elikePost\u003c/code\u003e and \u003ccode\u003eunlikePost\u003c/code\u003e functions as being \u003cem\u003eexported from the server\u003c/em\u003e at the module level:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse server\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // Mark all exports as \u0026#34;callable\u0026#34; from the frontend\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e unlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edestroy\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eWe could then automate setting up the HTTP endpoints behind the scenes. And now that we have an opt-in syntax for exporting functions over the network, we could assign \u003cem\u003emeaning\u003c/em\u003e to importing them from the frontend code—\u003ccode\u003eimport\u003c/code\u003eing them could simply give us \u003ccode\u003easync\u003c/code\u003e functions that perform those HTTP calls:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e unlikePost \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./backend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003elikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eonclick\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eunlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e // HTTP call\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eremove\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003elikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e // HTTP call\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThat’s precisely what the \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e directive is.\u003c/p\u003e\n\u003cp\u003eThis is not a new idea—\u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Remote_procedure_call\"\u003eRPC has been around for decades.\u003c/a\u003e This is just a specific flavor of RPC for client-server applications where the server code can designate some functions as “server exports” (\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e). Importing \u003ccode\u003elikePost\u003c/code\u003e from the server code works the same as a normal \u003ccode\u003eimport\u003c/code\u003e, but importing \u003ccode\u003elikePost\u003c/code\u003e \u003cem\u003efrom the client code\u003c/em\u003e gives you an \u003ccode\u003easync\u003c/code\u003e function that performs the HTTP call.\u003c/p\u003e\n\u003cp\u003eHave another look at this pair of files:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse server\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // Mark all exports as \u0026#34;callable\u0026#34; from the frontend\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e unlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  await\u003c/span\u003e\u003cspan\u003e db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edestroy\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e count \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e likePost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e unlikePost \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./backend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003elikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eonclick\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eunlikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e // HTTP call\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eremove\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const { \u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003elikePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e // HTTP call\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextContent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e likes \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eYou may have objections—yes, it doesn’t allow multiple consumers of the API (unless they’re within the same codebase); yes, it requires some thought as to versioning and deployment; yes, it is more implicit than writing a \u003ccode\u003efetch\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut if you adopt the view that the backend and a frontend are \u003cem\u003ea single program split across two computers,\u003c/em\u003e you can’t really “unsee” it. There is now a direct and visceral connection between the two modules. You can add types to narrow down their contract (and enforce that their types are serializable). You can use “Find All References” to see which functions from the server are used on the client. Unused endpoints can be automatically flagged and/or eliminated with dead code analysis.\u003c/p\u003e\n\u003cp\u003eMost importantly, you can now create self-contained abstractions that fully encapsulate both sides—a “frontend” attached to its corresponding “backend” piece. You don’t need to worry about an explosion of API routes—the server/client split can be as modular as your abstractions. There is no global naming scheme; you organize the code using \u003ccode\u003eexport\u003c/code\u003e and \u003ccode\u003eimport\u003c/code\u003e, wherever you need them.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e directive makes the connection between the server and the client \u003cem\u003esyntactic\u003c/em\u003e. It is no longer a matter of convention—it’s \u003cem\u003ein\u003c/em\u003e your module system.\u003c/p\u003e\n\u003cp\u003eIt opens a \u003cem\u003edoor\u003c/em\u003e to the server.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"use-client\"\u003e\u003ca target=\"_self\" href=\"#use-client\"\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNow suppose that you want to pass some information from the backend to the frontend code. For example, you might render some HTML with a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/posts/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e })\u003c/span\u003e\u003cspan\u003e \u0026gt;\u003c/span\u003e\u003cspan\u003e 0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;button\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        id=\u0026#34;likeButton\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        className=\u0026#34;\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e ?\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003e \u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        data-postid=\u0026#34;\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        ${\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;script src=\u0026#34;./frontend.js\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  res\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThe browser will load that \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e which will attach the interactive logic:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003elikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eonclick\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  if\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclassList\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003cspan\u003e else\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThis works but leaves a few things to be desired.\u003c/p\u003e\n\u003cp\u003eFor one, you probably don’t want the frontend logic to be “global”—ideally, it should be possible to render multiple Like buttons, each receiving its own data and maintaining its own local state. It would also be nice to unify the display logic between the template in the HTML and the interactive JavaScript event handlers.\u003c/p\u003e\n\u003cp\u003eWe know how to solve these problems. That’s what component libraries are for! Let’s reimplement the frontend logic as a declarative \u003ccode\u003eLikeButton\u003c/code\u003e component:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLiked }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e handleClick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      {\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eFor simplicity, let’s temporarily drop down to purely client-side rendering. With purely client-side rendering, our server code’s job is just to pass the initial props:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/posts/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003euserId\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e getCurrentUser\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await db\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e where\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e userId \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e })\u003c/span\u003e\u003cspan\u003e \u0026gt;\u003c/span\u003e\u003cspan\u003e 0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;script src=\u0026#34;./frontend.js\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        const output = LikeButton(\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLiked\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        })\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        render(document.body, output);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  res\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThen the \u003ccode\u003eLikeButton\u003c/code\u003e can appear on the page with these props:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLiked }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e handleClick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      {\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThis makes sense, and is in fact exactly how React used to be integrated in server-rendered applications before the advent of client-side routing. You’d need to write a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e to the page with your client-side code, and you would write another \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e with the inline data (i.e. the initial props) needed by that code.\u003c/p\u003e\n\u003cp\u003eLet’s entertain the shape of this code for a little bit longer. There’s something curious happening: the backend code clearly wants to \u003cem\u003epass information\u003c/em\u003e to the frontend code. However, the act of passing information is again \u003cem\u003estringly-typed!\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhat’s going on here?\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/posts/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;script src=\u0026#34;./frontend.js\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        const output = LikeButton(\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLiked\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        })\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        render(document.body, output);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  res\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eWhat we seem to be saying is: have the browser load \u003ccode\u003efrontend.js\u003c/code\u003e, then find the \u003ccode\u003eLikeButton\u003c/code\u003e function in that file, and then pass this JSON to that function.\u003c/p\u003e\n\u003cp\u003eSo what if could \u003cem\u003ejust say that?\u003c/em\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e LikeButton \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./frontend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/posts/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ejsx\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          likeCount={\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLiked={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // Mark all exports as \u0026#34;renderable\u0026#34; from the backend\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLiked }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e handleClick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      {\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eWe’re taking a conceptual leap there but stick with me. What we’re saying is, these are still two separate runtime environments—the backend and the frontend—but we’re looking at them as a \u003cem\u003esingle program\u003c/em\u003e rather than as two separate programs.\u003c/p\u003e\n\u003cp\u003eThis is why we set up a \u003cem\u003esyntactic connection\u003c/em\u003e between the place that passes the information (the backend) and the function that needs to receive it (the frontend). And the most natural way to express that connection is, again, a plain \u003ccode\u003eimport\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote how, here too, importing from a file decorated with \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e from the backend doesn’t give us the \u003ccode\u003eLikeButton\u003c/code\u003e function itself. Instead, it gives a \u003cem\u003eclient reference\u003c/em\u003e—something that we can turn into a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag under the hood later.\u003c/p\u003e\n\u003cp\u003eLet’s see how this works.\u003c/p\u003e\n\u003cp\u003eThis JSX:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e LikeButton \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./frontend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // \u0026#34;/src/frontend.js#LikeButton\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      postId={\u003c/span\u003e\u003cspan\u003e42\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      likeCount={\u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      isLiked={\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eproduces this JSON:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        children: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/src/frontend.js#LikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e // A client reference!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            postId: \u003c/span\u003e\u003cspan\u003e42\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            likeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            isLiked: \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eAnd this information—this \u003cem\u003eclient reference\u003c/em\u003e—lets us generate the \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags that load the code from the right file and call the right function under the hood:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"html\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"html\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e src=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e./frontend.js\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003eoutput\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e 42\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    likeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e 8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLiked\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e true\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn fact, we also have enough information that we can run the same function on the server to pregenerate the initial HTML, which we lost with client rendering:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"html\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"html\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;!-- Optional: Initial HTML --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e class=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  8 Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;!-- Interactivity --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e src=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e./frontend.js\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003eoutput\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e 42\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    likeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e 8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLiked\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e true\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  });\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003ePrerendering the initial HTML is optional, but it works using the same primitives.\u003c/p\u003e\n\u003cp\u003eNow that you know how it \u003cem\u003eworks\u003c/em\u003e, look over this code one more time:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e LikeButton \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./frontend\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // \u0026#34;/src/frontend.js#LikeButton\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/posts/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ejsx\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          likeCount={\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLiked={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // Mark all exports as \u0026#34;renderable\u0026#34; from the backend\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e LikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e likeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLiked }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e handleClick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      {\u003c/span\u003e\u003cspan\u003elikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e Likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eIf you set aside your existing notions of how the backend and the frontend code should interact, you’ll see that there’s something special happening here.\u003c/p\u003e\n\u003cp\u003eThe backend code \u003cem\u003ereferences\u003c/em\u003e the frontend code by using an \u003ccode\u003eimport\u003c/code\u003e with \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e. In other words, it expresses a direct connection \u003cem\u003ewithin the module system\u003c/em\u003e between the part of the program that \u003cem\u003esends\u003c/em\u003e the \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e and the part of the program that lives \u003cem\u003ewithin\u003c/em\u003e that \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e. Since there is a direct connection, it can be typechecked, you can use “Find All References”, and all tooling is aware of it.\u003c/p\u003e\n\u003cp\u003eLike \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e before it, \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e makes the connection between the server and the client \u003cem\u003esyntactic\u003c/em\u003e. Whereas \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e opens a door from the client to the server, \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e opens a door from the server to the client.\u003c/p\u003e\n\u003cp\u003eIt’s like two worlds with two doors between them.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"two-worlds-two-doors\"\u003e\u003ca target=\"_self\" href=\"#two-worlds-two-doors\"\u003eTwo Worlds, Two Doors\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis is why \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e should not be seen as ways to “mark” code as being “on the client” or “on the server”. That is not what they do.\u003c/p\u003e\n\u003cp\u003eRather, they let you \u003cem\u003eopen the door\u003c/em\u003e from one environment to the other:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e exports client functions \u003cem\u003eto\u003c/em\u003e the server.\u003c/strong\u003e Under the hood, the backend code sees them as references like \u003ccode\u003e\u0026#39;/src/frontend.js#LikeButton\u0026#39;\u003c/code\u003e. They can be rendered as JSX tags and will ultimately turn into \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tags. (You can optionally pre-run those scripts on the server to get their initial HTML.)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e exports server functions \u003cem\u003eto\u003c/em\u003e the client.\u003c/strong\u003e Under the hood, the frontend sees them as \u003ccode\u003easync\u003c/code\u003e functions that call the backend via HTTP.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese directives express the network gap \u003cem\u003ewithin\u003c/em\u003e your module system. They let you describe a client/server application as a \u003cem\u003esingle program spanning two environments.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThey acknowledge and fully embrace the fact that these environments don’t share any execution context—this is why neither \u003ccode\u003eimport\u003c/code\u003e executes any code. Instead, they only let one side \u003cem\u003erefer\u003c/em\u003e to code on the other side—and pass information to it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTogether, they let you “weave” the two sides of your program by creating and composing \u003ca href=\"https://overreacted.io/impossible-components/\"\u003ereusable abstractions with logic from both sides.\u003c/a\u003e\u003c/strong\u003e But I think the pattern extends beyond React and even beyond JavaScript. Really, this is just RPC at the module system level with a mirror twin for sending more code to the client.\u003c/p\u003e\n\u003cp\u003eThe server and the client are two sides of a single program. They’re separated by time and space so they can’t share the execution context and directly \u003ccode\u003eimport\u003c/code\u003e each other. The directives “open the doors” across time and space: the server can \u003cem\u003erender\u003c/em\u003e the client as a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e; the client can \u003cem\u003etalk back\u003c/em\u003e to the server via \u003ccode\u003efetch()\u003c/code\u003e. But \u003ccode\u003eimport\u003c/code\u003e is the most direct way to express that, so the directives let you use it.\u003c/p\u003e\n\u003cp\u003eMakes sense, doesn’t it?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"ps\"\u003e\u003ca target=\"_self\" href=\"#ps\"\u003eP.S.\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHere’s a little architectural diagram that you can use for your slides:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/what-does-use-client-do/diagram.png\" alt=\"A black and white yin yang symbol\" width=\"200\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": null,
  "modifiedTime": null
}
