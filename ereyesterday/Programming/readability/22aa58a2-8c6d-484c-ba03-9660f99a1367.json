{
  "id": "22aa58a2-8c6d-484c-ba03-9660f99a1367",
  "title": "Default Bundled Plugins in Fleet",
  "link": "https://blog.jetbrains.com/fleet/2024/11/default-bundled-plugins-in-fleet/",
  "description": "Recently, we announced the public rollout of the Fleet Plugins SDK – a step that finally allows plugins to be created and shared among the Fleet community at large. Believe it or not, this did not mark the very beginning of extensibility in Fleet. Fleet has always featured a variety of bundled plugins (currently upwards […]",
  "author": "Matt Eikamp",
  "published": "Fri, 08 Nov 2024 14:06:26 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "plugins"
  ],
  "byline": "Matt Eikamp",
  "length": 5256,
  "excerpt": "Fleet features a variety of bundled plugins (currently upwards of 50!) to streamline your coding process.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "More Than a Code Editor PluginsDefault Bundled Plugins in Fleet Recently, we announced the public rollout of the Fleet Plugins SDK – a step that finally allows plugins to be created and shared among the Fleet community at large. Believe it or not, this did not mark the very beginning of extensibility in Fleet. Fleet has always featured a variety of bundled plugins (currently upwards of 50!) to streamline your coding process. We designed Fleet to be minimalist and focus on the essentials of programming so that you can avoid extension fatigue. Does this mean Fleet users should shy away from plugins? Of course not! We’re still working on finalizing Fleet’s extensibility program, but you can already make use of its existing bundled plugins. These plugins can be selectively added to and removed from your Fleet workspace, or even marked as required for a given workspace. Here’s a quick rundown of how you can manage bundled plugins in Fleet. Fleet’s default set of bundled plugins can be roughly broken down into the following categories: Integrated tools and frameworks AI features Language-specific support Customization Remote development Integrated Tools and Frameworks Fleet comes bundled with plugins supporting a plethora of integrated tools and frameworks, including Amper, Docker, Git, Gradle, Maven, and a whole host of others. Here’s the full list at a glance: Worthy of special mention is Amper, a JetBrains tool designed to provide a smoother experience with project configuration and toolability when working with Kotlin Multiplatform. Many of these plugins will require you to have Smart Mode running, but there are some (such as Prettier) that you can use even when running Fleet as a lightweight text editor. Plugins Supporting AI Features Here’s a quick glance at all the languages for which AI plugins are offered in Fleet by default. Keep in mind that this is just the beginning – we’ve got plenty of additional features on the way for even more languages. This is in addition to Fleet’s support for AI Completion and Grazie – JetBrains’ AI writing companion for smoothing out your grammar and style. Language Support From a language standpoint, Fleet has always been highly versatile. It supports most major languages straight out of the box – no matter how simple or in-depth your project may be. Fleet analyzes your code to automatically detect your project configuration, including which language you’re coding in. To get the most out of each language when Smart Mode is enabled (such as code completion, error detection, documentation, code reformatting, and navigation to usages and definitions), you can make use of pre-installed plugins for any the following languages: Customization The Fleet user experience is becoming ever more customizable. Members of the Fleet community can publish custom color theme plugins, but there are a few bundled plugins for this as well. The Grey Theme comes pre-installed, for instance, allowing you to tweak the look and feel of Fleet. Fleet’s potential for customization does not stop at mere aesthetics. If you happen to be migrating from VSCode, the VSCode Keymap plugin will let you stick to the shortcuts you’re used to. As of the 1.41 release, Fleet gives you even more keymap options, including IntelliJ IDEA Classic, Emacs, Sublime Text, and Eclipse. Those who want to take things a step further with custom language support can use the TextMate plugin. This plugin makes it possible to add TextMate bundles – for example, in cases where you need code highlighting while Smart Mode is off or while coding in a language that isn’t supported in Fleet. Remote Development Fleet has built-in support for remote development. When you’re on the go, you can use your local machine as a thin client while letting a more powerful machine at your home or office handle more resource-intensive tasks. Fleet provides this out of the box, in contrast to VS Code, which requires you to install and configure extensions before you can use remote development features. Stay tuned for more updates as we continue to add more to Fleet’s expandability program. Subscribe to Fleet Blog updates Discover more",
  "image": "https://resources.jetbrains.com/storage/products/fleet/img/meta/preview.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/fleet/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2022/01/Fleet_-3.svg\" alt=\"Fleet logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eMore Than a Code Editor\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/fleet/category/plugins/\"\u003ePlugins\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eDefault Bundled Plugins in Fleet\u003c/h2\u003e                    \n                    \n\u003cp\u003eRecently, we announced the \u003ca href=\"https://blog.jetbrains.com/fleet/2024/08/fleet-plugins-themes-first/\"\u003epublic rollout of the Fleet Plugins SDK\u003c/a\u003e – a step that finally allows plugins to be created and shared among the Fleet community at large.\u003c/p\u003e\n\n\n\n\u003cp\u003eBelieve it or not, this did not mark the very beginning of extensibility in Fleet. Fleet has always featured a variety of bundled plugins (currently upwards of 50!) to streamline your coding process.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe designed Fleet to be minimalist and focus on the essentials of programming so that you can avoid extension fatigue. Does this mean Fleet users should shy away from plugins? Of course not! We’re still working on finalizing Fleet’s extensibility program, but you can already make use of its existing bundled plugins.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese plugins can be selectively added to and removed from your Fleet workspace, or even marked as required for a given workspace. \u003ca href=\"https://www.jetbrains.com/help/fleet/managing-plugins.html#install_plugin_from_repo\" target=\"_blank\" rel=\"noopener\"\u003eHere’s a quick rundown\u003c/a\u003e of how you can manage bundled plugins in Fleet.\u003c/p\u003e\n\n\n\n\u003cp\u003eFleet’s default set of bundled plugins can be roughly broken down into the following categories:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIntegrated tools and frameworks\u003c/li\u003e\n\n\n\n\u003cli\u003eAI features\u003c/li\u003e\n\n\n\n\u003cli\u003eLanguage-specific support\u003c/li\u003e\n\n\n\n\u003cli\u003eCustomization\u003c/li\u003e\n\n\n\n\u003cli\u003eRemote development\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eIntegrated Tools and Frameworks\u003c/h2\u003e\n\n\n\n\u003cp\u003eFleet comes bundled with plugins supporting a plethora of integrated tools and frameworks, including Amper, Docker, Git, Gradle, Maven, and a whole host of others. Here’s the full list at a glance:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1440\" height=\"500\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Integrated-Tools-and-Frameworks-2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWorthy of special mention is Amper, a \u003ca href=\"https://blog.jetbrains.com/blog/2023/11/09/amper-improving-the-build-tooling-user-experience/\"\u003eJetBrains tool\u003c/a\u003e designed to provide a smoother experience with project configuration and toolability when working with Kotlin Multiplatform.\u003c/p\u003e\n\n\n\n\u003cp\u003eMany of these plugins will require you to have Smart Mode running, but there are some (such as Prettier) that you can use even when running Fleet as a lightweight text editor.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003ePlugins Supporting AI Features\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere’s a quick glance at all the languages for which AI plugins are offered in Fleet by default. Keep in mind that this is just the beginning – we’ve got plenty of additional features on the way for even more languages.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1440\" height=\"300\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Plugins-Supporting-A.I.-Features-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis is in addition to Fleet’s support for AI Completion and Grazie – JetBrains’ AI writing companion for smoothing out your grammar and style.\u003c/p\u003e\n\n\n\n\u003ch2\u003eLanguage Support\u003c/h2\u003e\n\n\n\n\u003cp\u003eFrom a language standpoint, Fleet has always been highly versatile. It supports most major languages straight out of the box – no matter how simple or in-depth your project may be. Fleet analyzes your code to automatically detect your project configuration, including which language you’re coding in.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo get the most out of each language when Smart Mode is enabled (such as code completion, error detection, documentation, code reformatting, and navigation to usages and definitions), you can make use of pre-installed plugins for any the following languages:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1440\" height=\"700\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Language-Support-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCustomization\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe Fleet user experience is becoming ever more customizable. Members of the Fleet community can publish custom color theme plugins, but there are a few bundled plugins for this as well. The \u003ca href=\"https://plugins.jetbrains.com/plugin/24324-grey-theme\" target=\"_blank\" rel=\"noopener\"\u003eGrey Theme\u003c/a\u003e comes pre-installed, for instance, allowing you to tweak the look and feel of Fleet.\u003c/p\u003e\n\n\n\n\u003cp\u003eFleet’s potential for customization does not stop at mere aesthetics. If you happen to be migrating from VSCode, the \u003ca href=\"https://plugins.jetbrains.com/plugin/22669-vscode-keymap\" target=\"_blank\" rel=\"noopener\"\u003eVSCode Keymap\u003c/a\u003e plugin will let you stick to the shortcuts you’re used to. As of the 1.41 release, Fleet gives you even more keymap options, including IntelliJ IDEA Classic, Emacs, Sublime Text, and Eclipse.\u003c/p\u003e\n\n\n\n\u003cp\u003eThose who want to take things a step further with custom language support can use the \u003ca href=\"https://plugins.jetbrains.com/plugin/19079-textmate\" target=\"_blank\" rel=\"noopener\"\u003eTextMate\u003c/a\u003e plugin. This plugin makes it possible to \u003ca href=\"https://www.jetbrains.com/help/fleet/textmate.html\" target=\"_blank\" rel=\"noopener\"\u003eadd TextMate bundles\u003c/a\u003e – for example, in cases where you need code highlighting while Smart Mode is off or while coding in a language that isn’t supported in Fleet.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eRemote Development\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eFleet has built-in support for remote development. When you’re on the go, you can use your local machine as a thin client while letting a more powerful machine at your home or office handle more resource-intensive tasks.\u003c/p\u003e\n\n\n\n\u003cp\u003eFleet provides this out of the box, in contrast to VS Code, which requires you to install and configure extensions before you can use remote development features.\u003c/p\u003e\n\n\n\n\u003cp\u003eStay tuned for more updates as we continue to add more to Fleet’s expandability program.\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Fleet Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
