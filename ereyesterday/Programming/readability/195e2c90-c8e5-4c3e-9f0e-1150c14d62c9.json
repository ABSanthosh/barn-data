{
  "id": "195e2c90-c8e5-4c3e-9f0e-1150c14d62c9",
  "title": "Updates on Unreal Engine Support in TeamCity: UGS Integration and Open-Sourcing the Plugin",
  "link": "https://blog.jetbrains.com/teamcity/2024/11/unreal-engine-plugin-ugs-integration-and-open-sourcing/",
  "description": "We’ve got a few exciting updates about the Unreal Engine plugin announced in the previous blog post. TL;DR – we’re adding Unreal Game Sync (UGS) integration and open-sourcing the plugin. These updates are all about making the CI/CD experience smoother for Unreal Engine devs and getting the community more involved. UGS Before diving in, let’s […]",
  "author": "Vladislav Grinin",
  "published": "Wed, 06 Nov 2024 14:44:18 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "game-developement",
    "news",
    "unreal-engine"
  ],
  "byline": "Vladislav Grinin",
  "length": 7728,
  "excerpt": "We’re adding Unreal Game Sync (UGS) integration and open-sourcing the plugin. Learn more about what's new.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Powerful CI/CD for DevOps-centric teams Updates on Unreal Engine Support in TeamCity: UGS Integration and Open-Sourcing the Plugin We’ve got a few exciting updates about the Unreal Engine plugin announced in the previous blog post. TL;DR – we’re adding Unreal Game Sync (UGS) integration and open-sourcing the plugin. These updates are all about making the CI/CD experience smoother for Unreal Engine devs and getting the community more involved. UGS Before diving in, let’s quickly go over what Unreal Game Sync (UGS) is for anyone who might not be familiar with it or could use a refresher. In essence, UGS is a lightweight UI for Perforce. Typically, you need to build it from source to get started, and while its graphical client is a WinForms application available only on Windows, there is a command-line interface (CLI) version for other platforms. UGS has been around for a while and is widely used by game studios working with Unreal Engine as a collaboration tool. From a CI/CD perspective, UGS provides valuable insights into a project’s status (if properly set up), such as build statuses, the ability to flag specific changelists as problematic, and more. To give a better overview, here’s a rough diagram of the components involved: There are quite a few components here, with the central one being the Metadata Server. While deploying it isn’t strictly necessary, it does enable the full feature set of UGS. This is also where CI/CD systems post build information. As shown, there are different possible implementations of the Metadata Server, and it’s worth briefly discussing each: Epic Metadata Service. This is the original and longest-standing version of the Metadata Server. It requires Windows, IIS, and the older .NET Framework 4.6.2. Third-party implementation. Thanks to the open-source nature of the server, it’s possible to create your own implementation. One example is RUGS, which is much easier to set up since it supports Docker. Horde. Technically, this is a full-fledged automation platform recently introduced by Epic. It includes a built-in UGS Metadata Server as well as its own build system. Although it has a built-in metadata server, it doesn’t allow publishing from external sources – the transition to Horde assumes that all metadata is generated internally. Horde is a bit outside the scope of this blog post, so we’re only mentioning it for the sake of completeness. Entities that the build system is supposed to post to the metadata server are called “badges” in UGS terms. These badges will then show up in the CIS (continuous integration status) column in UGS. It usually looks like this: As far as we know, the metadata server endpoints don’t currently have authentication. It appears that the server is intended to be used within a secure, closed network, but this is just our understanding and not an official statement. For a more complete definition of UGS please refer to the official documentation. UGS Integration in TeamCity Let’s take a look at UGS integration in TeamCity. As of the most recent plugin update, we support these two scenarios: Publishing a badge as a build status via the Commit Status Publisher. Publishing an arbitrary set of badges defined in your BuildGraph script.This applies to the “distributed” execution mode – a special runner mode in which the BuildGraph definition of the build is converted into a set of builds in TeamCity (build chain). For more details, please refer to our previous blog post or the plugin documentation. The first scenario is pretty straightforward. You only need to configure the Commit Status Publisher build feature and set up a few required parameters. The second scenario is more complex. In your script, you can define a set of badges and link them to specific nodes to be tracked. Before diving into the scripts, here’s a quick reminder of how the plugin maps BuildGraph entities to TeamCity entities: BuildGraphTeamCityNodeBuild stepAgentBuild For example, if your build process includes compiling an editor, the script might look like this (with unimportant details omitted): \u003cAgent Name=\"Build Editor and tools\" Type=\"...\"\u003e \u003cNode Name=\"Set binary version\"\u003e ... \u003c/Node\u003e \u003cNode Name=\"Compile Tools\" Requires=\"Set binary version\"\u003e ... \u003c/Node\u003e \u003cNode Name=\"Compile Editor\" Requires=\"Compile Tools\"\u003e ... \u003c/Node\u003e \u003c/Agent\u003e \u003cBadge Name=\"Compile Editor\" Project=\"//UE5/Main/Samples/Games/Lyra\" Requires=\"Compile Editor\"/\u003e Here, we define a badge named “Compile Editor” to track the execution of a node with the same name. In distributed BuildGraph mode, TeamCity will recognize this badge and update the build status as the process progresses.You can define multiple badges to track different sets of nodes, and TeamCity will monitor all of them based on the specified dependencies: \u003cAgent Name=\"Build A\" Type=\"A\"\u003e \u003cNode Name=\"Node 1\"\u003e ... \u003c/Node\u003e \u003c/Agent\u003e \u003cAgent Name=\"Build B\" Type=\"B\"\u003e \u003cNode Name=\"Node 2\"\u003e ... \u003c/Node\u003e \u003c/Agent\u003e \u003cAgent Name=\"Build C\" Type=\"C\"\u003e \u003cNode Name=\"Node 3\"\u003e ... \u003c/Node\u003e \u003c/Agent\u003e \u003cBadge Name=\"BuildProject\" Project=\"//foo/bar/project\" Requires=\"Node A;Node B;Node C\"/\u003e In this example, there are three agents (each with a single node) that can potentially run concurrently, as they are assigned to different agents and have no dependencies on each other. Each build is tracked by a corresponding badge. The badge will behave as follows: “Starting” – displayed as soon as any tracked dependency begins execution. “Success” – shown when all dependencies complete successfully. “Failure” – Indicated if any dependency encounters an error. For complete examples, please refer to the plugin’s user guide on GitHub. Open-sourcing the Plugin We have received a lot of feedback since the plugin was introduced in May this year. Thank you to everyone who shared ideas for further development, submitted feature requests, or reported bugs! We’ve also been asked several times whether we’re going to open-source the plugin and, if so, when. That time is now! With this step, we hope to: Increase transparency and trust in the plugin’s codebase. Engage the community for contributions and improvements. Speed up bug fixes and feature implementations. The source code is now available on GitHub and the latest release is ready for download on the marketplace. We encourage you to submit feature requests, report any bugs you encounter, suggest enhancements, or fork the plugin and customize it to fit your needs. Cheers! Subscribe to TeamCity Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/Updates-on-Unreal-Engine-Support-in-TeamCity-social-share.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/teamcity/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/TeamCity-2.svg\" alt=\"Teamcity logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003ePowerful CI/CD for DevOps-centric teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                                        \u003ch2 id=\"major-updates\"\u003eUpdates on Unreal Engine Support in TeamCity: UGS Integration and Open-Sourcing the Plugin\u003c/h2\u003e                    \n                    \n\u003cp\u003eWe’ve got a few exciting updates about the Unreal Engine plugin announced in the\u003ca href=\"https://blog.jetbrains.com/teamcity/2024/05/unreal-engine-plugin-for-teamcity/\"\u003e previous blog post\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eTL;DR – we’re adding Unreal Game Sync (UGS) integration and open-sourcing \u003ca href=\"https://plugins.jetbrains.com/plugin/22679-unreal-engine-support\" data-type=\"link\" data-id=\"https://plugins.jetbrains.com/plugin/22679-unreal-engine-support\" target=\"_blank\" rel=\"noopener\"\u003ethe plugin\u003c/a\u003e. These updates are all about making the CI/CD experience smoother for Unreal Engine devs and getting the community more involved.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eUGS\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore diving in, let’s quickly go over what Unreal Game Sync (UGS) is for anyone who might not be familiar with it or could use a refresher. In essence, UGS is a lightweight UI for Perforce. Typically, you need to build it from source to get started, and while its graphical client is a WinForms application available only on Windows, there is a command-line interface (CLI) version for other platforms. UGS has been around for a while and is widely used by game studios working with Unreal Engine as a collaboration tool.\u003c/p\u003e\n\n\n\n\u003cp\u003eFrom a CI/CD perspective, UGS provides valuable insights into a project’s status (if properly set up), such as build statuses, the ability to flag specific changelists as problematic, and more. To give a better overview, here’s a rough diagram of the components involved:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1999\" height=\"987\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Updates-on-Unreal-Engine-Support-in-TeamCity_1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThere are quite a few components here, with the central one being the Metadata Server. While deploying it isn’t strictly necessary, it does enable the full feature set of UGS. This is also where CI/CD systems post build information. As shown, there are different possible implementations of the Metadata Server, and it’s worth briefly discussing each:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-game-sync-reference-guide-for-unreal-engine#settingupthemetadataservice\" target=\"_blank\" rel=\"noopener\"\u003eEpic Metadata Service\u003c/a\u003e. This is the original and longest-standing version of the Metadata Server. It requires Windows, IIS, and the older .NET Framework 4.6.2.\u003c/li\u003e\n\n\n\n\u003cli\u003eThird-party implementation. Thanks to the open-source nature of the server, it’s possible to create your own implementation. One example is \u003ca href=\"https://github.com/jorgenpt/rugs\" target=\"_blank\" rel=\"noopener\"\u003eRUGS\u003c/a\u003e, which is much easier to set up since it supports Docker.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/horde-in-unreal-engine\" target=\"_blank\" rel=\"noopener\"\u003eHorde\u003c/a\u003e. Technically, this is a full-fledged automation platform recently introduced by Epic. It includes a built-in UGS Metadata Server as well as its own build system. Although it has a built-in metadata server, it doesn’t allow publishing from external sources – the transition to Horde assumes that all metadata is generated internally. Horde is a bit outside the scope of this blog post, so we’re only mentioning it for the sake of completeness.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eEntities that the build system is supposed to post to the metadata server are called “badges” in UGS terms. These badges will then show up in the CIS (continuous integration status) column in UGS. It usually looks like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"982\" height=\"266\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/unreal-engine-teamcity_2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs far as we know, the metadata server endpoints don’t currently have authentication. It appears that the server is intended to be used within a secure, closed network, but this is just our understanding and not an official statement.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor a more complete definition of UGS please refer to the\u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-game-sync-ugs-for-unreal-engine\" target=\"_blank\" rel=\"noopener\"\u003e official documentation\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eUGS Integration in TeamCity\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eLet’s take a look at UGS integration in TeamCity. As of the most recent plugin update, we support these two scenarios:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003ePublishing a badge as a build status via the\u003ca href=\"https://www.jetbrains.com/help/teamcity/commit-status-publisher.html\" target=\"_blank\" rel=\"noopener\"\u003e Commit Status Publisher\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003ePublishing an arbitrary set of badges defined in your BuildGraph script.\u003cbr/\u003eThis applies to the “distributed” execution mode – a special runner mode in which the BuildGraph definition of the build is converted into a set of builds in TeamCity (\u003ca href=\"https://www.jetbrains.com/help/teamcity/build-chain.html\" target=\"_blank\" rel=\"noopener\"\u003ebuild chain\u003c/a\u003e). For more details, please refer to our \u003ca href=\"https://blog.jetbrains.com/teamcity/2024/05/unreal-engine-plugin-for-teamcity/\"\u003eprevious blog post\u003c/a\u003e or the plugin \u003ca href=\"https://github.com/JetBrains/teamcity-unreal-engine-plugin/blob/master/USAGE.md\" target=\"_blank\" rel=\"noopener\"\u003edocumentation\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe first scenario is pretty straightforward. You only need to configure the Commit Status Publisher build feature and set up a few required parameters.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1690\" height=\"1042\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/unreal-engine-teamcity-vcs-root.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe second scenario is more complex. In your \u003ca href=\"https://dev.epicgames.com/documentation/en-us/unreal-engine/buildgraph-script-elements-reference-for-unreal-engine\" target=\"_blank\" rel=\"noopener\"\u003escript\u003c/a\u003e, you can define a set of badges and link them to specific nodes to be tracked. Before diving into the scripts, here’s a quick reminder of how the plugin maps BuildGraph entities to TeamCity entities:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eBuildGraph\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eTeamCity\u003c/strong\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eNode\u003c/td\u003e\u003ctd\u003eBuild step\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eAgent\u003c/td\u003e\u003ctd\u003eBuild\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor example, if your build process includes compiling an editor, the script might look like this (with unimportant details omitted):\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u0026lt;Agent Name=\u0026#34;Build Editor and tools\u0026#34; Type=\u0026#34;...\u0026#34;\u0026gt;\n    \u0026lt;Node Name=\u0026#34;Set binary version\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\n    \u0026lt;Node Name=\u0026#34;Compile Tools\u0026#34; Requires=\u0026#34;Set binary version\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\n    \u0026lt;Node Name=\u0026#34;Compile Editor\u0026#34; Requires=\u0026#34;Compile Tools\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\u0026lt;/Agent\u0026gt;\n\n\u0026lt;Badge Name=\u0026#34;Compile Editor\u0026#34; Project=\u0026#34;//UE5/Main/Samples/Games/Lyra\u0026#34; Requires=\u0026#34;Compile Editor\u0026#34;/\u0026gt;\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eHere, we define a badge named “Compile Editor” to track the execution of a node with the same name. In distributed BuildGraph mode, TeamCity will recognize this badge and update the build status as the process progresses.\u003c/p\u003e\u003cp\u003eYou can define multiple badges to track different sets of nodes, and TeamCity will monitor all of them based on the specified dependencies:\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cpre\u003e\u0026lt;Agent Name=\u0026#34;Build A\u0026#34; Type=\u0026#34;A\u0026#34;\u0026gt;\n    \u0026lt;Node Name=\u0026#34;Node 1\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\u0026lt;/Agent\u0026gt;\n\n\u0026lt;Agent Name=\u0026#34;Build B\u0026#34; Type=\u0026#34;B\u0026#34;\u0026gt;\n    \u0026lt;Node Name=\u0026#34;Node 2\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\u0026lt;/Agent\u0026gt;\n\n\u0026lt;Agent Name=\u0026#34;Build C\u0026#34; Type=\u0026#34;C\u0026#34;\u0026gt;\n    \u0026lt;Node Name=\u0026#34;Node 3\u0026#34;\u0026gt;\n        ...\n    \u0026lt;/Node\u0026gt;\n\u0026lt;/Agent\u0026gt;\n\n\u0026lt;Badge Name=\u0026#34;BuildProject\u0026#34; Project=\u0026#34;//foo/bar/project\u0026#34; Requires=\u0026#34;Node A;Node B;Node C\u0026#34;/\u0026gt;\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this example, there are three agents (each with a single node) that can potentially run concurrently, as they are assigned to different agents and have no dependencies on each other. Each build is tracked by a corresponding badge.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe badge will behave as follows:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e“Starting” – displayed as soon as any tracked dependency begins execution.\u003c/li\u003e\n\n\n\n\u003cli\u003e“Success” – shown when all dependencies complete successfully.\u003c/li\u003e\n\n\n\n\u003cli\u003e“Failure” – Indicated if any dependency encounters an error.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFor complete examples, please refer to the plugin’s \u003ca href=\"https://github.com/JetBrains/teamcity-unreal-engine-plugin/blob/master/USAGE.md\" target=\"_blank\" rel=\"noopener\"\u003euser guide on GitHub\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eOpen-sourcing the Plugin\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe have received a lot of feedback since the plugin was introduced in May this year. Thank you to everyone who shared ideas for further development, submitted feature requests, or reported bugs! We’ve also been asked several times whether we’re going to open-source the plugin and, if so, when. That time is now!\u003c/p\u003e\n\n\n\n\u003cp\u003eWith this step, we hope to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIncrease transparency and trust in the plugin’s codebase.\u003c/li\u003e\n\n\n\n\u003cli\u003eEngage the community for contributions and improvements.\u003c/li\u003e\n\n\n\n\u003cli\u003eSpeed up bug fixes and feature implementations.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe source code is now available on \u003ca href=\"https://github.com/JetBrains/teamcity-unreal-engine-plugin\" target=\"_blank\" rel=\"noopener\"\u003eGitHub\u003c/a\u003e and the latest \u003ca href=\"https://plugins.jetbrains.com/plugin/22679-unreal-engine-support/versions/stable/629317\" target=\"_blank\" rel=\"noopener\"\u003erelease\u003c/a\u003e is ready for download on the marketplace. We encourage you to submit feature requests, report any bugs you encounter, suggest enhancements, or fork the plugin and customize it to fit your needs.\u003c/p\u003e\n\n\n\n\u003cp\u003eCheers!\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to TeamCity Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
