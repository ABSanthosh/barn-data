{
  "id": "8b09c496-4fa1-4935-8b46-105956005bf7",
  "title": "What's new in Git 2.49.0?",
  "link": "https://about.gitlab.com/blog/2025/03/14/whats-new-in-git-2-49-0",
  "description": "",
  "author": "Toon Claes",
  "published": "2025-03-14T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Toon Claes",
  "length": 16347,
  "excerpt": "Learn about the latest version of Git, including improved performance thanks to zlib-ng, a new name-hashing algorithm, and git-backfill(1).",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "The Git project recently released Git 2.49.0. Let's look at a few notable highlights from this release, which includes contributions from GitLab's Git team and the wider Git community. What's covered: git-backfill(1) and the new path-walk API Introduction of zlib-ng Continued iteration on Meson Deprecation of .git/branches/ and .git/remotes/ Rust bindings for libgit New name-hashing algorithm Promisor remote capability Thin clone using --revision git-backfill(1) and the new path-walk API When you git-clone(1) a Git repository, you can pass it the --filter option. Using this option allows you to create a partial clone. In a partial clone the server only sends a subset of reachable objects according to the given object filter. For example, creating a clone with --filter=blob:none will not fetch any blobs (file contents) from the server and create a blobless clone. Blobless clones have all the reachable commits and trees, but no blobs. When you perform an operation like git-checkout(1), Git will download the missing blobs to complete that operation. For some operations, like git-blame(1), this might result in downloading objects one by one, which will slow down the command drastically. This performance degradation occurs because git-blame(1) must traverse the commit history to identify which specific blobs it needs, then request each missing blob from the server separately. In Git 2.49, a new subcommand git-backfill(1) is introduced, which can be used to download missing blobs in a blobless partial clone. Under the hood, the git-backfill(1) command leverages the new path-walk API, which is different from how Git generally iterates over commits. Rather than iterating over the commits one at a time and recursively visiting the trees and blobs associated with each commit, the path-walk API does traversal by path. For each path, it adds a list of associated tree objects to a stack. This stack is then processed in a depth-first order. So, instead of processing every object in commit 1 before moving to commit 2, it will process all versions of file A across all commits before moving to file B. This approach greatly improves performance in scenarios where grouping by path is essential. Let me demonstrate its use by making a blobless clone of gitlab-org/git: $ git clone --filter=blob:none --bare --no-tags [email protected]:gitlab-org/git.git Cloning into bare repository 'git.git'... remote: Enumerating objects: 245904, done. remote: Counting objects: 100% (1736/1736), done. remote: Compressing objects: 100% (276/276), done. remote: Total 245904 (delta 1591), reused 1547 (delta 1459), pack-reused 244168 (from 1) Receiving objects: 100% (245904/245904), 59.35 MiB | 15.96 MiB/s, done. Resolving deltas: 100% (161482/161482), done. Above, we use --bare to ensure Git doesn't need to download any blobs to check out an initial branch. We can verify this clone does not contain any blobs: $ git cat-file --batch-all-objects --batch-check='%(objecttype)' | sort | uniq -c 83977 commit 161927 tree If you want to see the contents of a file in the repository, Git has to download it: $ git cat-file -p HEAD:README.md remote: Enumerating objects: 1, done. remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 1 (from 1) Receiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done. [![Build status](https://github.com/git/git/workflows/CI/badge.svg)](https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush) Git - fast, scalable, distributed revision control system ========================================================= Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. [snip] As you can see above, Git first talks to the remote repository to download the blob before it can display it. When you would like to git-blame(1) that file, it needs to download a lot more: $ git blame HEAD README.md remote: Enumerating objects: 1, done. remote: Counting objects: 100% (1/1), done. remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0) Receiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done. remote: Enumerating objects: 1, done. remote: Counting objects: 100% (1/1), done. remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0) Receiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done. remote: Enumerating objects: 1, done. remote: Counting objects: 100% (1/1), done. remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0) Receiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done. remote: Enumerating objects: 1, done. [snip] df7375d772 README.md (Ævar Arnfjörð Bjarmason 2021-11-23 17:29:09 +0100 1) [![Build status](https://github.com/git/git/workflows/CI/badge.svg)](https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush) 5f7864663b README.md (Johannes Schindelin 2019-01-29 06:19:32 -0800 2) 28513c4f56 README.md (Matthieu Moy 2016-02-25 09:37:29 +0100 3) Git - fast, scalable, distributed revision control system 28513c4f56 README.md (Matthieu Moy 2016-02-25 09:37:29 +0100 4) ========================================================= 556b6600b2 README (Nicolas Pitre 2007-01-17 13:04:39 -0500 5) 556b6600b2 README (Nicolas Pitre 2007-01-17 13:04:39 -0500 6) Git is a fast, scalable, distributed revision control system with an 556b6600b2 README (Nicolas Pitre 2007-01-17 13:04:39 -0500 7) unusually rich command set that provides both high-level operations 556b6600b2 README (Nicolas Pitre 2007-01-17 13:04:39 -0500 8) and full access to internals. 556b6600b2 README (Nicolas Pitre 2007-01-17 13:04:39 -0500 9) [snip] We've truncated the output, but as you can see, Git goes to the server for each revision of that file separately. That's really inefficient. With git-backfill(1) we can ask Git to download all blobs: $ git backfill remote: Enumerating objects: 50711, done. remote: Counting objects: 100% (15438/15438), done. remote: Compressing objects: 100% (708/708), done. remote: Total 50711 (delta 15154), reused 14730 (delta 14730), pack-reused 35273 (from 1) Receiving objects: 100% (50711/50711), 11.62 MiB | 12.28 MiB/s, done. Resolving deltas: 100% (49154/49154), done. remote: Enumerating objects: 50017, done. remote: Counting objects: 100% (10826/10826), done. remote: Compressing objects: 100% (634/634), done. remote: Total 50017 (delta 10580), reused 10192 (delta 10192), pack-reused 39191 (from 1) Receiving objects: 100% (50017/50017), 12.17 MiB | 12.33 MiB/s, done. Resolving deltas: 100% (48301/48301), done. remote: Enumerating objects: 47303, done. remote: Counting objects: 100% (7311/7311), done. remote: Compressing objects: 100% (618/618), done. remote: Total 47303 (delta 7021), reused 6693 (delta 6693), pack-reused 39992 (from 1) Receiving objects: 100% (47303/47303), 40.84 MiB | 15.26 MiB/s, done. Resolving deltas: 100% (43788/43788), done. This backfills all blobs, turning the blobless clone into a full clone: $ git cat-file --batch-all-objects --batch-check='%(objecttype)' | sort | uniq -c 148031 blob 83977 commit 161927 tree This project was led by Derrick Stolee and was merged with e565f37553. Introduction of zlib-ng All objects in the .git/ folder are compressed by Git using zlib. zlib is the reference implementation for the RFC 1950: ZLIB Compressed Data Format. Created in 1995, zlib has a long history and is incredibly portable, even supporting many systems that predate the Internet. Because of its wide support of architectures and compilers, it has limitations in what it is capable of. The fork zlib-ng was created to accommodate the limitations. zlib-ng aims to be optimized for modern systems. This fork drops support for legacy systems and instead brings in patches for Intel optimizations, some Cloudflare optimizations, and a couple other smaller patches. The zlib-ng library itself provides a compatibility layer for zlib. The compatibility later allows zlib-ng to be a drop-in replacement for zlib, but that layer is not available on all Linux distributions. In Git 2.49: A compatibility layer was added to the Git project. Build options were added to both to the Makefile and Meson Build file. These additions make it easier to benefit from the performance improvements of zlib-ng. In local benchmarks, we've seen a ~25% speedup when using zlib-ng instead of zlib. And we're in the process of rolling out these changes to GitLab.com, too. If you want to benefit from the gains of zlib-ng, first verify if Git on your machine is already using zlib-ng by running git version --build-options: $ git version --build-options git version 2.47.1 cpu: x86_64 no commit associated with this build sizeof-long: 8 sizeof-size_t: 8 shell-path: /bin/sh libcurl: 8.6.0 OpenSSL: OpenSSL 3.2.2 4 Jun 2024 zlib: 1.3.1.zlib-ng If the last line includes zlib-ng then your Git is already built using the faster zlib variant. If not, you can either: Ask the maintainer of the Git package you are using to include zlib-ng support. Build Git yourself from source. These changes were introduced by Patrick Steinhardt. Continued iteration on Meson In our article about the Git 2.48 release, we touched on the introduction of the Meson build system. Meson is a build automation tool used by the Git project that at some point might replace Autoconf, CMake, and maybe even Make. During this release cycle, work continued on using Meson, adding various missing features and stabilization fixes: Improved test coverage for CI was merged in 72f1ddfbc9. Bits and pieces to use Meson in contrib/ were merged in 2a1530a953. Assorted fixes and improvements to the build procedure based on meson were merged in ab09eddf60. Making Meson aware of building git-subtree(1) was merged in 3ddeb7f337. Learn Meson to generate HTML documentation pages was merged in 1b4e9a5f8b. All these efforts were carried out by Patrick Steinhardt. Deprecation of .git/branches/ and .git/remotes/ You are probably aware of the existence of the .git directory, and what is inside. But have you ever heard about the sub-directories .git/branches/ and .git/remotes/? As you might know, reference to branches are stored in .git/refs/heads/, so that's not what .git/branches/ is for, and what about .git/remotes/? Way back in 2005, .git/branches/ was introduced to store a shorthand name for a remote, and a few months later they were moved to .git/remotes/. In 2006, git-config(1) learned to store remotes. This has become the standard way to configure remotes and, in 2011, the directories .git/branches/ and .git/remotes/ were documented as being \"legacy\" and no longer used in modern repositories. In 2024, the document BreakingChanges was started to outline breaking changes for the next major version of Git (v3.0). While this release is not planned to happen any time soon, this document keeps track of changes that are expected to be part of that release. In 8ccc75c245, the use of the directories .git/branches/ and .git/remotes/ was added to this document and that officially marks as them deprecated and to be removed in Git 3.0. Thanks to Patrick Steinhardt for formalizing this deprecation. Rust bindings for libgit When compiling Git, an internal library libgit.a is made. This library contains some of the core functionality of Git. While this library (and most of Git) is written in C, in Git 2.49 bindings were added to make some of these functions available in Rust. To achieve this, two new Cargo packages were created: libgit-sys and libgit-rs. These packages live in the contrib/ subdirectory in the Git source tree. It's pretty common to split out a library into two packages when a Foreign Function Interface is used. The libgit-sys package provides the pure interface to C functions and links to the native libgit.a library. The package libgit-rs provides a high-level interface to the functions in libgit-sys with a feel that is more idiomatic to Rust. So far, the functionality in these Rust packages is very limited. It only provides an interface to interact with the git-config(1). This initiative was led by Josh Steadmon and was merged with a4af0b6288. New name-hashing algorithm The Git object database in .git/ stores most of its data in packfiles. And packfiles are also used to submit objects between Git server and client over the wire. You can read all about the format at gitformat-pack(5). One important aspect of the packfiles is delta-compression. With delta-compression not every object is stored as-is, but some objects are saved as a delta of another base. So instead of saving the full contents of the objects, changes compared to another object are stored. Without going into the details how these deltas are calculated or stored, you can imagine that it is important group files together that are very similar. In v2.48 and earlier, Git looked at the last 16 characters of the path name to determine whether blobs might be similar. This algorithm is named version 1. In Git 2.49, version 2 is available. This is an iteration on version 1, but modified so the effect of the parent directory is reduced. You can specify the name-hash algorithm version you want to use with option --name-hash-version of git-repack(1). Derrick Stolee, who drove this project, did some comparison in resulting packfile size after running git repack -adf --name-hash-version=\u003cn\u003e: Repo Version 1 size Version 2 size fluentui 440 MB 161 MB Repo B 6,248 MB 856 MB Repo C 37,278 MB 6,921 MB Repo D 131,204 MB 7,463 MB You can read more of the details in the patch set, which is merged in aae91a86fb. Promisor remote capability It's known that Git isn't great in dealing with large files. There are some solutions to this problem, like Git LFS, but there are still some shortcomings. To give a few: With Git LFS the user has to configure which files to put in LFS. The server has no control about that and has to serve all files. Whenever a file is committed to the repository, there is no way to get it out again without rewriting history. This is annoying, especially for large files, because they are stuck for eternity. Users cannot change their mind on which files to put into Git LFS. A tool like Git LFS requires significant effort to set up, learn, and use correctly. For some time, Git has had the concept of promisor remotes. This feature can be used to deal with large files, and in Git 2.49 this feature took a step forward. The idea for the new “promisor-remote” capability is relatively simple: Instead of sending all objects itself, a Git server can tell to the Git client \"Hey, go download these objects from XYZ\". XYZ would be a promisor remote. Git 2.49 enables the server to advertise the information of the promisor remote to the client. This change is an extension to gitprotocol-v2. While the server and the client are transmitting data to each other, the server can send names and URLs of the promisor remotes it knows about. So far, the client is not using the promisor remote info it gets from the server during clone, so all objects are still transmitted from the remote the clone initiated from. We are planning to continue work on this feature, making it use promisor remote info from the server, and making it easier to use. This patch set was submitted by Christian Couder and merged with 2c6fd30198. Thin clone using --revision A new --revision option was added to git-clone(1). This enables you to create a thin clone of a repository that only contains the history of the given revision. The option is similar to --branch, but accepts a ref name (like refs/heads/main, refs/tags/v1.0, and refs/merge-requests/123) or a hexadecimal commit object ID. The difference to --branch is that it does not create a tracking branch and detaches HEAD. This means it's not suited if you want to contribute back to that branch. You can use --revision in combination with --depth to create a very minimal clone. A suggested use-case is for automated testing. When you have a CI system that needs to check out a branch (or any reference) to perform autonomous testing on the source code, having a minimal clone is all you need. This change was driven by Toon Claes. Read more What’s new in Git 2.48.0? What’s new in Git 2.47.0? What’s new in Git 2.46.0?",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/vCAFaVFVE3oRJaysoXwE2/16d6d4660e6f596282e70bfc1538a4b0/git3-cover.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eThe Git project recently released \u003ca href=\"https://lore.kernel.org/git/xmqqfrjfilc8.fsf@gitster.g/\"\u003eGit 2.49.0\u003c/a\u003e. Let\u0026#39;s look at a few notable highlights from this release, which includes contributions from GitLab\u0026#39;s Git team and the wider Git community.\u003c/p\u003e\n\u003cp\u003eWhat\u0026#39;s covered:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#git-backfill(1)-and-the-new-path-walk-api\"\u003egit-backfill(1) and the new path-walk API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#introduction-of-zlib-ng\"\u003eIntroduction of zlib-ng\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#continued-iteration-on-meson\"\u003eContinued iteration on Meson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#deprecation-of-.gitbranches%2F-and-.git%2Fremotes%2F\"\u003eDeprecation of .git/branches/ and .git/remotes/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#rust-bindings-for-libgit\"\u003eRust bindings for libgit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#new-name-hashing-algorithm\"\u003eNew name-hashing algorithm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#promisor-remote-capability\"\u003ePromisor remote capability\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#thin-clone-using---revision\"\u003eThin clone using \u003ccode\u003e--revision\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-backfill(1)-and-the-new-path-walk-api\" tabindex=\"-1\"\u003egit-backfill(1) and the new path-walk API \u003ca href=\"#git-backfill(1)-and-the-new-path-walk-api\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen you \u003ca href=\"https://git-scm.com/docs/git-clone\"\u003e\u003ccode\u003egit-clone(1)\u003c/code\u003e\u003c/a\u003e a Git repository,\nyou can pass it the\n\u003ca href=\"https://git-scm.com/docs/git-clone#Documentation/git-clone.txt-code--filterltfilter-specgtcode\"\u003e\u003ccode\u003e--filter\u003c/code\u003e\u003c/a\u003e\noption. Using this option allows you to create a \u003cem\u003epartial clone\u003c/em\u003e. In a partial\nclone the server only sends a subset of reachable objects according to the given\nobject filter. For example, creating a clone with \u003ccode\u003e--filter=blob:none\u003c/code\u003e will not\nfetch any blobs (file contents) from the server and create a \u003cem\u003eblobless clone\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBlobless clones have all the reachable commits and trees, but no blobs. When you\nperform an operation like\n\u003ca href=\"https://git-scm.com/docs/git-checkout\"\u003e\u003ccode\u003egit-checkout(1)\u003c/code\u003e\u003c/a\u003e, Git will download\nthe missing blobs to complete that operation. For some operations, like\n\u003ca href=\"https://git-scm.com/docs/git-blame\"\u003e\u003ccode\u003egit-blame(1)\u003c/code\u003e\u003c/a\u003e, this might result in\ndownloading objects one by one, which will slow down the command drastically.\nThis performance degradation occurs because \u003ccode\u003egit-blame(1)\u003c/code\u003e must traverse the\ncommit history to identify which specific blobs it needs, then request each\nmissing blob from the server separately.\u003c/p\u003e\n\u003cp\u003eIn Git 2.49, a new subcommand \u003ccode\u003egit-backfill(1)\u003c/code\u003e is introduced, which can be\nused to download missing blobs in a blobless partial clone.\u003c/p\u003e\n\u003cp\u003eUnder the hood, the \u003ccode\u003egit-backfill(1)\u003c/code\u003e command leverages the new path-walk API, which is different from how Git generally iterates over commits. Rather than iterating over the commits one at a time and recursively visiting the trees and blobs associated with each commit, the path-walk API does traversal by path. For each path, it adds a list of associated tree objects to a stack. This stack is then processed in a depth-first order. So, instead of processing every object in commit \u003ccode\u003e1\u003c/code\u003e before moving to commit \u003ccode\u003e2\u003c/code\u003e, it will process all versions of file \u003ccode\u003eA\u003c/code\u003e across all commits before moving to file \u003ccode\u003eB\u003c/code\u003e. This approach greatly improves performance in scenarios where grouping by path is essential.\u003c/p\u003e\n\u003cp\u003eLet me demonstrate its use by making a blobless clone of \u003ca href=\"https://gitlab.com/gitlab-org/git\"\u003e\u003ccode\u003egitlab-org/git\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git clone --filter=blob:none --bare --no-tags \u003ca href=\"https://about.gitlab.com/cdn-cgi/l/email-protection\" data-cfemail=\"0e69677a4e69677a626f6c206d6163\"\u003e[email protected]\u003c/a\u003e:gitlab-org/git.git\nCloning into bare repository \u0026#39;git.git\u0026#39;...\nremote: Enumerating objects: 245904, done.\nremote: Counting objects: 100% (1736/1736), done.\nremote: Compressing objects: 100% (276/276), done.\nremote: Total 245904 (delta 1591), reused 1547 (delta 1459), pack-reused 244168 (from 1)\nReceiving objects: 100% (245904/245904), 59.35 MiB | 15.96 MiB/s, done.\nResolving deltas: 100% (161482/161482), done.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we use \u003ccode\u003e--bare\u003c/code\u003e to ensure Git doesn\u0026#39;t need to download any blobs to check\nout an initial branch. We can verify this clone does not contain any blobs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git cat-file --batch-all-objects --batch-check=\u0026#39;%(objecttype)\u0026#39; | sort | uniq -c\n  83977 commit\n 161927 tree\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you want to see the contents of a file in the repository, Git has to download it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git cat-file -p HEAD:README.md\nremote: Enumerating objects: 1, done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 1 (from 1)\nReceiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done.\n\n[![Build status](https://github.com/git/git/workflows/CI/badge.svg)](https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush)\n\nGit - fast, scalable, distributed revision control system\n=========================================================\n\nGit is a fast, scalable, distributed revision control system with an\nunusually rich command set that provides both high-level operations\nand full access to internals.\n\n[snip]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see above, Git first talks to the remote repository to download the blob before\nit can display it.\u003c/p\u003e\n\u003cp\u003eWhen you would like to \u003ccode\u003egit-blame(1)\u003c/code\u003e that file, it needs to download a lot\nmore:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git blame HEAD README.md\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done.\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done.\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (1/1), 1.64 KiB | 1.64 MiB/s, done.\nremote: Enumerating objects: 1, done.\n\n[snip]\n\ndf7375d772 README.md (Ævar Arnfjörð Bjarmason 2021-11-23 17:29:09 +0100  1) [![Build status](https://github.com/git/git/workflows/CI/badge.svg)](https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush)\n5f7864663b README.md (Johannes Schindelin \t2019-01-29 06:19:32 -0800  2)\n28513c4f56 README.md (Matthieu Moy        \t2016-02-25 09:37:29 +0100  3) Git - fast, scalable, distributed revision control system\n28513c4f56 README.md (Matthieu Moy        \t2016-02-25 09:37:29 +0100  4) =========================================================\n556b6600b2 README\t(Nicolas Pitre       \t2007-01-17 13:04:39 -0500  5)\n556b6600b2 README\t(Nicolas Pitre       \t2007-01-17 13:04:39 -0500  6) Git is a fast, scalable, distributed revision control system with an\n556b6600b2 README\t(Nicolas Pitre       \t2007-01-17 13:04:39 -0500  7) unusually rich command set that provides both high-level operations\n556b6600b2 README\t(Nicolas Pitre       \t2007-01-17 13:04:39 -0500  8) and full access to internals.\n556b6600b2 README\t(Nicolas Pitre       \t2007-01-17 13:04:39 -0500  9)\n\n[snip]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe\u0026#39;ve truncated the output, but as you can see, Git goes to the server for each\nrevision of that file separately. That\u0026#39;s really inefficient. With\n\u003ccode\u003egit-backfill(1)\u003c/code\u003e we can ask Git to download all blobs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git backfill\nremote: Enumerating objects: 50711, done.\nremote: Counting objects: 100% (15438/15438), done.\nremote: Compressing objects: 100% (708/708), done.\nremote: Total 50711 (delta 15154), reused 14730 (delta 14730), pack-reused 35273 (from 1)\nReceiving objects: 100% (50711/50711), 11.62 MiB | 12.28 MiB/s, done.\nResolving deltas: 100% (49154/49154), done.\nremote: Enumerating objects: 50017, done.\nremote: Counting objects: 100% (10826/10826), done.\nremote: Compressing objects: 100% (634/634), done.\nremote: Total 50017 (delta 10580), reused 10192 (delta 10192), pack-reused 39191 (from 1)\nReceiving objects: 100% (50017/50017), 12.17 MiB | 12.33 MiB/s, done.\nResolving deltas: 100% (48301/48301), done.\nremote: Enumerating objects: 47303, done.\nremote: Counting objects: 100% (7311/7311), done.\nremote: Compressing objects: 100% (618/618), done.\nremote: Total 47303 (delta 7021), reused 6693 (delta 6693), pack-reused 39992 (from 1)\nReceiving objects: 100% (47303/47303), 40.84 MiB | 15.26 MiB/s, done.\nResolving deltas: 100% (43788/43788), done.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis backfills all blobs, turning the blobless clone into a full clone:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git cat-file --batch-all-objects --batch-check=\u0026#39;%(objecttype)\u0026#39; | sort | uniq -c\n 148031 blob\n  83977 commit\n 161927 tree\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \u003ca href=\"https://lore.kernel.org/git/pull.1820.v3.git.1738602667.gitgitgadget@gmail.com/\"\u003eproject\u003c/a\u003e\nwas led by \u003ca href=\"https://stolee.dev/\"\u003eDerrick Stolee\u003c/a\u003e and was merged with\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/e565f3755342caf1d21e22359eaf09ec11d8c0ae\"\u003ee565f37553\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"introduction-of-zlib-ng\" tabindex=\"-1\"\u003eIntroduction of zlib-ng \u003ca href=\"#introduction-of-zlib-ng\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAll objects in the \u003ccode\u003e.git/\u003c/code\u003e folder are compressed by Git using \u003ca href=\"https://zlib.net/\"\u003e\u003ccode\u003ezlib\u003c/code\u003e\u003c/a\u003e. \u003ccode\u003ezlib\u003c/code\u003e is the reference implementation for the \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc1950\"\u003eRFC\n1950\u003c/a\u003e: ZLIB Compressed Data\nFormat. Created in 1995, \u003ccode\u003ezlib\u003c/code\u003e has a long history and is incredibly\nportable, even supporting many systems that predate the Internet. Because of its\nwide support of architectures and compilers, it has limitations in what it is\ncapable of.\u003c/p\u003e\n\u003cp\u003eThe fork \u003ca href=\"https://github.com/zlib-ng/zlib-ng\"\u003e\u003ccode\u003ezlib-ng\u003c/code\u003e\u003c/a\u003e was created to\naccommodate the limitations. \u003ccode\u003ezlib-ng\u003c/code\u003e aims to be optimized for modern\nsystems. This fork drops support for legacy systems and instead brings in\npatches for Intel optimizations, some Cloudflare optimizations, and a couple\nother smaller patches.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ezlib-ng\u003c/code\u003e library itself provides a compatibility layer for \u003ccode\u003ezlib\u003c/code\u003e. The\ncompatibility later allows \u003ccode\u003ezlib-ng\u003c/code\u003e to be a drop-in replacement for \u003ccode\u003ezlib\u003c/code\u003e, but\nthat layer is not available on all Linux distributions. In Git 2.49:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA compatibility layer was added to the Git project.\u003c/li\u003e\n\u003cli\u003eBuild options were added to both to the \u003ca href=\"https://gitlab.com/gitlab-org/git/-/blob/b9d6f64393275b505937a8621a6cc4875adde8e0/Makefile#L186-187\"\u003e\u003ccode\u003eMakefile\u003c/code\u003e\u003c/a\u003e\nand \u003ca href=\"https://gitlab.com/gitlab-org/git/-/blob/b9d6f64393275b505937a8621a6cc4875adde8e0/meson.build#L795-811\"\u003eMeson Build file\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese additions make it easier to benefit from the performance improvements of\n\u003ccode\u003ezlib-ng\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn local benchmarks, we\u0026#39;ve seen a ~25% speedup when using \u003ccode\u003ezlib-ng\u003c/code\u003e instead of \u003ccode\u003ezlib\u003c/code\u003e. And we\u0026#39;re in the process of rolling out these changes to\nGitLab.com, too.\u003c/p\u003e\n\u003cp\u003eIf you want to benefit from the gains of \u003ccode\u003ezlib-ng\u003c/code\u003e, first verify if Git\non your machine is already using \u003ccode\u003ezlib-ng\u003c/code\u003e by running\n\u003ccode\u003egit version --build-options\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git version --build-options\ngit version 2.47.1\ncpu: x86_64\nno commit associated with this build\nsizeof-long: 8\nsizeof-size_t: 8\nshell-path: /bin/sh\nlibcurl: 8.6.0\nOpenSSL: OpenSSL 3.2.2 4 Jun 2024\nzlib: 1.3.1.zlib-ng\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the last line includes \u003ccode\u003ezlib-ng\u003c/code\u003e then your Git is already built\nusing the faster \u003ccode\u003ezlib\u003c/code\u003e variant. If not, you can either:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAsk the maintainer of the Git package you are using to include \u003ccode\u003ezlib-ng\u003c/code\u003e support.\u003c/li\u003e\n\u003cli\u003eBuild Git yourself from source.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese \u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/9d0e81e2ae3bd7f6d8a655be53c2396d7af3d2b0\"\u003echanges\u003c/a\u003e\nwere \u003ca href=\"https://lore.kernel.org/git/20250128-b4-pks-compat-drop-uncompress2-v4-0-129bc36ae8f5@pks.im/\"\u003eintroduced\u003c/a\u003e\nby \u003ca href=\"https://gitlab.com/pks-gitlab\"\u003ePatrick Steinhardt\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"continued-iteration-on-meson\" tabindex=\"-1\"\u003eContinued iteration on Meson \u003ca href=\"#continued-iteration-on-meson\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn our article about the Git 2.48 release,\nwe touched on \u003ca href=\"https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/#meson-build-system\"\u003ethe introduction of the Meson build system\u003c/a\u003e. \u003ca href=\"https://en.wikipedia.org/wiki/Meson_(software)\"\u003eMeson\u003c/a\u003e is\na build automation tool used by the Git project that at some point might replace \u003ca href=\"https://en.wikipedia.org/wiki/Autoconf\"\u003eAutoconf\u003c/a\u003e,\n\u003ca href=\"https://en.wikipedia.org/wiki/CMake\"\u003eCMake\u003c/a\u003e, and maybe even\n\u003ca href=\"https://en.wikipedia.org/wiki/Make_(software)\"\u003eMake\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDuring this release cycle, work continued on using Meson, adding various missing\nfeatures and stabilization fixes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lore.kernel.org/git/20250122-b4-pks-meson-additions-v3-0-5a51eb5d3dcd@pks.im/\"\u003eImproved test coverage for\nCI\u003c/a\u003e\nwas merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/72f1ddfbc95b47c6011bb423e6947418d1d72709\"\u003e72f1ddfbc9\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lore.kernel.org/git/20250219-b4-pks-meson-contrib-v2-0-1ba5d7fde0b9@pks.im/\"\u003eBits and pieces to use Meson in \u003ccode\u003econtrib/\u003c/code\u003e\u003c/a\u003e\nwere merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/2a1530a953cc4d2ae62416db86c545c7ccb73ace\"\u003e2a1530a953\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lore.kernel.org/git/20250226-b4-pks-meson-improvements-v3-0-60c77cf673ae@pks.im/\"\u003eAssorted fixes and improvements to the build procedure based on\nmeson\u003c/a\u003e\nwere merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/ab09eddf601501290b5c719574fbe6c02314631f\"\u003eab09eddf60\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lore.kernel.org/git/20250117-b4-pks-build-subtree-v1-0-03c2ed6cc42e@pks.im/\"\u003eMaking Meson aware of building\n\u003ccode\u003egit-subtree(1)\u003c/code\u003e\u003c/a\u003e\nwas merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/3ddeb7f3373ae0e309d9df62ada24375afa456c7\"\u003e3ddeb7f337\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lore.kernel.org/git/20241227-b4-pks-meson-docs-v2-0-f61e63edbfa1@pks.im/\"\u003eLearn Meson to generate HTML documentation\npages\u003c/a\u003e\nwas merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/1b4e9a5f8b5f048972c21fe8acafe0404096f694\"\u003e1b4e9a5f8b\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll these efforts were carried out by \u003ca href=\"https://gitlab.com/pks-gitlab\"\u003ePatrick Steinhardt\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"deprecation-of-.gitbranches%2F-and-.git%2Fremotes%2F\" tabindex=\"-1\"\u003eDeprecation of .git/branches/ and .git/remotes/ \u003ca href=\"#deprecation-of-.gitbranches%2F-and-.git%2Fremotes%2F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eYou are probably aware of the existence of the \u003ccode\u003e.git\u003c/code\u003e directory, and what is\ninside. But have you ever heard about the sub-directories \u003ccode\u003e.git/branches/\u003c/code\u003e and\n\u003ccode\u003e.git/remotes/\u003c/code\u003e? As you might know, reference to branches are stored in\n\u003ccode\u003e.git/refs/heads/\u003c/code\u003e, so that\u0026#39;s not what \u003ccode\u003e.git/branches/\u003c/code\u003e is for, and what about\n\u003ccode\u003e.git/remotes/\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eWay back in 2005, \u003ca href=\"https://git-scm.com/docs/git-fetch#_named_file_in_git_dirbranches\"\u003e\u003ccode\u003e.git/branches/\u003c/code\u003e\u003c/a\u003e\nwas introduced to store a shorthand name for a remote, and a few months later they were\nmoved to \u003ca href=\"https://git-scm.com/docs/git-fetch#_named_file_in_git_dirremotes\"\u003e\u003ccode\u003e.git/remotes/\u003c/code\u003e\u003c/a\u003e.\nIn \u003ca href=\"https://lore.kernel.org/git/Pine.LNX.4.63.0604301520460.2646@wbgn013.biozentrum.uni-wuerzburg.de/\"\u003e2006\u003c/a\u003e,\n\u003ca href=\"https://git-scm.com/docs/git-config\"\u003e\u003ccode\u003egit-config(1)\u003c/code\u003e\u003c/a\u003e learned to store\n\u003ca href=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-remoteltnamegturl\"\u003eremotes\u003c/a\u003e.\nThis has become the standard way to configure remotes and, in 2011, the\ndirectories \u003ccode\u003e.git/branches/\u003c/code\u003e and \u003ccode\u003e.git/remotes/\u003c/code\u003e were\n\u003ca href=\"https://gitlab.com/git-scm/git/-/commit/3d3d282146e13f2d7f055ad056956fd8e5d7ed29#e615263aaf131d42be8b0d0888ebd3fec954c6c9_132_124\"\u003edocumented\u003c/a\u003e\nas being \u0026#34;legacy\u0026#34; and no longer used in modern repositories.\u003c/p\u003e\n\u003cp\u003eIn 2024, the document \u003ca href=\"https://git-scm.com/docs/BreakingChanges\"\u003eBreakingChanges\u003c/a\u003e\nwas started to outline breaking changes for the next major version of Git\n(v3.0). While this release is not planned to happen any time soon, this document\nkeeps track of changes that are expected to be part of that release.\nIn \u003ca href=\"https://gitlab.com/git-scm/git/-/commit/8ccc75c2452b5814d2445d60d54266293ca48674\"\u003e8ccc75c245\u003c/a\u003e,\nthe use of the directories \u003ccode\u003e.git/branches/\u003c/code\u003e and \u003ccode\u003e.git/remotes/\u003c/code\u003e was added to\nthis document and that officially marks as them deprecated and to be removed in\nGit 3.0.\u003c/p\u003e\n\u003cp\u003eThanks to \u003ca href=\"https://gitlab.com/pks-gitlab\"\u003ePatrick Steinhardt\u003c/a\u003e for\n\u003ca href=\"https://lore.kernel.org/git/20250122-pks-remote-branches-deprecation-v4-5-5cbf5b28afd5@pks.im/\"\u003eformalizing this deprecation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"rust-bindings-for-libgit\" tabindex=\"-1\"\u003eRust bindings for libgit \u003ca href=\"#rust-bindings-for-libgit\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen compiling Git, an internal library \u003ccode\u003elibgit.a\u003c/code\u003e is made. This library\ncontains some of the core functionality of Git.\u003c/p\u003e\n\u003cp\u003eWhile this library (and most of Git) is written in C, in Git 2.49 bindings were\nadded to make some of these functions available in Rust. To achieve this, two\nnew Cargo packages were created: \u003ccode\u003elibgit-sys\u003c/code\u003e and \u003ccode\u003elibgit-rs\u003c/code\u003e. These packages\nlive in the \u003ca href=\"https://gitlab.com/gitlab-org/git/-/tree/master/contrib\"\u003e\u003ccode\u003econtrib/\u003c/code\u003e\u003c/a\u003e subdirectory in the Git source tree.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s pretty\n\u003ca href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages\"\u003ecommon\u003c/a\u003e\nto split out a library into two packages when a \u003ca href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\"\u003eForeign Function\nInterface\u003c/a\u003e is used.\nThe \u003ccode\u003elibgit-sys\u003c/code\u003e package provides the pure interface to C functions and links to\nthe native \u003ccode\u003elibgit.a\u003c/code\u003e library. The package \u003ccode\u003elibgit-rs\u003c/code\u003e provides a high-level\ninterface to the functions in \u003ccode\u003elibgit-sys\u003c/code\u003e with a feel that is more idiomatic to\nRust.\u003c/p\u003e\n\u003cp\u003eSo far, the functionality in these Rust packages is very limited. It only\nprovides an interface to interact with the \u003ccode\u003egit-config(1)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis initiative was led by \u003ca href=\"https://lore.kernel.org/git/8793ff64a7f6c4c04dd03b71162a85849feda944.1738187176.git.steadmon@google.com/\"\u003eJosh Steadmon\u003c/a\u003e and was merged with \u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/a4af0b6288e25eb327ae9018cee09def9e43f1cd\"\u003ea4af0b6288\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"new-name-hashing-algorithm\" tabindex=\"-1\"\u003eNew name-hashing algorithm \u003ca href=\"#new-name-hashing-algorithm\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe Git object database in \u003ccode\u003e.git/\u003c/code\u003e stores most of its data in packfiles. And\npackfiles are also used to submit objects between Git server and client over the\nwire.\u003c/p\u003e\n\u003cp\u003eYou can read all about the format at\n\u003ca href=\"https://git-scm.com/docs/gitformat-pack\"\u003e\u003ccode\u003egitformat-pack(5)\u003c/code\u003e\u003c/a\u003e. One important\naspect of the packfiles is delta-compression. With delta-compression not every\nobject is stored as-is, but some objects are saved as a \u003cem\u003edelta\u003c/em\u003e of another\n\u003cem\u003ebase\u003c/em\u003e. So instead of saving the full contents of the objects, changes compared\nto another object are stored.\u003c/p\u003e\n\u003cp\u003eWithout going into the details how these deltas are calculated or stored, you\ncan imagine that it is important group files together that are very similar. In\nv2.48 and earlier, Git looked at the last 16 characters of the path name to\ndetermine whether blobs might be similar. This algorithm is named version \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn Git 2.49, version \u003ccode\u003e2\u003c/code\u003e is available. This is an iteration on version \u003ccode\u003e1\u003c/code\u003e, but\nmodified so the effect of the parent directory is reduced. You can specify the\nname-hash algorithm version you want to use with option \u003ccode\u003e--name-hash-version\u003c/code\u003e of\n\u003ca href=\"https://git-scm.com/docs/git-repack\"\u003e\u003ccode\u003egit-repack(1)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stolee.dev/\"\u003eDerrick Stolee\u003c/a\u003e, who drove this project, did some\ncomparison in resulting packfile size after running \u003ccode\u003egit repack -adf --name-hash-version=\u0026lt;n\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eRepo\u003c/th\u003e\n\u003cth\u003eVersion 1 size\u003c/th\u003e\n\u003cth\u003eVersion 2 size\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/microsoft/fluentui\"\u003efluentui\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e440 MB\u003c/td\u003e\n\u003ctd\u003e161 MB\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRepo B\u003c/td\u003e\n\u003ctd\u003e6,248 MB\u003c/td\u003e\n\u003ctd\u003e856 MB\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRepo C\u003c/td\u003e\n\u003ctd\u003e37,278 MB\u003c/td\u003e\n\u003ctd\u003e6,921 MB\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRepo D\u003c/td\u003e\n\u003ctd\u003e131,204 MB\u003c/td\u003e\n\u003ctd\u003e7,463 MB\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eYou can read more of the details in the \u003ca href=\"https://lore.kernel.org/git/pull.1823.v4.git.1738004554.gitgitgadget@gmail.com/\"\u003epatch\nset\u003c/a\u003e,\nwhich is merged in\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/aae91a86fb2a71ff89a71b63ccec3a947b26ca51\"\u003eaae91a86fb\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"promisor-remote-capability\" tabindex=\"-1\"\u003ePromisor remote capability \u003ca href=\"#promisor-remote-capability\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIt\u0026#39;s known that Git isn\u0026#39;t great in dealing with large files. There are some\nsolutions to this problem, like \u003ca href=\"https://git-lfs.com/\"\u003eGit LFS\u003c/a\u003e, but there are\nstill some shortcomings. To give a few:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWith Git LFS the user has to configure which files to put in LFS. The server has\nno control about that and has to serve all files.\u003c/li\u003e\n\u003cli\u003eWhenever a file is committed to the repository, there is no way to get it out\nagain without rewriting history. This is annoying, especially for large files,\nbecause they are stuck for eternity.\u003c/li\u003e\n\u003cli\u003eUsers cannot change their mind on which files to put into Git LFS.\u003c/li\u003e\n\u003cli\u003eA tool like Git LFS requires significant effort to set up, learn, and use\ncorrectly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor some time, Git has had the concept of promisor remotes. This feature can be used to deal with large files, and in Git 2.49 this feature took a step forward.\u003c/p\u003e\n\u003cp\u003eThe idea for the new “promisor-remote” capability is relatively simple: Instead of sending all\nobjects itself, a Git server can tell to the Git client \u0026#34;Hey, go download these\nobjects from \u003cem\u003eXYZ\u003c/em\u003e\u0026#34;. \u003cem\u003eXYZ\u003c/em\u003e would be a promisor remote.\u003c/p\u003e\n\u003cp\u003eGit 2.49 enables the server to advertise the information of the promisor remote\nto the client. This change is an extension to\n\u003ca href=\"https://git-scm.com/docs/gitprotocol-v2\"\u003e\u003ccode\u003egitprotocol-v2\u003c/code\u003e\u003c/a\u003e. While the server\nand the client are transmitting data to each other, the server can send  names and URLs of the promisor remotes it knows\nabout.\u003c/p\u003e\n\u003cp\u003eSo far, the client is not using the promisor remote info it gets from the server during clone, so all\nobjects are still transmitted from the remote the clone initiated from. We are planning to continue work on this feature, making it use promisor remote info from the server, and making it easier to use.\u003c/p\u003e\n\u003cp\u003eThis \u003ca href=\"https://lore.kernel.org/git/20250218113204.2847463-1-christian.couder@gmail.com/\"\u003epatch\nset\u003c/a\u003e\nwas submitted by \u003ca href=\"https://gitlab.com/chriscool\"\u003eChristian Couder\u003c/a\u003e and merged\nwith\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/2c6fd30198187c928cbf927802556908c381799c\"\u003e2c6fd30198\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"thin-clone-using---revision\" tabindex=\"-1\"\u003eThin clone using \u003ccode\u003e--revision\u003c/code\u003e \u003ca href=\"#thin-clone-using---revision\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eA new \u003ccode\u003e--revision\u003c/code\u003e option was added to\n\u003ca href=\"https://git-scm.com/docs/git-clone\"\u003e\u003ccode\u003egit-clone(1)\u003c/code\u003e\u003c/a\u003e. This enables you to create\na thin clone of a repository that only contains the history of the given\nrevision. The option is similar to \u003ccode\u003e--branch\u003c/code\u003e, but accepts a ref name (like\n\u003ccode\u003erefs/heads/main\u003c/code\u003e, \u003ccode\u003erefs/tags/v1.0\u003c/code\u003e, and \u003ccode\u003erefs/merge-requests/123\u003c/code\u003e) or a\nhexadecimal commit object ID. The difference to \u003ccode\u003e--branch\u003c/code\u003e is that it does not\ncreate a tracking branch and detaches \u003ccode\u003eHEAD\u003c/code\u003e. This means it\u0026#39;s not suited if you\nwant to contribute back to that branch.\u003c/p\u003e\n\u003cp\u003eYou can use \u003ccode\u003e--revision\u003c/code\u003e in combination with \u003ccode\u003e--depth\u003c/code\u003e to create a very minimal\nclone. A suggested use-case is for automated testing. When you have a CI system\nthat needs to check out a branch (or any reference) to perform autonomous\ntesting on the source code, having a minimal clone is all you need.\u003c/p\u003e\n\u003cp\u003eThis\n\u003ca href=\"https://gitlab.com/gitlab-org/git/-/commit/5785d9143bcb3ef19452a83bc2e870ff3d5ed95a\"\u003echange\u003c/a\u003e\nwas\n\u003ca href=\"https://lore.kernel.org/git/20250206-toon-clone-refs-v7-0-4622b7392202@iotcl.com/\"\u003edriven\u003c/a\u003e\nby \u003ca href=\"https://gitlab.com/toon\"\u003eToon Claes\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"read-more\" tabindex=\"-1\"\u003eRead more \u003ca href=\"#read-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/\"\u003eWhat’s new in Git 2.48.0?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/10/07/whats-new-in-git-2-47-0/\"\u003eWhat’s new in Git 2.47.0?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/07/29/whats-new-in-git-2-46-0/\"\u003eWhat’s new in Git 2.46.0?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": "2025-03-14T00:00:00Z",
  "modifiedTime": null
}
