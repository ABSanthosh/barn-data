{
  "id": "ffa42b28-db6f-40e6-b7da-f95ff47986f9",
  "title": "Rust-Based Drop-in Replacement for Vite Released, Early Adopters Report 10X Faster Builds",
  "link": "https://www.infoq.com/news/2025/06/rolldown-vite-10x-faster-builds/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Evan You, the creator of the Vue.JS front-end framework, recently announced a technical preview for rolldown-vite, a drop-in replacement for the Vite bundler written in Rust. Early adopters (e.g., Excalidraw, GitLab) report 3-16x faster builds and dramatically reduced memory usage. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Mon, 09 Jun 2025 00:18:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "JavaScript",
    "Web Development",
    "Rust",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 3206,
  "excerpt": "Evan You, the creator of the Vue.JS front-end framework, recently announced a technical preview for rolldown-vite, a drop-in replacement for the Vite bundler written in Rust. Early adopters (e.g., Exc",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250605075448/apple-touch-icon.png",
  "text": "Evan You, the creator of the Vue.JS front-end framework, recently announced a technical preview for rolldown-vite, a drop-in replacement for the Vite bundler written in Rust. Early adopters (e.g., Excalidraw, GitLab) report 3-16x faster builds and dramatically reduced memory usage. While rolldown-vite is still a technical preview, You said it reached initial feature parity with today’s Vite, enabling companies and open-source projects to already test it with their codebase. Reported results show dramatically improved build speeds and reduced memory usage: GitLab reduced build time from 2.5 minutes to just 40 seconds and cut their memory usage by 100x. Excalidraw’s build dropped from 22.9 seconds to 1.4 seconds (16x faster). PLAID Inc. saw one frontend’s build time fall from 1 minute 20 seconds to 5 seconds (16x faster). Appwrite builds went from over 12 minutes to just 3 minutes, with memory usage being slashed by 4x. Readers may review additional results on the dedicated GitHub page. Mercedes Benz published an interesting write-up, emphasizing the engineering value of faster tools: Given around 100 projects, an average of 600 commits per year per project, each one building and linting each time. We are talking about 500 hours saved per year, almost 21 days. Excluding the machine cost, since it is hard to calculate, we can imagine the engineering cost, both in productivity, focus, and just being able to enter the flow without hiccups. Plugin and ecosystem compatibility require ongoing work. Plugin authors are encouraged to test and update their plugins with the help of the plugin author guide. While some Rollup plugins may work with minimal changes with rolldown-vite, others may have to perform structural adjustments that leverage the new Rust-powered internals. You reports working on a full-bundle mode for the dev server motivated by limitations encountered in Enterprise setups. The team also plans to extend the use of Rust to more of Vite’s internals in order to further deliver performance gains. Developers drew a comparison on Reddit with Biome, another web toolchain that currently includes a formatter and a linter. Biome however currently has a smaller scope than VoidZero’s Oxc toolchain, which, besides Rolldown (bundler), already released a parser, linter, resolver, and transformer — with a minifier and formatter already prototyped. One developer additionally noted amusingly on Reddit: The saying used to be everything will be written in JS. But it seems that Rust has taken the place of that joke. Rust rewrites of JavaScript/TypeScript toolchains have been commonplace in recent years as JavaScript is dealing with larger codebases, including in Entreprise environments. Microsoft itself recently announced porting the TypeScript compiler to Rust with a 10x performance improvement. Developers are invited to check the Rolldown migration guide for the latest compatibility notes, known issues, and migration tips. For the latest updates and details, refer to the rolldown-vite changelog. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/06/rolldown-vite-10x-faster-builds/en/headerimage/generatedHeaderImage-1749399666620.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eEvan You, the creator of the Vue.JS front-end framework, \u003ca href=\"https://voidzero.dev/posts/announcing-rolldown-vite\"\u003erecently announced a technical preview for rolldown-vite\u003c/a\u003e, a drop-in replacement for the Vite bundler written in Rust. Early adopters (e.g., Excalidraw, GitLab) report 3-16x faster builds and dramatically reduced memory usage.\u003c/p\u003e\n\u003cp\u003eWhile \u003ccode\u003erolldown-vite\u003c/code\u003e is still a technical preview, You said it reached initial feature parity with today’s Vite, enabling companies and open-source projects to already test it with their codebase. Reported results show dramatically improved build speeds and reduced memory usage:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eGitLab\u003c/em\u003e  reduced build time from 2.5 minutes to just 40 seconds and cut their memory usage by 100x.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eExcalidraw\u003c/em\u003e’s build dropped from 22.9 seconds to 1.4 seconds (\u003cstrong\u003e16x faster\u003c/strong\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cem\u003ePLAID Inc.\u003c/em\u003e  saw one frontend’s build time fall from 1 minute 20 seconds to 5 seconds (\u003cstrong\u003e16x faster\u003c/strong\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eAppwrite\u003c/em\u003e  builds went from over 12 minutes to just 3 minutes, with memory usage being slashed by 4x.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eReaders may review additional results on the \u003ca href=\"https://github.com/vitejs/rolldown-vite-perf-wins\"\u003ededicated GitHub page\u003c/a\u003e. Mercedes Benz published an interesting write-up, \u003ca href=\"https://www.mercedes-benz.io/blog/2025-05-16-how-can-modern-tooling-save-mercedes-benz-io-engineering-time\"\u003eemphasizing the engineering value of faster tools\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGiven around 100 projects, an average of 600 commits per year per project, each one building and linting each time. We are talking about 500 hours saved per year, almost 21 days. Excluding the machine cost, since it is hard to calculate, we can imagine the engineering cost, both in productivity, focus, and just being able to enter the flow without hiccups.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePlugin and ecosystem compatibility require ongoing work. Plugin authors are encouraged to test and update their plugins with the help of   the \u003ca href=\"https://voidzero.dev/posts/announcing-rolldown-vite#plugin-authors\"\u003eplugin author guide\u003c/a\u003e. While some Rollup plugins may work with minimal changes with \u003ccode\u003erolldown-vite\u003c/code\u003e, others may have to perform structural adjustments that leverage the new Rust-powered internals.\u003c/p\u003e\n\u003cp\u003eYou reports working on a full-bundle mode for the dev server motivated by limitations encountered in Enterprise setups. The team also plans to extend the use of Rust to more of Vite’s internals in order to further deliver performance gains.\u003c/p\u003e\n\u003cp\u003eDevelopers \u003ca href=\"https://www.reddit.com/r/programming/comments/1l0y1ab/comment/mvkra3o/\"\u003edrew a comparison on Reddit\u003c/a\u003e with \u003ca href=\"https://biomejs.dev/\"\u003eBiome\u003c/a\u003e, another web toolchain that currently includes a formatter and a linter. Biome however currently has a smaller scope than VoidZero’s \u003ca href=\"https://oxc.rs/\"\u003eOxc toolchain\u003c/a\u003e, which, besides Rolldown (bundler), \u003ca href=\"https://www.infoq.com/news/2024/12/voidzero-unified-js-toolchain/\"\u003ealready released a parser, linter, resolver, and transformer\u003c/a\u003e — with a minifier and formatter already prototyped.\u003c/p\u003e\n\u003cp\u003eOne developer additionally \u003ca href=\"https://www.reddit.com/r/programming/comments/1l0y1ab/comment/mvhqa97/\"\u003enoted amusingly on Reddit\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe saying used to be everything will be written in JS. But it seems that Rust has taken the place of that joke.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eRust rewrites of JavaScript/TypeScript toolchains have been commonplace in recent years as JavaScript is dealing with larger codebases, including in Entreprise environments. Microsoft itself \u003ca href=\"https://www.infoq.com/news/2025/05/new-typescript-compiler-10x-fast/\"\u003erecently announced porting the TypeScript compiler to Rust\u003c/a\u003e with a 10x performance improvement.\u003c/p\u003e\n\u003cp\u003eDevelopers are invited to check the \u003ca href=\"https://main.vite.dev/guide/rolldown#compatibility\"\u003eRolldown migration guide\u003c/a\u003e for the latest compatibility notes, known issues, and migration tips. For the latest updates and details, refer to the \u003ca href=\"https://github.com/vitejs/rolldown-vite/blob/rolldown-vite/packages/vite/CHANGELOG.md\"\u003e\u003ccode\u003erolldown-vite\u003c/code\u003e  changelog\u003c/a\u003e.\u003c/p\u003e\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-09T00:00:00Z",
  "modifiedTime": null
}
