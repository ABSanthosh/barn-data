{
  "id": "cdc8a284-e395-4f5d-9353-913ac3506db2",
  "title": "React for Two Computers",
  "link": "https://overreacted.io/react-for-two-computers/",
  "description": "Two things, one origin.",
  "author": "",
  "published": "Wed, 09 Apr 2025 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 108475,
  "excerpt": "Two things, one origin.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "I’ve been trying to write this post at least a dozen times. I don’t mean this figuratively; at one point, I literally had a desktop folder with a dozen abandoned drafts. They had wildly different styles—from rigoruous to chaotically cryptic and insufferably meta; they would start abruptly, chew on themselves, and eventually trail off to nowhere. One by one, I threw them all away because they all sucked. It turns out that I wasn’t really writing a post; I was actually preparing a talk. I was pretty far into the process of writing this post when I had that realization. Oops! Thankfully, the React Conf organizers let me present a new talk on a short notice, and I did that eight months ago. You can watch React for Two Computers below. It’s about everyone’s favorite topic, React Server Components. (Or maybe not.) I’ve given up on the idea of converting this talk into a post form, nor do I think it’s possible. But I wanted to jot down a few notes that are complementary to the talk. I’m going to assume that you have watched the talk itself. This is just the stuff that wasn’t coherent enough to make the cut—the loose threads I couldn’t tie together. Act 1 Recipes and Blueprints What is the difference between a tag and a function call? Here’s a tag: Here’s a function call: One difference is that \u003c and \u003e are hard and spiky and ( and ) are soft and round. But that’s not what I mean. These are just visual differences. But what is the difference in how they work, what they mean, in what we expect from them? Of course, there is no particular meaning to a tag or a function call if you don’t specify which language you’re using. For example, a JavaScript function call might not behave the same way as a Haskell function call; an HTML tag might not behave the same way as a ColdFusion tag. Nevertheless, there are some things that we expect from a tag or a function call precisely because we’re familiar with how they work in popular languages. The spiky \u003c and \u003e carry a set of associations and intuitions, just like the soft ( and ) do. I want to dig into these intuitions. Let’s start with what alert('Hello') and \u003cp\u003eHello\u003c/p\u003e have in common: We refer to a function or a tag by its name. By convention, a function call often starts with a verb (createElement, printMoney, querySelectorAll), while tags are usually named with nouns (like p for a paragraph). This isn’t a hard rule (alert is both; b stands for bold) but it’s true more often than not. (Why is that?) We can pass information to a function or a tag. Earlier, we were passing a piece of text ('Hello') to the tag and the function. But we’re not limited to passing a single string. Within a JavaScript function call, we can pass multiple arguments including strings, numbers, booleans, objects, and so on. Within an HTML tag, we can pass multiple attributes, but their values cannot be objects or other rich data structures—which is quite limiting. Thankfully, tags in JSX (as well as in many HTML-based template languages) let us pass objects and any other rich values. Both function calls and tags can be deeply nested. For example, we could write alert('Hello, ' + prompt('Who are you?')) to express the relationship between these two different function calls: the result of the inner prompt call gets combined with a string, and is then passed to the outer alert call. (Try it in your console if you’re not sure what this does.) Although nesting is fairly common with function calls, with tags nesting really is the name of the game. You hardly ever see a tag completely alone and not surrounded by other tags. (Why is that?) Clearly, function calls and tags are very similar. They let us pass some information to a named thing, and if needed, they let us elaborate by nesting further (passing some more information to some named thing (nesting as much as we need (yay!))) We’re also starting to get a few hints of the fundamental differences between them. For one, function calls tend to be verbs while tags tend to be nouns. Also, you’ll encounter deeply nested tags more often than deeply nested function calls. What’s up with that? Let’s start with the latter. Why do tags tend to cling to each other? Are tags just naturally predisposed to gravitate towards other tags until they—yoink!—click together? Perhaps those spiky bois really do yearn for connection? That may be so, but consider this: maybe we like to use tags for deeply nested structures because we can see the \u003c/end\u003e of every tag and don’t have to guess which ) is closing. Tags don’t lead to deep nesting—rather, we choose to use tags for deep nesting. (Recall how broadly the JavaScript community eventually adopted JSX despite it being almost universally panned for a year or two. Nesting tags is hard to give up!) Okay, let’s say we prefer to use tags for nesting. But why do tags tend to be nouns rather than verbs? Is this a coincidence, or is there a deeper reason for this as well? This is more of a conjecture but I think it’s because nouns are easier to decompose than verbs. Nouns describe things, and things can often be adequately described purely as a composition of other things. For example, a building consists of floors, floors consist of rooms, rooms consist of people, and people consist of water. Note that this description is timeless—not in the sense that it’s a classic, but in the sense that it describes a snapshot in time, like a frame in the movie, or like a blueprint. You can omit time from the equation, and it’ll still be a pretty useful description. Verbs, on the other hand, tend to describe processes which happen over time—they’re timeful! Consider a cooking recipe: “Heat the frying pan, put the butter on it, wait for the butter to melt, now pour the eggs on it.” Although there are still opportunities for composition (how does one crack an egg?), the sequencing here is crucial! You need to be constantly aware of what step happens first, what step happens next, and what kind of decisions you have to make between the steps. Unlike a blueprint, a recipe has an ordering to it, and a certain urgency to it too. So how does this relate to tags and function calls? A recipe prescribes a sequence of steps to be performed in an order. It’s composed of verbs but there is rarely a lot of nesting. (In fact, nesting may just obscure the ordering.) Each step may change something or depend on the previous steps, so it is important to execute the recipe in the exact order it was written, top to bottom. These recipes, also known as imperative programs, are written with function calls: const eggs = crackEggs(); heat(fryingPan); put(fryingPan, butter); await delay(30000); put(fryingPan, eggs); A blueprint, on the other hand, describes what nouns a thing is made of. It doesn’t prescribe a specific order of operations—it only describes how the whole is broken into its parts. This is why these blueprints, also known as declarative programs, naturally end up deeply nested, and thus are more convenient to write with tags: \u003cBuilding\u003e \u003cRoof /\u003e \u003cFloor\u003e \u003cRoom /\u003e \u003cRoom\u003e \u003cPerson name=\"Alice\" /\u003e \u003cPerson name=\"Bob\" /\u003e \u003c/Room\u003e \u003c/Floor\u003e \u003cBasement /\u003e \u003c/Building\u003e Many real-world programs combine both techniques. For example, a typical React component combines some imperative recipes (like sequences of function calls in the event handlers) with some declarative blueprints (like the returned JSX tags). However, ultimately, our programs must do something. Recipes are ready to be executed—they don’t leave any ambiguity about what should be done next. Do this step, then do this step, then do this step, then done. On the other hand, a blueprint is just that—a detailed plan to construct something. It won’t come to life until some recipe actually decides to construct the things described by that blueprint. (For example, React constructs the DOM described by the blueprint of your JSX.) In a way, a blueprint is almost a recipe, but it’s more passive, inert, open to future interpretation. It’s a recipe but with time itself factored out of the equation. When you remove time, all that’s left is the structure—the things, the nouns, the tags. A blueprint is a potential recipe. It’s a plan—something that might or might not happen depending on whether some recipe will eventually carry out that plan. Now, blueprints are made of tags, and recipes are made of function calls. If we say a blueprint is a potential recipe, it follows that… a tag is a potential function call. Wait, what? Await and RPC Suppose you want to call a function. That’s easy to do: You can be reasonably sure that as soon as that function finishes executing, the next line will run immediately. In particular, it’s very nice that you can get the result of one function call and then immediately use it for the next function call: const name = prompt('Who are you?'); alert('Hello, ' + name); console.log('Done.'); However, suppose that the function you want to call is on a different computer. That would be a bummer, right? But so it happens. The standard way to deal with this situation would be to issue some kind of a network call. We have plenty of existing ideas in this area, such as HTTP or even something lower level. Most of us manage to spend our entire careers without ever learning how bytes travel through the underwater cables. Marvelous stuff. Now, the problem, of course, is that our program can’t continue until that network call is over. If we can’t know the person’s name without talking to another computer, we need to “pause” the execution of our code before the alert call. Suppose you were the first person ever to encounter this problem. One idea you might have is to invent a callNetwork API that takes a function: callNetwork('https://another-computer/?fn=prompt\u0026args=Who+are+you?', (response) =\u003e { const name = response; alert('Hello, ' + name); console.log('Done.'); }); Once the response arrives, your callNetwork API would call the passed function with the response, at which point the rest of the code would run as usual. This is honestly not bad for a first idea. But it’s not great either: The network call has tangled up our code. Previously, the code executed in a top-down order, but now it has a twist. Conceptually alert('Hello' + name) is the “next thing that happens” in the recipe we’re trying to convey. However, we’ve had to put it inside the callNetwork call so that the computer knows to “wait” for it. We’ve severed the connection between two pieces of code. Normally, when you want to call a function, you just call it. Assuming it’s in the same file. If it’s in another file, you export it there and then you import it here. But in this case we’re no longer dealing with a function call—we’re dealing with an HTTP call. It may be hard to see after dealing with REST APIs for decades, but we’ve actually lost something of the essence during this conversion. For starters, it doesn’t get typechecked! That endpoint might not exist. You can’t command-click into that call and see where the function is defined and what it does. There was a direct and visceral connection between the function being called and the place calling it, but there no longer is—not because you wanted to introduce some nice conceptual separation but because you don’t have any other means to keep that connnection. The problem becomes easier to see if we imagine the alert function is also on some other computer (maybe on a different one). Now the code becomes: callNetwork('https://another-computer/?fn=prompt\u0026args=Who+are+you?', (response) =\u003e { const name = response; callNetwork('https://yet-another-computer/?fn=alert\u0026args=Hello,+' + name, () =\u003e { console.log('Done.'); }); }); So how do you solve these two problems? You come up with two ideas. To solve the first problem (“tangling” of the code), you introduce a new concept called an async function. An async function is not guaranteed to execute in a single step—rather, it’s expected that it may “pause” execution (for example, due to network calls). Since it may pause, the calling code will need to “await” the async function call to acknowledge that it won’t be surprised by that pause. This means the caller would pause too at some point, so it will also need to mark itself as async. So async and await would propagate upwards through the calling chain so that nobody is surprised their code is “pausing”. At least that’s your idea. That’s not a bad idea at all—in fact, some variation of it is pretty much table stakes in new programming languages. You no longer have to convince people it’s good. This turns the code to: const name = await callNetwork('https://another-computer/fn=prompt\u0026args=Who+are+you?'); await callNetwork('https://yet-another-computer/fn=alert\u0026args=Hello,+' + name); console.log('Done.'); Now you’ve got your eyes on the second problem. What you’re trying to do is to call a function called prompt on one computer and a function called alert on another computer. Let’s say these functions are actually defined in your codebase. What if you could literally import them from another computer? import { prompt } from 'another-computer'; import { alert } from 'yet-another-computer'; const name = await prompt('Who are you?'); await alert('Hello, ' + name); console.log('Done.'); Wait, but that doesn’t actually help the problem as stated above. For example, TypeScript won’t know what 'another-computer' is. Instead, suppose you could import those functions from wherever they actually are in your codebase: import { prompt, alert } from './stuff'; const name = await prompt('Who are you?'); await alert('Hello, ' + name); console.log('Done.'); But wait, that’s just a normal import. It would bring them into the program on this computer, whereas what you wanted was to have them be deployed on another computer. The fact that you want them to be called remotely via HTTP across the network boundary behind the scenes needs to be expressed somewhere in code. Let’s invent a special syntax that would let you express that. We might revise this syntax later but for now we’re calling it import rpc because what we’ve described here has been known for decades as RPC, or a “remote procedure call”: import rpc { prompt, alert } from './stuff'; const name = await prompt('Who are you?'); await alert('Hello, ' + name); console.log('Done.'); Imagine that TypeScript would not only let you click into them now, but it would also be aware that these functions are behind a remote boundary, so it would force them to be declared as async, and ensure that the types of their inputs and their output remain serializable (and thus can actually travel over the network). Oh well, async / await and import rpc, that’s enough invention for one day. Unless?.. Call Me Maybe A colleague comes to you with a problem. “That async / await stuff and import rpc was great, truly great. But it only works if the other computer actually talks back. Imagine a computer that doesn’t. How would you call a function there?” The question sounds nonsensical at first but you ponder it for a bit. If the other computer doesn’t talk back… Well, natually you can’t know when it’s done, so pausing the execution with await won’t work. So you can’t do this: await alert('Hello, ' + name); What’s worse, if the computer where the function resides doesn’t talk back, you can’t get the result of any function call, so this would not be possible either: const name = await prompt('Who are you?'); You’re tempted to declare the case hopeless but you’re trying to think critically. Sure, you can’t pass the information back… but you still can pass it forward. For example, this only passes the information forward: Even if the other computer doesn’t talk back, here you’re just asking it to call the alert function with the 'Hello' string. You’re not asking for anything back. So this call should be possible to make! Except… it wouldn’t quite work like a regular function call, so it seems wrong to use the same syntax as for a regular function call. Generally, one would expect that the code below executes after the function call is done, but you can’t guarantee it here. In fact, you can’t be certain that the call will succeed at all—if it fails midway because of network, you’ll have no way to know that. Unlike with RPC, you won’t be notified of network errors. This isn’t a function call. It’s a… potential function call. It’s a call that might, or might not happen in the future. You could say it’s a blueprint of a function call. Let’s invent some made-up syntax for these “potential calls”: We might change that syntax later. But for now let’s think through the semantics of this syntax, i.e. what we’d actually want it to do. In the design process, it’s wise to start from the limitations (“the other computer can’t talk back”) and see if they place any unavoidable constraints on the semantics of these “potential calls”. Clearly, these “potential calls” don’t interrupt execution and don’t affect the rest of the code. They’re not “waiting” for anything because there’s nothing to wait for: alert⧼'Hello'⧽; // Can't know if/when this succeeds or fails console.log('Done.') // Runs immediately This poses a question: what should these “potential calls” return? const name = prompt⧼'Who are you?'⧽; console.log(name); // ??? Clearly, prompt⧼'Who are you?'⧽ can’t return the eventual actual return value of the prompt call since the other computer can’t talk back. We could decide that this syntax always returns undefined but that feels rather limiting. We’d have no way to coordinate the prompt “potential call” with the alert “potential call”! What we want to achieve is something like this: const name = prompt⧼'Who are you?'⧽; alert⧼'Hello, ' + name⧽; The problem is, the code above doesn’t make sense because we can’t get anything out of the prompt “potential call”. So we can neither assign the name variable nor manipulate its return value with + on this computer. However, here’s an idea. What we could do is rewrite the two lines above solely in terms of “potential calls”: alert⧼ concat⧼ 'Hello, ', prompt⧼'Who are you?'⧽ ⧽ ⧽; (Here and later, assume concat is a global function set to (a, b) =\u003e a + b.) There are two benefits to reframing the code this way. First, it avoids the problem of declaring a nonsensical name variable that can’t possibly have any meaningful value (because we’re not on the other computer yet). Second, it lets us think of these nested “potential calls” as a single expression that is easy to encode as JSON: { fn: 'alert', args: [{ fn: 'concat', args: ['Hello, ', { fn: 'prompt', args: ['Who are you?'] }] }] } We could then send that JSON to the other computer (which can’t talk back to us!), and it would interpret our instructions using a function like this: function interpret(json) { if (json \u0026\u0026 json.fn) { // Find a global function by its name let fn = window[json.fn]; // Interpret any nested potential calls in the arguments let args = json.args.map(arg =\u003e interpret(arg)); // Actually perform the call now let result = fn(...args); // If it returned more potential calls, do them next return interpret(result); } else { return json; } } You can verify in the console that passing the above JSON object to interpret() does the equivalent of the original code. (Don’t forget to define a concat global!) In other words, this approach works! Let’s take another look at this syntax: alert⧼ concat⧼ 'Hello, ', prompt⧼'Who are you?'⧽ ⧽ ⧽; We’ve now seen that any dependencies between the “potential calls”, such as between prompt and alert, should be expressed by embedding these “potential calls” inside each other. We can’t really put code in between them unless that code also resides on the other computer. On this computer, they’re more like… markup. Since we don’t have any other ways to compose calls, we can expect nesting level to be deep. So it might be a good idea to make the syntax slightly easier to scan: \u003calert\u003e \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e \u003c/alert\u003e Note something peculiar. With a regular function call, the return value is decided by the function you called: const result = prompt('Who are you?'); console.log(result); // 'Dan' But with a “potential” function call, the return value is the call itself as data: const inner = \u003cprompt\u003eWho are you?\u003c/prompt\u003e; // { fn: 'prompt', args: ['Who are you?'] } const outer = \u003cconcat\u003eHello, {inner}\u003c/concat\u003e; // { // fn: 'concat', // args: ['Hello', { fn: 'prompt', args: ['Who are you?'] }] // } const outest = \u003calert\u003e{outer}\u003c/alert\u003e; // { // fn: 'alert', // args: [{ // fn: 'concat', // args: ['Hello', { fn: 'prompt', args: ['Who are you?'] }] // }] // } The calls are not yet made—we’re only building a blueprint of those calls: \u003calert\u003e \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e \u003c/alert\u003e This blueprint of “potential calls” looks code, but it acts like data. It’s structurally similar to function calls but it is more passive, inert, open to interpretation. We’re yet to send this blueprint to the other computer which will actually interpret it. Anyway, writing “potential function calls” so many times is getting on my nerves. Let’s just call them tags. Splitting a Function Here’s a function: function greeting() { const name = prompt('Who are you?'); alert('Hello, ' + name); } If you run it, it will execute in a single shot. As functions generally do. Suppose you wanted to split its execution in two parts. The first part runs immediately. The second part runs when the caller decides so. Here’s an easy way to do that: function greeting() { const name = prompt('Who are you?'); return function resume() { alert('Hello, ' + name); }; } Now you can run the function in two parts: const resume = greeting(); // Run the first part resume(); // Run the second part Now suppose you want to run the second part on another computer. You’re still thinking of it as a single computation. It just happens to be physically distributed. “Easy!” you say: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + name); }`; } Wait, what? Okay, that’s clever, you’re returning the rest of the code from your function so that it can be transferred to another computer to finish the computation. But wait! That won’t work—from the other computer’s perspective, name is not defined: function resume() { alert('Hello, ' + name); // 🔴 ReferenceError: name is not defined } “Not a problem,” you say: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } Ah, I see what you did there. So you embedded the value of the name that you got on the first computer directly into to the code that you sent to the other computer. From its perspective, the name will appear precomputed, as if it was always there: function resume() { alert('Hello, ' + \"Dan\"); } In fact, that function will have no idea that it’s a part of a bigger picture. From its perspective, the world starts on the second computer. As this function gets more complex, it might start getting the idea that it’s the entire thing. And that’s okay. But you’ve seen the entire thing: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } It’s an interesting shape—a program returning the rest of itself in a form that can be transferred over the network to continue execution on another machine. You might call this a closure over the network. Notice a few things about how it works: The data flows strictly in a one direction—from the first to the second computer. The second part can see the values from the first part (as long as they can be turned into text). But the first part doesn’t know anything about the second part. The first part is writing the script; the second part will be performing it on stage. The first and the second parts are completely isolated. Although they are a part of a single conceptual program, they are separate runtime environments. They can’t coordinate with each other at runtime because they’re separated by time and space. Their module systems are completely isolated from each other, they each have their own globals, and even may be running on different JavaScript engines. The boundaries between the parts are both firm and fluid at the same time. They are firm because these truly are two separate environments—nothing is shared between them except the stuff that’s being closed over. However, the boundaries are fluid because you can move stuff between the two worlds. You get to choose which lines run on which side, when you’d rather run more code on the second computer, and when you’d rather pass the already precomputed data to it. That last point deserves some elaboration. Suppose you’re writing a FizzBuzz and want to display alerts for numbers from 1 to n, alerting 'Fizz' if the number divides by 3, 'Buzz' if it divides by 5, and 'FizzBuzz' if it divides by both: function fizzBuzz() { const n = Number(prompt('How many?')); for (let i = 1; i \u003c= n; i++) { if (i % 3 === 0 \u0026\u0026 i % 5 === 0) { alert('FizzBuzz'); } else if (i % 3 === 0) { alert('Fizz'); } else if (i % 5 === 0) { alert('Buzz'); } else { alert(i); } } } Now imagine this is a program for two computers. You could split it in different ways. For example, you could choose to do all the work on the second computer: function fizzBuzz() { return `function resume() { const n = Number(prompt('How many?')); for (let i = 1; i \u003c= n; i++) { if (i % 3 === 0 \u0026\u0026 i % 5 === 0) { alert('FizzBuzz'); } else if (i % 3 === 0) { alert('Fizz'); } else if (i % 5 === 0) { alert('Buzz'); } else { alert(i); } } }`; } But maybe you want to run prompt on the first computer. You could move the prompt call into the earlier part, and then pass n as data to the second part: function fizzBuzz() { const n = Number(prompt('How many?')); return `function resume() { const n = ${JSON.stringify(n)}; for (let i = 1; i \u003c= n; i++) { if (i % 3 === 0 \u0026\u0026 i % 5 === 0) { alert('FizzBuzz'); } else if (i % 3 === 0) { alert('Fizz'); } else if (i % 5 === 0) { alert('Buzz'); } else { alert(i); } } }`; } From the second computer’s perspective, n will appear hardcoded. In fact, you could precompute every message on the first computer: function fizzBuzz() { const n = Number(prompt('How many?')); const messages = []; for (let i = 1; i \u003c= n; i++) { if (i % 3 === 0 \u0026\u0026 i % 5 === 0) { messages.push('FizzBuzz'); } else if (i % 3 === 0) { messages.push('Fizz'); } else if (i % 5 === 0) { messages.push('Buzz'); } else { messages.push(i); } } return `function resume() { const messages = ${JSON.stringify(messages)}; messages.forEach(alert); }`; } Then, from the second computer’s perspective, there would be no computation left to do other than iterating over the messages. For example, if I pick 16 as my n, from the second computer’s perspective, the entire program looks like this: function resume() { const messages = [1,2,\"Fizz\",4,\"Buzz\",\"Fizz\",7,8,\"Fizz\",\"Buzz\",11,\"Fizz\",13,14,\"FizzBuzz\",16]; messages.forEach(alert); } The downside of precomputing messages is that the size of the data to send grows as n grows. Since the FizzBuzz algorithm is trivial, it’s wiser to transfer the n itself and let the second computer run the FizzBuzz itself. The important part is that you get to choose the tradeoff between passing data and running code. Now let’s get back to the original example. We’ve made the conceptual point that by splitting a program between two computers, we gain the flexibility to move the computation around. However, in practice, you probably don’t want to write half of your code inside of a string: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } Instead, it would be nice to write resume in another file and just import it: import { resume } from './stuff'; function greeting() { const name = prompt('Who are you?'); return resume(name); } Except wait, resume can’t be a regular import—you want this function’s code to be sent to another computer! So you don’t really want to import the function itself or run any of its code on this computer now; rather, you want to refer to that function. This might remind you of RPC, for which you invented import rpc. Let’s invent another similar annotation to mark a function to be sent to another computer: import tag { resume } from './stuff'; function greeting() { const name = prompt('Who are you?'); return resume(name); } Why import tag? This function is on a computer that doesn’t “talk back” so you won’t be able to call it. At most you can do a “potential call”—in other words, a tag! import tag { resume } from './stuff'; function greeting() { const name = prompt('Who are you?'); return \u003cresume name={name} /\u003e; } (We’ll revisit the import rpc and import tag syntax and revise it later on.) Programs split this way are often called client-server applications. import tag { Client } from './stuff'; function Server() { const data = precomputeData(); return \u003cClient data={data} /\u003e; } It’s tempting to see the client and the server as two separate programs that communicate with each other. But now you know that it’s a single function that closes over the network by sending the rest of itself forward in time and space. Good luck unseeing that. Tags on Both Sides A few sections ago, you invented tags: function greeting() { return ( \u003calert\u003e \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e \u003c/alert\u003e ); } As a reminder, tags are very similar to function calls, but they don’t actually call anything—they just reflect the structure of a call. Because of that, they’re a perfect way to represent a computation that you want to happen—but maybe not right now, or even not right here. Tags represent a plan, a blueprint of a computation: function greeting() { return { fn: 'alert', args: [{ fn: 'concat', args: ['Hello, ', { fn: 'prompt', args: ['Who are you?'] }] }] }; } By themselves, tags don’t do anything. Some code needs to actually interpret what they’re saying. Here’s one way we’ve seen that works for the above example: function interpret(json) { if (json \u0026\u0026 json.fn) { let fn = window[json.fn]; let args = json.args.map(arg =\u003e interpret(arg)); let result = fn(...args); return interpret(result); } else { return json; } } Run the code to see that interpret(greeting()) produces the expected result. However, the thing about interpretations is that they’re subjective. There’s more than one possible interpretation of something. That’s kind of the whole point of interpretations, really. They allow that sort of flexibility. In the earlier example, the interpret function was looking for the functions implementing each tag directly in the global window scope. So it was able to find window.alert and window.prompt and such there. We’re now going to make a slightly different version of interpret. This version will take an explicit knownTags dictionary with these functions. Unknown tags shall be skipped. Behold: function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args.map(arg =\u003e interpret(arg, knownTags)); let result = fn(...args); return interpret(result, knownTags); } else { let args = json.args.map(arg =\u003e interpret(arg, knownTags)); return { fn: json.fn, args }; } } else { return json; } } Now, if you pass empty knownTags to interpret, you’ll get the original call tree: interpret(greeting(), {}); // { // fn: 'alert', // args: [{ // fn: 'concat', // args: ['Hello, ', { // fn: 'prompt', // args: ['Who are you?'] // }] // }] // }; However, notice what happens if you pass { prompt: window.prompt }: interpret(greeting(), { prompt: window.prompt }); Now it will ask your name first (prompt does run) and then produce this tree: // { // fn: 'alert', // args: [{ // fn: 'concat', // args: ['Hello, ', 'Dan' /* (or whatever you typed) */] // }] // }; You still get a call tree back, but this time prompt has “dissolved” from it! As an experiment, let’s “dissolve” both prompt and concat (but not alert): interpret(greeting(), { prompt: window.prompt, concat: (a, b) =\u003e a + b, }); This time, the prompt will run like before, but the message prepared for the alert call will already be concatenated—no concat in sight: // { // fn: 'alert', // args: ['Hello, Dan'] // }; In other words, we’ve precomputed everything except the alert call itself. Let’s also try “dissolving” both alert, prompt, and concat together, like before: interpret(greeting(), { alert: window.alert, prompt: window.prompt, concat: (a, b) =\u003e a + b, }); // undefined This time, all steps will run so there’ll be nothing left to do. Because a blueprint of tags is timeless—it doesn’t prescribe a particular ordering of the operations; only their structure—we’ve gained the freedom to manipulate that ordering. For example, we can now split a single computation into several steps: const step1 = greeting(); // { // fn: 'alert', // args: [{ // fn: 'concat', // args: ['Hello, ', { // fn: 'prompt', // args: ['Who are you?'] // }] // }] // }; const step2 = interpret(step1, { prompt: window.prompt, concat: (a, b) =\u003e a + b, }); // { // fn: 'alert', // args: ['Hello, Dan'] // }; interpret(step2, { alert: window.alert, }); // undefined Run the code. This might give you an idea. What if you ran step1 and step2 on different computers? In other words, what if you interpreted, or “dissolved”, some tags earlier on the first computer, and then sent the rest to be interpreted, or “dissolved”, later on the second computer? This might turn out handy if some tags are naturally better suited to be intepreted on either of the two sides—for example, if these machines have different capabilities. Think of the water state transitions: first, ice melts into water at the top of the mountain. Then the river flows down. Finally, the water evaporates. So it could be with tags. Some tags could melt early on the first computer. The remaining tags could flow over the network to another computer—and meet their fate there. The Two Computers Your theory is elusive and sometimes you think it’s nonsense but its broad shape is beginning to emerge. If you were asked to summarize it so far, you’d say this: Some programs are distributed computations across multiple machines. In particular, some programs can be represented as functions spanning across two machines (although in principle there could be more). Some of those functions will have a particular shape—the first machine does some of the calculation, and then “hands off” the rest of the calculation to the second machine by sending the remaining code to it. Those are the functions that your theory is so focused on. Let’s give names to the environments of the two machines. Your programs begin in the Early world—the first machine. Some of the work is going to happen there. Then the remaining work is passed off to the Late world—the second machine. The Early and the Late worlds are two completely isolated runtime environments separated by time and space, so they don’t share any state or global variables. The Early world can leave some residual information for the Late world—in particular, the remaining code to run and the data that it needs to run—but nothing more. The Early and the Late worlds don’t directly import the code from each other because that would just bring that code into the importing world. What they do, however, is refer to each other’s code. Both import tag and import rpc are examples of referring to code on another computer (in a typesafe way!) and doing something useful with it without actually loading it into the importing world. Because of their firm separation, a function in the Early world can’t call a function in the Late world. After all, function calls are meant to pass the information back to the caller, but that’s not possible if the caller has long kicked the bucket. However, passing information forward from the Early to the Late world still makes sense. To allow it, you’ve invented a weaker notion than a function call—a tag. A tag is like a function call but passive, inert, open to interpretation. It is a potential function call waiting to be materialized. A tag is a function call as data, ready to be executed now or at a better point in time, or maybe not at all. A tag is a proto-call. You stand triumphantly, seeing the disparate threads of your theory starting to come together for the first time. Suddenly, the boss music starts playing. Did somebody say Time? Time Strikes Back Your first boss is Time itself. To beat Time, you’ll have to demonstrate that your so-called timeless blueprints are actually timeless—and that shifting the order of their calculation will not accidentally ruin your program. You better be right! Here is your greeting function from before: function greeting() { return ( \u003calert\u003e \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e \u003c/alert\u003e ); } I’ll beef it up a little bit to make the boss fight more interesting (and more scary). I suspect that you’ll want to combine alert with concat awfully often so I’ll extract them into a separate function. I’m going to call it p, for “paragraph”. function p(...children) { return ( \u003calert\u003e \u003cconcat\u003e {children} \u003c/concat\u003e \u003c/alert\u003e ); } Now the greeting function can just return the p tag: function greeting() { return ( \u003cp\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/p\u003e ); } I’ll also add a new clock function that returns the time at which it ran: function clock() { return new Date().toString(); } Finally, I’ll add an app function that combines a greeting with a clock in p: function app() { return [ \u003cgreeting /\u003e, \u003cp\u003eThe time is: \u003cclock /\u003e\u003c/p\u003e ]; } Now would be a great time to support arrays in interpret—luckily, that’s easy: function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args.map(arg =\u003e interpret(arg, knownTags)); let result = fn(...args); return interpret(result, knownTags); } else { let args = json.args.map(arg =\u003e interpret(arg, knownTags)); return { fn: json.fn, args }; } } else if (Array.isArray(json)) { return json.map(item =\u003e interpret(item, knownTags)); } else { return json; } } Alright, let’s see if interpret is up to the task. First, let’s try to interpret all tags together: interpret(app(), { alert: window.alert, prompt: window.prompt, concat: (a, b) =\u003e a + b, p: p, greeting: greeting, clock: clock, }); // [undefined, undefined] Running this code produces the expected result: There is a prompt asking for my name There is an alert saying Hello, Dan There is another alert saying The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) So far so good! Now, the claim you’re defending is that, because these are just blueprints—tags that are not turned into calls yet—you are free to dissolve those tags in any order. Let’s put that to the test. First, let’s dissolve just half of the tags (p, greeting, and clock): const step2 = interpret(app(), { // alert: window.alert, // concat: (a, b) =\u003e a + b, // prompt: window.prompt, p: p, greeting: greeting, clock: clock, }); // [ // { fn: 'alert', args: [{ fn: 'concat', args: ['Hello', { fn: 'prompt', args: ['Who are you?'] }] }] }, // { fn: 'alert', args: [{ fn: 'concat', args: ['The time is ', 'Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)'] }] } // ] Snap. As expected, this went quietly—no prompts or alert yet… Now you can take the intermediate result and dissolve the rest of the tags (alert, concat, prompt): interpret(step2, { alert: window.alert, concat: (a, b) =\u003e a + b, prompt: window.prompt, // p: p, // greeting: greeting, // clock: clock, }); // [undefined, undefined] This works as expected too: There is a prompt asking for my name There is an alert saying Hello, Dan There is another alert saying The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) Congratulations! You’ve proven that a calculation made out of tags (rather than function calls) can be split into steps and calculated in an arbitrary order—thus defeating Time itself. Unless?.. Why don’t you try dissolving all tags together except for concat: interpret(app(), { alert: window.alert, prompt: window.prompt, // concat: (a, b) =\u003e a + b, p: p, greeting: greeting, clock: clock, }); Surely, in a timeless blueprint, it won’t cause any harm to run concat later? You run the code: There is a prompt asking for my name There is an alert saying [object Object] There is another alert saying [object Object] YOU DIED. A Fatal Flaw What just happened? Turns out, your theory has a flaw. Even if you describe your program with tags rather than function calls, time is actually important! For some functions, anyway. Consider this example: \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e When two tags are nested, in which order should they be intepreted? Should \u003cprompt\u003e be interpreted first, and the result of that be passed to the concat function? Or should the concat function receive \u003cprompt\u003e itself as a tag? We can start by considering the behavior of regular function calls: concat( 'Hello, ', prompt('Who are you?') // This would run first ) In case you’re not sure, when you call a function in JavaScript, its arguments are calculated first—and after those values are known, the function gets called: function concat(a, b) { // a is 'Hello, ' // b is 'Dan' return a + b; } Our interpret function dealing with tags applies them in the same order. When it encounters a tag like \u003cconcat\u003e, it first runs interpret on its arguments in case there are nested calls like that \u003cprompt\u003e. Only then it would call concat(): function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args.map(arg =\u003e interpret(arg, knownTags)); let result = fn(...args); return interpret(result, knownTags); } else { // ... } } else { // ... } } As a result, this code: \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e is currently equivalent to this: concat( 'Hello, ', prompt('Who are you?') // This would run first ) However, there’s something off about that. Weren’t our tags supposed to be timeless blueprints, untethered from the pesky constraints of the tedious arguments-must-go-first JavaScript evaluation order? What good are these “tags” if in the end they behave exactly like function calls? Okay, but how else could this work? Well, what if this: \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e was instead equivalent to this: concat( // This would run first 'Hello, ', \u003cprompt\u003eWho are you?\u003c/prompt\u003e ) Imagine that tags were evaluated outside-in rather than inside-out. So, when you have \u003cconcat\u003e with \u003cprompt /\u003e inside, you wouldn’t actually see the prompt call first. Instead, you’d step into concat with \u003cprompt /\u003e still being a tag: function concat(a, b) { // a is 'Hello, ' // b is { fn: 'prompt', args: ['Who are you?'] } return a + b; } Of course, that would utterly break concat since it can only concatenate strings, not some arbitrary computations like \u003cprompt /\u003e which haven’t even run yet. This problem is not unique to concat. For example, the alert function also expects a string. It wouldn’t know how to handle an object representing a tag: alert({ fn: 'concat', args: [/* ... */] }); Or rather, it would handle it—by coercing it to a string like \"[object Object]\". This explains what happened during the boss fight! Although our interpret function would normally handle the arguments first, we specifically delayed interpreting the \u003cconcat\u003e tag to demonstrate that the ordering doesn’t matter. However, it does matter—both the concat and the alert functions need their arguments to be regular strings rather than tags. It seems like your timeless blueprints aren’t so timeless after all. Functions need their arguments to be computed first. That’s where the time was hiding. Your theory has a fatal flaw. A New Hope Your theory has a fatal flaw. There are three things you can do with that. You could pretend that it doesn’t exist. But that won’t fix your theory. You could give up on your theory. But you were onto something, weren’t you? Finally, you could let that flaw guide you. Like a well-chosen failed experiment, it tells you something very important. You’ve made a mistake, but where exactly? There’s a good way to find out. Currently, we’re always eagerly interpreting nested tags before calling the parent tag’s function to ensure that the tag functions get called in the inside-out order: function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args.map(arg =\u003e interpret(arg, knownTags)); let result = fn(...args); return interpret(result, knownTags); } else { let args = json.args.map(arg =\u003e interpret(arg, knownTags)); return { fn: json.fn, args }; } } else if (Array.isArray(json)) { return json.map(item =\u003e interpret(item, knownTags)); } else { return json; } } What if instead we just passed the raw arguments (even if they include tags)? function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args; let result = fn(...args); return interpret(result, knownTags); } else { let args = json.args.map(arg =\u003e interpret(arg, knownTags)); return { fn: json.fn, args }; } } else if (Array.isArray(json)) { return json.map(item =\u003e interpret(item, knownTags)); } else { return json; } } Of course, this would completely break each of our previous examples. Remember, alert() can’t handle an object argument like \u003cconcat\u003e—and concat() itself can’t handle an object argument like \u003cprompt\u003e. It wants two strings, not tags: const tags = ( \u003cconcat\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/concat\u003e ); interpret(tags, { concat: (a, b) =\u003e a + b, prompt: window.prompt, }); // 'Hello, [object Object]' But fully embracing the “flaw” might also shine some light on what does work. For example, replacing \u003cconcat\u003e with \u003cp\u003e no longer leads to a broken output: function p(...children) { return ( \u003calert\u003e \u003cconcat\u003e {children} \u003c/concat\u003e \u003c/alert\u003e ); } // ... const tags = ( \u003cp\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/p\u003e ); interpret(tags, { p: p, prompt: window.prompt, }); // { fn: 'alert', args: [{ fn: 'concat', args: ['Hello, ', 'Dan'] }] } This might seem insignificant (we still need to run concat later). But actually this is very important! Something is fundamentally different between functions concat and p. The outside-in call order breaks concat, but it doesn’t break p. Why is that exactly? Embedding and Introspecting Consider these two functions: function concat(a, b) { return a + b; } function pair(a, b) { return [a, b]; } How are they different? Obviously, they’re different in purpose. One of them concatenates strings. The other one creates an array with the two provided elements. But there’s also a more subtle difference between how they behave with respect to their arguments. To explain it, I’ll use an analogy. Suppose your job is to tie pieces of a rope together. That’s not terribly difficult. You take the two pieces and tie them together, job done. Now suppose that one day someone hands you a rope and… a pumpkin. Suddenly, you can’t do your job. You need to take the two pieces of rope by their ends, but a pumpkin has no end. Now, you might conclude from this that arbitrarily replacing things with pumpkins leads to disasters, and indeed sometimes it does. But not always. Suppose that you have a new job wrapping up presents in a toy shop. You’d spend your day wrapping up various presents, be it a doll, or a car, or an entire toy house. Then one day someone hands you a pumpkin. Although you might refuse the request out of principle, technically you could wrap up a pumpkin just fine. When you wrap things up, you don’t rely on their properties (like the rope-iness of a rope). You merely put them in a box. You’re embedding, not introspecting. The difference between concat and pair above is that concat cares about what’s being passed to it. It introspects. It wouldn’t work if you pass a pumpkin. But pair would happily accept ropes, toys, or pumpkins. It embeds, so it doesn’t care. Let’s see how this connects to the order of execution. Since concat introspects arguments a and b (concretely, + turns them to strings), concat breaks if you pass an uninterpreted tag as an argument: concat('Hello ', \u003cprompt\u003eWho are you?\u003c/prompt\u003e); // 'Hello, [object Object]' On the other hand, pair embeds its arguments a and b. It produces a new [a, b] array—and that works correctly no matter what you pass as a or b. So it’s happy to accept a tag as one of the arguments. It just embeds that tag in its output: const todo = pair('Hello ', \u003cprompt\u003eWho are you?\u003c/prompt\u003e); // ['Hello, ', { fn: 'prompt', args: ['Who are you?'] }] This lets you interpret that tag sometime after the pair call: const result = interpret(todo, { prompt: window.prompt }); // ['Hello, ', 'Dan'] Let’s summarize. Generally, functions want to have their arguments computed before the call. However, if a function only embeds an argument in its output without introspecting it, you can delay computing it. You can call that function with that argument still uncomputed (a tag), and compute that tag later when it’s necessary or convenient. You may have found a way to beat Time after all. Thinking and Doing Your program is still the same: function app() { return [ \u003cgreeting /\u003e, \u003cp\u003eThe time is: \u003cclock /\u003e\u003c/p\u003e ]; } function clock() { return new Date().toString(); } function greeting() { return ( \u003cp\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/p\u003e ); } function p(...children) { return ( \u003calert\u003e \u003cconcat\u003e {children} \u003c/concat\u003e \u003c/alert\u003e ); } function alert(message) { window.alert(message); } function prompt(message) { return window.prompt(message); } function concat(a, b) { return a + b; } But your interpret function is simpler—it interprets tags outside-in. It doesn’t try to interpret the arguments before the call; rather, it passes tags to other tags. function interpret(json, knownTags) { if (json \u0026\u0026 json.fn) { if (knownTags[json.fn]) { let fn = knownTags[json.fn]; let args = json.args; let result = fn(...args); return interpret(result, knownTags); } else { let args = json.args.map(arg =\u003e interpret(arg, knownTags)); return { fn: json.fn, args }; } } else if (Array.isArray(json)) { return json.map(item =\u003e interpret(item, knownTags)); } else { return json; } } Time smirks at you. “This isn’t going to work, is it? Functions need to know their arguments.” ”Some of them do.” You look over all the functions in your program to see whether they introspect the stuff you’re nesting inside their tags or merely embed it without introspection: Clearly, alert and concat introspect the stuff you put inside their tags. Some functions (app, clock, and greeting) take no arguments at all. Although you do pass stuff into p, it merely embeds whatever you nest in it. The case of prompt is ambiguous. Technically, it does introspect the message argument (because it passes message to the built-in window.prompt). However, so far, we haven’t had a temptation to nest any other tags inside \u003cprompt\u003e. So if we promise not to do that (e.g. by restricting the type somehow), it doesn’t matter. To keeps things straight, you’ll introduce a new convention. Functions that won’t break when passed tags as arguments, i.e. functions that embed rather than introspect them, will now start their names with capital letters: function App() { return [ \u003cGreeting /\u003e, \u003cP\u003eThe time is: \u003cClock /\u003e\u003c/P\u003e ]; } function Clock() { return new Date().toString(); } function Greeting() { return ( \u003cP\u003e Hello, \u003cprompt\u003eWho are you?\u003c/prompt\u003e \u003c/P\u003e ); } function P(...children) { return ( \u003calert\u003e \u003cconcat\u003e {children} \u003c/concat\u003e \u003c/alert\u003e ); } function alert(message) { window.alert(message); } function prompt(message) { return window.prompt(message); } function concat(a, b) { return a + b; } Let’s give these capital letter functions a special name: Components. Components are the “brains” of our program—they figure out what needs to be done. Because they don’t introspect the stuff you nest inside of them, they can run in any order, in any number of steps, together or separately. In other words, Components are truly timeless. They are untethered from the future because they return tags, and they are untethered from the past because they accept tags as arguments. What about the rest of the functions, like alert, prompt, and concat? Let’s call them Primitives. Primitives can be used as tags too, but they don’t merely embed stuff—they introspect it. They must know all their arguments. Primitives are the “muscles” of our program—they actually do stuff after most of the thinking has already been done by Components. Primitives run last: “think before you do”. This distinction lets you naturally slice the program in two phases. First, you need to think—that is, to run the Components. Your existing interpret function can take care of that: const primitives = interpret(\u003cApp /\u003e, { App, Greeting, Clock, P }); // [ // { fn: 'alert', args: [{ fn: 'concat', args: ['Hello', { fn: 'prompt', args: ['Who are you?'] }] }] }, // { fn: 'alert', args: [{ fn: 'concat', args: ['The time is: ', 'Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)'] }] } // ] After thinking, you need to do. The result of the “thinking” phase contains only the Primitives. Let’s create a new perform function that’ll look a lot like interpret, but it will handle Primitives instead of Components. Since Primitives introspect stuff and need to know their arguments, perform ensures they run inside-out: function perform(json, knownTags) { if (json \u0026\u0026 json.fn) { let fn = knownTags[json.fn]; let args = perform(json.args, knownTags); let result = fn(...args); return perform(result, knownTags); } else if (Array.isArray(json)) { return json.map(item =\u003e perform(item, knownTags)); } else { return json; } } Notice perform doesn’t include any code for skipping unknown tags—it assumes knownTags contains all Primitives it may encounter. This is because perform is intended as the final step and does not let you split the computation any further. Now you can use perform to finish the computation: perform(primitives, { alert, concat, prompt }); // undefined This displays the prompt and the two expected alerts. Run the code. So, did you beat Time? Sort of. Previously, interpret was fragile because skipping some tags (like concat) broke the ordering that was implicitly assumed by some other tags (like alert). But this can no longer happen. Now interpret only deals with Components, and they don’t mind being run in any order (since they embed rather than introspect). Primitives, on the other hand, are now being handled by perform, which always finishes the work in a single step. So the problem can’t come up there either. If you ever extend your program to span two computers, it’s Components (rather than Primitives) that would be split between them. That is because Components don’t mind being run in a different order. Primitives, on the other hand, would have to run together at the very end—which puts them firmly into the Late world. If you have some control over the computers running the Late worlds, there is an interesting optimization you could make. You could preinstall the Primitives that you expect to be shared by all programs alongside the JavaScript runtime. Of course, such a collection of Primitives would have to be carefully curated so that it serves a broadest possible set of use cases. But you can already see some good candidates! For example, your P function might make more sense as a Primitive: function p(...children) { return ( \u003calert\u003e \u003cconcat\u003e {children} \u003c/concat\u003e \u003c/alert\u003e ); } Arguably, a “paragraph” is something many programs might want to display! If you think bigger, you might come up with a whole suite of such Primitives—some graphical (like making something \u003cb\u003ebold\u003c/b\u003e or \u003ci\u003eitalic\u003c/i\u003e) and some behavioral (like expanding \u003cdetails\u003e\u003c/details\u003e or \u003ca /\u003e link). Now, if a lot of programs used the same Primitives, and everyone was building complex programs out of those, it might make sense to move their internal implementation out of JavaScript into some lower-level language like Rust or C++. Then they could be exposed to JavaScript via some higher-level APIs. Then perform could be rewritten to orchestrate the computation using such APIs: function perform(json) { if (json \u0026\u0026 json.fn) { let tagName = json.fn; let children = perform(json.args); let node = document.createElement(tagName); for (let child of [children].flat().filter(Boolean))) { node.appendChild(child); } return node; } else if (typeof json === 'string') { return document.createTextNode(json); } else if (Array.isArray(json)) { return json.map(perform); } else { return json; } } const tree = perform(json); document.body.appendChild(tree); You could even design a declarative language just for the purpose of describing trees of such Primitives. It could be designed to be more forgiving than our current setup, since for some use cases it might be nice to write it by hand. But enough talking about the Primitives. Going forward, we will assume that a fair number of them exist, that they’re written as lowercase tags (such as \u003cp\u003e), and that there exists a perform function that knows what to do with them. Time steps aside. You have learned to wield the power of Time—and to respect its laws. Now, should you wish to continue your studies, it is time for you to learn the lessons of Space. Act 2 The Reader and the Writer The Reader: That was a long article! The Writer: You betcha. The Reader: And we’re still just halfway in? The Writer: I guess. The Reader: What do you mean you guess? Don’t you know where you’re going? The Writer: I have a rough idea, but truthfully, I’m pretty much winging it. The Reader: Well, that’s not very responsible. I’ve invested a lot of time into reading this. What if it doesn’t build up to something satisfying? What if you drop the ball? The Writer: That’s been one of my worries, yes. But there’s no way for me to know that until I finish writing. On your side, I guess you’ll just have to keep on reading. The Reader: Well, okay, yes, I guess I’ll just have to do that. The Writer: Thank you for your understanding. The Reader: It’s not like I have a choice anyway. The Writer: Why not? You know you can just close the tab and go about your day. The Reader: You know full well that I cannot do that. The Writer: And why is that exactly? The Reader: Well, I’m just one of your characters. You’re the one making me say things. I don’t exactly have much, what do you call it… the wiggle room. The Writer: Ah. Right. The wiggle room. The Writer briefly looks at the audience. It’s hard to read his expression. The Reader: … The Writer: … The Reader: You don’t have many more lines prepared for me, do you? The Writer: My bad. I think that’s about all I could manage. The Reader: … The Writer: … The Reader: Why is this dialog even here? Does it add anything to the story? The Writer: I don’t know. You tell me. The Reader: I thought you’re the one doing the writing. The Writer: Sure, but aren’t you the one doing the reading? Code and Data In the first half of this post, we’ve learned how to split a computation in time. It turned out that some parts of the computation—the Primitives that are actively doing stuff—don’t like to be split apart and would like to execute together. Other parts of the computation—the Components that are thinking about stuff—can be executed at different times, in a different order, and maybe even in different places. We will now set aside Components and Primitives for a moment. Let us investigate the difference between splitting a function in time and in space. We’ve seen earlier that to split a function across time, it’s enough to add nesting: function greeting() { const name = prompt('Who are you?'); return function resume() { alert('Hello, ' + name); }; } This lets you run it in steps rather than all at once. const resume = greeting(); // Run the first step resume(); // Run the second step The return value of the greeting is a function—but that’s not the whole picture. It is crucial that this function is nested inside greeting, for otherwise it would not be able to read the name variable. In other words, greeting returns both a piece of code (the alert call) and a piece of data (the name variable) needed by it. This becomes more apparent if you extract resume into a top-level function. Now it would have to take name as an explicit argument: function resume(name) { alert('Hello, ' + name); } How would we adjust the greeting to accommodate that? We could make it return a nested function that would provide name to resume: function greeting() { const name = prompt('Who are you?'); return () =\u003e resume(name); } function resume(name) { alert('Hello, ' + name); } const resume = greeting(); // Run the first step resume(); // Run the second step But we could also go a bit further. Conceptually, () =\u003e resume(name) combines two pieces of information: code (resume) and data (name). We could make this relationship explicit by returning [resume, name]—code paired with data: function greeting() { const name = prompt('Who are you?'); return [resume, name]; } function resume(name) { alert('Hello, ' + name); } const [code, data] = greeting(); // Run the first step code(data); // Run the second step In fact, this looks remarkably similar to the object notation that we currently use for tags, except that the fn function is an actual function rather than a string: function greeting() { const name = prompt('Who are you?'); return { fn: resume, args: [name] }; } function resume(name) { alert('Hello, ' + name); } const { fn, args } = greeting(); // Run the first step fn(...args); // Run the second step It’s almost like greeting is returning a tag rather than a function call. It expresses the code it wants to run next but it doesn’t actually do that yet. This gives us a new perspective for what tags really are. Yes, a tag is a potential function call. But another way to see it is that a tag is a pairing of code and data. Time and Space Now let us recall how to split a computation across space. We’ve previously discovered one possible pattern for doing so—returning a piece of code as a string: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } const code = greeting(); Then you could call greeting(), save the code it returns, and run it as code on another computer. The second computer will think this is the entire program: function resume() { alert('Hello, ' + \"Dan\"); } But you know that the real program includes both pieces. Currently, greeting returns a string of code. However, it would be perfectly appropriate to think of it as returning both code and data. We just happen to be interpolating the data (the name variable) directly into that string of code. This becomes more apparent if we move the resume code outside of greeting: const RESUME_CODE = ` function resume(name) { alert('Hello, ' + name); } `; function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } const [code, data] = greeting(); const jsonString = JSON.stringify([code, data]); Now that resume takes name as an argument, the greeting needs to return both the code of the resume function and the data it needs (name). Then we could take [code, data], turn it to JSON with JSON.stringify, then JSON.parse it on another computer, and finally call code(data) to finish the program. Of course, when we write our program, we don’t really want to think about the code of resume as a string. We want to think of it as a normal piece of code which is written at the top level, has syntax highlighting, can be typechecked, and so on: function resume(name) { alert('Hello, ' + name); } But how do we connect this piece of code to the greeting function? function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } It’s like these functions exist in two different worlds—one existing “outside” of the string of code that’s about to be sent, and the other one existing “inside” of it. It’s like greeting is writing a story, and resume is someone inside of that story. There is a clear logical continuity between them, but they’re separated by a gap much wider than defined being in different files. When the greeting function runs, resume is merely a string—more like a plan or an idea than an actual function. On the other hand, when resume finally runs, it has no knowledge of greeting having ever existed—all it receives is the name passed down to it. function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } function resume(name) { alert('Hello, ' + name); } If you squint at it, you can still make out the “true” shape of the program: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } But this “split” way of looking at it is fairer to both worlds. It doesn’t prioritize one over the other. Both of them are our program, they’re just split by time and space: function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } function resume(name) { alert('Hello, ' + name); } The question is, how do we tie them together? The Two Worlds The simplest way to tie the two worlds together would be by giving each function in the Late world a unique name that lets us refer to it from the Early world. For example, we could assume we’ll only ever need one function called resume: function greeting() { const name = prompt('Who are you?'); return ['resume', name]; } window['resume'] = function resume(name) { alert('Hello, ' + name); } Although this is a bit clunky, it does create an explicit (if fragile) connection. If we ever go about renaming resume in the Late world, we might remember to search the codebase for any other code might be referring to it, and we might find the greeting in the Early world. We could even add types for window['resume']. This solution isn’t that bad. In fact, it’s similar to what’s happening under the hood when you refer to any of the Primitives built into the browser. You’re not directly importing them from anywhere; you just use a global name like p: function Greeting() { const name = prompt('Who are you?'); return \u003cp\u003eHello, {name}\u003c/p\u003e; } document.createElement = function(tagName) { switch (tagName) { case 'p': // ... } } In that sense, the browser internals are their own sort of a “Late” world. A large part of them is written in a different language than JavaScript and not directly exposed to your program. Much of the logic associated with a primitive like p—including applying styles, laying out text, drawing, compositing, painting, and so on—will run at some point after your document.createElement('p') call. In that sense, \u003cp\u003e really is a tag—a call that still requires some future “carrying out”. But let’s not get distracted. Browser Primitives can afford to have global names because there’s a limited list of them, you need to be able to look them up, and they are always the same between the projects. On the other hand, if you define functions yourself, you probably want more explicit connections between them. Let us come back to the pieces you want to connect: function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } function resume(name) { alert('Hello, ' + name); } An obvious first step would be to mark the resume function for export. You want the code in your other files to be able to refer to it. It’s not an implementation detail that can be freely removed. You don’t want it to appear like dead code! function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } export function resume(name) { alert('Hello, ' + name); } Now that you exported it, the next logical step would be to import it here: import { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [RESUME_CODE, name]; } export function resume(name) { alert('Hello, ' + name); } Except wait. This doesn’t help you! What you want to obtain is RESUME_CODE, which is this thing from earlier: const RESUME_CODE = ` function resume(name) { alert('Hello, ' + name); } `; But what you got by importing resume is this other thing: function resume(name) { alert('Hello, ' + name); } You’ve lost the backticks! Mind the Gap Let us thoroughly convince ourselves that using an import would not work. Ultimately, what we’re trying to do is to modularize this pattern: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } To do that, we’ve split the greeting and the resume functions in two different worlds—but as a result, we’ve lost the syntactic connection between them. Suppose that we try to bridge “the gap” between the worlds with an import: import { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } export function resume(name) { alert('Hello, ' + name); } Unfortunately, unless we change something about how import works, this would essentially just “bring” the resume function itself into the greeting’s world: function resume(name) { alert('Hello ', + name); } function greeting() { const name = prompt('Who are you?'); return [resume, name]; } export function resume(name) { alert('Hello, ' + name); } In other words, the overall shape of the program would look kind of like this: function greeting() { const name = prompt('Who are you?'); return function resume() { alert('Hello, ' + name); }; } But the overall shape that we need looks kind of like this: function greeting() { const name = prompt('Who are you?'); return `function resume() { alert('Hello, ' + ${JSON.stringify(name)}); }`; } It’s all about the backticks! When we import something, we bring that code into the importing world. But what we want here is to merely refer to that code without executing any of it. We wanted greeting to return a story about a pumpkin—not an actual pumpkin. The problem with import becomes more apparent if you imagine that resume itself imports some third-party library—for example, to display a toast: import { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } import { showToast } from 'toast-library'; export function resume(name) { showToast('Hello, ' + name); } With a plain import, our entire program would have a shape equivalent to this: // From toast-library function initializeToastLibrary() { /* ... */ } function showToast(message) { /* ... */ } initializeToastLibrary(); function greeting() { const name = prompt('Who are you?'); return function resume() { showToast('Hello, ' + name); }; } However, the shape that we want is closer to something like this: function greeting() { const name = prompt('Who are you?'); return ` // From toast-library function initializeToastLibrary() { /* ... */ } function showToast(message) { /* ... */ } initializeToastLibrary(); function resume() { showToast('Hello, ' + name); } `; } The boundaries between the worlds are firm, as they should be. We want each world to behave consistently within itself—at least for any already existing code. To ensure that, imports from the Early world should become a part of the Early world. Imports from the Late world should become a part of the Late world. On its own, each world should behave like its own isolated program—no funny stuff. We don’t want to break that consistency. All we need is a door. A Door We need a way to say: “I want to refer to this thing in another file, but I don’t actually want to execute or even load any of its code. Just give me something that will let me programmatically find the code for that thing later.” Luckily, all of this is completely made up, so we can just make up some made-up syntax for that. Tada! import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } import { showToast } from 'toast-library'; export function resume(name) { showToast('Hello, ' + name); } What, just like that? Sure, why not. Okay, but what does this syntax do? Well, for starters, let’s imagine that it just returns the source code of the function. That would let us send that code to the other computer, as we originally intended: import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } const [code, data] = greeting(); // [ // 'function resume(name) { showToast(\"Hello, \" + name); }', // 'Dan' // ] However, this actually isn’t terribly useful—notice that showToast is nowhere to be found. We don’t really want the source code of the resume function alone, we want whatever’s necessary for another computer to be able to load and run resume. Here’s a second idea. Why don’t we have it return some kind of identifier that’s uniquely designed for addressing code. For example, it could combine the filename and the export name: import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } const [code, data] = greeting(); // [ // '/src/stuff/resume.js#resume', // 'Dan' // ] Now, this means that the format would have to be somewhat aware of how the other computer loads and executes code. For example, if the other computer runs a Node.js process, it could import() that file from the filesystem—provided that it’ll be deployed to the other computer. If the other computer runs a web browser, it could import() that file over HTTP from a server that would have to serve it. In the case of a web browser, it might not be very efficient to import remote files one by one and to rely on the browser’s module system to download each of their dependencies. Instead, it might make sense to use an automated bundler (which would combine such code into chunks) and to use a bundler-specific identifier: import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } const [code, data] = greeting(); // [ // 'chunk123#module456#resume', // 'Dan' // ] In the simplest possible case, if all of the code destined for the Late world were ultimately assembled into a giant single file that gets sent to the other computer over the wire, this identifier could just be the referenced function’s global name: import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } const [code, data] = greeting(); // [ // 'window.resume', // 'Dan' // ] What matters is that we now have a syntax for some code from the Early world to refer to some code from the Late world. It is a door between the two environments. It lets us achieve something like this: function greeting() { const name = prompt('Who are you?'); return ` import { showToast } from 'toast-library'; function resume() { showToast('Hello, ' + name); } `; } by writing something like this: import tag { resume } from './resume'; function greeting() { const name = prompt('Who are you?'); return [resume, name]; } import { showToast } from 'toast-library'; export function resume(name) { showToast('Hello, ' + name); } It lets us write a single program spanning two programming environments. Spring Cleaning We’ve found a door between the two worlds—the Early and the Late worlds. This door, import tag, will let us split the computation across both time and space. Before we can use this door though, we need to clean up our house. We’re going to make some tweaks to our tag syntax to make it nicer for writing Components. (If you’re familiar with React, you’ll recognize them as bringing us closer to JSX.) Consider this example: function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003eThe time is: \u003cClock /\u003e\u003c/p\u003e \u003c/div\u003e ); } So far, we’ve assumed this syntax produces an object tree like this: function App() { return { fn: 'div', args: [ { fn: 'Greeting', args: [] }, { fn: 'p', args: ['The time is: ', { fn: 'Clock', args: [] }] } ] }; } That’s all jolly well but it doesn’t leave us a way to pass named attributes like \u003cp className=\"text-purple-500\"\u003e. We’re going to tweak the convention so that instead of positional args, both the Components and the Primitives will receive a single object with named arguments. We’ll call this object props for “properties”. The nested tags will move to a prop called children inside of that object. function App() { return { type: 'div', props: { children: [ { type: 'Greeting', props: {} }, { type: 'p', props: { className: 'text-purple-500', children: ['The time is: ', { type: 'Clock', props: {} }] } } ] } }; } I’ve taken the liberty of renaming fn to type. Now that the Primitives like \u003cp\u003e are handled behind the scenes by document.createElement('p') (whatever that is) rather than our own function p(), it’s misleading to call p a “function”. We’ll need to adjust interpret to deal with the changes. If you don’t remember what it looked like, don’t worry—it’s been a while. Here’s the important part: function interpret(json, knownTags) { if (json \u0026\u0026 json.type) { if (knownTags[json.type]) { let Component = knownTags[json.type]; let props = json.props; let result = Component(props); return interpret(result, knownTags); } else { let children = json.props.children?.map(arg =\u003e interpret(arg, knownTags)); let props = { ...json.props, children }; return { type: json.type, props }; } } else if (Array.isArray(json)) { return json.map(item =\u003e interpret(item, knownTags)); } else { return json; } } We’ll also tweak perform, with some new logic to apply props like className: function perform(json) { if (json \u0026\u0026 json.type) { let tagName = json.type; let node = document.createElement(tagName); for (let [propKey, propValue] of Object.entries(json.props)) { if (propKey === 'children') { let children = perform(propValue); for (let child of [children].flat().filter(Boolean)) { node.appendChild(child); } } else { node[propKey] = propValue; } } return node; } else if (typeof json === 'string') { return document.createTextNode(json); } else if (Array.isArray(json)) { return json.map(perform); } else { return json; } } Now \u003cp className=\"text-purple-500\"\u003e will work! Run the code. More Spring Cleaning We’re at a good point to make another quality-of-life change. Recall that right now, to convert a tree of Components to a tree of Primitives, you have to pass all known Components as a dictionary to the interpret function: function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003eThe time is: \u003cClock /\u003e\u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } const primitives = interpret(\u003cApp /\u003e, { App, Greeting, Clock }); Run the code. This, however, feels pretty silly. When we write \u003cGreeting /\u003e, the Greeting function is already in scope. And even if it weren’t, we’d want to import it into scope to make the connection explicit. So if the Greeting function is already in scope, why can’t the \u003cGreeting /\u003e syntax “remember” which Greeting it was? We can fix this by adopting a new convention. If the tag is lowercase, like \u003cdiv\u003e, we’ll leave its type be a string like 'div' in the object representation of the tag. But if the tag starts with a capital letter, like \u003cGreeting /\u003e, we’ll change its type to be the Greeting function itself rather than a 'Greeting' string: function App() { return { type: 'div', // Primitive (string) props: { children: [ { type: Greeting, props: {} }, // Component (function) { type: 'p', // Primitive (string) props: { children: [ 'The time is: ', { type: Clock, props: {} } // Component (function) ], } } ] } }; } Conveniently, we’ve already been starting Component names with capital letters to differentiate them from the Primitives, so we don’t need to rename anything. This lets us simplify the interpret function. Instead of carrying a dictionary of knownTags around, it will simply check typeof json.type. If json.type is a function, that function itself is the Component. Otherwise, it must be a Primitive: function interpret(json) { if (json \u0026\u0026 json.type) { if (typeof json.type === 'function') { let Component = json.type; let props = json.props; let result = Component(props); return interpret(result); } else { let children = json.props.children?.map(interpret); let props = { ...json.props, children }; return { type: json.type, props }; } } else if (Array.isArray(json)) { return json.map(interpret); } else { return json; } } Now we can just call interpret without passing any extra information to it: const primitives = interpret(\u003cApp /\u003e); // { // type: 'div', // props: { // children: [{ // type: 'p', // props: { // children: [ // 'Hello, ', // { type: 'input', props: { placeholder: 'Who are you?' } } // ] // } // }, { // type: 'p', // props: { // children: ['The time is ', 'Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)'] // } // }] // } // } The interpret function would “dissolve” all of our Components outside-in, leaving behind only the Primitives. Then the perform function would “dissolve” all of the Primitives inside-out, creating the end result—a browser DOM tree: const tree = perform(primitives); // [HTMLDivElement] document.body.appendChild(tree); Run the code. The boss music starts playing. Meet Space. Early and Late Components Here is your entire Component tree: export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003eThe time is: \u003cClock /\u003e\u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } Run the code. To beat Space, you must split this computation between two different computers. In particular, App and Greeting should run on the first machine, but the Clock Component should run on the second machine. These two computations should be seamlessly combined and turned into a browser DOM tree on the second computer. You should not modify any code within the Component functions. Let’s figure it out step by step. The first thing you’ll want to do is move Clock into a different file and export it: export function Clock() { return new Date().toString(); } You can now import it from the main file: import { Clock } from './Clock'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003eThe time is: \u003cClock /\u003e\u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } Except wait, this doesn’t split the code between the two computers. You’re going to need to open a door for that by changing import to import tag. You open the door from the Early world, immediately manifesting the Late world into existence: import tag { Clock } from './Clock'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003eThe time is: \u003cClock /\u003e\u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } export function Clock() { return new Date().toString(); } If you inspect the tags that the App Component returns, you’ll notice that the \u003cClock /\u003e tag has turned into something peculiar: { type: 'div', // Primitive (a string) props: { children: [{ type: Greeting, // Component (a function) props: {} }, { type: 'p', props: { children: [ 'The time is ', { type: '/src/Clock.js#Clock', // What is this? props: {} } ] } }] } } By our latest convention, tags starting with a capital letter would use the corresponding value in scope for the type—for example, \u003cGreeting /\u003e turns into { type: Greeting, props: {} } where Greeting is a function. The same is true for \u003cClock /\u003e. The Clock starts with a capital letter so we get { type: Clock, props: {} }. However, Clock is not a regular import but import tag, which we previously defined to mean a different thing from a regular import. Instead of giving us the Clock function, it gives us a kind of a reference—an identifier that would later let us load the Clock source code from another computer. That’s what this '/src/Clock.js#Clock' string is. This is a good time to introduce some terminology: Early Components are Components that execute in the Early world. In this example, App and Greeting are Early Components. Late Components are Components sent to finish the job in the Late world. In this example, Clock will be the only Late Component. You’ll want to dissolve the Early Components first. That will give you the code for the Late world and the data for that code. You’ll construct the Late world from that code, and dissolve the Late Components there. That will give you the Primitives. Sounds like a plan. Let us run interpret(\u003cApp /\u003e) in the Early world and inspect the result. Notice how all the Early Components (App and Greeting) dissolved from the output: { type: 'div', props: { children: [{ type: 'p', props: { children: [ 'Hello, ', { type: 'input', props: { placeholder: 'Who are you?' } } ] } }, { type: 'p', props: { children: [ 'The time is ', { type: '/src/Clock.js#Clock', props: {} } ] } }] } } All that is left are Primitives ('div', 'p', 'input') and… Late Components (here, only '/src/Clock.js#Clock'). We didn’t have to do anything special for Late Components—since they’re not functions, interpret does not attempt to execute them and leaves them in place, similar to how it does with the Primitives: function interpret(json) { if (json \u0026\u0026 json.type) { if (typeof json.type === 'function') { let Component = json.type; let props = json.props; let result = Component(props); return interpret(result); } else { let children = json.props.children?.map(interpret); let props = { ...json.props, children }; return { type: json.type, props }; } } else if (Array.isArray(json)) { return json.map(interpret); } else { return json; } } Since the result of interpret does not contain any functions, it can be easily turned into a string that can then be sent over the network: const lateComponents = intepret(\u003cApp /\u003e); const jsonString = JSON.stringify(lateComponents); Later, on another computer, you can turn this string back into an object. You might be tempted to immediately pass it to perform to create the DOM tree: const lateComponents = JSON.parse(jsonString); const tree = perform(lateComponents); However, this would give you an error: function perform(json) { if (json \u0026\u0026 json.type) { let tagName = json.type; // 🔴 Failed to execute 'createElement' on 'Document': // The tag name provided ('/src/Clock.js#Clock') is not a valid name. let node = document.createElement(tagName); // ... return node; } else { // ... } } Right—perform only deals with the Primitives, but Clock is a Late Component. You’ve dissolved Early Components (App, Greeting) in the Early world. Now you’re in the Late world, so it’s time to dissolve the Late Components (Clock). You’re trying to call interpret to dissolve the remaining Components: const lateComponents = JSON.parse(jsonString); const primitives = interpret(lateComponents); But nothing happens. The '/src/Clock.js#Clock' tag is still there. Space smirks. Ah right, interpret would only attempt to execute functions: function interpret(json) { if (json \u0026\u0026 json.type) { if (typeof json.type === 'function') { let Component = json.type; let props = json.props; let result = Component(props); return interpret(result); } else { let children = json.props.children?.map(interpret); let props = { ...json.props, children }; return { type: json.type, props }; } } else if (Array.isArray(json)) { return json.map(interpret); } else { return json; } } But what you have is just a reference, an address that tells you where to get the Clock function. You still need to actually load it on this computer. Space hands you this: async function loadReference(lateReference) { // Pretend it was loaded over the network or from the bundler cache. await new Promise(resolve =\u003e setTimeout(resolve, 3000)); if (lateReference === '/src/Clock.js#Clock') { return Clock; } else { throw Error('Module not found.'); } } Okay, suppose you’re given a function that does this for you. Maybe it’s provided by the environment, or by the kind-hearted people working on bundlers. You can hand it '/src/Clock.js#Clock', and it will asynchronously load the Clock: await loadReference('/src/Clock.js#Clock'); // function Clock(){} This was the last piece necessary to complete the puzzle. Whenever your JSON.parse function encounters something that looks like a reference, pass it to loadReference() and hang onto each such Promise: const pendingPromises = []; const lateComponents = JSON.parse(jsonString, (key, value) =\u003e { if (typeof value?.type === 'string' \u0026\u0026 value.type.includes('#')) { // The `value.type` is a reference, but we want a function. // Start loading that function. const promise = loadReference(value.type).then(fn =\u003e { // When the function loads, replace it directly in the parsed JSON. value.type = fn; }); // Keep track of when that happens. pendingPromises.push(promise); } return value; }); // Wait for all references to load. await Promise.all(pendingPromises); After this manipulation, the lateComponents object will look like this: { type: 'div', props: { children: [{ type: 'p', props: { children: [ 'Hello, ', { type: 'input', props: { placeholder: 'Who are you?' } } ] } }, { type: 'p', props: { children: [ 'The time is ', { type: Clock, // The loaded function! props: {} } ] } }] } } It’s just Late Components and Primitives—all references have been loaded. Now you can finally pass it to interpret, executing the Clock. That will give you a tree of Primitives which you can turn into the DOM with perform: const primitives = interpret(lateComponents); const tree = perform(primitives); document.body.appendChild(tree); And with that, you’re done! Run the code. Let’s take another look at the full picture and recap how it works. In the Early world, you dissolve all the Early Components with interpret. This gives you a string that represents how to finish the computation in the Late world: const lateComponents = intepret(\u003cApp /\u003e); const jsonString = JSON.stringify(lateComponents); In the Late world, you parse that string, load the references, and then dissolve the Late Components with interpret. That leaves you with a tree of Primitives: const pendingPromises = []; const lateComponents = JSON.parse(jsonString, (key, value) =\u003e { if (typeof value?.type === 'string' \u0026\u0026 value.type.includes('#')) { const promise = loadReference(value.type).then(fn =\u003e { value.type = fn; }); pendingPromises.push(promise); } return value; }); await Promise.all(pendingPromises); const primitives = interpret(lateComponents); Finally, those Primitives are ready to be turned into DOM or some other format: const tree = perform(json); document.body.appendChild(tree); Run the code. Congratulations! You’ve split a computation across both time and space. The Donut Space folds before you, finally recognizing you as an equal. “You’ve done well.” But it doesn’t get out of your way. Instead, Space continues folding, twisting itself into a strange shape—forward, then inside out, forming a wormhole in the middle. It kind of looks like a donut. An all-encompassing, beautiful, terrifying donut. “But you’re not done yet.” Wait… You’ve heard that voice before. Could that be… “Time?” A second health bar appears. Composition Here is your program: import tag { Clock } from './Clock'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003e The time is: \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } export function Clock() { return new Date().toString(); } Run the code. To beat Spacetime, change it so that the Clock displays the time from the Early world, but the color of the \u003cp\u003e around the \u003cClock\u003e is decided by the Late world. The first part is easy. To make the Clock show time from the Early world, it’s enough to lift it back up: export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp\u003e The time is: \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } Now you need to specify the \u003cp\u003e color. Suppose that the perform function already knows how to handle the style prop and you could specify it like this: \u003cp style={{ color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e That’s great, but Spacetime says prompt only exists in the Late world. Right now the App Component is defined in the Early world where prompt does not exist: export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp style={{ // 🔴 ReferenceError: prompt is not defined. color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } Maybe you could move the App Component itself into the Late world? This fixes the prompt but neither Greeting nor Clock are available in the Late world: function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } export function App() { // 🔴 ReferenceError: Greeting is not defined // 🔴 ReferenceError: Clock is not defined return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp style={{ color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } Maybe you could move the Greeting and the Clock down as well? export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp style={{ color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } Wait, but you wanted Clock to show the time from the Early world. You can’t move it down. This is turning out to be a bit of a headscratcher… Maybe you could keep the App in the Late world, but refer to Greeting and Clock in the Early world using import tag? Let’s try that: export function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } export function Clock() { return new Date().toString(); } // 🔴 Cannot import an Early tag from a Late module. import tag { Clock, Greeting } from './early'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp style={{ color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } Nah, this doesn’t make sense. It doesn’t make sense for the same reason that a function inside of the backticks cannot call a function outside the backticks: function greeting() { function showToast() { /* ... */ } return `function resume() { const name = prompt('Who are you?'); // 🔴 ReferenceError: showToast is not defined showToast('Hello, ' + name); }`; } The import tag syntax can only import things from below, not from above. The Spacetime donut is starting to close in around you. You don’t have much time left to think. You have one last idea from a half-forgotten dream. The import tag syntax can only import things from the world below. But didn’t you also invent a sister import rpc syntax that lets you import functions over the network boundary? If the Early world is still somewhere there, perhaps it could respond to your request and return the result of the Greeting and the Clock? export function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } export function Clock() { return new Date().toString(); } import rpc { Clock, Greeting } from './early'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cp style={{ color: prompt('Pick a color:') }}\u003e \u003cClock /\u003e \u003c/p\u003e \u003c/div\u003e ); } The donut wobbles and stops swirling for a moment. Was that the solution? It does appear to work– “No extra network calls. You have to do everything in one go.” The donut resumes swirling and is starting to envelop you. The wormhole is getting ever so closer. You’re no longer afraid of it, almost welcoming it. A thought strikes your mind. Not even a thought—a picture. A shape. import tag { Donut } from './Donut'; export function App() { return ( \u003cdiv\u003e \u003cGreeting /\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e ); } function Greeting() { return ( \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e ); } function Clock() { return new Date().toString(); } export function Donut({ children }) { return ( \u003cp style={{ color: prompt('Pick a color:') }}\u003e {children} \u003c/p\u003e ); } You can’t call the past from the future, but you can wrap the past into the future. You don’t know what this means but you know you’re not breaking any rules now. Therefore, it must work. You close your eyes. A Dream Sequence In the beginning was the tag, and the tag was in the Early world, and the tag was \u003cApp /\u003e. What’s an App? It’s a \u003cdiv\u003e with a \u003cGreeting\u003e, and a \u003cDonut\u003e with a \u003cClock /\u003e. \u003cdiv\u003e \u003cGreeting /\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e What’s a \u003cdiv\u003e? \u003cdiv\u003e \u003cGreeting /\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e We don’t know yet. What’s a \u003cGreeting /\u003e? \u003cdiv\u003e \u003cGreeting /\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e It’s a \u003cp\u003ewith an \u003cinput\u003e. \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e What’s a \u003cp\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e We don’t know yet. What’s an \u003cinput\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e We don’t know yet. What’s a Donut? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e We don’t know yet. What’s a Clock? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: \u003cClock /\u003e \u003c/Donut\u003e \u003c/div\u003e It’s the time of this world, which is Early, and whose time has come to end. \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/Donut\u003e \u003c/div\u003e Goodbye App, goodbye Greeting, goodbye Clock. *** (modem sounds) *** What’s a \u003cdiv\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/Donut\u003e \u003c/div\u003e We don’t care yet. What’s a \u003cp\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/Donut\u003e \u003c/div\u003e We don’t care yet. What’s an \u003cinput\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/Donut\u003e \u003c/div\u003e We don’t care yet. What’s a \u003cDonut\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cDonut\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/Donut\u003e \u003c/div\u003e Let us load it. \u003cscript src=\"chunk123.js\"\u003e\u003c/script\u003e Oh, a Donut is a \u003cp\u003e of a user-chosen color. Choose away! \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cp style={{ color: 'purple' }}\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/p\u003e \u003c/div\u003e You have chosen. What’s a \u003cp\u003e? \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cp style={{ color: 'purple' }}\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/p\u003e \u003c/div\u003e We don’t care yet— it is not our job to care. Goodbye Donut; Let us hand this to some piece of C++. \u003cdiv\u003e \u003cp\u003e Hello, \u003cinput placeholder=\"Who are you?\" /\u003e \u003c/p\u003e \u003cp style={{ color: 'purple' }}\u003e The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time) \u003c/p\u003e \u003c/div\u003e Run the code. Epilogue There’s more we haven’t covered but I’m afraid I’m running out of paper. Here’s a few things a motivated reader might discover if they continue this line of thought: Poison Pills: As your codebase grows, you’ll increasingly find that you don’t want to think about which world you’re in at any given moment—you’ll only want to assert the capabilities you’re relying on. For example, if you’re reading from a database and the entire database exists in the Early world, you’ll want some way to “poison pill” the database module so that importing it from the Late world immediately leads to a build error (instead of, say, trying to bundle the database code). In Node.js, custom user conditions provide a convenient way to enforce this. Directives: It turns out that import tag and import rpc, while theoretically elegant, are not very nice to use in practice. The technical separation between the worlds must remain firm; however, mentally you’ll gradually shift to writing the code as if it doesn’t matter which world you’re in. With Poison Pills enforcing that stuff doesn’t execute in the wrong world, you can largely shift the boundaries on autopilot by moving stuff around and cutting new “doors” in response to build errors. When you want to cut a “door”, you’ll find that it’s more natural to mark it next to the export rather than where you do the import. That would let you quickly “shift” the boundaries in and out of existence—the world an imported module is in becomes an implementation detail. One way to annotate exports would be to (ab)use the directive syntax. If you also rename Early and Late to something more descriptive (for example, “Early” could become “Server” and “Late” could become “Client”), then import tag could be replaced by 'use client' next to the export, and import rpc could turn into 'use server'. Data Fetching: The Early world (or the Server world, if you prefer) is a perfect place for data fetching because you have the opportunity to deploy the code to a low-latency environment. It would not be difficult to adjust the code to allow the “thinking” phase to be asynchronous; see if you can manage that as an exercise. Streaming Execution: In our examples, every phase of the computation happens sequentially: it doesn’t start until the previous phase has fully finished. However, in practice, since Components can be executed outside-in, you can blend all of the phases and execute them without blocking. In particular, instead of waiting for an entire JSON tree of Late Components (or shall we call them Client Components?), you could develop a specialized wire format that leaves “holes” in place of unfinished computations, and can later fill in those holes with more JSON. Stateful Late World: Late Components become a lot more useful if you introduce a concept of State. This, again, underscores that a tag is a potential function call—it may happen, it may not happen, or it may happen many times. Every time you change the state of some Late Component, you can re-execute it without affecting any of the Early Components. This ensures State changes stay predictably instant. Repurposing Early and Late Worlds: Keep in mind that Early and Late worlds don’t have to map 1:1 to existing concepts of a “server” and a “client”. For example, if your Late Components are Stateful, and you have a server, you might find it useful to run both the Early and the Late worlds on that server. On the server, you’ll call the Late world with the initial State—to produce an initial tree of Primitives, which you can turn into a format like HTML. This lets you start displaying content to the user very early—before any of the Late Components load on their machine. Caching: The Early world doesn’t have to run on demand. Indeed, you can run it ahead of time and store the intermediate result of its computation (which is often known as static site generation). If you’re feeling ambitious, you could even add another world—a Cache world—to reuse pieces of computation across requests. If you’d like to play with the final example, be my guest: Run the final code. If you’d like to play with the real thing but don’t want to use a framework, Parcel has recently released support for React Server Components so do check that out. Thank you for reading!",
  "image": "https://overreacted.io/react-for-two-computers/opengraph-image?5b0b970dfd19bb8c",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eI’ve been trying to write this post at least a dozen times. I don’t mean this figuratively; at one point, I literally had a desktop folder with a dozen abandoned drafts. They had wildly different styles—from rigoruous to chaotically cryptic and insufferably meta; they would start abruptly, chew on themselves, and eventually trail off to nowhere. One by one, I threw them all away because they all sucked.\u003c/p\u003e\n\u003cp\u003eIt turns out that I wasn’t really writing a post; I was actually preparing a talk. I was pretty far into the process of writing this post when I had that realization. Oops! Thankfully, the React Conf organizers let me present a new talk on a short notice, and I did that eight months ago. You can watch \u003cem\u003eReact for Two Computers\u003c/em\u003e below.\u003c/p\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ozI4V_29fj4?si=A_KuimpIB9kmu7GZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003cp\u003eIt’s about everyone’s favorite topic, React Server Components. (Or maybe not.)\u003c/p\u003e\n\u003cp\u003eI’ve given up on the idea of converting this talk into a post form, nor do I think it’s possible. But I wanted to jot down a few notes that are complementary to the talk. I’m going to assume that you \u003cem\u003ehave\u003c/em\u003e watched the talk itself. This is just the stuff that wasn’t coherent enough to make the cut—the loose threads I couldn’t tie together.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"act-1\"\u003e\u003ca target=\"_self\" href=\"#act-1\"\u003eAct 1\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"recipes-and-blueprints\"\u003e\u003ca target=\"_self\" href=\"#recipes-and-blueprints\"\u003eRecipes and Blueprints\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhat is the difference between a tag and a function call?\u003c/p\u003e\n\u003cp\u003eHere’s a tag:\u003c/p\u003e\n\n\u003cp\u003eHere’s a function call:\u003c/p\u003e\n\n\u003cp\u003eOne difference is that \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e are hard and spiky and \u003ccode\u003e(\u003c/code\u003e and \u003ccode\u003e)\u003c/code\u003e are soft and round. But that’s not what I mean. These are just visual differences. But what is the difference in how they work, what they mean, in what we expect from them?\u003c/p\u003e\n\u003cp\u003eOf course, there is no particular meaning to a \u003cem\u003etag\u003c/em\u003e or a \u003cem\u003efunction call\u003c/em\u003e if you don’t specify which language you’re using. For example, a JavaScript function call might not behave the same way as a Haskell function call; an HTML tag might not behave the same way as a ColdFusion tag. Nevertheless, there are some things that we \u003cem\u003eexpect\u003c/em\u003e from a tag or a function call precisely \u003cem\u003ebecause\u003c/em\u003e we’re familiar with how they work in popular languages. The spiky \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e carry a set of associations and intuitions, just like the soft \u003ccode\u003e(\u003c/code\u003e and \u003ccode\u003e)\u003c/code\u003e do. I want to dig into these intuitions.\u003c/p\u003e\n\u003cp\u003eLet’s start with what \u003ccode\u003ealert(\u0026#39;Hello\u0026#39;)\u003c/code\u003e and \u003ccode\u003e\u0026lt;p\u0026gt;Hello\u0026lt;/p\u0026gt;\u003c/code\u003e have in common:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eWe refer to a function or a tag by its name.\u003c/strong\u003e By convention, a function call often starts with a verb (\u003ccode\u003ecreateElement\u003c/code\u003e, \u003ccode\u003eprintMoney\u003c/code\u003e, \u003ccode\u003equerySelectorAll\u003c/code\u003e), while tags are usually named with nouns (like \u003ccode\u003ep\u003c/code\u003e for a \u003cem\u003eparagraph\u003c/em\u003e). This isn’t a hard rule (\u003ccode\u003ealert\u003c/code\u003e is both; \u003ccode\u003eb\u003c/code\u003e stands for \u003cem\u003ebold\u003c/em\u003e) but it’s true more often than not. (Why is that?)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWe can pass information to a function or a tag.\u003c/strong\u003e Earlier, we were passing a piece of text (\u003ccode\u003e\u0026#39;Hello\u0026#39;\u003c/code\u003e) to the tag and the function. But we’re not limited to passing a single string. Within a JavaScript function call, we can pass multiple arguments including strings, numbers, booleans, objects, and so on. Within an HTML tag, we can pass multiple attributes, but their values cannot be objects or other rich data structures—which is quite limiting. Thankfully, tags in JSX (as well as in many HTML-based template languages) let us pass objects and any other rich values.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBoth function calls and tags can be deeply nested.\u003c/strong\u003e For example, we could write \u003ccode\u003ealert(\u0026#39;Hello, \u0026#39; + prompt(\u0026#39;Who are you?\u0026#39;))\u003c/code\u003e to express the relationship between these two different function calls: the result of the inner \u003ccode\u003eprompt\u003c/code\u003e call gets combined with a string, and is then passed to the outer \u003ccode\u003ealert\u003c/code\u003e call. (Try it in your console if you’re not sure what this does.) Although nesting is fairly common with function calls, with tags nesting really \u003cem\u003eis\u003c/em\u003e the name of the game. You hardly ever see a tag completely alone and not surrounded by other tags. (Why is that?)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eClearly, function calls and tags are very similar. They let us pass some information to a named thing, and if needed, they let us elaborate by nesting further (passing some more information to some named thing (nesting as much as we need (yay!)))\u003c/p\u003e\n\u003cp\u003eWe’re also starting to get a few hints of the fundamental differences between them. For one, function calls tend to be verbs while tags tend to be nouns. Also, you’ll encounter deeply nested tags more often than deeply nested function calls.\u003c/p\u003e\n\u003cp\u003eWhat’s up with that?\u003c/p\u003e\n\u003cp\u003eLet’s start with the latter. Why do tags tend to cling to each other? Are tags just naturally predisposed to gravitate towards other tags until they—\u003cem\u003eyoink!\u003c/em\u003e—click together? Perhaps those spiky bois really do yearn for connection? That may be so, but consider this: maybe we \u003cem\u003elike\u003c/em\u003e to use tags for deeply nested structures because we can see the \u003ccode\u003e\u0026lt;/end\u0026gt;\u003c/code\u003e of every tag and don’t have to guess which \u003ccode\u003e)\u003c/code\u003e is closing.\u003c/p\u003e\n\u003cp\u003eTags don’t lead to deep nesting—rather, we \u003cem\u003echoose\u003c/em\u003e to use tags \u003cem\u003efor\u003c/em\u003e deep nesting. (Recall how broadly the JavaScript community eventually adopted JSX despite it being almost universally panned for a year or two. Nesting tags is hard to give up!)\u003c/p\u003e\n\u003cp\u003eOkay, let’s say we \u003cem\u003eprefer\u003c/em\u003e to use tags for nesting. But why do tags tend to be nouns rather than verbs? Is this a coincidence, or is there a deeper reason for this as well?\u003c/p\u003e\n\u003cp\u003eThis is more of a conjecture but I think it’s because nouns are easier to decompose than verbs. Nouns describe \u003cem\u003ethings\u003c/em\u003e, and things can often be adequately described purely as a composition of other things. For example, a building consists of floors, floors consist of rooms, rooms consist of people, and people consist of water. Note that this description is \u003cem\u003etimeless\u003c/em\u003e—not in the sense that it’s a classic, but in the sense that it describes a snapshot in time, like a frame in the movie, or like a blueprint. You can omit time from the equation, and it’ll still be a pretty useful description.\u003c/p\u003e\n\u003cp\u003eVerbs, on the other hand, tend to describe \u003cem\u003eprocesses\u003c/em\u003e which happen \u003cem\u003eover\u003c/em\u003e time—they’re time\u003cem\u003eful\u003c/em\u003e! Consider a cooking recipe: “Heat the frying pan, put the butter on it, wait for the butter to melt, now pour the eggs on it.” Although there are still opportunities for composition (\u003cem\u003ehow\u003c/em\u003e does one crack an egg?), the sequencing here is crucial! You need to be constantly aware of what step happens first, what step happens next, and what kind of decisions you have to make between the steps. Unlike a blueprint, a recipe has an ordering to it, and a certain urgency to it too.\u003c/p\u003e\n\u003cp\u003eSo how does this relate to tags and function calls?\u003c/p\u003e\n\u003cp\u003eA recipe prescribes a sequence of steps to be performed in an order. It’s composed of verbs but there is rarely a lot of nesting. (In fact, nesting may just obscure the ordering.) Each step may change something or depend on the previous steps, so it is important to execute the recipe in the exact order it was written, top to bottom. These recipes, also known as \u003cem\u003eimperative\u003c/em\u003e programs, are written with function calls:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eeggs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecrackEggs\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eheat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efryingPan\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efryingPan\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e butter\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e30000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efryingPan\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e eggs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA blueprint, on the other hand, describes what nouns a thing is made of. It doesn’t prescribe a specific order of operations—it only describes how the whole is broken into its parts. This is why these blueprints, also known as \u003cem\u003edeclarative\u003c/em\u003e programs, naturally end up deeply nested, and thus are more convenient to write with tags:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eBuilding\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eRoof\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eFloor\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eRoom\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eRoom\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e name=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e name=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eRoom\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eFloor\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eBasement\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eBuilding\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMany real-world programs combine both techniques. For example, a typical React component combines some imperative recipes (like sequences of function calls in the event handlers) with some declarative blueprints (like the returned JSX tags).\u003c/p\u003e\n\u003cp\u003eHowever, ultimately, our programs must \u003cem\u003edo\u003c/em\u003e something. Recipes are ready to be executed—they don’t leave any ambiguity about what should be done next. Do this step, then do this step, then do this step, then done. On the other hand, a blueprint is just that—a detailed plan to construct something. It won’t come to life until some recipe actually decides to construct the things described by that blueprint. (For example, React constructs the DOM described by the blueprint of your JSX.)\u003c/p\u003e\n\u003cp\u003eIn a way, a blueprint is almost a recipe, but it’s more passive, inert, open to future interpretation. It’s a recipe but with \u003cem\u003etime itself\u003c/em\u003e factored out of the equation. When you remove time, all that’s left is the structure—the things, the nouns, the tags.\u003c/p\u003e\n\u003cp\u003eA blueprint is a \u003cem\u003epotential\u003c/em\u003e recipe. It’s a plan—something that might or might not happen depending on whether some recipe will eventually carry out that plan.\u003c/p\u003e\n\u003cp\u003eNow, blueprints are made of tags, and recipes are made of function calls. If we say a blueprint is a \u003cem\u003epotential\u003c/em\u003e recipe, it follows that… a tag is a \u003cem\u003epotential\u003c/em\u003e function call.\u003c/p\u003e\n\u003cp\u003eWait, what?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"await-and-rpc\"\u003e\u003ca target=\"_self\" href=\"#await-and-rpc\"\u003eAwait and RPC\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose you want to call a function. That’s easy to do:\u003c/p\u003e\n\n\u003cp\u003eYou can be reasonably sure that as soon as that function finishes executing, the next line will run immediately. In particular, it’s very nice that you can get the \u003cem\u003eresult\u003c/em\u003e of one function call and then immediately use it for the next function call:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, suppose that the function you want to call is on a different computer. That would be a bummer, right? But so it happens.\u003c/p\u003e\n\u003cp\u003eThe standard way to deal with this situation would be to issue some kind of a network call. We have plenty of existing ideas in this area, such as HTTP or even something lower level. Most of us manage to spend our entire careers without ever learning how bytes travel through the underwater cables. Marvelous stuff.\u003c/p\u003e\n\u003cp\u003eNow, the problem, of course, is that our program can’t continue until that network call is over. If we can’t know the person’s \u003ccode\u003ename\u003c/code\u003e without talking to another computer, we need to “pause” the execution of our code before the \u003ccode\u003ealert\u003c/code\u003e call.\u003c/p\u003e\n\u003cp\u003eSuppose you were the first person ever to encounter this problem.\u003c/p\u003e\n\u003cp\u003eOne idea you might have is to invent a \u003ccode\u003ecallNetwork\u003c/code\u003e API that takes a function:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ecallNetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://another-computer/?fn=prompt\u0026amp;args=Who+are+you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce the response arrives, your \u003ccode\u003ecallNetwork\u003c/code\u003e API would call the passed function with the \u003ccode\u003eresponse\u003c/code\u003e, at which point the rest of the code would run as usual.\u003c/p\u003e\n\u003cp\u003eThis is honestly not bad for a first idea. But it’s not great either:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eThe network call has tangled up our code.\u003c/strong\u003e Previously, the code executed in a top-down order, but now it has a twist. Conceptually \u003ccode\u003ealert(\u0026#39;Hello\u0026#39; + name)\u003c/code\u003e is the “next thing that happens” in the recipe we’re trying to convey. However, we’ve had to put it \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003ecallNetwork\u003c/code\u003e call so that the computer knows to “wait” for it.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWe’ve severed the connection between two pieces of code.\u003c/strong\u003e Normally, when you want to call a function, you just \u003cem\u003ecall\u003c/em\u003e it. Assuming it’s in the same file. If it’s in another file, you \u003ccode\u003eexport\u003c/code\u003e it there and then you \u003ccode\u003eimport\u003c/code\u003e it here. But in this case we’re no longer dealing with a function call—we’re dealing with an HTTP call. It may be hard to see after dealing with REST APIs for decades, but we’ve actually lost something of the essence during this conversion. For starters, it doesn’t get typechecked! That endpoint might not exist. You can’t command-click into that call and see where the function is defined and what it does. There was a direct and visceral connection between the function being called and the place calling it, but there no longer is—not because you \u003cem\u003ewanted\u003c/em\u003e to introduce some nice conceptual separation but because you don’t have any other \u003cem\u003emeans\u003c/em\u003e to keep that connnection.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe problem becomes easier to see if we imagine the \u003ccode\u003ealert\u003c/code\u003e function is \u003cem\u003ealso\u003c/em\u003e on some other computer (maybe on a different one). Now the code becomes:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ecallNetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://another-computer/?fn=prompt\u0026amp;args=Who+are+you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecallNetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://yet-another-computer/?fn=alert\u0026amp;args=Hello,+\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo how do you solve these two problems?\u003c/p\u003e\n\u003cp\u003eYou come up with two ideas.\u003c/p\u003e\n\u003cp\u003eTo solve the first problem (“tangling” of the code), you introduce a new concept called an \u003ccode\u003easync\u003c/code\u003e function. An \u003ccode\u003easync\u003c/code\u003e function is not guaranteed to execute in a single step—rather, it’s expected that it may “pause” execution (for example, due to network calls). Since it may pause, the \u003cem\u003ecalling\u003c/em\u003e code will need to “\u003ccode\u003eawait\u003c/code\u003e” the async function call to acknowledge that it won’t be surprised by that pause. This means the \u003cem\u003ecaller\u003c/em\u003e would pause too at some point, so it will \u003cem\u003ealso\u003c/em\u003e need to mark itself as \u003ccode\u003easync\u003c/code\u003e. So \u003ccode\u003easync\u003c/code\u003e and \u003ccode\u003eawait\u003c/code\u003e would propagate upwards through the calling chain so that nobody is surprised their code is “pausing”. At least that’s your idea.\u003c/p\u003e\n\u003cp\u003eThat’s not a bad idea at all—in fact, some variation of it is pretty much table stakes in new programming languages. You no longer have to \u003ca target=\"_blank\" href=\"https://tirania.org/blog/archive/2013/Aug-15.html\"\u003econvince people\u003c/a\u003e it’s good.\u003c/p\u003e\n\u003cp\u003eThis turns the code to:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ecallNetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://another-computer/fn=prompt\u0026amp;args=Who+are+you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecallNetwork\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://yet-another-computer/fn=alert\u0026amp;args=Hello,+\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow you’ve got your eyes on the second problem. What you’re trying to do is to call a function called \u003ccode\u003eprompt\u003c/code\u003e on one computer and a function called \u003ccode\u003ealert\u003c/code\u003e on another computer. Let’s say these functions are actually defined in your codebase.\u003c/p\u003e\n\u003cp\u003eWhat if you could literally \u003cem\u003eimport\u003c/em\u003e them from another computer?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e prompt \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eanother-computer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e alert \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eyet-another-computer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWait, but that doesn’t actually help the problem as stated above. For example, TypeScript won’t know what \u003ccode\u003e\u0026#39;another-computer\u0026#39;\u003c/code\u003e is. Instead, suppose you could import those functions from wherever they actually are in your codebase:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e prompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e alert \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut wait, that’s just a normal import. It would bring them into the program on \u003cem\u003ethis\u003c/em\u003e computer, whereas what you wanted was to have them be deployed on \u003cem\u003eanother\u003c/em\u003e computer. The fact that you want them to be called remotely via HTTP across the network boundary behind the scenes needs to be expressed somewhere in code.\u003c/p\u003e\n\u003cp\u003eLet’s invent a special syntax that would let you express that. We might revise this syntax later but for now we’re calling it \u003ccode\u003eimport rpc\u003c/code\u003e because what we’ve described here has been known for decades as \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Remote_procedure_call\"\u003eRPC\u003c/a\u003e, or a “remote procedure call”:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e rpc \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e prompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e alert \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eImagine that TypeScript would not only let you click into them now, but it would also be \u003cem\u003eaware\u003c/em\u003e that these functions are behind a remote boundary, so it would force them to be declared as \u003ccode\u003easync\u003c/code\u003e, and ensure that the types of their inputs and their output remain serializable (and thus can actually travel over the network).\u003c/p\u003e\n\u003cp\u003eOh well, \u003ccode\u003easync\u003c/code\u003e / \u003ccode\u003eawait\u003c/code\u003e and \u003ccode\u003eimport rpc\u003c/code\u003e, that’s enough invention for one day.\u003c/p\u003e\n\u003cp\u003eUnless?..\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"call-me-maybe\"\u003e\u003ca target=\"_self\" href=\"#call-me-maybe\"\u003eCall Me Maybe\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eA colleague comes to you with a problem. “That \u003ccode\u003easync\u003c/code\u003e / \u003ccode\u003eawait\u003c/code\u003e stuff and \u003ccode\u003eimport rpc\u003c/code\u003e was great, truly great. But it only works if the other computer actually \u003cem\u003etalks back.\u003c/em\u003e Imagine a computer that \u003cem\u003edoesn’t.\u003c/em\u003e How would you call a function there?”\u003c/p\u003e\n\u003cp\u003eThe question sounds nonsensical at first but you ponder it for a bit.\u003c/p\u003e\n\u003cp\u003eIf the other computer doesn’t talk back… Well, natually you can’t know \u003cem\u003ewhen\u003c/em\u003e it’s done, so pausing the execution with \u003ccode\u003eawait\u003c/code\u003e won’t work. So you can’t do this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat’s worse, if the computer where the function resides doesn’t talk back, you can’t get the \u003cem\u003eresult\u003c/em\u003e of any function call, so this would not be possible either:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou’re tempted to declare the case hopeless but you’re trying to think critically. Sure, you can’t pass the information \u003cem\u003eback\u003c/em\u003e… but you still can pass it \u003cem\u003eforward\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eFor example, this only passes the information forward:\u003c/p\u003e\n\n\u003cp\u003eEven if the other computer doesn’t talk back, here you’re just asking it to call the \u003ccode\u003ealert\u003c/code\u003e function with the \u003ccode\u003e\u0026#39;Hello\u0026#39;\u003c/code\u003e string. You’re not asking for anything back.\u003c/p\u003e\n\u003cp\u003eSo this call should be possible to make! Except… it wouldn’t quite work like a regular function call, so it seems wrong to use the same syntax as for a regular function call. Generally, one would expect that the code below executes after the function call is \u003cem\u003edone\u003c/em\u003e, but you can’t guarantee it here. In fact, you can’t be certain that the call will succeed at all—if it fails midway because of network, you’ll have no way to know that. Unlike with RPC, you won’t be notified of network errors.\u003c/p\u003e\n\u003cp\u003eThis isn’t a function call. It’s a… \u003cem\u003epotential\u003c/em\u003e function call. It’s a call that might, or might not happen in the future. You could say it’s a blueprint of a function call.\u003c/p\u003e\n\u003cp\u003eLet’s invent some made-up syntax for these “potential calls”:\u003c/p\u003e\n\n\u003cp\u003eWe might change that syntax later. But for now let’s think through the \u003cem\u003esemantics\u003c/em\u003e of this syntax, i.e. what we’d actually want it to do. In the design process, it’s wise to start from the limitations (“the other computer can’t talk back”) and see if they place any unavoidable constraints on the semantics of these “potential calls”.\u003c/p\u003e\n\u003cp\u003eClearly, these “potential calls” don’t interrupt execution and don’t affect the rest of the code. They’re not “waiting” for anything because there’s nothing to wait for:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// Can\u0026#39;t know if/when this succeeds or fails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Runs immediately\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis poses a question: what should these “potential calls” return?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ???\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClearly, \u003ccode\u003eprompt⧼\u0026#39;Who are you?\u0026#39;⧽\u003c/code\u003e can’t return the eventual actual return value of the \u003ccode\u003eprompt\u003c/code\u003e call since the other computer can’t talk back. We could decide that this syntax always returns \u003ccode\u003eundefined\u003c/code\u003e but that feels rather limiting. We’d have no way to coordinate the \u003ccode\u003eprompt\u003c/code\u003e “potential call” with the \u003ccode\u003ealert\u003c/code\u003e “potential call”!\u003c/p\u003e\n\u003cp\u003eWhat we want to achieve is something like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe problem is, the code above doesn’t make sense because we can’t get anything \u003cem\u003eout\u003c/em\u003e of the \u003ccode\u003eprompt\u003c/code\u003e “potential call”. So we can neither assign the \u003ccode\u003ename\u003c/code\u003e variable nor manipulate its return value with \u003ccode\u003e+\u003c/code\u003e on this computer. However, here’s an idea. What we \u003cem\u003ecould\u003c/em\u003e do is rewrite the two lines above \u003cem\u003esolely\u003c/em\u003e in terms of “potential calls”:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert⧼\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  concat⧼\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    prompt⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  ⧽\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Here and later, assume \u003ccode\u003econcat\u003c/code\u003e is a global function set to \u003ccode\u003e(a, b) =\u0026gt; a + b\u003c/code\u003e.)\u003c/p\u003e\n\u003cp\u003eThere are two benefits to reframing the code this way. First, it avoids the problem of declaring a nonsensical \u003ccode\u003ename\u003c/code\u003e variable that can’t possibly have any meaningful value (because we’re not on the other computer yet). Second, it lets us think of these nested “potential calls” as a single expression that is easy to encode as JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  fn: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  args: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe could then send that JSON to the other computer (which can’t talk back to us!), and it would interpret our instructions using a function like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Find a global function by its name\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Interpret any nested potential calls in the arguments\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Actually perform the call now\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// If it returned more potential calls, do them next\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can verify in the console that passing the above JSON object to \u003ccode\u003einterpret()\u003c/code\u003e does the equivalent of the original code. (Don’t forget to define a \u003ccode\u003econcat\u003c/code\u003e global!)\u003c/p\u003e\n\u003cp\u003eIn other words, this approach works!\u003c/p\u003e\n\u003cp\u003eLet’s take another look at this syntax:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert⧼\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  concat⧼\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    prompt⧼\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  ⧽\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e⧽\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe’ve now seen that any dependencies between the “potential calls”, such as between \u003ccode\u003eprompt\u003c/code\u003e and \u003ccode\u003ealert\u003c/code\u003e, should be expressed by embedding these “potential calls” inside each other. We can’t really put \u003cem\u003ecode\u003c/em\u003e in between them unless that code \u003cem\u003ealso\u003c/em\u003e resides on the other computer. On \u003cem\u003ethis\u003c/em\u003e computer, they’re more like… markup.\u003c/p\u003e\n\u003cp\u003eSince we don’t have any other ways to compose calls, we can expect nesting level to be deep. So it might be a good idea to make the syntax slightly easier to scan:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote something peculiar.\u003c/p\u003e\n\u003cp\u003eWith a regular function call, the return value is decided by the function you called:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut with a “potential” function call, the return value is \u003cem\u003ethe call itself as data:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003einner\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eouter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003einner\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;concat\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [\u0026#39;Hello\u0026#39;, { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eoutest\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003eouter\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     fn: \u0026#39;concat\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     args: [\u0026#39;Hello\u0026#39;, { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// }\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe calls are not yet made—we’re only building a \u003cem\u003eblueprint\u003c/em\u003e of those calls:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis blueprint of “potential calls” looks code, but it acts like data. It’s structurally similar to function calls but it is more passive, inert, open to interpretation. We’re yet to \u003cem\u003esend\u003c/em\u003e this blueprint to the other computer which will actually interpret it.\u003c/p\u003e\n\u003cp\u003eAnyway, writing “potential function calls” so many times is getting on my nerves.\u003c/p\u003e\n\u003cp\u003eLet’s just call them tags.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"splitting-a-function\"\u003e\u003ca target=\"_self\" href=\"#splitting-a-function\"\u003eSplitting a Function\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHere’s a function:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you run it, it will execute in a single shot. As functions generally do.\u003c/p\u003e\n\u003cp\u003eSuppose you wanted to split its execution in two parts. The first part runs immediately. The second part runs when the caller decides so.\u003c/p\u003e\n\u003cp\u003eHere’s an easy way to do that:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow you can run the function in two parts:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Run the first part\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e                  \u003c/span\u003e\u003cspan\u003e// Run the second part\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow suppose you want to run the second part on \u003cem\u003eanother computer\u003c/em\u003e. You’re still thinking of it as a single computation. It just happens to be physically distributed.\u003c/p\u003e\n\u003cp\u003e“Easy!” you say:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWait, what?\u003c/p\u003e\n\u003cp\u003eOkay, that’s clever, you’re returning \u003cem\u003ethe rest of the code\u003c/em\u003e from your function so that it can be transferred to another computer to finish the computation. But wait! That won’t work—from the other computer’s perspective, \u003ccode\u003ename\u003c/code\u003e is not defined:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// 🔴 ReferenceError: name is not defined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e“Not a problem,” you say:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAh, I see what you did there. So you embedded the value of the \u003ccode\u003ename\u003c/code\u003e that you got on the first computer \u003cem\u003edirectly into\u003c/em\u003e to the code that you sent to the other computer. From its perspective, the \u003ccode\u003ename\u003c/code\u003e will appear \u003cem\u003eprecomputed\u003c/em\u003e, as if it was always there:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, that function will have no idea that it’s a part of a bigger picture. From its perspective, the world \u003cem\u003estarts\u003c/em\u003e on the second computer. As this function gets more complex, it might start getting the idea that it’s the entire thing. And that’s okay.\u003c/p\u003e\n\u003cp\u003eBut you’ve \u003cem\u003eseen\u003c/em\u003e the entire thing:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s an interesting shape—a program returning the rest of itself in a form that can be transferred over the network to continue execution on another machine. You might call this a \u003cem\u003eclosure over the network\u003c/em\u003e. Notice a few things about how it works:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThe data flows strictly in a one direction—from the first to the second computer.\u003c/strong\u003e The second part can see the values from the first part (as long as they can be turned into text). But the first part doesn’t know anything about the second part. The first part is writing the script; the second part will be performing it on stage.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThe first and the second parts are completely isolated.\u003c/strong\u003e Although they are a part of a single conceptual \u003cem\u003eprogram\u003c/em\u003e, they are separate \u003cem\u003eruntime environments\u003c/em\u003e. They can’t coordinate with each other at runtime because they’re separated by time and space. Their module systems are completely isolated from each other, they each have their own globals, and even may be running on different JavaScript engines.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThe boundaries between the parts are both firm and fluid at the same time.\u003c/strong\u003e They are firm because these truly \u003cem\u003eare\u003c/em\u003e two separate environments—nothing is shared between them except the stuff that’s being closed over. However, the boundaries are fluid because \u003cem\u003eyou\u003c/em\u003e can move stuff between the two worlds. You get to choose which lines run on which side, when you’d rather run more code on the second computer, and when you’d rather pass the already precomputed data to it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat last point deserves some elaboration. Suppose you’re writing a \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Fizz_buzz\"\u003eFizzBuzz\u003c/a\u003e and want to display alerts for numbers from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e, alerting \u003ccode\u003e\u0026#39;Fizz\u0026#39;\u003c/code\u003e if the number divides by 3, \u003ccode\u003e\u0026#39;Buzz\u0026#39;\u003c/code\u003e if it divides by 5, and \u003ccode\u003e\u0026#39;FizzBuzz\u0026#39;\u003c/code\u003e if it divides by both:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efizzBuzz\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003en\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow many?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e i \u003c/span\u003e\u003cspan\u003e\u0026lt;=\u003c/span\u003e\u003cspan\u003e n\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e i\u003c/span\u003e\u003cspan\u003e++)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e i \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFizzBuzz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBuzz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow imagine this is a program for \u003cem\u003etwo\u003c/em\u003e computers. You could split it in different ways. For example, you could choose to do all the work on the second computer:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efizzBuzz\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    const n = Number(prompt(\u0026#39;How many?\u0026#39;));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    for (let i = 1; i \u0026lt;= n; i++) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      if (i % 3 === 0 \u0026amp;\u0026amp; i % 5 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;FizzBuzz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else if (i % 3 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;Fizz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else if (i % 5 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;Buzz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(i);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut maybe you want to run \u003ccode\u003eprompt\u003c/code\u003e on the first computer. You could move the \u003ccode\u003eprompt\u003c/code\u003e call into the earlier part, and then pass \u003ccode\u003en\u003c/code\u003e as \u003cem\u003edata\u003c/em\u003e to the second part:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efizzBuzz\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003en\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow many?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const n = \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003en\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    for (let i = 1; i \u0026lt;= n; i++) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      if (i % 3 === 0 \u0026amp;\u0026amp; i % 5 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;FizzBuzz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else if (i % 3 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;Fizz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else if (i % 5 === 0) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(\u0026#39;Buzz\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      } else {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        alert(i);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFrom the second computer’s perspective, \u003ccode\u003en\u003c/code\u003e will appear hardcoded.\u003c/p\u003e\n\u003cp\u003eIn fact, you could precompute every message on the first computer:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efizzBuzz\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003en\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow many?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e i \u003c/span\u003e\u003cspan\u003e\u0026lt;=\u003c/span\u003e\u003cspan\u003e n\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e i\u003c/span\u003e\u003cspan\u003e++)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e i \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFizzBuzz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei \u003c/span\u003e\u003cspan\u003e%\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBuzz\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    const messages = \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    messages.forEach(alert);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen, from the second computer’s perspective, there would be no computation left to do other than iterating over the messages. For example, if I pick \u003ccode\u003e16\u003c/code\u003e as my \u003ccode\u003en\u003c/code\u003e, from the second computer’s perspective, the entire program looks like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBuzz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e7\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBuzz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e11\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eFizz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e14\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eFizzBuzz\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe downside of precomputing \u003ccode\u003emessages\u003c/code\u003e is that the size of the data to send grows as \u003ccode\u003en\u003c/code\u003e grows. Since the FizzBuzz algorithm is trivial, it’s wiser to transfer the \u003ccode\u003en\u003c/code\u003e itself and let the second computer run the FizzBuzz itself. The important part is that you get to \u003cem\u003echoose\u003c/em\u003e the tradeoff between passing data and running code.\u003c/p\u003e\n\u003cp\u003eNow let’s get back to the original example.\u003c/p\u003e\n\u003cp\u003eWe’ve made the conceptual point that by splitting a program between two computers, we gain the flexibility to move the computation around. However, in practice, you probably don’t want to write half of your code inside of a string:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eInstead, it would be nice to write \u003ccode\u003eresume\u003c/code\u003e in another file and just \u003cem\u003eimport\u003c/em\u003e it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExcept wait, \u003ccode\u003eresume\u003c/code\u003e can’t be a regular import—\u003cem\u003eyou want this function’s code to be sent to another computer!\u003c/em\u003e So you don’t really want to \u003cem\u003eimport\u003c/em\u003e the function itself or run any of its code on this computer now; rather, you want to \u003cem\u003erefer\u003c/em\u003e to that function. This might remind you of RPC, for which you invented \u003ccode\u003eimport rpc\u003c/code\u003e. Let’s invent another similar annotation to mark a function to be sent to another computer:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhy \u003ccode\u003eimport tag\u003c/code\u003e? This function is on a computer that doesn’t “talk back” so you won’t be able to call it. At most you can do a “potential call”—in other words, a tag!\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e name={\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e} /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(We’ll revisit the \u003ccode\u003eimport rpc\u003c/code\u003e and \u003ccode\u003eimport tag\u003c/code\u003e syntax and revise it later on.)\u003c/p\u003e\n\u003cp\u003ePrograms split this way are often called client-server applications.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Client \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./stuff\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eServer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprecomputeData\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClient\u003c/span\u003e\u003cspan\u003e data={\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e} /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s tempting to see the client and the server as two separate programs that communicate with each other. But now you know that it’s a single function that closes over the network by sending the rest of itself forward in time and space.\u003c/p\u003e\n\u003cp\u003eGood luck unseeing \u003cem\u003ethat\u003c/em\u003e.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"tags-on-both-sides\"\u003e\u003ca target=\"_self\" href=\"#tags-on-both-sides\"\u003eTags on Both Sides\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eA few sections ago, you invented tags:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs a reminder, tags are very similar to function calls, but they don’t actually \u003cem\u003ecall\u003c/em\u003e anything—they just reflect the structure of a call. Because of that, they’re a perfect way to represent a computation that you \u003cem\u003ewant\u003c/em\u003e to happen—but maybe not right now, or even not right here. Tags represent a plan, a \u003cem\u003eblueprint\u003c/em\u003e of a computation:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy themselves, tags don’t do anything. Some code needs to actually \u003cem\u003einterpret\u003c/em\u003e what they’re saying. Here’s one way we’ve seen that works for the above example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-h73wkn?file=%2Fsrc%2Findex.mjs\"\u003eRun the code\u003c/a\u003e to see that \u003ccode\u003einterpret(greeting())\u003c/code\u003e produces the expected result.\u003c/p\u003e\n\u003cp\u003eHowever, the thing about interpretations is that they’re subjective. There’s more than one possible interpretation of something. That’s kind of the whole point of interpretations, really. They allow that sort of flexibility.\u003c/p\u003e\n\u003cp\u003eIn the earlier example, the \u003ccode\u003einterpret\u003c/code\u003e function was looking for the functions \u003cem\u003eimplementing\u003c/em\u003e each tag directly in the global \u003ccode\u003ewindow\u003c/code\u003e scope. So it was able to find \u003ccode\u003ewindow.alert\u003c/code\u003e and \u003ccode\u003ewindow.prompt\u003c/code\u003e and such there. We’re now going to make a slightly different version of \u003ccode\u003einterpret\u003c/code\u003e. This version will take an explicit \u003ccode\u003eknownTags\u003c/code\u003e dictionary with these functions. Unknown tags shall be skipped.\u003c/p\u003e\n\u003cp\u003eBehold:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, if you pass empty \u003ccode\u003eknownTags\u003c/code\u003e to \u003ccode\u003einterpret\u003c/code\u003e, you’ll get the original call tree:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     fn: \u0026#39;concat\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     args: [\u0026#39;Hello, \u0026#39;, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       fn: \u0026#39;prompt\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       args: [\u0026#39;Who are you?\u0026#39;]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// };\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eHowever,\u003c/em\u003e \u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-2cx44l?file=%2Fsrc%2Findex.mjs\"\u003enotice what happens\u003c/a\u003e if you pass \u003ccode\u003e{ prompt: window.prompt }\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow it will ask your name first (\u003ccode\u003eprompt\u003c/code\u003e \u003cem\u003edoes\u003c/em\u003e run) and then produce this tree:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     fn: \u0026#39;concat\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     args: [\u0026#39;Hello, \u0026#39;, \u0026#39;Dan\u0026#39; /* (or whatever you typed) */]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// };\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou still get a call tree back, but this time \u003ccode\u003eprompt\u003c/code\u003e has “dissolved” from it!\u003c/p\u003e\n\u003cp\u003eAs an experiment, let’s “dissolve” both \u003ccode\u003eprompt\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003econcat\u003c/code\u003e (but not \u003ccode\u003ealert\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis time, the \u003ccode\u003eprompt\u003c/code\u003e will run like before, but the message prepared for the \u003ccode\u003ealert\u003c/code\u003e call will already be concatenated—no \u003ccode\u003econcat\u003c/code\u003e in sight:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [\u0026#39;Hello, Dan\u0026#39;]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// };\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn other words, we’ve \u003cem\u003eprecomputed\u003c/em\u003e everything except the \u003ccode\u003ealert\u003c/code\u003e call itself.\u003c/p\u003e\n\u003cp\u003eLet’s also try “dissolving” both \u003ccode\u003ealert\u003c/code\u003e, \u003ccode\u003eprompt\u003c/code\u003e, and \u003ccode\u003econcat\u003c/code\u003e together, like before:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// undefined\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis time, all steps will run so there’ll be nothing left to do.\u003c/p\u003e\n\u003cp\u003eBecause a blueprint of tags is \u003cem\u003etimeless\u003c/em\u003e—it doesn’t prescribe a particular ordering of the operations; only their structure—we’ve gained the freedom to manipulate that ordering. For example, we can now \u003cem\u003esplit\u003c/em\u003e a single computation into several steps:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003estep1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     fn: \u0026#39;concat\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     args: [\u0026#39;Hello, \u0026#39;, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       fn: \u0026#39;prompt\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       args: [\u0026#39;Who are you?\u0026#39;]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// };\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003estep2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estep1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   fn: \u0026#39;alert\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   args: [\u0026#39;Hello, Dan\u0026#39;]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// };\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estep2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// undefined\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-wfvxhp?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis might give you an idea.\u003c/p\u003e\n\u003cp\u003eWhat if you ran \u003ccode\u003estep1\u003c/code\u003e and \u003ccode\u003estep2\u003c/code\u003e on different computers? In other words, what if you interpreted, or “dissolved”, \u003cem\u003esome\u003c/em\u003e tags earlier on the first computer, and then sent the rest to be interpreted, or “dissolved”, later on the second computer? This might turn out handy if some tags are \u003cem\u003enaturally better suited\u003c/em\u003e to be intepreted on either of the two sides—for example, if these machines have different capabilities.\u003c/p\u003e\n\u003cp\u003eThink of the water state transitions: first, ice melts into water at the top of the mountain. Then the river flows down. Finally, the water evaporates. So it could be with tags. Some tags could melt early on the first computer. The remaining tags could flow over the network to another computer—and meet their fate there.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"the-two-computers\"\u003e\u003ca target=\"_self\" href=\"#the-two-computers\"\u003eThe Two Computers\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYour theory is elusive and sometimes you think it’s nonsense but its broad shape is beginning to emerge. If you were asked to summarize it so far, you’d say this:\u003c/p\u003e\n\u003cp\u003eSome programs are distributed computations across multiple machines. In particular, some programs can be represented as functions spanning across \u003cem\u003etwo\u003c/em\u003e machines (although in principle there could be more). Some of those functions will have a particular shape—the first machine does some of the calculation, and then “hands off” the rest of the calculation to the second machine by sending the remaining code to it. Those are the functions that your theory is so focused on.\u003c/p\u003e\n\u003cp\u003eLet’s give names to the environments of the two machines. Your programs begin in the \u003cem\u003eEarly\u003c/em\u003e world—the first machine. Some of the work is going to happen there. Then the remaining work is passed off to the \u003cem\u003eLate\u003c/em\u003e world—the second machine.\u003c/p\u003e\n\u003cp\u003eThe Early and the Late worlds are two completely isolated runtime environments separated by time and space, so they don’t share any state or global variables. The Early world can \u003cem\u003eleave some residual information\u003c/em\u003e for the Late world—in particular, the remaining code to run and the data that it needs to run—but nothing more.\u003c/p\u003e\n\u003cp\u003eThe Early and the Late worlds don’t directly \u003ccode\u003eimport\u003c/code\u003e the code from each other because that would just bring that code \u003cem\u003einto\u003c/em\u003e the importing world. What they \u003cem\u003edo\u003c/em\u003e, however, is \u003cem\u003erefer\u003c/em\u003e to each other’s code. Both \u003ccode\u003eimport tag\u003c/code\u003e and \u003ccode\u003eimport rpc\u003c/code\u003e are examples of \u003cem\u003ereferring\u003c/em\u003e to code on another computer (in a typesafe way!) and doing something useful with it without actually loading it into the importing world.\u003c/p\u003e\n\u003cp\u003eBecause of their firm separation, a function in the Early world can’t \u003cem\u003ecall\u003c/em\u003e a function in the Late world. After all, function calls are meant to pass the information \u003cem\u003eback\u003c/em\u003e to the caller, but that’s not possible if the caller has long kicked the bucket.\u003c/p\u003e\n\u003cp\u003eHowever, passing information \u003cem\u003eforward\u003c/em\u003e from the Early to the Late world still makes sense. To allow it, you’ve invented a weaker notion than a function call—a \u003cem\u003etag\u003c/em\u003e. A tag is like a function call but passive, inert, open to interpretation. It is a \u003cem\u003epotential\u003c/em\u003e function call waiting to be materialized. A tag is a function call \u003cem\u003eas\u003c/em\u003e data, ready to be executed now \u003cem\u003eor\u003c/em\u003e at a better point in time, or maybe not at all. A tag is a proto-call.\u003c/p\u003e\n\u003cp\u003eYou stand triumphantly, seeing the disparate threads of your theory starting to come together for the first time. Suddenly, the boss music starts playing.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDid somebody say Time?\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"time-strikes-back\"\u003e\u003ca target=\"_self\" href=\"#time-strikes-back\"\u003eTime Strikes Back\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYour first boss is Time itself. To beat Time, you’ll have to demonstrate that your so-called \u003cem\u003etimeless\u003c/em\u003e blueprints are actually timeless—and that shifting the order of their calculation will not accidentally ruin your program. You better be right!\u003c/p\u003e\n\u003cp\u003eHere is your \u003ccode\u003egreeting\u003c/code\u003e function from before:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI’ll beef it up a little bit to make the boss fight more interesting (and more scary).\u003c/p\u003e\n\u003cp\u003eI suspect that you’ll want to combine \u003ccode\u003ealert\u003c/code\u003e with \u003ccode\u003econcat\u003c/code\u003e awfully often so I’ll extract them into a separate function. I’m going to call it \u003ccode\u003ep\u003c/code\u003e, for “paragraph”.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the \u003ccode\u003egreeting\u003c/code\u003e function can just return the \u003ccode\u003ep\u003c/code\u003e tag:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI’ll also add a new \u003ccode\u003eclock\u003c/code\u003e function that returns the time at which it ran:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, I’ll add an \u003ccode\u003eapp\u003c/code\u003e function that combines a \u003ccode\u003egreeting\u003c/code\u003e with a \u003ccode\u003eclock\u003c/code\u003e in \u003ccode\u003ep\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eclock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow would be a great time to support arrays in \u003ccode\u003einterpret\u003c/code\u003e—luckily, that’s easy:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlright, let’s see if \u003ccode\u003einterpret\u003c/code\u003e is up to the task.\u003c/p\u003e\n\u003cp\u003eFirst, let’s try to interpret all tags together:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  p\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e p\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  greeting\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e greeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  clock\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [undefined, undefined]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-slfzsc?file=%2Fsrc%2Findex.mjs\"\u003eRunning this code\u003c/a\u003e produces the expected result:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThere is a \u003ccode\u003eprompt\u003c/code\u003e asking for my name\u003c/li\u003e\n\u003cli\u003eThere is an alert saying \u003ccode\u003eHello, Dan\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThere is another alert saying \u003ccode\u003eThe time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo far so good!\u003c/p\u003e\n\u003cp\u003eNow, the claim you’re defending is that, because these are just blueprints—tags that are not turned into calls yet—you are free to dissolve those tags in any order.\u003c/p\u003e\n\u003cp\u003eLet’s put that to the test.\u003c/p\u003e\n\u003cp\u003eFirst, let’s dissolve just \u003cem\u003ehalf\u003c/em\u003e of the tags (\u003ccode\u003ep\u003c/code\u003e, \u003ccode\u003egreeting\u003c/code\u003e, and \u003ccode\u003eclock\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003estep2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// alert: window.alert,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// concat: (a, b) =\u0026gt; a + b,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// prompt: window.prompt,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e p\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e greeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eclock\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   { fn: \u0026#39;alert\u0026#39;, args: [{ fn: \u0026#39;concat\u0026#39;, args: [\u0026#39;Hello\u0026#39;, { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }] }] },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   { fn: \u0026#39;alert\u0026#39;, args: [{ fn: \u0026#39;concat\u0026#39;, args: [\u0026#39;The time is \u0026#39;, \u0026#39;Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u0026#39;] }] }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eSnap.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAs expected, this went quietly—no prompts or alert yet… Now you can take the intermediate result and dissolve the rest of the tags (\u003ccode\u003ealert\u003c/code\u003e, \u003ccode\u003econcat\u003c/code\u003e, \u003ccode\u003eprompt\u003c/code\u003e):\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estep2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// p: p,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// greeting: greeting,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// clock: clock,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [undefined, undefined]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-vvhg65?file=%2Fsrc%2Findex.mjs\"\u003eThis works\u003c/a\u003e as expected too:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThere is a \u003ccode\u003eprompt\u003c/code\u003e asking for my name\u003c/li\u003e\n\u003cli\u003eThere is an alert saying \u003ccode\u003eHello, Dan\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThere is another alert saying \u003ccode\u003eThe time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCongratulations!\u003c/p\u003e\n\u003cp\u003eYou’ve proven that a calculation made out of tags (rather than function calls) can be split into steps and calculated in an arbitrary order—thus defeating Time itself.\u003c/p\u003e\n\u003cp\u003eUnless?..\u003c/p\u003e\n\u003cp\u003eWhy don’t you try dissolving all tags together \u003cem\u003eexcept\u003c/em\u003e for \u003ccode\u003econcat\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// concat: (a, b) =\u0026gt; a + b,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  p\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e p\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  greeting\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e greeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  clock\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSurely, in a \u003cem\u003etimeless blueprint\u003c/em\u003e, it won’t cause any harm to run \u003ccode\u003econcat\u003c/code\u003e later?\u003c/p\u003e\n\u003cp\u003eYou \u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-zyxyyz?file=%2Fsrc%2Findex.mjs\"\u003erun the code\u003c/a\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThere is a \u003ccode\u003eprompt\u003c/code\u003e asking for my name\u003c/li\u003e\n\u003cli\u003eThere is an alert saying \u003ccode\u003e[object Object]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThere is another alert saying \u003ccode\u003e[object Object]\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cem\u003eYOU DIED.\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"a-fatal-flaw\"\u003e\u003ca target=\"_self\" href=\"#a-fatal-flaw\"\u003eA Fatal Flaw\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhat just happened?\u003c/p\u003e\n\u003cp\u003eTurns out, your theory has a flaw. Even if you describe your program with tags rather than function calls, time is actually important! For some functions, anyway.\u003c/p\u003e\n\u003cp\u003eConsider this example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen two tags are nested, in which order should they be intepreted? Should \u003ccode\u003e\u0026lt;prompt\u0026gt;\u003c/code\u003e be interpreted first, and the result of that be passed to the \u003ccode\u003econcat\u003c/code\u003e function? Or should the \u003ccode\u003econcat\u003c/code\u003e function receive \u003ccode\u003e\u0026lt;prompt\u0026gt;\u003c/code\u003e \u003cem\u003eitself as a tag\u003c/em\u003e?\u003c/p\u003e\n\u003cp\u003eWe can start by considering the behavior of regular function calls:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// This would run first\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn case you’re not sure, when you call a function in JavaScript, its arguments are calculated \u003cem\u003efirst\u003c/em\u003e—and after those values are known, the function gets called:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// a is \u0026#39;Hello, \u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// b is \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur \u003ccode\u003einterpret\u003c/code\u003e function dealing with tags applies them in the same order. When it encounters a tag like \u003ccode\u003e\u0026lt;concat\u0026gt;\u003c/code\u003e, it \u003cem\u003efirst\u003c/em\u003e runs \u003ccode\u003einterpret\u003c/code\u003e on its arguments in case there are nested calls like that \u003ccode\u003e\u0026lt;prompt\u0026gt;\u003c/code\u003e. Only \u003cem\u003ethen\u003c/em\u003e it would call \u003ccode\u003econcat()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs a result, this code:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eis currently equivalent to this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// This would run first\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, there’s something off about that.\u003c/p\u003e\n\u003cp\u003eWeren’t our tags supposed to be \u003cem\u003etimeless blueprints\u003c/em\u003e, untethered from the pesky constraints of the tedious arguments-must-go-first JavaScript evaluation order? What good are these “tags” if in the end they behave exactly like function calls?\u003c/p\u003e\n\u003cp\u003eOkay, but how \u003cem\u003eelse\u003c/em\u003e could this work?\u003c/p\u003e\n\u003cp\u003eWell, what if this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewas instead equivalent to this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// This would run first\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eImagine that tags were evaluated \u003cem\u003eoutside-in\u003c/em\u003e rather than \u003cem\u003einside-out\u003c/em\u003e. So, when you have \u003ccode\u003e\u0026lt;concat\u0026gt;\u003c/code\u003e with \u003ccode\u003e\u0026lt;prompt /\u0026gt;\u003c/code\u003e inside, you wouldn’t actually see the \u003ccode\u003eprompt\u003c/code\u003e call first. Instead, you’d step into \u003ccode\u003econcat\u003c/code\u003e with \u003ccode\u003e\u0026lt;prompt /\u0026gt;\u003c/code\u003e still being \u003cem\u003ea tag\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// a is \u0026#39;Hello, \u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// b is { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, that would utterly break \u003ccode\u003econcat\u003c/code\u003e since it can only concatenate \u003cem\u003estrings\u003c/em\u003e, not some arbitrary computations like \u003ccode\u003e\u0026lt;prompt /\u0026gt;\u003c/code\u003e which haven’t even run yet.\u003c/p\u003e\n\u003cp\u003eThis problem is not unique to \u003ccode\u003econcat\u003c/code\u003e. For example, the \u003ccode\u003ealert\u003c/code\u003e function also expects a \u003cem\u003estring\u003c/em\u003e. It wouldn’t know how to handle an object representing a tag:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr rather, it would \u003cem\u003ehandle\u003c/em\u003e it—by coercing it to a string like \u003ccode\u003e\u0026#34;[object Object]\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis explains what happened during the boss fight!\u003c/p\u003e\n\u003cp\u003eAlthough our \u003ccode\u003einterpret\u003c/code\u003e function would normally handle the arguments first, we specifically \u003cem\u003edelayed\u003c/em\u003e interpreting the \u003ccode\u003e\u0026lt;concat\u0026gt;\u003c/code\u003e tag to demonstrate that the ordering doesn’t matter. However, it \u003cem\u003edoes\u003c/em\u003e matter—both the \u003ccode\u003econcat\u003c/code\u003e and the \u003ccode\u003ealert\u003c/code\u003e functions \u003cem\u003eneed\u003c/em\u003e their arguments to be regular strings rather than tags.\u003c/p\u003e\n\u003cp\u003eIt seems like your timeless blueprints aren’t so timeless after all. Functions \u003cem\u003eneed\u003c/em\u003e their arguments to be computed first. That’s where the time was hiding.\u003c/p\u003e\n\u003cp\u003eYour theory has a fatal flaw.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"a-new-hope\"\u003e\u003ca target=\"_self\" href=\"#a-new-hope\"\u003eA New Hope\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYour theory has a fatal flaw. There are three things you can do with that.\u003c/p\u003e\n\u003cp\u003eYou could pretend that it doesn’t exist. But that won’t fix your theory.\u003c/p\u003e\n\u003cp\u003eYou could give up on your theory. But you were \u003cem\u003eonto\u003c/em\u003e something, weren’t you?\u003c/p\u003e\n\u003cp\u003eFinally, you could let that flaw \u003cem\u003eguide\u003c/em\u003e you. Like a well-chosen failed experiment, it tells you something very important. You’ve made a mistake, but where \u003cem\u003eexactly?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThere’s a good way to find out.\u003c/p\u003e\n\u003cp\u003eCurrently, we’re always eagerly interpreting nested tags before calling the parent tag’s function to ensure that the tag functions get called in the \u003cem\u003einside-out\u003c/em\u003e order:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat if instead we just passed the raw arguments (even if they include tags)?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, this would completely break each of our previous examples. Remember, \u003ccode\u003ealert()\u003c/code\u003e can’t handle an object argument like \u003ccode\u003e\u0026lt;concat\u0026gt;\u003c/code\u003e—and \u003ccode\u003econcat()\u003c/code\u003e itself \u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-rnvdg2?file=%2Fsrc%2Findex.mjs\"\u003ecan’t handle\u003c/a\u003e an object argument like \u003ccode\u003e\u0026lt;prompt\u0026gt;\u003c/code\u003e. It wants two strings, not tags:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etags\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etags\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// \u0026#39;Hello, [object Object]\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut fully embracing the “flaw” might also shine some light on what \u003cem\u003edoes\u003c/em\u003e work.\u003c/p\u003e\n\u003cp\u003eFor example, replacing \u003ccode\u003e\u0026lt;concat\u0026gt;\u003c/code\u003e with \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e \u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-part1-forked-kw9cxj?file=%2Fsrc%2Findex.mjs\"\u003eno longer leads\u003c/a\u003e to a broken output:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etags\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etags\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  p\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e p\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// { fn: \u0026#39;alert\u0026#39;, args: [{ fn: \u0026#39;concat\u0026#39;, args: [\u0026#39;Hello, \u0026#39;, \u0026#39;Dan\u0026#39;] }] }\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis might seem insignificant (we still need to run \u003ccode\u003econcat\u003c/code\u003e later). But actually this is very important! Something is fundamentally different between functions \u003ccode\u003econcat\u003c/code\u003e and \u003ccode\u003ep\u003c/code\u003e. The \u003cem\u003eoutside-in\u003c/em\u003e call order breaks \u003ccode\u003econcat\u003c/code\u003e, but it doesn’t break \u003ccode\u003ep\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhy is that \u003cem\u003eexactly\u003c/em\u003e?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"embedding-and-introspecting\"\u003e\u003ca target=\"_self\" href=\"#embedding-and-introspecting\"\u003eEmbedding and Introspecting\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eConsider these two functions:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epair\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow are they different?\u003c/p\u003e\n\u003cp\u003eObviously, they’re different in purpose. One of them concatenates strings. The other one creates an array with the two provided elements. But there’s also a more subtle difference between how they behave with respect to their arguments.\u003c/p\u003e\n\u003cp\u003eTo explain it, I’ll use an analogy.\u003c/p\u003e\n\u003cp\u003eSuppose your job is to tie pieces of a rope together. That’s not terribly difficult. You take the two pieces and tie them together, job done. Now suppose that one day someone hands you a rope and… a pumpkin. Suddenly, you can’t do your job. You need to take the two pieces of rope by their ends, but a pumpkin has no end.\u003c/p\u003e\n\u003cp\u003eNow, you might conclude from this that arbitrarily replacing things with pumpkins leads to disasters, and indeed sometimes it does. But not always.\u003c/p\u003e\n\u003cp\u003eSuppose that you have a new job wrapping up presents in a toy shop. You’d spend your day wrapping up various presents, be it a doll, or a car, or an entire toy house. Then one day someone hands you a pumpkin. Although you might refuse the request out of principle, \u003cem\u003etechnically\u003c/em\u003e you could wrap up a pumpkin just fine. When you wrap things up, you don’t rely on their properties (like the rope-iness of a rope). You merely put them in a box. You’re \u003cem\u003eembedding\u003c/em\u003e, not \u003cem\u003eintrospecting\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe difference between \u003ccode\u003econcat\u003c/code\u003e and \u003ccode\u003epair\u003c/code\u003e above is that \u003ccode\u003econcat\u003c/code\u003e \u003cem\u003ecares\u003c/em\u003e about what’s being passed to it. It \u003cem\u003eintrospects\u003c/em\u003e. It wouldn’t work if you pass a pumpkin. But \u003ccode\u003epair\u003c/code\u003e would happily accept ropes, toys, or pumpkins. It \u003cem\u003eembeds\u003c/em\u003e, so it doesn’t care.\u003c/p\u003e\n\u003cp\u003eLet’s see how this connects to the order of execution.\u003c/p\u003e\n\u003cp\u003eSince \u003ccode\u003econcat\u003c/code\u003e \u003cem\u003eintrospects\u003c/em\u003e arguments \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e (concretely, \u003ccode\u003e+\u003c/code\u003e turns them to strings), \u003ccode\u003econcat\u003c/code\u003e breaks if you pass an uninterpreted tag as an argument:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// \u0026#39;Hello, [object Object]\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOn the other hand, \u003ccode\u003epair\u003c/code\u003e \u003cem\u003eembeds\u003c/em\u003e its arguments \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e. It produces a new \u003ccode\u003e[a, b]\u003c/code\u003e array—and that works correctly no matter what you pass as \u003ccode\u003ea\u003c/code\u003e or \u003ccode\u003eb\u003c/code\u003e. So it’s happy to accept a tag as one of the arguments. It just embeds that tag in its output:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etodo\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epair\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u0026#39;Hello, \u0026#39;, { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis lets you interpret that tag sometime \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003epair\u003c/code\u003e call:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etodo\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u0026#39;Hello, \u0026#39;, \u0026#39;Dan\u0026#39;]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s summarize.\u003c/p\u003e\n\u003cp\u003eGenerally, functions want to have their arguments computed before the call. However, if a function only \u003cem\u003eembeds\u003c/em\u003e an argument in its output without \u003cem\u003eintrospecting\u003c/em\u003e it, you can delay computing it. You can call that function with that argument still uncomputed (a tag), and compute that tag later when it’s necessary or convenient.\u003c/p\u003e\n\u003cp\u003eYou may have found a way to beat Time after all.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"thinking-and-doing\"\u003e\u003ca target=\"_self\" href=\"#thinking-and-doing\"\u003eThinking and Doing\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYour program is still the same:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eclock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut your \u003ccode\u003einterpret\u003c/code\u003e function is simpler—it interprets tags \u003cem\u003eoutside-in\u003c/em\u003e. It doesn’t try to interpret the arguments before the call; rather, it \u003cem\u003epasses tags to other tags\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTime smirks at you.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e“This isn’t going to work, is it? Functions need to know their arguments.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e”\u003cem\u003eSome\u003c/em\u003e of them do.”\u003c/p\u003e\n\u003cp\u003eYou look over all the functions in your program to see whether they \u003cem\u003eintrospect\u003c/em\u003e the stuff you’re nesting inside their tags or merely \u003cem\u003eembed\u003c/em\u003e it without introspection:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClearly, \u003ccode\u003ealert\u003c/code\u003e and \u003ccode\u003econcat\u003c/code\u003e introspect the stuff you put inside their tags.\u003c/li\u003e\n\u003cli\u003eSome functions (\u003ccode\u003eapp\u003c/code\u003e, \u003ccode\u003eclock\u003c/code\u003e, and \u003ccode\u003egreeting\u003c/code\u003e) take no arguments at all.\u003c/li\u003e\n\u003cli\u003eAlthough you \u003cem\u003edo\u003c/em\u003e pass stuff into \u003ccode\u003ep\u003c/code\u003e, it merely embeds whatever you nest in it.\u003c/li\u003e\n\u003cli\u003eThe case of \u003ccode\u003eprompt\u003c/code\u003e is ambiguous. Technically, it does introspect the \u003ccode\u003emessage\u003c/code\u003e argument (because it passes \u003ccode\u003emessage\u003c/code\u003e to the built-in \u003ccode\u003ewindow.prompt\u003c/code\u003e). However, so far, we haven’t had a temptation to nest any other tags inside \u003ccode\u003e\u0026lt;prompt\u0026gt;\u003c/code\u003e. So if we promise not to do that (e.g. by restricting the type somehow), it doesn’t matter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo keeps things straight, you’ll introduce a new convention.\u003c/p\u003e\n\u003cp\u003eFunctions that won’t break when passed tags as arguments, i.e. functions that \u003cem\u003eembed\u003c/em\u003e rather than \u003cem\u003eintrospect\u003c/em\u003e them, will now start their names with capital letters:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s give these capital letter functions a special name: Components. Components are the “brains” of our program—they figure out what needs to be done. Because they don’t introspect the stuff you nest inside of them, they can run in any order, in any number of steps, together or separately. In other words, Components \u003cem\u003eare\u003c/em\u003e truly timeless. They are untethered from the future because they \u003cem\u003ereturn\u003c/em\u003e tags, and they are untethered from the past because they \u003cem\u003eaccept\u003c/em\u003e tags as arguments.\u003c/p\u003e\n\u003cp\u003eWhat about the rest of the functions, like \u003ccode\u003ealert\u003c/code\u003e, \u003ccode\u003eprompt\u003c/code\u003e, and \u003ccode\u003econcat\u003c/code\u003e? Let’s call them Primitives. Primitives can be used as tags too, but they don’t merely embed stuff—they introspect it. They \u003cem\u003emust\u003c/em\u003e know all their arguments. Primitives are the “muscles” of our program—they actually \u003cem\u003edo stuff\u003c/em\u003e after most of the thinking has already been done by Components. Primitives run last: \u003cem\u003e“think before you do”\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThis distinction lets you naturally slice the program in two phases.\u003c/p\u003e\n\u003cp\u003eFirst, you need to \u003cem\u003ethink\u003c/em\u003e—that is, to run the Components. Your existing \u003ccode\u003einterpret\u003c/code\u003e function can take care of that:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eP\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   { fn: \u0026#39;alert\u0026#39;, args: [{ fn: \u0026#39;concat\u0026#39;, args: [\u0026#39;Hello\u0026#39;, { fn: \u0026#39;prompt\u0026#39;, args: [\u0026#39;Who are you?\u0026#39;] }] }] },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   { fn: \u0026#39;alert\u0026#39;, args: [{ fn: \u0026#39;concat\u0026#39;, args: [\u0026#39;The time is: \u0026#39;, \u0026#39;Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u0026#39;] }] }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter \u003cem\u003ethinking\u003c/em\u003e, you need to \u003cem\u003edo\u003c/em\u003e. The result of the “thinking” phase contains only the Primitives. Let’s create a new \u003ccode\u003eperform\u003c/code\u003e function that’ll look a lot like \u003ccode\u003einterpret\u003c/code\u003e, but it will handle Primitives instead of Components. Since Primitives introspect stuff and need to \u003cem\u003eknow\u003c/em\u003e their arguments, \u003ccode\u003eperform\u003c/code\u003e ensures they run inside-out:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice \u003ccode\u003eperform\u003c/code\u003e doesn’t include any code for skipping unknown tags—it assumes \u003ccode\u003eknownTags\u003c/code\u003e contains \u003cem\u003eall\u003c/em\u003e Primitives it may encounter. This is because \u003ccode\u003eperform\u003c/code\u003e is intended as \u003cem\u003ethe\u003c/em\u003e final step and does not let you split the computation any further.\u003c/p\u003e\n\u003cp\u003eNow you can use \u003ccode\u003eperform\u003c/code\u003e to finish the computation:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  concat\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  prompt\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// undefined\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis displays the prompt and the two expected alerts.\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-6f6jz7?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSo, did you beat Time?\u003c/p\u003e\n\u003cp\u003eSort of.\u003c/p\u003e\n\u003cp\u003ePreviously, \u003ccode\u003einterpret\u003c/code\u003e was fragile because skipping \u003cem\u003esome\u003c/em\u003e tags (like \u003ccode\u003econcat\u003c/code\u003e) broke the ordering that was implicitly assumed by some other tags (like \u003ccode\u003ealert\u003c/code\u003e). But this can no longer happen. Now \u003ccode\u003einterpret\u003c/code\u003e \u003cem\u003eonly\u003c/em\u003e deals with Components, and they don’t mind being run in any order (since they \u003cem\u003eembed\u003c/em\u003e rather than \u003cem\u003eintrospect\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003ePrimitives, on the other hand, are now being handled by \u003ccode\u003eperform\u003c/code\u003e, which always finishes the work in a single step. So the problem can’t come up there either.\u003c/p\u003e\n\u003cp\u003eIf you ever extend your program to span two computers, it’s Components (rather than Primitives) that would be split between them. That is because Components don’t mind being run in a different order. Primitives, on the other hand, would have to run together at the very end—which puts them firmly into the Late world.\u003c/p\u003e\n\u003cp\u003eIf you have some control over the computers running the Late worlds, there is an interesting optimization you could make. You could \u003cem\u003epreinstall\u003c/em\u003e the Primitives that you expect to be shared by all programs alongside the JavaScript runtime. Of course, such a collection of Primitives would have to be carefully curated so that it serves a broadest possible set of use cases. But you can already see some good candidates! For example, your \u003ccode\u003eP\u003c/code\u003e function might make more sense as a Primitive:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003econcat\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eArguably, a “paragraph” is something many programs might want to display!\u003c/p\u003e\n\u003cp\u003eIf you think bigger, you might come up with a whole suite of such Primitives—some graphical (like making something \u003ccode\u003e\u0026lt;b\u0026gt;bold\u0026lt;/b\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;i\u0026gt;italic\u0026lt;/i\u0026gt;\u003c/code\u003e) and some behavioral (like expanding \u003ccode\u003e\u0026lt;details\u0026gt;\u0026lt;/details\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;a /\u0026gt;\u003c/code\u003e link).\u003c/p\u003e\n\u003cp\u003eNow, if a lot of programs used the same Primitives, and everyone was building complex programs out of those, it might make sense to move their internal implementation out of JavaScript into some lower-level language like Rust or C++. Then they could be exposed to JavaScript via some higher-level APIs. Then \u003ccode\u003eperform\u003c/code\u003e could be rewritten to orchestrate the computation using such APIs:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e document\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateElement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echild\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003eflat\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBoolean\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echild\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e node\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e json \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateTextNode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou could even design a declarative language \u003cem\u003ejust\u003c/em\u003e for the purpose of describing trees of such Primitives. It could be designed to be more forgiving than our current setup, since for some use cases it might be nice to write it by hand.\u003c/p\u003e\n\u003cp\u003eBut enough talking about the Primitives. Going forward, we will assume that \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003ea fair number of them\u003c/a\u003e exist, that they’re written as lowercase tags (such as \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e), and that there exists a \u003ccode\u003eperform\u003c/code\u003e function that knows what to do with them.\u003c/p\u003e\n\u003cp\u003eTime steps aside.\u003c/p\u003e\n\u003cp\u003eYou have learned to wield the power of Time—\u003cem\u003eand\u003c/em\u003e to respect its laws. Now, should you wish to continue your studies, it is time for you to learn the lessons of Space.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"act-2\"\u003e\u003ca target=\"_self\" href=\"#act-2\"\u003eAct 2\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"the-reader-and-the-writer\"\u003e\u003ca target=\"_self\" href=\"#the-reader-and-the-writer\"\u003eThe Reader and the Writer\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e That was a long article!\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e You betcha.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e And we’re still just halfway in?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e I guess.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e What do you mean you \u003cem\u003eguess\u003c/em\u003e? Don’t you know where you’re going?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e I have a rough idea, but truthfully, I’m pretty much winging it.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e Well, that’s not very responsible. I’ve invested a lot of time into reading this. What if it doesn’t build up to something satisfying? What if you drop the ball?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e That’s been one of my worries, yes. But there’s no way for me to know that until \u003cem\u003eI\u003c/em\u003e finish writing. On your side, I guess you’ll just have to keep on reading.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e Well, okay, yes, I guess I’ll just have to do that.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e Thank you for your understanding.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e It’s not like I have a choice anyway.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e Why not? You know you can just close the tab and go about your day.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e You know full well that I cannot do that.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e And why is that exactly?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e Well, \u003cem\u003eI’m\u003c/em\u003e just one of your characters. \u003cem\u003eYou’re\u003c/em\u003e the one making me say things. I don’t exactly have much, what do you call it… \u003cem\u003ethe wiggle room\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e Ah. Right. \u003cem\u003eThe wiggle room.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer briefly looks at the audience. It’s hard to read his expression.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e …\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e …\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e You don’t have many more lines prepared for me, do you?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e My bad. I think that’s about all I could manage.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e …\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e …\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e Why is this dialog even here? Does it add anything to the story?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e I don’t know. \u003cem\u003eYou\u003c/em\u003e tell me.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Reader:\u003c/em\u003e I thought \u003cem\u003eyou’re\u003c/em\u003e the one doing the writing.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Writer:\u003c/em\u003e Sure, but aren’t \u003cem\u003eyou\u003c/em\u003e the one doing the reading?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"code-and-data\"\u003e\u003ca target=\"_self\" href=\"#code-and-data\"\u003eCode and Data\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn the first half of this post, we’ve learned how to split a computation in time.\u003c/p\u003e\n\u003cp\u003eIt turned out that some parts of the computation—the Primitives that are actively \u003cem\u003edoing\u003c/em\u003e stuff—don’t like to be split apart and would like to execute together. Other parts of the computation—the Components that are \u003cem\u003ethinking\u003c/em\u003e about stuff—can be executed at different times, in a different order, and maybe even in different \u003cem\u003eplaces\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWe will now set aside Components and Primitives for a moment.\u003c/p\u003e\n\u003cp\u003eLet us investigate the difference between splitting a function \u003cem\u003ein time\u003c/em\u003e and \u003cem\u003ein space\u003c/em\u003e. We’ve seen earlier that to split a function across time, it’s enough to add nesting:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis lets you run it in steps rather than all at once.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Run the first step\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e                  \u003c/span\u003e\u003cspan\u003e// Run the second step\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003egreeting\u003c/code\u003e is a function—but that’s not the whole picture. It is crucial that this function is nested \u003cem\u003einside\u003c/em\u003e \u003ccode\u003egreeting\u003c/code\u003e, for otherwise it would not be able to read the \u003ccode\u003ename\u003c/code\u003e variable. In other words, \u003ccode\u003egreeting\u003c/code\u003e returns both a piece of code (the \u003ccode\u003ealert\u003c/code\u003e call) \u003cem\u003eand\u003c/em\u003e a piece of data (the \u003ccode\u003ename\u003c/code\u003e variable) needed by it.\u003c/p\u003e\n\u003cp\u003eThis becomes more apparent if you extract \u003ccode\u003eresume\u003c/code\u003e into a top-level function. Now it would have to take \u003ccode\u003ename\u003c/code\u003e as an explicit argument:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow would we adjust the \u003ccode\u003egreeting\u003c/code\u003e to accommodate that? We could make it return a nested function that would provide \u003ccode\u003ename\u003c/code\u003e to \u003ccode\u003eresume\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Run the first step\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e                  \u003c/span\u003e\u003cspan\u003e// Run the second step\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut we could also go a bit further. Conceptually, \u003ccode\u003e() =\u0026gt; resume(name)\u003c/code\u003e combines two pieces of information: \u003cem\u003ecode\u003c/em\u003e (\u003ccode\u003eresume\u003c/code\u003e) and \u003cem\u003edata\u003c/em\u003e (\u003ccode\u003ename\u003c/code\u003e). We could make this relationship explicit by returning \u003ccode\u003e[resume, name]\u003c/code\u003e—code \u003cem\u003epaired\u003c/em\u003e with data:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Run the first step\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e                      \u003c/span\u003e\u003cspan\u003e// Run the second step\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, this looks remarkably similar to the object notation that we currently use for \u003cem\u003etags\u003c/em\u003e, except that the \u003ccode\u003efn\u003c/code\u003e function is an \u003cem\u003eactual function\u003c/em\u003e rather than a string:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e resume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst { \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Run the first step\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e(...\u003c/span\u003e\u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e                     \u003c/span\u003e\u003cspan\u003e// Run the second step\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s almost like \u003ccode\u003egreeting\u003c/code\u003e is returning a \u003cem\u003etag\u003c/em\u003e rather than a function call. It expresses \u003cem\u003ethe code it wants to run next\u003c/em\u003e but it doesn’t actually \u003cem\u003edo\u003c/em\u003e that yet.\u003c/p\u003e\n\u003cp\u003eThis gives us a new perspective for what tags really are. Yes, a tag is a potential function call. But another way to see it is that \u003cem\u003ea tag is a pairing of code and data.\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"time-and-space\"\u003e\u003ca target=\"_self\" href=\"#time-and-space\"\u003eTime and Space\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNow let us recall how to split a computation across space. We’ve previously discovered one possible pattern for doing so—returning a piece of code as a string:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen you could call \u003ccode\u003egreeting()\u003c/code\u003e, save the \u003ccode\u003ecode\u003c/code\u003e it returns, and run it \u003cem\u003eas code\u003c/em\u003e on another computer. The second computer will think \u003cem\u003ethis\u003c/em\u003e is the entire program:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut \u003cem\u003eyou\u003c/em\u003e know that the real program includes both pieces.\u003c/p\u003e\n\u003cp\u003eCurrently, \u003ccode\u003egreeting\u003c/code\u003e returns a string of code. However, it would be perfectly appropriate to think of it as returning both code \u003cem\u003eand\u003c/em\u003e data. We just happen to be interpolating the data (the \u003ccode\u003ename\u003c/code\u003e variable) directly into that string of code.\u003c/p\u003e\n\u003cp\u003eThis becomes more apparent if we move the \u003ccode\u003eresume\u003c/code\u003e code outside of \u003ccode\u003egreeting\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  function resume(name) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e data\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow that \u003ccode\u003eresume\u003c/code\u003e takes \u003ccode\u003ename\u003c/code\u003e as an argument, the \u003ccode\u003egreeting\u003c/code\u003e needs to return \u003cem\u003eboth\u003c/em\u003e the code of the \u003ccode\u003eresume\u003c/code\u003e function \u003cem\u003eand\u003c/em\u003e the data it needs (\u003ccode\u003ename\u003c/code\u003e). Then we could take \u003ccode\u003e[code, data]\u003c/code\u003e, turn it to JSON with \u003ccode\u003eJSON.stringify\u003c/code\u003e, then \u003ccode\u003eJSON.parse\u003c/code\u003e it on another computer, and finally call \u003ccode\u003ecode(data)\u003c/code\u003e to finish the program.\u003c/p\u003e\n\u003cp\u003eOf course, when we write our program, we don’t really want to think about the code of \u003ccode\u003eresume\u003c/code\u003e as a \u003cem\u003estring\u003c/em\u003e. We want to think of it as a normal piece of code which is written at the top level, has syntax highlighting, can be typechecked, and so on:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut how do we \u003cem\u003econnect\u003c/em\u003e this piece of code to the \u003ccode\u003egreeting\u003c/code\u003e function?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s like these functions exist in two different \u003cem\u003eworlds\u003c/em\u003e—one existing “outside” of the string of code that’s about to be sent, and the other one existing “inside” of it. It’s like \u003ccode\u003egreeting\u003c/code\u003e is writing a story, and \u003ccode\u003eresume\u003c/code\u003e is someone \u003cem\u003einside\u003c/em\u003e of that story.\u003c/p\u003e\n\u003cp\u003eThere is a clear logical continuity between them, but they’re separated by a gap much wider than defined being in different files. When the \u003ccode\u003egreeting\u003c/code\u003e function runs, \u003ccode\u003eresume\u003c/code\u003e is merely a string—more like a plan or an idea than an actual function. On the other hand, when \u003ccode\u003eresume\u003c/code\u003e finally runs, it has no knowledge of \u003ccode\u003egreeting\u003c/code\u003e having ever existed—all it receives is the \u003ccode\u003ename\u003c/code\u003e passed down to it.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you squint at it, you can still make out the “true” shape of the program:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut this “split” way of looking at it is fairer to both worlds. It doesn’t prioritize one over the other. Both of them \u003cem\u003eare\u003c/em\u003e our program, they’re just split by time and space:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe question is, how do we tie them together?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"the-two-worlds\"\u003e\u003ca target=\"_self\" href=\"#the-two-worlds\"\u003eThe Two Worlds\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe simplest way to tie the two worlds together would be by giving each function in the Late world a unique name that lets us refer to it from the Early world.\u003c/p\u003e\n\u003cp\u003eFor example, we could assume we’ll only ever need one function called \u003ccode\u003eresume\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlthough this is a bit clunky, it \u003cem\u003edoes\u003c/em\u003e create an explicit (if fragile) connection. If we ever go about renaming \u003ccode\u003eresume\u003c/code\u003e in the Late world, we might remember to search the codebase for any other code might be referring to it, and we might find the \u003ccode\u003egreeting\u003c/code\u003e in the Early world. We could even add types for \u003ccode\u003ewindow[\u0026#39;resume\u0026#39;]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis solution isn’t \u003cem\u003ethat\u003c/em\u003e bad. In fact, it’s similar to what’s happening under the hood when \u003cem\u003eyou\u003c/em\u003e refer to any of the Primitives built into the browser. You’re not directly importing them from anywhere; you just use a global name like \u003ccode\u003ep\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateElement\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eswitch\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ecase\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn that sense, the browser internals are their own sort of a “Late” world. A large part of them is written in a different language than JavaScript and not directly exposed to your program. Much of the logic associated with a primitive like \u003ccode\u003ep\u003c/code\u003e—including applying styles, laying out text, drawing, compositing, painting, and so on—will run at some point \u003cem\u003eafter\u003c/em\u003e your \u003ccode\u003edocument.createElement(\u0026#39;p\u0026#39;)\u003c/code\u003e call. In that sense, \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e really is a \u003cem\u003etag\u003c/em\u003e—a call that still requires some future “carrying out”.\u003c/p\u003e\n\u003cp\u003eBut let’s not get distracted. Browser Primitives can afford to have global names because there’s a limited list of them, you need to be able to look them up, and they are always the same between the projects. On the other hand, if you define functions yourself, you probably want more explicit connections between them.\u003c/p\u003e\n\u003cp\u003eLet us come back to the pieces you want to connect:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn obvious first step would be to mark the \u003ccode\u003eresume\u003c/code\u003e function for \u003ccode\u003eexport\u003c/code\u003e. You want the code in your other files to be able to refer to it. It’s not an implementation detail that can be freely removed. You don’t want it to appear like dead code!\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow that you \u003ccode\u003eexport\u003c/code\u003eed it, the next logical step would be to \u003ccode\u003eimport\u003c/code\u003e it here:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExcept wait.\u003c/p\u003e\n\u003cp\u003eThis doesn’t help you!\u003c/p\u003e\n\u003cp\u003eWhat you want to obtain is \u003ccode\u003eRESUME_CODE\u003c/code\u003e, which is this thing from earlier:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eRESUME_CODE\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  function resume(name) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what you \u003cem\u003egot\u003c/em\u003e by importing \u003ccode\u003eresume\u003c/code\u003e is this other thing:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eYou’ve lost the backticks!\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"mind-the-gap\"\u003e\u003ca target=\"_self\" href=\"#mind-the-gap\"\u003eMind the Gap\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet us thoroughly convince ourselves that using an \u003ccode\u003eimport\u003c/code\u003e would not work.\u003c/p\u003e\n\u003cp\u003eUltimately, what we’re trying to do is to \u003cem\u003emodularize\u003c/em\u003e this pattern:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo do that, we’ve split the \u003ccode\u003egreeting\u003c/code\u003e and the \u003ccode\u003eresume\u003c/code\u003e functions in two different worlds—but as a result, we’ve lost the syntactic connection between them.\u003c/p\u003e\n\u003cp\u003eSuppose that we try to bridge “the gap” between the worlds with an \u003ccode\u003eimport\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUnfortunately, unless we change something about how \u003ccode\u003eimport\u003c/code\u003e works, this would essentially just “bring” the \u003ccode\u003eresume\u003c/code\u003e function \u003cem\u003eitself\u003c/em\u003e into the \u003ccode\u003egreeting\u003c/code\u003e’s world:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn other words, the overall shape of the program would look kind of like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut the overall shape that we \u003cem\u003eneed\u003c/em\u003e looks kind of like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    alert(\u0026#39;Hello, \u0026#39; + \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s all about the backticks!\u003c/p\u003e\n\u003cp\u003eWhen we \u003ccode\u003eimport\u003c/code\u003e something, we bring that code into the importing world. But what we \u003cem\u003ewant\u003c/em\u003e here is to merely \u003cem\u003erefer\u003c/em\u003e to that code without executing any of it. We wanted \u003ccode\u003egreeting\u003c/code\u003e to return a \u003cem\u003estory\u003c/em\u003e about a pumpkin—not an actual pumpkin.\u003c/p\u003e\n\u003cp\u003eThe problem with \u003ccode\u003eimport\u003c/code\u003e becomes more apparent if you imagine that \u003ccode\u003eresume\u003c/code\u003e \u003cem\u003eitself\u003c/em\u003e imports some third-party library—for example, to display a toast:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e showToast \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003etoast-library\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith a plain \u003ccode\u003eimport\u003c/code\u003e, our entire program would have a shape equivalent to this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// From toast-library\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einitializeToastLibrary\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003einitializeToastLibrary\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, the shape that we \u003cem\u003ewant\u003c/em\u003e is closer to something like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    // From toast-library\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    function initializeToastLibrary() { /* ... */ }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    function showToast(message) { /* ... */ }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    initializeToastLibrary();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      showToast(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  `\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe boundaries between the worlds are firm, as they \u003cem\u003eshould\u003c/em\u003e be. We want each world to behave consistently within itself—at least for any already existing code.\u003c/p\u003e\n\u003cp\u003eTo ensure that, imports from the Early world \u003cem\u003eshould\u003c/em\u003e become a part of the Early world. Imports from the Late world \u003cem\u003eshould\u003c/em\u003e become a part of the Late world. On its own, each world should behave like its own isolated program—no funny stuff.\u003c/p\u003e\n\u003cp\u003eWe don’t want to break that consistency.\u003c/p\u003e\n\u003cp\u003eAll we need is a \u003cem\u003edoor\u003c/em\u003e.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"a-door\"\u003e\u003ca target=\"_self\" href=\"#a-door\"\u003eA Door\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe need a way to say: “I want to refer to this thing in another file, but I don’t actually want to execute or even load any of its code. Just give me something that will let me programmatically find the code for that thing later.” Luckily, all of this is completely made up, so we can just make up some made-up syntax for that.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eTada!\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e showToast \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003etoast-library\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat, \u003cem\u003ejust like that\u003c/em\u003e?\u003c/p\u003e\n\u003cp\u003eSure, why not.\u003c/p\u003e\n\u003cp\u003eOkay, but what does this syntax \u003cem\u003edo\u003c/em\u003e?\u003c/p\u003e\n\u003cp\u003eWell, for starters, let’s imagine that it just returns the source code of the function. That would let us send that code to the other computer, as we originally intended:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;function resume(name) { showToast(\u0026#34;Hello, \u0026#34; + name); }\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, this actually isn’t terribly useful—notice that \u003ccode\u003eshowToast\u003c/code\u003e is nowhere to be found. We don’t really want the source code of \u003cem\u003ethe \u003ccode\u003eresume\u003c/code\u003e function alone\u003c/em\u003e, we want \u003cem\u003ewhatever’s necessary for another computer to be able to load and run \u003ccode\u003eresume\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eHere’s a second idea.\u003c/p\u003e\n\u003cp\u003eWhy don’t we have it return some kind of identifier that’s uniquely designed for addressing code. For example, it could combine the filename and the export name:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;/src/stuff/resume.js#resume\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, this means that the format would have to be somewhat aware of \u003cem\u003ehow\u003c/em\u003e the other computer loads and executes code. For example, if the other computer runs a Node.js process, it could \u003ccode\u003eimport()\u003c/code\u003e that file from the filesystem—provided that it’ll be deployed to the other computer. If the other computer runs a web browser, it could \u003ccode\u003eimport()\u003c/code\u003e that file over HTTP from a server that would have to serve it.\u003c/p\u003e\n\u003cp\u003eIn the case of a web browser, it might not be very efficient to import remote files one by one and to rely on the browser’s module system to download each of their dependencies. Instead, it might make sense to use an automated \u003cem\u003ebundler\u003c/em\u003e (which would combine such code into chunks) and to use a bundler-specific identifier:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;chunk123#module456#resume\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the simplest possible case, if \u003cem\u003eall\u003c/em\u003e of the code destined for the Late world were ultimately assembled into a giant single file that gets sent to the other computer over the wire, this identifier could just be the referenced function’s global name:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;window.resume\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   \u0026#39;Dan\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat matters is that we now have a syntax for some code from the Early world to \u003cem\u003erefer\u003c/em\u003e to some code from the Late world. It is a \u003cem\u003edoor\u003c/em\u003e between the two environments.\u003c/p\u003e\n\u003cp\u003eIt lets us achieve something like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    import { showToast } from \u0026#39;toast-library\u0026#39;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      showToast(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  `\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eby writing something like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e resume \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./resume\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e showToast \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003etoast-library\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eresume\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt lets us write a single program spanning two programming environments.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"spring-cleaning\"\u003e\u003ca target=\"_self\" href=\"#spring-cleaning\"\u003eSpring Cleaning\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe’ve found a \u003cem\u003edoor\u003c/em\u003e between the two worlds—the Early and the Late worlds. This door, \u003ccode\u003eimport tag\u003c/code\u003e, will let us split the computation across both time \u003cem\u003eand\u003c/em\u003e space.\u003c/p\u003e\n\u003cp\u003eBefore we can use this door though, we need to clean up our house. We’re going to make some tweaks to our tag syntax to make it nicer for writing Components. (If you’re familiar with React, you’ll recognize them as bringing us closer to JSX.)\u003c/p\u003e\n\u003cp\u003eConsider this example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo far, we’ve assumed this syntax produces an object tree like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e fn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e args\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat’s all jolly well but it doesn’t leave us a way to pass named attributes like \u003ccode\u003e\u0026lt;p className=\u0026#34;text-purple-500\u0026#34;\u0026gt;\u003c/code\u003e. We’re going to tweak the convention so that instead of positional \u003ccode\u003eargs\u003c/code\u003e, both the Components and the Primitives will receive a single object with \u003cem\u003enamed\u003c/em\u003e arguments. We’ll call this object \u003ccode\u003eprops\u003c/code\u003e for “properties”. The nested tags will move to a prop called \u003ccode\u003echildren\u003c/code\u003e inside of that object.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            className\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003etext-purple-500\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI’ve taken the liberty of renaming \u003ccode\u003efn\u003c/code\u003e to \u003ccode\u003etype\u003c/code\u003e. Now that the Primitives like \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e are handled behind the scenes by \u003ccode\u003edocument.createElement(\u0026#39;p\u0026#39;)\u003c/code\u003e (whatever that is) rather than our own function \u003ccode\u003ep()\u003c/code\u003e, it’s misleading to call \u003ccode\u003ep\u003c/code\u003e a “function”.\u003c/p\u003e\n\u003cp\u003eWe’ll need to adjust \u003ccode\u003einterpret\u003c/code\u003e to deal with the changes. If you don’t remember what it looked like, don’t worry—it’s been a while. Here’s the important part:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earg\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eknownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echildren \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e knownTags\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe’ll also tweak \u003ccode\u003eperform\u003c/code\u003e, with some new logic to apply props like \u003ccode\u003eclassName\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e document\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateElement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003epropKey\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epropValue\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eObject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eentries\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epropKey \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epropValue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echild\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003eflat\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBoolean\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echild\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        node\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003epropKey\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e propValue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e node\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e json \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateTextNode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow \u003ccode\u003e\u0026lt;p className=\u0026#34;text-purple-500\u0026#34;\u0026gt;\u003c/code\u003e will work!\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-sg7dnt?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"more-spring-cleaning\"\u003e\u003ca target=\"_self\" href=\"#more-spring-cleaning\"\u003eMore Spring Cleaning\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe’re at a good point to make another quality-of-life change.\u003c/p\u003e\n\u003cp\u003eRecall that right now, to convert a tree of Components to a tree of Primitives, you have to pass all known Components as a dictionary to the \u003ccode\u003einterpret\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-sg7dnt?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis, however, feels pretty silly. When we write \u003ccode\u003e\u0026lt;Greeting /\u0026gt;\u003c/code\u003e, the \u003ccode\u003eGreeting\u003c/code\u003e function is already in scope. And even if it weren’t, we’d \u003cem\u003ewant\u003c/em\u003e to import it into scope to make the connection explicit. So if the \u003ccode\u003eGreeting\u003c/code\u003e function is already in scope, why can’t the \u003ccode\u003e\u0026lt;Greeting /\u0026gt;\u003c/code\u003e syntax “remember” which \u003ccode\u003eGreeting\u003c/code\u003e it was?\u003c/p\u003e\n\u003cp\u003eWe can fix this by adopting a new convention. If the tag is lowercase, like \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, we’ll leave its \u003ccode\u003etype\u003c/code\u003e be a string like \u003ccode\u003e\u0026#39;div\u0026#39;\u003c/code\u003e in the object representation of the tag. But if the tag starts with a capital letter, like \u003ccode\u003e\u0026lt;Greeting /\u0026gt;\u003c/code\u003e, we’ll change its \u003ccode\u003etype\u003c/code\u003e to be \u003cem\u003ethe \u003ccode\u003eGreeting\u003c/code\u003e function itself\u003c/em\u003e rather than a \u003ccode\u003e\u0026#39;Greeting\u0026#39;\u003c/code\u003e string:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Primitive (string)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Greeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Component (function)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Primitive (string)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e              \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e              \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Component (function)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eConveniently, we’ve already been starting Component names with capital letters to differentiate them from the Primitives, so we don’t need to rename anything.\u003c/p\u003e\n\u003cp\u003eThis lets us simplify the \u003ccode\u003einterpret\u003c/code\u003e function. Instead of carrying a dictionary of \u003ccode\u003eknownTags\u003c/code\u003e around, it will simply check \u003ccode\u003etypeof json.type\u003c/code\u003e. If \u003ccode\u003ejson.type\u003c/code\u003e is a function, \u003cem\u003ethat function itself\u003c/em\u003e is the Component. Otherwise, it must be a Primitive:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echildren \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we can just call \u003ccode\u003einterpret\u003c/code\u003e without passing any extra information to it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   type: \u0026#39;div\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   props: {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     children: [{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       type: \u0026#39;p\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       props: {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//         children: [\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//           \u0026#39;Hello, \u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//           { type: \u0026#39;input\u0026#39;, props: { placeholder: \u0026#39;Who are you?\u0026#39; } }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//         ]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     }, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       type: \u0026#39;p\u0026#39;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       props: {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//         children: [\u0026#39;The time is \u0026#39;, \u0026#39;Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u0026#39;]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//       }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//     }]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e//   }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// }\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003einterpret\u003c/code\u003e function would “dissolve” all of our Components outside-in, leaving behind only the Primitives. Then the \u003ccode\u003eperform\u003c/code\u003e function would “dissolve” all of the Primitives inside-out, creating the end result—a browser DOM tree:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// [HTMLDivElement]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-n5gvxs?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe boss music starts playing.\u003c/p\u003e\n\u003cp\u003eMeet \u003cem\u003eSpace.\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"early-and-late-components\"\u003e\u003ca target=\"_self\" href=\"#early-and-late-components\"\u003eEarly and Late Components\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHere is your entire Component tree:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-n5gvxs?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo beat Space, you must split this computation between two different computers.\u003c/p\u003e\n\u003cp\u003eIn particular, \u003ccode\u003eApp\u003c/code\u003e and \u003ccode\u003eGreeting\u003c/code\u003e should run on the first machine, but the \u003ccode\u003eClock\u003c/code\u003e Component should run on the second machine. These two computations should be seamlessly combined and turned into a browser DOM tree on the second computer. You should not modify any code within the Component functions.\u003c/p\u003e\n\u003cp\u003eLet’s figure it out step by step.\u003c/p\u003e\n\u003cp\u003eThe first thing you’ll want to do is move \u003ccode\u003eClock\u003c/code\u003e into a different file and \u003ccode\u003eexport\u003c/code\u003e it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can now import it from the main file:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Clock \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExcept wait, this doesn’t split the code between the two computers. You’re going to need to \u003cem\u003eopen a door\u003c/em\u003e for that by changing \u003ccode\u003eimport\u003c/code\u003e to \u003ccode\u003eimport tag\u003c/code\u003e. You open the door from the Early world, immediately \u003cem\u003emanifesting the Late world into existence:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Clock \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThe time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you inspect the tags that the \u003ccode\u003eApp\u003c/code\u003e Component returns, you’ll notice that the \u003ccode\u003e\u0026lt;Clock /\u0026gt;\u003c/code\u003e tag has turned into something peculiar:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Primitive (a string)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Greeting\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Component (a function)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/src/Clock.js#Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// What is this?\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy our latest convention, tags starting with a capital letter would use the corresponding value in scope for the \u003ccode\u003etype\u003c/code\u003e—for example, \u003ccode\u003e\u0026lt;Greeting /\u0026gt;\u003c/code\u003e turns into \u003ccode\u003e{ type: Greeting, props: {} }\u003c/code\u003e where \u003ccode\u003eGreeting\u003c/code\u003e is a function.\u003c/p\u003e\n\u003cp\u003eThe same is true for \u003ccode\u003e\u0026lt;Clock /\u0026gt;\u003c/code\u003e. The \u003ccode\u003eClock\u003c/code\u003e starts with a capital letter so we get \u003ccode\u003e{ type: Clock, props: {} }\u003c/code\u003e. However, \u003ccode\u003eClock\u003c/code\u003e is not a regular \u003ccode\u003eimport\u003c/code\u003e but \u003ccode\u003eimport tag\u003c/code\u003e, which we previously defined to mean a different thing from a regular \u003ccode\u003eimport\u003c/code\u003e. Instead of giving us the \u003ccode\u003eClock\u003c/code\u003e \u003cem\u003efunction\u003c/em\u003e, it gives us a kind of a \u003cem\u003ereference\u003c/em\u003e—an identifier that would later let us load the \u003ccode\u003eClock\u003c/code\u003e source code from another computer. That’s what this \u003ccode\u003e\u0026#39;/src/Clock.js#Clock\u0026#39;\u003c/code\u003e string is.\u003c/p\u003e\n\u003cp\u003eThis is a good time to introduce some terminology:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEarly Components\u003c/strong\u003e are Components that execute in the Early world. In this example, \u003ccode\u003eApp\u003c/code\u003e and \u003ccode\u003eGreeting\u003c/code\u003e are Early Components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLate Components\u003c/strong\u003e are Components sent to finish the job in the Late world. In this example, \u003ccode\u003eClock\u003c/code\u003e will be the only Late Component.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou’ll want to dissolve the Early Components first. That will give you the code for the Late world and the data for that code. You’ll construct the Late world \u003cem\u003efrom\u003c/em\u003e that code, and dissolve the Late Components there. \u003cem\u003eThat\u003c/em\u003e will give you the Primitives.\u003c/p\u003e\n\u003cp\u003eSounds like a plan.\u003c/p\u003e\n\u003cp\u003eLet us run \u003ccode\u003einterpret(\u0026lt;App /\u0026gt;)\u003c/code\u003e in the Early world and inspect the result. Notice how all the Early Components (\u003ccode\u003eApp\u003c/code\u003e and \u003ccode\u003eGreeting\u003c/code\u003e) dissolved from the output:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e placeholder\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/src/Clock.js#Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAll that is left are Primitives (\u003ccode\u003e\u0026#39;div\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;p\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;input\u0026#39;\u003c/code\u003e) and… Late Components (here, only \u003ccode\u003e\u0026#39;/src/Clock.js#Clock\u0026#39;\u003c/code\u003e). We didn’t have to do anything special for Late Components—since they’re not functions, \u003ccode\u003einterpret\u003c/code\u003e does not attempt to execute them and leaves them in place, similar to how it does with the Primitives:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echildren \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince the result of \u003ccode\u003einterpret\u003c/code\u003e does not contain any functions, it can be easily turned into a string that can then be sent over the network:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eintepret\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLater, on another computer, you can turn this string back into an object. You might be tempted to immediately pass it to \u003ccode\u003eperform\u003c/code\u003e to create the DOM tree:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, this would \u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-t2v9js?file=%2Fsrc%2Findex.mjs\"\u003egive you an error\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// 🔴 Failed to execute \u0026#39;createElement\u0026#39; on \u0026#39;Document\u0026#39;:\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// The tag name provided (\u0026#39;/src/Clock.js#Clock\u0026#39;) is not a valid name.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e document\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateElement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etagName\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e node\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRight—\u003ccode\u003eperform\u003c/code\u003e only deals with the Primitives, but \u003ccode\u003eClock\u003c/code\u003e is a Late Component. You’ve dissolved Early Components (\u003ccode\u003eApp\u003c/code\u003e, \u003ccode\u003eGreeting\u003c/code\u003e) in the Early world. Now you’re in the Late world, so it’s time to dissolve the Late Components (\u003ccode\u003eClock\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eYou’re trying to call \u003ccode\u003einterpret\u003c/code\u003e to dissolve the remaining Components:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut nothing happens. The \u003ccode\u003e\u0026#39;/src/Clock.js#Clock\u0026#39;\u003c/code\u003e tag is still there.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSpace smirks.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAh right, \u003ccode\u003einterpret\u003c/code\u003e would only attempt to execute \u003cem\u003efunctions:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eComponent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echildren \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eArray\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e json\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what you have is just a \u003cem\u003ereference\u003c/em\u003e, an address that tells you where to \u003cem\u003eget\u003c/em\u003e the \u003ccode\u003eClock\u003c/code\u003e function. You still need to actually load it on this computer.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSpace hands you this:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eloadReference\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateReference\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Pretend it was loaded over the network or from the bundler cache.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresolve \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresolve\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateReference \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/src/Clock.js#Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e Clock\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethrow\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eModule not found.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOkay, suppose you’re given a function that does this for you. Maybe it’s provided by the environment, or by the kind-hearted people working on bundlers. You can hand it \u003ccode\u003e\u0026#39;/src/Clock.js#Clock\u0026#39;\u003c/code\u003e, and it will asynchronously load the \u003ccode\u003eClock\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eloadReference\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/src/Clock.js#Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// function Clock(){}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis was the last piece necessary to complete the puzzle.\u003c/p\u003e\n\u003cp\u003eWhenever your \u003ccode\u003eJSON.parse\u003c/code\u003e function encounters something that looks like a reference, pass it to \u003ccode\u003eloadReference()\u003c/code\u003e and hang onto each such Promise:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ependingPromises\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ekey\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eincludes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// The `value.type` is a reference, but we want a function.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Start loading that function.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    const \u003c/span\u003e\u003cspan\u003epromise\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eloadReference\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// When the function loads, replace it directly in the parsed JSON.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      value\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Keep track of when that happens.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    pendingPromises\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epromise\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Wait for all references to load.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ependingPromises\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this manipulation, the \u003ccode\u003elateComponents\u003c/code\u003e object will look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello, \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e placeholder\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThe time is \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e            type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e Clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// The loaded function!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s just Late Components and Primitives—all references have been loaded.\u003c/p\u003e\n\u003cp\u003eNow you can finally pass it to \u003ccode\u003einterpret\u003c/code\u003e, executing the \u003ccode\u003eClock\u003c/code\u003e. That will give you a tree of Primitives which you can turn into the DOM with \u003ccode\u003eperform\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd with that, you’re done!\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-k9jl8g?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eLet’s take another look at the full picture and recap how it works.\u003c/p\u003e\n\u003cp\u003eIn the Early world, you dissolve all the Early Components with \u003ccode\u003einterpret\u003c/code\u003e. This gives you a string that represents how to finish the computation in the Late world:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eintepret\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the Late world, you parse that string, load the references, and then dissolve the Late Components with \u003ccode\u003einterpret\u003c/code\u003e. That leaves you with a tree of Primitives:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ependingPromises\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejsonString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ekey\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(typeof\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eincludes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    const \u003c/span\u003e\u003cspan\u003epromise\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eloadReference\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      value\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    pendingPromises\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epromise\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ependingPromises\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprimitives\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einterpret\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elateComponents\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, those Primitives are ready to be turned into DOM or some other format:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eappendChild\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-k9jl8g?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCongratulations!\u003c/p\u003e\n\u003cp\u003eYou’ve split a computation across both time and space.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"the-donut\"\u003e\u003ca target=\"_self\" href=\"#the-donut\"\u003eThe Donut\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSpace folds before you, finally recognizing you as an equal.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e“You’ve done well.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eBut it doesn’t get out of your way. Instead, Space continues folding, twisting itself into a strange shape—forward, then inside out, forming a wormhole in the middle.\u003c/p\u003e\n\u003cp\u003eIt kind of looks like a donut.\u003c/p\u003e\n\u003cp\u003eAn all-encompassing, beautiful, terrifying donut.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e“But you’re not done yet.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWait… You’ve heard that voice before.\u003c/p\u003e\n\u003cp\u003eCould that be…\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e“Time?”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eA second health bar appears.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"composition\"\u003e\u003ca target=\"_self\" href=\"#composition\"\u003eComposition\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHere is your program:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Clock \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./Clock\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/devbox/r2c-forked-k9jl8g?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo beat Spacetime, change it so that the \u003ccode\u003eClock\u003c/code\u003e displays the time from the Early world, but the color of the \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e around the \u003ccode\u003e\u0026lt;Clock\u0026gt;\u003c/code\u003e is decided by the Late world.\u003c/p\u003e\n\u003cp\u003eThe first part is easy.\u003c/p\u003e\n\u003cp\u003eTo make the \u003ccode\u003eClock\u003c/code\u003e show time from the Early world, it’s enough to lift it back up:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow you need to specify the \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e color. Suppose that the \u003ccode\u003eperform\u003c/code\u003e function already knows how to handle the \u003ccode\u003estyle\u003c/code\u003e prop and you could specify it like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat’s great, but Spacetime says \u003ccode\u003eprompt\u003c/code\u003e only exists in the Late world. Right now the \u003ccode\u003eApp\u003c/code\u003e Component is defined in the Early world where \u003ccode\u003eprompt\u003c/code\u003e does not exist:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e// 🔴 ReferenceError: prompt is not defined.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eMaybe you could move the \u003ccode\u003eApp\u003c/code\u003e Component itself into the Late world? This fixes the \u003ccode\u003eprompt\u003c/code\u003e but neither \u003ccode\u003eGreeting\u003c/code\u003e nor \u003ccode\u003eClock\u003c/code\u003e are available in the Late world:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// 🔴 ReferenceError: Greeting is not defined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// 🔴 ReferenceError: Clock is not defined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMaybe you could move the \u003ccode\u003eGreeting\u003c/code\u003e and the \u003ccode\u003eClock\u003c/code\u003e down as well?\u003c/p\u003e\n\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWait, but you wanted \u003ccode\u003eClock\u003c/code\u003e to show the time from the Early world. You can’t move it down. This is turning out to be a bit of a headscratcher…\u003c/p\u003e\n\u003cp\u003eMaybe you could keep the \u003ccode\u003eApp\u003c/code\u003e in the Late world, but refer to \u003ccode\u003eGreeting\u003c/code\u003e and \u003ccode\u003eClock\u003c/code\u003e in the Early world using \u003ccode\u003eimport tag\u003c/code\u003e? Let’s try that:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// 🔴 Cannot import an Early tag from a Late module.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e Greeting \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./early\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNah, this doesn’t make sense. It doesn’t make sense for the same reason that a function \u003cem\u003einside\u003c/em\u003e of the backticks cannot call a function \u003cem\u003eoutside\u003c/em\u003e the backticks:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eshowToast\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`function resume() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    const name = prompt(\u0026#39;Who are you?\u0026#39;);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    // 🔴 ReferenceError: showToast is not defined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    showToast(\u0026#39;Hello, \u0026#39; + name);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eimport tag\u003c/code\u003e syntax can only import things \u003cem\u003efrom below, not from above\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe Spacetime donut is starting to close in around you. You don’t have much time left to think. You have one last idea from a half-forgotten dream.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eimport tag\u003c/code\u003e syntax can only import things from the \u003cem\u003eworld below\u003c/em\u003e. But didn’t you also invent a sister \u003ccode\u003eimport rpc\u003c/code\u003e syntax that lets you import functions \u003cem\u003eover the network boundary\u003c/em\u003e? If the Early world is still somewhere there, perhaps it could respond to your request and return the result of the \u003ccode\u003eGreeting\u003c/code\u003e and the \u003ccode\u003eClock\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e rpc \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Clock\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e Greeting \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./early\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe donut wobbles and stops swirling for a moment.\u003c/p\u003e\n\u003cp\u003eWas \u003cem\u003ethat\u003c/em\u003e the solution?\u003c/p\u003e\n\u003cp\u003eIt does appear to work–\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e“No extra network calls. You have to do everything in one go.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe donut resumes swirling and is starting to envelop you. The wormhole is getting ever so closer. You’re no longer afraid of it, almost welcoming it.\u003c/p\u003e\n\u003cp\u003eA thought strikes your mind.\u003c/p\u003e\n\u003cp\u003eNot even a thought—a picture.\u003c/p\u003e\n\u003cp\u003eA shape.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e tag \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e Donut \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./Donut\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ePick a color:\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can’t \u003cem\u003ecall\u003c/em\u003e the past from the future, but you can \u003cem\u003ewrap\u003c/em\u003e the past into the future. You don’t know what this means but you know you’re not breaking any rules now.\u003c/p\u003e\n\u003cp\u003eTherefore, it must work.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eYou close your eyes.\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"a-dream-sequence\"\u003e\u003ca target=\"_self\" href=\"#a-dream-sequence\"\u003eA Dream Sequence\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn the beginning was the tag,\u003cbr/\u003e\nand the tag was in the Early world,\u003cbr/\u003e\nand the tag was \u003ccode\u003e\u0026lt;App /\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhat’s an \u003ccode\u003eApp\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eIt’s a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e\u003cbr/\u003e\nwith a \u003ccode\u003e\u0026lt;Greeting\u0026gt;\u003c/code\u003e,\u003cbr/\u003e\nand a \u003ccode\u003e\u0026lt;Donut\u0026gt;\u003c/code\u003e\u003cbr/\u003e\nwith a \u003ccode\u003e\u0026lt;Clock /\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t know yet.\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;Greeting /\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eGreeting\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e\u003cbr/\u003ewith an \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t know yet.\u003c/p\u003e\n\u003cp\u003eWhat’s an \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t know yet.\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003eDonut\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eWe don’t know yet.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003eClock\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    The time is: \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eClock\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s the time\u003cbr/\u003e\nof this world,\u003cbr/\u003e\nwhich is Early,\u003cbr/\u003e\nand whose time\u003cbr/\u003e\nhas come to end.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGoodbye \u003ccode\u003eApp\u003c/code\u003e,\u003cbr/\u003e\ngoodbye \u003ccode\u003eGreeting\u003c/code\u003e,\u003cbr/\u003e\ngoodbye \u003ccode\u003eClock\u003c/code\u003e.\u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e***\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(modem sounds)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e***\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t care yet.\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t care yet.\u003c/p\u003e\n\u003cp\u003eWhat’s an \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t care yet.\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;Donut\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eDonut\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eLet us load it.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e src=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003echunk123.js\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003escript\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOh, a \u003ccode\u003eDonut\u003c/code\u003e\u003cbr/\u003e\nis a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e \u003cbr/\u003e\nof a user-chosen color.\u003cbr/\u003e\nChoose away!\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003epurple\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eYou have chosen.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhat’s a \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003epurple\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don’t care yet—\u003cbr/\u003e\nit is not our job to care.\u003cbr/\u003e\nGoodbye \u003ccode\u003eDonut\u003c/code\u003e;\u003cbr/\u003e\nLet us hand this\u003cbr/\u003e\nto some piece\u003cbr/\u003e\nof C++.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    Hello, \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e placeholder=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWho are you?\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003epurple\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    The time is: Wed Apr 09 2025 15:13:04 GMT+0900 (Japan Standard Time)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/sandbox/8dgdz8?file=%2Fsrc%2Findex.mjs\"\u003eRun the code.\u003c/a\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"epilogue\"\u003e\u003ca target=\"_self\" href=\"#epilogue\"\u003eEpilogue\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThere’s more we haven’t covered but I’m afraid I’m running out of paper. Here’s a few things a motivated reader might discover if they continue this line of thought:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePoison Pills:\u003c/strong\u003e As your codebase grows, you’ll increasingly find that you don’t want to think about which world you’re in at any given moment—you’ll only want to assert the capabilities you’re relying on. For example, if you’re reading from a database and the entire database exists in the Early world, you’ll want some way to “poison pill” the database module so that importing it from the Late world immediately leads to a build error (instead of, say, trying to bundle the database code). In Node.js, \u003ca target=\"_blank\" href=\"https://nodejs.org/api/packages.html#resolving-user-conditions\"\u003ecustom user conditions\u003c/a\u003e provide a convenient way to enforce this.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDirectives:\u003c/strong\u003e It turns out that \u003ccode\u003eimport tag\u003c/code\u003e and \u003ccode\u003eimport rpc\u003c/code\u003e, while theoretically elegant, are not very nice to use in practice. The technical separation between the worlds must remain firm; however, mentally you’ll gradually shift to writing the code as if it doesn’t matter which world you’re in. With Poison Pills enforcing that stuff doesn’t execute in the \u003cem\u003ewrong\u003c/em\u003e world, you can largely shift the boundaries on autopilot by moving stuff around and cutting new “doors” in response to build errors. When you \u003cem\u003ewant\u003c/em\u003e to cut a “door”, you’ll find that it’s more natural to mark it \u003cem\u003enext to the \u003ccode\u003eexport\u003c/code\u003e\u003c/em\u003e rather than where you do the \u003ccode\u003eimport\u003c/code\u003e. That would let you quickly “shift” the boundaries in and out of existence—the world an imported module is in becomes an implementation detail. One way to annotate exports would be to (ab)use the \u003ca target=\"_blank\" href=\"https://stackoverflow.com/a/37535869\"\u003edirective syntax\u003c/a\u003e. If you also rename Early and Late to something more descriptive (for example, “Early” could become “Server” and “Late” could become “Client”), then \u003ccode\u003eimport tag\u003c/code\u003e could be replaced by \u003ca target=\"_blank\" href=\"https://react.dev/reference/rsc/use-client\"\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e\u003c/a\u003e next to the \u003ccode\u003eexport\u003c/code\u003e, and \u003ccode\u003eimport rpc\u003c/code\u003e could turn into \u003ca target=\"_blank\" href=\"https://react.dev/reference/rsc/use-server\"\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData Fetching:\u003c/strong\u003e The Early world (or the Server world, if you prefer) is a perfect place for data fetching because you have the opportunity to deploy the code to a low-latency environment. It would not be difficult to adjust the code to allow the “thinking” phase to be asynchronous; see if you can manage that as an exercise.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStreaming Execution:\u003c/strong\u003e In our examples, every phase of the computation happens sequentially: it doesn’t start until the previous phase has fully finished. However, in practice, since Components can be executed outside-in, you can blend \u003cem\u003eall\u003c/em\u003e of the phases and execute them without blocking. In particular, instead of waiting for an entire JSON tree of Late Components (or shall we call them Client Components?), you could develop a specialized wire format that leaves “holes” in place of unfinished computations, and can later fill in those holes with more JSON.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStateful Late World:\u003c/strong\u003e Late Components become a lot more useful if you introduce a concept of State. This, again, underscores that a tag is a \u003cem\u003epotential\u003c/em\u003e function call—it may happen, it may not happen, or it may \u003cem\u003ehappen many times\u003c/em\u003e. Every time you change the state of some Late Component, you can re-execute it without affecting any of the Early Components. This ensures State changes stay predictably instant.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRepurposing Early and Late Worlds:\u003c/strong\u003e Keep in mind that Early and Late worlds don’t have to map 1:1 to existing concepts of a “server” and a “client”. For example, if your Late Components are Stateful, and you have a server, you might find it useful to run \u003cem\u003eboth\u003c/em\u003e the Early \u003cem\u003eand\u003c/em\u003e the Late worlds on that server. On the server, you’ll call the Late world with the \u003cem\u003einitial\u003c/em\u003e State—to produce an initial tree of Primitives, which you can turn into a format like HTML. This lets you start displaying content to the user very early—before any of the Late Components load on their machine.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCaching:\u003c/strong\u003e The Early world doesn’t have to run on demand. Indeed, you can run it ahead of time and store the intermediate result of its computation (which is often known as static site generation). If you’re feeling ambitious, you could even add another world—\u003ca target=\"_blank\" href=\"https://nextjs.org/docs/app/api-reference/directives/use-cache\"\u003ea Cache world\u003c/a\u003e—to reuse pieces of computation across requests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you’d like to play with the final example, be my guest:\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/p/sandbox/8dgdz8?file=%2Fsrc%2Findex.mjs\"\u003eRun the final code.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf you’d like to play with the real thing but don’t want to use a framework, \u003ca target=\"_blank\" href=\"https://parceljs.org/recipes/rsc/\"\u003eParcel has recently released support for React Server Components\u003c/a\u003e so do check that out.\u003c/p\u003e\n\u003cp\u003eThank you for reading!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "112 min read",
  "publishedTime": null,
  "modifiedTime": null
}
