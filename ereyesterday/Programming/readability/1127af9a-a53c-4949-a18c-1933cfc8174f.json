{
  "id": "1127af9a-a53c-4949-a18c-1933cfc8174f",
  "title": "Unlocking the Potential of Quantum Computing: A Developer’s Guide to Error Correction",
  "link": "https://developers.googleblog.com/en/unlocking-the-potential-of-quantum-computing-a-developers-guide-to-error-correction/",
  "description": "A free Coursera course on quantum error correction, developed by Google Quantum AI, explains the importance of error correction in quantum computing and provides an overview of quantum errors.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Austin Fowler",
  "length": 6062,
  "excerpt": "A free Coursera course on quantum error correction, developed by Google Quantum AI, explains the importance of error correction in quantum computing and provides an overview of quantum errors.",
  "siteName": "",
  "favicon": "",
  "text": "Manipulating quantum states on a superconducting chip cooled to a fraction of a degree above absolute zero at the bottom of a cryogenic fridge is incredibly challenging. And things don't always go to plan. Errors happen. Lots of errors. Sophisticated strategies are required to extract reliable computation from what would otherwise be just so many random output bits. Success is only possible if errors are not too overwhelmingly common.Today, Google Quantum AI announced the construction of a quantum chip where errors are indeed not overwhelmingly common. It makes use of the surface code, essentially a square patch of nearest-neighbor coupled physical qubits that work together to form a single more reliable logical qubit. As the square patch gets bigger, a logical qubit should get more reliable, and that is exactly what we demonstrated: a chip with logical qubits getting over a factor of two more reliable with each increase in patch size.But why is this needed—what are quantum errors and how are they corrected?We'll give a short version of the answers here, and if you want more than a brief overview, you can head straight to the hands-on quantum error correction course now available for free on Coursera where you will find a series of videos and exercises to develop your understanding. “This new course opens a door to a complex domain, making quantum error correction not just accessible, but tangible for millions of learners worldwide,” says Marni Baker Stein, Chief Content Officer at Coursera. “Our collaboration with an industry pioneer like Google Quantum AI signifies another step towards a future where knowledge is the key to harnessing the power of quantum computing.” What is a quantum error?Let's start with classical errors. You have a bit. Suppose it should be 0. But a cosmic ray hits it and it becomes 1. That's a bit-flip error, the only type of error in a classical computer. In comparison, a quantum chip doesn't consist of bits but rather multilevel quantum systems so cold they have well-defined discrete ground and excited states. We write these states as |0\u003e, |1\u003e, |2\u003e, etc. When a cosmic ray hits a qubit that should be |0\u003e, it can produce a superposition a|0\u003e + b|1\u003e + c|2\u003e + ... of many states. Careful engineering of our device has made our qubits robust to all but the most energetic impacts, allowing us to compute results and simply discard the output when we are hit.When computing, we try hard to only use states |0\u003e and |1\u003e, but control and measurement errors inevitably lead to the occasional |2+\u003e state, known as leakage errors. Resetting a qubit gets rid of this error, but also gets rid of any data on that qubit, so we have a special gate that moves higher states off data qubits and onto a qubit about to be reset. This prevents the accumulation of |2+\u003e states in the computer.Then there is the problem that quantum data just doesn't like hanging around very long. Qubits like to relax. If you use an excited state to represent |1\u003e, after a short time it will relax to |0\u003e. We also want to be able to store superpositions like a|0\u003e + b|1\u003e, and that ‘plus’ can spontaneously become a ‘minus’, or a phase-flip error. The various ways that qubits lose data are collectively called decoherence. In general, decoherence can produce a completely different state to the one we want, but fortunately this difference can be broken into a mix of bit flips and phase flips; for brevity we call them X and Z errors.How do we detect X and Z errors?Let's start with a picture of our quantum chip. This is a 2D array of qubits with nearest neighbor interactions only. Data qubits store our precious quantum state. Measure qubits are used to detect X and Z errors. A good way to understand this is to imagine each light blue region detecting Z errors on the data qubits it touches, and each dark blue region detecting X errors. A Z error on a data qubit activates the neighboring light blue regions, locating it and allowing us to compensate for its presence in software. Provided the density of X and Z errors is low enough, the pattern of lit up regions will give us clear information allowing us to find and compensate for these errors.If a measure qubit suffers an error, that can give you a falsely activated region. To cope with this, the search for errors is repeated as often as possible, and the next time the check is performed there is a good chance it will be resolved. This creates an identifiable signature for a measurement error, enabling these to also be handled in software. It is an area of ongoing research to devise more sophisticated algorithms to handle the output of measure qubits to better identify the location and type of errors, all while keeping pace with the quantum computer.Learning moreWhat we’ve covered above is scraping the surface of quantum error correction and the critical role it plays in advancing quantum computing. For a step-by-step explanation and labs starting from the very basics, through quantum states and circuits, to some of the latest error correction tools used today, go to Coursera for our hands-on quantum error correction course.If you are a software engineer who has always wanted to work on a quantum problem, after taking the course head over to Quantum AI open source tools, where we build open-source software like Cirq, Stim and Crumble to simulate quantum circuits and develop error correction techniques. Learn how to design quantum algorithms and contribute to the development of tools that will enable the realization of practical quantum computing.Quantum computing: extra creditHere is an exciting area of research that combines theoretical computer science, software engineering, and quantum physics: Join this group to get access to the TQEC project and learn why this image is a picture of scalable fault-tolerant quantum computation, three logical qubits abc undergoing three controlled-NOT gates to produce outputs a'b'c'.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/GeminiXCoursera-Feature.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"h47zp\"\u003eManipulating quantum states on a superconducting chip cooled to a fraction of a degree above absolute zero at the bottom of a cryogenic fridge is incredibly challenging. And things don\u0026#39;t always go to plan. Errors happen. Lots of errors. Sophisticated strategies are required to extract reliable computation from what would otherwise be just so many random output bits. Success is only possible if errors are not too overwhelmingly common.\u003c/p\u003e\u003cp data-block-key=\"cjsaa\"\u003eToday, Google Quantum AI \u003ca href=\"https://blog.google/technology/research/google-willow-quantum-chip/\"\u003eannounced\u003c/a\u003e the construction of a quantum chip where errors are indeed not overwhelmingly common. It makes use of the \u003ca href=\"https://arxiv.org/abs/quant-ph/9811052\"\u003esurface code\u003c/a\u003e, essentially a square patch of nearest-neighbor coupled physical \u003ca href=\"https://en.wikipedia.org/wiki/Qubit\"\u003equbits\u003c/a\u003e that work together to form a single more reliable logical qubit. As the square patch gets bigger, a logical qubit should get more reliable, and that is exactly what we demonstrated: a chip with logical qubits getting over a factor of two more reliable with each increase in patch size.\u003c/p\u003e\u003cp data-block-key=\"d47kl\"\u003eBut why is this needed—what are quantum errors and how are they corrected?\u003c/p\u003e\u003cp data-block-key=\"99m57\"\u003eWe\u0026#39;ll give a short version of the answers here, and if you want more than a brief overview, you can head straight to the hands-on \u003ca href=\"https://coursera.org/learn/quantum-error-correction\"\u003equantum error correction course\u003c/a\u003e now available for free on Coursera where you will find a series of videos and exercises to develop your understanding. “This new course opens a door to a complex domain, making quantum error correction not just accessible, but tangible for millions of learners worldwide,” says Marni Baker Stein, Chief Content Officer at Coursera. “Our collaboration with an industry pioneer like Google Quantum AI signifies another step towards a future where knowledge is the key to harnessing the power of quantum computing.”\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image1.original_8ln1AEM.jpg\" alt=\"A large, complex piece of scientific equipment dominates a high-tech laboratory setting, with various wires, pipes, and support structures visible.\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"h47zp\"\u003eWhat is a quantum error?\u003c/h2\u003e\u003cp data-block-key=\"fid47\"\u003eLet\u0026#39;s start with classical errors. You have a \u003ca href=\"https://en.wikipedia.org/wiki/Bit\"\u003ebit\u003c/a\u003e. Suppose it should be 0. But a cosmic ray hits it and it becomes 1. That\u0026#39;s a bit-flip error, the only type of error in a classical computer. In comparison, a quantum chip doesn\u0026#39;t consist of bits but rather multilevel quantum systems so cold they have well-defined discrete ground and excited states. We write these states as |0\u0026gt;, |1\u0026gt;, |2\u0026gt;, etc. When a cosmic ray hits a qubit that should be |0\u0026gt;, it can produce a superposition a|0\u0026gt; + b|1\u0026gt; + c|2\u0026gt; + ... of many states. \u003ca href=\"https://arxiv.org/abs/2402.15644\"\u003eCareful engineering\u003c/a\u003e of our device has made our qubits robust to all but the most energetic impacts, allowing us to compute results and simply discard the output when we are hit.\u003c/p\u003e\u003cp data-block-key=\"gpbu\"\u003eWhen computing, we try hard to only use states |0\u0026gt; and |1\u0026gt;, but control and measurement errors inevitably lead to the occasional |2+\u0026gt; state, known as leakage errors. Resetting a qubit gets rid of this error, but also gets rid of any data on that qubit, so we have a \u003ca href=\"https://arxiv.org/abs/2211.04728\"\u003especial gate\u003c/a\u003e that moves higher states off data qubits and onto a qubit about to be reset. This prevents the accumulation of |2+\u0026gt; states in the computer.\u003c/p\u003e\u003cp data-block-key=\"n8f5\"\u003eThen there is the problem that quantum data just doesn\u0026#39;t like hanging around very long. Qubits like to relax. If you use an excited state to represent |1\u0026gt;, after a short time it will relax to |0\u0026gt;. We also want to be able to store superpositions like a|0\u0026gt; + b|1\u0026gt;, and that ‘plus’ can spontaneously become a ‘minus’, or a phase-flip error. The various ways that qubits lose data are collectively called decoherence. In general, decoherence can produce a completely different state to the one we want, but fortunately this difference can be broken into a mix of bit flips and phase flips; for brevity we call them X and Z errors.\u003c/p\u003e\u003ch2 data-block-key=\"4oi4\"\u003e\u003cbr/\u003eHow do we detect X and Z errors?\u003c/h2\u003e\u003cp data-block-key=\"bj86\"\u003eLet\u0026#39;s start with a picture of our quantum chip.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image4.original_1G4lw6s.png\" alt=\"A diagram depicts a grid of blue and gold squares representing a quantum computing system. Orange lines connect certain squares, and labels indicate \u0026#34;data,\u0026#34; \u0026#34;measure,\u0026#34; and \u0026#34;leakage removal\u0026#34; qubits.\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cdiv\u003e\n    \u003cp data-block-key=\"h47zp\"\u003eThis is a 2D array of qubits with nearest neighbor interactions only. Data qubits store our precious quantum state. Measure qubits are used to detect X and Z errors. A good way to understand this is to imagine each light blue region detecting Z errors on the data qubits it touches, and each dark blue region detecting X errors. A Z error on a data qubit activates the neighboring light blue regions, locating it and allowing us to compensate for its presence in software. Provided the density of X and Z errors is low enough, the pattern of lit up regions will give us clear information allowing us to find and compensate for these errors.\u003c/p\u003e\u003cp data-block-key=\"f7g3m\"\u003eIf a measure qubit suffers an error, that can give you a falsely activated region. To cope with this, the search for errors is repeated as often as possible, and the next time the check is performed there is a good chance it will be resolved. This creates an identifiable signature for a measurement error, enabling these to also be handled in software. It is an area of ongoing research to devise more sophisticated algorithms to handle the output of measure qubits to better identify the location and type of errors, all while keeping pace with the quantum computer.\u003c/p\u003e\u003ch3 data-block-key=\"8iqrr\"\u003e\u003cbr/\u003e\u003cb\u003eLearning more\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"892k3\"\u003eWhat we’ve covered above is scraping the surface of quantum error correction and the critical role it plays in advancing quantum computing. For a step-by-step explanation and labs starting from the very basics, through quantum states and circuits, to some of the latest error correction tools used today, \u003ca href=\"https://coursera.org/learn/quantum-error-correction\"\u003ego to Coursera\u003c/a\u003e for our hands-on quantum error correction course.\u003c/p\u003e\u003cp data-block-key=\"flinp\"\u003eIf you are a software engineer who has always wanted to work on a quantum problem, after taking the course head over to \u003ca href=\"https://quantumai.google/software\"\u003eQuantum AI open source tools\u003c/a\u003e, where we build open-source software like Cirq, Stim and Crumble to simulate quantum circuits and develop error correction techniques. Learn how to design quantum algorithms and contribute to the development of tools that will enable the realization of practical quantum computing.\u003c/p\u003e\u003ch2 data-block-key=\"1j2lc\"\u003e\u003cbr/\u003eQuantum computing: extra credit\u003c/h2\u003e\u003cp data-block-key=\"ejtn1\"\u003eHere is an exciting area of research that combines theoretical computer science, software engineering, and quantum physics:\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image3.original_G9TPkKt.png\" alt=\"A 3D model of interlocking pink and blue rectangular prisms, labeled a, a\u0026#39;, b, b\u0026#39;, c, and c\u0026#39;.\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cp data-block-key=\"h47zp\"\u003eJoin \u003ca href=\"https://groups.google.com/g/tqec-design-automation\"\u003ethis group\u003c/a\u003e to get access to the TQEC project and learn why this image is a picture of scalable fault-tolerant quantum computation, three logical qubits abc undergoing three controlled-NOT gates to produce outputs a\u0026#39;b\u0026#39;c\u0026#39;.\u003c/p\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-12-09T00:00:00Z",
  "modifiedTime": null
}
