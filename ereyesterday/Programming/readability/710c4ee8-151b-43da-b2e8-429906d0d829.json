{
  "id": "710c4ee8-151b-43da-b2e8-429906d0d829",
  "title": "CLion Nova Improvements, Debug Servers, OpenCV Image Viewer, and Zephyr West Debugging in CLion 2024.3",
  "link": "https://blog.jetbrains.com/clion/2024/11/2024-3-available/",
  "description": "CLion 2024.3 is now available. This latest version of the JetBrains IDE for C and C++ includes the following key features and updates: You can download CLion 2024.3 from the link below, via the Toolbox App, as a snap package if you’re using Ubuntu, or via a patch update from version 2024.2. DOWNLOAD CLION 2024.3 […]",
  "author": "Oleg Zinovyev",
  "published": "Wed, 20 Nov 2024 11:40:48 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "releases",
    "ai-assistant",
    "clionnova",
    "debugger",
    "embedded",
    "misra",
    "opencv",
    "zephyr-west"
  ],
  "byline": "Oleg Zinovyev",
  "length": 12726,
  "excerpt": "CLion 2024.3 is now available. This latest version of the JetBrains IDE for C and C++ includes the following key features and updates: Considerable improvements to the new language engine, CLion N",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A Cross-Platform IDE for C and C++ News ReleasesCLion Nova Improvements, Debug Servers, OpenCV Image Viewer, and Zephyr West Debugging in CLion 2024.3 CLion 2024.3 is now available. This latest version of the JetBrains IDE for C and C++ includes the following key features and updates: Considerable improvements to the new language engine, CLion Nova. New Debug Servers configuration option. OpenCV image viewer. Ability to attach the debugger to an unstarted process. Debugging support for Zephyr West. You can download CLion 2024.3 from the link below, via the Toolbox App, as a snap package if you’re using Ubuntu, or via a patch update from version 2024.2. DOWNLOAD CLION 2024.3 CLion Nova In this release, our new language engine, CLion Nova, has received many important enhancements, including various language-specific and UI updates and several memory usage optimizations. We’ve also provided improved language support for modern C++ features. Furthermore, to simplify the transition from CLion Classic to CLion Nova, we’ve added a toggle switch to both the Welcome screen and the Configuration menu. Call for feedback on CLion Nova The performance of CLion Nova now exceeds that of CLion Classic by an even greater margin. It’s smoother and more responsive, even on larger projects with hundreds of thousands of lines of code. That’s why we’ve added even more convenient ways for you to switch to CLion Nova.  However, we realize that some CLion Classic users are not ready to make the switch. Before we make CLion Nova the default engine for everyone, we would like to understand why some users prefer CLion Classic over CLion Nova. We would therefore appreciate it if you could share your feedback with us via Help | Submit Feedback… in the main IDE menu. We’ll review it carefully and try to resolve any critical issues that might prevent you from getting the most out of CLion Nova. Memory usage improvements Various improvements have vastly reduced CLion Nova’s memory usage and improved overall IDE performance. This is especially noticeable in large projects like Chromium ones. For example, when we compared the memory usage of a Chromium project in CLion Nova 2024.2 with the same project in 2024.3, we saw that the IDE frontend used 51% less memory in the new version, and the IDE backend used 15% less. In short, this means the IDE has become more responsive and quicker to launch. Call hierarchy The function call hierarchy is now available when using CLion Nova in the Hierarchy tool window. It displays caller and callee hierarchies, visually representing how your functions interact and highlighting recursive calls with the corresponding icon. To see the call hierarchy of a function, select it in the editor, and then click Navigate | Call Hierarchy from the main menu or use the shortcut ⌃⌥H (macOS) or Ctrl+Alt+H (Windows/Linux). Predefined code styles from other projects One of the most requested features we’ve added to this release is predefined code styles from other projects such as LLVM, GNU, Qt, and Google. This allows you to follow popular style guides for code structure rules, naming conventions, and other C++ areas where consistency is crucial. You can select your preferred style via Settings | Editor | Code Style | C/C++ | Set from…. Quick Definition support The Quick Definition popup reveals where and how function, class, method, and other project symbols are defined. To call it, place the caret at a symbol in the editor and press ⌥Space (macOS) or Ctrl+Shift+| (Windows/Linux). You can also access it from the main menu via View | Quick Definition. Embedded development In this release, we have continued to expand CLion’s functionality to meet the diverse needs of embedded developers. Major updates for embedded development include debug servers, the ability to edit peripheral register values, and support for debugging West projects. Debug servers experimental We’ve introduced a new Debug Servers configuration option to simplify the setup of debugging for embedded and remote development. Located in Settings | Debugger, this dedicated section allows you to configure a debug server for the specific debug probe and use it to run or debug the build target. To enable the configuration option, go to Settings | Advanced Settings | Debugger. You can select Edit Debug Servers from the main toolbar switcher or go to Settings | Debugger and open the Debug Servers dialog to configure a debug server. Please be aware that this is an experimental feature, and it doesn’t work with PlatformIO yet. There is, however, a workaround. We encourage you to give it a try and share your feedback with us. Additionally, we are more than willing to arrange a brief call to understand your specific use cases and challenges better. Debugging support for Zephyr West Now, you can natively debug Zephyr projects that use the West meta-tool directly in CLion. When you import your Zephyr West project, a West run/debug configuration is automatically created in the Run/Debug Configurations switcher. You can also create a new run/debug configuration by selecting Run | Edit Configurations… from the main menu, clicking +, and selecting a West template: Once configured, the new West run/debug configuration will be available in the Run/Debug Configurations switcher, and you can use it to run a debug session. Editable peripheral register values When debugging board peripherals like timers, communication interfaces, or GPIO ports, you can now instantly observe the results of your modifications by editing peripheral registers directly in the Peripherals pane. You can test different configurations and device states on the go without recompiling your code or reloading your application or board. Support for MISRA C++:2023 with CLion Nova The MISRA guidelines are indispensable in the development of safety-critical systems. In this release, CLion’s static analysis toolset gets a significant portion of MISRA C++:2023 checks specifically targeted at C++17. Debugger CLion’s debugger has received several updates, the most important of which are an OpenCV image viewer, the ability to attach the debugger to an unstarted process, a formatted view for strings with structured data, and new bundled GDB (15.2) and LLDB (19.1.3) debuggers. OpenCV image viewer If you’re developing an ML application that uses the OpenCV library, you can now view a two-dimensional OpenCV array as an image while debugging the application. The image opens in a separate dialog with multiple editing options. The OpenCV image viewer simplifies image processing inspection during application debugging. It’s also more convenient than alternative methods like saving an image to the hard drive or writing extra code to display it in a popup window. Ability to attach the debugger to an unstarted process Attaching the debugger to an unstarted local process is helpful when one part of your project is written in C++ and runs in CLion, while another is written in another language and runs in an external environment. To try the feature: Set a breakpoint in your code. Select Run | Attach to an Unstarted Process… from the main menu. In the Command line field, add a pattern to find the process using wildcard characters: *process_name*. Select the options you need. Select a debugger to attach. The debugger will start watching the process. Once the external process starts, the debugger will attach to it. From there, the debugging session will continue as normal, with the program running and halting at the breakpoints you have set. Formatted view for strings with JSON, XML, or HTML data When debugging strings containing JSON, XML, or HTML data, or newline characters, you can view them formatted according to their code style directly in the debugger. This means you no longer need to copy unformatted values into a third-party tool for examination.  When debugging, click View next to a variable to see the structured or raw data in a separate window. Other enhancements This release also includes a number of user experience improvements, such as renewed cloud completion, a new project status widget, and an updated UI for the new terminal. We’ve also updated the CMake bundle to 3.30.5. Renewed cloud completion powered by AI Assistant  The enhanced JetBrains AI Assistant plugin, featuring our internally trained LLM for C++, has significantly improved the speed and intelligence of CLion’s cloud code completion. AI Assistant now provides more usage scenarios, better suffix matching, and more correct code fragment completions. One of the most significant enhancements is multiline code completion, which brings syntax highlighting and the ability to incrementally accept code suggestions.  Multiline code completion operates alongside standard code completion and Full Line Code Completion (the latter uses the local LLM and doesn’t require sending data to the cloud). It allows you to review and accept suggestions incrementally. Additionally, you can accept suggestions word by word using the shortcut ⌥→ on macOS or Ctrl+→ on Windows.  Project status widget CLion’s project status notifications inform you of potential problems with your project configuration and offer ways to resolve them. In the previous CLion version, 2024.2, these notifications were displayed as yellow banners in the editor until the problem was resolved. They were irrelevant for some users – for example, those who just wanted to open a .cpp file from a third-party project to read the code. Having a notification banner hanging in the editor all the time is unnecessary in such cases. For this release, we’ve moved project status notifications from the top of the editor to a new widget in the status bar. Now, the notification that your file doesn’t belong to any project won’t appear until you hover over the ⚠️ icon. To view the details, you have to click on the icon. This makes notifications less distracting while still keeping the information accessible to those who want it. Updated UI for the new terminal The new terminal’s interface has been redesigned to be more compact by reducing padding. This change maximizes screen space, making it easier to view and work with commands while keeping everything readable and clear.  Highlighted occurrences of selected text By default, CLion now highlights every instance of the text you select in any file type, not just .c and .cpp files. This change makes it much simpler to track where your selected text appears throughout the file.  Try CLion and give us your feedback We invite you to give CLion 2024.3 a try. If you have an active subscription, you can update it right away. New to CLion? Start your free 30-day trial today and dive into all its features and improvements immediately. We value your feedback! If you have anything to share or if you run into any problems, please let us know through our issue tracker. DOWNLOAD CLION 2024.3 Your CLion team JetBrains The Drive to Develop Subscribe to CLion Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/Social_Share_Blog_1280x720-2x-7.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/clion/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/CLion-1.svg\" alt=\"Clion logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA Cross-Platform IDE for C and C++\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/clion/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/clion/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCLion Nova Improvements, Debug Servers, OpenCV Image Viewer, and Zephyr West Debugging in CLion 2024.3\u003c/h2\u003e                    \n                    \n\u003cp\u003eCLion 2024.3 is now available. This latest version of the JetBrains IDE for C and C++ includes the following key features and updates:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eConsiderable improvements to the new language engine, CLion Nova.\u003c/li\u003e\n\n\n\n\u003cli\u003eNew \u003cem\u003eDebug Servers\u003c/em\u003e configuration option.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpenCV image viewer.\u003c/li\u003e\n\n\n\n\u003cli\u003eAbility to attach the debugger to an unstarted process.\u003c/li\u003e\n\n\n\n\u003cli\u003eDebugging support for Zephyr West.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1600\" height=\"900\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/image-36.png\" alt=\"CLion 2024.3\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can download CLion 2024.3 from the link below, via the \u003ca href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\"\u003eToolbox App\u003c/a\u003e, as a snap package if you’re using Ubuntu, or via a patch update from version 2024.2.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/download/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2024.3\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eCLion Nova\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn this release, our new language engine, CLion Nova, has received many important enhancements, including various language-specific and UI updates and several memory usage optimizations. We’ve also provided improved language support for modern C++ features.\u003c/p\u003e\n\n\n\n\u003cp\u003eFurthermore, to simplify the transition from CLion Classic to CLion Nova, we’ve added a toggle switch to both the \u003cem\u003eWelcome\u003c/em\u003e screen and the \u003cem\u003eConfiguration\u003c/em\u003e menu.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1172\" height=\"564\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/1_nova_feedback.png\" alt=\"CLion Nova toggle switch\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eCall for feedback on CLion Nova\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe performance of CLion Nova now exceeds that of CLion Classic by an even greater margin. It’s smoother and more responsive, even on larger projects with hundreds of thousands of lines of code. That’s why we’ve added even more convenient ways for you to switch to CLion Nova. \u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, we realize that some CLion Classic users are not ready to make the switch. Before we make CLion Nova the default engine for everyone, we would like to understand why some users prefer CLion Classic over CLion Nova. We would therefore appreciate it if you could share your feedback with us via \u003cem\u003eHelp\u003c/em\u003e | \u003cem\u003eSubmit Feedback…\u003c/em\u003e in the main IDE menu. We’ll review it carefully and try to resolve any critical issues that might prevent you from getting the most out of CLion Nova.\u003c/p\u003e\n\n\n\n\u003ch3\u003eMemory usage improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eVarious improvements have vastly reduced CLion Nova’s memory usage and improved overall IDE performance. This is especially noticeable in large projects like \u003ca href=\"https://www.chromium.org/chromium-projects/\" target=\"_blank\" rel=\"noopener\"\u003eChromium\u003c/a\u003e ones.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1790\" height=\"1104\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/2_nova_memory.png\" alt=\"Chromium project memory usage\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor example, when we compared the memory usage of a Chromium project in CLion Nova 2024.2 with the same project in 2024.3, we saw that the IDE frontend used 51% less memory in the new version, and the IDE backend used 15% less. In short, this means the IDE has become more responsive and quicker to launch.\u003c/p\u003e\n\n\n\n\u003ch3\u003eCall hierarchy\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe function call hierarchy is now available when using CLion Nova in the \u003cem\u003eHierarchy\u003c/em\u003e tool window. It displays caller and callee hierarchies, visually representing how your functions interact and highlighting recursive calls with the corresponding icon.\u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/3_call_hierarchy-1.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/3_call_hierarchy.png\" alt=\"Quick definition\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003eTo see the call hierarchy of a function, select it in the editor, and then click \u003cem\u003eNavigate\u003c/em\u003e | \u003cem\u003eCall Hierarchy\u003c/em\u003e from the main menu or use the shortcut \u003cem\u003e⌃⌥H\u003c/em\u003e (macOS) or \u003cem\u003eCtrl+Alt+H\u003c/em\u003e (Windows/Linux).\u003c/p\u003e\n\n\n\n\u003ch3\u003ePredefined code styles from other projects\u003c/h3\u003e\n\n\n\n\u003cp\u003eOne of the most requested features we’ve added to this release is predefined code styles from other projects such as LLVM, GNU, Qt, and Google. This allows you to follow popular style guides for code structure rules, naming conventions, and other C++ areas where consistency is crucial. You can select your preferred style via \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eEditor\u003c/em\u003e | \u003cem\u003eCode Style\u003c/em\u003e | \u003cem\u003eC/C++\u003c/em\u003e | \u003cem\u003eSet from…\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2696\" height=\"1616\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/4_code_styles.png\" alt=\"Predefined code styles\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cem\u003eQuick Definition\u003c/em\u003e support\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003cem\u003eQuick\u003c/em\u003e \u003cem\u003eDefinition\u003c/em\u003e popup reveals where and how function, class, method, and other project symbols are defined. To call it, place the caret at a symbol in the editor and press \u003cem\u003e⌥Space\u003c/em\u003e (macOS) or \u003cem\u003eCtrl+Shift+|\u003c/em\u003e (Windows/Linux). You can also access it from the main menu via \u003cem\u003eView\u003c/em\u003e | \u003cem\u003eQuick Definition\u003c/em\u003e.\u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/6_quick_definition.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/6_quick_definition.png\" alt=\"Quick definition\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003ch2\u003eEmbedded development\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn this release, we have continued to expand CLion’s functionality to meet the diverse needs of embedded developers. Major updates for embedded development include debug servers, the ability to edit peripheral register values, and support for debugging West projects.\u003c/p\u003e\n\n\n\n\u003ch3\u003eDebug servers \u003cstrong\u003e\u003csup\u003e\u003cmark\u003eexperimental\u003c/mark\u003e\u003c/sup\u003e\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe’ve introduced a new \u003cem\u003eDebug Servers\u003c/em\u003e configuration option to simplify the setup of debugging for embedded and remote development. Located in \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eDebugger\u003c/em\u003e, this dedicated section allows you to configure a debug server for the specific debug probe and use it to run or debug the build target.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo enable the configuration option, go to \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eAdvanced Settings\u003c/em\u003e | \u003cem\u003eDebugger\u003c/em\u003e. You can select \u003cem\u003eEdit Debug Servers\u003c/em\u003e from the main toolbar switcher or go to \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eDebugger \u003c/em\u003eand open the \u003cem\u003eDebug Servers\u003c/em\u003e dialog to configure a debug server.\u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/7_debug_servers.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/7_debug_servers.png\" alt=\"Debug servers\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003ePlease be aware that this is an experimental feature, and it doesn’t work with PlatformIO yet. There is, however, a \u003ca href=\"https://youtrack.jetbrains.com/issue/CPP-42014/Debug-Servers-are-not-compatible-with-PlatformIO\" target=\"_blank\" rel=\"noopener\"\u003eworkaround\u003c/a\u003e. We encourage you to give it a try and share your feedback with us. Additionally, we are more than willing to arrange a \u003ca href=\"https://survey.alchemer.com/s3/8011393/CLion-EAP-Feedback\" target=\"_blank\" rel=\"noopener\"\u003ebrief call\u003c/a\u003e to understand your specific use cases and challenges better.\u003c/p\u003e\n\n\n\n\u003ch3\u003eDebugging support for Zephyr West\u003c/h3\u003e\n\n\n\n\u003cp\u003eNow, you can natively debug Zephyr projects that use the West meta-tool \u003ca href=\"https://www.jetbrains.com/help/clion/2024.2/zephyr.html#run-debug-configuration\" target=\"_blank\" rel=\"noopener\"\u003edirectly in CLion\u003c/a\u003e. When you import your Zephyr West project, a West run/debug configuration is automatically created in the \u003cem\u003eRun/Debug Configurations\u003c/em\u003e switcher. You can also create a new run/debug configuration by selecting \u003cem\u003eRun\u003c/em\u003e | \u003cem\u003eEdit Configurations…\u003c/em\u003e from the main menu, clicking \u003cem\u003e+\u003c/em\u003e, and selecting a \u003cem\u003eWest\u003c/em\u003e template:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1982\" height=\"1066\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/8_west_debug.png\" alt=\"Zephyr West debug configuration\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOnce configured, the new West run/debug configuration will be available in the \u003cem\u003eRun/Debug Configurations\u003c/em\u003e switcher, and you can use it to run a debug session.\u003c/p\u003e\n\n\n\n\u003ch3\u003eEditable peripheral register values\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhen debugging board peripherals like timers, communication interfaces, or GPIO ports, you can now instantly observe the results of your modifications by editing peripheral registers directly in the \u003cem\u003ePeripherals\u003c/em\u003e pane.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1823\" height=\"689\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/9_peripherals.png\" alt=\"Editable peripheral register values\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can test different configurations and device states on the go without recompiling your code or reloading your application or board.\u003c/p\u003e\n\n\n\n\u003ch3\u003eSupport for MISRA C++:2023 with CLion Nova\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://misra.org.uk/\" target=\"_blank\" rel=\"noopener\"\u003eMISRA guidelines\u003c/a\u003e are indispensable in the development of safety-critical systems. In this release, CLion’s static analysis toolset gets a \u003ca href=\"https://youtrack.jetbrains.com/articles/CPP-A-191430682/MISRA-checks-supported-in-CLion#misra-c-2023-67-177\" target=\"_blank\" rel=\"noopener\"\u003esignificant portion\u003c/a\u003e of MISRA C++:2023 checks specifically targeted at C++17.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2340\" height=\"1222\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/10_misra.png\" alt=\"MISRA C++:2023 checks\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eDebugger\u003c/h2\u003e\n\n\n\n\u003cp\u003eCLion’s debugger has received several updates, the most important of which are an OpenCV image viewer, the ability to attach the debugger to an unstarted process, a formatted view for strings with structured data, and new bundled GDB (15.2) and LLDB (19.1.3) debuggers.\u003c/p\u003e\n\n\n\n\u003ch3\u003eOpenCV image viewer\u003c/h3\u003e\n\n\n\n\u003cp\u003eIf you’re developing an ML application that uses the OpenCV library, you can now view a two-dimensional OpenCV array as an image while debugging the application. The image opens in a separate dialog with multiple editing options.\u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/11_opencv_viewer.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/11_opencv_viewer.png\" alt=\"OpenVC image viewer\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003eThe OpenCV image viewer simplifies image processing inspection during application debugging. It’s also more convenient than alternative methods like saving an image to the hard drive or writing extra code to display it in a popup window.\u003c/p\u003e\n\n\n\n\u003ch3\u003eAbility to attach the debugger to an unstarted process\u003c/h3\u003e\n\n\n\n\u003cp\u003eAttaching the debugger to an unstarted local process is helpful when one part of your project is written in C++ and runs in CLion, while another is written in another language and runs in an external environment.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo try the feature:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSet a breakpoint in your code.\u003c/li\u003e\n\n\n\n\u003cli\u003eSelect \u003cem\u003eRun\u003c/em\u003e | \u003cem\u003eAttach to an Unstarted Process…\u003c/em\u003e from the main menu.\u003c/li\u003e\n\n\n\n\u003cli\u003eIn the \u003cem\u003eCommand line \u003c/em\u003efield, add a pattern to find the process using wildcard characters: \u003ccode\u003e*process_name*\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eSelect the options you need.\u003c/li\u003e\n\n\n\n\u003cli\u003eSelect a debugger to attach.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe debugger will start watching the process.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/13_debug_unstarted_process.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/13_debug_unstarted_process.png\" alt=\"Attaching the debugger to an unstarted process\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003eOnce the external process starts, the debugger will attach to it. From there, the debugging session will continue as normal, with the program running and halting at the breakpoints you have set.\u003c/p\u003e\n\n\n\n\u003ch3\u003eFormatted view for strings with JSON, XML, or HTML data\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhen debugging strings containing JSON, XML, or HTML data, or newline characters, you can view them formatted according to their code style directly in the debugger. This means you no longer need to copy unformatted values into a third-party tool for examination. \u003c/p\u003e\n\n\n\n\u003cp\u003eWhen debugging, click \u003cem\u003eView\u003c/em\u003e next to a variable to see the structured or raw data in a separate window.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2236\" height=\"1095\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/12_formatted_strings_view.png\" alt=\"Formatted view for strings with JSON, XML, or HTML\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eOther enhancements\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis release also includes a number of user experience improvements, such as renewed cloud completion, a new project status widget, and an updated UI for the new terminal. We’ve also updated the CMake bundle to 3.30.5.\u003c/p\u003e\n\n\n\n\u003ch3\u003eRenewed cloud completion powered by AI Assistant \u003c/h3\u003e\n\n\n\n\u003cp\u003eThe enhanced JetBrains AI Assistant plugin, featuring our internally trained LLM for C++, has significantly improved the speed and intelligence of CLion’s cloud code completion. AI Assistant now provides more usage scenarios, better suffix matching, and more correct code fragment completions.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne of the most significant enhancements is multiline code completion, which brings syntax highlighting and the ability to incrementally accept code suggestions. \u003c/p\u003e\n\n\n                                                \u003cfigure\u003e\u003cimg decoding=\"async\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/14_ai_assistant.gif\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/14_ai_assistant.png\" alt=\"Renewed cloud completion\" width=\"800\"/\u003e\u003c/figure\u003e\n                        \n\n\n\u003cp\u003eMultiline code completion operates alongside standard code completion and Full Line Code Completion (the latter uses the local LLM and doesn’t require sending data to the cloud). It allows you to review and accept suggestions incrementally. Additionally, you can accept suggestions word by word using the shortcut \u003cem\u003e⌥→\u003c/em\u003e on macOS or \u003cem\u003eCtrl+→\u003c/em\u003e on Windows. \u003c/p\u003e\n\n\n\n\u003ch3\u003eProject status widget\u003c/h3\u003e\n\n\n\n\u003cp\u003eCLion’s project status notifications inform you of potential problems with your project configuration and offer ways to resolve them. In the previous CLion version, 2024.2, these notifications were displayed as yellow banners in the editor until the problem was resolved. They were irrelevant for some users – for example, those who just wanted to open a .cpp file from a third-party project to read the code. Having a notification banner hanging in the editor all the time is unnecessary in such cases.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor this release, we’ve moved project status notifications from the top of the editor to a new widget in the status bar.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2760\" height=\"1608\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/16_status_widget.png\" alt=\"Project status widget\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, the notification that your file doesn’t belong to any project won’t appear until you hover over the ⚠️ icon. To view the details, you have to click on the icon. This makes notifications less distracting while still keeping the information accessible to those who want it.\u003c/p\u003e\n\n\n\n\u003ch3\u003eUpdated UI for the new terminal\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe new terminal’s interface has been redesigned to be more compact by reducing padding. This change maximizes screen space, making it easier to view and work with commands while keeping everything readable and clear. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2804\" height=\"1248\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/17_new_terminal.png\" alt=\"Updated UI for the new terminal\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eHighlighted occurrences of selected text\u003c/h3\u003e\n\n\n\n\u003cp\u003eBy default, CLion now highlights every instance of the text you select in any file type, not just .c and .cpp files. This change makes it much simpler to track where your selected text appears throughout the file. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2026\" height=\"954\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/18_highlighting_occurrences.png\" alt=\"Highlighted occurrences of selected text\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eTry CLion and give us your feedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe invite you to give CLion 2024.3 a try. If you have an active subscription, you can update it right away. New to CLion? Start your free 30-day trial today and dive into all its features and improvements immediately.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe value your feedback! If you have anything to share or if you run into any problems, please let us know through our issue \u003ca href=\"https://youtrack.jetbrains.com/issues/CPP\" target=\"_blank\" rel=\"noopener\"\u003etracker\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/download/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2024.3\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eYour CLion team\u003cbr/\u003e\n\u003cem\u003eJetBrains\u003c/em\u003e\u003cbr/\u003e\n\u003cem\u003eThe Drive to Develop\u003c/em\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to CLion Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
