{
  "id": "9272b766-1756-40a5-babd-866bf682f172",
  "title": "The Simple Math Behind Public Key Cryptography",
  "link": "https://www.wired.com/story/how-public-key-cryptography-really-works-using-only-simple-math/",
  "description": "The security system that underlies the internet makes use of a curious fact: You can broadcast part of your encryption to make your information much more secure.",
  "author": "John Pavlus",
  "published": "Sun, 15 Dec 2024 12:00:00 +0000",
  "source": "https://www.wired.com/feed/category/science/latest/rss",
  "categories": [
    "Science",
    "Science / Physics and Math",
    "Security",
    "Safety in Numbers"
  ],
  "byline": "John Pavlus",
  "length": 7297,
  "excerpt": "The security system that underlies the internet makes use of a curious fact: You can broadcast part of your encryption to make your information much more secure.",
  "siteName": "WIRED",
  "favicon": "",
  "text": "If you buy something using links in our stories, we may earn a commission. This helps support our journalism. Learn more. Please also consider subscribing to WIREDThe original version of this story appeared in Quanta Magazine.For thousands of years, if you wanted to send a secret message, there was basically one way to do it. You’d scramble the message using a special rule, known only to you and your intended audience. This rule acted like the key to a lock. If you had the key, you could unscramble the message; otherwise, you’d need to pick the lock. Some locks are so effective they can never be picked, even with infinite time and resources. But even those schemes suffer from the same Achilles’ heel that plagues all such encryption systems: How do you get that key into the right hands while keeping it out of the wrong ones?The counterintuitive solution, known as public key cryptography, relies not on keeping a key secret but rather on making it widely available. The trick is to also use a second key that you never share with anyone, even the person you’re communicating with. It’s only by using this combination of two keys—one public, one private—that someone can both scramble and unscramble a message.To understand how this works, it’s easier to think of the “keys” not as objects that fit into a lock, but as two complementary ingredients in an invisible ink. The first ingredient makes messages disappear, and the second makes them reappear. If a spy named Boris wants to send his counterpart Natasha a secret message, he writes a message and then uses the first ingredient to render it invisible on the page. (This is easy for him to do: Natasha has published an easy and well-known formula for disappearing ink.) When Natasha receives the paper in the mail, she applies the second ingredient that makes Boris’ message reappear.In this scheme, anyone can make messages invisible, but only Natasha can make them visible again. And because she never shares the formula for the second ingredient with anyone—not even Boris—she can be sure the message hasn’t been deciphered along the way. When Boris wants to receive secret messages, he simply adopts the same procedure: He publishes an easy recipe for making messages disappear (that Natasha or anyone else can use), while keeping another one just for himself that makes them reappear.In public key cryptography, the “public” and “private” keys work just like the first and second ingredients in this special invisible ink: One encrypts messages, the other decrypts them. But instead of using chemicals, public key cryptography uses mathematical puzzles called trapdoor functions. These functions are easy to compute in one direction and extremely difficult to reverse. But they also contain “trapdoors,” pieces of information that, if known, make the functions trivially easy to compute in both directions.One common trapdoor function involves multiplying two large prime numbers, an easy operation to perform. But reversing it—that is, starting with the product and finding each prime factor—is computationally impractical. To make a public key, start with two large prime numbers. These are your trapdoors. Multiply the two numbers together, then perform some additional mathematical operations. This public key can now encrypt messages. To decrypt them, you’ll need the corresponding private key, which contains the prime factors—the necessary trapdoors. With those numbers, it’s easy to decrypt the message. Keep those two prime factors secret, and the message will stay secret.Illustration: Mark Belan/Quanta MagazineThe foundations for public key cryptography were first discovered between 1970 and 1974 by British mathematicians working for the U.K. Government Communications Headquarters, the same government agency that cracked the Nazi Enigma code during World War II. Their work (which remained classified until 1997) was shared with the US National Security Agency, but due to limited and expensive computing capacity, neither government implemented the system. In 1976, the American researchers Whitfield Diffie and Martin Hellman discovered the first publicly known public key cryptography scheme, influenced by the cryptographer Ralph Merkle. Just a year later, the RSA algorithm, named after its inventors Ron Rivest, Adi Shamir and Leonard Adleman, established a practical way to use public key cryptography. It’s still in wide use today, a fundamental building block of the modern internet, enabling everything from shopping to web-based email.This two-key system also makes possible “digital signatures”—mathematical proof that a message was generated by the holder of a private key. This works because private keys can be used to encrypt messages too, not just decrypt them. Of course, this is useless for keeping messages secret: If you used your private key to scramble a message, anyone could just use the corresponding public key to unscramble it. But it does prove that you, and only you, created the message, since as the holder of the private key, only you could have encrypted the message. Cryptocurrencies like bitcoin couldn’t exist without this idea.If two cryptographic keys instead of one is so effective, why did it take millennia to discover? According to Russell Impagliazzo, a computer scientist and cryptography theorist at the University of California, San Diego, the concept of a trapdoor function just wasn’t useful enough before the invention of computers.“It’s a matter of technology,” he said. “A person in the 19th century thought of encryption as being between individual agents with military intelligence in the field—literally, in a field with guns firing. So if your first step is ‘pick two 100-digit prime numbers to multiply together,’ the battle is going to be over before you do that.” If you reduce the problem to something a human can do quickly, it’s not going to be terribly secure.But while computers helped make public key cryptography possible, they’ve also created cracks in its armor. In 1994, the mathematician Peter Shor discovered a way for quantum computers to efficiently reverse the trapdoor functions that underlie most current public key cryptography systems, including prime factorization. This algorithm, if implemented, would act like an all-purpose “reappearing ink,” capable of making any invisible message reappear. Goodbye, internet security.Luckily, quantum computers themselves are “still in the ENIAC phase,” Impagliazzo said, referring to the room-size machine built for the US Army in 1945. By the time quantum computers become sophisticated enough to pose a real threat to public key cryptography, its original trapdoor functions could be replaced by “quantum-safe” versions called lattice problems. Of course, this new computational “ink” may also become susceptible to attack in the future. But that’s the great thing about public key cryptography: As long as we can find new functions to use, we can just keep reinventing the wheel. Or in this case, the key.Original story reprinted with permission from Quanta Magazine, an editorially independent publication of the Simons Foundation whose mission is to enhance public understanding of science by covering research developments and trends in mathematics and the physical and life sciences.",
  "image": "https://media.wired.com/photos/67599c4c9ed5b79b6ef51a1d/191:100/w_1280,c_limit/PublicKeyCryptoExplainer-crKristinaArmitage-Lede-scaled.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you buy something using links in our stories, we may earn a commission. This helps support our journalism. \u003ca href=\"https://www.wired.com/2015/11/affiliate-link-policy/\"\u003eLearn more\u003c/a\u003e. Please also consider \u003ca href=\"https://subscribe.wired.com/subscribe/splits/wired/WIR_SELF?source=HCL_WIR_EDIT_HARDCODED_0_COMMERCE_AFFILIATE_ZZ\"\u003esubscribing to WIRED\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv data-testid=\"ArticlePageChunks\"\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003eThe original version\u003c/span\u003e of\u003c/em\u003e \u003ca href=\"https://www.quantamagazine.org/how-public-key-cryptography-really-works-20241115/\"\u003e\u003cem\u003ethis story\u003c/em\u003e\u003c/a\u003e \u003cem\u003eappeared in \u003ca href=\"https://www.quantamagazine.org\"\u003eQuanta Magazine\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eFor thousands of years, if you wanted to send a secret message, there was basically one way to do it. You’d scramble the message using a special rule, known only to you and your intended audience. This rule acted like the key to a lock. If you had the key, you could unscramble the message; otherwise, you’d need to pick the lock. \u003ca data-offer-url=\"https://link.springer.com/chapter/10.1007/978-3-031-33386-6_1\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://link.springer.com/chapter/10.1007/978-3-031-33386-6_1\u0026#34;}\" href=\"https://link.springer.com/chapter/10.1007/978-3-031-33386-6_1\" rel=\"nofollow noopener\" target=\"_blank\"\u003eSome locks\u003c/a\u003e are so effective they can never be picked, even with infinite time and resources. But even those schemes suffer from the same Achilles’ heel that plagues all such encryption systems: How do you get that key into the right hands while keeping it out of the wrong ones?\u003c/p\u003e\u003cp\u003eThe counterintuitive solution, known as \u003ca data-offer-url=\"https://csrc.nist.gov/glossary/term/public_key_cryptography\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://csrc.nist.gov/glossary/term/public_key_cryptography\u0026#34;}\" href=\"https://csrc.nist.gov/glossary/term/public_key_cryptography\" rel=\"nofollow noopener\" target=\"_blank\"\u003epublic key cryptography\u003c/a\u003e, relies not on keeping a key secret but rather on making it widely available. The trick is to also use a second key that you never share with anyone, even the person you’re communicating with. It’s only by using this combination of two keys—one public, one private—that someone can both scramble and unscramble a message.\u003c/p\u003e\u003cp\u003eTo understand how this works, it’s easier to think of the “keys” not as objects that fit into a lock, but as two complementary ingredients in an invisible ink. The first ingredient makes messages disappear, and the second makes them reappear. If a spy named Boris wants to send his counterpart Natasha a secret message, he writes a message and then uses the first ingredient to render it invisible on the page. (This is easy for him to do: Natasha has published an easy and well-known formula for disappearing ink.) When Natasha receives the paper in the mail, she applies the second ingredient that makes Boris’ message reappear.\u003c/p\u003e\u003cp\u003eIn this scheme, anyone can make messages invisible, but only Natasha can make them visible again. And because she never shares the formula for the second ingredient with anyone—not even Boris—she can be sure the message hasn’t been deciphered along the way. When Boris wants to receive secret messages, he simply adopts the same procedure: He publishes an easy recipe for making messages disappear (that Natasha or anyone else can use), while keeping another one just for himself that makes them reappear.\u003c/p\u003e\u003cp\u003eIn public key cryptography, the “public” and “private” keys work just like the first and second ingredients in this special invisible ink: One encrypts messages, the other decrypts them. But instead of using chemicals, public key cryptography uses mathematical puzzles called \u003ca href=\"https://www.quantamagazine.org/graduate-student-solves-quantum-verification-problem-20181008/\"\u003etrapdoor functions\u003c/a\u003e. These functions are easy to compute in one direction and extremely difficult to reverse. But they also contain “trapdoors,” pieces of information that, if known, make the functions trivially easy to compute in both directions.\u003c/p\u003e\u003cp\u003eOne common trapdoor function involves multiplying two large prime numbers, an easy operation to perform. But reversing it—that is, starting with the product and finding each prime factor—is computationally impractical. To make a public key, start with two large prime numbers. These are your trapdoors. Multiply the two numbers together, then perform some additional \u003ca data-offer-url=\"https://dl.acm.org/doi/10.1145/359340.359342\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://dl.acm.org/doi/10.1145/359340.359342\u0026#34;}\" href=\"https://dl.acm.org/doi/10.1145/359340.359342\" rel=\"nofollow noopener\" target=\"_blank\"\u003emathematical operations\u003c/a\u003e. This public key can now encrypt messages. To decrypt them, you’ll need the corresponding private key, which contains the prime factors—the necessary trapdoors. With those numbers, it’s easy to decrypt the message. Keep those two prime factors secret, and the message will stay secret.\u003c/p\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cfigure\u003e\u003cp\u003e\u003cspan\u003eIllustration: Mark Belan/\u003cem\u003eQuanta Magazine\u003c/em\u003e\u003c/span\u003e\u003c/p\u003e\u003c/figure\u003e\u003cp\u003eThe foundations for public key cryptography were first discovered between 1970 and 1974 by British mathematicians working for the U.K. Government Communications Headquarters, the same government agency that cracked the Nazi Enigma code during World War II. Their work (which remained classified until 1997) was shared with the US National Security Agency, but due to limited and expensive computing capacity, neither government implemented the system. In 1976, the American researchers Whitfield Diffie and Martin Hellman discovered the first publicly known \u003ca data-offer-url=\"https://ieeexplore.ieee.org/document/1055638\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://ieeexplore.ieee.org/document/1055638\u0026#34;}\" href=\"https://ieeexplore.ieee.org/document/1055638\" rel=\"nofollow noopener\" target=\"_blank\"\u003epublic key cryptography scheme\u003c/a\u003e, influenced by the cryptographer Ralph Merkle. Just a year later, the RSA algorithm, named after its inventors Ron Rivest, Adi Shamir and Leonard Adleman, established a practical way to use public key cryptography. It’s still in wide use today, a fundamental building block of the modern internet, enabling everything from shopping to web-based email.\u003c/p\u003e\u003cp\u003eThis two-key system also makes possible “digital signatures”—mathematical proof that a message was generated by the holder of a private key. This works because private keys can be used to encrypt messages too, not just decrypt them. Of course, this is useless for keeping messages secret: If you used your private key to scramble a message, anyone could just use the corresponding public key to unscramble it. But it does prove that you, and only you, created the message, since as the holder of the private key, only you could have encrypted the message. Cryptocurrencies like bitcoin couldn’t exist without this idea.\u003c/p\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003eIf two cryptographic keys instead of one is so effective, why did it take millennia to discover? According to \u003ca href=\"https://www.quantamagazine.org/the-researcher-who-explores-computation-by-conjuring-new-worlds-20240327/\"\u003eRussell Impagliazzo\u003c/a\u003e, a computer scientist and cryptography theorist at the University of California, San Diego, the concept of a trapdoor function just wasn’t useful enough before the invention of computers.\u003c/p\u003e\u003cp\u003e“It’s a matter of technology,” he said. “A person in the 19th century thought of encryption as being between individual agents with military intelligence in the field—literally, in a field with guns firing. So if your first step is ‘pick two 100-digit prime numbers to multiply together,’ the battle is going to be over before you do that.” If you reduce the problem to something a human can do quickly, it’s not going to be terribly secure.\u003c/p\u003e\u003cp\u003eBut while computers helped make public key cryptography possible, they’ve also created cracks in its armor. In 1994, the mathematician Peter Shor discovered a way for \u003ca href=\"https://www.quantamagazine.org/tag/quantum-computing/\"\u003equantum computers\u003c/a\u003e to efficiently reverse the trapdoor functions that underlie most current public key cryptography systems, including prime factorization. This algorithm, if implemented, would act like an all-purpose “reappearing ink,” capable of making any invisible message reappear. Goodbye, internet security.\u003c/p\u003e\u003cp\u003eLuckily, quantum computers themselves are “still in the ENIAC phase,” Impagliazzo said, referring to the room-size machine built for the US Army in 1945. By the time quantum computers become sophisticated enough to pose a real threat to public key cryptography, its original trapdoor functions could be replaced by “quantum-safe” versions called \u003ca href=\"https://www.quantamagazine.org/cryptographys-future-will-be-quantum-safe-heres-how-it-will-work-20221109/\"\u003elattice problems\u003c/a\u003e. Of course, this new computational “ink” may also become susceptible to attack in the future. But that’s the great thing about public key cryptography: As long as we can find new functions to use, we can just keep reinventing the wheel. Or in this case, the key.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca href=\"https://www.quantamagazine.org/how-public-key-cryptography-really-works-20241115/\"\u003e\u003cem\u003eOriginal story\u003c/em\u003e\u003c/a\u003e \u003cem\u003ereprinted with permission from \u003ca href=\"https://www.quantamagazine.org\"\u003eQuanta Magazine\u003c/a\u003e, an editorially independent publication of the\u003c/em\u003e \u003ca href=\"https://www.simonsfoundation.org\"\u003e\u003cem\u003eSimons Foundation\u003c/em\u003e\u003c/a\u003e \u003cem\u003ewhose mission is to enhance public understanding of science by covering research developments and trends in mathematics and the physical and life sciences.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-12-15T07:00:00-05:00",
  "modifiedTime": "2024-12-15T12:00:00Z"
}
