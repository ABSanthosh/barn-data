{
  "id": "b22de6fc-cccb-4f1d-a1de-b5b42ec876fe",
  "title": "Migration Guide from Retrofit and KAPT to Ktor and KSP",
  "link": "https://proandroiddev.com/migration-guide-from-retrofit-and-kapt-to-ktor-and-ksp-38c8cd5dc16c?source=rss----c72404660798---4",
  "description": "",
  "author": "Siva Ganesh Kantamani",
  "published": "Mon, 25 Nov 2024 08:33:24 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "retrofit",
    "ksp",
    "kotlin-multiplatform",
    "ktor",
    "kapt"
  ],
  "byline": "Siva Ganesh Kantamani",
  "length": 6643,
  "excerpt": "In this article, you’ll learn why we might need to migrate from Retrofit to Ktor and KAPT to KSP. By the end of this article, you will be able to remove Retrofit and KAPT from the project safely…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Incremental Migration from Android to KMP Project — Part 2Network Client and Annotation Processor migration to support Kotlin MultiplatformPhoto by Hardik Sharma on UnsplashTakeaway from this articleIn this article, you’ll learn why we might need to migrate from Retrofit to Ktor and KAPT to KSP. By the end of this article, you will be able to remove Retrofit and KAPT from the project safely.IntroductionThis is part 2 in the series of migrations from the Android project to the kotlin multiplatform project. In Part 1, we discussed the KMP technology and the tech stack used in migrating applications to KMP. Then as a first step, we started with dependency injection migration from Hilt to Koin. The following is the link to the article in case you missed it.In this part of the series, we’ll focus on migrating two main things:Android network library Retrofit to purely Kotlin-based Ktor.KAPT annotation processor to generate the code to KSP (Kotlin Symbol Processing).Retrofit is a stable and very popular library in the Android world, but the lack of KMP support leaves me with no choice but to migrate. Ktor is the obvious choice to migrate as it’s built purely with Kotlin and is being maintained by Google. Ktor is more than just another client library for networking, to learn more about it read the following in-depth articles:How to Use Ktor in Your Android AppKtor in Server-Side Development: The BasicsKapt (Kotlin Annotation Processing Tool) enables Java annotation processors usage in Kotlin projects, even when the processors aren’t designed for Kotlin. KSP (Kotlin Symbol Processing) offers a Kotlin-centric alternative to Kapt. Unlike Kapt, KSP directly analyzes Kotlin code, making it up to twice as fast. Additionally, it has a deeper understanding of Kotlin’s language features.Retrofit to Ktor MigrationIntegrationTo integrate ktor into the project add the following lines under the dependencies node in the app module and other modules where you might have to make the network calls.// Ktorimplementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2\")implementation(\"io.ktor:ktor-client-core:2.3.12\")// CIO - for JVM and Androidimplementation(\"io.ktor:ktor-client-cio:2.3.12\")implementation(\"io.ktor:ktor-client-content-negotiation:2.3.12\")implementation(\"io.ktor:ktor-serialization-kotlinx-json:2.3.12\")Then add the following line under the plugins section in the project-level gradle file.id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23' apply falseNow add the following lines in app/proguard-rules.pro to make sure Ktor works as expected in release builds even with obfuscation.# Ktor-keep class io.ktor.** { *; }-keep class kotlinx.coroutines.** { *; }-dontwarn kotlinx.atomicfu.**-dontwarn io.netty.**-dontwarn com.typesafe.**-dontwarn org.slf4j.**Then remove all the Retrofit-related dependencies and hit the sync now button.DI MigrationNow we need to update the Koin network and data source modules, replacing the Retrofit with Ktor. Let’s start with the network module, The following is the Retrofit setup of the network module.val networkModule = module { single\u003cGson\u003e { GsonFactory.create() } single\u003cConverter.Factory\u003e { GsonConverterFactory.create(get()) } single\u003cOkHttpClient\u003e { OkHttpClientFactory.create() } single\u003cRetrofit\u003e { RetrofitFactory.create( okHttpClient = get(), converterFactory = get(), ) }}After migration to Ktor, it looks as follows:val networkModule = module { single\u003cJson\u003e { Json { ignoreUnknownKeys = true isLenient = true prettyPrint = true encodeDefaults = true } } single\u003cHttpClient\u003e { HttpClient(CIO) { install(ContentNegotiation) { get\u003cJson\u003e() } } }}Now we need to replace the retrofit inject with the Ktor client, as I’ve a single API in the application, I’m replacing the retrofit service interface with Kotr client and requesting with the client directly. But the real-time use of Ktor will be much more complicated with multiple routes and header configuration for which please refer to this article.Before:class WizardRemoteDataSource constructor( private val api: RetrofitServiceApi,): WizardDataSourceAfter:class WizardRemoteDataSource constructor( private val httpClient: HttpClient,): WizardDataSourceThat’s all, now the project network module is compatible with kotlin multiplatform.KAPT to KSP MigrationBefore migrating your code to KSP, there are a few important considerations to keep in mind. Since KSP is relatively new, some libraries may not yet support it. However, there’s no need to worry — you can run KSP and Kapt side by side in your project.It’s worth noting that Kapt is now in maintenance mode, so it’s a good idea to encourage your library providers to upgrade to KSP as soon as possible. Fortunately, many popular libraries like Dagger, Moshi, Room, and others already support KSP. To know more about supported libraries refer to this link.Now let’s start the migration, I prefer to increase the Kotlin version before integrating KSP, in the project-level gradle upgrade Kotlin plugin.// Before id 'org.jetbrains.kotlin.android' version '1.8.10' apply false// After id 'org.jetbrains.kotlin.android' version '2.0.0' apply falseThen move to the module-level gradle files starting with the app module, remove the kapt and add ksp plugin, have a look:Then remove all the kapt references like the following from the gradle:As a final step replace all the kapt dependency integration to ksp as shown below:Now hit the “sync now” button and then rebuild the project to complete the code generation.The following are some common issues to look out for stated in the Android Official Documentation:Some libraries don’t support the same set of features with kapt and KSP. If your code breaks after migrating, check the library’s documentation.KSP has more accurate Kotlin-type information than kapt (for example, about nullability), which means that KSP processors can be more precise about type requirements. This might require some fixes in your source code as well, in addition to updating your build files.If you were previously passing in arguments to the annotation processor, you’ll likely need to pass in those arguments to KSP now. Note that the format of the arguments might differ between kapt and KSP. See the KSP documentation and consult the documentation of the library you’re using to learn more.That is all for now, hope you learned something useful, thanks for reading.You can find me on Medium, Twitter, Quora and LinkedIn.",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*K_Blg9wuGY60ti9k",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"1e00\" aria-label=\"kicker paragraph\"\u003eIncremental Migration from Android to KMP Project — Part 2\u003c/h2\u003e\u003cdiv\u003e\u003ch2 id=\"d942\"\u003eNetwork Client and Annotation Processor migration to support Kotlin Multiplatform\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://sgkantamani.medium.com/?source=post_page---byline--38c8cd5dc16c--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Siva Ganesh Kantamani\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*bVSRBKr1Pb75KQuhsPXO7g.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--38c8cd5dc16c--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@v4ssu?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHardik Sharma\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"06ff\"\u003eTakeaway from this article\u003c/h2\u003e\u003cp id=\"57a4\"\u003eIn this article, you’ll learn why we might need to migrate from Retrofit to Ktor and KAPT to KSP. By the end of this article, you will be able to remove Retrofit and KAPT from the project safely.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"9ffa\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"1de3\"\u003eThis is part 2 in the series of migrations from the Android project to the kotlin multiplatform project. In \u003ca href=\"https://sgkantamani.medium.com/migration-guide-from-hilt-to-koin-ea8083d3f7a9\" rel=\"noopener\"\u003ePart 1\u003c/a\u003e, we discussed the KMP technology and the tech stack used in migrating applications to KMP. Then as a first step, we started with dependency injection migration from Hilt to Koin. The following is the link to the article in case you missed it.\u003c/p\u003e\u003cp id=\"1cb3\"\u003eIn this part of the series, we’ll focus on migrating two main things:\u003c/p\u003e\u003col\u003e\u003cli id=\"b1c6\"\u003eAndroid network library Retrofit to purely Kotlin-based Ktor.\u003c/li\u003e\u003cli id=\"ec32\"\u003eKAPT annotation processor to generate the code to KSP (Kotlin Symbol Processing).\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"d47d\"\u003eRetrofit is a stable and very popular library in the Android world, but the lack of KMP support leaves me with no choice but to migrate. Ktor is the obvious choice to migrate as it’s built purely with Kotlin and is being maintained by Google. Ktor is more than just another client library for networking, to learn more about it read the following in-depth articles:\u003c/p\u003e\u003col\u003e\u003cli id=\"9831\"\u003e\u003ca href=\"https://betterprogramming.pub/how-to-use-ktor-in-your-android-app-a99f50cc9444\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHow to Use Ktor in Your Android App\u003c/a\u003e\u003c/li\u003e\u003cli id=\"371e\"\u003e\u003ca href=\"https://betterprogramming.pub/ktor-in-server-side-development-the-basics-81ce4bbba878\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKtor in Server-Side Development: The Basics\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"9188\"\u003eKapt (Kotlin Annotation Processing Tool) enables Java annotation processors usage in Kotlin projects, even when the processors aren’t designed for Kotlin. KSP (Kotlin Symbol Processing) offers a Kotlin-centric alternative to Kapt. Unlike Kapt, KSP directly analyzes Kotlin code, making it up to twice as fast. Additionally, it has a deeper understanding of Kotlin’s language features.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"60f3\"\u003eRetrofit to Ktor Migration\u003c/h2\u003e\u003ch2 id=\"2cbf\"\u003eIntegration\u003c/h2\u003e\u003cp id=\"b762\"\u003eTo integrate ktor into the project add the following lines under the dependencies node in the app module and other modules where you might have to make the network calls.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4c7d\"\u003e// Ktor\u003cbr/\u003eimplementation(\u0026#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2\u0026#34;)\u003cbr/\u003eimplementation(\u0026#34;io.ktor:ktor-client-core:2.3.12\u0026#34;)\u003cbr/\u003e// CIO - for JVM and Android\u003cbr/\u003eimplementation(\u0026#34;io.ktor:ktor-client-cio:2.3.12\u0026#34;)\u003cbr/\u003eimplementation(\u0026#34;io.ktor:ktor-client-content-negotiation:2.3.12\u0026#34;)\u003cbr/\u003eimplementation(\u0026#34;io.ktor:ktor-serialization-kotlinx-json:2.3.12\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"af28\"\u003eThen add the following line under the plugins section in the project-level gradle file.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b253\"\u003eid \u0026#39;org.jetbrains.kotlin.plugin.serialization\u0026#39; version \u0026#39;1.9.23\u0026#39; apply false\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5cc5\"\u003eNow add the following lines in \u003ccode\u003eapp/proguard-rules.pro\u003c/code\u003e to make sure Ktor works as expected in release builds even with obfuscation.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"336e\"\u003e# Ktor\u003cbr/\u003e-keep class io.ktor.** { *; }\u003cbr/\u003e-keep class kotlinx.coroutines.** { *; }\u003cbr/\u003e-dontwarn kotlinx.atomicfu.**\u003cbr/\u003e-dontwarn io.netty.**\u003cbr/\u003e-dontwarn com.typesafe.**\u003cbr/\u003e-dontwarn org.slf4j.**\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a3fe\"\u003eThen remove all the Retrofit-related dependencies and hit the sync now button.\u003c/p\u003e\u003ch2 id=\"e940\"\u003eDI Migration\u003c/h2\u003e\u003cp id=\"98fb\"\u003eNow we need to update the Koin network and data source modules, replacing the Retrofit with Ktor. Let’s start with the network module, The following is the Retrofit setup of the network module.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7b9f\"\u003eval networkModule = module {\u003cbr/\u003e    single\u0026lt;Gson\u0026gt; { GsonFactory.create() }\u003cbr/\u003e    single\u0026lt;Converter.Factory\u0026gt; { GsonConverterFactory.create(get()) }\u003cbr/\u003e    single\u0026lt;OkHttpClient\u0026gt; {\u003cbr/\u003e        OkHttpClientFactory.create()\u003cbr/\u003e    }\u003cbr/\u003e    single\u0026lt;Retrofit\u0026gt; {\u003cbr/\u003e        RetrofitFactory.create(\u003cbr/\u003e            okHttpClient = get(),\u003cbr/\u003e            converterFactory = get(),\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"96df\"\u003eAfter migration to Ktor, it looks as follows:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4738\"\u003eval networkModule = module {\u003cbr/\u003e    single\u0026lt;Json\u0026gt; {\u003cbr/\u003e        Json {\u003cbr/\u003e            ignoreUnknownKeys = true\u003cbr/\u003e            isLenient = true\u003cbr/\u003e            prettyPrint = true\u003cbr/\u003e            encodeDefaults = true\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cp\u003e    single\u0026lt;HttpClient\u0026gt; {\u003cbr/\u003e        HttpClient(CIO) {\u003cbr/\u003e            install(ContentNegotiation) {\u003cbr/\u003e                get\u0026lt;Json\u0026gt;()\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c160\"\u003eNow we need to replace the retrofit inject with the Ktor client, as I’ve a single API in the application, I’m replacing the retrofit service interface with Kotr client and requesting with the client directly. But the real-time use of Ktor will be much more complicated with multiple routes and header configuration for which please refer to this \u003ca href=\"https://betterprogramming.pub/how-to-use-ktor-in-your-android-app-a99f50cc9444\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003earticle\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"f87d\"\u003eBefore:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d36a\"\u003eclass WizardRemoteDataSource constructor(\u003cbr/\u003e    private val api: RetrofitServiceApi,\u003cbr/\u003e): WizardDataSource\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a3b8\"\u003eAfter:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7166\"\u003eclass WizardRemoteDataSource constructor(\u003cbr/\u003e    private val httpClient: HttpClient,\u003cbr/\u003e): WizardDataSource\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0102\"\u003eThat’s all, now the project network module is compatible with kotlin multiplatform.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"5124\"\u003eKAPT to KSP Migration\u003c/h2\u003e\u003cp id=\"173d\"\u003eBefore migrating your code to KSP, there are a few important considerations to keep in mind. Since KSP is relatively new, some libraries may not yet support it. However, there’s no need to worry — you can run KSP and Kapt side by side in your project.\u003c/p\u003e\u003cp id=\"9078\"\u003eIt’s worth noting that Kapt is now in maintenance mode, so it’s a good idea to encourage your library providers to upgrade to KSP as soon as possible. Fortunately, many popular libraries like Dagger, Moshi, Room, and others already support KSP. To know more about supported libraries refer to this \u003ca href=\"https://kotlinlang.org/docs/ksp-overview.html#resources\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elink\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"f553\"\u003eNow let’s start the migration, I prefer to increase the Kotlin version before integrating KSP, in the project-level gradle upgrade Kotlin plugin.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5501\"\u003e\u003cbr/\u003e// Before\u003cbr/\u003e    id \u0026#39;org.jetbrains.kotlin.android\u0026#39; version \u0026#39;1.8.10\u0026#39; apply false\u003cp\u003e// After\u003c/p\u003e\u003cp\u003e    id \u0026#39;org.jetbrains.kotlin.android\u0026#39; version \u0026#39;2.0.0\u0026#39; apply false\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1b55\"\u003eThen move to the module-level gradle files starting with the app module, remove the \u003ccode\u003ekapt\u003c/code\u003e and add \u003ccode\u003eksp\u003c/code\u003e plugin, have a look:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1d7e\"\u003eThen remove all the \u003ccode\u003ekapt\u003c/code\u003e references like the following from the gradle:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"d49c\"\u003eAs a final step replace all the \u003ccode\u003ekapt\u003c/code\u003e dependency integration to \u003ccode\u003eksp\u003c/code\u003e as shown below:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0ccf\"\u003eNow hit the “sync now” button and then rebuild the project to complete the code generation.\u003c/p\u003e\u003cp id=\"b70e\"\u003eThe following are some common issues to look out for stated in the Android Official Documentation:\u003c/p\u003e\u003cul\u003e\u003cli id=\"196f\"\u003eSome libraries don’t support the same set of features with kapt and KSP. If your code breaks after migrating, check the library’s documentation.\u003c/li\u003e\u003cli id=\"c5eb\"\u003eKSP has more accurate Kotlin-type information than kapt (for example, about nullability), which means that KSP processors can be more precise about type requirements. This might require some fixes in your source code as well, in addition to updating your build files.\u003c/li\u003e\u003cli id=\"77f4\"\u003eIf you were previously passing in arguments to the annotation processor, you’ll likely need to pass in those arguments to KSP now. Note that the format of the arguments might differ between kapt and KSP. See the \u003ca href=\"https://kotlinlang.org/docs/ksp-quickstart.html#pass-options-to-processors\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKSP documentation\u003c/a\u003e and consult the documentation of the library you’re using to learn more.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"f11f\"\u003eThat is all for now, hope you learned something useful, thanks for reading.\u003c/p\u003e\u003cp id=\"cf25\"\u003eYou can find me on \u003ca href=\"https://medium.com/@sgkantamani\" rel=\"noopener\"\u003eMedium\u003c/a\u003e, \u003ca href=\"https://twitter.com/SG5202\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTwitter\u003c/a\u003e, \u003ca href=\"https://www.quora.com/profile/Siva-Ganesh-Kantamani-1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eQuora\u003c/a\u003e and \u003ca href=\"https://www.linkedin.com/in/siva-kantamani-bb59309b/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-11-25T08:33:24.031Z",
  "modifiedTime": null
}
