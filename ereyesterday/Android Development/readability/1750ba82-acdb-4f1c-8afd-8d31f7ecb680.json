{
  "id": "1750ba82-acdb-4f1c-8afd-8d31f7ecb680",
  "title": "Maps in Jetpack Compose — A beginner’s guide",
  "link": "https://blog.kotlin-academy.com/maps-in-jetpack-compose-a-beginners-guide-a7f01e1c3ff4?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Anitaa Murthy",
  "published": "Tue, 15 Apr 2025 07:50:52 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "android",
    "maps",
    "kotlin",
    "androiddev",
    "jetpack-compose"
  ],
  "byline": "Anitaa Murthy",
  "length": 6190,
  "excerpt": "I recently got the chance to work on a ride-hailing app for one of my clients, and it was my first real experience using Google Maps in a Jetpack Compose setup. While Compose itself felt familiar…",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "I recently got the chance to work on a ride-hailing app for one of my clients, and it was my first real experience using Google Maps in a Jetpack Compose setup. While Compose itself felt familiar, integrating maps came with a bit of a learning curve — not because of a lack of documentation, but because there was too much scattered across different sources.Having implemented it in an android app recently, I thought I would highlight some of the basic steps required to implement this feature in an android app.So let’s begin!Step 1: Add google maps dependenciesThe first step is to add the Google Maps dependency to our app. I have used Gradle’s version catalogs to declare dependencies in the app.You can checkout my other article on version catalogs to get a deeper understanding of what is required here.For now, I’ll just share the relevant files used to add these dependencies.https://gist.github.com/anitaa1990/ac546d5ead9ca5e0762dff447afb9920https://gist.github.com/anitaa1990/c94b43a53619d0cfa443d0ccebc6f7f5We also need to request for the permission in our AndroidManifest.xml file. And , we’ll also need to an API key to our project. You can follow this guide for obtaining a key and this guide for configuring the API key. Now, let’s update our manifest file:https://gist.github.com/anitaa1990/f14c065b7b2f627113654bd0f9e289f3Step 2: GoogleMap ComposableBefore diving into the GoogleMap composable, it’s important to make sure your app has the necessary location permissions. I won’t go into the full implementation here, but if you’re looking for a simple way to handle them, feel free to check out this utility class I often use in my projects.With all of this in place, we’ll be able to access the maps API and load a Google Map instance into our app.https://gist.github.com/anitaa1990/b37dc8f5c6b88e2b52a22b403245d5c8This is our GoogleMapView composable. It includes the GoogleMap with optional parameters that can help us configure the appearance and behaviour of the map. It includes:cameraPositionState : which controls the camera’s position on the map — i.e., where it is centered and what zoom level it starts with. You can update or observe the camera movement using this state. We use CameraPosition.fromLatLngZoom(LatLng(…), zoomLevel) to define zoom levels. Typical zoom levels are — 1–5: World level (very zoomed out), — 10–12: City level, — 15+: Streets/buildings and — 20+: Building interiors.MapProperties : controls the high-level map behavior and appearance. Some of it’s properties include: —a) mapType : — which can be NORMAL, SATELLITE, TERRAIN, or HYBRID. — b) isTrafficEnabled : — which displays real-time traffic info overlay. — c) isBuildingsEnabled : — which toggles 3D building renderings in supported cities and — d) isIndoorEnabled : — which shows indoor floor plans when zoomed into certain locations (like malls).MapUiSettings : controls the visual controls and gestures inside the map UI.Step 3: Defining MarkersNow that the map is in place, the next step is adding markers to indicate locations on the map. We can pass LatLng points to our maps to mark certain locations.Marker is a composable that allows you to add a visual pin to a location on your GoogleMap.MarkerState is used to control or observe the position of a marker.Basic Marker UsageWith this in place, we’ll now be able to see a Marker displayed on our map.https://gist.github.com/anitaa1990/aaafba9c967c107628271a965b5af18bBasic Marker with InfoTextWe can assign a title to our Marker using the title argument, which takes string value to be displayed in a popup when the Marker is clicked. We can also provide a string value for the snippet argument, this is where we can provide some additional text to be displayed beneath the title.https://gist.github.com/anitaa1990/010efd667fec16f0f1d7d898533dc689Marker with custom iconWe can also add a custom icon by providing a drawable to be used for our marker.https://gist.github.com/anitaa1990/9f8d971210fd0a7ce1fc25ac6212c533Step 4: Defining PolylinesThe Polyline composable is used to visually connect multiple geographic points on a map—typically to represent a route, path, or boundary. It takes a list of LatLng coordinates and draws a continuous line through them, allowing you to highlight how locations are connected. It’s a lightweight but powerful way to display route information, such as driving directions, delivery paths, or user movement.Basic PolylineWith routes defined in the map, we’ll now be able to see a path between the two locations.https://gist.github.com/anitaa1990/b814b8d39c84e52d1b6fe58d7fd192f2Customising our PolylineBy default, the color argument of the Polyline will default to Black when not provided. We can customise it by defining the following properties:color — The color of the polylinewidth — Thickness of the line in pixels.jointType — How line joins are drawn: BEVEL, ROUND, DEFAULT etc.startCap / endCap — Style of the start/end of the line.pattern — Dashed or dotted lines, using Dot(), Dash(), Gap()https://gist.github.com/anitaa1990/b5430336fda256b6603c1b83dceae896Adding gradient support to our PolylineI had a requirement to create a gradient polyline using Jetpack Compose. But Jetpack Compose Maps does not yet support native gradient polylines, but you can simulate it by drawing multiple short segments with different colors.https://gist.github.com/anitaa1990/1b1071ef37ae47749f5b17450ed1ae60https://gist.github.com/anitaa1990/99c0dee70cb831f4c20dc098e091b486Step 5: Animating marker across the PolylineWe’ve all seen those animated car or bike icons in ride-hailing or food delivery apps — where the vehicle glides smoothly along the route as the driver makes their way to you. In this step, we’ll recreate that effect using a moving marker along the polyline we previously drew.The key idea here is to interpolate between consecutive points in the route and update the marker’s position and bearing in small steps. This creates a smooth animation that mimics real movement.https://gist.github.com/anitaa1990/ca44ae469ae57a1e83fcccd7bb26d502And we have some helper methods:https://gist.github.com/anitaa1990/24989761828e5a2a3e469d0657f4d5acAnd this is the final behaviour:",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*2Ucu6UxZ2BzAvs3BGym_nw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"4bf1\"\u003eI recently got the chance to work on a ride-hailing app for one of my clients, and it was my first real experience using Google Maps in a Jetpack Compose setup. While Compose itself felt familiar, integrating maps came with a bit of a learning curve — not because of a lack of documentation, but because there was \u003cem\u003etoo much\u003c/em\u003e scattered across different sources.\u003c/p\u003e\u003cp id=\"4aff\"\u003eHaving implemented it in an android app recently, I thought I would highlight some of the basic steps required to implement this feature in an android app.\u003c/p\u003e\u003cp id=\"00c5\"\u003eSo let’s begin!\u003c/p\u003e\u003ch2 id=\"8c60\"\u003eStep 1: Add google maps dependencies\u003c/h2\u003e\u003cp id=\"19ce\"\u003eThe first step is to add the Google Maps dependency to our app. I have used Gradle’s \u003ca href=\"https://docs.gradle.org/current/userguide/platforms.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eversion catalogs\u003c/a\u003e to declare dependencies in the app.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"1c91\"\u003eYou can checkout my other article on \u003ca href=\"https://medium.com/@anitaa_1990/4-minute-guide-on-adding-dependencies-using-version-catalogs-f68cced04fcd\" rel=\"noopener\"\u003eversion catalogs\u003c/a\u003e to get a deeper understanding of what is required here.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"a43f\"\u003eFor now, I’ll just share the relevant files used to add these dependencies.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/ac546d5ead9ca5e0762dff447afb9920\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/ac546d5ead9ca5e0762dff447afb9920\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/c94b43a53619d0cfa443d0ccebc6f7f5\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/c94b43a53619d0cfa443d0ccebc6f7f5\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"3558\"\u003eWe also need to request for the permission in our \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e file. And , we’ll also need to an API key to our project. You can follow \u003ca href=\"https://developers.google.com/maps/documentation/android-sdk/get-api-key\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethis\u003c/a\u003e guide for obtaining a key and \u003ca href=\"https://developers.google.com/maps/documentation/android-sdk/config\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethis guide\u003c/a\u003e for configuring the API key. Now, let’s update our manifest file:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/f14c065b7b2f627113654bd0f9e289f3\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/f14c065b7b2f627113654bd0f9e289f3\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"717d\"\u003eStep 2: GoogleMap Composable\u003c/h2\u003e\u003cp id=\"11f5\"\u003eBefore diving into the \u003ccode\u003eGoogleMap\u003c/code\u003e composable, it’s important to make sure your app has the necessary location permissions. I won’t go into the full implementation here, but if you’re looking for a simple way to handle them, feel free to check out \u003ca href=\"https://github.com/anitaa1990/Jetpack-Compose-Playground/tree/main?tab=readme-ov-file#runtime-permissions\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethis utility class\u003c/a\u003e I often use in my projects.\u003c/p\u003e\u003cp id=\"e538\"\u003eWith all of this in place, we’ll be able to access the maps API and load a Google Map instance into our app.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/b37dc8f5c6b88e2b52a22b403245d5c8\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/b37dc8f5c6b88e2b52a22b403245d5c8\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"1ae6\"\u003eThis is our \u003ccode\u003eGoogleMapView\u003c/code\u003e composable. It includes the \u003ccode\u003eGoogleMap\u003c/code\u003e with optional parameters that can help us configure the appearance and behaviour of the map. It includes:\u003c/p\u003e\u003cul\u003e\u003cli id=\"780d\"\u003e\u003ccode\u003e\u003cstrong\u003ecameraPositionState\u003c/strong\u003e\u003c/code\u003e : which controls the camera’s position on the map — i.e., where it is centered and what zoom level it starts with. You can update or observe the camera movement using this state. We use \u003ccode\u003e\u003cstrong\u003eCameraPosition.fromLatLngZoom(LatLng(…), zoomLevel)\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eto define zoom levels. Typical zoom levels are\u003cbr/\u003e — \u003ccode\u003e1–5\u003c/code\u003e: World level (very zoomed out), \u003cbr/\u003e — \u003ccode\u003e10–12\u003c/code\u003e: City level,\u003cbr/\u003e — \u003ccode\u003e15+\u003c/code\u003e: Streets/buildings and\u003cbr/\u003e — \u003ccode\u003e20+\u003c/code\u003e: Building interiors.\u003c/li\u003e\u003cli id=\"9bbb\"\u003e\u003ccode\u003e\u003cstrong\u003eMapProperties\u003c/strong\u003e\u003c/code\u003e : controls the high-level map behavior and appearance. Some of it’s properties include: \u003cbr/\u003e—a) \u003ccode\u003e\u003cstrong\u003emapType\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e : — \u003c/strong\u003ewhich can be NORMAL, SATELLITE, TERRAIN, or HYBRID. \u003cbr/\u003e — b) \u003ccode\u003e\u003cstrong\u003eisTrafficEnabled\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e : — \u003c/strong\u003ewhich displays real-time traffic info overlay. — c) \u003ccode\u003e\u003cstrong\u003eisBuildingsEnabled\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e : — \u003c/strong\u003ewhich toggles 3D building renderings in supported cities and \u003cbr/\u003e — d) \u003ccode\u003e\u003cstrong\u003eisIndoorEnabled\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e : — \u003c/strong\u003ewhich shows indoor floor plans when zoomed into certain locations (like malls).\u003c/li\u003e\u003cli id=\"9746\"\u003e\u003ccode\u003e\u003cstrong\u003eMapUiSettings\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e : \u003c/strong\u003econtrols the visual controls and gestures inside the map UI.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8a9b\"\u003eStep 3: Defining Markers\u003c/h2\u003e\u003cp id=\"5f05\"\u003eNow that the map is in place, the next step is adding markers to indicate locations on the map. We can pass \u003ccode\u003eLatLng\u003c/code\u003e points to our maps to mark certain locations.\u003c/p\u003e\u003cul\u003e\u003cli id=\"d0fb\"\u003e\u003ccode\u003eMarker\u003c/code\u003e is a composable that allows you to add a visual pin to a location on your \u003ccode\u003eGoogleMap\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"bec1\"\u003e\u003ccode\u003eMarkerState\u003c/code\u003e is used to control or observe the position of a marker.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"9625\"\u003eBasic Marker Usage\u003c/h2\u003e\u003cp id=\"c99a\"\u003eWith this in place, we’ll now be able to see a Marker displayed on our map.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/aaafba9c967c107628271a965b5af18b\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/aaafba9c967c107628271a965b5af18b\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"8d1c\"\u003eBasic Marker with InfoText\u003c/h2\u003e\u003cp id=\"5d4b\"\u003eWe can assign a title to our Marker using the \u003cstrong\u003etitle\u003c/strong\u003e argument, which takes string value to be displayed in a popup when the Marker is clicked. We can also provide a string value for the \u003cstrong\u003esnippet\u003c/strong\u003e argument, this is where we can provide some additional text to be displayed beneath the title.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/010efd667fec16f0f1d7d898533dc689\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/010efd667fec16f0f1d7d898533dc689\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"c698\"\u003eMarker with custom icon\u003c/h2\u003e\u003cp id=\"1965\"\u003eWe can also add a custom icon by providing a drawable to be used for our marker.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/9f8d971210fd0a7ce1fc25ac6212c533\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/9f8d971210fd0a7ce1fc25ac6212c533\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"702b\"\u003eStep 4: Defining Polylines\u003c/h2\u003e\u003cp id=\"213e\"\u003eThe \u003ccode\u003ePolyline\u003c/code\u003e composable is used to visually connect multiple geographic points on a map—typically to represent a route, path, or boundary. It takes a list of \u003ccode\u003eLatLng\u003c/code\u003e coordinates and draws a continuous line through them, allowing you to highlight how locations are connected. It’s a lightweight but powerful way to display route information, such as driving directions, delivery paths, or user movement.\u003c/p\u003e\u003ch2 id=\"b774\"\u003eBasic Polyline\u003c/h2\u003e\u003cp id=\"71e2\"\u003eWith routes defined in the map, we’ll now be able to see a path between the two locations.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/b814b8d39c84e52d1b6fe58d7fd192f2\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/b814b8d39c84e52d1b6fe58d7fd192f2\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"e61f\"\u003eCustomising our Polyline\u003c/h2\u003e\u003cp id=\"ba8a\"\u003eBy default, the \u003cstrong\u003ecolor\u003c/strong\u003e argument of the Polyline will default to Black when not provided. We can customise it by defining the following properties:\u003c/p\u003e\u003cul\u003e\u003cli id=\"fba9\"\u003e\u003ccode\u003e\u003cstrong\u003ecolor\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e — \u003c/strong\u003eThe color of the polyline\u003c/li\u003e\u003cli id=\"862f\"\u003e\u003ccode\u003e\u003cstrong\u003ewidth\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e — \u003c/strong\u003eThickness of the line in pixels.\u003c/li\u003e\u003cli id=\"0826\"\u003e\u003ccode\u003e\u003cstrong\u003ejointType\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e — \u003c/strong\u003eHow line joins are drawn: BEVEL, ROUND, DEFAULT etc.\u003c/li\u003e\u003cli id=\"8ad0\"\u003e\u003ccode\u003e\u003cstrong\u003estartCap / endCap\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e — \u003c/strong\u003eStyle of the start/end of the line.\u003c/li\u003e\u003cli id=\"b881\"\u003e\u003ccode\u003e\u003cstrong\u003epattern\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e — \u003c/strong\u003eDashed or dotted lines, using \u003ccode\u003e\u003cstrong\u003eDot()\u003c/strong\u003e\u003c/code\u003e, \u003ccode\u003e\u003cstrong\u003eDash()\u003c/strong\u003e\u003c/code\u003e, \u003ccode\u003e\u003cstrong\u003eGap()\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/b5430336fda256b6603c1b83dceae896\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/b5430336fda256b6603c1b83dceae896\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"6844\"\u003e\u003cstrong\u003eAdding gradient support to our Polyline\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"8b58\"\u003eI had a requirement to create a gradient polyline using Jetpack Compose. But Jetpack Compose Maps does \u003cstrong\u003enot yet support native gradient polylines\u003c/strong\u003e, but you can simulate it by drawing multiple short segments with different colors.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/1b1071ef37ae47749f5b17450ed1ae60\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/1b1071ef37ae47749f5b17450ed1ae60\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/99c0dee70cb831f4c20dc098e091b486\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/99c0dee70cb831f4c20dc098e091b486\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"7a80\"\u003eStep 5: Animating marker across the Polyline\u003c/h2\u003e\u003cp id=\"4d96\"\u003eWe’ve all seen those animated car or bike icons in ride-hailing or food delivery apps — where the vehicle glides smoothly along the route as the driver makes their way to you. In this step, we’ll recreate that effect using a moving marker along the polyline we previously drew.\u003c/p\u003e\u003cp id=\"54af\"\u003eThe key idea here is to interpolate between consecutive points in the route and update the marker’s position and bearing in small steps. This creates a smooth animation that mimics real movement.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/ca44ae469ae57a1e83fcccd7bb26d502\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/ca44ae469ae57a1e83fcccd7bb26d502\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"99a0\"\u003eAnd we have some helper methods:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/24989761828e5a2a3e469d0657f4d5ac\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://gist.github.com/anitaa1990/24989761828e5a2a3e469d0657f4d5ac\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"72f3\"\u003eAnd this is the final behaviour:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-04-10T17:07:41.926Z",
  "modifiedTime": null
}
