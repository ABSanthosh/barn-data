{
  "id": "dee766e8-c318-46e9-8a49-e97d43a6bec7",
  "title": "Draw sleep timeline graph in Compose",
  "link": "https://proandroiddev.com/sleep-timeline-graph-in-compose-15c99f9a4af0?source=rss----c72404660798---4",
  "description": "",
  "author": "Viktor Mykhailiv",
  "published": "Sat, 01 Feb 2025 19:01:51 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "compose",
    "graph",
    "android",
    "multiplatform"
  ],
  "byline": "Viktor Mykhailiv",
  "length": 2753,
  "excerpt": "Custom drawing is useful for when the built-in components just don’t cover exactly what our app needs. This article provides a guide to create a custom sleep timeline graph, similar to those you can…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Gemini generatedCustom drawing is useful for when the built-in components just don’t cover exactly what our app needs. This article provides a guide to create a custom sleep timeline graph, similar to those you can find in the Fitbit app.Screenshot from Fitbit Android appHow do we draw in Compose?To get started with drawing in Compose we can use drawing modifiers or Canvas composable which gives us DrawScope — a declarative, stateless API to draw shapes and paths without requiring consumers to maintain underlying state. DrawScope implementations are also provided sizing information and transformations are done relative to the local translation.Note: Jetpack Compose (Android only) and Compose Multiplatform (Desktop, Android, iOS, web) have similar drawing API. Screenshots below are made on Desktop (macOS), but the result is the same on all platforms (check the last screenshot).What is the sleep timeline?We can read or write sleep data in Health Connect. Sleep data is displayed as a session, and can be divided into sleep stages:Awake: the user is awake within a sleep cycle.Light sleep: the user is in a light sleep cycle.Deep sleep: the user is in a deep sleep cycle.REM: the user is in a REM sleep cycle.These values represent the type of sleep a user experiences within a time range.The SleepSessionRecord data type has two parts:The overall session, spanning the entire duration of sleep.Individual stages during the sleep session such as light sleep or deep sleep.MathDuring the sleep session we can be in the same stage many times at different moments in time. We need to calculate the start and end points relative to the sleep session.To draw a rect in Compose we need topOffset and size .DrawingLet’s build our custom Canvas to draw one stage of the sleep session, e.g. deep.If we run the project with the previously defined sleep session, we will see 3 rects: 1 grey rect for background and 2 purple rects for deep sleep stage.To draw all stages of the sleep session (awake, REM, light, and deep) we need to make a few adjustments to draw each stage type as Column component, vertically, by drawing line by line and applying some offset for the next line.Draw textTo draw a text in Compose, we can typically use the Text composable. However, in our example we are in a DrawScope and we can use the DrawScope.drawText() method.Drawing text works a bit differently from other drawing commands. Normally, we give the drawing command the size (width and height) to draw the shape/image as. With text, there are a few parameters that control the size of the rendered text, such as font size, font, ligatures, and letter spacing. We need to use a TextMeasurer to get access to the measured size of text, depending on the above factors.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*OUAsgvNoNx9VpSk9Eyqgzg.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@vitoksmile?source=post_page---byline--15c99f9a4af0--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Viktor Mykhailiv\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*nTqvAWIU8dBATkQWPnheRg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--15c99f9a4af0--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eGemini generated\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"03ed\"\u003eCustom drawing is useful for when the built-in components just don’t cover exactly what our app needs. This article provides a guide to create a custom sleep timeline graph, similar to those you can find in the \u003ca href=\"https://play.google.com/store/apps/details?id=com.fitbit.FitbitMobile\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFitbit app\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eScreenshot from Fitbit Android app\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"65f9\"\u003eHow do we draw in Compose?\u003c/h2\u003e\u003cp id=\"9fea\"\u003eTo get started with drawing in Compose we can use \u003ca href=\"https://developer.android.com/develop/ui/compose/graphics/draw/modifiers#drawing-modifiers\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edrawing modifiers\u003c/a\u003e or \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Canvas\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCanvas\u003c/a\u003e\u003c/code\u003e composable which gives us \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/DrawScope\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDrawScope\u003c/a\u003e\u003c/code\u003e — a declarative, stateless API to draw shapes and paths without requiring consumers to maintain underlying state. \u003ccode\u003eDrawScope\u003c/code\u003e implementations are also provided sizing information and transformations are done relative to the local translation.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"0a5e\"\u003eNote: Jetpack Compose (Android only) and Compose Multiplatform (Desktop, Android, iOS, web) have similar drawing API. Screenshots below are made on Desktop (macOS), but the result is the same on all platforms (check the last screenshot).\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"4d3e\"\u003eWhat is the sleep timeline?\u003c/h2\u003e\u003cp id=\"f287\"\u003eWe can read or write sleep data in Health Connect. Sleep data is displayed as a session, and can be divided into sleep stages:\u003c/p\u003e\u003cul\u003e\u003cli id=\"1db9\"\u003eAwake: the user is awake within a sleep cycle.\u003c/li\u003e\u003cli id=\"ca77\"\u003eLight sleep: the user is in a light sleep cycle.\u003c/li\u003e\u003cli id=\"6218\"\u003eDeep sleep: the user is in a deep sleep cycle.\u003c/li\u003e\u003cli id=\"ab12\"\u003eREM: the user is in a REM sleep cycle.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"316a\"\u003eThese values represent the type of sleep a user experiences within a time range.\u003c/p\u003e\u003cp id=\"d5ec\"\u003eThe \u003ccode\u003eSleepSessionRecord\u003c/code\u003e data type has two parts:\u003c/p\u003e\u003col\u003e\u003cli id=\"b021\"\u003eThe overall session, spanning the entire duration of sleep.\u003c/li\u003e\u003cli id=\"1b29\"\u003eIndividual stages during the sleep session such as light sleep or deep sleep.\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"f35b\"\u003eMath\u003c/h2\u003e\u003cp id=\"fa89\"\u003eDuring the sleep session we can be in the same stage many times at different moments in time. We need to calculate the start and end points relative to the sleep session.\u003c/p\u003e\u003cp id=\"3acf\"\u003eTo draw a rect in Compose we need \u003ccode\u003etopOffset\u003c/code\u003e and \u003ccode\u003esize\u003c/code\u003e .\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"d99e\"\u003eDrawing\u003c/h2\u003e\u003cp id=\"b8c3\"\u003eLet’s build our custom Canvas to draw one stage of the sleep session, e.g. deep.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8cee\"\u003eIf we run the project with the previously defined sleep session, we will see 3 rects: 1 grey rect for background and 2 purple rects for deep sleep stage.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1bbd\"\u003eTo draw all stages of the sleep session (awake, REM, light, and deep) we need to make a few adjustments to draw each stage type as Column component, vertically, by drawing line by line and applying some offset for the next line.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"db54\"\u003eDraw text\u003c/h2\u003e\u003cp id=\"1704\"\u003eTo draw a text in Compose, we can typically use the \u003ccode\u003eText\u003c/code\u003e composable. However, in our example we are in a \u003ccode\u003eDrawScope\u003c/code\u003e and we can use the \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/DrawScope#(androidx.compose.ui.graphics.drawscope.DrawScope).drawText(androidx.compose.ui.text.TextMeasurer,androidx.compose.ui.text.AnnotatedString,androidx.compose.ui.geometry.Offset,androidx.compose.ui.text.TextStyle,androidx.compose.ui.text.style.TextOverflow,kotlin.Boolean,kotlin.Int,kotlin.collections.List,androidx.compose.ui.unit.IntSize)\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDrawScope.drawText()\u003c/a\u003e\u003c/code\u003e method.\u003c/p\u003e\u003cp id=\"1513\"\u003eDrawing text works a bit differently from other drawing commands. Normally, we give the drawing command the size (width and height) to draw the shape/image as. With text, there are a few parameters that control the size of the rendered text, such as font size, font, ligatures, and letter spacing. We need to use a \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/TextMeasurer\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTextMeasurer\u003c/a\u003e\u003c/code\u003e to get access to the measured size of text, depending on the above factors.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-01-30T19:13:49.659Z",
  "modifiedTime": null
}
