{
  "id": "46cf018b-4ad8-4d27-983d-0e9237b35ce0",
  "title": "Managing Text Overflow in Jetpack Compose Buttons",
  "link": "https://proandroiddev.com/managing-text-overflow-in-jetpack-compose-buttons-14d32279e620?source=rss----c72404660798---4",
  "description": "",
  "author": "Suchi Bansal",
  "published": "Fri, 11 Apr 2025 15:26:04 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "button",
    "jetpack-compose",
    "android-app-development",
    "androiddev"
  ],
  "byline": "Suchi Bansal",
  "length": 1622,
  "excerpt": "Recently, I came across a requirement where I needed to display two horizontal buttons inside a box. However, if the text of any button overflows (i.e., it doesn’t fit in the available space), the…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Recently, I came across a requirement where I needed to display two horizontal buttons inside a box. However, if the text of any button overflows (i.e., it doesn’t fit in the available space), the layout should automatically switch to a vertical format.So, the key question is:How do we detect if any of the button texts are overflowing?In this blog, I’ll walk you through the process of detecting text overflow in Jetpack Compose buttons and dynamically switching between horizontal and vertical layouts.To solve this, I created a custom composable called OverflowAwareButton using the TextLayoutResult.hasVisualOverflow Text property. This boolean flag becomes true when the text doesn’t fit in the given constraints (e.g., a single line).I then passed this result upward via a callback, allowing the parent composable to decide whether to render the buttons in a Row (horizontal) or a Column (vertical) format based on overflow status.Here’s a simplified example of how the callback and layout switch workCreated a horizontal box with overflow-aware buttons to detect text overflow in horizontal mode and a vertical box with buttons for layout switching when overflow occurs.Created a DynamicBoxWithButton layout that uses a mutable isOverflowing variable to switch between horizontal and vertical button arrangements. The variable is mutable because the UI needs to react and recompose dynamically when the overflow state changes.That’s it, folks! Thanks for reading. Feel free to try out the solution above, and if you come up with a better one, I’d love to hear it in the comments. Always happy to learn and improve!",
  "image": "https://miro.medium.com/v2/resize:fit:480/1*YZ4f9YG7RmqxffE-mzph5A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"acc9\"\u003eRecently, I came across a requirement where I needed to display \u003cstrong\u003etwo horizontal buttons inside a box\u003c/strong\u003e. However, if the text of \u003cstrong\u003eany\u003c/strong\u003e button overflows (i.e., it doesn’t fit in the available space), the layout should \u003cstrong\u003eautomatically switch to a vertical format\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"0b4d\"\u003eSo, the key question is:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"95cc\"\u003e\u003cstrong\u003e\u003cem\u003eHow do we detect if any of the button texts are overflowing?\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"74ba\"\u003eIn this blog, I’ll walk you through the process of detecting text overflow in Jetpack Compose buttons and dynamically switching between \u003cstrong\u003ehorizontal\u003c/strong\u003e and \u003cstrong\u003evertical\u003c/strong\u003e layouts.\u003c/p\u003e\u003cp id=\"05d5\"\u003eTo solve this, I created a custom composable called \u003ccode\u003eOverflowAwareButton\u003c/code\u003e using the \u003ccode\u003eTextLayoutResult.hasVisualOverflow\u003c/code\u003e Text property. This boolean flag becomes \u003ccode\u003etrue\u003c/code\u003e when the text doesn’t fit in the given constraints (e.g., a single line).\u003c/p\u003e\u003cp id=\"7d49\"\u003eI then passed this result upward via a callback, allowing the parent composable to decide whether to render the buttons in a \u003ccode\u003eRow\u003c/code\u003e (horizontal) or a \u003ccode\u003eColumn\u003c/code\u003e (vertical) format based on overflow status.\u003c/p\u003e\u003cp id=\"643c\"\u003eHere’s a simplified example of how the callback and layout switch work\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5435\"\u003eCreated a horizontal box with overflow-aware buttons to detect text overflow in horizontal mode and a vertical box with buttons for layout switching when overflow occurs.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"c211\"\u003eCreated a \u003ccode\u003eDynamicBoxWithButton\u003c/code\u003e layout that uses a mutable \u003ccode\u003eisOverflowing\u003c/code\u003e variable to switch between horizontal and vertical button arrangements. The variable is mutable because the UI needs to react and recompose dynamically when the overflow state changes.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6b1a\"\u003eThat’s it, folks! Thanks for reading. Feel free to try out the solution above, and if you come up with a better one, I’d love to hear it in the comments. Always happy to learn and improve!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-04-11T15:26:04.233Z",
  "modifiedTime": null
}
