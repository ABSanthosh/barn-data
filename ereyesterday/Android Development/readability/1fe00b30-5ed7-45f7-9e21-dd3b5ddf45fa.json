{
  "id": "1fe00b30-5ed7-45f7-9e21-dd3b5ddf45fa",
  "title": "Localization in Jetpack Compose",
  "link": "https://blog.kotlin-academy.com/localization-in-jetpack-compose-71b7f7233243?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Narayan Panthi",
  "published": "Wed, 12 Feb 2025 08:20:22 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "jetpack-compose",
    "per-app-language",
    "android",
    "localization",
    "android-app-development"
  ],
  "byline": "Narayan Panthi",
  "length": 8125,
  "excerpt": "Want to add multi-language support to your Jetpack Compose app? With Android 13‚Äôs per-app language preferences, localization is easier than ever. This guide covers everything from setting up locales to building a custom in-app language picker, ensuring a seamless multilingual experience. Start enhancing your app today! üöÄ",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "Change App Language in Jetpack Compose ‚Äî The right wayNamaste üôèLocalization refers to adapting an app‚Äôs text, format, and visual elements to match a user‚Äôs locale. This includes translating text strings, adjusting number and currency formats, and modifying images or layouts based on regional preferences.With the introduction of Per-app Language Preferences in Android 13 (API level 33), managing app-specific languages has become much easier.Per-app Language PreferencePer-app language settings allow users to change an app‚Äôs language without affecting the system language. This new API simplifies the localization process, eliminating the need for boilerplate code and a user-friendly approach to manage application language settings.Let‚Äôs get started,Step 1: Add Support for Multiple LanguagesWe all know, Localization resources are placed in the values-* directories within the res folder.Creating new locale strings.xmlWe can go to res \u003e New Resource File \u003e Select Locale qualifier \u003e Language \u003e Select Country Language Options\u003e Input File Name ‚Äústrings‚Äùto add the desired language strings.xml file.// English Default (values/strings.xml)\u003cresources\u003e \u003cstring name=\"app_name\"\u003eFirefly\u003c/string\u003e \u003cstring name=\"label_email\"\u003eEmail\u003c/string\u003e \u003cstring name=\"label_password\"\u003ePassword\u003c/string\u003e \u003cstring name=\"label_name\"\u003eName\u003c/string\u003e\u003c/resources\u003e// Nepali (values-ne/strings.xml)\u003cresources\u003e \u003cstring name=\"app_name\"\u003eFirefly\u003c/string\u003e \u003cstring name=\"label_email\"\u003e‡§à‡§Æ‡•á‡§≤\u003c/string\u003e \u003cstring name=\"label_password\"\u003e‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°\u003c/string\u003e \u003cstring name=\"label_name\"\u003e‡§®‡§æ‡§Æ\u003c/string\u003e\u003c/resources\u003eStep 2: Generate Locale Config AutomaticallyUsing Gradle to generate supported locales automaticallyandroid {... androidResources{ generateLocaleConfig = true }...}Alternatively, We can create a file called res/xml/locales_config.xml and specifying our app's languages manually.--- locales_config.xml---\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u003clocale-config xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e \u003clocale android:name=\"en-US\"/\u003e \u003clocale android:name=\"en-GB\"/\u003e \u003clocale android:name=\"fr\"/\u003e \u003clocale android:name=\"ja\"/\u003e\u003c/locale-config\u003eAnd reference it in AndroidManifest.xml:\u003cmanifest\u003e ... \u003capplication ... android:localeConfig=\"@xml/locales_config\"\u003e \u003c/application\u003e\u003c/manifest\u003eNote: Google recommends generating the locale config automatically.Means we can skip above alternative steps.Step 3: Set a Default LocaleTo specify a default language, create a resources.properties file inside the res folder:unqualifiedResLocale = enBy adding this, our app won‚Äôt freak out if no language is chosen.Step 4: Enable Auto Store LocalesWhen this flag is enabled, the app remembers the user‚Äôs language choice automatically, so there‚Äôs no need to manually save it in Preferences or DataStore.\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" \u003e \u003capplication \u003cservice android:name=\"androidx.appcompat.app.AppLocalesMetadataHolderService\" android:enabled=\"false\" android:exported=\"false\"\u003e \u003cmeta-data android:name=\"autoStoreLocales\" android:value=\"true\" /\u003e \u003c/service\u003e \u003c/application\u003e\u003c/manifest\u003eAnd Done, Now we can easily change language from app settings. Go to Settings \u003e System \u003e Languages \u0026 Input \u003e App Languages \u003e (select an app) and change the desired language.App Language Setting ‚Äî Firefly App ExampleAt this point, we can change our app language directly from the settings without needing to create a separate language picker‚Ä¶Custom Language PickerIf we want to add an in-app language picker to let users switch languages easily without leaving the app or going to the settings page, we need to handle it manually and notify the per-app language API that the selected language is now the default.Step 5: App Locale ManagerLet‚Äôs create a helper class that handles language selection.import android.app.LocaleManagerimport android.content.Contextimport android.os.Buildimport android.os.LocaleListimport androidx.appcompat.app.AppCompatDelegateimport androidx.core.os.LocaleListCompatdata class Language( val code: String, val displayLanguage: String)val appLanguages = listOf( Language(\"en\", \"English\"), // default language Language(\"ne\", \"‡§®‡•á‡§™‡§æ‡§≤‡•Ä\"), Language(\"hi\", \"‡§π‡§ø‡§®‡•ç‡§¶‡•Ä\"))class AppLocaleManager { fun changeLanguage(context: Context, languageCode: String) { if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.TIRAMISU) { context.getSystemService(LocaleManager::class.java).applicationLocales = LocaleList.forLanguageTags(languageCode) } else { AppCompatDelegate.setApplicationLocales(LocaleListCompat.forLanguageTags(languageCode)) } } fun getLanguageCode(context: Context,): String { val locale = if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.TIRAMISU) { context.getSystemService(LocaleManager::class.java) ?.applicationLocales ?.get(0) } else { AppCompatDelegate.getApplicationLocales().get(0) } return locale?.language ?: getDefaultLanguageCode() } private fun getDefaultLanguageCode(): String { return appLanguages.first().code }}Now that we have our AppLocaleManager we can create a custom language picker.Step 6: Integrating with ViewModelWe can also inject AppLocaleManager directly with Hilt if needed. For now, let's look at the simplest way to use AppLocaleManager with a ViewModel.@HiltViewModelclass SettingViewModel @Inject constructor( @ApplicationContext private val context: Context) : BaseViewModel() { private val appLocaleManager = AppLocaleManager() private val _settingState = MutableStateFlow(SettingState()) val settingState: StateFlow\u003cSettingState\u003e = _settingState init { loadInitialLanguage() } private fun loadInitialLanguage() { val currentLanguage = appLocaleManager.getLanguageCode(context) _settingState.value = _settingState.value.copy(selectedLanguage = currentLanguage) } fun changeLanguage(languageCode: String) { appLocaleManager.changeLanguage(context, languageCode) _settingState.value = _settingState.value.copy(selectedLanguage = languageCode) } }data class SettingState( ... val selectedLanguage: String = \"\")Step 7: Building the UINow, let‚Äôs build the UI for the settings screen. The SettingContent composable displays a list of available languages in a LazyColumn, highlighting the selected one.@Composablefun SettingScreen( settingViewModel: SettingViewModel = hiltViewModel(), navigateBack: () -\u003e Unit,) { val settingState by settingViewModel.settingState.collectAsStateLifecycleAware() val onAppLanguageChanged: (String) -\u003e Unit = { newLanguage -\u003e settingViewModel.changeLanguage(newLanguage) } SettingContent( selectedLanguage = settingState.selectedLanguage, onAppLanguageChanged ) { navigateBack() }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun SettingContent( selectedLanguage: String, onAppLanguageChanged: (String) -\u003e Unit, onNavigateBack: () -\u003e Unit) { val barScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior() Scaffold(topBar = { ChildAppTopBar( stringResource(R.string.settings), barScrollBehavior ) { onNavigateBack() } }) { paddingValues -\u003e Box(modifier = Modifier.padding(paddingValues)) { LazyColumn { items(appLanguages.size) { index -\u003e LanguageRow(appLanguages[index], appLanguages[index].code == selectedLanguage) { onAppLanguageChanged(it.code) } } } } }}Output of Firefly App ‚Äî Localization in Jetpack ComposeThank you for reading! I hope this guide helps you build a better multi-language apps.Follow for more articles. Keep composing! üöÄ‚ú®Buy me a coffee to support me.Jetpack Compose Series",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*bt1p43I8Dj5WJ3twLdc0NQ.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://iamnaran.medium.com/?source=post_page---byline--71b7f7233243---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Narayan Panthi\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*J9VrjqTFhRFOtZ3r4ecdqg@2x.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://blog.kotlin-academy.com/?source=post_page---byline--71b7f7233243---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Kt. Academy\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*2grDGjzH0tfX8XiaF4Izaw.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"2afb\"\u003eChange App Language in Jetpack Compose ‚Äî The right way\u003c/p\u003e\u003cp id=\"5d88\"\u003e\u003cstrong\u003eNamaste \u003c/strong\u003eüôè\u003c/p\u003e\u003cp id=\"3e5a\"\u003eLocalization refers to adapting an app‚Äôs text, format, and visual elements to match a user‚Äôs locale. This includes translating text strings, adjusting number and currency formats, and modifying images or layouts based on \u003cstrong\u003eregional\u003c/strong\u003e preferences.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"e3c3\"\u003eWith the introduction of \u003cstrong\u003ePer-app Language Preferences\u003c/strong\u003e in Android 13 (API level 33), managing app-specific languages has become much easier.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"8829\"\u003ePer-app Language Preference\u003c/h2\u003e\u003cp id=\"d8c2\"\u003ePer-app language settings allow users to change an app‚Äôs language without affecting the system language. This new API simplifies the localization process, eliminating the need for boilerplate code and a user-friendly approach to manage application language settings.\u003c/p\u003e\u003cp id=\"0e99\"\u003eLet‚Äôs get started,\u003c/p\u003e\u003ch2 id=\"b83b\"\u003eStep 1: Add Support for Multiple Languages\u003c/h2\u003e\u003cp id=\"4b74\"\u003eWe all know, Localization resources are placed in the \u003ccode\u003evalues-*\u003c/code\u003e directories within the \u003ccode\u003eres\u003c/code\u003e folder.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCreating new locale strings.xml\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"8359\"\u003eWe can go to \u003ccode\u003eres \u0026gt; New Resource File \u0026gt; Select Locale qualifier \u0026gt; Language \u0026gt; Select Country Language Options\u0026gt; Input File Name ‚Äústrings‚Äù\u003c/code\u003eto add the desired language \u003cstrong\u003estrings.xml \u003c/strong\u003efile.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"15b0\"\u003e// English Default (values/strings.xml)\u003cbr/\u003e\u0026lt;resources\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;app_name\u0026#34;\u0026gt;Firefly\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_email\u0026#34;\u0026gt;Email\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_password\u0026#34;\u0026gt;Password\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_name\u0026#34;\u0026gt;Name\u0026lt;/string\u0026gt;\u003cbr/\u003e\u0026lt;/resources\u0026gt;\u003cp\u003e// Nepali (values-ne/strings.xml)\u003cbr/\u003e\u0026lt;resources\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;app_name\u0026#34;\u0026gt;Firefly\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_email\u0026#34;\u0026gt;‡§à‡§Æ‡•á‡§≤\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_password\u0026#34;\u0026gt;‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;label_name\u0026#34;\u0026gt;‡§®‡§æ‡§Æ\u0026lt;/string\u0026gt;\u003cbr/\u003e\u0026lt;/resources\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"5878\"\u003eStep 2: Generate Locale Config Automatically\u003c/h2\u003e\u003cp id=\"26ea\"\u003eUsing \u003cstrong\u003eGradle\u003c/strong\u003e to generate supported locales automatically\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ccc4\"\u003eandroid {\u003cbr/\u003e...\u003cbr/\u003e  androidResources{\u003cbr/\u003e      generateLocaleConfig = true\u003cbr/\u003e  }\u003cbr/\u003e...\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"3d17\"\u003eAlternatively, We can create a file called \u003ccode\u003e\u003cstrong\u003eres/xml/locales_config.xml\u003c/strong\u003e\u003c/code\u003e and specifying our app\u0026#39;s languages manually.\u003c/p\u003e\u003c/blockquote\u003e\u003cpre\u003e\u003cspan id=\"4fb9\"\u003e--- locales_config.xml---\u003cp\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003cbr/\u003e\u0026lt;locale-config xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt;\u003cbr/\u003e   \u0026lt;locale android:name=\u0026#34;en-US\u0026#34;/\u0026gt;\u003cbr/\u003e   \u0026lt;locale android:name=\u0026#34;en-GB\u0026#34;/\u0026gt;\u003cbr/\u003e   \u0026lt;locale android:name=\u0026#34;fr\u0026#34;/\u0026gt;\u003cbr/\u003e   \u0026lt;locale android:name=\u0026#34;ja\u0026#34;/\u0026gt;\u003cbr/\u003e\u0026lt;/locale-config\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5f03\"\u003eAnd reference it in \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"efe0\"\u003e\u0026lt;manifest\u0026gt;\u003cbr/\u003e    ...\u003cbr/\u003e    \u0026lt;application\u003cbr/\u003e        ...\u003cbr/\u003e        android:localeConfig=\u0026#34;@xml/locales_config\u0026#34;\u0026gt;\u003cbr/\u003e    \u0026lt;/application\u0026gt;\u003cbr/\u003e\u0026lt;/manifest\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"1bfb\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Google recommends generating the locale config \u003cstrong\u003eautomatically\u003c/strong\u003e.\u003cbr/\u003eMeans we can \u003cstrong\u003eskip\u003c/strong\u003e above alternative steps.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"b759\"\u003eStep 3: Set a Default Locale\u003c/h2\u003e\u003cp id=\"1715\"\u003eTo specify a default language, create a \u003ccode\u003eresources.properties\u003c/code\u003e file inside the \u003ccode\u003eres\u003c/code\u003e folder:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5120\"\u003eunqualifiedResLocale = en\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"e4c8\"\u003eBy adding this, our app won‚Äôt freak out if no language is chosen.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"c249\"\u003eStep 4: Enable Auto Store Locales\u003c/h2\u003e\u003cp id=\"ba17\"\u003eWhen this flag is enabled, the app remembers the user‚Äôs language choice automatically, so there‚Äôs no need to \u003cstrong\u003emanually\u003c/strong\u003e save it in \u003cstrong\u003ePreferences\u003c/strong\u003e or \u003cstrong\u003eDataStore\u003c/strong\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fe65\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003cbr/\u003e\u0026lt;manifest xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u003cbr/\u003e    xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; \u0026gt; \u003cbr/\u003e  \u0026lt;application\u003cbr/\u003e       \u0026lt;service\u003cbr/\u003e            android:name=\u0026#34;androidx.appcompat.app.AppLocalesMetadataHolderService\u0026#34;\u003cbr/\u003e            android:enabled=\u0026#34;false\u0026#34;\u003cbr/\u003e            android:exported=\u0026#34;false\u0026#34;\u0026gt;\u003cbr/\u003e            \u0026lt;meta-data\u003cbr/\u003e                android:name=\u0026#34;autoStoreLocales\u0026#34;\u003cbr/\u003e                android:value=\u0026#34;true\u0026#34; /\u0026gt;\u003cbr/\u003e        \u0026lt;/service\u0026gt;\u003cp\u003e  \u0026lt;/application\u0026gt;\u003c/p\u003e\u003cp\u003e\u0026lt;/manifest\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"fddb\"\u003eAnd Done, Now we can easily change language from app settings. \u003cbr/\u003eGo to \u003ccode\u003eSettings \u0026gt; System \u0026gt; Languages \u0026amp; Input \u0026gt; App Languages \u0026gt; (select an app)\u003c/code\u003e and change the desired language.\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003cfigcaption\u003eApp Language Setting ‚Äî Firefly App Example\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"4d82\"\u003eAt this point, we can change our app language directly from the settings without needing to create a separate language picker‚Ä¶\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"68d4\"\u003eCustom Language Picker\u003c/h2\u003e\u003cp id=\"d82d\"\u003eIf we want to add an in-app language picker to let users \u003cstrong\u003eswitch languages \u003c/strong\u003eeasily without leaving the app or going to the settings page, we need to handle it manually and notify the \u003cstrong\u003eper-app language API\u003c/strong\u003e that the selected language is now the default.\u003c/p\u003e\u003ch2 id=\"514b\"\u003eStep 5: App Locale Manager\u003c/h2\u003e\u003cp id=\"fa55\"\u003eLet‚Äôs create a helper class that handles language selection.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"82a5\"\u003eimport android.app.LocaleManager\u003cbr/\u003eimport android.content.Context\u003cbr/\u003eimport android.os.Build\u003cbr/\u003eimport android.os.LocaleList\u003cbr/\u003eimport androidx.appcompat.app.AppCompatDelegate\u003cbr/\u003eimport androidx.core.os.LocaleListCompat\u003cp\u003edata class Language(\u003cbr/\u003e    val code: String,\u003cbr/\u003e    val displayLanguage: String\u003cbr/\u003e)\u003c/p\u003e\u003cp\u003eval appLanguages = listOf(\u003cbr/\u003e    Language(\u0026#34;en\u0026#34;, \u0026#34;English\u0026#34;), // default language\u003cbr/\u003e    Language(\u0026#34;ne\u0026#34;, \u0026#34;‡§®‡•á‡§™‡§æ‡§≤‡•Ä\u0026#34;),\u003cbr/\u003e    Language(\u0026#34;hi\u0026#34;, \u0026#34;‡§π‡§ø‡§®‡•ç‡§¶‡•Ä\u0026#34;)\u003cbr/\u003e)\u003c/p\u003e\u003cp\u003eclass AppLocaleManager {\u003c/p\u003e\u003cp\u003e    fun changeLanguage(context: Context, languageCode: String) {\u003cbr/\u003e        if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.TIRAMISU) {\u003cbr/\u003e            context.getSystemService(LocaleManager::class.java).applicationLocales =\u003cbr/\u003e                LocaleList.forLanguageTags(languageCode)\u003cbr/\u003e        } else {\u003cbr/\u003e            AppCompatDelegate.setApplicationLocales(LocaleListCompat.forLanguageTags(languageCode))\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e        fun getLanguageCode(context: Context,): String {\u003cbr/\u003e        val locale = if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.TIRAMISU) {\u003cbr/\u003e            context.getSystemService(LocaleManager::class.java)\u003cbr/\u003e                ?.applicationLocales\u003cbr/\u003e                ?.get(0)\u003cbr/\u003e        } else {\u003cbr/\u003e            AppCompatDelegate.getApplicationLocales().get(0)\u003cbr/\u003e        }\u003cbr/\u003e        return locale?.language ?: getDefaultLanguageCode()\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    private fun getDefaultLanguageCode(): String {\u003cbr/\u003e        return  appLanguages.first().code\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f4b9\"\u003eNow that we have our \u003cstrong\u003eAppLocaleManager \u003c/strong\u003ewe can create a custom language picker.\u003c/p\u003e\u003ch2 id=\"5e97\"\u003eStep 6: Integrating with ViewModel\u003c/h2\u003e\u003cp id=\"1a18\"\u003eWe can also inject \u003ccode\u003eAppLocaleManager\u003c/code\u003e directly with \u003cstrong\u003eHilt\u003c/strong\u003e if needed. For now, let\u0026#39;s look at the simplest way to use \u003ccode\u003eAppLocaleManager\u003c/code\u003e with a \u003ccode\u003eViewModel\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"758d\"\u003e@HiltViewModel\u003cbr/\u003eclass SettingViewModel @Inject constructor(\u003cbr/\u003e    @ApplicationContext private val context: Context\u003cbr/\u003e) : BaseViewModel() {\u003cp\u003e    private val appLocaleManager = AppLocaleManager()\u003cbr/\u003e    private val _settingState = MutableStateFlow(SettingState())\u003cbr/\u003e    val settingState: StateFlow\u0026lt;SettingState\u0026gt; = _settingState\u003c/p\u003e\u003cp\u003e        init {\u003cbr/\u003e        loadInitialLanguage()\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    private fun loadInitialLanguage() {\u003cbr/\u003e        val currentLanguage = appLocaleManager.getLanguageCode(context)\u003cbr/\u003e        _settingState.value = _settingState.value.copy(selectedLanguage = currentLanguage)\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    fun changeLanguage(languageCode: String) {\u003cbr/\u003e        appLocaleManager.changeLanguage(context, languageCode)\u003cbr/\u003e        _settingState.value = _settingState.value.copy(selectedLanguage = languageCode)\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    }\u003c/p\u003e\u003cp\u003edata class SettingState(\u003cbr/\u003e    ...\u003cbr/\u003e    val selectedLanguage: String = \u0026#34;\u0026#34;\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"af3b\"\u003eStep 7: Building the UI\u003c/h2\u003e\u003cp id=\"faf2\"\u003eNow, let‚Äôs build the UI for the settings screen. The \u003ccode\u003eSettingContent\u003c/code\u003e composable displays a list of available languages in a \u003ccode\u003eLazyColumn\u003c/code\u003e, \u003cstrong\u003ehighlighting\u003c/strong\u003e the selected one.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ae32\"\u003e@Composable\u003cbr/\u003efun SettingScreen(\u003cbr/\u003e    settingViewModel: SettingViewModel = hiltViewModel(),\u003cbr/\u003e    navigateBack: () -\u0026gt; Unit,\u003cbr/\u003e) {\u003cbr/\u003e    val settingState by settingViewModel.settingState.collectAsStateLifecycleAware()\u003cbr/\u003e    val onAppLanguageChanged: (String) -\u0026gt; Unit = { newLanguage -\u0026gt;\u003cbr/\u003e        settingViewModel.changeLanguage(newLanguage)\u003cbr/\u003e    }\u003cbr/\u003e    SettingContent(\u003cbr/\u003e        selectedLanguage = settingState.selectedLanguage,\u003cbr/\u003e        onAppLanguageChanged\u003cbr/\u003e    ) {\u003cbr/\u003e        navigateBack()\u003cbr/\u003e    }\u003cbr/\u003e}\u003cp\u003e@OptIn(ExperimentalMaterial3Api::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun SettingContent(\u003cbr/\u003e    selectedLanguage: String,\u003cbr/\u003e    onAppLanguageChanged: (String) -\u0026gt; Unit,\u003cbr/\u003e    onNavigateBack: () -\u0026gt; Unit\u003cbr/\u003e) {\u003cbr/\u003e    val barScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()\u003cbr/\u003e    Scaffold(topBar = {\u003cbr/\u003e        ChildAppTopBar(\u003cbr/\u003e            stringResource(R.string.settings),\u003cbr/\u003e            barScrollBehavior\u003cbr/\u003e        ) {\u003cbr/\u003e            onNavigateBack()\u003cbr/\u003e        }\u003cbr/\u003e    }) { paddingValues -\u0026gt;\u003c/p\u003e\u003cp\u003e                Box(modifier = Modifier.padding(paddingValues)) {\u003cbr/\u003e            LazyColumn {\u003cbr/\u003e                items(appLanguages.size) { index -\u0026gt;\u003cbr/\u003e                    LanguageRow(appLanguages[index], appLanguages[index].code == selectedLanguage) {\u003cbr/\u003e                        onAppLanguageChanged(it.code)\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003c/p\u003e\u003cp\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eOutput of \u003ca href=\"https://github.com/iamnaran/firefly-compose\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFirefly App\u003c/a\u003e ‚Äî Localization in Jetpack Compose\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"a098\"\u003eThank you for reading! I hope this guide helps you build a better multi-language apps.\u003c/p\u003e\u003cp id=\"c016\"\u003eFollow for more articles. Keep composing! üöÄ‚ú®\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://buymeacoffee.com/iamnaran\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy me a coffee\u003c/a\u003e to support me.\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv role=\"button\" tabindex=\"0\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Narayan Panthi\" src=\"https://miro.medium.com/v2/resize:fill:40:40/1*J9VrjqTFhRFOtZ3r4ecdqg@2x.jpeg\" width=\"20\" height=\"20\" loading=\"lazy\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003ch2\u003eJetpack Compose Series\u003c/h2\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-02-09T11:43:44.016Z",
  "modifiedTime": null
}
