{
  "id": "35a5facf-b4ba-455c-bbc1-07d4ecaccf66",
  "title": "Creating an Engaging Progress Button in Jetpack Compose",
  "link": "https://proandroiddev.com/creating-an-engaging-progress-button-in-jetpack-compose-29ff8d5e383c?source=rss----c72404660798---4",
  "description": "",
  "author": "Jyotimoy Kashyap",
  "published": "Sun, 06 Jul 2025 17:28:42 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "coding",
    "kotlin",
    "jetpack-compose",
    "android"
  ],
  "byline": "Jyotimoy Kashyap",
  "length": 7469,
  "excerpt": "Learn how to create a custom, animated Progress Button from scratch in Jetpack Compose. This is a step by step guide will walk you through the whole process",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Creating an Engaging Progress Button in Jetpack ComposePreview Image for Jetpack ComposeHi everyone, I know its been a long time since I’ve jotted down anything. During this time, I was mostly tackle things that are mostly not related to Android but still in the midst of all that chaos, I still found some time to develop another custom component for something I’m building behind the scenes (no spoilers for now … ).So here we are back again with the series for creating custom components in Jetpack Components. Ever since the introduction of Jetpack Compose, its has made our lives easier to create such unique interactions for lots of developers. I really felt that the learning curve for the the view system to create custom interactions was pretty hard and I feel Jetpack Compose really simplified the implementation.What Will We Be Building ?We are going to create a reusable ProgressButton composable. This button will feature a progress animation that fills the button from left to right. A key feature of this component is its ability to clip the progress animation to the button's shape, ensuring a polished and seamless look, whether you're using rounded corners or a circular shape.Here’s a sneak peek at what our final component will look like in action:Progress Button PreviewInspirationI always take cabs for commuting from my residence to my office and its like a 6 km ride from my place. While in the cab, I always notice that whenever, I’m near my office like around 200 metres. The cab driver starts getting call to action for accepting new rides in Uber. I saw this component being used in that scenario, that if the cab driver wants to accept the ride they can else they can ignore and within certain time limit the ride that was offered to the cab driver will be automatically considered Not Accepted . I found the component very useful for one of my use cases. I tried to find some custom implementation on open source repositories but couldn’t find this exact interaction. Hence, decided why not build it anyways.Use Cases / ScenariosA progress button is a versatile component that can enhance the user experience in various scenarios:Onboarding Flows: Guide new users through initial setup steps, with the button filling up as they get closer to completion.Long-Running Tasks: Provide visual feedback for actions that take a few seconds to process, such as submitting a form, uploading a file, or applying filters.Timed Actions: Use it for actions that have a built-in delay, like a “Hold to Confirm” action for critical operations.Call to Action: Draw the user’s attention to a primary action by adding a subtle animation that encourages a click.Step-by-Step GuideLet’s breakdown the creation of our ProgressButton into manageable steps1. Setting Up the Composable Function@Composablefun SpeseProgressButton( text: String, shape: Shape = CircleShape, progressDurationMillis: Int = 5000, onClick: () -\u003e Unit, onProgressComplete: () -\u003e Unit = {}) { // ... implementation to follow}2. Initialising the AnimationInside our composable, we need to set up the Animatable that will control the progress animation. We'll initialise it with a value of 0f (representing 0% progress).val animatedWithFraction = remember { Animatable(0f) }Next, we’ll use a LaunchedEffect to start the animation when the ProgressButton is first composed. The animation will run from 0f to 1f over the specified progressDurationMillis. Once the animation is complete, we'll invoke the onProgressComplete callback.LaunchedEffect(Unit) { animatedWithFraction.animateTo( targetValue = 1f, // Animate to 100% animationSpec = tween(durationMillis = progressDurationMillis, easing = LinearEasing) ) onProgressComplete()}3. Custom Drawing with drawBehindThis is where the magic happens. We’ll use the Modifier.drawBehind to draw our progress indicator. Inside the drawBehind block, we have access to a DrawScope, which provides the drawing context.We first get the outline of the button’s shape. This outline is then converted into a Path.val defaultButtonClipShape = shapeval outline = defaultButtonClipShape.createOutline( this.size, layoutDirection, density)val buttonShapePath = Path().apply { addOutline(outline) }4. Clipping the Progress AnimationTo ensure our progress animation respects the button’s shape (including any rounded corners), we use clipPath. This function takes a Path and clips the drawing operations within its lambda to that path.Inside the clipPath block, we draw a rectangle. The width of this rectangle is determined by our animated fraction, causing it to grow from left to right.clipPath(buttonShapePath) { drawRect( color = color, size = Size( width = this.size.width * animatedWithFraction.value, height = this.size.height ), )}5. Assembling the ButtonFinally, we put everything together within the Button composable. We apply our custom drawBehind modifier and set the button's colors and shape. The container color has a reduced alpha to make the progress animation underneath visible.Button( onClick = onClick, modifier = Modifier .height(IntrinsicSize.Max) .drawBehind { /* ... our drawing code ... */ }, colors = ButtonDefaults.buttonColors( containerColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f), contentColor = MaterialTheme.colorScheme.onPrimary ), shape = shape) { Text( text = text, style = MaterialTheme.typography.bodyMedium )}Usage ExampleIntegrating the ProgressButton into your app is straightforward. Here’s how you can use it in your UI:@Preview@Composableprivate fun ProgressBtnPreview() { SpeseTheme { Surface( modifier = Modifier.fillMaxSize(), ) { Column( modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally ) { SpeseProgressButton( text = \"Let's Get Started\", onClick = { println(\"On Click is triggered\") }, shape = RoundedCornerShape(corner = CornerSize(12.dp)), onProgressComplete = { println(\"Progress is completed\") } ) } } }}In this example, we’ve created a progress button with rounded corners. The progress animation will complete in 5 seconds (the default duration). You can easily customize the text, shape, duration, and actions to fit your app’s needs.The full code for this ProgressButton could be found here, in this GistConclusionBy combining the power of Jetpack Compose’s animation APIs and custom drawing modifiers, we’ve created a dynamic and engaging ProgressButton. This component not only enhances the visual appeal of your app but also provides valuable feedback to your users. Feel free to take this code, experiment with different shapes and animations, and integrate it into your own projects to create a more interactive and delightful user experience.Feel free to explore other articles on different custom components that I created in the past with Jetpack ComposeBuilding an Animated Stacked Bar Chart in Jetpack ComposeBuilding a Clean \u0026 Reusable Dropdown Menu in Jetpack ComposeBuilding an Icon Picker in Jetpack ComposeHappy Composing!",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*AkAssP7dx1W_mxa1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"8654\" data-testid=\"storyTitle\"\u003eCreating an Engaging Progress Button in Jetpack Compose\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://jyotimoykashyap.medium.com/?source=post_page---byline--29ff8d5e383c---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Jyotimoy Kashyap\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*aq2aRId5dK4vlnCbyStqEA.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePreview Image for Jetpack Compose\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"20a8\"\u003e\u003cspan\u003eHi\u003c/span\u003e everyone, I know its been a long time since I’ve jotted down anything. During this time, I was mostly tackle things that are mostly not related to Android but still in the midst of all that chaos, I still found some time to develop another custom component for something I’m building behind the scenes (no spoilers for now … ).\u003c/p\u003e\u003cp id=\"f641\"\u003eSo here we are back again with the series for creating custom components in Jetpack Components. Ever since the introduction of Jetpack Compose, its has made our lives easier to create such unique interactions for lots of developers. I really felt that the learning curve for the the view system to create custom interactions was pretty hard and I feel Jetpack Compose really simplified the implementation.\u003c/p\u003e\u003ch2 id=\"5fe3\"\u003eWhat Will We Be Building ?\u003c/h2\u003e\u003cp id=\"cb1d\"\u003eWe are going to create a reusable \u003ccode\u003eProgressButton\u003c/code\u003e composable. This button will feature a progress animation that fills the button from left to right. A key feature of this component is its ability to clip the progress animation to the button\u0026#39;s shape, ensuring a polished and seamless look, whether you\u0026#39;re using rounded corners or a circular shape.\u003c/p\u003e\u003cp id=\"91e3\"\u003eHere’s a sneak peek at what our final component will look like in action:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eProgress Button Preview\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"8430\"\u003eInspiration\u003c/h2\u003e\u003cp id=\"cbb7\"\u003eI always take cabs for commuting from my residence to my office and its like a 6 km ride from my place. While in the cab, I always notice that whenever, I’m near my office like around 200 metres. The cab driver starts getting call to action for accepting new rides in Uber. I saw this component being used in that scenario, that if the cab driver wants to accept the ride they can else they can ignore and within certain time limit the ride that was offered to the cab driver will be automatically considered \u003ccode\u003eNot Accepted\u003c/code\u003e . I found the component very useful for one of my use cases. I tried to find some custom implementation on open source repositories but couldn’t find this exact interaction. Hence, decided why not build it anyways.\u003c/p\u003e\u003ch2 id=\"be69\"\u003eUse Cases / Scenarios\u003c/h2\u003e\u003cp id=\"e0ee\"\u003eA progress button is a versatile component that can enhance the user experience in various scenarios:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d779\"\u003e\u003cstrong\u003eOnboarding Flows:\u003c/strong\u003e Guide new users through initial setup steps, with the button filling up as they get closer to completion.\u003c/li\u003e\u003cli id=\"6c12\"\u003e\u003cstrong\u003eLong-Running Tasks:\u003c/strong\u003e Provide visual feedback for actions that take a few seconds to process, such as submitting a form, uploading a file, or applying filters.\u003c/li\u003e\u003cli id=\"0842\"\u003e\u003cstrong\u003eTimed Actions:\u003c/strong\u003e Use it for actions that have a built-in delay, like a “Hold to Confirm” action for critical operations.\u003c/li\u003e\u003cli id=\"95e8\"\u003e\u003cstrong\u003eCall to Action:\u003c/strong\u003e Draw the user’s attention to a primary action by adding a subtle animation that encourages a click.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"1cf0\"\u003eStep-by-Step Guide\u003c/h2\u003e\u003cp id=\"ec84\"\u003eLet’s breakdown the creation of our \u003ccode\u003eProgressButton\u003c/code\u003e into manageable steps\u003c/p\u003e\u003ch2 id=\"1f0a\"\u003e1. Setting Up the Composable Function\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"8af4\"\u003e@Composable\u003cbr/\u003efun SpeseProgressButton(\u003cbr/\u003e    text: String,\u003cbr/\u003e    shape: Shape = CircleShape,\u003cbr/\u003e    progressDurationMillis: Int = 5000,\u003cbr/\u003e    onClick: () -\u0026gt; Unit,\u003cbr/\u003e    onProgressComplete: () -\u0026gt; Unit = {}\u003cbr/\u003e) {\u003cbr/\u003e    // ... implementation to follow\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"ff79\"\u003e\u003cstrong\u003e2. Initialising the Animation\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"bba7\"\u003eInside our composable, we need to set up the \u003ccode\u003eAnimatable\u003c/code\u003e that will control the progress animation. We\u0026#39;ll initialise it with a value of \u003ccode\u003e0f\u003c/code\u003e (representing 0% progress).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e506\"\u003eval animatedWithFraction = remember { Animatable(0f) }\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"dd0b\"\u003eNext, we’ll use a \u003ccode\u003eLaunchedEffect\u003c/code\u003e to start the animation when the \u003ccode\u003eProgressButton\u003c/code\u003e is first composed. The animation will run from \u003ccode\u003e0f\u003c/code\u003e to \u003ccode\u003e1f\u003c/code\u003e over the specified \u003ccode\u003eprogressDurationMillis\u003c/code\u003e. Once the animation is complete, we\u0026#39;ll invoke the \u003ccode\u003eonProgressComplete\u003c/code\u003e callback.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f61b\"\u003eLaunchedEffect(Unit) {\u003cbr/\u003e    animatedWithFraction.animateTo(\u003cbr/\u003e        targetValue = 1f, // Animate to 100%\u003cbr/\u003e        animationSpec = tween(durationMillis = progressDurationMillis, easing = LinearEasing)\u003cbr/\u003e    )\u003cbr/\u003e    onProgressComplete()\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"4bac\"\u003e3. Custom Drawing with \u003ccode\u003edrawBehind\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"8874\"\u003eThis is where the magic happens. We’ll use the \u003ccode\u003eModifier.drawBehind\u003c/code\u003e to draw our progress indicator. Inside the \u003ccode\u003edrawBehind\u003c/code\u003e block, we have access to a \u003ccode\u003eDrawScope\u003c/code\u003e, which provides the drawing context.\u003c/p\u003e\u003cp id=\"3326\"\u003eWe first get the outline of the button’s shape. This outline is then converted into a \u003ccode\u003ePath\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1cb4\"\u003eval defaultButtonClipShape = shape\u003cbr/\u003eval outline = defaultButtonClipShape.createOutline(\u003cbr/\u003e    this.size,\u003cbr/\u003e    layoutDirection,\u003cbr/\u003e    density\u003cbr/\u003e)\u003cbr/\u003eval buttonShapePath = Path().apply { addOutline(outline) }\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"fa7d\"\u003e\u003cstrong\u003e4. Clipping the Progress Animation\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"b876\"\u003eTo ensure our progress animation respects the button’s shape (including any rounded corners), we use \u003ccode\u003eclipPath\u003c/code\u003e. This function takes a \u003ccode\u003ePath\u003c/code\u003e and clips the drawing operations within its lambda to that path.\u003c/p\u003e\u003cp id=\"9f8f\"\u003eInside the \u003ccode\u003eclipPath\u003c/code\u003e block, we draw a rectangle. The width of this rectangle is determined by our animated fraction, causing it to grow from left to right.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"343d\"\u003eclipPath(buttonShapePath) {\u003cbr/\u003e    drawRect(\u003cbr/\u003e        color = color,\u003cbr/\u003e        size = Size(\u003cbr/\u003e            width = this.size.width * animatedWithFraction.value,\u003cbr/\u003e            height = this.size.height\u003cbr/\u003e        ),\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"94e9\"\u003e5. Assembling the Button\u003c/h2\u003e\u003cp id=\"2023\"\u003eFinally, we put everything together within the \u003ccode\u003eButton\u003c/code\u003e composable. We apply our custom \u003ccode\u003edrawBehind\u003c/code\u003e modifier and set the button\u0026#39;s colors and shape. The container color has a reduced alpha to make the progress animation underneath visible.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4a6a\"\u003eButton(\u003cbr/\u003e    onClick = onClick,\u003cbr/\u003e    modifier = Modifier\u003cbr/\u003e        .height(IntrinsicSize.Max)\u003cbr/\u003e        .drawBehind { /* ... our drawing code ... */ },\u003cbr/\u003e    colors = ButtonDefaults.buttonColors(\u003cbr/\u003e        containerColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f),\u003cbr/\u003e        contentColor = MaterialTheme.colorScheme.onPrimary\u003cbr/\u003e    ),\u003cbr/\u003e    shape = shape\u003cbr/\u003e) {\u003cbr/\u003e    Text(\u003cbr/\u003e        text = text,\u003cbr/\u003e        style = MaterialTheme.typography.bodyMedium\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"08b8\"\u003eUsage Example\u003c/h2\u003e\u003cp id=\"9e84\"\u003eIntegrating the \u003ccode\u003eProgressButton\u003c/code\u003e into your app is straightforward. Here’s how you can use it in your UI:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fec0\"\u003e@Preview\u003cbr/\u003e@Composable\u003cbr/\u003eprivate fun ProgressBtnPreview() {\u003cbr/\u003e    SpeseTheme {\u003cbr/\u003e        Surface(\u003cbr/\u003e            modifier = Modifier.fillMaxSize(),\u003cbr/\u003e        ) {\u003cbr/\u003e            Column(\u003cbr/\u003e                modifier = Modifier.fillMaxSize(),\u003cbr/\u003e                verticalArrangement = Arrangement.Center,\u003cbr/\u003e                horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e            ) {\u003cbr/\u003e                SpeseProgressButton(\u003cbr/\u003e                    text = \u0026#34;Let\u0026#39;s Get Started\u0026#34;,\u003cbr/\u003e                    onClick = {\u003cbr/\u003e                        println(\u0026#34;On Click is triggered\u0026#34;)\u003cbr/\u003e                    },\u003cbr/\u003e                    shape = RoundedCornerShape(corner = CornerSize(12.dp)),\u003cbr/\u003e                    onProgressComplete = {\u003cbr/\u003e                        println(\u0026#34;Progress is completed\u0026#34;)\u003cbr/\u003e                    }\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"db32\"\u003eIn this example, we’ve created a progress button with rounded corners. The progress animation will complete in 5 seconds (the default duration). You can easily customize the text, shape, duration, and actions to fit your app’s needs.\u003c/p\u003e\u003cp id=\"19bf\"\u003eThe full code for this \u003ccode\u003eProgressButton\u003c/code\u003e could be found here, in this \u003ca href=\"https://gist.github.com/JyotimoyKashyap/ca14d94d1274a467c52e7f994000f37b\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGist\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"5c7d\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"f36b\"\u003eBy combining the power of Jetpack Compose’s animation APIs and custom drawing modifiers, we’ve created a dynamic and engaging \u003ccode\u003eProgressButton\u003c/code\u003e. This component not only enhances the visual appeal of your app but also provides valuable feedback to your users. Feel free to take this code, experiment with different shapes and animations, and integrate it into your own projects to create a more interactive and delightful user experience.\u003c/p\u003e\u003cp id=\"957e\"\u003eFeel free to explore other articles on different custom components that I created in the past with Jetpack Compose\u003c/p\u003e\u003col\u003e\u003cli id=\"e2ce\"\u003e\u003ca href=\"https://medium.com/@jyotimoykashyap/building-an-animated-stacked-bar-chart-in-jetpack-compose-9ad2b2acc5e1\" rel=\"noopener\"\u003eBuilding an Animated Stacked Bar Chart in Jetpack Compose\u003c/a\u003e\u003c/li\u003e\u003cli id=\"3641\"\u003e\u003ca href=\"https://medium.com/@jyotimoykashyap/building-a-clean-reusable-dropdown-menu-in-jetpack-compose-3a803c077645\" rel=\"noopener\"\u003eBuilding a Clean \u0026amp; Reusable Dropdown Menu in Jetpack Compose\u003c/a\u003e\u003c/li\u003e\u003cli id=\"b102\"\u003e\u003ca href=\"https://medium.com/@jyotimoykashyap/icon-picker-jetpack-compose-way-b0c81980a596\" rel=\"noopener\"\u003eBuilding an Icon Picker in Jetpack Compose\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"4bf8\"\u003e\u003cem\u003eHappy Composing!\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-06-27T05:58:21.994Z",
  "modifiedTime": null
}
