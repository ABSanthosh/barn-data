{
  "id": "64f5f48a-4def-46ef-b74c-078e444de8cb",
  "title": "Android Weekly Issue #671",
  "link": "https://androidweekly.net/issues/issue-671/rss.xml",
  "description": "Articles \u0026 Tutorials Sponsored Have you paid your 20% mobile release “tax”? Join mobile leaders from Skyscanner and SoFi on May 8 to find out just how much your outdated mobile release processes are actually costing you—and learn the ROI of updating how you work and ship. Register for the live discussion. Exploring Jetpack Compose: DockedSearchBar Joe Birch explores the DockedSearchBar composable in Jetpack Compose Material3, highlighting its docked layout that integrates seamlessly within app content and supports customizable input fields and expandable search suggestions. Netflix App Testing At Scale Ken Yee of Netflix outlines their scalable Android testing strategy, emphasizing team-owned tests, layered test types, and broad physical device coverage to ensure quality and reduce flakiness. Sponsored AI Model Showdown: Who Fixes Android Crashes Best? See how AI models stack up at generating code fixes for Android and iOS crashes. Instabug benchmarks the leading models from OpenAI, Google, Anthropic, and Meta to reveal surprising platform-specific strengths and which models deliver the most accurate solutions for your debugging arsenal. Maps in Jetpack Compose — A beginner’s guide Anitaa Murthy provides a beginner-friendly guide to integrating Google Maps into Jetpack Compose, covering setup, map configuration, and adding markers with customizable options. The Story Behind K2 Mode and How It Works Yan Zhulanow details the development of IntelliJ IDEA’s K2 mode, highlighting its concurrency-friendly architecture, elimination of global locks, and the introduction of the Kotlin Analysis API to enhance performance, scalability, and maintainability of Kotlin support in the IDE. Your App Codebase is Slowly Turning Into a Monster Narayan Panthi discusses how growing Android codebases can become unmanageable over time and advocates for modularization, scalable architecture, and adopting modern technologies to maintain performance and developer productivity. Understanding DisposableEffect, LaunchedEffect, and Composables Sahil Thakar clarifies the execution order of key side-effect functions in Jetpack Compose, helping developers better manage side effects and lifecycle events. Configuring multiple SQLite databases in Android with SQLDelight 2 Amanda Hinchman demonstrates configuring multiple SQLite databases in Android using SQLDelight 2, integrating Hilt and KSP to manage distinct database instances within a modular architecture. Kotlin Coroutines: The real difference between Job.cancel() and Scope.cancel() Anatolii Frolov explains the key difference between job.cancel() and scope.cancel() in Kotlin coroutines, focusing on their impact on coroutine lifecycle management in Android. Understanding Kotlin Generics Through a Fantasy Story Suhyeon Kim explains Kotlin generics through a fantasy narrative, illustrating concepts like variance, type erasure, and reified types to make them more accessible. Migrating To Kotlin 2.0 In Your Jetpack Compose Project Tomer Pacific outlines the steps to migrate a Jetpack Compose project to Kotlin 2.0, emphasizing the adoption of the Compose Compiler Gradle plugin and the transition to Gradle Version Catalogs for managing dependencies. ￼ Lint Be Gone: Speed Up Your Android Release APK Builds Ademir Queiroga explains how disabling the lintVitalAnalyzeRelease task in Gradle can significantly reduce Android release APK build times, particularly in CI environments where linting isn’t essential. Getting Started with Material Design 3 in Jetpack Compose Mubarak Native offers a practical introduction to using Material Design 3 in Jetpack Compose, focusing on theming and updated components for building modern, adaptive UIs. Making Android Code Cleaner with Use Cases Siarhei Krupenich advocates for replacing bloated interactors with single-responsibility use cases in Kotlin Coroutines to improve testability, maintainability, and adherence to Clean Architecture principles. Leveraging Sealed Classes and Interfaces for Better Domain Modeling Ignacio Carrión demonstrates how Kotlin’s sealed classes and interfaces can enhance domain modeling by enabling exhaustive when expressions, ensuring type safety, and providing clear, maintainable representations of domain concepts. Place a sponsored post Advertise to more than 80k Android developers! We reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product! Libraries \u0026 Code JsonVisualizer A cross-platform desktop application for visualizing and exploring JSON data built with Compose Desktop. Learn-Kotlin-Flow Learn Kotlin Flow by real examples for Android App Platform Amazon introduces App Platform, a lightweight framework for Kotlin Multiplatform projects that emphasizes modular architecture, lifecycle-aware scopes, and decoupled UI through presenters and renderers, with default support for kotlin-inject-anvil and Compose Multiplatform News KotlinConf 2025: Last Tickets, Epic Talks, an Evening to Remember \u0026 More From not-to-miss sessions to the legendary party, here’s a quick preview of everything waiting for you in Copenhagen, Denmark, on May 21–23. Videos \u0026 Podcasts Earning Google’s Recognition In this interview, Harun shares his journey from humble beginnings to Google recognition, highlighting the impact of tech communities, overcoming challenges, and the role of event organizing and mentoring in his growth. Clean Architecture: The ONE Change That Transforms Use Cases Philipp Lackner goes over why 99% of Android devs misunderstand use cases which leads to an overcomplicated useless architecture and how you can avoid that. Every Developer Needs a Side Hustle - Coding Vlog (ep. 2) Daniel Atitienei shares thoughts on why you need a side hustle as a software engineer. Ktor vs. Spring Boot - Which Backend Framework Is Best For Mobile Developers? Philipp Lackner compares two popular backends among Kotlin developers: Spring Boot and Ktor. Android Devs Live Stream - 16-Apr-2025 Jov Mit's live stream recording, focusing on: Compose: Composition, Recomposition, Optimization and AI Integrations for Android Devs",
  "author": "",
  "published": "Sun, 20 Apr 2025 09:55:50 +0000",
  "source": "https://androidweekly.net/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2912,
  "excerpt": "",
  "siteName": "",
  "favicon": "",
  "text": "Join mobile leaders from Skyscanner and SoFi on May 8 to find out just how much your outdated mobile release processes are actually costing you—and learn the ROI of updating how you work and ship. Register for the live discussion. Joe Birch explores the DockedSearchBar composable in Jetpack Compose Material3, highlighting its docked layout that integrates seamlessly within app content and supports customizable input fields and expandable search suggestions. Ken Yee of Netflix outlines their scalable Android testing strategy, emphasizing team-owned tests, layered test types, and broad physical device coverage to ensure quality and reduce flakiness. See how AI models stack up at generating code fixes for Android and iOS crashes. Instabug benchmarks the leading models from OpenAI, Google, Anthropic, and Meta to reveal surprising platform-specific strengths and which models deliver the most accurate solutions for your debugging arsenal. Anitaa Murthy provides a beginner-friendly guide to integrating Google Maps into Jetpack Compose, covering setup, map configuration, and adding markers with customizable options. Yan Zhulanow details the development of IntelliJ IDEA’s K2 mode, highlighting its concurrency-friendly architecture, elimination of global locks, and the introduction of the Kotlin Analysis API to enhance performance, scalability, and maintainability of Kotlin support in the IDE. Narayan Panthi discusses how growing Android codebases can become unmanageable over time and advocates for modularization, scalable architecture, and adopting modern technologies to maintain performance and developer productivity. Tomer Pacific outlines the steps to migrate a Jetpack Compose project to Kotlin 2.0, emphasizing the adoption of the Compose Compiler Gradle plugin and the transition to Gradle Version Catalogs for managing dependencies. ￼ Siarhei Krupenich advocates for replacing bloated interactors with single-responsibility use cases in Kotlin Coroutines to improve testability, maintainability, and adherence to Clean Architecture principles. We reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product! A cross-platform desktop application for visualizing and exploring JSON data built with Compose Desktop. Amazon introduces App Platform, a lightweight framework for Kotlin Multiplatform projects that emphasizes modular architecture, lifecycle-aware scopes, and decoupled UI through presenters and renderers, with default support for kotlin-inject-anvil and Compose Multiplatform In this interview, Harun shares his journey from humble beginnings to Google recognition, highlighting the impact of tech communities, overcoming challenges, and the role of event organizing and mentoring in his growth. ]]\u003e",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.runway.team/webinar/the-roi-of-mobile-release-management?utm_source=newsletter\u0026amp;utm_medium=android-weekly\u0026amp;utm_campaign=apr-20-25\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/6803fe/113c93bc47c5000790/square_runway_team_logo.jpeg\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eJoin mobile leaders from Skyscanner and SoFi on May 8 to find out just how much your outdated mobile release processes are actually costing you—and learn the ROI of updating how you work and ship. Register for the live discussion.\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eJoe Birch explores the DockedSearchBar composable in Jetpack Compose Material3, highlighting its docked layout that integrates seamlessly within app content and supports customizable input fields and expandable search suggestions.\n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eKen Yee of Netflix outlines their scalable Android testing strategy, emphasizing team-owned tests, layered test types, and broad physical device coverage to ensure quality and reduce flakiness.\n\u003c/p\u003e\u003c/div\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.instabug.com/blog/benchmarking-ai-code-fix-mobile-crashes?utm_source=androidweekly\u0026amp;utm_medium=newsletters\u0026amp;utm_campaign=androidweekly-q125-ai-code-fix-benchmarks\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/67fe52/853c93bc0f85000dbb/square_IBG-Logo_85px.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eSee how AI models stack up at generating code fixes for Android and iOS crashes. Instabug benchmarks the leading models from OpenAI, Google, Anthropic, and Meta to reveal surprising platform-specific strengths and which models deliver the most accurate solutions for your debugging arsenal.\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eAnitaa Murthy provides a beginner-friendly guide to integrating Google Maps into Jetpack Compose, covering setup, map configuration, and adding markers with customizable options.\n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eYan Zhulanow details the development of IntelliJ IDEA’s K2 mode, highlighting its concurrency-friendly architecture, elimination of global locks, and the introduction of the Kotlin Analysis API to enhance performance, scalability, and maintainability of Kotlin support in the IDE.\n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eNarayan Panthi discusses how growing Android codebases can become unmanageable over time and advocates for modularization, scalable architecture, and adopting modern technologies to maintain performance and developer productivity.\n\u003c/p\u003e\u003c/div\u003e\n\n\n\n\n\u003cdiv\u003e\u003cp\u003eTomer Pacific outlines the steps to migrate a Jetpack Compose project to Kotlin 2.0, emphasizing the adoption of the Compose Compiler Gradle plugin and the transition to Gradle Version Catalogs for managing dependencies. ￼\n\u003c/p\u003e\u003c/div\u003e\n\n\n\u003cdiv\u003e\u003cp\u003eSiarhei Krupenich advocates for replacing bloated interactors with single-responsibility use cases in Kotlin Coroutines to improve testability, maintainability, and adherence to Clean Architecture principles.\n\u003c/p\u003e\u003c/div\u003e\n\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://androidweekly.net/jobs/new\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/6803fe/503c93bc47c50007d1/square_aw.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eWe reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product!\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eA cross-platform desktop application for visualizing and exploring JSON data built with Compose Desktop.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eAmazon introduces App Platform, a lightweight framework for Kotlin Multiplatform projects that emphasizes modular architecture, lifecycle-aware scopes, and decoupled UI through presenters and renderers, with default support for kotlin-inject-anvil and Compose Multiplatform\n\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=jfrHUpjxGjo\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/680461/c23c93bc47c50015a8/square_Bildschirmfoto_2025-04-20_um_11.54.53.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eIn this interview, Harun shares his journey from humble beginnings to Google recognition, highlighting the impact of tech communities, overcoming challenges, and the role of event organizing and mentoring in his growth.\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\n\n]]\u0026gt;\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
