{
  "id": "3b831e37-2efd-4383-a815-a3ef6974e216",
  "title": "How Do You Keep Your Kotlin Code Crystal Clear?",
  "link": "https://blog.kotlin-academy.com/how-do-you-keep-your-kotlin-code-crystal-clear-e9643e1be0d0?source=rss----e57b304801ef---4",
  "description": "Mastering KDoc \u0026 Dokka Documentation!Continue reading on Kt. Academy Â»",
  "author": "Harman Khera",
  "published": "Mon, 28 Oct 2024 08:37:18 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "dokka",
    "kotlin-beginners",
    "coding",
    "kotlin",
    "kdoc"
  ],
  "byline": "Harman Khera",
  "length": 1008,
  "excerpt": "As Kotlin continues to revolutionise the development landscape, effective documentation has become more crucial than ever. Thatâ€™s where KDoc comes in Kotlinâ€™s powerful documentation tool. In thisâ€¦",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "As Kotlin continues to revolutionise the development landscape, effective documentation has become more crucial than ever.Thatâ€™s where KDoc comes in Kotlinâ€™s powerful documentation tool. In this article, we will dive into the world of KDoc and will explore its basics, best practices and how the Dokka library can take documentation to the next level. ðŸš€Photo by Kevin Ku on UnsplashWhatâ€™s KDoc All About? ðŸ¤”KDoc is Kotlinâ€™s built-in documentation tool, similar to JavaDoc.It allows you to document your code using comments, which are then processed to generate HTML documentation. Sounds simple? It is!The Core Components of KDoc1. Block TagsBlock tags, denoted by the @ symbol, form the foundation of KDoc.They furnish structured information about code elements, such as functions, classes, and properties.Some commonly employed tags include:@param: Provides a description of a functionâ€™s parameter.@return: Describes the value returned by a function.@throws: Specifies the exceptions a function might throw.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*10w1Rl085BACdXf0xvUDqA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@harmanpreet.khera?source=post_page---byline--e9643e1be0d0--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Harman Khera\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*z0eDkJYyTzE_ZZbY9Cy7KA@2x.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://blog.kotlin-academy.com/?source=post_page---byline--e9643e1be0d0--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Kt. Academy\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*2grDGjzH0tfX8XiaF4Izaw.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"c0d5\"\u003eAs Kotlin continues to revolutionise the development landscape, effective documentation has become more crucial than ever.\u003c/p\u003e\u003cp id=\"2894\"\u003eThatâ€™s where KDoc comes in Kotlinâ€™s powerful documentation tool. In this article, we will dive into the world of KDoc and will explore its basics, best practices and how the Dokka library can take documentation to the next level. ðŸš€\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@ikukevk?utm_content=creditCopyText\u0026amp;utm_medium=referral\u0026amp;utm_source=unsplash\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKevin Ku\u003c/a\u003e on \u003ca href=\"https://unsplash.com/photos/closeup-photo-of-eyeglasses-w7ZyuGYNpRQ?utm_content=creditCopyText\u0026amp;utm_medium=referral\u0026amp;utm_source=unsplash\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"dea4\"\u003eWhatâ€™s KDoc All About? ðŸ¤”\u003c/h2\u003e\u003cp id=\"270f\"\u003eKDoc is Kotlinâ€™s built-in documentation tool, similar to JavaDoc.\u003c/p\u003e\u003cp id=\"335a\"\u003eIt allows you to document your code using comments, which are then processed to generate HTML documentation. Sounds simple? It is!\u003c/p\u003e\u003ch2 id=\"d8fd\"\u003eThe Core Components of KDoc\u003c/h2\u003e\u003ch2 id=\"e0c3\"\u003e1. Block Tags\u003c/h2\u003e\u003cp id=\"3226\"\u003eBlock tags, denoted by the @ symbol, form the foundation of KDoc.\u003c/p\u003e\u003cp id=\"89c8\"\u003eThey furnish structured information about code elements, such as functions, classes, and properties.\u003c/p\u003e\u003cp id=\"0958\"\u003eSome commonly employed tags include:\u003c/p\u003e\u003cul\u003e\u003cli id=\"31c8\"\u003e\u003cstrong\u003e\u003cem\u003e@param:\u003c/em\u003e\u003c/strong\u003e Provides a description of a functionâ€™s parameter.\u003c/li\u003e\u003cli id=\"3e39\"\u003e\u003cstrong\u003e\u003cem\u003e@return:\u003c/em\u003e\u003c/strong\u003e Describes the value returned by a function.\u003c/li\u003e\u003cli id=\"6ba7\"\u003e\u003cstrong\u003e\u003cem\u003e@throws:\u003c/em\u003e\u003c/strong\u003e Specifies the exceptions a function might throw.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-10-28T08:37:18.042Z",
  "modifiedTime": null
}
