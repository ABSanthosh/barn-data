{
  "id": "a92f647d-30e0-4078-bb19-1471f5b683c1",
  "title": "Collapsible header in Jetpack Compose using NestedScrollConnection and SubComposeLayout",
  "link": "https://proandroiddev.com/collapsible-header-in-jetpack-compose-using-nestedscrollconnection-and-subcomposelayout-6615873c0b5d?source=rss----c72404660798---4",
  "description": "",
  "author": "Shoaib Mushtaq",
  "published": "Fri, 06 Dec 2024 23:59:32 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": null,
  "byline": "Shoaib Mushtaq",
  "length": 4487,
  "excerpt": "Letâ€™s start by looking at the two final states of the header that weâ€™ll achieve using NestedScrollConnection and SubComposeLayout in Jetpack Compose. To better understand how this UI is structuredâ€¦",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "In Jetpack Compose, building a collapsible header with a custom navigation bar can be straightforward using NestedScrollConnectionâ€”provided the header has fixed expanded and collapsed heights. However, when the header height is dynamic and depends on its content (e.g., based on backend responses), things get tricky. Using onGloballyPositioned to measure the header's height alone may not suffice. To address this, I combined NestedScrollConnection with SubComposeLayout, as it handles dynamic header content effectively.Our Goal: The final header statesLetâ€™s start by looking at the two final states of the header that weâ€™ll achieve using NestedScrollConnection and SubComposeLayout in Jetpack Compose.Header transition from expanded form to collapsed form and vice versaUI Composition OverviewTo better understand how this UI is structured, letâ€™s break it down. The layout uses a Box composable containing a Column. Within the Column, we have two key components: the ExpandedHeader and the LazyColumn. Iâ€™ll dive deeper into the nestedScroll(connection) and scrollable implementations in the following sections.Breaking Down ExpandedHeaderThe ExpandedHeader consists of two parts: the header and the navigation bar. To implement this, we use SubComposeLayout, creating two placeablesâ€”one for the header and another for the navigation bar. The HeaderContent represents the expanded state, while the NavBar corresponds to the collapsed state during transitions.If youâ€™re new to SubComposeLayout in Jetpack Compose, I highly recommend exploring these resources for a deeper understanding: SubComposeLayoutSample and Advanced Layouts in Compose.The Role of NestedScrollConnectionBy default, the header isnâ€™t scrollable â€” only the lazy list is. However, our goal is to allow the header to move upward in sync with the scroll offset of the lazy list. This is where NestedScrollConnection becomes essential.For a deeper dive into NestedScrollConnection, check out this blog post. Below, Iâ€™ll share my implementation of NestedScrollConnection, focusing on its onPreScroll and onPostScroll overrides.Implementing NestedScrollConnection with the header?Hereâ€™s how we integrate NestedScrollConnection within our Activity and composables to enable smooth interactions between the header and the lazy list.Bring It All TogetherWhen all the pieces of this puzzle come together, the result is seamless. As the lazy list scrolls, the header scrolls along with it. Once the header reaches a specific progress, we dynamically adjust the alpha value of the NavigationBar background, its icons, and the title for a smooth transition effect.Challenges! Faced ðŸš§ and SolvedðŸ’ªCalculation of header offset and progress was a challenge and we have to do some Maths here to calculate headerOffset and progress which we will use to adjust the height of header and alpha of navBar when lazy list scrolls up2. When we scrolls the list up, the header scrolls up first and then the list. On the other hand, when I scroll down the list, the header was scrolling down first and then the list was scrolling but my requirement was that we we scroll down the list, we first scroll down the list untill it reaches to first item and then we scroll down the header. To solve this case, I added this below code snippet in onPreScroll and passing the zero offset when we scroll downward to pass it to the Node consumption phase. â€” More details on Node consumption phase is in this blogpost3. If I tried to scroll the header by dragging the header part(not the lazy list), It was not scrolling because its was a Column with no scrollable behavior so to solve this case and make the header scrollable even if we drag the header part without touching the lazy list. Here is how I did it.4. Here is how we are adjusting height of header based on the header offset received through NestedScrollConnection , and placing the placeables calculated with SubComposeLayout .5. In this way, we are calculating alpha value based on the progress received from NestedScrollConnection and changing the alpha of Navigation Bar ComposableIf youâ€™d like to see the complete implementation in one place, feel free to check out this repository.For more details, please refer to these resources.Jetpack Compose, Nested scrolling in Jetpack Compose, SubComposeLayoutSample , Layouts in Jetpack ComposeFeel free to ask any questions you may have â€” Iâ€™d be happy to collaborate and discuss further.I hope you found this helpful, and thank you for reading!",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*P_Gj7ABxGbbaZdCfHefM4w.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://shoaibmushtaq25.medium.com/?source=post_page---byline--6615873c0b5d--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Shoaib Mushtaq\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*U5kkLE-qOt0B9S7yZiqMFw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--6615873c0b5d--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"6c3b\"\u003e\u003cem\u003eIn Jetpack Compose, building a collapsible header with a custom navigation bar can be straightforward using \u003c/em\u003e\u003ccode\u003e\u003cem\u003eNestedScrollConnection\u003c/em\u003e\u003c/code\u003e\u003cem\u003eâ€”provided the header has fixed expanded and collapsed heights. However, when the header height is dynamic and depends on its content (e.g., based on backend responses), things get tricky. Using \u003c/em\u003e\u003ccode\u003e\u003cem\u003eonGloballyPositioned\u003c/em\u003e\u003c/code\u003e\u003cem\u003e to measure the header\u0026#39;s height alone may not suffice. To address this, I combined \u003c/em\u003e\u003ccode\u003e\u003cem\u003eNestedScrollConnection\u003c/em\u003e\u003c/code\u003e\u003cem\u003e with \u003c/em\u003e\u003ccode\u003e\u003cem\u003eSubComposeLayout\u003c/em\u003e\u003c/code\u003e\u003cem\u003e, as it handles dynamic header content effectively.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"c48c\"\u003eOur Goal: The final header states\u003c/h2\u003e\u003cp id=\"84fc\"\u003eLetâ€™s start by looking at the two final states of the header that weâ€™ll achieve using \u003ccode\u003eNestedScrollConnection\u003c/code\u003e and \u003ccode\u003eSubComposeLayout\u003c/code\u003e in Jetpack Compose.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eHeader transition from expanded form to collapsed form and vice versa\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"b7d2\"\u003eUI Composition Overview\u003c/h2\u003e\u003cp id=\"5482\"\u003eTo better understand how this UI is structured, letâ€™s break it down. The layout uses a \u003ccode\u003eBox\u003c/code\u003e composable containing a \u003ccode\u003eColumn\u003c/code\u003e. Within the \u003ccode\u003eColumn\u003c/code\u003e, we have two key components: the \u003ccode\u003eExpandedHeader\u003c/code\u003e and the \u003ccode\u003eLazyColumn\u003c/code\u003e. Iâ€™ll dive deeper into the \u003ccode\u003enestedScroll(connection)\u003c/code\u003e and \u003ccode\u003escrollable\u003c/code\u003e implementations in the following sections.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"8651\"\u003e\u003cspan\u003eB\u003c/span\u003ereaking Down ExpandedHeader\u003c/h2\u003e\u003cp id=\"63f7\"\u003eThe \u003ccode\u003eExpandedHeader\u003c/code\u003e consists of two parts: the header and the navigation bar. To implement this, we use \u003ccode\u003eSubComposeLayout\u003c/code\u003e, creating two placeablesâ€”one for the header and another for the navigation bar. The \u003ccode\u003eHeaderContent\u003c/code\u003e represents the expanded state, while the \u003ccode\u003eNavBar\u003c/code\u003e corresponds to the collapsed state during transitions.\u003cbr/\u003eIf youâ€™re new to \u003ccode\u003eSubComposeLayout\u003c/code\u003e in Jetpack Compose, I highly recommend exploring these resources for a deeper understanding: \u003ca href=\"https://cs.android.com/androidx/platform/tools/dokka-devsite-plugin/+/master:testData/compose/samples/ui/samples/SubcomposeLayoutSample.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eSubComposeLayoutSample\u003c/em\u003e\u003c/a\u003e and \u003ca href=\"https://developer.android.com/quick-guides/content/video/advanced-layouts-compose\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eAdvanced Layouts in Compose\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"b12f\"\u003eThe Role of NestedScrollConnection\u003c/h2\u003e\u003cp id=\"4c76\"\u003eBy default, the header isnâ€™t scrollable â€” only the lazy list is. However, our goal is to allow the header to move upward in sync with the scroll offset of the lazy list. This is where \u003ccode\u003eNestedScrollConnection\u003c/code\u003e becomes essential.\u003c/p\u003e\u003cp id=\"6bab\"\u003eFor a deeper dive into \u003ccode\u003eNestedScrollConnection\u003c/code\u003e, check out \u003ca href=\"https://medium.com/androiddevelopers/understanding-nested-scrolling-in-jetpack-compose-eb57c1ea0af0\" rel=\"noopener\"\u003ethis blog post\u003c/a\u003e. Below, Iâ€™ll share my implementation of \u003ccode\u003eNestedScrollConnection\u003c/code\u003e, focusing on its \u003ccode\u003eonPreScroll\u003c/code\u003e and \u003ccode\u003eonPostScroll\u003c/code\u003e overrides.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"74b3\"\u003eImplementing NestedScrollConnection with the header?\u003c/h2\u003e\u003cp id=\"3906\"\u003eHereâ€™s how we integrate \u003ccode\u003eNestedScrollConnection\u003c/code\u003e within our Activity and composables to enable smooth interactions between the header and the lazy list.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"97a5\"\u003eBring It All Together\u003c/h2\u003e\u003cp id=\"ca58\"\u003eWhen all the pieces of this puzzle come together, the result is seamless. As the lazy list scrolls, the header scrolls along with it. Once the header reaches a specific progress, we dynamically adjust the alpha value of the \u003ccode\u003eNavigationBar\u003c/code\u003e background, its icons, and the title for a smooth transition effect.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"02a8\"\u003eChallenges! Faced ðŸš§ and SolvedðŸ’ª\u003c/h2\u003e\u003col\u003e\u003cli id=\"9d95\"\u003eCalculation of header offset and progress was a challenge and we have to do some Maths here to calculate \u003ccode\u003eheaderOffset\u003c/code\u003e and \u003ccode\u003eprogress\u003c/code\u003e which we will use to adjust the height of header and alpha of navBar when lazy list scrolls up\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"54cc\"\u003e2. When we scrolls the list up, the header scrolls up first and then the list. On the other hand, when I scroll down the list, the header was scrolling down first and then the list was scrolling but my requirement was that we we scroll down the list, we first scroll down the list untill it reaches to first item and then we scroll down the header. To solve this case, I added this below code snippet in \u003ccode\u003eonPreScroll\u003c/code\u003e and passing the zero offset when we scroll downward to pass it to the Node consumption phase. â€” More details on Node consumption phase is in this \u003ca href=\"https://medium.com/androiddevelopers/understanding-nested-scrolling-in-jetpack-compose-eb57c1ea0af0\" rel=\"noopener\"\u003eblogpost\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"3eff\"\u003e3. If I tried to scroll the header by dragging the header part(not the lazy list), It was not scrolling because its was a Column with no scrollable behavior so to solve this case and make the header scrollable even if we drag the header part without touching the lazy list. Here is how I did it.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"ffeb\"\u003e4. Here is how we are adjusting height of header based on the header offset received through \u003ccode\u003eNestedScrollConnection\u003c/code\u003e , and placing the placeables calculated with \u003ccode\u003eSubComposeLayout\u003c/code\u003e .\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5a68\"\u003e5. In this way, we are calculating alpha value based on the progress received from \u003ccode\u003eNestedScrollConnection\u003c/code\u003e and changing the alpha of Navigation Bar Composable\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"dc05\"\u003eIf youâ€™d like to see the complete implementation in one place, feel free to check out this repository.\u003c/p\u003e\u003cp id=\"0d76\"\u003eFor more details, please refer to these resources.\u003c/p\u003e\u003cp id=\"8d72\"\u003e\u003ca href=\"https://developer.android.com/jetpack/compose\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e, \u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/pointer-input/scroll#nested-scrolling-interop\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNested scrolling in Jetpack Compose\u003c/a\u003e, \u003ca href=\"https://cs.android.com/androidx/platform/tools/dokka-devsite-plugin/+/master:testData/compose/samples/ui/samples/SubcomposeLayoutSample.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSubComposeLayoutSample\u003c/a\u003e , \u003ca href=\"https://developer.android.com/jetpack/compose/layouts/material\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLayouts in Jetpack Compose\u003c/a\u003e\u003c/p\u003e\u003cp id=\"1688\"\u003eFeel free to ask any questions you may have â€” Iâ€™d be happy to collaborate and discuss further.\u003cbr/\u003eI hope you found this helpful, and thank you for reading!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-12-06T23:59:32.775Z",
  "modifiedTime": null
}
