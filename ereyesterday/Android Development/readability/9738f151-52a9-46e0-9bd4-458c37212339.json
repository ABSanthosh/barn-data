{
  "id": "9738f151-52a9-46e0-9bd4-458c37212339",
  "title": "Building \u0026 Deploying a simple KMP app — Part 2: Secrets",
  "link": "https://proandroiddev.com/building-deploying-a-simple-kmp-app-part-2-secrets-9678deb403a4?source=rss----c72404660798---4",
  "description": "",
  "author": "Robert Munro",
  "published": "Fri, 09 May 2025 13:36:49 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin",
    "kotlin-multiplatform",
    "androiddev",
    "android",
    "android-app-development"
  ],
  "byline": "Robert Munro",
  "length": 5037,
  "excerpt": "Compile and build-time secret handling across multiple platforms. In this series I will go through build and deployment of a simple property website in Kotlin multi-platform.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Compile and build-time secret handling across multiple platforms.In this series I will go through build and deployment of a simple property website in Kotlin multi-platform. The aim is to cover more of the platform dependent issues and provide an example of a fully deployed app over Android, iOS, Desktop and Web.The Github repository is here: https://github.com/sentinelweb/house-shoreditchIn this series:App iconsSecretsLaunchersDependency injectionCI — DevelopCI — Release BuildsDeploymentSecrets HandlingCorrect handling of secrets is vital for app security especially if your source code is open. Leaking secrets into the public domain can be a costly mistake! So it is a good idea to setup secrets handling early in your project.There are a few different places we might need to use secret data:Compile time: This is data the we want to use in our code, they are pieces of data that might be compiled into the binary — we might do this with an API key for example. There are definitely security risks with compiling in data though — as it can still be extracted by de-compiling the binary. So other measures might be needed to keep this data private (e.g. a good code obfuscation tool like Proguard, or DEX Builder on Android). Other measures might be things like using encrypted stores.Build time: This might be data we use to build our deployment binary with. Things like keystores, aliases and passwords for Android builds. In iOS / Apple environments there is Team ID, Build certificates and provisioning profiles (We will cover these more in the upcoming Release builds post).Run time: These might be things like access tokens — which are obtained from a back-end and used to make requests. These would likely be stored in an encrypted store (Like EncryptedSharedPreferences on Android or using Keychain Services on iOS). Since this project didn’t have need for this it is not covered in this series.Compile time secretsFor a KMP project we can make a properties file (e.g. secrets.properties) in the project root folder — which we put our key value pairs in. We ensure that this file is NOT checked into version control by adding it to .gitignore.We can then generate a Kotlin object where we read from the properties file into the fields of the object. We can trigger this task at the end of resources generation — which is before compilation.build.gradle.kts:tasks.register(\"generateSecretsClass\") { doLast { val file = File(\"$projectDir/src/commonMain/kotlin/com/house_shoreditch/app/Secrets.kt\") print(file.absolutePath) file.parentFile.mkdirs() file.writeText( \"\"\" package com.house_shoreditch.app object Secrets { val email: String = \"${getSecret(\"EMAIL\")}\" val phone: String = \"${getSecret(\"PHONE\")}\" } \"\"\".trimIndent() ) }}tasks.named(\"generateComposeResClass\") { dependsOn(\"generateSecretsClass\") ...}fun getSecret(propertyName: String): String { val secretsFile = rootProject.file(\"secrets.properties\") if (secretsFile.exists()) { val properties = Properties() secretsFile.inputStream().use { properties.load(it) } val property = properties.getProperty(propertyName) return property } else return \"invalid\"}secrets.properties:PHONE=+XXXXXXXXXEMAIL=user@email.comDon’t forget to add these files to .gitignore to avoid accidentally committing them..../composeApp/src/commonMain/kotlin/com/house_shoreditch/app/Secrets.kt/secrets.properties...Build time secretsDesktop, Web and AndroidFor Desktop, Web and Android we can also use the secrets.properties file for any build time secrets. Since we have the function:getSecret(propertyName: String): String We can just use this directly to get any secret values we might need for build. For the Android release build we use these values, which are used for release code-signing:ANDROID_KEYSTORE_FILENAME=filename.jksANDROID_ALIAS=keystore-aliasANDROID_PASSWORD=keystore-passwordiOSOn iOS, configuration key value pairs are store in a Config.xcconfig file which is in the iosApp/Configuration/ directory. Handily, we can reference other .xcconfig files from the main configuration file.Config.xcconfig:#include \"Secrets.xcconfig\"BUNDLE_ID=com.house-shoreditch.app.OasisShoreditchAPP_NAME=Oasis ShoreditchSecrets.xcconfig:TEAM_ID=XXXXXXXXFor local builds we just store the TEAM_ID as a secret because this is referenced in the project.pbxproj.This could be used to handle any secrets that we don’t want to check into source control.Other build secrets are required to build the iOS app on CI. We will cover this in later sections.ConclusionHere we have covered compile time secret handling and also client side build time secrets. In the posts on CI we will cover secrets handling for the CI builds.Next: LaunchersReferences[1] Photo credit: https://unsplash.com/photos/grayscale-photo-of-woman-doing-silent-hand-sign-BcjdbyKWquw?utm_content=creditShareLink\u0026utm_medium=referral\u0026utm_source=twitter",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*bjJhaPsYi7WbPGRG463IoA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@rrmunro?source=post_page---byline--9678deb403a4---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Robert Munro\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*ubtXZYacoDkIQ1kOdLroWg.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1190\"\u003eCompile and build-time secret handling across multiple platforms.\u003c/p\u003e\u003cp id=\"7b34\"\u003eIn this series I will go through build and deployment of a simple property website in Kotlin multi-platform. The aim is to cover more of the platform dependent issues and provide an example of a fully deployed app over Android, iOS, Desktop and Web.\u003c/p\u003e\u003cp id=\"b311\"\u003eThe Github repository is here: \u003ca href=\"https://github.com/sentinelweb/house-shoreditch\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://github.com/sentinelweb/house-shoreditch\u003c/a\u003e\u003c/p\u003e\u003cp id=\"9c67\"\u003eIn this series:\u003c/p\u003e\u003col\u003e\u003cli id=\"ee32\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmm-app-part-1-app-icons-8e8b739c7981\" rel=\"noopener\"\u003eApp icons\u003c/a\u003e\u003c/li\u003e\u003cli id=\"9c96\"\u003eSecrets\u003c/li\u003e\u003cli id=\"da25\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-3-launchers-ff8ec2c60d06\" rel=\"noopener\"\u003eLaunchers\u003c/a\u003e\u003c/li\u003e\u003cli id=\"26f7\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-4-dependency-injection-b7189b15e1ba\" rel=\"noopener\"\u003eDependency injection\u003c/a\u003e\u003c/li\u003e\u003cli id=\"e995\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-5-develop-ci-on-github-776ce5d29ca3\" rel=\"noopener\"\u003eCI — Develop\u003c/a\u003e\u003c/li\u003e\u003cli id=\"95f5\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-6-release-ci-on-github-bfc8bb2783cc\" rel=\"noopener\"\u003eCI — Release Builds\u003c/a\u003e\u003c/li\u003e\u003cli id=\"2077\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-7-deployment-b3e6f4d10518\" rel=\"noopener\"\u003eDeployment\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"e0e3\"\u003eSecrets Handling\u003c/h2\u003e\u003cp id=\"5bb6\"\u003eCorrect handling of secrets is vital for app security especially if your source code is open. Leaking secrets into the public domain can be a costly mistake! So it is a good idea to setup secrets handling early in your project.\u003c/p\u003e\u003cp id=\"7bac\"\u003eThere are a few different places we might need to use secret data:\u003c/p\u003e\u003cul\u003e\u003cli id=\"0fbb\"\u003e\u003cstrong\u003eCompile time\u003c/strong\u003e: This is data the we want to use in our code, they are pieces of data that might be compiled into the binary — we might do this with an API key for example. There are definitely security risks with compiling in data though — as it can still be extracted by de-compiling the binary. So other measures might be needed to keep this data private (e.g. a good code obfuscation tool like Proguard, or DEX Builder on Android). Other measures might be things like using encrypted stores.\u003c/li\u003e\u003cli id=\"4036\"\u003e\u003cstrong\u003eBuild time\u003c/strong\u003e: This might be data we use to build our deployment binary with. Things like keystores, aliases and passwords for Android builds. In iOS / Apple environments there is Team ID, Build certificates and provisioning profiles (We will cover these more in the upcoming \u003cem\u003eRelease builds post\u003c/em\u003e).\u003c/li\u003e\u003cli id=\"5976\"\u003e\u003cstrong\u003eRun time\u003c/strong\u003e: These might be things like access tokens — which are obtained from a back-end and used to make requests. These would likely be stored in an encrypted store (Like \u003ccode\u003eEncryptedSharedPreferences\u003c/code\u003e on Android or using Keychain Services on iOS). Since this project didn’t have need for this it is not covered in this series.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"128f\"\u003eCompile time secrets\u003c/h2\u003e\u003cp id=\"afb8\"\u003eFor a KMP project we can make a properties file (e.g. \u003ccode\u003esecrets.properties\u003c/code\u003e) in the project root folder — which we put our key value pairs in. We ensure that this file is NOT checked into version control by adding it to \u003ccode\u003e.gitignore\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"d831\"\u003eWe can then generate a Kotlin object where we read from the properties file into the fields of the object. We can trigger this task at the end of resources generation — which is before compilation.\u003c/p\u003e\u003cp id=\"6c6e\"\u003e\u003ccode\u003ebuild.gradle.kts\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4f65\"\u003etasks.register(\u0026#34;generateSecretsClass\u0026#34;) {\u003cbr/\u003e    doLast {\u003cbr/\u003e        val file = File(\u0026#34;$projectDir/src/commonMain/kotlin/com/house_shoreditch/app/Secrets.kt\u0026#34;)\u003cbr/\u003e        print(file.absolutePath)\u003cbr/\u003e        file.parentFile.mkdirs()\u003cbr/\u003e        file.writeText(\u003cbr/\u003e            \u0026#34;\u0026#34;\u0026#34;\u003cbr/\u003e            package com.house_shoreditch.app\u003cp\u003e                        object Secrets {\u003cbr/\u003e                val email: String = \u0026#34;${getSecret(\u0026#34;EMAIL\u0026#34;)}\u0026#34;\u003cbr/\u003e                val phone: String = \u0026#34;${getSecret(\u0026#34;PHONE\u0026#34;)}\u0026#34;\u003cbr/\u003e            }\u003cbr/\u003e        \u0026#34;\u0026#34;\u0026#34;.trimIndent()\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003etasks.named(\u0026#34;generateComposeResClass\u0026#34;) {\u003cbr/\u003e    dependsOn(\u0026#34;generateSecretsClass\u0026#34;)\u003cbr/\u003e    ...\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003efun getSecret(propertyName: String): String {\u003cbr/\u003e    val secretsFile = rootProject.file(\u0026#34;secrets.properties\u0026#34;)\u003cbr/\u003e    if (secretsFile.exists()) {\u003cbr/\u003e        val properties = Properties()\u003cbr/\u003e        secretsFile.inputStream().use { properties.load(it) }\u003cbr/\u003e        val property = properties.getProperty(propertyName)\u003cbr/\u003e        return property\u003cbr/\u003e    } else return \u0026#34;invalid\u0026#34;\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"eee0\"\u003e\u003ccode\u003esecrets.properties\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"aa02\"\u003ePHONE=+XXXXXXXXX\u003cbr/\u003eEMAIL=user@email.com\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e50e\"\u003eDon’t forget to add these files to \u003ccode\u003e.gitignore\u003c/code\u003e to avoid accidentally committing them.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b661\"\u003e...\u003cbr/\u003e/composeApp/src/commonMain/kotlin/com/house_shoreditch/app/Secrets.kt\u003cbr/\u003e/secrets.properties\u003cbr/\u003e...\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"2de1\"\u003eBuild time secrets\u003c/h2\u003e\u003ch2 id=\"6e1b\"\u003eDesktop, Web and Android\u003c/h2\u003e\u003cp id=\"1589\"\u003eFor Desktop, Web and Android we can also use the \u003ccode\u003esecrets.properties\u003c/code\u003e file for any build time secrets. Since we have the function:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8106\"\u003egetSecret(propertyName: String): String \u003c/span\u003e\u003c/pre\u003e\u003cp id=\"3454\"\u003eWe can just use this directly to get any secret values we might need for build. For the Android release build we use these values, which are used for release code-signing:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c05d\"\u003eANDROID_KEYSTORE_FILENAME=filename.jks\u003cbr/\u003eANDROID_ALIAS=keystore-alias\u003cbr/\u003eANDROID_PASSWORD=keystore-password\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"f611\"\u003eiOS\u003c/h2\u003e\u003cp id=\"83e6\"\u003eOn iOS, configuration key value pairs are store in a \u003ccode\u003eConfig.xcconfig\u003c/code\u003e file which is in the \u003ccode\u003eiosApp/Configuration/\u003c/code\u003e directory. Handily, we can reference other \u003ccode\u003e.xcconfig\u003c/code\u003e files from the main configuration file.\u003c/p\u003e\u003cp id=\"2da4\"\u003e\u003ccode\u003eConfig.xcconfig\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2f0e\"\u003e#include \u0026#34;Secrets.xcconfig\u0026#34;\u003cbr/\u003eBUNDLE_ID=com.house-shoreditch.app.OasisShoreditch\u003cbr/\u003eAPP_NAME=Oasis Shoreditch\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ad68\"\u003e\u003ccode\u003eSecrets.xcconfig\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5e0b\"\u003eTEAM_ID=XXXXXXXX\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b406\"\u003eFor local builds we just store the \u003ccode\u003eTEAM_ID\u003c/code\u003e as a secret because this is referenced in the \u003ccode\u003eproject.pbxproj\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"ae33\"\u003eThis could be used to handle any secrets that we don’t want to check into source control.\u003c/p\u003e\u003cp id=\"f89e\"\u003eOther build secrets are required to build the iOS app on CI. We will cover this in later sections.\u003c/p\u003e\u003ch2 id=\"9ad5\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"d61b\"\u003eHere we have covered compile time secret handling and also client side build time secrets. In the posts on CI we will cover secrets handling for the CI builds.\u003c/p\u003e\u003cp id=\"baba\"\u003e\u003cstrong\u003eNext\u003c/strong\u003e: \u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-3-launchers-ff8ec2c60d06\" rel=\"noopener\"\u003eLaunchers\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"083c\"\u003eReferences\u003c/h2\u003e\u003cp id=\"7b0c\"\u003e[1] \u003cstrong\u003ePhoto credit\u003c/strong\u003e: \u003ca href=\"https://unsplash.com/photos/grayscale-photo-of-woman-doing-silent-hand-sign-BcjdbyKWquw?utm_content=creditShareLink\u0026amp;utm_medium=referral\u0026amp;utm_source=twitter\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://unsplash.com/photos/grayscale-photo-of-woman-doing-silent-hand-sign-BcjdbyKWquw?utm_content=creditShareLink\u0026amp;utm_medium=referral\u0026amp;utm_source=twitter\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-24T21:28:54.698Z",
  "modifiedTime": null
}
