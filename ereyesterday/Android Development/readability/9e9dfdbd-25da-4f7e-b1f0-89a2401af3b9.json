{
  "id": "9e9dfdbd-25da-4f7e-b1f0-89a2401af3b9",
  "title": "Mastering ConstraintLayout in Jetpack Compose: From Basics to Advanced",
  "link": "https://proandroiddev.com/mastering-constraintlayout-in-jetpack-compose-from-basics-to-advanced-cbe1cb1a4b2b?source=rss----c72404660798---4",
  "description": "",
  "author": "Karishma Agrawal",
  "published": "Fri, 20 Jun 2025 23:16:43 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "constraintlayout",
    "jetpack-compose",
    "androiddev",
    "android-app-development",
    "android"
  ],
  "byline": "Karishma Agrawal",
  "length": 6736,
  "excerpt": "When ConstraintLayout First came to Android XML, it was a game-changer; it allowed for flat view hierarchies, which meant better performance and cleaner structure, especially in complex UIs. We can‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "üîß Setting UpJetpack Compose doesn‚Äôt include ConstraintLayout by default. You‚Äôll need to add the dependency:implementation(\"androidx.constraintlayout:constraintlayout-compose:1.0.1\")üõ†Ô∏è Let‚Äôs Build: A Profile Card in XML \u0026 ComposeIt‚Äôs a profile card with an image in the centre vertical, my name and designation to the right of the image, and a button at the end of the screen, also positioned centre vertically.We‚Äôll first look at the XML version of a profile card UI and then convert it into Compose using ConstraintLayout.\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u003candroidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/profile_card\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_margin=\"16dp\" app:cardCornerRadius=\"8dp\" app:cardElevation=\"8dp\"\u003e \u003candroidx.constraintlayout.widget.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"100dp\" android:background=\"@color/white\" android:padding=\"16dp\"\u003e \u003c!-- Profile Image --\u003e \u003cImageView android:id=\"@+id/profile_image\" android:layout_width=\"48dp\" android:layout_height=\"48dp\" android:scaleType=\"centerCrop\" android:src=\"@drawable/ic_launcher_foreground\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003c!-- Name Text --\u003e \u003cTextView android:id=\"@+id/profile_name\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"12dp\" android:text=\"Karishma Agrawal\" android:textSize=\"16sp\" android:textStyle=\"bold\" app:layout_constraintStart_toEndOf=\"@id/profile_image\" app:layout_constraintTop_toTopOf=\"@id/profile_image\" /\u003e \u003c!-- Tagline --\u003e \u003cTextView android:id=\"@+id/profile_tagline\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"4dp\" android:text=\"Android Staff Engineer ‚òïÔ∏è\" android:textColor=\"#666666\" android:textSize=\"14sp\" app:layout_constraintStart_toStartOf=\"@id/profile_name\" app:layout_constraintTop_toBottomOf=\"@id/profile_name\" /\u003e \u003cButton android:id=\"@+id/follow_button\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e\u003c/androidx.cardview.widget.CardView\u003eLet‚Äôs now convert it into composeConstraintLayout in Compose works in the following way :Create references for each composable in the ConstraintLayout using the createRefs() or createRefFor()Here we have 4 elements so we will define them using createRefval (profileImage, name, tagline, followBtn) = createRefs()Constraints are provided using the constrainAs() modifier, which takes the reference as a parameter and lets you specify its constraints in the body lambda.Constraints are specified using linkTo() or other helpful methods.parent is an existing reference that can be used to specify constraints towards the ConstraintLayout composable itself.üöÄ Compose Version of the Same UI@Composablefun ProfileCard() { Card( modifier = Modifier .fillMaxWidth() .padding(16.dp), elevation = CardDefaults.cardElevation(8.dp), shape = RoundedCornerShape(8.dp) ) { ConstraintLayout( modifier = Modifier .fillMaxWidth() .height(100.dp) .padding(16.dp) ) { val (profileImage, name, tagline, followBtn) = createRefs() Image(painter = painterResource(id = R.drawable.ic_launcher_foreground), contentDescription = \"Profile Image\", contentScale = ContentScale.Crop, modifier = Modifier .size(48.dp) .clip(CircleShape) .constrainAs(profileImage) { top.linkTo(parent.top) bottom.linkTo(parent.bottom) start.linkTo(parent.start) }) Text(text = \"Karishma Agrawal\", style = MaterialTheme.typography.titleMedium.copy(fontSize = 16.sp), fontWeight = FontWeight.Bold, modifier = Modifier.constrainAs(name) { start.linkTo(profileImage.end, margin = 12.dp) top.linkTo(profileImage.top) }) Text(text = \"Android Engineer ‚òïÔ∏è\", style = MaterialTheme.typography.bodySmall.copy( fontSize = 14.sp, ), modifier = Modifier.constrainAs(tagline) { start.linkTo(name.start) top.linkTo(name.bottom, margin = 4.dp) }) Button(onClick = { /* TODO */ }, modifier = Modifier.constrainAs(followBtn) { end.linkTo(parent.end) top.linkTo(parent.top) bottom.linkTo(parent.bottom) }) { Text(\"Follow\") } } }}@Preview@Composablefun PreviewCard() { ProfileCard()}üß† Advanced Concepts in ConstraintLayout Compose1. ChainsChains allow equal or biased spacing between multiple views.To create chaining in compose we can use createVerticalChain/createHorizontalChainval (icon1, icon2, icon3) = createRefs()createHorizontalChain(icon1, icon2, icon3, chainStyle = ChainStyle.SpreadInside)2. BarriersBarriers are used when you want to create an anchor point for multiple references; it adjusts based on the largest sibling. For example, you have 2 texts vertically placed, and you want to add a button to the right of both texts and adjust based on the maximum length text. You can create a barrier by giving a reference to both texts.val endBarrier = createEndBarrier(text1, text2)Button( onClick = { }, modifier = Modifier.constrainAs(button) { start.linkTo(endBarrier, margin = 8.dp) top.linkTo(parent.top) })3. GuidelinesUse guidelines to place elements at percentage-based positions.val guideline = createGuidelineFromStart(0.5f)Text( \"Hello World\", modifier = Modifier.constrainAs(text) { start.linkTo(guideline) top.linkTo(parent.top) })",
  "image": "https://miro.medium.com/v2/resize:fit:700/0*VT5j7iXCibK5dHCA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"682d\"\u003eüîß Setting Up\u003c/h2\u003e\u003cp id=\"2df0\"\u003eJetpack Compose doesn‚Äôt include \u003ccode\u003eConstraintLayout\u003c/code\u003e by default. You‚Äôll need to add the dependency:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"58ba\"\u003eimplementation(\u0026#34;androidx.constraintlayout:constraintlayout-compose:1.0.1\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"cc64\"\u003eüõ†Ô∏è Let‚Äôs Build: A Profile Card in XML \u0026amp; Compose\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6d1f\"\u003eIt‚Äôs a profile card with an image in the centre vertical, my name and designation to the right of the image, and a button at the end of the screen, also positioned centre vertically.\u003c/p\u003e\u003cp id=\"a8c6\"\u003eWe‚Äôll first look at the \u003cstrong\u003eXML version\u003c/strong\u003e of a profile card UI and then convert it into Compose using ConstraintLayout.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"25be\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003cbr/\u003e\u0026lt;androidx.cardview.widget.CardView xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u003cbr/\u003e    xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;\u003cbr/\u003e    xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;\u003cbr/\u003e    android:id=\u0026#34;@+id/profile_card\u0026#34;\u003cbr/\u003e    android:layout_width=\u0026#34;match_parent\u0026#34;\u003cbr/\u003e    android:layout_height=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e    android:layout_margin=\u0026#34;16dp\u0026#34;\u003cbr/\u003e    app:cardCornerRadius=\u0026#34;8dp\u0026#34;\u003cbr/\u003e    app:cardElevation=\u0026#34;8dp\u0026#34;\u0026gt;\u003cp\u003e    \u0026lt;androidx.constraintlayout.widget.ConstraintLayout\u003cbr/\u003e        android:layout_width=\u0026#34;match_parent\u0026#34;\u003cbr/\u003e        android:layout_height=\u0026#34;100dp\u0026#34;\u003cbr/\u003e        android:background=\u0026#34;@color/white\u0026#34;\u003cbr/\u003e        android:padding=\u0026#34;16dp\u0026#34;\u0026gt;\u003c/p\u003e\u003cp\u003e        \u0026lt;!-- Profile Image --\u0026gt;\u003cbr/\u003e        \u0026lt;ImageView\u003cbr/\u003e            android:id=\u0026#34;@+id/profile_image\u0026#34;\u003cbr/\u003e            android:layout_width=\u0026#34;48dp\u0026#34;\u003cbr/\u003e            android:layout_height=\u0026#34;48dp\u0026#34;\u003cbr/\u003e            android:scaleType=\u0026#34;centerCrop\u0026#34;\u003cbr/\u003e            android:src=\u0026#34;@drawable/ic_launcher_foreground\u0026#34;\u003cbr/\u003e            app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34;\u003cbr/\u003e            app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34;\u003cbr/\u003e            app:layout_constraintTop_toTopOf=\u0026#34;parent\u0026#34; /\u0026gt;\u003c/p\u003e\u003cp\u003e        \u0026lt;!-- Name Text --\u0026gt;\u003cbr/\u003e        \u0026lt;TextView\u003cbr/\u003e            android:id=\u0026#34;@+id/profile_name\u0026#34;\u003cbr/\u003e            android:layout_width=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            android:layout_height=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            android:layout_marginStart=\u0026#34;12dp\u0026#34;\u003cbr/\u003e            android:text=\u0026#34;Karishma Agrawal\u0026#34;\u003cbr/\u003e            android:textSize=\u0026#34;16sp\u0026#34;\u003cbr/\u003e            android:textStyle=\u0026#34;bold\u0026#34;\u003cbr/\u003e            app:layout_constraintStart_toEndOf=\u0026#34;@id/profile_image\u0026#34;\u003cbr/\u003e            app:layout_constraintTop_toTopOf=\u0026#34;@id/profile_image\u0026#34; /\u0026gt;\u003c/p\u003e\u003cp\u003e        \u0026lt;!-- Tagline --\u0026gt;\u003cbr/\u003e        \u0026lt;TextView\u003cbr/\u003e            android:id=\u0026#34;@+id/profile_tagline\u0026#34;\u003cbr/\u003e            android:layout_width=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            android:layout_height=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            android:layout_marginTop=\u0026#34;4dp\u0026#34;\u003cbr/\u003e            android:text=\u0026#34;Android Staff Engineer ‚òïÔ∏è\u0026#34;\u003cbr/\u003e            android:textColor=\u0026#34;#666666\u0026#34;\u003cbr/\u003e            android:textSize=\u0026#34;14sp\u0026#34;\u003cbr/\u003e            app:layout_constraintStart_toStartOf=\u0026#34;@id/profile_name\u0026#34;\u003cbr/\u003e            app:layout_constraintTop_toBottomOf=\u0026#34;@id/profile_name\u0026#34; /\u0026gt;\u003c/p\u003e\u003cp\u003e        \u0026lt;Button\u003cbr/\u003e            android:id=\u0026#34;@+id/follow_button\u0026#34;\u003cbr/\u003e            android:layout_width=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            android:layout_height=\u0026#34;wrap_content\u0026#34;\u003cbr/\u003e            app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34;\u003cbr/\u003e            app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34;\u003cbr/\u003e            app:layout_constraintTop_toTopOf=\u0026#34;parent\u0026#34; /\u0026gt;\u003c/p\u003e\u003cp\u003e    \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;\u003c/p\u003e\u003cp\u003e\u0026lt;/androidx.cardview.widget.CardView\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1761\"\u003eLet‚Äôs now convert it into compose\u003c/p\u003e\u003ch2 id=\"25d5\"\u003e\u003ccode\u003eConstraintLayout\u003c/code\u003e in Compose works in the following way :\u003c/h2\u003e\u003cul\u003e\u003cli id=\"e538\"\u003eCreate references for each composable in the \u003ccode\u003eConstraintLayout\u003c/code\u003e using the \u003ccode\u003ecreateRefs()\u003c/code\u003e or \u003ccode\u003ecreateRefFor()\u003cbr/\u003e\u003c/code\u003eHere we have 4 elements so we will define them using createRef\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"94c3\"\u003eval (profileImage, name, tagline, followBtn) = createRefs()\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"b18f\"\u003eConstraints are provided using the \u003ccode\u003econstrainAs()\u003c/code\u003e modifier, which takes the reference as a parameter and lets you specify its constraints in the body lambda.\u003c/li\u003e\u003cli id=\"5a1d\"\u003eConstraints are specified using \u003ccode\u003elinkTo()\u003c/code\u003e or other helpful methods.\u003c/li\u003e\u003cli id=\"19a3\"\u003e\u003ccode\u003eparent\u003c/code\u003e is an existing reference that can be used to specify constraints towards the \u003ccode\u003eConstraintLayout\u003c/code\u003e composable itself.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"ba28\"\u003eüöÄ Compose Version of the Same UI\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"4c04\"\u003e@Composable\u003cbr/\u003efun ProfileCard() {\u003cbr/\u003e    Card(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxWidth()\u003cbr/\u003e            .padding(16.dp),\u003cbr/\u003e        elevation = CardDefaults.cardElevation(8.dp),\u003cbr/\u003e        shape = RoundedCornerShape(8.dp)\u003cbr/\u003e    ) {\u003cbr/\u003e        ConstraintLayout(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .height(100.dp)\u003cbr/\u003e                .padding(16.dp)\u003cbr/\u003e        ) {\u003cbr/\u003e            val (profileImage, name, tagline, followBtn) = createRefs()\u003cp\u003e            Image(painter = painterResource(id = R.drawable.ic_launcher_foreground),\u003cbr/\u003e                contentDescription = \u0026#34;Profile Image\u0026#34;,\u003cbr/\u003e                contentScale = ContentScale.Crop,\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .size(48.dp)\u003cbr/\u003e                    .clip(CircleShape)\u003cbr/\u003e                    .constrainAs(profileImage) {\u003cbr/\u003e                        top.linkTo(parent.top)\u003cbr/\u003e                        bottom.linkTo(parent.bottom)\u003cbr/\u003e                        start.linkTo(parent.start)\u003cbr/\u003e                    })\u003c/p\u003e\u003cp\u003e            Text(text = \u0026#34;Karishma Agrawal\u0026#34;,\u003cbr/\u003e                style = MaterialTheme.typography.titleMedium.copy(fontSize = 16.sp),\u003cbr/\u003e                fontWeight = FontWeight.Bold,\u003cbr/\u003e                modifier = Modifier.constrainAs(name) {\u003cbr/\u003e                    start.linkTo(profileImage.end, margin = 12.dp)\u003cbr/\u003e                    top.linkTo(profileImage.top)\u003cbr/\u003e                })\u003c/p\u003e\u003cp\u003e            Text(text = \u0026#34;Android Engineer ‚òïÔ∏è\u0026#34;, style = MaterialTheme.typography.bodySmall.copy(\u003cbr/\u003e                fontSize = 14.sp,\u003cbr/\u003e            ), modifier = Modifier.constrainAs(tagline) {\u003cbr/\u003e                start.linkTo(name.start)\u003cbr/\u003e                top.linkTo(name.bottom, margin = 4.dp)\u003cbr/\u003e            })\u003c/p\u003e\u003cp\u003e            Button(onClick = { /* TODO */ }, modifier = Modifier.constrainAs(followBtn) {\u003cbr/\u003e                end.linkTo(parent.end)\u003cbr/\u003e                top.linkTo(parent.top)\u003cbr/\u003e                bottom.linkTo(parent.bottom)\u003cbr/\u003e            }) {\u003cbr/\u003e                Text(\u0026#34;Follow\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Preview\u003cbr/\u003e@Composable\u003cbr/\u003efun PreviewCard() {\u003cbr/\u003e    ProfileCard()\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"4e73\"\u003eüß† Advanced Concepts in ConstraintLayout Compose\u003c/h2\u003e\u003ch2 id=\"4007\"\u003e1. Chains\u003c/h2\u003e\u003cp id=\"e470\"\u003eChains allow equal or biased spacing between multiple views.\u003c/p\u003e\u003cp id=\"d9fa\"\u003eTo create chaining in compose we can use \u003ccode\u003ecreateVerticalChain/createHorizontalChain\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2167\"\u003eval (icon1, icon2, icon3) = createRefs()\u003cbr/\u003ecreateHorizontalChain(icon1, icon2, icon3, chainStyle = ChainStyle.SpreadInside)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"e0b0\"\u003e2. Barriers\u003c/h2\u003e\u003cp id=\"c46b\"\u003eBarriers are used when you want to create an anchor point for multiple references; it adjusts based on the largest sibling. For example, you have 2 texts vertically placed, and you want to add a button to the right of both texts and adjust based on the maximum length text. You can create a barrier by giving a reference to both texts.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f224\"\u003eval endBarrier = createEndBarrier(text1, text2)\u003cp\u003eButton(\u003cbr/\u003e    onClick = { },\u003cbr/\u003e    modifier = Modifier.constrainAs(button) {\u003cbr/\u003e        start.linkTo(endBarrier, margin = 8.dp)\u003cbr/\u003e        top.linkTo(parent.top)\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"753d\"\u003e3. Guidelines\u003c/h2\u003e\u003cp id=\"f750\"\u003eUse guidelines to place elements at percentage-based positions.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"da72\"\u003eval guideline = createGuidelineFromStart(0.5f)\u003cp\u003eText(\u003cbr/\u003e    \u0026#34;Hello World\u0026#34;,\u003cbr/\u003e    modifier = Modifier.constrainAs(text) {\u003cbr/\u003e        start.linkTo(guideline)\u003cbr/\u003e        top.linkTo(parent.top)\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-06-20T10:51:04.131Z",
  "modifiedTime": null
}
