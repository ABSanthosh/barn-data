{
  "id": "793ffe86-613f-40e3-a4ea-aaa21f8d2e07",
  "title": "Man-in-the-Middle (MITM) Attacks in Android Development: How to Secure Your App",
  "link": "https://proandroiddev.com/man-in-the-middle-mitm-attacks-in-android-development-how-to-secure-your-app-062d1fdb3a7e?source=rss----c72404660798---4",
  "description": "",
  "author": "Dobri Kostadinov",
  "published": "Sun, 09 Mar 2025 21:07:13 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "network-security",
    "androiddev",
    "android",
    "android-app-development",
    "mobile-app-development"
  ],
  "byline": "Dobri Kostadinov",
  "length": 7276,
  "excerpt": "Security in Android development is an essential concern, especially when handling sensitive user data, authentication tokens, and financial transactions. One of the most dangerous yet common security…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Protecting Your Android App from Cyber ThreatsIntroductionSecurity in Android development is an essential concern, especially when handling sensitive user data, authentication tokens, and financial transactions. One of the most dangerous yet common security vulnerabilities is the Man-in-the-Middle (MITM) attack. This aligns closely with the OWASP Mobile Top 10 security risks, particularly M3: Insecure Communication and M9: Reverse Engineering.In this article, we’ll explore what MITM attacks are, how they occur, and the best practices for securing your Android app against them using OWASP-recommended security controls.What is a Man-in-the-Middle (MITM) Attack?A Man-in-the-Middle attack occurs when an attacker intercepts and manipulates the communication between a client (your Android app) and a server. The attacker can read, alter, and even inject malicious data into the communication without either party being aware of it.How MITM Attacks WorkMITM attacks typically follow these steps:Interception: The attacker positions themselves between the app and the server, using techniques like ARP spoofing, rogue Wi-Fi networks, or DNS poisoning.Decryption: If the communication is unencrypted or poorly secured, the attacker can decrypt the data being transmitted.Manipulation: The attacker can modify requests and responses, injecting malicious content or stealing sensitive data.Re-encryption and Forwarding: The attacker then forwards the manipulated communication back to its intended destination, making it seem like a normal interaction.OWASP ImplicationsMITM attacks are directly related to OWASP Mobile Security Risk M3: Insecure Communication, where attackers exploit weakly secured transmissions to intercept and manipulate sensitive information.Real-World Consequences of MITM AttacksData Theft: User credentials, credit card information, and personal data can be intercepted.Session Hijacking: Attackers can steal session tokens and impersonate users.Phishing and Malware Injection: Attackers can inject fake login pages or malicious payloads into an app’s response.How to Prevent MITM Attacks in Android Apps (Aligned with OWASP Guidelines)1. Enforce HTTPS with TLS (SSL/TLS Security)One of the most critical steps in preventing MITM attacks is ensuring that all communications between your app and backend servers use HTTPS (HyperText Transfer Protocol Secure).OWASP recommends:TLS 1.2 or TLS 1.3, as older versions (such as TLS 1.0 and 1.1) are vulnerable to security flaws.A valid SSL/TLS certificate from a trusted Certificate Authority (CA).HSTS (HTTP Strict Transport Security) to prevent protocol downgrades to HTTP.Implementation in AndroidEnsure that your AndroidManifest.xml enforces HTTPS:\u003cnetwork-security-config\u003e \u003cdomain-config cleartextTrafficPermitted=\"false\"\u003e \u003cdomain includeSubdomains=\"true\"\u003eyourdomain.com\u003c/domain\u003e \u003c/domain-config\u003e\u003c/network-security-config\u003e2. Certificate Pinning (M3: Insecure Communication)What is Certificate Pinning?Certificate Pinning is a security technique that helps prevent attackers from using fraudulent certificates to intercept app-server communication. It ensures that the app only trusts specific certificates or public keys, even if a compromised Certificate Authority (CA) issues a rogue certificate.Why is Certificate Pinning Important?Prevents Fake Certificates: Attackers may generate fraudulent certificates to impersonate a trusted server. Pinning restricts your app to accept only the expected certificate.Enhances Security Against MITM Attacks: Even if an attacker can intercept traffic, they cannot decrypt or modify data without the correct certificate.Mitigates Risks of CA Compromise: If a CA is compromised, your app will reject fraudulent certificates issued by that CA.How Certificate Pinning WorksThe app is programmed to accept only a predefined set of certificates or public keys.When making an HTTPS request, the app checks the server’s certificate against the pinned certificates.If the certificate does not match, the connection is rejected.Implementation in AndroidUsing OkHttp with certificate pinning:val client = OkHttpClient.Builder() .certificatePinner( CertificatePinner.Builder() .add(\"yourdomain.com\", \"sha256/your-certificate-hash\") .build() ) .build()3. Use Strong Network Security Configurations (OWASP M3 \u0026 M9)What is Network Security Configuration?The Network Security Configuration (NSC) is an Android feature introduced in Android 7.0 (API level 24) that allows developers to define security settings via an XML file instead of modifying the app code. It enables more granular control over security policies, including enforcing TLS, disabling cleartext traffic, and implementing certificate pinning.Why is Strong Network Security Configuration Important?Blocks Cleartext Traffic: Prevents unencrypted HTTP traffic, reducing the risk of eavesdropping.Enforces TLS/SSL: Ensures all communications happen over a secure channel.Supports Certificate Pinning: Helps prevent attackers from using fraudulent certificates.Provides Fine-Grained Security Control: Developers can specify different security settings for different domains.Implementation in AndroidDefine a network_security_config.xml file in the res/xml/ directory:\u003cnetwork-security-config\u003e \u003cdomain-config cleartextTrafficPermitted=\"false\"\u003e \u003cdomain includeSubdomains=\"true\"\u003eyourdomain.com\u003c/domain\u003e \u003cpin-set\u003e \u003cpin digest=\"SHA-256\"\u003eyour-certificate-hash\u003c/pin\u003e \u003c/pin-set\u003e \u003c/domain-config\u003e\u003c/network-security-config\u003e4. Validate SSL/TLS Certificates Properly (M3: Insecure Communication)Why SSL/TLS Certificate Validation is ImportantProper certificate validation prevents MITM attacks by ensuring that the server your app is communicating with is legitimate. Attackers often use self-signed or rogue certificates to intercept traffic. If an app blindly accepts any certificate, it becomes vulnerable to attacks.Best Practices for Certificate ValidationUse a strong TrustManager that validates the certificate against a trusted CA.Avoid disabling SSL validation in development builds.Reject self-signed or unknown certificates unless explicitly trusted.5. Disable Insecure Cipher Suites and ProtocolsWhy Disabling Weak Ciphers is CriticalAttackers exploit weak encryption algorithms (e.g., MD5, RC4) to break into secure communications. Android apps must ensure that only strong encryption algorithms are used.Best Practices for Secure Cipher SuitesUse TLS 1.2 or 1.3 to ensure strong encryption.Disable outdated protocols like SSL 3.0 and TLS 1.0.Use AES-GCM or ChaCha20-Poly1305 for encryption.Implementation in Androidval sslSocketFactory = SSLContext.getInstance(\"TLSv1.3\").apply { init(null, null, null) }.socketFactoryval client = OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).trustManagers[0] as X509TrustManager) .build()ConclusionMITM attacks pose a significant risk to Android apps, but by aligning security measures with OWASP Mobile Top 10 recommendations, developers can mitigate these threats effectively.Dobri KostadinovAndroid Consultant | TrainerEmail me | Follow me on LinkedIn | Follow me on Medium | Buy me a coffee",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*nRwE6uKbOAQHdFbslbolkQ.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"d095\"\u003eProtecting Your Android App from Cyber Threats\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@dobri.kostadinov?source=post_page---byline--062d1fdb3a7e---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Dobri Kostadinov\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*PDWUz7RmoqP9kmFnZzGPUg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--062d1fdb3a7e---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"93b2\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"ee8b\"\u003eSecurity in Android development is an essential concern, especially when handling sensitive user data, authentication tokens, and financial transactions. One of the most dangerous yet common security vulnerabilities is the \u003cstrong\u003eMan-in-the-Middle (MITM) attack\u003c/strong\u003e. This aligns closely with the \u003cstrong\u003eOWASP Mobile Top 10\u003c/strong\u003e security risks, particularly \u003cstrong\u003eM3: Insecure Communication\u003c/strong\u003e and \u003cstrong\u003eM9: Reverse Engineering\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"101f\"\u003eIn this article, we’ll explore what MITM attacks are, how they occur, and the best practices for securing your Android app against them using \u003cstrong\u003eOWASP-recommended security controls\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"e7bd\"\u003eWhat is a Man-in-the-Middle (MITM) Attack?\u003c/h2\u003e\u003cp id=\"095b\"\u003eA \u003cstrong\u003eMan-in-the-Middle attack\u003c/strong\u003e occurs when an attacker intercepts and manipulates the communication between a client (your Android app) and a server. The attacker can read, alter, and even inject malicious data into the communication without either party being aware of it.\u003c/p\u003e\u003ch2 id=\"ab7a\"\u003eHow MITM Attacks Work\u003c/h2\u003e\u003cp id=\"7437\"\u003eMITM attacks typically follow these steps:\u003c/p\u003e\u003col\u003e\u003cli id=\"6331\"\u003e\u003cstrong\u003eInterception\u003c/strong\u003e: The attacker positions themselves between the app and the server, using techniques like ARP spoofing, rogue Wi-Fi networks, or DNS poisoning.\u003c/li\u003e\u003cli id=\"2735\"\u003e\u003cstrong\u003eDecryption\u003c/strong\u003e: If the communication is unencrypted or poorly secured, the attacker can decrypt the data being transmitted.\u003c/li\u003e\u003cli id=\"dd1b\"\u003e\u003cstrong\u003eManipulation\u003c/strong\u003e: The attacker can modify requests and responses, injecting malicious content or stealing sensitive data.\u003c/li\u003e\u003cli id=\"1249\"\u003e\u003cstrong\u003eRe-encryption and Forwarding\u003c/strong\u003e: The attacker then forwards the manipulated communication back to its intended destination, making it seem like a normal interaction.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"f297\"\u003eOWASP Implications\u003c/h2\u003e\u003cp id=\"301b\"\u003eMITM attacks are directly related to \u003cstrong\u003eOWASP Mobile Security Risk M3: Insecure Communication\u003c/strong\u003e, where attackers exploit weakly secured transmissions to intercept and manipulate sensitive information.\u003c/p\u003e\u003ch2 id=\"0daf\"\u003eReal-World Consequences of MITM Attacks\u003c/h2\u003e\u003cul\u003e\u003cli id=\"10ca\"\u003e\u003cstrong\u003eData Theft\u003c/strong\u003e: User credentials, credit card information, and personal data can be intercepted.\u003c/li\u003e\u003cli id=\"e31d\"\u003e\u003cstrong\u003eSession Hijacking\u003c/strong\u003e: Attackers can steal session tokens and impersonate users.\u003c/li\u003e\u003cli id=\"c815\"\u003e\u003cstrong\u003ePhishing and Malware Injection\u003c/strong\u003e: Attackers can inject fake login pages or malicious payloads into an app’s response.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"9c56\"\u003eHow to Prevent MITM Attacks in Android Apps (Aligned with OWASP Guidelines)\u003c/h2\u003e\u003ch2 id=\"b290\"\u003e1. Enforce HTTPS with TLS (SSL/TLS Security)\u003c/h2\u003e\u003cp id=\"50fe\"\u003eOne of the most critical steps in preventing MITM attacks is ensuring that all communications between your app and backend servers use \u003cstrong\u003eHTTPS (HyperText Transfer Protocol Secure)\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"9f97\"\u003eOWASP recommends:\u003c/p\u003e\u003cul\u003e\u003cli id=\"0477\"\u003e\u003cstrong\u003eTLS 1.2 or TLS 1.3\u003c/strong\u003e, as older versions (such as TLS 1.0 and 1.1) are vulnerable to security flaws.\u003c/li\u003e\u003cli id=\"fe04\"\u003eA valid \u003cstrong\u003eSSL/TLS certificate\u003c/strong\u003e from a trusted Certificate Authority (CA).\u003c/li\u003e\u003cli id=\"bc47\"\u003e\u003cstrong\u003eHSTS (HTTP Strict Transport Security)\u003c/strong\u003e to prevent protocol downgrades to HTTP.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"b4ec\"\u003eImplementation in Android\u003c/h2\u003e\u003cp id=\"0713\"\u003eEnsure that your \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e enforces HTTPS:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"af97\"\u003e\u0026lt;network-security-config\u0026gt;\u003cbr/\u003e    \u0026lt;domain-config cleartextTrafficPermitted=\u0026#34;false\u0026#34;\u0026gt;\u003cbr/\u003e        \u0026lt;domain includeSubdomains=\u0026#34;true\u0026#34;\u0026gt;yourdomain.com\u0026lt;/domain\u0026gt;\u003cbr/\u003e    \u0026lt;/domain-config\u0026gt;\u003cbr/\u003e\u0026lt;/network-security-config\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"91e7\"\u003e2. Certificate Pinning (M3: Insecure Communication)\u003c/h2\u003e\u003ch2 id=\"b5d2\"\u003eWhat is Certificate Pinning?\u003c/h2\u003e\u003cp id=\"85c4\"\u003e\u003cstrong\u003eCertificate Pinning\u003c/strong\u003e is a security technique that helps prevent attackers from using fraudulent certificates to intercept app-server communication. It ensures that the app only trusts specific certificates or public keys, even if a compromised Certificate Authority (CA) issues a rogue certificate.\u003c/p\u003e\u003ch2 id=\"a65e\"\u003eWhy is Certificate Pinning Important?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"48c7\"\u003e\u003cstrong\u003ePrevents Fake Certificates\u003c/strong\u003e: Attackers may generate fraudulent certificates to impersonate a trusted server. Pinning restricts your app to accept only the expected certificate.\u003c/li\u003e\u003cli id=\"e09e\"\u003e\u003cstrong\u003eEnhances Security Against MITM Attacks\u003c/strong\u003e: Even if an attacker can intercept traffic, they cannot decrypt or modify data without the correct certificate.\u003c/li\u003e\u003cli id=\"3b5b\"\u003e\u003cstrong\u003eMitigates Risks of CA Compromise\u003c/strong\u003e: If a CA is compromised, your app will reject fraudulent certificates issued by that CA.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"a527\"\u003eHow Certificate Pinning Works\u003c/h2\u003e\u003col\u003e\u003cli id=\"6b67\"\u003eThe app is programmed to accept only a predefined set of certificates or public keys.\u003c/li\u003e\u003cli id=\"e003\"\u003eWhen making an HTTPS request, the app checks the server’s certificate against the pinned certificates.\u003c/li\u003e\u003cli id=\"994a\"\u003eIf the certificate does not match, the connection is rejected.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"c1fa\"\u003eImplementation in Android\u003c/h2\u003e\u003cp id=\"ba4c\"\u003eUsing OkHttp with certificate pinning:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9c3b\"\u003eval client = OkHttpClient.Builder()\u003cbr/\u003e    .certificatePinner(\u003cbr/\u003e        CertificatePinner.Builder()\u003cbr/\u003e            .add(\u0026#34;yourdomain.com\u0026#34;, \u0026#34;sha256/your-certificate-hash\u0026#34;)\u003cbr/\u003e            .build()\u003cbr/\u003e    )\u003cbr/\u003e    .build()\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"6cac\"\u003e3. Use Strong Network Security Configurations (OWASP M3 \u0026amp; M9)\u003c/h2\u003e\u003ch2 id=\"34e7\"\u003eWhat is Network Security Configuration?\u003c/h2\u003e\u003cp id=\"41a9\"\u003eThe \u003cstrong\u003eNetwork Security Configuration (NSC)\u003c/strong\u003e is an Android feature introduced in Android 7.0 (API level 24) that allows developers to define security settings via an XML file instead of modifying the app code. It enables more granular control over security policies, including enforcing \u003cstrong\u003eTLS\u003c/strong\u003e, disabling \u003cstrong\u003ecleartext traffic\u003c/strong\u003e, and implementing \u003cstrong\u003ecertificate pinning\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"1648\"\u003eWhy is Strong Network Security Configuration Important?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"9d33\"\u003e\u003cstrong\u003eBlocks Cleartext Traffic\u003c/strong\u003e: Prevents unencrypted HTTP traffic, reducing the risk of eavesdropping.\u003c/li\u003e\u003cli id=\"c64d\"\u003e\u003cstrong\u003eEnforces TLS/SSL\u003c/strong\u003e: Ensures all communications happen over a secure channel.\u003c/li\u003e\u003cli id=\"1ced\"\u003e\u003cstrong\u003eSupports Certificate Pinning\u003c/strong\u003e: Helps prevent attackers from using fraudulent certificates.\u003c/li\u003e\u003cli id=\"1876\"\u003e\u003cstrong\u003eProvides Fine-Grained Security Control\u003c/strong\u003e: Developers can specify different security settings for different domains.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"51f5\"\u003eImplementation in Android\u003c/h2\u003e\u003cp id=\"1252\"\u003eDefine a \u003ccode\u003enetwork_security_config.xml\u003c/code\u003e file in the \u003ccode\u003eres/xml/\u003c/code\u003e directory:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"373d\"\u003e\u0026lt;network-security-config\u0026gt;\u003cbr/\u003e    \u0026lt;domain-config cleartextTrafficPermitted=\u0026#34;false\u0026#34;\u0026gt;\u003cbr/\u003e        \u0026lt;domain includeSubdomains=\u0026#34;true\u0026#34;\u0026gt;yourdomain.com\u0026lt;/domain\u0026gt;\u003cbr/\u003e        \u0026lt;pin-set\u0026gt;\u003cbr/\u003e            \u0026lt;pin digest=\u0026#34;SHA-256\u0026#34;\u0026gt;your-certificate-hash\u0026lt;/pin\u0026gt;\u003cbr/\u003e        \u0026lt;/pin-set\u0026gt;\u003cbr/\u003e    \u0026lt;/domain-config\u0026gt;\u003cbr/\u003e\u0026lt;/network-security-config\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"3aee\"\u003e4. Validate SSL/TLS Certificates Properly (M3: Insecure Communication)\u003c/h2\u003e\u003ch2 id=\"2014\"\u003eWhy SSL/TLS Certificate Validation is Important\u003c/h2\u003e\u003cp id=\"9f59\"\u003eProper certificate validation prevents MITM attacks by ensuring that the server your app is communicating with is legitimate. Attackers often use self-signed or rogue certificates to intercept traffic. If an app blindly accepts any certificate, it becomes vulnerable to attacks.\u003c/p\u003e\u003ch2 id=\"0684\"\u003eBest Practices for Certificate Validation\u003c/h2\u003e\u003cul\u003e\u003cli id=\"c8e5\"\u003e\u003cstrong\u003eUse a strong TrustManager\u003c/strong\u003e that validates the certificate against a trusted CA.\u003c/li\u003e\u003cli id=\"5d68\"\u003e\u003cstrong\u003eAvoid disabling SSL validation\u003c/strong\u003e in development builds.\u003c/li\u003e\u003cli id=\"2ff1\"\u003e\u003cstrong\u003eReject self-signed or unknown certificates unless explicitly trusted.\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"5ec8\"\u003e5. Disable Insecure Cipher Suites and Protocols\u003c/h2\u003e\u003ch2 id=\"f448\"\u003eWhy Disabling Weak Ciphers is Critical\u003c/h2\u003e\u003cp id=\"2648\"\u003eAttackers exploit weak encryption algorithms (e.g., MD5, RC4) to break into secure communications. Android apps must ensure that only strong encryption algorithms are used.\u003c/p\u003e\u003ch2 id=\"1215\"\u003eBest Practices for Secure Cipher Suites\u003c/h2\u003e\u003cul\u003e\u003cli id=\"af62\"\u003e\u003cstrong\u003eUse TLS 1.2 or 1.3\u003c/strong\u003e to ensure strong encryption.\u003c/li\u003e\u003cli id=\"f77b\"\u003e\u003cstrong\u003eDisable outdated protocols\u003c/strong\u003e like SSL 3.0 and TLS 1.0.\u003c/li\u003e\u003cli id=\"8406\"\u003e\u003cstrong\u003eUse AES-GCM\u003c/strong\u003e or \u003cstrong\u003eChaCha20-Poly1305\u003c/strong\u003e for encryption.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"003a\"\u003eImplementation in Android\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"975a\"\u003eval sslSocketFactory = SSLContext.getInstance(\u0026#34;TLSv1.3\u0026#34;).apply { init(null, null, null) }.socketFactory\u003cbr/\u003eval client = OkHttpClient.Builder()\u003cbr/\u003e    .sslSocketFactory(sslSocketFactory, TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).trustManagers[0] as X509TrustManager)\u003cbr/\u003e    .build()\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c718\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"95a0\"\u003eMITM attacks pose a significant risk to Android apps, but by aligning security measures with \u003cstrong\u003eOWASP Mobile Top 10\u003c/strong\u003e recommendations, developers can mitigate these threats effectively.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a1ed\"\u003e\u003cem\u003eDobri Kostadinov\u003c/em\u003e\u003cbr/\u003eAndroid Consultant | Trainer\u003cbr/\u003e\u003ca href=\"mailto:dobri.kostadinov@gmail.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEmail me\u003c/a\u003e | \u003ca href=\"https://www.linkedin.com/in/dobrikostadinov/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFollow me on LinkedIn\u003c/a\u003e | \u003ca href=\"https://medium.com/@dobri.kostadinov\" rel=\"noopener\"\u003eFollow me on Medium\u003c/a\u003e | \u003ca href=\"https://www.buymeacoffee.com/dobri.kostadinov\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy me a coffee\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-03-09T21:07:13.816Z",
  "modifiedTime": null
}
