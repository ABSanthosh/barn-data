{
  "id": "b6e66994-1f00-4004-af65-ff77b851baf6",
  "title": "Demystifying Maestro‚Äôs UI Testing Implementation",
  "link": "https://handstandsam.com/2024/11/18/demystifying-maestros-ui-testing-implementation/",
  "description": "I first heard about Maestro when it was released in 2022, but I haven‚Äôt played with it until now. I‚Äôm doing some work with Espresso and UiAutomator for Android testing and was curious how Maestro worked under the hood, so I cloned their git repo and dove into the code. This quick post shares what [‚Ä¶]",
  "author": "Sam Edwards",
  "published": "Mon, 18 Nov 2024 13:59:04 +0000",
  "source": "https://handstandsam.com/feed/",
  "categories": [
    "Updates"
  ],
  "byline": "Sam Edwards Published November 18, 2024",
  "length": 3962,
  "excerpt": "I first heard about Maestro when it was released in 2022, but I haven‚Äôt played with it until now. I‚Äôm doing some work with Espresso and UiAutomator for Android testing and was curious how Maestro worked under the hood, so I cloned their git repo and dove into the code.",
  "siteName": "",
  "favicon": "",
  "text": "I first heard about Maestro when it was released in 2022, but I haven‚Äôt played with it until now. I‚Äôm doing some work with Espresso and UiAutomator for Android testing and was curious how Maestro worked under the hood, so I cloned their git repo and dove into the code. This quick post shares what I learned about the inner workings of the library with TONS of links to their open source implementation. Feel free to jump to the ‚ÄúHow it Works‚Äù section below if you already know what Maestro is. Background ‚Äì What is Maestro? It‚Äôs a testing framework where you use an easy to read YAML file to create commands that will execute on an Android, iOS or Web app. Here is a quick visual (taken from their website at maestro.mobile.dev) that gives you an idea of what it does. Maestro Studio This is an ‚Äúapp‚Äù you can run on your on machine to author the YAML for Maestro. It runs a local server and the app is served in a web browser. It continually updates with screenshots from the device and allows you to create commands and run them. My favorite part of it is how they have a nice way to represent the rendered UI tree. Here is a good demo of what that looks like here from Daniel Knott‚Äôs YouTube Channel. How it Works Maestro installs their own APKs Their APKs are installed by their CLI tool. (source code) Here is the ADB command showing that the apps are installed after running. üëá adb shell pm list packages | grep dev.mobile.maestro package:dev.mobile.maestro.test package:dev.mobile.maestro Maestro Starts an On-Device GRPC Server within a Test They start a @Test in their Instrumentation APK which then starts an on-device Netty GRPC server that runs in process and just runs the test as long as the server is running. (source code) This test is started via an adb instrument command. (source code) By running the server inside the app, it gives them access to use UiAutomator just like any Android @Test and additionally allows the in-process code to respond back to the Maestro CLI with any requested information. Serving UiAutomator View Hierarchy This on-device Netty GRPC server accepts requests from their CLI tool for view hierarchy dumps. (source code) The view hierarchy is pulled from UiAutomator and the results are serialized it in an XML format. (source code) Performing UI Interactions UiAutomator is used on device to perform Ui Actions. (source code) However the CLI also uses adb commands to interact with the screen as well. (source code) Waiting for Async Events The Maestro CLI seems to do checks at a short interval when waiting for something to appear on the screen. Because the CLI is continually pulling screenshots from the device, they also do image comparisons to see when the screen has updated. (source code) Visualizing the Implementation Here is a wonderful Mermaid diagram that ChatGPT made me based on my post contents. Flow diagrams help me visualize this stuff, so this might be a nice way to see it as well. flowchart TD A[Maestro CLI] --\u003e|Installs Maestro APKs| B[Device with Maestro APKs] B --\u003e|adb instrument command| C[Instrumentation APK] C --\u003e|Starts Test| D[On-Device GRPC Server] D --\u003e|Uses UiAutomator to dump View Hierarchy| E[View Hierarchy in XML] E --\u003e|Sends view hierarchy data| A A --\u003e|Sends interaction commands| F[ADB Commands or UiAutomator] F --\u003e|Interacts with UI| G[Android App UI] A --\u003e|Monitors Screen| H[Pulls Screenshots from Device] H --\u003e|Performs Image Comparisons| I[Waits for Async Events] Conclusion Technically this is a pretty cool ‚Äúhack‚Äù that is working for their product. That was fun to dive into. It is a cool strategy, so definitely try it out! NOTE: This is just the interesting finds of my technical investigation into how it works and not a recommendation one way or another. Want to discuss more with me? Find me on BlueSky or Threads!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n\t\t\u003cmain id=\"content\" role=\"main\"\u003e\n\n\t\t\t\n\t\t\t\t\n\u003carticle id=\"post-2099\" itemscope=\"itemscope\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"blogPost\"\u003e\n\t\t\n\t\n\t\u003cdiv itemprop=\"mainContentOfPage\"\u003e\n\t\t\n\u003cp\u003eI first heard about \u003ca href=\"https://maestro.mobile.dev/\"\u003eMaestro\u003c/a\u003e when it was released in 2022, but I haven‚Äôt played with it until now. I‚Äôm doing some work with Espresso and UiAutomator for Android testing and was curious how Maestro worked under the hood, so I cloned \u003ca href=\"https://github.com/mobile-dev-inc/maestro\"\u003etheir git repo\u003c/a\u003e and dove into the code. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis quick post shares what I learned about the inner workings of the library with TONS of links to their open source implementation.  Feel free to jump to the ‚ÄúHow it Works‚Äù section below if you already know what Maestro is.\u003c/p\u003e\n\n\n\n\u003ch2\u003eBackground ‚Äì What is Maestro?\u003c/h2\u003e\n\n\n\n\u003cp\u003eIt‚Äôs a testing framework where you use an easy to read YAML file to create commands that will execute on an Android, iOS or Web app. Here is a quick visual (taken from their website at \u003ca href=\"https://maestro.mobile.dev/\"\u003emaestro.mobile.dev\u003c/a\u003e) that gives you an idea of what it does.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1.png\"\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" width=\"800\" height=\"600\" src=\"https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1.png\" alt=\"\" srcset=\"https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1.png 800w, https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1-300x225.png 300w, https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1-768x576.png 768w, https://handstandsam.com/wp-content/uploads/2024/11/Screenshot-2024-11-18-at-9.01.43‚ÄØAM-1-700x525.png 700w\" sizes=\"(max-width: 800px) 100vw, 800px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eMaestro Studio\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis is an ‚Äúapp‚Äù you can run on your on machine to author the YAML for Maestro.  It runs a local server and the app is served in a web browser.  It continually updates with screenshots from the device and allows you to create commands and run them.  My favorite part of it is how they have a nice way to represent the rendered UI tree.  Here is a good demo of what that looks like here from \u003ca href=\"https://www.youtube.com/@DanielKnott\"\u003eDaniel Knott‚Äôs YouTube Channel\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"AI powered Mobile Testing with Maestro | Test Automation\" width=\"700\" height=\"394\" src=\"https://www.youtube.com/embed/Sp-l8u1hU_o?start=263\u0026amp;feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2\u003eHow it Works\u003c/h2\u003e\n\n\n\n\u003ch3\u003eMaestro installs their own APKs\u003c/h3\u003e\n\n\n\n\u003cp\u003eTheir APKs are installed by their CLI tool.  (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L991-L994\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L991-L994\"\u003esource code\u003c/a\u003e) Here is the ADB command showing that the apps are installed after running. üëá\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eadb shell pm list packages | grep dev.mobile.maestro\npackage:dev.mobile.maestro.test\npackage:dev.mobile.maestro\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3\u003eMaestro Starts an On-Device GRPC Server within a Test\u003c/h3\u003e\n\n\n\n\u003cp\u003eThey start a \u003ccode\u003e@Test\u003c/code\u003e in their Instrumentation APK which then starts an on-device Netty GRPC server that runs in process and just runs the test as long as the server is running. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/475acc1ce6884ed273a12fbc8ae5aaf5970c06f8/maestro-android/src/androidTest/java/dev/mobile/maestro/MaestroDriverService.kt#L78-L101\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/475acc1ce6884ed273a12fbc8ae5aaf5970c06f8/maestro-android/src/androidTest/java/dev/mobile/maestro/MaestroDriverService.kt#L199-L203\"\u003esource code\u003c/a\u003e)\u003c/p\u003e\n\n\n\n\u003cp\u003eThis test is started via an \u003ccode\u003eadb instrument\u003c/code\u003e command. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L96-L121\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L96-L121\"\u003esource code\u003c/a\u003e) By running the server inside the app, it gives them access to use \u003ca href=\"https://developer.android.com/training/testing/other-components/ui-automator\" data-type=\"link\" data-id=\"https://developer.android.com/training/testing/other-components/ui-automator\"\u003eUiAutomator\u003c/a\u003e just like any Android \u003ccode\u003e@Test\u003c/code\u003e and additionally allows the in-process code to respond back to the Maestro CLI with any requested information.\u003c/p\u003e\n\n\n\n\u003ch3\u003eServing UiAutomator View Hierarchy\u003c/h3\u003e\n\n\n\n\u003cp\u003eThis on-device Netty GRPC server accepts requests from their CLI tool for view hierarchy dumps. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/475acc1ce6884ed273a12fbc8ae5aaf5970c06f8/maestro-android/src/androidTest/java/dev/mobile/maestro/MaestroDriverService.kt#L171-L208\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/475acc1ce6884ed273a12fbc8ae5aaf5970c06f8/maestro-android/src/androidTest/java/dev/mobile/maestro/MaestroDriverService.kt#L171-L208\"\u003esource code\u003c/a\u003e) The view hierarchy is pulled from UiAutomator and the results are serialized it in an XML format. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/74c0bc3009ba6bfd0ce6b1c8aa94ee17224d0445/maestro-android/src/androidTest/java/dev/mobile/maestro/ViewHierarchy.kt#L28-L83\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/74c0bc3009ba6bfd0ce6b1c8aa94ee17224d0445/maestro-android/src/androidTest/java/dev/mobile/maestro/ViewHierarchy.kt#L28-L83\"\u003esource code\u003c/a\u003e)\u003c/p\u003e\n\n\n\n\u003ch3\u003ePerforming UI Interactions\u003c/h3\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://developer.android.com/training/testing/other-components/ui-automator\" data-type=\"link\" data-id=\"https://developer.android.com/training/testing/other-components/ui-automator\"\u003eUiAutomator\u003c/a\u003e is used on device to perform Ui Actions. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/475acc1ce6884ed273a12fbc8ae5aaf5970c06f8/maestro-android/src/androidTest/java/dev/mobile/maestro/MaestroDriverService.kt#L103-L472\"\u003esource code\u003c/a\u003e) However the CLI also uses \u003ccode\u003eadb\u003c/code\u003e commands to interact with the screen as well. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L255-L288\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L255-L288\"\u003esource code\u003c/a\u003e)\u003c/p\u003e\n\n\n\n\u003ch3\u003eWaiting for Async Events\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe Maestro CLI seems to do checks at a short interval when waiting for something to appear on the screen.  Because the CLI is continually pulling screenshots from the device, they also do image comparisons to see when the screen has updated. (\u003ca href=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L631-L659\" data-type=\"link\" data-id=\"https://github.com/mobile-dev-inc/maestro/blob/c986eb6c6fa6462cf632dcf82f09af7bae970af2/maestro-client/src/main/java/maestro/drivers/AndroidDriver.kt#L631-L659\"\u003esource code\u003c/a\u003e)\u003c/p\u003e\n\n\n\n\u003ch2\u003eVisualizing the Implementation\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere is a wonderful \u003ca href=\"https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/\"\u003eMermaid diagram\u003c/a\u003e that ChatGPT made me based on my post contents.  Flow diagrams help me visualize this stuff, so this might be a nice way to see it as well.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cpre\u003eflowchart TD\n    A[Maestro CLI] --\u0026gt;|Installs Maestro APKs| B[Device with Maestro APKs]\n    B --\u0026gt;|adb instrument command| C[Instrumentation APK]\n    C --\u0026gt;|Starts Test| D[On-Device GRPC Server]\n    D --\u0026gt;|Uses UiAutomator to dump View Hierarchy| E[View Hierarchy in XML]\n    E --\u0026gt;|Sends view hierarchy data| A\n\n    A --\u0026gt;|Sends interaction commands| F[ADB Commands or UiAutomator]\n    F --\u0026gt;|Interacts with UI| G[Android App UI]\n\n    A --\u0026gt;|Monitors Screen| H[Pulls Screenshots from Device]\n    H --\u0026gt;|Performs Image Comparisons| I[Waits for Async Events]\u003c/pre\u003e\u003c/div\u003e\n\n\n\n\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eTechnically this is a pretty cool ‚Äúhack‚Äù that is working for their product.  That was fun to dive into.  It is a cool strategy, so definitely \u003ca href=\"https://maestro.mobile.dev/\" data-type=\"link\" data-id=\"https://maestro.mobile.dev/\"\u003etry it out\u003c/a\u003e! \u003c/p\u003e\n\n\n\n\u003cp\u003eNOTE: This is just the interesting finds of my technical investigation into how it works and not a recommendation one way or another.\u003c/p\u003e\n\n\n\n\u003cp\u003eWant to discuss more with me?  Find me on \u003ca href=\"https://bsky.app/profile/handstandsam.bsky.social\"\u003eBlueSky\u003c/a\u003e or \u003ca href=\"https://www.threads.net/@handstandsam\"\u003eThreads\u003c/a\u003e!\u003c/p\u003e\n\n\t\t\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\u003c/article\u003e\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\u003c/main\u003e\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
