{
  "id": "f6464031-ba63-44f9-95fd-5faa72e0cf1d",
  "title": "Accelerating Android UI Testing Through Parallelization",
  "link": "https://proandroiddev.com/accelerating-android-ui-testing-through-parallelization-da40dc03fdb2?source=rss----c72404660798---4",
  "description": "",
  "author": "Mohamed Fotouh Shalan",
  "published": "Sun, 02 Mar 2025 19:01:02 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "testing",
    "android",
    "androiddev",
    "proandroiddev",
    "android-app-development"
  ],
  "byline": "Mohamed Fotouh Shalan",
  "length": 6112,
  "excerpt": "Every Android developer has been there: you push your code, kick off your CI pipeline, and then… wait. And wait. And wait some more. Just to find out if your UI tests pass. In my case, I was waiting…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "photo by Christina Morillo on pexelsThe UI Testing BottleneckEvery Android developer has been there: you push your code, kick off your CI pipeline, and then… wait. And wait. And wait some more. Just to find out if your UI tests pass. In my case, I was waiting 40 minutes.Last month, I found myself staring at this exact problem. Our team’s UI tests had grown to a point where they were taking nearly an hour to complete on our CI server. Worse, they’d occasionally time out completely, leaving us with no feedback at all. The development cycle was grinding to a halt.That’s when I discovered the power of test sharding.What is Test Sharding and Why Should You Care?Test sharding is a simple concept with powerful implications: instead of running your UI tests sequentially on a single device, you split (or “shard”) them across multiple virtual devices running in parallel.Think of it like the difference between having one person wash all your dishes versus having five people each washing a portion of them. The work gets done much faster, and you get your feedback in a fraction of the time.For Android developers, this means:Faster CI buildsQuicker feedback loopsMore testing without lengthy timeoutsBetter developer productivityFirebase Test Lab: Built-in ParallelizationThe good news is that Firebase Test Lab (FTL) already supports test sharding out of the box. You don’t need complex infrastructure or custom solutions — just a simple command line modification to specify how many shards you want.Here’s how you might run a basic sharded test with Firebase Test Lab:gcloud beta firebase test android run \\ --app=app-debug.apk \\ --test=app-debug-androidTest.apk \\ --device=model=Pixel3,version=30 \\ --num-uniform-shards=5This command tells FTL to run your tests across 5 test shards in parallel. Under the hood, FTL is intelligently distributing your test cases across these shards.If you need to give it a try before enabling the test sharding using the gcloud you can enable test shards on the Firebase test labs console.The Challenge: Balancing Your ShardsWhile implementing this solution, I ran into an interesting constraint: the number of shards must be less than or equal to the number of test cases. This makes sense when you think about it — you can’t have five people washing dishes if you only have three dishes.But there’s another, more subtle problem. If you have 20 test cases and 5 shards, each shard gets 4 tests. But what if some tests take 10 seconds while others take 2 minutes? You’ll end up with unbalanced shards, and your test run will still be bottlenecked by the longest-running shard.This is where Flank comes in.Introducing Flank: Smart Test ShardingFlank is an open-source tool that works on top of Firebase Test Lab, optimizing how tests are distributed across shards. Instead of naively dividing tests equally, Flank analyzes previous test runs to make smart decisions about which tests should run on which shards.Setting up Flank requires a configuration file like this:gcloud: app: app-debug.apk test: app-androidTest.apk device: - model: Pixel_3 version: 30 use-orchestrator: true timeout: 30mflank: max-test-shards: 5 shard-time: 120 smart-flank-gcs-path: gs://your-bucket-pathThe magic happens with the smart-flank-gcs-path parameter, which tells Flank where to store and retrieve historical test execution times. With this data, Flank can distribute tests to create balanced shards, ensuring that no single shard becomes a bottleneck.The Results: 40% Faster TestingAfter implementing Flank in our CI pipeline, the results were impressive. Our UI test execution time dropped by about 40% — from 40+ minutes down to around 24 minutes.What’s happening behind the scenes is fascinating. When Flank runs with 5 shards, Firebase Test Lab spins up 5 virtual devices to run tests in parallel. However, in the Firebase console, you still see just one test run — FTL abstracts away the parallelization details.Each shard pulls tests from a JSON file that Flank generates, mapping specific tests to specific shards. When a shard finishes its assigned tests, it can pull more from the queue, ensuring efficient resource utilization.Beyond Time Savings: Additional BenefitsBeyond just speed, I discovered several other advantages to this approach:Improved test stability: By having shorter test runs, we reduced the chance of timeouts and network-related failures.Better resource utilization: Our CI resources were used more efficiently, allowing for more parallel jobs.Test flakiness detection: Flank can automatically rerun flaky tests, improving reliability.Detailed reporting: We got improved insights into which tests were taking the longest time.Implementing This In Your CI PipelineIf you’re facing similar UI testing delays, here’s how to implement this solution:Install Flank: Add it to your project or CI server.Create a configuration file: Set up your flank.yml with the appropriate parameters.Update your CI workflow: Modify your CI configuration to use Flank instead of direct FTL calls.Monitor and adjust: Start with a conservative number of shards and adjust based on results.For teams using Bitrise, you can add a custom script step like this:$ curl -sL https://github.com/Flank/flank/releases/download/v23.10.1/flank.jar -o flank.jar$ java -jar ./flank.jar firebase test android runConclusionImplementing test sharding with Flank and Firebase Test Lab transformed our development process. The 40% reduction in UI test execution time meant faster feedback loops, happier developers, and ultimately better quality software.If you’re wrestling with long-running UI tests in your Android projects, I highly recommend giving this approach a try. The setup is straightforward, and the benefits are immediate and substantial.Have you tried test sharding for your Android UI tests? What strategies have worked well for your team? Share your experiences in the comments!Note: The example in this article shows a configuration for Pixel 3 devices with Android 11 (API 30). You can adjust these parameters to match your target devices and Android versions.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*HGEO1YFqPuhYX48fCLQQGg.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@mohamedfotouhshalan?source=post_page---byline--da40dc03fdb2---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Mohamed Fotouh Shalan\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*PbBtCgN39vf97Q6my5Quxg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--da40dc03fdb2---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ephoto by \u003ca href=\"https://www.pexels.com/@divinetechygirl/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eChristina Morillo\u003c/a\u003e on \u003ca href=\"https://www.pexels.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003epexels\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"d946\"\u003eThe UI Testing Bottleneck\u003c/h2\u003e\u003cp id=\"2871\"\u003eEvery Android developer has been there: you push your code, kick off your CI pipeline, and then… wait. And wait. And wait some more. Just to find out if your UI tests pass. In my case, I was waiting 40 minutes.\u003c/p\u003e\u003cp id=\"5850\"\u003eLast month, I found myself staring at this exact problem. Our team’s UI tests had grown to a point where they were taking nearly an hour to complete on our CI server. Worse, they’d occasionally time out completely, leaving us with no feedback at all. The development cycle was grinding to a halt.\u003c/p\u003e\u003cp id=\"ddd5\"\u003eThat’s when I discovered the power of test sharding.\u003c/p\u003e\u003ch2 id=\"e6f8\"\u003eWhat is Test Sharding and Why Should You Care?\u003c/h2\u003e\u003cp id=\"7894\"\u003eTest sharding is a simple concept with powerful implications: instead of running your UI tests sequentially on a single device, you split (or “shard”) them across multiple virtual devices running in parallel.\u003c/p\u003e\u003cp id=\"6078\"\u003eThink of it like the difference between having one person wash all your dishes versus having five people each washing a portion of them. The work gets done much faster, and you get your feedback in a fraction of the time.\u003c/p\u003e\u003cp id=\"2a61\"\u003eFor Android developers, this means:\u003c/p\u003e\u003cul\u003e\u003cli id=\"28a3\"\u003eFaster CI builds\u003c/li\u003e\u003cli id=\"11b4\"\u003eQuicker feedback loops\u003c/li\u003e\u003cli id=\"4c76\"\u003eMore testing without lengthy timeouts\u003c/li\u003e\u003cli id=\"4c7e\"\u003eBetter developer productivity\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"e96e\"\u003eFirebase Test Lab: Built-in Parallelization\u003c/h2\u003e\u003cp id=\"3961\"\u003eThe good news is that Firebase Test Lab (FTL) already supports test sharding out of the box. You don’t need complex infrastructure or custom solutions — just a simple command line modification to specify how many shards you want.\u003c/p\u003e\u003cp id=\"6457\"\u003eHere’s how you might run a basic sharded test with Firebase Test Lab:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fcc1\"\u003egcloud beta firebase test android run \\\u003cbr/\u003e  --app=app-debug.apk \\\u003cbr/\u003e  --test=app-debug-androidTest.apk \\\u003cbr/\u003e  --device=model=Pixel3,version=30 \\\u003cbr/\u003e  --num-uniform-shards=5\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"384c\"\u003eThis command tells FTL to run your tests across 5 test shards in parallel. Under the hood, FTL is intelligently distributing your test cases across these shards.\u003c/p\u003e\u003cp id=\"960d\"\u003eIf you need to give it a try before enabling the test sharding using the gcloud you can enable test shards on the Firebase test labs console.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"39f7\"\u003eThe Challenge: Balancing Your Shards\u003c/h2\u003e\u003cp id=\"140b\"\u003eWhile implementing this solution, I ran into an interesting constraint: the number of shards must be less than or equal to the number of test cases. This makes sense when you think about it — you can’t have five people washing dishes if you only have three dishes.\u003c/p\u003e\u003cp id=\"0b3c\"\u003eBut there’s another, more subtle problem. If you have 20 test cases and 5 shards, each shard gets 4 tests. But what if some tests take 10 seconds while others take 2 minutes? You’ll end up with unbalanced shards, and your test run will still be bottlenecked by the longest-running shard.\u003c/p\u003e\u003cp id=\"e120\"\u003eThis is where Flank comes in.\u003c/p\u003e\u003ch2 id=\"93f4\"\u003eIntroducing Flank: Smart Test Sharding\u003c/h2\u003e\u003cp id=\"fe91\"\u003e\u003ca href=\"https://github.com/Flank/flank\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFlank\u003c/a\u003e is an open-source tool that works on top of Firebase Test Lab, optimizing how tests are distributed across shards. Instead of naively dividing tests equally, Flank analyzes previous test runs to make smart decisions about which tests should run on which shards.\u003c/p\u003e\u003cp id=\"cc5b\"\u003eSetting up Flank requires a configuration file like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4052\"\u003egcloud:\u003cbr/\u003e  app: app-debug.apk\u003cbr/\u003e  test: app-androidTest.apk\u003cbr/\u003e  device:\u003cbr/\u003e    - model: Pixel_3\u003cbr/\u003e      version: 30\u003cbr/\u003e  use-orchestrator: true\u003cbr/\u003e  timeout: 30m\u003cbr/\u003eflank:\u003cbr/\u003e  max-test-shards: 5\u003cbr/\u003e  shard-time: 120\u003cbr/\u003e  smart-flank-gcs-path: gs://your-bucket-path\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ecc7\"\u003eThe magic happens with the \u003ccode\u003esmart-flank-gcs-path\u003c/code\u003e parameter, which tells Flank where to store and retrieve historical test execution times. With this data, Flank can distribute tests to create balanced shards, ensuring that no single shard becomes a bottleneck.\u003c/p\u003e\u003ch2 id=\"cf84\"\u003eThe Results: 40% Faster Testing\u003c/h2\u003e\u003cp id=\"42cc\"\u003eAfter implementing Flank in our CI pipeline, the results were impressive. Our UI test execution time dropped by about 40% — from 40+ minutes down to around 24 minutes.\u003c/p\u003e\u003cp id=\"cbfa\"\u003eWhat’s happening behind the scenes is fascinating. When Flank runs with 5 shards, Firebase Test Lab spins up 5 virtual devices to run tests in parallel. However, in the Firebase console, you still see just one test run — FTL abstracts away the parallelization details.\u003c/p\u003e\u003cp id=\"df2d\"\u003eEach shard pulls tests from a JSON file that Flank generates, mapping specific tests to specific shards. When a shard finishes its assigned tests, it can pull more from the queue, ensuring efficient resource utilization.\u003c/p\u003e\u003ch2 id=\"b4d7\"\u003eBeyond Time Savings: Additional Benefits\u003c/h2\u003e\u003cp id=\"2ce4\"\u003eBeyond just speed, I discovered several other advantages to this approach:\u003c/p\u003e\u003col\u003e\u003cli id=\"8c52\"\u003e\u003cstrong\u003eImproved test stability\u003c/strong\u003e: By having shorter test runs, we reduced the chance of timeouts and network-related failures.\u003c/li\u003e\u003cli id=\"caec\"\u003e\u003cstrong\u003eBetter resource utilization\u003c/strong\u003e: Our CI resources were used more efficiently, allowing for more parallel jobs.\u003c/li\u003e\u003cli id=\"6ec5\"\u003e\u003cstrong\u003eTest flakiness detection\u003c/strong\u003e: Flank can automatically rerun flaky tests, improving reliability.\u003c/li\u003e\u003cli id=\"727f\"\u003e\u003cstrong\u003eDetailed reporting\u003c/strong\u003e: We got improved insights into which tests were taking the longest time.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"14a4\"\u003eImplementing This In Your CI Pipeline\u003c/h2\u003e\u003cp id=\"6776\"\u003eIf you’re facing similar UI testing delays, here’s how to implement this solution:\u003c/p\u003e\u003col\u003e\u003cli id=\"e193\"\u003e\u003cstrong\u003eInstall Flank\u003c/strong\u003e: Add it to your project or CI server.\u003c/li\u003e\u003cli id=\"2533\"\u003e\u003cstrong\u003eCreate a configuration file\u003c/strong\u003e: Set up your \u003ccode\u003eflank.yml\u003c/code\u003e with the appropriate parameters.\u003c/li\u003e\u003cli id=\"2932\"\u003e\u003cstrong\u003eUpdate your CI workflow\u003c/strong\u003e: Modify your CI configuration to use Flank instead of direct FTL calls.\u003c/li\u003e\u003cli id=\"cfe0\"\u003e\u003cstrong\u003eMonitor and adjust\u003c/strong\u003e: Start with a conservative number of shards and adjust based on results.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"d705\"\u003eFor teams using Bitrise, you can add a custom script step like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ef44\"\u003e$ curl -sL https://github.com/Flank/flank/releases/download/v23.10.1/flank.jar -o flank.jar\u003cbr/\u003e$ java -jar ./flank.jar firebase test android run\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"283e\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"3c74\"\u003eImplementing test sharding with Flank and Firebase Test Lab transformed our development process. The 40% reduction in UI test execution time meant faster feedback loops, happier developers, and ultimately better quality software.\u003c/p\u003e\u003cp id=\"10be\"\u003eIf you’re wrestling with long-running UI tests in your Android projects, I highly recommend giving this approach a try. The setup is straightforward, and the benefits are immediate and substantial.\u003c/p\u003e\u003cp id=\"19b7\"\u003eHave you tried test sharding for your Android UI tests? What strategies have worked well for your team? Share your experiences in the comments!\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"e937\"\u003e\u003cem\u003eNote: The example in this article shows a configuration for Pixel 3 devices with Android 11 (API 30). You can adjust these parameters to match your target devices and Android versions.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-02-27T18:46:54.614Z",
  "modifiedTime": null
}
