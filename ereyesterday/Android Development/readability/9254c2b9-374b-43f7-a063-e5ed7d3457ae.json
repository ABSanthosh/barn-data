{
  "id": "9254c2b9-374b-43f7-a063-e5ed7d3457ae",
  "title": "Introducing Restore Credentials: Effortless account restoration for Android apps",
  "link": "http://android-developers.googleblog.com/2024/11/maintain-strong-user-relationships-with-restore-credentials.html",
  "description": "",
  "author": "Android Developers",
  "published": "2024-11-20T09:00:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android",
    "Authentication",
    "credential manager",
    "FIDO2",
    "Onboarding",
    "passkeys",
    "Restore Credentials",
    "Security",
    "user experience",
    "User Retention"
  ],
  "byline": "",
  "length": 8319,
  "excerpt": "Use Restore Credentials in the Credential Manager API to provide a seamless sign-in experience for returning users on new Android devices.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Neelansh Sahai - Developer Relations Engineer Did you know that, on average, 40% of the people in the US reset or replace their smartphones every year? This frequent device turnover presents a challenge – and an opportunity – for maintaining strong user relationships. When users get a new phone, the friction of re-entering login credentials can lead to frustration, app abandonment, and churn. To address this issue, we're introducing Restore Credentials, a new feature of Android’s Credential Manager API. With Restore Credentials, apps can seamlessly onboard users to their accounts on a new device after they restore their apps and data from their previous device. This makes the transition to a new device effortless and fosters loyalty and long term relationships. On top of all this, there's no developer effort required for the transfer of a restore key from one device to the other, as this process is tied together with the android system’s backup and restore mechanism. However, if you want to login your users silently as soon as the restore is completed, you might want to implement BackupAgent and add your logic in the onRestore callback. The experience is delightful - users will continue being signed in as they were on their previous device, and they will be able to get notifications to easily access their content without even needing to open the app on the new device. click to enlarge Some of the benefits of the Restore Credentials feature include: Seamless user experience: Users can easily transition to a new Android device. Immediate engagement: Engage users with notifications or other prompts as soon as they start using their new device. Silent login with backup agent integration: If you're using a backup agent, users can be automatically logged back in after data restoration is complete. Restore key checks without backup agent integration: If a backup agent isn't being used, the app can check for a restore key upon first launch and then log the user in automatically. Easy implementation: Leverages the same server-side implementation used for passkeys. How does Restore Credentials work? The Restore Credentials feature enables seamless user account restoration on a new device. This process occurs automatically in the background during device setup when a user restores apps and data from a previous device. By restoring app credentials, the feature allows the app to sign the user back in without requiring any additional interaction. The credential type that’s supported for this feature is called restore key, which is a public key compatible with passkey / FIDO2 backends. Diagram that depicts restoring an app data to a new device using a restore credential, including creating the credential, initiating a restore flow, and automatic user sign-in. User flow On the old device: If the current signed-in user is trusted, you can generate a restore key at any point after they've authenticated in your app. For instance, this could be immediately after login or during a routine check for an existing restore key. The restore key is stored locally and backed up to the cloud. Apps can opt-out of backing it up to the cloud. On the new device: When setting up a new device, the user can select one of the two options to restore data. Either they can restore data from a cloud backup, or can locally transfer the data. If the user transfers locally, the restore key is transferred locally from the old to the new device. Otherwise, if the user restores using the cloud backup, the restore key gets downloaded along with the app data from cloud backup to the new device. Once this restore key is available on the new device, the app can use it to log in the user on the new device silently in the background. Note: You should delete the restore key as soon as the user signs out. You don’t want your user to get stuck in a cycle of signing out intentionally and then automatically getting logged back in. How to implement Restore Credentials Using the Jetpack Credential Manager let you create, get, and clear the relevant Restore Credentials: Create a Restore Credential: When the user signs in to your app, create a Restore Credential associated with their account. This credential is stored locally and synced to the cloud if the user has enabled Google Backup and end to end encryption is available. Apps can opt out of syncing to the cloud. Get the Restore Credential: When the user sets up a new device, your app requests the Restore Credential from Credential Manager. This allows your user to sign in automatically. Clear the Restore Credential: When the user signs out of your app, delete the associated Restore Credential. Restore Credentials is available through the Credential Manager Jetpack library. The minimum version of the Jetpack Library is 1.5.0-beta01, and the minimum GMS version is 242200000. For more on this, refer to the Restore Credentials DAC page. To get started, follow these steps: 1. Add the Credential Manager dependency to your project. // build.gradle.kts implementation(\"androidx.credentials:credentials:1.5.0-beta01\") 2. Create a CreateRestoreCredentialRequest object. // Fetch Registration JSON from server // Same as the registrationJson created at the time of creating a Passkey // See documentation for more info val registrationJson = ... // Create the CreateRestoreCredentialRequest object // Pass in the registrationJSON val createRequest = CreateRestoreCredentialRequest( registrationJson, /* isCloudBackupEnabled = */ true ) NOTE: Set the isCloudBackupEnabled flag to false if you want the restoreKey to be stored locally and not in the cloud. It’s set as true by default 3. Call the createCredential() method on the CredentialManager object. val credentialManager = CredentialManager.create(context) // On a successful authentication create a Restore Key // Pass in the context and CreateRestoreCredentialRequest object val response = credentialManager.createCredential( context, createRestoreRequest ) 4. When the user sets up a new device, call the getCredential() method on the CredentialManager object. // Fetch the Authentication JSON from server val authenticationJson = ... // Create the GetRestoreCredentialRequest object val options = GetRestoreCredentialOption(authenticationJson) val getRequest = GetCredentialRequest(Immutablelist.of(options)) // The restore key can be fetched in two scenarios to // 1. On the first launch of app on the device, fetch the Restore Key // 2. In the onRestore callback (if the app implements the Backup Agent) val response = credentialManager.getCredential(context, getRequest) If you're using a backup agent, perform the getCredential part within the onRestore callback. This ensures that the app's credentials are restored immediately after the app data is restored. 5. When the user signs out of your app, call the clearCredentialState() method on the CredentialManager object. // Create a ClearCredentialStateRequest object val clearRequest = ClearCredentialStateRequest(/* requestType = */ 1) // On user log-out, clear the restore key val response = credentialManager.clearCredentialState(clearRequest) Conclusion The Restore Credentials feature provides significant benefits, ensuring users experience a smooth transition between devices, and allowing them to log in quickly and easily through backup agents or restore key checks. For developers, the feature is straightforward to integrate and leverages existing passkey server-side infrastructure. Overall, Restore Credentials is a valuable tool that delivers a practical and user-friendly authentication solution. This blog post is a part of our series: Spotlight Week: Passkeys. We're providing you with a wealth of resources through the week. Think informative blog posts, engaging videos, practical sample code, and more—all carefully designed to help you leverage the latest advancements in seamless sign-up and sign-in experiences. With these cutting-edge solutions, you can enhance security, reduce friction for your users, and stay ahead of the curve in the rapidly evolving landscape of digital identity. To get a complete overview of what Spotlight Week has to offer and how it can benefit you, be sure to read our overview blog post.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFNDf69dCL-P2rn6PajockzNlxC57Z9hy3TaBi4Mi66aoKjamiB3M_nfk1CoSLKSieFcRSJbywsSfcEgvHNAhs3yc8K792Ig5r_lerGg4qL3n1Rb6_Xa0UHXdlHlVFwujegymT5esaB3hBVHS9u113MrDLEYIYda6O1dnQ8UNGTY0E5eiEuDiBSXUY_W4/w1200-h630-p-k-no-nu/Restore-Credentials-Feature.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFNDf69dCL-P2rn6PajockzNlxC57Z9hy3TaBi4Mi66aoKjamiB3M_nfk1CoSLKSieFcRSJbywsSfcEgvHNAhs3yc8K792Ig5r_lerGg4qL3n1Rb6_Xa0UHXdlHlVFwujegymT5esaB3hBVHS9u113MrDLEYIYda6O1dnQ8UNGTY0E5eiEuDiBSXUY_W4/s1600/Restore-Credentials-Feature.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\u003cem\u003ePosted by \u003ca href=\"https://x.com/NeelanshSahai\" target=\"_blank\"\u003eNeelansh Sahai\u003c/a\u003e - Developer Relations Engineer \u003c/em\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaUCM7kC2VqW2Qj6AARAvYVJeHB1LuJfEdWyq5Mnti-YWlGWUAR32PkCHbobrLOcX3bZC-ew0hXmMcttv-Xg0fC9xgCyEMNQmNwZfhDpRnksMLANOAYJuTpvpczK39FddpBXFiZiErz31ohyphenhyphen3kO2q3SzfSJEei3Ohpn8o04w0GaSFEneNRwHIKrs89-Po/s1600/Restore-Credentials-Banner.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaUCM7kC2VqW2Qj6AARAvYVJeHB1LuJfEdWyq5Mnti-YWlGWUAR32PkCHbobrLOcX3bZC-ew0hXmMcttv-Xg0fC9xgCyEMNQmNwZfhDpRnksMLANOAYJuTpvpczK39FddpBXFiZiErz31ohyphenhyphen3kO2q3SzfSJEei3Ohpn8o04w0GaSFEneNRwHIKrs89-Po/s1600/Restore-Credentials-Banner.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDid you know that, on average, 40% of the people in the US reset or replace their smartphones \u003ca href=\"https://www.statista.com/statistics/619788/average-smartphone-life/\" target=\"_blank\"\u003eevery year\u003c/a\u003e? This frequent device turnover presents a challenge – and an opportunity – for maintaining strong user relationships. When users get a new phone, the friction of re-entering login credentials can lead to frustration, app abandonment, and churn.\u003c/p\u003e\n\n\u003cp\u003eTo address this issue, we\u0026#39;re introducing \u003ca href=\"https://developer.android.com/identity/sign-in/restore-credentials\" target=\"_blank\"\u003eRestore Credentials\u003c/a\u003e, a new feature of Android’s Credential Manager API. With Restore Credentials, apps can seamlessly onboard users to their accounts on a new device after they restore their apps and data from their previous device. This makes the transition to a new device effortless and fosters loyalty and long term relationships.\u003c/p\u003e\n\n\u003cp\u003eOn top of all this, there\u0026#39;s no developer effort required for the transfer of a restore key from one device to the other, as this process is tied together with the android system’s backup and restore mechanism. However, if you want to login your users silently as soon as the restore is completed, you might want to implement \u003cspan\u003eBackupAgent\u003c/span\u003e and add your logic in the \u003cspan\u003eonRestore\u003c/span\u003e callback. The experience is delightful - users will continue being signed in as they were on their previous device, and they will be able to get notifications to easily access their content without even needing to open the app on the new device.\u003c/p\u003e\n\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioVNXeUrZrDWS0sg0gXLqSsl6Y8H59_QfiVjGzN_Z7BnHLsqXp9P4vkOYXX2l_G3Onicdfx7Clc6lj1NacegSIdHyumLG15aDdsBxiXFIOmZMo9A7I7bBHyHYOSeiITy5cD4qD8428fmUID2EZ6vq6ooZT7FzcE4Tjf_c8btK8CMr_dF75a7Fnqb-77_Q/s1600/Restore-Credentials-Feature%20%281%29.png\" target=\"_blank\"\u003e\u003cp\u003e\u003cimg alt=\"An illustration the process of restoring app data and keys to a new device, highlighting automated steps and user interactions.  The top row shows a user signing into an app and a restore key being saved locally, while the bottom row shows the restore process on a new device.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioVNXeUrZrDWS0sg0gXLqSsl6Y8H59_QfiVjGzN_Z7BnHLsqXp9P4vkOYXX2l_G3Onicdfx7Clc6lj1NacegSIdHyumLG15aDdsBxiXFIOmZMo9A7I7bBHyHYOSeiITy5cD4qD8428fmUID2EZ6vq6ooZT7FzcE4Tjf_c8btK8CMr_dF75a7Fnqb-77_Q/s16000/Restore-Credentials-Feature%20(1).png\"/\u003e\u003c/p\u003e\u003c/a\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eclick to enlarge\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eSome of the benefits of the Restore Credentials feature include:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eSeamless user experience:\u003c/b\u003e Users can easily transition to a new Android device.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eImmediate engagement:\u003c/b\u003e Engage users with notifications or other prompts as soon as they start using their new device.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eSilent login with backup agent integration:\u003c/b\u003e If you\u0026#39;re using a backup agent, users can be automatically logged back in after data restoration is complete.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eRestore key checks without backup agent integration:\u003c/b\u003e If a backup agent isn\u0026#39;t being used, the app can check for a restore key upon first launch and then log the user in automatically.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eEasy implementation:\u003c/b\u003e Leverages the same \u003ca href=\"https://developers.google.com/identity/passkeys/developer-guides/server-registration\" target=\"_blank\"\u003eserver-side implementation\u003c/a\u003e used for passkeys.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003ch3\u003eHow does Restore Credentials work?\u003c/h3\u003e\n\n\u003cp\u003eThe Restore Credentials feature enables seamless user account restoration on a new device. This process occurs automatically in the background during device setup when a user restores apps and data from a previous device. By restoring app credentials, the feature allows the app to sign the user back in without requiring any additional interaction.\u003c/p\u003e\n\n\u003cp\u003eThe credential type that’s supported for this feature is called restore key, which is a public key compatible with \u003ca href=\"https://fidoalliance.org/passkeys/\" target=\"_blank\"\u003epasskey / FIDO2\u003c/a\u003e backends.\u003c/p\u003e\n\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-sTZ9gUWdJF8GQaex0kGVdy0LSBwfOI9eC_iAozsGw-TaVhLLkUyGvTXqniDeYwy72qvrIVPqUcfODfh2onvm3Lz7GfqDwcvuxjh-lEBY-wF5a0F-_TiZ_8jsSbg9ZI5ROSq35WxWsYapt4LUcwHhUIz8xW4vTG-DqgjnIbPUDzMfgqzFva9vJPESSxo/s1600/image2.png\" target=\"_blank\"\u003e\u003cp\u003e\u003cimg alt=\"A diagram shows the device-to-device and cloud backup restore processes for app data and restore keys between old and new devices.  Steps are numbered and explained within the diagram.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-sTZ9gUWdJF8GQaex0kGVdy0LSBwfOI9eC_iAozsGw-TaVhLLkUyGvTXqniDeYwy72qvrIVPqUcfODfh2onvm3Lz7GfqDwcvuxjh-lEBY-wF5a0F-_TiZ_8jsSbg9ZI5ROSq35WxWsYapt4LUcwHhUIz8xW4vTG-DqgjnIbPUDzMfgqzFva9vJPESSxo/s1600/image2.png\"/\u003e\u003c/p\u003e\u003c/a\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eDiagram that depicts restoring an app data to a new device using a restore credential, including creating the credential, initiating a restore flow, and automatic user sign-in.\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\u003cbr/\u003e\n\n\u003ch3\u003eUser flow\u003c/h3\u003e\n\n\u003cp\u003eOn the old device:\u003c/p\u003e\n\u003cul\u003e\u003col\u003e\n\u003cli\u003eIf the current signed-in user is trusted, you can generate a restore key at any point after they\u0026#39;ve authenticated in your app. For instance, this could be immediately after login or during a routine check for an existing restore key.\u003c/li\u003e\n\u003cli\u003eThe restore key is stored locally and backed up to the cloud. Apps can opt-out of backing it up to the cloud.\u003c/li\u003e\n\u003c/ol\u003e\u003c/ul\u003e\n\n\u003cp\u003eOn the new device:\u003c/p\u003e\n\u003cul\u003e\u003col\u003e\n\u003cli\u003eWhen setting up a new device, the user can select one of the two options to restore data. Either they can restore data from a cloud backup, or can locally transfer the data. If the user transfers locally, the restore key is transferred locally from the old to the new device. Otherwise, if the user restores using the cloud backup, the restore key gets downloaded along with the app data from cloud backup to the new device.\u003c/li\u003e\n\u003cli\u003eOnce this restore key is available on the new device, the app can use it to log in the user on the new device silently in the background.\u003c/li\u003e\n\u003c/ol\u003e\u003c/ul\u003e\n\n\u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e You should delete the restore key as soon as the user signs out. You don’t want your user to get stuck in a cycle of signing out intentionally and then automatically getting logged back in.\u003c/blockquote\u003e\n\n\n\u003ch3\u003eHow to implement Restore Credentials\u003c/h3\u003e\n\n\u003cp\u003eUsing the \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/credentials\" target=\"_blank\"\u003eJetpack Credential Manager\u003c/a\u003e let you create, get, and clear the relevant Restore Credentials:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eCreate a Restore Credential:\u003c/b\u003e When the user signs in to your app, create a Restore Credential associated with their account. This credential is stored locally and synced to the cloud if the user has enabled Google Backup and end to end encryption is available. Apps can opt out of syncing to the cloud.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eGet the Restore Credential:\u003c/b\u003e When the user sets up a new device, your app requests the Restore Credential from Credential Manager. This allows your user to sign in automatically.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eClear the Restore Credential:\u003c/b\u003e When the user signs out of your app, delete the associated Restore Credential.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eRestore Credentials is available through the Credential Manager Jetpack library. The minimum version of the Jetpack Library is \u003cspan\u003e1.5.0-beta01\u003c/span\u003e, and the minimum GMS version is \u003cspan\u003e242200000\u003c/span\u003e. For more on this, refer to the \u003ca href=\"https://developer.android.com/identity/sign-in/restore-credentials\" target=\"_blank\"\u003eRestore Credentials DAC page\u003c/a\u003e. To get started, follow these steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cp\u003e1. Add the Credential Manager dependency to your project.\u003c/p\u003e\u003c/ul\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// build.gradle.kts\u003c/span\u003e\nimplementation(\u003cspan\u003e\u0026#34;androidx.credentials:credentials:1.5.0-beta01\u0026#34;\u003c/span\u003e)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cul\u003e\n\u003cp\u003e2. Create a \u003cspan\u003eCreateRestoreCredentialRequest\u003c/span\u003e object.\u003c/p\u003e\u003c/ul\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// Fetch Registration JSON from server\u003c/span\u003e\n\u003cspan\u003e// Same as the registrationJson created at the time of creating a Passkey\u003c/span\u003e\n\u003cspan\u003e// See documentation for more info\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e registrationJson = ... \n\n\u003cspan\u003e// Create the CreateRestoreCredentialRequest object\u003c/span\u003e\n\u003cspan\u003e// Pass in the registrationJSON \u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e createRequest = CreateRestoreCredentialRequest(\n  registrationJson,\n  \u003cspan\u003e/* isCloudBackupEnabled = */\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cul\u003e\u003cul\u003e\u003cblockquote\u003e\u003cb\u003eNOTE:\u003c/b\u003e Set the \u003cspan\u003eisCloudBackupEnabled\u003c/span\u003e flag to false if you want the \u003cspan\u003erestoreKey\u003c/span\u003e to be stored locally and not in the cloud. It’s set as \u003cspan\u003etrue\u003c/span\u003e by default\u003c/blockquote\u003e\u003c/ul\u003e\u003c/ul\u003e\n\n\n\u003cul\u003e\n\u003cp\u003e3. Call the \u003cspan\u003ecreateCredential()\u003c/span\u003e method on the \u003cspan\u003eCredentialManager\u003c/span\u003e object.\u003c/p\u003e\u003c/ul\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e credentialManager = CredentialManager.create(context)\n\n\u003cspan\u003e// On a successful authentication create a Restore Key\u003c/span\u003e\n\u003cspan\u003e// Pass in the context and CreateRestoreCredentialRequest object\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e response = credentialManager.createCredential(\n    context,\n    createRestoreRequest\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cul\u003e\n\u003cp\u003e4. When the user sets up a new device, call the \u003cspan\u003egetCredential()\u003c/span\u003e method on the \u003cspan\u003eCredentialManager\u003c/span\u003e object.\u003c/p\u003e\u003c/ul\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// Fetch the Authentication JSON from server\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e authenticationJson = ...\n\n\u003cspan\u003e// Create the GetRestoreCredentialRequest object\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e options = GetRestoreCredentialOption(authenticationJson)\n\u003cspan\u003eval\u003c/span\u003e getRequest = GetCredentialRequest(Immutablelist.of(options))\n\n\u003cspan\u003e// The restore key can be fetched in two scenarios to \u003c/span\u003e\n\u003cspan\u003e// 1. On the first launch of app on the device, fetch the Restore Key\u003c/span\u003e\n\u003cspan\u003e// 2. In the onRestore callback (if the app implements the Backup Agent)\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e response = credentialManager.getCredential(context, getRequest)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf you\u0026#39;re using a backup agent, perform the \u003cspan\u003egetCredential\u003c/span\u003e part within the \u003cspan\u003eonRestore\u003c/span\u003e callback. This ensures that the app\u0026#39;s credentials are restored immediately after the app data is restored.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cp\u003e5. When the user signs out of your app, call the \u003cspan\u003eclearCredentialState()\u003c/span\u003e method on the \u003cspan\u003eCredentialManager\u003c/span\u003e object.\u003c/p\u003e\u003c/ul\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// Create a ClearCredentialStateRequest object\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e clearRequest = ClearCredentialStateRequest(\u003cspan\u003e/* requestType = */\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e)\n\n\u003cspan\u003e// On user log-out, clear the restore key\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e response = credentialManager.clearCredentialState(clearRequest)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.android.com/identity/sign-in/restore-credentials\" target=\"_blank\"\u003eRestore Credentials\u003c/a\u003e feature provides significant benefits, ensuring users experience a smooth transition between devices, and allowing them to log in quickly and easily through backup agents or restore key checks. For developers, the feature is straightforward to integrate and leverages existing passkey server-side infrastructure. Overall, Restore Credentials is a valuable tool that delivers a practical and user-friendly authentication solution.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e\u003cp\u003eThis blog post is a part of our series: Spotlight Week: Passkeys. We\u0026#39;re providing you with a wealth of resources through the week. Think informative blog posts, engaging videos, practical sample code, and more—all carefully designed to help you leverage the latest advancements in seamless sign-up and sign-in experiences.\u003c/p\u003e\n\n\u003cp\u003eWith these cutting-edge solutions, you can enhance security, reduce friction for your users, and stay ahead of the curve in the rapidly evolving landscape of digital identity. To get a complete overview of what Spotlight Week has to offer and how it can benefit you, be sure to \u003ca href=\"https://android-developers.googleblog.com/2024/11/passkeys-spotlight-week.html\" target=\"_blank\"\u003eread our overview blog post\u003c/a\u003e.\u003c/p\u003e\u003c/em\u003e\n\n\n\n\n\n\n\n\n\n\n\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
