{
  "id": "d9bd4e2d-be04-4be9-83d3-2950e4242bfd",
  "title": "Google Maps in Jetpack Compose: Getting Started",
  "link": "https://joebirch.co/android/google-maps-in-jetpack-compose-getting-started/",
  "description": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of compose this felt light a sought after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In... Continue reading â†’",
  "author": "hitherejoe",
  "published": "Wed, 04 Sep 2024 07:02:07 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose"
  ],
  "byline": "by hitherejoe",
  "length": 6920,
  "excerpt": "In a few recent projects, I've needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of compose this felt light a sought after piece of functionality - even though it is still being built on, it now seems to be in a place where I can confidently use it. In th",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of compose this felt light a sought after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the compose mapping package. Weâ€™ll start here by getting the GoogleMap composable setup and learning a little bit about itâ€™s high level offering. Looking to learn more Jetpack Compose? Check out Practical Jetpack Compose ðŸš€ Before we can get started with using the GoogleMap composable, weâ€™ll need to add the required dependency to our project. implementation(\"com.google.maps.android:maps-compose:6.1.0\") Next, weâ€™ll need to an API key to our project. You can follow this guide for obtaining a key, followed by adding it into the manifest file for your application: \u003cmeta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"your_api_key\" /\u003e With this in place, weâ€™ll be able to access the maps API and load a Google Map instance into our application. For this, weâ€™re going to be utilising the GoogleMap composable. Looking at the source for this, we can see the composable supports a range of properties for customizing the display and behaviour of the google map instance. @Composable public fun GoogleMap( mergeDescendants: Boolean = false, modifier: Modifier = Modifier, cameraPositionState: CameraPositionState = rememberCameraPositionState(), contentDescription: String? = null, googleMapOptionsFactory: () -\u003e GoogleMapOptions = { GoogleMapOptions() }, properties: MapProperties = DefaultMapProperties, locationSource: LocationSource? = null, uiSettings: MapUiSettings = DefaultMapUiSettings, indoorStateChangeListener: IndoorStateChangeListener = DefaultIndoorStateChangeListener, onMapClick: ((LatLng) -\u003e Unit)? = null, onMapLongClick: ((LatLng) -\u003e Unit)? = null, onMapLoaded: (() -\u003e Unit)? = null, onMyLocationButtonClick: (() -\u003e Boolean)? = null, onMyLocationClick: ((Location) -\u003e Unit)? = null, onPOIClick: ((PointOfInterest) -\u003e Unit)? = null, contentPadding: PaddingValues = NoPadding, content: (@Composable @GoogleMapComposable () -\u003e Unit)? = null, ) One important thing to note here is the scoping of the content argument. This is using the GoogleMapComposable scope, meaning that we can only use composables that are scoped to this inside of the google map content (so we canâ€™t just use any old composable). This restricts the GoogleMap composable quite a lot in terms of extensibility, but it means that there are standards enforced for the composable (for both UX and performance reasons). So we can see some results in our project, weâ€™ll go ahead and start by composing the GoogleMap. For now weâ€™ll simply pass a modifier to instruct the composable to fill the maximum available size on the screen. GoogleMap( modifier = Modifier.fillMaxSize() ) With very minimal work involved, we can now see the display of a basic GoogleMap composable within our UI. As this is, there isnâ€™t much going on and it probably is much use for our application in this state. When it comes to customising the look and feel of the map UI, there are three key arguments in the composable â€“ these are the CameraPositionState, MapUiSettings and MapProperties. We wonâ€™t dive too much into these right now, but weâ€™ll take a quick look at the use of these classes to familiarise ourselves with the composable. Often when loading a map weâ€™ll want to highlight a specific area/location and to do this, weâ€™ll need to provide the map with some coordinates to do so. Weâ€™ll need to start here by defining a new LatLng reference and providing some coordinates to be used (weâ€™ll use some coordinates in London for this). Next, weâ€™ll need to construct a CameraPosition reference â€“ this defines the target location to be focused on in the center of the map, along with the zoom-level. To build this, weâ€™ll utilise the rememberCameraPositionState composable function which will allow this information to be saved and persisted across recompositions. Within this block, weâ€™ll use the fromLatLngZoom function to create this reference using our defined coordinates along with a zoom-level. val london = LatLng(51.5072, 0.1276) val cameraPositionState = rememberCameraPositionState { position = CameraPosition.fromLatLngZoom(london, 12f) } With this now defined, we can provide this to our composable in the form of the cameraPositionState argument. GoogleMap( modifier = modifier, cameraPositionState = cameraPositionState ) With this in place we can now see the map centered and zoomed to the location that weâ€™ve provided. Alongside this customisation, we also have the MapUiSettings which we can use to control the allowed behaviours on our map. For example, if we wish to disable any zoom functionality then we can block this via the zoomControlsEnabled and zoomGesturesEnabled properties. GoogleMap( modifier = modifier, uiSettings = MapUiSettings(zoomControlsEnabled = false, zoomGesturesEnabled = false), cameraPositionState = cameraPositionState ) With this in place we can see the zoom controls are now hidden from view and if you interact with the map, youâ€™ll notice that the zoom functionality is not available via gestures. As it is, our map looks a standard implementation of google maps. Some application utilise the styling wizard from Google Maps to build customized styling for map instances â€“ this allow us to control the colors used, along with the level of POI, roads and labels that are displayed on our map. In these cases, weâ€™ll want to be able to provide this styling to our composable. We can do this via the MapProperties class and its mapStyleOptions property. For this, weâ€™ll need to extra the json content from a resource file in our application. and then provide this content to the MapStyleOptions class. val jsonStyle = context.assets.assetsFile(\"style.json\") GoogleMap( modifier = modifier, properties = MapProperties(mapStyleOptions = MapStyleOptions(jsonStyle)) ) With this in place, we can now see the custom styling applied to our map composable. This might not be something that every application needs to utilise, but it allows us to apply specific styling based on theming or level of information that needs to be displayed on the map. In this blog post weâ€™ve been able to take a high-level look at the GoogleMap composable, plugging it into our application and exploring some basic customisation through the arguments it supports. In the following posts, weâ€™ll start to look at customising our map further through Markers and other composables that are supported through the GoogleMapComposable content scope.",
  "image": "https://joebirch.co/wp-content/uploads/2024/09/header.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of compose this felt light a sought after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the compose mapping package. Weâ€™ll start here by getting the \u003cstrong\u003eGoogleMap\u003c/strong\u003e composable setup and learning a little bit about itâ€™s high level offering.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn more Jetpack Compose? Check out \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003e ðŸš€\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eBefore we can get started with using the \u003cstrong\u003eGoogleMap\u003c/strong\u003e composable, weâ€™ll need to add the required dependency to our project.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"xml\"\u003eimplementation(\u0026#34;com.google.maps.android:maps-compose:6.1.0\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, weâ€™ll need to an API key to our project. You can follow \u003ca rel=\"noreferrer noopener\" href=\"https://developers.google.com/maps/documentation/android-sdk/get-api-key\" target=\"_blank\"\u003ethis\u003c/a\u003e guide for obtaining a key, followed by adding it into the manifest file for your application:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"xml\"\u003e \u0026lt;meta-data\n    android:name=\u0026#34;com.google.android.geo.API_KEY\u0026#34;\n    android:value=\u0026#34;your_api_key\u0026#34; /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, weâ€™ll be able to access the maps API and load a Google Map instance into our application. For this, weâ€™re going to be utilising the \u003cstrong\u003eGoogleMap\u003c/strong\u003e composable. Looking at the source for this, we can see the composable supports a range of properties for customizing the display and behaviour of the google map instance.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e@Composable\npublic fun GoogleMap(\n    mergeDescendants: Boolean = false,\n    modifier: Modifier = Modifier,\n    cameraPositionState: CameraPositionState = rememberCameraPositionState(),\n    contentDescription: String? = null,\n    googleMapOptionsFactory: () -\u0026gt; GoogleMapOptions = { GoogleMapOptions() },\n    properties: MapProperties = DefaultMapProperties,\n    locationSource: LocationSource? = null,\n    uiSettings: MapUiSettings = DefaultMapUiSettings,\n    indoorStateChangeListener: IndoorStateChangeListener = DefaultIndoorStateChangeListener,\n    onMapClick: ((LatLng) -\u0026gt; Unit)? = null,\n    onMapLongClick: ((LatLng) -\u0026gt; Unit)? = null,\n    onMapLoaded: (() -\u0026gt; Unit)? = null,\n    onMyLocationButtonClick: (() -\u0026gt; Boolean)? = null,\n    onMyLocationClick: ((Location) -\u0026gt; Unit)? = null,\n    onPOIClick: ((PointOfInterest) -\u0026gt; Unit)? = null,\n    contentPadding: PaddingValues = NoPadding,\n    content: (@Composable @GoogleMapComposable () -\u0026gt; Unit)? = null,\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOne important thing to note here is the scoping of the \u003cstrong\u003econtent\u003c/strong\u003e argument. This is using the \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003e scope, meaning that we can only use composables that are scoped to this inside of the google map \u003cstrong\u003econtent\u003c/strong\u003e (so we canâ€™t just use any old composable). This restricts the GoogleMap composable quite a lot in terms of extensibility, but it means that there are standards enforced for the composable (for both UX and performance reasons).\u003c/p\u003e\n\n\n\n\u003cp\u003eSo we can see some results in our project, weâ€™ll go ahead and start by composing the \u003cstrong\u003eGoogleMap\u003c/strong\u003e. For now weâ€™ll simply pass a \u003cstrong\u003emodifier\u003c/strong\u003e to instruct the composable to fill the maximum available size on the screen.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eGoogleMap(\n    modifier = Modifier.fillMaxSize()\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith very minimal work involved, we can now see the display of a basic \u003cstrong\u003eGoogleMap\u003c/strong\u003e composable within our UI.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-509x1024.png\" alt=\"\" width=\"382\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-509x1024.png 509w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-149x300.png 149w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-768x1544.png 768w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-764x1536.png 764w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-1019x2048.png 1019w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-500x1005.png 500w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-150x302.png 150w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-400x804.png 400w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-800x1608.png 800w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1-200x402.png 200w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_164001-1.png 1080w\" sizes=\"(max-width: 382px) 100vw, 382px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAs this is, there isnâ€™t much going on and it probably is much use for our application in this state. When it comes to customising the look and feel of the map UI, there are three key arguments in the composable â€“ these are the \u003cstrong\u003eCameraPositionState\u003c/strong\u003e, \u003cstrong\u003eMapUiSettings\u003c/strong\u003e and \u003cstrong\u003eMapProperties\u003c/strong\u003e. We wonâ€™t dive too much into these right now, but weâ€™ll take a quick look at the use of these classes to familiarise ourselves with the composable.\u003c/p\u003e\n\n\n\n\u003cp\u003eOften when loading a map weâ€™ll want to highlight a specific area/location and to do this, weâ€™ll need to provide the map with some coordinates to do so. Weâ€™ll need to start here by defining a new \u003cstrong\u003eLatLng\u003c/strong\u003e reference and providing some coordinates to be used (weâ€™ll use some coordinates in London for this). Next, weâ€™ll need to construct a \u003cstrong\u003eCameraPosition\u003c/strong\u003e reference â€“ this defines the target location to be focused on in the center of the map, along with the zoom-level. To build this, weâ€™ll utilise the rememberCameraPositionState composable function which will allow this information to be saved and persisted across recompositions. Within this block, weâ€™ll use the \u003cstrong\u003efromLatLngZoom\u003c/strong\u003e function to create this reference using our defined coordinates along with a zoom-level.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval london = LatLng(51.5072, 0.1276)\nval cameraPositionState = rememberCameraPositionState {\n    position = CameraPosition.fromLatLngZoom(london, 12f)\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this now defined, we can provide this to our composable in the form of the \u003cstrong\u003ecameraPositionState\u003c/strong\u003e argument.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eGoogleMap(\n    modifier = modifier,\n    cameraPositionState = cameraPositionState\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place we can now see the map centered and zoomed to the location that weâ€™ve provided.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-511x1024.png\" alt=\"\" width=\"383\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-511x1024.png 511w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-150x301.png 150w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-768x1540.png 768w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-766x1536.png 766w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-1021x2048.png 1021w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-500x1003.png 500w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-400x802.png 400w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-800x1604.png 800w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1-200x401.png 200w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165132-1.png 1080w\" sizes=\"(max-width: 383px) 100vw, 383px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAlongside this customisation, we also have the \u003cstrong\u003eMapUiSettings\u003c/strong\u003e which we can use to control the allowed behaviours on our map. For example, if we wish to disable any zoom functionality then we can block this via the \u003cstrong\u003ezoomControlsEnabled\u003c/strong\u003e and \u003cstrong\u003ezoomGesturesEnabled\u003c/strong\u003e properties.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eGoogleMap(\n    modifier = modifier,\n    uiSettings = MapUiSettings(zoomControlsEnabled = false, zoomGesturesEnabled = false),\n    cameraPositionState = cameraPositionState\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place we can see the zoom controls are now hidden from view and if you interact with the map, youâ€™ll notice that the zoom functionality is not available via gestures.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-509x1024.png\" alt=\"\" width=\"382\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-509x1024.png 509w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-149x300.png 149w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-768x1546.png 768w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-763x1536.png 763w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-1017x2048.png 1017w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-500x1006.png 500w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-150x302.png 150w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-400x805.png 400w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-800x1610.png 800w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1-200x403.png 200w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_165554-1.png 1080w\" sizes=\"(max-width: 382px) 100vw, 382px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAs it is, our map looks a standard implementation of google maps. Some application utilise the \u003ca rel=\"noreferrer noopener\" href=\"https://mapstyle.withgoogle.com/\" target=\"_blank\"\u003estyling wizard\u003c/a\u003e from Google Maps to build customized styling for map instances â€“ this allow us to control the colors used, along with the level of POI, roads and labels that are displayed on our map. In these cases, weâ€™ll want to be able to provide this styling to our composable. We can do this via the \u003cstrong\u003eMapProperties\u003c/strong\u003e class and its \u003cstrong\u003emapStyleOptions\u003c/strong\u003e property. For this, weâ€™ll need to extra the json content from a resource file in our application. and then provide this content to the \u003cstrong\u003eMapStyleOptions\u003c/strong\u003e class.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval jsonStyle = context.assets.assetsFile(\u0026#34;style.json\u0026#34;)\nGoogleMap(\n    modifier = modifier,\n    properties = MapProperties(mapStyleOptions = MapStyleOptions(jsonStyle))\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we can now see the custom styling applied to our map composable. This might not be something that every application needs to utilise, but it allows us to apply specific styling based on theming or level of information that needs to be displayed on the map.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-511x1024.png\" alt=\"\" width=\"383\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-511x1024.png 511w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-150x301.png 150w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-768x1539.png 768w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-767x1536.png 767w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-1022x2048.png 1022w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-500x1002.png 500w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-400x801.png 400w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-800x1603.png 800w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1-200x401.png 200w, https://joebirch.co/wp-content/uploads/2024/09/Screenshot_20240903_171444-1.png 1080w\" sizes=\"(max-width: 383px) 100vw, 383px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIn this blog post weâ€™ve been able to take a high-level look at the \u003cstrong\u003eGoogleMap\u003c/strong\u003e composable, plugging it into our application and exploring some basic customisation through the arguments it supports. In the following posts, weâ€™ll start to look at customising our map further through Markers and other composables that are supported through the \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003e content scope.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-09-04T07:02:07Z",
  "modifiedTime": "2024-09-04T07:02:08Z"
}
