{
  "id": "22ce3a35-ed3b-49d1-91c5-48ab4cba8e05",
  "title": "The Second Developer Preview of Android 16",
  "link": "http://android-developers.googleblog.com/2024/12/second-developer-preview-android16.html",
  "description": "",
  "author": "Android Developers",
  "published": "2024-12-18T11:00:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android",
    "android16",
    "Developer Preview",
    "Featured",
    "latest"
  ],
  "byline": "",
  "length": 12369,
  "excerpt": "The second preview of Android 16 is available, allowing testing of new features and APIs, including richer haptics, adaptive refresh rate, and more.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Matthew McCullough – VP of Product Management, Android Developer The second developer preview of Android 16 is now available to test with your apps. This build includes changes designed to enhance the app experience, improve battery life, and boost performance while minimizing incompatibilities, and your feedback is critical in helping us understand the full impact of this work. System triggered profiling ProfilingManager was added in Android 15, giving apps the ability to request profiling data collection using Perfetto on public devices in the field. To help capture challenging trace scenarios such as startups or ANRs, ProfilingManager now includes System Triggered Profiling. Apps can use ProfilingManager#addProfilingTriggers() to register interest in receiving information about these flows. Flows covered in this release include onFullyDrawn for activity based cold starts, and ANRs. val anrTrigger = ProfilingTrigger.Builder( ProfilingTrigger.TRIGGER_TYPE_ANR ) .setRateLimitingPeriodHours(1) .build() val startupTrigger: ProfilingTrigger = //... mProfilingManager.addProfilingTriggers(listOf(anrTrigger, startupTrigger)) Start component in ApplicationStartInfo ApplicationStartInfo was added in Android 15, allowing an app to see reasons for process start, start type, start times, throttling, and other useful diagnostic data. Android 16 adds getStartComponent() to distinguish what component type triggered the start, which can be helpful for optimizing the startup flow of your app. Richer Haptics Android has exposed limited control over the haptic actuator since its inception. Android 11 added support for more complex haptic effects that more advanced actuators can support through VibrationEffect.Compositions of device-defined semantic primitives. Android 16 adds haptic APIs that let apps define the amplitude and frequency curves of a haptic effect while abstracting away differences between device capabilities. Better job introspection Android 16 introduces JobScheduler#getPendingJobReasons(int jobId) which can return multiple reasons why a job is pending, due to both explicit constraints set by the developer and implicit constraints set by the system. We're also introducing JobScheduler#getPendingJobReasonsHistory(int jobId), which returns a list of the most recent constraint changes. The API can help you debug why your jobs may not be executing, especially if you're seeing reduced success rates with certain tasks or latency issues with job completion as well. This can also better help you understand if certain jobs are not completing due to system defined constraints versus explicitly set constraints. Adaptive refresh rate Adaptive refresh rate (ARR), introduced in Android 15, enables the display refresh rate on supported hardware to adapt to the content frame rate using discrete VSync steps. This reduces power consumption while eliminating the need for potentially jank-inducing mode-switching. Android 16 DP2 introduces hasArrSupport() and getSuggestedFrameRate(int) while restoring getSupportedRefreshRates() to make it easier for your apps to take advantage of ARR. RecyclerView 1.4 internally supports ARR when it is settling from a fling or smooth scroll, and we're continuing our work to add ARR support into more Jetpack libraries. This frame rate article covers many of the APIs you can use to set the frame rate so that your app can directly leverage ARR. Job execution optimizations Starting in Android 16, we're adjusting regular and expedited job execution runtime quota based on the following factors: Which app standby bucket the application is in; active standby buckets will be given a generous runtime quota. Jobs started while the app is visible to the user and continues after the app becomes invisible will adhere to the job runtime quota. Jobs that are executing concurrently with a foreground service will adhere to the job runtime quota. If you need to perform a data transfer that may take a long time consider using a user initiated data transfer. Note: To understand how to further debug and test the behavior change, read more about JobScheduler quota optimizations. Fully deprecating JobInfo#setImportantWhileForeground The JobInfo.Builder#setImportantWhileForeground(boolean) method indicates the importance of a job while the scheduling app is in the foreground or when temporarily exempted from background restrictions. This method has been deprecated since Android 12 (API 31). Starting in Android 16, it will no longer function effectively and calling this method will be ignored. This removal of functionality also applies to JobInfo#isImportantWhileForeground(). Starting in Android 16, if the method is called, the method will return false. Deprecated Disruptive Accessibility Announcements Android 16 DP2 deprecates accessibility announcements, characterized by the use of announceForAccessibility or the dispatch of TYPE_ANNOUNCEMENT AccessibilityEvents. They can create inconsistent user experiences for users of TalkBack and Android's screen reader, and alternatives better serve a broader range of user needs across a variety of Android's assistive technologies. Examples of alternatives: For significant UI changes like window changes, use Activity.setTitle(CharSequence) and setAccessibilityPaneTitle(java.lang.CharSequence). In Compose use Modifier.semantics { paneTitle = \"paneTitle\" } To inform the user of changes to critical UI, use setAccessibilityLiveRegion(int). In Compose use Modifier.semantics { liveRegion = LiveRegionMode.[Polite|Assertive] }. These should be used sparingly as they may generate announcements every time a View or composable is updated. To notify users about errors, send an AccessibilityEvent of type AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR and set AccessibilityNodeInfo#setError(CharSequence), or use TextView#setError(CharSequence). The deprecated announceForAccessibility API includes more detail on suggested alternatives. Cloud search in photo picker The photo picker provides a safe, built-in way for users to grant your app access to selected images and videos from both local and cloud storage, instead of their entire media library. Using a combination of Modular System Components through Google System Updates and Google Play services, it's supported back to Android 4.4 (API level 19). Integration requires just a few lines of code with the associated Android Jetpack library. The developer preview includes new APIs to enable searching from the cloud media provider for the Android photo picker. Search functionality in the photo picker is coming soon. Ranging with enhanced security Android 16 adds support for robust security features in WiFi location on supported devices with WiFi 6's 802.11az, allowing apps to combine the higher accuracy, greater scalability, and dynamic scheduling of the protocol with security enhancements including AES-256-based encryption and protection against MITM attacks. This allows it to be used more safely in proximity use cases, such as unlocking a laptop or a vehicle door. 802.11az is integrated with the Wi-Fi 6 standard, leveraging its infrastructure and capabilities for wider adoption and easier deployment. Health Connect updates Health Connect in the developer preview adds ACTIVITY_INTENSITY, a new datatype defined according to World Health Organization guidelines around moderate and vigorous activity. Each record requires the start time, the end time and whether the activity intensity is moderate or vigorous. Health Connect also contains updated APIs supporting health records. This allows apps to read and write medical records in FHIR format with explicit user consent. This API is currently in an early access program. Sign up if you'd like to be part of our early access program. Predictive back additions Android 16 adds new APIs to help you enable predictive back system animations in gesture navigation such as the back-to-home animation. Registering the onBackInvokedCallback with the new PRIORITY_SYSTEM_NAVIGATION_OBSERVER allows your app to receive the regular onBackInvoked call whenever the system handles a back navigation without impacting the normal back navigation flow. Android 16 additionally adds the finishAndRemoveTaskCallback() and moveTaskToBackCallback(). By registering these callbacks with the OnBackInvokedDispatcher, the system can trigger specific behaviors and play corresponding ahead-of-time animations when the back gesture is invoked. Two Android API releases in 2025 This preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have another release with new developer APIs in Q4. The Q2 major release will be the only release in 2025 to include planned behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; it will not include any app-impacting behavior changes. We'll continue to have quarterly Android releases. The Q1 and Q3 updates in-between the API releases will provide incremental updates to help ensure continuous quality. We’re actively working with our device partners to bring the Q2 release to as many devices as possible. There’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, and that will be tied to the major API level. How to get ready In addition to performing compatibility testing on the next major release, make sure that you're compiling your apps against the new SDK, and use the compatibility framework to enable targetSdkVersion-gated behavior changes as they become available for early testing. App compatibility The Android 16 Preview program runs from November 2024 until the final public release next year. At key development milestones, we'll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We'll highlight critical APIs as they are ready to test in the preview program in blogs and on the Android 16 developer website. We’re targeting Late Q1 of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. We’re expecting to reach Platform Stability in March 2025, and from that time you’ll have several months before the official release to do your final testing. Learn more in the release timeline details. Get started with Android 16 You can get started today with Developer Preview 2 by flashing a system image and updating the tools. If you are currently on Developer Preview 1, you will automatically get an over-the-air update to Developer Preview 2. We're looking for your feedback so please report issues and submit feature requests on the feedback page. The earlier we get your feedback, the more we can include in the final release. For the best development experience with Android 16, we recommend that you use the latest preview of the Android Studio Ladybug feature drop. Once you’re set up, here are some of the things you should do: Compile against the new SDK, test in CI environments, and report any issues in our tracker on the feedback page. Test your current app for compatibility, learn whether your app is affected by changes in Android 16, and install your app onto a device or emulator running Android 16 and extensively test it. We’ll update the preview system images and SDK regularly throughout the Android 16 release cycle. This preview release is for developers only and not intended for daily consumer use. We're making it available by manual download. Once you’ve manually installed a preview build, you’ll automatically get future updates over-the-air for all later previews and Betas. If you've already installed Android 15 QPR Beta 2 and would like to flash Android 16 Developer Preview 2, you can do so without first having to wipe your device. As we reach our Beta releases, we'll be inviting consumers to try Android 16 as well, and we'll open up enrollment for Android 16 in the Android Beta program at that time. For complete information, visit the Android 16 developer site.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjImJmFDXwpMRSRUyK3OsYHltR8btqa-mzT2Q34suhjJjOAOlKO_0DwVXzqtjCz_oRM8CD6UOFOGySl8HJTI16R7eMLEPT5-moqhGzQxtAPvnfsMpiPLLY-P5xgJ34XLSsDmj09xlsoPxt3upGcWzj4WMUa9XaeSp-nA16SxU8eQ58lONjZ9cdy13ylUAU/w1200-h630-p-k-no-nu/A16DP1-Feature%20%281%29.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjImJmFDXwpMRSRUyK3OsYHltR8btqa-mzT2Q34suhjJjOAOlKO_0DwVXzqtjCz_oRM8CD6UOFOGySl8HJTI16R7eMLEPT5-moqhGzQxtAPvnfsMpiPLLY-P5xgJ34XLSsDmj09xlsoPxt3upGcWzj4WMUa9XaeSp-nA16SxU8eQ58lONjZ9cdy13ylUAU/s1600/A16DP1-Feature%20%281%29.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003e Posted by Matthew McCullough – VP of Product Management, Android Developer\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9v1k9OJQJO50aFpos2ASIgjXE7nmTVN-CW65Pczg7bo1ttpaPNkO7mvQs6RBWEVwG70qgEiO0rNL5ARmP22Z42_G1KNz0kFFCs9TxrXifEuar13GP9aQ-2ql03rl99e7rPZm5sBKxo_uLL5hNP_lBPK82h2aRG7YcaN1r2QHCqnJIK-nOedMtxJnyJCY/s1600/android_16_platlogo_512px.png\"\u003e\u003cimg data-original-height=\"1024\" data-original-width=\"1024\" height=\"200\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9v1k9OJQJO50aFpos2ASIgjXE7nmTVN-CW65Pczg7bo1ttpaPNkO7mvQs6RBWEVwG70qgEiO0rNL5ARmP22Z42_G1KNz0kFFCs9TxrXifEuar13GP9aQ-2ql03rl99e7rPZm5sBKxo_uLL5hNP_lBPK82h2aRG7YcaN1r2QHCqnJIK-nOedMtxJnyJCY/s1600/android_16_platlogo_512px.png\" width=\"200\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe second developer preview of Android 16 is now available to test with your apps. This build includes changes designed to enhance the app experience, improve battery life, and boost performance while minimizing incompatibilities, and your feedback is critical in helping us understand the full impact of this work.\u003c/p\u003e\n\n\u003ch3\u003eSystem triggered profiling\u003c/h3\u003e\n\n\u003cp\u003e\u003cspan\u003eProfilingManager\u003c/span\u003e was added in Android 15, giving apps the ability to request profiling data collection using Perfetto on public devices in the field. To help capture challenging trace scenarios such as startups or ANRs, \u003cspan\u003eProfilingManager\u003c/span\u003e now includes System Triggered Profiling. Apps can use \u003ca href=\"https://developer.android.com/reference/android/os/ProfilingManager#addProfilingTriggers%28java.util.List%3Candroid.os.ProfilingTrigger%3E%29\" target=\"_blank\"\u003e\u003cspan\u003eProfilingManager#addProfilingTriggers()\u003c/span\u003e\u003c/a\u003e to register interest in receiving information about these flows. Flows covered in this release include \u003cspan\u003eonFullyDrawn\u003c/span\u003e for activity based cold starts, and ANRs.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e anrTrigger = ProfilingTrigger.Builder(\n                ProfilingTrigger.TRIGGER_TYPE_ANR\n            )\n                .setRateLimitingPeriodHours(\u003cspan\u003e1\u003c/span\u003e)\n                .build()\n\n\u003cspan\u003eval\u003c/span\u003e startupTrigger: ProfilingTrigger =  \u003cspan\u003e//...\u003c/span\u003e\n\nmProfilingManager.addProfilingTriggers(listOf(anrTrigger, startupTrigger))\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3\u003eStart component in \u003cspan\u003eApplicationStartInfo\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003cspan\u003eApplicationStartInfo\u003c/span\u003e was added in Android 15, allowing an app to see reasons for process start, start type, start times, throttling, and other useful diagnostic data. Android 16 adds \u003ca href=\"https://developer.android.com/reference/android/app/ApplicationStartInfo#getStartComponent%28%29\" target=\"_blank\"\u003e\u003cspan\u003egetStartComponent()\u003c/span\u003e\u003c/a\u003e to distinguish what component type triggered the start, which can be helpful for optimizing the startup flow of your app.\u003c/p\u003e\n\n\u003ch3\u003eRicher Haptics\u003c/h3\u003e\n\n\u003cp\u003eAndroid has exposed limited control over the haptic actuator since its inception.\u003c/p\u003e\n\n\u003cp\u003eAndroid 11 added support for more complex haptic effects that more advanced actuators can support through \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/os/VibrationEffect.Composition\" target=\"_blank\"\u003eVibrationEffect.Compositions\u003c/a\u003e\u003c/span\u003e of device-defined semantic primitives.\u003c/p\u003e\n\n\u003cp\u003eAndroid 16 adds \u003ca href=\"https://developer.android.com/reference/android/os/vibrator/package-summary\" target=\"_blank\"\u003ehaptic APIs\u003c/a\u003e that let apps define the amplitude and frequency curves of a haptic effect while abstracting away differences between device capabilities.\u003c/p\u003e\n\n\u003ch3\u003eBetter job introspection\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 introduces \u003ca href=\"https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasons%28int%29\" target=\"_blank\"\u003e\u003cspan\u003eJobScheduler#getPendingJobReasons(int jobId)\u003c/span\u003e\u003c/a\u003e which can return multiple reasons why a job is pending, due to both explicit constraints set by the developer and implicit constraints set by the system.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;re also introducing \u003ca href=\"https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasonsHistory%28int%29\" target=\"_blank\"\u003e\u003cspan\u003eJobScheduler#getPendingJobReasonsHistory(int jobId)\u003c/span\u003e\u003c/a\u003e, which returns a list of the most recent constraint changes.\u003c/p\u003e\n\n\u003cp\u003eThe API can help you debug why your jobs may not be executing, especially if you\u0026#39;re seeing reduced success rates with certain tasks or latency issues with job completion as well. This can also better help you understand if certain jobs are not completing due to system defined constraints versus explicitly set constraints.\u003c/p\u003e\n\n\u003ch3\u003eAdaptive refresh rate\u003c/h3\u003e\n\n\u003cp\u003eAdaptive refresh rate (ARR), introduced in Android 15, enables the display refresh rate on supported hardware to adapt to the content frame rate using discrete VSync steps. This reduces power consumption while eliminating the need for potentially jank-inducing mode-switching.\u003c/p\u003e\n\n\u003cp\u003eAndroid 16 DP2 introduces \u003ca href=\"https://developer.android.com/reference/android/view/Display#hasArrSupport%28%29\" target=\"_blank\"\u003e\u003cspan\u003ehasArrSupport()\u003c/span\u003e\u003c/a\u003e and \u003ca href=\"https://developer.android.com/reference/android/view/Display#getSuggestedFrameRate%28int%29\" target=\"_blank\"\u003e\u003cspan\u003egetSuggestedFrameRate(int)\u003c/span\u003e\u003c/a\u003e while restoring \u003ca href=\"https://developer.android.com/reference/android/view/Display#getSupportedRefreshRates%28%29\" target=\"_blank\"\u003e\u003cspan\u003egetSupportedRefreshRates()\u003c/span\u003e\u003c/a\u003e to make it easier for your apps to take advantage of ARR.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/recyclerview#version_14_2\" target=\"_blank\"\u003eRecyclerView 1.4\u003c/a\u003e internally supports ARR when it is \u003ca href=\"https://android.googlesource.com/platform/frameworks/support/+/a1e9ab3e5fd52e885731bd762ff7dd4a64b25505\" target=\"_blank\"\u003esettling from a fling or smooth scroll\u003c/a\u003e, and we\u0026#39;re continuing our work to add ARR support into more Jetpack libraries. This \u003ca href=\"https://developer.android.com/media/optimize/performance/frame-rate\" target=\"_blank\"\u003eframe rate article\u003c/a\u003e covers many of the APIs you can use to set the frame rate so that your app can directly leverage ARR.\u003c/p\u003e\n\n\u003ch3\u003eJob execution optimizations\u003c/h3\u003e\n\u003cp\u003eStarting in Android 16, we\u0026#39;re adjusting regular and expedited job execution runtime quota based on the following factors:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eWhich \u003ca href=\"https://developer.android.com/topic/performance/appstandby\" target=\"_blank\"\u003eapp standby bucket\u003c/a\u003e the application is in; active standby buckets will be given a generous runtime quota.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003eJobs started while the app is visible to the user and continues after the app becomes invisible will adhere to the job runtime quota.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003eJobs that are executing concurrently with a foreground service will adhere to the job runtime quota. If you need to perform a data transfer that may take a long time consider using a \u003ca href=\"https://developer.android.com/develop/background-work/background-tasks/uidt\" target=\"_blank\"\u003euser initiated data transfer\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e  To understand how to further debug and test the behavior change, read more about \u003ca href=\"https://developer.android.com/about/versions/16/behavior-changes-all#job-quota-opt\" target=\"_blank\"\u003e\u003cspan\u003eJobScheduler\u003c/span\u003e quota optimizations\u003c/a\u003e.\u003c/blockquote\u003e\n\n\u003ch4\u003e\u003cspan\u003eFully deprecating \u003cspan\u003eJobInfo#setImportantWhileForeground\u003c/span\u003e\u003c/span\u003e\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.android.com/reference/android/app/job/JobInfo.Builder#setImportantWhileForeground%28boolean%29\" target=\"_blank\"\u003e\u003cspan\u003eJobInfo.Builder#setImportantWhileForeground(boolean)\u003c/span\u003e\u003c/a\u003e method indicates the importance of a job while the scheduling app is in the foreground or when temporarily exempted from background restrictions.\u003c/p\u003e\n\n\u003cp\u003eThis method has been deprecated since Android 12 (API 31). Starting in Android 16, it will no longer function effectively and calling this method will be ignored.\u003c/p\u003e\n\n\u003cp\u003eThis removal of functionality also applies to \u003ca href=\"https://developer.android.com/reference/android/app/job/JobInfo#isImportantWhileForeground%28%29\" target=\"_blank\"\u003e\u003cspan\u003eJobInfo#isImportantWhileForeground()\u003c/span\u003e\u003c/a\u003e. Starting in Android 16, if the method is called, the method will return false.\u003c/p\u003e\n\n\u003ch3\u003eDeprecated Disruptive Accessibility Announcements\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 DP2 deprecates accessibility announcements, characterized by the use of \u003ca href=\"https://developer.android.com/reference/android/view/View#announceForAccessibility%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003eannounceForAccessibility\u003c/span\u003e\u003c/a\u003e or the dispatch of \u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#TYPE_ANNOUNCEMENT\" target=\"_blank\"\u003e\u003cspan\u003eTYPE_ANNOUNCEMENT AccessibilityEvents\u003c/span\u003e\u003c/a\u003e. They can create inconsistent user experiences for users of TalkBack and Android\u0026#39;s screen reader, and alternatives better serve a broader range of user needs across a variety of Android\u0026#39;s assistive technologies.\u003c/p\u003e\n\n\u003cp\u003eExamples of alternatives:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eFor significant UI changes like window changes, use \u003ca href=\"https://developer.android.com/reference/android/app/Activity#setTitle%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003eActivity.setTitle(CharSequence)\u003c/span\u003e\u003c/a\u003e and \u003ca href=\"https://developer.android.com/reference/android/view/View#setAccessibilityPaneTitle%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003esetAccessibilityPaneTitle(java.lang.CharSequence)\u003c/span\u003e\u003c/a\u003e. In Compose use \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#%28androidx.compose.ui.semantics.SemanticsPropertyReceiver%29.paneTitle%28%29\" target=\"_blank\"\u003e\u003cspan\u003eModifier.semantics { paneTitle = \u0026#34;paneTitle\u0026#34; }\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n  \n\u003cli\u003eTo inform the user of changes to critical UI, use \u003ca href=\"https://developer.android.com/reference/android/view/View#setAccessibilityLiveRegion%28int%29\" target=\"_blank\"\u003e\u003cspan\u003esetAccessibilityLiveRegion(int)\u003c/span\u003e\u003c/a\u003e. In Compose use \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#%28androidx.compose.ui.semantics.SemanticsPropertyReceiver%29.liveRegion%28%29\" target=\"_blank\"\u003e\u003cspan\u003eModifier.semantics { liveRegion = LiveRegionMode.[Polite|Assertive] }\u003c/span\u003e\u003c/a\u003e. These should be used sparingly as they may generate announcements every time a View or composable is updated.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003eTo notify users about errors, send an AccessibilityEvent of type \u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR\" target=\"_blank\"\u003e\u003cspan\u003eAccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR\u003c/span\u003e\u003c/a\u003e and set \u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setError%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003eAccessibilityNodeInfo#setError(CharSequence)\u003c/span\u003e\u003c/a\u003e, or use \u003ca href=\"https://developer.android.com/reference/android/widget/TextView#setError%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003eTextView#setError(CharSequence)\u003c/span\u003e\u003c/a\u003e.\u003c/li\u003e\n  \n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003cp\u003eThe deprecated \u003ca href=\"https://developer.android.com/reference/android/view/View#announceForAccessibility%28java.lang.CharSequence%29\" target=\"_blank\"\u003e\u003cspan\u003eannounceForAccessibility\u003c/span\u003e\u003c/a\u003e API includes more detail on suggested alternatives.\u003c/p\u003e\n  \n  \n\u003ch3\u003eCloud search in photo picker\u003c/h3\u003e\n  \n\u003cp\u003eThe \u003ca href=\"https://developer.android.com/training/data-storage/shared/photopicker\" target=\"_blank\"\u003ephoto picker\u003c/a\u003e provides a safe, built-in way for users to grant your app access to selected images and videos from both local and cloud storage, instead of their entire media library. Using a combination of \u003ca href=\"https://source.android.com/devices/architecture/modular-system\" target=\"_blank\"\u003eModular System Components\u003c/a\u003e through \u003ca href=\"https://support.google.com/product-documentation/answer/11412553\" target=\"_blank\"\u003eGoogle System Updates\u003c/a\u003e and \u003ca href=\"https://developers.google.com/android/guides/overview\" target=\"_blank\"\u003eGoogle Play services\u003c/a\u003e, it\u0026#39;s supported back to \u003ca href=\"https://developer.android.com/reference/android/os/Build.VERSION_CODES#KITKAT\" target=\"_blank\"\u003eAndroid 4.4 (API level 19)\u003c/a\u003e. Integration requires just a few lines of code with the associated \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/activity\" target=\"_blank\"\u003eAndroid Jetpack library\u003c/a\u003e.\u003c/p\u003e\n  \n\u003cp\u003eThe developer preview includes \u003ca href=\"https://developer.android.com/sdk/api_diff/b-dp2-incr/changes/pkg_android.provider\" target=\"_blank\"\u003enew APIs to enable searching\u003c/a\u003e from the cloud media provider for the Android photo picker. Search functionality in the photo picker is coming soon.\u003c/p\u003e\n  \n\u003ch3\u003eRanging with enhanced security\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds support for \u003ca href=\"https://developer.android.com/reference/android/net/wifi/rtt/SecureRangingConfig\" target=\"_blank\"\u003erobust security features\u003c/a\u003e in WiFi location on supported devices with WiFi 6\u0026#39;s 802.11az, allowing apps to combine the higher accuracy, greater scalability, and dynamic scheduling of the protocol with security enhancements including AES-256-based encryption and protection against MITM attacks. This allows it to be used more safely in proximity use cases, such as unlocking a laptop or a vehicle door. 802.11az is integrated with the Wi-Fi 6 standard, leveraging its infrastructure and capabilities for wider adoption and easier deployment.\u003c/p\u003e\n  \n\u003ch3\u003eHealth Connect updates\u003c/h3\u003e\n  \n\u003cp\u003eHealth Connect in the developer preview adds \u003cspan\u003eACTIVITY_INTENSITY\u003c/span\u003e, a new datatype defined according to World Health Organization guidelines around moderate and vigorous activity. Each record requires the start time, the end time and whether the activity intensity is moderate or vigorous.\u003c/p\u003e\n  \n\u003cp\u003eHealth Connect also contains updated APIs supporting health records. This allows apps to read and write medical records in FHIR format with explicit user consent. This API is currently in an early access program. Sign up if you\u0026#39;d like to \u003ca href=\"https://forms.gle/43HJz4Fm2UQLWy5W8\" target=\"_blank\"\u003ebe part of our early access program\u003c/a\u003e.\u003c/p\u003e\n  \n\u003ch3\u003ePredictive back additions\u003c/h3\u003e\n  \n\u003cp\u003eAndroid 16 adds new APIs to help you enable predictive back system animations in gesture navigation such as the back-to-home animation. \u003ca href=\"https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#registerOnBackInvokedCallback%28int,%20android.window.OnBackInvokedCallback%29\" target=\"_blank\"\u003eRegistering the \u003cspan\u003eonBackInvokedCallback\u003c/span\u003e\u003c/a\u003e with the new \u003ca href=\"https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#PRIORITY_SYSTEM_NAVIGATION_OBSERVER\" target=\"_blank\"\u003e\u003cspan\u003ePRIORITY_SYSTEM_NAVIGATION_OBSERVER\u003c/span\u003e\u003c/a\u003e allows your app to receive the regular onBackInvoked call whenever the system handles a back navigation without impacting the normal back navigation flow.\u003c/p\u003e\n  \n\u003cp\u003eAndroid 16 additionally adds the \u003ca href=\"https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#finishAndRemoveTaskCallback%28android.app.Activity%29\" target=\"_blank\"\u003e\u003cspan\u003efinishAndRemoveTaskCallback()\u003c/span\u003e\u003c/a\u003e and \u003ca href=\"https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#moveTaskToBackCallback%28android.app.Activity%29\" target=\"_blank\"\u003e\u003cspan\u003emoveTaskToBackCallback()\u003c/span\u003e\u003c/a\u003e. By registering these callbacks with the \u003cspan\u003eOnBackInvokedDispatcher\u003c/span\u003e, the system can trigger specific behaviors and play corresponding ahead-of-time animations when the back gesture is invoked.\u003c/p\u003e\n  \n\u003ch2\u003e\u003cspan\u003e\u003ca href=\"https://android-developers.googleblog.com/2024/10/android-sdk-release-update.html\" target=\"_blank\"\u003eTwo Android API releases in 2025\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have another release with new developer APIs in Q4. The Q2 major release will be the only release in 2025 to include planned behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; it will not include any app-impacting behavior changes.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"2025 SDK release timeline showing a features only update in Q1 and Q3, a major SDK release with behavior changes, APIs, and features in Q2, and a minor SDK release with APIs and features in Q4\" height=\"164\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjSeVe1-ddLYBDekoJnJP_c3Qq3BOxmM8IOvx6DbeaQCpau5VrnpHG8G0UFayJsIrVZehmY-Sf85Wt8iDvxJ5M8D0fGOl4M_ucFffyosC4AgRae6R6gN-mNrm3Jp8XYsJtQVHGqv84obbkuy4DvFbDgwdBXeuQ_JOveA2IWC1hbned7OkXJfWClTO2Szac/w640-h164/image2.png\" width=\"640\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ll continue to have quarterly Android releases. The Q1 and Q3 updates in-between the API releases will provide incremental updates to help ensure continuous quality. We’re actively working with our device partners to bring the Q2 release to as many devices as possible.\u003c/p\u003e\n\n\u003cp\u003eThere’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, and that will be tied to the major API level.\u003c/p\u003e\n\n\u003ch3\u003eHow to get ready\u003c/h3\u003e\n\n\u003cp\u003eIn addition to performing compatibility testing on the next major release, make sure that you\u0026#39;re compiling your apps against the new SDK, and use the compatibility framework to enable \u003cspan\u003etargetSdkVersion\u003c/span\u003e-gated behavior changes as they become available for early testing.\u003c/p\u003e\n\n\u003ch3\u003eApp compatibility\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg alt=\"The Android 16 production timeline shows the release stages, highlighting \u0026#39;Beta Releases\u0026#39; and \u0026#39;Platform Stability\u0026#39; in blue and green, respectively, from December to the final release.\" height=\"164\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg4OeS_v0qVUAkcecn122Ab6sPyMcFpM9xBQZziUc1ruv-udM_77bI0GDRaL0_KAIQOYwnqVSmNbLZ8tunj_dL-rOKv9Oqq-jM5rAod9-vSdbMr1fYhxRQSK5P8A2U81rEu7fF-lVERVUO5JRhx_HuWp7zZ6egxMjtGIYZRWdrAj-037DyPCiiPEpailMY/s1600/image1.png\" width=\"640\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe Android 16 Preview program runs from November 2024 until the final public release next year. At key development milestones, we\u0026#39;ll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We\u0026#39;ll highlight critical APIs as they are ready to test in the preview program in blogs and on the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer website\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe’re targeting Late Q1 of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. We’re expecting to reach Platform Stability in March 2025, and from that time you’ll have several months before the official release to do your final testing. Learn more in the \u003ca href=\"https://developer.android.com/about/versions/16/overview#timeline\" target=\"_blank\"\u003erelease timeline details\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eGet started with Android 16\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eYou can get started today with Developer Preview 2 by flashing a system image and updating the tools. If you are currently on Developer Preview 1, you will automatically get an over-the-air update to Developer Preview 2. We\u0026#39;re looking for your feedback so please report issues and submit feature requests on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e. The earlier we get your feedback, the more we can include in the final release.\u003c/p\u003e\n\n\u003cp\u003eFor the best development experience with Android 16, we recommend that you use the latest preview of the Android Studio Ladybug feature drop. Once you’re set up, here are some of the things you should do:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eCompile against the new SDK, test in CI environments, and report any issues in our tracker on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback#issue_tracker\" target=\"_blank\"\u003efeedback page\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003eTest your current app for compatibility, learn whether your app is affected by changes in Android 16, and install your app onto a device or emulator running Android 16 and extensively test it.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eWe’ll update the \u003ca href=\"https://developer.android.com/about/versions/16/download\" target=\"_blank\"\u003epreview system images\u003c/a\u003e and SDK regularly throughout the Android 16 release cycle. This preview release is for developers only and not intended for daily consumer use. We\u0026#39;re making it \u003ca href=\"https://developer.android.com/about/versions/16/get\" target=\"_blank\"\u003eavailable by manual download\u003c/a\u003e. Once you’ve manually installed a preview build, you’ll automatically get future updates over-the-air for all later previews and Betas.\u003c/p\u003e\n\n\u003cp\u003eIf you\u0026#39;ve already installed Android 15 QPR Beta 2 and would like to flash Android 16 Developer Preview 2, you can do so without first having to wipe your device.\u003c/p\u003e\n\n\u003cp\u003eAs we reach our Beta releases, we\u0026#39;ll be inviting consumers to try Android 16 as well, and we\u0026#39;ll open up enrollment for Android 16 in the Android Beta program at that time.\u003c/p\u003e\n\n\u003cp\u003eFor complete information, visit the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer site\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
