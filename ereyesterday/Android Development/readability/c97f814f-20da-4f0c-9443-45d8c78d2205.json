{
  "id": "c97f814f-20da-4f0c-9443-45d8c78d2205",
  "title": "Google Maps in Jetpack Compose: Markers",
  "link": "https://joebirch.co/android/google-maps-in-jetpack-compose-markers/",
  "description": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this... Continue reading â†’",
  "author": "hitherejoe",
  "published": "Fri, 04 Oct 2024 09:20:53 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose",
    "Android App Development",
    "Android Apps",
    "Android Development",
    "AndroidDev",
    "App Development",
    "jetpack compose",
    "jetpackcompose",
    "Mobile App Development"
  ],
  "byline": "by hitherejoe",
  "length": 7379,
  "excerpt": "In a few recent projects, I've needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality - even though it is still being built on, it now seems to be in a place where I can confidently use it. In th",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package. Now that we have the basics down from the previous post, weâ€™re going to dive into the Marker composable and learn how we can show markers on our map. Looking to learn more Jetpack Compose? The video course for Practical Jetpack Compose is now available ðŸš€ The Marker Composable When it comes to displaying markers on our composable map, the Marker composable provides this functionality for our Google Maps instance. Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation. @Composable @GoogleMapComposable public fun Marker( state: MarkerState = rememberMarkerState(), contentDescription: String? = \"\", alpha: Float = 1.0f, anchor: Offset = Offset(0.5f, 1.0f), draggable: Boolean = false, flat: Boolean = false, icon: BitmapDescriptor? = null, infoWindowAnchor: Offset = Offset(0.5f, 0.0f), rotation: Float = 0.0f, snippet: String? = null, tag: Any? = null, title: String? = null, visible: Boolean = true, zIndex: Float = 0.0f, onClick: (Marker) -\u003e Boolean = { false }, onInfoWindowClick: (Marker) -\u003e Unit = {}, onInfoWindowClose: (Marker) -\u003e Unit = {}, onInfoWindowLongClick: (Marker) -\u003e Unit = {}, ) As we can see from this composable, there is a collection of arguments that allow us to customise our Marker. To be able to display the Marker at our chosen location, weâ€™re going to need to utilise the MarkerState argument. This allows us to provide a LatLng for where the Marker should be displayed at. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) We can then assign this MarkerState reference using the state argument of the Marker composable. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker ) } With this in place, weâ€™ll now be able to see a Marker displayed on our map. As we can see, this doesnâ€™t give much information to our users. We can assign a title to our Marker using the title argument, which takes string value to be displayed in a popup when the Marker is clicked. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, title = \"Home\" ) } When clicking the Marker, we can now see a Title is displayed within the popup window. We can go one step further here and also provide a string value for the snippet argument, this is where we can provide some additional text to be displayed beneath the title. Currently to use the snippet, this must be used alongside the title, otherwise the popup window will not be displayed. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, title = \"Home\", snippet = \"London\" ) } Handling Marker Appearance Alongside displaying text information, we can also utilise the icon argument to customise the appearance of the marker. For example, we can use the BitmapDescriptorFactory and its defaultMarker function to instantiate a marker using a specified hue. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, title = \"Home\", snippet = \"London\", icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN) ) } This will then alter the color being used for our marker, based on the provided hue value. The icon argument takes a BitmapDescriptor reference, so we can provide some other kind of decoration if we are looking to do more than modify the color. For example, letâ€™s provide a drawable to be used for our marker. Here, weâ€™ll create a Bitmap from a drawable reference, providing this to the fromBitmap function of the BitmapDescriptorFactory. We can then provide this to the icon argument of our Marker composable. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) val customIcon = BitmapFactory.decodeResource(LocalContext.current.resources, R.drawable.marker) GoogleMap( ... ) { Marker( state = marker, title = \"Home\", snippet = \"London\", icon = BitmapDescriptorFactory.fromBitmap(customIcon) ) } With this in place we can now see our custom marker icon being used when the Marker is drawn on the map. In some cases, markers may be disabled from interactions or â€˜inactiveâ€™ within our map. When it comes to these scenarios we can use the alpha argument of the Marker composable to control the alpha of the drawn marker. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, alpha = 0.4f ) } We can see how this modifies the appearance of our marker when drawn on our map. Handling Marker Interactions Controlling the appearance of our markers is one thing, but we may also want to handle any interaction events that occur. While clicking on the marker currently displays a popup window, we may want to handle this interaction differently â€“ such as showing our own popup alert, or displaying some kind of different UI to the user. In these scenarios, we can intercept click events on a marker by using the onClick argument of the Marker composable. Within this handler, we can trigger our own way of dealing with the click event. One important thing to note here is the boolean value that is returned from the lambda â€“ to fully intercept the event we can return true, this will prevent the popup window from showing after this click event has taken place. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, onClick = { marker -\u003e showAlert = true true } ) } With this click handler, we will now be able to intercept click events and handle the marker interaction in our own way. If we still wish to utilise the info window, we can also intercept click events on this popup using the onInfoWindowClick argument. This can be helpful if we want to show additional information based on the information window, or navigate the user to another part of our UI. val marker = rememberMarkerState(position = LatLng(51.5072, 0.1276)) GoogleMap( ... ) { Marker( state = marker, onInfoWindowClick = { marker -\u003e showAlert = true } ) } In this blog post, weâ€™ve taken a look at the marker composable, understanding how we can use it to portray map information to our users, as well as customise its appearance and behaviour. In the following posts, weâ€™ll start to look at customising our map further through other composables that are supported through the GoogleMapComposable content scope.",
  "image": "https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071510.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package. \u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we have the basics down from the \u003ca href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-getting-started/\"\u003eprevious post\u003c/a\u003e, weâ€™re going to dive into the Marker composable and learn how we can show markers on our map.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn more Jetpack Compose? The video course for \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003e is now available ðŸš€\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eThe Marker Composable\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen it comes to displaying markers on our composable map, the Marker composable provides this functionality for our Google Maps instance. Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e@Composable\n@GoogleMapComposable\npublic fun Marker(\n    state: MarkerState = rememberMarkerState(),\n    contentDescription: String? = \u0026#34;\u0026#34;,\n    alpha: Float = 1.0f,\n    anchor: Offset = Offset(0.5f, 1.0f),\n    draggable: Boolean = false,\n    flat: Boolean = false,\n    icon: BitmapDescriptor? = null,\n    infoWindowAnchor: Offset = Offset(0.5f, 0.0f),\n    rotation: Float = 0.0f,\n    snippet: String? = null,\n    tag: Any? = null,\n    title: String? = null,\n    visible: Boolean = true,\n    zIndex: Float = 0.0f,\n    onClick: (Marker) -\u0026gt; Boolean = { false },\n    onInfoWindowClick: (Marker) -\u0026gt; Unit = {},\n    onInfoWindowClose: (Marker) -\u0026gt; Unit = {},\n    onInfoWindowLongClick: (Marker) -\u0026gt; Unit = {},\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs we can see from this composable, there is a collection of arguments that allow us to customise our Marker. To be able to display the \u003cstrong\u003eMarker\u003c/strong\u003e at our chosen location, weâ€™re going to need to utilise the \u003cstrong\u003eMarkerState\u003c/strong\u003e argument. This allows us to provide a \u003cstrong\u003eLatLng\u003c/strong\u003e for where the \u003cstrong\u003eMarker\u003c/strong\u003e should be displayed at.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can then assign this MarkerState reference using the state argument of the Marker composable.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, weâ€™ll now be able to see a Marker displayed on our map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"597\" src=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-1024x597.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-1024x597.png 1024w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-300x175.png 300w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-768x448.png 768w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-500x292.png 500w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-150x88.png 150w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-400x233.png 400w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-800x467.png 800w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341-200x117.png 200w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071341.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs we can see, this doesnâ€™t give much information to our users. We can assign a title to our Marker using the \u003cstrong\u003etitle\u003c/strong\u003e argument, which takes string value to be displayed in a popup when the Marker is clicked.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        title = \u0026#34;Home\u0026#34;\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen clicking the Marker, we can now see a Title is displayed within the popup window.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"686\" src=\"http://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-1024x686.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-1024x686.png 1024w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-300x201.png 300w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-768x514.png 768w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-500x335.png 500w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-150x100.png 150w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-400x268.png 400w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-800x536.png 800w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455-200x134.png 200w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071455.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe can go one step further here and also provide a string value for the \u003cstrong\u003esnippet\u003c/strong\u003e argument, this is where we can provide some additional text to be displayed beneath the title. Currently to use the snippet, this must be used alongside the title, otherwise the popup window will not be displayed.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        title = \u0026#34;Home\u0026#34;,\n        snippet = \u0026#34;London\u0026#34;\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eHandling Marker Appearance\u003c/h2\u003e\n\n\n\n\u003cp\u003eAlongside displaying text information, we can also utilise the \u003cstrong\u003eicon\u003c/strong\u003e argument to customise the appearance of the marker. For example, we can use the \u003cstrong\u003eBitmapDescriptorFactory\u003c/strong\u003e and its \u003cstrong\u003edefaultMarker\u003c/strong\u003e function to instantiate a marker using a specified hue.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        title = \u0026#34;Home\u0026#34;,\n        snippet = \u0026#34;London\u0026#34;,\n        icon = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis will then alter the color being used for our marker, based on the provided hue value.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"651\" src=\"http://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-1024x651.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-1024x651.png 1024w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-300x191.png 300w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-768x489.png 768w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-500x318.png 500w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-150x95.png 150w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-400x254.png 400w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-800x509.png 800w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535-200x127.png 200w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_071535.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003cstrong\u003eicon\u003c/strong\u003e argument takes a BitmapDescriptor reference, so we can provide some other kind of decoration if we are looking to do more than modify the color. For example, letâ€™s provide a drawable to be used for our marker. Here, weâ€™ll create a Bitmap from a drawable reference, providing this to the \u003cstrong\u003efromBitmap\u003c/strong\u003e function of the \u003cstrong\u003eBitmapDescriptorFactory\u003c/strong\u003e. We can then provide this to the \u003cstrong\u003eicon\u003c/strong\u003e argument of our \u003cstrong\u003eMarker\u003c/strong\u003e composable.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nval customIcon = BitmapFactory.decodeResource(LocalContext.current.resources, R.drawable.marker)\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        title = \u0026#34;Home\u0026#34;,\n        snippet = \u0026#34;London\u0026#34;,\n        icon = BitmapDescriptorFactory.fromBitmap(customIcon)\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place we can now see our custom marker icon being used when the Marker is drawn on the map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"630\" src=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-1024x630.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-1024x630.png 1024w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-300x184.png 300w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-768x472.png 768w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-500x307.png 500w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-150x92.png 150w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-400x246.png 400w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-800x492.png 800w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133-200x123.png 200w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_091133.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn some cases, markers may be disabled from interactions or â€˜inactiveâ€™ within our map. When it comes to these scenarios we can use the \u003cstrong\u003ealpha\u003c/strong\u003e argument of the Marker composable to control the alpha of the drawn marker.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        alpha = 0.4f\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can see how this modifies the appearance of our marker when drawn on our map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"563\" src=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-1024x563.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-1024x563.png 1024w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-300x165.png 300w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-768x422.png 768w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-500x275.png 500w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-150x83.png 150w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-400x220.png 400w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-800x440.png 800w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439-200x110.png 200w, https://joebirch.co/wp-content/uploads/2024/10/Screenshot_20241004_083439.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eHandling Marker Interactions\u003c/h2\u003e\n\n\n\n\u003cp\u003eControlling the appearance of our markers is one thing, but we may also want to handle any interaction events that occur. While clicking on the marker currently displays a popup window, we may want to handle this interaction differently â€“ such as showing our own popup alert, or displaying some kind of different UI to the user. In these scenarios, we can intercept click events on a marker by using the \u003cstrong\u003eonClick\u003c/strong\u003e argument of the Marker composable. Within this handler, we can trigger our own way of dealing with the click event. One important thing to note here is the boolean value that is returned from the lambda â€“ to fully intercept the event we can return true, this will prevent the popup window from showing after this click event has taken place.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        onClick = { marker -\u0026gt;\n            showAlert = true\n            true\n        }\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this click handler, we will now be able to intercept click events and handle the marker interaction in our own way.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"428\" height=\"306\" src=\"https://joebirch.co/wp-content/uploads/2024/10/CleanShot-2024-10-04-at-09.43.22.gif\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIf we still wish to utilise the info window, we can also intercept click events on this popup using the \u003cstrong\u003eonInfoWindowClick\u003c/strong\u003e argument. This can be helpful if we want to show additional information based on the information window, or navigate the user to another part of our UI.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval marker = rememberMarkerState(position = LatLng(51.5072, 0.1276))\nGoogleMap(\n   ...\n) {\n    Marker(\n        state = marker,\n        onInfoWindowClick = { marker -\u0026gt;\n            showAlert = true\n        }\n    )\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"426\" height=\"298\" src=\"https://joebirch.co/wp-content/uploads/2024/10/CleanShot-2024-10-04-at-09.53.08.gif\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIn this blog post, weâ€™ve taken a look at the marker composable, understanding how we can use it to portray map information to our users, as well as customise its appearance and behaviour. In the following posts, weâ€™ll start to look at customising our map further through other composables that are supported through the \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003e content scope.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-10-04T09:20:53Z",
  "modifiedTime": "2024-10-06T09:29:49Z"
}
