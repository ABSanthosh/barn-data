{
  "id": "9953265f-50eb-4b80-84a2-df147e7166af",
  "title": "How Instagram enabled users to take stunning Low Light Photos",
  "link": "http://android-developers.googleblog.com/2024/12/instagram-on-android-low-light-photos.html",
  "description": "",
  "author": "Android Developers",
  "published": "2024-12-17T12:15:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android Camera",
    "Developer Tools",
    "Extensions",
    "Low-light"
  ],
  "byline": "",
  "length": 12811,
  "excerpt": "Instagram's new Night Mode on Android significantly improves low-light photo quality and user experience, increasing photo sharing on the platform.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Donovan McMurray – Developer Relations Engineer Instagram, the popular photo and video sharing social networking service, is constantly delighting users with a best-in-class camera experience. Recently, Instagram launched another improvement on Android with their Night Mode implementation. As devices and their cameras become more and more capable, users expect better quality images in a wider variety of settings. Whether it’s a night out with friends or the calmness right after you get your baby to fall asleep, the special moments users want to capture often don’t have ideal lighting conditions. Now, when Instagram users on Android take a photo in low light environments, they’ll see a moon icon that allows them to activate Night Mode for better image quality. This feature is currently available to users with any Pixel device from the 6 series and up, a Samsung Galaxy S24Ultra, or a Samsung Flip6 or Fold6, with more devices to follow. Leveraging Device-specific Camera Technologies Android enables apps to take advantage of device-specific camera features through the Camera Extensions API. The Extensions framework currently provides functionality like Night Mode for low-light image captures, Bokeh for applying portrait-style background blur, and Face Retouch for beauty filters. All of these features are implemented by the Original Equipment Manufacturers (OEMs) in order to maximize the quality of each feature on the hardware it's running on. Furthermore, exposing this OEM-specific functionality through the Extensions API allows developers to use a consistent implementation across all of these devices, getting the best of both worlds: implementations that are tuned to a wide-range of devices with a unified API surface. According to Nilesh Patel, a Software Engineer at Instagram, “for Meta’s billions of users, having to write custom code for each new device is simply not scalable. It would also add unnecessary app size when Meta users download the app. Hence our guideline is ‘write once to scale to billions’, favoring platform APIs.” More and more OEMs are supporting Extensions, too! There are already over 120 different devices that support the Camera Extensions, representing over 75 million monthly active users. There’s never been a better time to integrate Extensions into your Android app to give your users the best possible camera experience. Impact on Instagram The results of adding Night Mode to Instagram have been very positive for Instagram users. Jin Cui, a Partner Engineer on Instagram, said “Night Mode has increased the number of photos captured and shared with the Instagram camera, since the quality of the photos are now visibly better in low-light scenes.” Compare the following photos to see just how big of a difference Night Mode makes. The first photo is taken in Instagram with Night Mode off, the second photo is taken in Instagram with Night Mode on, and the third photo is taken with the native camera app with the device’s own low-light processing enabled. Ensuring Quality through Image Test Suite (ITS) The Android Camera Image Test Suite (ITS) is a framework for testing images from Android cameras. ITS tests configure the camera and capture shots to verify expected image data. These tests are functional and ensure advertised camera features work as expected. A tablet mounted on one side of the ITS box displays the test chart. The device under test is mounted on the opposite side of the ITS box. Devices must pass the ITS tests for any feature that the device claims to support for apps to use, including the tests we have for the Night Mode Camera Extension. Regular field-of-view (RFoV) ITS box Rev1b showing the device mounting brackets The Android Camera team faced the challenge of ensuring the Night Mode Camera Extension feature functioned consistently across all devices in a scalable way. This required creating a testing environment with very low light and a wide dynamic range. This configuration was necessary to simulate real-world lighting scenarios, such as a city at night with varying levels of brightness and shadow, or the atmospheric lighting of a restaurant. The first step to designing the test was to define the specific lighting conditions to simulate. Field testing with a light meter in various locations and lighting conditions was conducted to determine the target lux level. The goal was to ensure the camera could capture clear images in low-light conditions, which led to the establishment of 3 lux as the target lux level. The figure below shows various lighting conditions and their respective lux value. Evaluation of scenes of varying lighting conditions measured with a Light Meter The next step was to develop a test chart to accurately measure a wide dynamic range in a low light environment. The team developed and iterated on several test charts and arrived at the following test chart shown below. This chart arranges a grid of squares in varying shades of grey. A red outline defines the test area for cropping. This enables excluding darker external regions. The grid follows a Hilbert curve pattern to minimize abrupt light or dark transitions. The design allows for both quantitative measurements and simulation of a broad range of light conditions. Low Light test chart displayed on tablet in ITS box The test chart captures an image using the Night Mode Camera Extension in low light conditions. The image is used to evaluate the improvement in the shadows and midtones while ensuring the highlights aren’t saturated. This evaluation involves two criteria: ensure the average luma value of the six darkest boxes is at least 85, and ensure the average luma contrast between these boxes is at least 17. The figure below shows the test capture and chart results. Night Mode Camera Extension capture and test chart result By leveraging the existing ITS infrastructure, the Android Camera team was able to provide consistent, high quality Night Mode Camera Extension captures. This gives application developers the confidence to integrate and enable Night Mode captures for their users. It also allows OEMs to validate their implementations and ensure users get the best quality capture. How to Implement Night Mode with Camera Extensions Camera Extensions are available to apps built with Camera2 or CameraX. In this section, we’ll walk through each of the features Instagram implemented. The code examples will use CameraX, but you’ll find links to the Camera2 documentation at each step. Enabling Night Mode Extension Night Mode involves combining multiple exposures into a single still photo for better quality shots in low-light environments. So first, you’ll need to check for Night Mode availability, and tell the camera system to start a Camera Extension session. With CameraX, this is done with an ExtensionsManager instead of the standard CameraManager. private suspend fun setUpCamera() { // Obtain an instance of a process camera provider. The camera provider // provides access to the set of cameras associated with the device. // The camera obtained from the provider will be bound to the activity lifecycle. val cameraProvider = ProcessCameraProvider.getInstance(application).await() // Obtain an instance of the extensions manager. The extensions manager // enables a camera to use extension capabilities available on the device. val extensionsManager = ExtensionsManager.getInstanceAsync( application, cameraProvider).await() // Select the camera. val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA // Query if extension is available. Not all devices will support // extensions or might only support a subset of extensions. if (extensionsManager.isExtensionAvailable(cameraSelector, ExtensionMode.NIGHT)) { // Unbind all use cases before enabling different extension modes. try { cameraProvider.unbindAll() // Retrieve a night extension enabled camera selector val nightCameraSelector = extensionsManager.getExtensionEnabledCameraSelector( cameraSelector, ExtensionMode.NIGHT ) // Bind image capture and preview use cases with the extension enabled camera // selector. val imageCapture = ImageCapture.Builder().build() val preview = Preview.Builder().build() // Connect the preview to receive the surface the camera outputs the frames // to. This will allow displaying the camera frames in either a TextureView // or SurfaceView. The SurfaceProvider can be obtained from the PreviewView. preview.setSurfaceProvider(surfaceProvider) // Returns an instance of the camera bound to the lifecycle // Use this camera object to control various operations with the camera // Example: flash, zoom, focus metering etc. val camera = cameraProvider.bindToLifecycle( lifecycleOwner, nightCameraSelector, imageCapture, preview ) } catch (e: Exception) { Log.e(TAG, \"Use case binding failed\", e) } } else { // In the case where the extension isn't available, you should set up // CameraX normally with non-extension-enabled CameraSelector. } } To do this in Camera2, see the Create a CameraExtensionSession with the Camera2 Extensions API guide. Implementing the Progress Bar and PostView Image For an even more elevated user experience, you can provide feedback while the Night Mode capture is processing. In Android 14, we added callbacks for the progress and for post view, which is a temporary image capture before the Night Mode processing is complete. The below code shows how to use these callbacks in the takePicture() method. The actual implementation to update the UI is very app-dependent, so we’ll leave the actual UI updating code to you. // When setting up the ImageCapture.Builder, set postviewEnabled and // posviewResolutionSelector in order to get a PostView bitmap in the // onPostviewBitmapAvailable callback when takePicture() is called. val cameraInfo = cameraProvider.getCameraInfo(cameraSelector) val isPostviewSupported = ImageCapture.getImageCaptureCapabilities(cameraInfo).isPostviewSupported val postviewResolutionSelector = ResolutionSelector.Builder() .setAspectRatioStrategy(AspectRatioStrategy( AspectRatioStrategy.RATIO_16_9_FALLBACK_AUTO_STRATEGY, AspectRatioStrategy.FALLBACK_RULE_AUTO)) .setResolutionStrategy(ResolutionStrategy( previewSize, ResolutionStrategy.FALLBACK_RULE_CLOSEST_LOWER_THEN_HIGHER )) .build() imageCapture = ImageCapture.Builder() .setTargetAspectRatio(AspectRatio.RATIO_16_9) .setPostviewEnabled(isPostviewSupported) .setPostviewResolutionSelector(postviewResolutionSelector) .build() // When the Night Mode photo is being taken, define these additional callbacks // to implement PostView and a progress indicator in your app. imageCapture.takePicture( outputFileOptions, Dispatchers.Default.asExecutor(), object : ImageCapture.OnImageSavedCallback { override fun onPostviewBitmapAvailable(bitmap: Bitmap) { // Add the Bitmap to your UI as a placeholder while the final result is processed } override fun onCaptureProcessProgressed(progress: Int) { // Use the progress value to update your UI; values go from 0 to 100. } } ) To accomplish this in Camera2, see the CameraFragment.kt file in the Camera2Extensions sample app. Implementing the Moon Icon Indicator Another user-focused design touch is showing the moon icon to let the user know that a Night Mode capture will happen. It’s also a good idea to let the user tap the moon icon to disable Night Mode capture. There’s an upcoming API in Android 16 next year to let you know when the device is in a low-light environment. Here are the possible values for the Night Mode Indicator API: UNKNOWN The camera is unable to reliably detect the lighting conditions of the current scene to determine if a photo will benefit from a Night Mode Camera Extension capture. OFF The camera has detected lighting conditions that are sufficiently bright. Night Mode Camera Extension is available but may not be able to optimize the camera settings to take a higher quality photo. ON The camera has detected low-light conditions. It is recommended to use Night Mode Camera Extension to optimize the camera settings to take a high-quality photo in the dark. Next Steps Read more about Android’s camera APIs in the Camera2 guides and the CameraX guides. Once you’ve got the basics down, check out the Android Camera and Media Dev Center to take your camera app development to the next level. For more details on upcoming Android features, like the Night Mode Indicator API, get started with the Android 16 Preview program.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheCE-0uLP7rrtb5MLiPKZnZt8TOsGXzHrvG48Jfgmi_B7oVmXPtFA_0iADgxpUic7LnW4nVp2OksYTIbL2vexv0FwRU_1RgSxZpvgx0xrrEMCzRff37bM1mslPjllsvjMtt920kZlFMUtOnk4UxOAJDvENCCJhOuzvet-0aS0jJnH25hBlGydGJmvH7gc/w1200-h630-p-k-no-nu/Instagram-Low-Light-Case-Study-Metadata-Card%20%283%29.gif",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheCE-0uLP7rrtb5MLiPKZnZt8TOsGXzHrvG48Jfgmi_B7oVmXPtFA_0iADgxpUic7LnW4nVp2OksYTIbL2vexv0FwRU_1RgSxZpvgx0xrrEMCzRff37bM1mslPjllsvjMtt920kZlFMUtOnk4UxOAJDvENCCJhOuzvet-0aS0jJnH25hBlGydGJmvH7gc/s1600/Instagram-Low-Light-Case-Study-Metadata-Card%20%283%29.gif\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Donovan McMurray – Developer Relations Engineer\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheCE-0uLP7rrtb5MLiPKZnZt8TOsGXzHrvG48Jfgmi_B7oVmXPtFA_0iADgxpUic7LnW4nVp2OksYTIbL2vexv0FwRU_1RgSxZpvgx0xrrEMCzRff37bM1mslPjllsvjMtt920kZlFMUtOnk4UxOAJDvENCCJhOuzvet-0aS0jJnH25hBlGydGJmvH7gc/s1600/Instagram-Low-Light-Case-Study-Metadata-Card%20%283%29.gif\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheCE-0uLP7rrtb5MLiPKZnZt8TOsGXzHrvG48Jfgmi_B7oVmXPtFA_0iADgxpUic7LnW4nVp2OksYTIbL2vexv0FwRU_1RgSxZpvgx0xrrEMCzRff37bM1mslPjllsvjMtt920kZlFMUtOnk4UxOAJDvENCCJhOuzvet-0aS0jJnH25hBlGydGJmvH7gc/s1600/Instagram-Low-Light-Case-Study-Metadata-Card%20%283%29.gif\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eInstagram, the popular photo and video sharing social networking service, is constantly delighting users with a best-in-class camera experience. Recently, Instagram launched another improvement on Android with their Night Mode implementation.\u003c/p\u003e \n\n\u003cp\u003eAs devices and their cameras become more and more capable, users expect better quality images in a wider variety of settings. Whether it’s a night out with friends or the calmness right after you get your baby to fall asleep, the special moments users want to capture often don’t have ideal lighting conditions.\u003c/p\u003e\n\n\u003cp\u003eNow, when Instagram users on Android take a photo in low light environments, they’ll see a moon icon that allows them to activate Night Mode for better image quality. This feature is currently available to users with any Pixel device from the 6 series and up, a Samsung Galaxy S24Ultra, or a Samsung Flip6 or Fold6, with more devices to follow.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Moving image showing the user experience of taking a photo of a shelf with plants, oranges, and decorative items in low light\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiPIgn78UZMSoaSSlRLQdZNRQNxUggrB2l66akuFGajtcxJidF-4Au2FEUiJcK8JEAjm4C0fKRXLdJS0YS4wysY6qOfjkDW8x4Fpfld2d1PMHeEPygMvDqQzjuvZ1E9N4ur8HpWck2PMBK05P0r7X7Q5mdxjh7EOfnK9TFEsL4ELeEzx62zkNM68qLpfbg/s1600/Instagram-Low-Light-Demo.gif\" width=\"30%\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\n\u003ch3\u003eLeveraging Device-specific Camera Technologies\u003c/h3\u003e\n\n\u003cp\u003eAndroid enables apps to take advantage of device-specific camera features through the \u003ca href=\"https://developer.android.com/media/camera/camera-extensions\" target=\"_blank\"\u003eCamera Extensions API\u003c/a\u003e. The Extensions framework currently provides functionality like Night Mode for low-light image captures, Bokeh for applying portrait-style background blur, and Face Retouch for beauty filters. All of these features are implemented by the Original Equipment Manufacturers (OEMs) in order to maximize the quality of each feature on the hardware it\u0026#39;s running on.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A quote by Nilesh Patel, Software Engineer, reads: \u0026#39;For Meta\u0026#39;s billions of users, having to write custom code for each new device is simply not scalable. It would also add unnecessary app size when Meta users download the app. Hence our guideline is ‘write once to scale to billions’, favoring platform APIs.\u0026#39; A headshot of Nilesh Patel is displayed to the right of the quote card.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiT8KtpJKEQ0xQMWNiUVPpuKFlQAMwC8Rppf-gX8k-uyZp9zMrO6fqQOnRwNjAsLJHOwPMOLVSOrDwqaY-B_aWvLBzXqEd9JR0mHcame8uSNCx8Ciox_FMYtiKK95cKGG7g4fz_kavWmeSCC4k3W3a13VIQk1CIr6nnW_Md_26Pt6gF3fnReRmXcKnwK6M/s1600/Instagram-Low-Light-Case-Study-Quote-Card-1.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eFurthermore, exposing this OEM-specific functionality through the Extensions API allows developers to use a consistent implementation across all of these devices, getting the best of both worlds: implementations that are tuned to a wide-range of devices with a unified API surface. According to Nilesh Patel, a Software Engineer at Instagram, “for Meta’s billions of users, having to write custom code for each new device is simply not scalable. It would also  add unnecessary app size when Meta users download the app. Hence our guideline is ‘write once to scale to billions’, favoring platform APIs.” \u003c/p\u003e\n\n\u003cp\u003eMore and more OEMs are supporting Extensions, too! There are already over 120 different devices that support the Camera Extensions, representing over 75 million monthly active users. There’s never been a better time to integrate Extensions into your Android app to give your users the best possible camera experience.\u003c/p\u003e\n\n\u003ch3\u003eImpact on Instagram\u003c/h3\u003e\n\n\u003cp\u003eThe results of adding Night Mode to Instagram have been very positive for Instagram users. Jin Cui, a Partner Engineer on Instagram, said “Night Mode has increased the number of photos captured and shared with the Instagram camera, since the quality of the photos are now visibly better in low-light scenes.”\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A quote from Jin Cui, Partner Engineer, reads: \u0026#39;Night Mode has increased the number of photos captured and shared with the Instagram camera, since the quality of the photos are now visibly better in low-light scenes.\u0026#39;  A photo of Jin Cui wearing glasses and a maroon hoodie is shown to the right of the quote card.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgC2WJUHy2T1phGfcCCvNMoO6Yy2izhbiXYkAyTwMY5crZGsjzqX125cbpSmrV5kQIZn3EbPi5RX2KC7Fb8hQ8ShyphenhyphenwIcCNeMbxw3Ctv5SsHwhWDzncoNvUeIlbndXAik-jPaNfr3B1doS4fO41Y6dShA8IOShT58qUeHtJxCojVSBAPT5ytUQYHo6_tItg/s1600/4.png\" width=\"100%\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eCompare the following photos to see just how big of a difference Night Mode makes. The first photo is taken in Instagram with Night Mode off, the second photo is taken in Instagram with Night Mode on, and the third photo is taken with the native camera app with the device’s own low-light processing enabled.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A 3x3 grid of photos compares low-light performance across different smartphone cameras and Instagram\u0026#39;s night mode. The photos show a shelf with plants, oranges, and decorative items, taken with a Pixel 9 Pro, Samsung Galaxy S24 Ultra, and Pixel 6 Pro, both with and without night mode enabled.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgfOOL7Tfk9qRc81bCdC5qMgfnJhfzsgeBCD4Bqv4rvVuhc5A3tiYkVh5LB5CjLeWXBpqYMr13sdYTwWGgY_dPfRDfAW4sQbLzDeb3umNi7eNxh4LNqhn2D0JaS59ykjg27Xwb2sJNZ4SmAeJ5c-EhLEXiLg1DGKKfb73jNXrpNX_fKzCArTbqpNeGLTJQ/s1600/Instagram%20Night%20Mode%20Comparison.png\" width=\"100%\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch3\u003eEnsuring Quality through Image Test Suite (ITS)\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://source.android.com/docs/compatibility/cts/camera-its\" target=\"_blank\"\u003eThe Android Camera Image Test Suite\u003c/a\u003e (ITS) is a framework for testing images from Android cameras. ITS tests configure the camera and capture shots to verify expected image data. These tests are functional and ensure advertised camera features work as expected. A tablet mounted on one side of the ITS box displays the test chart. The device under test is mounted on the opposite side of the ITS box.\u003c/p\u003e\n\n\u003cp\u003eDevices must pass the ITS tests for any feature that the device claims to support for apps to use, including the tests we have for the Night Mode Camera Extension.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Regular field-of-view (RFoV) ITS box Rev1b showing the device mounting brackets\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiYrN8a7DawBfJ_u_x5QEoNNX3v0PSkuuqO3ridSEP0cIezmqPuy3GujLdomTBwUvK5l1mN6GDFcdSpCrv57B5VyDJCWge3RwIy70jMWgDYjpmg6h9b194hnHodGAlyDaotHj6_rNETJ1IkkQUO4fbR0nL40ViEea0riwwDKukkTZ3Gc0XoAl7WG7t2BKw/s1600/image13.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eRegular field-of-view (RFoV) ITS box Rev1b showing the device mounting brackets\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eThe Android Camera team faced the challenge of ensuring the Night Mode Camera Extension feature functioned consistently across all devices in a scalable way. This required creating a testing environment with very low light and a wide dynamic range. This configuration was necessary to simulate real-world lighting scenarios, such as a city at night with varying levels of brightness and shadow, or the atmospheric lighting of a restaurant.\u003c/p\u003e\n\n\u003cp\u003eThe first step to designing the test was to define the specific lighting conditions to simulate. Field testing with a light meter in various locations and lighting conditions was conducted to determine the target lux level. The goal was to ensure the camera could capture clear images in low-light conditions, which led to the establishment of 3 lux as the target lux level. The figure below shows various lighting conditions and their respective lux value.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Evaluation of scenes of varying lighting conditions measured with a Light Meter\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidtH_-2D4zzXah4wnDrZAW406wnS8Ac8hlQithcGYpsIAOGlWs604NDu-0nluh7Zn1bxJPnZaRirgh37psXsKsz7IwfYN9KZ9LT0uzC5jPRbf06kaUTuCtJJ5e_b4qizgIcNZPy71vYYVx9KZb5dpanIZXCY2Ru8sqYD-FZIKLP3j_mKVAz6mFwcKo2E0/s1600/image9.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eEvaluation of scenes of varying lighting conditions measured with a Light Meter\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eThe next step was to develop a test chart to accurately measure a wide dynamic range in a low light environment. The team developed and iterated on several test charts and arrived at the following test chart shown below. This chart arranges a grid of squares in varying shades of grey. A red outline defines the test area for cropping. This enables excluding darker external regions. The grid follows a Hilbert curve pattern to minimize abrupt light or dark transitions. The design allows for both quantitative measurements and simulation of a broad range of light conditions.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Low Light test chart displayed on tablet in ITS box\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEib1phXLthNeF7L-1MUZ_EHCma6UDvtRXAhw37ppuQhFG4TurjiEGT2N96Xo9yhDDZhTx9a6OYuXD-sTTcY17WSJx-IRrAI0D-EtFcepkbo_bQ7pTEI8R0ELh-eb4vpaRHl9yxLMtJaVUB3dvgtEKK_eAo6Vw8-KvHzIJjjgDfBUYnyMMw68UnqfwkdS7c/s1600/image4.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eLow Light test chart displayed on tablet in ITS box\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eThe test chart captures an image using the Night Mode Camera Extension in low light conditions. The image is used to evaluate the improvement in the shadows and midtones while ensuring the highlights aren’t saturated. This evaluation involves two criteria: ensure the average luma value of the six darkest boxes is at least 85, and ensure the average luma contrast between these boxes is at least 17. The figure below shows the test capture and chart results.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Night Mode Camera Extension capture and test chart result\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg4fLXpVROXRKXc77yYlluhzWq4FpHvMH2xMgZ51YQfjK1k000Mp4i4qpH-bWc-Fon8ob-BUqIf3bYafP5ej29MdVrrXBlB2iANpl5m__Uw6b1ZypOmpIDyovanqImUlIkHWqMl7Ump659e9gzrnC-AQ8m0bATiKdDItYFGAh8ptlTDqpWPcXBn2IQikoI/s1600/image6.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eNight Mode Camera Extension capture and test chart result\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eBy leveraging the existing ITS infrastructure, the Android Camera team was able to provide consistent, high quality Night Mode Camera Extension captures. This gives application developers the confidence to integrate and enable Night Mode captures for their users. It also allows OEMs to validate their implementations and ensure users get the best quality capture.\u003c/p\u003e\n\n\u003ch3\u003eHow to Implement Night Mode with Camera Extensions\u003c/h3\u003e\n\n\u003cp\u003eCamera Extensions are available to apps built with Camera2 or CameraX. In this section, we’ll walk through each of the features Instagram implemented. The code examples will use CameraX, but you’ll find links to the Camera2 documentation at each step.\u003c/p\u003e\n\n\u003ch4\u003e\u003cspan\u003eEnabling Night Mode Extension\u003c/span\u003e\u003c/h4\u003e\n\n\u003cp\u003eNight Mode involves combining multiple exposures into a single still photo for better quality shots in low-light environments. So first, you’ll need to check for Night Mode availability, and tell the camera system to start a Camera Extension session. With CameraX, this is done with an \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/androidx/camera/extensions/ExtensionsManager\" target=\"_blank\"\u003eExtensionsManager\u003c/a\u003e\u003c/span\u003e instead of the standard \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraManager\" target=\"_blank\"\u003eCameraManager\u003c/a\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e suspend \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetUpCamera\u003c/span\u003e() {\n  \u003cspan\u003e// Obtain an instance of a process camera provider. The camera provider\u003c/span\u003e\n  \u003cspan\u003e// provides access to the set of cameras associated with the device.\u003c/span\u003e\n  \u003cspan\u003e// The camera obtained from the provider will be bound to the activity lifecycle.\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e cameraProvider = ProcessCameraProvider.getInstance(application).await()\n\n  \u003cspan\u003e// Obtain an instance of the extensions manager. The extensions manager \u003c/span\u003e\n  \u003cspan\u003e// enables a camera to use extension capabilities available on the device.\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e extensionsManager = ExtensionsManager.getInstanceAsync(\n    application, cameraProvider).await()\n\n  \u003cspan\u003e// Select the camera.\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA\n\n  \u003cspan\u003e// Query if extension is available. Not all devices will support \u003c/span\u003e\n  \u003cspan\u003e// extensions or might only support a subset of extensions.\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e (extensionsManager.isExtensionAvailable(cameraSelector, ExtensionMode.NIGHT)) {\n    \u003cspan\u003e// Unbind all use cases before enabling different extension modes.\u003c/span\u003e\n    \u003cspan\u003etry\u003c/span\u003e {\n      cameraProvider.unbindAll()\n\n      \u003cspan\u003e// Retrieve a night extension enabled camera selector\u003c/span\u003e\n      \u003cspan\u003eval\u003c/span\u003e nightCameraSelector = extensionsManager.getExtensionEnabledCameraSelector(\n        cameraSelector,\n        ExtensionMode.NIGHT\n      )\n\n      \u003cspan\u003e// Bind image capture and preview use cases with the extension enabled camera\u003c/span\u003e\n      \u003cspan\u003e// selector.\u003c/span\u003e\n      \u003cspan\u003eval\u003c/span\u003e imageCapture = ImageCapture.Builder().build()\n      \u003cspan\u003eval\u003c/span\u003e preview = Preview.Builder().build()\n        \n      \u003cspan\u003e// Connect the preview to receive the surface the camera outputs the frames\u003c/span\u003e\n      \u003cspan\u003e// to. This will allow displaying the camera frames in either a TextureView\u003c/span\u003e\n      \u003cspan\u003e// or SurfaceView. The SurfaceProvider can be obtained from the PreviewView.\u003c/span\u003e\n      preview.setSurfaceProvider(surfaceProvider)\n\n      \u003cspan\u003e// Returns an instance of the camera bound to the lifecycle\u003c/span\u003e\n      \u003cspan\u003e// Use this camera object to control various operations with the camera\u003c/span\u003e\n      \u003cspan\u003e// Example: flash, zoom, focus metering etc.\u003c/span\u003e\n      \u003cspan\u003eval\u003c/span\u003e camera = cameraProvider.bindToLifecycle(\n        lifecycleOwner,\n        nightCameraSelector,\n        imageCapture,\n        preview\n      )\n    } \u003cspan\u003ecatch\u003c/span\u003e (e: Exception) {\n      Log.e(TAG, \u003cspan\u003e\u0026#34;Use case binding failed\u0026#34;\u003c/span\u003e, e)\n    }\n  } \u003cspan\u003eelse\u003c/span\u003e {\n    \u003cspan\u003e// In the case where the extension isn\u0026#39;t available, you should set up\u003c/span\u003e\n    \u003cspan\u003e// CameraX normally with non-extension-enabled CameraSelector.\u003c/span\u003e\n  }\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo do this in Camera2, see the \u003ca href=\"https://developer.android.com/media/camera/camera2/extensions-api#create_a_cameraextensionsession_with_the_camera2_extensions_api\" target=\"_blank\"\u003eCreate a \u003cspan\u003eCameraExtensionSession\u003c/span\u003e with the Camera2 Extensions API\u003c/a\u003e guide.\u003c/p\u003e\n\n\u003ch4\u003e\u003cspan\u003eImplementing the Progress Bar and PostView Image\u003c/span\u003e\u003c/h4\u003e\n\n\u003cp\u003eFor an even more elevated user experience, you can provide feedback while the Night Mode capture is processing. In Android 14, we added callbacks for the progress and for post view, which is a temporary image capture before the Night Mode processing is complete. The below code shows how to use these callbacks in the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/androidx/camera/core/ImageCapture#%28androidx.camera.core.ImageCapture%29.takePicture%28androidx.camera.core.ImageCapture.OutputFileOptions,kotlin.Function0,kotlin.Function1,kotlin.Function1%29\" target=\"_blank\"\u003etakePicture()\u003c/a\u003e\u003c/span\u003e method. The actual implementation to update the UI is very app-dependent, so we’ll leave the actual UI updating code to you.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// When setting up the ImageCapture.Builder, set postviewEnabled and \u003c/span\u003e\n\u003cspan\u003e// posviewResolutionSelector in order to get a PostView bitmap in the\u003c/span\u003e\n\u003cspan\u003e// onPostviewBitmapAvailable callback when takePicture() is called.\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e cameraInfo = cameraProvider.getCameraInfo(cameraSelector)\n\u003cspan\u003eval\u003c/span\u003e isPostviewSupported =\n  ImageCapture.getImageCaptureCapabilities(cameraInfo).isPostviewSupported\n\n\u003cspan\u003eval\u003c/span\u003e postviewResolutionSelector = ResolutionSelector.Builder()\n  .setAspectRatioStrategy(AspectRatioStrategy(\n    AspectRatioStrategy.RATIO_16_9_FALLBACK_AUTO_STRATEGY, \n    AspectRatioStrategy.FALLBACK_RULE_AUTO))\n  .setResolutionStrategy(ResolutionStrategy(\n    previewSize, \n    ResolutionStrategy.FALLBACK_RULE_CLOSEST_LOWER_THEN_HIGHER\n  ))\n  .build()\n\nimageCapture = ImageCapture.Builder()\n  .setTargetAspectRatio(AspectRatio.RATIO_16_9)\n  .setPostviewEnabled(isPostviewSupported)\n  .setPostviewResolutionSelector(postviewResolutionSelector)\n  .build()\n\n\u003cspan\u003e// When the Night Mode photo is being taken, define these additional callbacks\u003c/span\u003e\n\u003cspan\u003e// to implement PostView and a progress indicator in your app.\u003c/span\u003e\nimageCapture.takePicture(\n  outputFileOptions,\n  Dispatchers.Default.asExecutor(),\n  object : ImageCapture.OnImageSavedCallback {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonPostviewBitmapAvailable\u003c/span\u003e(bitmap: Bitmap) {\n      \u003cspan\u003e// Add the Bitmap to your UI as a placeholder while the final result is processed\u003c/span\u003e\n    }\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCaptureProcessProgressed\u003c/span\u003e(progress: Int) {\n      \u003cspan\u003e// Use the progress value to update your UI; values go from 0 to 100.\u003c/span\u003e\n    }\n  }\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo accomplish this in Camera2, see the \u003ca href=\"https://github.com/android/camera-samples/blob/main/Camera2Extensions/app/src/main/java/com/example/android/camera2/extensions/fragments/CameraFragment.kt\" target=\"_blank\"\u003eCameraFragment.kt\u003c/a\u003e file in the Camera2Extensions sample app.\u003c/p\u003e\n\n\u003ch4\u003e\u003cspan\u003eImplementing the Moon Icon Indicator\u003c/span\u003e\u003c/h4\u003e\n  \n\u003cp\u003eAnother user-focused design touch is showing the moon icon to let the user know that a Night Mode capture will happen. It’s also a good idea to let the user tap the moon icon to disable Night Mode capture. There’s an upcoming API in Android 16 next year to let you know when the device is in a low-light environment.\u003c/p\u003e\n\n\u003cp\u003eHere are the possible values for the Night Mode Indicator API:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cp\u003e\u003cb\u003eUNKNOWN\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\u003cli\u003eThe camera is unable to reliably detect the lighting conditions of the current scene to determine if a photo will benefit from a Night Mode Camera Extension capture.\u003c/li\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003cbr/\u003e\n\u003cul\u003e\u003cul\u003e\u003cp\u003e\u003cb\u003eOFF\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\u003cli\u003eThe camera has detected lighting conditions that are sufficiently bright. Night Mode Camera Extension is available but may not be able to optimize the camera settings to take a higher quality photo.\u003c/li\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003cbr/\u003e\n\u003cul\u003e\u003cul\u003e\u003cp\u003e\u003cb\u003eON\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\u003cli\u003eThe camera has detected low-light conditions. It is recommended to use Night Mode Camera Extension to optimize the camera settings to take a high-quality photo in the dark.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\n\n\u003ch3\u003eNext Steps\u003c/h3\u003e\n\n\u003cp\u003eRead more about Android’s camera APIs in the \u003ca href=\"https://developer.android.com/media/camera/camera2\" target=\"_blank\"\u003eCamera2 guides\u003c/a\u003e and the \u003ca href=\"https://developer.android.com/media/camera/camerax\" target=\"_blank\"\u003eCameraX guides\u003c/a\u003e. Once you’ve got the basics down, check out the \u003ca href=\"https://developer.android.com/media\" target=\"_blank\"\u003eAndroid Camera and Media Dev Center\u003c/a\u003e to take your camera app development to the next level. For more details on upcoming Android features, like the Night Mode Indicator API, get started with the \u003ca href=\"https://developer.android.com/about/versions/16/overview\" target=\"_blank\"\u003eAndroid 16 Preview\u003c/a\u003e program.\u003c/p\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
