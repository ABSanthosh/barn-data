{
  "id": "dd2c4023-0d5f-4ae3-a14e-0961b382a1a0",
  "title": "The pursuit of fast feedback loops",
  "link": "https://saket.me/fast-feedback-loops/",
  "description": "Sebastian Sellmair from JetBrains recently showed off a prototype of hot-reloading Compose UI code for deploying changes without rebuilding the project. It looks exciting and I want it to succeed. At the same time, I’ve learned to be cautiously optimistic about hot-reload solutions. The dream of hot-reloadable android code is old — and frankly, cold. […] The post The pursuit of fast feedback loops appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Wed, 27 Nov 2024 17:46:56 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android"
  ],
  "byline": "Saket Narayan",
  "length": 3879,
  "excerpt": "Hot-reloadable code? Where we’re going, we don't need hot-reloadable code.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "Sebastian Sellmair from JetBrains recently showed off a prototype of hot-reloading Compose UI code for deploying changes without rebuilding the project. It looks exciting and I want it to succeed. At the same time, I’ve learned to be cautiously optimistic about hot-reload solutions. The dream of hot-reloadable android code is old — and frankly, cold. Google has tried this multiple times: their first attempt (Instant Run) was bad and eroded developer trust. Their second attempt (Live Edit + Apply Changes) is apparently doing better, but isn’t very reliable. The best attempt was arguably made by JRebel, who later shut down their product because it wasn’t proving to be financially viable. Over time, I’ve realized that hot-reloadable code isn’t the ultimate goal — what truly matters are fast feedback loops for validating our changes. Hot reload is just one way to achieve this, but there are plenty of other effective approaches to explore in the meantime. My pursuit of faster feedback loops is inspired by Bret Victor’s Inventing on Principles talk. It’s quite possibly one of the greatest talks ever and should by seen by every mobile engineer. Bret demonstrates how seeing our changes instantly reflected in the output doesn’t just save time – it fundamentally changes how we create. There’s something magical about having a direct connection to what we’re building. I’ve experienced this firsthand. At my previous company, some of my favorite moments were spent with designers, fine-tuning animation easings and durations until they felt just right. This rapid iteration is only possible when you can rebuild your demo quickly. The reality is that in larger projects, builds are expensive and can take several minutes to complete, completely killing our creative flow. Find your fast feedback loops At Cash App, I’m currently working on a new feature that I haven’t run on a real device in many weeks, and I don’t need to until all the puzzle pieces are ready to fall into their place. Building the full project takes about 2 minutes with incremental changes, which is probably not bad given its size, but waiting for a couple minutes after every change is incredibly unproductive, especially when those 2 minutes turn into 10 if I get distracted by Drake memes on Bluesky. Instead, I’m relying on fast feedback loops. For iterating on UI, I use paparazzi screenshot tests as my layout preview and unit tests for my presentation/backend code. These take about 7-10 seconds on average to run for Cash App, which is far more manageable. Once I’m satisfied with the code, the generated screenshots can be included in a git pull request to prevent future regressions. Here’s a demo of my workflow: https://github.com/saket/squiggly-slider/commit/91c3c1ff For complex demos, we use playground Activities in dedicated demo gradle modules that build much faster than the entire project. We have about 35 playground modules in Cash App for various parts of the app. Some of them are built nightly on our CI and made available for designers. These playground can include on-screen knobs for tweaking animations at runtime, something very similar to this: My favorite way to fine-tune transitions is to build a set of sliders into a prototype to tweak timing parameters on device, as you're using it. pic.twitter.com/JHBBsu0YqF— Gavin Nelson (@Gavmn) November 20, 2024 For end-to-end testing, we even use a mock version of our retrofit service so that the app can be run with simulated network responses without needing to talk to a real server. The bigger picture The quest for faster feedback isn’t just about UI development – it extends to how your team ships code too. I wrote about this in more detail in my post about how great teams merge fast. The faster you can iterate, test, and ship, the better your product becomes.",
  "image": "https://saket.me/wp-content/uploads/2024/11/fast_feedback_loops_cover.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\n\u003cfigure\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eSebastian Sellmair from JetBrains recently \u003ca href=\"https://github.com/sellmair/compose-hot-reload/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eshowed off a prototype\u003c/a\u003e of hot-reloading Compose UI code for deploying changes without rebuilding the project. It looks exciting and I want it to succeed. At the same time, I’ve learned to be cautiously optimistic about hot-reload solutions. \u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eThe dream of hot-reloadable android code is old \u003cspan\u003e—\u003c/span\u003e and frankly, cold. Google has tried this multiple times: their first attempt (Instant Run) was bad and eroded developer trust. Their second attempt (Live Edit + Apply Changes) is apparently doing better, but isn’t very reliable. The best attempt was arguably made by JRebel, who later \u003ca href=\"https://www.jrebel.com/blog/farewell-jrebel-android\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eshut down\u003c/a\u003e their product because it wasn’t proving to be financially viable. \u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eOver time, I’ve realized that hot-reloadable code isn’t the ultimate goal — what truly matters are \u003cem\u003efast feedback loops\u003c/em\u003e for validating our changes. Hot reload is just one way to achieve this, but there are plenty of other effective approaches to explore in the meantime.\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"Bret Victor - Inventing on Principle\" width=\"880\" height=\"495\" src=\"https://www.youtube.com/embed/PUv66718DII?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eMy pursuit of faster feedback loops is inspired by Bret Victor’s \u003ca href=\"https://www.youtube.com/watch?v=PUv66718DII\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eInventing on Principles\u003c/a\u003e talk. It’s quite possibly one of the greatest talks ever and should \u003c/span\u003eby seen \u003cspan\u003eby every mobile engineer. Bret demonstrates how seeing our changes instantly reflected in the output doesn’t just save time – it fundamentally changes how we create. There’s something magical about having a direct connection to what we’re building.\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eI’ve experienced this firsthand. At my previous company, some of my favorite moments were spent with designers, fine-tuning animation easings and durations until they felt just right. This rapid iteration is only possible when you can rebuild your demo quickly. The reality is that in larger projects, builds are expensive and can take several minutes to complete, completely killing our creative flow.\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003e\u003cb\u003eFind your fast feedback loops\u003c/b\u003e\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eAt Cash App, I’m currently working on a new feature that I haven’t run on a real device in \u003cem\u003emany\u003c/em\u003e weeks, and I don’t need to until all the puzzle pieces are ready to fall into their place. Building the full project takes about 2 minutes with incremental changes, which is probably not bad given its size, but waiting for a couple minutes after every change is incredibly unproductive, especially when those 2 minutes turn into 10 if I get distracted by \u003ca href=\"https://bsky.app/search?q=drake\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eDrake memes on Bluesky\u003c/a\u003e.\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eInstead, I’m relying on fast feedback loops. For iterating on UI, I use \u003ca href=\"https://github.com/cashapp/paparazzi/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epaparazzi\u003c/a\u003e screenshot tests as my layout preview and unit tests for my presentation/backend code. These take about 7-10 seconds on average to run for Cash App, which is far more manageable. \u003c/span\u003eOnce I’m satisfied with the code, the generated screenshots can be included in a git pull request to prevent future regressions. Here’s a demo of my workflow:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" src=\"https://saket.me/wp-content/uploads/2024/11/paparazzi-workflow-demo.mp4\" playsinline=\"\"\u003e\u003c/video\u003e\u003cfigcaption\u003e\u003ca href=\"https://github.com/saket/squiggly-slider/commit/91c3c1ff\"\u003ehttps://github.com/saket/squiggly-slider/commit/91c3c1ff\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor complex demos, we use playground Activities in dedicated demo gradle modules that build much faster than the entire project. We have about 35 playground modules in Cash App for various parts of the app. Some of them are built nightly on our CI and made available for designers. These playground can include on-screen knobs for tweaking animations at runtime, something very similar to this:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eMy favorite way to fine-tune transitions is to build a set of sliders into a prototype to tweak timing parameters on device, as you\u0026#39;re using it. \u003ca href=\"https://t.co/JHBBsu0YqF\"\u003epic.twitter.com/JHBBsu0YqF\u003c/a\u003e\u003c/p\u003e— Gavin Nelson (@Gavmn) \u003ca href=\"https://twitter.com/Gavmn/status/1859305672426610843?ref_src=twsrc%5Etfw\"\u003eNovember 20, 2024\u003c/a\u003e\u003c/blockquote\u003e \n\n\n\n\u003cp\u003eFor end-to-end testing, we even use a mock version of our \u003ccode\u003eretrofit\u003c/code\u003e service so that the app can be run with simulated network responses without needing to talk to a real server.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003e\u003cb\u003eThe bigger picture\u003c/b\u003e\u003c/span\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eThe quest for faster feedback isn’t just about UI development – it extends to how your team ships code too. I wrote about this in more detail in my post about \u003ca href=\"https://saket.me/great-teams-merge-fast\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehow great teams merge fast\u003c/a\u003e. The faster you can iterate, test, and ship, the better your product becomes.\u003c/span\u003e\u003c/p\u003e\n\n\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-11-27T17:46:56Z",
  "modifiedTime": "2024-11-27T19:23:13Z"
}
