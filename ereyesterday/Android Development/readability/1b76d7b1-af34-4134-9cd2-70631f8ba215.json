{
  "id": "1b76d7b1-af34-4134-9cd2-70631f8ba215",
  "title": "Enable desugaring to use modern Java features on lower API levels",
  "link": "https://proandroiddev.com/support-older-android-devices-by-lowering-the-api-level-without-compromising-java-lang-features-6b96760f8073?source=rss----c72404660798---4",
  "description": "",
  "author": "Mubarak Native",
  "published": "Fri, 11 Apr 2025 15:29:51 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "android-development",
    "desugaring",
    "java",
    "java-8-feature"
  ],
  "byline": "Mubarak Native",
  "length": 3624,
  "excerpt": "Supporting older Android devices can be crucial for several reasons, especially when aiming for a broader user base and ensuring the longevity of an app. Here’s why it’s often important: As you…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Enable desugaring to use modern Java features on lower API levelsIn this blog, we’re going to explore how to support older Android devices by lowering the minSdk version in our gradle file, without compromising on modern Java API features through desugaring. We’ll also dive into its benefits and more. Let’s jump right in!Why do we need to support older android devices?Supporting older Android devices can be crucial for several reasons, especially when aiming for a broader user base and ensuring the longevity of an app. Here’s why it’s often important:Wider Reach: Older Android versions like 9 (Pie) still run on 8.4% of devices, and Android 11 holds 19% share as of 2024. By lowering the minimum API level, developers can cater to a larger audience and ensure their apps work across more devices​.Emerging Markets: In regions with less access to the latest devices, users often depend on older Android versions. Supporting these versions ensures inclusivity and better global market penetration.How to support these older android versions?As you already know, minSdk is responsible for setting up at least the api android version that our can app support. There is a well known problem when lowering our SDK version, which is the Java language api feature. Ex: If you want to use LocalDate (from java.time.LocalDate), we need to set minSdk to api level 26 (Android 8.0 Oreo). This is just one example from java, but there are a lot of java language features that still require higher minSdk in our app. In the next section we will discuss how to overcome this problem.in the next section we will discuss how to overcome this problem.To overcome this is problem Starting from Android Gradle plugin 4.0.0 and higher provides built-in support for using Java 8 language features and third-party libraries that use them.The default toolchain implements the new language features by performing bytecode transformations, called desugar, as part of the D8/R8 compilation of class files into DEX codeDesugaring ProcessTo understand this process, we first need to understand both the D8 and R8 tools.D8 Dexter: D8 is a tool that converts our java byte code .class into .dex for android runtime.R8 Shrinker: R8 is a code shrinking and minification tool that converts java byte code .class to optimized dex code .dexHow to integrate this into our android studio project?We previously learned about desurgaring to use the java 8+ language feature. Now, let’s see how to integrate this into our project.Update your agp to 4.0.0+ (for new projects it definetely higher than this)For module that uses this Java 8 lang features either in its source code or plugin dependency, update the module’s build.gradle for groovy or build.gradle.kts for kotlin DSL file as shown below:To support these language APIs, the plugin compiles a separate DEX file that contains an implementation of the missing APIs and includes it in your app. The desugaring process rewrites your app’s code to instead use this library at runtime.Note: If you also want to access Java 11 language features, use the coreLibraryDesugaring lib version 2.0.3 or higher, and your Android Gradle plugin needs to be 7.4.0 or higher. For all the versions visit CHANGELOG.mdFor a complete list of supported APIs, visit Java 8+ APIs available through desugaring and Java 11+ APIs available through desugaring.ConclusionIn this short blog, we learned how to use api desugaring for our project to support older android devices to reach a broader audience, and also learned how it works and more. I hope you find this blog helpful and I will see you in the next upcoming article.",
  "image": "https://miro.medium.com/v2/resize:fit:1100/1*AwyVdnp1Vk8ZWgSZSybW1Q.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 id=\"5db2\" data-testid=\"storyTitle\"\u003eEnable desugaring to use modern Java features on lower API levels\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://mubaraknative.medium.com/?source=post_page---byline--6b96760f8073---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Mubarak Native\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*UDMb5Rfs_Vvpb92Kmd76vw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--6b96760f8073---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cblockquote\u003e\u003cp id=\"6746\"\u003eIn this blog, we’re going to explore how to support older Android devices by lowering the \u003ccode\u003eminSdk\u003c/code\u003e version in our \u003ccode\u003egradle\u003c/code\u003e file, without compromising on modern Java API features through \u003cstrong\u003edesugaring\u003c/strong\u003e. We’ll also dive into its benefits and more. Let’s jump right in!\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"db4d\"\u003eWhy do we need to support older android devices?\u003c/h2\u003e\u003cp id=\"c3bb\"\u003eSupporting older Android devices can be crucial for several reasons, especially when aiming for a broader user base and ensuring the longevity of an app. Here’s why it’s often important:\u003c/p\u003e\u003cul\u003e\u003cli id=\"5cdd\"\u003e\u003cstrong\u003eWider Reach\u003c/strong\u003e: Older Android versions like 9 (Pie) still run on 8.4% of devices, and Android 11 holds 19% share as of 2024. By lowering the minimum API level, developers can cater to a larger audience and ensure their apps work across more devices​.\u003c/li\u003e\u003cli id=\"ca08\"\u003e\u003cstrong\u003eEmerging Markets\u003c/strong\u003e: In regions with less access to the latest devices, users often depend on older Android versions. Supporting these versions ensures inclusivity and better global market penetration.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8e75\"\u003eHow to support these older android versions?\u003c/h2\u003e\u003cp id=\"0a9a\"\u003eAs you already know, \u003cstrong\u003eminSdk is responsible for setting up at least the api android version that our can app support\u003c/strong\u003e. There is a well known problem when lowering our SDK version, which is the Java language api feature. Ex: If you want to use LocalDate (from java.time.LocalDate), we need to set minSdk to api level 26 (Android 8.0 Oreo). This is just one example from java, but there are a lot of java language features that still require higher minSdk in our app. In the next section we will discuss how to overcome this problem.in the next section we will discuss how to overcome this problem.\u003c/p\u003e\u003cp id=\"3293\"\u003e\u003cstrong\u003eTo overcome this is problem Starting from Android Gradle plugin 4.0.0 and higher provides built-in support for using Java 8 language features and third-party libraries that use them.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"56fc\"\u003e\u003cstrong\u003eThe default toolchain implements the new language features by performing bytecode transformations, called \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003edesugar\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e, as part of the D8/R8 compilation of class files into DEX code\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDesugaring Process\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"6466\"\u003eTo understand this process, we first need to understand both the D8 and R8 tools.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"c875\"\u003e\u003cstrong\u003eD8 Dexter\u003c/strong\u003e: D8 is a tool that converts our java byte code \u003cem\u003e.class\u003c/em\u003e into \u003cem\u003e.dex\u003c/em\u003e for android runtime.\u003c/p\u003e\u003cp id=\"e215\"\u003e\u003cstrong\u003eR8 Shrinker\u003c/strong\u003e: R8 is a code shrinking and minification tool that converts java byte code \u003cem\u003e.class\u003c/em\u003e to optimized dex code \u003cem\u003e.dex\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"23df\"\u003eHow to integrate this into our android studio project?\u003c/h2\u003e\u003cp id=\"1096\"\u003eWe previously learned about desurgaring to use the java 8+ language feature. Now, let’s see how to integrate this into our project.\u003c/p\u003e\u003col\u003e\u003cli id=\"cfb9\"\u003eUpdate your agp to 4.0.0+ (for new projects it definetely higher than this)\u003c/li\u003e\u003cli id=\"a79e\"\u003eFor module that uses this Java 8 lang features either in its source code or plugin dependency, update the module’s \u003ccode\u003ebuild.gradle \u003c/code\u003efor groovy or \u003ccode\u003ebuild.gradle.kts \u003c/code\u003efor kotlin DSL file as shown below:\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"7ef1\"\u003eTo support these language APIs, the plugin compiles a separate DEX file that contains an implementation of the missing APIs and includes it in your app. The desugaring process rewrites your app’s code to instead use this library at runtime.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"75d5\"\u003e\u003cstrong\u003eNote: If you also want to access Java 11 language features, use the\u003c/strong\u003e \u003cstrong\u003ecoreLibraryDesugaring lib version 2.0.3 or higher, and your Android Gradle plugin needs to be 7.4.0 or higher. For all the versions visit \u003c/strong\u003e\u003ca href=\"https://github.com/google/desugar_jdk_libs/blob/master/CHANGELOG.md\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eCHANGELOG.md\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"359d\"\u003eFor a complete list of supported APIs, visit \u003ca href=\"https://developer.android.com/studio/write/java8-support-table\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJava 8+ APIs available through desugaring\u003c/a\u003e and \u003ca href=\"https://developer.android.com/studio/write/java11-default-support-table\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJava 11+ APIs available through desugaring\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"d23d\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"6986\"\u003eIn this short blog, we learned how to use api desugaring for our project to support older android devices to reach a broader audience, and also learned how it works and more. I hope you find this blog helpful and I will see you in the next upcoming article.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-10-04T13:12:00.697Z",
  "modifiedTime": null
}
