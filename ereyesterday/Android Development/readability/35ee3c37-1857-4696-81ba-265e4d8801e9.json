{
  "id": "35ee3c37-1857-4696-81ba-265e4d8801e9",
  "title": "Google Maps in Jetpack Compose: Circles",
  "link": "https://joebirch.co/android/google-maps-in-jetpack-compose-circles/",
  "description": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this... Continue reading â†’",
  "author": "hitherejoe",
  "published": "Fri, 01 Nov 2024 10:40:15 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose",
    "Android App Development",
    "Android Development",
    "AndroidDev",
    "App Development",
    "jetpack compose",
    "jetpackcompose",
    "Mobile App Development"
  ],
  "byline": "by hitherejoe",
  "length": 5985,
  "excerpt": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In th",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package. Now that we have the basics down from aÂ previous post, weâ€™re going to dive into the Circle composable and learn how we can draw circular indicators on our map. Looking to learn more Jetpack Compose? The video course forÂ Practical Jetpack ComposeÂ is now available ðŸš€ The Circle Composable In the previous post we looked at the Marker composable, which is used to indicate POIs and display further information on click events. When it comes to the Circle composable, the concept is much simpler â€“ often used to display things such as the current location for a user, this component does not handle additional information (such as information windows) â€“ we simply provide it with a center location and a circle will be drawn. While we can style this circle and provide a click listener for handling click events, the foundations of the composable are very simple. Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation. @Composable @GoogleMapComposable public fun Circle( center: LatLng, clickable: Boolean = false, fillColor: Color = Color.Transparent, radius: Double = 0.0, strokeColor: Color = Color.Black, strokePattern: List\u003cPatternItem\u003e? = null, strokeWidth: Float = 10f, tag: Any? = null, visible: Boolean = true, zIndex: Float = 0f, onClick: (Circle) -\u003e Unit = {}, ) As we can see from this composable, there is a collection of arguments that allow us to customise our Circle. The composable contains on required argument, the center. This is required to draw the circle at the specified location, which is provided in the form of a LatLng instance. While the radius isnâ€™t a required argument, this defaults to 0.0 meaning that no circle will initially be visible. For this reason, weâ€™re also going to provide a radius argument so that our circle is visible on the map. val london = LatLng(51.5072, 0.1276) Circle( center = london, radius = 150.0 ) With this in place, weâ€™ll now be able to see a Circle displayed on our map. However, you can probably notice that this isnâ€™t very visible on our Map. This is because the Circle defaults to a transparent fill color and a Black stroke color. Because we are using a dark styling for our map this causes the Circle to be barely visible. To improve this weâ€™ll provide a value for the strokeColor argument. Circle( center = london, radius = 150.0, strokeColor = Color.White ) With this in place, our Circle has become more visible on the Map. Even with this in place, our Circle still isnâ€™t easily visible. The lack of a fill color still takes me a moment to notice the Circle on the map, so to improve this we can go one step further here and provide a fillColor for our Circle. Circle( center = london, radius = 150.0, strokeColor = Color.White, fillColor = Color.Blue ) With a fillColor now being provided, our Circle is now much more visible on the Map. In some cases, we can further increase the visibility of our Circle by increasing the thickness of the Circle stroke. This is done via the strokeWidth argument which allows us to increase the width of the stroke drawn around the border of the Circle. Circle( center = london, radius = 150.0, strokeColor = Color.White, fillColor = Color.Blue, strokeWidth = 20f ) With the thicker strokeWidth applied, this gives our Circle a bolder appearance when being drawn and a clearer representation on our Map. Alongside an increase stroke thickness, we can modify the strokePattern to give our Circle more prominence within our Map. This argument allows us to apply a pattern to the stroke being drawn, for which we must provide a list of PatternItem instances for the pattern to be repeated around the Circle. We wonâ€™t dive too much into the different options here, but will cover a quick example of a repeated Dash + Gap pattern. Circle( center = london, radius = 150.0, strokeColor = Color.White, fillColor = Color.Blue, strokeWidth = 10f, strokePattern = listOf( Dash(15f), Gap(15f) ) ) With this pattern in place, we can see the Dash + Gap applied to our Circle instance. This can help to give our Circle greater visibility within our Map, helping it to stand out more against other drawn components. While the Circle component is not designed to behave in the same way as a Marker (to show information windows), we can still handle interactions with the Circle via the onClick argument of the Circle composable. This is a simple lambda argument that is triggered when the click event occurs on the composable. Circle( center = london, radius = 150.0, strokeColor = Color.White, fillColor = Color.Blue, strokeWidth = 10f, strokePattern = listOf( Dash(15f), Gap(15f) ), onClick = { } ) In this blog post weâ€™ve taken a quick look at the Circle composable, a simple composable which is often used to display contextual information such as the current location for a user. We can see how the purpose of this composable is very different of that of the Marker composable, and weâ€™ve learnt how we can style this Circle composable to adhere to the required look/feel of our application. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ GoogleMapComposableÂ content scope.",
  "image": "https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we have the \u003ca href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-getting-started/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebasics down from aÂ previous post\u003c/a\u003e, weâ€™re going to dive into the Circle composable and learn how we can draw circular indicators on our map.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn more Jetpack Compose? The video course forÂ \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003eÂ is now available ðŸš€\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eThe Circle Composable\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn the \u003ca rel=\"noreferrer noopener\" href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-markers/\" target=\"_blank\"\u003eprevious post\u003c/a\u003e we looked at the Marker composable, which is used to indicate POIs and display further information on click events. When it comes to the Circle composable, the concept is much simpler â€“ often used to display things such as the current location for a user, this component does not handle additional information (such as information windows) â€“ we simply provide it with a center location and a circle will be drawn. While we can style this circle and provide a click listener for handling click events, the foundations of the composable are very simple. Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e@Composable\n@GoogleMapComposable\npublic fun Circle(\n    center: LatLng,\n    clickable: Boolean = false,\n    fillColor: Color = Color.Transparent,\n    radius: Double = 0.0,\n    strokeColor: Color = Color.Black,\n    strokePattern: List\u0026lt;PatternItem\u0026gt;? = null,\n    strokeWidth: Float = 10f,\n    tag: Any? = null,\n    visible: Boolean = true,\n    zIndex: Float = 0f,\n    onClick: (Circle) -\u0026gt; Unit = {},\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs we can see from this composable, there is a collection of arguments that allow us to customise our Circle. The composable contains on required argument, the \u003cstrong\u003ecenter\u003c/strong\u003e. This is required to draw the circle at the specified location, which is provided in the form of a \u003cstrong\u003eLatLng\u003c/strong\u003e instance. While the \u003cstrong\u003eradius\u003c/strong\u003e isnâ€™t a required argument, this defaults to 0.0 meaning that no circle will initially be visible. For this reason, weâ€™re also going to provide a \u003cstrong\u003eradius\u003c/strong\u003e argument so that our circle is visible on the map.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval london = LatLng(51.5072, 0.1276)\n\nCircle(\n    center = london,\n    radius = 150.0\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, weâ€™ll now be able to see a Circle displayed on our map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"636\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-1024x636.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-1024x636.png 1024w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-300x186.png 300w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-768x477.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-500x311.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-150x93.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-400x249.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-800x497.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042-200x124.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185042.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHowever, you can probably notice that this isnâ€™t very visible on our Map. This is because the Circle defaults to a transparent fill color and a Black stroke color. Because we are using a dark styling for our map this causes the Circle to be barely visible. To improve this weâ€™ll provide a value for the \u003cstrong\u003estrokeColor\u003c/strong\u003e argument.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eCircle(\n    center = london,\n    radius = 150.0,\n    strokeColor = Color.White\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, our Circle has become more visible on the Map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"667\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-1024x667.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-1024x667.png 1024w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-300x195.png 300w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-768x500.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-500x325.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-150x98.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-400x260.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-800x521.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317-200x130.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241030_185317.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEven with this in place, our Circle still isnâ€™t easily visible. The lack of a fill color still takes me a moment to notice the Circle on the map, so to improve this we can go one step further here and provide a \u003cstrong\u003efillColor\u003c/strong\u003e for our Circle.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eCircle(\n    center = london,\n    radius = 150.0,\n    strokeColor = Color.White,\n    fillColor = Color.Blue\n )\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith a \u003cstrong\u003efillColor\u003c/strong\u003e now being provided, our Circle is now much more visible on the Map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"642\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-1024x642.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-1024x642.png 1024w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-300x188.png 300w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-768x481.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-500x313.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-150x94.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-400x251.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-800x501.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035-200x125.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102035.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn some cases, we can further increase the visibility of our Circle by increasing the thickness of the Circle stroke. This is done via the \u003cstrong\u003estrokeWidth\u003c/strong\u003e argument which allows us to increase the width of the stroke drawn around the border of the Circle.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eCircle(\n    center = london,\n    radius = 150.0,\n    strokeColor = Color.White,\n    fillColor = Color.Blue,\n    strokeWidth = 20f\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith the thicker \u003cstrong\u003estrokeWidth\u003c/strong\u003e applied, this gives our Circle a bolder appearance when being drawn and a clearer representation on our Map.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"687\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-1024x687.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-1024x687.png 1024w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-300x201.png 300w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-768x516.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-500x336.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-150x101.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-400x269.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-800x537.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823-200x134.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_103823.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAlongside an increase stroke thickness, we can modify the \u003cstrong\u003estrokePattern\u003c/strong\u003e to give our Circle more prominence within our Map. This argument allows us to apply a pattern to the stroke being drawn, for which we must provide a list of \u003cstrong\u003ePatternItem\u003c/strong\u003e instances for the pattern to be repeated around the Circle. We wonâ€™t dive too much into the different options here, but will cover a quick example of a repeated \u003cstrong\u003eDash\u003c/strong\u003e + \u003cstrong\u003eGap\u003c/strong\u003e pattern.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eCircle(\n    center = london,\n    radius = 150.0,\n    strokeColor = Color.White,\n    fillColor = Color.Blue,\n    strokeWidth = 10f,\n    strokePattern = listOf(\n        Dash(15f),\n        Gap(15f)\n    )\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this pattern in place, we can see the Dash + Gap applied to our Circle instance. This can help to give our Circle greater visibility within our Map, helping it to stand out more against other drawn components.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"781\" src=\"http://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-1024x781.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-1024x781.png 1024w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-300x229.png 300w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-768x586.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-500x381.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-150x114.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-400x305.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-800x610.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy-200x153.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241101_102128-copy.png 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eWhile the Circle component is not designed to behave in the same way as a Marker (to show information windows), we can still handle interactions with the Circle via the \u003cstrong\u003eonClick\u003c/strong\u003e argument of the Circle composable. This is a simple lambda argument that is triggered when the click event occurs on the composable.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eCircle(\n    center = london,\n    radius = 150.0,\n    strokeColor = Color.White,\n    fillColor = Color.Blue,\n    strokeWidth = 10f,\n    strokePattern = listOf(\n        Dash(15f),\n        Gap(15f)\n    ),\n    onClick = {\n                    \n    }\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIn this blog post weâ€™ve taken a quick look at the Circle composable, a simple composable which is often used to display contextual information such as the current location for a user. We can see how the purpose of this composable is very different of that of the Marker composable, and weâ€™ve learnt how we can style this Circle composable to adhere to the required look/feel of our application. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003eÂ content scope.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-11-01T10:40:15Z",
  "modifiedTime": "2024-11-01T10:40:15Z"
}
