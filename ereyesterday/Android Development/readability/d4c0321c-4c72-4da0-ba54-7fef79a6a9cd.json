{
  "id": "d4c0321c-4c72-4da0-ba54-7fef79a6a9cd",
  "title": "Developer preview: Enhanced Android desktop experiences with connected displays",
  "link": "http://android-developers.googleblog.com/2025/06/developer-preview-enhanced-android-desktop-experiences-connected-displays.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-06-10T11:02:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#largescreens",
    "adaptive",
    "desktop",
    "free-form",
    "insets",
    "layouts",
    "multitasking",
    "resizing",
    "Tablets",
    "windowing"
  ],
  "byline": "",
  "length": 9611,
  "excerpt": "Android 16 QPR3 Beta 2 release features connected displays support, enabling you to transform your Android device into a powerful desktop workstation.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Francesco Romano – Developer Relations Engineer on Android, and Fahd Imtiaz – Product Manager, Android Developer Today, Android is launching a few updates across the platform! This includes the start of Android 16's rollout, with details for both developers and users, a Developer Preview for enhanced Android desktop experiences with connected displays, and updates for Android users across Google apps and more, plus the June Pixel Drop. We're also recapping all the Google I/O updates for Android developers focused on building excellent, adaptive Android apps. Android has continued to evolve to enable users to be more productive on large screens. Today, we’re excited to share that connected displays support on compatible Android devices is now in developer preview with the Android 16 QPR1 Beta 2 release. As shown at Google I/O 2025, connected displays enable users to attach an external display to their Android device and transform a small screen device into a powerful tool with a large screen. This evolution gives users the ability to move apps beyond a single screen to unlock Android’s full productivity potential on external displays. The connected display update builds on our desktop windowing experience, a capability we previewed last year. Desktop windowing is set to launch later this year for users on compatible tablets running Android 16. Desktop windowing enables users to run multiple apps simultaneously and resize windows for optimal multitasking. This new windowing capability works seamlessly with split screen and other multitasking features users already love on Android and doesn't require switching to a special mode. Google and Samsung have collaborated to bring a more seamless and powerful desktop windowing experience to large screen devices and phones with connected displays in Android 16 across the Android ecosystem. These advancements will enhance Samsung DeX, and also extend to other Android devices. For developers, connected displays and desktop windowing present new opportunities for building more engaging and more productive app experiences that seamlessly adapt across form factors. You can try out these features today on your connected display with the Android 16 QPR1 Beta 2 on select Pixel devices. What’s new in connected displays support? When a supported Android phone or foldable is connected to an external display through a DisplayPort connection, a new desktop session starts on the connected display. The phone and the external display operate independently, and apps are specific to the display on which they’re running. The experience on the connected display is similar to the experience on a desktop, including a task bar that shows running apps and lets users pin apps for quick access. Users are able to run multiple apps side by side simultaneously in freely resizable windows on the connected display. Phone connected to an external display, with a desktop session on the display while the phone maintains its own state. When a desktop windowing enabled device (like a tablet) is connected to an external display, the desktop session is extended across both displays, unlocking an even more expansive workspace. The two displays then function as one continuous system, allowing app windows, content, and the cursor to move freely between the displays. Tablet connected to an external display, extending the desktop session across both displays. A cornerstone of this effort is the evolution of desktop windowing, which is stable in Android 16 and is packed with improvements and new capabilities. Desktop windowing stable release We've made substantial improvements in the stability and performance of desktop windowing in Android 16. This means users will encounter a smoother, more reliable experience when managing app windows on connected displays. Beyond general stability improvements, we're introducing several new features: Flexible window tiling: Multitasking gets a boost with more intuitive window tiling options. Users can more easily arrange multiple app windows side by side or in various configurations, making it simpler to work across different applications simultaneously on a large screen. Multiple desktops: Users can set up multiple desktop sessions to match their distinct productivity requirements and switch between the desktops using keyboard shortcuts, trackpad gestures, and Overview. Enhanced app compatibility treatments: New compatibility treatments ensure that even legacy apps behave more predictably and look better on external displays by default. This reduces the burden on developers while providing a better out-of-the-box experience for users. Multi-instance management: Users can manage multiple instances of supporting applications (for example, Chrome or, Keep) through the app header button or taskbar context menu. This allows for quick switching between different instances of the same app. Desktop persistence: Android can now better maintain window sizes, positions, and states across different desktops. This means users can set up their preferred workspace and have it restored across sessions, offering a more consistent and efficient workflow. Best practices for optimal app experiences on connected displays With the introduction of connected display support in Android, it's important to ensure your apps take full advantage of the new display capabilities. To help you build apps that shine in this enhanced environment, here are some key development practices to follow: Build apps optimized for desktop Design for any window size: With phones now connecting to external displays, your mobile app can run in a window of almost any size and aspect ratio. This means the app window can be as big as the screen of the connected display but also flex to fit a smaller window. In desktop windowing, the minimum window size is 386 x 352 dp, which is smaller than most phones. This fundamentally changes how you need to think about UI. With orientation and resizability changes in Android 16, it becomes even more critical for you to update your apps to support resizability and portrait and landscape orientations for an optimal experience with desktop windowing and connected displays. Make sure your app supports any window size by following the best practices on adaptive development. Implement features for top productivity: You now have all the tools necessary to build mobile apps that match desktop, so start adding features to boost users productivity! Allow users to open multiple instances of the same app, which is invaluable for tasks like comparing documents, managing different conversations, or viewing multiple files simultaneously. Support data sharing with drag and drop, and maintain user flow across configuration changes by implementing a robust state management system. Handle dynamic display changes Don't assume a constant Display object: The Display object associated with your app's context can change when an app window is moved to an external display or if the display configuration changes. Your app should gracefully handle configuration change events and query display metrics dynamically rather than caching them. Account for density configuration changes: External displays can have vastly different pixel densities than the primary device screen. Ensure your layouts and resources adapt correctly to these changes to maintain UI clarity and usability. Use density-independent pixels (dp) for layouts, provide density-specific resources, and ensure your UI scales appropriately. Go beyond just the screen Correctly support external peripherals: When users connect to an external monitor, they often create a more desktop-like environment. This frequently involves using external keyboards, mice, trackpads, webcams, microphones, and speakers. If your app uses camera or microphone input, the app should be able to detect and utilize peripherals connected through the external display or a docking station. Handle keyboard actions: Desktop users rely heavily on keyboard shortcuts for efficiency. Implement standard shortcuts (for example, Ctrl+C, Ctrl+V, Ctrl+Z) and consider app-specific shortcuts that make sense in a windowed environment. Make sure your app supports keyboard navigation. Support mouse interactions: Beyond simple clicks, ensure your app responds correctly to mouse hover events (for example, for tooltips or visual feedback), right-clicks (for contextual menus), and precise scrolling. Consider implementing custom pointers to indicate different actions. Getting started Explore the connected displays and enhanced desktop windowing features in the latest Android Beta. Get Android 16 QPR1 Beta 2 on a supported Pixel device (Pixel 8 and Pixel 9 series) to start testing your app today. Then enable desktop experience features in the developer settings. Support for connected displays in the Android Emulator is coming soon, so stay tuned for updates! Dive into the updated documentation on multi-display support and window management to learn more about implementing these best practices. Feedback Your feedback is crucial as we continue to refine these experiences. Please share your thoughts and report any issues through our official feedback channels. We're committed to making Android a versatile platform that adapts to the many ways users want to interact with their apps and devices. The improvements to connected display support are another step in that direction, and we can't wait to see the amazing experiences you'll build!",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimB8MDRFmGNHY8m_QL2hIOCk6wjcPHZPqHlNDl-eBb_y5yyZoja_ZkQMQ3FKavZEpL8Ocf8KqMEEaCLuMd0RLFTmeTkWYew6bCmrbTUQeFOwW-aDeT4f_DRzyS4GS4aNsKdQq2RmeAlAgRz7O0bQccmceR9No-219ZF2I_s1lp0X1PUDsLxMAQYT6WSHs/w1200-h630-p-k-no-nu/external-display-connected-to-desktop-session-material-design.gif",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimB8MDRFmGNHY8m_QL2hIOCk6wjcPHZPqHlNDl-eBb_y5yyZoja_ZkQMQ3FKavZEpL8Ocf8KqMEEaCLuMd0RLFTmeTkWYew6bCmrbTUQeFOwW-aDeT4f_DRzyS4GS4aNsKdQq2RmeAlAgRz7O0bQccmceR9No-219ZF2I_s1lp0X1PUDsLxMAQYT6WSHs/s1600/external-display-connected-to-desktop-session-material-design.gif\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Francesco Romano – Developer Relations Engineer on Android, and Fahd Imtiaz – Product Manager, Android Developer\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEia9UtASLD_yT4hpqUf5QbmYnge04zTIavjei2X_MsbBdPvtXjlxvW01v1OnQx-LOcAJKMZYP4Xwk0GelMGdLriIlWU6hHm4FDNeyoIFsf8dxbmnR9wuWwFUSp0F-L7YbfmQSM1QJ6CiwmJPYTZNbhkl7OI7GCcq6IZ-5koFIkEt5f6LXrW1-4EiBjtOgo/s1600/developer-preview-embedded-android-desktop-connected-displays-buiilding-excellent-adaptive-apps-google-io-spotlight.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEia9UtASLD_yT4hpqUf5QbmYnge04zTIavjei2X_MsbBdPvtXjlxvW01v1OnQx-LOcAJKMZYP4Xwk0GelMGdLriIlWU6hHm4FDNeyoIFsf8dxbmnR9wuWwFUSp0F-L7YbfmQSM1QJ6CiwmJPYTZNbhkl7OI7GCcq6IZ-5koFIkEt5f6LXrW1-4EiBjtOgo/s1600/developer-preview-embedded-android-desktop-connected-displays-buiilding-excellent-adaptive-apps-google-io-spotlight.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cblockquote\u003e\u003csmall\u003e\u003ci\u003eToday, Android is launching a few updates across the platform! This includes the start of Android 16\u0026#39;s rollout, with details for both \u003ca href=\"https://android-developers.googleblog.com/2025/06/android-16-is-here.html\" target=\"_blank\"\u003edevelopers\u003c/a\u003e and \u003ca href=\"https://blog.google/products/android/android-16\" target=\"_blank\"\u003eusers\u003c/a\u003e, a \u003ca href=\"https://android-developers.googleblog.com/2025/06/developer-preview-enhanced-android-desktop-experiences-connected-displays.html\" target=\"_blank\"\u003eDeveloper Preview for enhanced Android desktop experiences with connected displays\u003c/a\u003e, and \u003ca href=\"https://blog.google/products/android/new-android-features-june-2025/\" target=\"_blank\"\u003eupdates for Android users across Google apps and more\u003c/a\u003e, plus the  \u003ca href=\"https://blog.google/products/pixel/pixel-drop-june-2025/\" target=\"_blank\"\u003eJune Pixel Drop\u003c/a\u003e. We\u0026#39;re also \u003ca href=\"https://android-developers.googleblog.com/2025/06/top-3-updates-for-building-excellent-adaptive-apps-google-io-25.html\" target=\"_blank\"\u003erecapping all the Google I/O updates for Android developers focused on building excellent, adaptive Android apps\u003c/a\u003e.\u003c/i\u003e\u003c/small\u003e\u003c/blockquote\u003e\n\n\n\u003cp\u003eAndroid has continued to evolve to enable users to be more productive on large screens.\u003c/p\u003e\n\n\u003cp\u003eToday, we’re excited to share that connected displays support on compatible Android devices is now in developer preview with the Android 16 QPR1 Beta 2 release. As shown at \u003ca href=\"https://www.youtube.com/watch?v=MmeJSLAnB-M\" target=\"_blank\"\u003eGoogle I/O 2025\u003c/a\u003e, connected displays enable users to attach an external display to their Android device and transform a small screen device into a powerful tool with a large screen. This evolution gives users the ability to move apps beyond a single screen to unlock Android’s full productivity potential on external displays.\u003c/p\u003e\n\n\u003cp\u003eThe connected display update builds on our desktop windowing experience, a capability we \u003ca href=\"https://android-developers.googleblog.com/2024/09/developer-preview-desktop-windowing-on-android-tablets.html\" target=\"_blank\"\u003epreviewed\u003c/a\u003e last year. Desktop windowing is set to launch later this year for users on compatible tablets running \u003ca href=\"https://blog.google/products/android/android-16\" target=\"_blank\"\u003eAndroid 16\u003c/a\u003e. Desktop windowing enables users to run multiple apps simultaneously and resize windows for optimal multitasking. This new windowing capability works seamlessly with split screen and other multitasking features users already love on Android and doesn\u0026#39;t require switching to a special mode.\u003c/p\u003e\n\n\u003cp\u003eGoogle and Samsung have collaborated to bring a more seamless and powerful desktop windowing experience to large screen devices and phones with connected displays in Android 16 across the Android ecosystem. These advancements will enhance Samsung DeX, and also extend to other Android devices.\u003c/p\u003e\n\n\u003cp\u003eFor developers, connected displays and desktop windowing present new opportunities for building more engaging and more productive app experiences that seamlessly adapt across form factors. You can try out these features today on your connected display with the Android 16 QPR1 Beta 2 on select Pixel devices.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eWhat’s new in connected displays support?\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhen a supported Android phone or foldable is connected to an external display through a DisplayPort connection, a new desktop session starts on the connected display. The phone and the external display operate independently, and apps are specific to the display on which they’re running.\u003c/p\u003e\n  \n\u003cp\u003eThe experience on the connected display is similar to the experience on a desktop, including a task bar that shows running apps and lets users pin apps for quick access. Users are able to run multiple apps side by side simultaneously in freely resizable windows on the connected display.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"moving image of a phone connected to an external display, with a desktop session on the display while the phone maintains its own state.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhILZ2VTibNrcO6qWOiNNwKlXhNxyJutozJrN2f8wfTPot6gVMVAJuo5VSbqX6TgDEgtnl0823Z-IZHm3jgn2F-A99aOg8h5qMlNhXmlvUFLo6UY_J0hXIkZoQjnKfRUliLsRFMhy-YAM73sXeEbxND67h9bddLPF423gEFmrboqGmxmeFLbqlqecyVkvo/s1600/external-display-connected-to-desktop-session-material-design.gif\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003ePhone connected to an external display, with a desktop session on the display while the phone maintains its own state.\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eWhen a desktop windowing enabled device (like a tablet) is connected to an external display, the desktop session is extended across both displays, unlocking an even more expansive workspace. The two displays then function as one continuous system, allowing app windows, content, and the cursor to move freely between the displays.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"moving image of a tablet connected to an external display, extending the desktop session across both displays.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimB8MDRFmGNHY8m_QL2hIOCk6wjcPHZPqHlNDl-eBb_y5yyZoja_ZkQMQ3FKavZEpL8Ocf8KqMEEaCLuMd0RLFTmeTkWYew6bCmrbTUQeFOwW-aDeT4f_DRzyS4GS4aNsKdQq2RmeAlAgRz7O0bQccmceR9No-219ZF2I_s1lp0X1PUDsLxMAQYT6WSHs/s16000/external-display-connected-to-desktop-session-material-design.gif\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eTablet connected to an external display, extending the desktop session across both displays.\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\n\u003cp\u003eA cornerstone of this effort is the evolution of desktop windowing, which is stable in Android 16 and is packed with improvements and new capabilities.\n\n\u003c/p\u003e\u003ch2\u003e\u003cspan\u003eDesktop windowing stable release\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe\u0026#39;ve made substantial improvements in the stability and performance of desktop windowing in Android 16. This means users will encounter a smoother, more reliable experience when managing app windows on connected displays. Beyond general stability improvements, we\u0026#39;re introducing several new features:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eFlexible window tiling:\u003c/b\u003e Multitasking gets a boost with more intuitive window tiling options. Users can more easily arrange multiple app windows side by side or in various configurations, making it simpler to work across different applications simultaneously on a large screen.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003eMultiple desktops:\u003c/b\u003e Users can set up multiple desktop sessions to match their distinct productivity requirements and switch between the desktops using keyboard shortcuts, trackpad gestures, and Overview.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003eEnhanced app compatibility treatments:\u003c/b\u003e \u003ca href=\"https://developer.android.com/guide/practices/device-compatibility-mode#desktop_windowing\" target=\"_blank\"\u003eNew compatibility treatments\u003c/a\u003e ensure that even legacy apps behave more predictably and look better on external displays by default. This reduces the burden on developers while providing a better out-of-the-box experience for users.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003eMulti-instance management:\u003c/b\u003e Users can manage multiple instances of supporting applications (for example, Chrome or, Keep) through the app header button or taskbar context menu.\nThis allows for quick switching between different instances of the same app.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003eDesktop persistence:\u003c/b\u003e Android can now better maintain window sizes, positions, and states across different desktops. This means users can set up their preferred workspace and have it restored across sessions, offering a more consistent and efficient workflow.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003ch2\u003e \u003cspan\u003eBest practices for optimal app experiences on connected displays\u003c/span\u003e\u003c/h2\u003e\n  \n\u003cp\u003eWith the introduction of connected display support in Android, it\u0026#39;s important to ensure your apps take full advantage of the new display capabilities. To help you build apps that shine in this enhanced environment, here are some key development practices to follow:\u003c/p\u003e\n \n\u003ch4\u003e\u003cspan\u003eBuild apps optimized for desktop\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\u003cul\u003e \n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://developer.android.com/design/ui/large-screens\" target=\"_blank\"\u003eDesign for any window size:\u003c/a\u003e\u003c/b\u003e With phones now connecting to external displays, your mobile app can run in a window of almost any size and aspect ratio. This means the app window can be as big as the screen of the connected display but also flex to fit a smaller window. In desktop windowing, the minimum window size is 386 x 352 dp, which is smaller than most phones. This fundamentally changes how you need to think about UI. With orientation and resizability changes in Android 16, it becomes even more critical for you to update your apps to support resizability and portrait and landscape orientations for an optimal experience with desktop windowing and connected displays. Make sure your app supports any window size by following the \u003ca href=\"https://android-developers.googleblog.com/2025/05/adaptiveapps-io25.html\" target=\"_blank\"\u003ebest practices on adaptive development\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://developer.android.com/large-screens/gallery/productivity\" target=\"_blank\"\u003eImplement features for top productivity:\u003c/a\u003e\u003c/b\u003e You now have all the tools necessary to build mobile apps that match desktop, so start adding \u003ca href=\"https://www.youtube.com/watch?v=MmeJSLAnB-M\" target=\"_blank\"\u003efeatures to boost users productivity\u003c/a\u003e! Allow users to open \u003ca href=\"https://developer.android.com/guide/topics/large-screens/multitasking-and-multi-instance\" target=\"_blank\"\u003emultiple instances\u003c/a\u003e of the same app, which  is invaluable for tasks like comparing documents, managing different conversations, or viewing multiple files simultaneously. Support data sharing with \u003ca href=\"https://developer.android.com/guide/topics/large-screens/drag-and-drop\" target=\"_blank\"\u003edrag and drop\u003c/a\u003e, and maintain user flow across configuration changes by implementing a robust \u003ca href=\"https://developer.android.com/guide/topics/large-screens/configuration-and-continuity\" target=\"_blank\"\u003estate management system\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003ch4\u003e\u003cspan\u003eHandle dynamic display changes\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\u003cul\u003e \n\u003cli\u003e\u003cb\u003eDon\u0026#39;t assume a constant \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/Display\" target=\"_blank\"\u003eDisplay\u003c/a\u003e\u003c/span\u003e object:\u003c/b\u003e The \u003cspan\u003eDisplay\u003c/span\u003e object associated with your app\u0026#39;s context can change when an app window is moved to an external display or if the display configuration changes. Your app should gracefully handle configuration change events and query display metrics dynamically rather than caching them.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n \n\u003cli\u003e\u003cb\u003eAccount for \u003ca href=\"https://developer.android.com/guide/topics/manifest/activity-element#config\" target=\"_blank\"\u003edensity configuration changes\u003c/a\u003e:\u003c/b\u003e External displays can have vastly different pixel densities than the primary device screen. Ensure your layouts and resources adapt correctly to these changes to maintain UI clarity and usability. Use density-independent pixels (dp) for layouts, provide density-specific resources, and ensure your UI scales appropriately.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003ch4\u003e\u003cspan\u003eGo beyond just the screen\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\u003cul\u003e \n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/input-compatibility-on-large-screens\" target=\"_blank\"\u003eCorrectly support external peripherals\u003c/a\u003e:\u003c/b\u003e  When users connect to an external monitor, they often create a more desktop-like environment. This frequently involves using external keyboards, mice, trackpads, webcams, microphones, and speakers. If your app uses camera or microphone input, the app should be able to detect and utilize peripherals connected through the external display or a docking station.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/keyboard-input/commands\" target=\"_blank\"\u003eHandle keyboard actions\u003c/a\u003e:\u003c/b\u003e Desktop users rely heavily on keyboard shortcuts for efficiency. Implement standard shortcuts (for example, Ctrl+C, Ctrl+V, Ctrl+Z) and consider app-specific shortcuts that make sense in a windowed environment. Make sure your app supports \u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/input-compatibility-on-large-screens#navigation\" target=\"_blank\"\u003ekeyboard navigation\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n  \n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/input-compatibility-on-large-screens#mouse_and_touchpad\" target=\"_blank\"\u003eSupport mouse interactions\u003c/a\u003e:\u003c/b\u003e Beyond simple clicks, ensure your app responds correctly to mouse hover events (for example, for tooltips or visual feedback), right-clicks (for contextual menus), and precise scrolling. Consider implementing \u003ca href=\"https://developer.android.com/guide/topics/large-screens/custom-cursors\" target=\"_blank\"\u003ecustom pointers\u003c/a\u003e to indicate different actions.\u003c/li\u003e\n  \n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003ch3\u003e\u003cspan\u003eGetting started\u003c/span\u003e\u003c/h3\u003e\n  \n\u003cp\u003eExplore the connected displays and enhanced desktop windowing features in the latest Android Beta. Get \u003ca href=\"https://developer.android.com/about/versions/16/get#on_pixel\" target=\"_blank\"\u003eAndroid 16 QPR1 Beta 2\u003c/a\u003e on a supported Pixel device (Pixel 8 and Pixel 9 series) to start testing your app today. Then enable \u003cb\u003edesktop experience features\u003c/b\u003e in the developer settings.\u003c/p\u003e\n  \n\u003cp\u003eSupport for connected displays in the \u003ca href=\"https://developer.android.com/about/versions/16/get#on_emulator\" target=\"_blank\"\u003e\u003cb\u003eAndroid Emulator\u003c/b\u003e\u003c/a\u003e is coming soon, so stay tuned for updates!\u003c/p\u003e\n  \n\u003cp\u003eDive into the updated documentation on \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/support-connected-displays\" target=\"_blank\"\u003emulti-display support\u003c/a\u003e and \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/support-desktop-windowing\" target=\"_blank\"\u003ewindow management\u003c/a\u003e to learn more about implementing these best practices.\u003c/p\u003e\n  \n\u003ch3\u003e\u003cspan\u003eFeedback\u003c/span\u003e\u003c/h3\u003e\n  \n\u003cp\u003eYour feedback is crucial as we continue to refine these experiences. Please share your thoughts and report any issues through our \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003eofficial feedback channels\u003c/a\u003e.\n  \n\u003c/p\u003e\u003cp\u003eWe\u0026#39;re committed to making Android a versatile platform that adapts to the many ways users want to interact with their apps and devices. The improvements to connected display support are another step in that direction, and we can\u0026#39;t wait to see the amazing experiences you\u0026#39;ll build!\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
