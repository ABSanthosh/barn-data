{
  "id": "2e996216-319d-4798-aea7-8297bd87d151",
  "title": "Now in Android #116",
  "link": "https://medium.com/androiddevelopers/now-in-android-116-d442393ebeb3?source=rss----95b274b437c2---4",
  "description": "",
  "author": "Meghan Mehta",
  "published": "Fri, 09 May 2025 15:58:03 GMT",
  "source": "https://medium.com/feed/androiddevelopers",
  "categories": [
    "google-io-2025",
    "google-play",
    "now-in-android",
    "featured",
    "android-16"
  ],
  "byline": "Meghan Mehta",
  "length": 9280,
  "excerpt": "Welcome to Now in Android, your ongoing guide to what‚Äôs new and notable in the world of Android development. In this edition, we‚Äôll cover the Google IO program lineup, what‚Äôs new in Jetpack Compose‚Ä¶",
  "siteName": "Android Developers",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Now in Android #116Google IO program lineup, Jetpack Compose 1.8, Play Console insights Android Vitals Metrics, Testing at Scale blog series and AndroidX!Welcome to Now in Android, your ongoing guide to what‚Äôs new and notable in the world of Android development.In this edition, we‚Äôll cover the Google IO program lineup, what‚Äôs new in Jetpack Compose 1.8, the redesigned Play Console app dashboard, new Android Vitals Metrics, the launch of the Testing at Scale blog series, and the latest in AndroidX.Most of the content of this post is available in the form of a video or podcast, so feel free to watch or listen rather than read on. (Or do all three to help you remember! There won‚Äôt be a quiz.)Articles üìöGet ready for Google I/O: Program lineup revealed üóìÔ∏èThe Google I/O agenda is now available, and you can register to explore sessions on AI, Android, Web, and Cloud, taking place May 20‚Äì21. The Google Keynote will be on May 20th at 10:00 AM PT, with the Developer Keynote at 1:30 PM PT. You can join online for livestreams May 20‚Äì21, with on-demand sessions and codelabs on May 22. Sessions will cover AI advancements using Gemini models, building apps for multiple devices using Google AI, and new features for web development.What‚Äôs new in the Jetpack Compose April ‚Äô25 release üöÄJetpack Compose 1.8 is out with new features, API updates, and bug fixes. You can upgrade your Compose BOM version to 2025.04.01 to use the new release.Here are some of the key updates:You can now integrate Autofill functionality into your Compose applications.The new autoSize parameter lets the text size adapt to the container sizeThe onLayoutRectChanged modifier solves many use cases that the existing onGloballyPositioned modifier does; however, it does so with much less overhead.LookaheadScope is stable and includes numerous performance and stability improvements, and includes a new modifier, animateBoundsCheck out the post to learn everything new in Jetpack Compose 1.8.The Fourth Beta of Android 16 ü§ñAndroid 16 Beta 4 is out, marking the final scheduled update and platform stability. The developer APIs and app-facing behaviors are finalized.Apps targeting Android 16 can now be made available in Google Play. This release includes the latest fixes and optimizations. Consider testing your apps against behavior changes around JobScheduler, broadcasts, ART, intents, 16KB page size, accessibility, and Bluetooth.Note that if you develop an SDK, library, tool, or game engine, it‚Äôs even more important to prepare any necessary updates now to prevent your downstream app and game developers from being blocked by compatibility issues and allow them to target the latest SDK features.While the API and behaviors are final and we are very close to release, we‚Äôd still like you to report issues on the feedback page. The earlier we get your feedback, the better chance we‚Äôll be able to address it in this or a future release.From dashboards to deeper data: Improve app quality and performance with new Play Console insights üì±The Google Play Console has a redesigned app dashboard that centralizes quality-focused metrics, helping you improve app performance and user experience. The dashboard groups metrics into four core developer objectives:test and releasemonitor and improvegrow usersmonetize with PlayA new notification center helps you stay up to date with your account and apps. New metrics include:pre-review checks for incorrect edge-to-edge renderinga low memory kill metricexcessive wake locks in Android vitalsTo stay informed about all the latest Play Console enhancements and easily find updates relevant to your workflow, explore our new What‚Äôs new in Play Console page, where you can filter features by the four developer objectives.Boost app performance and battery life: New Android Vitals Metrics are here üîãThe Android Developers blog announced new Android Vitals metrics aiming to help you improve app performance and battery life. The new metrics provide fleet-wide visibility into performance and battery life, equipping you with the data needed to diagnose and resolve performance bottlenecks. We just launched the first of these new metrics in beta: excessive wake locks. This metric directly addresses one of the most significant frustrations for Android users ‚Äî excessive battery drain. By optimizing your app‚Äôs wake lock behavior, you can significantly enhance battery life and user satisfaction.We launched the excessive wake lock metric documentation to provide clear guidance on interpreting the metrics. Please check out this page and provide feedback with your use case on this new metric. Your input is invaluable in refining these metrics before their general availability.Introducing Testing at Scale blog seriesAndroid Developers Blog launches ‚ÄúTesting at Scale‚Äù series, featuring real-world testing strategies and tips from large apps. This series complements the new ‚ÄúTesting Strategies‚Äù documentation and offers opportunities for developers to contribute their own experiences. Check out the first two parts posted below:Netflix App Testing At ScaleIn part 1 of the ‚ÄúTesting at Scale‚Äù series Ken Yee, Senior Engineer at Netflix, tells us about the challenges of testing a playback app at a massive scale and how they have evolved the testing strategy.Netflix‚Äôs Android app development prioritizes comprehensive testing, especially on physical devices due to wide device support. They‚Äôve moved to native and are adopting Jetpack Compose. Their large team uses unit tests (Strikt, Turbine, Mockito, Hilt, Robolectric), screenshot tests (Paparazzi, Espresso accessibility), and device tests (Espresso, UIAutomator). Minimizing flakiness (state, async code) is key. They use a dedicated device lab and are exploring emulators, Roborazzi, and modular ‚Äúdemo apps‚Äù to improve testing efficiency. The team has created a custom toolchain to isolate and notify engineers of flaky tests. Feature developers own all aspects of testing.How Dropbox leverages testing to maintain high level of trust at scaleIn part 2 of the ‚ÄúTesting at Scale‚Äù series Ryan Harter, Staff Engineer at Dropbox, shares how the shape of Dropbox‚Äôs testing pyramid changed over time, and what tools they use to get timely feedback.Dropbox‚Äôs Android app development team utilizes a multi-faceted testing approach, emphasizing unit tests with tools like JUnit and Paparazzi for screenshot testing. They‚Äôre reinvesting in end-to-end tests, leveraging their own Dropshots library for full instrumentation testing and are experimenting with Compose Preview Screenshot Testing. They also integrate manual testing with web-based tools and third-party services for scenarios difficult to automate. They are expanding Dropshots to support multiple device configurations.AndroidX Releases üöÄKey Highlights for Compose Developers:We have a bunch of new Compose APIs in alpha:Compose Animation Version 1.9.0-alpha01TabRow and ScrollableTabRow have been deprecated in favor of Primary and Secondary variants of each which are more performant and accurate to spec.We added LocalResources composition local to query Resources. Calling LocalResources.current will recompose when the configuration changes, so calls to APIs such as stringResource() will return updated values.Compose Foundation Version 1.9.0-alpha01Breaking change: clickable, combinedClickable, selectable, toggleable, and triStateToggleable overloads without an Indication parameter now only support IndicationNodeFactory instances provided using LocalIndication. This change will apply when you recompile your usages of these modifiers using this version of Compose and is needed to enable improved performance, and allow Composable functions using these modifiers to skip during recomposition.Compose Material Version 1.9.0-alpha01Text field decoration box APIs are no longer experimentalrunWithTimingDisabled is deprecated in favor of runWithMeasurementDisabled, which more clearly describes the behavior ‚Äî all metrics are paused.Compose Runtime Version 1.9.0-alpha01currentCompositeKeyHash is deprecated. Use currentCompositeKeyHashCode instead.@Stable, @Immutable, and @StableMarker have been moved to runtime-annotation (in a compatible way). You can now depend on runtime-annotation if you want to use these annotations from libraries that do not depend on compose.@RememberInComposition was added ‚Äî this is an annotation that can mark constructors, functions, and property getters, to indicate that they must not be called directly inside composition, without being remembered.Compose UI Version 1.9.0-alpha01androidx.compose.ui.LocalSavedStateRegistryOwner is deprecated in favor of androidx.savedstate.compose.LocalSavedStateRegistryOwner.Modifier.keepScreenOn was added to set the display to not sleep while presentCustomView Version 1.2.0, CustomView-Poolingcontainer Version 1.1.0, Leanback Leanback-Preference, Version 1.2.0, Leanback-Grid Version 1.0.0, Leanback-Paging Leanback-Tab Version 1.1.0, and Print Version 1.1.0 are all released in stable.Now then‚Ä¶ üëãThat‚Äôs it for this edition, with Google IO program lineup, Jetpack Compose 1.8, Play Console insights Android Vitals Metrics, Testing at Scale blog series, and the latest in AndroidX!Check back soon for your next update from the Android developer universe!",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*Sy3ea40KCd6LSmU6QFUgDA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"bcfa\" data-testid=\"storyTitle\"\u003eNow in Android #116\u003c/h2\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"7778\"\u003eGoogle IO program lineup, Jetpack Compose 1.8, Play Console insights Android Vitals Metrics, Testing at Scale blog series and AndroidX!\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca rel=\"noopener follow\" href=\"https://medium.com/@magicalmeghan?source=post_page---byline--d442393ebeb3---------------------------------------\" data-discover=\"true\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Meghan Mehta\" src=\"https://miro.medium.com/v2/da:true/resize:fill:64:64/0*eEs786UmP2FQS810\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"ef7b\"\u003eWelcome to Now in Android, your ongoing guide to what‚Äôs new and notable in the world of Android development.\u003c/p\u003e\u003cp id=\"c6e1\"\u003eIn this edition, we‚Äôll cover the \u003ca href=\"http://android-developers.googleblog.com/2025/04/google-io-program-lineup-revealed.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGoogle IO program lineup\u003c/a\u003e, what‚Äôs new in \u003ca href=\"http://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetpack Compose 1.8\u003c/a\u003e, the redesigned \u003ca href=\"http://android-developers.googleblog.com/2025/04/play-console-insights.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePlay Console\u003c/a\u003e app dashboard, new \u003ca href=\"http://android-developers.googleblog.com/2025/04/boost-app-performance-and-battery-life-android-vitals-metrics.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Vitals Metrics\u003c/a\u003e, the launch of the \u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/introducing-testing-at-scale-blog-series-8cd300ae2795\" data-discover=\"true\"\u003eTesting at Scale blog series\u003c/a\u003e, and the latest in AndroidX.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0da8\"\u003eMost of the content of this post is available in the form of a \u003ca href=\"https://youtu.be/YOvD5nQe7Bk\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003evideo\u003c/a\u003e or \u003ca href=\"http://nowinandroid.libsyn.com/116-google-io-gemini-and-jetpack-compose-18\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003epodcast\u003c/a\u003e, so feel free to \u003ca href=\"https://youtu.be/YOvD5nQe7Bk\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewatch\u003c/a\u003e or \u003ca href=\"http://nowinandroid.libsyn.com/116-google-io-gemini-and-jetpack-compose-18\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elisten\u003c/a\u003e rather than read on. (Or do all three to help you remember! There won‚Äôt be a quiz.)\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"3b4a\"\u003e\u003ca href=\"https://android-developers.googleblog.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eArticles üìö\u003c/a\u003e\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"77f7\"\u003e\u003ca href=\"http://android-developers.googleblog.com/2025/04/google-io-program-lineup-revealed.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGet ready for Google I/O: Program lineup revealed üóìÔ∏è\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"e130\"\u003eThe Google I/O agenda is now available, and you can register to explore sessions on AI, Android, Web, and Cloud, taking place May 20‚Äì21. The Google Keynote will be on May 20th at 10:00 AM PT, with the Developer Keynote at 1:30 PM PT. You can join online for livestreams May 20‚Äì21, with on-demand sessions and codelabs on May 22. Sessions will cover AI advancements using Gemini models, building apps for multiple devices using Google AI, and new features for web development.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"6283\"\u003e\u003ca href=\"http://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWhat‚Äôs new in the Jetpack Compose April ‚Äô25 release üöÄ\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"cef7\"\u003eJetpack Compose 1.8 is out with new features, API updates, and bug fixes. You can upgrade your Compose BOM version to 2025.04.01 to use the new release.\u003c/p\u003e\u003cp id=\"3b32\"\u003eHere are some of the key updates:\u003c/p\u003e\u003cul\u003e\u003cli id=\"4a30\"\u003eYou can now integrate \u003ccode\u003eAutofill\u003c/code\u003e functionality into your Compose applications.\u003c/li\u003e\u003cli id=\"2bc7\"\u003eThe new \u003ccode\u003eautoSize\u003c/code\u003e parameter lets the text size adapt to the container size\u003c/li\u003e\u003cli id=\"e987\"\u003eThe \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/layout/package-summary#%28androidx.compose.ui.Modifier%29.onLayoutRectChanged%28kotlin.Long,kotlin.Long,kotlin.Function1%29\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eonLayoutRectChanged\u003c/a\u003e\u003c/code\u003e modifier solves many use cases that the existing \u003ccode\u003eonGloballyPositioned\u003c/code\u003e modifier does; however, it does so with much less overhead.\u003c/li\u003e\u003cli id=\"8709\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/layout/LookaheadScope\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLookaheadScope\u003c/a\u003e\u003c/code\u003e is stable and includes numerous performance and stability improvements, and includes a new modifier, \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#%28androidx.compose.ui.Modifier%29.animateBounds%28androidx.compose.ui.layout.LookaheadScope,androidx.compose.ui.Modifier,androidx.compose.animation.BoundsTransform,kotlin.Boolean%29\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eanimateBounds\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"080f\"\u003eCheck out the \u003ca href=\"http://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003epost\u003c/a\u003e to learn everything new in Jetpack Compose 1.8.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"1ed8\"\u003e\u003ca href=\"http://android-developers.googleblog.com/2025/04/the-fourth-beta-of-android-16.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eThe Fourth Beta of Android 16 ü§ñ\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"4579\"\u003eAndroid 16 Beta 4 is out, marking the final scheduled update and platform stability. The developer APIs and app-facing behaviors are finalized.\u003c/p\u003e\u003cp id=\"9520\"\u003eApps targeting Android 16 can now be made available in Google Play. This release includes the latest fixes and optimizations. Consider testing your apps against behavior changes around \u003ccode\u003eJobScheduler\u003c/code\u003e, broadcasts, ART, intents, 16KB page size, accessibility, and Bluetooth.\u003c/p\u003e\u003cp id=\"fe6c\"\u003eNote that if you develop an SDK, library, tool, or game engine, it‚Äôs even more important to prepare any necessary updates now to prevent your downstream app and game developers from being blocked by compatibility issues and allow them to target the latest SDK features.\u003c/p\u003e\u003cp id=\"ac5a\"\u003eWhile the API and behaviors are final and we are very close to release, we‚Äôd still like you to \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ereport issues\u003c/a\u003e on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003efeedback page\u003c/a\u003e. The earlier we get your feedback, the better chance we‚Äôll be able to address it in this or a future release.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"eb2c\"\u003e\u003ca href=\"http://android-developers.googleblog.com/2025/04/play-console-insights.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFrom dashboards to deeper data: Improve app quality and performance with new Play Console insights üì±\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"323d\"\u003eThe Google Play Console has a redesigned app dashboard that centralizes quality-focused metrics, helping you improve app performance and user experience. The dashboard groups metrics into four core developer objectives:\u003c/p\u003e\u003cul\u003e\u003cli id=\"cbf0\"\u003etest and release\u003c/li\u003e\u003cli id=\"9879\"\u003emonitor and improve\u003c/li\u003e\u003cli id=\"b924\"\u003egrow users\u003c/li\u003e\u003cli id=\"950a\"\u003emonetize with Play\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c137\"\u003eA new notification center helps you stay up to date with your account and apps. New metrics include:\u003c/p\u003e\u003cul\u003e\u003cli id=\"3346\"\u003epre-review checks for incorrect edge-to-edge rendering\u003c/li\u003e\u003cli id=\"7038\"\u003ea low memory kill metric\u003c/li\u003e\u003cli id=\"6c11\"\u003eexcessive wake locks in Android vitals\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"3e8c\"\u003eTo stay informed about all the latest Play Console enhancements and easily find updates relevant to your workflow, explore our new \u003ca href=\"https://play.google.com/console/about/whats-new/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWhat‚Äôs new in Play Console\u003c/a\u003e page, where you can filter features by the four developer objectives.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"070b\"\u003e\u003ca href=\"http://android-developers.googleblog.com/2025/04/boost-app-performance-and-battery-life-android-vitals-metrics.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBoost app performance and battery life: New Android Vitals Metrics are here üîã\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"949d\"\u003eThe Android Developers blog announced new Android Vitals metrics aiming to help you improve app performance and battery life. The new metrics provide fleet-wide visibility into performance and battery life, equipping you with the data needed to diagnose and resolve performance bottlenecks. We just launched the first of these new metrics in beta: excessive \u003ca href=\"https://developer.android.com/develop/background-work/background-tasks/awake/wakelock\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewake locks\u003c/a\u003e. This metric directly addresses one of the most significant frustrations for Android users ‚Äî excessive battery drain. By optimizing your app‚Äôs wake lock behavior, you can significantly enhance battery life and user satisfaction.\u003c/p\u003e\u003cp id=\"49d1\"\u003eWe launched the \u003ca href=\"https://developer.android.com/topic/performance/vitals/excessive-wakelock\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eexcessive wake lock metric documentation\u003c/a\u003e to provide clear guidance on interpreting the metrics. Please check out this page and provide feedback with your use case on this new metric. Your input is invaluable in refining these metrics before their general availability.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"b1a3\"\u003e\u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/introducing-testing-at-scale-blog-series-8cd300ae2795\" data-discover=\"true\"\u003eIntroducing Testing at Scale blog series\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"94cf\"\u003eAndroid Developers Blog launches ‚ÄúTesting at Scale‚Äù series, featuring real-world testing strategies and tips from large apps. This series complements the new ‚ÄúTesting Strategies‚Äù documentation and offers opportunities for developers to contribute their own experiences. Check out the first two parts posted below:\u003c/p\u003e\u003ch2 id=\"8b03\"\u003e\u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/netflix-app-testing-at-scale-eb4ef6b40124\" data-discover=\"true\"\u003eNetflix App Testing At Scale\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"eb4e\"\u003eIn part 1 of the ‚ÄúTesting at Scale‚Äù series \u003ca href=\"https://kenkyee.medium.com/\" rel=\"noopener\"\u003e\u003cstrong\u003eKen Yee\u003c/strong\u003e\u003c/a\u003e, Senior Engineer at Netflix, tells us about the challenges of testing a playback app at a massive scale and how they have evolved the testing strategy.\u003c/p\u003e\u003cp id=\"8b86\"\u003eNetflix‚Äôs Android app development prioritizes comprehensive testing, especially on physical devices due to wide device support. They‚Äôve moved to native and are adopting Jetpack Compose. Their large team uses unit tests (Strikt, Turbine, Mockito, Hilt, Robolectric), screenshot tests (Paparazzi, Espresso accessibility), and device tests (Espresso, UIAutomator). Minimizing flakiness (state, async code) is key. They use a dedicated device lab and are exploring emulators, Roborazzi, and modular ‚Äúdemo apps‚Äù to improve testing efficiency. The team has created a custom toolchain to isolate and notify engineers of flaky tests. Feature developers own all aspects of testing.\u003c/p\u003e\u003ch2 id=\"c614\"\u003e\u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/how-dropbox-leverages-testing-to-maintain-high-level-of-trust-at-scale-b7b1bdf6161e\" data-discover=\"true\"\u003eHow Dropbox leverages testing to maintain high level of trust at scale\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"2f6d\"\u003eIn part 2 of the ‚ÄúTesting at Scale‚Äù series \u003ca href=\"https://social.harter.us/@ryan\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eRyan Harter\u003c/a\u003e, Staff Engineer at Dropbox, shares how the shape of Dropbox‚Äôs testing pyramid changed over time, and what tools they use to get timely feedback.\u003c/p\u003e\u003cp id=\"5c32\"\u003eDropbox‚Äôs Android app development team utilizes a multi-faceted testing approach, emphasizing unit tests with tools like JUnit and Paparazzi for screenshot testing. They‚Äôre reinvesting in end-to-end tests, leveraging their own Dropshots library for full instrumentation testing and are experimenting with Compose Preview Screenshot Testing. They also integrate manual testing with web-based tools and third-party services for scenarios difficult to automate. They are expanding Dropshots to support multiple device configurations.\u003c/p\u003e\u003ch2 id=\"ea91\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/versions/all-channel\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroidX Releases üöÄ\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"dc4d\"\u003e\u003cstrong\u003eKey Highlights for Compose Developers:\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"2784\"\u003eWe have a bunch of new Compose APIs in alpha:\u003c/p\u003e\u003cp id=\"e5aa\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-animation#1.9.0-alpha01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Animation Version 1.9.0-alpha01\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"6d98\"\u003e\u003ccode\u003eTabRow\u003c/code\u003e and \u003ccode\u003eScrollableTabRow\u003c/code\u003e have been deprecated in favor of Primary and Secondary variants of each which are more performant and accurate to spec.\u003c/li\u003e\u003cli id=\"751d\"\u003eWe added \u003ccode\u003eLocalResources\u003c/code\u003e composition local to query Resources. Calling \u003ccode\u003eLocalResources.current\u003c/code\u003e will recompose when the configuration changes, so calls to APIs such as \u003ccode\u003estringResource()\u003c/code\u003e will return updated values.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"130b\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.9.0-alpha01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Foundation Version 1.9.0-alpha01\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"1a6a\"\u003eBreaking change: \u003ccode\u003eclickable\u003c/code\u003e, \u003ccode\u003ecombinedClickable\u003c/code\u003e, \u003ccode\u003eselectable\u003c/code\u003e, \u003ccode\u003etoggleable\u003c/code\u003e, and \u003ccode\u003etriStateToggleable\u003c/code\u003e overloads without an Indication parameter now only support \u003ccode\u003eIndicationNodeFactory\u003c/code\u003e instances provided using \u003ccode\u003eLocalIndication\u003c/code\u003e. This change will apply when you recompile your usages of these modifiers using this version of Compose and is needed to enable improved performance, and allow Composable functions using these modifiers to skip during recomposition.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"06c8\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-material#1.9.0-alpha01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Material Version 1.9.0-alpha01\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"56bf\"\u003eText field decoration box APIs are no longer experimental\u003c/li\u003e\u003cli id=\"6164\"\u003e\u003ccode\u003erunWithTimingDisabled\u003c/code\u003e is deprecated in favor of \u003ccode\u003erunWithMeasurementDisabled\u003c/code\u003e, which more clearly describes the behavior ‚Äî all metrics are paused.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"75dc\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.9.0-alpha01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Runtime Version 1.9.0-alpha01\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"d8fc\"\u003e\u003ccode\u003ecurrentCompositeKeyHash\u003c/code\u003e is deprecated. Use \u003ccode\u003ecurrentCompositeKeyHashCode\u003c/code\u003e instead.\u003c/li\u003e\u003cli id=\"d18d\"\u003e\u003ccode\u003e@Stable\u003c/code\u003e, \u003ccode\u003e@Immutable\u003c/code\u003e, and \u003ccode\u003e@StableMarker\u003c/code\u003e have been moved to runtime-annotation (in a compatible way). You can now depend on runtime-annotation if you want to use these annotations from libraries that do not depend on compose.\u003c/li\u003e\u003cli id=\"7e7b\"\u003e\u003ccode\u003e@RememberInComposition\u003c/code\u003e was added ‚Äî this is an annotation that can mark constructors, functions, and property getters, to indicate that they must not be called directly inside composition, without being remembered.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a63e\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-ui#1.9.0-alpha01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose UI Version 1.9.0-alpha01\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"aba9\"\u003e\u003ccode\u003eandroidx.compose.ui.LocalSavedStateRegistryOwner\u003c/code\u003e is deprecated in favor of \u003ccode\u003eandroidx.savedstate.compose.LocalSavedStateRegistryOwner.\u003c/code\u003e\u003c/li\u003e\u003cli id=\"ad4b\"\u003e\u003ccode\u003eModifier.keepScreenOn\u003c/code\u003e was added to set the display to not sleep while present\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8dae\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/customview#customview-1.2.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCustomView Version 1.2.0\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/customview#customview-poolingcontainer-1.1.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCustomView-Poolingcontainer Version 1.1.0\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/leanback#1.2.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLeanback Leanback-Preference, Version 1.2.0\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/leanback#leanback-grid-1.0.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLeanback-Grid Version 1.0.0\u003c/a\u003e\u003c/code\u003e, \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/leanback#1.1.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLeanback-Paging Leanback-Tab Version 1.1.0\u003c/a\u003e\u003c/code\u003e, and \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/print#1.1.0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePrint Version 1.1.0\u003c/a\u003e\u003c/code\u003e are all released in stable.\u003c/p\u003e\u003ch2 id=\"3094\"\u003eNow then‚Ä¶ üëã\u003c/h2\u003e\u003cp id=\"5d3b\"\u003eThat‚Äôs it for this edition, with \u003ca href=\"http://android-developers.googleblog.com/2025/04/google-io-program-lineup-revealed.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGoogle IO program lineup\u003c/a\u003e, \u003ca href=\"http://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetpack Compose 1.8\u003c/a\u003e, \u003ca href=\"http://android-developers.googleblog.com/2025/04/play-console-insights.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePlay Console insights\u003c/a\u003e \u003ca href=\"http://android-developers.googleblog.com/2025/04/boost-app-performance-and-battery-life-android-vitals-metrics.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Vitals Metrics\u003c/a\u003e, \u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/introducing-testing-at-scale-blog-series-8cd300ae2795\" data-discover=\"true\"\u003eTesting at Scale blog series\u003c/a\u003e, and the latest in AndroidX!\u003c/p\u003e\u003cp id=\"83a0\"\u003eCheck back soon for your next update from the Android developer universe!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-05-09T15:58:03.273Z",
  "modifiedTime": null
}
