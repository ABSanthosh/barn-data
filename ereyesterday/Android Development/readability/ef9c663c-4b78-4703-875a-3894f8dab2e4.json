{
  "id": "ef9c663c-4b78-4703-875a-3894f8dab2e4",
  "title": "Google Maps in Jetpack Compose: Polylines",
  "link": "https://joebirch.co/android/google-maps-in-jetpack-compose-polylines/",
  "description": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this... Continue reading â†’",
  "author": "hitherejoe",
  "published": "Fri, 22 Nov 2024 09:55:11 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose",
    "Android App Development",
    "Android Apps",
    "Android Development",
    "AndroidDev",
    "App Development",
    "jetpack compose",
    "jetpackcompose",
    "Mobile App Development"
  ],
  "byline": "by hitherejoe",
  "length": 5095,
  "excerpt": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In th",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package. Now that we have theÂ basics down from aÂ previous post, weâ€™re going to dive into the Polyline composable and learn how we can draw coordinate-based lines on our map. Looking to learn more Jetpack Compose? The video course forÂ Practical Jetpack ComposeÂ is now available ðŸš€ The Polyline Composable In theÂ previous postÂ we looked at the Circle composable, which is used to draw circles and indicate contextual information on maps. When it comes to the Polyline composable, we can use this to display information on how locations connect within a map, which would be routes of some kind. The Polyline is a simple composable, taking a list of LatLng instance and drawing a line to connect the coordinates. Â Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation. @Composable @GoogleMapComposable public fun Polyline( points: List\u003cLatLng\u003e, clickable: Boolean = false, color: Color = Color.Black, endCap: Cap = ButtCap(), geodesic: Boolean = false, jointType: Int = JointType.DEFAULT, pattern: List\u003cPatternItem\u003e? = null, startCap: Cap = ButtCap(), tag: Any? = null, visible: Boolean = true, width: Float = 10f, zIndex: Float = 0f, onClick: (Polyline) -\u003e Unit = {} ) As we can see from this composable, there is a collection of arguments that allow us to customise our Polyline. To start with, there is the required points argument â€“ this must be provided so that a line can be drawn between the provided coordinates. To be able to satisfy this argument, letâ€™s start by defining a collection of LatLng references. val routeCoordinates = listOf( LatLng(53.3811, -1.4701), LatLng(52.5868, -2.5257), LatLng(51.8994, -2.0783), LatLng(51.4551, -0.9787) ) With this in place, we can go ahead and compose a Polyline inside of our GoogleMap instance. Polyline( points = routeCoordinates ) With this in place, weâ€™ll now be able to see a Polyline displayed on our map. Using the provided coordinates, a line is being used to connect these four different points. By default, the color argument of the Polyline will default to Black when not provided. For the current theme of our map, this isnâ€™t very visible. To improve things here, weâ€™ll go ahead and override this color. Polyline( points = routeCoordinates, color = Color.White ) With this in place, we can now see that our line has greater visibility on our map. If we wish to increase this visibility further, we can utilise the width argument to increase the width use when drawing the line on the map. In some cases where there is a lot of information or existing drawing details on a map, a thicker line can help to increase the visibility of the drawn line. Polyline( points = routeCoordinates, color = Color.White, width = 16f ) In some cases, the default drawing style of the line may not match our requirements. When it comes to how this line is represented on our map, we can use the pattern argument to define how the line is to be drawn. This is done by providing a list of PatternItem instances â€“ so for example, we can draw a dashed line by using the following code: Polyline( points = routeCoordinates, color = Color.White, width = 16f, pattern = listOf( Dash(15f), Gap(15f) ) ) Now that we have this pattern defined, we can see the pattern being applied when drawing the Polyline on our map. When connecting locations on a map, differently styled lines can help to portray different information such as route availability or preference. Aside from controlling the visual constraints of our Polyline, we can also listen for click events on the line â€“ this could be useful in case where we want to show further information for the clicked line. To enable this we need to enable the interaction by using the clickable argument, followed by handling the click interaction via the onClick lambda. Polyline( ..., clickable = true, onClick = { line -\u003e // handle click event } ) In this blog post weâ€™ve taken a quick look at the Polyline composable, a simple composable which is can be used to draw coordinate-based lines on a map. Weâ€™ve not only learnt how we can style this composable to adhere to the required look/feel of our application, but also how we can enable click events to show further context on the selected line. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ GoogleMapComposableÂ content scope.",
  "image": "https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we have theÂ \u003ca rel=\"noreferrer noopener\" href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-getting-started/\" target=\"_blank\"\u003ebasics down from aÂ previous post\u003c/a\u003e, weâ€™re going to dive into the Polyline composable and learn how we can draw coordinate-based lines on our map.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn more Jetpack Compose? The video course forÂ \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003eÂ is now available ðŸš€\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eThe Polyline Composable\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn theÂ \u003ca rel=\"noreferrer noopener\" href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-circles/\" target=\"_blank\"\u003eprevious post\u003c/a\u003eÂ we looked at the Circle composable, which is used to draw circles and indicate contextual information on maps. When it comes to the Polyline composable, we can use this to display information on how locations connect within a map, which would be routes of some kind. The Polyline is a simple composable, taking a list of \u003cstrong\u003eLatLng\u003c/strong\u003e instance and drawing a line to connect the coordinates. Â Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e@Composable\n@GoogleMapComposable\npublic fun Polyline(\n    points: List\u0026lt;LatLng\u0026gt;,\n    clickable: Boolean = false,\n    color: Color = Color.Black,\n    endCap: Cap = ButtCap(),\n    geodesic: Boolean = false,\n    jointType: Int = JointType.DEFAULT,\n    pattern: List\u0026lt;PatternItem\u0026gt;? = null,\n    startCap: Cap = ButtCap(),\n    tag: Any? = null,\n    visible: Boolean = true,\n    width: Float = 10f,\n    zIndex: Float = 0f,\n    onClick: (Polyline) -\u0026gt; Unit = {}\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs we can see from this composable, there is a collection of arguments that allow us to customise our Polyline. To start with, there is the required \u003cstrong\u003epoints\u003c/strong\u003e argument â€“ this must be provided so that a line can be drawn between the provided coordinates. To be able to satisfy this argument, letâ€™s start by defining a collection of \u003cstrong\u003eLatLng\u003c/strong\u003e references.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval routeCoordinates = listOf(\n    LatLng(53.3811, -1.4701), \n    LatLng(52.5868, -2.5257),\n    LatLng(51.8994, -2.0783),\n    LatLng(51.4551, -0.9787)\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we can go ahead and compose a Polyline inside of our \u003cstrong\u003eGoogleMap\u003c/strong\u003e instance.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolyline(\n    points = routeCoordinates\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, weâ€™ll now be able to see a Polyline displayed on our map. Using the provided coordinates, a line is being used to connect these four different points.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-646x1024.png\" alt=\"\" width=\"485\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-646x1024.png 646w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-189x300.png 189w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-768x1217.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-969x1536.png 969w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-1292x2048.png 1292w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-500x792.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-150x238.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-1200x1902.png 1200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-400x634.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-800x1268.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730-200x317.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190730.png 1344w\" sizes=\"(max-width: 485px) 100vw, 485px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eBy default, the \u003cstrong\u003ecolor\u003c/strong\u003e argument of the Polyline will default to Black when not provided. For the current theme of our map, this isnâ€™t very visible. To improve things here, weâ€™ll go ahead and override this color.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolyline(\n    points = routeCoordinates,\n    color = Color.White\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we can now see that our line has greater visibility on our map.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-695x1024.png\" alt=\"\" width=\"521\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-695x1024.png 695w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-204x300.png 204w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-768x1132.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-1042x1536.png 1042w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-500x737.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-150x221.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-1200x1769.png 1200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-400x590.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-800x1179.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639-200x295.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190639.png 1344w\" sizes=\"(max-width: 521px) 100vw, 521px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIf we wish to increase this visibility further, we can utilise the \u003cstrong\u003ewidth\u003c/strong\u003e argument to increase the width use when drawing the line on the map. In some cases where there is a lot of information or existing drawing details on a map, a thicker line can help to increase the visibility of the drawn line.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolyline(\n    points = routeCoordinates,\n    color = Color.White,\n    width = 16f\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-671x1024.png\" alt=\"\" width=\"503\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-671x1024.png 671w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-197x300.png 197w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-768x1172.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-1007x1536.png 1007w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-1342x2048.png 1342w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-500x763.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-150x229.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-1200x1831.png 1200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-400x610.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-800x1221.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714-200x305.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_190714.png 1344w\" sizes=\"(max-width: 503px) 100vw, 503px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIn some cases, the default drawing style of the line may not match our requirements. When it comes to how this line is represented on our map, we can use the \u003cstrong\u003epattern\u003c/strong\u003e argument to define how the line is to be drawn. This is done by providing a list of PatternItem \u003cstrong\u003einstances\u003c/strong\u003e â€“ so for example, we can draw a dashed line by using the following code:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolyline(\n    points = routeCoordinates,\n    color = Color.White,\n    width = 16f,\n    pattern = listOf(\n        Dash(15f),\n        Gap(15f)\n    )\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow that we have this pattern defined, we can see the pattern being applied when drawing the Polyline on our map. When connecting locations on a map, differently styled lines can help to portray different information such as route availability or preference.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-700x1024.png\" alt=\"\" width=\"525\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-700x1024.png 700w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-205x300.png 205w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-768x1124.png 768w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-1049x1536.png 1049w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-500x732.png 500w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-150x220.png 150w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-1200x1756.png 1200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-400x585.png 400w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-800x1171.png 800w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419-200x293.png 200w, https://joebirch.co/wp-content/uploads/2024/11/Screenshot_20241118_191419.png 1333w\" sizes=\"(max-width: 525px) 100vw, 525px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAside from controlling the visual constraints of our Polyline, we can also listen for click events on the line â€“ this could be useful in case where we want to show further information for the clicked line. To enable this we need to enable the interaction by using the \u003cstrong\u003eclickable\u003c/strong\u003e argument, followed by handling the click interaction via the \u003cstrong\u003eonClick\u003c/strong\u003e lambda.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolyline(\n    ...,\n    clickable = true,\n    onClick = { line -\u0026gt;\n        // handle click event \n    }\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIn this blog post weâ€™ve taken a quick look at the Polyline composable, a simple composable which is can be used to draw coordinate-based lines on a map. Weâ€™ve not only learnt how we can style this composable to adhere to the required look/feel of our application, but also how we can enable click events to show further context on the selected line. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003eÂ content scope.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-11-22T09:55:11Z",
  "modifiedTime": "2024-11-22T09:55:12Z"
}
