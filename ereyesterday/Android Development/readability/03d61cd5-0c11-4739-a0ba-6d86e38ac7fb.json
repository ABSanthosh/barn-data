{
  "id": "03d61cd5-0c11-4739-a0ba-6d86e38ac7fb",
  "title": "Building \u0026 Flashing a Custom AOSP GSI on Pixel (ARM64) || Android 16",
  "link": "https://proandroiddev.com/building-flashing-a-custom-aosp-gsi-on-pixel-arm64-android-16-1313b4211c53?source=rss----c72404660798---4",
  "description": "",
  "author": "Jai Goyal",
  "published": "Wed, 18 Jun 2025 18:26:30 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-16",
    "aosp",
    "android",
    "android-app-development",
    "androiddev"
  ],
  "byline": "Jai Goyal",
  "length": 2265,
  "excerpt": "Hereâ€™s a complete step-by-step article-style guide for building and flashing a custom AOSP GSI (arm64) onto any bootloader-unlocked device, we will do it for Pixel here. This article includes buildâ€¦",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Photo by Samuel Angor on UnsplashHereâ€™s a complete step-by-step article-style guide for building and flashing a custom AOSP GSI (arm64) onto any bootloader-unlocked device, we will do it for Pixel here. This article includes build setup, flashing, key dos and donâ€™ts, and common pitfalls.Running a Generic System Image (GSI) on an Android device is a powerful way (way more powerful than an emulator) to test AOSP across hardware, vendors, and configurations. This guide walks you through:Building your GSI (system.img and vbmeta.img)Flashing the device with stock firmware (where you can unlock the bootloader) â€” many OEMs donâ€™t allow users to unlock the bootloader. We are using Pixel anyway, and we can unlock the bootloader in a Pixel.Replacing the system partition with your custom-made GSIPrerequisitesAn Android phone withthe bootloader unlockedUbuntu or Debian-based Linux host machineadb, fastboot, and repo installedRead the last section of this article (DOs and DONâ€™Ts)Step 1: Set up the AOSP Build Environmentsudo apt-get updatesudo apt-get install git openjdk-17-jdk python3 \\ repo make bc bison curl flex g++ gperf \\ libncurses5-dev libssl-dev libxml2-utils \\ unzip zip zlib1g-dev ccache lzopCreate a working directory:mkdir ~/aosp-gsi \u0026\u0026 cd ~/aosp-gsirepo init -u https://android.googlesource.com/platform/manifest -b android-16.0.0_r1repo sync -c -j$(nproc)Step 2: Build the GSIðŸ”¹ Source the environmentsource build/envsetup.shðŸ”¹ Choose the correct targetFor 64-bit A/B devices (most modern Pixels):lunch aosp_arm64-\u003c\u003e-\u003c\u003eðŸ”¹ Build the system imagemake -j$(nproc) systemimageðŸ”¹ Build vbmetamake -j$(nproc) vbmetaimageâœ… Output locationout/target/product/generic_arm64/system.imgout/target/product/generic_arm64/vbmeta.imgStep 3: Flash Stock Factory Image (with vendor, boot, etc.)Visit: https://flash.android.comConnect your Pixel via USB (enable USB debugging)Follow the site instructionsUnlock the bootloader if promptedSelect the correct factory imageFlash with --wipe enabledðŸ’¡ This step resets your device and installs factory boot, vendor, and recovery partitions â€” crucial for GSI stability.Step 4: Replace with Your GSINow that the Pixel has factory vendor/boot, youâ€™re ready to flash your GSI.ðŸ”¹ Reboot to fastboot modeadb reboot bootloader",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*dUXpP2OCgYTAMd4_LNADUg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://goyaljai.medium.com/?source=post_page---byline--1313b4211c53---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Jai Goyal\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*tSxS5GdvIPeFdDBw7AFZjg.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@sammysays___?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSamuel Angor\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"43c3\"\u003eHereâ€™s a complete \u003cstrong\u003estep-by-step article-style guide\u003c/strong\u003e for building and flashing a \u003cstrong\u003ecustom AOSP GSI\u003c/strong\u003e (\u003ccode\u003earm64\u003c/code\u003e) onto any bootloader-unlocked device, we will do it for Pixel here. This article includes build setup, flashing, key dos and donâ€™ts, and common pitfalls.\u003c/p\u003e\u003cp id=\"e1db\"\u003eRunning a \u003cstrong\u003eGeneric System Image (GSI)\u003c/strong\u003e on an Android device is a powerful way (way more powerful than an emulator) to test AOSP across hardware, vendors, and configurations. This guide walks you through:\u003c/p\u003e\u003col\u003e\u003cli id=\"6d25\"\u003eBuilding your GSI (\u003ccode\u003esystem.img\u003c/code\u003e and \u003ccode\u003evbmeta.img\u003c/code\u003e)\u003c/li\u003e\u003cli id=\"1a61\"\u003eFlashing the device with stock firmware (where you can unlock the bootloader) â€” many OEMs donâ€™t allow users to unlock the bootloader. We are using Pixel anyway, and we can unlock the bootloader in a Pixel.\u003c/li\u003e\u003cli id=\"91eb\"\u003eReplacing the system partition with your custom-made GSI\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"e33f\"\u003ePrerequisites\u003c/h2\u003e\u003cul\u003e\u003cli id=\"1a78\"\u003eAn Android phone withthe \u003cstrong\u003ebootloader unlocked\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"c356\"\u003eUbuntu or Debian-based Linux host machine\u003c/li\u003e\u003cli id=\"7f0a\"\u003e\u003ccode\u003eadb\u003c/code\u003e, \u003ccode\u003efastboot\u003c/code\u003e, and \u003ccode\u003erepo\u003c/code\u003e installed\u003c/li\u003e\u003cli id=\"96c5\"\u003eRead the last section of this article \u003cstrong\u003e(\u003c/strong\u003eDOs and DONâ€™Ts\u003cstrong\u003e)\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"107e\"\u003eStep 1: Set up the AOSP Build Environment\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"fe31\"\u003esudo apt-get update\u003cbr/\u003esudo apt-get install git openjdk-17-jdk python3 \\\u003cbr/\u003e    repo make bc bison curl flex g++ gperf \\\u003cbr/\u003e    libncurses5-dev libssl-dev libxml2-utils \\\u003cbr/\u003e    unzip zip zlib1g-dev ccache lzop\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"270d\"\u003eCreate a working directory:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c16a\"\u003emkdir ~/aosp-gsi \u0026amp;\u0026amp; cd ~/aosp-gsi\u003cbr/\u003erepo init -u https://android.googlesource.com/platform/manifest -b android-16.0.0_r1\u003cbr/\u003erepo sync -c -j$(nproc)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"6902\"\u003eStep 2: Build the GSI\u003c/h2\u003e\u003ch2 id=\"f05a\"\u003eðŸ”¹ Source the environment\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"f821\"\u003esource build/envsetup.sh\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"e173\"\u003eðŸ”¹ Choose the correct target\u003c/h2\u003e\u003cp id=\"d005\"\u003eFor 64-bit A/B devices (most modern Pixels):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6178\"\u003elunch aosp_arm64-\u0026lt;\u0026gt;-\u0026lt;\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"eb81\"\u003eðŸ”¹ Build the system image\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"bd2f\"\u003emake -j$(nproc) systemimage\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"20a0\"\u003eðŸ”¹ Build vbmeta\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"a1f6\"\u003emake -j$(nproc) vbmetaimage\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"8cd8\"\u003eâœ… Output location\u003c/h2\u003e\u003cul\u003e\u003cli id=\"d3eb\"\u003e\u003ccode\u003eout/target/product/generic_arm64/system.img\u003c/code\u003e\u003c/li\u003e\u003cli id=\"f711\"\u003e\u003ccode\u003eout/target/product/generic_arm64/vbmeta.img\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8f8a\"\u003eStep 3: Flash Stock Factory Image (with vendor, boot, etc.)\u003c/h2\u003e\u003cp id=\"462e\"\u003eVisit: \u003ca href=\"https://flash.android.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://flash.android.com\u003c/a\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"e1ad\"\u003eConnect your Pixel via USB (enable USB debugging)\u003c/li\u003e\u003cli id=\"4db9\"\u003eFollow the site instructions\u003c/li\u003e\u003cli id=\"8958\"\u003eUnlock the bootloader if prompted\u003c/li\u003e\u003cli id=\"efc6\"\u003eSelect the correct factory image\u003c/li\u003e\u003cli id=\"0167\"\u003eFlash with \u003ccode\u003e\u003cstrong\u003e--wipe\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e enabled\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"889c\"\u003eðŸ’¡ This step \u003cstrong\u003eresets your device and installs factory boot, vendor, and recovery partitions\u003c/strong\u003e â€” crucial for GSI stability.\u003c/p\u003e\u003ch2 id=\"71dc\"\u003eStep 4: Replace with Your GSI\u003c/h2\u003e\u003cp id=\"9c1b\"\u003eNow that the Pixel has factory vendor/boot, youâ€™re ready to flash your GSI.\u003c/p\u003e\u003ch2 id=\"5d28\"\u003eðŸ”¹ Reboot to fastboot mode\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"0199\"\u003eadb reboot bootloader\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-06-18T18:26:30.475Z",
  "modifiedTime": null
}
