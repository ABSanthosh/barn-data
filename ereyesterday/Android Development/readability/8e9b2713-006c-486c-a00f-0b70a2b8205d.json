{
  "id": "8e9b2713-006c-486c-a00f-0b70a2b8205d",
  "title": "Thoughts on Kotlin Multi Platform (KMP)",
  "link": "https://blog.kotlin-academy.com/thoughts-on-kotlin-multi-platform-kmp-04df1f109473?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Benjamin",
  "published": "Tue, 29 Oct 2024 06:37:49 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "multiplatform",
    "kotlin",
    "ios",
    "mobile-app-development",
    "android"
  ],
  "byline": "Benjamin",
  "length": 8034,
  "excerpt": "I built my first android app in 2013. A friend shared a project he‚Äôd followed and replicated online (I believe it was from thenewboston). Being curious, i reached out and eventually followed suit‚Ä¶",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "I built my first android app in 2013. A friend shared a project he‚Äôd followed and replicated online (I believe it was from thenewboston). Being curious, i reached out and eventually followed suit. Having a working android app built on my personal computer and running on my personal android device was thrilling. This was the ‚Äúendless possibilities‚Äù moment for me.As an undergraduate at the time that had taken java as part of the curriculum, the prospect of writing android apps seemed sustainable. Classmates and friends routinely tossed ideas and conversation would go like ‚Äúan app that does‚Ä¶‚Äù, ‚Äúan app that can‚Ä¶‚Äù and so on.Very quickly, the inherent limitation of being a one platform developer became apparent.Global Smartphone market distribution ~ Source: statista.comThe graph above illustrates the prevailing climate conditions at that time. Anybody on campus wishing to make a statement through an accessory/gadget had either an iPhone or a Samsung mobile device.The two dominant platforms in the mobile market have very different development environment and technology stacks. Fundamental factors such as programming languages, development environment, runtime environments, as well as the platforms‚Äô publishers‚Äô developer programs are significantly different.Consequently the reality exists where the the type of apps you can build depend on the programming languages you are familiar with and the type of computer you can access. Building an app for one platform was hard enough. Replicating mobile app development efforts to capture most of the mobile audience was daunting ‚Äî a problem plaguing development efforts till today.To combat this issue, the software development community has introduced many frameworks that essentially facilitate a singular development effort and the ability to deploy to both of the major mobile platforms. In some cases including desktop as well. Some examples include ionic, react-native, phonegap, and xamarin. Note that this list isn‚Äôt exhaustive and some of the frameworks have been sunsetted. Check here for more examples. The different approaches employed by these frameworks, their prerequisites, setup processes and the intricacies of using them as well as implications for the software product are out of scope of this article.This article considers my first experience with Kotlin MultiPlatform(KMP) as a basis of my impression, thoughts and aspirations for the technology. Critical factors in this consideration include the starter guide provided by JetBrains, the resulting multi-platform mobile app, the architecture of the mobile app project and my feel after going through that process.CallOuts!First things first, to unlock the power to develop for the 2 giants, you are better off owning an apple computer. This makes sense to me as the approach provided by the KMP technology is to retain the native experience; and there still exists the closed ecosystem of apple software development.However, there is a benefit for software engineers who have prior experience with native development on either platform. This makes the process of getting started with KMP much easier to understand and follow. While the reasoning for some steps might not have been explicitly explained, they would make much sense to the experienced developer.Now the important caveat! Kotlin is a pre-requisite üòÆ. Needless to say, it won‚Äôt make sense without a sound understanding of the kotlin language.The KMP Starter GuideA guide is provided to walk individuals through the process of groundbreaking. It contains multiple pages and subsections, as well as information detailing the ‚Äòwhy‚Äô, case studies. and most importantly how to get started. The website also contains multiple links to relevant resources and FAQs.There is a significant amount of information on the website. One can expect to spend multiple hours perusing it while effecting the actions detailed there in. You might benefit from a tactical plan of scoping the structure of the website and creating mile stones based on preference to get you through it all. Take vreaks and enjoy the wins as you progress and maintain energy to power through the guide.The Starter AppA milestone on the starter journey is the main app that does a greeting. It evolves as you journey through the many concepts being introduced.One thing the app illustrates well is the approach provided for achieving multi-platform apps. More details are highlighted in the architecture section below; however the key factor is the encapsulation of common software and code artifacts that do not need to be duplicated. Developers are still required to write the platform specific code ‚Äî UI code is an example of this.The Project ArchitectureKMP App architecture ~ Source: JetBrainsThe image above is a simplified view of the project landscape. Common software and code elements are located in the shared module making them accessible to both mobile clients. An easy example of this would be business logic. Functions executing specific tasks can be nested in here and can be used downstream by platform specific code.It should be noted that for the iOS side, the platform specific code remains Swift. KMP does an impressive job of making your logic written in kotlin available natively in swift. As an example: the guide provides this snippet that is iterated on and shared by both platformsimport kotlin.random.Randomclass Greeting { private val platform: Platform = getPlatform() fun greet(): String { val firstWord = if (Random.nextBoolean()) \"Hi!\" else \"Hello!\" return \"$firstWord Guess what this is! \u003e ${platform.name.reversed()}!\" }}When the ‚Äòmagic‚Äô (read as ‚Äòbuild‚Äô) happens, an Objective-c declaration is available for use the iOS specific code and a similar native implementation is available for android as well.My feel for the processThere is a lot of steps involved in getting it to work. However, it works. The apps are native. I have tried a few of the previous attempts at multi-platform mobile development and it quickly becomes apparent the reality of tradeoffs that come with the domain.In short, there is no perfect solution. The tradeoffs can be on the development end ‚Äî influencing how you develop your multi-platform apps. For example, some multi-platform apps require you to write in none mobile native languages and adopt a significantly different dev environment. Also with earlier attempts, the tradeoffs spilled unto the end product. A symptom of this is observed in mobile apps that appear to lack the native look and feel of common UI elements(text input, buttons) synonymous with the platform it is running on. Instead, the mobile app resembles a mobile version of a website in common cases.I can appreciate KMP tackling a lot of the problems stated above through the native approach adopted. Through the KMP approach, you in effect still build a native android app and a native ios app ‚Äî using the same environment provided by the platforms‚Äô publishers. This preserves the look and feel of the UI while relieving developers the pain of duplicating and porting business logic code. Further benefits of this can be identified in the reduction of inconsistent app behavior and increase in parity between the resulting apps.While I mentioned earlier the significant number of steps involved in the setup, every step has a purpose. It should be noted that the amount of steps in starting a new KMP application become noticeable on comparison with a siloed approach. They setup steps aren‚Äôt overwhelming.Speed is also an important factor for consideration. During the course of building the starter app, the development and build speed remained a non-issue(Granted, I utilized a macbook with apple silicon). Iterating, building and running an app on both android and ios emulators locally on a computer occurred within a reasonable time frame. It would be of little wonder that a well architected mobile application targeting both android and ios and built with KMP could realize gains in overall development speeds.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*VjgZCMEELMLLJ9TQDboKQQ.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@benadepoju?source=post_page---byline--04df1f109473--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Benjamin\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*-I3xYE7sEHf-QU5s02AQ8A.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://blog.kotlin-academy.com/?source=post_page---byline--04df1f109473--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Kt. Academy\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*2grDGjzH0tfX8XiaF4Izaw.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a8b6\"\u003eI built my first android app in 2013. A friend shared a project he‚Äôd followed and replicated online (I believe it was from \u003ca href=\"https://www.google.com/search?q=thenewboston\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethenewboston\u003c/a\u003e). Being curious, i reached out and eventually followed suit. Having a working android app built on my personal computer and running on my personal android device was thrilling. This was the ‚Äúendless possibilities‚Äù moment for me.\u003c/p\u003e\u003cp id=\"8309\"\u003eAs an undergraduate at the time that had taken java as part of the curriculum, the prospect of writing android apps seemed sustainable. Classmates and friends routinely tossed ideas and conversation would go like \u003cem\u003e‚Äúan app that does‚Ä¶‚Äù\u003c/em\u003e, \u003cem\u003e‚Äúan app that can‚Ä¶‚Äù\u003c/em\u003e and so on.\u003c/p\u003e\u003cp id=\"f431\"\u003eVery quickly, the inherent limitation of being a one platform developer became apparent.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eGlobal Smartphone market distribution ~ Source: \u003ca href=\"https://www.statista.com/statistics/271492/global-market-share-held-by-leading-smartphone-vendors/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003estatista.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"2047\"\u003eThe graph above illustrates the prevailing climate conditions at that time. Anybody on campus wishing to make a statement through an accessory/gadget had either an iPhone or a Samsung mobile device.\u003c/p\u003e\u003cp id=\"e558\"\u003eThe two dominant platforms in the mobile market have very different development environment and technology stacks. Fundamental factors such as programming languages, development environment, runtime environments, as well as the platforms‚Äô publishers‚Äô developer programs are significantly different.\u003c/p\u003e\u003cp id=\"5f44\"\u003eConsequently the reality exists where the the type of apps you can build depend on the programming languages you are familiar with and the type of computer you can access. Building an app for one platform was hard enough. Replicating mobile app development efforts to capture most of the mobile audience was daunting ‚Äî a problem plaguing development efforts till today.\u003c/p\u003e\u003cp id=\"8662\"\u003eTo combat this issue, the software development community has introduced many frameworks that essentially facilitate a singular development effort and the ability to deploy to both of the major mobile platforms. In some cases including desktop as well. Some examples include \u003cem\u003eionic\u003c/em\u003e, \u003cem\u003ereact-native\u003c/em\u003e, \u003cem\u003ephonegap\u003c/em\u003e, and \u003cem\u003examarin\u003c/em\u003e. Note that this list isn‚Äôt exhaustive and some of the frameworks have been sunsetted. Check \u003ca href=\"https://appinventiv.com/blog/cross-platform-app-frameworks/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e for more examples. The different approaches employed by these frameworks, their prerequisites, setup processes and the intricacies of using them as well as implications for the software product are out of scope of this article.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"8e61\"\u003eThis article considers my first experience with Kotlin MultiPlatform(KMP) as a basis of my impression, thoughts and aspirations for the technology. Critical factors in this consideration include the starter guide provided by \u003ca href=\"https://www.jetbrains.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetBrains\u003c/a\u003e, the resulting multi-platform mobile app, the architecture of the mobile app project and my feel after going through that process.\u003c/p\u003e\u003ch2 id=\"3559\"\u003eCallOuts!\u003c/h2\u003e\u003cp id=\"dd06\"\u003eFirst things first, to unlock the power to develop for the 2 giants, you are better off owning an apple computer. This makes sense to me as the approach provided by the KMP technology is to retain the native experience; and there still exists the closed ecosystem of apple software development.\u003c/p\u003e\u003cp id=\"c8ed\"\u003eHowever, there is a benefit for software engineers who have prior experience with native development on either platform. This makes the process of getting started with KMP much easier to understand and follow. While the reasoning for some steps might not have been explicitly explained, they would make much sense to the experienced developer.\u003c/p\u003e\u003cp id=\"4a4f\"\u003eNow the important caveat! Kotlin is a pre-requisite üòÆ. Needless to say, it won‚Äôt make sense without a sound understanding of the kotlin language.\u003c/p\u003e\u003ch2 id=\"e857\"\u003eThe KMP Starter Guide\u003c/h2\u003e\u003cp id=\"05d4\"\u003eA \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eguide\u003c/a\u003e is provided to walk individuals through the process of groundbreaking. It contains multiple pages and subsections, as well as information detailing the ‚Äòwhy‚Äô, case studies. and most importantly how to get started. The website also contains multiple links to relevant resources and FAQs.\u003c/p\u003e\u003cp id=\"14fe\"\u003eThere is a significant amount of information on the website. One can expect to spend multiple hours perusing it while effecting the actions detailed there in. You might benefit from a tactical plan of scoping the structure of the website and creating mile stones based on preference to get you through it all. Take vreaks and enjoy the wins as you progress and maintain energy to power through the guide.\u003c/p\u003e\u003ch2 id=\"aa30\"\u003eThe Starter App\u003c/h2\u003e\u003cp id=\"2356\"\u003eA milestone on the starter journey is the main app that does a greeting. It evolves as you journey through the many concepts being introduced.\u003c/p\u003e\u003cp id=\"aa87\"\u003eOne thing the app illustrates well is the approach provided for achieving multi-platform apps. More details are highlighted in the architecture section below; however the key factor is the encapsulation of common software and code artifacts that do not need to be duplicated. Developers are still required to write the platform specific code ‚Äî UI code is an example of this.\u003c/p\u003e\u003ch2 id=\"1db4\"\u003eThe Project Architecture\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eKMP App architecture ~ Source: \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html#examine-the-project-structure:~:text=Each%20Kotlin%20Multiplatform%20project%20includes%20three%20modules\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetBrains\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"175a\"\u003eThe image above is a simplified view of the project landscape. Common software and code elements are located in the \u003cem\u003eshared module\u003c/em\u003e making them accessible to both mobile clients. An easy example of this would be business logic. Functions executing specific tasks can be nested in here and can be used downstream by platform specific code.\u003c/p\u003e\u003cp id=\"2c00\"\u003eIt should be noted that for the iOS side, the platform specific code remains \u003cem\u003eSwift\u003c/em\u003e. KMP does an impressive job of making your logic written in kotlin available natively in swift. As an example: the guide provides this snippet that is iterated on and shared by both platforms\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"71d3\"\u003eimport kotlin.random.Random\u003cp\u003eclass Greeting {\u003cbr/\u003e    private val platform: Platform = getPlatform()\u003c/p\u003e\u003cp\u003e    fun greet(): String {\u003cbr/\u003e        val firstWord = if (Random.nextBoolean()) \u0026#34;Hi!\u0026#34; else \u0026#34;Hello!\u0026#34;\u003c/p\u003e\u003cp\u003e        return \u0026#34;$firstWord Guess what this is! \u0026gt; ${platform.name.reversed()}!\u0026#34;\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ef64\"\u003eWhen the ‚Äòmagic‚Äô (read as ‚Äòbuild‚Äô) happens, an Objective-c declaration is available for use the iOS specific code and a similar native implementation is available for android as well.\u003c/p\u003e\u003ch2 id=\"14a2\"\u003eMy feel for the process\u003c/h2\u003e\u003cp id=\"5500\"\u003eThere is \u003cstrong\u003ea lot\u003c/strong\u003e of steps involved in getting it to work. However, \u003cstrong\u003eit works\u003c/strong\u003e. The apps are native. I have tried a few of the previous attempts at multi-platform mobile development and it quickly becomes apparent the reality of tradeoffs that come with the domain.\u003c/p\u003e\u003cp id=\"8ef3\"\u003eIn short, there is no perfect solution. The tradeoffs can be on the development end ‚Äî influencing how you develop your multi-platform apps. For example, some multi-platform apps require you to write in none mobile native languages and adopt a significantly different dev environment. Also with earlier attempts, the tradeoffs spilled unto the end product. A symptom of this is observed in mobile apps that appear to lack the native look and feel of common UI elements(text input, buttons) synonymous with the platform it is running on. Instead, the mobile app resembles a mobile version of a website in common cases.\u003c/p\u003e\u003cp id=\"4dae\"\u003eI can appreciate KMP tackling a lot of the problems stated above through the native approach adopted. Through the KMP approach, you in effect still build a native android app and a native ios app ‚Äî using the same environment provided by the platforms‚Äô publishers. This preserves the look and feel of the UI while \u003cstrong\u003erelieving developers the pain of duplicating and porting business logic code\u003c/strong\u003e. Further benefits of this can be identified in the reduction of inconsistent app behavior and increase in \u003cstrong\u003eparity between the resulting apps\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"78e0\"\u003eWhile I mentioned earlier the significant number of steps involved in the setup, every step has a purpose. It should be noted that the amount of steps in starting a new KMP application become noticeable on comparison with a siloed approach. They setup steps aren‚Äôt overwhelming.\u003c/p\u003e\u003cp id=\"21ba\"\u003e\u003cstrong\u003eSpeed\u003c/strong\u003e is also an important factor for consideration. During the course of building the starter app, the development and build speed remained a non-issue(Granted, I utilized a macbook with apple silicon). Iterating, building and running an app on both android and ios emulators locally on a computer occurred within a reasonable time frame. It would be of little wonder that a well architected mobile application targeting both android and ios and built with KMP could realize gains in overall development speeds.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2024-10-23T08:19:05.917Z",
  "modifiedTime": null
}
