{
  "id": "6f7e8a17-8e06-400d-9155-5fb7ebdb3ebc",
  "title": "5 steps to use Paging3 library with Jetpack Compose",
  "link": "https://blog.kotlin-academy.com/5-steps-to-use-paging3-library-with-jetpack-compose-6ecbceda6ff9?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Anitaa Murthy",
  "published": "Wed, 27 Nov 2024 10:29:47 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "jetpack-compose",
    "android",
    "android-paging",
    "kotlin",
    "android-app-development"
  ],
  "byline": "Anitaa Murthy",
  "length": 4182,
  "excerpt": "I had a chance to work with the Paging 3 library, along with Jetpack Compose. This guide shares some of the basics of the paging library, along with a guide on how to implement it in any android app…",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "I had a chance to work with the Paging 3 library, along with Jetpack Compose. This guide shares some of the basics of the paging library, along with a guide on how to implement it in any android app that is using Jetpack Compose.So I chose to build a demo news feed app to test the paging library. This is the app.For those of you interested in skipping the article, the GitHub link is here. So let’s begin!Step 1: Add dependenciesI have used Hilt and KSP (Kotlin Symbol Processing — similar to KAPT) for injecting our data layer with our UI layer. The other libraries used here are Coil for displaying contact URI image.I have also used Gradle’s version catalogs to declare dependencies in the app.You can checkout my other articles on version catalogs and Hilt to get a deeper understanding of what is required here. For now, I’ll just share the relevant files used to add these dependencies.libs.versions.tomlbuild.gradleapp/build.gradleWe also need to create a custom Application class and annotate it with @HiltAndroidApp and add it to our Manifest file.PagingLibApp.ktStep 2: Add data layerNow that we have our dependencies, we need to create a model class that holds our news api data.NewsApiResponse.ktNow, we should be able to create our rest api service class using Retrofit.NewsApiService.ktWe also create a Repository class that simply fetches the list of news feed from the api service. We can use Hilt to inject the api service to our repository.NewsRepository.ktStep 3: Setup the dataSourceIn the Paging 3 library, the data source concept is implemented using either PagingSource or RemoteMediator.PagingSource is the core class that serves as the data source in the Paging3 library. It defines how the data is loaded for a paginated list. It fetches data incrementally (page by page). It supports bidirectional paging (both forward and backward) and handles errors and retries for data loading.A PagingSource implementation involves overriding the load() function, which loads the data for a given page.If we need to handle both local and remote data sources together (e.g., caching data in Room while fetching it from a network), we can use RemoteMediator alongside PagingSource.In this app, we are only using NewsDataSource.NewsDataSource.ktStep 4: Setup the ViewModelThis is pretty straightforward. The view model will be responsible for creating the Pager along with its configurations and send it to the UI so it can observe the data changes.A Pager is a class that is responsible for incrementally pulling chunks of data from the PagingSource as requested by the UI. Since the Pager requires access to the PagingSource, it is typically created in the data layer where the PagingSource is defined. The second thing needed to construct a Pager is the PagingConfig which defines parameters that govern how the Pager will fetch data.NewsViewModel.ktStep 5: Add UI layerOur MainActivity looks like this:MainActivity.ktIn our activity class, we simply call a compose function called HomeScreen() . The HomeScreencomposable collects the news from the ViewModel using the collectAsLazyPagingItems() . This provides us with a list of LazyPagingItems\u003cArticle\u003e object. This object includes the list of news items we want to display, along with the current load state of the paging data.What is LoadState? LoadState represents the state of data loading in Paging 3. It provides information about whether a particular load operation is currently in progress, completed successfully, or failed.LoadState objects can have three forms:LoadState.NotLoading indicates no active load operation and no error.LoadState.Loading indicates there is an active load operation ongoing.LoadState.Error indicates there is an error in the data request.You can access these states for different loading scenarios such as initial loading (LoadType.REFRESH), appending more data (LoadType.APPEND), or refreshing(LoadType.PREPEND).We can use the loadState.refresh to check if the LoadState is loading, in error state or is successful and update the UI accordingly.Note: I am using a custom animation here for my pager implementation. You can find that composable here.And that’s pretty much it!",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*BwHKGUMNmr_MViEQqdAWEg.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"4cc5\"\u003eI had a chance to work with the \u003ca href=\"https://developer.android.com/topic/libraries/architecture/paging/v3-overview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePaging 3 library\u003c/a\u003e, along with Jetpack Compose. This guide shares some of the basics of the paging library, along with a guide on how to implement it in any android app that is using Jetpack Compose.\u003c/p\u003e\u003cp id=\"2e3b\"\u003eSo I chose to build a demo news feed app to test the paging library. This is the app.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1e0f\"\u003eFor those of you interested in skipping the article, the GitHub link is \u003ca href=\"https://github.com/anitaa1990/PagingLib3-Sample\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e. So let’s begin!\u003c/p\u003e\u003ch2 id=\"919b\"\u003eStep 1: \u003cstrong\u003eAdd dependencies\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"c23f\"\u003eI have used \u003ca href=\"https://developer.android.com/training/dependency-injection/hilt-android\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHilt\u003c/a\u003e and \u003ca href=\"https://github.com/google/ksp\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKSP\u003c/a\u003e (Kotlin Symbol Processing — similar to \u003cstrong\u003eKAPT\u003c/strong\u003e) for injecting our data layer with our UI layer. The other libraries used here are Coil for displaying contact URI image.\u003c/p\u003e\u003cp id=\"4bb7\"\u003eI have also used Gradle’s \u003ca href=\"https://docs.gradle.org/current/userguide/platforms.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eversion catalogs\u003c/a\u003e to declare dependencies in the app.\u003c/p\u003e\u003cp id=\"5f85\"\u003eYou can checkout my other articles on \u003ca href=\"https://medium.com/@anitaa_1990/4-minute-guide-on-adding-dependencies-using-version-catalogs-f68cced04fcd\" rel=\"noopener\"\u003eversion catalogs\u003c/a\u003e and \u003ca href=\"https://medium.com/@anitaa_1990/5-minute-guide-on-understanding-hilt-annotations-50fe33b1919b\" rel=\"noopener\"\u003eHilt\u003c/a\u003e to get a deeper understanding of what is required here. For now, I’ll just share the relevant files used to add these dependencies.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/fe6d9f23f36f1d7817448710de398f86#file-libs-versions-toml\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elibs.versions.toml\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/157af0d764b8516d925951c0f8b38ec0#file-build-gradle\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ebuild.gradle\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/8aabbd87cdc770316a0ed338090d3272#file-build-gradle\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eapp/build.gradle\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"512d\"\u003eWe also need to create a custom \u003ccode\u003eApplication\u003c/code\u003e class and annotate it with \u003ccode\u003e@HiltAndroidApp\u003c/code\u003e and add it to our Manifest file.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/0dbe53c35b8fa53584ea2fd984eb83d6#file-paginglibapp-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePagingLibApp.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"6797\"\u003eStep 2: \u003cstrong\u003eAdd data layer\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"683c\"\u003eNow that we have our dependencies, we need to create a model class that holds our news api data.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/fbda6c7798aea237a449d667f29ac29b#file-newsapiresponse-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNewsApiResponse.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"c3b8\"\u003eNow, we should be able to create our \u003cstrong\u003erest api service\u003c/strong\u003e class using Retrofit.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/93795eb7d8de9a5062fc31046dde97ef#file-newsapiservice-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNewsApiService.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"70c6\"\u003eWe also create a \u003ccode\u003eRepository\u003c/code\u003e class that simply fetches the list of news feed from the api service. We can use \u003ccode\u003eHilt\u003c/code\u003e to inject the api service to our repository.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/35794a044341e92d315953e41dd41406#file-newsrepository-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNewsRepository.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"e113\"\u003eStep 3: Setup the dataSource\u003c/h2\u003e\u003cp id=\"6fb1\"\u003eIn the Paging 3 library, the \u003cstrong\u003edata source\u003c/strong\u003e concept is implemented using either \u003ccode\u003e\u003cstrong\u003ePagingSource\u003c/strong\u003e\u003c/code\u003e or \u003ccode\u003e\u003cstrong\u003eRemoteMediator\u003c/strong\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"7432\"\u003e\u003ccode\u003e\u003cstrong\u003ePagingSource\u003c/strong\u003e\u003c/code\u003e is the core class that serves as the data source in the Paging3 library. It defines how the data is loaded for a paginated list. It fetches data incrementally (page by page). It supports bidirectional paging (both forward and backward) and handles errors and retries for data loading.\u003c/p\u003e\u003cp id=\"15d0\"\u003eA \u003ccode\u003ePagingSource\u003c/code\u003e implementation involves overriding the \u003ccode\u003eload()\u003c/code\u003e function, which loads the data for a given page.\u003c/p\u003e\u003cp id=\"eed7\"\u003eIf we need to handle both local and remote data sources together (e.g., caching data in Room while fetching it from a network), we can use \u003ccode\u003e\u003cstrong\u003eRemoteMediator\u003c/strong\u003e\u003c/code\u003e alongside \u003ccode\u003ePagingSource\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"9870\"\u003e\u003cstrong\u003eIn this app, we are only using \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eNewsDataSource\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e.\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/6381c2ff64f02578ea5f279d3ca99616#file-newsdatasource-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNewsDataSource.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"62e2\"\u003eStep 4: Setup the ViewModel\u003c/h2\u003e\u003cp id=\"c3eb\"\u003eThis is pretty straightforward. The view model will be responsible for creating the \u003cstrong\u003e\u003cem\u003ePager along with its configurations\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e \u003c/em\u003eand send it to the UI so it can observe the data changes.\u003c/p\u003e\u003cp id=\"97fc\"\u003eA \u003ccode\u003ePager\u003c/code\u003e is a class that is responsible for incrementally pulling chunks of data from the \u003ccode\u003ePagingSource\u003c/code\u003e as requested by the UI. Since the \u003ccode\u003ePager\u003c/code\u003e requires access to the \u003ccode\u003ePagingSource\u003c/code\u003e, it is typically created in the data layer where the \u003ccode\u003ePagingSource\u003c/code\u003e is defined. The second thing needed to construct a \u003ccode\u003ePager\u003c/code\u003e is the \u003ccode\u003ePagingConfig\u003c/code\u003e which defines parameters that govern how the \u003ccode\u003ePager\u003c/code\u003e will fetch data.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/8348d1d71a3b4a0684ac42184706db7c#file-newsviewmodel-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNewsViewModel.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"d78b\"\u003eStep 5: Add UI layer\u003c/h2\u003e\u003cp id=\"5228\"\u003eOur \u003ccode\u003eMainActivity\u003c/code\u003e looks like this:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://gist.github.com/anitaa1990/a7479a5fa321be8d7be381d79ac2e18c#file-mainactivity-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMainActivity.kt\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ad77\"\u003eIn our activity class, we simply call a compose function called \u003ccode\u003eHomeScreen()\u003c/code\u003e . The \u003ccode\u003eHomeScreen\u003c/code\u003ecomposable collects the news from the \u003ccode\u003eViewModel\u003c/code\u003e using the \u003ccode\u003ecollectAsLazyPagingItems()\u003c/code\u003e . This provides us with a list of \u003ccode\u003eLazyPagingItems\u0026lt;Article\u0026gt;\u003c/code\u003e object. This object includes the list of news items we want to display, along with the current load state of the paging data.\u003c/p\u003e\u003cp id=\"4d22\"\u003eWhat is \u003cstrong\u003eLoadState\u003c/strong\u003e? \u003ccode\u003eLoadState\u003c/code\u003e represents the state of data loading in Paging 3. It provides information about whether a particular load operation is currently in progress, completed successfully, or failed.\u003c/p\u003e\u003cp id=\"c8cc\"\u003e\u003ccode\u003eLoadState\u003c/code\u003e objects can have three forms:\u003c/p\u003e\u003cul\u003e\u003cli id=\"6027\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/paging/LoadState.NotLoading\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLoadState.NotLoading\u003c/a\u003e\u003c/code\u003e indicates no active load operation and no error.\u003c/li\u003e\u003cli id=\"410c\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/paging/LoadState.Loading\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLoadState.Loading\u003c/a\u003e\u003c/code\u003e indicates there is an active load operation ongoing.\u003c/li\u003e\u003cli id=\"0c55\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/paging/LoadState.Error\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLoadState.Error\u003c/a\u003e\u003c/code\u003e indicates there is an error in the data request.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"cab3\"\u003eYou can access these states for different loading scenarios such as initial loading (\u003ccode\u003eLoadType.REFRESH\u003c/code\u003e), appending more data (\u003ccode\u003eLoadType.APPEND\u003c/code\u003e), or refreshing(\u003ccode\u003eLoadType.PREPEND\u003c/code\u003e).\u003c/p\u003e\u003cp id=\"858b\"\u003eWe can use the \u003ccode\u003eloadState.refresh\u003c/code\u003e to check if the \u003ccode\u003eLoadState\u003c/code\u003e is loading, in error state or is successful and update the UI accordingly.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"0dc6\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e I am using a custom animation here for my pager implementation. You can find that composable \u003ca href=\"https://github.com/anitaa1990/PagingLib3-Sample/blob/main/app/src/main/java/com/an/paginglib3_sample/ui/component/BookPager.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"7fce\"\u003eAnd that’s pretty much it!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-11-21T09:30:45.818Z",
  "modifiedTime": null
}
