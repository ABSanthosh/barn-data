{
  "id": "fdc87f0c-f795-4f9b-9485-8869fc36bc3a",
  "title": "Migrating To Kotlin 2.0 In Your Jetpack Compose Project",
  "link": "https://proandroiddev.com/migrating-to-kotlin-2-0-in-your-jetpack-compose-project-315426b88d66?source=rss----c72404660798---4",
  "description": "",
  "author": "tomerpacific",
  "published": "Sat, 19 Apr 2025 23:28:00 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-app-development",
    "gradle",
    "jetpack-compose",
    "androiddev",
    "android"
  ],
  "byline": "tomerpacific",
  "length": 11842,
  "excerpt": "Whether your build.gradle is written in Groovy or if you already made the jump to Kotlin, there will come a time where you will need to migrate to Gradle version catalogs. It will happen when you…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "This image was generated using AIWhether your build.gradle is written in Groovy or if you already made the jump to Kotlin, there will come a time where you will need to migrate to Gradle version catalogs.When, you ask?It will happen when you will want to update your Kotlin compiler version to be 2.0.0 or above. This is because the Jetpack Compose compiler has been moved to the Kotlin repository [Reference]. Due to this, a new plugin was released, the Compose Compiler Gradle plugin. Usually, with every release of the Compose library, you had a specific kotlinCompilerExtensionVersion you would have to use: composeOptions { kotlinCompilerExtensionVersion '1.5.13' }But you can see here, that for Kotlin versions 2 and above, you will need to use the Compose Compiler Gradle plugin.In this article, we will lay out the (possible) path you may need to take:Your build configuration is in GroovyYour build configuration is in KotlinYou don’t have a libs.versions.toml fileYou have a libs.versions.toml fileMigrating build configuration to KotlinThere are two choices if your build configuration is in Groovy:You can migrate your build configuration to KotlinYou can migrate your build configuration directly to Gradle Version CatalogIf you choose the first option, it is a longer route to take, but not by much. If you choose the second option, you can skip this section and go right ahead to the next one.❗️ Be aware that this article is written assuming the build configuration is in Kotlin so you may need to make the necessary adjustments for GroovyFirst, we will need to migrate the project to work with Kotlin in the build.gradle files. There is an article that covers all the needed steps, but here I’d like to showcase a full example of how the build.gradle file looks like before and after the migration.build.gradle (app level) before the migration:apply plugin: 'com.android.application'apply plugin: 'kotlin-android'apply plugin: 'kotlin-kapt'android { compileSdkVersion 34 defaultConfig { applicationId \"com.tomerpacific.laundry\" minSdkVersion 21 targetSdkVersion 34 versionCode 25 versionName \"2.4.8\" testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" dataBinding { enabled = true } } kotlinOptions { jvmTarget = 17 } buildFeatures { compose true viewBinding = true } composeOptions { kotlinCompilerExtensionVersion '1.5.10' } buildTypes { release { minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' ndk { debugSymbolLevel 'SYMBOL_TABLE' } } } compileOptions { sourceCompatibility JavaVersion.VERSION_17 targetCompatibility JavaVersion.VERSION_17 } packagingOptions { resources.excludes.add(\"META-INF/*\") } namespace 'com.tomerpacific.laundry'}dependencies { implementation fileTree(dir: 'libs', include: ['*.jar']) implementation \"androidx.fragment:fragment-ktx:1.4.0\" implementation\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\" implementation 'androidx.appcompat:appcompat:1.4.0' implementation 'androidx.activity:activity-compose:1.8.2' implementation 'androidx.compose.ui:ui-viewbinding:1.6.2' implementation 'com.google.android.material:material:1.8.0' implementation 'androidx.constraintlayout:constraintlayout:2.1.2' implementation 'com.google.android.play:app-update:2.1.0' implementation 'com.google.android.play:app-update-ktx:2.1.0' implementation \"androidx.compose.material3:material3:1.2.1\" implementation \"androidx.compose.material3:material3-window-size-class:1.2.1\" implementation \"androidx.compose.material3:material3-adaptive-navigation-suite:1.3.0-rc01\" testImplementation 'junit:junit:4.12' androidTestImplementation 'androidx.test.ext:junit:1.1.3' androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0' androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.0' debugImplementation 'androidx.compose.ui:ui-test-manifest:1.6.2'}The key changes you should pay attention to are:Using double quotation marks(“) instead of single quotation marks(‘)Using the equals operator (=) for any settingAny property that has a Boolean value should be prefixed with the is wordPlugins block instead of the apply plugin commandsRemoval of implementation”org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version”build.gradle after the migration:plugins { id(\"com.android.application\") id(\"org.jetbrains.kotlin.android\") id(\"kotlin-kapt\")}android { namespace = \"com.tomerpacific.laundry\" compileSdk = 34 defaultConfig { applicationId = \"com.tomerpacific.laundry\" minSdk = 21 targetSdk = 34 versionCode = 25 versionName = \"2.4.8\" testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\" buildFeatures { dataBinding = true } } kotlinOptions { jvmTarget = \"17\" } buildFeatures { compose = true viewBinding = true } composeOptions { kotlinCompilerExtensionVersion = \"1.5.10\" } buildTypes { release { isMinifyEnabled = true isShrinkResources = true proguardFiles( getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\" ) ndk { debugSymbolLevel = \"SYMBOL_TABLE\" } } } compileOptions { sourceCompatibility = JavaVersion.VERSION_17 targetCompatibility = JavaVersion.VERSION_17 } packaging { resources { excludes += \"META-INF/*\" } }}dependencies { implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\")))) implementation(\"androidx.fragment:fragment-ktx:1.4.0\") implementation(\"androidx.appcompat:appcompat:1.4.0\") implementation(\"androidx.activity:activity-compose:1.8.2\") implementation(\"androidx.compose.ui:ui-viewbinding:1.6.2\") implementation(\"com.google.android.material:material:1.8.0\") implementation(\"androidx.constraintlayout:constraintlayout:2.1.2\") implementation(\"com.google.android.play:app-update:2.1.0\") implementation(\"com.google.android.play:app-update-ktx:2.1.0\") implementation(\"androidx.compose.material3:material3:1.2.1\") implementation(\"androidx.compose.material3:material3-window-size-class:1.2.1\") implementation(\"androidx.compose.material3:material3-adaptive-navigation-suite:1.3.0-rc01\") testImplementation(\"junit:junit:4.12\") androidTestImplementation(\"androidx.test.ext:junit:1.1.3\") androidTestImplementation(\"androidx.test.espresso:espresso-core:3.4.0\") androidTestImplementation(\"androidx.compose.ui:ui-test-junit4:1.1.0\") debugImplementation(\"androidx.compose.ui:ui-test-manifest:1.6.2\")}As for the your project level build.gradle file and the settings.gradle file, here is how they look like after the changes:build.gradle.kts:// Top-level build file where you can add configuration options common to all sub-projects/modules.plugins { id(\"com.android.application\") version \"8.0.2\" apply false id(\"org.jetbrains.kotlin.android\") version \"1.9.22\" apply false}settings.gradle.kts:pluginManagement { repositories { google() mavenCentral() gradlePluginPortal() }}dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() }}rootProject.name = \"laundry\"include(\":app\")Migrating To Gradle Version CatalogIf you don’t have a libs.versions.toml file, then before you migrate to the Compose Compiler Gradle plugin, you need to migrate your build to Gradle Version Catalog. This means creating a libs.versions.toml file in your project’s gradle folder:This file includes three sections:versions - In this section you will have the names of your dependencies with their associated version in the format of version = “x.y.z”libraries - In this section you will have key value pairs indicating the name of the library with an object representing the group, name and version reference of the libraryplugins - Similar to the libraries section, but having only an id and version reference fieldsEach dependency or plugin that you migrate from your build.gradle.kts file will be broken up into two parts:A line under the versions/plugins section, indicating the library name and it’s versionA line under the libraries section, indicating the name of the library followed by an object that contains three keys: group, name and version.refFor example, if we have the following dependency:implementation \"androidx.fragment:fragment-ktx:1.4.0\"We will break it into three parts and use those parts in our libs.versions.toml file:fragment-ktx:1.4.0 will be used under the versions sectionandroidx.fragment-ktx will be used as the key under the libraries sectiongroup = “androidx.fragment”, name = “fragment-ktx”, version.ref = “fragment-ktx” will be the object for the key in step #2It looks like this:[versions]fragment-ktx = \"1.4.0\"[libraries]androidx-fragment-ktx = { group = \"androidx.fragment\", name = \"fragment-ktx\", version.ref = \"fragment-ktx\" }[plugins]⚠️ Pay attention that the key you use under the libraries section is the value you will need to use in your build.gradle.kts fileAnd in our build.gradle.kts file, under the dependencies block, we will use:implementation(libs.androidx.fragment.ktx)It is recommended to make sure your project compiles and runs properly after each dependency you migrateWhen you migrate one of the plugins you use, you will have to add lines under the versions and plugins section. Let’s show how to do this with an example below:classpath 'com.android.tools.build:gradle:8.0.2'Above is the line you have in your project level build.gradle, so you will need to add these lines in the corresponding versions and plugins sections to represent it:[versions]androidGradlePlugin = \"8.0.2\"...[plugins]android-application = { id = \"com.android.application\", version.ref = \"androidGradlePlugin\" }Then in your project level build.gradle, replace the original line with this one:plugins { alias(libs.plugins.android.application) apply false}and in your application level build.gradle, replace the line there:plugins { id(\"com.android.application\") // \u003c--- This line should be removed alias(libs.plugins.android.application)}⚠️ If you are using a Gradle version below 8.1, you will need to add an annotation above your plugins block in both build.gradle files:@file:Suppress(\"DSL_SCOPE_VIOLATION\") // \u003c---- Thisplugins { alias(libs.plugins.android.application) apply false}And in your application level build.gradle:@file:Suppress(\"DSL_SCOPE_VIOLATION\") // \u003c---- Thisplugins { alias(libs.plugins.android.application)}[Reference]Migrating to Compose Compiler GradleWhether you got here after going through all of the steps, or just jumped to this one, the migration here is rather simple.Remove any reference you might have in your build.gradle.kts to the Compose Compiler, I.E.composeOptions { kotlinCompilerExtensionVersion '1.5.10' }2. Alter the Kotlin version you have and add this dependency in the libs.versions.toml file:[versions]kotlin = \"2.0.0\"[plugins]kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }compose-compiler = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }3. Inside your project level build.gradle.kts, add this line:plugins { id(libs.plugins.compose.compiler) apply false}4. Inside your application level build.gradle.kts, add this line:plugins { id(libs.plugins.compose.compiler)}",
  "image": "https://miro.medium.com/v2/resize:fit:1024/1*xC55c50y5a4xGcWEh50_6A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eThis image was generated using AI\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@tomerpacific?source=post_page---byline--315426b88d66---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"tomerpacific\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*tRCMEre0zzKkBWlHDJNbGw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--315426b88d66---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"ddfc\"\u003eWhether your build.gradle is written in Groovy or if you already made the jump to Kotlin, there will come a time where you will need to migrate to Gradle version catalogs.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"825b\"\u003eWhen, you ask?\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"2476\"\u003eIt will happen when you will want to update your Kotlin compiler version to be 2.0.0 or above. This is because the Jetpack Compose compiler has been moved to the Kotlin repository [\u003ca href=\"https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eReference\u003c/a\u003e]. Due to this, a new plugin was released, the \u003cstrong\u003eCompose Compiler Gradle plugin\u003c/strong\u003e. Usually, with every release of the Compose library, you had a specific \u003cstrong\u003ekotlinCompilerExtensionVersion \u003c/strong\u003eyou would have to use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0c13\"\u003e    composeOptions {\u003cbr/\u003e        kotlinCompilerExtensionVersion \u0026#39;1.5.13\u0026#39;\u003cbr/\u003e    }\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9cfe\"\u003eBut you can see \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-kotlin\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e, that for Kotlin versions 2 and above, you will need to use the Compose Compiler Gradle plugin.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0d84\"\u003eIn this article, we will lay out the (possible) path you may need to take:\u003c/p\u003e\u003col\u003e\u003cli id=\"db25\"\u003eYour build configuration is in Groovy\u003c/li\u003e\u003cli id=\"0660\"\u003eYour build configuration is in Kotlin\u003c/li\u003e\u003cli id=\"c48b\"\u003eYou don’t have a libs.versions.toml file\u003c/li\u003e\u003cli id=\"d2df\"\u003eYou have a libs.versions.toml file\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"7906\"\u003eMigrating build configuration to Kotlin\u003c/h2\u003e\u003cp id=\"2efb\"\u003eThere are two choices if your build configuration is in Groovy:\u003c/p\u003e\u003cul\u003e\u003cli id=\"ec02\"\u003eYou can migrate your build configuration to Kotlin\u003c/li\u003e\u003cli id=\"94f0\"\u003eYou can migrate your build configuration directly to Gradle Version Catalog\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"30b2\"\u003eIf you choose the first option, it is a longer route to take, but not by much. If you choose the second option, you can skip this section and go right ahead to the next one.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"3a16\"\u003e❗️ Be aware that this article is written assuming the build configuration is in Kotlin so you may need to make the necessary adjustments for Groovy\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"3737\"\u003eFirst, we will need to migrate the project to work with Kotlin in the build.gradle files. There is an \u003ca href=\"https://developer.android.com/build/migrate-to-kotlin-dsl\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003earticle \u003c/a\u003ethat covers all the needed steps, but here I’d like to showcase a full example of how the build.gradle file looks like before and after the migration.\u003c/p\u003e\u003cp id=\"e919\"\u003ebuild.gradle (app level) before the migration:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b932\"\u003eapply plugin: \u0026#39;com.android.application\u0026#39;\u003cp\u003eapply plugin: \u0026#39;kotlin-android\u0026#39;\u003c/p\u003e\u003cp\u003eapply plugin: \u0026#39;kotlin-kapt\u0026#39;\u003c/p\u003e\u003cp\u003eandroid {\u003cbr/\u003e    compileSdkVersion 34\u003cbr/\u003e    defaultConfig {\u003cbr/\u003e        applicationId \u0026#34;com.tomerpacific.laundry\u0026#34;\u003cbr/\u003e        minSdkVersion 21\u003cbr/\u003e        targetSdkVersion 34\u003cbr/\u003e        versionCode 25\u003cbr/\u003e        versionName \u0026#34;2.4.8\u0026#34;\u003cbr/\u003e        testInstrumentationRunner \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;\u003cbr/\u003e        dataBinding {\u003cbr/\u003e            enabled = true\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    kotlinOptions {\u003cbr/\u003e        jvmTarget = 17\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    buildFeatures {\u003cbr/\u003e        compose true\u003cbr/\u003e        viewBinding = true\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    composeOptions {\u003cbr/\u003e        kotlinCompilerExtensionVersion \u0026#39;1.5.10\u0026#39;\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    buildTypes {\u003cbr/\u003e        release {\u003cbr/\u003e            minifyEnabled true\u003cbr/\u003e            shrinkResources true\u003cbr/\u003e            proguardFiles getDefaultProguardFile(\u0026#39;proguard-android-optimize.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39;\u003cbr/\u003e            ndk {\u003cbr/\u003e                debugSymbolLevel \u0026#39;SYMBOL_TABLE\u0026#39;\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    compileOptions {\u003cbr/\u003e        sourceCompatibility JavaVersion.VERSION_17\u003cbr/\u003e        targetCompatibility JavaVersion.VERSION_17\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    packagingOptions {\u003cbr/\u003e        resources.excludes.add(\u0026#34;META-INF/*\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e    namespace \u0026#39;com.tomerpacific.laundry\u0026#39;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003edependencies {\u003cbr/\u003e    implementation fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;])\u003cbr/\u003e    implementation \u0026#34;androidx.fragment:fragment-ktx:1.4.0\u0026#34;\u003cbr/\u003e    implementation\u0026#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\u0026#34;\u003cbr/\u003e    implementation \u0026#39;androidx.appcompat:appcompat:1.4.0\u0026#39;\u003cbr/\u003e    implementation \u0026#39;androidx.activity:activity-compose:1.8.2\u0026#39;\u003cbr/\u003e    implementation \u0026#39;androidx.compose.ui:ui-viewbinding:1.6.2\u0026#39;\u003cbr/\u003e    implementation \u0026#39;com.google.android.material:material:1.8.0\u0026#39;\u003cbr/\u003e    implementation \u0026#39;androidx.constraintlayout:constraintlayout:2.1.2\u0026#39;\u003cbr/\u003e    implementation \u0026#39;com.google.android.play:app-update:2.1.0\u0026#39;\u003cbr/\u003e    implementation \u0026#39;com.google.android.play:app-update-ktx:2.1.0\u0026#39;\u003c/p\u003e\u003cp\u003e    implementation \u0026#34;androidx.compose.material3:material3:1.2.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.compose.material3:material3-window-size-class:1.2.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.compose.material3:material3-adaptive-navigation-suite:1.3.0-rc01\u0026#34;\u003c/p\u003e\u003cp\u003e    testImplementation \u0026#39;junit:junit:4.12\u0026#39;\u003cbr/\u003e    androidTestImplementation \u0026#39;androidx.test.ext:junit:1.1.3\u0026#39;\u003cbr/\u003e    androidTestImplementation \u0026#39;androidx.test.espresso:espresso-core:3.4.0\u0026#39;\u003cbr/\u003e    androidTestImplementation \u0026#39;androidx.compose.ui:ui-test-junit4:1.1.0\u0026#39;\u003cbr/\u003e    debugImplementation \u0026#39;androidx.compose.ui:ui-test-manifest:1.6.2\u0026#39;\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6847\"\u003eThe key changes you should pay attention to are:\u003c/p\u003e\u003cul\u003e\u003cli id=\"e9c1\"\u003eUsing double quotation marks(“) instead of single quotation marks(‘)\u003c/li\u003e\u003cli id=\"941a\"\u003eUsing the equals operator (=) for any setting\u003c/li\u003e\u003cli id=\"3389\"\u003eAny property that has a Boolean value should be prefixed with the is word\u003c/li\u003e\u003cli id=\"8458\"\u003ePlugins block instead of the apply plugin commands\u003c/li\u003e\u003cli id=\"a9c3\"\u003eRemoval of implementation”org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version”\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0968\"\u003ebuild.gradle after the migration:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"81ca\"\u003eplugins {\u003cbr/\u003e    id(\u0026#34;com.android.application\u0026#34;)\u003cbr/\u003e    id(\u0026#34;org.jetbrains.kotlin.android\u0026#34;)\u003cbr/\u003e    id(\u0026#34;kotlin-kapt\u0026#34;)\u003cbr/\u003e}\u003cp\u003eandroid {\u003cbr/\u003e    namespace = \u0026#34;com.tomerpacific.laundry\u0026#34;\u003cbr/\u003e    compileSdk = 34\u003cbr/\u003e    defaultConfig {\u003cbr/\u003e        applicationId = \u0026#34;com.tomerpacific.laundry\u0026#34;\u003cbr/\u003e        minSdk = 21\u003cbr/\u003e        targetSdk = 34\u003cbr/\u003e        versionCode = 25\u003cbr/\u003e        versionName = \u0026#34;2.4.8\u0026#34;\u003cbr/\u003e        testInstrumentationRunner = \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;\u003cbr/\u003e        buildFeatures {\u003cbr/\u003e            dataBinding = true\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    kotlinOptions {\u003cbr/\u003e        jvmTarget = \u0026#34;17\u0026#34;\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    buildFeatures {\u003cbr/\u003e        compose = true\u003cbr/\u003e        viewBinding = true\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    composeOptions {\u003cbr/\u003e        kotlinCompilerExtensionVersion = \u0026#34;1.5.10\u0026#34;\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    buildTypes {\u003cbr/\u003e        release {\u003cbr/\u003e            isMinifyEnabled = true\u003cbr/\u003e            isShrinkResources = true\u003cbr/\u003e            proguardFiles(\u003cbr/\u003e                getDefaultProguardFile(\u0026#34;proguard-android-optimize.txt\u0026#34;),\u003cbr/\u003e                \u0026#34;proguard-rules.pro\u0026#34;\u003cbr/\u003e            )\u003cbr/\u003e            ndk {\u003cbr/\u003e                debugSymbolLevel = \u0026#34;SYMBOL_TABLE\u0026#34;\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    compileOptions {\u003cbr/\u003e        sourceCompatibility = JavaVersion.VERSION_17\u003cbr/\u003e        targetCompatibility = JavaVersion.VERSION_17\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    packaging {\u003cbr/\u003e        resources {\u003cbr/\u003e            excludes += \u0026#34;META-INF/*\u0026#34;\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003edependencies {\u003cbr/\u003e    implementation(fileTree(mapOf(\u0026#34;dir\u0026#34; to \u0026#34;libs\u0026#34;, \u0026#34;include\u0026#34; to listOf(\u0026#34;*.jar\u0026#34;))))\u003cbr/\u003e    implementation(\u0026#34;androidx.fragment:fragment-ktx:1.4.0\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.appcompat:appcompat:1.4.0\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.activity:activity-compose:1.8.2\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.compose.ui:ui-viewbinding:1.6.2\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;com.google.android.material:material:1.8.0\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.constraintlayout:constraintlayout:2.1.2\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;com.google.android.play:app-update:2.1.0\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;com.google.android.play:app-update-ktx:2.1.0\u0026#34;)\u003c/p\u003e\u003cp\u003e    implementation(\u0026#34;androidx.compose.material3:material3:1.2.1\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.compose.material3:material3-window-size-class:1.2.1\u0026#34;)\u003cbr/\u003e    implementation(\u0026#34;androidx.compose.material3:material3-adaptive-navigation-suite:1.3.0-rc01\u0026#34;)\u003c/p\u003e\u003cp\u003e    testImplementation(\u0026#34;junit:junit:4.12\u0026#34;)\u003cbr/\u003e    androidTestImplementation(\u0026#34;androidx.test.ext:junit:1.1.3\u0026#34;)\u003cbr/\u003e    androidTestImplementation(\u0026#34;androidx.test.espresso:espresso-core:3.4.0\u0026#34;)\u003cbr/\u003e    androidTestImplementation(\u0026#34;androidx.compose.ui:ui-test-junit4:1.1.0\u0026#34;)\u003cbr/\u003e    debugImplementation(\u0026#34;androidx.compose.ui:ui-test-manifest:1.6.2\u0026#34;)\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"46c1\"\u003eAs for the your project level build.gradle file and the settings.gradle file, here is how they look like after the changes:\u003c/p\u003e\u003cp id=\"1ecd\"\u003e\u003cstrong\u003ebuild.gradle.kts:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c9d0\"\u003e// Top-level build file where you can add configuration options common to all sub-projects/modules.\u003cp\u003eplugins {\u003cbr/\u003e    id(\u0026#34;com.android.application\u0026#34;) version \u0026#34;8.0.2\u0026#34; apply false\u003cbr/\u003e    id(\u0026#34;org.jetbrains.kotlin.android\u0026#34;) version \u0026#34;1.9.22\u0026#34; apply false\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6e63\"\u003e\u003cstrong\u003esettings.gradle.kts:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0e05\"\u003epluginManagement {\u003cbr/\u003e    repositories {\u003cbr/\u003e        google()\u003cbr/\u003e        mavenCentral()\u003cbr/\u003e        gradlePluginPortal()\u003cbr/\u003e    }\u003cbr/\u003e}\u003cp\u003edependencyResolutionManagement {\u003cbr/\u003e    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\u003cbr/\u003e    repositories {\u003cbr/\u003e        google()\u003cbr/\u003e        mavenCentral()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003erootProject.name = \u0026#34;laundry\u0026#34;\u003cbr/\u003einclude(\u0026#34;:app\u0026#34;)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"fe1c\"\u003eMigrating To Gradle Version Catalog\u003c/h2\u003e\u003cp id=\"c63c\"\u003eIf you don’t have a libs.versions.toml file, then before you migrate to the Compose Compiler Gradle plugin, you need to migrate your build to \u003ca href=\"https://docs.gradle.org/current/userguide/version_catalogs.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGradle Version Catalog\u003c/a\u003e. This means creating a libs.versions.toml file in your project’s gradle folder:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8fef\"\u003eThis file includes three sections:\u003c/p\u003e\u003col\u003e\u003cli id=\"0e48\"\u003eversions - In this section you will have the names of your dependencies with their associated version in the format of\u003cem\u003e \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eversion = “x.y.z”\u003c/em\u003e\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"f5b2\"\u003elibraries - In this section you will have key value pairs indicating the name of the library with an object representing the group, name and version reference of the library\u003c/li\u003e\u003cli id=\"3f76\"\u003eplugins - Similar to the libraries section, but having only an id and version reference fields\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"36a0\"\u003eEach dependency or plugin that you migrate from your build.gradle.kts file will be broken up into two parts:\u003c/p\u003e\u003col\u003e\u003cli id=\"8265\"\u003eA line under the versions/plugins section, indicating the library name and it’s version\u003c/li\u003e\u003cli id=\"dbb2\"\u003eA line under the libraries section, indicating the name of the library followed by an object that contains three keys: group, name and version.ref\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"8879\"\u003eFor example, if we have the following dependency:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c176\"\u003eimplementation \u0026#34;androidx.fragment:fragment-ktx:1.4.0\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a725\"\u003eWe will break it into three parts and use those parts in our libs.versions.toml file:\u003c/p\u003e\u003col\u003e\u003cli id=\"f1f9\"\u003efragment-ktx:1.4.0 will be used under the versions section\u003c/li\u003e\u003cli id=\"5c5d\"\u003eandroidx.fragment-ktx will be used as the key under the libraries section\u003c/li\u003e\u003cli id=\"127f\"\u003egroup = “androidx.fragment”, name = “fragment-ktx”, version.ref = “fragment-ktx” will be the object for the key in step #2\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"5de0\"\u003eIt looks like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0cfe\"\u003e[versions]\u003cbr/\u003efragment-ktx = \u0026#34;1.4.0\u0026#34;\u003cp\u003e[libraries]\u003cbr/\u003eandroidx-fragment-ktx = { group = \u0026#34;androidx.fragment\u0026#34;, name = \u0026#34;fragment-ktx\u0026#34;, version.ref = \u0026#34;fragment-ktx\u0026#34; }\u003c/p\u003e\u003cp\u003e[plugins]\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"cddf\"\u003e⚠️ Pay attention that the key you use under the libraries section is the value you will need to use in your build.gradle.kts file\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"009a\"\u003eAnd in our build.gradle.kts file, under the dependencies block, we will use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4e56\"\u003eimplementation(libs.androidx.fragment.ktx)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f8b2\"\u003e\u003cstrong\u003e\u003cem\u003eIt is recommended to make sure your project compiles and runs properly after each dependency you migrate\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"1c0d\"\u003eWhen you migrate one of the \u003cstrong\u003eplugins \u003c/strong\u003eyou use, you will have to add lines under the versions and plugins section. Let’s show how to do this with an example below:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"cce3\"\u003eclasspath \u0026#39;com.android.tools.build:gradle:8.0.2\u0026#39;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"fdf9\"\u003eAbove is the line you have in your project level build.gradle, so you will need to add these lines in the corresponding versions and plugins sections to represent it:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c704\"\u003e[versions]\u003cbr/\u003eandroidGradlePlugin = \u0026#34;8.0.2\u0026#34;\u003cp\u003e...\u003c/p\u003e\u003cp\u003e[plugins]\u003cbr/\u003eandroid-application = { id = \u0026#34;com.android.application\u0026#34;, version.ref = \u0026#34;androidGradlePlugin\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f557\"\u003eThen in your project level build.gradle, replace the original line with this one:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5576\"\u003eplugins {\u003cbr/\u003e   alias(libs.plugins.android.application) apply false\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"cb4a\"\u003eand in your application level build.gradle, replace the line there:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5158\"\u003eplugins {\u003cbr/\u003e    id(\u0026#34;com.android.application\u0026#34;)  // \u0026lt;--- This line should be removed\u003cbr/\u003e    alias(libs.plugins.android.application)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"534b\"\u003e\u003cstrong\u003e⚠️ If you are using a Gradle version below 8.1, you will need to add an annotation above your plugins block in both build.gradle files:\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cpre\u003e\u003cspan id=\"4b0c\"\u003e@file:Suppress(\u0026#34;DSL_SCOPE_VIOLATION\u0026#34;)  // \u0026lt;---- This\u003cbr/\u003eplugins {\u003cbr/\u003e   alias(libs.plugins.android.application) apply false\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"dfcd\"\u003eAnd in your application level build.gradle:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"cf43\"\u003e@file:Suppress(\u0026#34;DSL_SCOPE_VIOLATION\u0026#34;) // \u0026lt;---- This\u003cbr/\u003eplugins {\u003cbr/\u003e    alias(libs.plugins.android.application)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"bf1b\"\u003e[\u003ca href=\"https://github.com/gradle/gradle/issues/20131\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eReference\u003c/a\u003e]\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"a117\"\u003eMigrating to Compose Compiler Gradle\u003c/h2\u003e\u003cp id=\"7029\"\u003eWhether you got here after going through all of the steps, or just jumped to this one, the migration here is rather simple.\u003c/p\u003e\u003col\u003e\u003cli id=\"cab1\"\u003eRemove any reference you might have in your build.gradle.kts to the Compose Compiler, I.E.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"568c\"\u003ecomposeOptions {\u003cbr/\u003e        kotlinCompilerExtensionVersion \u0026#39;1.5.10\u0026#39;\u003cbr/\u003e    }\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"089c\"\u003e2. Alter the Kotlin version you have and add this dependency in the libs.versions.toml file:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e57e\"\u003e[versions]\u003cbr/\u003ekotlin = \u0026#34;2.0.0\u0026#34;\u003cp\u003e[plugins]\u003cbr/\u003ekotlin-android = { id = \u0026#34;org.jetbrains.kotlin.android\u0026#34;, version.ref = \u0026#34;kotlin\u0026#34; }\u003c/p\u003e\u003cp\u003ecompose-compiler = { id = \u0026#34;org.jetbrains.kotlin.plugin.compose\u0026#34;, version.ref = \u0026#34;kotlin\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f08b\"\u003e3. Inside your project level build.gradle.kts, add this line:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c346\"\u003eplugins {\u003cbr/\u003e   id(libs.plugins.compose.compiler) apply false\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ce08\"\u003e4. Inside your application level build.gradle.kts, add this line:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ec04\"\u003eplugins {\u003cbr/\u003e   id(libs.plugins.compose.compiler)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-04-19T23:28:00.879Z",
  "modifiedTime": null
}
