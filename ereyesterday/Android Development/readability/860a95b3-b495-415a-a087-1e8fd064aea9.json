{
  "id": "860a95b3-b495-415a-a087-1e8fd064aea9",
  "title": "SimpleCamera",
  "link": "https://android-arsenal.com/details/1/8491",
  "description": "Simple Camera is a library that allows you to use cameras in a simplified, easy, fast and effective way. It contains CameraX as an internal library. It simplifies the camera features used by CameraX and provides ease of use with a single library. As updates come on the CameraX side, the library will try to stay up to date. Missing features will be added soon. Like video capturing.",
  "author": "",
  "published": "Sun, 31 Mar 2024 12:23:39 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 5780,
  "excerpt": "Camera | SimpleCamera by Zeki Erciyas (zekierciyas)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "Simple Camera Simple Camera is a library that allows you to use cameras in a simplified, easy, fast and effective way. It contains CameraX as an internal library. It simplifies the camera features used by CameraX and provides ease of use with a single library. As updates come on the CameraX side, the library will try to stay up to date. Missing features will be added soon. Like video capturing. To be added/Added Features Image Analysis Flip Camera Image Capture Flip Camera Video Capture Flip Camera Initial Installation Gradle Add below codes to your root build.gradle file (not your module build.gradle file). allprojects { repositories { maven { url 'https://jitpack.io' } } } And add a dependency code to your module's build.gradle file. dependencies { implementation 'com.github.zekierciyas:SimpleCamera:1.0.0' } Usage Add following XML namespace inside your XML layout file. xmlns:app=\"http://schemas.android.com/apk/res-auto\" SimpleCameraView We can use SimpleCameraView with customized attributes. \u003ccom.zekierciyas.library.view.SimpleCameraView android:id=\"@+id/camera_view\" app:cameraID=\"1\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e Attribute descriptions We can customize the palette image and selector or various options using the below attributes. app:cameraID=\"0\" // Default Front Side Lens app:cameraID=\"1\" // Default Back Side Lens Observers Observers can be used as separate objects as in the example. You can access it from the interface object of Observers. Observers.CameraState is a common observation that provides general observation of the camera. It can also be used in other camera features. private val observerCameraState: Observers.CameraState = object : Observers.CameraState { override fun cameraState(simpleCameraState: SimpleCameraStateModel) { Log.d(TAG, \"Camera state is ${simpleCameraState.action.toString()} \") when (simpleCameraState.action) { is SimpleCameraState.Action.Closed -\u003e { } is SimpleCameraState.Action.Closing -\u003e { } is SimpleCameraState.Action.Open -\u003e { } is SimpleCameraState.Action.Opening -\u003e { } is SimpleCameraState.Action.Pending -\u003e { } else -\u003e { } } when (simpleCameraState.error) { is SimpleCameraState.Error.ErrorCameraDisabled -\u003e { } is SimpleCameraState.Error.ErrorCameraFatalError -\u003e { } is SimpleCameraState.Error.ErrorCameraInUse -\u003e { } is SimpleCameraState.Error.ErrorDoNotDisturbModelEnabled -\u003e { } is SimpleCameraState.Error.ErrorMaxCameraInUse -\u003e { } is SimpleCameraState.Error.ErrorOtherRecoverableError -\u003e { } is SimpleCameraState.Error.ErrorStreamConfig -\u003e { } else -\u003e { } } } } Observers.ImageAnalysis can only be used during the image analysis feature. It is an observer pattern that returns analysis results. You can find the simple usage separated from here. private val observerImageAnalysis: Observers.ImageAnalysis = object : Observers.ImageAnalysis { override fun result(bitmap: Bitmap?) { bitmap?.let { Log.i(TAG,\"Bitmap received while analysi \" + \"\\n byte count: ${it.byteCount} \" + \"\\n : density ${it.density}\") } } } Observers.ImageCapture can only be used during the Image Capture feature. It is an observer pattern that returns captured image results. You can find the simple usage separated from here. private val observerImageCapture: Observers.ImageCapture = object : Observers.ImageCapture { override fun result(savedUri: Uri?, exception: Exception?) { if (savedUri != null) { Log.i(TAG, \"Image capture is succeed\") runOnUiThread { capturedImagePreview.setImageBitmap(savedUri.toBitmap(this@ImageCaptureActivity)) } } } } Usage You can find View definitions and Builder configuration for each feature separately. Usage of Image Analysis val simpleCameraView: SimpleCameraView = findViewById(R.id.camera_view) // Must be called after getting camera permissions simpleCameraView.observeCameraState(observerCameraState) .startImageAnalysis(this, observerImageAnalysis) Usage of Image Capture val simpleCameraView: SimpleCameraView = findViewById(R.id.camera_view) // Must be called after getting camera permissions simpleCameraView.observeCameraState(observerCameraState) .imageCapture(this) { ready -\u003e if(ready) { // Photo could be taken // You can set visibility of capture button here if you had one ! // Or you can take photo directly when it's ready simpleCameraView.takePhoto(observerImageCapture) } } Common Feature // Flipping camera simpleCameraView.flipCamera() Used Internal Libraries CameraX License Copyright 2022 github/zekierciyas (Zeki Erciyas) Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "https://avatars.githubusercontent.com/u/71823127?v=4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSimple Camera\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eSimple Camera is a library that allows you to use cameras in a simplified, easy, fast and effective way. It contains CameraX as an internal library. It simplifies the camera features used by CameraX and provides ease of use with a single library. As updates come on the CameraX side, the library will try to stay up to date. Missing features will be added soon. Like video capturing.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eTo be added/Added Features\u003c/h3\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e Image Analysis \u003cul\u003e \u003cli\u003e Flip Camera\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e Image Capture \u003cul\u003e \u003cli\u003e Flip Camera\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e Video Capture \u003cul\u003e \u003cli\u003e Flip Camera\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eInitial Installation\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eGradle\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eAdd below codes to your \u003cstrong\u003eroot\u003c/strong\u003e \u003ccode\u003ebuild.gradle\u003c/code\u003e file (not your module build.gradle file).\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"allprojects { repositories { maven { url \u0026#39;https://jitpack.io\u0026#39; } } }\"\u003e\u003cpre\u003e\u003cspan\u003eallprojects\u003c/span\u003e {\n    repositories {\n        maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eAnd add a dependency code to your \u003cstrong\u003emodule\u003c/strong\u003e\u0026#39;s \u003ccode\u003ebuild.gradle\u003c/code\u003e file.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation \u0026#39;com.github.zekierciyas:SimpleCamera:1.0.0\u0026#39; }\"\u003e\u003cpre\u003e\u003cspan\u003edependencies\u003c/span\u003e {\n         implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ecom.github.zekierciyas:SimpleCamera:1.0.0\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n }\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eAdd following XML namespace inside your XML layout file.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;\"\u003e\u003cpre\u003e\u003cspan\u003exmlns\u003c/span\u003e:app\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttp://schemas.android.com/apk/res-auto\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eSimpleCameraView\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWe can use \u003ccode\u003eSimpleCameraView\u003c/code\u003e with customized attributes.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;com.zekierciyas.library.view.SimpleCameraView android:id=\u0026#34;@+id/camera_view\u0026#34; app:cameraID=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; /\u0026gt;\"\u003e\u003cpre\u003e   \u0026lt;\u003cspan\u003ecom\u003c/span\u003e.zekierciyas.library.view.SimpleCameraView\n        \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/camera_view\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ecameraID\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e1\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003elayout_width\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003elayout_height\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAttribute descriptions\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWe can customize the palette image and selector or various options using the below attributes.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"app:cameraID=\u0026#34;0\u0026#34; // Default Front Side Lens app:cameraID=\u0026#34;1\u0026#34; // Default Back Side Lens\"\u003e\u003cpre\u003e        \u003cspan\u003eapp\u003c/span\u003e:cameraID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e0\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Default Front Side Lens \u003c/span\u003e\n        \u003cspan\u003eapp\u003c/span\u003e:cameraID\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e1\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Default Back Side Lens \u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eObservers\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eObservers can be used as separate objects as in the example. You can access it from the interface object of \u003ccode\u003eObservers\u003c/code\u003e.\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eObservers.CameraState\u003c/code\u003e is a common observation that provides general observation of the camera. It can also be used in other camera features.\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private val observerCameraState: Observers.CameraState = object : Observers.CameraState { override fun cameraState(simpleCameraState: SimpleCameraStateModel) { Log.d(TAG, \u0026#34;Camera state is ${simpleCameraState.action.toString()} \u0026#34;) when (simpleCameraState.action) { is SimpleCameraState.Action.Closed -\u0026gt; { } is SimpleCameraState.Action.Closing -\u0026gt; { } is SimpleCameraState.Action.Open -\u0026gt; { } is SimpleCameraState.Action.Opening -\u0026gt; { } is SimpleCameraState.Action.Pending -\u0026gt; { } else -\u0026gt; { } } when (simpleCameraState.error) { is SimpleCameraState.Error.ErrorCameraDisabled -\u0026gt; { } is SimpleCameraState.Error.ErrorCameraFatalError -\u0026gt; { } is SimpleCameraState.Error.ErrorCameraInUse -\u0026gt; { } is SimpleCameraState.Error.ErrorDoNotDisturbModelEnabled -\u0026gt; { } is SimpleCameraState.Error.ErrorMaxCameraInUse -\u0026gt; { } is SimpleCameraState.Error.ErrorOtherRecoverableError -\u0026gt; { } is SimpleCameraState.Error.ErrorStreamConfig -\u0026gt; { } else -\u0026gt; { } } } }\"\u003e\u003cpre\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e observerCameraState\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eCameraState\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e  \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eCameraState\u003c/span\u003e {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ecameraState\u003c/span\u003e(\u003cspan\u003esimpleCameraState\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSimpleCameraStateModel\u003c/span\u003e) {\n        \u003cspan\u003eLog\u003c/span\u003e.d(\u003cspan\u003eTAG\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eCamera state is \u003cspan\u003e${simpleCameraState.action.toString()}\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n        \u003cspan\u003ewhen\u003c/span\u003e (simpleCameraState.action) {\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eAction\u003c/span\u003e.\u003cspan\u003eClosed\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eAction\u003c/span\u003e.\u003cspan\u003eClosing\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eAction\u003c/span\u003e.\u003cspan\u003eOpen\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eAction\u003c/span\u003e.\u003cspan\u003eOpening\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eAction\u003c/span\u003e.\u003cspan\u003ePending\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n            \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n        }\n\n        \u003cspan\u003ewhen\u003c/span\u003e (simpleCameraState.error) {\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorCameraDisabled\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorCameraFatalError\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorCameraInUse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorDoNotDisturbModelEnabled\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorMaxCameraInUse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorOtherRecoverableError\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n\n            \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eSimpleCameraState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eErrorStreamConfig\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n            \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n\n            }\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eObservers.ImageAnalysis\u003c/code\u003e can only be used during the image analysis feature. It is an observer pattern that returns analysis results. You can find the simple usage separated from here.\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private val observerImageAnalysis: Observers.ImageAnalysis = object : Observers.ImageAnalysis { override fun result(bitmap: Bitmap?) { bitmap?.let { Log.i(TAG,\u0026#34;Bitmap received while analysi \u0026#34; + \u0026#34;\\n byte count: ${it.byteCount} \u0026#34; + \u0026#34;\\n : density ${it.density}\u0026#34;) } } }\"\u003e\u003cpre\u003e  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e observerImageAnalysis\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eImageAnalysis\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eImageAnalysis\u003c/span\u003e {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eresult\u003c/span\u003e(\u003cspan\u003ebitmap\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBitmap\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e) {\n        bitmap?.\u003cspan\u003elet\u003c/span\u003e {\n            \u003cspan\u003eLog\u003c/span\u003e.i(\u003cspan\u003eTAG\u003c/span\u003e,\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eBitmap received while analysi \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\n\u003c/span\u003e byte count: \u003cspan\u003e${it.byteCount}\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e\n                    \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\n\u003c/span\u003e : density \u003cspan\u003e${it.density}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eObservers.ImageCapture\u003c/code\u003e can only be used during the Image Capture feature. It is an observer pattern that returns captured image results. You can find the simple usage separated from here.\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private val observerImageCapture: Observers.ImageCapture = object : Observers.ImageCapture { override fun result(savedUri: Uri?, exception: Exception?) { if (savedUri != null) { Log.i(TAG, \u0026#34;Image capture is succeed\u0026#34;) runOnUiThread { capturedImagePreview.setImageBitmap(savedUri.toBitmap(this@ImageCaptureActivity)) } } } }\"\u003e\u003cpre\u003e   \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e observerImageCapture\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eImageCapture\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservers\u003c/span\u003e.\u003cspan\u003eImageCapture\u003c/span\u003e {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eresult\u003c/span\u003e(\u003cspan\u003esavedUri\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e, \u003cspan\u003eexception\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e) {\n        \u003cspan\u003eif\u003c/span\u003e (savedUri \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e) {\n            \u003cspan\u003eLog\u003c/span\u003e.i(\u003cspan\u003eTAG\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eImage capture is succeed\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n            runOnUiThread {\n                capturedImagePreview.setImageBitmap(savedUri.toBitmap(\u003cspan\u003ethis\u003c/span\u003e@ImageCaptureActivity))\n            }\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eUsage\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eYou can find View definitions and Builder configuration for each feature separately.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eUsage of Image Analysis\u003c/h4\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val simpleCameraView: SimpleCameraView = findViewById(R.id.camera_view) // Must be called after getting camera permissions simpleCameraView.observeCameraState(observerCameraState) .startImageAnalysis(this, observerImageAnalysis)\"\u003e\u003cpre\u003e \u003cspan\u003eval\u003c/span\u003e simpleCameraView\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSimpleCameraView\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e findViewById(\u003cspan\u003eR\u003c/span\u003e.id.camera_view)\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Must be called after getting camera permissions\u003c/span\u003e\nsimpleCameraView.observeCameraState(observerCameraState)\n    .startImageAnalysis(\u003cspan\u003ethis\u003c/span\u003e, observerImageAnalysis)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eUsage of Image Capture\u003c/h4\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val simpleCameraView: SimpleCameraView = findViewById(R.id.camera_view) // Must be called after getting camera permissions simpleCameraView.observeCameraState(observerCameraState) .imageCapture(this) { ready -\u0026gt; if(ready) { // Photo could be taken // You can set visibility of capture button here if you had one ! // Or you can take photo directly when it\u0026#39;s ready simpleCameraView.takePhoto(observerImageCapture) } }\"\u003e\u003cpre\u003e \u003cspan\u003eval\u003c/span\u003e simpleCameraView\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSimpleCameraView\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e findViewById(\u003cspan\u003eR\u003c/span\u003e.id.camera_view)\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Must be called after getting camera permissions\u003c/span\u003e\nsimpleCameraView.observeCameraState(observerCameraState)\n    .imageCapture(\u003cspan\u003ethis\u003c/span\u003e) {\n            ready \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e(ready) {\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Photo could be taken\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e You can set visibility of capture button here if you had one !\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Or you can take photo directly when it\u0026#39;s ready\u003c/span\u003e\n        simpleCameraView.takePhoto(observerImageCapture)\n    }\n    }\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eCommon Feature\u003c/h4\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Flipping camera simpleCameraView.flipCamera()\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Flipping camera \u003c/span\u003e\nsimpleCameraView.flipCamera()\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsed Internal Libraries\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/camera\" rel=\"nofollow\" target=\"_blank\"\u003eCameraX\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"Copyright 2022 github/zekierciyas (Zeki Erciyas) Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\"\u003e\u003cpre\u003eCopyright 2022 github/zekierciyas (Zeki Erciyas)\n\n    Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
