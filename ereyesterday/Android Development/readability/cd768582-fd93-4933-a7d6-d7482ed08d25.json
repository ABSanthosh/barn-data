{
  "id": "cd768582-fd93-4933-a7d6-d7482ed08d25",
  "title": "Widgets with Glance: Standing out",
  "link": "https://proandroiddev.com/widgets-with-glance-standing-out-33834eee2dee?source=rss----c72404660798---4",
  "description": "",
  "author": "Katie Barnett",
  "published": "Tue, 29 Oct 2024 21:38:43 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "jetpack-compose",
    "jetpack-glance",
    "android-app-development",
    "android",
    "android-development"
  ],
  "byline": "Katie Barnett",
  "length": 3147,
  "excerpt": "Detect wallpaper colors and decide whether to use dark or light text so transparent widgets do not get lost in the background.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Detect wallpaper colors so transparent widgets do not get lost in the backgroundAll good so farWidgets can look great against a home screen wallpaper when they have a solid background but what if instead the background is transparent? It looks fine if the text or graphics are a good contrast from the wallpaper:But what about if the wallpaper is not a good contrast? How do you choose a suitable color?Works on a light background, not on a dark.Even if you are using dynamic colors in your GlanceTheme (as I am in the image above), the theme system won’t automatically check for contrast against the background. So we must do this ourselves.First thing, we need to detect the device wallpaper. This can be done using the WallpaperManager API.First, get the WallpaperManager instance, then fetch the dominant colors. A list is available, arranged in order of priority (note: a minimum color occurrence percentage MIN_COLOR_OCCURRENCE — 5% by default — is applied for the color to appear in this list), from here we need to get the primary color and decide whether dark or light text should be used.This can be added to the GlanceTheme and initialised in a boolean state variable that can be then passed into the composable content.In the above code we can get the wallpaper colors usingwallpaperManager.getWallpaperColors(FLAG_SYSTEM)FLAG_SYSTEM indicates we want the colors for the home screen — passing in FLAG_LOCK would give the colors of the lock screen.An important thing to note is that getWallpaperColors is limited to API 27 and above so you can either update the minimumSdk of the app to 27 or surround this with an version check if statement.To detect whether to use dark or light text, we can use a utility function getUseDarkColorOnWallPaper. In this we can use the wallpaper colors colorHints to check if we should use dark text with the WallpaperColors.HINT_SUPPORTS_DARK_TEXT flag. As per the API documentation, HINT_SUPPORTS_DARK_TEXT:Specifies that dark text is preferred over the current wallpaper for best presentation.eg. A launcher may set its text color to black if this flag is specified.There is also HINT_SUPPORTS_DARK_THEME which could also be useful for a widget with a solid background to detect whether a dark or light background would be preferable.Using HINT_SUPPORTS_DARK_TEXT and colorHints:colorHints is only available in Android 12 and above, if we are using a lower version a more manual approach is required. For this, we get the primary color as a HSV value and then evaluate the intensity and contrast in another utility function.Note: I did not originally write this code, I found it on this StackOverflow answer from SudoPlz. You could replace this with whichever algorithm you prefer.Now that we can tell if we should use dark or light text on widget creation, we need to ensure that whenever the wallpaper is changed the color is checked and the widget theme is updated.To do this we can create a WallpaperManager.OnColorsChangedListener in a DisposableEffect:Now, every time the wallpaper is changed the widget will update!Looking good in all situations!To see a full example, see my sample widget app:",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*mky0GpsMOkUNapd6diKK2A.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"7e48\"\u003eDetect wallpaper colors so transparent widgets do not get lost in the background\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@katiebarnett5?source=post_page---byline--33834eee2dee--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Katie Barnett\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*5UmMOU3BxA7gSCobglh6zw.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--33834eee2dee--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eAll good so far\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"4832\"\u003eWidgets can look great against a home screen wallpaper when they have a solid background but what if instead the background is transparent? It looks fine if the text or graphics are a good contrast from the wallpaper:\u003c/p\u003e\u003cp id=\"1c02\"\u003eBut what about if the wallpaper is not a good contrast? How do you choose a suitable color?\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eWorks on a light background, not on a dark.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"9ea6\"\u003eEven if you are using dynamic colors in your \u003ccode\u003eGlanceTheme\u003c/code\u003e (as I am in the image above), the theme system won’t automatically check for contrast against the background. So we must do this ourselves.\u003c/p\u003e\u003cp id=\"d162\"\u003eFirst thing, we need to detect the device wallpaper. This can be done using the \u003ca href=\"https://developer.android.com/reference/android/app/WallpaperManager\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWallpaperManager API\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"c00d\"\u003eFirst, get the \u003ccode\u003eWallpaperManager\u003c/code\u003e instance, then fetch the dominant colors. A list is available, arranged in order of priority (note: a minimum color occurrence percentage \u003ccode\u003eMIN_COLOR_OCCURRENCE\u003c/code\u003e — 5% by default — is applied for the color to appear in this list), from here we need to get the primary color and decide whether dark or light text should be used.\u003c/p\u003e\u003cp id=\"fab5\"\u003eThis can be added to the \u003ccode\u003eGlanceTheme\u003c/code\u003e and initialised in a boolean state variable that can be then passed into the composable \u003ccode\u003econtent\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9160\"\u003eIn the above code we can get the wallpaper colors using\u003c/p\u003e\u003cp id=\"4d7d\"\u003e\u003ccode\u003ewallpaperManager.getWallpaperColors(FLAG_SYSTEM)\u003c/code\u003e\u003c/p\u003e\u003cp id=\"dd83\"\u003e\u003ccode\u003eFLAG_SYSTEM\u003c/code\u003e indicates we want the colors for the home screen — passing in \u003ccode\u003eFLAG_LOCK\u003c/code\u003e would give the colors of the lock screen.\u003c/p\u003e\u003cp id=\"7293\"\u003eAn important thing to note is that \u003ccode\u003egetWallpaperColors\u003c/code\u003e is limited to \u003ccode\u003eAPI 27\u003c/code\u003e and above so you can either update the \u003ccode\u003eminimumSdk\u003c/code\u003e of the app to \u003ccode\u003e27\u003c/code\u003e or surround this with an version check if statement.\u003c/p\u003e\u003cp id=\"5ef0\"\u003eTo detect whether to use dark or light text, we can use a utility function \u003ccode\u003egetUseDarkColorOnWallPaper\u003c/code\u003e. In this we can use the wallpaper colors \u003ccode\u003ecolorHints\u003c/code\u003e to check if we should use dark text with the \u003ccode\u003eWallpaperColors.HINT_SUPPORTS_DARK_TEXT\u003c/code\u003e flag. As per the API documentation, \u003ccode\u003eHINT_SUPPORTS_DARK_TEXT\u003c/code\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"a93e\"\u003eSpecifies that dark text is preferred over the current wallpaper for best presentation.\u003cbr/\u003eeg. A launcher may set its text color to black if this flag is specified.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"c896\"\u003eThere is also \u003ccode\u003eHINT_SUPPORTS_DARK_THEME\u003c/code\u003e which could also be useful for a widget with a solid background to detect whether a dark or light background would be preferable.\u003c/p\u003e\u003cp id=\"0f3a\"\u003eUsing \u003ccode\u003eHINT_SUPPORTS_DARK_TEXT\u003c/code\u003e and \u003ccode\u003ecolorHints\u003c/code\u003e:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0584\"\u003e\u003ccode\u003ecolorHints\u003c/code\u003e is only available in \u003ca href=\"https://www.android.com/intl/en_au/android-12/#a12-color-reimagined\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid 12 and above\u003c/a\u003e, if we are using a lower version a more manual approach is required. For this, we get the primary color as a HSV value and then evaluate the intensity and contrast in another utility function.\u003c/p\u003e\u003cp id=\"fbc1\"\u003e\u003cem\u003eNote: I did not originally write this code, I found it on this \u003c/em\u003e\u003ca href=\"https://stackoverflow.com/a/41491220/4714860\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eStackOverflow answer\u003c/em\u003e\u003c/a\u003e\u003cem\u003e from \u003c/em\u003e\u003ca href=\"https://stackoverflow.com/users/1658268/sudoplz\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eSudoPlz\u003c/em\u003e\u003c/a\u003e\u003cem\u003e. You could replace this with whichever algorithm you prefer.\u003c/em\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"7b93\"\u003eNow that we can tell if we should use dark or light text on widget creation, we need to ensure that whenever the wallpaper is changed the color is checked and the widget theme is updated.\u003c/p\u003e\u003cp id=\"fb75\"\u003eTo do this we can create a \u003ccode\u003eWallpaperManager.OnColorsChangedListener\u003c/code\u003e in a \u003ccode\u003eDisposableEffect\u003c/code\u003e:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"d033\"\u003eNow, every time the wallpaper is changed the widget will update!\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eLooking good in all situations!\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"aa58\"\u003eTo see a full example, see my \u003ca href=\"https://github.com/KatieBarnett/MotivateMe/tree/workshop/Activity-12\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esample widget app\u003c/a\u003e:\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-10-29T21:38:43.096Z",
  "modifiedTime": null
}
