{
  "id": "fd004a91-f206-4248-a23e-fd1c7201a7f9",
  "title": "‘Tim, Don’t Kill My Vibe’",
  "link": "https://irace.me/vibe",
  "description": "",
  "author": "John Gruber",
  "published": "2025-03-24T22:53:19Z",
  "source": "https://daringfireball.net/feeds/main",
  "categories": null,
  "byline": "",
  "length": 5181,
  "excerpt": "",
  "siteName": "Bryan Irace",
  "favicon": "https://irace.me/public/favicon.png",
  "text": "About     Writing     Talking March 21, 2025 · 3 minute read Recent criticism of Apple’s AI efforts has been juicy to say the least, but this shouldn’t distract us from continuing to criticize one of Apple’s most deserving targets: App Review. Especially now that there’s a perfectly good AI lens through which to do so. It’s one thing for Apple’s AI product offerings to be non-competitive. Perhaps even worse is that as Apple stands still, software development is moving forward faster than ever before. Like it or not, LLMs—both through general chat interfaces and purpose-built developer tools—have meaningfully increased the rate at which new software can be produced. And they’ve done so both by making skilled developers more productive while also lowering the bar for less-experienced participants. Barring a sharp correction, Apple looks increasingly likely to miss out on a generation of developers conditioned to first reach for tools like Cursor, Replit, or v0—especially as Apple’s own AI tooling remains notably absent. This goes well beyond enabling new entrants to “vibe code”—experienced mobile developers who, despite history with Xcode and a predilection for building native apps, are begrudgingly swapping out their tools in acknowledgement of the inarguable productivity benefits. Sure, AI-assisted developer tools can be used to generate native iOS apps, but they’re not nearly as good at this as they are at generating e.g. React, whose developer experience advantage predates the LLM wave and has only since accelerated. While Mobile Safari can run webapps quite well, and native apps can be built using React Native, those clearly aren’t strategically ideal for Apple1. So iOS apps may increasingly be built using Cursor, and perhaps a larger percentage of them end up being built using React Native. And yet iPhones remain massively popular, so what’s the problem as long as they’re being built? The wall that you’ll hit when actually trying to distribute them: I legit think Apple’s risking it all right now.Creating apps has never been easier. Releasing the app is harder than making it.If they don’t reduce the friction, they will lose. https://t.co/iZXseNPrjf— Theo - t3.gg (@theo) February 19, 2025 App Review has always long been a major source of developer frustration. Authoritarian yet inconsistent policy enforcement aside2, it’s simply too hard to distribute software even to your own Apple devices, let alone someone else’s. This isn’t new by any means, but as the time to build an app shrinks from weeks/months to hours/days, it feels more egregious—and thus like more of a liability—than ever before. It’s just not sustainable for App Review to take longer than building the app itself.Apple’s had no incentive to approve App Review for… ever? Not sure that the decreasing cost of software actually changes that. But between this and the growing gap in dev tools/experience… https://t.co/zo5ExXxlQb— Bryan Irace (@irace) February 8, 2025 I recently built a small iOS app for myself. I can install it on my phone directly from Xcode but it expires after seven days because I’m using a free Apple Developer account. I’m not trying to avoid paying Apple, but there’s enough friction involved in switching to a paid account that I simply haven’t been bothered. And I used to wrangle provisioning profiles for a living! I can’t imagine that I’m alone here, or that others with less tribal iOS development knowledge are going to have a higher tolerance for this. A friend asked me to send the app to them but that’d involve creating a TestFlight group, submitting a build to Apple, waiting for them to approve it, etc. Compare this to simply pushing to Cloudflare or Netlify and automatically having a URL you can send to a friend or share via Twitter. Or using tools like v0 or Replit, where hosting/distribution are already baked in. Again, this isn’t new—but being able to build this much software this fast is new. App distribution friction has stayed constant while friction in all other stages of software development has largely evaporated. It’s the difference between inconvenient and untenable. So what’s the alternative? Tech platforms are dominant until they aren’t and—obviously—iPhone hegemony won’t last forever. When sufficiently zoomed in, it’s really hard to see the first few cracks in the foundation—the harbingers of the beginning of the end, even if we’re a long way from the actual end. I would’ve recently laughed at the suggestion that webapps could legitimately contend on mobile but I’m no longer laughing. OpenAI building an iPhone competitor might sound similarly hard to believe, but don’t forget that such skepticism—“The PC guys are not going to just, you know, knock this out. I guarantee it”—was levied by incumbents towards the iPhone itself. If Apple sees its developer tooling and policies as neatly-paved sidewalks, new desire paths are forming—paths increasingly designed to minimize touchpoints with Apple. Alarm bells should be ringing for those concerned with what remains of Apple’s developer goodwill, and consequently, its market position.",
  "image": "http://irace.me/images/vibe/wall.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n      \u003cheader\u003e\n        \u003cp\u003e\u003ca href=\"https://irace.me/\" title=\"Home\"\u003e\u003cimg src=\"https://irace.me/public/bryan.png\"/\u003e\u003c/a\u003e\n        \u003c/p\u003e\n\n        \u003cnav\u003e\n          \u003ca href=\"https://irace.me/about/\"\u003eAbout\u003c/a\u003e     \u003ca href=\"https://irace.me/writing/\"\u003eWriting\u003c/a\u003e     \u003ca href=\"https://irace.me/talking/\"\u003eTalking\u003c/a\u003e\n        \u003c/nav\u003e\n      \u003c/header\u003e\n\n      \u003cmain\u003e\u003carticle\u003e\n  \n\n  \n  \u003cp\u003e\n    \u003ctime datetime=\"2025-03-21T00:00:00+00:00\"\u003eMarch 21, 2025\u003c/time\u003e · 3 minute read\n  \u003c/p\u003e\n\n  \u003cfigure\u003e\n  \u003cimg src=\"https://irace.me/images/vibe/wall.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eRecent criticism of Apple’s AI efforts \u003ca href=\"https://stratechery.com/2025/apple-ais-platform-pivot-potential/\"\u003ehas\u003c/a\u003e \u003ca href=\"https://stratechery.com/2025/apple-ais-platform-pivot-potential/\"\u003ebeen\u003c/a\u003e \u003ca href=\"https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino\"\u003ejuicy\u003c/a\u003e to say the least, but this shouldn’t distract us from continuing to criticize one of Apple’s most deserving targets: App Review. Especially now that there’s a perfectly good AI lens through which to do so.\u003c/p\u003e\n\n\u003cp\u003eIt’s one thing for Apple’s AI \u003cem\u003eproduct offerings\u003c/em\u003e to be non-competitive. Perhaps even worse is that as Apple stands still, software development is moving forward faster than ever before. Like it or not, LLMs—both through general chat interfaces and purpose-built developer tools—have meaningfully increased the rate at which new software can be produced. And they’ve done so both by making skilled developers more productive while also lowering the bar for less-experienced participants.\u003c/p\u003e\n\n\u003cp\u003eBarring a sharp correction, Apple looks increasingly likely to miss out on a generation of developers conditioned to first reach for tools like \u003ca href=\"https://cursor.com\"\u003eCursor\u003c/a\u003e, \u003ca href=\"https://replit.com\"\u003eReplit\u003c/a\u003e, or \u003ca href=\"https://v0.dev\"\u003ev0\u003c/a\u003e—especially as Apple’s own AI tooling \u003ca href=\"https://dimillian.medium.com/where-is-swift-assist-6ea348767cf3\"\u003eremains notably absent\u003c/a\u003e. This goes well beyond enabling new entrants to “\u003ca href=\"https://x.com/karpathy/status/1886192184808149383\"\u003evibe code\u003c/a\u003e”—experienced mobile developers who, despite history with Xcode and a predilection for building native apps, are begrudgingly swapping out their tools in acknowledgement of the inarguable productivity benefits.\u003c/p\u003e\n\n\u003cp\u003eSure, AI-assisted developer tools \u003cem\u003ecan\u003c/em\u003e be used to generate native iOS apps, but they’re not nearly as good at this as they are at generating e.g. React, whose developer experience advantage predates the LLM wave and has only since accelerated. While Mobile Safari can run webapps quite well, and native apps \u003cem\u003ecan\u003c/em\u003e be built using React Native, those clearly aren’t strategically ideal for Apple\u003csup id=\"fnref:1\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:1\" rel=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo iOS apps may increasingly be built using Cursor, and perhaps a larger percentage of them end up being built using React Native. And yet iPhones remain massively popular, so what’s the problem as long as they’re being built?\u003c/p\u003e\n\n\u003cp\u003eThe wall that you’ll hit when actually trying to distribute them:\u003c/p\u003e\n\n\u003ccenter\u003e\u003cblockquote data-theme=\"dark\"\u003e\u003cdiv lang=\"en\" dir=\"ltr\"\u003e\u003cp\u003eI legit think Apple’s risking it all right now.\u003c/p\u003e\u003cp\u003eCreating apps has never been easier. Releasing the app is harder than making it.\u003c/p\u003e\u003cp\u003eIf they don’t reduce the friction, they will lose. \u003ca href=\"https://t.co/iZXseNPrjf\"\u003ehttps://t.co/iZXseNPrjf\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e— Theo - t3.gg (@theo) \u003ca href=\"https://twitter.com/theo/status/1892322548626469215?ref_src=twsrc%5Etfw\"\u003eFebruary 19, 2025\u003c/a\u003e\u003c/blockquote\u003e \u003c/center\u003e\n\n\u003cp\u003eApp Review has always long been a major source of developer frustration. Authoritarian yet inconsistent policy enforcement aside\u003csup id=\"fnref:2\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:2\" rel=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e, it’s simply too hard to distribute software \u003cem\u003eeven to your own Apple devices\u003c/em\u003e, let alone someone else’s. This isn’t new by any means, but as the time to build an app shrinks from weeks/months to hours/days, it feels more egregious—and thus like more of a liability—than ever before.\u003c/p\u003e\n\n\u003ccenter\u003e\u003cblockquote data-theme=\"dark\"\u003e\u003cdiv lang=\"en\" dir=\"ltr\"\u003e\u003cp\u003eIt’s just not sustainable for App Review to take longer than building the app itself.\u003c/p\u003e\u003cp\u003eApple’s had no incentive to approve App Review for… ever? Not sure that the decreasing cost of software actually changes that. But between this and the growing gap in dev tools/experience… \u003ca href=\"https://t.co/zo5ExXxlQb\"\u003ehttps://t.co/zo5ExXxlQb\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e— Bryan Irace (@irace) \u003ca href=\"https://twitter.com/irace/status/1888206108197613806?ref_src=twsrc%5Etfw\"\u003eFebruary 8, 2025\u003c/a\u003e\u003c/blockquote\u003e \u003c/center\u003e\n\n\u003cp\u003eI recently built a small iOS app for myself. I can install it on my phone directly from Xcode but it expires after seven days because I’m using a free Apple Developer account. I’m not trying to avoid paying Apple, but there’s enough friction involved in switching to a paid account that I simply haven’t been bothered. And I used to wrangle provisioning profiles for a living! I can’t imagine that I’m alone here, or that others with \u003cem\u003eless\u003c/em\u003e tribal iOS development knowledge are going to have a higher tolerance for this. A friend asked me to send the app to them but that’d involve creating a TestFlight group, submitting a build to Apple, waiting for them to approve it, etc. Compare this to simply pushing to Cloudflare or Netlify and automatically having a URL you can send to a friend or share via Twitter. Or using tools like v0 or Replit, where hosting/distribution are already baked in.\u003c/p\u003e\n\n\u003cp\u003eAgain, this isn’t new—but being able to build this much software this fast \u003cem\u003eis\u003c/em\u003e new. App distribution friction has stayed constant while friction in \u003cem\u003eall other stages\u003c/em\u003e of software development has largely evaporated. It’s the difference between inconvenient and untenable.\u003c/p\u003e\n\n\u003cp\u003eSo what’s the alternative? Tech platforms are dominant until they aren’t and—obviously—iPhone hegemony won’t last forever. When sufficiently zoomed in, it’s really hard to see the first few cracks in the foundation—the harbingers of the beginning of the end, even if we’re a long way from the \u003cem\u003eactual\u003c/em\u003e end. I would’ve recently laughed at the suggestion that webapps could legitimately contend on mobile \u003ca href=\"https://www.macstories.net/stories/the-ipads-sweet-solution/\"\u003ebut I’m no longer laughing\u003c/a\u003e. \u003ca href=\"https://bgr.com/tech/sam-altman-wants-his-upcoming-chatgpt-ai-device-to-replace-your-smartphone/\"\u003eOpenAI building an iPhone competitor\u003c/a\u003e might sound similarly hard to believe, but don’t forget that such skepticism—“The PC guys are not going to just, you know, knock this out. I guarantee it”—was levied by incumbents towards the iPhone itself.\u003c/p\u003e\n\n\u003cp\u003eIf Apple sees its developer tooling and policies as neatly-paved sidewalks, new \u003ca href=\"https://en.wikipedia.org/wiki/Desire_path\"\u003edesire paths\u003c/a\u003e are forming—paths increasingly designed to minimize touchpoints with Apple. Alarm bells should be ringing for those concerned with \u003ca href=\"https://marco.org/2021/06/03/developer-relations\"\u003ewhat remains of\u003c/a\u003e Apple’s developer goodwill, and consequently, its market position.\u003c/p\u003e\n\n\n\n\u003c/article\u003e\n\u003c/main\u003e\n\n      \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-03-21T00:00:00Z",
  "modifiedTime": null
}
