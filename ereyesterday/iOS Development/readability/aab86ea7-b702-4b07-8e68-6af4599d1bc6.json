{
  "id": "aab86ea7-b702-4b07-8e68-6af4599d1bc6",
  "title": "Building with nightly Swift toolchains on macOS",
  "link": "https://oleb.net/2024/swift-toolchains/",
  "description": "",
  "author": "Ole Begemann",
  "published": "2024-03-05T18:54:44Z",
  "source": "https://oleb.net/blog/atom.xml",
  "categories": null,
  "byline": "By Ole Begemann …",
  "length": 4920,
  "excerpt": "An overview of the various options you have for selecting the Swift toolchain you want to build with, and two caveats to be aware of.",
  "siteName": "Ole Begemann",
  "favicon": "",
  "text": "The Swift website provides nightly builds of the Swift compiler (called toolchains) for download. Building with a nightly compiler can be useful if you want to check if a bug has already been fixed on main, or if you want to experiment with upcoming language features such as Embedded Swift, as I’ve been doing lately. A toolchain is distributed as a .pkg installer that installs itself into /Library/Developer/Toolchains (or the equivalent path in your home directory). After installation, you have several options to select the toolchain you want to build with: In Xcode In Xcode, select the toolchain from the main menu (Xcode \u003e Toolchains), then build and/or run your code normally. Not all Xcode features work with a custom toolchain. For example, playgrounds don’t work, and Xcode will always use its built-in copy of the Swift Package Manager, so you won’t be able to use unreleased SwiftPM features in this way. Also, Apple won’t accept apps built with a non-standard toolchain for submission to the App Store. On the command line When building on the command line there are multiple options, depending on your preferences and what tool you want to use. The TOOLCHAINS environment variable All of the various Swift build tools respect the TOOLCHAINS environment variable. This should be set to the desired toolchain’s bundle ID, which you can find in the Info.plist file in the toolchain’s directory. Example (I’m using a nightly toolchain from 2024-03-03 here): # My normal Swift version is 5.10 $ swift --version swift-driver version: 1.90.11.1 Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4) # Make sure xcode-select points to Xcode, not to /Library/Developer/CommandLineTools # The Command Line Tools will ignore the TOOLCHAINS variable. $ xcode-select --print-path /Applications/Xcode.app/Contents/Developer # The nightly toolchain is 6.0-dev $ export TOOLCHAINS=org.swift.59202403031a $ swift --version Apple Swift version 6.0-dev (LLVM 0c7823cab15dec9, Swift 0cc05909334c6f7) Toolchain name vs. bundle ID I think the TOOLCHAINS variable is also supposed to accept the toolchain’s name instead of the bundle ID, but this doesn’t work reliably for me. I tried passing: the DisplayName from Info.plist (“Swift Development Snapshot 2024-03-03 (a)”), the ShortDisplayName (“Swift Development Snapshot”; not unique if you have more than one toolchain installed!), the directory name, both with and without the .xctoolchain suffix, but none of them worked reliably, especially if you have multiple toolchains installed. In my limited testing, it seems that Swift picks the first toolchain that matches the short name prefix (“Swift Development Snapshot”) and ignores the long name components. For example, when I select “Swift Development Snapshot 2024-03-03 (a)”, Swift picks swift-DEVELOPMENT-SNAPSHOT-2024-01-30-a, presumably because that’s the “first” one (in alphabetical order) I have installed. My advice: stick to the bundle ID, it works. Here’s a useful command to find the bundle ID of the latest toolchain you have installed (you may have to adjust the path if you install your toolchains in ~/Library instead of /Library): $ plutil -extract CFBundleIdentifier raw /Library/Developer/Toolchains/swift-latest.xctoolchain/Info.plist org.swift.59202403031 # Set the toolchain to the latest installed: export TOOLCHAINS=$(plutil -extract CFBundleIdentifier raw /Library/Developer/Toolchains/swift-latest.xctoolchain/Info.plist) xcrun and xcodebuild xcrun and xcodebuild respect the TOOLCHAINS variable too. As an alternative, they also provide an equivalent command line parameter named --toolchain. The parameter has the same semantics as the environment variable: you pass the toolchain’s bundle ID. Example: $ xcrun --toolchain org.swift.59202403031a --find swiftc /Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2024-03-03-a.xctoolchain/usr/bin/swiftc Swift Package Manager SwiftPM also respects the TOOLCHAINS variable, and it has a --toolchains parameter as well, but this one expects the path to the toolchain, not its bundle ID. Example: $ swift build --toolchain /Library/Developer/Toolchains/swift-latest.xctoolchain Another thing to be aware of: if you specify a toolchain that isn’t installed (e.g. because of a typo or because you’re trying to run a script that was developed in a different environment), none of the tools will fail: swift, xcrun, and xcodebuild silently ignore the toolchain setting and use the default Swift toolchain (set via xcode-select). SwiftPM silently ignores a missing toolchain set via TOOLCHAINS. If you pass an invalid directory to the --toolchains parameter, it at least prints a warning before it continues building with the default toolchain. I don’t like this. I’d much rather get an error if the build tool can’t find the toolchain I told it to use. It’s especially dangerous in scripts.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n      \u003carticle\u003e\n        \u003cheader\u003e\n          \n        \u003c/header\u003e\n\n        \n\n        \u003cdiv\u003e\n          \u003cp\u003eThe Swift website provides nightly builds of the Swift compiler (called toolchains) \u003ca href=\"https://www.swift.org/download/\"\u003efor download\u003c/a\u003e. Building with a nightly compiler can be useful if you want to check if a bug has already been fixed on main, or if you want to experiment with upcoming language features such as Embedded Swift, \u003ca href=\"https://forums.swift.org/t/embedded-swift-on-the-raspberry-pi-pico-rp2040-without-the-pico-sdk/69338\" title=\"Swift forum post: Embedded Swift on the Raspberry Pi Pico/RP2040\"\u003eas I’ve been doing lately\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eA toolchain is distributed as a \u003ccode\u003e.pkg\u003c/code\u003e installer that installs itself into \u003ccode\u003e/Library/Developer/Toolchains\u003c/code\u003e (or the equivalent path in your home directory). After installation, you have several options to select the toolchain you want to build with:\u003c/p\u003e\n\n\u003ch2 id=\"in-xcode\"\u003eIn Xcode\u003c/h2\u003e\n\n\u003cp\u003eIn Xcode, select the toolchain from the main menu (Xcode \u0026gt; Toolchains), then build and/or run your code normally.\u003c/p\u003e\n\n\u003cp\u003eNot all Xcode features work with a custom toolchain. For example, playgrounds don’t work, and Xcode will always use its built-in copy of the Swift Package Manager, so you won’t be able to use unreleased SwiftPM features in this way. Also, Apple won’t accept apps built with a non-standard toolchain for submission to the App Store.\u003c/p\u003e\n\n\u003ch2 id=\"on-the-command-line\"\u003eOn the command line\u003c/h2\u003e\n\n\u003cp\u003eWhen building on the command line there are multiple options, depending on your preferences and what tool you want to use.\u003c/p\u003e\n\n\u003ch3 id=\"the-toolchains-environment-variable\"\u003eThe \u003ccode\u003eTOOLCHAINS\u003c/code\u003e environment variable\u003c/h3\u003e\n\n\u003cp\u003eAll of the various Swift build tools respect the \u003ccode\u003eTOOLCHAINS\u003c/code\u003e environment variable. This should be set to the desired toolchain’s bundle ID, which you can find in the \u003ccode\u003eInfo.plist\u003c/code\u003e file in the toolchain’s directory.\u003c/p\u003e\n\n\u003cp\u003eExample (I’m using a nightly toolchain from 2024-03-03 here):\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# My normal Swift version is 5.10\u003c/span\u003e\n\u003cspan\u003e$ \u003c/span\u003eswift \u003cspan\u003e--version\u003c/span\u003e\nswift-driver version: 1.90.11.1 Apple Swift version 5.10 \u003cspan\u003e(\u003c/span\u003eswiftlang-5.10.0.13 clang-1500.3.9.4\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# Make sure xcode-select points to Xcode, not to /Library/Developer/CommandLineTools\u003c/span\u003e\n\u003cspan\u003e# The Command Line Tools will ignore the TOOLCHAINS variable.\u003c/span\u003e\n\u003cspan\u003e$ \u003c/span\u003excode-select \u003cspan\u003e--print-path\u003c/span\u003e\n/Applications/Xcode.app/Contents/Developer\n\n\u003cspan\u003e# The nightly toolchain is 6.0-dev\u003c/span\u003e\n\u003cspan\u003e$ \u003c/span\u003e\u003cspan\u003eexport \u003c/span\u003e\u003cspan\u003eTOOLCHAINS\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eorg.swift.59202403031a\n\u003cspan\u003e$ \u003c/span\u003eswift \u003cspan\u003e--version\u003c/span\u003e\nApple Swift version 6.0-dev \u003cspan\u003e(\u003c/span\u003eLLVM 0c7823cab15dec9, Swift 0cc05909334c6f7\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"toolchain-name-vs-bundle-id\"\u003eToolchain name vs. bundle ID\u003c/h3\u003e\n\n\u003cp\u003eI \u003cem\u003ethink\u003c/em\u003e the \u003ccode\u003eTOOLCHAINS\u003c/code\u003e variable is also supposed to accept the toolchain’s name instead of the bundle ID, but this doesn’t work reliably for me. I tried passing:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ccode\u003eDisplayName\u003c/code\u003e from \u003ccode\u003eInfo.plist\u003c/code\u003e (“Swift Development Snapshot 2024-03-03 (a)”),\u003c/li\u003e\n  \u003cli\u003ethe \u003ccode\u003eShortDisplayName\u003c/code\u003e (“Swift Development Snapshot”; not unique if you have more than one toolchain installed!),\u003c/li\u003e\n  \u003cli\u003ethe directory name, both with and without the \u003ccode\u003e.xctoolchain\u003c/code\u003e suffix,\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ebut none of them worked reliably, especially if you have multiple toolchains installed.\u003c/p\u003e\n\n\u003cp\u003eIn my limited testing, it seems that Swift picks the first toolchain that matches the short name prefix (“Swift Development Snapshot”) and ignores the long name components. For example, when I select “Swift Development Snapshot 2024-03-03 (a)”, Swift picks \u003ccode\u003eswift-DEVELOPMENT-SNAPSHOT-2024-01-30-a\u003c/code\u003e, presumably because that’s the “first” one (in alphabetical order) I have installed.\u003c/p\u003e\n\n\u003cp\u003eMy advice: stick to the bundle ID, it works. Here’s a useful command to find the bundle ID of the latest toolchain you have installed (you may have to adjust the path if you install your toolchains in \u003ccode\u003e~/Library\u003c/code\u003e instead of \u003ccode\u003e/Library\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$ \u003c/span\u003eplutil \u003cspan\u003e-extract\u003c/span\u003e CFBundleIdentifier raw /Library/Developer/Toolchains/swift-latest.xctoolchain/Info.plist\norg.swift.59202403031\n\n\u003cspan\u003e# Set the toolchain to the latest installed:\u003c/span\u003e\n\u003cspan\u003eexport \u003c/span\u003e\u003cspan\u003eTOOLCHAINS\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003eplutil \u003cspan\u003e-extract\u003c/span\u003e CFBundleIdentifier raw /Library/Developer/Toolchains/swift-latest.xctoolchain/Info.plist\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"xcrun-and-xcodebuild\"\u003e\u003ccode\u003excrun\u003c/code\u003e and \u003ccode\u003excodebuild\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003excrun\u003c/code\u003e and \u003ccode\u003excodebuild\u003c/code\u003e respect the \u003ccode\u003eTOOLCHAINS\u003c/code\u003e variable too. As an alternative, they also provide an equivalent command line parameter named \u003ccode\u003e--toolchain\u003c/code\u003e. The parameter has the same semantics as the environment variable: you pass the toolchain’s bundle ID. Example:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$ \u003c/span\u003excrun \u003cspan\u003e--toolchain\u003c/span\u003e org.swift.59202403031a \u003cspan\u003e--find\u003c/span\u003e swiftc\n/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2024-03-03-a.xctoolchain/usr/bin/swiftc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"swift-package-manager\"\u003eSwift Package Manager\u003c/h3\u003e\n\n\u003cp\u003eSwiftPM also respects the \u003ccode\u003eTOOLCHAINS\u003c/code\u003e variable, and it has a \u003ccode\u003e--toolchains\u003c/code\u003e parameter as well, but this one expects the \u003cem\u003epath\u003c/em\u003e to the toolchain, \u003cem\u003enot\u003c/em\u003e its bundle ID. Example:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$ \u003c/span\u003eswift build \u003cspan\u003e--toolchain\u003c/span\u003e /Library/Developer/Toolchains/swift-latest.xctoolchain\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAnother thing to be aware of: if you specify a toolchain that isn’t installed (e.g. because of a typo or because you’re trying to run a script that was developed in a different environment), none of the tools will fail:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eswift\u003c/code\u003e, \u003ccode\u003excrun\u003c/code\u003e, and \u003ccode\u003excodebuild\u003c/code\u003e silently ignore the toolchain setting and use the default Swift toolchain (set via \u003ccode\u003excode-select\u003c/code\u003e).\u003c/li\u003e\n  \u003cli\u003eSwiftPM silently ignores a missing toolchain set via \u003ccode\u003eTOOLCHAINS\u003c/code\u003e. If you pass an invalid directory to the \u003ccode\u003e--toolchains\u003c/code\u003e parameter, it at least prints a warning before it continues building with the default toolchain.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI don’t like this. I’d much rather get an error if the build tool can’t find the toolchain I told it to use. It’s especially dangerous in scripts.\u003c/p\u003e\n\n        \u003c/div\u003e\n      \u003c/article\u003e\n      \n      \n      \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-03-05T18:54:44Z",
  "modifiedTime": "2024-06-15T17:52:05Z"
}
