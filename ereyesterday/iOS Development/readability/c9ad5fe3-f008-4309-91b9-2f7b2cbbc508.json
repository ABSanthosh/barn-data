{
  "id": "c9ad5fe3-f008-4309-91b9-2f7b2cbbc508",
  "title": "What are mobile release engineering teams and when do you need one? (Runway)",
  "link": "https://www.runway.team/blog/what-are-mobile-release-engineering-teams-and-when-do-you-need-one",
  "description": "The early (and also not-so-early) days of building a tech startup means hiring and working with people who are capable of wearing a lot of hats. There are a ton of things to do and nowhere near an equal amount of resources to do them. Even if you join as a specialist, chances are you'll find yourself getting deep into other areas. This is true across the organization, including in mobile engineering. Early engineers don’t just write the code that builds the foundation for the app’s future success (while building up the tech debt that future engineers will pull their hair out over) but also the initial infrastructure both for how teams get things done and how they ship code out the door. This doesn’t last forever though. As teams grow they make the transition out of generalist, jack-of-all-trades roles and begin focusing on specialization. But one part of the org where there is often a lag in making this transition — and sometimes a very long one — is on the mobile team. Very few mobile engineers will have time to support both their team's app features and the series of Ruby scripts that support their release process, yet the expectation that they do both often lingers far beyond when other teams in the organization have fully specialized. In this article, we'll look at why this happens and how big tech companies follow-up on this problem.",
  "author": "Bruno Rocha",
  "published": "Fri, 28 Jun 2024 09:00:00 GMT+2",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "October 27, 2022",
  "length": 9975,
  "excerpt": "Release engineers build and maintain tools and processes to support the company in getting features shipped and apps updates out the door. When should you think about building your own release engineering team?",
  "siteName": "Runway",
  "favicon": "https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/5fd2fc79b614d609d9628766_favicon-32.png",
  "text": "The early (and also not-so-early) days of building a tech startup means hiring and working with people who are capable of wearing a lot of hats. There are a ton of things to do and nowhere near an equal amount of resources to do them. Even if you join as a specialist, chances are you'll find yourself getting deep into other areas.This is true across the organization, including in mobile engineering. Early engineers don’t just write the code that builds the foundation for the app’s future success (while building up the tech debt that future engineers will pull their hair out over) but also the initial infrastructure both for how teams get things done and how they ship code out the door. This doesn’t last forever though. As teams grow they make the transition out of generalist, jack-of-all-trades roles and begin focusing on specialization. But one part of the org where there is often a lag in making this transition — and sometimes a very long one — is on the mobile team. Very few mobile engineers will have time to support both their team's app features and the series of Ruby scripts that support their release process, yet the expectation that they do both often lingers far beyond when other teams in the organization have fully specialized.    The challenge of mobile release engineeringReleasing code is supposed to be easy, right? You merge some code, do a little testing, run CI, ship it to production, and then just fix any bugs live as they come up. Rinse and repeat. To be honest, this is usually true in very small companies. But something that's also true is that the more a company grows, the more complicated this process gets. This is especially the case when you start having multiple product areas running in parallel; a point where coordination is key in order to avoid different parts of the company from running into each other.Mobile teams in particular face unique challenges when it comes to releases:Required app store reviews add inherent complexity. Mobile developers can't make use of fancy automated deployments and continuous delivery like web teams do, they must submit them for review and be at mercy of Apple and Google's goodwill. This means that you can never really be sure when a new version is going to be rolled out, as review conditions and timelines are kept intentionally vague and sometimes even non-sensensical.Mobile workflow automation is often bespoke and ad hoc. The need for all this manual work usually means mobile engineers start building their own scripts and automations (or relying on some they found online) to make improvements. These are built as time allows and problems arise, which leads to a bespoke Frankenstein’s monster of a process that wasn’t implemented as part of a coherent strategy, can’t be recreated from team to team, and is likely to be largely unscalable and difficult to maintain.Mobile workflow automation requires regular maintenance and upkeep. Even once you have some basic process in place, it's likely that you'll need to tweak it as the project evolves, either to support new features or to make it more automatic. Without a dedicated release engineering team, you'll eventually run into trouble when said tweaks start requiring more and more effort in order to be achieved (e.g dedicated backends/pipelines)Release engineering happens when a company gets so big that the systems and processes that it requires in order to be able to comfortably release the app become impossible to maintain as a side gig, requiring dedicated engineers. This is very common across large tech companies, and you'll find that many of the top tier companies have a mobile release engineering effort in one way or the other.Curious to see how your team's mobile releases stack up?Thank you! Your submission has been received!Oops! Something went wrong while submitting the form.Don’t have a CI/CD pipeline for your mobile app yet? Struggling with a flaky one?Try Runway Quickstart CI/CD to quickly autogenerate an end-to-end workflow for major CI/CD providers.Try our free tool -\u003eSign up for the Flight Deck — our monthly newsletter.We'll share our perspectives on the mobile landscape, peeks into how other mobile teams and developers get things done, technical guides to optimizing your app for performance, and more. (See a recent issue here)The App Store Connect API is very powerful, but it can quickly become a time sink.Runway offers a lot of the functionality you might be looking for — and more — out‑of‑the‑box and maintenance‑free.Learn moreWhat are mobile release engineering teams responsible for?Release engineers build and maintain tools and processes to support the company in getting features shipped and apps updates out the door: from generating release candidates, to providing and maintaining beta testing tracks, to providing data about a release's usage, to triaging and tracking bug fixes, to updating media and release notes, to uploading to the store and managing the review process, to managing a staged or phased rollout, to springing into action when problems arise during that rollout. The job of a release engineering team is to support this entire process, maintaining and improving it as needed. A release engineering team should not be confused with a mobile platform team! There might be a time during a company's growth where a platform team could wear both hats, but the scope of release engineering eventually becomes big enough that it becomes its own separate domain. The required skills and responsibilities of release engineers are distinct from those of other mobile engineers. They include:A solid understanding of the underlying tooling and frameworks. Release engineering tends to be primarily backend work, meaning release engineers need to have a decent understanding of general backend and data engineering, as a lot of time will be spent building and maintaining things such as servers, CI/data pipelines, cron jobs, as well as data endpoints for general ad-hoc data inspection needs. This is quite different from the skill set of those working on feature teams. A deep understanding of any internal tools.A strong grasp on the intricacies of any internal tools your team has built and relies on is important. Internal feature flagging systems, CI/CD platforms, analytics tools, are all a part of the development and release workflow and are likely tools that folks are regularly interfacing with as part of the process. Any efforts made to streamline this process will likely require a good understanding of any of the tools the team is relying on regularly at any point in the process, especially when it comes to triaging bugs.  Ownership and consolidation of disparate release processes. If your team is releasing an app on multiple platforms, then you can save a lot of time and effort by standardizing and unifying those platforms under the same \"release umbrella\" of tools and processes. A release manager should be able to unite the processes for releasing those apps so that each team is following an interchangeable process and using the same tooling to do it.What results should you see in a mobile release engineering team’s work? A mobile release engineer shouldn’t just support the work of releases, they should actively work towards improving that process and make the overall release experience better as the org progressively grows.What does this mean? Significantly less manual work for everyone. With a dedicated release engineering team, things like generating and downloading test builds for a particular version can be as easy as pressing a button.Far more productive feature teams. Without all the manual work, engineers can focus on what they like best: building and shipping features. The more efficient and automated your release process is, the more builds you can get into your users' hands.Regular and consistent releases. Streamlined, predictable, and consistent releases on a steady cadence (like an every one or two weeks release train) are a sign of a functioning and productive release engineering team.Constant improvements and learnings. There’s always room to improve the process of getting updates out the door. And in the cases where something goes wrong with a release, there should always be learnings that can be applied towards continuing to improve and increase confidence in mobile releases.ConclusionAs we've covered, mobile release engineering is an important component of large scale teams. As the operation becomes larger and larger, having mobile developers double-time as pseudo release engineers becomes infeasible, leading to the necessity of either a dedicated team focused on making this process bigger, better, and easier for everyone or significantly increased infrastructure support that provides mobile engineers with the tools they need to greatly lessen the effort it takes to manage their releases. The \"necessity\" part is very important to keep in mind here. Whenever I mention something that is common in top tier companies, I always like to stress that there's a reason they have such setups: they experience problems that demand such solutions, often because of their sheer size. If your company does not experience those same problems, then you will probably gain nothing by replicating their setup!Thus, instead of simply copying what larger and more successful companies are doing (thus preemptively solving problems that you don't actually have), consider focusing on the problems that you truly have. As noted above you can often solve problems caused by ad hoc workflow automations, the added complexity brought about by additional stakeholders in a growing org, and a too widely distributed workflow toolchain by improving the infrastructure and workflows your team is currently using. Then once you reach the size where your release process starts becoming pressured, then I hope the knowledge in this article can help you get started towards implementing a better solution.‍",
  "image": "https://cdn.prod.website-files.com/5ef1f28e08458502ba614d85/666cae3bcf788b457555df1d_mobile-release-engineering.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content\"\u003e\u003cp\u003eThe early (and also not-so-early) days of building a tech startup means hiring and working with people who are capable of wearing a lot of hats. There are a ton of things to do and nowhere near an equal amount of resources to do them. Even if you join as a specialist, chances are you\u0026#39;ll find yourself getting deep into other areas.\u003c/p\u003e\u003cp\u003eThis is true across the organization, including in mobile engineering. Early engineers don’t just write the code that builds the foundation for the app’s future success (while building up the tech debt that future engineers will pull their hair out over) but also the initial infrastructure both for how teams get things done and how they ship code out the door. \u003c/p\u003e\u003cp\u003eThis doesn’t last forever though. As teams grow they make the transition out of generalist, jack-of-all-trades roles and begin focusing on specialization. But one part of the org where there is often a lag in making this transition — and sometimes a very long one — is on the mobile team. Very few mobile engineers will have time to support both their team\u0026#39;s app features and the series of Ruby scripts that support their release process, yet the expectation that they do both often lingers far beyond when other teams in the organization have fully specialized.    \u003c/p\u003e\u003ch2\u003eThe challenge of mobile release engineering\u003c/h2\u003e\u003cp\u003eReleasing code is supposed to be easy, right? You merge some code, do a little testing, run CI, ship it to production, and then just fix any bugs live as they come up. Rinse and repeat. To be honest, this is usually true in very small companies. But something that\u0026#39;s also true is that the more a company grows, the more complicated this process gets. This is especially the case when you start having multiple product areas running in parallel; a point where coordination is key in order to avoid different parts of the company from running into each other.\u003c/p\u003e\u003cp\u003eMobile teams in particular face unique challenges when it comes to releases:\u003cbr/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eRequired app store reviews add inherent complexity. \u003c/strong\u003e\u003c/p\u003e\u003cp\u003eMobile developers can\u0026#39;t make use of fancy automated deployments and continuous delivery like web teams do, they must submit them for review and be at mercy of Apple and Google\u0026#39;s goodwill. This means that you can never really be sure when a new version is going to be rolled out, as review conditions and timelines are kept intentionally vague and sometimes even non-sensensical.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMobile workflow automation is often bespoke and ad hoc. \u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThe need for all this manual work usually means mobile engineers start building their own scripts and automations (or relying on some they found online) to make improvements. These are built as time allows and problems arise, which leads to a bespoke Frankenstein’s monster of a process that wasn’t implemented as part of a coherent strategy, can’t be recreated from team to team, and is likely to be largely unscalable and difficult to maintain.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMobile workflow automation requires regular maintenance and upkeep. \u003c/strong\u003e\u003c/p\u003e\u003cp\u003eEven once you have some basic process in place, it\u0026#39;s likely that you\u0026#39;ll need to tweak it as the project evolves, either to support new features or to make it more automatic. Without a dedicated release engineering team, you\u0026#39;ll eventually run into trouble when said tweaks start requiring more and more effort in order to be achieved (e.g dedicated backends/pipelines)\u003c/p\u003e\u003cp\u003eRelease engineering happens when a company gets so big that the systems and processes that it requires in order to be able to comfortably release the app become impossible to maintain as a side gig, requiring dedicated engineers. This is very common across large tech companies, and you\u0026#39;ll find that many of the top tier companies have a mobile release engineering effort in one way or the other.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eCurious to see how your team\u0026#39;s mobile releases stack up?\u003c/p\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003eThank you! Your submission has been received!\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eOops! Something went wrong while submitting the form.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/63ed3582ebf0b1058429b59c_quickstart-ci-abstract.svg\" loading=\"lazy\" alt=\"\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003eDon’t have a CI/CD pipeline for your mobile app yet? Struggling with a flaky one?\u003c/p\u003e\u003cp\u003eTry Runway Quickstart CI/CD to quickly autogenerate an end-to-end workflow for major CI/CD providers.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.runway.team/quickstart-ci-cd\"\u003eTry our free tool -\u0026gt;\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/66024df143b8e537c50691a8_flight-deck.png\" loading=\"lazy\" width=\"375\" sizes=\"100vw\" alt=\"\" srcset=\"https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/66024df143b8e537c50691a8_flight-deck-p-500.png 500w, https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/66024df143b8e537c50691a8_flight-deck.png 750w\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003eSign up for the Flight Deck — our monthly newsletter.\u003c/p\u003e\u003cp\u003eWe\u0026#39;ll share our perspectives on the mobile landscape, peeks into how other mobile teams and developers get things done, technical guides to optimizing your app for performance, and more. (\u003ca href=\"https://get.runway.team/the-flight-deck-8-the-mobile-release-management-newsletter?ecid=\u0026amp;utm_source=hs_email\u0026amp;utm_medium=email\u0026amp;_hsenc=p2ANqtz--GYsZSoYY-It9GfilXKUzmsSoBWM1amQRBVCU8HDNyXz9E1lOTweRQqFK4KQ8smzQieHoW\" target=\"_blank\"\u003eSee a recent issue here\u003c/a\u003e)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://cdn.prod.website-files.com/5edfa38a1bd219267bdf69b7/660d8add0395185d046fae9b_asc-api-cta.svg\" loading=\"lazy\" width=\"300\" alt=\"\"/\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003eThe App Store Connect API is very powerful, but it can quickly become a time sink.\u003c/p\u003e\u003cp\u003eRunway offers a lot of the functionality you might be looking for — and more — out\u003cstrong\u003e‑\u003c/strong\u003eof\u003cstrong\u003e‑\u003c/strong\u003ethe\u003cstrong\u003e‑\u003c/strong\u003ebox and maintenance\u003cstrong\u003e‑\u003c/strong\u003efree.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://get.runway.team/app-store-connect\"\u003eLearn more\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"content\"\u003e\u003ch2\u003eWhat are mobile release engineering teams responsible for?\u003c/h2\u003e\u003cp\u003eRelease engineers build and maintain tools and processes to support the company in getting features shipped and apps updates out the door: from generating release candidates, to providing and maintaining beta testing tracks, to providing data about a release\u0026#39;s usage, to triaging and tracking bug fixes, to updating media and release notes, to uploading to the store and managing the review process, to managing a staged or phased rollout, to springing into action when problems arise during that rollout. The job of a release engineering team is to support this entire process, maintaining and improving it as needed. \u003c/p\u003e\u003cp\u003eA release engineering team should not be confused with a \u003ca href=\"https://www.runway.team/blog/why-when-mobile-platform-teams\"\u003emobile platform team\u003c/a\u003e! There might be a time during a company\u0026#39;s growth where a platform team could wear both hats, but the scope of release engineering eventually becomes big enough that it becomes its own separate domain. \u003c/p\u003e\u003cp\u003eThe required skills and responsibilities of release engineers are distinct from those of other mobile engineers. They include:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eA solid understanding of the underlying tooling and frameworks.\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eRelease engineering tends to be primarily backend work, meaning release engineers need to have a decent understanding of general backend and data engineering, as a lot of time will be spent building and maintaining things such as servers, CI/data pipelines, cron jobs, as well as data endpoints for general ad-hoc data inspection needs. This is quite different from the skill set of those working on feature teams. \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eA deep understanding of any internal tools.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eA strong grasp on the intricacies of any internal tools your team has built and relies on is important. Internal feature flagging systems, CI/CD platforms, analytics tools, are all a part of the development and release workflow and are likely tools that folks are regularly interfacing with as part of the process. Any efforts made to streamline this process will likely require a good understanding of any of the tools the team is relying on regularly at any point in the process, especially when it comes to triaging bugs.  \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eOwnership and consolidation of disparate release processes.\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eIf your team is releasing an app on multiple platforms, then you can save a lot of time and effort by standardizing and unifying those platforms under the same \u0026#34;release umbrella\u0026#34; of tools and processes. A release manager should be able to unite the processes for releasing those apps so that each team is following an interchangeable process and using the same tooling to do it.\u003c/p\u003e\u003ch2\u003eWhat results should you see in a mobile release engineering team’s work? \u003c/h2\u003e\u003cp\u003eA mobile release engineer shouldn’t just support the work of releases, they should actively work towards improving that process and make the overall release experience better as the org progressively grows.\u003c/p\u003e\u003cp\u003eWhat does this mean? \u003c/p\u003e\u003cul role=\"list\"\u003e\u003cli\u003eSignificantly less manual work for everyone. With a dedicated release engineering team, things like generating and downloading test builds for a particular version can be as easy as pressing a button.\u003c/li\u003e\u003cli\u003eFar more productive feature teams. Without all the manual work, engineers can focus on what they like best: building and shipping features. The more efficient and automated your release process is, the more builds you can get into your users\u0026#39; hands.\u003c/li\u003e\u003cli\u003eRegular and consistent releases. Streamlined, predictable, and consistent releases on a steady cadence (like an every one or two weeks \u003ca href=\"https://www.runway.team/blog/mobile-releases-feature-based-or-release-train\"\u003erelease train\u003c/a\u003e) are a sign of a functioning and productive release engineering team.\u003c/li\u003e\u003cli\u003eConstant improvements and learnings. There’s always room to improve the process of getting updates out the door. And in the cases where something goes wrong with a release, there should always be learnings that can be applied towards continuing to improve and increase confidence in mobile releases.\u003c/li\u003e\u003c/ul\u003e\u003ch2\u003eConclusion\u003c/h2\u003e\u003cp\u003eAs we\u0026#39;ve covered, mobile release engineering is an important component of large scale teams. As the operation becomes larger and larger, having mobile developers double-time as pseudo release engineers becomes infeasible, leading to the necessity of either a dedicated team focused on making this process bigger, better, and easier for everyone or significantly increased \u003ca href=\"https://www.runway.team/blog/mobile-infrastructure-needs-to-be-more-than-afterthought-for-your-org\"\u003einfrastructure support\u003c/a\u003e that provides mobile engineers with the tools they need to greatly lessen the effort it takes to manage their releases. \u003c/p\u003e\u003cp\u003eThe \u0026#34;necessity\u0026#34; part is very important to keep in mind here. Whenever I mention something that is common in top tier companies, I always like to stress that there\u0026#39;s a reason they have such setups: they experience problems that demand such solutions, often because of their sheer size. If your company does not experience those same problems, then you will probably gain nothing by replicating their setup!\u003c/p\u003e\u003cp\u003eThus, instead of simply copying what larger and more successful companies are doing (thus preemptively solving problems that you \u003cstrong\u003edon\u0026#39;t\u003c/strong\u003e actually have), consider focusing on the problems that you truly have. As noted above you can often solve problems caused by ad hoc workflow automations, the added complexity brought about by additional stakeholders in a growing org, and a too widely distributed workflow toolchain by improving the infrastructure and workflows your team is currently using. Then once you reach the size where your release process starts becoming pressured, then I hope the knowledge in this article can help you get started towards implementing a better solution.\u003c/p\u003e\u003cp\u003e‍\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
