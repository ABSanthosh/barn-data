{
  "id": "152b1998-999c-4129-835e-c0e1e8ba1884",
  "title": "iOS UIKit Accessibility traits",
  "link": "https://mobilea11y.com/blog/traits/",
  "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
  "author": "",
  "published": "Fri, 13 Aug 2021 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 10574,
  "excerpt": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.1.2: Name, Role, Value.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.1.2: Name, Role, Value. UIKit has sensible defaults set for standard controls so in many cases you won’t need to make changes, but to make your app truly accessible you’ll need to customise these. The key is knowing when to customise; as with most accessibility considerations, custom controls are a must, but also headings, elements that change their state, controls that play sound or other media, tabs, path-based interactions, and others need their traits customising to ensure your app is accessible and usable by assistive technology. Adding and Removing Traits One of the most common accessibility mistakes I see is engineers assigning accessibility traits. Remember, UIKit components all have sensible accessibility traits added by default, for example, buttons all have the button trait. So if you do myButton.accessibilityTraits = .selected to indicate the option this button represents has been selected then your button will no longer be presented to your users as a button. Traits are a bitmask or option set. A bitmask, or Option Set as Swift calls them, are a way of representing multiple unique values from a finite set. For the specific use case where this fits they are far more efficient than an array or a set, or any other collection. They are represented in memory in binary of constant size, and adding or removing elements is a mathematical operation, making this constant time. This means, instead of assigning them we need to append or remove. myButton.accessibilityTraits.insert(.selected) or to insert multiple traits: myButton.accessibilityTraits.formUnion([.selected, .startsMediaSession]) To remove traits myButton.accessibilityTraits.remove(.startsMediaSession) Only if you are certain you want to remove all existing and potential future accessibility traits from a view should you assign traits. myButton.accessibilityTraits = .selected Most importantly, remember traits change as your UI changes any of these traits could be added or removed throughout the lifespan of your view, but specifically take note of ’not enabled’ and ‘selected’. Traits Traits inform assistive technologies of the type or function of the element, assistive tech then uses this data to determine how to present the element to your user. This sometimes means providing extra actions, additional utterances, changing sounds, or other feedback or behavioral changes. Here is, to the best of my knowledge, the changes these traits make, and most importantly, when you should be using them. Button VoiceOver announces ‘button’ after reading the element’s label. For elements that are not generally interactive, such as labels or views, this trait will also cause the accessibilityRespondsToUserInteraction to be set to true allowing Switch Control and Voice Control to access this element. Use this for any element that performs an action, including a table cell that pushes to another screen and any view that you have added a tap gesture recognizer to. Link An link similar to what would appear in a web page, often but not exclusively inline. This will generally navigate to a web page or make a phone call. Using a link to navigate within an app is acceptable, but the convention is to use the ‘button’ trait for this. A link should only navigate, not perform any actions such as submitting a form, if the control also performs an action, use ‘button’. The behavior of this trait is the same as for Button, except VoiceOver reads ’link’. Search Field A trait to be used on a text field that acts as a search field. VoiceOver announces this as a search field, allowing VoiceOver users to easily identify its purpose and hints that typing here will cause UI to be updated elsewhere. Image Any image or other visual element such as a graphical element or animation that contains no text (aside from text hard coded in the image, although this is not recommended). Generally this should not be applied to an image button, but could be applied to an image that can be tapped to get a larger version. Only apply this trait to images that add to the experience, others should be hidden to accessibility. For more on adding image descriptions check out When to use Accessibility Labels and Writing Great iOS Accessibility Labels. Adds the word ‘Image’ to the VoiceOver utterance and enables VoiceOvers image recognition features to create a ML description of the image, including identifying known people and text where possible. Selected Indicates that the element has been selected, such as a radio button, checkbox, switch, tab, or segment. Causes VoiceOver to read ‘selected’ as part of the element’s utterance. Plays Sound An element that triggers sound once activated. This tells VoiceOver that it does not need to play the regular sound used to provide feedback that this control has been activated. Use this if you provide your own auditory feedback when activating a button. Keyboard Key Use this trait if you are implementing a custom keyboard. This changes the intonation VoiceOver uses to read the key’s label, along with a phonetic hint added to the utterance. It also allows both regular VoiceOver swipe based navigation of keyboard keys and direct interaction with the keys, allowing VoiceOver users to type the way that suits. Static Text This trait is added by default to labels. It informs assistive tech that this text shouldn’t change, or will rarely change, throughout the lifespan of the current screen. This means the assistive tech doesn’t have to poll for updates. If this element does change occasionally thats ok, but you should post UIAccessibility.post(notification: .layoutChanged, argument: nil) when it does. If your text changes often you should remove this trait and instead add… Updates Frequently Apply this trait to any element where the accessibility label or value changes regularly throughout the lifespan of the view. This tells your users assistive technology to poll this element regularly for updates. An example of use could be a timer or a scoreboard. Failing to add this trait where its needed means your users won’t get your up to date interface, using it where its not needed will reduce device performance and battery life. Summary Element Use this trait to characterise an area of your UI that provides and overview of the content of the screen. The perfect example for this is Apple’s weather app where the top section provides a summary of the current conditions before diving in to more detail below, this top section has the summary element trait. This trait will cause VoiceOver to read this element to your customer once this screen appears regardless of the position of this element in the view hierarchy, focus order is not affected. Not Enabled This item is disabled and nothing will happen if it is activated. VoiceOver will add ‘dimmed’ to the element’s utterance, Switch Control and Voice Control will ignore this element. Starts Media Session Informs assistive tech that activating this element will start playing or recording media. This prevents VoiceOver from repeating the element’s label once activated thus it does not interrupt the media. Adjustable This indicates that the user can change between a range of values in elements such as sliders or pickers. VoiceOver informs your user they can swipe vertically on this element to change the value. So it is essential that if you apply this trait you also implement the accessibilityIncrement() and accessibilityDecrement() functions on your view’s subclass to allow this. These functions also add extra options into the Switch Control menu for this element. Allows Direct Interaction This trait allows VoiceOver users to disable VoiceOver navigation for the element. You would use this in controls where direct path interaction is the only real way of control, for example a freehand drawing canvass. Apple use this trait in GarageBand in the virtual instruments. This means VoiceOver users can continue to use the path interaction without having to disable VoiceOver entirely. Causes Page Turn Use this trait to indicate the element represents a single page in a series of pages, for example a page in an e-book. This allows VoiceOver or the screen reader to read the content of this page, then automatically ’turn’ the page and continue reading. Your element must listen and respond to the accessibilityScroll() method which assistive tech will call when it reaches the end of the current content. Return false when the end of the content has been reached and assistive tech will stop reading. If there is more content, change the screen and return true to continue reading. Any visually distinct header text should have this trait applied. Headers can be visually distinct through visual positioning or different text styles - eg font weight, colour, or family. For visual users this allows them to skim content to find what is relevant. The header trait allows something similar for VoiceOver users. By swiping vertically on a screen we skip content and only read the next available header. ‘Heading’ is also added to the element’s utterance. Each screen in your app should have at least one header and a header should generally be the first element focussed by VoiceOver, allowing your users to orientate themselves. The number of headers your screen has will vary from app to app. Many will have a single header, news apps may have many. In general, try not too add too many as this adds to VoiceOver noise. Tab Bar Indicates that this view contains buttons that act as tabs. This view must return false for isAccessibilityElement but the child buttons must be accessible. This allows VoiceOver to add ‘Tab, x of x’ to the tab’s utterances. Traits are a powerful part of iOS’s accessibility system, they allow assistive technology to determine developer intent, something that is not generally possible to do through automation, so its essential we provide the correct information. If you want to know more about the traits available in SwiftUI, check out my guide to SwiftUI Accessibility: Traits",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eAccessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html\"\u003eWCAG’s 4.1.2: Name, Role, Value\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUIKit has sensible defaults set for standard controls so in many cases you won’t need to make changes, but to make your app truly accessible you’ll need to customise these. The key is knowing when to customise; as with most accessibility considerations, custom controls are a must, but also headings, elements that change their state, controls that play sound or other media, tabs, path-based interactions, and others need their traits customising to ensure your app is accessible and usable by assistive technology.\u003c/p\u003e\n\u003ch2 id=\"adding-and-removing-traits\"\u003eAdding and Removing Traits\u003c/h2\u003e\n\u003cp\u003eOne of the most common accessibility mistakes I see is engineers assigning accessibility traits. Remember, UIKit components all have sensible accessibility traits added by default, for example, buttons all have the \u003ccode\u003ebutton\u003c/code\u003e trait. So if you do \u003ccode\u003emyButton.accessibilityTraits = .selected\u003c/code\u003e to indicate the option this button represents has been selected then your button will no longer be presented to your users as a button.\u003c/p\u003e\n\u003cp\u003eTraits are a \u003ca href=\"https://cocoacasts.com/how-to-work-with-bitmasks-in-swift/\"\u003ebitmask or option set\u003c/a\u003e. A bitmask, or Option Set as Swift calls them, are a way of representing multiple unique values from a finite set. For the specific use case where this fits they are far more efficient than an array or a set, or any other collection. They are represented in memory in binary of constant size, and adding or removing elements is a mathematical operation, making this constant time. This means, instead of assigning them we need to append or remove.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyButton.accessibilityTraits.insert(.selected)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eor to insert multiple traits:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyButton.accessibilityTraits.formUnion([.selected, .startsMediaSession])\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo remove traits\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyButton.accessibilityTraits.remove(.startsMediaSession)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnly if you are certain you want to remove all existing and potential future accessibility traits from a view should you assign traits.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyButton.accessibilityTraits = .selected\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMost importantly, remember traits change as your UI changes any of these traits could be added or removed throughout the lifespan of your view, but specifically take note of ’not enabled’ and ‘selected’.\u003c/p\u003e\n\u003ch2 id=\"traits\"\u003eTraits\u003c/h2\u003e\n\u003cp\u003eTraits inform assistive technologies of the type or function of the element, assistive tech then uses this data to determine how to present the element to your user. This sometimes means providing extra actions, additional utterances, changing sounds, or other feedback or behavioral changes. Here is, to the best of my knowledge, the changes these traits make, and most importantly, when you should be using them.\u003c/p\u003e\n\u003ch3 id=\"button\"\u003eButton\u003c/h3\u003e\n\u003cp\u003eVoiceOver announces ‘button’ after reading the element’s label. For elements that are not generally interactive, such as labels or views, this trait will also cause the \u003ccode\u003eaccessibilityRespondsToUserInteraction\u003c/code\u003e to be set to true allowing Switch Control and Voice Control to access this element. Use this for any element that performs an action, including a table cell that pushes to another screen and any view that you have added a tap gesture recognizer to.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/button.jpeg\" alt=\"VoiceOver announcing a button\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"link\"\u003eLink\u003c/h3\u003e\n\u003cp\u003eAn link similar to what would appear in a web page, often but not exclusively inline. This will generally navigate to a web page or make a phone call. Using a link to navigate within an app is acceptable, but the convention is to use the ‘button’ trait for this. A link should only navigate, not perform any actions such as submitting a form, if the control also performs an action, use ‘button’. The behavior of this trait is the same as for Button, except VoiceOver reads ’link’.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/link.jpeg\" alt=\"VoiceOver announcing an inline link\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"search-field\"\u003eSearch Field\u003c/h3\u003e\n\u003cp\u003eA trait to be used on a text field that acts as a search field. VoiceOver announces this as a search field, allowing VoiceOver users to easily identify its purpose and hints that typing here will cause UI to be updated elsewhere.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/search.PNG\" alt=\"Apple Music\u0026amp;rsquo;s search field\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"image\"\u003eImage\u003c/h3\u003e\n\u003cp\u003eAny image or other visual element such as a graphical element or animation that contains no text (aside from text hard coded in the image, although this is not recommended). Generally this should not be applied to an image button, but could be applied to an image that can be tapped to get a larger version. Only apply this trait to images that add to the experience, others should be hidden to accessibility. For more on adding image descriptions check out \u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e and \u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e. Adds the word ‘Image’ to the VoiceOver utterance and enables VoiceOvers image recognition features to create a ML description of the image, including identifying known people and text where possible.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/image.jpeg\" alt=\"VoiceOver announcing an image\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"selected\"\u003eSelected\u003c/h3\u003e\n\u003cp\u003eIndicates that the element has been selected, such as a radio button, checkbox, switch, tab, or segment. Causes VoiceOver to read ‘selected’ as part of the element’s utterance.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/selected.PNG\" alt=\"Apple Music\u0026amp;rsquo;s Lyrics button selected\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"plays-sound\"\u003ePlays Sound\u003c/h3\u003e\n\u003cp\u003eAn element that triggers sound once activated. This tells VoiceOver that it does not need to play the regular sound used to provide feedback that this control has been activated. Use this if you provide your own auditory feedback when activating a button.\u003c/p\u003e\n\u003ch3 id=\"keyboard-key\"\u003eKeyboard Key\u003c/h3\u003e\n\u003cp\u003eUse this trait if you are implementing a custom keyboard. This changes the intonation VoiceOver uses to read the key’s label, along with a phonetic hint added to the utterance. It also allows both regular VoiceOver swipe based navigation of keyboard keys and direct interaction with the keys, allowing VoiceOver users to type the way that suits.\u003c/p\u003e\n\u003ch3 id=\"static-text\"\u003eStatic Text\u003c/h3\u003e\n\u003cp\u003eThis trait is added by default to labels. It informs assistive tech that this text shouldn’t change, or will rarely change, throughout the lifespan of the current screen. This means the assistive tech doesn’t have to poll for updates. If this element does change occasionally thats ok, but you should post \u003ccode\u003eUIAccessibility.post(notification: .layoutChanged, argument: nil)\u003c/code\u003e when it does. If your text changes often you should remove this trait and instead add…\u003c/p\u003e\n\u003ch3 id=\"updates-frequently\"\u003eUpdates Frequently\u003c/h3\u003e\n\u003cp\u003eApply this trait to any element where the accessibility label or value changes regularly throughout the lifespan of the view. This tells your users assistive technology to poll this element regularly for updates. An example of use could be a timer or a scoreboard. Failing to add this trait where its needed means your users won’t get your up to date interface, using it where its not needed will reduce device performance and battery life.\u003c/p\u003e\n\u003ch3 id=\"summary-element\"\u003eSummary Element\u003c/h3\u003e\n\u003cp\u003eUse this trait to characterise an area of your UI that provides and overview of the content of the screen. The perfect example for this is Apple’s weather app where the top section provides a summary of the current conditions before diving in to more detail below, this top section has the summary element trait.\u003c/p\u003e\n\u003cp\u003eThis trait will cause VoiceOver to read this element to your customer once this screen appears regardless of the position of this element in the view hierarchy, focus order is not affected.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/weather.PNG\" alt=\"Apple Weather with VoiceOver focusing on the summary\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/summary.PNG\" alt=\"VoiceOver reading the second visual element marked with the Summary Element trait but focus remains on the first element\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"not-enabled\"\u003eNot Enabled\u003c/h3\u003e\n\u003cp\u003eThis item is disabled and nothing will happen if it is activated. VoiceOver will add ‘dimmed’ to the element’s utterance, Switch Control and Voice Control will ignore this element.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/disabled.PNG\" alt=\"Disabled Continue button\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"starts-media-session\"\u003eStarts Media Session\u003c/h3\u003e\n\u003cp\u003eInforms assistive tech that activating this element will start playing or recording media. This prevents VoiceOver from repeating the element’s label once activated thus it does not interrupt the media.\u003c/p\u003e\n\u003ch3 id=\"adjustable\"\u003eAdjustable\u003c/h3\u003e\n\u003cp\u003eThis indicates that the user can change between a range of values in elements such as sliders or pickers. VoiceOver informs your user they can swipe vertically on this element to change the value. So it is essential that if you apply this trait you also implement the \u003ccode\u003eaccessibilityIncrement()\u003c/code\u003e and \u003ccode\u003eaccessibilityDecrement()\u003c/code\u003e functions on your view’s subclass to allow this. These functions also add extra options into the Switch Control menu for this element.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/increment.PNG\" alt=\"Increment and Decrement buttons in the Switch Control menu\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/adjustable.PNG\" alt=\"Apple Music\u0026amp;rsquo;s volume control\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"allows-direct-interaction\"\u003eAllows Direct Interaction\u003c/h3\u003e\n\u003cp\u003eThis trait allows VoiceOver users to disable VoiceOver navigation for the element. You would use this in controls where direct path interaction is the only real way of control, for example a freehand drawing canvass. Apple use this trait in GarageBand in the virtual instruments. This means VoiceOver users can continue to use the path interaction without having to disable VoiceOver entirely.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/garageband.PNG\" alt=\"GarageBand displaying the VoiceOver rota control to enable direct touch for a musical keyboard interface\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"causes-page-turn\"\u003eCauses Page Turn\u003c/h3\u003e\n\u003cp\u003eUse this trait to indicate the element represents a single page in a series of pages, for example a page in an e-book. This allows VoiceOver or the screen reader to read the content of this page, then automatically ’turn’ the page and continue reading. Your element must listen and respond to the \u003ccode\u003eaccessibilityScroll()\u003c/code\u003e method which assistive tech will call when it reaches the end of the current content. Return false when the end of the content has been reached and assistive tech will stop reading. If there is more content, change the screen and return true to continue reading.\u003c/p\u003e\n\n\u003cp\u003eAny visually distinct header text should have this trait applied. Headers can be visually distinct through visual positioning or different text styles - eg font weight, colour, or family. For visual users this allows them to skim content to find what is relevant. The header trait allows something similar for VoiceOver users. By swiping vertically on a screen we skip content and only read the next available header. ‘Heading’ is also added to the element’s utterance.\u003c/p\u003e\n\u003cp\u003eEach screen in your app should have at least one header and a header should generally be the first element focussed by VoiceOver, allowing your users to orientate themselves. The number of headers your screen has will vary from app to app. Many will have a single header, news apps may have many. In general, try not too add too many as this adds to VoiceOver noise.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/heading.PNG\" alt=\"VoiceOver announcing a heading\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"tab-bar\"\u003eTab Bar\u003c/h3\u003e\n\u003cp\u003eIndicates that this view contains buttons that act as tabs. This view must return false for \u003ccode\u003eisAccessibilityElement\u003c/code\u003e but the child buttons must be accessible. This allows VoiceOver to add ‘Tab, x of x’ to the tab’s utterances.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/tabbar.PNG\" alt=\"Tab Bar with the second element selected\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eTraits are a powerful part of iOS’s accessibility system, they allow assistive technology to determine developer intent, something that is not generally possible to do through automation, so its essential we provide the correct information. If you want to know more about the traits available in SwiftUI, check out my guide to \u003ca href=\"https://mobilea11y.com/guides/swiftui/swiftui-traits/\"\u003eSwiftUI Accessibility: Traits\u003c/a\u003e\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
