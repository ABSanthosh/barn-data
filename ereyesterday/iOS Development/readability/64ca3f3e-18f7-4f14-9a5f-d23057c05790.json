{
  "id": "64ca3f3e-18f7-4f14-9a5f-d23057c05790",
  "title": "Syncing TipKit with CloudKit",
  "link": "https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/",
  "description": "Starting in iOS 18 you can sync the state of TipKit tips across devices with CloudKit. TipKit Tip State Apple introduced TipKit in iOS 17 as a consistent way to show in-context tips to users. TipKit keeps track of how often it displays tips, when it has invalidated tips, and the events/rules that control when it should show tips. Starting in iOS 18, you can opt-in to syncing the TipKit state across devices using CloudKit. That avoids showing the user the same tips on each of their devices. Syncing With CloudKit Enabling CloudKit sync for TipKit follows a similar process to enabling sync for Core Data. Select your App target in Xcode. In the Signing \u0026 Capabilities tab, use the + Capability button, double-click the iCloud capability and select CloudKit in the iCloud section. This also adds the Push Notifications capability: In the iCloud capability section, use the + button, below the list of containers, to add a container identifier for the TipKit datastore: Use a reverse domain name to create the identifier, ending with “.tips”. Xcode automatically includes the “iCloud” prefix. The new container can take a few seconds to show up in the iCloud console. Xcode shows the identifier in red until it’s ready: Repeat the process to add the Background Modes capability to your App target and enable the Remote notifcations option: TipKit does not sync to CloudKit by default. You must enable the CloudKit container when configuring the Tips datastore: try Tips.configure([ .cloudKitContainer(.automatic) ]) Note: The .automatic option uses the first container in your app’s entitlements that ends with “.tips”. You can override the automatic behaviour by passing an identifier: try Tips.configure([ .cloudKitContainer(.named(\"iCloud.com.apple.myapp.tips\")) ]) Core Data Container Identifier Be careful if you’re already syncing a Core Data/SwiftData database with CloudKit. By default, NSPersistentCloudKitContainer looks for the first iCloud Container identifier in the App’s entitlements file. If you’re not careful you may have listed your TipKit identifier first and your Core Data stack can end up trying to use it. Apple recommends you use a separate container for syncing tips. As a workaround, make sure to list your Core Data/SwiftData identifier first in the entitlements file: Alternatively you can explicitly set the container identifier before loading the persistent store when creating your Core Data stack: storeDescription.cloudKitContainerOptions = NSPersistentCloudKitContainerOptions( containerIdentifier: \"com.useyourloaf.myapp\") Learn More WWDC24 Customize feature discovery with TipKit One More Thing If you’re working with UIKit and want to brush up your layout skills make sure to grab a copy of my book Modern Auto Layout. It’s 20% off in the WWDC25 sale!. Syncing TipKit with CloudKit was originally posted 02 Jun 2025 on useyourloaf.com. WWDC25 Sale! Save 20% off Modern Auto Layout",
  "author": "",
  "published": "Mon, 02 Jun 2025 11:43:39 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2820,
  "excerpt": "Starting in iOS 18 you can sync TipKit with CloudKit.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "Starting in iOS 18 you can sync the state of TipKit tips across devices with CloudKit. TipKit Tip State Apple introduced TipKit in iOS 17 as a consistent way to show in-context tips to users. TipKit keeps track of how often it displays tips, when it has invalidated tips, and the events/rules that control when it should show tips. Starting in iOS 18, you can opt-in to syncing the TipKit state across devices using CloudKit. That avoids showing the user the same tips on each of their devices. Syncing With CloudKit Enabling CloudKit sync for TipKit follows a similar process to enabling sync for Core Data. Select your App target in Xcode. In the Signing \u0026 Capabilities tab, use the + Capability button, double-click the iCloud capability and select CloudKit in the iCloud section. This also adds the Push Notifications capability: In the iCloud capability section, use the + button, below the list of containers, to add a container identifier for the TipKit datastore: Use a reverse domain name to create the identifier, ending with “.tips”. Xcode automatically includes the “iCloud” prefix. The new container can take a few seconds to show up in the iCloud console. Xcode shows the identifier in red until it’s ready: Repeat the process to add the Background Modes capability to your App target and enable the Remote notifcations option: TipKit does not sync to CloudKit by default. You must enable the CloudKit container when configuring the Tips datastore: try Tips.configure([ .cloudKitContainer(.automatic) ]) Note: The .automatic option uses the first container in your app’s entitlements that ends with “.tips”. You can override the automatic behaviour by passing an identifier: try Tips.configure([ .cloudKitContainer(.named(\"iCloud.com.apple.myapp.tips\")) ]) Core Data Container Identifier Be careful if you’re already syncing a Core Data/SwiftData database with CloudKit. By default, NSPersistentCloudKitContainer looks for the first iCloud Container identifier in the App’s entitlements file. If you’re not careful you may have listed your TipKit identifier first and your Core Data stack can end up trying to use it. Apple recommends you use a separate container for syncing tips. As a workaround, make sure to list your Core Data/SwiftData identifier first in the entitlements file: Alternatively you can explicitly set the container identifier before loading the persistent store when creating your Core Data stack: storeDescription.cloudKitContainerOptions = NSPersistentCloudKitContainerOptions( containerIdentifier: \"com.useyourloaf.myapp\") Learn More WWDC24 Customize feature discovery with TipKit One More Thing If you’re working with UIKit and want to brush up your layout skills make sure to grab a copy of my book Modern Auto Layout. It’s 20% off in the WWDC25 sale!.",
  "image": "https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eStarting in iOS 18 you can sync the state of TipKit tips across devices with CloudKit.\u003c/p\u003e\n\u003ch3 id=\"tipkit-tip-state\"\u003eTipKit Tip State\u003c/h3\u003e\n\u003cp\u003eApple introduced TipKit in iOS 17 as a consistent way to show in-context tips to users. TipKit keeps track of how often it displays tips, when it has invalidated tips, and the events/rules that control when it should show tips.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStarting in iOS 18, you can opt-in to syncing the TipKit state across devices using CloudKit.\u003c/strong\u003e That avoids showing the user the same tips on each of their devices.\u003c/p\u003e\n\u003ch3 id=\"syncing-with-cloudkit\"\u003eSyncing With CloudKit\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eEnabling CloudKit sync for TipKit follows a similar process to enabling sync for Core Data.\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eSelect your App target in Xcode. In the \u003cstrong\u003eSigning \u0026amp; Capabilities\u003c/strong\u003e tab, use the \u003cstrong\u003e+ Capability\u003c/strong\u003e button, double-click the \u003cstrong\u003eiCloud\u003c/strong\u003e capability and select \u003cstrong\u003eCloudKit\u003c/strong\u003e in the iCloud section. This also adds the \u003cstrong\u003ePush Notifications\u003c/strong\u003e capability:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/001.png\" alt=\"iCloud capability with CloudKit selected\" width=\"300\" height=\"312\" srcset=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the iCloud capability section, use the \u003cstrong\u003e+\u003c/strong\u003e button, below the list of containers, to add a container identifier for the TipKit datastore:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/002.png\" alt=\"Add a new container dialog showing com.useyourloaf.myapp.tips.\" width=\"435\" height=\"270\" srcset=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eUse a reverse domain name to create the identifier, ending with “\u003cstrong\u003e.tips\u003c/strong\u003e”. Xcode automatically includes the “iCloud” prefix. The new container can take a few seconds to show up in the iCloud console. Xcode shows the identifier in red until it’s ready:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/003.png\" alt=\"iCloud capability with CloudKit enabled and iCloud.com.useyourloaf.myapp.tips selected\" width=\"350\" height=\"265\" srcset=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/003@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRepeat the process to add the Background Modes capability to your App target and enable the Remote notifcations option:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/004.png\" alt=\"Background modes capability with remote notifications selected\" width=\"350\" height=\"220\" srcset=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/004@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTipKit does not sync to CloudKit by default. You must enable the CloudKit container when configuring the Tips datastore:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eTips\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecloudKitContainer\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eautomatic\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003e.automatic\u003c/code\u003e option uses the first container in your app’s entitlements that ends with “.tips”. You can override the automatic behaviour by passing an identifier:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eTips\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecloudKitContainer\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003enamed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;iCloud.com.apple.myapp.tips\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"core-data-container-identifier\"\u003eCore Data Container Identifier\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eBe careful if you’re already syncing a Core Data/SwiftData database with CloudKit\u003c/strong\u003e. By default, \u003ccode\u003eNSPersistentCloudKitContainer\u003c/code\u003e looks for the first iCloud Container identifier in the App’s entitlements file. If you’re not careful you may have listed your TipKit identifier first and your Core Data stack can end up trying to use it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApple recommends you use a separate container for syncing tips.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAs a workaround, make sure to list your Core Data/SwiftData identifier first in the entitlements file:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/005.png\" alt=\"Entitlements plist file with two iCloud container identifiers. The app identifier is before the .tips identifier.\" width=\"500\" height=\"150\" srcset=\"https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/005@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eAlternatively you can explicitly set the container identifier before loading the persistent store when creating your Core Data stack:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estoreDescription\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecloudKitContainerOptions\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eNSPersistentCloudKitContainerOptions\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003econtainerIdentifier\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;com.useyourloaf.myapp\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024/10070?time=648\"\u003eWWDC24 Customize feature discovery with TipKit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"one-more-thing\"\u003eOne More Thing\u003c/h3\u003e\n\u003cp\u003eIf you’re working with UIKit and want to brush up your layout skills make sure to grab a copy of my book \u003ca href=\"https://useyourloaf.com/autolayout/\"\u003eModern Auto Layout\u003c/a\u003e. It’s \u003cstrong\u003e20% off\u003c/strong\u003e in the WWDC25 sale!.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-02T11:43:39+01:00",
  "modifiedTime": "2025-06-02T19:25:46+01:00"
}
