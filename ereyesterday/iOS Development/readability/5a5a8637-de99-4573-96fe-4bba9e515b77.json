{
  "id": "5a5a8637-de99-4573-96fe-4bba9e515b77",
  "title": "Reducing Motion of Animations",
  "link": "https://useyourloaf.com/blog/reducing-motion-of-animations/",
  "description": "Reduce or disable animations when the user requests you to reduce motion in the device accessibility settings. What’s the problem? Apple’s Human Interface Guide has some guidelines when applying motion to your user interface: Don’t add motion for the sake of adding motion. Gratuitous or excessive animation can distract people and may make them feel disconnected or physically uncomfortable. They also suggest making motion optional: Not everyone can or wants to experience the motion in your app or game, so it’s essential to avoid using it as the only way to communicate important information. When you do apply motion you need to be aware when it can be problematic for users. Apple highlights a number of situations: Oscillating motions, especially with large amplitudes and frequencies around 0.2 Hz (one oscillation every five seconds). For spatial interfaces like visionOS, head-locked content with rapid camera motion. Large animations that simulate objects flying in or out of the screen. Reduce Motion Accessibility Setting A user can request to reduce the motion of the user interface in the device accessibility settings: The system can take the setting into account when applying standard view transitions (but I’ve not found this documented anywhere). For example, the zoom navigation transition (new in iOS 18) creates the effect of the view flying towards/away from you which can be a problem. That automatically falls back to a standard navigation transition when you choose reduce motion. For custom animations you need to take the appropriate action yourself by disabling or replacing problematic motion. Detecting Reduce Motion The reduce motion setting is available in the environment for SwiftUI views: @Environment(\\.accessibilityReduceMotion) var reduceMotion The documentation offers us a hint on how to react: If this property’s value is true, UI should avoid large animations, especially those that simulate the third dimension. Note: For UIKit, listen for the notification reduceMotionStatusDidChangeNotification. Disabling Animations I find it convenient to create animations as a computed property that takes the reduce motion state into account. For example, to disable the animation: struct MyView: View { @Environment(\\.accessibilityReduceMotion) var reduceMotion private var linearAnimation: Animation? { guard !reduceMotion else { return nil } return Animation.linear(duration: 0.3) } } Then when applying the animation using the computed property. A value of nil disables the animation: .onTapGesture { withAnimation(linearAnimation) { enabled.toggle() } } You don’t have to always disable the animation, as with the zoom transition you could replace an animation with a less problematic version. The point to remember is that it’s not automatic for your own animations. You need to decide when and how to respond. Learn More Apple Human Interface Guide - Motion WWDC23 Design considerations for vision and motion Reducing Motion of Animations was originally posted 20 Jan 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 20 Jan 2025 10:43:52 +0000",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 3001,
  "excerpt": "Apply the reduce animation setting to your SwiftUI animations.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "Reduce or disable animations when the user requests you to reduce motion in the device accessibility settings. What’s the problem? Apple’s Human Interface Guide has some guidelines when applying motion to your user interface: Don’t add motion for the sake of adding motion. Gratuitous or excessive animation can distract people and may make them feel disconnected or physically uncomfortable. They also suggest making motion optional: Not everyone can or wants to experience the motion in your app or game, so it’s essential to avoid using it as the only way to communicate important information. When you do apply motion you need to be aware when it can be problematic for users. Apple highlights a number of situations: Oscillating motions, especially with large amplitudes and frequencies around 0.2 Hz (one oscillation every five seconds). For spatial interfaces like visionOS, head-locked content with rapid camera motion. Large animations that simulate objects flying in or out of the screen. Reduce Motion Accessibility Setting A user can request to reduce the motion of the user interface in the device accessibility settings: The system can take the setting into account when applying standard view transitions (but I’ve not found this documented anywhere). For example, the zoom navigation transition (new in iOS 18) creates the effect of the view flying towards/away from you which can be a problem. That automatically falls back to a standard navigation transition when you choose reduce motion. For custom animations you need to take the appropriate action yourself by disabling or replacing problematic motion. Detecting Reduce Motion The reduce motion setting is available in the environment for SwiftUI views: @Environment(\\.accessibilityReduceMotion) var reduceMotion The documentation offers us a hint on how to react: If this property’s value is true, UI should avoid large animations, especially those that simulate the third dimension. Note: For UIKit, listen for the notification reduceMotionStatusDidChangeNotification. Disabling Animations I find it convenient to create animations as a computed property that takes the reduce motion state into account. For example, to disable the animation: struct MyView: View { @Environment(\\.accessibilityReduceMotion) var reduceMotion private var linearAnimation: Animation? { guard !reduceMotion else { return nil } return Animation.linear(duration: 0.3) } } Then when applying the animation using the computed property. A value of nil disables the animation: .onTapGesture { withAnimation(linearAnimation) { enabled.toggle() } } You don’t have to always disable the animation, as with the zoom transition you could replace an animation with a less problematic version. The point to remember is that it’s not automatic for your own animations. You need to decide when and how to respond. Learn More Apple Human Interface Guide - Motion WWDC23 Design considerations for vision and motion",
  "image": "https://useyourloaf.com/blog/reducing-motion-of-animations/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eReduce or disable animations when the user requests you to reduce motion in the device accessibility settings.\u003c/p\u003e\n\u003ch3 id=\"whats-the-problem\"\u003eWhat’s the problem?\u003c/h3\u003e\n\u003cp\u003eApple’s \u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/motion/\"\u003eHuman Interface Guide\u003c/a\u003e has some guidelines when applying motion to your user interface:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon’t add motion for the sake of adding motion. Gratuitous or excessive animation can distract people and may make them feel disconnected or physically uncomfortable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThey also suggest making motion optional:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNot everyone can or wants to experience the motion in your app or game, so it’s essential to avoid using it as the only way to communicate important information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen you do apply motion you need to be aware when it can be problematic for users. Apple highlights a number of situations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOscillating motions, especially with large amplitudes and frequencies around 0.2 Hz (one oscillation every five seconds).\u003c/li\u003e\n\u003cli\u003eFor spatial interfaces like visionOS, head-locked content with rapid camera motion.\u003c/li\u003e\n\u003cli\u003eLarge animations that simulate objects flying in or out of the screen.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"reduce-motion-accessibility-setting\"\u003eReduce Motion Accessibility Setting\u003c/h3\u003e\n\u003cp\u003eA user can request to reduce the motion of the user interface in the device accessibility settings:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/reducing-motion-of-animations/001.png\" alt=\"Reduce motion enabled in the iPhone accessibility settings\" width=\"603\" height=\"315\" srcset=\"https://useyourloaf.com/blog/reducing-motion-of-animations/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe system can take the setting into account when applying standard view transitions (but I’ve not found this documented anywhere).  For example, the zoom navigation transition (new in iOS 18) creates the effect of the view flying towards/away from you which can be a problem. That automatically falls back to a standard navigation transition when you choose reduce motion.\u003c/p\u003e\n\u003cp\u003eFor custom animations you need to take the appropriate action yourself by disabling or replacing problematic motion.\u003c/p\u003e\n\u003ch3 id=\"detecting-reduce-motion\"\u003eDetecting Reduce Motion\u003c/h3\u003e\n\u003cp\u003eThe reduce motion setting is available in the environment for SwiftUI views:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaccessibilityReduceMotion\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ereduceMotion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe documentation offers us a hint on how to react:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf this property’s value is true, UI should avoid large animations, especially those that simulate the third dimension.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNote: For UIKit, listen for the notification \u003ccode\u003ereduceMotionStatusDidChangeNotification\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"disabling-animations\"\u003eDisabling Animations\u003c/h3\u003e\n\u003cp\u003eI find it convenient to create animations as a computed property that takes the reduce motion state into account. For example, to disable the animation:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eMyView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaccessibilityReduceMotion\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ereduceMotion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003elinearAnimation\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAnimation\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ereduceMotion\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eAnimation\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elinear\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eduration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0.3\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen when applying the animation using the computed property. A value of \u003ccode\u003enil\u003c/code\u003e disables the animation:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonTapGesture\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ewithAnimation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elinearAnimation\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003eenabled\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoggle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou don’t have to always disable the animation, as with the zoom transition you could replace an animation with a less problematic version. The point to remember is that it’s not automatic for your own animations. You need to decide when and how to respond.\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/motion/\"\u003eApple Human Interface Guide - Motion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2023/10078?time=864\"\u003eWWDC23 Design considerations for vision and motion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-01-20T10:43:52Z",
  "modifiedTime": "2025-01-20T16:16:37Z"
}
