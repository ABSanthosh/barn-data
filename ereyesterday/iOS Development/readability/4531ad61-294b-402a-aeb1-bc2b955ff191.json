{
  "id": "4531ad61-294b-402a-aeb1-bc2b955ff191",
  "title": "Migrating Day One Journal Entries to Obsidian",
  "link": "https://tyler.io/2025/06/migrating-day-one-journal-entries-to-obsidian/",
  "description": "I recently moved away from Day One and am now using Obsidian to keep my daily journal. To make that possible, I needed to migrate over a decade’s worth of journal entries into an Obsidian-friendly format. When I first started using Day One, I wrote about it on this blog and said one of the requirements needed to be ... Read more",
  "author": "Tyler",
  "published": "Mon, 23 Jun 2025 19:15:14 +0000",
  "source": "https://tyler.io/feed/",
  "categories": [
    "Uncategorized"
  ],
  "byline": "",
  "length": 2377,
  "excerpt": "I recently moved away from Day One and am now using Obsidian to keep my daily journal. To make that possible, I needed to migrate over a decade’s worth of journal entries into an Obsidian-friendly format.",
  "siteName": "",
  "favicon": "",
  "text": "I recently moved away from Day One and am now using Obsidian to keep my daily journal. To make that possible, I needed to migrate over a decade’s worth of journal entries into an Obsidian-friendly format. When I first started using Day One, I wrote about it on this blog and said one of the requirements needed to be …and stores my data in an open format that I’m confident is future proof and exportable to another system if the need ever arises. I’m happy to say that worked out well. I don’t know what I’d do if my 20,000+ entries were locked-up in a proprietary format. This Swift script takes Day One’s JSON export file (and media attachments) and converts each entry into a YAML + Markdown file that is friendly to Markdown editors like Obsidian. Entries are sorted into folders based on their date with support for multiple entries per day. Media attachments are saved alongside the Markdown files as inline attachments. Running the script d1obsidian \u003cpath-to-export.json\u003e \u003csome-output-folder\u003e will create a directory structure like this: /export-folder/ /2023/ /2024/ /2025/ /2024-01 - January/ /2024-02 - Februrary/ /2024-02-01/ 2024-02-01 - 001.md 2024-02-01 - 002.md some-image.jpeg another-image.jpeg Based on the availabe metadata, each entry’s Markdown file will look similar to: --- uuid: AA7A6A77946547449ED0BBC99349537C creationDate: 2013-02-13T20:38:54Z timeZone: America/Chicago location: latitude: 37.546 longitude: -77.439 localityName: Richmond administrativeArea: Virginia country: United States weather: conditionsDescription: Cloudy weatherCode: cloudy temperatureCelsius: 3.5 --- Today I went for a run and ate a sandwhich. ![](991F17490A0F4A919116C5AB428E6F1E.jpeg) It’s worth noting that this script does not exhaustively migrate all fields that Day One supports — mostly because I couldn’t find a complete listing of all the available fields. It also strips out dayone-moment:/workout and dayone-moment:/location in-line references from your entires. And in keeping with open source tradition, there are plenty of other export scripts floating around GitHub and the Obsidian forums, but it was easier to hack this together quickly than try and modify someone else’s to match the output I wanted. DayOne-Obsidian-Exporter on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n\t\t\u003cmain id=\"main\"\u003e\n\t\t\t\n\u003carticle id=\"post-2712\" itemtype=\"https://schema.org/CreativeWork\" itemscope=\"\"\u003e\n\t\u003cdiv itemprop=\"text\"\u003e\n\t\t\t\n\u003cp\u003eI recently moved away from \u003ca href=\"https://dayoneapp.com/\"\u003eDay One\u003c/a\u003e and am now using \u003ca href=\"https://obsidian.md/\"\u003eObsidian\u003c/a\u003e to keep my daily journal. To make that possible, I needed to migrate over a decade’s worth of journal entries into an Obsidian-friendly format.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen I first started using Day One, \u003ca href=\"https://tyler.io/2013/10/journaling/\"\u003eI wrote about it on this blog\u003c/a\u003e and said one of the requirements needed to be\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e…and stores my data in an open format that I’m confident is future proof and exportable to another system if the need ever arises.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eI’m happy to say that worked out well. I don’t know what I’d do if my 20,000+ entries were locked-up in a proprietary format.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/tylerhall/DayOne-Obsidian-Exporter\"\u003eThis Swift script\u003c/a\u003e takes \u003ca href=\"https://dayoneapp.com/guides/tips-and-tutorials/exporting-entries/\"\u003eDay One’s JSON export file\u003c/a\u003e (and media attachments) and converts each entry into a YAML + Markdown file that is friendly to Markdown editors like Obsidian.\u003c/p\u003e\n\n\n\n\u003cp\u003eEntries are sorted into folders based on their date with support for multiple entries per day. Media attachments are saved alongside the Markdown files as inline attachments.\u003c/p\u003e\n\n\n\n\u003cp\u003eRunning the script\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003ed1obsidian \u0026lt;path-to-export.json\u0026gt; \u0026lt;some-output-folder\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003ewill create a directory structure like this:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e/export-folder/\n  /2023/\n  /2024/\n  /2025/\n    /2024-01 - January/\n    /2024-02 - Februrary/\n      /2024-02-01/\n        2024-02-01 - 001.md\n        2024-02-01 - 002.md\n        some-image.jpeg\n        another-image.jpeg\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"726\" src=\"https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9-1024x726.png\" alt=\"\" srcset=\"https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9-1024x726.png 1024w, https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9-300x213.png 300w, https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9-768x544.png 768w, https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9-1536x1089.png 1536w, https://cdn.tyler.io/wp-content/uploads/2025/06/458043133-88023a33-3d05-4b0a-9b7b-7a1b557f71e9.png 1786w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBased on the availabe metadata, each entry’s Markdown file will look similar to:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e---\nuuid: AA7A6A77946547449ED0BBC99349537C\ncreationDate: 2013-02-13T20:38:54Z\ntimeZone: America/Chicago\nlocation:\n  latitude: 37.546\n  longitude: -77.439\n  localityName: Richmond\n  administrativeArea: Virginia\n  country: United States\nweather:\n  conditionsDescription: Cloudy\n  weatherCode: cloudy\n  temperatureCelsius: 3.5\n---\nToday I went for a run and ate a sandwhich.\n\n![](991F17490A0F4A919116C5AB428E6F1E.jpeg)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt’s worth noting that this script does not exhaustively migrate all fields that Day One supports — mostly because I couldn’t find a complete listing of all the available fields. It also strips out \u003ccode\u003edayone-moment:/workout\u003c/code\u003e and \u003ccode\u003edayone-moment:/location\u003c/code\u003e in-line references from your entires.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd in keeping with open source tradition, there are plenty of other export scripts floating around GitHub and the Obsidian forums, but it was easier to hack this together quickly than try and modify someone else’s to match the output I wanted.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/tylerhall/DayOne-Obsidian-Exporter\"\u003eDayOne-Obsidian-Exporter on GitHub\u003c/a\u003e\u003c/p\u003e\n\n\n\n\n\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\t\u003c/main\u003e\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
