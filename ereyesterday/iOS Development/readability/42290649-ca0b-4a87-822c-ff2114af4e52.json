{
  "id": "42290649-ca0b-4a87-822c-ff2114af4e52",
  "title": "SwiftUI Keyboard Shortcut Scope",
  "link": "https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/",
  "description": "A SwiftUI keyboard shortcut remains active as long as the control it’s attached to is still in the view hierarchy, even when not onscreen. Adding Keyboard Shortcuts SwiftUI added The .keyboardShortcut modifier in iOS 14. You apply the modifier to a control. The keyboard shortcut performs the primary action of the control. The shortcut defaults to using the command modifier but you can change that: .keyboardShortcut(\"D\", modifiers: [.control, .option]) Here’s an example of navigation from a root to detail view with keyboard shortcuts applied to the buttons: struct ContentView: View { @State private var isPresented: Bool = false var body: some View { NavigationStack { VStack(spacing: 16) { Button(\"Detail\") { isPresented = true } .keyboardShortcut(\"D\") Button(\"New\") { ... } .keyboardShortcut(\"N\") } .navigationTitle(\"Title\") .navigationBarTitleDisplayMode(.inline) .navigationDestination(isPresented: $isPresented) { Button(\"Edit\") { ... } .keyboardShortcut(\"E\") .navigationTitle(\"Detail\") } } } } A command-N on the root view performs the new button action. A command-D performs the detail button action triggering a navigation to the detail view. On the detail view, command-E performs the edit button action. Keyboard Shortcut Scope What’s surprising to me is that the command-N and command-D keyboard shortcuts are still active on the detail view. You can see this when holding down the command key to view the available keyboard shortcuts. Here’s the available shortcuts from the root view: If I navigate to the detail view, the new and detail button are no longer onscreen but their shortcuts still show up and trigger their actions: What’s Happening? From the documentation: The target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups. So the system searches for the first control associated with the shortcut in the window/scene view hierarchy. It doesn’t matter if the control is offscreen. I can see situations where you might want a shortcut to trigger when the control is offscreen but it’s not what I want here. Workaround The best workaround I’ve been able to come up with is to disable controls when I don’t want the shortcut to be active. In this example, I can use the isPresented state to disable the new and detail commands when I’m presenting the detail view: Button(\"Detail\") { isPresented = true } .keyboardShortcut(\"D\") .disabled(isPresented) Button(\"New\") { ... } .keyboardShortcut(\"N\") .disabled(isPresented) See also this comment from Curt Clifton SwiftUI Keyboard Shortcut Scope was originally posted 07 Apr 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 07 Apr 2025 13:07:55 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2888,
  "excerpt": "A SwiftUI keyboard shortcut remains active as long as the control it's attached to is still in the view hierarchy, even when not onscreen.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "A SwiftUI keyboard shortcut remains active as long as the control it’s attached to is still in the view hierarchy, even when not onscreen. Adding Keyboard Shortcuts SwiftUI added The .keyboardShortcut modifier in iOS 14. You apply the modifier to a control. The keyboard shortcut performs the primary action of the control. The shortcut defaults to using the command modifier but you can change that: .keyboardShortcut(\"D\", modifiers: [.control, .option]) Here’s an example of navigation from a root to detail view with keyboard shortcuts applied to the buttons: struct ContentView: View { @State private var isPresented: Bool = false var body: some View { NavigationStack { VStack(spacing: 16) { Button(\"Detail\") { isPresented = true } .keyboardShortcut(\"D\") Button(\"New\") { ... } .keyboardShortcut(\"N\") } .navigationTitle(\"Title\") .navigationBarTitleDisplayMode(.inline) .navigationDestination(isPresented: $isPresented) { Button(\"Edit\") { ... } .keyboardShortcut(\"E\") .navigationTitle(\"Detail\") } } } } A command-N on the root view performs the new button action. A command-D performs the detail button action triggering a navigation to the detail view. On the detail view, command-E performs the edit button action. Keyboard Shortcut Scope What’s surprising to me is that the command-N and command-D keyboard shortcuts are still active on the detail view. You can see this when holding down the command key to view the available keyboard shortcuts. Here’s the available shortcuts from the root view: If I navigate to the detail view, the new and detail button are no longer onscreen but their shortcuts still show up and trigger their actions: What’s Happening? From the documentation: The target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups. So the system searches for the first control associated with the shortcut in the window/scene view hierarchy. It doesn’t matter if the control is offscreen. I can see situations where you might want a shortcut to trigger when the control is offscreen but it’s not what I want here. Workaround The best workaround I’ve been able to come up with is to disable controls when I don’t want the shortcut to be active. In this example, I can use the isPresented state to disable the new and detail commands when I’m presenting the detail view: Button(\"Detail\") { isPresented = true } .keyboardShortcut(\"D\") .disabled(isPresented) Button(\"New\") { ... } .keyboardShortcut(\"N\") .disabled(isPresented) See also this comment from Curt Clifton",
  "image": "https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eA SwiftUI keyboard shortcut remains active as long as the control it’s attached to is still in the view hierarchy, even when not onscreen.\u003c/p\u003e\n\u003ch3 id=\"adding-keyboard-shortcuts\"\u003eAdding Keyboard Shortcuts\u003c/h3\u003e\n\u003cp\u003eSwiftUI added The \u003ccode\u003e.keyboardShortcut\u003c/code\u003e modifier in iOS 14. You apply the modifier to a control. The keyboard shortcut performs the primary action of the control. The shortcut defaults to using the command modifier but you can change that:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;D\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emodifiers\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[.\u003c/span\u003e\u003cspan\u003econtrol\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoption\u003c/span\u003e\u003cspan\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere’s an example of navigation from a root to detail view with keyboard shortcuts applied to the buttons:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisPresented\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eNavigationStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eVStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Detail\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eisPresented\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;D\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;New\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e...\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;N\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enavigationTitle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Title\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enavigationBarTitleDisplayMode\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003einline\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enavigationDestination\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisPresented\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eisPresented\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Edit\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e...\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;E\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enavigationTitle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Detail\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA command-N on the root view performs the new button action. A command-D performs the detail button action triggering a navigation to the detail view. On the detail view, command-E performs the edit button action.\u003c/p\u003e\n\u003ch3 id=\"keyboard-shortcut-scope\"\u003eKeyboard Shortcut Scope\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eWhat’s surprising to me is that the command-N and command-D keyboard shortcuts are still active on the detail view\u003c/strong\u003e. You can see this when holding down the command key to view the available keyboard shortcuts. Here’s the available shortcuts from the root view:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/001.png\" alt=\"Root view with Toolbar HUD showing command-D and command-N shortcuts\" width=\"250\" height=\"310\" srcset=\"https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf I navigate to the detail view, the new and detail button are no longer onscreen but their shortcuts still show up and trigger their actions:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/002.png\" alt=\"Detail view with Toolbar HUD showing command-D, command-N, and command-E shortcuts\" width=\"250\" height=\"310\" srcset=\"https://useyourloaf.com/blog/swiftui-keyboard-shortcut-scope/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"whats-happening\"\u003eWhat’s Happening?\u003c/h3\u003e\n\u003cp\u003eFrom the documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eSo the system searches for the first control associated with the shortcut in the window/scene view hierarchy. \u003cstrong\u003eIt doesn’t matter if the control is offscreen\u003c/strong\u003e. I can see situations where you might want a shortcut to trigger when the control is offscreen but it’s not what I want here.\u003c/p\u003e\n\u003ch3 id=\"workaround\"\u003eWorkaround\u003c/h3\u003e\n\u003cp\u003eThe best workaround I’ve been able to come up with is to disable controls when I don’t want the shortcut to be active. In this example, I can use the isPresented state to disable the new and detail commands when I’m presenting the detail view:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Detail\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eisPresented\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;D\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edisabled\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisPresented\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;New\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e...\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ekeyboardShortcut\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;N\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edisabled\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisPresented\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSee also \u003ca href=\"https://indieweb.social/@curtclifton/114257363004316122\"\u003ethis comment from Curt Clifton\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-04-07T13:07:55+01:00",
  "modifiedTime": "2025-04-07T16:27:37+01:00"
}
