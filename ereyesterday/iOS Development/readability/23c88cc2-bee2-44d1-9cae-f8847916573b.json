{
  "id": "23c88cc2-bee2-44d1-9cae-f8847916573b",
  "title": "WWDC 2025 Viewing Guide",
  "link": "https://useyourloaf.com/blog/wwdc-2025-viewing-guide/",
  "description": "My WWDC 2025 viewing guide to help you plan the sessions you want to watch. Where Do I Start? The two big themes for the year are Liquid Glass design and Apple Intelligence. Start by watching the Platforms State of the Union (SOTU) for a summary of what’s new this year. You don’t have to learn everything new today! There are over 100 sessions and a lot of new stuff to learn. You may feel like you’re getting left behind. Don’t let it overwhelm you. You’ve got time. Don’t burn yourself out trying to keep up. Watching The Sessions I watch the videos using the Apple Developer app. It’s available on macOS and iOS. The video player supports from 0.5x to 2x playback, most videos have transcripts, some have summaries, and allow copying of the onscreen sample code. You can also watch on YouTube. There are a lot of sessions, but many are short (10-20 minutes). There’s no padding and Apple’s engineers get to the point quickly. Swift Swift 6.2 is here with some updates to ease the pain of adopting Swift Concurrency: What’s new in Swift Install toolchains with Swiftly. Faster clean builds for macros with pre-built swift-syntax dependencies. Finer controls for compiler diagnostics/warnings. Concrete notification types. New Observation type for tracking changes. Testing attachments and exit tests. InlineArray and Span types. Swift 6.2 is single-threaded by default. Opt-in to infer main actor. Improve memory usage and perforamce with Swift Profile a test to find performance issues. Just because it’s shorter, doesn’t mean it’s faster. Reduce allocations and copying. Exclusivity checks. InlineArray fixed size array. Span types to work with contiguous memory. Swift Binary Parsing library. These Swift Concurrency sessions are essential viewing. This seems like a better Concurrency approach: Embracing Swift concurrency Start by running code on the main thread. Introduce concurrency as you need it. Swift 6.2 allows a module to default to main-actor isolation. Use async tasks to await for data. Interleaving - single thread alternating between tasks. Run code on a background thread by marking method with @concurrent. Use nonisolated for library API and let client decide. Actors to move data off main thread. Enable Approachable Concurrency and Default Actor Isolation build settings. Code-along: Elevate an app with Swift concurrency Transform a single-threaded app to use concurrency as needed. Explore concurrency in SwiftUI SwiftUI views are isolated to the main actor. Tasks in the view run on the main actor. Find the boundaries between your UI code and non-UI code. Default actor isolation setting removes need for most @MainActor annotations. Interoperability with C, C++, and Java: Safely mix C, C++, and Swift Strict memory safety build setting, off by default. Annotate C and C++ functions and types so Swift can use them safely. Explore Swift and Java interoperability Incremental adoption of Swift by mixing Swift and Java code. Calling Swift from Java or vice-versa. Meet Containerization Open source Swift framework to create and run Linux containers on macOS. SwiftUI There’s work to be done updating apps for the new design: What’s new in SwiftUI Recompile for new liquid glass design. Toolbar spacer API. Glass effect. iPadOS menu bar using commands API. Large lists on macOS load 6x faster. New SwiftUI performance instrument. New Animatable macro. Scene bridging to UIKit and AppKit. AssistiveAccess scene type. WebView. 3D charts. New drag and drop API. Rich text editor. Build a SwiftUI app with the new design Liquid glass design system. Extend views outside the safe area with BackgroundExtensionEffect. Sidebars, toolbars, and tab bars float above content. Remove custom presentation backgrounds. Toolbar spacer API splits items into groups. Search at bottom on iPhone. Slider tick marks. GlassEffectContainer for custom controls. Code-along: Cook up a rich text experience in SwiftUI with AttributedString TextEditor supports rich text when bound to an attributed string. Bring Swift Charts to the third dimension Support for 3D charts. PointMark, RuleMark, and RectangleMark take a Z value. Use gestures to rotate the chart. SurfacePlot is a 3D extension to LinePlot. Two camera projections. Meet WebKit for SwiftUI New WebView API to load and display web pages. WebPage is Observable. URLSchemeHandler for custom URLs to load content bundled with App. New Observations API in Swift 6.2 to respond to navigation events. Directly evaluate Javascript. Supports look to scroll on VisionOS. Find-in-page support. UIKit UIKit is not going away and continues to get useful updates: What’s new in UIKit New design system. UISplitViewController support for inspectors and resizable columns. iPadOS menu bar. Menu bars no longer supported in storyboards. Swift Observable to invalidate and update views. Back-deploys to iOS 18. updateProperties() called before layoutSubviews. Support for SwiftUI scene lifecycle, deprecating app delegate callbacks. SF Symbols new effects. Build a UIKit app with the new design UIKit components have been updated with Liquid Glass. Tab bar floats above content. Set desired direction when it minimizes on scroll. Extend background behind sidebars. Toolbars visually group items. Navigation item subtitle. Remove custom backgrounds from navigation, toolbars, and sheets. Search bar placement. Search as a dedicated view. Control sizes are larger. UIGlassEffect. iPadOS A good year for iPadOS bringing macOS style windowing and menu bars to the platform: Make your UIKit app more flexible Best practises to make your app adapt across sizes and platforms. Adopt UIScene life cycle - mandatory in next major release. New trait to determine if parent split view is collapsed. Split view support for Inspector column. UISceneSizeRestrictions to set preferred minimum size. Scenes on iPadOS have macOS style window controls. Use layout guide to keep content clear. UIRequiresFullScreen is deprecated and will be ignored in a future release. Apps will no longer be scaled for new screen sizes. AppKit Build an AppKit app with the new design Rebuild with Xcode 26 to get the Liquid Glass design. Use NSSplitViewController for new glass sidebar, removing any visual effects from sidebar. NSBackgroundExtensionView to mirror and extend content. New larger control sizes and corner radius. Add icons to menu items. watchOS What’s new in watchOS 26 New toolbar and control styles. Use Icon Composer to update your icon. The arm64 architecture is used by Series 9 and later, and Ultra 2 devices. WidgetKit controls in control center, smart stack, or action button. Widgets now configurable. RelevanceKit to suggest widgets in smart stack. Push updates to widgets using APNs. Developer Tools Xcode gets LLM-based coding assistants: What’s new in Xcode 26 Xcode is 24% smaller, no Intel simulator runtimes by default. New tab start page. Pin tabs. Multi-word search. Swift Mode for Voice Control. Playground macro work likes Preview to iterate on code. Type safe Swift symbols for localized strings with auto-generated comments. Coding assist using ChatGPT and other third-party LLM’s (needs macOS Tahoe). Debugger now follows execution into async tasks. Metrics recommendations. Explicitly Built Modules now the default. Enhanced Security capability. XCTHitchMetric. Icon Composer Create icons with Icon Composer New tool to build icons for all platforms in a single file. Start in preferred design tool then export layers for Icon Composer. Add .icon file direct to Xcode project. Instruments Profile and optimize power usage in your app Power Profiler in Instruments. Also available on-device in Developer mode. Optimize CPU performance with Instruments Processor Trace collects complete trace, avoiding sampling bias. Requires M4 or A18. Enable developer setting on device. CPU Counters instrument to find code bottlenecks. Optimize SwiftUI performance with Instruments Interesting new instrument to find performance issues with SwiftUI. Use Cause \u0026 Effect graph to understand dependencies including Observables and the Environment that might be causing view updates. Localization Code-along: Explore localization with Xcode Walk-through localizing an App with String Catalogs. Automatic comment generation using on-device model. New #Bundle macro to refer to resource bundle of current target. Xcode generated symbol names from key/value, enabled by default for new projects. Refactor to convert strings to symbols. Testing Record, replay, and review: UI automation with Xcode Coding Assistant can add accessibilityIdentifiers to relevant parts of view. New code generation system for UI test recording. SwiftData No Core Data sessions this year and only a small update to SwiftData. Not sure anyone was asking for inheritance: SwiftData: Dive into inheritance and schema migration Class inheritance for models. Use for IS-A relationships when you need deep and shallow searches (queries for both root class and subclass). New sortBy property on HistoryDescriptor to fetch history in order. Example of using history tracking to update context for remote changes. WidgetKit What’s new in widgets Adjust existing widgets for clear glass or accented tint presentation. Widgets now on visionOS 26. Can be elevated or recessed into surface. Fixed in space, adapt based on distance of viewer. Widgets and Live Activities on CarPlay. Live Activities on a paired iPhone now appear on macOS Tahoe menu bar. Controls on macOS and watchOS. Widget push updates. Design The Liquid Glass sessions are essential viewing this year: Meet Liquid Glass Liquid Glass lensing bends and shapes light. Adapts to ensure legibility and separate controls from content. Best reserved for navigation layer that floats above content. Do not stack Liquid Glass. Only tint to emphasise primary elements and actions. Reduced Transparency makes Liquid Glass frostier. Get to know the new design system Adjusted System colors for Liquid Glass. Alert Text is left-aligned. Concentricity aligns radii so shapes nest. Larger controls use capsule shapes. Sheets spring from an action source. Remove custom backgrounds from controls. Primary action stays separate and tinted. Hard scroll edge effect on macOS for stronger boundary. Bars rely more on symbols, see HIG for glyphs for common actions. Design foundations from idea to interface Start with app structure. Where am I? What can I do? Where can I go from here? Use toolbar for screen specific actions. Progressive disclosure. Group by time, progress or patterns. Use a cohesive visual style. Design is never really finished. Make a big impact with small writing changes Simplify. Too many filler adverbs and adjectives. Does each word add value. Don’t apologise for errors. Avoid repetition. Lead with the why (move the benefit to the front). Word list to track terms with use/don’t use and definition. Read your writing out loud. Principles of inclusive app design One in seven people have a disability. Vision. Hearing. Motor. Speech. Cognitive. Inclusive design is better for everyone. Involve members of the disability community in your design. Test with VoiceOver and Switch Control. What’s new in SF Symbols 7 Draw path animation inspired by handwriting. Symbol gradients. Annotate custom symbols with path to draw. Say hello to the new look of app icons Liquid glass material layers. Monochrome, light, and dark tint, translucent appearance modes. Rounder corner radius. macOS icons no longer extend outside the shape. Layers \u0026 translucency. Use softer light-to-dark gradients for backgrounds. Use System Light and System Dark for white or black backgrounds. Design interactive snippets Compact views displayed from App Intents in Siri, Spotlight, and Shortcuts. Quick, in-moment experiences. Easy to read with larger type, concise, clear contrast. Buttons for interaction. Result and confirmation snippets. Platform specific sessions: Elevate the design of your iPad app Consider starting with a tab bar. Extend content around navigation. New windowing system with new controls. Apps not yet updated for iOS 26 show controls in safe area. Create a new window for each document. Name your windows. New pointer shape. Menu bar on top edge of iPad. Design widgets for visionOS Three dimensional objects. Compatibility mode for existing iPadOS widgets. Widgets persist in location and are fixed in size. Adapt with user proximity. Paper or glass styles. Elevated or recessed mounting styles. Design hover interactions for visionOS Custom hover effects. Look to scroll. Starts when user looks at edge of scroll view. Opt-in, enable when view is primarily for reading or browsing. Persistent controls stay visible while you look at them. Accessibility Evaluate your app for Accessibility Nutrition Labels Show which accessibility features you support in App Store Connect. Contrast. Dark interface. Larger text. Color. Captions. Reduced Motion. VoiceOver. Make your Mac app more accessible to everyone Group accessibility items into containers for faster navigation with VoiceOver. Merge label and buttons. Rotors to define collections of views. In macOS 26 can suggest initial focus for VoiceOver. Add keyboard shortcuts. Customize your app for Assistive Access Streamlined experience for people with cognitive disabilities. Create an assistive access scene. Set UISupportsAssistiveAccess in Info.plist. Keep to essential features. Icons are supported in the navigation bar. App Store and Distribution What’s new in App Store Connect Upload builds with App Store Connect API later this year. Can reuse a build number if upload fails. Apple-hosted background assets (up to 200GB). TestFlight feedback now in App Store Connect app. App Store Tags generated by Apple’s LLM (human reviewed) you can deselect unwanted tags. Keywords for custom product pages. Offer codes for consumables, non-consumables and non-renewing subscriptions. Review summaries. New age ratings. Accessibility Nutrition Labels. Over 100 new App Analytics metrics. Automate your development process with the App Store Connect API Build upload API and Feedback API. Webhook notifcations API. Apple-Hosted Background Assets API. Dive into App Store server APIs for In-App Purchase App transaction ID added to AppTransaction. Unique ID for each Apple Account per app use to associate customer account with all transactions. Signing requests all use JWS signature format. New Send Consumption Information endpoint when responding to refunds. Optimize your monetization with App Analytics New App Analytics home. Expanded filtering and over 100 new metrics. New monetization section. Machine Learning and Apple Intelligence An API to access an on-device Large Language Model (LLM) was high on everyone’s wish list: Meet the Foundation Models framework API access to Apple’s LLM. On-device so data stays private and can run offline. Experiment with prompts using the new Playground feature in Xcode. On-device model not intended for world knowledge or advanced reasoning. Adapters for common tasks. Use @Generable and @Guide to define Swift type that models returns. Streams partially generated types. Model can callout to tools you define. Session instructions get priority over user prompts. Context is retained during a session. Only available where Apple Intelligence is available. Deep dive into the Foundation Models framework Session throws error when it reaches available context size. Create new session with extract or summary from previous session to provide context. Greedy sampling produces deterministic output. Check for supported languages. @Generable macro defines structured schema for responses. Constrained decoding forces model to return valid tokens for the schema. String properties can use a regex pattern guide. Tool protocol to define functions model can call to access external data. Explore prompt design \u0026 safety for on-device foundation models On-device LLM has ~3-billion parameters, small when compared to cloud based models. May need to break down complex prompts. Avoid maths, code, or tasks requiring real world knowledge. Avoid where facts are critical or provide verified information in prompt. Use prompts like “in a few words” or “in detail” to control output. Provide model with a role. Ask a single, detailed task. Less than five examples in prompt. Use “DO NOT”. Apple designed guardrails to block harmful inputs and throw safety errors. Use instructions to steer model output. Never include user input in instructions. Code-along: Bring on-device AI to your app using the Foundation Models framework See sample code for example of adding Foundation model to generate trip itineraries. Using FoundationModel instrument to profile performance. Discover machine learning \u0026 AI frameworks on Apple platforms Platform tools: Writing Tools, Genmoji. Image Playground. ImageCreator and Foundation Models. ML-API’s: Vision. Natural Language. Translation. Sound Analysis. SpeechAnalyzer. Core ML models. Apple MLX for numerical computing and machine learning. Get started with MLX for Apple silicon MLX open source array framework for Apple silicon. Closely follows numPy. Use from Python, Swift, C++, or C. Explore large language models on Apple silicon with MLX Example of using an M3 Ultra with 512GB unified memory to run latest DeepSeek model. Use Python to load and query LLM’s on-device. Reduce precision by quantizing a model that’s faster to run with reduced memory. Fine tune by training on-device with domain-specific data. MLXSwift to integrate model into Swift code. Dive deeper into writing tools Now on visionOS. Follow-up requests. Rich text with presentation intents. Writing Tools coordinator for custom text engines. Bring advanced speech-to-text to your app with SpeechAnalyzer New API with new speech-to-text model. Faster and more flexible than SFSpeechRecognizer. Supports long-form, conversational, and distant speakers. Live transcription. Private on-device model. Read documents using the Vision framework New API for reading documents. Extract document structure such tables, lists, paragraphs. Identify QR codes, email addresses, phone numbers, URLs. Camera lens smudge detection - prompt user to clean camera lens when dirty. Hand pose detection uses a smaller, modernized model. What’s new in BNNS Graph Basic Neural Network Subroutines, CPU-based inference for tasks like audio or image processing. BNNSGraphBuilder new Swift API to write graphs of operations in Swift. Smaller, real-time and latency-sensitive use cases. App Intents Get to know App Intents Recap of how and why to implement App Intents. App Intents can be added to Swift packages and libraries. Explore new advances in App Intents Interactive snippets. App’s search results show up in image search. NSUserActivities to ask ChatGPT about onscreen content. Conform app entities to IndexedEntity and donate to Spotlight. UndoableIntent protocol. New Intent to work with SwiftUI navigation path. Computed App Entity properties. Develop for Shortcuts and Spotlight with App Intents Access Apple Intelligence models from shortcuts. On-device, private compute cloud, or ChatGPT. Run app actions from Spotlight on Mac. App Services What’s new in Apple Pay Apple Pay dynamic button shows default payment card. Unified preauthorized payments view and notifications. Automatic order tracking, Apple Intelligence detects order and delivery emails in the mail app, converting them to Wallet orders. FinanceKit API now available in UK. Now supports background delivery extension. What’s new in Wallet Poster Event Ticket (iOS 18) now supports multiple upcoming events from one ticket. Boarding passes integrate with Apple’s flight service for updates. New live activity for access to flight information (share via messages). Add passes to wallet automatically (one-time user prompt). Turbocharge your app for CarPlay Message tapbacks, pinned conversations, and compact incoming call UI that doesn’t interrupt navigation. Widgets and Live Activities don’t need CarPlay App (support system small widget). Can exclude CarPlay for game and highly interactive widgets. What’s new in AdAttributionKit Privacy preserving Ad analytics (iOS 17.4). From iOS 18.4, multiple re-engagement campaigns. Configurable attribution window and cooldown period to handle overlapping campaigns. Country code in the postback. Create test postbacks in the iOS Settings app (iOS 18.4). Enhance your app’s multilingual experience Better support for people who are multilingual. Arabizi transliteration keyboard converts latin script to Arabic. Bilingual Arabic-English keyboard. Thai keyboard. Multilingual Siri recommendations. Locale.preferredLanguages may be deprecated, switch to Locale.preferredLocales. Alternate calendars for Gujarati, Marathi, and Korean. Natural selection of bidirectional text (combining LTR and RTL). Writing direction is determined dynamically. Wake up to the AlarmKit API Framework to create alarm based on schedule or countdown. Countdown live activity. Authorization required. Secondary button to run app intent to open app. What’s new in StoreKit and In-App Purchase AppTransaction now includes appTransactionID and originalPlatform. New SubscriptionStatus API. Offer codes now available for consumables, non-consumables, and non-renewing subscriptions. New server APIs require a JSON web signature. New subscription offer view. Meet PaperKit Canvas for drawing and markup elements. Uses by Notes and Journal apps. Now available for macOS Tahoe. System Services Finish tasks in the background New continued processing task. Started by explicit user action, like an export. Has a definite end. Not for routine maintenance, backups, sync. Provide progress updates to the system and an expiration handler. Background GPU access. Supercharge device connectivity with Wi-Fi Aware New in iOS 26, Wi-Fi Aware, cross-platform standard, for direct device-to-device connectivity. Filter and tunnel network traffic with NetworkExtension Use Network Extension to build a VPN app. Use Content Filter API to filter content. In iOS 26, filter on full URL using URL filter. App has no access to traffic. System performs the filtering on behalf of app to maintain privacy. Use structured concurrency with Network framework In iOS and macOS 26 Network framework integrates with Swift concurrency. Declarative syntax to define the protocol stack. Send and receive are async functions. Built-in type, length, value (TLV) framer. Directly send/receive codable types. Network browser to discover devices using Wi-Fi Aware or Bonjour. Optimize home electricity usage with EnergyKit Seems to be US only, provides insights into the local electricity grid so people can reduce or shift usage to take advantage of cheaper/cleaner energy. Discover Apple-Hosted Background Assets On Demand Resources is a legacy technology and will be deprecated, migrate to Background Assets. Apple Developer Program includes 200GB of Apple hosting capacity. Packaging tool to create asset packs. System provides full-featured downloader extension which you can drop into your app. Mock server ships with Xcode so you can test locally. Photos and Camera Enhance your app’s audio recording capabilities In-app input device selection on iOS using new AVKit API. New high quality bluetooth recording option using AirPods. Spatial Audio capture and AudioMix effect. Enhancing your camera experience with capture controls Using device buttons to control camera capture. AirPod clicks to remotely control camera without touching device. Privacy and Security Integrate privacy into your development process Data minimization, on-device processing, transparency and control, protections. What’s new in passkeys New account creation API shows a pre-filled sheet and saves passkey in Passwords app. Synced across devices. New Signal API to tell password manager that user details changed, revoke a passkey, or that a password is no longer needed. Securely transfer passkeys between credential manager apps. Enhance child safety with PermissionKit Uses Family Sharing group to allow child to ask permission from a parent or guardian using Messages. Deliver age-appropriate experiences in your app App Store has finer grained age categories. Parent sets a child’s age range. Declared Age Range framework to confirm a child’s age range. Using age range keeps birth date private. Get ahead with quantum-secure cryptography Harvest now and decrypt later attack requires mitigation now. Quantum secure algorithms are ready for adoption. iMessage already uses quantum secure hybrid encryption. TLS 1.3 has a quantum secure encryption upgrade. Enabled by default in iOS 26. CryptoKit has new secure algorithms. Maps and Location Go further with MapKit New GeoToolbox framework with PlaceDescriptor to find rich data about a place when working with MapKit or other mapping providers. Geocoding now in MapKit deprecating Core Location classes CLGeocoder and CLPlacemark. Cycle directions. Many MapKit APIs now on watchOS. Look Around on MapKitJS. Health and Fitness Meet the HealthKit Medications API New Medications API to read medications data user adds in the Health app. Sample app shows logging of side-effects. Track workouts with HealthKit on iOS and iPadOS Best practises for tracking workouts on iOS. Pair with a heart rate monitor. Access workout data when locked. Siri intent handler to start and stop workouts. App is automatically relaunched on crash, recover active workout. Audio and Video Enhance your app with machine-learning-based video effects New ML-based video-editing effects for Video Toolbox now also available on iOS. Includes frame rate conversion, super resolution and motion blur. Create a seamless mutliview playback experience Playing multiple streams of audio/video, synchronized and unsynchronized using AVFoundation and AVRouting with AirPlay integration. Capture cinema video in your app Cinematic video introduced with iPhone 13 allowing user to rack focus between subjects. New Cinematic Video API to capture cinematic video. Safari and Web What’s new in Safari and WebKit Safari 19 features. CSS scroll-driven animations. Cross document transitions. Anchor layout positioning. Background-clip, shape(), text-wrap: pretty. SVG icons. HDR images. Ogg Opus and Ogg Vorbis. Verify identity documents on the web Online identity verification using digital identity documents. ID’s in Apple Wallet use the mdoc format (US only). W3C Digital Credentials API to request mdocs from Safari and WebKit. Learn more about Declarative Web Push Enhancement of original Web Push to allow notifications to be defined directly in JSON without code. What’s new for the spatial web New HTML Model element, stereoscopic rendering. 180/360-degree or wide field of view spatial video. Website environments in Safari developer preview to provide a virtual environment to website visitors. Spatial Computing Apple continues to extend visionOS: What’s new in visionOS 26 SwiftUI 3D layout modifiers. Presentation from volumes. Render outside app’s bounds. Object Manipulation API. Unified coordinate conversion. RealityKit entities are Observable, directly attach SwiftUI gestures. Spatial Audio Experience API. Persist views in place across restarts. Faster (3x) hand tracking. Support for Sony VR2 and Logitech Muse controllers. Increased memory limits. Render and stream content from a Mac. Nearby Window Sharing in SharePlay apps. Apple Projected Media Profiles. Look to scroll. New Enterpise APIs. What’s new in RealityKit tvOS support. Direct access to ARKit data for anchoring. Pick up and rotate 3D objects and swap hands. Add collision and physics to real world objects. Hide entities behind static real objects. Present 2D images, spatial photos and scenes. Immersive video. Add SwiftUI views directly to entities. Set the scene with SwiftUI in visionOS Windows, volumes, and widgets can lock in place, use scene restoration to bring them back. Default launch behaviour. Snap windows and volumes to physical environment. Stream immersive spaces from macOS to visionOS. Scene Bridging to add SwiftUI volumes and immersive spaces to UIKit or AppKit apps. Meet SwiftUI spatial layout 3D extensions to SwiftUI layout system to build 3D scenes without RealityKit. Most modifiers have a 3D analog. Better together: SwiftUI and RealityKit Load animations from a Model3DAsset. RealityKit entities are now observable. Object Manipulation API works from both SwiftUI or RealityKit. Attach SwiftUI views, gestures, and presentations directly within RealityKit scenes. Unified Coordinate Conversion to convert between RealityKit and SwiftUI. Share visionOS experiences with nearby people Share apps with nearby people in the same space. Participate remotely with FaceTime. Builds on SharePlay. Explore spatial accessory input on visionOS Support for spatial accessories: Sony PlayStation VR2 Sense controller and Logitech Muse. Optimize your custom environments for visionOS Optimizing and baking assets using Houdini procedural tools. Explore video experiences for visionOS Choosing between different video profiles from 2D, 3D, Spatial, 180, 360, Wide and Apple Immersive Video. Blackmagic URSA Cine Immersive camera captures 8160 x 7200 pixels per eye at 90fps. Learn about Apple Immersive Video technologies Apple Immersive Video requires specific cameras like the BlackMagic URSA to capture. How to read, write, and publish immersive videos. New Apple Spatial Audio Format (ASAF) encode with Apple Positional Audio Codec (APAC), playback on all platforms except watchOS. Support immersive video playback in visionOS apps Immersive video playback using QuickLook, AVKit, or RealityKit. Comfort mitigation to detect high motion and reduce immersion. Learn about the Apple Projected Media Profile APMP supports 180, 360, and wide FOV video, can be captured with consumer devices. QuickTime and MP4 file formats. Already supported by Final Cut Pro. Reading, writing, editing, and publishing with Core Media, Video Toolbox, and AVFoundation. Business and Education What’s new in Apple device management and identity Prevent personal Apple Accounts from signing-in to work devices. Migrate between MDM servers. Declarative Device Management extended to Vision Pro and Apple TV. Safari management of bookmarks and homepage. Device reset can now preserve managed apps when wiping user data. Per-app control of app updates. Authenticated Guest mode for shared macs. Tap to login using iPhone or watch. Get to know the ManagedApp Framework New framework for managed deployments. Provide app configuration, provision passwords, certs, and identities. Works with single sign-on, and device attestation. Explore enhancements to your spatial business app Enterprise APIs for in-house visionOS apps. External video and Neural Engine access no longer needs enterprise license. Vision Entitlement Services to check licenses and entitlements. Window follow mode. New ARKit enterprise API to share coordinate spaces. Protected content API to prevent screen captures and sharing. CameraRegionView for dedicated view of specific area you want to watch. Metal and Games Metal 4 is supported on the M1 and A14 Bionic or later: Discover Metal 4 Explore Metal 4 games Go further with Metal 4 games Level up your games Combine Metal 4 machine learning and graphics What’s new in Metal rendering for immersive apps Apple Games Get started with Game Center Use GameKit bundle in Xcode to configure Game Center features. Allows testing of achievements and leaderboards in Xcode. New features for Challenges and Activities. Engage players with the Apple Games app New Games app pre-installed on devices. Any Apps with the Games category show up in the app. Includes Apple Arcade and Game Center in a dedicated games app to make it easier to discover games. Bring your SceneKit project to RealityKit SceneKit is soft-deprecated. SceneKit apps continue to work but framework is in maintenance mode and not recommended. New apps and significant updates should use RealityKit. Differences and ways to port SceneKit apps to RealityKit. WWDC 2025 Viewing Guide was originally posted 16 Jun 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 16 Jun 2025 09:00:00 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 32375,
  "excerpt": "My WWDC 2025 viewing guide to help you plan the sessions you want to watch.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "My WWDC 2025 viewing guide to help you plan the sessions you want to watch. Where Do I Start? The two big themes for the year are Liquid Glass design and Apple Intelligence. Start by watching the Platforms State of the Union (SOTU) for a summary of what’s new this year. You don’t have to learn everything new today! There are over 100 sessions and a lot of new stuff to learn. You may feel like you’re getting left behind. Don’t let it overwhelm you. You’ve got time. Don’t burn yourself out trying to keep up. Watching The Sessions I watch the videos using the Apple Developer app. It’s available on macOS and iOS. The video player supports from 0.5x to 2x playback, most videos have transcripts, some have summaries, and allow copying of the onscreen sample code. You can also watch on YouTube. There are a lot of sessions, but many are short (10-20 minutes). There’s no padding and Apple’s engineers get to the point quickly. Swift Swift 6.2 is here with some updates to ease the pain of adopting Swift Concurrency: What’s new in Swift Install toolchains with Swiftly. Faster clean builds for macros with pre-built swift-syntax dependencies. Finer controls for compiler diagnostics/warnings. Concrete notification types. New Observation type for tracking changes. Testing attachments and exit tests. InlineArray and Span types. Swift 6.2 is single-threaded by default. Opt-in to infer main actor. Improve memory usage and perforamce with Swift Profile a test to find performance issues. Just because it’s shorter, doesn’t mean it’s faster. Reduce allocations and copying. Exclusivity checks. InlineArray fixed size array. Span types to work with contiguous memory. Swift Binary Parsing library. These Swift Concurrency sessions are essential viewing. This seems like a better Concurrency approach: Embracing Swift concurrency Start by running code on the main thread. Introduce concurrency as you need it. Swift 6.2 allows a module to default to main-actor isolation. Use async tasks to await for data. Interleaving - single thread alternating between tasks. Run code on a background thread by marking method with @concurrent. Use nonisolated for library API and let client decide. Actors to move data off main thread. Enable Approachable Concurrency and Default Actor Isolation build settings. Code-along: Elevate an app with Swift concurrency Transform a single-threaded app to use concurrency as needed. Explore concurrency in SwiftUI SwiftUI views are isolated to the main actor. Tasks in the view run on the main actor. Find the boundaries between your UI code and non-UI code. Default actor isolation setting removes need for most @MainActor annotations. Interoperability with C, C++, and Java: Safely mix C, C++, and Swift Strict memory safety build setting, off by default. Annotate C and C++ functions and types so Swift can use them safely. Explore Swift and Java interoperability Incremental adoption of Swift by mixing Swift and Java code. Calling Swift from Java or vice-versa. Meet Containerization Open source Swift framework to create and run Linux containers on macOS. SwiftUI There’s work to be done updating apps for the new design: What’s new in SwiftUI Recompile for new liquid glass design. Toolbar spacer API. Glass effect. iPadOS menu bar using commands API. Large lists on macOS load 6x faster. New SwiftUI performance instrument. New Animatable macro. Scene bridging to UIKit and AppKit. AssistiveAccess scene type. WebView. 3D charts. New drag and drop API. Rich text editor. Build a SwiftUI app with the new design Liquid glass design system. Extend views outside the safe area with BackgroundExtensionEffect. Sidebars, toolbars, and tab bars float above content. Remove custom presentation backgrounds. Toolbar spacer API splits items into groups. Search at bottom on iPhone. Slider tick marks. GlassEffectContainer for custom controls. Code-along: Cook up a rich text experience in SwiftUI with AttributedString TextEditor supports rich text when bound to an attributed string. Bring Swift Charts to the third dimension Support for 3D charts. PointMark, RuleMark, and RectangleMark take a Z value. Use gestures to rotate the chart. SurfacePlot is a 3D extension to LinePlot. Two camera projections. Meet WebKit for SwiftUI New WebView API to load and display web pages. WebPage is Observable. URLSchemeHandler for custom URLs to load content bundled with App. New Observations API in Swift 6.2 to respond to navigation events. Directly evaluate Javascript. Supports look to scroll on VisionOS. Find-in-page support. UIKit UIKit is not going away and continues to get useful updates: What’s new in UIKit New design system. UISplitViewController support for inspectors and resizable columns. iPadOS menu bar. Menu bars no longer supported in storyboards. Swift Observable to invalidate and update views. Back-deploys to iOS 18. updateProperties() called before layoutSubviews. Support for SwiftUI scene lifecycle, deprecating app delegate callbacks. SF Symbols new effects. Build a UIKit app with the new design UIKit components have been updated with Liquid Glass. Tab bar floats above content. Set desired direction when it minimizes on scroll. Extend background behind sidebars. Toolbars visually group items. Navigation item subtitle. Remove custom backgrounds from navigation, toolbars, and sheets. Search bar placement. Search as a dedicated view. Control sizes are larger. UIGlassEffect. iPadOS A good year for iPadOS bringing macOS style windowing and menu bars to the platform: Make your UIKit app more flexible Best practises to make your app adapt across sizes and platforms. Adopt UIScene life cycle - mandatory in next major release. New trait to determine if parent split view is collapsed. Split view support for Inspector column. UISceneSizeRestrictions to set preferred minimum size. Scenes on iPadOS have macOS style window controls. Use layout guide to keep content clear. UIRequiresFullScreen is deprecated and will be ignored in a future release. Apps will no longer be scaled for new screen sizes. AppKit Build an AppKit app with the new design Rebuild with Xcode 26 to get the Liquid Glass design. Use NSSplitViewController for new glass sidebar, removing any visual effects from sidebar. NSBackgroundExtensionView to mirror and extend content. New larger control sizes and corner radius. Add icons to menu items. watchOS What’s new in watchOS 26 New toolbar and control styles. Use Icon Composer to update your icon. The arm64 architecture is used by Series 9 and later, and Ultra 2 devices. WidgetKit controls in control center, smart stack, or action button. Widgets now configurable. RelevanceKit to suggest widgets in smart stack. Push updates to widgets using APNs. Developer Tools Xcode gets LLM-based coding assistants: What’s new in Xcode 26 Xcode is 24% smaller, no Intel simulator runtimes by default. New tab start page. Pin tabs. Multi-word search. Swift Mode for Voice Control. Playground macro work likes Preview to iterate on code. Type safe Swift symbols for localized strings with auto-generated comments. Coding assist using ChatGPT and other third-party LLM’s (needs macOS Tahoe). Debugger now follows execution into async tasks. Metrics recommendations. Explicitly Built Modules now the default. Enhanced Security capability. XCTHitchMetric. Icon Composer Create icons with Icon Composer New tool to build icons for all platforms in a single file. Start in preferred design tool then export layers for Icon Composer. Add .icon file direct to Xcode project. Instruments Profile and optimize power usage in your app Power Profiler in Instruments. Also available on-device in Developer mode. Optimize CPU performance with Instruments Processor Trace collects complete trace, avoiding sampling bias. Requires M4 or A18. Enable developer setting on device. CPU Counters instrument to find code bottlenecks. Optimize SwiftUI performance with Instruments Interesting new instrument to find performance issues with SwiftUI. Use Cause \u0026 Effect graph to understand dependencies including Observables and the Environment that might be causing view updates. Localization Code-along: Explore localization with Xcode Walk-through localizing an App with String Catalogs. Automatic comment generation using on-device model. New #Bundle macro to refer to resource bundle of current target. Xcode generated symbol names from key/value, enabled by default for new projects. Refactor to convert strings to symbols. Testing Record, replay, and review: UI automation with Xcode Coding Assistant can add accessibilityIdentifiers to relevant parts of view. New code generation system for UI test recording. SwiftData No Core Data sessions this year and only a small update to SwiftData. Not sure anyone was asking for inheritance: SwiftData: Dive into inheritance and schema migration Class inheritance for models. Use for IS-A relationships when you need deep and shallow searches (queries for both root class and subclass). New sortBy property on HistoryDescriptor to fetch history in order. Example of using history tracking to update context for remote changes. WidgetKit What’s new in widgets Adjust existing widgets for clear glass or accented tint presentation. Widgets now on visionOS 26. Can be elevated or recessed into surface. Fixed in space, adapt based on distance of viewer. Widgets and Live Activities on CarPlay. Live Activities on a paired iPhone now appear on macOS Tahoe menu bar. Controls on macOS and watchOS. Widget push updates. Design The Liquid Glass sessions are essential viewing this year: Meet Liquid Glass Liquid Glass lensing bends and shapes light. Adapts to ensure legibility and separate controls from content. Best reserved for navigation layer that floats above content. Do not stack Liquid Glass. Only tint to emphasise primary elements and actions. Reduced Transparency makes Liquid Glass frostier. Get to know the new design system Adjusted System colors for Liquid Glass. Alert Text is left-aligned. Concentricity aligns radii so shapes nest. Larger controls use capsule shapes. Sheets spring from an action source. Remove custom backgrounds from controls. Primary action stays separate and tinted. Hard scroll edge effect on macOS for stronger boundary. Bars rely more on symbols, see HIG for glyphs for common actions. Design foundations from idea to interface Start with app structure. Where am I? What can I do? Where can I go from here? Use toolbar for screen specific actions. Progressive disclosure. Group by time, progress or patterns. Use a cohesive visual style. Design is never really finished. Make a big impact with small writing changes Simplify. Too many filler adverbs and adjectives. Does each word add value. Don’t apologise for errors. Avoid repetition. Lead with the why (move the benefit to the front). Word list to track terms with use/don’t use and definition. Read your writing out loud. Principles of inclusive app design One in seven people have a disability. Vision. Hearing. Motor. Speech. Cognitive. Inclusive design is better for everyone. Involve members of the disability community in your design. Test with VoiceOver and Switch Control. What’s new in SF Symbols 7 Draw path animation inspired by handwriting. Symbol gradients. Annotate custom symbols with path to draw. Say hello to the new look of app icons Liquid glass material layers. Monochrome, light, and dark tint, translucent appearance modes. Rounder corner radius. macOS icons no longer extend outside the shape. Layers \u0026 translucency. Use softer light-to-dark gradients for backgrounds. Use System Light and System Dark for white or black backgrounds. Design interactive snippets Compact views displayed from App Intents in Siri, Spotlight, and Shortcuts. Quick, in-moment experiences. Easy to read with larger type, concise, clear contrast. Buttons for interaction. Result and confirmation snippets. Platform specific sessions: Elevate the design of your iPad app Consider starting with a tab bar. Extend content around navigation. New windowing system with new controls. Apps not yet updated for iOS 26 show controls in safe area. Create a new window for each document. Name your windows. New pointer shape. Menu bar on top edge of iPad. Design widgets for visionOS Three dimensional objects. Compatibility mode for existing iPadOS widgets. Widgets persist in location and are fixed in size. Adapt with user proximity. Paper or glass styles. Elevated or recessed mounting styles. Design hover interactions for visionOS Custom hover effects. Look to scroll. Starts when user looks at edge of scroll view. Opt-in, enable when view is primarily for reading or browsing. Persistent controls stay visible while you look at them. Accessibility Evaluate your app for Accessibility Nutrition Labels Show which accessibility features you support in App Store Connect. Contrast. Dark interface. Larger text. Color. Captions. Reduced Motion. VoiceOver. Make your Mac app more accessible to everyone Group accessibility items into containers for faster navigation with VoiceOver. Merge label and buttons. Rotors to define collections of views. In macOS 26 can suggest initial focus for VoiceOver. Add keyboard shortcuts. Customize your app for Assistive Access Streamlined experience for people with cognitive disabilities. Create an assistive access scene. Set UISupportsAssistiveAccess in Info.plist. Keep to essential features. Icons are supported in the navigation bar. App Store and Distribution What’s new in App Store Connect Upload builds with App Store Connect API later this year. Can reuse a build number if upload fails. Apple-hosted background assets (up to 200GB). TestFlight feedback now in App Store Connect app. App Store Tags generated by Apple’s LLM (human reviewed) you can deselect unwanted tags. Keywords for custom product pages. Offer codes for consumables, non-consumables and non-renewing subscriptions. Review summaries. New age ratings. Accessibility Nutrition Labels. Over 100 new App Analytics metrics. Automate your development process with the App Store Connect API Build upload API and Feedback API. Webhook notifcations API. Apple-Hosted Background Assets API. Dive into App Store server APIs for In-App Purchase App transaction ID added to AppTransaction. Unique ID for each Apple Account per app use to associate customer account with all transactions. Signing requests all use JWS signature format. New Send Consumption Information endpoint when responding to refunds. Optimize your monetization with App Analytics New App Analytics home. Expanded filtering and over 100 new metrics. New monetization section. Machine Learning and Apple Intelligence An API to access an on-device Large Language Model (LLM) was high on everyone’s wish list: Meet the Foundation Models framework API access to Apple’s LLM. On-device so data stays private and can run offline. Experiment with prompts using the new Playground feature in Xcode. On-device model not intended for world knowledge or advanced reasoning. Adapters for common tasks. Use @Generable and @Guide to define Swift type that models returns. Streams partially generated types. Model can callout to tools you define. Session instructions get priority over user prompts. Context is retained during a session. Only available where Apple Intelligence is available. Deep dive into the Foundation Models framework Session throws error when it reaches available context size. Create new session with extract or summary from previous session to provide context. Greedy sampling produces deterministic output. Check for supported languages. @Generable macro defines structured schema for responses. Constrained decoding forces model to return valid tokens for the schema. String properties can use a regex pattern guide. Tool protocol to define functions model can call to access external data. Explore prompt design \u0026 safety for on-device foundation models On-device LLM has ~3-billion parameters, small when compared to cloud based models. May need to break down complex prompts. Avoid maths, code, or tasks requiring real world knowledge. Avoid where facts are critical or provide verified information in prompt. Use prompts like “in a few words” or “in detail” to control output. Provide model with a role. Ask a single, detailed task. Less than five examples in prompt. Use “DO NOT”. Apple designed guardrails to block harmful inputs and throw safety errors. Use instructions to steer model output. Never include user input in instructions. Code-along: Bring on-device AI to your app using the Foundation Models framework See sample code for example of adding Foundation model to generate trip itineraries. Using FoundationModel instrument to profile performance. Discover machine learning \u0026 AI frameworks on Apple platforms Platform tools: Writing Tools, Genmoji. Image Playground. ImageCreator and Foundation Models. ML-API’s: Vision. Natural Language. Translation. Sound Analysis. SpeechAnalyzer. Core ML models. Apple MLX for numerical computing and machine learning. Get started with MLX for Apple silicon MLX open source array framework for Apple silicon. Closely follows numPy. Use from Python, Swift, C++, or C. Explore large language models on Apple silicon with MLX Example of using an M3 Ultra with 512GB unified memory to run latest DeepSeek model. Use Python to load and query LLM’s on-device. Reduce precision by quantizing a model that’s faster to run with reduced memory. Fine tune by training on-device with domain-specific data. MLXSwift to integrate model into Swift code. Dive deeper into writing tools Now on visionOS. Follow-up requests. Rich text with presentation intents. Writing Tools coordinator for custom text engines. Bring advanced speech-to-text to your app with SpeechAnalyzer New API with new speech-to-text model. Faster and more flexible than SFSpeechRecognizer. Supports long-form, conversational, and distant speakers. Live transcription. Private on-device model. Read documents using the Vision framework New API for reading documents. Extract document structure such tables, lists, paragraphs. Identify QR codes, email addresses, phone numbers, URLs. Camera lens smudge detection - prompt user to clean camera lens when dirty. Hand pose detection uses a smaller, modernized model. What’s new in BNNS Graph Basic Neural Network Subroutines, CPU-based inference for tasks like audio or image processing. BNNSGraphBuilder new Swift API to write graphs of operations in Swift. Smaller, real-time and latency-sensitive use cases. App Intents Get to know App Intents Recap of how and why to implement App Intents. App Intents can be added to Swift packages and libraries. Explore new advances in App Intents Interactive snippets. App’s search results show up in image search. NSUserActivities to ask ChatGPT about onscreen content. Conform app entities to IndexedEntity and donate to Spotlight. UndoableIntent protocol. New Intent to work with SwiftUI navigation path. Computed App Entity properties. Develop for Shortcuts and Spotlight with App Intents Access Apple Intelligence models from shortcuts. On-device, private compute cloud, or ChatGPT. Run app actions from Spotlight on Mac. App Services What’s new in Apple Pay Apple Pay dynamic button shows default payment card. Unified preauthorized payments view and notifications. Automatic order tracking, Apple Intelligence detects order and delivery emails in the mail app, converting them to Wallet orders. FinanceKit API now available in UK. Now supports background delivery extension. What’s new in Wallet Poster Event Ticket (iOS 18) now supports multiple upcoming events from one ticket. Boarding passes integrate with Apple’s flight service for updates. New live activity for access to flight information (share via messages). Add passes to wallet automatically (one-time user prompt). Turbocharge your app for CarPlay Message tapbacks, pinned conversations, and compact incoming call UI that doesn’t interrupt navigation. Widgets and Live Activities don’t need CarPlay App (support system small widget). Can exclude CarPlay for game and highly interactive widgets. What’s new in AdAttributionKit Privacy preserving Ad analytics (iOS 17.4). From iOS 18.4, multiple re-engagement campaigns. Configurable attribution window and cooldown period to handle overlapping campaigns. Country code in the postback. Create test postbacks in the iOS Settings app (iOS 18.4). Enhance your app’s multilingual experience Better support for people who are multilingual. Arabizi transliteration keyboard converts latin script to Arabic. Bilingual Arabic-English keyboard. Thai keyboard. Multilingual Siri recommendations. Locale.preferredLanguages may be deprecated, switch to Locale.preferredLocales. Alternate calendars for Gujarati, Marathi, and Korean. Natural selection of bidirectional text (combining LTR and RTL). Writing direction is determined dynamically. Wake up to the AlarmKit API Framework to create alarm based on schedule or countdown. Countdown live activity. Authorization required. Secondary button to run app intent to open app. What’s new in StoreKit and In-App Purchase AppTransaction now includes appTransactionID and originalPlatform. New SubscriptionStatus API. Offer codes now available for consumables, non-consumables, and non-renewing subscriptions. New server APIs require a JSON web signature. New subscription offer view. Meet PaperKit Canvas for drawing and markup elements. Uses by Notes and Journal apps. Now available for macOS Tahoe. System Services Finish tasks in the background New continued processing task. Started by explicit user action, like an export. Has a definite end. Not for routine maintenance, backups, sync. Provide progress updates to the system and an expiration handler. Background GPU access. Supercharge device connectivity with Wi-Fi Aware New in iOS 26, Wi-Fi Aware, cross-platform standard, for direct device-to-device connectivity. Filter and tunnel network traffic with NetworkExtension Use Network Extension to build a VPN app. Use Content Filter API to filter content. In iOS 26, filter on full URL using URL filter. App has no access to traffic. System performs the filtering on behalf of app to maintain privacy. Use structured concurrency with Network framework In iOS and macOS 26 Network framework integrates with Swift concurrency. Declarative syntax to define the protocol stack. Send and receive are async functions. Built-in type, length, value (TLV) framer. Directly send/receive codable types. Network browser to discover devices using Wi-Fi Aware or Bonjour. Optimize home electricity usage with EnergyKit Seems to be US only, provides insights into the local electricity grid so people can reduce or shift usage to take advantage of cheaper/cleaner energy. Discover Apple-Hosted Background Assets On Demand Resources is a legacy technology and will be deprecated, migrate to Background Assets. Apple Developer Program includes 200GB of Apple hosting capacity. Packaging tool to create asset packs. System provides full-featured downloader extension which you can drop into your app. Mock server ships with Xcode so you can test locally. Photos and Camera Enhance your app’s audio recording capabilities In-app input device selection on iOS using new AVKit API. New high quality bluetooth recording option using AirPods. Spatial Audio capture and AudioMix effect. Enhancing your camera experience with capture controls Using device buttons to control camera capture. AirPod clicks to remotely control camera without touching device. Privacy and Security Integrate privacy into your development process Data minimization, on-device processing, transparency and control, protections. What’s new in passkeys New account creation API shows a pre-filled sheet and saves passkey in Passwords app. Synced across devices. New Signal API to tell password manager that user details changed, revoke a passkey, or that a password is no longer needed. Securely transfer passkeys between credential manager apps. Enhance child safety with PermissionKit Uses Family Sharing group to allow child to ask permission from a parent or guardian using Messages. Deliver age-appropriate experiences in your app App Store has finer grained age categories. Parent sets a child’s age range. Declared Age Range framework to confirm a child’s age range. Using age range keeps birth date private. Get ahead with quantum-secure cryptography Harvest now and decrypt later attack requires mitigation now. Quantum secure algorithms are ready for adoption. iMessage already uses quantum secure hybrid encryption. TLS 1.3 has a quantum secure encryption upgrade. Enabled by default in iOS 26. CryptoKit has new secure algorithms. Maps and Location Go further with MapKit New GeoToolbox framework with PlaceDescriptor to find rich data about a place when working with MapKit or other mapping providers. Geocoding now in MapKit deprecating Core Location classes CLGeocoder and CLPlacemark. Cycle directions. Many MapKit APIs now on watchOS. Look Around on MapKitJS. Health and Fitness Meet the HealthKit Medications API New Medications API to read medications data user adds in the Health app. Sample app shows logging of side-effects. Track workouts with HealthKit on iOS and iPadOS Best practises for tracking workouts on iOS. Pair with a heart rate monitor. Access workout data when locked. Siri intent handler to start and stop workouts. App is automatically relaunched on crash, recover active workout. Audio and Video Enhance your app with machine-learning-based video effects New ML-based video-editing effects for Video Toolbox now also available on iOS. Includes frame rate conversion, super resolution and motion blur. Create a seamless mutliview playback experience Playing multiple streams of audio/video, synchronized and unsynchronized using AVFoundation and AVRouting with AirPlay integration. Capture cinema video in your app Cinematic video introduced with iPhone 13 allowing user to rack focus between subjects. New Cinematic Video API to capture cinematic video. Safari and Web What’s new in Safari and WebKit Safari 19 features. CSS scroll-driven animations. Cross document transitions. Anchor layout positioning. Background-clip, shape(), text-wrap: pretty. SVG icons. HDR images. Ogg Opus and Ogg Vorbis. Verify identity documents on the web Online identity verification using digital identity documents. ID’s in Apple Wallet use the mdoc format (US only). W3C Digital Credentials API to request mdocs from Safari and WebKit. Learn more about Declarative Web Push Enhancement of original Web Push to allow notifications to be defined directly in JSON without code. What’s new for the spatial web New HTML Model element, stereoscopic rendering. 180/360-degree or wide field of view spatial video. Website environments in Safari developer preview to provide a virtual environment to website visitors. Spatial Computing Apple continues to extend visionOS: What’s new in visionOS 26 SwiftUI 3D layout modifiers. Presentation from volumes. Render outside app’s bounds. Object Manipulation API. Unified coordinate conversion. RealityKit entities are Observable, directly attach SwiftUI gestures. Spatial Audio Experience API. Persist views in place across restarts. Faster (3x) hand tracking. Support for Sony VR2 and Logitech Muse controllers. Increased memory limits. Render and stream content from a Mac. Nearby Window Sharing in SharePlay apps. Apple Projected Media Profiles. Look to scroll. New Enterpise APIs. What’s new in RealityKit tvOS support. Direct access to ARKit data for anchoring. Pick up and rotate 3D objects and swap hands. Add collision and physics to real world objects. Hide entities behind static real objects. Present 2D images, spatial photos and scenes. Immersive video. Add SwiftUI views directly to entities. Set the scene with SwiftUI in visionOS Windows, volumes, and widgets can lock in place, use scene restoration to bring them back. Default launch behaviour. Snap windows and volumes to physical environment. Stream immersive spaces from macOS to visionOS. Scene Bridging to add SwiftUI volumes and immersive spaces to UIKit or AppKit apps. Meet SwiftUI spatial layout 3D extensions to SwiftUI layout system to build 3D scenes without RealityKit. Most modifiers have a 3D analog. Better together: SwiftUI and RealityKit Load animations from a Model3DAsset. RealityKit entities are now observable. Object Manipulation API works from both SwiftUI or RealityKit. Attach SwiftUI views, gestures, and presentations directly within RealityKit scenes. Unified Coordinate Conversion to convert between RealityKit and SwiftUI. Share visionOS experiences with nearby people Share apps with nearby people in the same space. Participate remotely with FaceTime. Builds on SharePlay. Explore spatial accessory input on visionOS Support for spatial accessories: Sony PlayStation VR2 Sense controller and Logitech Muse. Optimize your custom environments for visionOS Optimizing and baking assets using Houdini procedural tools. Explore video experiences for visionOS Choosing between different video profiles from 2D, 3D, Spatial, 180, 360, Wide and Apple Immersive Video. Blackmagic URSA Cine Immersive camera captures 8160 x 7200 pixels per eye at 90fps. Learn about Apple Immersive Video technologies Apple Immersive Video requires specific cameras like the BlackMagic URSA to capture. How to read, write, and publish immersive videos. New Apple Spatial Audio Format (ASAF) encode with Apple Positional Audio Codec (APAC), playback on all platforms except watchOS. Support immersive video playback in visionOS apps Immersive video playback using QuickLook, AVKit, or RealityKit. Comfort mitigation to detect high motion and reduce immersion. Learn about the Apple Projected Media Profile APMP supports 180, 360, and wide FOV video, can be captured with consumer devices. QuickTime and MP4 file formats. Already supported by Final Cut Pro. Reading, writing, editing, and publishing with Core Media, Video Toolbox, and AVFoundation. Business and Education What’s new in Apple device management and identity Prevent personal Apple Accounts from signing-in to work devices. Migrate between MDM servers. Declarative Device Management extended to Vision Pro and Apple TV. Safari management of bookmarks and homepage. Device reset can now preserve managed apps when wiping user data. Per-app control of app updates. Authenticated Guest mode for shared macs. Tap to login using iPhone or watch. Get to know the ManagedApp Framework New framework for managed deployments. Provide app configuration, provision passwords, certs, and identities. Works with single sign-on, and device attestation. Explore enhancements to your spatial business app Enterprise APIs for in-house visionOS apps. External video and Neural Engine access no longer needs enterprise license. Vision Entitlement Services to check licenses and entitlements. Window follow mode. New ARKit enterprise API to share coordinate spaces. Protected content API to prevent screen captures and sharing. CameraRegionView for dedicated view of specific area you want to watch. Metal and Games Metal 4 is supported on the M1 and A14 Bionic or later: Discover Metal 4 Explore Metal 4 games Go further with Metal 4 games Level up your games Combine Metal 4 machine learning and graphics What’s new in Metal rendering for immersive apps Apple Games Get started with Game Center Use GameKit bundle in Xcode to configure Game Center features. Allows testing of achievements and leaderboards in Xcode. New features for Challenges and Activities. Engage players with the Apple Games app New Games app pre-installed on devices. Any Apps with the Games category show up in the app. Includes Apple Arcade and Game Center in a dedicated games app to make it easier to discover games. Bring your SceneKit project to RealityKit SceneKit is soft-deprecated. SceneKit apps continue to work but framework is in maintenance mode and not recommended. New apps and significant updates should use RealityKit. Differences and ways to port SceneKit apps to RealityKit.",
  "image": "https://useyourloaf.com/blog/wwdc-2025-viewing-guide/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eMy WWDC 2025 viewing guide to help you plan the sessions you want to watch.\u003c/p\u003e\n\u003ch3 id=\"where-do-i-start\"\u003eWhere Do I Start?\u003c/h3\u003e\n\u003cp\u003eThe two big themes for the year are Liquid Glass design and Apple Intelligence. Start by watching the \u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/102/\"\u003ePlatforms State of the Union (SOTU)\u003c/a\u003e for a summary of what’s new this year.\u003c/p\u003e\n\u003ch3 id=\"you-dont-have-to-learn-everything-new-today\"\u003eYou don’t have to learn everything new today!\u003c/h3\u003e\n\u003cp\u003eThere are over 100 sessions and a lot of new stuff to learn. You may feel like you’re getting left behind. Don’t let it overwhelm you. You’ve got time.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDon’t burn yourself out trying to keep up.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"watching-the-sessions\"\u003eWatching The Sessions\u003c/h3\u003e\n\u003cp\u003eI watch the videos using the \u003cstrong\u003eApple Developer app\u003c/strong\u003e. It’s available on macOS and iOS. The video player supports from 0.5x to 2x playback, most videos have transcripts, some have summaries, and allow copying of the onscreen \u003ca href=\"https://developer.apple.com/sample-code/wwdc/2025/\"\u003esample code\u003c/a\u003e. You can also watch on \u003ca href=\"https://www.youtube.com/@AppleDeveloper\"\u003eYouTube\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are a lot of sessions, but many are short (10-20 minutes). There’s no padding and Apple’s engineers get to the point quickly.\u003c/p\u003e\n\u003ch3 id=\"swift\"\u003eSwift\u003c/h3\u003e\n\u003cp\u003eSwift 6.2 is here with some updates to ease the pain of adopting Swift Concurrency:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/245\"\u003eWhat’s new in Swift\u003c/a\u003e\nInstall toolchains with Swiftly. Faster clean builds for macros with pre-built swift-syntax dependencies. Finer controls for compiler diagnostics/warnings. Concrete notification types. New Observation type for tracking changes. Testing attachments and exit tests. InlineArray and Span types. Swift 6.2 is single-threaded by default. Opt-in to infer main actor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/312\"\u003eImprove memory usage and perforamce with Swift\u003c/a\u003e Profile a test to find performance issues. Just because it’s shorter, doesn’t mean it’s faster. Reduce allocations and copying. Exclusivity checks. InlineArray fixed size array. Span types to work with contiguous memory. Swift Binary Parsing library.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eThese Swift Concurrency sessions are essential viewing\u003c/strong\u003e. This seems like a better Concurrency approach:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/268\"\u003eEmbracing Swift concurrency\u003c/a\u003e \u003cstrong\u003eStart by running code on the main thread. Introduce concurrency as you need it.\u003c/strong\u003e Swift 6.2 allows a module to default to main-actor isolation. Use async tasks to await for data. Interleaving - single thread alternating between tasks. Run code on a background thread by marking method with @concurrent. Use nonisolated for library API and let client decide. Actors to move data off main thread. \u003cstrong\u003eEnable Approachable Concurrency and Default Actor Isolation build settings.\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/270\"\u003eCode-along: Elevate an app with Swift concurrency\u003c/a\u003e Transform a single-threaded app to use concurrency as needed.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/266\"\u003eExplore concurrency in SwiftUI\u003c/a\u003e SwiftUI views are isolated to the main actor. Tasks in the view run on the main actor. Find the boundaries between your UI code and non-UI code. \u003cstrong\u003eDefault actor isolation setting removes need for most @MainActor annotations.\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInteroperability with C, C++, and Java:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/311\"\u003eSafely mix C, C++, and Swift\u003c/a\u003e Strict memory safety build setting, off by default. Annotate C and C++ functions and types so Swift can use them safely.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/307\"\u003eExplore Swift and Java interoperability\u003c/a\u003e Incremental adoption of Swift by mixing Swift and Java code. Calling Swift from Java or vice-versa.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/346\"\u003eMeet Containerization\u003c/a\u003e Open source Swift framework to create and run Linux containers on macOS.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"swiftui\"\u003eSwiftUI\u003c/h3\u003e\n\u003cp\u003eThere’s work to be done updating apps for the new design:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/256\"\u003eWhat’s new in SwiftUI\u003c/a\u003e Recompile for new liquid glass design. Toolbar spacer API. Glass effect. iPadOS menu bar using commands API. Large lists on macOS load 6x faster. New SwiftUI performance instrument. New Animatable macro. Scene bridging to UIKit and AppKit. AssistiveAccess scene type. WebView. 3D charts. New drag and drop API. Rich text editor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/323\"\u003eBuild a SwiftUI app with the new design\u003c/a\u003e Liquid glass design system. Extend views outside the safe area with BackgroundExtensionEffect. Sidebars, toolbars, and tab bars float above content. Remove custom presentation backgrounds. Toolbar spacer API splits items into groups. Search at bottom on iPhone. Slider tick marks. GlassEffectContainer for custom controls.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/280\"\u003eCode-along: Cook up a rich text experience in SwiftUI with AttributedString\u003c/a\u003e TextEditor supports rich text when bound to an attributed string.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/313\"\u003eBring Swift Charts to the third dimension\u003c/a\u003e Support for 3D charts. PointMark, RuleMark, and RectangleMark take a Z value. Use gestures to rotate the chart. SurfacePlot is a 3D extension to LinePlot. Two camera projections.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/231\"\u003eMeet WebKit for SwiftUI\u003c/a\u003e New WebView API to load and display web pages. WebPage is Observable. URLSchemeHandler for custom URLs to load content bundled with App. New Observations API in Swift 6.2 to respond to navigation events. Directly evaluate Javascript. Supports look to scroll on VisionOS. Find-in-page support.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"uikit\"\u003eUIKit\u003c/h3\u003e\n\u003cp\u003eUIKit is not going away and continues to get useful updates:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/243\"\u003eWhat’s new in UIKit\u003c/a\u003e New design system. UISplitViewController support for inspectors and resizable columns. iPadOS menu bar. Menu bars no longer supported in storyboards. Swift Observable to invalidate and update views. Back-deploys to iOS 18. updateProperties() called before layoutSubviews. Support for SwiftUI scene lifecycle, deprecating app delegate callbacks. SF Symbols new effects.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/284\"\u003eBuild a UIKit app with the new design\u003c/a\u003e UIKit components have been updated with Liquid Glass. Tab bar floats above content. Set desired direction when it minimizes on scroll. Extend background behind sidebars. Toolbars visually group items. Navigation item subtitle. Remove custom backgrounds from navigation, toolbars, and sheets. Search bar placement. Search as a dedicated view. Control sizes are larger. UIGlassEffect.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ipados\"\u003eiPadOS\u003c/h3\u003e\n\u003cp\u003eA good year for iPadOS bringing macOS style windowing and menu bars to the platform:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/282\"\u003eMake your UIKit app more flexible\u003c/a\u003e Best practises to make your app adapt across sizes and platforms. \u003cstrong\u003eAdopt UIScene life cycle - mandatory in next major release.\u003c/strong\u003e New trait to determine if parent split view is collapsed. Split view support for Inspector column. \u003cstrong\u003eUISceneSizeRestrictions to set preferred minimum size.\u003c/strong\u003e Scenes on iPadOS have macOS style window controls. Use layout guide to keep content clear. \u003cstrong\u003eUIRequiresFullScreen is deprecated and will be ignored in a future release.\u003c/strong\u003e Apps will no longer be scaled for new screen sizes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"appkit\"\u003eAppKit\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/310\"\u003eBuild an AppKit app with the new design\u003c/a\u003e Rebuild with Xcode 26 to get the Liquid Glass design. Use NSSplitViewController for new glass sidebar, removing any visual effects from sidebar. NSBackgroundExtensionView to mirror and extend content. New larger control sizes and corner radius. Add icons to menu items.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"watchos\"\u003ewatchOS\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/334\"\u003eWhat’s new in watchOS 26\u003c/a\u003e New toolbar and control styles. Use Icon Composer to update your icon. The arm64 architecture is used by Series 9 and later, and Ultra 2 devices. WidgetKit controls in control center, smart stack, or action button. Widgets now configurable. RelevanceKit to suggest widgets in smart stack. Push updates to widgets using APNs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"developer-tools\"\u003eDeveloper Tools\u003c/h3\u003e\n\u003cp\u003eXcode gets LLM-based coding assistants:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/247\"\u003eWhat’s new in Xcode 26\u003c/a\u003e Xcode is 24% smaller, no Intel simulator runtimes by default. New tab start page. Pin tabs. Multi-word search. Swift Mode for Voice Control. Playground macro work likes Preview to iterate on code. Type safe Swift symbols for localized strings with auto-generated comments. \u003cstrong\u003eCoding assist using ChatGPT and other third-party LLM’s (needs macOS Tahoe).\u003c/strong\u003e Debugger now follows execution into async tasks. Metrics recommendations. Explicitly Built Modules now the default. Enhanced Security capability. XCTHitchMetric.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"icon-composer\"\u003eIcon Composer\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/361\"\u003eCreate icons with Icon Composer\u003c/a\u003e New tool to build icons for all platforms in a single file. Start in preferred design tool then export layers for Icon Composer. Add .icon file direct to Xcode project.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"instruments\"\u003eInstruments\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/226\"\u003eProfile and optimize power usage in your app\u003c/a\u003e Power Profiler in Instruments. Also available on-device in Developer mode.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/308\"\u003eOptimize CPU performance with Instruments\u003c/a\u003e Processor Trace collects complete trace, avoiding sampling bias. Requires M4 or A18. Enable developer setting on device. CPU Counters instrument to find code bottlenecks.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/306\"\u003eOptimize SwiftUI performance with Instruments\u003c/a\u003e \u003cstrong\u003eInteresting new instrument to find performance issues with SwiftUI.\u003c/strong\u003e Use Cause \u0026amp; Effect graph to understand dependencies including Observables and the Environment that might be causing view updates.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"localization\"\u003eLocalization\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/225\"\u003eCode-along: Explore localization with Xcode\u003c/a\u003e Walk-through localizing an App with String Catalogs. Automatic comment generation using on-device model. New #Bundle macro to refer to resource bundle of current target. Xcode generated symbol names from key/value, enabled by default for new projects. Refactor to convert strings to symbols.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"testing\"\u003eTesting\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/344\"\u003eRecord, replay, and review: UI automation with Xcode\u003c/a\u003e Coding Assistant can add accessibilityIdentifiers to relevant parts of view. New code generation system for UI test recording.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"swiftdata\"\u003eSwiftData\u003c/h3\u003e\n\u003cp\u003eNo Core Data sessions this year and only a small update to SwiftData. Not sure anyone was asking for inheritance:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/291\"\u003eSwiftData: Dive into inheritance and schema migration\u003c/a\u003e Class inheritance for models. Use for IS-A relationships when you need deep and shallow searches (queries for both root class and subclass). \u003cstrong\u003eNew sortBy property on HistoryDescriptor to fetch history in order.\u003c/strong\u003e Example of using history tracking to update context for remote changes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"widgetkit\"\u003eWidgetKit\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/278\"\u003eWhat’s new in widgets\u003c/a\u003e Adjust existing widgets for clear glass or accented tint presentation. Widgets now on visionOS 26. Can be elevated or recessed into surface. Fixed in space, adapt based on distance of viewer. Widgets and Live Activities on CarPlay. Live Activities on a paired iPhone now appear on macOS Tahoe menu bar. Controls on macOS and watchOS. Widget push updates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"design\"\u003eDesign\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eThe Liquid Glass sessions are essential viewing this year:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/219\"\u003eMeet Liquid Glass\u003c/a\u003e Liquid Glass lensing bends and shapes light. Adapts to ensure legibility and separate controls from content. Best reserved for navigation layer that floats above content. Do not stack Liquid Glass. Only tint to emphasise primary elements and actions. Reduced Transparency makes Liquid Glass frostier.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/356\"\u003eGet to know the new design system\u003c/a\u003e Adjusted System colors for Liquid Glass. Alert Text is left-aligned. Concentricity aligns radii so shapes nest. Larger controls use capsule shapes. Sheets spring from an action source. Remove custom backgrounds from controls. Primary action stays separate and tinted. Hard scroll edge effect on macOS for stronger boundary. Bars rely more on symbols, see HIG for glyphs for common actions.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/359\"\u003eDesign foundations from idea to interface\u003c/a\u003e Start with app structure. Where am I? What can I do? Where can I go from here? Use toolbar for screen specific actions. Progressive disclosure. Group by time, progress or patterns. Use a cohesive visual style. Design is never really finished.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/404\"\u003eMake a big impact with small writing changes\u003c/a\u003e Simplify. Too many filler adverbs and adjectives. Does each word add value. Don’t apologise for errors. Avoid repetition. Lead with the why (move the benefit to the front). Word list to track terms with use/don’t use and definition. Read your writing out loud.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/316\"\u003ePrinciples of inclusive app design\u003c/a\u003e One in seven people have a disability. Vision. Hearing. Motor. Speech. Cognitive. Inclusive design is better for everyone. Involve members of the disability community in your design. Test with VoiceOver and Switch Control.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/337\"\u003eWhat’s new in SF Symbols 7\u003c/a\u003e Draw path animation inspired by handwriting. Symbol gradients. Annotate custom symbols with path to draw.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/220\"\u003eSay hello to the new look of app icons\u003c/a\u003e Liquid glass material layers. Monochrome, light, and dark tint, translucent appearance modes. Rounder corner radius. \u003cstrong\u003emacOS icons no longer extend outside the shape\u003c/strong\u003e. Layers \u0026amp; translucency. Use softer light-to-dark gradients for backgrounds. Use System Light and System Dark for white or black backgrounds.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/281\"\u003eDesign interactive snippets\u003c/a\u003e Compact views displayed from App Intents in Siri, Spotlight, and Shortcuts. Quick, in-moment experiences. Easy to read with larger type, concise, clear contrast. Buttons for interaction. Result and confirmation snippets.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePlatform specific sessions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/208\"\u003eElevate the design of your iPad app\u003c/a\u003e Consider starting with a tab bar. Extend content around navigation. New windowing system with new controls. Apps not yet updated for iOS 26 show controls in safe area. Create a new window for each document. Name your windows. New pointer shape. Menu bar on top edge of iPad.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/255\"\u003eDesign widgets for visionOS\u003c/a\u003e Three dimensional objects. Compatibility mode for existing iPadOS widgets. Widgets persist in location and are fixed in size. Adapt with user proximity. Paper or glass styles. Elevated or recessed mounting styles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/303\"\u003eDesign hover interactions for visionOS\u003c/a\u003e Custom hover effects. Look to scroll. Starts when user looks at edge of scroll view. Opt-in, enable when view is primarily for reading or browsing. Persistent controls stay visible while you look at them.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"accessibility\"\u003eAccessibility\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/224\"\u003eEvaluate your app for Accessibility Nutrition Labels\u003c/a\u003e \u003cstrong\u003eShow which accessibility features you support in App Store Connect.\u003c/strong\u003e Contrast. Dark interface. Larger text. Color. Captions. Reduced Motion. VoiceOver.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/229\"\u003eMake your Mac app more accessible to everyone\u003c/a\u003e Group accessibility items into containers for faster navigation with VoiceOver. Merge label and buttons. Rotors to define collections of views. In macOS 26 can suggest initial focus for VoiceOver. Add keyboard shortcuts.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/238\"\u003eCustomize your app for Assistive Access\u003c/a\u003e Streamlined experience for people with cognitive disabilities. Create an assistive access scene. Set UISupportsAssistiveAccess in Info.plist. Keep to essential features. Icons are supported in the navigation bar.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"app-store-and-distribution\"\u003eApp Store and Distribution\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/328\"\u003eWhat’s new in App Store Connect\u003c/a\u003e Upload builds with App Store Connect API later this year. Can reuse a build number if upload fails. \u003cstrong\u003eApple-hosted background assets (up to 200GB).\u003c/strong\u003e TestFlight feedback now in App Store Connect app. \u003cstrong\u003eApp Store Tags generated by Apple’s LLM (human reviewed) you can deselect unwanted tags.\u003c/strong\u003e Keywords for custom product pages. Offer codes for consumables, non-consumables and non-renewing subscriptions. Review summaries. New age ratings. Accessibility Nutrition Labels. Over 100 new App Analytics metrics.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/324\"\u003eAutomate your development process with the App Store Connect API\u003c/a\u003e Build upload API and Feedback API. Webhook notifcations API. Apple-Hosted Background Assets API.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/249\"\u003eDive into App Store server APIs for In-App Purchase\u003c/a\u003e App transaction ID added to AppTransaction. Unique ID for each Apple Account per app use to associate customer account with all transactions. Signing requests all use JWS signature format. New Send Consumption Information endpoint when responding to refunds.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/252\"\u003eOptimize your monetization with App Analytics\u003c/a\u003e New App Analytics home. Expanded filtering and over 100 new metrics. New monetization section.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"machine-learning-and-apple-intelligence\"\u003eMachine Learning and Apple Intelligence\u003c/h3\u003e\n\u003cp\u003eAn API to access an on-device Large Language Model (LLM) was high on everyone’s wish list:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/286\"\u003eMeet the Foundation Models framework\u003c/a\u003e \u003cstrong\u003eAPI access to Apple’s LLM.\u003c/strong\u003e On-device so data stays private and can run offline. Experiment with prompts using the new Playground feature in Xcode. \u003cstrong\u003eOn-device model not intended for world knowledge or advanced reasoning.\u003c/strong\u003e Adapters for common tasks. Use @Generable and @Guide to define Swift type that models returns. Streams partially generated types. \u003cstrong\u003eModel can callout to tools you define.\u003c/strong\u003e Session instructions get priority over user prompts. Context is retained during a session. \u003cstrong\u003eOnly available where Apple Intelligence is available.\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/301\"\u003eDeep dive into the Foundation Models framework\u003c/a\u003e Session throws error when it reaches available context size. Create new session with extract or summary from previous session to provide context. Greedy sampling produces deterministic output. Check for supported languages. @Generable macro defines structured schema for responses. Constrained decoding forces model to return valid tokens for the schema. String properties can use a regex pattern guide. Tool protocol to define functions model can call to access external data.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/248\"\u003eExplore prompt design \u0026amp; safety for on-device foundation models\u003c/a\u003e \u003cstrong\u003eOn-device LLM has ~3-billion parameters, small when compared to cloud based models.\u003c/strong\u003e May need to break down complex prompts. Avoid maths, code, or tasks requiring real world knowledge. \u003cstrong\u003eAvoid where facts are critical or provide verified information in prompt.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eUse prompts like “in a few words” or “in detail” to control output. Provide model with a role. Ask a single, detailed task. Less than five examples in prompt. Use “DO NOT”. Apple designed guardrails to block harmful inputs and throw safety errors. Use instructions to steer model output. Never include user input in instructions.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/259\"\u003eCode-along: Bring on-device AI to your app using the Foundation Models framework\u003c/a\u003e See sample code for example of adding Foundation model to generate trip itineraries. Using FoundationModel instrument to profile performance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/360\"\u003eDiscover machine learning \u0026amp; AI frameworks on Apple platforms\u003c/a\u003e Platform tools: Writing Tools, Genmoji. Image Playground. ImageCreator and Foundation Models. ML-API’s: Vision. Natural Language. Translation. Sound Analysis. SpeechAnalyzer. Core ML models. Apple MLX for numerical computing and machine learning.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/315\"\u003eGet started with MLX for Apple silicon\u003c/a\u003e MLX open source array framework for Apple silicon. Closely follows numPy. Use from Python, Swift, C++, or C.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/298\"\u003eExplore large language models on Apple silicon with MLX\u003c/a\u003e Example of using an M3 Ultra with 512GB unified memory to run latest DeepSeek model. Use Python to load and query LLM’s on-device. Reduce precision by quantizing a model that’s faster to run with reduced memory. Fine tune by training on-device with domain-specific data. MLXSwift to integrate model into Swift code.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/265\"\u003eDive deeper into writing tools\u003c/a\u003e Now on visionOS.  Follow-up requests. Rich text with presentation intents. Writing Tools coordinator for custom text engines.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/277\"\u003eBring advanced speech-to-text to your app with SpeechAnalyzer\u003c/a\u003e New API with \u003cstrong\u003enew speech-to-text model\u003c/strong\u003e. Faster and more flexible than SFSpeechRecognizer. Supports long-form, conversational, and distant speakers. Live transcription. Private on-device model.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/272\"\u003eRead documents using the Vision framework\u003c/a\u003e New API for reading documents. Extract document structure such tables, lists, paragraphs. Identify QR codes, email addresses, phone numbers, URLs. Camera lens smudge detection - prompt user to clean camera lens when dirty. Hand pose detection uses a smaller, modernized model.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/276\"\u003eWhat’s new in BNNS Graph\u003c/a\u003e Basic Neural Network Subroutines, CPU-based inference for tasks like audio or image processing. BNNSGraphBuilder new Swift API to write graphs of operations in Swift. Smaller, real-time and latency-sensitive use cases.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"app-intents\"\u003eApp Intents\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/244\"\u003eGet to know App Intents\u003c/a\u003e Recap of how and why to implement App Intents. App Intents can be added to Swift packages and libraries.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/275\"\u003eExplore new advances in App Intents\u003c/a\u003e Interactive snippets. App’s search results show up in image search. NSUserActivities to ask ChatGPT about onscreen content. Conform app entities to IndexedEntity and donate to Spotlight. UndoableIntent protocol. New Intent to work with SwiftUI navigation path. Computed App Entity properties.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/260\"\u003eDevelop for Shortcuts and Spotlight with App Intents\u003c/a\u003e \u003cstrong\u003eAccess Apple Intelligence models from shortcuts.\u003c/strong\u003e On-device, private compute cloud, or ChatGPT. Run app actions from Spotlight on Mac.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"app-services\"\u003eApp Services\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/201\"\u003eWhat’s new in Apple Pay\u003c/a\u003e Apple Pay dynamic button shows default payment card. Unified preauthorized payments view and notifications. Automatic order tracking, \u003cstrong\u003eApple Intelligence detects order and delivery emails in the mail app\u003c/strong\u003e, converting them to Wallet orders. \u003cstrong\u003eFinanceKit API now available in UK.\u003c/strong\u003e Now supports background delivery extension.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/202\"\u003eWhat’s new in Wallet\u003c/a\u003e Poster Event Ticket (iOS 18) now supports multiple upcoming events from one ticket. \u003cstrong\u003eBoarding passes integrate with Apple’s flight service for updates.\u003c/strong\u003e New live activity for access to flight information (share via messages). Add passes to wallet automatically (one-time user prompt).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/216\"\u003eTurbocharge your app for CarPlay\u003c/a\u003e Message tapbacks, pinned conversations, and \u003cstrong\u003ecompact incoming call UI\u003c/strong\u003e that doesn’t interrupt navigation. Widgets and Live Activities don’t need CarPlay App (support system small widget). Can exclude CarPlay for game and highly interactive widgets.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/221\"\u003eWhat’s new in AdAttributionKit\u003c/a\u003e Privacy preserving Ad analytics (iOS 17.4). From iOS 18.4, multiple re-engagement campaigns. Configurable attribution window and cooldown period to handle overlapping campaigns. Country code in the postback. Create test postbacks in the iOS Settings app (iOS 18.4).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/222\"\u003eEnhance your app’s multilingual experience\u003c/a\u003e Better support for people who are multilingual. Arabizi transliteration keyboard converts latin script to Arabic. Bilingual Arabic-English keyboard. Thai keyboard. Multilingual Siri recommendations. \u003cstrong\u003eLocale.preferredLanguages may be deprecated, switch to Locale.preferredLocales.\u003c/strong\u003e Alternate calendars for Gujarati, Marathi, and Korean. Natural selection of bidirectional text (combining LTR and RTL). Writing direction is determined dynamically.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/230\"\u003eWake up to the AlarmKit API\u003c/a\u003e Framework to create alarm based on schedule or countdown. Countdown live activity. Authorization required. Secondary button to run app intent to open app.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/241\"\u003eWhat’s new in StoreKit and In-App Purchase\u003c/a\u003e AppTransaction now includes appTransactionID and originalPlatform. New SubscriptionStatus API. Offer codes now available for consumables, non-consumables, and non-renewing subscriptions. New server APIs require a JSON web signature. New subscription offer view.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/285\"\u003eMeet PaperKit\u003c/a\u003e Canvas for drawing and markup elements. Uses by Notes and Journal apps. Now available for macOS Tahoe.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"system-services\"\u003eSystem Services\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/227\"\u003eFinish tasks in the background\u003c/a\u003e \u003cstrong\u003eNew continued processing task\u003c/strong\u003e. Started by explicit user action, like an export. Has a definite end. Not for routine maintenance, backups, sync. Provide progress updates to the system and an expiration handler. Background GPU access.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/228\"\u003eSupercharge device connectivity with Wi-Fi Aware\u003c/a\u003e New in iOS 26, Wi-Fi Aware, cross-platform standard, for direct device-to-device connectivity.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/234\"\u003eFilter and tunnel network traffic with NetworkExtension\u003c/a\u003e Use Network Extension to build a VPN app. Use Content Filter API to filter content. In iOS 26, filter on full URL using URL filter. App has no access to traffic. System performs the filtering on behalf of app to maintain privacy.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/250\"\u003eUse structured concurrency with Network framework\u003c/a\u003e In iOS and macOS 26 \u003cstrong\u003eNetwork framework integrates with Swift concurrency\u003c/strong\u003e. Declarative syntax to define the protocol stack. Send and receive are async functions. Built-in type, length, value (TLV) framer. Directly send/receive codable types. Network browser to discover devices using Wi-Fi Aware or Bonjour.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/257\"\u003eOptimize home electricity usage with EnergyKit\u003c/a\u003e Seems to be US only, provides insights into the local electricity grid so people can reduce or shift usage to take advantage of cheaper/cleaner energy.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/325\"\u003eDiscover Apple-Hosted Background Assets\u003c/a\u003e \u003cstrong\u003eOn Demand Resources is a legacy technology and will be deprecated, migrate to Background Assets.\u003c/strong\u003e Apple Developer Program includes 200GB of Apple hosting capacity. Packaging tool to create asset packs. System provides full-featured downloader extension which you can drop into your app. Mock server ships with Xcode so you can test locally.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"photos-and-camera\"\u003ePhotos and Camera\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/251\"\u003eEnhance your app’s audio recording capabilities\u003c/a\u003e \u003cstrong\u003eIn-app input device selection on iOS using new AVKit API.\u003c/strong\u003e New high quality bluetooth recording option using AirPods. Spatial Audio capture and AudioMix effect.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/253\"\u003eEnhancing your camera experience with capture controls\u003c/a\u003e Using device buttons to control camera capture. \u003cstrong\u003eAirPod clicks to remotely control camera without touching device.\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"privacy-and-security\"\u003ePrivacy and Security\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/246\"\u003eIntegrate privacy into your development process\u003c/a\u003e Data minimization, on-device processing, transparency and control, protections.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/279\"\u003eWhat’s new in passkeys\u003c/a\u003e New account creation API shows a pre-filled sheet and saves passkey in Passwords app. Synced across devices. New Signal API to tell password manager that user details changed, revoke a passkey, or that a password is no longer needed. \u003cstrong\u003eSecurely transfer passkeys between credential manager apps.\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/293\"\u003eEnhance child safety with PermissionKit\u003c/a\u003e Uses Family Sharing group to allow child to ask permission from a parent or guardian using Messages.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/299\"\u003eDeliver age-appropriate experiences in your app\u003c/a\u003e App Store has finer grained age categories. Parent sets a child’s age range. Declared Age Range framework to confirm a child’s age range. Using age range keeps birth date private.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/314\"\u003eGet ahead with quantum-secure cryptography\u003c/a\u003e Harvest now and decrypt later attack requires mitigation now. Quantum secure algorithms are ready for adoption. iMessage already uses quantum secure hybrid encryption. TLS 1.3 has a quantum secure encryption upgrade. Enabled by default in iOS 26. CryptoKit has new secure algorithms.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"maps-and-location\"\u003eMaps and Location\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/204\"\u003eGo further with MapKit\u003c/a\u003e New GeoToolbox framework with PlaceDescriptor to find rich data about a place when working with MapKit or other mapping providers. \u003cstrong\u003eGeocoding now in MapKit deprecating Core Location classes CLGeocoder and CLPlacemark\u003c/strong\u003e. Cycle directions. Many MapKit APIs now on watchOS. Look Around on MapKitJS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"health-and-fitness\"\u003eHealth and Fitness\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/321\"\u003eMeet the HealthKit Medications API\u003c/a\u003e \u003cstrong\u003eNew Medications API to read medications data user adds in the Health app.\u003c/strong\u003e Sample app shows logging of side-effects.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/322\"\u003eTrack workouts with HealthKit on iOS and iPadOS\u003c/a\u003e Best practises for tracking workouts on iOS. Pair with a heart rate monitor. Access workout data when locked. Siri intent handler to start and stop workouts. App is automatically relaunched on crash, recover active workout.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"audio-and-video\"\u003eAudio and Video\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/300\"\u003eEnhance your app with machine-learning-based video effects\u003c/a\u003e New ML-based video-editing effects for Video Toolbox now also available on iOS. Includes frame rate conversion, super resolution and motion blur.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/302\"\u003eCreate a seamless mutliview playback experience\u003c/a\u003e Playing multiple streams of audio/video, synchronized and unsynchronized using AVFoundation and AVRouting with AirPlay integration.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/319\"\u003eCapture cinema video in your app\u003c/a\u003e Cinematic video introduced with iPhone 13 allowing user to rack focus between subjects. New Cinematic Video API to capture cinematic video.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"safari-and-web\"\u003eSafari and Web\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/233\"\u003eWhat’s new in Safari and WebKit\u003c/a\u003e Safari 19 features. CSS scroll-driven animations. Cross document transitions. Anchor layout positioning. Background-clip, shape(), text-wrap: pretty. SVG icons. HDR images. Ogg Opus and Ogg Vorbis.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/232\"\u003eVerify identity documents on the web\u003c/a\u003e Online identity verification using digital identity documents. ID’s in Apple Wallet use the mdoc format (US only). W3C Digital Credentials API to request mdocs from Safari and WebKit.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/235\"\u003eLearn more about Declarative Web Push\u003c/a\u003e Enhancement of original Web Push to allow notifications to be defined directly in JSON without code.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/237\"\u003eWhat’s new for the spatial web\u003c/a\u003e New HTML Model element, stereoscopic rendering. 180/360-degree or wide field of view spatial video. Website environments in Safari developer preview to provide a virtual environment to website visitors.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"spatial-computing\"\u003eSpatial Computing\u003c/h3\u003e\n\u003cp\u003eApple continues to extend visionOS:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/317\"\u003eWhat’s new in visionOS 26\u003c/a\u003e SwiftUI 3D layout modifiers. Presentation from volumes. Render outside app’s bounds. Object Manipulation API. Unified coordinate conversion. \u003cstrong\u003eRealityKit entities are Observable, directly attach SwiftUI gestures.\u003c/strong\u003e Spatial Audio Experience API. Persist views in place across restarts. Faster (3x) hand tracking. \u003cstrong\u003eSupport for Sony VR2 and Logitech Muse controllers.\u003c/strong\u003e Increased memory limits. \u003cstrong\u003eRender and stream content from a Mac.\u003c/strong\u003e Nearby Window Sharing in SharePlay apps. Apple Projected Media Profiles. Look to scroll. New Enterpise APIs.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/287\"\u003eWhat’s new in RealityKit\u003c/a\u003e tvOS support. Direct access to ARKit data for anchoring. Pick up and rotate 3D objects and swap hands. Add collision and physics to real world objects. Hide entities behind static real objects. Present 2D images, spatial photos and scenes. Immersive video. Add SwiftUI views directly to entities.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/290\"\u003eSet the scene with SwiftUI in visionOS\u003c/a\u003e Windows, volumes, and widgets can lock in place, use scene restoration to bring them back. Default launch behaviour. Snap windows and volumes to physical environment. Stream immersive spaces from macOS to visionOS. Scene Bridging to add SwiftUI volumes and immersive spaces to UIKit or AppKit apps.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/273\"\u003eMeet SwiftUI spatial layout\u003c/a\u003e \u003cstrong\u003e3D extensions to SwiftUI layout system to build 3D scenes without RealityKit\u003c/strong\u003e. Most modifiers have a 3D analog.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/274\"\u003eBetter together: SwiftUI and RealityKit\u003c/a\u003e Load animations from a Model3DAsset. RealityKit entities are now observable. Object Manipulation API works from both SwiftUI or RealityKit. Attach SwiftUI views, gestures, and presentations directly within RealityKit scenes. Unified Coordinate Conversion to convert between RealityKit and SwiftUI.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/318\"\u003eShare visionOS experiences with nearby people\u003c/a\u003e Share apps with nearby people in the same space. Participate remotely with FaceTime. Builds on SharePlay.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/289\"\u003eExplore spatial accessory input on visionOS\u003c/a\u003e Support for spatial accessories: Sony PlayStation VR2 Sense controller and Logitech Muse.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/305\"\u003eOptimize your custom environments for visionOS\u003c/a\u003e Optimizing and baking assets using Houdini procedural tools.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/304\"\u003eExplore video experiences for visionOS\u003c/a\u003e Choosing between different video profiles from 2D, 3D, Spatial, 180, 360, Wide and Apple Immersive Video. Blackmagic URSA Cine Immersive camera captures 8160 x 7200 pixels per eye at 90fps.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/403\"\u003eLearn about Apple Immersive Video technologies\u003c/a\u003e Apple Immersive Video requires specific cameras like the BlackMagic URSA to capture. How to read, write, and publish immersive videos. New Apple Spatial Audio Format (ASAF) encode with Apple Positional Audio Codec (APAC), playback on all platforms except watchOS.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/296\"\u003eSupport immersive video playback in visionOS apps\u003c/a\u003e Immersive video playback using QuickLook, AVKit, or RealityKit. Comfort mitigation to detect high motion and reduce immersion.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/297\"\u003eLearn about the Apple Projected Media Profile\u003c/a\u003e APMP supports 180, 360, and wide FOV video, can be captured with consumer devices. QuickTime and MP4 file formats. Already supported by Final Cut Pro. Reading, writing, editing, and publishing with Core Media, Video Toolbox, and AVFoundation.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"business-and-education\"\u003eBusiness and Education\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/258\"\u003eWhat’s new in Apple device management and identity\u003c/a\u003e Prevent personal Apple Accounts from signing-in to work devices. Migrate between MDM servers. Declarative Device Management extended to Vision Pro and Apple TV. Safari management of bookmarks and homepage. Device reset can now preserve managed apps when wiping user data. Per-app control of app updates. Authenticated Guest mode for shared macs. Tap to login using iPhone or watch.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/203\"\u003eGet to know the ManagedApp Framework\u003c/a\u003e New framework for managed deployments. Provide app configuration, provision passwords, certs, and identities. Works with single sign-on, and device attestation.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/223\"\u003eExplore enhancements to your spatial business app\u003c/a\u003e Enterprise APIs for in-house visionOS apps. External video and Neural Engine access no longer needs enterprise license. Vision Entitlement Services to check licenses and entitlements. Window follow mode. New ARKit enterprise API to share coordinate spaces. Protected content API to prevent screen captures and sharing. CameraRegionView for dedicated view of specific area you want to watch.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"metal-and-games\"\u003eMetal and Games\u003c/h3\u003e\n\u003cp\u003eMetal 4 is supported on the M1 and A14 Bionic or later:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/205\"\u003eDiscover Metal 4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/254\"\u003eExplore Metal 4 games\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/211\"\u003eGo further with Metal 4 games\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/209\"\u003eLevel up your games\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/262\"\u003eCombine Metal 4 machine learning and graphics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/294\"\u003eWhat’s new in Metal rendering for immersive apps\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"apple-games\"\u003eApple Games\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/214\"\u003eGet started with Game Center\u003c/a\u003e Use GameKit bundle in Xcode to configure Game Center features. Allows testing of achievements and leaderboards in Xcode. New features for Challenges and Activities.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/215\"\u003eEngage players with the Apple Games app\u003c/a\u003e New Games app pre-installed on devices. Any Apps with the Games category show up in the app. Includes Apple Arcade and Game Center in a dedicated games app to make it easier to discover games.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2025/288\"\u003eBring your SceneKit project to RealityKit\u003c/a\u003e \u003cstrong\u003eSceneKit is soft-deprecated.\u003c/strong\u003e SceneKit apps continue to work but framework is in maintenance mode and not recommended. New apps and significant updates should use RealityKit. Differences and ways to port SceneKit apps to RealityKit.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "34 min read",
  "publishedTime": "2025-06-16T09:00:00+01:00",
  "modifiedTime": "2025-06-17T16:10:47+01:00"
}
