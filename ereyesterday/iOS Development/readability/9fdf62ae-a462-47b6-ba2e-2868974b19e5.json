{
  "id": "9fdf62ae-a462-47b6-ba2e-2868974b19e5",
  "title": "SwiftUI Charts Plotting Functions",
  "link": "https://useyourloaf.com/blog/swiftui-charts-plotting-functions/",
  "description": "In iOS 18 Apple added function plotting to the SwiftUI Charts framework. Function Plotting Both the LinePlot and AreaPlot charts accept a function to graph. The function accepts a Double and returns a Double. For example: Chart { LinePlot(x: \"x\", y: \"y\") { x in x * x } } .chartYAxisLabel(\"y = x * x\") Another example, with a range applied to the x-axis (you can also apply the domain parameter directly to the LinePlot method): Chart { LinePlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") Note: Apple’s documentation mentions that for x values where the function is undefined or infinity you should return Double.nan or Double.infinity: Chart { LinePlot(x: \"x\", y: \"y\", domain: -5...5) { x in guard x != 0 else { return .nan } return 1 / x } } .chartYAxisLabel(\"y = 1/x\") .clipped() An area plot of a single function fills the area between the function and zero: Chart { AreaPlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") If you give an area plot two functions for the starting and ending y value, it fills the area between the two functions: Chart { AreaPlot(x: \"x\", yStart: \"x\", yEnd: \"sin(x)\") { x in (yStart: sin(x), yEnd: sin(x + .pi)) } } Where I think function plotting becomes useful is when we’re visualising data that we expect to approximate a function. Adding an area and line plot of the function we can highlight the comparison between this bar chart and the expected results: Chart { AreaPlot(x: \"x\", y: \"y\") { $0 * $0 } .foregroundStyle(.gray) .opacity(0.5) LinePlot(x: \"x\", y: \"y\") { $0 * $0 } ForEach(data) { item in BarMark( x: .value(\"Sample\", item.score), y: .value(\"Result\", item.count) ) } } Learn More WWDC24 Swift Charts: Vectorized and function plots SwiftUI Charts Plotting Functions was originally posted 24 Nov 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Sun, 24 Nov 2024 13:33:26 +0000",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 1874,
  "excerpt": "In iOS 18 SwiftUI charts can plot functions.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "In iOS 18 Apple added function plotting to the SwiftUI Charts framework. Function Plotting Both the LinePlot and AreaPlot charts accept a function to graph. The function accepts a Double and returns a Double. For example: Chart { LinePlot(x: \"x\", y: \"y\") { x in x * x } } .chartYAxisLabel(\"y = x * x\") Another example, with a range applied to the x-axis (you can also apply the domain parameter directly to the LinePlot method): Chart { LinePlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") Note: Apple’s documentation mentions that for x values where the function is undefined or infinity you should return Double.nan or Double.infinity: Chart { LinePlot(x: \"x\", y: \"y\", domain: -5...5) { x in guard x != 0 else { return .nan } return 1 / x } } .chartYAxisLabel(\"y = 1/x\") .clipped() An area plot of a single function fills the area between the function and zero: Chart { AreaPlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") If you give an area plot two functions for the starting and ending y value, it fills the area between the two functions: Chart { AreaPlot(x: \"x\", yStart: \"x\", yEnd: \"sin(x)\") { x in (yStart: sin(x), yEnd: sin(x + .pi)) } } Where I think function plotting becomes useful is when we’re visualising data that we expect to approximate a function. Adding an area and line plot of the function we can highlight the comparison between this bar chart and the expected results: Chart { AreaPlot(x: \"x\", y: \"y\") { $0 * $0 } .foregroundStyle(.gray) .opacity(0.5) LinePlot(x: \"x\", y: \"y\") { $0 * $0 } ForEach(data) { item in BarMark( x: .value(\"Sample\", item.score), y: .value(\"Result\", item.count) ) } } Learn More WWDC24 Swift Charts: Vectorized and function plots",
  "image": "https://useyourloaf.com/blog/swiftui-charts-plotting-functions/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eIn iOS 18 Apple added function plotting to the SwiftUI Charts framework.\u003c/p\u003e\n\u003ch3 id=\"function-plotting\"\u003eFunction Plotting\u003c/h3\u003e\n\u003cp\u003eBoth the \u003ccode\u003eLinePlot\u003c/code\u003e and \u003ccode\u003eAreaPlot\u003c/code\u003e charts accept a function to graph. The function accepts a \u003ccode\u003eDouble\u003c/code\u003e and returns a \u003ccode\u003eDouble\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e \u003cspan\u003eLinePlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e   \u003cspan\u003ex\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartYAxisLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;y = x * x\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/001.png\" alt=\"graph of y = x * x\" width=\"390\" height=\"380\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eAnother example, with a range applied to the x-axis (you can also apply the domain parameter directly to the \u003ccode\u003eLinePlot\u003c/code\u003e method):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eLinePlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003esin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartXScale\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edomain\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e15.\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e15\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartYAxisLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;y = sin(x)\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/002.png\" alt=\"graph of y = sin(x)\" width=\"390\" height=\"380\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eNote: Apple’s documentation mentions that for x values where the function is undefined or infinity you should return Double.nan or Double.infinity:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eLinePlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edomain\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e5.\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enan\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartYAxisLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;y = 1/x\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclipped\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/003.png\" alt=\"Graph of 1 / x\" width=\"380\" height=\"365\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/003@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eAn area plot of a single function fills the area between the function and zero:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eAreaPlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003esin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartXScale\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edomain\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e15.\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e15\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echartYAxisLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;y = sin(x)\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/004.png\" alt=\"Area plot of y = sin(x) with area filled below function\" width=\"390\" height=\"380\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/004@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf you give an area plot two functions for the starting and ending y value, it fills the area between the two functions:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eAreaPlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eyStart\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eyEnd\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;sin(x)\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ex\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eyStart\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eyEnd\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epi\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/005.png\" alt=\"Area plot of y = sin(x) and sin(x + π)\" width=\"390\" height=\"380\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/005@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhere I think function plotting becomes useful is when we’re visualising data that we expect to approximate a function. Adding an area and line plot of the function we can highlight the comparison between this bar chart and the expected results:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eChart\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eAreaPlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e$0\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e$0\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003egray\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eopacity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eLinePlot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;y\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e$0\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e$0\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eForEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eBarMark\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Sample\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003escore\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Result\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/006.png\" alt=\"Histogram with overlayed plot of y = x * x\" width=\"380\" height=\"365\" srcset=\"https://useyourloaf.com/blog/swiftui-charts-plotting-functions/006@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024/10155\"\u003eWWDC24 Swift Charts: Vectorized and function plots\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-11-24T13:33:26Z",
  "modifiedTime": "2024-11-26T13:49:47Z"
}
