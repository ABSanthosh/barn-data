{
  "id": "4d7ad5ff-daa0-4e01-aa1f-6ae89a2b0ae1",
  "title": "iOS Accessibility Values",
  "link": "https://mobilea11y.com/blog/accessibility-values/",
  "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
  "author": "",
  "published": "Sun, 19 Jun 2022 10:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 2394,
  "excerpt": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set. If you’re using standard controls provided by Apple, these values will be set for you. But if you make something custom you must add a value where necessary, and if you’re extending a standard control, testing with VoiceOver is essential. Examples of values include the text in a text field or the current value of a stepper or slider. For example, a slider that is used to represent progress through time-based media such as video. The label of the element might be ‘progress’, and the value would be the current percentage progress. The exact value will vary depending on the type of control and data, it could be an integer value, a value with a unit, or a string. Adding a value to other elements where no other data is presented separate to the label would duplicate what you are presenting to your user. This would make your interface harder to navigate, and potentially more confusing. The correct answer here is to add a descriptive accessibility label, and set nothing for an accessibility value. The API The accessibility value is a string representation of the value of an element on screen, so this means the API doesn’t need much complexity. In SwiftUI we have a single accessibilityValue modifier. This modifier can take the string value, a Text or a localised string key. .accessibilityValue(\"My value\") Using a Text value allows us to add accessibility attributes to the string to give VoiceOver more information on how to announce the utterance. For UIKit our UIView subclass has a property of accessibilityValue. myView.accessibilityValue = \"My Value\" Additionally in UIKit you can use attributed accessibility strings to provide more information to VoiceOver about how it should announce the utterance. myView.accessibilityAttributedValue = myAttributedValue – I highly recommend you check out my other blogs on the building blocks of iOS accessibility: traits and labels.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eFor iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with \u003ca href=\"https://mobilea11y.com/blog/traits/\"\u003etraits\u003c/a\u003e, \u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003elabels\u003c/a\u003e, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the \u003cem\u003evalue\u003c/em\u003e part of \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html\"\u003eWCAG 4.1.2: Name, Role, Value\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"values\"\u003eValues\u003c/h2\u003e\n\u003cp\u003eNot every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set. If you’re using standard controls provided by Apple, these values will be set for you. But if you make something custom you must add a value where necessary, and if you’re extending a standard control, testing with VoiceOver is essential.\u003c/p\u003e\n\u003cp\u003eExamples of values include the text in a text field or the current value of a stepper or slider. For example, a slider that is used to represent progress through time-based media such as video. The label of the element might be ‘progress’, and the value would be the current percentage progress. The exact value will vary depending on the type of control and data, it could be an integer value, a value with a unit, or a string.\u003c/p\u003e\n\u003cp\u003eAdding a value to other elements where no other data is presented separate to the label would duplicate what you are presenting to your user. This would make your interface harder to navigate, and potentially more confusing. The correct answer here is to add a descriptive \u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003eaccessibility label\u003c/a\u003e, and set nothing for an accessibility value.\u003c/p\u003e\n\u003ch2 id=\"the-api\"\u003eThe API\u003c/h2\u003e\n\u003cp\u003eThe accessibility value is a string representation of the value of an element on screen, so this means the API doesn’t need much complexity. In SwiftUI we have a single \u003ccode\u003eaccessibilityValue\u003c/code\u003e modifier. This modifier can take the string value, a \u003ccode\u003eText\u003c/code\u003e or a localised string key.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.accessibilityValue(\u0026#34;My value\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing a \u003ccode\u003eText\u003c/code\u003e value allows us to add accessibility attributes to the string to give VoiceOver more information on how to announce the utterance.\u003c/p\u003e\n\u003cp\u003eFor UIKit our UIView subclass has a property of \u003ccode\u003eaccessibilityValue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyView.accessibilityValue = \u0026#34;My Value\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdditionally in UIKit you can use \u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eattributed accessibility strings\u003c/a\u003e to provide more information to VoiceOver about how it should announce the utterance.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyView.accessibilityAttributedValue = myAttributedValue\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e–\u003c/p\u003e\n\u003cp\u003eI highly recommend you check out my other blogs on the building blocks of iOS accessibility: \u003ca href=\"https://mobilea11y.com/blog/traits/\"\u003etraits\u003c/a\u003e and \u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003elabels\u003c/a\u003e.\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
