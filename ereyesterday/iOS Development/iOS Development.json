[
  {
    "id": "3bb548ad-772d-4bd7-97ea-581643e9eb76",
    "title": "Little Known macOS Sequoia System Extensions",
    "link": "https://tyler.io/2024/09/little-known-macos-sequoia-system-extensions/",
    "description": "macOS Sequoia has added a surprising number of new and curious warning prompts for third-party apps.",
    "author": "Tyler",
    "published": "Wed, 18 Sep 2024 15:33:49 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/09/arc-extension.jpeg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "051eb752-6317-4340-a168-72b247cb42c1",
    "title": "Here",
    "link": "https://tyler.io/2024/07/here/",
    "description": "Yesterday, we entered a new timeline. I don’t know if it’s a better one or a much worse one. But it’s something new.",
    "author": "Tyler",
    "published": "Mon, 15 Jul 2024 04:40:31 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "dfba0563-9697-4580-856d-226279e912b7",
    "title": "Working at startups vs large companies",
    "link": "https://swiftrocks.com/working-at-startups-vs-large-companies",
    "description": "Working at a large company like Apple or Google is such a common goal in the tech industry that there's even a market for selling courses and books designed to help people achieve this goal. But one thing that I've learned in my career is that working at such companies is not for everyone. The experience of working at a large company is extremely different from that of a startup, so if you're not aware of those differences, you can end up having a big (negative) surprise down the road that can make you regret your choices. In this article, I'd like to show you the difference between companies of different sizes so that you can determine which one better fits your personal style and interests. Disclaimer: I haven't worked at every company to ever exist in this planet, so this is obviously not a 100% perfect model for every company out there. There are always exceptions, this is just a basic description of the average case. Working at a startup Pros: Great to get experience in a wide variety of topics and areas Growth potential is huge Little to no bureaucracy or politics Generally a great community / vibe overall Cons: Generally crap pay Highly unstable Little to no engineering challenges (startups often prioritize speed) Work is complete chaos Most likely going to work with a product that nobody cares about Working at a startup is the most fun I've had in my career, but I think it takes a special kind of person to thrive in this environment. I feel that working at a startup is ideal if you have an entrepreneurship mindset, because you not only get to be constantly exposed to the organizational side of things, you are likely also involved in it. This allows you to build a lot of experience with how companies work under the hood, which I've found to be really handy overall. Another thing I like about startups is that the vibe is generally very positive. Since there aren't a lot of people in the company, there's basically no bureaucracy and chances are that everyone gets along well. This also makes it so that you can grow quite fast in the company, provided that the company itself is doing well in the first place. In general, startups are a high-risk high-reward situation. While you can win big fast, you can lose big just as fast because any minor setback can destroy the entire company. This is another reason why I find them best for those with an entrepreneurship itch. The work itself also tends to be very chaotic and thus not something that someone looking for stability would enjoy. Another important downside to mention is that the engineering side of things tends to be a bit dull. Since startups often prioritize speed, building things tends to be down-prioritized in favor of going for easy out-of-the-box and / or plug-and-play open-source solutions, making a software engineering job feel more like assembling LEGO than anything else. Every work I had as a mobile engineer at a startup was basically 100% building UI, which became really boring to me after a while. Working at a mid-level company Pros: Generally good pay and benefits Better engineering challenges than the startups Opportunity to work with popular products Mostly stable Cons: Growth potential is not as great when compared to a startup Some bureaucracy / politics Despite the presence of interesting challenges, there aren't many sufficiently skilled engineers to tackle them / the engineering culture is not strong enough The mid-level company is the company that is big enough to overcome the downsides attributed to startups, but nowhere as big enough to have the pros attributed to large companies. In general, the pros/cons of a mid-level company are essentially the averages of the other two cases in this article. The primary problem with mid-level companies is that they try to mimic the processes and objectives of large companies, but have nowhere near as many resources as they do. This results for example in the team being tasked to solve massive engineering infrastructure challenges, because that's what large companies do, even though almost no one in the team is skilled enough to pull it off (likely because most who did have such skills ended up getting poached by the large companies). This puts giant pressure on these select few, which on one side can be seen as a great growth opportunity, but on the other side puts the company into a difficult position, as said people are likely to either burn out or leave in favor of an actual large company. With that said, I find that mid-level companies still offer great growth opportunities. I think they are good choices for people who like the vibe and stability of large companies but can't stand the downsides of working at actual large companies. Working at a large company Pros: Life-changing pay and benefits World-class engineering challenges Opportunity to work with some of the smartest people on the planet In some cases, opportunity to pioneer / define tech trends for the entire planet Opportunity to work with products that are used / loved on the entire planet Apart from potential layoffs, they are extremely stable / too big to fail Cons: Unbearable politics Growth is extremely hard By \"large company\", we're talking about tech giants like Google, Apple, Meta, and so on. Looking at the pros, it's easy to see why people dream of working at such places. But what a lot of people don't know is that there are strong downsides attached to working at such companies, and being able to tolerate them is critical to succeed there. I've met many folks who couldn't and ended up leaving. The first and most critical downside is that everything is covered by a thousand layers of bureaucracy and politics. I cannot overstate how unbearable this is, but it's how things at companies of this size. When you work at a startup, if you want to do something, you just go there and do it. For a mid-level company, it might be slightly more annoying, but still doable. But when you work at a large company, if you want to do something, you're going to have to have a meeting about having a meeting about drafting a document about a meeting about drafting another document, which hopefully will be picked up by the planning season several months later, leading to more meetings and documents until hopefully you get to do some actual work around a year later, unless the company re-orgs sometime during this process, in which case you'll have to drop everything and start from scratch. This boundless bureaucracy extends everywhere, including the promotion process. Growing at such companies can be extremely hard as the process involves considerable amounts of bureaucracy and things that are outside of your control, especially for Staff+ positions. Which team you're part of also plays a big role as some teams are bound to have more opportunities to drive impact than others in a company of this size. I think that thriving at a large company is directly correlated to how much you can tolerate such politics. No one would look at this description and be happy, but if you look at it and feel that you could take it, then working at a large company might be for you. Conclusion As I mentioned in the beginning, this is just a basic description of the average case. There are thousands of exceptions who surely don't fit into these descriptions. But the idea is just to present that the concept of trade-offs also applies to companies and cultural fit. Just because one company is larger than the other doesn't necessarily mean it's best you; depending on what you value, you might find that smaller companies are a better fit for you.",
    "author": "Bruno Rocha",
    "published": "Mon, 14 Oct 2024 21:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "c3e7b84c-8797-4dc9-9e97-943fd8043780",
    "title": "My process for learning new languages",
    "link": "https://swiftrocks.com/my-process-for-learning-new-languages",
    "description": "Throughout my life, I have met several people who struggle to learn a new language, with some of them being unable to communicate at a basic level despite having studied for several years. I believe that learning a language is not a matter of talent, but that of dedication and following a good process. In this article, I would like to share the process I used more than once (and am still using) to tackle the challenge of learning a new language with great success. I currently speak three languages (native Portuguese, English, Swedish), and am in the process of learning a fourth (Japanese). My process For me, learning a new language consists of three major steps: Learning basic grammar Becoming good at reading and listening Becoming good at speaking Learning basic grammar My first step towards learning a new language consists of understanding the basics of the language. This includes things like learning how sentences are structured, how words should be pronounced, how to count, and any other language-specific basics that may apply (for example, for Swedish, learning the difference between en / ett, or the concept of soft / hard vowels). The word \"basic\" here is very important. I want to have a good understanding of how things work in that language, but I don't want to waste time reasoning about complex grammar rules. Think of the sorts of things a mom would correct a child for; my mom would correct me if I used a word in the wrong place, but she wouldn't lecture me about the theory of participle clauses. Knowledge of basic grammar massively pays off because later on it will simplify the process of expanding the vocabulary. Although at this point I will not know many words, my knowledge of basic grammar will allow me to more easily figure out how to pronounce any new words that I may encounter in the future, to properly classify them (subject? verb? noun? adjective? present? past tense?) based on their format and position in a sentence, and in some cases even accurately guess their meaning based on this information. Although in the next section I'm going to complain about traditional language learning books / schools, I think they are one of the best resources for learning basic grammar. It's also usually straightforward and can be mastered in just a couple of months. Becoming good at reading and listening But this is about as far as those language schools and books will help you out, because in my opinion they massively fuck up pretty much everything beyond this point. In my experience, after learning basic grammar, schools and books usually follow up by teaching advanced grammar. I think this is a complete waste of time and is why in my opinion many adults struggle with learning a language despite attending classes for multiple years. Learning complex grammar rules will not help you learn the language, even natives don't know this stuff! What natives know is vocabulary, and this is what I believe is the right focus at this stage. My goal then becomes to expand my vocabulary as much as possible by immersing myself in the language, consuming as much media as I can and as frequently as possible. This is something that is usually referred to as the immersion method. Here are some examples of things I do in this step: Changing the language of my phone / computer Watching shows with either sound or subtitles in that language, preferably both if available Listening to podcasts, sometimes actively and sometimes passively as background noise Finding internet forums / subreddits / YouTube channels for topics I like Reading the news You might think that this doesn't make sense because you won't understand anything, but that's exactly the point. Children also don't understand anything at first, yet magically they seem to just \"get it\" after one point, simply by being exposed to the language. This is because our brains are big pattern-matching machines; the more you expose yourself to a language, the more patterns / words you discover, which leads to further discoveries until you eventually reach a point where everything just clicks. In other words, the purpose of this step is to try to replicate how a child would learn a language at home. I find watching shows / YouTube videos to be particularly excellent for this because you can usually guess what a word means based on the context of the scene, meaning you don't need to spend as much time translating words as you would when compared to other types of media. Duolingo can also be a good tool to expand your vocabulary, as long as you don't use it in isolation. This is because although Duolingo is a good way to learn new words, it tends to be quite bad at everything else (e.g grammar), so I think it's important to back it up with the other methods mentioned in this section. It's important to note also that the quality of Duolingo's exercises varies greatly between languages, so looking for reviews before getting started is a must here. If you tend to quickly forget things like I do, a spaced repetition system can greatly assist you with fixating all of this new knowledge. In my case I quite enjoyed using Readwise for this, but I know many who have used Anki / traditional flashcards with great success. This entire process is very painful at first, but gets easier with time as your vocabulary improves. The unfortunate part is that this is a lengthy process; it can take several years of doing this before reaching a point where reading / listening to the language becomes effortless, and I think there's no way around it. Becoming good at speaking Although the previous step is excellent at making me good at reading and listening, in my experience it doesn't necessarily help me become good at speaking. When I was learning Swedish for example, although I had an easy time understanding what people were saying and knew in theory what to answer back, I still had a very hard time doing so, mostly because I just wasn't used to it. Although I knew the vocabulary in theory, it would still take several seconds for the right words to emerge in my mind when having a conversation with someone. Unlike the other steps, I don't think there is any special method that one can use to become good at speaking a new language. This is something you just have to keep doing until your brain gets used to it. It's a massive advantage if you actually live in the country in question, but this is doable even if you don't as there are many online services designed around connecting you with native speakers of a particular language. I personally never used them though, so I cannot comment on their efficiency. Another interesting to mention is that nowadays there are websites that connect LLMs to voice recognition models, allowing you to chat with something like ChatGPT with your voice for the purpose of language learning. I've tried one but personally didn't like the experience as talking to a robot felt completely different from talking to a real person, but if you'd like to try it out, you can easily find them on Google (there are hundreds of websites for this as of writing). I think the most important part here is to resist the urge to switch to another language when you start to struggle, especially if you live in a country like Sweden where the natives are good at English. (In fact I would say that the hardest thing about learning a language like Swedish is not the language itself, but rather that Swedes are so good at English that they automatically switch to it when they see you struggling with Swedish, making it almost impossible for you to improve!) Conclusion Although we can divide the process of learning a new language in logical steps, we're still talking about a multi-year effort. That's just how it works, there are no shortcuts. If you struggle with learning a new language, I hope this post was able to teach you something new that can help you in your journey!",
    "author": "Bruno Rocha",
    "published": "Sun, 1 Sep 2024 10:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "6bd2e74d-ad54-4532-bc52-1b5ecd51447b",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "ce327924-edde-480e-8f7b-6702234e0873",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "11f755e4-dd5f-46bb-974b-7b981f5bd04f",
    "title": "305: Selling Apps",
    "link": "http://relay.fm/radar/305",
    "description": "Different types of acquisitions, reasons why someone might want to buy our businesses, and reasons why we might want to sell — or not.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 07 Nov 2024 16:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar305.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "1180156a-4605-48b0-9ee5-354c408b3c32",
    "title": "304: Onboarding",
    "link": "http://relay.fm/radar/304",
    "description": "Improving the first-run experiences in our apps.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 24 Oct 2024 14:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar304.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "57224326-b079-4359-8f1c-af29e8f97bb8",
    "title": "SwiftUI Self-Sizing Flow Layouts",
    "link": "https://useyourloaf.com/blog/swiftui-self-sizing-flow-layouts/",
    "description": "The UIKit combination of UICollectionView and the UICollectionViewFlowLayout gives a lot of flexibility and control to build grid-like flow layouts. How do we do that with SwiftUI? Self-Sizing Flow Layouts The UICollectionViewFlowLayout documentation describes a flow layout as laying out a collection of items using a fixed distance in one direction and a scrollable distance in the other. For example, a vertically scrolling layout where cells flow from one row to the next, each row containing as many cells as fit in the available width. One such example I find useful is a card layout where the cards are of equal size, but sized to fit the largest content in the cells (within some minimum/maximum constraints). For example, this card style layout on an 11\" iPad, shown in landscape. At default text sizes this produces a grid with seven columns and five rows. As the text size increases the card size increases and the layout adjusts. At the largest accessibility sizes this produces a grid with three columns and eleven rows. The flow layout also adjusts for the size of the container so on an iPhone the grid reduces to two columns, scrolling vertically: Let’s look at how we could build a similar layout with SwiftUI. SwiftUI Layout Protocol (iOS 16) Apple introduced the Layout protocol back in iOS 16. It has two required methods: // Return the size of the composite view, given a // proposed size and the view's subviews. sizeThatFits(proposal:subviews:cache:) // Assigns positions to each of the layout's subviews. placeSubviews(in:proposal:subviews:cache:) The first method calculates the overall size of the layout. It roughly compares to the UICollectionViewDelegateFlowLayout method to calculate the size of each item: // Asks the delegate for the size of the specified item's cell. collectionView(_:layout:sizeForItemAt:) To get started, let’s create a conforming type with some view metrics for padding, margins, and width constraints: struct CardLayout: Layout { private enum ViewMetrics { static let padding: CGFloat = 8 static let margin: CGFloat = 8 static let minimumWidth: CGFloat = 150 static let maximumWidth: CGFloat = 400 static let aspectRatio: CGFloat = 1.5 } } The Ideal Size The sizeThatFits method gets a proposed view size from the parent view, a collection of proxies for the subviews to layout, and an optional cache for calculated data. I’m going to ignore the cache for now, and return early with zero size if we have no subviews to layout: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout Void) -\u003e CGSize { guard !subviews.isEmpty else { return .zero } // calculate size... } The proposal from the parent view is of type ProposedViewSize, a struct with an optional width and height. Apple’s documentation mentions that the parent view can call this method more than once with different proposals: A proposal of .zero size for the layout’s minimum size. A proposal of .infinity size for the layout’s maximum size. A proposal of .unspecified for the layout’s ideal size. I’m always going to ask my subviews for their ideal size. Since I need to do that more than once I’ve created a utility method: private func fittingSize(subviews: Subviews) -\u003e CGSize { // Return size of subviews } We start my mapping over our collection of subviews asking each for their ideal size: let sizes = subviews.map { $0.sizeThatFits(.unspecified) } Then I’ll use the maximum width and height from the ideal sizes of my subviews: var fittingSize: CGSize = sizes.reduce(.zero) { currentMax, size in CGSize( width: max(currentMax.width, size.width), height: max(currentMax.height, size.height) ) } Now I’ll apply some constraints on my card size. I’ve chosen suitable view metrics for my expected content but my card text can still be truncated. First enforcing the aspect ratio: if fittingSize.width / fittingSize.height \u003e ViewMetrics.aspectRatio { fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } else { fittingSize.width = fittingSize.height * ViewMetrics.aspectRatio } Then the minimum width, maintaining the aspect ratio: if fittingSize.width \u003c ViewMetrics.minimumWidth { fittingSize.width = ViewMetrics.minimumWidth fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } Finally, I limit the card to a maximum width: if fittingSize.width \u003e ViewMetrics.maximumWidth { fittingSize.width = ViewMetrics.maximumWidth fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } We now have our “ideal” card size: return fittingSize } There’s one more constraint I want to apply to my cards which is enforce that they are never wider than any proposed width from the container view. If the parent has proposed a width, we limit our card size so that it fits within the margins, maintaining the aspect ratio: private func maxSize( fittingSize: CGSize, containerProposal: ProposedViewSize) -\u003e CGSize { guard let containerWidth = containerProposal.width else { return fittingSize } let maxWidth = containerWidth - 2 * ViewMetrics.margin if fittingSize.width \u003e maxWidth { return CGSize( width: maxWidth, height: maxWidth / ViewMetrics.aspectRatio) } return fittingSize } Now we have the size of the cards we can calculate how many columns we need from the card width, desired padding and margins: private func cardsInRow( cardSize: CGSize, proposal: ProposedViewSize) -\u003e Int { let bounds = proposal.replacingUnspecifiedDimensions() let cardsInRow = Int( (bounds.width + ViewMetrics.padding - 2 * ViewMetrics.margin) / (cardSize.width + ViewMetrics.padding) ) return cardsInRow } Note that to convert any optional height or width in the proposed size to a default value (10) using replacingUnspecifiedDimensions(). Then to find out how many rows we need: private func cardsInColumn( cardsInRow: Int, totalCards: Int) -\u003e Int { Int(ceil(Double(totalCards) / Double(cardsInRow))) } With that work done we can complete our size that fits method, calculating the overall container size: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout Void ) -\u003e CGSize { guard !subviews.isEmpty else { return .zero } let fittingSize = fittingSize(subviews: subviews) let maxSize = maxSize( fittingSize: fittingSize, containerProposal: proposal) let cardsInRow: Int = cardsInRow( cardSize: maxSize, proposal: proposal) let cardsInColumn = cardsInColumn( cardsInRow: cardsInRow, totalCards: subviews.count) let width = 2 * ViewMetrics.margin + CGFloat(cardsInRow) * (maxSize.width + ViewMetrics.padding) - ViewMetrics.padding let height = 2 * ViewMetrics.margin + CGFloat(cardsInColumn) * (maxSize.height + ViewMetrics.padding) - ViewMetrics.padding return CGSize(width: width, height: height) } Placing Views The second required Layout method positions each of the subviews in the bounds of the container: func placeSubviews( in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout Void) { guard !subviews.isEmpty else { return } // Position subviews } The bounds rectangle matches a size we returned from the sizeThatFits method. We need to recalculate our fitting size and again check our card size fits in the container bounds: let fittingSize = fittingSize(subviews: subviews) let boundsProposal = ProposedViewSize( width: bounds.width, height: bounds.height) let maxSize = maxSize( fittingSize: fittingSize, containerProposal: boundsProposal) We inset our starting position to allow for the margin: var nextX = bounds.minX + ViewMetrics.margin var nextY = bounds.minY + ViewMetrics.margin Now we iterate over the subviews calling the place(at:anchor:proposal:) method to tell each subview where to position itself. We propose our ideal size to each card: let placementProposal = ProposedViewSize( width: maxSize.width, height: maxSize.height) for index in subviews.indices { subviews[index].place( at: CGPoint(x: nextX, y: nextY), anchor: .topLeading, proposal: placementProposal) nextX += maxSize.width + ViewMetrics.padding if nextX + ViewMetrics.margin \u003e bounds.maxX { nextX = bounds.minX + ViewMetrics.margin nextY += maxSize.height + ViewMetrics.padding } } } Note that I’m placing each subview at the top-leading anchor. I’m using a fixed padding between the views. You can ask each subview for its preferred spacing: let spacing = subviews[index].spacing.distance( to: subviews[index + 1].spacing, along: .horizontal) Caching Apple recommends implementing caching only if profiling shows that it improves performance. For the small datasets I’m using I haven’t seen any need but you can implement the makeCache method. For example, to cache the result of my cards fitting size: struct CacheData { let fittingSize: CGSize } func makeCache(subviews: Subviews) -\u003e CacheData { let fittingSize = fittingSize(subviews: subviews) return CacheData(fittingSize: fittingSize) } There’s also an updateCache method that SwiftUI calls anytime the layout container or subviews change. The default implementation calls the makeCache method to recreate the cache. Don’t forget to change the type of the cache parameter to both layout methods: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData ) -\u003e CGSize { ... } func placeSubviews( in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData ) { ... } Finally, I can replace the call to fittingSize in each method to use the cached value: // let fittingSize = fittingSize(subviews: subviews) let fittingSize = cache.fittingSize Using the Layout To use my card layout I’ll place it in a vertical scroll view and pass it a collection of CardView views: struct ContentView: View { var body: some View { ScrollView { CardLayout { ForEach(Cards.all) { card in CardView(card: card) } } } } } Apple added some improvements to iOS 18 to build a custom container view but that’s for another time. Learn More WWDC22 Compose custom layouts with SwiftUI WWDC24 Demystify SwiftUI containers SwiftUI Self-Sizing Flow Layouts was originally posted 04 Nov 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 04 Nov 2024 13:26:41 +0000",
    "image": "https://useyourloaf.com/blog/swiftui-self-sizing-flow-layouts/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "f7edff36-5989-4b85-ac2c-f541e797146d",
    "title": "Conditional SwiftUI Accessibility Labels",
    "link": "https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/",
    "description": "In iOS 18, Apple added an optional isEnabled parameter to many of the accessibility modifiers. Conditional Accessibility Modifiers (iOS 18) Apple added the isEnabled parameter to .accessibilityLabel, .accessibilityInputLabels, .accessibilityValue, .accessibilityHint and many other accessibility modifiers. This has the effect of only applying the modifier when the isEnabled parameter is true. This is useful in situations where you need to conditionally override the default accessibility behaviour. For example, this labeled content has a button with a system symbol image: LabeledContent { Button { toggleFavorite(item) } label: { Image(systemName: item.favorite ? \"star.fill\" : \"star\") } } label: { Text(item.name) } I’m using the labeled content in a list of items, the button toggling the favorite status of each item: The button label provides the default accessibility label for the button action. In this example I’m using the “star” SF symbol which has a default (localized) accessibility label of “favorite”. That’s great but I’d like to change the label based on favorite status of the item. Favorited items show the filled version of the “star” symbol and I’d like the accessibility label for the button action to be “unfavorite”. One way is with an accessibility label that is conditional on the favorite status of the item: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(item.favorite ? \"Favorite\" : \"Unfavorite\") That works, but in situatons like this where we already have a suitable default label we can use the isEnabled variant of the modifier: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(\"Unfavorite\", isEnabled: item.favorite) It’s a small improvement but I think still useful to avoid having to repeat (and localize) the default label. Learn More WWDC24 Catch up on accessibility in SwiftUI Conditional SwiftUI Accessibility Labels was originally posted 21 Oct 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 21 Oct 2024 11:08:21 +0100",
    "image": "https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "5f8a792f-1385-40c2-8731-ed0eae9c7f57",
    "title": "Harris for President",
    "link": "https://inessential.com/2024/10/31/harris_for_president.html",
    "description": "Donald Trump is a gross villain and a traitor to our country. He’s a convicted felon, adjudicated rapist, and head of a criminal organization; he works with criminals and he pardons criminals; he’s a narcissist and violent insurrectionist, racist and misogynist; he’s the master of lies and corruption and self-serving. He plans to rule as a fascist dictator, and this time has the backing to do so, for the benefit of him and his ultra-wealthy friends. Not for you. For everybody else, the various enemies within — everybody who isn’t a straight white male who goes along with the program — there will be concentration camps, deportation, prison, and rumors and threats of each. There will be more deaths in hospital parking lots. I have voted for Kamala Harris. I ask you to vote for her too. I happen to think Harris would be very good, possibly even great, as president. But it hardly matters! Voting for her is how we stop this. And we have to stop this.",
    "author": "",
    "published": "Thu, 31 Oct 2024 13:04:03 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "280bfed6-4f5a-44bb-a296-2c6c5a43c3d3",
    "title": "Seattle Xcoders 20th Anniversary Meetup",
    "link": "https://inessential.com/2024/10/16/seattle_xcoders_20th_anniversary_meetup.html",
    "description": "This Thursday, Oct. 17, 2024, is the 20th anniversary of the Seattle Xcoders! We’d love to see you there, at 7 pm at Bale Breaker and Yonder Cider taproom in Ballard. Everyone is welcome! It’s not just for people who write code — it’s for designers, testers, support folks, and everyone who helps make Apple-ecosystem apps. Even if you just like those kinds of apps and like talking about them, come join us! We’re usually outside by these propane fire things, but I’m not sure this time — we might have a room or some area or something. We should be easy to find, at any rate. It’s not actually a meeting with presentations — it’s just hanging out and talking. Which we do every first, third, and fifth Thursday (you can subscribe to our calendar). One of these days we’ll get back to presentations — but the social part is valuable, and so we keep it up. PS Looks like the food truck is Impeckable Chicken, which I’ve heard good things about. :) PPS I’m usually easy to spot: quite well into middle age, with nothing like the amount of hair I once had. Black jeans, usually a black sweatshirt. Glasses. Doc Martens. Not tall.",
    "author": "",
    "published": "Wed, 16 Oct 2024 19:13:25 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "9ff01e4d-c188-41a5-ac47-cf6686ceb3a9",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "543ee8b5-276c-4fcd-b757-281dcc7fa2f3",
    "title": "The idea of a Fastlane replacement",
    "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
    "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
    "author": "Alberto De Bortoli",
    "published": "Sun, 29 Oct 2023 22:57:38 GMT",
    "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "4b3a99ff-2a73-43ad-83e6-b5d5811de798",
    "title": "AnyClass protocol and Objective-C methods",
    "link": "https://augmentedcode.io/2024/11/04/anyclass-protocol-and-objective-c-methods/",
    "description": "AnyClass is a protocol all classes conform to and it comes with a feature I was not aware of. But first, how to I ended up with using AnyClass. While working on code using CoreData, I needed a way to enumerate all the CoreData entities and call a static function on them. If that function […]",
    "author": "Toomas Vahter",
    "published": "Mon, 04 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "AnyClass"
    ]
  },
  {
    "id": "222f58e8-287d-4ddf-a22f-26909545c99d",
    "title": "AnyView is everywhere in Xcode 16",
    "link": "https://augmentedcode.io/2024/10/21/anyview-is-everywhere-in-xcode-16/",
    "description": "Xcode 16 introduces a new execution engine for Previews, enhancing project configuration support and improving performance by up to 30%. However, it wraps SwiftUI views in AnyView for debug builds, which can hinder optimization. Users can override this behavior with a custom build setting to maintain performance in debugging.",
    "author": "Toomas Vahter",
    "published": "Mon, 21 Oct 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Xcode",
      "Swift"
    ]
  },
  {
    "id": "63749789-77bf-424f-875b-2decc8cfffc7",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "8097b2c0-3958-4a0d-b94b-087e25440045",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "591f3525-3eb5-4ff0-88bd-24849587851c",
    "title": "Introducing Plinky: My Love Letter To Links",
    "link": "https://fabisevi.ch/2024/05/09/introducing-plinky/",
    "description": "The post below was written by me, originally featured on the Plinky blog. To celebrate the launch of Plinky you can get 50% off of a yearly subscription by redeeming this offer: plinky.app/offer/REDPANDA There are few words I've ever said more excitedly than these: I want to tell you about my latest app, Plinky. Plinky makes it incredibly easy to do something we do every day, save links for later. You may already have a way to save links, I know I've tried every method under the sun, to the point where I decided to build my own app. That app is Plinky, and today it's available to download on the App Store. Over the last 18 months people have been loving Plinky, because it fixes the same problems I ran into when I've tried to save links in the past.",
    "author": "Joe Fabisevich",
    "published": "Thu, 09 May 2024 00:00:00 GMT",
    "image": "/static/c3d9146a8edf380ee267c61558f3a91b/ec7ce/plinky-screenshots.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "8661a0e7-5115-48b6-a072-b6addea19614",
    "title": "The Reasoning Computer",
    "link": "https://fabisevi.ch/2023/11/10/the-reasoning-computer/",
    "description": "The Turing test is dead, and we killed it. The Turing test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. From the 1940s 1 to the 2010s people programmed computers, and computers could only do what they were programmed to do in a rules-based deterministic manner. Sometimes a person would program the computer and it would do something unexpected, but 100 out of 100 times the computer was doing what it was programmed to do whether the person liked it or not. While there has been experimentation with what today we call AI since the 1950s, those machines were a long ways away from passing the Turing test. Why does using ChatGPT feel more like a conversation with the smartest person you know than a computer? It's because ChatGPT doesn't solve problems deterministically the way a programmed computer does, it solves them probabilistically. 2 ChatGPT demonstrates the ability to think about something in a logical, sensible way, the definition of reasoning. 3 We've created something completely new here, a reasoning computer. 4",
    "author": "Joe Fabisevich",
    "published": "Fri, 10 Nov 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "55e7f1f4-ee73-45b4-8bd5-1c317f8fd115",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "ed38ba70-4be4-4694-bf81-6ed33b2c3692",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "20488653-4ff2-46ae-9700-41b94dd8f428",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "f7ebdaf9-b766-4625-a15a-c4015a3a8cf6",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "c27fbde5-625b-40a5-a248-85a3fa08cd12",
    "title": "Coding in the kitchen: How Devin Davies whipped up the tasty recipe app Crouton",
    "link": "https://developer.apple.com/news/?id=9x75y43e",
    "description": "Let’s get this out of the way: Yes, Devin Davies is an excellent cook. “I’m not, like, a professional or anything,” he says, in the way that people say they’re not good at something when they are.But in addition to knowing his way around the kitchen, Davies is also a seasoned developer whose app Crouton, a Swift-built cooking aid, won him the 2024 Apple Design Award for Interaction.Crouton is part recipe manager, part exceptionally organized kitchen assistant. For starters, the app collects recipes from wherever people find them — blogs, family cookbooks, scribbled scraps from the ’90s, wherever — and uses tasty ML models to import and organize them. “If you find something online, just hit the Share button to pull it into Crouton,” says the New Zealand-based developer. “If you find a recipe in an old book, just snap a picture to save it.”And when it’s time to start cooking, Crouton reduces everything to the basics by displaying only the current step, ingredients, and measurements (including conversions). There’s no swiping around between apps to figure out how many fl oz are in a cup; no setting a timer in a different app. It’s all handled right in Crouton. “The key for me is: How quickly can I get you back to preparing the meal, rather than reading?” Davies says.ADA FACT SHEETCrouton Winner: Interaction Available on: iPhone, iPad, Mac, Apple Vision Pro, Apple Watch Team size: 1 Learn more about CroutonDownload Crouton from the App StoreCrouton is the classic case of a developer whipping up something he needed. As the de facto chef in the house, Davies had previously done his meal planning in the Notes app, which worked until, as he laughs, “it got a little out of hand.”At the time, Davies was in his salad days as an iOS developer, so he figured he could build something that would save him a little time. (It’s in his blood: Davies’s father is a developer too.) \"Programming was never my strong suit,” he says, “but once I started building something that solved a problem, I started thinking of programming as a means to an end, and that helped.”Davies’s full-time job was his meal ticket, but he started teaching himself Swift on the side. Swift, he says, clicked a lot faster than the other languages he’d tried, especially as someone who was still developing a taste for programming. “It still took me a while to get my head into it,” he says, “but I found pretty early on that Swift worked the way I wanted a language to work. You can point Crouton at some text, import that text, and do something with it. The amount of steps you don’t have to think about is astounding.”I found pretty early on that Swift worked the way I wanted a language to work.Devin Davies, CroutonCoding with Swift offered plenty of baked-in benefits. Davies leaned on platform conventions to make navigating Crouton familiar and easy. Lists and collection views took advantage of Camera APIs. VisionKit powered text recognition; a separate model organized imported ingredients by category.“I could separate out a roughly chopped onion from a regular onion and then add the quantity using a Core ML model,” he says. “It’s amazing how someone like me can build a model to detect ingredients when I really have zero understanding of how it works.”The app came together quickly: The first version was done in about six months, but Crouton simmered for a while before finding its audience. “My mom and I were the main active users for maybe a year,” Davies laughs. “But it’s really important to build something that you use yourself — especially when you’re an indie — so there’s motivation to carry on.”Davies served up Crouton updates for a few years, and eventually the app gained more traction, culminating with its Apple Design Award for Interaction at WWDC24. That’s an appropriate category, Davies says, because he believes his approach to interaction is his app’s special sauce. “My skillset is figuring out how the pieces of an app fit together, and how you move through them from point A to B to C,” he says. “I spent a lot of time figuring out what to leave out rather than bring in.” Davies hopes to use the coming months to explore spicing up Crouton with Apple Intelligence, Live Activities on Apple Watch, and translation APIs. (Though Crouton is his primary app, he’s also built an Apple Vision Pro app called Plate Smash, which is presumably very useful for cooking stress relief.)But it’s important to him that any new features or upgrades pair nicely with the current Crouton. “I’m a big believer in starting out with core intentions and holding true to them,” he says. “I don’t think that the interface, over time, has to be completely different.”My skillset is figuring out how the pieces of an app fit together, and how you move through them from point A to B to C.Devin Davies, CroutonBecause it’s a kitchen assistant, Crouton is a very personal app. It’s in someone’s kitchen at mealtime, it’s helping people prepare means for their loved ones, it’s enabling them to expand their culinary reach. It makes a direct impact on a person’s day. That’s a lot of influence to have as an app developer — even when a recipe doesn’t quite pan out.“Sometimes I’ll hear from people who discover a bug, or even a kind of misunderstanding, but they’re always very kind about it,” laughs Davies. “They’ll tell me, ‘Oh, I was baking a cake for my daughter’s birthday, and I put in way too much cream cheese and I ruined it. But, great app!’”Meet the 2024 Apple Design Award winnersBehind the Design is a series that explores design practices and philosophies from finalists and winners of the Apple Design Awards. In each story, we go behind the screens with the developers and designers of these award-winning apps and games to discover how they brought their remarkable creations to life.",
    "author": "",
    "published": "Mon, 04 Nov 2024 08:00:36 PST",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/2561E097-4B47-495F-90A8-4EB8C1D90279/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "5242bf26-4c20-47c5-96cb-8f591f1d8c0a",
    "title": "Hello Developer: November 2024",
    "link": "https://developer.apple.com/news/?id=rh8a0x7r",
    "description": "In this edition: The Swift Pathway, new developer activities around the world, and an interview with the creator of recipe app Crouton.Read the full article",
    "author": "",
    "published": "Mon, 04 Nov 2024 08:00:07 PST",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/907203FE-8D50-49A9-A3C9-6E3DAF2D207F/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "4408c5c6-721e-427d-90b6-06fefbd78733",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "216c4595-310a-49b0-a1d6-66cd2a730a11",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "c548bf4a-1387-4ef6-8335-388ff2be92bc",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "1d8ac9c2-68d3-4ded-9461-08322293b718",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "356a329b-07b5-4619-b6ba-50ae41b6e912",
    "title": "RUX: JSX-Style Rails View Components - RUBY 517",
    "link": "https://rubyrogues.com/rux-jsx-style-rails-view-components-ruby-517",
    "description": "Cameron Dutro joins the Rogues to discuss RUX, a system for managing your View Components in Rails in a similar way to how React uses JSX to manage its Component views. He discusses how it works, how it goes together, and what inspired it. Panel Charles Max Wood Darren Broemmer Luke Stutters Valentino Stoll Guest Cameron Dutro Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | camertron/rux Primer Design System ViewComponent GitHub | opal/opal Matestack Reimagined Rails views using Matestack with Jonas Jabari Ruby 2.5 allows creating structs with keyword arguments GitHub: Cameron Dutro ( camertron ) Twitter: Кэмерон Дутро ( @camertron ) Picks Cameron- GitHub | camertron/erb2rux Charles- PodcastBootcamp.io Charles- JavaScript Picks Charles- Ready Player Two Charles- Masters of Doom Charles- Top End Devs Darren- Is Ruby Dead Darren- 16 New ML Gems for Ruby Luke- GitHub | jeremyevans/sequel_postgresql_triggers Luke- DEF CON 29 - James Kettle - HTTP2: The Sequel is Always Worse Luke- The Wire  Valentino- Flux Valentino- Add strict_loading mode to optionally prevent lazy loading Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_517.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "e8174978-d846-44cc-8024-2ba0d1f3ddf6",
    "title": "React Do's and Don't's - RRU 158",
    "link": "https://reactroundup.com/react-do-s-and-don-t-s-rru-158",
    "description": "This week the panel discusses several Do's and Don't's for your React Apps that are lessons they've learned building React applications over the years. Panel Jack Herrington Paige Niedringhaus TJ Vantoll Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | welldone-software/why-did-you-render Picks Jack- Hades Paige- Versailles (TV series) TJ- Land of the Giants Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_158.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "d43d391b-4d53-436b-bae8-28163516825b",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "f3912dbd-c718-4bb0-9c6b-6b711ddeb905",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  }
]
