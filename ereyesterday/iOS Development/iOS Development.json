[
  {
    "id": "86dc48d4-cdcd-48cb-9f09-43ecb29eef19",
    "title": "Little Known macOS Sequoia System Extensions",
    "link": "https://tyler.io/2024/09/little-known-macos-sequoia-system-extensions/",
    "description": "macOS Sequoia has added a surprising number of new and curious warning prompts for third-party apps.",
    "author": "Tyler",
    "published": "Wed, 18 Sep 2024 15:33:49 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/09/arc-extension.jpeg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "dd8293da-53e9-4cea-a7e5-8806e8d76714",
    "title": "Here",
    "link": "https://tyler.io/2024/07/here/",
    "description": "Yesterday, we entered a new timeline. I don’t know if it’s a better one or a much worse one. But it’s something new.",
    "author": "Tyler",
    "published": "Mon, 15 Jul 2024 04:40:31 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "bcc78968-0a40-4203-9cd4-705121a6c6ca",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "d8723480-9bad-4417-a045-21e222a81654",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "e095383d-f691-43ff-b8b2-9872a5923005",
    "title": "Focus not on the task, but on the problem behind the task",
    "link": "https://swiftrocks.com/focus-not-on-the-task-but-on-the-problem-behind-the-task",
    "description": "Consider the following situation: A team is asked by their Product Manager to implement features X, Y, and Z into an existing system. The team then organizes itself and executes the project. After a certain amount of time, they delivered exactly what was asked of them. But then, one of these things happens (choose at least one): The features work only for the happy path, failing miserably at any sort of edge-case The features work as expected, but were designed so badly they are immediately considered tech debt The features work as expected, but are considered useless by the users of the system and end up completely unused (they do not solve those users' problems) What do you think happened here? Is this the Product Manager's fault for giving wrong requests, or the engineering team's fault for not understanding what was asked of them? Some people will say this is the PM's fault, and in some cases it might be true. But the situation I want to cover here is the scenario where this is the engineers' fault, because it's something I've seen countless times throughout my career. The reason the scenario above happened (when the PM is not the one at fault) is because the engineers focused too much on the immediate task they were given, when what they should've done is focus on the problem behind the task, by asking themselves questions such as: What's the context behind this ask? Is this a larger project that includes other features and tasks? Who exactly is asking for this? (Does anyone actually need this?) What problem are these users facing that led to this ask? Did someone attempt to solve this problem before? What did they try to do? Who is going to benefit from this ask being executed? How would they use the solution? It's only after understanding this context that you can consider yourself ready to come up with a technical solution to it. But what happens a lot is that some engineers tend to immediately jump into problem-solving as soon as they are presented with a task, leading to solutions that despite being \"accurate\" when evaluating the task in isolation, completely miss the mark when looking at the bigger picture. In short, the issue was that the engineers in that situation had too much tunnel vision. Understanding the context behind tasks allows you to come up with a solution that fits the bigger picture, making it possible not only to solve your users' problems, but also to do so in a way that is clean, scalable, easy to maintain, and that benefits everyone (as opposed to being beneficial to you and your team, but a pain in the ass for everyone else in the company). In The Staff Engineer's Path, Tanya Reilly describes this as the Local vs Global Maxima problem, where the Local maxima means focusing on what's good for you or your team in an individual sense (the tunnel vision situation above), and the Global maxima means focusing on what's good for the company as a whole, regardless of whether or not it would be ideal for you as an individual (the big picture situation). In the book, she presents this idea to argue that this focus and ability to gather context about the bigger picture is a core ability of Staff+ level engineers and a minimum requirement for those aspiring to reach that level. Although I agree with her that only Staff+ engineers should be expected to be masters at this, I do also believe that this is something everyone should attempt to do, regardless of level. Doing so not only improves your knowledge of how your company works and is structured, but also teaches you how to better determine what does and doesn't matter when trying to solve a particular problem, enabling you to be more effective both at coding and at providing value for your company.",
    "author": "Bruno Rocha",
    "published": "Mon, 18 Nov 2024 13:00:00 GMT+1",
    "image": "https://i.imgur.com/BfKDQC5.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "9b621622-a6e2-4c3e-ac1a-734c8c92f7fd",
    "title": "Working at startups vs large companies",
    "link": "https://swiftrocks.com/working-at-startups-vs-large-companies",
    "description": "Working at a large company like Apple or Google is such a common goal in the tech industry that there's even a market for selling courses and books designed to help people achieve this goal. But one thing that I've learned in my career is that working at such companies is not for everyone. The experience of working at a large company is extremely different from that of a startup, so if you're not aware of those differences, you can end up having a big (negative) surprise down the road that can make you regret your choices. In this article, I'd like to show you the difference between companies of different sizes so that you can determine which one better fits your personal style and interests. Disclaimer: I haven't worked at every company to ever exist in this planet, so this is obviously not a 100% perfect model for every company out there. There are always exceptions, this is just a basic description of the average case. Working at a startup Pros: Great to get experience in a wide variety of topics and areas Growth potential is huge Little to no bureaucracy or politics Generally a great community / vibe overall Cons: Generally crap pay Highly unstable Little to no engineering challenges (startups often prioritize speed) Work is complete chaos Most likely going to work with a product that nobody cares about Working at a startup is the most fun I've had in my career, but I think it takes a special kind of person to thrive in this environment. I feel that working at a startup is ideal if you have an entrepreneurship mindset, because you not only get to be constantly exposed to the organizational side of things, you are likely also involved in it. This allows you to build a lot of experience with how companies work under the hood, which I've found to be really handy overall. Another thing I like about startups is that the vibe is generally very positive. Since there aren't a lot of people in the company, there's basically no bureaucracy and chances are that everyone gets along well. This also makes it so that you can grow quite fast in the company, provided that the company itself is doing well in the first place. In general, startups are a high-risk high-reward situation. While you can win big fast, you can lose big just as fast because any minor setback can destroy the entire company. This is another reason why I find them best for those with an entrepreneurship itch. The work itself also tends to be very chaotic and thus not something that someone looking for stability would enjoy. Another important downside to mention is that the engineering side of things tends to be a bit dull. Since startups often prioritize speed, building things tends to be down-prioritized in favor of going for easy out-of-the-box and / or plug-and-play open-source solutions, making a software engineering job feel more like assembling LEGO than anything else. Every work I had as a mobile engineer at a startup was basically 100% building UI, which became really boring to me after a while. Working at a mid-level company Pros: Generally good pay and benefits Better engineering challenges than the startups Opportunity to work with popular products Mostly stable Cons: Growth potential is not as great when compared to a startup Some bureaucracy / politics Despite the presence of interesting challenges, there aren't many sufficiently skilled engineers to tackle them / the engineering culture is not strong enough The mid-level company is the company that is big enough to overcome the downsides attributed to startups, but nowhere as big enough to have the pros attributed to large companies. In general, the pros/cons of a mid-level company are essentially the averages of the other two cases in this article. The primary problem with mid-level companies is that they try to mimic the processes and objectives of large companies, but have nowhere near as many resources as they do. This results for example in the team being tasked to solve massive engineering infrastructure challenges, because that's what large companies do, even though almost no one in the team is skilled enough to pull it off (likely because most who did have such skills ended up getting poached by the large companies). This puts giant pressure on these select few, which on one side can be seen as a great growth opportunity, but on the other side puts the company into a difficult position, as said people are likely to either burn out or leave in favor of an actual large company. With that said, I find that mid-level companies still offer great growth opportunities. I think they are good choices for people who like the vibe and stability of large companies but can't stand the downsides of working at actual large companies. Working at a large company Pros: Life-changing pay and benefits World-class engineering challenges Opportunity to work with some of the smartest people on the planet In some cases, opportunity to pioneer / define tech trends for the entire planet Opportunity to work with products that are used / loved on the entire planet Apart from potential layoffs, they are extremely stable / too big to fail Cons: Unbearable politics Growth is extremely hard By \"large company\", we're talking about tech giants like Google, Apple, Meta, and so on. Looking at the pros, it's easy to see why people dream of working at such places. But what a lot of people don't know is that there are strong downsides attached to working at such companies, and being able to tolerate them is critical to succeed there. I've met many folks who couldn't and ended up leaving. The first and most critical downside is that everything is covered by a thousand layers of bureaucracy and politics. I cannot overstate how unbearable this is, but it's how things at companies of this size. When you work at a startup, if you want to do something, you just go there and do it. For a mid-level company, it might be slightly more annoying, but still doable. But when you work at a large company, if you want to do something, you're going to have to have a meeting about having a meeting about drafting a document about a meeting about drafting another document, which hopefully will be picked up by the planning season several months later, leading to more meetings and documents until hopefully you get to do some actual work around a year later, unless the company re-orgs sometime during this process, in which case you'll have to drop everything and start from scratch. This boundless bureaucracy extends everywhere, including the promotion process. Growing at such companies can be extremely hard as the process involves considerable amounts of bureaucracy and things that are outside of your control, especially for Staff+ positions. Which team you're part of also plays a big role as some teams are bound to have more opportunities to drive impact than others in a company of this size. I think that thriving at a large company is directly correlated to how much you can tolerate such politics. No one would look at this description and be happy, but if you look at it and feel that you could take it, then working at a large company might be for you. Conclusion As I mentioned in the beginning, this is just a basic description of the average case. There are thousands of exceptions who surely don't fit into these descriptions. But the idea is just to present that the concept of trade-offs also applies to companies and cultural fit. Just because one company is larger than the other doesn't necessarily mean it's best you; depending on what you value, you might find that smaller companies are a better fit for you.",
    "author": "Bruno Rocha",
    "published": "Mon, 14 Oct 2024 21:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "cc69fb82-d654-43d2-831c-00e156e5f66b",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "babc5bb4-f631-4bcb-b7a3-c19751f8ff11",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "97fa3b75-552e-4f96-9c7b-a2e491b9fbe6",
    "title": "306: Overcast \"Wrapped\"",
    "link": "http://relay.fm/radar/306",
    "description": "Adding listening stats and a history feature to Overcast Premium.",
    "author": "Marco Arment and David Smith",
    "published": "Wed, 20 Nov 2024 16:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar306.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "38b25415-d59b-459c-b337-8831b4a79bbc",
    "title": "305: Selling Apps",
    "link": "http://relay.fm/radar/305",
    "description": "Different types of acquisitions, reasons why someone might want to buy our businesses, and reasons why we might want to sell — or not.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 07 Nov 2024 16:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar305.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "908a7efc-8355-40a3-b4fa-de7b72832c83",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "7e66cecf-aa05-4b79-b8ba-937293681908",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "4cf5014e-3c35-4cb6-bea9-c2727895d30d",
    "title": "Automatic Trait Tracking",
    "link": "https://useyourloaf.com/blog/automatic-trait-tracking/",
    "description": "In iOS 18, UIKit automatically tracks when you access a trait, removing the need to manually register for trait change notifications. Automatic Trait Tracking (iOS 18) In iOS 18, UIKit supports automatic trait tracking in layout update methods in views and view controllers. See the Apple documentation for the full list of supported methods. It includes UIView methods like layoutSubviews(), updatesConstraints(), and draw(CGRect). Supported UIViewController methods include viewWillLayoutSubviews(), updateViewConstraints(), and the updateConfiguration methods for buttons, collection and table view cells. Any time UIKit calls one of these methods it notes which traits you access in the method. Then when one of those traits changes it automatically invalidates the view using setNeedsLayout, setNeedsUpdateConstraints, setNeedsDisplay, or setNeedsUpdateConifguration, as appropriate. This removes the need to manually register for trait changes. For example, I have a UIView subclass that overrides draw(CGRect). My view draws a box, inside the view bounds. When the user chooses one of the accessibility sizes of dynamic type I want to increase the size of my box: final class SquareView: UIView { override func draw(_ rect: CGRect) { var scale = 0.3 if traitCollection.preferredContentSizeCategory.isAccessibilityCategory { scale = 0.6 } let width = bounds.width * scale let height = bounds.height * scale let startX = (bounds.width / 2) - (width / 2) let startY = (bounds.height / 2) - (height / 2) let path = UIBezierPath() path.move(to: CGPoint(x: startX, y: startY)) path.addLine(to: CGPoint(x: startX, y: startY + height)) path.addLine(to: CGPoint(x: startX + width, y: startY + height)) path.addLine(to: CGPoint(x: startX + width, y: startY)) path.addLine(to: CGPoint(x: startX, y: startY)) UIColor.blue.setStroke() UIColor.blue.setFill() path.stroke() path.fill() } } The draw(CGRect) method checks the preferredContentSizeCategory trait before drawning the box. Before iOS 18, I need to add the view initializers and register for content size category trait changes and then call setNeedsDisplay to trigger a new call to draw(CGRect): // pre-iOS 18 override init(frame: CGRect) { super.init(frame: frame) setupView() } required init?(coder: NSCoder) { super.init(coder: coder) setupView() } private func setupView() { registerForTraitChanges([ UITraitPreferredContentSizeCategory.self ], action: #selector(contentSizeChanged)) } @objc private func contentSizeChanged() { setNeedsDisplay() } In iOS 18, that’s no longer necessary. UIKit registers that I’m accessing the preferredContentSizeCategory trait in draw(CGRect) and automatically calls setNeedsDisplay anytime it changes. Learn More WWDC24 What’s new in UIKit Apple Documentation - Automatic trait tracking Registering For Trait Changes Automatic Trait Tracking was originally posted 11 Nov 2024 on useyourloaf.com. Black Friday Sale! Save 20% off Modern Auto Layout",
    "author": "",
    "published": "Mon, 11 Nov 2024 09:42:15 +0000",
    "image": "",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "559e08c7-7098-4307-a4e4-c6f70eb44784",
    "title": "SwiftUI Self-Sizing Flow Layouts",
    "link": "https://useyourloaf.com/blog/swiftui-self-sizing-flow-layouts/",
    "description": "The UIKit combination of UICollectionView and the UICollectionViewFlowLayout gives a lot of flexibility and control to build grid-like flow layouts. How do we do that with SwiftUI? Self-Sizing Flow Layouts The UICollectionViewFlowLayout documentation describes a flow layout as laying out a collection of items using a fixed distance in one direction and a scrollable distance in the other. For example, a vertically scrolling layout where cells flow from one row to the next, each row containing as many cells as fit in the available width. One such example I find useful is a card layout where the cards are of equal size, but sized to fit the largest content in the cells (within some minimum/maximum constraints). For example, this card style layout on an 11\" iPad, shown in landscape. At default text sizes this produces a grid with seven columns and five rows. As the text size increases the card size increases and the layout adjusts. At the largest accessibility sizes this produces a grid with three columns and eleven rows. The flow layout also adjusts for the size of the container so on an iPhone the grid reduces to two columns, scrolling vertically: Let’s look at how we could build a similar layout with SwiftUI. SwiftUI Layout Protocol (iOS 16) Apple introduced the Layout protocol back in iOS 16. It has two required methods: // Return the size of the composite view, given a // proposed size and the view's subviews. sizeThatFits(proposal:subviews:cache:) // Assigns positions to each of the layout's subviews. placeSubviews(in:proposal:subviews:cache:) The first method calculates the overall size of the layout. It roughly compares to the UICollectionViewDelegateFlowLayout method to calculate the size of each item: // Asks the delegate for the size of the specified item's cell. collectionView(_:layout:sizeForItemAt:) To get started, let’s create a conforming type with some view metrics for padding, margins, and width constraints: struct CardLayout: Layout { private enum ViewMetrics { static let padding: CGFloat = 8 static let margin: CGFloat = 8 static let minimumWidth: CGFloat = 150 static let maximumWidth: CGFloat = 400 static let aspectRatio: CGFloat = 1.5 } } The Ideal Size The sizeThatFits method gets a proposed view size from the parent view, a collection of proxies for the subviews to layout, and an optional cache for calculated data. I’m going to ignore the cache for now, and return early with zero size if we have no subviews to layout: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout Void) -\u003e CGSize { guard !subviews.isEmpty else { return .zero } // calculate size... } The proposal from the parent view is of type ProposedViewSize, a struct with an optional width and height. Apple’s documentation mentions that the parent view can call this method more than once with different proposals: A proposal of .zero size for the layout’s minimum size. A proposal of .infinity size for the layout’s maximum size. A proposal of .unspecified for the layout’s ideal size. I’m always going to ask my subviews for their ideal size. Since I need to do that more than once I’ve created a utility method: private func fittingSize(subviews: Subviews) -\u003e CGSize { // Return size of subviews } We start my mapping over our collection of subviews asking each for their ideal size: let sizes = subviews.map { $0.sizeThatFits(.unspecified) } Then I’ll use the maximum width and height from the ideal sizes of my subviews: var fittingSize: CGSize = sizes.reduce(.zero) { currentMax, size in CGSize( width: max(currentMax.width, size.width), height: max(currentMax.height, size.height) ) } Now I’ll apply some constraints on my card size. I’ve chosen suitable view metrics for my expected content but my card text can still be truncated. First enforcing the aspect ratio: if fittingSize.width / fittingSize.height \u003e ViewMetrics.aspectRatio { fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } else { fittingSize.width = fittingSize.height * ViewMetrics.aspectRatio } Then the minimum width, maintaining the aspect ratio: if fittingSize.width \u003c ViewMetrics.minimumWidth { fittingSize.width = ViewMetrics.minimumWidth fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } Finally, I limit the card to a maximum width: if fittingSize.width \u003e ViewMetrics.maximumWidth { fittingSize.width = ViewMetrics.maximumWidth fittingSize.height = fittingSize.width / ViewMetrics.aspectRatio } We now have our “ideal” card size: return fittingSize } There’s one more constraint I want to apply to my cards which is enforce that they are never wider than any proposed width from the container view. If the parent has proposed a width, we limit our card size so that it fits within the margins, maintaining the aspect ratio: private func maxSize( fittingSize: CGSize, containerProposal: ProposedViewSize) -\u003e CGSize { guard let containerWidth = containerProposal.width else { return fittingSize } let maxWidth = containerWidth - 2 * ViewMetrics.margin if fittingSize.width \u003e maxWidth { return CGSize( width: maxWidth, height: maxWidth / ViewMetrics.aspectRatio) } return fittingSize } Now we have the size of the cards we can calculate how many columns we need from the card width, desired padding and margins: private func cardsInRow( cardSize: CGSize, proposal: ProposedViewSize) -\u003e Int { let bounds = proposal.replacingUnspecifiedDimensions() let cardsInRow = Int( (bounds.width + ViewMetrics.padding - 2 * ViewMetrics.margin) / (cardSize.width + ViewMetrics.padding) ) return cardsInRow } Note that to convert any optional height or width in the proposed size to a default value (10) using replacingUnspecifiedDimensions(). Then to find out how many rows we need: private func cardsInColumn( cardsInRow: Int, totalCards: Int) -\u003e Int { Int(ceil(Double(totalCards) / Double(cardsInRow))) } With that work done we can complete our size that fits method, calculating the overall container size: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout Void ) -\u003e CGSize { guard !subviews.isEmpty else { return .zero } let fittingSize = fittingSize(subviews: subviews) let maxSize = maxSize( fittingSize: fittingSize, containerProposal: proposal) let cardsInRow: Int = cardsInRow( cardSize: maxSize, proposal: proposal) let cardsInColumn = cardsInColumn( cardsInRow: cardsInRow, totalCards: subviews.count) let width = 2 * ViewMetrics.margin + CGFloat(cardsInRow) * (maxSize.width + ViewMetrics.padding) - ViewMetrics.padding let height = 2 * ViewMetrics.margin + CGFloat(cardsInColumn) * (maxSize.height + ViewMetrics.padding) - ViewMetrics.padding return CGSize(width: width, height: height) } Placing Views The second required Layout method positions each of the subviews in the bounds of the container: func placeSubviews( in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout Void) { guard !subviews.isEmpty else { return } // Position subviews } The bounds rectangle matches a size we returned from the sizeThatFits method. We need to recalculate our fitting size and again check our card size fits in the container bounds: let fittingSize = fittingSize(subviews: subviews) let boundsProposal = ProposedViewSize( width: bounds.width, height: bounds.height) let maxSize = maxSize( fittingSize: fittingSize, containerProposal: boundsProposal) We inset our starting position to allow for the margin: var nextX = bounds.minX + ViewMetrics.margin var nextY = bounds.minY + ViewMetrics.margin Now we iterate over the subviews calling the place(at:anchor:proposal:) method to tell each subview where to position itself. We propose our ideal size to each card: let placementProposal = ProposedViewSize( width: maxSize.width, height: maxSize.height) for index in subviews.indices { subviews[index].place( at: CGPoint(x: nextX, y: nextY), anchor: .topLeading, proposal: placementProposal) nextX += maxSize.width + ViewMetrics.padding if nextX + ViewMetrics.margin \u003e bounds.maxX { nextX = bounds.minX + ViewMetrics.margin nextY += maxSize.height + ViewMetrics.padding } } } Note that I’m placing each subview at the top-leading anchor. I’m using a fixed padding between the views. You can ask each subview for its preferred spacing: let spacing = subviews[index].spacing.distance( to: subviews[index + 1].spacing, along: .horizontal) Caching Apple recommends implementing caching only if profiling shows that it improves performance. For the small datasets I’m using I haven’t seen any need but you can implement the makeCache method. For example, to cache the result of my cards fitting size: struct CacheData { let fittingSize: CGSize } func makeCache(subviews: Subviews) -\u003e CacheData { let fittingSize = fittingSize(subviews: subviews) return CacheData(fittingSize: fittingSize) } There’s also an updateCache method that SwiftUI calls anytime the layout container or subviews change. The default implementation calls the makeCache method to recreate the cache. Don’t forget to change the type of the cache parameter to both layout methods: func sizeThatFits( proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData ) -\u003e CGSize { ... } func placeSubviews( in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData ) { ... } Finally, I can replace the call to fittingSize in each method to use the cached value: // let fittingSize = fittingSize(subviews: subviews) let fittingSize = cache.fittingSize Using the Layout To use my card layout I’ll place it in a vertical scroll view and pass it a collection of CardView views: struct ContentView: View { var body: some View { ScrollView { CardLayout { ForEach(Cards.all) { card in CardView(card: card) } } } } } Apple added some improvements to iOS 18 to build a custom container view but that’s for another time. Learn More WWDC22 Compose custom layouts with SwiftUI WWDC24 Demystify SwiftUI containers SwiftUI Self-Sizing Flow Layouts was originally posted 04 Nov 2024 on useyourloaf.com. Black Friday Sale! Save 20% off Modern Auto Layout",
    "author": "",
    "published": "Mon, 04 Nov 2024 13:26:41 +0000",
    "image": "https://useyourloaf.com/blog/swiftui-self-sizing-flow-layouts/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "e456539a-621c-4cb2-a846-e36564c042ce",
    "title": "Harris for President",
    "link": "https://inessential.com/2024/10/31/harris_for_president.html",
    "description": "Donald Trump is a gross villain and a traitor to our country. He’s a convicted felon, adjudicated rapist, and head of a criminal organization; he works with criminals and he pardons criminals; he’s a narcissist and violent insurrectionist, racist and misogynist; he’s the master of lies and corruption and self-serving. He plans to rule as a fascist dictator, and this time has the backing to do so, for the benefit of him and his ultra-wealthy friends. Not for you. For everybody else, the various enemies within — everybody who isn’t a straight white male who goes along with the program — there will be concentration camps, deportation, prison, and rumors and threats of each. There will be more deaths in hospital parking lots. I have voted for Kamala Harris. I ask you to vote for her too. I happen to think Harris would be very good, possibly even great, as president. But it hardly matters! Voting for her is how we stop this. And we have to stop this.",
    "author": "",
    "published": "Thu, 31 Oct 2024 13:04:03 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "0af64102-3d78-4e83-bf98-7b9f6dc2a7e2",
    "title": "Seattle Xcoders 20th Anniversary Meetup",
    "link": "https://inessential.com/2024/10/16/seattle_xcoders_20th_anniversary_meetup.html",
    "description": "This Thursday, Oct. 17, 2024, is the 20th anniversary of the Seattle Xcoders! We’d love to see you there, at 7 pm at Bale Breaker and Yonder Cider taproom in Ballard. Everyone is welcome! It’s not just for people who write code — it’s for designers, testers, support folks, and everyone who helps make Apple-ecosystem apps. Even if you just like those kinds of apps and like talking about them, come join us! We’re usually outside by these propane fire things, but I’m not sure this time — we might have a room or some area or something. We should be easy to find, at any rate. It’s not actually a meeting with presentations — it’s just hanging out and talking. Which we do every first, third, and fifth Thursday (you can subscribe to our calendar). One of these days we’ll get back to presentations — but the social part is valuable, and so we keep it up. PS Looks like the food truck is Impeckable Chicken, which I’ve heard good things about. :) PPS I’m usually easy to spot: quite well into middle age, with nothing like the amount of hair I once had. Black jeans, usually a black sweatshirt. Glasses. Doc Martens. Not tall.",
    "author": "",
    "published": "Wed, 16 Oct 2024 19:13:25 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "50bbdec3-40ca-4481-85a4-2f3aedc8c9cc",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "34480875-fb3a-48da-ad6f-7896c7ec753c",
    "title": "The idea of a Fastlane replacement",
    "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
    "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
    "author": "Alberto De Bortoli",
    "published": "Sun, 29 Oct 2023 22:57:38 GMT",
    "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "db873bd8-476f-4689-8055-d403914899ae",
    "title": "Swift 6 suitable notification observers in iOS",
    "link": "https://augmentedcode.io/2024/11/18/swift-6-friendlier-notification-observers/",
    "description": "The author discusses challenges managing side projects, specifically updating SignalPath to Swift 6. They encountered errors related to multiple notification observations but resolved them by shifting to publishers, avoiding sendable closure issues. Although the new approach risks background thread notifications, the compiler is satisfied with the adjustments made to the code.",
    "author": "Toomas Vahter",
    "published": "Mon, 18 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift"
    ]
  },
  {
    "id": "87cc3352-c593-417c-b37b-7fc56e68da16",
    "title": "AnyClass protocol and Objective-C methods",
    "link": "https://augmentedcode.io/2024/11/04/anyclass-protocol-and-objective-c-methods/",
    "description": "AnyClass is a protocol all classes conform to and it comes with a feature I was not aware of. But first, how to I ended up with using AnyClass. While working on code using CoreData, I needed a way to enumerate all the CoreData entities and call a static function on them. If that function […]",
    "author": "Toomas Vahter",
    "published": "Mon, 04 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "AnyClass"
    ]
  },
  {
    "id": "a13f0f1f-5eea-46a1-b41a-5789bd6f0aeb",
    "title": "RUX: JSX-Style Rails View Components - RUBY 517",
    "link": "https://rubyrogues.com/rux-jsx-style-rails-view-components-ruby-517",
    "description": "Cameron Dutro joins the Rogues to discuss RUX, a system for managing your View Components in Rails in a similar way to how React uses JSX to manage its Component views. He discusses how it works, how it goes together, and what inspired it. Panel Charles Max Wood Darren Broemmer Luke Stutters Valentino Stoll Guest Cameron Dutro Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | camertron/rux Primer Design System ViewComponent GitHub | opal/opal Matestack Reimagined Rails views using Matestack with Jonas Jabari Ruby 2.5 allows creating structs with keyword arguments GitHub: Cameron Dutro ( camertron ) Twitter: Кэмерон Дутро ( @camertron ) Picks Cameron- GitHub | camertron/erb2rux Charles- PodcastBootcamp.io Charles- JavaScript Picks Charles- Ready Player Two Charles- Masters of Doom Charles- Top End Devs Darren- Is Ruby Dead Darren- 16 New ML Gems for Ruby Luke- GitHub | jeremyevans/sequel_postgresql_triggers Luke- DEF CON 29 - James Kettle - HTTP2: The Sequel is Always Worse Luke- The Wire  Valentino- Flux Valentino- Add strict_loading mode to optionally prevent lazy loading Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_517.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "b8641254-004f-4043-9641-232a4aa3dfca",
    "title": "React Do's and Don't's - RRU 158",
    "link": "https://reactroundup.com/react-do-s-and-don-t-s-rru-158",
    "description": "This week the panel discusses several Do's and Don't's for your React Apps that are lessons they've learned building React applications over the years. Panel Jack Herrington Paige Niedringhaus TJ Vantoll Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | welldone-software/why-did-you-render Picks Jack- Hades Paige- Versailles (TV series) TJ- Land of the Giants Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_158.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "701dfe57-c6dd-4384-a687-51762d67de68",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "16b82681-d618-477f-b690-887b90d74782",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "8c1fb177-f797-46ba-8fcc-368391fecca4",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "56082be0-c991-4141-9f4c-4e198ebe508d",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "74782ec4-546f-4c82-8ed1-7c29b9b9962f",
    "title": "Price and tax updates for apps, In-App Purchases, and subscriptions",
    "link": "https://developer.apple.com/news/?id=onjo01rj",
    "description": "The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates. These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts. Tax updates as of October:Your proceeds from the sale of eligible apps and In‑App Purchases have been increased in: Nepal: Apple no longer remits Nepal value-added tax (VAT) for local developers and proceeds were increased accordingly. Kazakhstan: Apple no longer remits Kazakstan VAT for local developers and proceeds were increased accordingly. Madeira: Decrease of the Madeira VAT rate from 5% to 4% for news publications, magazines and other periodicals, books, and audiobooks. Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple will not remit VAT in Nepal and Kazakhstan for local developers.Learn more about your proceedsView payments and proceedsDownload financial reportsPrice updates as of December 2: Pricing for apps and In-App Purchases will be updated for the Japan and Türkiye storefronts if you haven’t selected one of these as the base for your app or In‑App Purchases. If you’ve selected the Japan or Türkiye storefront as the base for your app or In-App Purchase, prices won’t change. On other storefronts, prices will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription and won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes. As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by country or regionSet a price for an In-App Purchase",
    "author": "",
    "published": "Thu, 14 Nov 2024 14:00:47 PST",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "e393e3aa-4a4c-4d69-9624-7f75dc29aa15",
    "title": "Enhancements to the App Store featuring process",
    "link": "https://developer.apple.com/news/?id=nx3eotat",
    "description": "Share your app or game’s upcoming content and enhancements for App Store featuring consideration with new Featuring Nominations in App Store Connect. Submit a nomination to tell our team about a new launch, in-app content, or added functionality. If you’re featured in select placements on the Today tab, you’ll also receive a notification via the App Store Connect app.In addition, you can promote your app or game’s biggest moments — such as an app launch, new version, or select featuring placements on the App Store — with readymade marketing assets. Use the App Store Connect app to generate Apple-designed assets and share them to your social media channels. Include the provided link alongside your assets so people can easily download your app or game on the App Store.Learn more about getting featuredSubmit a Featuring Nomination",
    "author": "",
    "published": "Tue, 12 Nov 2024 07:00:19 PST",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/B050D898-AB7F-47BE-ACF4-61EBB0E3288F/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "5c196050-41e3-4092-9370-7ae3f66f76e1",
    "title": "Introducing Plinky: My Love Letter To Links",
    "link": "https://fabisevi.ch/2024/05/09/introducing-plinky/",
    "description": "The post below was written by me, originally featured on the Plinky blog. To celebrate the launch of Plinky you can get 50% off of a yearly subscription by redeeming this offer: plinky.app/offer/REDPANDA There are few words I've ever said more excitedly than these: I want to tell you about my latest app, Plinky. Plinky makes it incredibly easy to do something we do every day, save links for later. You may already have a way to save links, I know I've tried every method under the sun, to the point where I decided to build my own app. That app is Plinky, and today it's available to download on the App Store. Over the last 18 months people have been loving Plinky, because it fixes the same problems I ran into when I've tried to save links in the past.",
    "author": "Joe Fabisevich",
    "published": "Thu, 09 May 2024 00:00:00 GMT",
    "image": "/static/c3d9146a8edf380ee267c61558f3a91b/ec7ce/plinky-screenshots.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "97831d2b-f9ab-439d-949b-0276da9aca30",
    "title": "The Reasoning Computer",
    "link": "https://fabisevi.ch/2023/11/10/the-reasoning-computer/",
    "description": "The Turing test is dead, and we killed it. The Turing test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. From the 1940s 1 to the 2010s people programmed computers, and computers could only do what they were programmed to do in a rules-based deterministic manner. Sometimes a person would program the computer and it would do something unexpected, but 100 out of 100 times the computer was doing what it was programmed to do whether the person liked it or not. While there has been experimentation with what today we call AI since the 1950s, those machines were a long ways away from passing the Turing test. Why does using ChatGPT feel more like a conversation with the smartest person you know than a computer? It's because ChatGPT doesn't solve problems deterministically the way a programmed computer does, it solves them probabilistically. 2 ChatGPT demonstrates the ability to think about something in a logical, sensible way, the definition of reasoning. 3 We've created something completely new here, a reasoning computer. 4",
    "author": "Joe Fabisevich",
    "published": "Fri, 10 Nov 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "8670964a-ea34-44a3-95ef-5c6939997547",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "f47ae4aa-0606-4e46-ac26-2d6f7dfc2ec2",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "aaff780a-9065-4e4d-8c05-82f087cc0623",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "c98129f0-cc04-4390-9310-ee4c5a839b87",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  }
]
