{
  "id": "62619e9d-754c-4da4-89e4-089012c63b13",
  "title": "Reverse-Engineering the Polynomial Constants in the Pentium’s FPU",
  "link": "https://hackaday.com/2025/01/05/reverse-engineering-the-polynomial-constants-in-the-pentiums-fpu/",
  "description": "Released in 1993, Intel’s Pentium processor was a marvel of technological progress. Its floating point unit (FPU) was a big improvement over its predecessors that still used the venerable CORDIC …read more",
  "author": "Maya Posch",
  "published": "Sun, 05 Jan 2025 21:00:39 +0000",
  "source": "https://hackaday.com/blog/feed/",
  "categories": [
    "Reverse Engineering",
    "pentium",
    "polynomial"
  ],
  "byline": "",
  "length": 1844,
  "excerpt": "Released in 1993, Intel’s Pentium processor was a marvel of technological progress. Its floating point unit (FPU) was a big improvement over its predecessors that still used the venerable COR…",
  "siteName": "Hackaday",
  "favicon": "https://hackaday.com/wp-content/themes/hackaday-2/img/hackaday-logo_1024x1024.png?v=3",
  "text": "Skip to content Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. (Credit: Ken Shirriff) Released in 1993, Intel’s Pentium processor was a marvel of technological progress. Its floating point unit (FPU) was a big improvement over its predecessors that still used the venerable CORDIC algorithm. In a recent blog post [Ken Shirriff] takes an up-close look at the FPU and associated ROMs in the Pentium die that enable its use of polynomials. Even with 3.1 million transistors, the Pentium die is still on a large enough process node that it can be readily analyzed with an optical microscope. In the blog post, [Ken] shows how you can see the constants in each ROM section, with each bit set as either a transistor (‘1’) or no transistor (‘0’), making read-out very easy. The example looks at the constant of pi, which the Pentium’s FPU has stored as a version with no fewer than 67 significand bits along with its exponent. Multiplexer circuitry allows for the selection of the appropriate entry in the ROM. The exponent section always takes up 18 bits (1 for the significand sign). The significand section is actually 68 bits total, but it starts with a mysterious first bit with no apparent purpose. After analyzing and transcribing the 304 total constants like this, [Ken] explains how these constants are used with polynomial approximations. This feature allows the Pentium’s FPU to be about 2-3 times faster than the 486 with CORDIC, giving even home users access to significant FPU features a few years before the battle of MMX, 3DNow!, SSE, and today’s AVX extensions began. Featured image: A diagram of the constant ROM and supporting circuitry. Most of the significand ROM has been cut out to make it fit. (Credit: Ken Shirriff)",
  "image": "https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium_rom-overview-diagram-w700.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n    \n\n    \u003cp\u003e\u003ca href=\"#content\"\u003eSkip to content\u003c/a\u003e\u003c/p\u003e\n\n    \u003cdiv id=\"content\"\u003e\n        \u003cmain id=\"main\" role=\"main\"\u003e\n\n        \n            \n\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"post-752347\"\u003e\n    \n\n    \u003cdiv itemprop=\"articleBody\"\u003e\n        \u003cfigure id=\"attachment_752351\" aria-describedby=\"caption-attachment-752351\"\u003e\u003ca href=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg\"\u003e\u003cimg decoding=\"async\" data-attachment-id=\"752351\" data-permalink=\"https://hackaday.com/2025/01/05/reverse-engineering-the-polynomial-constants-in-the-pentiums-fpu/righto_ken_shirriff_pentium-labeled/\" data-orig-file=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg\" data-orig-size=\"2061,2154\" data-comments-opened=\"1\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"righto_ken_shirriff_pentium-labeled\" data-image-description=\"\u0026lt;p\u0026gt;https://www.righto.com/2025/01/pentium-floating-point-ROM.html\u0026lt;/p\u0026gt;\n\" data-image-caption=\"\u0026lt;p\u0026gt;Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. (Credit: Ken Shirriff)\u0026lt;/p\u0026gt;\n\" data-medium-file=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?w=383\" data-large-file=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?w=598\" src=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?w=383\" alt=\"Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. (Credit: Ken Shirriff)\" width=\"383\" height=\"400\" srcset=\"https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg 2061w, https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?resize=239,250 239w, https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?resize=383,400 383w, https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?resize=598,625 598w, https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?resize=1470,1536 1470w, https://hackaday.com/wp-content/uploads/2025/01/righto_ken_shirriff_pentium-labeled.jpg?resize=1960,2048 1960w\" sizes=\"(max-width: 383px) 100vw, 383px\"/\u003e\u003c/a\u003e\u003cfigcaption id=\"caption-attachment-752351\"\u003eDie photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. (Credit: Ken Shirriff)\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003eReleased in 1993, Intel’s Pentium processor was a marvel of technological progress. Its floating point unit (FPU) was a big improvement over its predecessors that still used the venerable CORDIC algorithm. In a recent blog post [Ken Shirriff] takes an \u003ca href=\"https://www.righto.com/2025/01/pentium-floating-point-ROM.html\" target=\"_blank\"\u003eup-close look at the FPU and associated ROMs\u003c/a\u003e in the Pentium die that enable its use of polynomials. Even with 3.1 million transistors, the Pentium die is still on a large enough process node that it can be readily analyzed with an optical microscope.\u003c/p\u003e\n\u003cp\u003eIn the blog post, [Ken] shows how you can see the constants in each ROM section, with each bit set as either a transistor (‘1’) or no transistor (‘0’), making read-out very easy. The example looks at the constant of pi, which the Pentium’s FPU has stored as a version with no fewer than 67 \u003ca href=\"https://en.wikipedia.org/wiki/Significand\" target=\"_blank\"\u003esignificand\u003c/a\u003e bits along with its exponent.\u003c/p\u003e\n\n\u003cp\u003eMultiplexer circuitry allows for the selection of the appropriate entry in the ROM. The exponent section always takes up 18 bits (1 for the significand sign). The significand section is actually 68 bits total, but it starts with a mysterious first bit with no apparent purpose.\u003c/p\u003e\n\u003cp\u003eAfter analyzing and transcribing the 304 total constants like this, [Ken] explains how these constants are used with polynomial approximations. This feature allows the Pentium’s FPU to be about 2-3 times faster than the 486 with CORDIC, giving even home users access to significant FPU features a few years before the battle of MMX, 3DNow!, SSE, and today’s AVX extensions began.\u003c/p\u003e\n\u003cp\u003eFeatured image: A diagram of the constant ROM and supporting circuitry. Most of the significand ROM has been cut out to make it fit. (Credit: \u003ca href=\"https://www.righto.com/2025/01/pentium-floating-point-ROM.html\" target=\"_blank\"\u003eKen Shirriff\u003c/a\u003e)\u003c/p\u003e\n\t            \u003c/div\u003e\n    \u003cul\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhackaday.com%2F2025%2F01%2F05%2Freverse-engineering-the-polynomial-constants-in-the-pentiums-fpu%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_face.png\"/\u003e \u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                        \u003ca href=\"https://twitter.com/intent/tweet?text=Reverse-Engineering%20The%20Polynomial%20Constants%20In%20The%20Pentium’s%20FPU%20via%20@hackaday\u0026amp;url=https://hackaday.com/2025/01/05/reverse-engineering-the-polynomial-constants-in-the-pentiums-fpu/\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_twitter.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.linkedin.com/shareArticle?url=https%3A%2F%2Fhackaday.com%2F2025%2F01%2F05%2Freverse-engineering-the-polynomial-constants-in-the-pentiums-fpu%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_in.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                \u003ca href=\"mailto:?subject=Reverse-Engineering+The+Polynomial+Constants+In+The+Pentium%E2%80%99s+FPU | Hackaday\u0026amp;body=https%3A%2F%2Fhackaday.com%2F2025%2F01%2F05%2Freverse-engineering-the-polynomial-constants-in-the-pentiums-fpu%2F\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_mail1.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\u003c/ul\u003e\n    \n\u003c/article\u003e\n\n            \t\n\t\n            \n\n            \n\n\n        \n        \n\n        \n        \n\n        \n        \u003c/main\u003e\n    \u003c/div\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-05T21:00:39Z",
  "modifiedTime": "2025-01-05T20:00:51Z"
}
