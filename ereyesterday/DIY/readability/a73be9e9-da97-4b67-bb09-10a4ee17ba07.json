{
  "id": "a73be9e9-da97-4b67-bb09-10a4ee17ba07",
  "title": "Atomic Clock Trades Receiver for an ESP8266",
  "link": "https://hackaday.com/2025/04/07/atomic-clock-trades-receiver-for-an-esp8266/",
  "description": "The advantage of a radio-controlled clock that receives the time signal from WWVB is that you never have to set it again. Whether it’s a little digital job on your …read more",
  "author": "Tom Nardi",
  "published": "Mon, 07 Apr 2025 23:00:41 +0000",
  "source": "https://hackaday.com/blog/feed/",
  "categories": [
    "clock hacks",
    "Microcontrollers",
    "atomic clock",
    "ESP8266",
    "radio clock",
    "simulator",
    "wwvb"
  ],
  "byline": "",
  "length": 2047,
  "excerpt": "The advantage of a radio-controlled clock that receives the time signal from WWVB is that you never have to set it again. Whether it’s a little digital job on your desk, or some big analog wa…",
  "siteName": "Hackaday",
  "favicon": "https://hackaday.com/wp-content/themes/hackaday-2/img/hackaday-logo_1024x1024.png?v=3",
  "text": "Skip to content The advantage of a radio-controlled clock that receives the time signal from WWVB is that you never have to set it again. Whether it’s a little digital job on your desk, or some big analog wall clock that’s hard to access, they’ll all adjust themselves as necessary to keep perfect time. But what if the receiver conks out on you? Well, you’d still have a clock. But you’d have to set it manually like some kind of Neanderthal. That wasn’t acceptable to [jim11662418], so after he yanked the misbehaving WWVB receiver from his clock, he decided to replace it with an ESP8266 that could connect to the Internet and get the current time via Network Time Protocol (NTP). This modification was made all the easier by the fact that the WWVB receiver was its own PCB, connected to the clock’s main board by three wires: one for the clock signal, another that gets pulled low when the clock wants to turn on the receiver (usually these clocks only update themselves once a day), and of course, ground. It was simply a matter of connecting the ESP8266 dev board up to the two digital lines and writing some code that would mimic the responses from the original receiver. If you take a look through the provided source code, a comment explains that the WWVB signal is recreated based on the official documentation from the National Institute of Standards and Technology (NIST) website. There are functions in the code to bang out the 500 ms “one” and 200 ms “zero” bits, and once the microcontroller has picked up the correct time from the Internet, they’re called in quick succession to build the appropriate time signal. As such, this code should work on any clock that has an external WWVB receiver like this, but as always, your mileage may vary. This is a very clean hack, but if you wanted to pull off something similar without having to gut all the clocks in your house, we’ve seen a WWVB simulator that can broadcast an NTP-backed time signal to anything listening nearby.",
  "image": "https://hackaday.com/wp-content/uploads/2025/04/atomicesp_feat.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n    \n\n    \u003cp\u003e\u003ca href=\"#content\"\u003eSkip to content\u003c/a\u003e\u003c/p\u003e\n\n    \u003cdiv id=\"content\"\u003e\n        \u003cmain id=\"main\" role=\"main\"\u003e\n\n        \n            \n\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"post-770783\"\u003e\n    \n\n    \u003cdiv itemprop=\"articleBody\"\u003e\n        \u003cp\u003eThe advantage of a radio-controlled clock that receives the time signal from WWVB is that you never have to set it again. Whether it’s a little digital job on your desk, or some big analog wall clock that’s hard to access, they’ll all adjust themselves as necessary to keep perfect time. But what if the receiver conks out on you?\u003c/p\u003e\n\u003cp\u003eWell, you’d still have a clock. But you’d have to set it manually like some kind of Neanderthal. That wasn’t acceptable to [jim11662418], so after he yanked the misbehaving WWVB receiver from his clock, \u003ca href=\"https://github.com/jim11662418/Atomic-Clock-NTP-Modification\" target=\"_blank\"\u003ehe decided to replace it with an ESP8266\u003c/a\u003e that could connect to the Internet and get the current time via Network Time Protocol (NTP).\u003c/p\u003e\n\n\u003cp\u003eThis modification was made all the easier by the fact that the WWVB receiver was its own PCB, connected to the clock’s main board by three wires: one for the clock signal, another that gets pulled low when the clock wants to turn on the receiver (usually these clocks only update themselves once a day), and of course, ground. It was simply a matter of connecting the ESP8266 dev board up to the two digital lines and writing some code that would mimic the responses from the original receiver.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png\" target=\"_blank\"\u003e\u003cimg decoding=\"async\" data-attachment-id=\"770788\" data-permalink=\"https://hackaday.com/2025/04/07/atomic-clock-trades-receiver-for-an-esp8266/atomicesp_detail/\" data-orig-file=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png\" data-orig-size=\"800,377\" data-comments-opened=\"1\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"atomicesp_detail\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png?w=400\" data-large-file=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png?w=800\" src=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png\" alt=\"\" width=\"800\" height=\"377\" srcset=\"https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png 800w, https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png?resize=250,118 250w, https://hackaday.com/wp-content/uploads/2025/04/atomicesp_detail.png?resize=400,189 400w\" sizes=\"(max-width: 800px) 100vw, 800px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf you take a look through the provided source code, a comment explains that the WWVB signal is recreated \u003ca href=\"https://www.nist.gov/pml/time-and-frequency-division/time-distribution/radio-station-wwvb/wwvb-time-code-format\" target=\"_blank\"\u003ebased on the official documentation\u003c/a\u003e from the National Institute of Standards and Technology (NIST) website. There are functions in the code to bang out the 500 ms “one” and 200 ms “zero” bits, and once the microcontroller has picked up the correct time from the Internet, they’re called in quick succession to build the appropriate time signal. As such, this code \u003cem\u003eshould\u003c/em\u003e work on any clock that has an external WWVB receiver like this, but as always, your mileage may vary.\u003c/p\u003e\n\u003cp\u003eThis is a very clean hack, but if you wanted to pull off something similar without having to gut all the clocks in your house, we’ve seen a \u003ca href=\"https://hackaday.com/2024/01/14/simulating-a-time-keeping-radio-signal/\"\u003eWWVB simulator that can broadcast an NTP-backed time signal\u003c/a\u003e to anything listening nearby.\u003c/p\u003e\n\t            \u003c/div\u003e\n    \u003cul\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F07%2Fatomic-clock-trades-receiver-for-an-esp8266%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_face.png\"/\u003e \u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                        \u003ca href=\"https://twitter.com/intent/tweet?text=Atomic%20Clock%20Trades%20Receiver%20For%20An%20ESP8266%20via%20@hackaday\u0026amp;url=https://hackaday.com/2025/04/07/atomic-clock-trades-receiver-for-an-esp8266/\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_twitter.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.linkedin.com/shareArticle?url=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F07%2Fatomic-clock-trades-receiver-for-an-esp8266%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_in.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                \u003ca href=\"mailto:?subject=Atomic+Clock+Trades+Receiver+For+An+ESP8266 | Hackaday\u0026amp;body=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F07%2Fatomic-clock-trades-receiver-for-an-esp8266%2F\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_mail1.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\u003c/ul\u003e\n    \n\u003c/article\u003e\n\n            \t\n\t\n            \n\n            \n\n\n        \n        \n\n        \n        \n\n        \n        \u003c/main\u003e\n    \u003c/div\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-07T23:00:41Z",
  "modifiedTime": "2025-04-07T20:33:14Z"
}
