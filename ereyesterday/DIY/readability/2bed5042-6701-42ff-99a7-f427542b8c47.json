{
  "id": "2bed5042-6701-42ff-99a7-f427542b8c47",
  "title": "Why You Should Keep All Your Linux Dotfiles on GitHub",
  "link": "https://www.howtogeek.com/why-you-should-keep-all-your-dotfiles-on-github/",
  "description": "Preferences change; keep track of yours.",
  "author": "Bobby Jack",
  "published": "Mon, 20 Jan 2025 21:45:14 GMT",
  "source": "https://www.howtogeek.com/feed/",
  "categories": [
    "Linux",
    "GitHub"
  ],
  "byline": "Bobby Jack",
  "length": 7775,
  "excerpt": "Preferences change; keep track of yours.",
  "siteName": "How-To Geek",
  "favicon": "https://www.howtogeek.com/public/build/images/favicon-240x240.f06f736a.png",
  "text": "Summary Managing dotfiles with git can save time and provide a robust backup option. Storing dotfiles in a version control system (VCS) like git can ensure a consistent setup across multiple machines. Using GitHub to host dotfiles allows for easy sharing and collaboration. Dotfiles are an accessible, powerful way of configuring your Linux system. But how do you keep track of them all and reuse them when necessary? Try git. What Are Dotfiles? On Linux, any file whose name begins with a \".\" is a hidden file. By default, it won't show in your file manager or a file listing on the command line. Some Linux programs use hidden files for configuration, often dumping them in your home directory. This is a useful setup because it keeps configuration out of the way while ensuring it's still accessible. Since this configuration is in plain text files, it's easy to read and edit. You can also use the Linux command-line toolset to work with your system's configuration. Common examples of dotfiles include: .bashrc, .zshrc .exrc .gitconfig .npmrc How Can Git or GitHub Help? Dotfiles are great, but they're system-specific. When you need to replace your computer, use a secondary device, or access a remote server, you might find yourself setting things up all over again. Storing your dotfiles in a VCS (Version Control System) can help you avoid this repetitive task, allowing you to instantly reuse your configuration on another machine. Just check out your repository and you'll get the same shell aliases, familiar themes, and consistent behavior. What's more, storing dotfiles in git is a robust backup option. You can even inspect your repository's history to discover when—and why—you changed specific configuration. In a collaborative setting, you might even share your dotfiles via git to ensure all team members have a consistent environment. For this purpose, GitHub is the cream of the crop. If you have another place to host your git repository, you can certainly do that, but GitHub makes it a lot easier. The Best Way of Managing Your Dotfiles With Git and GitHub First, understand that any form of storing your dotfiles in git will be a major win. There are specific details on exactly the best way to do so, but if you can store a file in git, update it, and check it out, you will benefit significantly from managing your dotfiles this way. However, the following approach is widely recommended online and it works for me. This particular setup should help you keep everything in sync with the least effort. Set up a Bare Repository and Some Scaffolding Since your home directory likely has a lot of stuff you don't want in your dotfiles repository, it's best to avoid a standard setup. Instead, you can manage your dotfiles in a bare repository. A bare repository is like a normal repository without the actual project files. It has all the git metadata that describes the history of those files, it just doesn't have the files themselves. The files can live elsewhere—in your work directory—you'll just use the bare repository to version control them. Start by creating a bare repository in a new location, for example: mkdir $HOME/.dotfilesgit init --bare $HOME/.dotfiles When you work with this repository, you'll need to supply a working directory (for the files) and a git directory (for the repository itself): git --work-tree=$HOME --git-dir=$HOME/.dotfiles ... Rather than typing this each time you use git, it makes sense to set up an alias. You can also supply the path to the bare repository itself so you can use it from any directory: alias dotfiles=\"/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME\" Store Your Dotfiles Start by identifying a dotfile you want to version control. You can then run these commands to start version controlling your .bashrc file, for example: cd $HOMEdotfiles add .bashrcdotfiles commit -m \"Bash run control file\" Apart from using the dotfiles alias instead of the plain git command, you can use git to track these files just as you normally would. This approach is actually slightly easier because you can run a command like \"dotfiles log\" from any directory. Upload Your Repository to GitHub You may find it convenient to host your repository on a provider like GitHub. This can make it easier to share access to your dotfiles, especially from machines on a different network. It's easy to do this, even with an existing repository: Start at the Create a New Repository page. Enter a Repository Name. Choose either a Public or Private repository; Private is probably best (see below). Click Create Repository. At this point, you'll be shown a screen with setup instructions. To push your existing repository, simply run these two commands: dotfiles remote add origin https://github.com/\u003cuser\u003e/\u003crepo\u003e.gitdotfiles push -u origin main Where is your GitHub username and is the name you chose for your repository. Be very careful about uploading your repo to GitHub: your dotfiles may contain sensitive data. Ideally, you should avoid committing files that contain passwords to any repository. If you can't avoid it, consider at least using a private GitHub repository; you will need to pay for this, however. Use on Another System To share your dotfiles on another machine, you'll need to repeat the above processes and check out the bare repository. In particular, this means there are two important steps. First, check out a bare copy of your repository: cd $HOMEgit clone --bare https://github.com/\u003cuser\u003e/\u003crepo\u003e.git This will typically check out into a directory named .git. Once checked out, you are free to rename this. Recreate the git wrapper alias you're using: alias dotfiles=\"/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME\" You can now populate your working directory—your HOME—with your version-controlled dotfiles: dotfiles checkout At this point, you may see an error about overwriting working tree files. This is because you probably already have old or default dotfiles like .bashrc. Simply remove or move these, then repeat the checkout. Version controlling your dotfiles will save a lot of hassle when you upgrade or switch systems. You'll also be able to check a complete history and see when you changed what, and why.",
  "image": "https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2025/01/a-dot-file-with-the-github-logo-in-the-center.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article-body\" itemprop=\"articleBody\"\u003e\n\n\u003cdiv id=\"custom_block_0\"\u003e\n\n                    \u003ch3\u003eSummary\u003c/h3\u003e\n        \n            \u003cdiv\u003e    \u003cul\u003e\n                    \u003cli\u003e\n                                        Managing dotfiles with git can save time and provide a robust backup option.\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        Storing dotfiles in a version control system (VCS) like git can ensure a consistent setup across multiple machines.\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        Using GitHub to host dotfiles allows for easy sharing and collaboration.\n                        \u003c/li\u003e\n            \u003c/ul\u003e\n\u003c/div\u003e\n    \n        \n    \u003c/div\u003e\n\u003cp\u003eDotfiles are an accessible, powerful way of configuring your Linux system. But how do you keep track of them all and reuse them when necessary? Try git.\u003c/p\u003e    \u003ch2 id=\"what-are-dotfiles\"\u003e\n                        What Are Dotfiles?\n               \u003c/h2\u003e\n\u003cp\u003eOn Linux, any file whose name begins with a \u0026#34;.\u0026#34; is a hidden file. By default, it won\u0026#39;t show in your file manager or a file listing on the command line.\u003c/p\u003e    \n\u003cp\u003eSome Linux programs \u003ca href=\"https://www.howtogeek.com/the-hidden-files-in-your-linux-home-directory-explained/\" target=\"_blank\"\u003euse hidden files for configuration\u003c/a\u003e, often dumping them in your home directory. This is a useful setup because it keeps configuration out of the way while ensuring it\u0026#39;s still accessible. Since this configuration is in plain text files, it\u0026#39;s easy to read and edit. You can also use the Linux command-line toolset to work with your system\u0026#39;s configuration.\u003c/p\u003e    \n\u003cp\u003eCommon examples of dotfiles include:\u003c/p\u003e        \u003cul\u003e\n                    \u003cli\u003e\n                                        .bashrc, .zshrc\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        .exrc\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        .gitconfig\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        .npmrc\n                        \u003c/li\u003e\n            \u003c/ul\u003e\n\u003ch2 id=\"how-can-git-or-github-help\"\u003e\n                        How Can Git or GitHub Help?\n               \u003c/h2\u003e\n\u003cp\u003eDotfiles are great, but they\u0026#39;re system-specific. When you need to replace your computer, use a secondary device, or access a remote server, you might find yourself setting things up all over again.\u003c/p\u003e    \n\u003cp\u003eStoring your dotfiles in a VCS (Version Control System) can help you avoid this repetitive task, allowing you to instantly reuse your configuration on another machine. Just check out your repository and you\u0026#39;ll get the same shell aliases, familiar themes, and consistent behavior.\u003c/p\u003e    \n\u003cp\u003eWhat\u0026#39;s more, storing dotfiles in git is a robust backup option. You can even inspect your repository\u0026#39;s history to discover when—and why—you changed specific configuration. In a collaborative setting, you might even share your dotfiles via git to ensure all team members have a consistent environment.\u003c/p\u003e    \n\u003cp\u003eFor this purpose, \u003ca href=\"https://www.howtogeek.com/github-is-the-best-place-for-free-and-open-source-software/\" target=\"_blank\"\u003eGitHub is the cream of the crop\u003c/a\u003e. If you have another place to host your git repository, you can certainly do that, but GitHub makes it a lot easier.\u003c/p\u003e    \u003ch2 id=\"the-best-way-of-managing-your-dotfiles-with-git-and-github\"\u003e\n                        The Best Way of Managing Your Dotfiles With Git and GitHub\n               \u003c/h2\u003e\n\u003cp\u003eFirst, understand that any form of storing your dotfiles in git will be a major win. There are specific details on exactly the best way to do so, but if you can store a file in git, update it, and check it out, you will benefit significantly from managing your dotfiles this way.\u003c/p\u003e    \n\u003cp\u003eHowever, the following approach is widely recommended online and it works for me. This particular setup should help you keep everything in sync with the least effort.\u003c/p\u003e    \u003ch3 id=\"set-up-a-bare-repository-and-some-scaffolding\"\u003e\n            Set up a Bare Repository and Some Scaffolding\n    \u003c/h3\u003e\n\n\u003cp\u003eSince your home directory likely has a lot of stuff you don\u0026#39;t want in your dotfiles repository, it\u0026#39;s best to avoid a standard setup. Instead, you can manage your dotfiles in a bare repository.\u003c/p\u003e    \n\u003cp\u003eA bare repository is like a normal repository without the actual project files. It has all the git metadata that describes the history of those files, it just doesn\u0026#39;t have the files themselves. The files can live elsewhere—in your work directory—you\u0026#39;ll just use the bare repository to version control them.\u003c/p\u003e    \n\u003cp\u003eStart by creating a bare repository in a new location, for example:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003emkdir \u003cspan\u003e$HOME\u003c/span\u003e/.dotfiles\u003cbr/\u003egit init --bare \u003cspan\u003e$HOME\u003c/span\u003e/.dotfiles\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eWhen you work with this repository, you\u0026#39;ll need to supply a working directory (for the files) and a git directory (for the repository itself):\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003egit --work-tree=\u003cspan\u003e$HOME\u003c/span\u003e --git-dir=\u003cspan\u003e$HOME\u003c/span\u003e/.dotfiles ...\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eRather than typing this each time you use git, it makes sense to \u003ca href=\"https://www.howtogeek.com/439736/how-to-create-aliases-and-shell-functions-on-linux/\" target=\"_blank\"\u003eset up an alias\u003c/a\u003e. You can also supply the path to the bare repository itself so you can use it from any directory:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003e\u003cspan\u003ealias\u003c/span\u003e dotfiles=\u003cspan\u003e\u0026#34;/usr/bin/git --git-dir=\u003cspan\u003e$HOME\u003c/span\u003e/.dotfiles --work-tree=\u003cspan\u003e$HOME\u003c/span\u003e\u0026#34;\u003c/span\u003e \u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\u003ch3 id=\"store-your-dotfiles\"\u003e\n            Store Your Dotfiles\n    \u003c/h3\u003e\n\n\u003cp\u003eStart by identifying a dotfile you want to version control.\u003c/p\u003e    \n\u003cp\u003eYou can then run these commands to start version controlling \u003ca href=\"https://www.howtogeek.com/the-linux-bashrc-file-explained/\" target=\"_blank\"\u003eyour .bashrc file\u003c/a\u003e, for example:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003e\u003cspan\u003ecd\u003c/span\u003e \u003cspan\u003e$HOME\u003c/span\u003e\u003cbr/\u003edotfiles add .bashrc\u003cbr/\u003edotfiles commit -m \u003cspan\u003e\u0026#34;Bash run control file\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eApart from using the dotfiles alias instead of the plain git command, you can use git to track these files just as you normally would. This approach is actually slightly easier because you can run a command like \u0026#34;dotfiles log\u0026#34; from any directory.\u003c/p\u003e    \u003ch3 id=\"upload-your-repository-to-github\"\u003e\n            Upload Your Repository to GitHub\n    \u003c/h3\u003e\n\n\u003cp\u003eYou may find it convenient to host your repository on a provider like GitHub. This can make it easier to share access to your dotfiles, especially from machines on a different network. It\u0026#39;s easy to do this, even with an existing repository:\u003c/p\u003e        \u003col\u003e\n                    \u003cli\u003e\n                                        Start at the \u003ca href=\"https://github.com/new\" target=\"_blank\"\u003eCreate a New Repository page\u003c/a\u003e.\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        Enter a Repository Name.\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        Choose either a Public or Private repository; Private is probably best (see below).\n                        \u003c/li\u003e\n                    \u003cli\u003e\n                                        Click Create Repository.\n                        \u003c/li\u003e\n            \u003c/ol\u003e\n\n\u003cp\u003eAt this point, you\u0026#39;ll be shown a screen with setup instructions. To push your existing repository, simply run these two commands:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003edotfiles remote add origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git\u003cbr/\u003edotfiles push -u origin main\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eWhere is your GitHub username and is the name you chose for your repository.\u003c/p\u003e    \n\n\u003cdiv id=\"custom_block_35\"\u003e\n\n        \n            \u003cp\u003eBe very careful about uploading your repo to GitHub: your dotfiles may contain sensitive data. Ideally, you should avoid committing files that contain passwords to any repository. If you can\u0026#39;t avoid it, consider at least using a private GitHub repository; you will need to pay for this, however.\u003c/p\u003e\n    \n        \n    \u003c/div\u003e\u003ch3 id=\"use-on-another-system\"\u003e\n            Use on Another System\n    \u003c/h3\u003e\n\n\u003cp\u003eTo share your dotfiles on another machine, you\u0026#39;ll need to repeat the above processes and check out the bare repository. In particular, this means there are two important steps. First, check out a bare copy of your repository:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003e\u003cspan\u003ecd\u003c/span\u003e \u003cspan\u003e$HOME\u003c/span\u003e\u003cbr/\u003egit \u003cspan\u003eclone\u003c/span\u003e --bare https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\n\u003cdiv id=\"custom_block_39\"\u003e\n\n        \n            \u003cp\u003eThis will typically check out into a directory named .git. Once checked out, you are free to rename this.\u003c/p\u003e\n    \n        \n    \u003c/div\u003e\n\u003cp\u003eRecreate the git wrapper alias you\u0026#39;re using:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003e\u003cspan\u003ealias\u003c/span\u003e dotfiles=\u003cspan\u003e\u0026#34;/usr/bin/git --git-dir=\u003cspan\u003e$HOME\u003c/span\u003e/.dotfiles --work-tree=\u003cspan\u003e$HOME\u003c/span\u003e\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eYou can now populate your working directory—your HOME—with your version-controlled dotfiles:\u003c/p\u003e        \u003cpre\u003e        \u003ccode\u003edotfiles checkout\u003cbr/\u003e\u003c/code\u003e\n    \u003c/pre\u003e\n\n\u003cp\u003eAt this point, you may see an error about overwriting working tree files. This is because you probably already have old or default dotfiles like .bashrc. Simply remove or move these, then repeat the checkout.\u003c/p\u003e    \u003chr/\u003e\n\u003cp\u003e Version controlling your dotfiles will save a lot of hassle when you upgrade or switch systems. You\u0026#39;ll also be able to check a complete history and see when you changed what, and why.\u003c/p\u003e    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-01-20T21:45:14Z",
  "modifiedTime": "2025-01-20T21:45:14Z"
}
