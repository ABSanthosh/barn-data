{
  "id": "2e4daeb2-2a81-4277-816f-e8e5780bf8fb",
  "title": "CodeSOD: Objectifying Yourself",
  "link": "https://thedailywtf.com/articles/objectifying-yourself",
  "description": "\"Boy, stringly typed data is hard to work with. I wish there were some easier way to work with it!\" This, presumably, is what Gary's predecessor said. Followed by, \"Wait, I have an idea!\" public static Object createValue(String string) { Object value = parseBoolean(string); if (value != null) { return value; } value = parseInteger(string); if (value != null) { return value; } value = parseDouble(string); if (value != null) { return value; } return string; } This takes a string, and then tries to parse it, first into a boolean, failing that into an integer, and failing that into a double. Otherwise, it returns the original string. And it returns an object, which means you still get to guess what's in there even after this. You just get to guess what it returned, and hope you cast it to the correct type. Which means this almost certainly is called like this: boolean myBoolField = (Boolean)createValue(someStringContainingABool); Which makes the whole thing useless, which is fun. Gary found this code in a \"long since abandoned\" project, and I can't imagine why it ended up getting abandoned. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 28 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1661,
  "excerpt": "\"Boy, stringly typed data is hard to work with. I wish there were some easier way to work with it!\" This, presumably, is what Gary's predecessor said. Followed by, \"Wait, I have an idea!\"",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-28 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. \"Boy, stringly typed data is hard to work with. I wish there were some easier way to work with it!\" This, presumably, is what Gary's predecessor said. Followed by, \"Wait, I have an idea!\" public static Object createValue(String string) { Object value = parseBoolean(string); if (value != null) { return value; } value = parseInteger(string); if (value != null) { return value; } value = parseDouble(string); if (value != null) { return value; } return string; } This takes a string, and then tries to parse it, first into a boolean, failing that into an integer, and failing that into a double. Otherwise, it returns the original string. And it returns an object, which means you still get to guess what's in there even after this. You just get to guess what it returned, and hope you cast it to the correct type. Which means this almost certainly is called like this: boolean myBoolField = (Boolean)createValue(someStringContainingABool); Which makes the whole thing useless, which is fun. Gary found this code in a \"long since abandoned\" project, and I can't imagine why it ended up getting abandoned. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-28\"\u003e2025-04-28\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10900\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u0026#34;Boy, stringly typed data is hard to work with. I wish there were some easier way to work with it!\u0026#34;\u003c/p\u003e\n\u003cp\u003eThis, presumably, is what \u003cstrong\u003eGary\u003c/strong\u003e\u0026#39;s predecessor said. Followed by, \u0026#34;Wait, I have an idea!\u0026#34;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e Object \u003cspan\u003ecreateValue\u003c/span\u003e\u003cspan\u003e(String string)\u003c/span\u003e {\n\t\u003cspan\u003eObject\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e parseBoolean(string);\n\t\u003cspan\u003eif\u003c/span\u003e (value != \u003cspan\u003enull\u003c/span\u003e) {\n\t\t\u003cspan\u003ereturn\u003c/span\u003e value;\n\t}\n\n\tvalue = parseInteger(string);\n\t\u003cspan\u003eif\u003c/span\u003e (value != \u003cspan\u003enull\u003c/span\u003e) {\n\t\t\u003cspan\u003ereturn\u003c/span\u003e value;\n\t}\n\n\tvalue = parseDouble(string);\n\t\u003cspan\u003eif\u003c/span\u003e (value != \u003cspan\u003enull\u003c/span\u003e) {\n\t\t\u003cspan\u003ereturn\u003c/span\u003e value;\n\t}\n\n\t\u003cspan\u003ereturn\u003c/span\u003e string;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis takes a string, and then tries to parse it, first into a boolean, failing that into an integer, and failing that into a double. Otherwise, it returns the original string.\u003c/p\u003e\n\u003cp\u003eAnd it returns an object, which means you still get to guess what\u0026#39;s in there even after this. You just get to guess what it returned, and hope you cast it to the correct type. Which means this almost certainly is called like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003emyBoolField\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e (Boolean)createValue(someStringContainingABool);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich makes the whole thing useless, which is fun.\u003c/p\u003e\n\u003cp\u003eGary found this code in a \u0026#34;long since abandoned\u0026#34; project, and I can\u0026#39;t imagine why it ended up getting abandoned.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-04-28T06:30:00Z",
  "modifiedTime": null
}
