{
  "id": "7407bc87-f434-45e3-b01b-966aefd89cd1",
  "title": "CodeSOD: Does This Spec Turn You On?",
  "link": "https://thedailywtf.com/articles/does-this-spec-turn-you-on",
  "description": "I'm a JSON curmudgeon, in that I think that its type-system, inherited from JavaScript, is bad. It's a limited vocabulary of types, and it forces developers to play odd games of convention. For example, because it lacks any sort of date type, you either have to explode your date out as a sub-dictionary (arguably, the \"right\" approach) or do what most people do- use an ISO formatted string as your date. The latter version requires you to attempt to parse the sting to validate the data, but validating JSON is a whole thing anyway. But, enough about me being old and cranky. Do you know one type JSON supports? Boolean values. Which is why this specification from today's anonymous submitter annoys me so much: field: sw_auto_update type: string valid values: /(on)|(off)/ field: data_auto_update type: string valid values: /(on)|(off)/ field: spanning_tree_protocol type: string valid values: /(on)|(off)/ Their custom validator absolutely requires the use of strings, and absolutely requires that they have these values. Sending a boolean, or worse, the string \"true\" causes the request to get rejected. Our submitter doesn't explain why it's this way, but I have a strong suspicion that it's because it was originally designed to support a form submission with radio buttons. The form is long gone, but the API contract remains. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 30 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1697,
  "excerpt": "I'm a JSON curmudgeon, in that I think that its type-system, inherited from JavaScript, is bad. It's a limited vocabulary of types, and it forces developers to play odd games of convention. For example, because it lacks any sort of date type, you either have to explode your date out as a sub-dictionary (arguably, the \"right\" approach) or do what most people do- use an ISO formatted string as your date. The latter version requires you to attempt to parse the sting to validate the data, but validating JSON is a whole thing anyway. But, enough about me being old and cranky. Do you know one type JSON supports? Boolean values.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-01-30 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. I'm a JSON curmudgeon, in that I think that its type-system, inherited from JavaScript, is bad. It's a limited vocabulary of types, and it forces developers to play odd games of convention. For example, because it lacks any sort of date type, you either have to explode your date out as a sub-dictionary (arguably, the \"right\" approach) or do what most people do- use an ISO formatted string as your date. The latter version requires you to attempt to parse the sting to validate the data, but validating JSON is a whole thing anyway. But, enough about me being old and cranky. Do you know one type JSON supports? Boolean values. Which is why this specification from today's anonymous submitter annoys me so much: field: sw_auto_update type: string valid values: /(on)|(off)/ field: data_auto_update type: string valid values: /(on)|(off)/ field: spanning_tree_protocol type: string valid values: /(on)|(off)/ Their custom validator absolutely requires the use of strings, and absolutely requires that they have these values. Sending a boolean, or worse, the string \"true\" causes the request to get rejected. Our submitter doesn't explain why it's this way, but I have a strong suspicion that it's because it was originally designed to support a form submission with radio buttons. The form is long gone, but the API contract remains. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-30\"\u003e2025-01-30\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10838\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eI\u0026#39;m a JSON curmudgeon, in that I think that its type-system, inherited from JavaScript, is bad. It\u0026#39;s a limited vocabulary of types, and it forces developers to play odd games of convention. For example, because it lacks any sort of date type, you either have to explode your date out as a sub-dictionary (arguably, the \u0026#34;right\u0026#34; approach) or do what most people do- use an ISO formatted string as your date. The latter version requires you to attempt to parse the sting to validate the data, but \u003cem\u003evalidating\u003c/em\u003e JSON is a whole thing anyway.\u003c/p\u003e\n\u003cp\u003eBut, enough about me being old and cranky. Do you know one type JSON supports? Boolean values.\u003c/p\u003e\n\u003cp\u003eWhich is why this specification from today\u0026#39;s anonymous submitter annoys me so much:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efield: sw_auto_update\ntype: string\nvalid values: /(on)|(off)/\n\nfield: data_auto_update\ntype: string\nvalid values: /(on)|(off)/\n\nfield: spanning_tree_protocol\ntype: string\nvalid values: /(on)|(off)/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTheir custom validator absolutely requires the use of strings, and absolutely requires that they have these values. Sending a boolean, or worse, the string \u0026#34;true\u0026#34; causes the request to get rejected.\u003c/p\u003e\n\u003cp\u003eOur submitter doesn\u0026#39;t explain \u003cem\u003ewhy\u003c/em\u003e it\u0026#39;s this way, but I have a strong suspicion that it\u0026#39;s because it was originally designed to support a form submission with radio buttons. The form is long gone, but the API contract remains.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-01-30T06:30:00Z",
  "modifiedTime": null
}
