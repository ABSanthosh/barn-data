{
  "id": "6c7ba02c-aa41-47b3-bafb-0b2dc4e221f5",
  "title": "Representative Line: Tern Down a Date",
  "link": "https://thedailywtf.com/articles/tern-down-a-date",
  "description": "Today's anonymous submitter has managed to find a way to do date formatting wrong that I don't think I've seen yet. That's always remarkable. Like most such bad code, it checks string lengths and then adds a leading zero, if needed. It's not surprising, but again, it's all in the details: // convert date string to yyyy/MM/DD return dtmValue.Year + \"-\" + ((dtmValue.Month.ToString().Length == 1)? (\"0\" + dtmValue.Month.ToString()): dtmValue.Month.ToString()) + \"-\" + ((dtmValue.Day.ToString().Length == 1)? (\"0\" + dtmValue.Day.ToString()): dtmValue.Day.ToString()); This is only one line, but it has it all, doesn't it. First, we've got good ol' Hungarian notation, which conveys no useful information here. We've got a comment which tells us the code outputs /es, but the code actually outputs -. We've got ternaries that are definitely not helping readability here, plus repeated calls to ToString() instead of maybe just storing the result in a variable. And, for the record, dtmValue.ToString(\"yyyy-MM-dd\") would have done the correct thing. .comment { border: none; } [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 25 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1598,
  "excerpt": "Today's anonymous submitter has managed to find a way to do date formatting wrong that I don't think I've seen yet. That's always remarkable. Like most such bad code, it checks string lengths and then adds a leading zero, if needed. It's not surprising, but again, it's all in the details: // convert date string to yyyy/MM/DD return dtmValue.Year + \"-\" + ((dtmValue.Month.ToString().Length == 1)? (\"0\" + dtmValue.Month.ToString()): dtmValue.Month.ToString()) + \"-\" + ((dtmValue.Day.ToString().Length == 1)? (\"0\" + dtmValue.Day.ToString()): dtmValue.Day.ToString());",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-03-25 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Today's anonymous submitter has managed to find a way to do date formatting wrong that I don't think I've seen yet. That's always remarkable. Like most such bad code, it checks string lengths and then adds a leading zero, if needed. It's not surprising, but again, it's all in the details: // convert date string to yyyy/MM/DD return dtmValue.Year + \"-\" + ((dtmValue.Month.ToString().Length == 1)? (\"0\" + dtmValue.Month.ToString()): dtmValue.Month.ToString()) + \"-\" + ((dtmValue.Day.ToString().Length == 1)? (\"0\" + dtmValue.Day.ToString()): dtmValue.Day.ToString()); This is only one line, but it has it all, doesn't it. First, we've got good ol' Hungarian notation, which conveys no useful information here. We've got a comment which tells us the code outputs /es, but the code actually outputs -. We've got ternaries that are definitely not helping readability here, plus repeated calls to ToString() instead of maybe just storing the result in a variable. And, for the record, dtmValue.ToString(\"yyyy-MM-dd\") would have done the correct thing. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-25\"\u003e2025-03-25\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10877\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eToday\u0026#39;s anonymous submitter has managed to find a way to do date formatting wrong that I don\u0026#39;t think I\u0026#39;ve seen yet. That\u0026#39;s always remarkable. Like most such bad code, it checks string lengths and then adds a leading zero, if needed. It\u0026#39;s not surprising, but again, it\u0026#39;s all in the details:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// convert date string to yyyy/MM/DD\u003c/span\u003e\n\u003cspan\u003ereturn\u003c/span\u003e dtmValue.Year + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e + ((dtmValue.Month.ToString().Length == \u003cspan\u003e1\u003c/span\u003e)?  (\u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + dtmValue.Month.ToString()): dtmValue.Month.ToString()) + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e + ((dtmValue.Day.ToString().Length == \u003cspan\u003e1\u003c/span\u003e)? (\u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + dtmValue.Day.ToString()): dtmValue.Day.ToString());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is only one line, but it has it all, doesn\u0026#39;t it. First, we\u0026#39;ve got good ol\u0026#39; Hungarian notation, which conveys no useful information here. We\u0026#39;ve got a comment which tells us the code outputs \u003ccode\u003e/\u003c/code\u003ees, but the code actually outputs \u003ccode\u003e-\u003c/code\u003e. We\u0026#39;ve got ternaries that are definitely not helping readability here, plus repeated calls to \u003ccode\u003eToString()\u003c/code\u003e instead of maybe just storing the result in a variable.\u003c/p\u003e\n\u003cp\u003eAnd, for the record, \u003ccode\u003edtmValue.ToString(\u0026#34;yyyy-MM-dd\u0026#34;)\u003c/code\u003e would have done the correct thing.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-03-25T06:30:00Z",
  "modifiedTime": null
}
