{
  "id": "64bd354d-560f-434d-8578-fa981aa58746",
  "title": "Coded Smorgasbord: The Saddest Words: What If",
  "link": "https://thedailywtf.com/articles/the-saddest-words-what-if",
  "description": "Conditional statements, we would hope, are one of the most basic and well understood constructs in any programming language. Hope, of course, is for fools and suckers, so let's take a look at a few short snippets. Our first installment comes from Jonas. if (!checkAndDelete(Definitions.DirectoryName, currentTime)); //Empty statement I appreciate the comment, which informs us that this empty statement is intentional. Why it's intentional remains mysterious. Jonas found this while going through linter warnings. After fixing this, there are only 25,000 more warnings to go. Brodey has a similar construct, but from a very different language. If (Session.Item(Session.SessionID \u0026 \"Origional\") IsNot Nothing) Then End If I have to give bonus points for the origional spelling of \"original\". But spelling aside, there's a hint of something sinister here- we're concatenating strings with the SessionId- I don't know what is going wrong here, but it's definitely something. Our last little snippet comes from Midiane. While not a conditional, it shows a misunderstanding of either booleans or comments. $mail-\u003eSMTPAuth = false; // turn on SMTP authentication The comment clearly is out of date with the code (which is the main reason we shouldn't repeat what is in the code as a comment). At least, we hope the comment is just out of date. A worse scenario is that setting the flag equal to false enables it. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Wed, 18 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Coded Smorgasbord"
  ],
  "byline": "Remy Porter",
  "length": 1676,
  "excerpt": "Conditional statements, we would hope, are one of the most basic and well understood constructs in any programming language. Hope, of course, is for fools and suckers, so let's take a look at a few short snippets. Our first installment comes from Jonas.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Coded Smorgasbord on 2024-12-18 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Conditional statements, we would hope, are one of the most basic and well understood constructs in any programming language. Hope, of course, is for fools and suckers, so let's take a look at a few short snippets. Our first installment comes from Jonas. if (!checkAndDelete(Definitions.DirectoryName, currentTime)); //Empty statement I appreciate the comment, which informs us that this empty statement is intentional. Why it's intentional remains mysterious. Jonas found this while going through linter warnings. After fixing this, there are only 25,000 more warnings to go. Brodey has a similar construct, but from a very different language. If (Session.Item(Session.SessionID \u0026 \"Origional\") IsNot Nothing) Then End If I have to give bonus points for the origional spelling of \"original\". But spelling aside, there's a hint of something sinister here- we're concatenating strings with the SessionId- I don't know what is going wrong here, but it's definitely something. Our last little snippet comes from Midiane. While not a conditional, it shows a misunderstanding of either booleans or comments. $mail-\u003eSMTPAuth = false; // turn on SMTP authentication The comment clearly is out of date with the code (which is the main reason we shouldn't repeat what is in the code as a comment). At least, we hope the comment is just out of date. A worse scenario is that setting the flag equal to false enables it.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/coded-smorgasbord\"\u003eCoded Smorgasbord\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-18\"\u003e2024-12-18\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10806\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eConditional statements, we would hope, are one of the most basic and well understood constructs in any programming language. Hope, of course, is for fools and suckers, so let\u0026#39;s take a look at a few short snippets.\u003c/p\u003e\n\u003cp\u003eOur first installment comes from \u003cstrong\u003eJonas\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e (!checkAndDelete(Definitions.DirectoryName, currentTime)); \u003cspan\u003e//Empty statement\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI appreciate the comment, which informs us that this empty statement is intentional. \u003cem\u003eWhy\u003c/em\u003e it\u0026#39;s intentional remains mysterious.\u003c/p\u003e\n\u003cp\u003eJonas found this while going through linter warnings. After fixing this, there are only 25,000 more warnings to go.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBrodey\u003c/strong\u003e has a similar construct, but from a very different language.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eIf\u003c/span\u003e (Session.Item(Session.SessionID \u0026amp; \u003cspan\u003e\u0026#34;Origional\u0026#34;\u003c/span\u003e) IsNot \u003cspan\u003eNothing\u003c/span\u003e) \u003cspan\u003eThen\u003c/span\u003e\n\u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI have to give bonus points for the origional spelling of \u0026#34;original\u0026#34;. But spelling aside, there\u0026#39;s a hint of something sinister here- we\u0026#39;re concatenating strings with the \u003ccode\u003eSessionId\u003c/code\u003e- I don\u0026#39;t know \u003cem\u003ewhat\u003c/em\u003e is going wrong here, but it\u0026#39;s definitely something.\u003c/p\u003e\n\u003cp\u003eOur last little snippet comes from \u003cstrong\u003eMidiane\u003c/strong\u003e. While not a conditional, it shows a misunderstanding of either booleans or comments.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$mail-\u0026gt;SMTPAuth = false; \u003cspan\u003e//\u003c/span\u003e turn on SMTP authentication\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe comment clearly is out of date with the code (which is the main reason we shouldn\u0026#39;t repeat what is in the code as a comment). At least, we \u003cem\u003ehope\u003c/em\u003e the comment is just out of date. A worse scenario is that setting the flag equal to false \u003cem\u003eenables\u003c/em\u003e it.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-12-18T06:30:00Z",
  "modifiedTime": null
}
