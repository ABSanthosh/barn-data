{
  "id": "089eb806-4de9-47f5-9314-e77460dcdb3f",
  "title": "CodeSOD: Device Detection",
  "link": "https://thedailywtf.com/articles/device-detection",
  "description": "There are a lot of cases where the submission is \"this was server side generated JavaScript and they were loading constants\". Which, honestly, is a WTF, but it isn't interesting code. Things like this: if (false === true) { // do stuff } That's absolutely the wrong way to do that, and I hate it, but there's just so many times you can say, \"send server-side values to the client as an object, not inline\". But Daniel's electrical provider decided to come up with an example of this that really takes it to the next level of grossness. var isMobile = \"\" === \"true\"; var isAndroid = \"\" === \"true\"; var isIPad = \"\" === \"true\"; var isIPhone = \"\" === \"true\"; For starters, they're doing device detection on the server side, which isn't the worst possible idea, but it means they're relying on header fields or worse: the user agent string. Maybe they're checking the device resolution. The fact that they're naming specific devices instead of browser capabilities hints at a terrible hackjob of reactive webdesign- likely someone wrote a bunch of JavaScript that alters the desktop stylesheet to cram the desktop site onto a mobile device. But that's just background noise. Look at that code. First, we've got some lovely order-of-operations abuse: === has higher precedence than =, which makes sense but hardly makes this code readable. The first time I saw this, my brain wanted the assignment to happen first. But what's really special to me is the insistence on making this stringly typed. They control both sides of the code, so they could have just done booleans on both sides. And sure, there's a world where they're just dumb, or didn't trust their templating engine to handle that well. I've seen enough bad code, though, to have a different suspicion. I can't confirm it, but c'mon, you know in your hearts this is true: the function which is doing device detection returns a string itself, and that string isn't always a boolean for some reason. So they needed to wrap the output in quotes, because that was the only way to make sure that the JavaScript actually could be executed without a syntax error. I can't be sure that's true from this little snippet. But look at this code, and tell me that someone didn't make that mistake. .comment { border: none; } [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 04 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2615,
  "excerpt": "There are a lot of cases where the submission is \"this was server side generated JavaScript and they were loading constants\". Which, honestly, is a WTF, but it isn't interesting code. Things like this: if (false === true) { // do stuff }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-02-04 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. There are a lot of cases where the submission is \"this was server side generated JavaScript and they were loading constants\". Which, honestly, is a WTF, but it isn't interesting code. Things like this: if (false === true) { // do stuff } That's absolutely the wrong way to do that, and I hate it, but there's just so many times you can say, \"send server-side values to the client as an object, not inline\". But Daniel's electrical provider decided to come up with an example of this that really takes it to the next level of grossness. var isMobile = \"\" === \"true\"; var isAndroid = \"\" === \"true\"; var isIPad = \"\" === \"true\"; var isIPhone = \"\" === \"true\"; For starters, they're doing device detection on the server side, which isn't the worst possible idea, but it means they're relying on header fields or worse: the user agent string. Maybe they're checking the device resolution. The fact that they're naming specific devices instead of browser capabilities hints at a terrible hackjob of reactive webdesign- likely someone wrote a bunch of JavaScript that alters the desktop stylesheet to cram the desktop site onto a mobile device. But that's just background noise. Look at that code. First, we've got some lovely order-of-operations abuse: === has higher precedence than =, which makes sense but hardly makes this code readable. The first time I saw this, my brain wanted the assignment to happen first. But what's really special to me is the insistence on making this stringly typed. They control both sides of the code, so they could have just done booleans on both sides. And sure, there's a world where they're just dumb, or didn't trust their templating engine to handle that well. I've seen enough bad code, though, to have a different suspicion. I can't confirm it, but c'mon, you know in your hearts this is true: the function which is doing device detection returns a string itself, and that string isn't always a boolean for some reason. So they needed to wrap the output in quotes, because that was the only way to make sure that the JavaScript actually could be executed without a syntax error. I can't be sure that's true from this little snippet. But look at this code, and tell me that someone didn't make that mistake. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-04\"\u003e2025-02-04\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10841\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThere are a lot of cases where the submission is \u0026#34;this was server side generated JavaScript and they were loading constants\u0026#34;. Which, honestly, \u003cem\u003eis\u003c/em\u003e a WTF, but it isn\u0026#39;t interesting code. Things like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003efalse\u003c/span\u003e === \u003cspan\u003etrue\u003c/span\u003e)\n{\n\t\u003cspan\u003e// do stuff\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat\u0026#39;s absolutely the wrong way to do that, and I hate it, but there\u0026#39;s just so many times you can say, \u0026#34;send server-side values to the client as an object, not inline\u0026#34;.\u003c/p\u003e\n\u003cp\u003eBut \u003cstrong\u003eDaniel\u003c/strong\u003e\u0026#39;s electrical provider decided to come up with an example of this that really takes it to the next level of grossness.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   \u003cspan\u003evar\u003c/span\u003e isMobile = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e === \u003cspan\u003e\u0026#34;true\u0026#34;\u003c/span\u003e;\n   \u003cspan\u003evar\u003c/span\u003e isAndroid = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e === \u003cspan\u003e\u0026#34;true\u0026#34;\u003c/span\u003e;\n   \u003cspan\u003evar\u003c/span\u003e isIPad = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e === \u003cspan\u003e\u0026#34;true\u0026#34;\u003c/span\u003e;\n   \u003cspan\u003evar\u003c/span\u003e isIPhone = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e === \u003cspan\u003e\u0026#34;true\u0026#34;\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor starters, they\u0026#39;re doing device detection on the server side, which isn\u0026#39;t the worst possible idea, but it means they\u0026#39;re relying on header fields or worse: the user agent string. Maybe they\u0026#39;re checking the device resolution. The fact that they\u0026#39;re naming specific devices instead of browser capabilities hints at a terrible hackjob of reactive webdesign- likely someone wrote a bunch of JavaScript that alters the desktop stylesheet to cram the desktop site onto a mobile device. But that\u0026#39;s just background noise.\u003c/p\u003e\n\u003cp\u003eLook at that code.\u003c/p\u003e\n\u003cp\u003eFirst, we\u0026#39;ve got some lovely order-of-operations abuse: \u003ccode\u003e===\u003c/code\u003e has higher precedence than \u003ccode\u003e=\u003c/code\u003e, which \u003cem\u003emakes sense\u003c/em\u003e but hardly makes this code readable. The first time I saw this, my brain wanted the assignment to happen first.\u003c/p\u003e\n\u003cp\u003eBut what\u0026#39;s really special to me is the insistence on making this stringly typed. They control both sides of the code, so they \u003cem\u003ecould\u003c/em\u003e have just done booleans on both sides. And sure, there\u0026#39;s a world where they\u0026#39;re just dumb, or didn\u0026#39;t trust their templating engine to handle that well.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ve seen enough bad code, though, to have a different suspicion. I can\u0026#39;t confirm it, but c\u0026#39;mon, you know in your hearts this is true: the function which is doing device detection returns a string itself, and that string isn\u0026#39;t always a boolean for some reason. So they \u003cem\u003eneeded\u003c/em\u003e to wrap the output in quotes, because that was the only way to make sure that the JavaScript actually could be executed without a syntax error.\u003c/p\u003e\n\u003cp\u003eI can\u0026#39;t be \u003cem\u003esure\u003c/em\u003e that\u0026#39;s true from this little snippet. But look at this code, and tell me that someone didn\u0026#39;t make that mistake.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-02-04T06:30:00Z",
  "modifiedTime": null
}
