{
  "id": "3884816b-cbaf-427a-a061-d4eb86c3804a",
  "title": "The Service Library Service",
  "link": "https://thedailywtf.com/articles/the-service-library-service",
  "description": "Adam's organization was going through a period of rapid growth. Part of this growth was spinning up new backend services to support new functionality. The growth would have been extremely fast, except for one thing applying back pressure: for some reason, spinning up a new service meant recompiling and redeploying all the other services. Adam didn't understand why, but it seemed like an obvious place to start poking at something for improvement. All of the services depended on a library called \"ServiceLib\"- though not all of them actually used the library. The library was a set of utilities for administering, detecting, and interacting with services in their environment- essentially a homegrown fabric/bus architecture. It didn't take long, looking at the source control history, to understand why there was a rebuild after the release of every service. Each service triggered a one line change in this: enum class Services { IniTechBase = 103, IniTechAdvanced = 99, IniTechFooServer = 102, … } Each service had a unique, numerical identifier, and this mapped them into an enumerated type. Adam went to the tech lead, Raymond. \"Hey, I've got an idea for speeding up our release process- we should stop hard coding the service IDs in ServiceLib.\" Raymond looked at Adam like one might examine an over-enthusiastic lemur. \"They're not hard-coded. We store them in an enum.\" Eventually Raymond got promoted- for all of their heroic work on managing this rapidly expanding library of services. The new tech lead who came on was much more amenable to \"not storing rapidly changing service IDs in an enum\", and \"not making every service depend on a library they often don't need\", and \"putting admin functionality in every service because they're linked to that library whether they like it or not.\" Eventually, ServiceLib became its own service, and actually helped- instead of hindered- delivering new functionality. Unfortunately, with no more highly visible heroics to deliver functionality, the entire department became a career dead end. Sure, they delivered on time and under budget consistently, but there were no rockstar developers like Raymond on the team anymore, the real up-and-comers who were pushing themselves. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Mon, 21 Jul 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Feature Articles"
  ],
  "byline": "Remy Porter",
  "length": 2513,
  "excerpt": "Adam's organization was going through a period of rapid growth. Part of this growth was spinning up new backend services to support new functionality. The growth would have been extremely fast, except for one thing applying back pressure: for some reason, spinning up a new service meant recompiling and redeploying all the other services. Adam didn't understand why, but it seemed like an obvious place to start poking at something for improvement. All of the services depended on a library called \"ServiceLib\"- though not all of them actually used the library. The library was a set of utilities for administering, detecting, and interacting with services in their environment- essentially a homegrown fabric/bus architecture.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Feature Articles on 2025-07-21 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Adam's organization was going through a period of rapid growth. Part of this growth was spinning up new backend services to support new functionality. The growth would have been extremely fast, except for one thing applying back pressure: for some reason, spinning up a new service meant recompiling and redeploying all the other services. Adam didn't understand why, but it seemed like an obvious place to start poking at something for improvement. All of the services depended on a library called \"ServiceLib\"- though not all of them actually used the library. The library was a set of utilities for administering, detecting, and interacting with services in their environment- essentially a homegrown fabric/bus architecture. It didn't take long, looking at the source control history, to understand why there was a rebuild after the release of every service. Each service triggered a one line change in this: enum class Services { IniTechBase = 103, IniTechAdvanced = 99, IniTechFooServer = 102, … } Each service had a unique, numerical identifier, and this mapped them into an enumerated type. Adam went to the tech lead, Raymond. \"Hey, I've got an idea for speeding up our release process- we should stop hard coding the service IDs in ServiceLib.\" Raymond looked at Adam like one might examine an over-enthusiastic lemur. \"They're not hard-coded. We store them in an enum.\" Eventually Raymond got promoted- for all of their heroic work on managing this rapidly expanding library of services. The new tech lead who came on was much more amenable to \"not storing rapidly changing service IDs in an enum\", and \"not making every service depend on a library they often don't need\", and \"putting admin functionality in every service because they're linked to that library whether they like it or not.\" Eventually, ServiceLib became its own service, and actually helped- instead of hindered- delivering new functionality. Unfortunately, with no more highly visible heroics to deliver functionality, the entire department became a career dead end. Sure, they delivered on time and under budget consistently, but there were no rockstar developers like Raymond on the team anymore, the real up-and-comers who were pushing themselves.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/feature-articles\"\u003eFeature Articles\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-07-21\"\u003e2025-07-21\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10965\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAdam\u003c/strong\u003e\u0026#39;s organization was going through a period of rapid growth. Part of this growth was spinning up new backend services to support new functionality. The growth \u003cem\u003ewould\u003c/em\u003e have been extremely fast, except for one thing applying back pressure: for some reason, spinning up a new service meant recompiling and redeploying \u003cem\u003eall the other\u003c/em\u003e services.\u003c/p\u003e\n\u003cp\u003eAdam didn\u0026#39;t understand why, but it seemed like an obvious place to start poking at something for improvement. All of the services depended on a library called \u0026#34;ServiceLib\u0026#34;- though not all of them \u003cem\u003eactually\u003c/em\u003e used the library. The library was a set of utilities for administering, detecting, and interacting with services in their environment- essentially a homegrown fabric/bus architecture.\u003c/p\u003e\n\u003cp\u003eIt didn\u0026#39;t take long, looking at the source control history, to understand \u003cem\u003ewhy\u003c/em\u003e there was a rebuild after the release of every service. Each service triggered a one line change in this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eenum class Services\n{\n    IniTechBase = 103,\n    IniTechAdvanced = 99,\n    IniTechFooServer = 102,\n    …\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach service had a unique, numerical identifier, and this mapped them into an enumerated type.\u003c/p\u003e\n\u003cp\u003eAdam went to the tech lead, Raymond. \u0026#34;Hey, I\u0026#39;ve got an idea for speeding up our release process- we should stop hard coding the service IDs in ServiceLib.\u0026#34;\u003c/p\u003e\n\u003cp\u003eRaymond looked at Adam like one might examine an over-enthusiastic lemur. \u0026#34;They\u0026#39;re not hard-coded. We store them in an enum.\u0026#34;\u003c/p\u003e\n\u003cp\u003eEventually Raymond got promoted- for all of their heroic work on managing this rapidly expanding library of services. The new tech lead who came on was much more amenable to \u0026#34;not storing rapidly changing service IDs in an enum\u0026#34;, and \u0026#34;not making every service depend on a library they often don\u0026#39;t need\u0026#34;, and \u0026#34;putting admin functionality in every service because they\u0026#39;re linked to that library whether they like it or not.\u0026#34;\u003c/p\u003e\n\u003cp\u003eEventually, ServiceLib became its own service, and actually helped- instead of hindered- delivering new functionality.\u003c/p\u003e\n\u003cp\u003eUnfortunately, with no more highly visible heroics to deliver functionality, the entire department became a career dead end. Sure, they delivered on time and under budget consistently, but there were no rockstar developers like Raymond on the team anymore, the real up-and-comers who were pushing themselves.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-07-21T06:30:00Z",
  "modifiedTime": null
}
