{
  "id": "4a62de79-d515-435b-9065-d2b99df0dfa9",
  "title": "Representative Line: What the FFFFFFFF",
  "link": "https://thedailywtf.com/articles/what-the-ffffffff",
  "description": "Combining Java with lower-level bit manipulations is asking for trouble- not because the language is inadequate to the task, but because so many of the developers who work in Java are so used to working at a high level they might not quite \"get\" what they need to do. Victor inherited one such project, which used bitmasks and bitwise operations a great deal, based on the network protocol it implemented. Here's how the developers responsible created their bitmasks: private static long FFFFFFFF = Long.parseLong(\"FFFFFFFF\", 16); So, the first thing that's important to note, is that Java does support hex literals, so 0xFFFFFFFF is a perfectly valid literal. So we don't need to create a string and parse it. But we also don't need to make a constant simply named FFFFFFFF, which is just the old twenty = 20 constant pattern: technically you've made a constant but you haven't actually made the magic number go away. Of course, this also isn't actually a constant, so it's entirely possible that FFFFFFFF could hold a value which isn't 0xFFFFFFFF. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 20 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1319,
  "excerpt": "Combining Java with lower-level bit manipulations is asking for trouble- not because the language is inadequate to the task, but because so many of the developers who work in Java are so used to working at a high level they might not quite \"get\" what they need to do. Victor inherited one such project, which used bitmasks and bitwise operations a great deal, based on the network protocol it implemented. Here's how the developers responsible created their bitmasks:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-05-20 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Combining Java with lower-level bit manipulations is asking for trouble- not because the language is inadequate to the task, but because so many of the developers who work in Java are so used to working at a high level they might not quite \"get\" what they need to do. Victor inherited one such project, which used bitmasks and bitwise operations a great deal, based on the network protocol it implemented. Here's how the developers responsible created their bitmasks: private static long FFFFFFFF = Long.parseLong(\"FFFFFFFF\", 16); So, the first thing that's important to note, is that Java does support hex literals, so 0xFFFFFFFF is a perfectly valid literal. So we don't need to create a string and parse it. But we also don't need to make a constant simply named FFFFFFFF, which is just the old twenty = 20 constant pattern: technically you've made a constant but you haven't actually made the magic number go away. Of course, this also isn't actually a constant, so it's entirely possible that FFFFFFFF could hold a value which isn't 0xFFFFFFFF.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-20\"\u003e2025-05-20\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10918\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eCombining Java with lower-level bit manipulations is asking for trouble- not because the language is inadequate to the task, but because so many of the developers who work in Java are so used to working at a high level they might not quite \u0026#34;get\u0026#34; what they need to do.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVictor\u003c/strong\u003e inherited one such project, which used bitmasks and bitwise operations a great deal, based on the network protocol it implemented. Here\u0026#39;s how the developers responsible created their bitmasks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elong\u003c/span\u003e \u003cspan\u003eFFFFFFFF\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e Long.parseLong(\u003cspan\u003e\u0026#34;FFFFFFFF\u0026#34;\u003c/span\u003e, \u003cspan\u003e16\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, the first thing that\u0026#39;s important to note, is that Java \u003cem\u003edoes\u003c/em\u003e support hex literals, so \u003ccode\u003e0xFFFFFFFF\u003c/code\u003e is a perfectly valid literal. So we \u003cem\u003edon\u0026#39;t\u003c/em\u003e need to create a string and parse it. But we \u003cem\u003ealso\u003c/em\u003e don\u0026#39;t need to make a constant simply named \u003ccode\u003eFFFFFFFF\u003c/code\u003e, which is just the old \u003ccode\u003etwenty = 20\u003c/code\u003e constant pattern: technically you\u0026#39;ve made a constant but you haven\u0026#39;t actually made the magic number go away.\u003c/p\u003e\n\u003cp\u003eOf course, this \u003cem\u003ealso\u003c/em\u003e isn\u0026#39;t actually a constant, so it\u0026#39;s entirely possible that \u003ccode\u003eFFFFFFFF\u003c/code\u003e could hold a value which \u003cem\u003eisn\u0026#39;t\u003c/em\u003e \u003ccode\u003e0xFFFFFFFF\u003c/code\u003e.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-05-20T06:30:00Z",
  "modifiedTime": null
}
