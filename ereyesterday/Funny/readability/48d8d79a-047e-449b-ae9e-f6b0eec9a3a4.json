{
  "id": "48d8d79a-047e-449b-ae9e-f6b0eec9a3a4",
  "title": "CodeSOD: Exactly a Date",
  "link": "https://thedailywtf.com/articles/exactly-a-date",
  "description": "Alexandar sends us some C# date handling code. The best thing one can say is that they didn't reinvent any wheels, but that might be worse, because they used the existing wheels to drive right off a cliff. try { var date = DateTime.ParseExact(member.PubDate.ToString(), \"M/d/yyyy h:mm:ss tt\", null); objCustomResult.PublishedDate = date; } catch (Exception datEx) { } member.PubDate is a Nullable. So its ToString will return one of two things. If there is a value there, it'll return the DateTimes value. If it's null, it'll just return an empty string. Attempting to parse the empty string will throw an exception, which we helpfully swallow, do nothing about, and leave objCustomResult.PublishedDate in whatever state it was in- I'm going to guess null, but I have no idea. Part of this WTF is that they break the advantages of using nullable types- the entire point is to be able to handle null values without having to worry about exceptions getting tossed around. But that's just a small part. The real WTF is taking a DateTime value, turning it into a string, only to parse it back out. But because this is in .NET, it's more subtle than just the generation of useless strings, because member.PubDate.ToString()'s return value may change depending on your culture info settings. Which sure, this is almost certainly server-side code running on a single server with a well known locale configured. So this probably won't ever blow up on them, but it's 100% the kind of thing everyone thinks is fine until the day it's not. The punchline is that ToString allows you to specify the format you want the date formatted in, which means they could have written this: var date = DateTime.ParseExact(member.PubDate.ToString(\"M/d/yyyy h:mm:ss tt\"), \"M/d/yyyy h:mm:ss tt\", null); But if they did that, I suppose that would have possibly tickled their little grey cells and made them realize how stupid this entire block of code was? [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Tue, 13 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2338,
  "excerpt": "Alexandar sends us some C# date handling code. The best thing one can say is that they didn't reinvent any wheels, but that might be worse, because they used the existing wheels to drive right off a cliff. try { var date = DateTime.ParseExact(member.PubDate.ToString(), \"M/d/yyyy h:mm:ss tt\", null); objCustomResult.PublishedDate = date; } catch (Exception datEx) { }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-13 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Alexandar sends us some C# date handling code. The best thing one can say is that they didn't reinvent any wheels, but that might be worse, because they used the existing wheels to drive right off a cliff. try { var date = DateTime.ParseExact(member.PubDate.ToString(), \"M/d/yyyy h:mm:ss tt\", null); objCustomResult.PublishedDate = date; } catch (Exception datEx) { } member.PubDate is a Nullable\u003cDateTime\u003e. So its ToString will return one of two things. If there is a value there, it'll return the DateTimes value. If it's null, it'll just return an empty string. Attempting to parse the empty string will throw an exception, which we helpfully swallow, do nothing about, and leave objCustomResult.PublishedDate in whatever state it was in- I'm going to guess null, but I have no idea. Part of this WTF is that they break the advantages of using nullable types- the entire point is to be able to handle null values without having to worry about exceptions getting tossed around. But that's just a small part. The real WTF is taking a DateTime value, turning it into a string, only to parse it back out. But because this is in .NET, it's more subtle than just the generation of useless strings, because member.PubDate.ToString()'s return value may change depending on your culture info settings. Which sure, this is almost certainly server-side code running on a single server with a well known locale configured. So this probably won't ever blow up on them, but it's 100% the kind of thing everyone thinks is fine until the day it's not. The punchline is that ToString allows you to specify the format you want the date formatted in, which means they could have written this: var date = DateTime.ParseExact(member.PubDate.ToString(\"M/d/yyyy h:mm:ss tt\"), \"M/d/yyyy h:mm:ss tt\", null); But if they did that, I suppose that would have possibly tickled their little grey cells and made them realize how stupid this entire block of code was? [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-13\"\u003e2025-05-13\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10912\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAlexandar\u003c/strong\u003e sends us some C# date handling code. The best thing one can say is that they didn\u0026#39;t reinvent any wheels, but that might be worse, because they used the existing wheels to drive right off a cliff.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etry\u003c/span\u003e\n{\n    \u003cspan\u003evar\u003c/span\u003e date = DateTime.ParseExact(member.PubDate.ToString(), \u003cspan\u003e\u0026#34;M/d/yyyy h:mm:ss tt\u0026#34;\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e); \n    objCustomResult.PublishedDate = date;\n}\n\u003cspan\u003ecatch\u003c/span\u003e (Exception datEx)\n{\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003emember.PubDate\u003c/code\u003e is a \u003ccode\u003eNullable\u0026lt;DateTime\u0026gt;\u003c/code\u003e. So its \u003ccode\u003eToString\u003c/code\u003e will return one of two things. If there \u003cem\u003eis\u003c/em\u003e a value there, it\u0026#39;ll return the \u003ccode\u003eDateTime\u003c/code\u003es value. If it\u0026#39;s null, it\u0026#39;ll just return an empty string. Attempting to parse the empty string will throw an exception, which we helpfully swallow, do nothing about, and leave \u003ccode\u003eobjCustomResult.PublishedDate\u003c/code\u003e in whatever state it was in- I\u0026#39;m going to \u003cem\u003eguess\u003c/em\u003e \u003ccode\u003enull\u003c/code\u003e, but I have no idea.\u003c/p\u003e\n\u003cp\u003ePart of this WTF is that they break the advantages of using nullable types- the entire point is to be able to handle null values without having to worry about exceptions getting tossed around. But that\u0026#39;s just a small part.\u003c/p\u003e\n\u003cp\u003eThe real WTF is taking a \u003ccode\u003eDateTime\u003c/code\u003e value, turning it into a string, only to parse it back out. But because this is in .NET, it\u0026#39;s more subtle than just the generation of useless strings, because \u003ccode\u003emember.PubDate.ToString()\u003c/code\u003e\u0026#39;s return value \u003cem\u003emay change depending on your culture info settings\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhich sure, this is almost certainly server-side code running on a single server with a well known locale configured. So this probably won\u0026#39;t ever blow up on them, but it\u0026#39;s 100% the kind of thing everyone thinks is fine until the day it\u0026#39;s not.\u003c/p\u003e\n\u003cp\u003eThe punchline is that \u003ccode\u003eToString\u003c/code\u003e allows you to specify the format you want the date formatted in, which means they \u003cem\u003ecould\u003c/em\u003e have written this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003evar\u003c/span\u003e date = DateTime.ParseExact(member.PubDate.ToString(\u003cspan\u003e\u0026#34;M/d/yyyy h:mm:ss tt\u0026#34;\u003c/span\u003e), \u003cspan\u003e\u0026#34;M/d/yyyy h:mm:ss tt\u0026#34;\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut if they did that, I suppose that would have possibly tickled their little grey cells and made them realize how stupid this entire block of code was?\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-13T06:30:00Z",
  "modifiedTime": null
}
