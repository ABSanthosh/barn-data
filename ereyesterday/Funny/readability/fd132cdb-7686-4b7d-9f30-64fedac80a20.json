{
  "id": "fd132cdb-7686-4b7d-9f30-64fedac80a20",
  "title": "CodeSOD: While This Works",
  "link": "https://thedailywtf.com/articles/while-this-works",
  "description": "Rob's co-worker needed to write a loop that iterated across every element in an array. This very common problem, and you'd imagine that a developer would use one of the many common solutions to this problem. The language, in this case, is JavaScript, which has many possible options for iterating across an array. Perhaps that buffet of possible options was too daunting. Perhaps the developer thought to themselves, \"a for each loop is easy mode, I'm a 10x programmer, and I want a 10x solution!\" Or perhaps they just didn't know what the hell they were doing. Regardless of why, this is the result: try { var index = 0; while (true) { var nextItem = someArray[index]; doSomethingWithItem(nextItem); index++; } } catch (e) { } This code iterates across the array in an infinite while loop, passing each item to doSomethingWithItem. Eventually, they hit the end of the array, and someArray[index] starts returning undefined. Somewhere, deep in doSomethingWithItem, that causes an exception to be thrown. That is how we break out of the loop- eventually something chokes on an undefined value, which lets us know there's nothing left in the array. Which puts us in an interesting position- if anyone decided to add better error handling to doSomethingWithItem, the entire application could break, and it wouldn't be obvious why. This is a peak example of \"every change breaks somebody's workflow\", but specifically because that workflow is stupid. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 10 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1722,
  "excerpt": "Rob's co-worker needed to write a loop that iterated across every element in an array. This very common problem, and you'd imagine that a developer would use one of the many common solutions to this problem. The language, in this case, is JavaScript, which has many possible options for iterating across an array. Perhaps that buffet of possible options was too daunting. Perhaps the developer thought to themselves, \"a for each loop is easy mode, I'm a 10x programmer, and I want a 10x solution!\" Or perhaps they just didn't know what the hell they were doing.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-12-10 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Rob's co-worker needed to write a loop that iterated across every element in an array. This very common problem, and you'd imagine that a developer would use one of the many common solutions to this problem. The language, in this case, is JavaScript, which has many possible options for iterating across an array. Perhaps that buffet of possible options was too daunting. Perhaps the developer thought to themselves, \"a for each loop is easy mode, I'm a 10x programmer, and I want a 10x solution!\" Or perhaps they just didn't know what the hell they were doing. Regardless of why, this is the result: try { var index = 0; while (true) { var nextItem = someArray[index]; doSomethingWithItem(nextItem); index++; } } catch (e) { } This code iterates across the array in an infinite while loop, passing each item to doSomethingWithItem. Eventually, they hit the end of the array, and someArray[index] starts returning undefined. Somewhere, deep in doSomethingWithItem, that causes an exception to be thrown. That is how we break out of the loop- eventually something chokes on an undefined value, which lets us know there's nothing left in the array. Which puts us in an interesting position- if anyone decided to add better error handling to doSomethingWithItem, the entire application could break, and it wouldn't be obvious why. This is a peak example of \"every change breaks somebody's workflow\", but specifically because that workflow is stupid.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-10\"\u003e2024-12-10\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10800\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eRob\u003c/strong\u003e\u0026#39;s co-worker needed to write a loop that iterated across every element in an array. This very common problem, and you\u0026#39;d imagine that a developer would use one of the many common solutions to this problem. The language, in this case, is JavaScript, which has many possible options for iterating across an array.\u003c/p\u003e\n\u003cp\u003ePerhaps that buffet of possible options was too daunting. Perhaps the developer thought to themselves, \u0026#34;a for each loop is easy mode, I\u0026#39;m a 10x programmer, and I want a 10x solution!\u0026#34; Or perhaps they just didn\u0026#39;t know what the hell they were doing.\u003c/p\u003e\n\u003cp\u003eRegardless of why, this is the result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etry\u003c/span\u003e {\n  \u003cspan\u003evar\u003c/span\u003e index = \u003cspan\u003e0\u003c/span\u003e;\n  \u003cspan\u003ewhile\u003c/span\u003e (\u003cspan\u003etrue\u003c/span\u003e) {\n    \u003cspan\u003evar\u003c/span\u003e nextItem = someArray[index];\n    \u003cspan\u003edoSomethingWithItem\u003c/span\u003e(nextItem);\n    index++;\n  }\n} \u003cspan\u003ecatch\u003c/span\u003e (e) { }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code iterates across the array in an infinite while loop, passing each item to \u003ccode\u003edoSomethingWithItem\u003c/code\u003e. Eventually, they hit the end of the array, and \u003ccode\u003esomeArray[index]\u003c/code\u003e starts returning undefined. Somewhere, deep in \u003ccode\u003edoSomethingWithItem\u003c/code\u003e, that causes an exception to be thrown.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThat\u003c/em\u003e is how we break out of the loop- eventually something chokes on an undefined value, which lets us know there\u0026#39;s nothing left in the array.\u003c/p\u003e\n\u003cp\u003eWhich puts us in an interesting position- if anyone decided to add better error handling to \u003ccode\u003edoSomethingWithItem\u003c/code\u003e, the entire application could break, and it wouldn\u0026#39;t be obvious \u003cem\u003ewhy\u003c/em\u003e. This is a peak example of \u0026#34;every change breaks somebody\u0026#39;s workflow\u0026#34;, but specifically because that workflow is \u003cem\u003estupid\u003c/em\u003e.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-12-10T06:30:00Z",
  "modifiedTime": null
}
