{
  "id": "755ef13e-c7f0-4285-a06c-22645ae2139f",
  "title": "CodeSOD: Leap to the Past",
  "link": "https://thedailywtf.com/articles/leap-to-the-past",
  "description": "Early in my career, I had the misfortune of doing a lot of Crystal Reports work. Crystal Reports is another one of those tools that lets non-developer, non-database savvy folks craft reports. Which, like so often happens, means that the users dig themselves incredible holes and need professional help to get back out, because at the end of the day, when the root problem is actually complicated, all the helpful GUI tools in the world can't solve it for you. Michael was in a similar position as I was, but for Michael, there was a five alarm fire. It was the end of the month, and a bunch of monthly sales reports needed to be calculated. One of the big things management expected to see was a year-over-year delta on sales, and they got real cranky if the line didn't go up. If they couldn't even see the line, they went into a full on panic and assumed the sales team was floundering and the company was on the verge of collapse. Unfortunately, the report was spitting out an error: \"A day number must be between 1 and the number of days in the month.\" Michael dug in, and found this \"delight\" inside of a function called one_year_ago: Local StringVar yearStr := Left({?ReportToDate}, 4); Local StringVar monthStr := Mid({?ReportToDate}, 5, 2); Local StringVar dayStr := Mid({?ReportToDate}, 7, 2); Local StringVar hourStr := Mid({?ReportToDate}, 9, 2); Local StringVar minStr := Mid({?ReportToDate}, 11, 2); Local StringVar secStr := Mid({?ReportToDate}, 13, 2); Local NumberVar LastYear; LastYear := ToNumber(YearStr) - 1; YearStr := Replace (toText(LastYear),'.00' , '' ); YearStr := Replace (YearStr,',' , '' ); //DateTime(year, month, day, hour, min, sec); //Year + Month + Day + Hour + min + sec; // string value DateTime(ToNumber(YearStr), ToNumber(MonthStr), ToNumber(dayStr), ToNumber(HourStr), ToNumber(MinStr),ToNumber(SecStr) ); We've all seen string munging in date handling before. That's not surprising. But what's notable about this one is the day on which it started failing. As stated, it was at the end of the month. But which month? February. Specifically, February 2024, a leap year. Since they do nothing to adjust the dayStr when constructing the date, they were attempting to construct a date for 29-FEB-2023, which is not a valid date. Michael writes: Yes, it's Crystal Reports, but surprisingly not having date manipulation functions isn't amongst it's many, many flaws. It's something I did in a past life isn't it?? The fix was easy enough- rewrite the function to actually use date handling. This made a simpler, basically one-line function, using Crystal's built in functions. That fixed this particular date handling bug, but there were plenty more places where this kind of hand-grown string munging happened, and plenty more opportunities for the report to fail. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 08 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2926,
  "excerpt": "Early in my career, I had the misfortune of doing a lot of Crystal Reports work. Crystal Reports is another one of those tools that lets non-developer, non-database savvy folks craft reports. Which, like so often happens, means that the users dig themselves incredible holes and need professional help to get back out, because at the end of the day, when the root problem is actually complicated, all the helpful GUI tools in the world can't solve it for you. Michael was in a similar position as I was, but for Michael, there was a five alarm fire. It was the end of the month, and a bunch of monthly sales reports needed to be calculated. One of the big things management expected to see was a year-over-year delta on sales, and they got real cranky if the line didn't go up. If they couldn't even see the line, they went into a full on panic and assumed the sales team was floundering and the company was on the verge of collapse.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Early in my career, I had the misfortune of doing a lot of Crystal Reports work. Crystal Reports is another one of those tools that lets non-developer, non-database savvy folks craft reports. Which, like so often happens, means that the users dig themselves incredible holes and need professional help to get back out, because at the end of the day, when the root problem is actually complicated, all the helpful GUI tools in the world can't solve it for you. Michael was in a similar position as I was, but for Michael, there was a five alarm fire. It was the end of the month, and a bunch of monthly sales reports needed to be calculated. One of the big things management expected to see was a year-over-year delta on sales, and they got real cranky if the line didn't go up. If they couldn't even see the line, they went into a full on panic and assumed the sales team was floundering and the company was on the verge of collapse. Unfortunately, the report was spitting out an error: \"A day number must be between 1 and the number of days in the month.\" Michael dug in, and found this \"delight\" inside of a function called one_year_ago: Local StringVar yearStr := Left({?ReportToDate}, 4); Local StringVar monthStr := Mid({?ReportToDate}, 5, 2); Local StringVar dayStr := Mid({?ReportToDate}, 7, 2); Local StringVar hourStr := Mid({?ReportToDate}, 9, 2); Local StringVar minStr := Mid({?ReportToDate}, 11, 2); Local StringVar secStr := Mid({?ReportToDate}, 13, 2); Local NumberVar LastYear; LastYear := ToNumber(YearStr) - 1; YearStr := Replace (toText(LastYear),'.00' , '' ); YearStr := Replace (YearStr,',' , '' ); //DateTime(year, month, day, hour, min, sec); //Year + Month + Day + Hour + min + sec; // string value DateTime(ToNumber(YearStr), ToNumber(MonthStr), ToNumber(dayStr), ToNumber(HourStr), ToNumber(MinStr),ToNumber(SecStr) ); We've all seen string munging in date handling before. That's not surprising. But what's notable about this one is the day on which it started failing. As stated, it was at the end of the month. But which month? February. Specifically, February 2024, a leap year. Since they do nothing to adjust the dayStr when constructing the date, they were attempting to construct a date for 29-FEB-2023, which is not a valid date. Michael writes: Yes, it's Crystal Reports, but surprisingly not having date manipulation functions isn't amongst it's many, many flaws. It's something I did in a past life isn't it?? The fix was easy enough- rewrite the function to actually use date handling. This made a simpler, basically one-line function, using Crystal's built in functions. That fixed this particular date handling bug, but there were plenty more places where this kind of hand-grown string munging happened, and plenty more opportunities for the report to fail. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eEarly in my career, I had the misfortune of doing a lot of Crystal Reports work. Crystal Reports is another one of those tools that lets non-developer, non-database savvy folks craft reports. Which, like so often happens, means that the users dig themselves incredible holes and need professional help to get back out, because at the end of the day, when the root problem is actually complicated, all the helpful GUI tools in the world can\u0026#39;t solve it for you.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMichael\u003c/strong\u003e was in a similar position as I was, but for Michael, there was a five alarm fire. It was the end of the month, and a bunch of monthly sales reports needed to be calculated. One of the big things management expected to see was a year-over-year delta on sales, and they got real cranky if the line didn\u0026#39;t go up. If they couldn\u0026#39;t even \u003cem\u003esee\u003c/em\u003e the line, they went into a full on panic and assumed the sales team was floundering and the company was on the verge of collapse.\u003c/p\u003e\n\u003cp\u003eUnfortunately, the report was spitting out an error: \u0026#34;A day number must be between 1 and the number of days in the month.\u0026#34;\u003c/p\u003e\n\u003cp\u003eMichael dug in, and found this \u0026#34;delight\u0026#34; inside of a function called \u003ccode\u003eone_year_ago\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nLocal StringVar yearStr  := Left({?ReportToDate}, 4);\nLocal StringVar monthStr := Mid({?ReportToDate}, 5, 2); \nLocal StringVar dayStr   := Mid({?ReportToDate}, 7, 2);\nLocal StringVar hourStr  := Mid({?ReportToDate}, 9, 2);\nLocal StringVar minStr   := Mid({?ReportToDate}, 11, 2);\nLocal StringVar secStr   := Mid({?ReportToDate}, 13, 2);\nLocal NumberVar LastYear;\n\nLastYear := ToNumber(YearStr) - 1;\nYearStr := Replace (toText(LastYear),\u0026#39;.00\u0026#39; , \u0026#39;\u0026#39; );\nYearStr := Replace (YearStr,\u0026#39;,\u0026#39; , \u0026#39;\u0026#39; );\n\n//DateTime(year, month, day, hour, min, sec);\n//Year + Month + Day + Hour + min + sec;  // string value\nDateTime(ToNumber(YearStr), ToNumber(MonthStr), ToNumber(dayStr), ToNumber(HourStr), ToNumber(MinStr),ToNumber(SecStr) );\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe\u0026#39;ve all seen string munging in date handling before. That\u0026#39;s not surprising. But what\u0026#39;s notable about this one is the day on which it started failing. As stated, it was at the end of the month. But which month? \u003cem\u003eFebruary\u003c/em\u003e. Specifically, February 2024, a leap year. Since they do nothing to adjust the \u003ccode\u003edayStr\u003c/code\u003e when constructing the date, they were attempting to construct a date for \u003ccode\u003e29-FEB-2023\u003c/code\u003e, which is not a valid date.\u003c/p\u003e\n\u003cp\u003eMichael writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYes, it\u0026#39;s Crystal Reports, but surprisingly not having date manipulation functions isn\u0026#39;t amongst it\u0026#39;s many, many flaws. It\u0026#39;s something I did in a past life isn\u0026#39;t it??\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe fix was easy enough- rewrite the function to \u003cem\u003eactually use date handling\u003c/em\u003e. This made a simpler, basically one-line function, using Crystal\u0026#39;s built in functions. That fixed this particular date handling bug, but there were plenty more places where this kind of hand-grown string munging happened, and plenty more opportunities for the report to fail.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-05-08T06:30:00Z",
  "modifiedTime": null
}
