{
  "id": "f47b3cee-c625-4fcd-ae6b-f66e0a9f611c",
  "title": "Representative Line: What a Character",
  "link": "https://thedailywtf.com/articles/what-a-character",
  "description": "Python's \"batteries included\" approach means that a lot of common tasks have high-level convenience functions for them. For example, if you want to read all the lines from a file into an array (list, in Python), you could do something like: with open(filename) as f: lines = f.readlines() Easy peasy. Of course, because it's so easy, there are other options. For example, you can just convert the file directly to a list: lines = list(f). Or you can iterate across the file directly, e.g.: with open(filename) as f: for line in f: # do stuff Of course, that's fine for plain old text files. But we frequently use text files which are structured in some fashion, like a CSV file. No worries, though, as Python has a csv library built in, which makes it easy to handle these files too; especially useful because \"writing a CSV parser yourself\" is one of those tasks that sounds easy until you hit the first edge case, and then you realize you've made a terrible mistake. Now, it's important to note that CSV usually is expressed as a \"comma separated values\" file, but the initialism is actually \"character separated values\". And, as Sally's co-worker realized, newlines are characters, and thus every text file is technically a CSV file. foo = list(csv.reader(someFile, delimiter=\"\\n\")) .comment { border: none; } [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Tue, 25 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1694,
  "excerpt": "Python's \"batteries included\" approach means that a lot of common tasks have high-level convenience functions for them. For example, if you want to read all the lines from a file into an array (list, in Python), you could do something like: with open(filename) as f: lines = f.readlines()",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-02-25 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Python's \"batteries included\" approach means that a lot of common tasks have high-level convenience functions for them. For example, if you want to read all the lines from a file into an array (list, in Python), you could do something like: with open(filename) as f: lines = f.readlines() Easy peasy. Of course, because it's so easy, there are other options. For example, you can just convert the file directly to a list: lines = list(f). Or you can iterate across the file directly, e.g.: with open(filename) as f: for line in f: # do stuff Of course, that's fine for plain old text files. But we frequently use text files which are structured in some fashion, like a CSV file. No worries, though, as Python has a csv library built in, which makes it easy to handle these files too; especially useful because \"writing a CSV parser yourself\" is one of those tasks that sounds easy until you hit the first edge case, and then you realize you've made a terrible mistake. Now, it's important to note that CSV usually is expressed as a \"comma separated values\" file, but the initialism is actually \"character separated values\". And, as Sally's co-worker realized, newlines are characters, and thus every text file is technically a CSV file. foo = list(csv.reader(someFile, delimiter=\"\\n\")) [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-25\"\u003e2025-02-25\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10856\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003ePython\u0026#39;s \u0026#34;batteries included\u0026#34; approach means that a lot of common tasks have high-level convenience functions for them. For example, if you want to read all the lines from a file into an array (\u003ccode\u003elist\u003c/code\u003e, in Python), you could do something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ewith\u003c/span\u003e \u003cspan\u003eopen\u003c/span\u003e(filename) \u003cspan\u003eas\u003c/span\u003e f:\n\tlines = f.readlines()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEasy peasy. Of course, because it\u0026#39;s so easy, there are other options.\u003c/p\u003e\n\u003cp\u003eFor example, you can just convert the file directly to a list: \u003ccode\u003elines = list(f)\u003c/code\u003e. Or you can iterate across the file directly, e.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ewith\u003c/span\u003e \u003cspan\u003eopen\u003c/span\u003e(filename) \u003cspan\u003eas\u003c/span\u003e f:\n\t\u003cspan\u003efor\u003c/span\u003e line \u003cspan\u003ein\u003c/span\u003e f:\n\t\t\u003cspan\u003e# do stuff\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOf course, that\u0026#39;s fine for plain old text files. But we frequently use text files which are structured in some fashion, like a CSV file. No worries, though, as Python has a \u003ccode\u003ecsv\u003c/code\u003e library built in, which makes it easy to handle these files too; especially useful because \u0026#34;writing a CSV parser yourself\u0026#34; is one of those tasks that sounds easy until you hit the first edge case, and then you realize you\u0026#39;ve made a terrible mistake.\u003c/p\u003e\n\u003cp\u003eNow, it\u0026#39;s important to note that CSV usually is expressed as a \u0026#34;comma separated values\u0026#34; file, but the initialism is actually \u0026#34;\u003cem\u003echaracter\u003c/em\u003e separated values\u0026#34;. And, as \u003cstrong\u003eSally\u003c/strong\u003e\u0026#39;s co-worker realized, newlines are characters, and thus \u003cem\u003eevery\u003c/em\u003e text file is technically a CSV file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efoo = \u003cspan\u003elist\u003c/span\u003e(csv.reader(someFile, delimiter=\u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e))\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-02-25T06:30:00Z",
  "modifiedTime": null
}
