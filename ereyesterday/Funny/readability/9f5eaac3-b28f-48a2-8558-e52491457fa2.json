{
  "id": "9f5eaac3-b28f-48a2-8558-e52491457fa2",
  "title": "CodeSOD: Reliability Test",
  "link": "https://thedailywtf.com/articles/reliability-test",
  "description": "Once upon a time, Ryan's company didn't use a modern logging framework to alert admins when services failed. No, they used everyone's favorite communications format, circa 2005: email. Can't reach the database? Send an email. Unhandled exception? Send an email. Handled exception? Better send an email, just in case. Sometimes they go to admins, sometimes they just go to an inbox used for logging. Let's look at how that worked. public void SendEMail(String receivers, String subject, String body) { try { System.Net.Mail.SmtpClient clnt = new System.Net.Mail.SmtpClient(ConfigurationManager.AppSettings[\"SmtpServer\"]); clnt.Send(new System.Net.Mail.MailMessage( ConfigurationManager.AppSettings[\"Sender\"], ConfigurationManager.AppSettings[\"Receivers\"], subject, body)); } catch (Exception ex) { SendEMail( ConfigurationManager.AppSettings[\"ErrorLogAddress\"], \"An error has occurred while sending an email\", ex.Message + \"\\n\" + ex.StackTrace); } } They use the Dot Net SmtpClient class to connect to an SMTP server and send emails based on the configuration. So far so good, but what happens when we can't send an email because the email server is down? We'll get an exception, and what do we do with it? The same thing we do with every other exception: send an email. Ryan writes: Strangely enough, I've never heard of the service crashing or hanging. We must have a very good mail server! [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Wed, 19 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1953,
  "excerpt": "Once upon a time, Ryan's company didn't use a modern logging framework to alert admins when services failed. No, they used everyone's favorite communications format, circa 2005: email. Can't reach the database? Send an email. Unhandled exception? Send an email. Handled exception? Better send an email, just in case. Sometimes they go to admins, sometimes they just go to an inbox used for logging. Let's look at how that worked.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-03-19 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Once upon a time, Ryan's company didn't use a modern logging framework to alert admins when services failed. No, they used everyone's favorite communications format, circa 2005: email. Can't reach the database? Send an email. Unhandled exception? Send an email. Handled exception? Better send an email, just in case. Sometimes they go to admins, sometimes they just go to an inbox used for logging. Let's look at how that worked. public void SendEMail(String receivers, String subject, String body) { try { System.Net.Mail.SmtpClient clnt = new System.Net.Mail.SmtpClient(ConfigurationManager.AppSettings[\"SmtpServer\"]); clnt.Send(new System.Net.Mail.MailMessage( ConfigurationManager.AppSettings[\"Sender\"], ConfigurationManager.AppSettings[\"Receivers\"], subject, body)); } catch (Exception ex) { SendEMail( ConfigurationManager.AppSettings[\"ErrorLogAddress\"], \"An error has occurred while sending an email\", ex.Message + \"\\n\" + ex.StackTrace); } } They use the Dot Net SmtpClient class to connect to an SMTP server and send emails based on the configuration. So far so good, but what happens when we can't send an email because the email server is down? We'll get an exception, and what do we do with it? The same thing we do with every other exception: send an email. Ryan writes: Strangely enough, I've never heard of the service crashing or hanging. We must have a very good mail server! [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-19\"\u003e2025-03-19\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10873\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eOnce upon a time, \u003cstrong\u003eRyan\u003c/strong\u003e\u0026#39;s company didn\u0026#39;t use a modern logging framework to alert admins when services failed. No, they used everyone\u0026#39;s favorite communications format, circa 2005: \u003cem\u003eemail\u003c/em\u003e. Can\u0026#39;t reach the database? Send an email. Unhandled exception? Send an email. Handled exception? Better send an email, just in case. Sometimes they go to admins, sometimes they just go to an inbox used for logging.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s look at how that worked.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eSendEMail\u003c/span\u003e(\u003cspan\u003eString receivers, String subject, String body\u003c/span\u003e)\u003c/span\u003e\n{\n    \u003cspan\u003etry\u003c/span\u003e\n    {\n        System.Net.Mail.SmtpClient clnt = \u003cspan\u003enew\u003c/span\u003e System.Net.Mail.SmtpClient(ConfigurationManager.AppSettings[\u003cspan\u003e\u0026#34;SmtpServer\u0026#34;\u003c/span\u003e]);\n        clnt.Send(\u003cspan\u003enew\u003c/span\u003e System.Net.Mail.MailMessage(\n            ConfigurationManager.AppSettings[\u003cspan\u003e\u0026#34;Sender\u0026#34;\u003c/span\u003e], \n            ConfigurationManager.AppSettings[\u003cspan\u003e\u0026#34;Receivers\u0026#34;\u003c/span\u003e], \n            subject, \n            body));\n    }\n    \u003cspan\u003ecatch\u003c/span\u003e (Exception ex)\n    {\n        SendEMail(\n            ConfigurationManager.AppSettings[\u003cspan\u003e\u0026#34;ErrorLogAddress\u0026#34;\u003c/span\u003e],\n            \u003cspan\u003e\u0026#34;An error has occurred while sending an email\u0026#34;\u003c/span\u003e,\n            ex.Message + \u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e + ex.StackTrace);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThey use the Dot Net \u003ccode\u003eSmtpClient\u003c/code\u003e class to connect to an SMTP server and send emails based on the configuration. So far so good, but what happens when we can\u0026#39;t send an email because the email server is down? We\u0026#39;ll get an exception, and what do we do with it?\u003c/p\u003e\n\u003cp\u003eThe same thing we do with every other exception: \u003cem\u003esend an email\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eRyan writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStrangely enough, I\u0026#39;ve never heard of the service crashing or hanging.  We must have a very good mail server!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-19T06:30:00Z",
  "modifiedTime": null
}
