{
  "id": "cdb46191-15c4-427d-b790-01444ca20103",
  "title": "CodeSOD: Stripped of Magic",
  "link": "https://thedailywtf.com/articles/stripped-of-magic",
  "description": "A Representative Line is a short snippet that makes you think, \"wow, I'd hate to see the rest of the code.\" A CodeSOD is a longer snippet, which also frequently makes you think, \"wow, I'd hate to see the rest of the code,\" but also is bad in ways that require you to look at the relationship between the lines in the code. I bring that up, because today's code sample is a long section, but really, it's just a collection of representative lines. Each line in this just makes me die a little on the inside. Belda found this: ## helper functions function stripmagic($x) { return get_magic_quotes_gpc() ? stripslashes($x) : $x; } function pre_r(\u0026$x) { return ''.PHSC(print_r($x, true)).''; } function PSS($x) { return str_replace('\\\\\"','\"',$x); } function PVS($x) { return preg_replace(\"/\\n[^\\\\S\\n]*(?=\\n)/\", \"\\n\u003c:vspace\u003e\", $x); } function PVSE($x) { return PVS(PHSC($x, ENT_NOQUOTES)); } function PZZ($x,$y='') { return ''; } function PRR($x=NULL) { if ($x || is_null($x)) $GLOBALS['RedoMarkupLine']++; return $x; } function PUE($x) { return preg_replace('/[\\\\x80-\\\\xff \\'\"\u003c\u003e]/e', \"'%'.dechex(ord('$0'))\", $x); } function SDV(\u0026$v,$x) { if (!isset($v)) $v=$x; } function SDVA(\u0026$var,$val) { foreach($val as $k=\u003e$v) if (!isset($var[$k])) $var[$k]=$v; } This collection of one-line \"helper\" functions has it all. Cryptic function names. PRR mutates global variables. PZZ just… returns an empty string. I don't know what PHSC does, and I don't want to, but it's called inside of pre_r and PVSE. Which I also don't know what they do. Speaking of PVSE, I note the regex is using backreferences, which is some advanced regex but I still have no idea what it's doing. I could figure it out, but I don't want to. PUE looks like it might be handling some misencoded characters, maybe. SDV is maybe kinda a coalesce function. Each line is its own representative line. None of this is code I'd want to maintain. On the flip side, the abbreviated function names, when read in reverse order, are exactly the sounds I made when I read this code: \"SDVASDVPUEPRRPZZPVSEPVSPSS\". It's okay, the doctors say I'll make a full recovery. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Thu, 23 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2596,
  "excerpt": "A Representative Line is a short snippet that makes you think, \"wow, I'd hate to see the rest of the code.\" A CodeSOD is a longer snippet, which also frequently makes you think, \"wow, I'd hate to see the rest of the code,\" but also is bad in ways that require you to look at the relationship between the lines in the code. I bring that up, because today's code sample is a long section, but really, it's just a collection of representative lines. Each line in this just makes me die a little on the inside.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-01-23 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. A Representative Line is a short snippet that makes you think, \"wow, I'd hate to see the rest of the code.\" A CodeSOD is a longer snippet, which also frequently makes you think, \"wow, I'd hate to see the rest of the code,\" but also is bad in ways that require you to look at the relationship between the lines in the code. I bring that up, because today's code sample is a long section, but really, it's just a collection of representative lines. Each line in this just makes me die a little on the inside. Belda found this: ## helper functions function stripmagic($x) { return get_magic_quotes_gpc() ? stripslashes($x) : $x; } function pre_r(\u0026$x) { return '\u003cpre\u003e'.PHSC(print_r($x, true)).'\u003c/pre\u003e'; } function PSS($x) { return str_replace('\\\\\"','\"',$x); } function PVS($x) { return preg_replace(\"/\\n[^\\\\S\\n]*(?=\\n)/\", \"\\n\u003c:vspace\u003e\", $x); } function PVSE($x) { return PVS(PHSC($x, ENT_NOQUOTES)); } function PZZ($x,$y='') { return ''; } function PRR($x=NULL) { if ($x || is_null($x)) $GLOBALS['RedoMarkupLine']++; return $x; } function PUE($x) { return preg_replace('/[\\\\x80-\\\\xff \\'\"\u003c\u003e]/e', \"'%'.dechex(ord('$0'))\", $x); } function SDV(\u0026$v,$x) { if (!isset($v)) $v=$x; } function SDVA(\u0026$var,$val) { foreach($val as $k=\u003e$v) if (!isset($var[$k])) $var[$k]=$v; } This collection of one-line \"helper\" functions has it all. Cryptic function names. PRR mutates global variables. PZZ just… returns an empty string. I don't know what PHSC does, and I don't want to, but it's called inside of pre_r and PVSE. Which I also don't know what they do. Speaking of PVSE, I note the regex is using backreferences, which is some advanced regex but I still have no idea what it's doing. I could figure it out, but I don't want to. PUE looks like it might be handling some misencoded characters, maybe. SDV is maybe kinda a coalesce function. Each line is its own representative line. None of this is code I'd want to maintain. On the flip side, the abbreviated function names, when read in reverse order, are exactly the sounds I made when I read this code: \"SDVASDVPUEPRRPZZPVSEPVSPSS\". It's okay, the doctors say I'll make a full recovery. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-23\"\u003e2025-01-23\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10833\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eA Representative Line is a short snippet that makes you think, \u0026#34;wow, I\u0026#39;d hate to see the rest of the code.\u0026#34; A CodeSOD is a longer snippet, which \u003cem\u003ealso\u003c/em\u003e frequently makes you think, \u0026#34;wow, I\u0026#39;d hate to see the rest of the code,\u0026#34; but also is bad in ways that require you to look at the relationship between the lines in the code.\u003c/p\u003e\n\u003cp\u003eI bring that up, because today\u0026#39;s code sample is a long section, but really, it\u0026#39;s just a collection of representative lines. Each line in this just makes me die a little on the inside.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBelda\u003c/strong\u003e found this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e## helper functions\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003estripmagic\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eget_magic_quotes_gpc\u003c/span\u003e() ? \u003cspan\u003estripslashes\u003c/span\u003e(\u003cspan\u003e$x\u003c/span\u003e) : \u003cspan\u003e$x\u003c/span\u003e; }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003epre_r\u003c/span\u003e(\u003cspan\u003e\u0026amp;\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026lt;pre\u0026gt;\u0026#39;\u003c/span\u003e.\u003cspan\u003ePHSC\u003c/span\u003e(\u003cspan\u003eprint_r\u003c/span\u003e(\u003cspan\u003e$x\u003c/span\u003e, \u003cspan\u003etrue\u003c/span\u003e)).\u003cspan\u003e\u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;\u003c/span\u003e; }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePSS\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003estr_replace\u003c/span\u003e(\u003cspan\u003e\u0026#39;\\\\\u0026#34;\u0026#39;\u003c/span\u003e,\u003cspan\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e,\u003cspan\u003e$x\u003c/span\u003e); }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePVS\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003epreg_replace\u003c/span\u003e(\u003cspan\u003e\u0026#34;/\\n[^\\\\S\\n]*(?=\\n)/\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;\\n\u0026lt;:vspace\u0026gt;\u0026#34;\u003c/span\u003e, \u003cspan\u003e$x\u003c/span\u003e); }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePVSE\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ePVS\u003c/span\u003e(\u003cspan\u003ePHSC\u003c/span\u003e(\u003cspan\u003e$x\u003c/span\u003e, ENT_NOQUOTES)); }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePZZ\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e,\u003cspan\u003e$y\u003c/span\u003e=\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e; }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePRR\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e=\u003cspan\u003eNULL\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e$x\u003c/span\u003e || \u003cspan\u003eis_null\u003c/span\u003e(\u003cspan\u003e$x\u003c/span\u003e)) \u003cspan\u003e$GLOBALS\u003c/span\u003e[\u003cspan\u003e\u0026#39;RedoMarkupLine\u0026#39;\u003c/span\u003e]++; \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e$x\u003c/span\u003e; }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ePUE\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003epreg_replace\u003c/span\u003e(\u003cspan\u003e\u0026#39;/[\\\\x80-\\\\xff \\\u0026#39;\u0026#34;\u0026lt;\u0026gt;]/e\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#34;\u0026#39;%\u0026#39;.dechex(ord(\u0026#39;\u003cspan\u003e$0\u003c/span\u003e\u0026#39;))\u0026#34;\u003c/span\u003e, \u003cspan\u003e$x\u003c/span\u003e); }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eSDV\u003c/span\u003e(\u003cspan\u003e\u0026amp;\u003cspan\u003e$v\u003c/span\u003e,\u003cspan\u003e$x\u003c/span\u003e\u003c/span\u003e) \u003c/span\u003e{ \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$v\u003c/span\u003e)) \u003cspan\u003e$v\u003c/span\u003e=\u003cspan\u003e$x\u003c/span\u003e; }\n\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eSDVA\u003c/span\u003e(\u003cspan\u003e\u0026amp;\u003cspan\u003e$var\u003c/span\u003e,\u003cspan\u003e$val\u003c/span\u003e\u003c/span\u003e)\n  \u003c/span\u003e{ \u003cspan\u003eforeach\u003c/span\u003e(\u003cspan\u003e$val\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003e$k\u003c/span\u003e=\u0026gt;\u003cspan\u003e$v\u003c/span\u003e) \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$var\u003c/span\u003e[\u003cspan\u003e$k\u003c/span\u003e])) \u003cspan\u003e$var\u003c/span\u003e[\u003cspan\u003e$k\u003c/span\u003e]=\u003cspan\u003e$v\u003c/span\u003e; }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis collection of one-line \u0026#34;helper\u0026#34; functions has it all. Cryptic function names. \u003ccode\u003ePRR\u003c/code\u003e mutates global variables. \u003ccode\u003ePZZ\u003c/code\u003e just… returns an empty string. I don\u0026#39;t know what \u003ccode\u003ePHSC\u003c/code\u003e does, and I don\u0026#39;t want to, but it\u0026#39;s called inside of \u003ccode\u003epre_r\u003c/code\u003e and \u003ccode\u003ePVSE\u003c/code\u003e. Which I also don\u0026#39;t know what they do. Speaking of \u003ccode\u003ePVSE\u003c/code\u003e, I note the regex is using backreferences, which is some advanced regex but I still have no idea what it\u0026#39;s doing. I could figure it out, but I don\u0026#39;t want to. \u003ccode\u003ePUE\u003c/code\u003e looks like it might be handling some misencoded characters, maybe. \u003ccode\u003eSDV\u003c/code\u003e is maybe kinda a coalesce function.\u003c/p\u003e\n\u003cp\u003eEach line is its own representative line. None of this is code I\u0026#39;d want to maintain.\u003c/p\u003e\n\u003cp\u003eOn the flip side, the abbreviated function names, when read in reverse order, are exactly the sounds I made when I read this code: \u0026#34;SDVASDVPUEPRRPZZPVSEPVSPSS\u0026#34;.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s okay, the doctors say I\u0026#39;ll make a full recovery.\u003c/p\u003e\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-23T06:30:00Z",
  "modifiedTime": null
}
