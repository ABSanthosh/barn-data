{
  "id": "fbca7139-382d-43c5-b9f9-7a3f40042055",
  "title": "CodeSOD: On Deep Background",
  "link": "https://thedailywtf.com/articles/on-deep-background",
  "description": "Andrew worked with Stuart. Stuart was one of those developers who didn't talk to anyone except to complain about how stupid management was, or how stupid the other developers were. Stuart was also the kind of person who would suddenly go on a tear, write three thousand lines of code in an evening, and then submit an pull request. He wouldn't respond to PR comments, however, and just wait until management needed the feature merged badly enough that someone said, \"just approve it so we can move on.\" .comment {border: none;} int iDisplayFlags = objectProps.DisplayInfo.BackgroundPrintFlags; bool bForceBackgroundOn = false; bool bForceBackgroundOff = false; // Can't use _displayTypeID because it will always be 21 since text displays as image if (_fileTypeID == 11) // TEXT { if ((iDisplayFlags \u0026 0x1008) != 0) // Text Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1001) != 0) // Text Background is not available { bForceBackgroundOff = true; } } else if (_displayTypeID == 21) // IMAGE { if ((iDisplayFlags \u0026 0x1200) != 0) // Image Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1040) != 0) // Image Background is not available { bForceBackgroundOff = true; } } bool useBackground = bForceBackgroundOn; // If an object does not have an Background and we try to use it, bad things happen. // So we check to see if we really have an Background, if not we don't want to try and use it if (!useBackground \u0026\u0026 objectProps.DisplayInfo.Background) { useBackground = Convert.ToBoolean(BackgroundShown); } if (bForceBackgroundOff) { useBackground = false; } This code is inside of a document viewer application. As you might gather from skimming it, the viewer will display text (as an image) or images (as an image) and may or may not display a background as part of it. This code, of course, uses a bunch of magic numbers and bitwise operators, which is always fun. We don't need any constants. It's important to note that all the other developers on the project did use enumerations and constants. The values were defined and well organized in the code- Stuart simply chose not to use them. You'll note that there's some comments and confusion about how we can't use _displayTypeID because text always displays as an image. I'm going to let Andrew explain this: The client this code exists in renders text documents to images (for reasons that aren’t relevant) when presenting them to the user. We have a multitude of filetypes that we do similar actions with, and fileTypes are user configurable. Because of this, we also keep track of the display type. This allows the user to configure a multitude of filetypes, and depending on the display type configured for the file type, we know if we can show it in our viewer. In the case of display type ‘text’ our viewer ultimately renders the text as an image. At some point in time Stuart decided that since the final product of a text document is an image, we should convert display type text over to image when referencing it in code (hence the comment ‘Can’t use display type ID’). If none of this paragraph makes any sense to you, then you’re not alone, because the second someone competent got wind of this, they thankfully nixed the idea and display type text, went back to meaning display type text (aka this goes through OUR TEXT RENDERER). What I get from that paragraph is that none of this makes sense, but it's all Stuart's fault. What makes this special is that the developer is writing code to control a binary status: \"do we show a background or not?\", but needs two booleans to handle this case. We have a bForceBackgroundOn and a bForceBackgroundOff. So, tracing through, if we're text and any of the bits 0x1008 are set in iDisplayFlags, we want the background on. Otherwise, if any of the bits 0x1001 are set, we want to force the background off. If it's an image, we do the same thing, though for 0x1200 and 0x1040 respectively. Then, we stuff bForceBackgroundOn into a different variable, useBackground. If that is false and a different property flag is set, we'll check the value of BackgroundShown- which we choose to convert to boolean which implies that it isn't a boolean, which raises its own questions, except it actually is a boolean value, and Stuart just didn't understand how to deal with a nullable boolean. Finally, after all this work, we check the bForceBackgroundOff value, and if that's true, we set useBackground to false. I'll be frank, none of this quite makes sense to me, and I can certainly imagine a world where the convoluted process of having a \"on\" and \"forceOff\" variable actually makes sense, so I'd almost think this code isn't that bad- except for this little detail, from Andrew: The final coup de grace is that all of the twisted logic for determining if the background is needed is completely unnecessary. When the call to retrieve the file to display is made, another method checks to see if the background was requested (useBackground), and performs the same logic check (albeit in a sane manner) as above. The code is confusing and unnecessary. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Mon, 10 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 5192,
  "excerpt": "Andrew worked with Stuart. Stuart was one of those developers who didn't talk to anyone except to complain about how stupid management was, or how stupid the other developers were. Stuart was also the kind of person who would suddenly go on a tear, write three thousand lines of code in an evening, and then submit an pull request. He wouldn't respond to PR comments, however, and just wait until management needed the feature merged badly enough that someone said, \"just approve it so we can move on.\" .comment {border: none;} int iDisplayFlags = objectProps.DisplayInfo.BackgroundPrintFlags; bool bForceBackgroundOn = false; bool bForceBackgroundOff = false; // Can't use _displayTypeID because it will always be 21 since text displays as image if (_fileTypeID == 11) // TEXT { if ((iDisplayFlags \u0026 0x1008) != 0) // Text Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1001) != 0) // Text Background is not available { bForceBackgroundOff = true; } } else if (_displayTypeID == 21) // IMAGE { if ((iDisplayFlags \u0026 0x1200) != 0) // Image Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1040) != 0) // Image Background is not available { bForceBackgroundOff = true; } } bool useBackground = bForceBackgroundOn; // If an object does not have an Background and we try to use it, bad things happen. // So we check to see if we really have an Background, if not we don't want to try and use it if (!useBackground \u0026\u0026 objectProps.DisplayInfo.Background) { useBackground = Convert.ToBoolean(BackgroundShown); } if (bForceBackgroundOff) { useBackground = false; }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Andrew worked with Stuart. Stuart was one of those developers who didn't talk to anyone except to complain about how stupid management was, or how stupid the other developers were. Stuart was also the kind of person who would suddenly go on a tear, write three thousand lines of code in an evening, and then submit an pull request. He wouldn't respond to PR comments, however, and just wait until management needed the feature merged badly enough that someone said, \"just approve it so we can move on.\" int iDisplayFlags = objectProps.DisplayInfo.BackgroundPrintFlags; bool bForceBackgroundOn = false; bool bForceBackgroundOff = false; // Can't use _displayTypeID because it will always be 21 since text displays as image if (_fileTypeID == 11) // TEXT { if ((iDisplayFlags \u0026 0x1008) != 0) // Text Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1001) != 0) // Text Background is not available { bForceBackgroundOff = true; } } else if (_displayTypeID == 21) // IMAGE { if ((iDisplayFlags \u0026 0x1200) != 0) // Image Background is required { bForceBackgroundOn = true; } else if ((iDisplayFlags \u0026 0x1040) != 0) // Image Background is not available { bForceBackgroundOff = true; } } bool useBackground = bForceBackgroundOn; // If an object does not have an Background and we try to use it, bad things happen. // So we check to see if we really have an Background, if not we don't want to try and use it if (!useBackground \u0026\u0026 objectProps.DisplayInfo.Background) { useBackground = Convert.ToBoolean(BackgroundShown); } if (bForceBackgroundOff) { useBackground = false; } This code is inside of a document viewer application. As you might gather from skimming it, the viewer will display text (as an image) or images (as an image) and may or may not display a background as part of it. This code, of course, uses a bunch of magic numbers and bitwise operators, which is always fun. We don't need any constants. It's important to note that all the other developers on the project did use enumerations and constants. The values were defined and well organized in the code- Stuart simply chose not to use them. You'll note that there's some comments and confusion about how we can't use _displayTypeID because text always displays as an image. I'm going to let Andrew explain this: The client this code exists in renders text documents to images (for reasons that aren’t relevant) when presenting them to the user. We have a multitude of filetypes that we do similar actions with, and fileTypes are user configurable. Because of this, we also keep track of the display type. This allows the user to configure a multitude of filetypes, and depending on the display type configured for the file type, we know if we can show it in our viewer. In the case of display type ‘text’ our viewer ultimately renders the text as an image. At some point in time Stuart decided that since the final product of a text document is an image, we should convert display type text over to image when referencing it in code (hence the comment ‘Can’t use display type ID’). If none of this paragraph makes any sense to you, then you’re not alone, because the second someone competent got wind of this, they thankfully nixed the idea and display type text, went back to meaning display type text (aka this goes through OUR TEXT RENDERER). What I get from that paragraph is that none of this makes sense, but it's all Stuart's fault. What makes this special is that the developer is writing code to control a binary status: \"do we show a background or not?\", but needs two booleans to handle this case. We have a bForceBackgroundOn and a bForceBackgroundOff. So, tracing through, if we're text and any of the bits 0x1008 are set in iDisplayFlags, we want the background on. Otherwise, if any of the bits 0x1001 are set, we want to force the background off. If it's an image, we do the same thing, though for 0x1200 and 0x1040 respectively. Then, we stuff bForceBackgroundOn into a different variable, useBackground. If that is false and a different property flag is set, we'll check the value of BackgroundShown- which we choose to convert to boolean which implies that it isn't a boolean, which raises its own questions, except it actually is a boolean value, and Stuart just didn't understand how to deal with a nullable boolean. Finally, after all this work, we check the bForceBackgroundOff value, and if that's true, we set useBackground to false. I'll be frank, none of this quite makes sense to me, and I can certainly imagine a world where the convoluted process of having a \"on\" and \"forceOff\" variable actually makes sense, so I'd almost think this code isn't that bad- except for this little detail, from Andrew: The final coup de grace is that all of the twisted logic for determining if the background is needed is completely unnecessary. When the call to retrieve the file to display is made, another method checks to see if the background was requested (useBackground), and performs the same logic check (albeit in a sane manner) as above. The code is confusing and unnecessary.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAndrew\u003c/strong\u003e worked with Stuart. Stuart was one of those developers who didn\u0026#39;t talk to anyone except to complain about how stupid management was, or how stupid the other developers were. Stuart was also the kind of person who would suddenly go on a tear, write three thousand lines of code in an evening, and then submit an pull request. He wouldn\u0026#39;t respond to PR comments, however, and just wait until management needed the feature merged badly enough that someone said, \u0026#34;just approve it so we can move on.\u0026#34;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eint\u003c/span\u003e iDisplayFlags = objectProps.DisplayInfo.BackgroundPrintFlags;\n\n\u003cspan\u003ebool\u003c/span\u003e bForceBackgroundOn = \u003cspan\u003efalse\u003c/span\u003e;\n\u003cspan\u003ebool\u003c/span\u003e bForceBackgroundOff = \u003cspan\u003efalse\u003c/span\u003e;\n\n\u003cspan\u003e// Can\u0026#39;t use _displayTypeID because it will always be 21 since text displays as image\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e (_fileTypeID == \u003cspan\u003e11\u003c/span\u003e) \u003cspan\u003e// TEXT\u003c/span\u003e\n{\n    \u003cspan\u003eif\u003c/span\u003e ((iDisplayFlags \u0026amp; \u003cspan\u003e0x1008\u003c/span\u003e) != \u003cspan\u003e0\u003c/span\u003e) \u003cspan\u003e// Text Background is required\u003c/span\u003e\n    {\n        bForceBackgroundOn = \u003cspan\u003etrue\u003c/span\u003e;\n    }\n    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e ((iDisplayFlags \u0026amp; \u003cspan\u003e0x1001\u003c/span\u003e) != \u003cspan\u003e0\u003c/span\u003e) \u003cspan\u003e// Text Background is not available\u003c/span\u003e\n    {\n        bForceBackgroundOff = \u003cspan\u003etrue\u003c/span\u003e;\n    }\n}\n\u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e (_displayTypeID == \u003cspan\u003e21\u003c/span\u003e) \u003cspan\u003e// IMAGE\u003c/span\u003e\n{\n    \u003cspan\u003eif\u003c/span\u003e ((iDisplayFlags \u0026amp; \u003cspan\u003e0x1200\u003c/span\u003e) != \u003cspan\u003e0\u003c/span\u003e) \u003cspan\u003e// Image Background is required\u003c/span\u003e\n    {\n        bForceBackgroundOn = \u003cspan\u003etrue\u003c/span\u003e;\n    }\n    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e ((iDisplayFlags \u0026amp; \u003cspan\u003e0x1040\u003c/span\u003e) != \u003cspan\u003e0\u003c/span\u003e) \u003cspan\u003e// Image Background is not available\u003c/span\u003e\n    {\n        bForceBackgroundOff = \u003cspan\u003etrue\u003c/span\u003e;\n    }\n}\n\n\u003cspan\u003ebool\u003c/span\u003e useBackground = bForceBackgroundOn;\n\n\u003cspan\u003e// If an object does not have an Background and we try to use it, bad things happen.\u003c/span\u003e\n\u003cspan\u003e// So we check to see if we really have an Background, if not we don\u0026#39;t want to try and use it\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e (!useBackground \u0026amp;\u0026amp; objectProps.DisplayInfo.Background)\n{\n    useBackground = Convert.ToBoolean(BackgroundShown);\n}\n\n\u003cspan\u003eif\u003c/span\u003e (bForceBackgroundOff)\n{\n    useBackground = \u003cspan\u003efalse\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code is inside of a document viewer application. As you might gather from skimming it, the viewer will display text (as an image) or images (as an image) and may or may not display a background as part of it.\u003c/p\u003e\n\u003cp\u003eThis code, of course, uses a bunch of magic numbers and bitwise operators, which is always fun. We don\u0026#39;t need any constants. It\u0026#39;s important to note that all the other developers on the project \u003cem\u003edid\u003c/em\u003e use enumerations and constants. The values were defined and well organized in the code- Stuart simply chose not to use them.\u003c/p\u003e\n\u003cp\u003eYou\u0026#39;ll note that there\u0026#39;s some comments and confusion about how we can\u0026#39;t use \u003ccode\u003e_displayTypeID\u003c/code\u003e because text always displays as an image. I\u0026#39;m going to let Andrew explain this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe client this code exists in renders text documents to images (for reasons that aren’t relevant) when presenting them to the user. We have a multitude of filetypes that we do similar actions with, and fileTypes are user configurable. Because of this, we also keep track of the display type. This allows the user to configure a multitude of filetypes, and depending on the display type configured for the file type, we know if we can show it in our viewer. In the case of display type ‘text’ our viewer ultimately renders the text as an image. At some point in time Stuart decided that since the final product of a text document is an image, we should convert display type text over to image when referencing it in code (hence the comment ‘Can’t use display type ID’). If none of this paragraph makes any sense to you, then you’re not alone, because the second someone competent got wind of this, they thankfully nixed the idea and display type text, went back to meaning display type text (aka this goes through OUR TEXT RENDERER).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhat I get from that paragraph is that none of this makes sense, but it\u0026#39;s all Stuart\u0026#39;s fault.\u003c/p\u003e\n\u003cp\u003eWhat makes this special is that the developer is writing code to control a binary status: \u0026#34;do we show a background or not?\u0026#34;, but needs \u003cem\u003etwo\u003c/em\u003e booleans to handle this case. We have a \u003ccode\u003ebForceBackgroundOn\u003c/code\u003e and a \u003ccode\u003ebForceBackgroundOff\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo, tracing through, if we\u0026#39;re text and any of the bits \u003ccode\u003e0x1008\u003c/code\u003e are set in \u003ccode\u003eiDisplayFlags\u003c/code\u003e, we want the background on. Otherwise, if any of the bits \u003ccode\u003e0x1001\u003c/code\u003e are set, we want to force the background off. If it\u0026#39;s an image, we do the same thing, though for \u003ccode\u003e0x1200\u003c/code\u003e and \u003ccode\u003e0x1040\u003c/code\u003e respectively.\u003c/p\u003e\n\u003cp\u003eThen, we stuff \u003ccode\u003ebForceBackgroundOn\u003c/code\u003e into a different variable, \u003ccode\u003euseBackground\u003c/code\u003e. If that is false and a different property flag is set, we\u0026#39;ll check the value of \u003ccode\u003eBackgroundShown\u003c/code\u003e- which we choose to convert to boolean which implies that it \u003cem\u003eisn\u0026#39;t\u003c/em\u003e a boolean, which raises its own questions, except \u003cem\u003eit actually is a boolean value\u003c/em\u003e, and Stuart just didn\u0026#39;t understand how to deal with a nullable boolean. Finally, after all this work, we check the \u003ccode\u003ebForceBackgroundOff\u003c/code\u003e value, and if that\u0026#39;s true, we set \u003ccode\u003euseBackground\u003c/code\u003e to false.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ll be frank, none of this quite makes sense to me, and I can certainly imagine a world where the convoluted process of having a \u0026#34;on\u0026#34; and \u0026#34;forceOff\u0026#34; variable actually makes sense, so I\u0026#39;d almost think this code isn\u0026#39;t that bad- except for this little detail, from Andrew:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe final coup de grace is that all of the twisted logic for determining if the background is needed is completely unnecessary. When the call to retrieve the file to display is made, another method checks to see if the background was requested (useBackground), and performs the same logic check (albeit in a sane manner) as above.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe code is confusing \u003cem\u003eand\u003c/em\u003e unnecessary.\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-10T06:30:00Z",
  "modifiedTime": null
}
