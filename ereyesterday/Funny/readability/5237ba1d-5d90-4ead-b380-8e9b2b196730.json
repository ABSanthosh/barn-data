{
  "id": "5237ba1d-5d90-4ead-b380-8e9b2b196730",
  "title": "CodeSOD: Don't Date Me",
  "link": "https://thedailywtf.com/articles/don-t-date-me",
  "description": "I remember in some intro-level compsci class learning that credit card numbers were checksummed, and writing basic functions to validate those checksums as an exercize. I was young and was still using my \"starter\" credit card with a whopping limit of $500, so that was all news to me. Alex's company had a problem processing credit cards: they rejected a lot of credit cards as being invalid. The checksum code seemed to be working fine, so what could the problem be? Well, the problem became more obvious when someone's card worked one day, and stopped working the very next day, and they just so happened to be the first and last day of the month. protected function validateExpirationCcDate($i_year, $i_month) { return (((int)strftime('%y') \u003c= $i_year) \u0026\u0026 ((int)strftime ('%m') \u003c= $i_month))? true : false; } This function is horrible; because it uses strftime (instead of taking the comparison date and time as a parameter) it's not unit-testable. We're (ab)using casts to convert strings into integers so we can do our comparison. We're using a ternary to return a boolean value instead of just returning the result of the boolean expression. But of course, that's all the amuse bouche: the main course is the complete misunderstanding of basic logic. According to this code, a credit card is valid if the expiration year is less than or equal to the current year and the month is less than or equal to the current month. As this article goes live in March, 2025, this code would allow credit cards from April, 2026, as it should. But it would reject any cards with an expiration of February, 2028. Per Alex, \"This is a credit card date validation that has been in use for ages.\" [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Thu, 13 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2090,
  "excerpt": "I remember in some intro-level compsci class learning that credit card numbers were checksummed, and writing basic functions to validate those checksums as an exercize. I was young and was still using my \"starter\" credit card with a whopping limit of $500, so that was all news to me. Alex's company had a problem processing credit cards: they rejected a lot of credit cards as being invalid. The checksum code seemed to be working fine, so what could the problem be? Well, the problem became more obvious when someone's card worked one day, and stopped working the very next day, and they just so happened to be the first and last day of the month.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-03-13 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. I remember in some intro-level compsci class learning that credit card numbers were checksummed, and writing basic functions to validate those checksums as an exercize. I was young and was still using my \"starter\" credit card with a whopping limit of $500, so that was all news to me. Alex's company had a problem processing credit cards: they rejected a lot of credit cards as being invalid. The checksum code seemed to be working fine, so what could the problem be? Well, the problem became more obvious when someone's card worked one day, and stopped working the very next day, and they just so happened to be the first and last day of the month. protected function validateExpirationCcDate($i_year, $i_month) { return (((int)strftime('%y') \u003c= $i_year) \u0026\u0026 ((int)strftime ('%m') \u003c= $i_month))? true : false; } This function is horrible; because it uses strftime (instead of taking the comparison date and time as a parameter) it's not unit-testable. We're (ab)using casts to convert strings into integers so we can do our comparison. We're using a ternary to return a boolean value instead of just returning the result of the boolean expression. But of course, that's all the amuse bouche: the main course is the complete misunderstanding of basic logic. According to this code, a credit card is valid if the expiration year is less than or equal to the current year and the month is less than or equal to the current month. As this article goes live in March, 2025, this code would allow credit cards from April, 2026, as it should. But it would reject any cards with an expiration of February, 2028. Per Alex, \"This is a credit card date validation that has been in use for ages.\" [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-13\"\u003e2025-03-13\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10869\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eI remember in some intro-level compsci class learning that credit card numbers were checksummed, and writing basic functions to validate those checksums as an exercize. I was young and was still using my \u0026#34;starter\u0026#34; credit card with a whopping limit of $500, so that was all news to me.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAlex\u003c/strong\u003e\u0026#39;s company had a problem processing credit cards: they rejected a \u003cem\u003elot\u003c/em\u003e of credit cards as being invalid. The checksum code seemed to be working fine, so what could the problem be? Well, the problem became more obvious when someone\u0026#39;s card worked one day, and stopped working the very next day, and they just so happened to be the first and last day of the month.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003evalidateExpirationCcDate\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$i_year\u003c/span\u003e, \u003cspan\u003e$i_month\u003c/span\u003e\u003c/span\u003e) \u003c/span\u003e{\n        \u003cspan\u003ereturn\u003c/span\u003e (((\u003cspan\u003eint\u003c/span\u003e)\u003cspan\u003estrftime\u003c/span\u003e(\u003cspan\u003e\u0026#39;%y\u0026#39;\u003c/span\u003e) \u0026lt;= \u003cspan\u003e$i_year\u003c/span\u003e) \u0026amp;\u0026amp; ((\u003cspan\u003eint\u003c/span\u003e)\u003cspan\u003estrftime\u003c/span\u003e (\u003cspan\u003e\u0026#39;%m\u0026#39;\u003c/span\u003e) \u0026lt;= \u003cspan\u003e$i_month\u003c/span\u003e))? \u003cspan\u003etrue\u003c/span\u003e : \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function is horrible; because it uses \u003ccode\u003estrftime\u003c/code\u003e (instead of taking the comparison date and time as a parameter) it\u0026#39;s not unit-testable. We\u0026#39;re (ab)using casts to convert strings into integers so we can do our comparison. We\u0026#39;re using a ternary to return a boolean value \u003cem\u003einstead of just returning the result of the boolean expression\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBut of course, that\u0026#39;s all the \u003cem\u003eamuse bouche\u003c/em\u003e: the main course is the complete misunderstanding of basic logic. According to this code, a credit card is valid if the expiration year is less than or equal to the current year \u003cem\u003eand\u003c/em\u003e the month is less than or equal to the current month. As this article goes live in March, 2025, this code would allow credit cards from April, 2026, as it should. But it would reject any cards with an expiration of February, 2028.\u003c/p\u003e\n\u003cp\u003ePer Alex, \u0026#34;This is a credit card date validation that has been in use for ages.\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-13T06:30:00Z",
  "modifiedTime": null
}
