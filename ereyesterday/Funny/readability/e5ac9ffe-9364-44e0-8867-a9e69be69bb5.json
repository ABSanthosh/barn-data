{
  "id": "e5ac9ffe-9364-44e0-8867-a9e69be69bb5",
  "title": "Representative Line: Whitespace: A Frontier",
  "link": "https://thedailywtf.com/articles/whitespace-a-frontier",
  "description": "Tim has been working on a large C++ project which has been around for many, many years. It's a tool built for, in Tim's words, \"an esoteric field\", and most of the developers over the past 30 years have been PhD students. This particular representative line is present with its original whitespace, and the original variable names. It has been in the code base since 2010. Assignment::Ptr ra = Assignment::makeAssignment(I, addr, func, block, RA); The extra bonus is that Assignment::Ptr is actually an alias for boost::shared_ptr. As you might gather from the name shared_ptr, that's a reference-counted way to manage pointers to memory, and thus avoid memory leaks. The developers just couldn't tolerate using the names provided by their widely used library solving a widely understood problem, and needed to invent their own names, which made the code less clear. The same is true for makeAssignment. And this pattern is used for nearly every class, because the developers involved didn't understand object lifetimes, when to allow things to be stack allocated, or how ownership should really work in an application. This is hardly the only WTF in the code, but Tim says: Preceding the 98 standard, there is a LOT of C-with-classes code. But this representative line speaks to the complete lack of thought that has gone into much of codebase. That whitespace is as-is from the source. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Wed, 05 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1870,
  "excerpt": "Tim has been working on a large C++ project which has been around for many, many years. It's a tool built for, in Tim's words, \"an esoteric field\", and most of the developers over the past 30 years have been PhD students. This particular representative line is present with its original whitespace, and the original variable names. It has been in the code base since 2010.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-02-05 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Tim has been working on a large C++ project which has been around for many, many years. It's a tool built for, in Tim's words, \"an esoteric field\", and most of the developers over the past 30 years have been PhD students. This particular representative line is present with its original whitespace, and the original variable names. It has been in the code base since 2010. Assignment::Ptr ra = Assignment::makeAssignment(I, addr, func, block, RA); The extra bonus is that Assignment::Ptr is actually an alias for boost::shared_ptr\u003cAssignment\u003e. As you might gather from the name shared_ptr, that's a reference-counted way to manage pointers to memory, and thus avoid memory leaks. The developers just couldn't tolerate using the names provided by their widely used library solving a widely understood problem, and needed to invent their own names, which made the code less clear. The same is true for makeAssignment. And this pattern is used for nearly every class, because the developers involved didn't understand object lifetimes, when to allow things to be stack allocated, or how ownership should really work in an application. This is hardly the only WTF in the code, but Tim says: Preceding the 98 standard, there is a LOT of C-with-classes code. But this representative line speaks to the complete lack of thought that has gone into much of codebase. That whitespace is as-is from the source. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-05\"\u003e2025-02-05\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10842\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eTim\u003c/strong\u003e has been working on a large C++ project which has been around for many, \u003cem\u003emany\u003c/em\u003e years. It\u0026#39;s a tool built for, in Tim\u0026#39;s words, \u0026#34;an esoteric field\u0026#34;, and most of the developers over the past 30 years have been PhD students.\u003c/p\u003e\n\u003cp\u003eThis particular representative line is present with its original whitespace, and the original variable names. It has been in the code base since 2010.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAssignment::Ptr ra = Assignment::\u003cspan\u003emakeAssignment\u003c/span\u003e(I,\n\t\t\t\t\taddr,\n\t\t\t\t\tfunc,\n                                                    block,\n\t\t\t\t\tRA);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe extra bonus is that \u003ccode\u003eAssignment::Ptr\u003c/code\u003e is actually an alias for \u003ccode\u003eboost::shared_ptr\u0026lt;Assignment\u0026gt;\u003c/code\u003e. As you might gather from the name \u003ccode\u003eshared_ptr\u003c/code\u003e, that\u0026#39;s a reference-counted way to manage pointers to memory, and thus avoid memory leaks.\u003c/p\u003e\n\u003cp\u003eThe developers just couldn\u0026#39;t tolerate using the names provided by their widely used library solving a widely understood problem, and needed to invent their own names, which made the code less clear. The same is true for \u003ccode\u003emakeAssignment\u003c/code\u003e. And this pattern is used for nearly every class, because the developers involved didn\u0026#39;t understand object lifetimes, when to allow things to be stack allocated, or how ownership should really work in an application.\u003c/p\u003e\n\u003cp\u003eThis is hardly the only WTF in the code, but Tim says:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePreceding the 98 standard, there is a LOT of C-with-classes code. But this representative line speaks to the complete lack of thought that has gone into much of codebase. That whitespace is as-is from the source.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-05T06:30:00Z",
  "modifiedTime": null
}
