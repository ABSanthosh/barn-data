{
  "id": "b588222a-eba5-435f-84fb-e1f1e80cc0ec",
  "title": "CodeSOD: Irritants Make Perls",
  "link": "https://thedailywtf.com/articles/irritants-make-perls",
  "description": "Grün works for a contracting company. It's always been a small shop, but a recent glut of contracts meant that they needed to staff up. Lars, the boss, wanted more staff, but didn't want to increase the amount paid in salaries any more than absolutely necessary, so he found a \"clever\" solution. He hired college students, part time, and then threw them in the deep end of Perl code, a language some of them had heard of, but none of them had used. It didn't go great. # note that $req is immutable (no method apart from constructor sets a value for its members) sub release { my $req = shift; my $body = 'operation:' . ' '; if (uc($req-\u003eop()) eq 'RELEASE') { $body .= 'release' . \"\\n\"; # do more stuff to body ... } else { $body = 'operation: request' . \"\\n\"; } if (uc($req-\u003eop()) ne 'RELEASE') { register_error('unable to send release mail'); } # and so on ... } This method checks a $req parameter. Notably, it's not being passed as a prototype parameter, e.g. as part of the signature- sub release($req)- but accessed by shifting out of @_, the special variable which holds all the parameters. This is the kind of move that gives Perl it's reputation for being write only, and it's also a sign that they were cribbing off the Perl documentation as they write. For whatever reason, using shift seems to be the first way Perl documentation teaches people to write subroutines. This whole thing is doing string concatenation on a $body variable, presumably an email body. I'd normally have unkind words here, but this is Perl- giant piles of string concatenation is just basically par for the course. The \"fun\" part in this, of course, is the if statements. If the $req is to \"RELEASE\", we append one thing to the body, if it's not, we append a different thing. But if it's not, we also register_error. Why couldn't that be in the else block? Likely because the poor developers didn't have a good understanding of the code, and the requirements kept changing. But it's a little head scratcher, especially when we look at the one place this function is called: if (uc($req-\u003eop()) eq 'RELEASE') { return release($req); } Now, on one hand, having the function check for its error condition and avoiding triggering the error condition at the call site is good defensive programming. But on the other, this all sorta smacks of a developer not fully understanding the problem and spamming checks in there to try and prevent a bug from appearing. But the real fun one is this snippet, which seems like another case of not really understanding what's happening: if(($ok1==1 and $ok3==1)or($ok1==1 and $ok3==1)) { print p(\"Master changed!\"); } We just check the same condition twice. Now, of course, it's not the developers' fault that they didn't have a good picture of what they should have been doing. Lars was trying to save money by hiring the inexperienced, and as usually happens, the entire thing cost him more money, because Grün and the rest of the team needed to go back over the code and rewrite it. The upshot, for our college students, is that this was a good resume builder. They've all since moved on to bigger companies with better paychecks and actual mentoring programs that will develop their skills. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Mon, 13 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3475,
  "excerpt": "Grün works for a contracting company. It's always been a small shop, but a recent glut of contracts meant that they needed to staff up. Lars, the boss, wanted more staff, but didn't want to increase the amount paid in salaries any more than absolutely necessary, so he found a \"clever\" solution. He hired college students, part time, and then threw them in the deep end of Perl code, a language some of them had heard of, but none of them had used. It didn't go great.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Grün works for a contracting company. It's always been a small shop, but a recent glut of contracts meant that they needed to staff up. Lars, the boss, wanted more staff, but didn't want to increase the amount paid in salaries any more than absolutely necessary, so he found a \"clever\" solution. He hired college students, part time, and then threw them in the deep end of Perl code, a language some of them had heard of, but none of them had used. It didn't go great. # note that $req is immutable (no method apart from constructor sets a value for its members) sub release { my $req = shift; my $body = 'operation:' . ' '; if (uc($req-\u003eop()) eq 'RELEASE') { $body .= 'release' . \"\\n\"; # do more stuff to body ... } else { $body = 'operation: request' . \"\\n\"; } if (uc($req-\u003eop()) ne 'RELEASE') { register_error('unable to send release mail'); } # and so on ... } This method checks a $req parameter. Notably, it's not being passed as a prototype parameter, e.g. as part of the signature- sub release($req)- but accessed by shifting out of @_, the special variable which holds all the parameters. This is the kind of move that gives Perl it's reputation for being write only, and it's also a sign that they were cribbing off the Perl documentation as they write. For whatever reason, using shift seems to be the first way Perl documentation teaches people to write subroutines. This whole thing is doing string concatenation on a $body variable, presumably an email body. I'd normally have unkind words here, but this is Perl- giant piles of string concatenation is just basically par for the course. The \"fun\" part in this, of course, is the if statements. If the $req is to \"RELEASE\", we append one thing to the body, if it's not, we append a different thing. But if it's not, we also register_error. Why couldn't that be in the else block? Likely because the poor developers didn't have a good understanding of the code, and the requirements kept changing. But it's a little head scratcher, especially when we look at the one place this function is called: if (uc($req-\u003eop()) eq 'RELEASE') { return release($req); } Now, on one hand, having the function check for its error condition and avoiding triggering the error condition at the call site is good defensive programming. But on the other, this all sorta smacks of a developer not fully understanding the problem and spamming checks in there to try and prevent a bug from appearing. But the real fun one is this snippet, which seems like another case of not really understanding what's happening: if(($ok1==1 and $ok3==1)or($ok1==1 and $ok3==1)) { print p(\"Master changed!\"); } We just check the same condition twice. Now, of course, it's not the developers' fault that they didn't have a good picture of what they should have been doing. Lars was trying to save money by hiring the inexperienced, and as usually happens, the entire thing cost him more money, because Grün and the rest of the team needed to go back over the code and rewrite it. The upshot, for our college students, is that this was a good resume builder. They've all since moved on to bigger companies with better paychecks and actual mentoring programs that will develop their skills. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eGrün\u003c/strong\u003e works for a contracting company. It\u0026#39;s always been a small shop, but a recent glut of contracts meant that they needed to staff up. Lars, the boss, wanted more staff, but didn\u0026#39;t want to increase the amount paid in salaries any more than absolutely necessary, so he found a \u0026#34;clever\u0026#34; solution. He hired college students, part time, and then threw them in the deep end of Perl code, a language some of them had heard of, but none of them had used.\u003c/p\u003e\n\u003cp\u003eIt didn\u0026#39;t go great.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# note that $req is immutable (no method apart from constructor sets a value for its members)\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003esub\u003c/span\u003e \u003cspan\u003erelease\u003c/span\u003e \u003c/span\u003e{\n   \u003cspan\u003emy\u003c/span\u003e $req = \u003cspan\u003eshift\u003c/span\u003e;\n  \n   \u003cspan\u003emy\u003c/span\u003e $body = \u003cspan\u003e\u0026#39;operation:\u0026#39;\u003c/span\u003e . \u003cspan\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\n\n   \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003euc\u003c/span\u003e($req-\u0026gt;op()) eq \u003cspan\u003e\u0026#39;RELEASE\u0026#39;\u003c/span\u003e) {\n        $body .= \u003cspan\u003e\u0026#39;release\u0026#39;\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e;\n        \u003cspan\u003e# do more stuff to body\u003c/span\u003e\n        ...\n   }\n   \u003cspan\u003eelse\u003c/span\u003e {\n       $body = \u003cspan\u003e\u0026#39;operation: request\u0026#39;\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e;\n   }\n\n   \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003euc\u003c/span\u003e($req-\u0026gt;op()) \u003cspan\u003ene\u003c/span\u003e \u003cspan\u003e\u0026#39;RELEASE\u0026#39;\u003c/span\u003e) {\n           register_error(\u003cspan\u003e\u0026#39;unable to send release mail\u0026#39;\u003c/span\u003e);    \n   }\n   \n   \u003cspan\u003e# and so on\u003c/span\u003e\n   ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method checks a \u003ccode\u003e$req\u003c/code\u003e parameter. Notably, it\u0026#39;s not being passed as a prototype parameter, e.g. \u003cem\u003eas part of the signature\u003c/em\u003e- \u003ccode\u003esub release($req)\u003c/code\u003e- but accessed by shifting out of \u003ccode\u003e@_\u003c/code\u003e, the special variable which holds all the parameters. This is the kind of move that gives Perl it\u0026#39;s reputation for being write only, and it\u0026#39;s also a sign that they were cribbing off the Perl documentation as they write. For whatever reason, using \u003ccode\u003eshift\u003c/code\u003e seems to be the first way Perl documentation teaches people to write subroutines.\u003c/p\u003e\n\u003cp\u003eThis whole thing is doing string concatenation on a \u003ccode\u003e$body\u003c/code\u003e variable, presumably an email body. I\u0026#39;d normally have unkind words here, but this is Perl- giant piles of string concatenation is just basically par for the course.\u003c/p\u003e\n\u003cp\u003eThe \u0026#34;fun\u0026#34; part in this, of course, is the \u003ccode\u003eif\u003c/code\u003e statements. If the \u003ccode\u003e$req\u003c/code\u003e is to \u0026#34;RELEASE\u0026#34;, we append one thing to the body, if it\u0026#39;s not, we append a different thing. But if it\u0026#39;s not, we \u003cem\u003ealso\u003c/em\u003e \u003ccode\u003eregister_error\u003c/code\u003e. Why couldn\u0026#39;t that be in the \u003ccode\u003eelse\u003c/code\u003e block? Likely because the poor developers didn\u0026#39;t have a good understanding of the code, and the requirements kept changing. But it\u0026#39;s a little head scratcher, especially when we look at the one place this function is called:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003euc\u003c/span\u003e($req-\u0026gt;op()) eq \u003cspan\u003e\u0026#39;RELEASE\u0026#39;\u003c/span\u003e) {\n     \u003cspan\u003ereturn\u003c/span\u003e release($req);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, on one hand, having the function check for its error condition \u003cem\u003eand\u003c/em\u003e avoiding triggering the error condition at the call site is good defensive programming. But on the other, this all sorta smacks of a developer not fully understanding the problem and spamming checks in there to try and prevent a bug from appearing.\u003c/p\u003e\n\u003cp\u003eBut the real fun one is this snippet, which seems like another case of not really understanding what\u0026#39;s happening:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e(($ok1==\u003cspan\u003e1\u003c/span\u003e \u003cspan\u003eand\u003c/span\u003e $ok3==\u003cspan\u003e1\u003c/span\u003e)\u003cspan\u003eor\u003c/span\u003e($ok1==\u003cspan\u003e1\u003c/span\u003e \u003cspan\u003eand\u003c/span\u003e $ok3==\u003cspan\u003e1\u003c/span\u003e))\n{\n    \u003cspan\u003eprint\u003c/span\u003e p(\u003cspan\u003e\u0026#34;Master changed!\u0026#34;\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe just check the same condition twice.\u003c/p\u003e\n\u003cp\u003eNow, of course, it\u0026#39;s not the developers\u0026#39; fault that they didn\u0026#39;t have a good picture of what they should have been doing. Lars was trying to save money by hiring the inexperienced, and as usually happens, the entire thing cost him \u003cem\u003emore\u003c/em\u003e money, because Grün and the rest of the team needed to go back over the code and rewrite it.\u003c/p\u003e\n\u003cp\u003eThe upshot, for our college students, is that this was a good resume builder. They\u0026#39;ve all since moved on to bigger companies with better paychecks and actual mentoring programs that will develop their skills.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-01-13T06:30:00Z",
  "modifiedTime": null
}
