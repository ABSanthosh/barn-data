{
  "id": "c28c6b64-d40e-49ed-be38-367ecc08a441",
  "title": "CodeSOD: Just a Few Updates",
  "link": "https://thedailywtf.com/articles/just-a-few-updates",
  "description": "Misha has a co-worker who has unusual ideas about how database performance works. This co-worker, Ted, has a vague understanding that a SQL query optimizer will attempt to find the best execution path for a given query. Unfortunately, Ted has just enough knowledge to be dangerous; he believes that the job of a developer is to write SQL queries that will \"trick\" the optimizer into doing an even better job, somehow. This means that Ted loves subqueries. For example, let's say you had a table called tbl_updater, which is used to store pending changes for a batch operation that will later get applied. Each change in updater has a unique change key that identifies it. For reasons best not looked into too deeply, at some point in the lifecycle of a record in this table, the application needs to null out several key fields based on the change value. If you or I were writing this, we might do something like this: update tbl_updater set id = null, date = null, location = null, type = null, type_id = null where change = @change And this is how you know that you and I are fools, because we didn't use a single subquery. update tbl_updater set id = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set date = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set location = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set type = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set date = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set type_id = null where updater in (select updater from tbl_updater where change = @change) So here, Ted uses where updater in (subquery) which is certainly annoying and awkward, given that we know that change is a unique key. Maybe Ted didn't know that? Of course, one of the great powers of relational databases is that they offer data dictionaries so you can review the structure of tables before writing queries, so it's very easy to find out that the key is unique. But that simple ignorance doesn't explain why Ted broke it out into multiple updates. If insanity is doing the same thing again and again expecting different results, what does it mean when you actually do get different results but also could have just done all this once? Misha asked Ted why he took this approach. \"It's faster,\" he replied. When Misha showed benchmarks that proved it emphatically wasn't faster, he just shook his head. \"It's still faster this way.\" Faster than what? Misha wondered. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Thu, 17 Jul 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2999,
  "excerpt": "Misha has a co-worker who has unusual ideas about how database performance works. This co-worker, Ted, has a vague understanding that a SQL query optimizer will attempt to find the best execution path for a given query. Unfortunately, Ted has just enough knowledge to be dangerous; he believes that the job of a developer is to write SQL queries that will \"trick\" the optimizer into doing an even better job, somehow. This means that Ted loves subqueries.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-07-17 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Misha has a co-worker who has unusual ideas about how database performance works. This co-worker, Ted, has a vague understanding that a SQL query optimizer will attempt to find the best execution path for a given query. Unfortunately, Ted has just enough knowledge to be dangerous; he believes that the job of a developer is to write SQL queries that will \"trick\" the optimizer into doing an even better job, somehow. This means that Ted loves subqueries. For example, let's say you had a table called tbl_updater, which is used to store pending changes for a batch operation that will later get applied. Each change in updater has a unique change key that identifies it. For reasons best not looked into too deeply, at some point in the lifecycle of a record in this table, the application needs to null out several key fields based on the change value. If you or I were writing this, we might do something like this: update tbl_updater set id = null, date = null, location = null, type = null, type_id = null where change = @change And this is how you know that you and I are fools, because we didn't use a single subquery. update tbl_updater set id = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set date = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set location = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set type = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set date = null where updater in (select updater from tbl_updater where change = @change) update tbl_updater set type_id = null where updater in (select updater from tbl_updater where change = @change) So here, Ted uses where updater in (subquery) which is certainly annoying and awkward, given that we know that change is a unique key. Maybe Ted didn't know that? Of course, one of the great powers of relational databases is that they offer data dictionaries so you can review the structure of tables before writing queries, so it's very easy to find out that the key is unique. But that simple ignorance doesn't explain why Ted broke it out into multiple updates. If insanity is doing the same thing again and again expecting different results, what does it mean when you actually do get different results but also could have just done all this once? Misha asked Ted why he took this approach. \"It's faster,\" he replied. When Misha showed benchmarks that proved it emphatically wasn't faster, he just shook his head. \"It's still faster this way.\" Faster than what? Misha wondered.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-07-17\"\u003e2025-07-17\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10963\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMisha\u003c/strong\u003e has a co-worker who has unusual ideas about how database performance works. This co-worker, Ted, has a vague understanding that a SQL query optimizer will attempt to find the best execution path for a given query. Unfortunately, Ted has just enough knowledge to be dangerous; he believes that the job of a developer is to write SQL queries that will \u0026#34;trick\u0026#34; the optimizer into doing an even better job, somehow.\u003c/p\u003e\n\u003cp\u003eThis means that Ted \u003cem\u003eloves\u003c/em\u003e subqueries.\u003c/p\u003e\n\u003cp\u003eFor example, let\u0026#39;s say you had a table called \u003ccode\u003etbl_updater\u003c/code\u003e, which is used to store pending changes for a batch operation that will later get applied. Each change in updater has a unique \u003ccode\u003echange\u003c/code\u003e key that identifies it. For reasons best not looked into too deeply, at some point in the lifecycle of a record in this table, the application needs to null out several key fields based on the \u003ccode\u003echange\u003c/code\u003e value.\u003c/p\u003e\n\u003cp\u003eIf you or I were writing this, we might do something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003edate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e, location \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e, type \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e, type_id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd this is how you know that you and I are fools, because we didn\u0026#39;t use a single subquery.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n\n\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003edate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n\n\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e location \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n       \n\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e type \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n       \n\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003edate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n       \n\u003cspan\u003eupdate\u003c/span\u003e tbl_updater \u003cspan\u003eset\u003c/span\u003e type_id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e updater \u003cspan\u003ein\u003c/span\u003e\n        (\u003cspan\u003eselect\u003c/span\u003e updater \u003cspan\u003efrom\u003c/span\u003e tbl_updater \u003cspan\u003ewhere\u003c/span\u003e change \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@change\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo here, Ted uses \u003ccode\u003ewhere updater in (subquery)\u003c/code\u003e which is certainly annoying and awkward, given that we know that \u003ccode\u003echange\u003c/code\u003e is a unique key. Maybe Ted didn\u0026#39;t know that? Of course, one of the great powers of relational databases is that they offer data dictionaries so you can review the structure of tables before writing queries, so it\u0026#39;s very easy to find \u003cem\u003eout\u003c/em\u003e that the key is unique.\u003c/p\u003e\n\u003cp\u003eBut that simple ignorance doesn\u0026#39;t explain why Ted broke it out into multiple updates. If insanity is doing the same thing again and again expecting different results, what does it mean when you actually do get different results but also could have just done all this once?\u003c/p\u003e\n\u003cp\u003eMisha asked Ted why he took this approach. \u0026#34;It\u0026#39;s faster,\u0026#34; he replied. When Misha showed benchmarks that proved it emphatically wasn\u0026#39;t faster, he just shook his head. \u0026#34;It\u0026#39;s still faster this way.\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFaster than what?\u003c/em\u003e Misha wondered.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-07-17T06:30:00Z",
  "modifiedTime": null
}
