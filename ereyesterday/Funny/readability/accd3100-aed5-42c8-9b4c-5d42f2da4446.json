{
  "id": "accd3100-aed5-42c8-9b4c-5d42f2da4446",
  "title": "CodeSOD: A Matter of Understanding",
  "link": "https://thedailywtf.com/articles/a-matter-of-understanding",
  "description": "For years, Victoria had a co-worker who \"programmed by Google Search\"; they didn't understand how anything worked, they simply plugged their problem into Google search and then copy/pasted and edited until they got code that worked. For this developer, I'm sure ChatGPT has been a godsend, but this code predates its wide use. It's pure \"Googlesauce\". StringBuffer stringBuffer = new StringBuffer(); stringBuffer.append(\"SELECT * FROM TABLE1 WHERE COLUMN1 = 1 WITH UR\"); String sqlStr = stringBuffer.toString(); ps = getConnection().prepareStatement(sqlStr); ps.setInt(1, code); rs = ps.executeQuery(); while (rs.next()) { count++; } The core of this WTF isn't anything special- instead of running a SELECT COUNT they run a SELECT and then loop over the results to get the count. But it's all the little details in here which make it fun. They start by using a StringBuffer to construct their query- not a horrible plan when the query is long, but this is just a single, simple, one-line query. The query contains a WITH clause, but it's in the wrong spot. Then they prepareStatement it, which does nothing, since this query doesn't contain any parameters (and also, isn't syntactically valid). Once it's prepared, they set the non-existent parameter 1 to a value- this operation will throw an exception because there are no parameters in the query. Finally, they loop across the results to count. The real WTF is that this code ended up in the code base, somehow. The developer said, \"Yes, this seems good, I'll check in this non-functional blob that I definitely don't understand,\" and then there were no protections in place to keep that from happening. Now it falls to more competent developers, like Victoria, to clean up after this co-worker. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Mon, 04 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2184,
  "excerpt": "For years, Victoria had a co-worker who \"programmed by Google Search\"; they didn't understand how anything worked, they simply plugged their problem into Google search and then copy/pasted and edited until they got code that worked. For this developer, I'm sure ChatGPT has been a godsend, but this code predates its wide use. It's pure \"Googlesauce\". StringBuffer stringBuffer = new StringBuffer(); stringBuffer.append(\"SELECT * FROM TABLE1 WHERE COLUMN1 = 1 WITH UR\"); String sqlStr = stringBuffer.toString(); ps = getConnection().prepareStatement(sqlStr); ps.setInt(1, code); rs = ps.executeQuery(); while (rs.next()) { count++; }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-11-04 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. For years, Victoria had a co-worker who \"programmed by Google Search\"; they didn't understand how anything worked, they simply plugged their problem into Google search and then copy/pasted and edited until they got code that worked. For this developer, I'm sure ChatGPT has been a godsend, but this code predates its wide use. It's pure \"Googlesauce\". StringBuffer stringBuffer = new StringBuffer(); stringBuffer.append(\"SELECT * FROM TABLE1 WHERE COLUMN1 = 1 WITH UR\"); String sqlStr = stringBuffer.toString(); ps = getConnection().prepareStatement(sqlStr); ps.setInt(1, code); rs = ps.executeQuery(); while (rs.next()) { count++; } The core of this WTF isn't anything special- instead of running a SELECT COUNT they run a SELECT and then loop over the results to get the count. But it's all the little details in here which make it fun. They start by using a StringBuffer to construct their query- not a horrible plan when the query is long, but this is just a single, simple, one-line query. The query contains a WITH clause, but it's in the wrong spot. Then they prepareStatement it, which does nothing, since this query doesn't contain any parameters (and also, isn't syntactically valid). Once it's prepared, they set the non-existent parameter 1 to a value- this operation will throw an exception because there are no parameters in the query. Finally, they loop across the results to count. The real WTF is that this code ended up in the code base, somehow. The developer said, \"Yes, this seems good, I'll check in this non-functional blob that I definitely don't understand,\" and then there were no protections in place to keep that from happening. Now it falls to more competent developers, like Victoria, to clean up after this co-worker. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-11-04\"\u003e2024-11-04\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10773\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eFor years, \u003cstrong\u003eVictoria\u003c/strong\u003e had a co-worker who \u0026#34;programmed by Google Search\u0026#34;; they didn\u0026#39;t understand how anything worked, they simply plugged their problem into Google search and then copy/pasted and edited until they got code that worked. For this developer, I\u0026#39;m sure ChatGPT has been a godsend, but this code predates its wide use. It\u0026#39;s pure \u0026#34;Googlesauce\u0026#34;.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003eStringBuffer\u003c/span\u003e \u003cspan\u003estringBuffer\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStringBuffer\u003c/span\u003e();\n    stringBuffer.append(\u003cspan\u003e\u0026#34;SELECT * FROM TABLE1 WHERE COLUMN1 = 1 WITH UR\u0026#34;\u003c/span\u003e);\n\n    \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003esqlStr\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e stringBuffer.toString();\n    ps = getConnection().prepareStatement(sqlStr);\n\n    ps.setInt(\u003cspan\u003e1\u003c/span\u003e, code);\n\n    rs = ps.executeQuery();\n\n    \u003cspan\u003ewhile\u003c/span\u003e (rs.next())\n    {\n      count++;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe core of this WTF isn\u0026#39;t anything special- instead of running a \u003ccode\u003eSELECT COUNT\u003c/code\u003e they run a \u003ccode\u003eSELECT\u003c/code\u003e and then loop over the results to get the count. But it\u0026#39;s all the little \u003cem\u003edetails\u003c/em\u003e in here which make it fun.\u003c/p\u003e\n\u003cp\u003eThey start by using a \u003ccode\u003eStringBuffer\u003c/code\u003e to construct their query- not a horrible plan when the query is long, but this is just a single, simple, one-line query. The query contains a \u003ccode\u003eWITH\u003c/code\u003e clause, but it\u0026#39;s in the wrong spot. Then they \u003ccode\u003eprepareStatement\u003c/code\u003e it, which does nothing, since this query doesn\u0026#39;t contain any parameters (and also, isn\u0026#39;t syntactically valid). Once it\u0026#39;s prepared, they set the non-existent parameter 1 to a value- this operation will throw an exception because \u003cem\u003ethere are no parameters in the query\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eFinally, they loop across the results to count.\u003c/p\u003e\n\u003cp\u003eThe real WTF is that this code ended up in the code base, somehow. The developer said, \u0026#34;Yes, this seems good, I\u0026#39;ll check in this non-functional blob that I definitely don\u0026#39;t understand,\u0026#34; and then there were no protections in place to keep that from happening. Now it falls to more competent developers, like Victoria, to clean up after this co-worker.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-11-04T06:30:00Z",
  "modifiedTime": null
}
