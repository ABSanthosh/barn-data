{
  "id": "4788824d-3688-4a55-9e6a-502573f04bea",
  "title": "CodeSOD: Continuous Installation",
  "link": "https://thedailywtf.com/articles/continuous-installation",
  "description": "A recent code-review on a new build pipeline got Sandra's attention (previously). The normally responsible and reliable developer responsible for the commit included this in their Jenkinsfile: sh ''' if ! command -v yamllint \u0026\u003e /dev/null; then if command -v apt-get \u0026\u003e /dev/null; then apt-get update \u0026\u0026 apt-get install -y yamllint elif command -v apk \u0026\u003e /dev/null; then apk add --no-cache yamllint elif command -v pip3 \u0026\u003e /dev/null; then pip3 install --break-system-packages yamllint fi fi find . -name '*.yaml' -exec yamllint {} \\\\; || true find . -name '*.yml' -exec yamllint {} \\\\; || true ''' So the goal of this script is to check to see if the yamllint command is available. If it isn't, we check if apt-get is available, and if it is, we use that to install yamllint. Failing that, we try apk, Alpine's package manager, and failing that we use pip3 to install it out of PyPI. Then we run it against any YAML files in the repo. There are a few problems with this approach. The first, Sandra notes, is that they don't use Alpine Linux, and thus there's no reason to try apk. The second is that this particular repository contains no Python components and thus pip is not available in the CI environment. Third, this CI job runs inside of a Docker image which already has yamllint installed. Now, you'd think the developer responsible would have known this, given that this very merge request also included the definition of the Dockerfile for this environment. They'd already installed yamllint in the image. Sandra writes: This kind of sloppiness is also wildly out of character for him, to the point where my first thought was that it was AI-generated - especially since this was far from the only WTF in the submitted Jenkinsfile. Thankfully, it didn't pass code review and was sent back for intensive rework. Finally, while the reality is that we'll always need to resolve some dependencies at build time, things like \"tooling\" and \"linters\" really belong in the definition of the build environment, not resolved at build time. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 03 Jun 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2414,
  "excerpt": "A recent code-review on a new build pipeline got Sandra's attention (previously). The normally responsible and reliable developer responsible for the commit included this in their Jenkinsfile: sh ''' if ! command -v yamllint \u0026\u003e /dev/null; then if command -v apt-get \u0026\u003e /dev/null; then apt-get update \u0026\u0026 apt-get install -y yamllint elif command -v apk \u0026\u003e /dev/null; then apk add --no-cache yamllint elif command -v pip3 \u0026\u003e /dev/null; then pip3 install --break-system-packages yamllint fi fi find . -name '*.yaml' -exec yamllint {} \\\\; || true find . -name '*.yml' -exec yamllint {} \\\\; || true '''",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-06-03 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. A recent code-review on a new build pipeline got Sandra's attention (previously). The normally responsible and reliable developer responsible for the commit included this in their Jenkinsfile: sh ''' if ! command -v yamllint \u0026\u003e /dev/null; then if command -v apt-get \u0026\u003e /dev/null; then apt-get update \u0026\u0026 apt-get install -y yamllint elif command -v apk \u0026\u003e /dev/null; then apk add --no-cache yamllint elif command -v pip3 \u0026\u003e /dev/null; then pip3 install --break-system-packages yamllint fi fi find . -name '*.yaml' -exec yamllint {} \\\\; || true find . -name '*.yml' -exec yamllint {} \\\\; || true ''' So the goal of this script is to check to see if the yamllint command is available. If it isn't, we check if apt-get is available, and if it is, we use that to install yamllint. Failing that, we try apk, Alpine's package manager, and failing that we use pip3 to install it out of PyPI. Then we run it against any YAML files in the repo. There are a few problems with this approach. The first, Sandra notes, is that they don't use Alpine Linux, and thus there's no reason to try apk. The second is that this particular repository contains no Python components and thus pip is not available in the CI environment. Third, this CI job runs inside of a Docker image which already has yamllint installed. Now, you'd think the developer responsible would have known this, given that this very merge request also included the definition of the Dockerfile for this environment. They'd already installed yamllint in the image. Sandra writes: This kind of sloppiness is also wildly out of character for him, to the point where my first thought was that it was AI-generated - especially since this was far from the only WTF in the submitted Jenkinsfile. Thankfully, it didn't pass code review and was sent back for intensive rework. Finally, while the reality is that we'll always need to resolve some dependencies at build time, things like \"tooling\" and \"linters\" really belong in the definition of the build environment, not resolved at build time. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-06-03\"\u003e2025-06-03\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10928\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eA recent code-review on a new build pipeline got \u003cstrong\u003eSandra\u003c/strong\u003e\u0026#39;s attention (\u003ca href=\"https://thedailywtf.com/articles/sensing-a-problem\"\u003epreviously\u003c/a\u003e). The normally responsible and reliable developer responsible for the commit included \u003cem\u003ethis\u003c/em\u003e in their Jenkinsfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esh \u0026#39;\u0026#39;\u0026#39;\nif ! command -v yamllint \u0026amp;\u0026gt; /dev/null; then\n\tif command -v apt-get \u0026amp;\u0026gt; /dev/null; then\n\tapt-get update \u0026amp;\u0026amp; apt-get install -y yamllint\n\telif command -v apk \u0026amp;\u0026gt; /dev/null; then\n\tapk add --no-cache yamllint\n\telif command -v pip3 \u0026amp;\u0026gt; /dev/null; then\n\tpip3 install --break-system-packages yamllint\n\tfi\nfi\nfind . -name \u0026#39;*.yaml\u0026#39; -exec yamllint {} \\\\; || true\nfind . -name \u0026#39;*.yml\u0026#39; -exec yamllint {} \\\\; || true\n\u0026#39;\u0026#39;\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo the goal of this script is to check to see if the \u003ccode\u003eyamllint\u003c/code\u003e command is available. If it isn\u0026#39;t, we check if \u003ccode\u003eapt-get\u003c/code\u003e is available, and if it is, we use that to install \u003ccode\u003eyamllint\u003c/code\u003e. Failing that, we try \u003ccode\u003eapk\u003c/code\u003e, Alpine\u0026#39;s package manager, and failing that we use \u003ccode\u003epip3\u003c/code\u003e to install it out of PyPI. Then we run it against any YAML files in the repo.\u003c/p\u003e\n\u003cp\u003eThere are a few problems with this approach.\u003c/p\u003e\n\u003cp\u003eThe first, Sandra notes, is that they don\u0026#39;t use Alpine Linux, and thus there\u0026#39;s no reason to try \u003ccode\u003eapk\u003c/code\u003e. The second is that this particular repository contains no Python components and thus \u003ccode\u003epip\u003c/code\u003e is not available in the CI environment. Third, this CI job runs inside of a Docker image \u003cem\u003ewhich already has \u003ccode\u003eyamllint\u003c/code\u003e installed.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eNow, you\u0026#39;d think the developer responsible would have known this, given that \u003cem\u003ethis very merge request also included the definition of the \u003ccode\u003eDockerfile\u003c/code\u003e for this environment\u003c/em\u003e. They\u0026#39;d already installed \u003ccode\u003eyamllint\u003c/code\u003e in the image.\u003c/p\u003e\n\u003cp\u003eSandra writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis kind of sloppiness is also wildly out of character for him, to the point where my first thought was that it was AI-generated - especially since this was far from the only WTF in the submitted Jenkinsfile. Thankfully, it didn\u0026#39;t pass code review and was sent back for intensive rework.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFinally, while the reality is that we\u0026#39;ll always need to resolve some dependencies at build time, things like \u0026#34;tooling\u0026#34; and \u0026#34;linters\u0026#34; really belong in the definition of the build environment, not resolved at build time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-06-03T06:30:00Z",
  "modifiedTime": null
}
