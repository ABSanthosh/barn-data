{
  "id": "9a895a46-7cd3-424e-9f94-c53404acd6f3",
  "title": "CodeSOD: Contact Us",
  "link": "https://thedailywtf.com/articles/contact-us",
  "description": "Charles is supporting a PHP based application. One feature of the application is a standard \"Contact Us\" form. I'll let Charles take on the introduction: While it looks fine on the outside, the code is a complete mess. The entire site is built with bad practices, redundant variables, poor validation, insecure cookie checks, and zero focus on maintainability or security. Even the core parts of the platform are a nightmare We're going to take this one in chunks, because it's big and ugly. try { if (isset($_POST)) { $name = $_POST['objName']; $lst_name = $_POST['objLstName']; $email = $_POST['objEmail']; $phone = $_POST['objGsm']; $message = $_POST['objMsg']; $verifycode = $_POST['objVerifyCode']; /******************************************************/ $objCmpT = $_POST['objCmpT']; $objCmpS = $_POST['objCmpS']; $objCountry = $_POST['objCountry']; $objCity = $_POST['objCity']; $objName2 = $_POST['objName2']; $objLstName2 = $_POST['objLstName2']; $objQuality = $_POST['objQuality']; $objEmail = $_POST['objEmail']; $objMsg2 = $_POST['objMsg2']; $objVerifyCode2 = $_POST['objVerifyCode2']; I don't love that there's no structure or class here, to organize these fields, but this isn't bad, per se. We have a bunch of form fields, and we jam them into a bunch of variables. I am going to, with no small degree of willpower, not comment on the hungarian notation present in the field names. Look at me not commenting on it. I'm definitely not commenting on it. Look at me not commenting that some, but not all, of the variables also get the same hungarian prefix. What's the point of hungarian notation when everything just gets the same thing anyway; like hungarian is always bad, but this is just USELESS Ahem. Let's continue with the code. $ok = 0; $ok2 = 0; $sendTo = \"example@example.com\"; $golableMSG = ' -First Name \u0026 Last Name :' . $name . ' ' . $lst_name . ' -email :' . $email . ' -Phone Number : 0' . $phone . ' -Message : ' . $message; $globaleMSG2 = ' -First Name \u0026 Last Name :' . $objName2 . ' ' . $objLstName2 . ' -Email :' . $objEmail . ' -Type of company : ' . $objCmpT . ' -Sector of activity : ' . $objCmpS . ' -Country : ' . $objCountry . ' -City : ' . $objCity . ' -Your position within the company : ' . $objQuality . ' -Message : ' . $objMsg2; We munge all those form fields into strings. These are clearly going to be the bodies of our messages. Only now I'm noticing that the user had to supply two different names- $name and $objName2. Extra points here, as I believe they meant to name both of these message variables globaleMSG but misspelled the first one, golableMSG. Well, let's continue. if (!$name) { $data['msg1'] = '*'; } else { $ok++; $data['msg1'] = ''; } if (!$lst_name) { $data['msg2'] = '*'; } else { $ok++; $data['msg2'] = ''; } if (!$email) { $data['msg3'] = '*'; } else { $ok++; $data['msg3'] = ''; } if ($phone \u003c= 0) { $data['msg4'] = '*'; } else { $ok++; $data['msg4'] = ''; } if (!$message) { $data['msg5'] = '*'; } else { $ok++; $data['msg5'] = ''; } if (!$verifycode) { $data['msg6'] = '*'; } else { $ok++; $data['msg6'] = ''; } /*********************************************************************************/ if (!$objCmpS) { $data['msg7'] = '*'; } else { $ok2++; $data['msg7'] = ''; } if (!$objCountry) { $data['msg8'] = '*'; } else { $ok2++; $data['msg8'] = ''; } if (!$objCity) { $data['msg9'] = '*'; } else { $ok2++; $data['msg9'] = ''; } if (!$objName2) { $data['msg10'] = '*'; } else { $ok2++; $data['msg10'] = ''; } if (!$objLstName2) { $data['msg11'] = '*'; } else { $ok2++; $data['msg11'] = ''; } if (!$objQuality) { $data['msg12'] = '*'; } else { $ok2++; $data['msg12'] = ''; } if (!$objMsg2) { $data['msg13'] = '*'; } else { $ok2++; $data['msg13'] = ''; } if (!$objVerifyCode2) { $data['msg14'] = '*'; } else { $ok2++; $data['msg14'] = ''; } What… what are we doing here? I worry that what I'm looking at here is some sort of preamble to verification code. But why is it like this? Why? /********************************************************************************/ if ($ok == 6) { if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $name)) { $data['msg1_1'] = ''; if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $lst_name)) { $data['msg2_2'] = ''; $subject = $name . \" \" . $lst_name; if (filter_var($email, FILTER_VALIDATE_EMAIL)) { $data['msg3_3'] = ''; $from = $email; if (preg_match(\"/^[6-9][0-9]{8}$/\", $phone)) { $data['msg4_4'] = ''; if (intval($verifycode) == intval($_COOKIE['nmbr1']) + intval($_COOKIE['nmbr2'])) { $data['msg6_6'] = ''; $headers = 'From: ' . $from . \"\\r\\n\" . 'Reply-To: ' . $sendTo . \"\\r\\n\" . 'X-Mailer: PHP/' . phpversion(); mail($sendTo, $subject, $golableMSG, $headers); $data['msgfinal'] = 'Votre Messsage est bien envoyer'; /*$data = array('success' =\u003e 'Votre Messsage est bien envoyer', 'postData' =\u003e $_POST);*/ } else { $data['msg6_6'] = 'votre resultat est incorrect'; } } else { $data['msg4_4'] = 'Votre Numéro est incorrect'; } } else { $data['msg3_3'] = 'Votre Email est incorrect'; } } else { $data['msg2_2'] = 'Votre Prénom est Incorrect'; } } else { $data['msg1_1'] = 'Votre Nom est Incorrect'; } } Oh look, it is validation code. Their verification code system, presumably to prevent spamming messages, is not particularly secure or useful. The real thing I see here, though, is the namespaced keys. Earlier, we set $data['msg1'], and now we're setting $data['msg1_1'] which is a code stench that could kill from a hundred yards. And don't worry, we do the same thing for the other message we send: /**************************************************************/ if ($ok2 == 8) { if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $objName2)) { $data['msg10_10'] = ''; if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $objLstName2)) { $data['msg11_11'] = ''; $subject2 = $objName2 . \" \" . $objLstName2; if (intval($objVerifyCode2) == intval($_COOKIE['nmbr3']) + intval($_COOKIE['nmbr4'])) { $from2 = $objEmail; $data['msg14_14'] = ''; $headers2 = 'From: ' . $from2 . \"\\r\\n\" . 'Reply-To: ' . $sendTo . \"\\r\\n\" . 'X-Mailer: PHP/' . phpversion(); mail($sendTo, $subject2, $globaleMSG2, $headers2); $data['msgfinal'] = 'Votre Messsage est bien envoyer'; } else { $data['msg14_14'] = 'votre resultat est incorrect'; } } else { $data['msg11_11'] = 'Votre Prénom est Incorrect'; } } else { $data['msg10_10'] = 'Votre Nom est Incorrect'; } } Phew. Hey, remember way back at the top, when we checked to see if the $_POST variable were set? Well, we do have an else clause for that. } else { throw new \\Exception($mot[86]); } Who doesn't love throwing messages by hard-coded array indexes in your array of possible error messages? Couldn't be bothered with a constant, could we? Nope, message 86 it is. But don't worry about that exception going uncaught. Remember, this whole thing was inside of a try: } catch (\\Exception $e) { $data['msgfinal'] = \"Votre Messsage n'est pas bien envoyer\"; /*$data = array('danger' =\u003e 'Votre Messsage pas bien envoyer', 'postData' =\u003e $_POST);*/ } Yeah, it didn't matter what message we picked, because we just catch the exception and hard-code out an error message. Also, I don't speak French, but is \"message\" supposed to have an extra \"s\" in it? Charles writes: It’s crazy to see such sloppy work on a platform that seems okay at first glance. Honestly, this platform is the holy grail of messy code—it could have its own course on how not to code because of how bad and error-prone it is. There are also even worse scenarios of bad code, but it's too long to share, and honestly, they're too deep and fundamentally ingrained in the system to even begin explaining. Oh, I'm sure we could explain it. The explanation may be \"there was a severe and fatal lack of oxygen in the office, and this is what hypoxia looks like in code,\" but I'm certain there'd be an explanation. .comment { border: none; } [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Thu, 21 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 10397,
  "excerpt": "Charles is supporting a PHP based application. One feature of the application is a standard \"Contact Us\" form. I'll let Charles take on the introduction: While it looks fine on the outside, the code is a complete mess. The entire site is built with bad practices, redundant variables, poor validation, insecure cookie checks, and zero focus on maintainability or security. Even the core parts of the platform are a nightmare",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Charles is supporting a PHP based application. One feature of the application is a standard \"Contact Us\" form. I'll let Charles take on the introduction: While it looks fine on the outside, the code is a complete mess. The entire site is built with bad practices, redundant variables, poor validation, insecure cookie checks, and zero focus on maintainability or security. Even the core parts of the platform are a nightmare We're going to take this one in chunks, because it's big and ugly. try { if (isset($_POST)) { $name = $_POST['objName']; $lst_name = $_POST['objLstName']; $email = $_POST['objEmail']; $phone = $_POST['objGsm']; $message = $_POST['objMsg']; $verifycode = $_POST['objVerifyCode']; /******************************************************/ $objCmpT = $_POST['objCmpT']; $objCmpS = $_POST['objCmpS']; $objCountry = $_POST['objCountry']; $objCity = $_POST['objCity']; $objName2 = $_POST['objName2']; $objLstName2 = $_POST['objLstName2']; $objQuality = $_POST['objQuality']; $objEmail = $_POST['objEmail']; $objMsg2 = $_POST['objMsg2']; $objVerifyCode2 = $_POST['objVerifyCode2']; I don't love that there's no structure or class here, to organize these fields, but this isn't bad, per se. We have a bunch of form fields, and we jam them into a bunch of variables. I am going to, with no small degree of willpower, not comment on the hungarian notation present in the field names. Look at me not commenting on it. I'm definitely not commenting on it. Look at me not commenting that some, but not all, of the variables also get the same hungarian prefix. What's the point of hungarian notation when everything just gets the same thing anyway; like hungarian is always bad, but this is just USELESS Ahem. Let's continue with the code. $ok = 0; $ok2 = 0; $sendTo = \"[email protected]\"; $golableMSG = ' -First Name \u0026 Last Name :' . $name . ' ' . $lst_name . ' -email :' . $email . ' -Phone Number : 0' . $phone . ' -Message : ' . $message; $globaleMSG2 = ' -First Name \u0026 Last Name :' . $objName2 . ' ' . $objLstName2 . ' -Email :' . $objEmail . ' -Type of company : ' . $objCmpT . ' -Sector of activity : ' . $objCmpS . ' -Country : ' . $objCountry . ' -City : ' . $objCity . ' -Your position within the company : ' . $objQuality . ' -Message : ' . $objMsg2; We munge all those form fields into strings. These are clearly going to be the bodies of our messages. Only now I'm noticing that the user had to supply two different names- $name and $objName2. Extra points here, as I believe they meant to name both of these message variables globaleMSG but misspelled the first one, golableMSG. Well, let's continue. if (!$name) { $data['msg1'] = '*'; } else { $ok++; $data['msg1'] = ''; } if (!$lst_name) { $data['msg2'] = '*'; } else { $ok++; $data['msg2'] = ''; } if (!$email) { $data['msg3'] = '*'; } else { $ok++; $data['msg3'] = ''; } if ($phone \u003c= 0) { $data['msg4'] = '*'; } else { $ok++; $data['msg4'] = ''; } if (!$message) { $data['msg5'] = '*'; } else { $ok++; $data['msg5'] = ''; } if (!$verifycode) { $data['msg6'] = '*'; } else { $ok++; $data['msg6'] = ''; } /*********************************************************************************/ if (!$objCmpS) { $data['msg7'] = '*'; } else { $ok2++; $data['msg7'] = ''; } if (!$objCountry) { $data['msg8'] = '*'; } else { $ok2++; $data['msg8'] = ''; } if (!$objCity) { $data['msg9'] = '*'; } else { $ok2++; $data['msg9'] = ''; } if (!$objName2) { $data['msg10'] = '*'; } else { $ok2++; $data['msg10'] = ''; } if (!$objLstName2) { $data['msg11'] = '*'; } else { $ok2++; $data['msg11'] = ''; } if (!$objQuality) { $data['msg12'] = '*'; } else { $ok2++; $data['msg12'] = ''; } if (!$objMsg2) { $data['msg13'] = '*'; } else { $ok2++; $data['msg13'] = ''; } if (!$objVerifyCode2) { $data['msg14'] = '*'; } else { $ok2++; $data['msg14'] = ''; } What… what are we doing here? I worry that what I'm looking at here is some sort of preamble to verification code. But why is it like this? Why? /********************************************************************************/ if ($ok == 6) { if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $name)) { $data['msg1_1'] = ''; if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $lst_name)) { $data['msg2_2'] = ''; $subject = $name . \" \" . $lst_name; if (filter_var($email, FILTER_VALIDATE_EMAIL)) { $data['msg3_3'] = ''; $from = $email; if (preg_match(\"/^[6-9][0-9]{8}$/\", $phone)) { $data['msg4_4'] = ''; if (intval($verifycode) == intval($_COOKIE['nmbr1']) + intval($_COOKIE['nmbr2'])) { $data['msg6_6'] = ''; $headers = 'From: ' . $from . \"\\r\\n\" . 'Reply-To: ' . $sendTo . \"\\r\\n\" . 'X-Mailer: PHP/' . phpversion(); mail($sendTo, $subject, $golableMSG, $headers); $data['msgfinal'] = 'Votre Messsage est bien envoyer'; /*$data = array('success' =\u003e 'Votre Messsage est bien envoyer', 'postData' =\u003e $_POST);*/ } else { $data['msg6_6'] = 'votre resultat est incorrect'; } } else { $data['msg4_4'] = 'Votre Numéro est incorrect'; } } else { $data['msg3_3'] = 'Votre Email est incorrect'; } } else { $data['msg2_2'] = 'Votre Prénom est Incorrect'; } } else { $data['msg1_1'] = 'Votre Nom est Incorrect'; } } Oh look, it is validation code. Their verification code system, presumably to prevent spamming messages, is not particularly secure or useful. The real thing I see here, though, is the namespaced keys. Earlier, we set $data['msg1'], and now we're setting $data['msg1_1'] which is a code stench that could kill from a hundred yards. And don't worry, we do the same thing for the other message we send: /**************************************************************/ if ($ok2 == 8) { if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $objName2)) { $data['msg10_10'] = ''; if (preg_match(\"/^[ a-z,.+!:;()-]+$/\", $objLstName2)) { $data['msg11_11'] = ''; $subject2 = $objName2 . \" \" . $objLstName2; if (intval($objVerifyCode2) == intval($_COOKIE['nmbr3']) + intval($_COOKIE['nmbr4'])) { $from2 = $objEmail; $data['msg14_14'] = ''; $headers2 = 'From: ' . $from2 . \"\\r\\n\" . 'Reply-To: ' . $sendTo . \"\\r\\n\" . 'X-Mailer: PHP/' . phpversion(); mail($sendTo, $subject2, $globaleMSG2, $headers2); $data['msgfinal'] = 'Votre Messsage est bien envoyer'; } else { $data['msg14_14'] = 'votre resultat est incorrect'; } } else { $data['msg11_11'] = 'Votre Prénom est Incorrect'; } } else { $data['msg10_10'] = 'Votre Nom est Incorrect'; } } Phew. Hey, remember way back at the top, when we checked to see if the $_POST variable were set? Well, we do have an else clause for that. } else { throw new \\Exception($mot[86]); } Who doesn't love throwing messages by hard-coded array indexes in your array of possible error messages? Couldn't be bothered with a constant, could we? Nope, message 86 it is. But don't worry about that exception going uncaught. Remember, this whole thing was inside of a try: } catch (\\Exception $e) { $data['msgfinal'] = \"Votre Messsage n'est pas bien envoyer\"; /*$data = array('danger' =\u003e 'Votre Messsage pas bien envoyer', 'postData' =\u003e $_POST);*/ } Yeah, it didn't matter what message we picked, because we just catch the exception and hard-code out an error message. Also, I don't speak French, but is \"message\" supposed to have an extra \"s\" in it? Charles writes: It’s crazy to see such sloppy work on a platform that seems okay at first glance. Honestly, this platform is the holy grail of messy code—it could have its own course on how not to code because of how bad and error-prone it is. There are also even worse scenarios of bad code, but it's too long to share, and honestly, they're too deep and fundamentally ingrained in the system to even begin explaining. Oh, I'm sure we could explain it. The explanation may be \"there was a severe and fatal lack of oxygen in the office, and this is what hypoxia looks like in code,\" but I'm certain there'd be an explanation. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eCharles\u003c/strong\u003e is supporting a PHP based application. One feature of the application is a standard \u0026#34;Contact Us\u0026#34; form. I\u0026#39;ll let Charles take on the introduction:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhile it looks fine on the outside, the code is a complete mess. The entire site is built with bad practices, redundant variables, poor validation, insecure cookie checks, and zero focus on maintainability or security. Even the core parts of the platform are a nightmare\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe\u0026#39;re going to take this one in chunks, because it\u0026#39;s big and ugly.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etry\u003c/span\u003e {\n    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$_POST\u003c/span\u003e)) {\n        \u003cspan\u003e$name\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objName\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$lst_name\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objLstName\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$email\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objEmail\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$phone\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objGsm\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$message\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objMsg\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$verifycode\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objVerifyCode\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e/******************************************************/\u003c/span\u003e\n        \u003cspan\u003e$objCmpT\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objCmpT\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objCmpS\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objCmpS\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objCountry\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objCountry\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objCity\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objCity\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objName2\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objName2\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objLstName2\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objLstName2\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objQuality\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objQuality\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objEmail\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objEmail\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objMsg2\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objMsg2\u0026#39;\u003c/span\u003e];\n        \u003cspan\u003e$objVerifyCode2\u003c/span\u003e = \u003cspan\u003e$_POST\u003c/span\u003e[\u003cspan\u003e\u0026#39;objVerifyCode2\u0026#39;\u003c/span\u003e];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI don\u0026#39;t love that there\u0026#39;s no structure or class here, to organize these fields, but this isn\u0026#39;t \u003cem\u003ebad\u003c/em\u003e, per se. We have a bunch of form fields, and we jam them into a bunch of variables. I am going to, with no small degree of willpower, not comment on the hungarian notation present in the field names. Look at me not commenting on it. I\u0026#39;m definitely not commenting on it. Look at me not commenting that some, but not all, of the variables also get the same hungarian prefix.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhat\u0026#39;s the point of hungarian notation when everything just gets the same thing anyway; like hungarian is always bad, but this is just USELESS\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAhem.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s continue with the code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        \u003cspan\u003e$ok\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e;\n        \u003cspan\u003e$ok2\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e;\n        \u003cspan\u003e$sendTo\u003c/span\u003e = \u003cspan\u003e\u0026#34;\u003ca href=\"https://thedailywtf.com/cdn-cgi/l/email-protection\" data-cfemail=\"3d58455c504d51587d58455c504d5158135e5250\"\u003e[email protected]\u003c/a\u003e\u0026#34;\u003c/span\u003e;\n        \u003cspan\u003e$golableMSG\u003c/span\u003e = \u003cspan\u003e\u0026#39;\n        -First Name \u0026amp; Last Name :\u0026#39;\u003c/span\u003e . \u003cspan\u003e$name\u003c/span\u003e . \u003cspan\u003e\u0026#39; \u0026#39;\u003c/span\u003e . \u003cspan\u003e$lst_name\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -email :\u0026#39;\u003c/span\u003e . \u003cspan\u003e$email\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Phone Number : 0\u0026#39;\u003c/span\u003e . \u003cspan\u003e$phone\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Message : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$message\u003c/span\u003e;\n        \u003cspan\u003e$globaleMSG2\u003c/span\u003e = \u003cspan\u003e\u0026#39;\n        -First Name \u0026amp; Last Name :\u0026#39;\u003c/span\u003e . \u003cspan\u003e$objName2\u003c/span\u003e . \u003cspan\u003e\u0026#39; \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objLstName2\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Email :\u0026#39;\u003c/span\u003e . \u003cspan\u003e$objEmail\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Type of company : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objCmpT\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Sector of activity : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objCmpS\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Country : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objCountry\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -City : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objCity\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Your position within the company : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objQuality\u003c/span\u003e . \u003cspan\u003e\u0026#39;\n        -Message : \u0026#39;\u003c/span\u003e . \u003cspan\u003e$objMsg2\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe munge all those form fields into strings. These are clearly going to be the bodies of our messages. Only now I\u0026#39;m noticing that the user had to supply two different names- \u003ccode\u003e$name\u003c/code\u003e and \u003ccode\u003e$objName2\u003c/code\u003e. Extra points here, as I believe they meant to name both of these message variables \u003ccode\u003eglobaleMSG\u003c/code\u003e but misspelled the first one, \u003ccode\u003egolableMSG\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWell, let\u0026#39;s continue.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$name\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg1\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg1\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$lst_name\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg2\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg2\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$email\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg3\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg3\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e$phone\u003c/span\u003e \u0026lt;= \u003cspan\u003e0\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg4\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg4\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$message\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg5\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg5\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$verifycode\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg6\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg6\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003e/*********************************************************************************/\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objCmpS\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg7\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg7\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objCountry\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg8\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg8\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objCity\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg9\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg9\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objName2\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg10\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg10\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objLstName2\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg11\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg11\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objQuality\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg12\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg12\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objMsg2\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg13\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg13\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$objVerifyCode2\u003c/span\u003e) {\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg14\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;*\u0026#39;\u003c/span\u003e;\n        } \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003e$ok2\u003c/span\u003e++;\n            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg14\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n        }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat… what are we doing here? I worry that what I\u0026#39;m looking at here is some sort of preamble to verification code. But why is it like this? \u003cem\u003eWhy\u003c/em\u003e?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        \u003cspan\u003e/********************************************************************************/\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e$ok\u003c/span\u003e == \u003cspan\u003e6\u003c/span\u003e) {\n            \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003epreg_match\u003c/span\u003e(\u003cspan\u003e\u0026#34;/^[ a-z,.+!:;()-]+$/\u0026#34;\u003c/span\u003e, \u003cspan\u003e$name\u003c/span\u003e)) {\n                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg1_1\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003epreg_match\u003c/span\u003e(\u003cspan\u003e\u0026#34;/^[ a-z,.+!:;()-]+$/\u0026#34;\u003c/span\u003e, \u003cspan\u003e$lst_name\u003c/span\u003e)) {\n                    \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg2_2\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                    \u003cspan\u003e$subject\u003c/span\u003e = \u003cspan\u003e$name\u003c/span\u003e . \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e . \u003cspan\u003e$lst_name\u003c/span\u003e;\n                    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003efilter_var\u003c/span\u003e(\u003cspan\u003e$email\u003c/span\u003e, FILTER_VALIDATE_EMAIL)) {\n                        \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg3_3\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                        \u003cspan\u003e$from\u003c/span\u003e = \u003cspan\u003e$email\u003c/span\u003e;\n                        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003epreg_match\u003c/span\u003e(\u003cspan\u003e\u0026#34;/^[6-9][0-9]{8}$/\u0026#34;\u003c/span\u003e, \u003cspan\u003e$phone\u003c/span\u003e)) {\n                            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg4_4\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                            \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$verifycode\u003c/span\u003e) == \u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$_COOKIE\u003c/span\u003e[\u003cspan\u003e\u0026#39;nmbr1\u0026#39;\u003c/span\u003e]) + \u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$_COOKIE\u003c/span\u003e[\u003cspan\u003e\u0026#39;nmbr2\u0026#39;\u003c/span\u003e])) {\n                                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg6_6\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                                \u003cspan\u003e$headers\u003c/span\u003e = \u003cspan\u003e\u0026#39;From: \u0026#39;\u003c/span\u003e . \u003cspan\u003e$from\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\r\\n\u0026#34;\u003c/span\u003e .\n                                    \u003cspan\u003e\u0026#39;Reply-To: \u0026#39;\u003c/span\u003e . \u003cspan\u003e$sendTo\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\r\\n\u0026#34;\u003c/span\u003e .\n                                    \u003cspan\u003e\u0026#39;X-Mailer: PHP/\u0026#39;\u003c/span\u003e . \u003cspan\u003ephpversion\u003c/span\u003e();\n                                \u003cspan\u003email\u003c/span\u003e(\u003cspan\u003e$sendTo\u003c/span\u003e, \u003cspan\u003e$subject\u003c/span\u003e, \u003cspan\u003e$golableMSG\u003c/span\u003e, \u003cspan\u003e$headers\u003c/span\u003e);\n                                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msgfinal\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Messsage est bien envoyer\u0026#39;\u003c/span\u003e;\n                                \u003cspan\u003e/*$data = array(\u0026#39;success\u0026#39; =\u0026gt; \u0026#39;Votre Messsage est bien envoyer\u0026#39;, \u0026#39;postData\u0026#39; =\u0026gt; $_POST);*/\u003c/span\u003e\n                            } \u003cspan\u003eelse\u003c/span\u003e {\n                                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg6_6\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;votre resultat est incorrect\u0026#39;\u003c/span\u003e;\n                            }\n                        } \u003cspan\u003eelse\u003c/span\u003e {\n                            \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg4_4\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Numéro est incorrect\u0026#39;\u003c/span\u003e;\n                        }\n                    } \u003cspan\u003eelse\u003c/span\u003e {\n                        \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg3_3\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Email est incorrect\u0026#39;\u003c/span\u003e;\n                    }\n                } \u003cspan\u003eelse\u003c/span\u003e {\n                    \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg2_2\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Prénom est Incorrect\u0026#39;\u003c/span\u003e;\n                }\n            } \u003cspan\u003eelse\u003c/span\u003e {\n                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg1_1\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Nom est Incorrect\u0026#39;\u003c/span\u003e;\n            }\n        }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOh look, it \u003cem\u003eis\u003c/em\u003e validation code. Their verification code system, presumably to prevent spamming messages, is not particularly secure or useful. The real thing I see here, though, is the namespaced keys. Earlier, we set \u003ccode\u003e$data[\u0026#39;msg1\u0026#39;]\u003c/code\u003e, and now we\u0026#39;re setting \u003ccode\u003e$data[\u0026#39;msg1_1\u0026#39;]\u003c/code\u003e which is a code stench that could kill from a hundred yards.\u003c/p\u003e\n\u003cp\u003eAnd don\u0026#39;t worry, we do the same thing for the other message we send:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        \u003cspan\u003e/**************************************************************/\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e$ok2\u003c/span\u003e == \u003cspan\u003e8\u003c/span\u003e) {\n            \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003epreg_match\u003c/span\u003e(\u003cspan\u003e\u0026#34;/^[ a-z,.+!:;()-]+$/\u0026#34;\u003c/span\u003e, \u003cspan\u003e$objName2\u003c/span\u003e)) {\n                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg10_10\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003epreg_match\u003c/span\u003e(\u003cspan\u003e\u0026#34;/^[ a-z,.+!:;()-]+$/\u0026#34;\u003c/span\u003e, \u003cspan\u003e$objLstName2\u003c/span\u003e)) {\n                    \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg11_11\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                    \u003cspan\u003e$subject2\u003c/span\u003e = \u003cspan\u003e$objName2\u003c/span\u003e . \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e . \u003cspan\u003e$objLstName2\u003c/span\u003e;\n                    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$objVerifyCode2\u003c/span\u003e) == \u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$_COOKIE\u003c/span\u003e[\u003cspan\u003e\u0026#39;nmbr3\u0026#39;\u003c/span\u003e]) + \u003cspan\u003eintval\u003c/span\u003e(\u003cspan\u003e$_COOKIE\u003c/span\u003e[\u003cspan\u003e\u0026#39;nmbr4\u0026#39;\u003c/span\u003e])) {\n                        \u003cspan\u003e$from2\u003c/span\u003e = \u003cspan\u003e$objEmail\u003c/span\u003e;\n                        \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg14_14\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n                        \u003cspan\u003e$headers2\u003c/span\u003e = \u003cspan\u003e\u0026#39;From: \u0026#39;\u003c/span\u003e . \u003cspan\u003e$from2\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\r\\n\u0026#34;\u003c/span\u003e .\n                            \u003cspan\u003e\u0026#39;Reply-To: \u0026#39;\u003c/span\u003e . \u003cspan\u003e$sendTo\u003c/span\u003e . \u003cspan\u003e\u0026#34;\\r\\n\u0026#34;\u003c/span\u003e .\n                            \u003cspan\u003e\u0026#39;X-Mailer: PHP/\u0026#39;\u003c/span\u003e . \u003cspan\u003ephpversion\u003c/span\u003e();\n                        \u003cspan\u003email\u003c/span\u003e(\u003cspan\u003e$sendTo\u003c/span\u003e, \u003cspan\u003e$subject2\u003c/span\u003e, \u003cspan\u003e$globaleMSG2\u003c/span\u003e, \u003cspan\u003e$headers2\u003c/span\u003e);\n                        \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msgfinal\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Messsage est bien envoyer\u0026#39;\u003c/span\u003e;\n                    } \u003cspan\u003eelse\u003c/span\u003e {\n                        \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg14_14\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;votre resultat est incorrect\u0026#39;\u003c/span\u003e;\n                    }\n                } \u003cspan\u003eelse\u003c/span\u003e {\n                    \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg11_11\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Prénom est Incorrect\u0026#39;\u003c/span\u003e;\n                }\n            } \u003cspan\u003eelse\u003c/span\u003e {\n                \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msg10_10\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#39;Votre Nom est Incorrect\u0026#39;\u003c/span\u003e;\n            }\n        }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePhew. Hey, remember way back at the top, when we checked to see if the \u003ccode\u003e$_POST\u003c/code\u003e variable were set? Well, we do have an else clause for that.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    } \u003cspan\u003eelse\u003c/span\u003e {\n        \u003cspan\u003ethrow\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003e\\Exception\u003c/span\u003e(\u003cspan\u003e$mot\u003c/span\u003e[\u003cspan\u003e86\u003c/span\u003e]);\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWho doesn\u0026#39;t love throwing messages by hard-coded array indexes in your array of possible error messages? Couldn\u0026#39;t be bothered with a constant, could we? Nope, message 86 it is.\u003c/p\u003e\n\u003cp\u003eBut don\u0026#39;t worry about that exception going uncaught. Remember, this whole thing was inside of a try:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e} \u003cspan\u003ecatch\u003c/span\u003e (\\\u003cspan\u003eException\u003c/span\u003e \u003cspan\u003e$e\u003c/span\u003e) {\n    \u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#39;msgfinal\u0026#39;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;Votre Messsage n\u0026#39;est pas bien envoyer\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003e/*$data = array(\u0026#39;danger\u0026#39; =\u0026gt; \u0026#39;Votre Messsage pas bien envoyer\u0026#39;, \u0026#39;postData\u0026#39; =\u0026gt; $_POST);*/\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYeah, it didn\u0026#39;t matter what message we picked, because we just catch the exception and hard-code out an error message.\u003c/p\u003e\n\u003cp\u003eAlso, I don\u0026#39;t speak French, but is \u0026#34;message\u0026#34; supposed to have an extra \u0026#34;s\u0026#34; in it?\u003c/p\u003e\n\u003cp\u003eCharles writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIt’s crazy to see such sloppy work on a platform that seems okay at first glance. Honestly, this platform is the holy grail of messy code—it could have its own course on how not to code because of how bad and error-prone it is. There are also even worse scenarios of bad code, but it\u0026#39;s too long to share, and honestly, they\u0026#39;re too deep and fundamentally ingrained in the system to even begin explaining.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOh, I\u0026#39;m sure we could explain it. The explanation may be \u0026#34;there was a severe and fatal lack of oxygen in the office, and this is what hypoxia looks like in code,\u0026#34; but I\u0026#39;m certain there\u0026#39;d be an explanation.\u003c/p\u003e\n\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-11-21T06:30:00Z",
  "modifiedTime": null
}
