{
  "id": "54ecb733-c0ce-4b87-9564-e196f4d535fb",
  "title": "CodeSOD: A Ruby Encrusted Footgun",
  "link": "https://thedailywtf.com/articles/a-ruby-encrusted-footgun",
  "description": "Many years ago, JP joined a Ruby project. This was in the heyday of Ruby, when every startup on Earth was using it, and if you weren't building your app on Rails, were you even building an app? Now, Ruby offers a lot of flexibility. One might argue that it offers too much flexibility, especially insofar as it permits \"monkey patching\": you can always add new methods to an existing class, if you want. Regardless of the technical details, JP and the team saw that massive flexibility and said, \"Yes, we should use that. All of it!\" As these stories usually go, that was fine- for awhile. Then one day, a test started failing because a class name wasn't defined. That was already odd, but what was even odder is that when they searched through the code, that class name wasn't actually used anywhere. So yes, there was definitely no class with that name, but also, there was no line of code that was trying to instantiate that class. So where was the problem? def controller_class(name) \"#{settings.app_name.camelize}::Controllers\".constantize.const_get(\"#{name.to_s.camelize}\") end def model_class(name) \"#{settings.app_name.camelize}\".constantize.const_get(\"#{name.to_s.camelize}\") end def resource_class(name) \"#{settings.app_name.camelize}Client\".constantize.const_get(\"#{name.to_s.camelize}\") end It happened because they were dynamically constructing the class names from a settings field. And not just in this handful of lines- this pattern occurred all over the codebase. There were other places where it referenced a different settings field, and they just hadn't encountered the bug yet, but knew that it was only a matter of time before changing a settings file was going to break more functionality in the application. They wisely rewrote these sections to not reference the settings, and dubbed the pattern the \"Caramelize Pattern\". They added that to their coding standards as a thing to avoid, and learned a valuable lesson about how languages provide footguns. Since today's April Fool's Day, consider the prank the fact that everyone learned their lesson and corrected their mistakes. I suppose that has to happen at least sometimes. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 01 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2520,
  "excerpt": "Many years ago, JP joined a Ruby project. This was in the heyday of Ruby, when every startup on Earth was using it, and if you weren't building your app on Rails, were you even building an app? Now, Ruby offers a lot of flexibility. One might argue that it offers too much flexibility, especially insofar as it permits \"monkey patching\": you can always add new methods to an existing class, if you want. Regardless of the technical details, JP and the team saw that massive flexibility and said, \"Yes, we should use that. All of it!\"",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-01 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Many years ago, JP joined a Ruby project. This was in the heyday of Ruby, when every startup on Earth was using it, and if you weren't building your app on Rails, were you even building an app? Now, Ruby offers a lot of flexibility. One might argue that it offers too much flexibility, especially insofar as it permits \"monkey patching\": you can always add new methods to an existing class, if you want. Regardless of the technical details, JP and the team saw that massive flexibility and said, \"Yes, we should use that. All of it!\" As these stories usually go, that was fine- for awhile. Then one day, a test started failing because a class name wasn't defined. That was already odd, but what was even odder is that when they searched through the code, that class name wasn't actually used anywhere. So yes, there was definitely no class with that name, but also, there was no line of code that was trying to instantiate that class. So where was the problem? def controller_class(name) \"#{settings.app_name.camelize}::Controllers\".constantize.const_get(\"#{name.to_s.camelize}\") end def model_class(name) \"#{settings.app_name.camelize}\".constantize.const_get(\"#{name.to_s.camelize}\") end def resource_class(name) \"#{settings.app_name.camelize}Client\".constantize.const_get(\"#{name.to_s.camelize}\") end It happened because they were dynamically constructing the class names from a settings field. And not just in this handful of lines- this pattern occurred all over the codebase. There were other places where it referenced a different settings field, and they just hadn't encountered the bug yet, but knew that it was only a matter of time before changing a settings file was going to break more functionality in the application. They wisely rewrote these sections to not reference the settings, and dubbed the pattern the \"Caramelize Pattern\". They added that to their coding standards as a thing to avoid, and learned a valuable lesson about how languages provide footguns. Since today's April Fool's Day, consider the prank the fact that everyone learned their lesson and corrected their mistakes. I suppose that has to happen at least sometimes. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-01\"\u003e2025-04-01\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10882\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eMany years ago, \u003cstrong\u003eJP\u003c/strong\u003e joined a Ruby project. This was in the heyday of Ruby, when every startup on Earth was using it, and if you weren\u0026#39;t building your app on Rails, were you even building an app?\u003c/p\u003e\n\u003cp\u003eNow, Ruby offers a \u003cem\u003elot\u003c/em\u003e of flexibility. One might argue that it offers too much flexibility, especially insofar as it permits \u0026#34;monkey patching\u0026#34;: you can always add new methods to an existing class, if you want. Regardless of the technical details, JP and the team saw that massive flexibility and said, \u0026#34;Yes, we should use that. All of it!\u0026#34;\u003c/p\u003e\n\u003cp\u003eAs these stories usually go, that was fine- for awhile. Then one day, a test started failing because a class name wasn\u0026#39;t defined. That was already odd, but what was even odder is that when they searched through the code, that class name wasn\u0026#39;t actually used anywhere. So yes, there was definitely no class with that name, but also, there was no line of code that was trying to instantiate that class. So where was the problem?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003econtroller_class\u003c/span\u003e(\u003cspan\u003ename\u003c/span\u003e)\n  \u003cspan\u003e\u0026#34;\u003cspan\u003e#{settings.app_name.camelize}\u003c/span\u003e::Controllers\u0026#34;\u003c/span\u003e.constantize.const_get(\u003cspan\u003e\u0026#34;\u003cspan\u003e#{name.to_s.camelize}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003emodel_class\u003c/span\u003e(\u003cspan\u003ename\u003c/span\u003e)\n  \u003cspan\u003e\u0026#34;\u003cspan\u003e#{settings.app_name.camelize}\u003c/span\u003e\u0026#34;\u003c/span\u003e.constantize.const_get(\u003cspan\u003e\u0026#34;\u003cspan\u003e#{name.to_s.camelize}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eresource_class\u003c/span\u003e(\u003cspan\u003ename\u003c/span\u003e)\n  \u003cspan\u003e\u0026#34;\u003cspan\u003e#{settings.app_name.camelize}\u003c/span\u003eClient\u0026#34;\u003c/span\u003e.constantize.const_get(\u003cspan\u003e\u0026#34;\u003cspan\u003e#{name.to_s.camelize}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt happened because they were dynamically constructing the class names from a settings field. And not just in this handful of lines- this pattern occurred all over the codebase. There were other places where it referenced a different settings field, and they just hadn\u0026#39;t encountered the bug yet, but knew that it was only a matter of time before changing a settings file was going to break more functionality in the application.\u003c/p\u003e\n\u003cp\u003eThey wisely rewrote these sections to \u003cem\u003enot\u003c/em\u003e reference the settings, and dubbed the pattern the \u0026#34;Caramelize Pattern\u0026#34;. They added that to their coding standards as a thing to avoid, and learned a valuable lesson about how languages provide footguns.\u003c/p\u003e\n\u003cp\u003eSince today\u0026#39;s April Fool\u0026#39;s Day, consider the prank the fact that everyone learned their lesson and corrected their mistakes. I suppose that has to happen at least \u003cem\u003esometimes\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-01T06:30:00Z",
  "modifiedTime": null
}
