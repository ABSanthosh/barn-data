{
  "id": "738a194a-484a-4eb5-8f75-720a75f7941e",
  "title": "CodeSOD: All the Rest Have 31",
  "link": "https://thedailywtf.com/articles/all-the-rest-have-31",
  "description": "Horror movies, as of late, have gone to great lengths to solve the key obstacle to horror movies- cell phones. When we live in a world where help is a phone call away, it's hard to imagine the characters not doing that. So screenwriters put them in situations where this is impossible: in Midsommar they isolate them in rural Sweden, in Get Out calling the police is only going to put our protagonist in more danger. But what's possibly more common is making the film a period piece- like the X/Pearl/Maxxxine trilogy, Late Night with the Devil, or Netflix's continuing series of R.L. Stine adaptations. I bring this up, because today's horror starts in 1993. A Norwegian software company launched its software product to mild acclaim. Like every company, it had its ups and downs, its successes and missteps. On the surface, it was a decent enough place to work. Over the years, the company tried to stay up to date with technology. In 1993, the major languages one might use for launching a major software product, your options are largely C or Pascal. Languages like Python existed, but weren't widely used or even supported on most systems. But the company stayed in business and needed to update their technology as time passed, which meant the program gradually grew and migrated to new languages. Which meant, by the time Niklas F joined the company, they were on C#. Even though they'd completely changed languages, the codebase still derived from the original C codebase. And that meant that the codebase had many secrets, dark corners, and places a developer should never look. Like every good horror movie protagonist, Niklas heard the \"don't go in there!\" and immediately went in there. And lurking in those shadows was the thing every developer fears the most: homebrew date handling code. /// /// /// /// /// public static DateTime LastDayInMonth(DateTime dt) { int day = 30; switch (dt.Month) { case 1: day = 31; break; case 2: if (IsLeapYear(dt)) day = 29; else day = 28; break; case 3: day = 31; break; case 4: day = 30; break; case 5: day = 31; break; case 6: day = 30; break; case 7: day = 31; break; case 8: day = 31; break; case 9: day = 30; break; case 10: day = 31; break; case 11: day = 30; break; case 12: day = 31; break; } return new DateTime(dt.Year, dt.Month, day, 0, 0, 0); } /// /// /// /// /// public static bool IsLeapYear(DateTime dt) { bool ret = (((dt.Year % 4) == 0) \u0026\u0026 ((dt.Year % 100) != 0) || ((dt.Year % 400) == 0)); return ret; } For a nice change of pace, this code isn't incorrect. Even the leap year calculation is actually correct (though my preference would be to just return the expression instead of using a local variable). But that's what makes this horror all the more insidious: there are built-in functions to handle all of this, but this code works and will likely continue to work, just sitting there, like a demon that we've made a pact with. And suddenly we realize this isn't Midsommar but Ari Aster's other hit film, Hereditary, and we're trapped being in a lineage of monsters, and can't escape our inheritance. .comment {border: none;} [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Thu, 31 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3714,
  "excerpt": "Horror movies, as of late, have gone to great lengths to solve the key obstacle to horror movies- cell phones. When we live in a world where help is a phone call away, it's hard to imagine the characters not doing that. So screenwriters put them in situations where this is impossible: in Midsommar they isolate them in rural Sweden, in Get Out calling the police is only going to put our protagonist in more danger. But what's possibly more common is making the film a period piece- like the X/Pearl/Maxxxine trilogy, Late Night with the Devil, or Netflix's continuing series of R.L. Stine adaptations. I bring this up, because today's horror starts in 1993. A Norwegian software company launched its software product to mild acclaim. Like every company, it had its ups and downs, its successes and missteps. On the surface, it was a decent enough place to work.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-31 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Horror movies, as of late, have gone to great lengths to solve the key obstacle to horror movies- cell phones. When we live in a world where help is a phone call away, it's hard to imagine the characters not doing that. So screenwriters put them in situations where this is impossible: in Midsommar they isolate them in rural Sweden, in Get Out calling the police is only going to put our protagonist in more danger. But what's possibly more common is making the film a period piece- like the X/Pearl/Maxxxine trilogy, Late Night with the Devil, or Netflix's continuing series of R.L. Stine adaptations. I bring this up, because today's horror starts in 1993. A Norwegian software company launched its software product to mild acclaim. Like every company, it had its ups and downs, its successes and missteps. On the surface, it was a decent enough place to work. Over the years, the company tried to stay up to date with technology. In 1993, the major languages one might use for launching a major software product, your options are largely C or Pascal. Languages like Python existed, but weren't widely used or even supported on most systems. But the company stayed in business and needed to update their technology as time passed, which meant the program gradually grew and migrated to new languages. Which meant, by the time Niklas F joined the company, they were on C#. Even though they'd completely changed languages, the codebase still derived from the original C codebase. And that meant that the codebase had many secrets, dark corners, and places a developer should never look. Like every good horror movie protagonist, Niklas heard the \"don't go in there!\" and immediately went in there. And lurking in those shadows was the thing every developer fears the most: homebrew date handling code. /// \u003csummary\u003e /// /// \u003c/summary\u003e /// \u003cparam name=\"dt\"\u003e\u003c/param\u003e /// \u003creturns\u003e\u003c/returns\u003e public static DateTime LastDayInMonth(DateTime dt) { int day = 30; switch (dt.Month) { case 1: day = 31; break; case 2: if (IsLeapYear(dt)) day = 29; else day = 28; break; case 3: day = 31; break; case 4: day = 30; break; case 5: day = 31; break; case 6: day = 30; break; case 7: day = 31; break; case 8: day = 31; break; case 9: day = 30; break; case 10: day = 31; break; case 11: day = 30; break; case 12: day = 31; break; } return new DateTime(dt.Year, dt.Month, day, 0, 0, 0); } /// \u003csummary\u003e /// /// \u003c/summary\u003e /// \u003cparam name=\"dt\"\u003e\u003c/param\u003e /// \u003creturns\u003e\u003c/returns\u003e public static bool IsLeapYear(DateTime dt) { bool ret = (((dt.Year % 4) == 0) \u0026\u0026 ((dt.Year % 100) != 0) || ((dt.Year % 400) == 0)); return ret; } For a nice change of pace, this code isn't incorrect. Even the leap year calculation is actually correct (though my preference would be to just return the expression instead of using a local variable). But that's what makes this horror all the more insidious: there are built-in functions to handle all of this, but this code works and will likely continue to work, just sitting there, like a demon that we've made a pact with. And suddenly we realize this isn't Midsommar but Ari Aster's other hit film, Hereditary, and we're trapped being in a lineage of monsters, and can't escape our inheritance. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-31\"\u003e2024-10-31\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10771\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eHorror movies, as of late, have gone to great lengths to solve the key obstacle to horror movies- \u003cem\u003ecell phones\u003c/em\u003e. When we live in a world where help is a phone call away, it\u0026#39;s hard to imagine the characters not doing that. So screenwriters put them in situations where this is impossible: in \u003cem\u003eMidsommar\u003c/em\u003e they isolate them in rural Sweden, in \u003cem\u003eGet Out\u003c/em\u003e calling the police is only going to put our protagonist in \u003cem\u003emore\u003c/em\u003e danger. But what\u0026#39;s possibly more common is making the film a period piece- like the \u003cem\u003eX/Pearl/Maxxxine\u003c/em\u003e trilogy, \u003cem\u003eLate Night with the Devil\u003c/em\u003e, or Netflix\u0026#39;s continuing series of R.L. Stine adaptations.\u003c/p\u003e\n\u003cp\u003eI bring this up, because today\u0026#39;s horror starts in 1993. A Norwegian software company launched its software product to mild acclaim. Like every company, it had its ups and downs, its successes and missteps. On the surface, it was a decent enough place to work.\u003c/p\u003e\n\u003cp\u003eOver the years, the company tried to stay up to date with technology. In 1993, the major languages one might use for launching a major software product, your options are largely C or Pascal. Languages like Python \u003cem\u003eexisted\u003c/em\u003e, but weren\u0026#39;t widely used or even supported on most systems. But the company stayed in business and needed to update their technology as time passed, which meant the program gradually grew and migrated to new languages.\u003c/p\u003e\n\u003cp\u003eWhich meant, by the time \u003cstrong\u003eNiklas F\u003c/strong\u003e joined the company, they were on C#. Even though they\u0026#39;d completely changed languages, the codebase still derived from the original C codebase. And that meant that the codebase had many secrets, dark corners, and places a developer should never look.\u003c/p\u003e\n\u003cp\u003eLike every good horror movie protagonist, Niklas heard the \u0026#34;don\u0026#39;t go in there!\u0026#34; and immediately went in there. And lurking in those shadows was the thing every developer fears the most: \u003cem\u003ehomebrew date handling code\u003c/em\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;/summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;param name=\u0026#34;dt\u0026#34;\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/param\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;returns\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/returns\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e DateTime \u003cspan\u003eLastDayInMonth\u003c/span\u003e(\u003cspan\u003eDateTime dt\u003c/span\u003e)\u003c/span\u003e\n{\n\t\u003cspan\u003eint\u003c/span\u003e day = \u003cspan\u003e30\u003c/span\u003e;\n\t\u003cspan\u003eswitch\u003c/span\u003e (dt.Month)\n\t{\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e:\n\t\t\t\u003cspan\u003eif\u003c/span\u003e (IsLeapYear(dt))\n\t\t\t\tday = \u003cspan\u003e29\u003c/span\u003e;\n\t\t\t\u003cspan\u003eelse\u003c/span\u003e\n\t\t\t\tday = \u003cspan\u003e28\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e30\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e6\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e30\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e7\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e8\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e9\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e30\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e30\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e12\u003c/span\u003e:\n\t\t\tday = \u003cspan\u003e31\u003c/span\u003e;\n\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t}\n\t\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e DateTime(dt.Year, dt.Month, day, \u003cspan\u003e0\u003c/span\u003e, \u003cspan\u003e0\u003c/span\u003e, \u003cspan\u003e0\u003c/span\u003e);\n}\n\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;/summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;param name=\u0026#34;dt\u0026#34;\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/param\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;returns\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/returns\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ebool\u003c/span\u003e \u003cspan\u003eIsLeapYear\u003c/span\u003e(\u003cspan\u003eDateTime dt\u003c/span\u003e)\u003c/span\u003e\n{\n\t\u003cspan\u003ebool\u003c/span\u003e ret = (((dt.Year % \u003cspan\u003e4\u003c/span\u003e) == \u003cspan\u003e0\u003c/span\u003e) \u0026amp;\u0026amp; ((dt.Year % \u003cspan\u003e100\u003c/span\u003e) != \u003cspan\u003e0\u003c/span\u003e) || ((dt.Year % \u003cspan\u003e400\u003c/span\u003e) == \u003cspan\u003e0\u003c/span\u003e));\n\t\u003cspan\u003ereturn\u003c/span\u003e ret;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor a nice change of pace, this code isn\u0026#39;t \u003cem\u003eincorrect\u003c/em\u003e. Even the leap year calculation is actually correct (though my preference would be to just return the expression instead of using a local variable). But that\u0026#39;s what makes this horror all the more insidious: there are built-in functions to handle all of this, but this code works and will likely continue to work, just sitting there, like a demon that we\u0026#39;ve made a pact with. And suddenly we realize this isn\u0026#39;t \u003cem\u003eMidsommar\u003c/em\u003e but Ari Aster\u0026#39;s other hit film, \u003cem\u003eHereditary\u003c/em\u003e, and we\u0026#39;re trapped being in a lineage of monsters, and can\u0026#39;t escape our inheritance.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-10-31T06:30:00Z",
  "modifiedTime": null
}
