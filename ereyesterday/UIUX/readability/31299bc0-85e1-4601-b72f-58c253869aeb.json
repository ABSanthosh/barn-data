{
  "id": "31299bc0-85e1-4601-b72f-58c253869aeb",
  "title": "CSS Grid with Galaxy layout: now available in Figma",
  "link": "https://uxdesign.cc/css-grid-with-galaxy-layout-figma-886a935b9649?source=rss----138adf9c44c---4",
  "description": "",
  "author": "nana ‚Äç‚ôÄÔ∏è",
  "published": "Tue, 20 May 2025 11:34:19 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "ux",
    "product-design",
    "css",
    "figma",
    "ui"
  ],
  "byline": "nana üßôüèª‚Äç‚ôÄÔ∏è",
  "length": 9496,
  "excerpt": "Discover how CSS Grid meets art in Figma‚Äîfeaturing layout techniques, prototyping-to-code tips, and creative resources to spark your imagination.",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "CSS grid with Galaxy layout: now available in FigmaHow I used Grid on a client website sometime ago, and share creative ideas to spark your imagination, whether you‚Äôre a designer, developer, or both.1. The history of CSS gridBack in 2005, Bert Bos published the CSS3 Advanced Layout draft. After nearly two decades of work by the CSS Working Group and passionate advocates, CSS Grid has evolved into one of the most powerful layout systems for the web and developers have been using it in production for years.Now, in 2025, designers can finally experience CSS Grid directly in Figma. Hopefully, Figma will continue evolving to support all CSS properties, functions, data types, and values, so design and code can align even more seamlessly. ü§ù‚ú®2. Observe: bringing installation Art to the webTo show what‚Äôs possible, I will show you through how I used CSS Grid to recreate a large scale installation artwork on the web from concept to implementation. Galaxy (2016) is one of the signature works by Korean contemporary artist Kim Eull, consisting of 1,450 individual drawings. The moment I saw it, I knew it could be reimagined with CSS Grid.Galaxy, Installation, Kim Eull, 2016Galaxy, Installation, Kim Eull, 2016When I saw it, I thought it could be quite easy to re-create and visualise it using CSS Grid. üòéIn summer ¬© 2023 Disney and related entities. All Rights Reserved.But it was more complicated than I expected making the Galaxy layout in CSS Grid with 1,450 drawings üòÖ.The first draft grid drawingMy first draft involved sketching a rough grid layout inspired by the installation. From there, I defined the following design goals:üéØ Design GoalsThe grid container should resemble the Galaxy installation.It should be flexible and responsive across screen sizes.Each grid item should have a hover effect and link to its own content page.Each item must match the exact shape ratio (vertical, horizontal, square) of the original artwork.Specified properties and values for each grid item in WordPress so the client can easily choose and upload artwork for each grid item if he wishes to change it.‚öôÔ∏è Image configurations in WordPressImage size: small, medium, largeShape: vertical rectangle, horizontal rectangle, square3. Research: CSS grid capabilities‚ë† Understand the CSS grid structureLet me briefly explain the basics of CSS Grid. Think of CSS Grid like an IKEA IVAR shelf: the container is the outer frame, and the items are the individual cells. Define the frame, decide the rows and columns, and then neatly arrange your content, just like organising your favourite shelf.IKEA IVAR ¬© Inter IKEA Systems B.V. 1999‚Äì2023I hope this cheat sheet I made for this article helps you understand the CSS grid structure. üßôüèªCSS Grid container and itemIVAR outer frame = grid container = parentEach cell = grid item = childCSS Grid TerminologyLine: horizontal or vertical divider (used to position items)Cell: the smallest unit of the gridTrack: the space between two lines (a row or a column)Area: a group of cells defined using grid-area‚ë° Find suitable propertiesAs you can see from the CSS Grid cheatsheet below, CSS Grid has many properties and values as well as various features. It was important to find suitable properties and values of CSS Grid for the Galaxy layout. I tried all properties and found grid-template containers and grid-area items worked best for the Galaxy layout.CSS Grid properties4. Make: Prototyping \u0026 Iterating‚ë† Sketch the layout by hand (now in Figma!)CSS Grid prototypingTo define grid-area values visually, I printed a grid and sketched the Galaxy layout by hand. Back then, Figma didn‚Äôt support grid layouts like it does now so I had to draw by hand. But now, thanks to Figma‚Äôs new Grid feature, you can map and plan layouts much more easily üôåCSS Grid prototyping in FigmaThat said, while I really enjoyed using Figma Grid, I noticed a few limitations that made it tricky to recreate the Galaxy layout precisely.üöß A Few Limitations in Figma GridRow and column gapsNo variable support for row/column gapsFigma only allows fixed px values for grid gaps, but I need to use primitive values from our design system library to ensure consistency across components and patterns. It would be great if Figma supported variables or design tokens for this.‚ö†Ô∏è Note: Gaps in CSS can use any length unit or percentage ‚Äî but not fr.No visible line numbers in FigmaNo visible line numbersWhen placing images based on grid-area, it‚Äôs hard to know the exact row/column without indicators. This made it difficult to match my CSS layout precisely.Elements shift randomly when adding new imagesEvery time I added a new image, other elements jumped around unexpectedly. I had to manually re-align everything ‚Äî bug or feature?Limited support for CSS grid propertiesEspecially for parent-level properties like justify-items, align-items, place-content, etc. Figma currently only supports basic alignment and fixed units. This limits the full expressive potential of CSS Grid.üôè If you‚Äôve found any tricks or tips for these challenges, I‚Äôd truly appreciate it if you shared them!Despite these challenges, I believe Figma will continue to evolve and support more CSS properties, functions, data types, and values, aligning design and code even more seamlessly. If you have tips for that, please share!Now, let‚Äôs go back to the process of building the Galaxy layout.‚ë° Numbering the grid linesI labeled each row and column in the sketch, these line numbers help define each grid item‚Äôs position using the grid-area shorthand.Numbering the grid linesAlso, we can inspect these numbers in the Chrome DevTools like below.CSS grid in Chrome DevTools‚ë¢ Set the grid containerSet the grid container using grid-templateHere is the CSS code for the container. I used the repeat CSS function to create a certain number of columns and rows, grid-template shorthand with repeat() to create a 25√ó21 grid..container { display: grid; grid-template: repeat(25, 1fr) / repeat(21, 1fr);}Set the Grid Container: Repeat CSS function‚ë£ Define Grid ItemsNow I had 525 grid cells. To specify the grid item‚Äôs size and location for the Galaxy layout, I defined grid-area shorthand property for 29 items.grid-area value: row-start / column-start / row-end / column-endDefine grid itemsHere is the CSS code for the 29 items.//item position.item1 { grid-area: 2/6/8/9;}.item2 { grid-area: 3/9/6/11;}.item3 { grid-area: 1/11/6/14;}.......item27 { grid-area: 22/18/24/19;}.item28 { grid-area: 7/4/12/6;}.item29 { grid-area: 21/7/25/10;}Responsive CSS Grid test on CodePenThe grid-area CSS shorthand property specifies a grid item‚Äôs size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. -MDN‚ë§ Insert Images into HTMLAs the final step, I selected artwork images that matched each grid item‚Äôs shape to avoid awkward cropping. One day, I hope we‚Äôll have a CSS algorithm smart enough to auto-pick image ratios. üòâ5. Reflect: 3 Key LearningsAfter building the Galaxy layout with CSS Grid, I took a moment to reflect, just like in any good design process. Looking back helped me identify what worked, what surprised me, and what I‚Äôd do differently next time. Here are three insights that stood out:‚ë† Implicit grid vs Explicit gridAn implicit grid is automatically generated by the browser when items extend beyond the defined structure.An explicit grid is one you define manually using grid-template-columns and grid-template-rows.Understanding the difference helps you take full control of your layout.Comparing implicit and explicit grids in CSSüëâ Watch: Wes Bos ‚Äî Implicit vs Explicit Tracks‚ë° How height works in CSSThe height CSS property specifies the height of an element. By default, the property defines the height of the content area. -MDNThe height property controls an element‚Äôs vertical size.By default, it matches the height of the content inside.No content = no height100px content = 100px height‚ë¢ fr units need explicit heightüí° Height doesn‚Äôt update automatically like width does.Unlike columns, which adjust to screen width, rows using fr units don‚Äôt respond the same way. If the container has no defined height, the browser can‚Äôt calculate row heights, causing layout issues like the one shown below.fr units need explicit heightThe browser can‚Äôt calculate row heights, which can cause the layout to break unexpectedly, as shown bwhelow.The browser can‚Äôt calculate row heightsHeight doesn‚Äôt get updated automaticallyWhereas, even if there is no explicit width value in the block-level element specified, the browser automatically calculates the width value of the element by the browser size.Width gets updated automaticallyFor this reason, if you wanted to use fr unit in the grid-templage-rows property and takes up the entire height of the screen, you should put an explicit height on the container.Use fr unit in the grid-templage-rows property and takes up the entire height of the screen.container { height: 100vh; grid-template-row: repeat(6, 1fr);}Even now, I often forget CSS Grid properties when revisiting projects üòÖ. That‚Äôs why I created a CSS Grid Cheatsheet, a quick reference to help me remember and apply the right values fast.CSS Grid cheatsheetüíå Any feedback or just say Hi!I‚Äôd love to hear how I can improve this article for everyone. Drop me a comment below, or reach out on Bluesky or LinkedIn.If you enjoyed it, feel free to show some love (üëè) and stay tuned for more. Thank you!üíú üßôüèª‚Äç‚ôÄÔ∏è",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*fJRE4VUn5jRRIDGxqY9_PQ.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"dbd3\" data-testid=\"storyTitle\"\u003eCSS grid with Galaxy layout: now available in Figma\u003c/h2\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"3e96\"\u003eHow I used Grid on a client website sometime ago, and share creative ideas to spark your imagination, whether you‚Äôre a designer, developer, or both.\u003c/h2\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@nanacodesign?source=post_page---byline--886a935b9649---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"nana üßôüèª‚Äç‚ôÄÔ∏è\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*bithtfz6uqDEjhIh0wXS3A.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"b95a\"\u003e1. The history of CSS grid\u003c/h2\u003e\u003cp id=\"ba47\"\u003eBack in \u003cstrong\u003e2005\u003c/strong\u003e, \u003ca href=\"https://www.w3.org/TR/2005/WD-css3-layout-20051215/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBert Bos\u003c/a\u003e published the \u003cem\u003eCSS3 Advanced Layout\u003c/em\u003e draft. After nearly \u003cstrong\u003etwo decades\u003c/strong\u003e of work by the \u003ca href=\"https://www.w3.org/groups/wg/css/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eCSS Working Group\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e \u003c/strong\u003eand passionate advocates, CSS Grid has evolved into one of the most powerful layout systems for the web and developers have been using it in production for years.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d182\"\u003eNow, in 2025, designers can finally experience CSS Grid directly in Figma. \u003cstrong\u003eHopefully, Figma will continue evolving to support all CSS properties, functions, data types, and values, so design and code can align even more seamlessly. ü§ù‚ú®\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"5f27\"\u003e2. Observe: bringing installation Art to the web\u003c/h2\u003e\u003cp id=\"21b4\"\u003eTo show what‚Äôs possible, I will show you through how I used CSS Grid to recreate a large scale installation artwork on the web from concept to implementation. \u003ca href=\"https://kimeull.com/post/2016-korea-artist-prize\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eGalaxy\u003c/em\u003e (2016)\u003c/a\u003e is one of the signature works by Korean contemporary artist Kim Eull, consisting of 1,450 individual drawings. The moment I saw it, I knew it could be reimagined with CSS Grid.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eGalaxy, Installation, Kim Eull, 2016\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eGalaxy, Installation, Kim Eull, 2016\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"114b\"\u003eWhen I saw it, I thought it could be quite easy to re-create and visualise it using CSS Grid. üòé\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eIn summer ¬© 2023 Disney and related entities. All Rights Reserved.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"915e\"\u003eBut it was more complicated than I expected making the Galaxy layout in CSS Grid with 1,450 drawings üòÖ.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe first draft grid drawing\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ef48\"\u003eMy first draft involved sketching a rough grid layout inspired by the installation. From there, I defined the following design goals:\u003c/p\u003e\u003cp id=\"7fdd\"\u003e\u003cstrong\u003eüéØ Design Goals\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"3bca\"\u003eThe grid container should resemble the Galaxy installation.\u003c/li\u003e\u003cli id=\"ff35\"\u003eIt should be flexible and responsive across screen sizes.\u003c/li\u003e\u003cli id=\"269a\"\u003eEach grid item should have a hover effect and link to its own content page.\u003c/li\u003e\u003cli id=\"3080\"\u003eEach item must match the exact shape ratio (vertical, horizontal, square) of the original artwork.\u003c/li\u003e\u003cli id=\"7fe5\"\u003eSpecified properties and values for each grid item in WordPress so the client can easily choose and upload artwork for each grid item if he wishes to change it.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4b8c\"\u003e\u003cstrong\u003e‚öôÔ∏è Image configurations in WordPress\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"8013\"\u003eImage size: small, medium, large\u003c/li\u003e\u003cli id=\"c8d6\"\u003eShape: vertical rectangle, horizontal rectangle, square\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"624c\"\u003e\u003cstrong\u003e3. \u003c/strong\u003eResearch: CSS grid capabilities\u003c/h2\u003e\u003cp id=\"390e\"\u003e\u003cstrong\u003e‚ë† Understand the CSS grid structure\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"1732\"\u003eLet me briefly explain the basics of CSS Grid. Think of CSS Grid like an IKEA IVAR shelf: the container is the outer frame, and the items are the individual cells. Define the frame, decide the rows and columns, and then neatly arrange your content, just like organising your favourite shelf.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eIKEA IVAR ¬© Inter IKEA Systems B.V. 1999‚Äì2023\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"4a7f\"\u003eI hope this cheat sheet I made for this article helps you understand the CSS grid structure. üßôüèª\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid container and item\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"82be\"\u003eIVAR outer frame = grid container = parent\u003c/li\u003e\u003cli id=\"bd8b\"\u003eEach cell = grid item = child\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid Terminology\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"7cfa\"\u003eLine: horizontal or vertical divider (used to position items)\u003c/li\u003e\u003cli id=\"cef7\"\u003eCell: the smallest unit of the grid\u003c/li\u003e\u003cli id=\"dd8e\"\u003eTrack: the space between two lines (a row or a column)\u003c/li\u003e\u003cli id=\"ce34\"\u003eArea: a group of cells defined using \u003ccode\u003egrid-area\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"12a0\"\u003e\u003cstrong\u003e‚ë° Find suitable properties\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"b39c\"\u003eAs you can see from the CSS Grid cheatsheet below, CSS Grid has many properties and values as well as various features. It was important to find suitable \u003cstrong\u003eproperties\u003c/strong\u003e and \u003cstrong\u003evalues\u003c/strong\u003e of CSS Grid for the Galaxy layout. I tried all properties and found \u003ccode\u003egrid-template\u003c/code\u003e containers and \u003ccode\u003egrid-area\u003c/code\u003e items worked best for the Galaxy layout.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid properties\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"0541\"\u003e4. Make: Prototyping \u0026amp; Iterating\u003c/h2\u003e\u003cp id=\"9827\"\u003e\u003cstrong\u003e‚ë† \u003c/strong\u003eSketch the layout by hand (now in Figma!)\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid prototyping\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"1422\"\u003eTo define \u003ccode\u003egrid-area\u003c/code\u003e values visually, I printed a grid and sketched the Galaxy layout by hand. Back then, Figma didn‚Äôt support grid layouts like it does now so I had to draw by hand.\u003cbr/\u003e\u003cstrong\u003e \u003c/strong\u003eBut now, thanks to Figma‚Äôs new Grid feature, you can map and plan layouts much more easily üôå\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid prototyping in Figma\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"c47e\"\u003eThat said, while I really enjoyed using Figma Grid, I noticed a few limitations that made it tricky to recreate the Galaxy layout precisely.\u003c/p\u003e\u003cp id=\"378b\"\u003e\u003cstrong\u003eüöß A Few Limitations in Figma Grid\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eRow and column gaps\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"c107\"\u003e\u003cstrong\u003eNo variable support for row/column gaps\u003cbr/\u003e\u003c/strong\u003eFigma only allows fixed \u003ccode\u003epx\u003c/code\u003e values for grid gaps, but I need to use primitive values from our design system library to ensure consistency across components and patterns. It would be great if Figma supported variables or design tokens for this.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"00eb\"\u003e‚ö†Ô∏è \u003cem\u003eNote: Gaps in CSS can use any length unit or percentage ‚Äî but not \u003c/em\u003e\u003ccode\u003e\u003cem\u003efr\u003c/em\u003e\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cstrong\u003eNo visible line numbers in Figma\u003c/strong\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"76fd\"\u003e\u003cstrong\u003eNo visible line numbers\u003cbr/\u003e\u003c/strong\u003eWhen placing images based on grid-area, it‚Äôs hard to know the exact row/column without indicators. This made it difficult to match my CSS layout precisely.\u003c/li\u003e\u003cli id=\"6518\"\u003e\u003cstrong\u003eElements shift randomly when adding new images\u003c/strong\u003e\u003cbr/\u003eEvery time I added a new image, other elements jumped around unexpectedly. I had to manually re-align everything ‚Äî bug or feature?\u003c/li\u003e\u003cli id=\"88e5\"\u003e\u003cstrong\u003eLimited support for CSS grid properties\u003c/strong\u003e\u003cbr/\u003eEspecially for parent-level properties like \u003ccode\u003ejustify-items\u003c/code\u003e, \u003ccode\u003ealign-items\u003c/code\u003e, \u003ccode\u003eplace-content\u003c/code\u003e, etc. Figma currently only supports basic alignment and fixed units. This limits the full expressive potential of CSS Grid.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"e016\"\u003eüôè If you‚Äôve found any tricks or tips for these challenges, I‚Äôd truly appreciate it if you shared them!\u003c/p\u003e\u003cp id=\"5431\"\u003eDespite these challenges, I believe Figma will continue to evolve and support more CSS properties, functions, data types, and values, aligning design and code even more seamlessly. If you have tips for that, please share!\u003c/p\u003e\u003cp id=\"f86c\"\u003eNow, let‚Äôs go back to the process of building the Galaxy layout.\u003c/p\u003e\u003cp id=\"a7fb\"\u003e\u003cstrong\u003e‚ë° Numbering the grid lines\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"1e9c\"\u003eI labeled each row and column in the sketch, these line numbers help define each grid item‚Äôs position using the \u003ccode\u003egrid-area\u003c/code\u003e shorthand.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cstrong\u003eNumbering the grid lines\u003c/strong\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"563e\"\u003eAlso, we can inspect these numbers in the Chrome DevTools like below.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS grid in Chrome DevTools\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"37c9\"\u003e\u003cstrong\u003e‚ë¢ Set the grid container\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eSet the grid container using grid-template\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"53e0\"\u003eHere is the CSS code for the container. I used the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003erepeat\u003c/a\u003e CSS function to create a certain number of columns and rows, grid-template shorthand with repeat() to create a 25√ó21 grid.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e466\"\u003e.container {\u003cbr/\u003e display: grid;\u003cbr/\u003e grid-template: repeat(25, 1fr) / repeat(21, 1fr);\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eSet the Grid Container: Repeat CSS function\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"2ff9\"\u003e\u003cstrong\u003e‚ë£ Define Grid Items\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"9c92\"\u003eNow I had 525 grid cells. To specify the grid item‚Äôs size and location for the Galaxy layout, I defined \u003ccode\u003egrid-area\u003c/code\u003e shorthand property for 29 items.\u003c/p\u003e\u003cp id=\"5b92\"\u003e\u003ccode\u003egrid-area\u003c/code\u003e value: \u003ccode\u003erow-start / column-start / row-end / column-end\u003c/code\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDefine grid items\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"1a85\"\u003eHere is the CSS code for the 29 items.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ce3b\"\u003e//item position\u003cp\u003e.item1 {\u003cbr/\u003e grid-area: 2/6/8/9;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e.item2 {\u003cbr/\u003e grid-area: 3/9/6/11;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e.item3 {\u003cbr/\u003e grid-area:  1/11/6/14;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e......\u003c/p\u003e\u003cp\u003e.item27 {\u003cbr/\u003e grid-area: 22/18/24/19;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e.item28 {\u003cbr/\u003e grid-area: 7/4/12/6;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e.item29 {\u003cbr/\u003e grid-area: 21/7/25/10;\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eResponsive CSS Grid test on CodePen\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"ed67\"\u003e\u003cem\u003eThe \u003c/em\u003e\u003ccode\u003e\u003cem\u003egrid-area\u003c/em\u003e\u003c/code\u003e\u003cem\u003e CSS shorthand property specifies a grid item‚Äôs size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. -MDN\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"a32b\"\u003e\u003cstrong\u003e‚ë§ Insert Images into HTML\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"ce5c\"\u003eAs the final step, I selected artwork images that matched each grid item‚Äôs shape to avoid awkward cropping. One day, I hope we‚Äôll have a CSS algorithm smart enough to auto-pick image ratios. üòâ\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"97c7\"\u003e5. Reflect: 3 Key Learnings\u003c/h2\u003e\u003cp id=\"578f\"\u003eAfter building the Galaxy layout with CSS Grid, I took a moment to reflect, just like in any good design process. Looking back helped me identify what worked, what surprised me, and what I‚Äôd do differently next time. Here are three insights that stood out:\u003c/p\u003e\u003cp id=\"bef2\"\u003e\u003cstrong\u003e‚ë† Implicit grid vs Explicit grid\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"ad1e\"\u003eAn \u003cstrong\u003eimplicit grid\u003c/strong\u003e is automatically generated by the browser when items extend beyond the defined structure.\u003c/li\u003e\u003cli id=\"fdac\"\u003eAn \u003cstrong\u003eexplicit grid\u003c/strong\u003e is one you define manually using \u003ccode\u003egrid-template-columns\u003c/code\u003e and \u003ccode\u003egrid-template-rows\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"2749\"\u003eUnderstanding the difference helps you take full control of your layout.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eComparing implicit and explicit grids in CSS\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"95ad\"\u003eüëâ \u003ca href=\"https://www.youtube.com/watch?v=sY3I2aIAb0A\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWatch: Wes Bos ‚Äî Implicit vs Explicit Tracks\u003c/a\u003e\u003c/p\u003e\u003cp id=\"3d03\"\u003e\u003cstrong\u003e‚ë° How \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eheight\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e works in CSS\u003c/strong\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"d3af\"\u003e\u003cem\u003eThe height CSS property specifies the height of an element. By default, the property defines the height of the \u003c/em\u003e\u003cstrong\u003e\u003cem\u003econtent area\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e. -\u003c/em\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/height\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eMDN\u003c/em\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"383f\"\u003eThe \u003ccode\u003eheight\u003c/code\u003e property controls an element‚Äôs vertical size.\u003cbr/\u003eBy default, it matches the height of the content inside.\u003c/p\u003e\u003cul\u003e\u003cli id=\"3eb5\"\u003eNo content = no height\u003c/li\u003e\u003cli id=\"a522\"\u003e100px content = 100px height\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"53e9\"\u003e\u003cstrong\u003e‚ë¢ \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003efr\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e units need explicit height\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"a429\"\u003e\u003cstrong\u003eüí° Height doesn‚Äôt update automatically like width does.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"9405\"\u003eUnlike columns, which adjust to screen width, rows using \u003ccode\u003efr\u003c/code\u003e units don‚Äôt respond the same way. If the container has no defined height, the browser can‚Äôt calculate row heights, causing layout issues like the one shown below.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ccode\u003efr\u003c/code\u003e units need explicit height\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"805a\"\u003eThe browser can‚Äôt calculate row heights, which can cause the layout to break unexpectedly, as shown bwhelow.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe browser can‚Äôt calculate row heights\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eHeight doesn‚Äôt get updated automatically\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"f877\"\u003eWhereas, even if there is no explicit width value in the block-level element specified, the browser automatically calculates the width value of the element by the browser size.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eWidth gets updated automatically\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b19a\"\u003eFor this reason, if you wanted to use \u003ccode\u003efr\u003c/code\u003e unit in the \u003ccode\u003egrid-templage-rows\u003c/code\u003e property and takes up the entire height of the screen, you should put an explicit height on the container.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eUse \u003ccode\u003efr\u003c/code\u003e unit in the \u003ccode\u003egrid-templage-rows\u003c/code\u003e property and takes up the entire height of the screen\u003c/figcaption\u003e\u003c/figure\u003e\u003cpre\u003e\u003cspan id=\"397e\"\u003e.container {\u003cbr/\u003e   height: 100vh;\u003cbr/\u003e   grid-template-row: repeat(6, 1fr);\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"cf8f\"\u003eEven now, I often forget CSS Grid properties when revisiting projects üòÖ. That‚Äôs why I created a \u003cstrong\u003eCSS Grid Cheatsheet\u003c/strong\u003e, a quick reference to help me remember and apply the right values fast.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCSS Grid cheatsheet\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"3b9b\"\u003e\u003cstrong\u003eüíå Any feedback or just say \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eHi\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e!\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"262a\"\u003eI‚Äôd love to hear how I can improve this article for everyone. Drop me a comment below, or reach out on \u003ca href=\"https://bsky.app/profile/nanacodesign.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBluesky\u003c/a\u003e or \u003ca href=\"https://www.linkedin.com/in/nanacodesign/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"1e1e\"\u003eIf you enjoyed it, feel free to show some love (üëè) and stay tuned for more. Thank you!üíú üßôüèª‚Äç‚ôÄÔ∏è\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-05-20T11:34:19.623Z",
  "modifiedTime": null
}
