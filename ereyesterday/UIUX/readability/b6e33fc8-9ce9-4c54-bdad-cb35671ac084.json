{
  "id": "b6e33fc8-9ce9-4c54-bdad-cb35671ac084",
  "title": "The root causes for the dev-design mismatch",
  "link": "https://uxdesign.cc/the-root-causes-for-the-dev-design-mismatch-4c66e0fa6740?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Erez Reznikov",
  "published": "Sun, 17 Nov 2024 19:20:26 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "product-design",
    "ux",
    "design",
    "ui",
    "development"
  ],
  "byline": "Erez Reznikov",
  "length": 14255,
  "excerpt": "There are two persistent issues that keep plaguing the product design and development worlds. The first one is very much on the surface, and thus — no surprise — gets both a lot of attention and a…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Designers use an unconstrained canvas tool to design for rule-based interactive systems, hoping the devs will perfect everything in production. This causes misalignment between designers and devs.There are two persistent issues that keep plaguing the product design and development worlds. The first one is very much on the surface, and thus — no surprise — gets both a lot of attention and a plethora of sometimes reasonable solutions. The second one is much deeper, more subtle, and easier to miss.Let’s start with the first one — the handoff problem.There are, in fact, several reasons why the handoff process is a major problem:Friction, and with it the potential for mistakes in a handoff, causes the actual coded products to differ from the designers’ intentions, as captured in their design tool. The only experience that matters is that of real users with the real-coded product. Not getting the designs perfectly reflected in the final product makes the process ineffective and demoralizing.Handoff wastes a lot of time for designers and developers. It takes a lot of mental effort to encode and decode all the relevant info for building the screens correctly. A designer must over-communicate with specs, examples, comments, and documentation, while a developer must inspect the designs with paranoid, detective-level vigilance, sometimes squinting to avoid missing anything.Handing designs to developers to build from scratch creates a redundant, atrophied artifact. Once the code is live, it diverges from the source of truth, creating a never-ending race to ensure the design file and the ‘reality’ match. When that pairing is inevitably broken, a chain of mistrust builds. Developers see outdated designs and feel justified in ignoring parts that seem out of touch with ‘reality.’ As a result, designers become hyper-vigilant, hunting for mismatches between the design and the implementation. This occurs frequently when developers choose a library as the optimal solution for a component and do not properly match the specified styling.The need to hand designs over forces designers to waste time on things they usually don’t like or value that much. It’s not the peak of creativity to specify and document all the ways a text field should be able to render in the product. Especially knowing that this is not the actual thing being built, but only a disposable artifact. It forces front-end developers to focus on tasks of little joy or meaning as well. Recreating an already designed screen in code while chasing down designers to verify how things should reflow when the viewport gets smaller or larger is no fun either.Since those problems are quite clear, the motivation for solving them was, and still is, high.And so there were two general directions for solutions that the market allowed to evolve:One was a path of helper apps to the most popular canvas design tools. It started with tools for easier inspection (Avocode, Zeplin, Simpli, Abstract). Then, design tools added inspection features (like Dev Mode in Figma, Sketch, XD, and InVision). After that, specific tools appeared. These included Zeroheight and InVision’s DSM for easier documentation. Many plugins also emerged in the Sketch and Figma marketplaces, like Anima, Locofy, and other ‘Figma-to-HTML’ tools.The other path was entirely different in nature. It sought to eliminate the handoff altogether by creating a new breed of design tools that were able to ‘ship end-to-end’ by themselves with little to no help from developers. The most prominent and robust nowadays would be Webflow and Framer, but there is a whole slew of them, starting with Dreamweaver some 25 years ago.The biggest issue with all these no-code / low-code tools was, and still is, that the way they’re built not only eliminates the handoff, but also the need for developers themselves. This, naturally, created a pretty low ceiling for the complexity of the products these tools can allow designers to build end-to-end. Primarily for this reason, the monetary success followed website building tools, rather than native iOS / Android or web app building tools (at this stage I’m only aware of Play for iOS and Draftbit). The chief reason for this, as I can make sense of it, is that in apps the logical complexity exceeds the ability of the no-code tools to deliver. In the last few years, some vertical tools like Framer, Webflow, Builder.io started building ‘bridges’ as an import ability from canvas tools like Figma, using their own plugins.And so, the space of solutions for the handoff problem has a trade-off in the middle of its heart:You either have a generic canvas tool that allows you to design the most complex apps in the world, but the design is only an artifact and necessitates a handoff, or you have a specialized builder tool that frees you to design and develop by yourself, but it has a low ceiling of complexity for the product you want to create.As far as I’m aware, there have only been two design/development tools that successfully incorporated a different, unifying strategy.Flash (created by Macromedia, succeeded by Adobe, killed by Steve Jobs)Blend for Visual Studio using XAML and the WPF platform from Microsoft.Flash had ActionScript that allowed the same object to be freely designed by the designer and logically manipulated using ActionScript commands by the developer. This setup let all the relevant pros do their jobs. The designers focused on what was important, both experientially and visually. They didn’t need to hand off anything to developers, since they could just target the existing assets created by the designers. No throwaway artifacts, no handoff, and no limit to the complexity. Flash didn’t try to code for you. It allowed developers to pick up where designers maxed out their comfort zone.Blend for Visual Studio had a similar story, but with different files, structures, and logic. It was a twin-environment setup. The designers could design, and the Visual Studio developers could target the exact same assets. Again, no handoff, no throwaway artifacts, and no limits on complexity.As we all know, Flash died because of security and performance incompatibility with the iPhone. Blend and Visual Studio are now niche, unpopular tools. In all the surveys of tool usage in the last 7 years, I haven’t seen a single mention of them. Meanwhile, Figma has taken almost all the product design market share).This has to lead us to the conclusion that the tools with the best approach are still not immune to failing for all sorts of other reasons. Business is a fickle and unpredictable game, indeed.Now, as I’ve stated at the beginning, there are two persistent issues that keep plaguing the product design and development worlds. Let’s explore the more hidden, but an even more important issue:Naive canvas-based tools hide the vast spectrum of design properties from designers.The ramifications of this problem are large. But it’s not a malicious plot to keep designers blissfully ignorant — it’s the bad side of a tradeoff that designers used to only look at its good side. Freedom. And boy, do designers love their freedom. I know I do.It is important to realize how we got to where we are with the canvas tools that have become so ubiquitous in the industry.We started with a physical page. Paper, ink, and colors manipulated to perfection by graphic designers. The page was static, concrete, well-defined, and never changing. Then graphic programs arrived to help speed things up — Photoshop, Freehand, Corel Draw, Illustrator (and many more after those). All helped us design printed and mostly static web assets. Then, something important happened. Computers began to diverge in screen sizes. The internet and native apps had to adapt. They introduced responsive units and rules. It all escalated even more after the introduction of the iPhone and tablets. But the designers, graphic and early-interactive designers that is, were hooked on the page metaphor. Naturally, the revenue-powered design tools kept giving them exactly that. The ease of direct manipulation (first with a mouse and keyboard, then with finger gestures and a stylus) was too comfortable to give up for other benefits. This led to a mismatch where designers were encouraged by the tools to have freedom, while the demand now was for responsive, systematic, smart, parametric design rules — for developers to implement.And this is where the great divide becomes clear because:The set of tools and abilities that maximize intuitive, freeform graphic manipulation is exactly the opposite of the set of tools that help define coherent, robust, flexible, and parametric systems.Think about the very basic nature of ‘gravitation’: in all the main canvas tools up until the introduction of Figma’s auto-layout a few years ago, the freedom meant that there was no gravitational pull either upwards or downwards. Very much unlike both the web and the native iOS and Android environments.When you have no gravitation, the default mode of everything is to be absolutely positioned in gradual z-index order, one on top of the other. Nothing pushes anything else. Nothing interacts. Paddings and margins don’t mean anything. Text doesn’t make boxes get larger when more words are typed in. Since there’s no viewport, no viewport-related measurements can be used; even percentages are almost never used. So almost nothing is relative.Slowly, UI-friendly tools started appearing. Sketch opened the door for both XD and Figma. It did this by using components, overrides, a generic mapping of frame = div, and more visual qualities that can be parameterized (colors, typography, effects, and layout grids in Figma). It was a breath of fresh air, but the challenges rose in tandem with the tools.The most technical designers felt the pressure to start experimenting with code by themselves. This gave them superpowers because it informed their otherwise naive stance about how the real world of UI programming works. A push towards getting more robust tools was felt, and the leading tools (Sketch, Figma, and XD) introduced Auto Layout, which was a slightly capped but friendly version of Flexbox. It was like having a mini-universe with DOM-like gravity inside a capsuled ‘auto-layout-enabled frame,’ inside a universe of a do-whatever-you-like canvas.This was revolutionary. Designers began to consider how content affects container sizes. Layout reflow became more robust, and finally, padding mattered.Savvy designers started building almost everything they had in the UI using auto-layout.Now, let that sink in for a second…In a universe with no gravitation, we are creating almost everything as a bunch of microuniverses with gravitation! Wouldn’t it be so much easier if the base default reality was the one with the gravitation, sort of auto layout by default!? Oh wait, that’s exactly how the web, iOS, and Android already work.So the trajectory of progress seems clear if you look at the last 10 years. Tools are trying to get designers closer and closer to systematic and flexible design rule-making.But…We are still before the biggest, most important leap forward.For the actual UI building (components and pages) — product designers will have to give up their beloved free-form canvas.As far as I can see it, designing and building digital products will have to abide by the constraints of the platform in which they are coded and tested. As a designer, I must have the full spectrum of tools to use flex, grid, padding, margin, percentages on every single measurement, viewport units, and many more. I need to be able to easily change the viewport and see everything that needs to be affected — be affected. Components should have a difference between states and properties because they are not the same. Their variants should be set in a rule-based fashion, not by specifying all my variants one by one. Instead of styles, Design Tokens should parametrize everything. Robust, multi-layered tokens with aliases and composite token types (like typography).The default of the tool has to help me make better decisions, not nicer or easier decisions. It has to keep me from veering too easily into a naive, chaotic, inconsistent mess of a system. A system that will be easy to create on a whim, but nightmarish to maintain. To get a sense of what we are actually doing when we’re designing for interactive digital experiences — read what Frank Chimero wrote in his essay ‘The Web’s Grain’. This part is about how hard it is to master the design for screens because they are:‘an edgeless surface of unknown proportions comprised of small, individual, and variable elements from multiple vantages assembled into a readable whole that documents a moment’.This is the grain of digital products, web, and elsewhere. So the design tools we use should help us actually interact with this ‘surface,’ not hide and abstract it away from us. It’s time we mature as designers. The quality of processes, the relationships with the developers, our products, and the well-being of our customers are all well worth the effort.The right tool will have to be built for a collaboration. A true collaboration, not a handoff. With developers, because complex products (which will be the vast majority) need them. There’s no avoiding that with dreams of magic AI fairy dust and no-code, no-dev narrow builders, empowering as they may seem.I hope disruption is well on its way. I’m working with my friends to build a tool I believe has these properties. It’s called Jux. Still very early days and a long way to go, but I think we’re on to something truly radical.Dive even deeper by reading these:Nathan Curtis’s great article about what should a spec for handoff includeBrad Frost’s article + demo for prototyping using Claude with real coded objects.To have a good sense of the real interactivity of most common components go through this list by Iain Bean. There’s a page for components and a page for some great design systems.Read Shamsi’s article laying out an argument against the handoff.Read Joe Alterio’s deep piece about tools and craft and how AI will affect it all.Great read from Vitaly Friedman of Smashing Magazine regarding ‘no handoff’Originally posted on the Jux blog here",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*GE4vWD3070W9L4pIDMPEDw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"df44\"\u003eDesigners use an unconstrained canvas tool to design for rule-based interactive systems, hoping the devs will perfect everything in production. This causes misalignment between designers and devs.\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@erezreznikov?source=post_page---byline--4c66e0fa6740--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Erez Reznikov\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*xAQ1gGumKbKEY10sLhSJyQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--4c66e0fa6740--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"c3b3\"\u003eThere are two persistent issues that keep plaguing the product design and development worlds. The first one is very much on the surface, and thus — no surprise — gets both a lot of attention and a plethora of sometimes reasonable solutions. The second one is much deeper, more subtle, and easier to miss.\u003c/p\u003e\u003ch2 id=\"5f52\"\u003eLet’s start with the first one — the handoff problem.\u003c/h2\u003e\u003cp id=\"de44\"\u003eThere are, in fact, several reasons why the handoff process is a major problem:\u003c/p\u003e\u003col\u003e\u003cli id=\"45cd\"\u003eFriction, and with it the potential for mistakes in a handoff, causes the actual coded products to differ from the designers’ intentions, as captured in their design tool. The only experience that matters is that of real users with the real-coded product. Not getting the designs perfectly reflected in the final product makes the process ineffective and demoralizing.\u003c/li\u003e\u003cli id=\"16ed\"\u003eHandoff wastes a lot of time for designers and developers. It takes a lot of mental effort to encode and decode all the relevant info for building the screens correctly. A designer must over-communicate with specs, examples, comments, and documentation, while a developer must inspect the designs with paranoid, detective-level vigilance, sometimes squinting to avoid missing anything.\u003c/li\u003e\u003cli id=\"246d\"\u003eHanding designs to developers to build from scratch creates a redundant, atrophied artifact. Once the code is live, it diverges from the source of truth, creating a never-ending race to ensure the design file and the ‘reality’ match. When that pairing is inevitably broken, a chain of mistrust builds. Developers see outdated designs and feel justified in ignoring parts that seem out of touch with ‘reality.’ As a result, designers become hyper-vigilant, hunting for mismatches between the design and the implementation. This occurs frequently when developers choose a library as the optimal solution for a component and do not properly match the specified styling.\u003c/li\u003e\u003cli id=\"ff4e\"\u003eThe need to hand designs over forces designers to waste time on things they usually don’t like or value that much. It’s not the peak of creativity to specify and document all the ways a text field should be able to render in the product. Especially knowing that this is not the actual thing being built, but only a disposable artifact. It forces front-end developers to focus on tasks of little joy or meaning as well. Recreating an already designed screen in code while chasing down designers to verify how things should reflow when the viewport gets smaller or larger is no fun either.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"6d94\"\u003eSince those problems are quite clear, the motivation for solving them was, and still is, high.\u003c/p\u003e\u003cp id=\"1f9f\"\u003eAnd so there were two general directions for solutions that the market allowed to evolve:\u003c/p\u003e\u003cp id=\"3d54\"\u003eOne was a path of helper apps to the most popular canvas design tools. It started with tools for easier inspection (\u003ca href=\"https://www.linkedin.com/company/avocode-inc-/?originalSubdomain=il\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAvocode\u003c/a\u003e, \u003ca href=\"https://zeplin.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eZeplin\u003c/a\u003e, \u003ca href=\"https://sympli.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSimpli\u003c/a\u003e, \u003ca href=\"https://www.abstract.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAbstract\u003c/a\u003e). Then, design tools added inspection features (like Dev Mode in Figma, Sketch, XD, and InVision). After that, specific tools appeared. These included \u003ca href=\"https://zeroheight.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eZeroheight\u003c/a\u003e and InVision’s DSM for easier documentation. Many plugins also emerged in the Sketch and Figma marketplaces, like Anima, Locofy, and other ‘Figma-to-HTML’ tools.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"0db0\"\u003eThe other path was entirely different in nature. It sought to eliminate the handoff altogether by creating a new breed of design tools that were able to ‘ship end-to-end’ by themselves with little to no help from developers. The most prominent and robust nowadays would be Webflow and Framer, but there is a whole slew of them, starting with Dreamweaver some 25 years ago.\u003c/p\u003e\u003cp id=\"37a7\"\u003eThe biggest issue with all these no-code / low-code tools was, and still is, that the way they’re built not only eliminates the handoff, but also the need for developers themselves. This, naturally, created a pretty low ceiling for the complexity of the products these tools can allow designers to build end-to-end. Primarily for this reason, the \u003ca href=\"https://eulerpool.com/en/stock/Wix.Com-Stock-IL0011301780/Marketcapitalization\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003emonetary success\u003c/a\u003e followed \u003ca href=\"https://www.thezerotoone.co/p/how-webflow-grows-gtm\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewebsite building tools\u003c/a\u003e, rather than native iOS / Android or web app building tools (at this stage I’m only aware of \u003ca href=\"https://createwithplay.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePlay\u003c/a\u003e for iOS and \u003ca href=\"https://draftbit.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDraftbit\u003c/a\u003e). The chief reason for this, as I can make sense of it, is that in apps the logical complexity exceeds the ability of the no-code tools to deliver. In the last few years, some vertical tools like \u003ca href=\"https://www.framer.com/solutions/figma-to-html/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFramer\u003c/a\u003e, \u003ca href=\"https://university.webflow.com/lesson/figma-to-webflow-plugin?topics=layout-design\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWebflow\u003c/a\u003e, \u003ca href=\"https://www.builder.io/m/design-to-code\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuilder.io\u003c/a\u003e started building ‘bridges’ as an import ability from canvas tools like Figma, using their own plugins.\u003c/p\u003e\u003cp id=\"7f57\"\u003eAnd so, the space of solutions for the handoff problem has a trade-off in the middle of its heart:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"768e\"\u003e\u003cem\u003eYou either have a generic canvas tool that allows you to design the most complex apps in the world, but the design is only an artifact and necessitates a handoff, or you have a specialized builder tool that frees you to design and develop by yourself, but it has a low ceiling of complexity for the product you want to create.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"927f\"\u003eAs far as I’m aware, there have only been two design/development tools that successfully incorporated a different, unifying strategy.\u003c/p\u003e\u003col\u003e\u003cli id=\"e1fa\"\u003eFlash (created by Macromedia, succeeded by Adobe, killed by Steve Jobs)\u003c/li\u003e\u003cli id=\"05e9\"\u003eBlend for Visual Studio using XAML and the WPF platform from Microsoft.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"0bd8\"\u003eFlash had ActionScript that allowed the same object to be freely designed by the designer and logically manipulated using ActionScript commands by the developer. This setup let all the relevant pros do their jobs. The designers focused on what was important, both experientially and visually. They didn’t need to hand off anything to developers, since they could just target the existing assets created by the designers. No throwaway artifacts, no handoff, and no limit to the complexity. Flash didn’t try to code for you. It allowed developers to pick up where designers maxed out their comfort zone.\u003c/p\u003e\u003cp id=\"344e\"\u003eBlend for Visual Studio had a similar story, but with different files, structures, and logic. It was a twin-environment setup. The designers could design, and the Visual Studio developers could target the exact same assets. Again, no handoff, no throwaway artifacts, and no limits on complexity.\u003c/p\u003e\u003cp id=\"a296\"\u003eAs we all know, Flash died because of security and performance incompatibility with the iPhone. Blend and Visual Studio are now niche, unpopular tools. In all the surveys of tool usage in the last 7 years, I haven’t seen a single mention of them. Meanwhile, \u003ca href=\"https://uxtools.co/survey/2023/ui-design/#ui-design-tools-graph\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFigma has taken almost all the product design market share\u003c/a\u003e).\u003c/p\u003e\u003cp id=\"b6d8\"\u003eThis has to lead us to the conclusion that the tools with the best approach are still not immune to failing for all sorts of other reasons. Business is a fickle and unpredictable game, indeed.\u003c/p\u003e\u003cp id=\"1c73\"\u003eNow, as I’ve stated at the beginning, there are two persistent issues that keep plaguing the product design and development worlds. Let’s explore the more hidden, but an even more important issue:\u003c/p\u003e\u003ch2 id=\"7aa5\"\u003eNaive canvas-based tools hide the vast spectrum of design properties from designers.\u003c/h2\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"0531\"\u003eThe ramifications of this problem are large. But it’s not a malicious plot to keep designers blissfully ignorant — it’s the bad side of a tradeoff that designers used to only look at its good side. Freedom. And boy, do designers love their freedom. I know I do.\u003c/p\u003e\u003cp id=\"5e70\"\u003eIt is important to realize how we got to where we are with the canvas tools that have become so ubiquitous in the industry.\u003c/p\u003e\u003cp id=\"aff3\"\u003eWe started with a physical page. Paper, ink, and colors manipulated to perfection by graphic designers. The page was static, concrete, well-defined, and never changing. Then graphic programs arrived to help speed things up — Photoshop, Freehand, Corel Draw, Illustrator (and many more after those). All helped us design printed and mostly static web assets. Then, something important happened. Computers began to diverge in screen sizes. The internet and native apps had to adapt. They introduced responsive units and rules. It all escalated even more after the introduction of the iPhone and tablets. But the designers, graphic and early-interactive designers that is, were hooked on the page metaphor. Naturally, the revenue-powered design tools kept giving them exactly that. The ease of direct manipulation (first with a mouse and keyboard, then with finger gestures and a stylus) was too comfortable to give up for other benefits. This led to a mismatch where designers were encouraged by the tools to have freedom, while the demand now was for responsive, systematic, smart, parametric design rules — for developers to implement.\u003c/p\u003e\u003cp id=\"1928\"\u003eAnd this is where the great divide becomes clear because:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"b4b2\"\u003e\u003cem\u003eThe set of tools and abilities that maximize intuitive, freeform graphic manipulation is exactly the opposite of the set of tools that help define coherent, robust, flexible, and parametric systems.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"a0c0\"\u003eThink about the very basic nature of ‘gravitation’: in all the main canvas tools up until the introduction of Figma’s auto-layout a few years ago, the freedom meant that there was no gravitational pull either upwards or downwards. Very much unlike both the web and the native iOS and Android environments.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"3dad\"\u003eWhen you have no gravitation, the default mode of everything is to be absolutely positioned in gradual z-index order, one on top of the other. Nothing pushes anything else. Nothing interacts. Paddings and margins don’t mean anything. Text doesn’t make boxes get larger when more words are typed in. Since there’s no viewport, no viewport-related measurements can be used; even percentages are almost never used. So almost nothing is relative.\u003c/p\u003e\u003cp id=\"5c3b\"\u003eSlowly, UI-friendly tools started appearing. Sketch opened the door for both XD and Figma. It did this by using components, overrides, a generic mapping of frame = div, and more visual qualities that can be parameterized (colors, typography, effects, and layout grids in Figma). It was a breath of fresh air, but the challenges rose in tandem with the tools.\u003c/p\u003e\u003cp id=\"1982\"\u003eThe most technical designers felt the pressure to start experimenting with code by themselves. This gave them superpowers because it informed their otherwise naive stance about how the real world of UI programming works. A push towards getting more robust tools was felt, and the leading tools (Sketch, Figma, and XD) introduced Auto Layout, which was a slightly capped but friendly version of Flexbox. It was like having a mini-universe with DOM-like gravity inside a capsuled ‘auto-layout-enabled frame,’ inside a universe of a do-whatever-you-like canvas.\u003c/p\u003e\u003cp id=\"6f74\"\u003eThis was revolutionary. Designers began to consider how content affects container sizes. Layout reflow became more robust, and finally, padding mattered.\u003c/p\u003e\u003cp id=\"e797\"\u003eSavvy designers started building almost everything they had in the UI using auto-layout.\u003c/p\u003e\u003ch2 id=\"0f47\"\u003eNow, let that sink in for a second…\u003c/h2\u003e\u003cp id=\"48c7\"\u003eIn a universe with no gravitation, we are creating almost everything as a bunch of microuniverses with gravitation! Wouldn’t it be so much easier if the base default reality was the one with the gravitation, sort of auto layout by default!? Oh wait, that’s exactly how the web, iOS, and Android already work.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"62e3\"\u003eSo the trajectory of progress seems clear if you look at the last 10 years. Tools are trying to get designers closer and closer to systematic and flexible design rule-making.\u003c/p\u003e\u003cp id=\"e825\"\u003eBut…\u003c/p\u003e\u003cp id=\"4506\"\u003eWe are still before the biggest, most important leap forward.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"e2d7\"\u003e\u003cem\u003eFor the actual UI building (components and pages) — product designers will have to give up their beloved free-form canvas.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"ee59\"\u003eAs far as I can see it, designing and building digital products will have to abide by the constraints of the platform in which they are coded and tested. As a designer, I must have the full spectrum of tools to use flex, grid, padding, margin, percentages on every single measurement, viewport units, and many more. I need to be able to easily change the viewport and see everything that needs to be affected — be affected. Components should have a difference between states and properties because they are not the same. Their variants should be set in a rule-based fashion, not by specifying all my variants one by one. Instead of styles, Design Tokens should parametrize everything. Robust, multi-layered tokens with aliases and composite token types (like typography).\u003c/p\u003e\u003cp id=\"7122\"\u003eThe default of the tool has to help me make \u003cem\u003ebetter\u003c/em\u003e decisions, not \u003cem\u003enicer\u003c/em\u003e or \u003cem\u003eeasier\u003c/em\u003e decisions. It has to keep me from veering too easily into a naive, chaotic, inconsistent mess of a system. A system that will be easy to create on a whim, but nightmarish to maintain. To get a sense of what we are actually doing when we’re designing for interactive digital experiences — read what Frank Chimero wrote in his essay \u003ca href=\"https://frankchimero.com/blog/2015/the-webs-grain/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e‘The Web’s Grain’\u003c/a\u003e. This part is about how hard it is to master the design for screens because they are:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"ee24\"\u003e\u003cem\u003e‘an edgeless surface of unknown proportions comprised of small, individual, and variable elements from multiple vantages assembled into a readable whole that documents a moment’.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"6c47\"\u003eThis is the grain of digital products, web, and elsewhere. So the design tools we use should help us actually interact with this ‘surface,’ not hide and abstract it away from us. It’s time we mature as designers. The quality of processes, the relationships with the developers, our products, and the well-being of our customers are all well worth the effort.\u003c/p\u003e\u003cp id=\"5f7f\"\u003eThe right tool will have to be built for a collaboration. A true collaboration, not a handoff. With developers, because complex products (which will be the vast majority) need them. There’s no avoiding that with dreams of magic AI fairy dust and no-code, no-dev narrow builders, empowering as they may seem.\u003c/p\u003e\u003cp id=\"bdf8\"\u003eI hope disruption is well on its way. I’m working with my friends to build a tool I believe has these properties. It’s called \u003ca href=\"http://jux.io\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJux\u003c/a\u003e. Still very early days and a long way to go, but I think we’re on to something truly radical.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b335\"\u003eDive even deeper by reading these:\u003c/p\u003e\u003col\u003e\u003cli id=\"a3c4\"\u003eNathan Curtis’s \u003ca href=\"https://medium.com/eightshapes-llc/component-specifications-1492ca4c94c\" rel=\"noopener\"\u003egreat article\u003c/a\u003e about what should a spec for handoff include\u003c/li\u003e\u003cli id=\"61f1\"\u003eBrad Frost’s \u003ca href=\"https://bradfrost.com/blog/post/the-already-here-future-of-prototyping/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003earticle + demo\u003c/a\u003e for prototyping using Claude with real coded objects.\u003c/li\u003e\u003cli id=\"28f0\"\u003eTo have a good sense of the real interactivity of most common components go through this \u003ca href=\"https://component.gallery/components/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elist by Iain Bean.\u003c/a\u003e There’s a page for components and a page for some great design systems.\u003c/li\u003e\u003cli id=\"7fbb\"\u003eRead Shamsi’s \u003ca href=\"https://nohandoff.org/no-handoff-between-product-and-engineering/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003earticle\u003c/a\u003e laying out an argument against the handoff.\u003c/li\u003e\u003cli id=\"ee56\"\u003eRead Joe Alterio’s \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/the-death-of-craft-feec4cc5eb58\"\u003edeep piece\u003c/a\u003e about tools and craft and how AI will affect it all.\u003c/li\u003e\u003cli id=\"20ad\"\u003e\u003ca href=\"https://www.smashingmagazine.com/2023/03/best-handoff-is-no-handoff/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGreat read\u003c/a\u003e from Vitaly Friedman of Smashing Magazine regarding ‘no handoff’\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d852\"\u003eOriginally posted on the Jux blog \u003ca href=\"https://www.jux.io/blog/the-root-causes-for-the-dev-design-mismatch\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2024-11-17T19:20:25.95Z",
  "modifiedTime": null
}
