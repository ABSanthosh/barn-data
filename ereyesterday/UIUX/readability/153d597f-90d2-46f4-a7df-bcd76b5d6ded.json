{
  "id": "153d597f-90d2-46f4-a7df-bcd76b5d6ded",
  "title": "Smashing Animations Part 3: SMIL’s Not Dead Baby, SMIL’s Not Dead",
  "link": "https://smashingmagazine.com/2025/05/smashing-animations-part-3-smil-not-dead/",
  "description": "While there are plenty of ways that CSS animations can bring designs to life, adding simple SMIL (Synchronized Multimedia Integration Language) animations in SVG can help them do much more. Andy Clarke explains where SMIL animations in SVG take over where CSS leaves off.",
  "author": "Andy Clarke",
  "published": "Wed, 21 May 2025 08:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 18974,
  "excerpt": "While there are plenty of ways that CSS animations can bring designs to life, adding simple SMIL (Synchronized Multimedia Integration Language) animations in SVG can help them do much more. Andy Clarke explains where SMIL animations in SVG take over where CSS leaves off.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "14 min readSVG, Animation, DesignWhile there are plenty of ways that CSS animations can bring designs to life, adding simple SMIL (Synchronized Multimedia Integration Language) animations in SVG can help them do much more. Andy Clarke explains where SMIL animations in SVG take over where CSS leaves off.The SMIL specification was introduced by the W3C in 1998 for synchronizing multimedia. This was long before CSS animations or JavaScript-based animation libraries were available. It was built into SVG 1.1, which is why we can still use it there today.Now, you might’ve heard that SMIL is dead. However, it’s alive and well since Google reversed a decision to deprecate the technology almost a decade ago. It remains a terrific choice for designers and developers who want simple, semantic ways to add animations to their designs.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)Tip: There’s now a website where you can see all my Toon Titles.Smashing Animations Part 1: How Classic Cartoons Inspire Modern CSSSmashing Animations Part 2: How CSS Masking Can Add An Extra DimensionIntroducing Mike WorthI’ve recently been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a bold, retro-style design that showcases his work. I used animations throughout to delight and surprise his audience as they move through his website.Design by Andy Clarke, Stuff \u0026 Nonsense. Mike Worth’s website will launch in June 2025, but you can see examples from this article on CodePen. (Large preview)Mike loves ’90s animation — especially Disney’s Duck Tales. Unsurprisingly, my taste in cartoons stretches back a little further to Hanna-Barbera shows like Dastardly and Muttley in Their Flying Machines, Scooby-Doo, The Perils of Penelope Pitstop, Wacky Races, and, of course, The Yogi Bear Show. So, to explain how this era of animation relates to SVG, I’ll be adding SMIL animations in SVG to title cards from some classic Yogi Bear cartoons.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)Fundamentally, animation changes how an element looks and where it appears over time using a few basic techniques. That might be simply shifting an element up or down, left or right, to create the appearance of motion, like Yogi Bear moving across the screen.Yogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (Large preview)Rotating objects around a fixed point can create everything, from simple spinning effects to natural-looking movements of totally normal things, like a bear under a parachute falling from the sky.Yogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (Large preview)Scaling makes an element grow, shrink, or stretch, which can add drama, create perspective, or simulate depth.Yogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (Large preview)Changing colour and transitioning opacity can add atmosphere, create a mood, and enhance visual storytelling. Just these basic principles can create animations that attract attention and improve someone’s experience using a design.These results are all achievable using CSS animations, but some SVG properties can’t be animated using CSS. Luckily, we can do more — and have much more fun — using SMIL animations in SVG. We can combine complex animations, move objects along paths, and control when they start, stop, and everything in between.Animations can be embedded within any SVG element, including primitive shapes like circles, ellipses, and rectangles. They can also be encapsulated into groups, paths, and polygons:\u003ccircle ...\u003e \u003canimate\u003e...\u003c/animate\u003e \u003c/circle\u003e Animations can also be defined outside an element, elsewhere in an SVG, and connected to it using an xlink attribute:\u003cg id=\"yogi\"\u003e...\u003c/g\u003e ... \u003canimate xlink:href=\"#yogi\"\u003e…\u003c/animate\u003e Building An Animation\u003canimate\u003e is just one of several animation elements in SVG. Together with an attributeName value, it enables animations based on one or more of an element’s attributes.Most animation explanations start by moving a primitive shape, like this exciting circle:\u003ccircle r=\"50\" cx=\"50\" cy=\"50\" fill=\"#062326\" opacity=\"1\" /\u003e Using this attributeName property, I can define which of this circle’s attributes I want to animate, which, in this example, is its cx (x-axis center point) position:\u003ccircle ... \u003e \u003canimate attributename=\"cx\"\u003e\u003c/animate\u003e \u003c/circle\u003e On its own, this does precisely nothing until I define three more values. The from keyword specifies the circle’s initial position, to, its final position, and the dur-ation between those two positions:\u003ccircle ... \u003e \u003canimate attributename=\"cx\" from=\"50\" to=\"500\" dur=\"1s\"\u003e \u003c/animate\u003e \u003c/circle\u003e If I want more precise control, I can replace from and to with a set of values separated by semicolons:\u003ccircle ... \u003e \u003canimate attributename=\"cx\" values=\"50; 250; 500; 250;\" dur=\"1s\"\u003e \u003c/animate\u003e \u003c/circle\u003e Finally, I can define how many times the animation repeats (repeatcount) and even after what period that repeating should stop (repeatdur):\u003ccircle ... \u003e \u003canimate attributename=\"cx\" values=\"50; 250; 500; 250;\" dur=\"1s\" repeatcount=\"indefinite\" repeatdur=\"180s\"\u003e \u003c/circle\u003e Most SVG elements have attributes that can be animated. This title card from 1959’s “Brainy Bear” episode shows Yogi in a crazy scientist‘s brain experiment. Yogi’s head is under the dome, and energy radiates around him.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)To create the buzz around Yogi, my SVG includes three path elements, each with opacity, stroke, and stroke-width attributes, which can all be animated:\u003cpath opacity=\"1\" stroke=\"#fff\" stroke-width=\"5\" ... /\u003e I animated each path’s opacity, changing its value from 1 to .5 and back again:\u003cpath opacity=\"1\" ... \u003e \u003canimate attributename=\"opacity\" values=\"1; .25; 1;\" dur=\"1s\" repeatcount=\"indefinite\"\u003e \u003c/animate\u003e \u003c/path\u003e Then, to radiate energy from Yogi, I specified when each animation should begin, using a different value for each path:\u003cpath ... \u003e \u003canimate begin=\"0\" … \u003e \u003c/path\u003e \u003cpath ... \u003e \u003canimate begin=\".5s\" … \u003e \u003c/path\u003e \u003cpath ... \u003e \u003canimate begin=\"1s\" … \u003e \u003c/path\u003e I’ll explain more about the begin property and how to start animations after this short commercial break.Try this yourself:See the Pen [Brainy Bear SVG animation [forked]](https://codepen.io/smashingmag/pen/qEEzYgG) by Andy Clarke.See the Pen Brainy Bear SVG animation [forked] by Andy Clarke.To make animations appear more natural, I can apply more than one animate element and give each one a different attributename value. Those paths also contain a stroke-width attribute, which I can also animate by changing the stroke widths between 5 and 7:\u003cpath ... \u003e \u003canimate attributename=\"opacity\" ... \u003e\u003c/animate\u003e \u003canimate attributename=\"stroke-width\" ... \u003e\u003c/animate\u003e \u003c/path\u003e Finally, I can animate the dome over Yogi’s head, changing its fill colour between two values over five seconds to create the impression that the crazy scientist’s machine is heating up:\u003cpath fill=\"#50D9E0\" ... \u003e \u003canimate attributename=\"fill\" values=\"#50D9E0; #E18C50;\" dur=\"5s\" begin=\"2s\" \u003e \u003c/path\u003e Implement that code, and you’ll soon notice that the dome returns to its original state after the animation is complete. To retain its colour at the end of the animation, I can add the — confusingly named — fill property and a value of freeze. This stops the animation in its final state and prevents it from returning to the original colour:\u003cpath fill=\"#50D9E0\" ... \u003e \u003canimate fill=\"freeze\"\u003e \u003c/path\u003e Animating attributes brings these title card designs to life, whether by adjusting the position of a primitive shape, its opacity, and stroke width or by creating complex sequences with staggered timing. But there’s still more I can do, starting with the next animation element, animateTransform.animateTransformIf \u003canimate\u003e controls attributes, then animateTransform animates transformations, including rotations, scaling, skewing, and translations. It works by changing the values of a transform property, like this translate:\u003cpath transform=\"translate(0,0)\"/\u003e Then, the animation works the same way as \u003canimate\u003e, adding an attributename and specifying the type of transform, in this example, rotate:\u003canimatetransform attributename=\"transform\" type=\"rotate\"\u003e \u003c/animatetransform\u003e I can use either from and to or the values attribute to define how an element is transformed.Scale uses x and y values (.5, 1).Rotate uses degrees (0–360) plus optional x and y (360, 0, 0).Translate also uses x and y values (50, 100).Skew uses x and y values, too (50, 100).What’s interesting about those values is that they can be added to an element’s existing values instead of replacing them. For example, when an attribute contains a translate value of 100, 0:\u003cpath transform=\"translate(100, 0)\"/\u003e And then I animate that translation horizontally by 100:\u003canimatetransform attributename=\"transform\" type=\"translate\" from=\"0, 0\" to=\"100, 0\" additive=\"sum\"\u003e \u003c/animatetransform\u003e Using the additive property with a value of sum, the animation values are relative to the original, starting the animation at 100 and ending at 200 by adding 100 to 100.Similarly, if I give the accumulate property a value of sum, each instance of animation will build on the last. So, in an animation where an element is translated by 100 and repeats five times, each movement will be cumulative, moving the element by 500:\u003canimatetransform attributename=\"transform\" type=\"translate\" from=\"0, 0\" to=\"100, 0\" additive=\"sum\" accumulate=\"sum\" /\u003e This title card from 1958’s Yogi Bear’s “Big Break” episode shows Yogi floating from the sky under a parachute.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)I needed two types of transform animations to generate the effect of Yogi drifting gently downwards: translate, and rotate. I first added an animatetransform element to the group, which contains Yogi and his chute. I defined his initial vertical position — 1200 off the top of the viewBox — then translated his descent to 1000 over a 15-second duration:\u003cg transform=\"translate(1200, -1200)\"\u003e ... \u003canimateTransform attributeName=\"transform\" type=\"translate\" values=\"500,-1200; 500,1000\" dur=\"15s\" repeatCount=\"1\" /\u003e \u003c/g\u003e Yogi appears to fall from the sky, but the movement looks unrealistic. So, I added a second animatetransform element, this time with an indefinitely repeating +/- 5-degree rotation to swing Yogi from side to side during his descent:\u003canimateTransform attributeName=\"transform\" type=\"rotate\" values=\"-5; 5; -5\" dur=\"14s\" repeatCount=\"indefinite\" additive=\"sum\" /\u003e Try this yourself:See the Pen [Big Break SVG animation [forked]](https://codepen.io/smashingmag/pen/PwwraNm) by Andy Clarke.See the Pen Big Break SVG animation [forked] by Andy Clarke.Starting And StoppingSo far, every animation begins as soon as the page has loaded. But there are ways to not only delay the start of animation but define precisely where it begins, using the begin property:In this title card from 1959’s “Robin Hood Yogi”, Yogi shoots an arrow into an apple on Boo-Boo’s head.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)By default, the arrow is set loose when the page loads. Blink, and you might miss it. To build some anticipation, I can begin the animation two seconds later:\u003canimatetransform attributename=\"transform\" type=\"translate\" from=\"0 0\" to=\"750 0\" dur=\".25s\" begin=\"2s\" fill=\"freeze\" /\u003e Or, I can let the viewer take the shot when they click the arrow:\u003canimatetransform ... begin=\"click\" /\u003e And I can combine the click event and a delay, all with no JavaScript, just a smattering of SMIL:\u003canimatetransform ... begin=\"click + .5s\" /\u003e Try this yourself by clicking the arrow:See the Pen [Robin Hood Yogi CSS animation [forked]](https://codepen.io/smashingmag/pen/OPPeERj) by Andy Clarke.See the Pen Robin Hood Yogi CSS animation [forked] by Andy Clarke.Synchronising AnimationsIn his 1958 “Pie-Pirates” episode, Yogi Bear tries to steal a pie and has to outwit a bulldog. The title card — designed by Lawrence Goble — shows the chase but, alas, (spoiler alert) no stolen pie.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)To bring this title card to life, I needed two groups of paths: one for Yogi and the other for the dog. I translated them both off the left edge of the viewBox:\u003cg class=\"dog\" transform=\"translate(-1000, 0)\"\u003e ... \u003c/g\u003e \u003cg class=\"yogi\" transform=\"translate(-1000, 0)\"\u003e ... \u003c/g\u003e Then, I applied an animatetransform element to both groups, which moves them back into view:\u003c!-- yogi --\u003e \u003canimateTransform attributeName=\"transform\" type=\"translate\" from=\"-1000,0\" to=\"0,0\" dur=\"2s\" fill=\"freeze\" /\u003e \u003c!-- dog --\u003e \u003canimateTransform attributeName=\"transform\" type=\"translate\" from=\"-1000,0\" to=\"0,0\" dur=\".5s\" fill=\"freeze\" /\u003e This sets up the action, but the effect feels flat, so I added another pair of animations that bounce both characters:\u003c!-- yogi --\u003e \u003canimateTransform attributeName=\"transform\" type=\"rotate\" values=\"-1,0,450; 1,0,450; -1,0,450\" dur=\".25s\" repeatCount=\"indefinite\" /\u003e \u003c!-- dog --\u003e \u003canimateTransform attributeName=\"transform\" type=\"rotate\" values=\"-1,0,450; 1,0,450; -1,0,450\" dur=\"0.5s\" repeatCount=\"indefinite\" /\u003e Animations can begin when a page loads, after a specified time, or when clicked. And by naming them, they can also synchronise with other animations.I wanted Yogi to enter the frame first to build anticipation, with a short pause before other animations begin, synchronising to the moment he’s arrived. First, I added an ID to Yogi’s translate animation:\u003canimateTransform id=\"yogi\" type=\"translate\" ... /\u003e Watch out: For a reason, I can’t, for the life of me, explain why Firefox won’t begin animations with an ID when the ID contains a hyphen. This isn’t smarter than the average browser, but replacing hyphens with underscores fixes the problem.Then, I applied a begin to his rotate animation, which starts playing a half-second after the #yogi animation ends:\u003canimateTransform type=\"rotate\" begin=\"yogi.end + .5s\" ... /\u003e I can build sophisticated sets of synchronised animations using the begin property and whether a named animation begins or ends. The bulldog chasing Yogi enters the frame two seconds after Yogi begins his entrance:\u003canimateTransform id=\"dog\" type=\"translate\" begin=\"yogi.begin + 2s\" fill=\"freeze\" ... /\u003e One second after the dog has caught up with Yogi, a rotate transformation makes him bounce, too:\u003canimateTransform type=\"rotate\" ... begin=\"dog.begin + 1s\" repeatCount=\"indefinite\" /\u003e The background rectangles whizzing past are also synchronised, this time to one second before the bulldog ends his run:\u003crect ...\u003e \u003canimateTransform begin=\"dog.end + -1s\" /\u003e \u003c/rect\u003e Try this yourself:See the Pen [Pie-Pirates SVG animation [forked]](https://codepen.io/smashingmag/pen/LEEKryp) by Andy Clarke.See the Pen Pie-Pirates SVG animation [forked] by Andy Clarke.The timing of this background movement is synchronised with the dog arriving, which, in turn, is relative to Yogi’s arrival, building a sequence of animations that all feel connected.Animating Along Motion PathsUntil now, all the animations in these title cards have been up, down, left, right, or one combination or another. But there’s one more aspect of SMIL in SVG, which can add an extra dimension to animations: animating along motion paths using the animatemotion element.animatemotion accepts all the same properties and values as animate and animateTransform, but adds a few more for finer control over direction and timing. animatemotion uses the path property to enable elements to move along a motion path. It also uses the d value for coordinate data in the same way as any conventional path.The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)In “The Runaway Bear” from 1959, Yogi must avoid a hunter turning his head into a trophy. I wanted Yogi to leap in and out of the screen by making him follow a path. I also wanted to vary the speed of his dash: speeding up as he enters and exits, and slowing down as he passes the title text.I first added a path property, using its coordinate data to give Yogi a route to follow, and specified a two-second duration for my animation:\u003cg\u003e \u003canimateMotion dur=\"2s\" path=\"...\" \u003e \u003c/animateMotion\u003e \u003c/g\u003e Alternatively, I could add a path element, leave it visible, or prevent it from being rendered by placing it inside a defs element:\u003cdefs\u003e \u003cpath id=\"yogi\" d=\"...\" /\u003e \u003c/defs\u003e I can then reference that by using a mpath element inside my animateMotion:\u003canimateMotion ... \u003cmpath href=\"#yogi\" /\u003e \u003c/animateMotion\u003e I experimented with several paths before settling on the one that delivered the movement shape I was looking for:Yogi Bear title card design by Lawrence Goble (1959.) Author’s recreation. (Large preview)One was too bouncy, one was too flat, but the third motion path was just right. Almost, as I also wanted to vary the speed of Yogi’s dash: speeding him up as he enters and exits and slowing him down as he passes the title text.The keyPoints property enabled me to specify points along the motion path and then adjust the duration Yogi spends between them. To keep things simple, I defined five points between 0 and 1:\u003canimateMotion ... keyPoints=\"0; .35; .5; .65; 1;\" \u003e \u003c/animateMotion\u003e Then I added the same number of keyTimes values, separated by semicolons, to control the pacing of this animation:\u003canimateMotion ... keyTimes=\"0; .1; .5; .95; 1;\" \u003e \u003c/animateMotion\u003e Now, Yogi rushes through the first three keyPoints, slows down as he passes the title text, then speeds up again as he exits the viewBox.Try this yourself:See the Pen [Runaway Bear SVG animation [forked]](https://codepen.io/smashingmag/pen/oggryox) by Andy Clarke.See the Pen Runaway Bear SVG animation [forked] by Andy Clarke.With their ability to control transformations, animate complex motion paths, and synchronise multiple animations, SMIL animations in SVG are still powerful tools. They can bring design to life without needing a framework or relying on JavaScript. It’s compact, which makes it great for small SVG effects.SMIL includes the begin attribute, which makes chaining animations far more intuitive than with CSS. Plus, SMIL lives inside the SVG file, making it perfect for animations that travel with an asset. So, while SMIL is not modern by today’s standards and may be a little bit niche, it can still be magical.Don’t let the misconception that SMIL is “dead” stop you from using this fantastic tool.Google reversed its decision to deprecate SMIL almost a decade ago, so it remains a terrific choice for designers and developers who want simple, semantic ways to add animations to their designs. (yk)",
  "image": "https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/smashing-animations-part-3-smil-not-dead.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e14 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/svg\"\u003eSVG\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/animation\"\u003eAnimation\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eWhile there are plenty of ways that CSS animations can bring designs to life, adding simple SMIL (Synchronized Multimedia Integration Language) animations in SVG can help them do much more. Andy Clarke explains where SMIL animations in SVG take over where CSS leaves off.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eThe SMIL specification was introduced by the W3C in 1998 for synchronizing multimedia. This was long before CSS animations or JavaScript-based animation libraries were available. It was built into SVG 1.1, which is why we can still use it there today.\u003c/p\u003e\u003cp\u003eNow, you might’ve heard that \u003ca href=\"https://css-tricks.com/smil-is-dead-long-live-smil-a-guide-to-alternatives-to-smil-features\"\u003eSMIL is dead\u003c/a\u003e. However, it’s alive and well since Google reversed a decision to deprecate the technology almost a decade ago. It remains a terrific choice for designers and developers who want simple, semantic ways to add animations to their designs.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/1-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003cstrong\u003eTip\u003c/strong\u003e: \u003cem\u003eThere’s now a website where you can see all my \u003ca href=\"https://stuffandnonsense.co.uk/toon-titles\"\u003eToon Titles\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\u003cdiv\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-1-classic-cartoons-inspire-css/\"\u003eSmashing Animations Part 1: How Classic Cartoons Inspire Modern CSS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-2-css-masking-add-extra-dimension/\"\u003eSmashing Animations Part 2: How CSS Masking Can Add An Extra Dimension\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003ch2 id=\"introducing-mike-worth\"\u003eIntroducing Mike Worth\u003c/h2\u003e\u003cp\u003eI’ve recently been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a bold, retro-style design that showcases his work. I used animations throughout to delight and surprise his audience as they move through his website.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"550\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png\" sizes=\"100vw\" alt=\"Illustrations from Mike Worth’s website\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eDesign by \u003ca href=\"https://stuffandnonsense.co.uk/\"\u003eAndy Clarke, Stuff \u0026amp; Nonsense\u003c/a\u003e. Mike Worth’s website will launch in June 2025, but you can see \u003ca href=\"https://codepen.io/collection/YwMKPb\"\u003eexamples from this article on CodePen\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/2-mike-worth-website.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eMike loves ’90s animation — especially \u003ca href=\"https://en.wikipedia.org/wiki/DuckTales_(1987_TV_series)\"\u003eDisney’s\u003c/a\u003e \u003ca href=\"https://en.wikipedia.org/wiki/DuckTales_(1987_TV_series)\"\u003e\u003cem\u003eDuck Tales\u003c/em\u003e\u003c/a\u003e. Unsurprisingly, my taste in cartoons stretches back a little further to \u003ca href=\"https://en.wikipedia.org/wiki/Hanna-Barbera\"\u003eHanna-Barbera\u003c/a\u003e shows like Dastardly and Muttley in \u003cem\u003eTheir Flying Machines\u003c/em\u003e, \u003cem\u003eScooby-Doo\u003c/em\u003e, \u003cem\u003eThe Perils of Penelope Pitstop\u003c/em\u003e, \u003cem\u003eWacky Races\u003c/em\u003e, and, of course, \u003ca href=\"https://en.wikipedia.org/wiki/Yogi_Bear\"\u003e\u003cem\u003eThe Yogi Bear Show\u003c/em\u003e\u003c/a\u003e. So, to explain how this era of animation relates to SVG, I’ll be adding SMIL animations in SVG to title cards from some classic Yogi Bear cartoons.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"300\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustrations\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/3-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFundamentally, animation changes how an element looks and where it appears over time using a few basic techniques. That might be simply shifting an element up or down, left or right, to create the appearance of motion, like Yogi Bear moving across the screen.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png\" sizes=\"100vw\" alt=\"Yogi Bear title card design recreated by Andy Clarke\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/4-yogi-bear-title-card.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eRotating objects around a fixed point can create everything, from simple spinning effects to natural-looking movements of totally normal things, like a bear under a parachute falling from the sky.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png\" sizes=\"100vw\" alt=\"Yogi Bear title card recreated by Andy Clarke\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/5-yogi-bear-title-card-design.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eScaling makes an element grow, shrink, or stretch, which can add drama, create perspective, or simulate depth.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png\" sizes=\"100vw\" alt=\"Yogi Bear title card recreated by Andy Clarke\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1958). Author’s recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/6-yogi-bear-title-card.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eChanging colour and transitioning opacity can add atmosphere, create a mood, and enhance visual storytelling. Just these basic principles can create animations that attract attention and improve someone’s experience using a design.\u003c/p\u003e\u003cp\u003eThese results are all achievable using CSS animations, but some SVG properties can’t be animated using CSS. Luckily, we can do more — and have much more fun — using SMIL animations in SVG. We can combine complex animations, move objects along paths, and control when they start, stop, and everything in between.\u003c/p\u003e\u003cp\u003eAnimations can be embedded within any SVG element, including \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorials/SVG_from_scratch/Basic_shapes\"\u003eprimitive shapes\u003c/a\u003e like circles, ellipses, and rectangles. They can also be encapsulated into groups, paths, and polygons:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle ...\u0026gt;\n  \u0026lt;animate\u0026gt;...\u0026lt;/animate\u0026gt;\n\u0026lt;/circle\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnimations can also be defined outside an element, elsewhere in an SVG, and connected to it using an \u003ccode\u003exlink\u003c/code\u003e attribute:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;yogi\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt;\n  ...\n\u0026lt;animate xlink:href=\u0026#34;#yogi\u0026#34;\u0026gt;…\u0026lt;/animate\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"building-an-animation\"\u003eBuilding An Animation\u003c/h2\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;animate\u0026gt;\u003c/code\u003e is just one of several animation elements in SVG. Together with an \u003ccode\u003eattributeName\u003c/code\u003e value, it enables animations based on one or more of an element’s attributes.\u003c/p\u003e\u003cp\u003eMost animation explanations start by moving a primitive shape, like this exciting circle:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle\n  r=\u0026#34;50\u0026#34;\n  cx=\u0026#34;50\u0026#34; \n  cy=\u0026#34;50\u0026#34; \n  fill=\u0026#34;#062326\u0026#34; \n  opacity=\u0026#34;1\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing this \u003ccode\u003eattributeName\u003c/code\u003e property, I can define which of this circle’s attributes I want to animate, which, in this example, is its \u003ccode\u003ecx\u003c/code\u003e (x-axis center point) position:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle ... \u0026gt;\n  \u0026lt;animate attributename=\u0026#34;cx\u0026#34;\u0026gt;\u0026lt;/animate\u0026gt;\n\u0026lt;/circle\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOn its own, this does precisely nothing until I define three more values. The \u003ccode\u003efrom\u003c/code\u003e keyword specifies the circle’s initial position, \u003ccode\u003eto\u003c/code\u003e, its final position, and the \u003ccode\u003edur\u003c/code\u003e-ation between those two positions:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle ... \u0026gt;\n  \u0026lt;animate \n  attributename=\u0026#34;cx\u0026#34;\n  from=\u0026#34;50\u0026#34; \n  to=\u0026#34;500\u0026#34;\n  dur=\u0026#34;1s\u0026#34;\u0026gt;\n  \u0026lt;/animate\u0026gt;\n\u0026lt;/circle\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf I want more precise control, I can replace \u003ccode\u003efrom\u003c/code\u003e and \u003ccode\u003eto\u003c/code\u003e with a set of \u003ccode\u003evalues\u003c/code\u003e separated by semicolons:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle ... \u0026gt;\n  \u0026lt;animate \n  attributename=\u0026#34;cx\u0026#34;\n  values=\u0026#34;50; 250; 500; 250;\u0026#34;\n  dur=\u0026#34;1s\u0026#34;\u0026gt;\n  \u0026lt;/animate\u0026gt;\n\u0026lt;/circle\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, I can define how many times the animation repeats (\u003ccode\u003erepeatcount\u003c/code\u003e) and even after what period that repeating should stop (\u003ccode\u003erepeatdur\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;circle ... \u0026gt;\n  \u0026lt;animate \n  attributename=\u0026#34;cx\u0026#34;\n  values=\u0026#34;50; 250; 500; 250;\u0026#34;\n  dur=\u0026#34;1s\u0026#34;\n  repeatcount=\u0026#34;indefinite\u0026#34;\n  repeatdur=\u0026#34;180s\u0026#34;\u0026gt;\n\u0026lt;/circle\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMost SVG elements have attributes that can be animated. This title card from 1959’s \u003ca href=\"https://yogibear.fandom.com/wiki/Brainy_Bear\"\u003e“Brainy Bear” episode\u003c/a\u003e shows Yogi in a crazy scientist‘s brain experiment. Yogi’s head is under the dome, and energy radiates around him.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration where Yogi’s head is under the dome, and energy radiates around him\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/7-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo create the buzz around Yogi, my SVG includes three \u003ccode\u003epath\u003c/code\u003e elements, each with \u003ccode\u003eopacity\u003c/code\u003e, \u003ccode\u003estroke\u003c/code\u003e, and \u003ccode\u003estroke-width\u003c/code\u003e attributes, which can all be animated:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path opacity=\u0026#34;1\u0026#34; stroke=\u0026#34;#fff\u0026#34; stroke-width=\u0026#34;5\u0026#34; ... /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI animated each path’s \u003ccode\u003eopacity\u003c/code\u003e, changing its value from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003e.5\u003c/code\u003e and back again:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path opacity=\u0026#34;1\u0026#34; ... \u0026gt;\n  \u0026lt;animate \n    attributename=\u0026#34;opacity\u0026#34;\n    values=\u0026#34;1; .25; 1;\u0026#34;\n    dur=\u0026#34;1s\u0026#34;\n    repeatcount=\u0026#34;indefinite\u0026#34;\u0026gt;\n  \u0026lt;/animate\u0026gt;\n\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, to radiate energy from Yogi, I specified when each animation should \u003ccode\u003ebegin\u003c/code\u003e, using a different value for each \u003ccode\u003epath\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path ... \u0026gt;\n  \u0026lt;animate begin=\u0026#34;0\u0026#34; … \u0026gt;\n\u0026lt;/path\u0026gt;\n\n\u0026lt;path ... \u0026gt;\n  \u0026lt;animate begin=\u0026#34;.5s\u0026#34; … \u0026gt;\n\u0026lt;/path\u0026gt;\n\n\u0026lt;path ... \u0026gt;\n  \u0026lt;animate begin=\u0026#34;1s\u0026#34; … \u0026gt;\n\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI’ll explain more about the \u003ccode\u003ebegin\u003c/code\u003e property and how to start animations after this short commercial break.\u003c/p\u003e\u003cp\u003eTry this yourself:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"qEEzYgG\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Brainy Bear SVG animation [forked]](https://codepen.io/smashingmag/pen/qEEzYgG) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/qEEzYgG\"\u003eBrainy Bear SVG animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo make animations appear more natural, I can apply more than one \u003ccode\u003eanimate\u003c/code\u003e element and give each one a different \u003ccode\u003eattributename\u003c/code\u003e value. Those paths also contain a \u003ccode\u003estroke-width\u003c/code\u003e attribute, which I can also animate by changing the stroke widths between \u003ccode\u003e5\u003c/code\u003e and \u003ccode\u003e7\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path ... \u0026gt;\n  \u0026lt;animate attributename=\u0026#34;opacity\u0026#34; ... \u0026gt;\u0026lt;/animate\u0026gt;\n  \u0026lt;animate attributename=\u0026#34;stroke-width\u0026#34; ... \u0026gt;\u0026lt;/animate\u0026gt;\n\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, I can animate the dome over Yogi’s head, changing its \u003ccode\u003efill\u003c/code\u003e colour between two values over five seconds to create the impression that the crazy scientist’s machine is heating up:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path fill=\u0026#34;#50D9E0\u0026#34; ... \u0026gt;\n  \u0026lt;animate\n    attributename=\u0026#34;fill\u0026#34;\n    values=\u0026#34;#50D9E0; #E18C50;\u0026#34;\n    dur=\u0026#34;5s\u0026#34;\n    begin=\u0026#34;2s\u0026#34;\n  \u0026gt;\n\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eImplement that code, and you’ll soon notice that the dome returns to its original state after the animation is complete. To retain its colour at the end of the animation, I can add the — confusingly named — \u003ccode\u003efill\u003c/code\u003e property and a value of \u003ccode\u003efreeze.\u003c/code\u003e This stops the animation in its final state and prevents it from returning to the original colour:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path fill=\u0026#34;#50D9E0\u0026#34; ... \u0026gt;\n  \u0026lt;animate fill=\u0026#34;freeze\u0026#34;\u0026gt;\n\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnimating attributes brings these title card designs to life, whether by adjusting the position of a primitive shape, its opacity, and stroke width or by creating complex sequences with staggered timing. But there’s still more I can do, starting with the next animation element, \u003ccode\u003eanimateTransform\u003c/code\u003e.\u003c/p\u003e\u003ch2 id=\"animatetransform\"\u003e\u003ccode\u003eanimateTransform\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eIf \u003ccode\u003e\u0026lt;animate\u0026gt;\u003c/code\u003e controls attributes, then \u003ccode\u003eanimateTransform\u003c/code\u003e animates transformations, including rotations, scaling, skewing, and translations. It works by changing the values of a transform property, like this \u003ccode\u003etranslate\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path transform=\u0026#34;translate(0,0)\u0026#34;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, the animation works the same way as \u003ccode\u003e\u0026lt;animate\u0026gt;\u003c/code\u003e, adding an \u003ccode\u003eattributename\u003c/code\u003e and specifying the type of transform, in this example, \u003ccode\u003erotate:\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform \n  attributename=\u0026#34;transform\u0026#34;\n  type=\u0026#34;rotate\u0026#34;\u0026gt;\n\u0026lt;/animatetransform\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI can use either \u003ccode\u003efrom\u003c/code\u003e and \u003ccode\u003eto\u003c/code\u003e or the \u003ccode\u003evalues\u003c/code\u003e attribute to define how an element is transformed.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eScale\u003c/strong\u003e uses \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values (\u003ccode\u003e.5\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eRotate\u003c/strong\u003e uses degrees (\u003ccode\u003e0\u003c/code\u003e–\u003ccode\u003e360\u003c/code\u003e) plus optional \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e (\u003ccode\u003e360\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eTranslate\u003c/strong\u003e also uses \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values (\u003ccode\u003e50\u003c/code\u003e, \u003ccode\u003e100\u003c/code\u003e).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSkew\u003c/strong\u003e uses \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values, too (\u003ccode\u003e50\u003c/code\u003e, \u003ccode\u003e100\u003c/code\u003e).\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhat’s interesting about those values is that they can be added to an element’s existing values instead of replacing them. For example, when an attribute contains a \u003ccode\u003etranslate\u003c/code\u003e value of \u003ccode\u003e100, 0\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path transform=\u0026#34;translate(100, 0)\u0026#34;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd then I animate that translation horizontally by \u003ccode\u003e100\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform\n  attributename=\u0026#34;transform\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  from=\u0026#34;0, 0\u0026#34;\n  to=\u0026#34;100, 0\u0026#34;\n  additive=\u0026#34;sum\u0026#34;\u0026gt;\n\u0026lt;/animatetransform\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing the \u003ccode\u003eadditive\u003c/code\u003e property with a value of \u003ccode\u003esum\u003c/code\u003e, the animation values are relative to the original, starting the animation at \u003ccode\u003e100\u003c/code\u003e and ending at \u003ccode\u003e200\u003c/code\u003e by adding \u003ccode\u003e100\u003c/code\u003e to \u003ccode\u003e100\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSimilarly, if I give the \u003ccode\u003eaccumulate\u003c/code\u003e property a value of \u003ccode\u003esum\u003c/code\u003e, each instance of animation will build on the last. So, in an animation where an element is translated by \u003ccode\u003e100\u003c/code\u003e and repeats five times, each movement will be cumulative, moving the element by \u003ccode\u003e500\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform\n  attributename=\u0026#34;transform\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  from=\u0026#34;0, 0\u0026#34;\n  to=\u0026#34;100, 0\u0026#34;\n  additive=\u0026#34;sum\u0026#34;\n  accumulate=\u0026#34;sum\u0026#34; \n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis title card from 1958’s Yogi Bear’s \u003ca href=\"https://yogibear.fandom.com/wiki/Yogi_Bear%27s_Big_Break\"\u003e“Big Break” episode\u003c/a\u003e shows Yogi floating from the sky under a parachute.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration shows Yogi floating from the sky under a parachute\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/8-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eI needed two types of transform animations to generate the effect of Yogi drifting gently downwards: \u003ccode\u003etranslate\u003c/code\u003e, and \u003ccode\u003erotate\u003c/code\u003e. I first added an \u003ccode\u003eanimatetransform\u003c/code\u003e element to the group, which contains Yogi and his chute. I defined his initial vertical position — \u003ccode\u003e1200\u003c/code\u003e off the top of the \u003ccode\u003eviewBox\u003c/code\u003e — then translated his descent to \u003ccode\u003e1000\u003c/code\u003e over a 15-second duration:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g transform=\u0026#34;translate(1200, -1200)\u0026#34;\u0026gt;\n  ...\n  \u0026lt;animateTransform\n    attributeName=\u0026#34;transform\u0026#34;\n    type=\u0026#34;translate\u0026#34;\n    values=\u0026#34;500,-1200; 500,1000\u0026#34;\n    dur=\u0026#34;15s\u0026#34;\n    repeatCount=\u0026#34;1\u0026#34; \n  /\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYogi appears to fall from the sky, but the movement looks unrealistic. So, I added a second \u003ccode\u003eanimatetransform\u003c/code\u003e element, this time with an indefinitely repeating +/- 5-degree rotation to swing Yogi from side to side during his descent:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateTransform\n  attributeName=\u0026#34;transform\u0026#34;\n  type=\u0026#34;rotate\u0026#34;\n  values=\u0026#34;-5; 5; -5\u0026#34;\n  dur=\u0026#34;14s\u0026#34;\n  repeatCount=\u0026#34;indefinite\u0026#34;\n  additive=\u0026#34;sum\u0026#34; \n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTry this yourself:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"PwwraNm\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Big Break SVG animation [forked]](https://codepen.io/smashingmag/pen/PwwraNm) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/PwwraNm\"\u003eBig Break SVG animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"starting-and-stopping\"\u003eStarting And Stopping\u003c/h2\u003e\u003cp\u003eSo far, every animation begins as soon as the page has loaded. But there are ways to not only delay the start of animation but define precisely where it begins, using the begin \u003ccode\u003eproperty\u003c/code\u003e:\u003c/p\u003e\u003cp\u003eIn this title card from 1959’s \u003ca href=\"https://yogibear.fandom.com/wiki/Robin_Hood_Yogi\"\u003e“Robin Hood Yogi”\u003c/a\u003e, Yogi shoots an arrow into an apple on Boo-Boo’s head.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration where Yogi shoots an arrow into an apple on Boo-Boo’s head\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/9-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eBy default, the arrow is set loose when the page loads. Blink, and you might miss it. To build some anticipation, I can \u003ccode\u003ebegin\u003c/code\u003e the animation two seconds later:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform\n  attributename=\u0026#34;transform\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  from=\u0026#34;0 0\u0026#34;\n  to=\u0026#34;750 0\u0026#34;\n  dur=\u0026#34;.25s\u0026#34;\n  begin=\u0026#34;2s\u0026#34;\n  fill=\u0026#34;freeze\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr, I can let the viewer take the shot when they click the arrow:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform\n  ...\n  begin=\u0026#34;click\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd I can combine the click event and a delay, all with no JavaScript, just a smattering of SMIL:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animatetransform\n  ...\n  begin=\u0026#34;click + .5s\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTry this yourself by clicking the arrow:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"OPPeERj\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Robin Hood Yogi CSS animation [forked]](https://codepen.io/smashingmag/pen/OPPeERj) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/OPPeERj\"\u003eRobin Hood Yogi CSS animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"synchronising-animations\"\u003eSynchronising Animations\u003c/h2\u003e\u003cp\u003eIn his 1958 \u003ca href=\"https://yogibear.fandom.com/wiki/Pie-Pirates\"\u003e“Pie-Pirates” episode\u003c/a\u003e, Yogi Bear tries to steal a pie and has to outwit a bulldog. The title card — designed by Lawrence Goble — shows the chase but, alas, (spoiler alert) no stolen pie.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration showing a bulldog chasing Yogi Bear\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/10-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo bring this title card to life, I needed two groups of paths: one for Yogi and the other for the dog. I translated them both off the left edge of the \u003ccode\u003eviewBox\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g class=\u0026#34;dog\u0026#34; transform=\u0026#34;translate(-1000, 0)\u0026#34;\u0026gt;\n  ...\n\u0026lt;/g\u0026gt;\n\n\u0026lt;g class=\u0026#34;yogi\u0026#34; transform=\u0026#34;translate(-1000, 0)\u0026#34;\u0026gt;\n  ...\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, I applied an \u003ccode\u003eanimatetransform\u003c/code\u003e element to both groups, which moves them back into view:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- yogi --\u0026gt;\n\u0026lt;animateTransform\n  attributeName=\u0026#34;transform\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  from=\u0026#34;-1000,0\u0026#34;\n  to=\u0026#34;0,0\u0026#34;\n  dur=\u0026#34;2s\u0026#34;\n  fill=\u0026#34;freeze\u0026#34;\n/\u0026gt;\n\n\u0026lt;!-- dog --\u0026gt;\n\u0026lt;animateTransform\n  attributeName=\u0026#34;transform\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  from=\u0026#34;-1000,0\u0026#34;\n  to=\u0026#34;0,0\u0026#34;\n  dur=\u0026#34;.5s\u0026#34;\n  fill=\u0026#34;freeze\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis sets up the action, but the effect feels flat, so I added another pair of animations that bounce both characters:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- yogi --\u0026gt;\n\u0026lt;animateTransform\n  attributeName=\u0026#34;transform\u0026#34;\n  type=\u0026#34;rotate\u0026#34;\n  values=\u0026#34;-1,0,450; 1,0,450; -1,0,450\u0026#34;\n  dur=\u0026#34;.25s\u0026#34;\n  repeatCount=\u0026#34;indefinite\u0026#34;\n/\u0026gt;\n\n\u0026lt;!-- dog --\u0026gt;\n\u0026lt;animateTransform\n  attributeName=\u0026#34;transform\u0026#34;\n  type=\u0026#34;rotate\u0026#34;\n  values=\u0026#34;-1,0,450; 1,0,450; -1,0,450\u0026#34;\n  dur=\u0026#34;0.5s\u0026#34;\n  repeatCount=\u0026#34;indefinite\u0026#34;\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnimations can begin when a page loads, after a specified time, or when clicked. And by naming them, they can also synchronise with other animations.\u003c/p\u003e\u003cp\u003eI wanted Yogi to enter the frame first to build anticipation, with a short pause before other animations begin, synchronising to the moment he’s arrived. First, I added an ID to Yogi’s \u003ccode\u003etranslate\u003c/code\u003e animation:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateTransform\n  id=\u0026#34;yogi\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  ...\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cstrong\u003eWatch out\u003c/strong\u003e: For a reason, I can’t, for the life of me, explain why Firefox won’t begin animations with an ID when the ID contains a hyphen. This isn’t smarter than the average browser, but replacing hyphens with underscores fixes the problem.\u003c/blockquote\u003e\u003cp\u003eThen, I applied a \u003ccode\u003ebegin\u003c/code\u003e to his \u003ccode\u003erotate\u003c/code\u003e animation, which starts playing a half-second after the \u003ccode\u003e#yogi\u003c/code\u003e animation ends:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateTransform\n  type=\u0026#34;rotate\u0026#34;\n  begin=\u0026#34;yogi.end + .5s\u0026#34;\n  ...\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI can build sophisticated sets of synchronised animations using the \u003ccode\u003ebegin\u003c/code\u003e property and whether a named animation begins or ends. The bulldog chasing Yogi enters the frame two seconds after Yogi begins his entrance:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateTransform\n  id=\u0026#34;dog\u0026#34;\n  type=\u0026#34;translate\u0026#34;\n  begin=\u0026#34;yogi.begin + 2s\u0026#34;\n  fill=\u0026#34;freeze\u0026#34;\n  ...\n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOne second after the dog has caught up with Yogi, a \u003ccode\u003erotate\u003c/code\u003e transformation makes him bounce, too:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateTransform\n  type=\u0026#34;rotate\u0026#34;\n  ...\n  begin=\u0026#34;dog.begin + 1s\u0026#34;\n  repeatCount=\u0026#34;indefinite\u0026#34; \n/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe background rectangles whizzing past are also synchronised, this time to one second before the bulldog ends his run:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;rect ...\u0026gt;\n  \u0026lt;animateTransform\n    begin=\u0026#34;dog.end + -1s\u0026#34;\n  /\u0026gt;\n\u0026lt;/rect\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTry this yourself:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"LEEKryp\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Pie-Pirates SVG animation [forked]](https://codepen.io/smashingmag/pen/LEEKryp) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/LEEKryp\"\u003ePie-Pirates SVG animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe timing of this background movement is synchronised with the dog arriving, which, in turn, is relative to Yogi’s arrival, building a sequence of animations that all feel connected.\u003c/p\u003e\u003ch2 id=\"animating-along-motion-paths\"\u003eAnimating Along Motion Paths\u003c/h2\u003e\u003cp\u003eUntil now, all the animations in these title cards have been up, down, left, right, or one combination or another. But there’s one more aspect of SMIL in SVG, which can add an extra dimension to animations: animating along motion paths using the \u003ccode\u003eanimatemotion\u003c/code\u003e element.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eanimatemotion\u003c/code\u003e accepts all the same properties and values as \u003ccode\u003eanimate\u003c/code\u003e and \u003ccode\u003eanimateTransform\u003c/code\u003e, but adds a few more for finer control over direction and timing. \u003ccode\u003eanimatemotion\u003c/code\u003e uses the \u003ccode\u003epath\u003c/code\u003e property to enable elements to move along a motion path. It also uses the \u003ccode\u003ed\u003c/code\u003e value for coordinate data in the same way as any conventional path.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png\" sizes=\"100vw\" alt=\"The Yogi Bear Show illustration of the Runaway Bear\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/11-yogi-bear-show.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIn \u003ca href=\"https://yogibear.fandom.com/wiki/The_Runaway_Bear\"\u003e“The Runaway Bear”\u003c/a\u003e from 1959, Yogi must avoid a hunter turning his head into a trophy. I wanted Yogi to leap in and out of the screen by making him follow a path. I also wanted to vary the speed of his dash: speeding up as he enters and exits, and slowing down as he passes the title text.\u003c/p\u003e\u003cp\u003eI first added a \u003ccode\u003epath\u003c/code\u003e property, using its coordinate data to give Yogi a route to follow, and specified a two-second duration for my animation:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g\u0026gt;\n  \u0026lt;animateMotion\n    dur=\u0026#34;2s\u0026#34;\n    path=\u0026#34;...\u0026#34;\n  \u0026gt;\n  \u0026lt;/animateMotion\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlternatively, I could add a \u003ccode\u003epath\u003c/code\u003e element, leave it visible, or prevent it from being rendered by placing it inside a \u003ccode\u003edefs\u003c/code\u003e element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;defs\u0026gt;\n  \u0026lt;path id=\u0026#34;yogi\u0026#34; d=\u0026#34;...\u0026#34; /\u0026gt;\n\u0026lt;/defs\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI can then reference that by using a \u003ccode\u003empath\u003c/code\u003e element inside my \u003ccode\u003eanimateMotion\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateMotion\n  ...\n  \u0026lt;mpath href=\u0026#34;#yogi\u0026#34; /\u0026gt;\n\u0026lt;/animateMotion\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI experimented with several paths before settling on the one that delivered the movement shape I was looking for:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png\" sizes=\"100vw\" alt=\"Several variants of the Yogi Bear title card recreated by Andy Clarke\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1959.) Author’s recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-3-smil-not-dead/12-yogi-bear-title-card-recreations.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eOne was too bouncy, one was too flat, but the third motion path was just right. Almost, as I also wanted to vary the speed of Yogi’s dash: speeding him up as he enters and exits and slowing him down as he passes the title text.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ekeyPoints\u003c/code\u003e property enabled me to specify points along the motion path and then adjust the duration Yogi spends between them. To keep things simple, I defined five points between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateMotion\n  ...\n  keyPoints=\u0026#34;0; .35; .5; .65; 1;\u0026#34;\n\u0026gt;\n\u0026lt;/animateMotion\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen I added the same number of \u003ccode\u003ekeyTimes\u003c/code\u003e values, separated by semicolons, to control the pacing of this animation:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;animateMotion\n  ...\n  keyTimes=\u0026#34;0; .1; .5; .95; 1;\u0026#34;\n\u0026gt;\n\u0026lt;/animateMotion\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, Yogi rushes through the first three \u003ccode\u003ekeyPoints\u003c/code\u003e, slows down as he passes the title text, then speeds up again as he exits the \u003ccode\u003eviewBox\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eTry this yourself:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"oggryox\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Runaway Bear SVG animation [forked]](https://codepen.io/smashingmag/pen/oggryox) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/oggryox\"\u003eRunaway Bear SVG animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWith their ability to control transformations, animate complex motion paths, and synchronise multiple animations, SMIL animations in SVG are still powerful tools. They can bring design to life without needing a framework or relying on JavaScript. It’s compact, which makes it great for small SVG effects.\u003c/p\u003e\u003cp\u003eSMIL includes the \u003ccode\u003ebegin\u003c/code\u003e attribute, which makes chaining animations far more intuitive than with CSS. Plus, SMIL lives inside the SVG file, making it perfect for animations that travel with an asset. So, while SMIL is not modern by today’s standards and may be a little bit niche, it can still be magical.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aDon%e2%80%99t%20let%20the%20misconception%20that%20SMIL%20is%20%e2%80%9cdead%e2%80%9d%20stop%20you%20from%20using%20this%20fantastic%20tool.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f05%2fsmashing-animations-part-3-smil-not-dead%2f\"\u003eDon’t let the misconception that SMIL is “dead” stop you from using this fantastic tool.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eGoogle reversed its decision to deprecate SMIL almost a decade ago, so it remains a terrific choice for designers and developers who want \u003cstrong\u003esimple\u003c/strong\u003e, \u003cstrong\u003esemantic ways\u003c/strong\u003e to add animations to their designs.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": "2025-05-21T08:00:00Z",
  "modifiedTime": "2025-05-21T08:00:00Z"
}
