{
  "id": "46818c66-4bcb-4782-9f5f-98f65f1eb703",
  "title": "Time for a more progressive design model",
  "link": "https://uxdesign.cc/ui-crux-progressive-design-model-ci-cd-pipeline-in-design-d2a2591a6d25?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Andrzej Delgado",
  "published": "Sun, 20 Oct 2024 15:13:50 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "design",
    "agile",
    "product-management",
    "ux",
    "software-development"
  ],
  "byline": "Andrzej Delgado",
  "length": 27960,
  "excerpt": "Prevent chaotic scenarios by breaking the process into manageable steps.",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Prevent chaotic scenarios by breaking the process into manageable steps.A bit of context — how did Agile originate? 🐥Historically, most software would be created through a process called Waterfall. In environments characterized by high costs, risks, and a limited pool of skilled labor, organizations typically embraced a departmental or specialized structure.Tasks would be typically divided into individual segments, reminiscent of a factory assembly line. These units, defined by their specific roles, worked in silos, meticulously planning, managing, and executing their tasks. In an era of scarce resources and limited competition, upfront planning was seen as a way to mitigate risks and conserve time, and minimize effort.Very simplified Waterfall management model — The steps are: Require, Design, Implement, VerifyIn less dynamic, stable environments, this old-school approach was reasonable. However, in today’s rapidly changing world, many of these ideas have become obsolete. To maintain a competitive edge, scaling businesses must focus on time to market (TTM), user engagement proofs of concept (POC), and minimum viable products (MVP). This means that planning for scale, infrastructure challenges, and inventory can be deferred until later.The software development industry is particularly susceptible to the risk of being outmaneuvered by competitors. This pressure to innovate quickly has fueled the widespread adoption of Agile methodologies, which prioritize outcomes over rigid frameworks.These optics are even more prevalent in the software development industry. The risk of being beaten to the punch is so overwhelming that doing things differently than others ousts you from the picture before you even start.Agile Manifesto says it all: value over any method.Result — drastically shrinking the cycle time. From here we got DevOps, a combination of development, operations, and design, which further streamlined the software development lifecycle. Today, decisions are not solely technical; they transcend into strategic realms. Even Agile teams, though dynamic, rely heavily on automation to avoid disorder, employing methods like automated testing. What once seemed unthinkable — multiple daily deployments per developer — is now the norm.While this is impressive, the software development environment differs significantly from the design environment. So, what does all this mean for designers?Handoffs are dead ☠️For many devs and designers, the handoff process is a dreaded memory, often evoking thoughts of sleepless nights spent wondering whether every edge case was accounted for in the UI-Kit or whether an Adobe XD link had been accidentally overwritten by a careless team member, introducing mayhem in Jira.The unfortunate fact is that the designer community hasn’t pushed for any emulation of what has happened in the software development world. And what is even more astounding is the fact, that designers were present in the room all the time. Don’t get me wrong — the progress we went through in product design is incredible. Yet, not much has happened since Design Thinking and Double Diamond.Some things will never get old: cross-functional collaboration spiced up with next-level communication and the introduction of new amazing tools.But there’s another element — and yes, you probably guessed it — it’s code.Code, like any text, is incredibly flexible and easy to manipulate. You can track its versions, its changes, store it, share it, and/or update it without much hassle.However, design is an abstract phenomenon; it cannot sustain itself without a medium of expression. It is rather a process, a creative framework that shapes and refines the medium. In other words, design in a nutshell is a series of design decisions informed by human behavior — driven by ergonomics, cognitive capabilities, and aesthetic responses — that morph into interactions captured in a tangible form. Design is often challenging to articulate and usually involves — and surprisingly to many people — complex emotions.Unlike code, design is far from being something you can easily manage, track, or update — it’s an evolving and nuanced process that defies simple control.For a long time, I pondered this conundrum, before finally asking myself a simple question: why not enhance our design process by streamlining deliverables that are essentially code?The answer to that question takes us by the hand down to the realm of Design Engineering. But knowing something doesn’t necessarily translate into knowing exactly how to achieve it. This is where the Progressive Design Model (PDM) comes into play — a faithful companion to Design Engineering.Long live Progressive Design Model 👑Cross-functional collaboration, next-level communication, design systems, and design tokens are already standard in our toolboxes. The future holds even greater promises: automation tools, AI-drive co-pilots, and augmented work environments. They will help streamline repetitive design tasks, while pushing human designers, either into more strategic realms of design or into legends of the past. Fingers crossed, it’s the first thing 😇.Nevertheless, there’s still an unspoken need for a structured approach to effectively harness the true effects of these tools. Imagine a procedural framework, that would help organize our design landscape, break down workflows into digestible steps, and accelerate the design process. Amazing right?The north star of such a design workflow framework would be a design that is ideated, produced, presented, reviewed, and released according to the very same agile principles developers have the privilege to implement daily.I took upon a challenge to think through such a model and have since put it to the test. For now, I call it the Progressive Design Model (PDM), and it’s being implemented to the fullest extent possible within an ongoing project — though, like any new approach, there have been a few bumps along the road to success.Essential Stages of the Progressive Design Model 🎼Before breaking down the model into distinct stages, I want to make a few key housekeeping statements.Blindly following procedure to perfection, no matter the circumstance, is just plain foolish— scarce and meaningful detours and shortcuts are an emanation of a healthy relation to proceduralization;Design is an iterative process — it is very unlikely to concoct a perfect design on the first try.Design Bureaucracy should be punished — the procedure is just a subsidiary mechanism to the goals of any development project.Design won’t fly high without proper planning — like establishing a Definition of Ready (DoR), meaning pre-conditions that must be fulfilled before a piece of design is allowed into an iteration; or having an ironclad Definition of Done (DoD) with a shared understanding of what it means for work to be finished.I’m only highlighting the importance of DoR and DoD. I won’t delve more into project planning, since this would only make this paper less digestible, and this is the opposite of my intention.Note that the following paragraphs are written from the perspective of a designer actively engaged with the model. Therefore, descriptions revolve around the acumen of knowledge that such a designer should have after each stage or action taken at that specific moment.Said stages are:Monitoring the Fundamentals 🏠Continuous Integration 🏎️Continuous Stewardship 🛡️Continuous Feedback 💬Integration Testing ⭐️Continuous Delivery 📦User Acceptance Testing/Quality Assurance 👩‍💻Stage 1. Monitoring the Fundamentals 🏠The first stage involves either establishing new design foundations or absorbing existing ones. Sometimes, it’s as simple as digesting documentation for CSS frameworks like TailwindCSS, Bootstrap, etc., other times it requires building everything from the ground up.Naturally, the more complex the development project, the more sophisticated the underlying design decisions will be, encompassing fundamentals such as grid system, colors, typography, etc.The outcome of that stage is a designer who assimilates the foundations and grasps the entirety of design decisions and their relation to the future code. This accumulated knowledge of the fundamental design setup should give a designer such a degree of fluency, that along the way each teammate can alter the foundations, so they are a better fit for the project as a whole.In other words, a designer’s role is to understand and monitor the fundamentals, while being ready to amend them in case future code would benefit from such improvements.This stage is further divided into 3 branches, which can happen at any given moment, depending on the situation:Establishing/UnderstandingReviewingImprovingStage 2. Continuous Integration 🏎️A step that essentially boils down to merging inputs from various designers into a shared repository. In terms of the actual design file, all design platforms are inherently built that way — even with real-time collaboration in a single file — Figma being a prime example.Thus, the design file becomes a unified source of truth, containing all design decisions made during the process. By that, I mean elements, components, colors, layouts, typography, iconography, design language, patterns, variables, etc. — including subsequent tokenization of everything mentioned above.To explore more about tokens and tokenization processes read this: UI Crux: Reasonable and scalable taxonomy for tokens →The result of this stage is a designer who continuously contributes to a comprehensive collection of visual representations of design decisions that fuel the development process. Crucially, the closer these visuals created by designers align with the coding realities (standard HTML elements, CSS declarations’ outcomes, postCSS specs, Storybook controls in a testing environment, etc.), the swifter and smoother the development and integration will be.Stage 3. Continuous Stewardship 🛡️At this stage, the focus shifts to independent actions carried out by a designer who assumes the role of an architect.While it may seem counterintuitive — since all designers ‘Monitor the Fundamentals’ — an architect takes on a more strategic and system-level responsibility. Their stewardship mirrors the CI/CD process in software development, where source code is compiled, dependencies are bundled, and reproducibility across environments is ensured.To put it simply, replace the word “build” with “design”, and you’ll get the idea.Having an architect tasked with strategizing over the design, and seeing through future code is essential to keep up with the fast-paced way code is being developed while maintaining consistency, compatibility, and quality.Such a designer is responsible for maintaining shared vocabulary, naming conventions, and methodologies that keep searchability, compactness, consistency, and self-explanation of names and terms used across design and supporting documentation.To dig deeper into naming conventions, check this out: UI Crux: Naming Conventions \u0026 Methodologies for Designers →Moreover, evolving requirements are another challenge the architect must tackle. They keep both the designers involved as well as the design itself aligned with any potential changes or shifts in understanding the product.The output of this stage is a designer that controls the inflow of design, its quality, dependencies, compatibility, reproducibility, and consistency across different environments, but also gatekeeping the definition and arrival of new components, their strategic importance, and ultimately keeping the total sum of all design assets under control, whilst being vigilant and responsive to evolving requirements, and sitting at the right table where these conversations happen.This stage can be subdivided into 2 branches:UX branchUI branch— each leaning towards their respective fields of expertise and focus.Stage 4. Continuous Feedback 💬This stage is an inherent part of any design process. Giving, receiving, and making sense of the feedback is crucial for a successful iterative process.The outcome of this stage is a designer meeting with internal and external stakeholders, product owners, developers, and other team members involved in the project to gather feedback. This feedback is then organized, filtered, grouped, analyzed, and acted upon if necessary, and ultimately implemented if transformative to the design.To learn more about that topic of Feedback, over and beyond what you may find in a Google search, read this article: Design Feedback: How to give great design feedback, and how to receive it →Stage 5. Integration Testing ⭐️This is a critical step in the PDM pipeline. When each piece of design lands inside the design file, designers should perform rigorous testing to ensure it performs as expected under different scenarios.Typically, tests are conducted on small, isolated pieces of designs, but they have to be run in proper contexts. One of the angles of the testing is to validate the behavior and functionality of the design (components, pages, stories) as a whole, detecting any issues that may arise due to the combination of various elements or components.The outcome of this stage is a designer that employs manual or automated design analysis, assessing the quality, integration assurance, and maintainability of design, considering factors like impact and feasibility. The designer detects potential issues such as design smells, unwanted duplications, and general adherence to the design principles (either general or specific to the project). By identifying these problems early on, designers can make necessary improvements, enhancing the overall quality of the future code.What is worth highlighting is that by performing code-based testing (e.g., HTML/CSS), issues that might not be caught in design tools like Figma, may be uncovered. Code-based testing usually sheds light on aspects of design that would have been otherwise overlooked.Stage 6. Continuous Delivery 📦Continuous Delivery takes traditional design handoff a step further through the usage of design systems, automated tokens extraction, normalization of component variants, theming guardrails, and even code snippets.There is also room for designers to embed themselves in development tools like GitHub, Bitbucket, MDX, Storybooks, and Chromatics — the domains where developers typically thrive. For instance, Adobe XD has a plugin that integrates directly with VSCode, allowing the creation of UI packages.I’m just saying, it’s not like these things are going to bite your fingers off the moment you touch them. The proliferation of such tooling in the design world would do wonders for both developers and designers alike.The outcome of that stage is a designer who through the above-mentioned tools continuously delivers not only mockups, but also systemized documentation, code snippets, design tokens, and possibly UI packages while considering the long-term maintainability of the future code. By doing so, the designer minimizes the time required for developers to implement the code.Stage 7. User Acceptance Testing/Quality Assurance 👩‍💻User Acceptance Testing (UAT) involves validating the software’s functionality, usability, and compatibility with design guidelines and requirements. This stage enables designers to provide feedback and ensures that the software adheres to all design principles.Ideally, UAT should occur in environments like Storybook or Chromatic, spanning all viewports and stress-testing all breakpoints.The outcome of this stage is a designer who checks the usually overlooked details like alignment, sizing, spacing, consistency, and length of labels, validates different language or currency variations, and inspects in look for apparent bugs. In this stage, the designer can identify ‘mis-designs’, misfits, or anomalies in real-time, in real-world environments in all viewports.The Holy Grail — Automation 🏆The North Star, the Holy Grail of such proceduralization, and the true purpose of its existence is the automation →.By automating each stage of the pipeline, organizations can accelerate the design process, enhance its quality, and deliver value to end users more frequently.It is not an overstatement to say that we are at the dawn of a new era in design tools — automation is gaining momentum. New apps and platforms are popping up like mushrooms after a rainy day. Although full automation of all stages isn’t yet possible, it is extremely likely, that this scenario will materialize itself much faster than we think.Ok, let’s cut the smart talk and get down to business. Below are several design tasks that can already be automated with very decent results:1. Automated Token GenerationDeliverable: Consistent design tokens across platforms and teamsTools: Supernova, Figma (Token Studio Plugin), ZeroheightThese tools allow designers to create and manage design tokens, ensuring uniformity of design decisions throughout the design system.For example, during a project where we adopted the Progressive Design Model, we were able to save three months from our development cycle. Before using PDM, routine design tasks like testing and documentation would require a lot of manual input, with stacked back-and-forth between designers and developers. However, by automating tasks such as design token generation and integrating them directly into the codebase, we drastically improved the efficiency of our process.2. Code SnippetsDeliverable: Almost direct transfer of design elements into codeTools: Figma \u0026 VSCodeVisual Studio Code can integrate with Figma to provide real-time code previews by inspecting designs right from VSCode. One of the features creates code suggestion snippets directly based on designs.When delivering a complex grinding system for the platform, we weren’t about to just toss our design over the wall to Engineering. Oh no — we did everything, testing all scenarios, tweaking each layout, nailing down every edge-case question, and perfecting the grid, like our lives depended on it. By the time we were done, the design wasn’t just solid — it was bulletproof, and the code snippets? Pure perfection. All done with real-time code preview in VSCode.When we finally handed the layouts to Engineering, you should have seen the looks on their faces during that stand-up. The CSS grid was so immaculate that one of the engineers half-joked, ‘If engineers had fantasies, this would be it.’ They were more than happy to build on top of it.”In total, we cut the usual time spent on the tasks by about 40%, freeing up resources and giving the team more bandwidth to tackle more urgent tickets.3. Design Decisions Directly to CodeDeliverable: Seamless collaboration between designers and developersTools: Supernova, ZeroheightIt boils down to connecting design data to the actual codebase. The outcome is streamlining the development workflow with an automation pipeline with direct input from designers. Supernova supports packages (similar to an npm package, for example) that transform design system data into production code.4. Component LibrariesDeliverable: UI Component CatalogueTools: Figma \u0026 StorybookThe design add-on for Storybook allows you to embed Figma files alongside your code-based components in Storybook. Meanwhile, the Storybook plugin for Figma will enable you to embed stories alongside your design components in Figma. Ultimately, Storybook for Figma can be used by designers in Design Mode or by developers in Dev Mode.5. Accessibility ChecksDeliverable: Accessible designsTools: Figma (Plugin), Deque AxeThese tools can automatically check designs for WCAG accessibility issues, helping designers create good experiences for all users (wink, wink: it would be great to have an analog for APCA).6. Dev Tools IntegrationDeliverable: Deliver design turned into code directly to the software development platformTools: SupernovaSupernova allows integration and automation of design systems within an existing workflow — GitHub, Azure DevOps, Gitlab, BitBucket, or other customized REST endpoints.The Unspoken DreamAutomation represents the unspoken dream for many within the design community — a dream of efficiency, accuracy, and seamless workflows. By fully automating every stage in the design pipeline, organizations could radically accelerate the process while enhancing quality and delivering continuous value to end users.While full automation isn’t quite possible yet, it’s undoubtedly closer than many might think, and new tools are sprouting up at a rapid pace.Moreover, none of these solutions are perfect, and they’re all gonna let you down at some point. But once you get a hold of yourself and stop getting lost in the maze of algorithms, you’ll be the king of the castle, the top dog — a Design Engineering trooper, focused not on mundane pixel pushing but on new exciting features that overtake your competition.The unspoken dream of true automation in Design.The Organizational Aspect of PDMSaying all the above, let’s cut to the chase. So, how has the organizational structure for this PDM test run been laid out? Unfortunately, due to a signed NDA and strict corporate policy, I cannot disclose what the project was exactly about. However, for the purposes of this study, these details are actually not important.Organizational ReadinessThe first and most important thing was to get a blessing from the brass. Since it’s an internal project, getting it was relatively straightforward. Let’s just say it wasn’t a walk in the park, to get everyone on the same page.Next, as a team, we checked if we had everything to launch and successfully execute everything that had been planned. Furthermore, since this was a big one for us, we also peered with our collective consciousness to, make sure there were no hidden skeletons in the closet, that may disrupt, or god forbid, derail the project completely.Examining operational readiness involved:Design Alignment:Shared Vision: Two kick-off events were held to get a clear understanding of the project’s goals, objectives, key outcomes, and clarity on the shared vision of the project.Design Principles: An introductory part of the future documentation shared with the team, outlining a unified set of principles and axioms guiding the team’s decisions, and ensuring consistency and cohesiveness of the final outputs.2. Technical Readiness:Tools and Software: The team got access to all necessary software and tools to efficiently complete their tasks. Figma, VSCode, Storybook.Technical Knowledge: All designers before the launch of the project got access to crucial knowledge sources: https://uicrux.com, and https://mobbin.com, among others, ensuring that everyone had the technical skills required to implement their designs effectively.3. Resource Allocation:Time and Budget: We developed capacity and prioritization plans, set milestones, and created a roadmap with tangible deadlines. Financial resources were allocated appropriately to meet the project’s needs.Team Structure: Four new hires were brought on board to ensure that the design team was sufficiently staffed. Moreover, we assigned specific roles to people with the necessary expertise, so they could drive the project consistency and ensure cohesiveness in the final deliverables.4. Communication and Collaboration:Clear Communication: Separate communication channels were established to foster an open and transparent flow and exchange of information.Collaboration: Effective collaboration was recognized as essential to keeping the design process efficient and productive.5. Testing and Feedback:User Testing: Guidelines for testing alongside DoR, DoD, and UAT checklists were put in place.Internal Reviews: Regular ceremonies including retrospectives were scheduled for the squads to help identify potential issues and ensure that the project stayed on track with its objectives.Finally, we enlisted a seasoned scrum master to join our team as a Design Operations SME (Design Producer), well-versed in Jira. The new Design Producer ensures the team stays aligned and iterates quickly to meet rapidly evolving requirements, while guiding us through the complexities of design operations.Workflow ProcessOnce everyone was on board and aligned, we set up organizational scaffolding that came together perfectly with all stages of PDM.RolesA specific role has been assigned to each designer.A peer — a designer navigating the project’s day-to-day design tasks, and grinding through tickets. Their main tasks are ideation, research, testing, and iterative design. They are also involved in performing the art of peer-to-peer reviews — an amazing chance to share wisdom and experience.The peer is a design-driven explorer delving into a vast ocean of product development, and ensuring a smooth voyage for himself and others on board.An architect — a designer, on top of peer designer’s responsibilities is steering the project through the ever-changing waters of requirements and ensuring a smooth sailing journey for all team. They maintain standardization, manage dependencies, and ensure governance throughout the project.The architect acts as the gatekeeper, the strategic overseer, ensuring that only the best, most consistent, and future-proof ideas make it through.2. Ceremonies (Two-week Cycles)The aim of applying sprint tactics was to foster a culture of continuous design, integration testing, and continuous delivery. Our Progressive Design Model game plan looked like this:Sprint Planning (Every 2nd Monday)Architect Sessions (Every Thursday)Refinement (Every 2nd Wednesday)Retrospective (Every 4th Friday)As a perky byproduct, designers are getting a free ticket for an honorary scrum run, gaining valuable insights and first-hand experience of the good, the bad, and the ugly of the software developers' ways of working.Summary 😎Wrapping up and putting in place a brief summary, it needs to be said, that although at first glance it may look like such proceduralization is an over-complication, seasoned designers will likely agree, that it is not an unusual scenario when complex products’ usability gets direct hit or even it gets completely off the rails when proper processes are not in place.When design operations turn into a free-for-all, it’s like opening the gate of cross-functional collaboration hell.And yes, effective communication is unquestionably the most important thing, but it is critical to realize that even the best-intentioned talks can fall short if there’s no suitable process guiding the project.Imagine you are tackling a project characterized by:diverse contexts,technical and non-technical dependencies,with a high degree of adaptability,where it is essential to mind technical and business constraints,take notice of various factors,and large scope involved.Dealing with a project that ticks at least two of these boxes without a process or strategic outlook in place, it’s like attempting to explore a huge, foreign territory without a map. You might finally find your way, but be sure that, like a good cake is stuffed with raisins, the journey will be fraught with detours, delays, and unneeded obstacles.The Progressive Design Model (PDM) is a proceduralistic approach to prevent these ungodly scenarios, by embracing an iterative design process divided into manageable steps. All for the sake of allowing for continuous refinement based on feedback and evolving requirements, whilst covering it with a fabric of well-defined governance with a clear division of responsibilities and checks and balances.If you want to dive deeper…Here are some articles on Design Engineering that are directly connected to the topics covered here. Go check them out:If you’re interested in a different angle on the methodologies discussed here, here’s some further reading:Lastly, for those interested in Design Engineering, visit UI Crux: A dev-centric platform for designers, where you can learn CSS and other powerful stuff.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*ANwmmUj4-J37rIh6Ha2oUg.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"e094\"\u003ePrevent chaotic scenarios by breaking the process into manageable steps.\u003c/h2\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@andrzej.delgado?source=post_page-----d2a2591a6d25--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Andrzej Delgado\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*4U_y2Mc089TuHnAnKGWrPQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page-----d2a2591a6d25--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"ea62\"\u003e\u003cstrong\u003eA bit of context — how did \u003c/strong\u003eAgile \u003cstrong\u003eoriginate? 🐥\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"ed19\"\u003eHistorically, most software would be created through a process called \u003cstrong\u003eWaterfall\u003c/strong\u003e. In environments characterized by high costs, risks, and a limited pool of skilled labor, organizations typically embraced a departmental or specialized structure.\u003c/p\u003e\u003cp id=\"f696\"\u003eTasks would be typically divided into individual segments, reminiscent of a factory assembly line. These units, defined by their specific roles, worked in silos, meticulously planning, managing, and executing their tasks. In an era of scarce resources and limited competition, upfront planning was seen as a way to mitigate risks and conserve time, and minimize effort.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eVery simplified Waterfall management model — The steps are: Require, Design, Implement, Verify\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"89ec\"\u003eIn less dynamic, stable environments, this old-school approach was reasonable. However, in today’s rapidly changing world, many of these ideas have become obsolete. To maintain a competitive edge, scaling businesses must focus on \u003cstrong\u003etime to market (TTM)\u003c/strong\u003e, user engagement \u003cstrong\u003eproofs of concept (POC)\u003c/strong\u003e, and \u003cstrong\u003eminimum viable products (MVP)\u003c/strong\u003e. This means that planning for scale, infrastructure challenges, and inventory can be deferred until later.\u003c/p\u003e\u003cp id=\"7c9c\"\u003eThe software development industry is particularly susceptible to the risk of being outmaneuvered by competitors. This pressure to innovate quickly has fueled the \u003ca href=\"https://www.launchnotes.com/blog/agile-is-a-competitive-advantage-how-to-stay-ahead-in-todays-business-landscape\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewidespread adoption of Agile methodologies\u003c/a\u003e, which prioritize \u003cstrong\u003eoutcomes\u003c/strong\u003e over \u003cem\u003erigid frameworks\u003c/em\u003e.\u003c/p\u003e\u003cp id=\"8329\"\u003eThese optics are even more prevalent in the software development industry. The risk of being beaten to the punch is so overwhelming that doing things differently than others ousts you from the picture before you even start.\u003c/p\u003e\u003cp id=\"6323\"\u003eAgile Manifesto says it all: \u003cstrong\u003evalue over any method\u003c/strong\u003e.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"26a2\"\u003eResult — drastically shrinking the cycle time. From here we got \u003ca href=\"https://medium.com/taptuit/what-is-devops-fb3d044ef659\" rel=\"noopener\"\u003eDevOps, a combination of development, operations, and design\u003c/a\u003e, which further streamlined the software development lifecycle. Today, decisions are not solely technical; they transcend into strategic realms. Even Agile teams, though dynamic, rely heavily on automation to avoid disorder, employing methods like automated testing. What once seemed unthinkable — multiple daily deployments per developer — is now the norm.\u003c/p\u003e\u003cp id=\"dd98\"\u003eWhile this is impressive, the software development environment differs significantly from the design environment. So, what does all this mean for designers?\u003c/p\u003e\u003ch2 id=\"efb9\"\u003e\u003cstrong\u003eHandoffs are dead ☠️\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"3c04\"\u003eFor many devs and designers, the handoff process is a dreaded memory, often evoking thoughts of sleepless nights spent wondering whether every edge case was accounted for in the UI-Kit or whether an Adobe XD link had been accidentally overwritten by a careless team member, introducing mayhem in Jira.\u003c/p\u003e\u003cp id=\"e718\"\u003eThe unfortunate fact is that the designer community hasn’t pushed for any emulation of what has happened in the software development world. And what is even more astounding is the fact, that designers were present in the room all the time. Don’t get me wrong — the progress we went through in product design is incredible. Yet, not much has happened since \u003ca href=\"https://medium.com/designsprints-studio/what-is-design-thinking-a-beginners-guide-c181e75ebf64\" rel=\"noopener\"\u003eDesign Thinking\u003c/a\u003e and \u003ca href=\"https://medium.com/@wicar/double-diamond-design-model-a-design-process-framework-af6848f49475\" rel=\"noopener\"\u003eDouble Diamond\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"e74d\"\u003eSome things will never get old: \u003cstrong\u003ecross-functional collaboration\u003c/strong\u003e spiced up with next-level \u003cstrong\u003ecommunication\u003c/strong\u003e and\u003cstrong\u003e \u003c/strong\u003ethe\u003cstrong\u003e \u003c/strong\u003eintroduction of new amazing \u003cstrong\u003etools.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"e5a2\"\u003eBut there’s another element — and yes, you probably guessed it — it’s \u003cstrong\u003ecode\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"66be\"\u003eCode, like any text, is incredibly flexible and easy to manipulate. You can track its versions, its changes, store it, share it, and/or update it without much hassle.\u003c/p\u003e\u003cp id=\"720b\"\u003eHowever, design is an \u003cem\u003eabstract\u003c/em\u003e \u003cem\u003ephenomenon\u003c/em\u003e; it cannot sustain itself without a medium of expression. It is rather a process, a creative framework that shapes and refines the medium. In other words, design in a nutshell is a series of design decisions informed by human behavior — driven by ergonomics, cognitive capabilities, and aesthetic responses — that morph into interactions captured in a tangible form. Design is often challenging to articulate and usually involves — and surprisingly to many people — complex emotions.\u003c/p\u003e\u003cp id=\"3e6b\"\u003eUnlike code, design is far from being something you can easily manage, track, or update — it’s an evolving and nuanced process that defies simple control.\u003c/p\u003e\u003cp id=\"926c\"\u003eFor a long time, I pondered this conundrum, before finally asking myself a simple question: \u003cem\u003ewhy not enhance our design process by streamlining deliverables that are essentially code?\u003c/em\u003e\u003c/p\u003e\u003cp id=\"d874\"\u003eThe answer to that question takes us by the hand down to the realm of Design Engineering. But knowing something doesn’t necessarily translate into knowing exactly how to achieve it. This is where the \u003cstrong\u003eProgressive Design Model (PDM)\u003c/strong\u003e comes into play — a faithful companion to \u003cstrong\u003eDesign Engineering\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"0a9d\"\u003e\u003cstrong\u003eLong live Progressive Design Model 👑\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"0cab\"\u003eCross-functional collaboration, next-level communication, design systems, and design tokens are already standard in our toolboxes. The future holds even greater promises: automation tools, AI-drive co-pilots, and augmented work environments. They will help streamline repetitive design tasks, while pushing human designers, either into more strategic realms of design or into legends of the past. \u003cem\u003eFingers crossed, it’s the first thing \u003c/em\u003e😇.\u003c/p\u003e\u003cp id=\"6d5d\"\u003eNevertheless, there’s still an unspoken need for a structured approach to effectively harness the true effects of these tools. Imagine a \u003cstrong\u003eprocedural framework\u003c/strong\u003e, that would help organize our design landscape, break down workflows into digestible steps, and accelerate the design process. \u003cem\u003eAmazing right?\u003c/em\u003e\u003c/p\u003e\u003cp id=\"539d\"\u003eThe north star of such a design workflow framework would be a design that is \u003cstrong\u003eideated\u003c/strong\u003e, \u003cstrong\u003eproduced\u003c/strong\u003e, \u003cstrong\u003epresented\u003c/strong\u003e, \u003cstrong\u003ereviewed,\u003c/strong\u003e and \u003cstrong\u003ereleased\u003c/strong\u003e according to the very same \u003cstrong\u003eagile principles\u003c/strong\u003e developers have the privilege to implement daily.\u003c/p\u003e\u003cp id=\"b8ab\"\u003eI took upon a challenge to think through such a model and have since put it to the test. For now, I call it the \u003cstrong\u003eProgressive Design Model (PDM)\u003c/strong\u003e, and it’s being implemented to the fullest extent possible within an ongoing project — though, like any new approach, there have been a few bumps along the road to success.\u003c/p\u003e\u003ch2 id=\"b6de\"\u003e\u003cstrong\u003eEssential Stages of the Progressive Design Model 🎼\u003c/strong\u003e\u003c/h2\u003e\u003cblockquote\u003e\u003cp id=\"9f22\"\u003eBefore breaking down the model into distinct stages, I want to make a few key housekeeping statements.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"16c2\"\u003e\u003cstrong\u003eBlindly following procedure to perfection\u003c/strong\u003e, no matter the circumstance, is just plain foolish— scarce and meaningful detours and shortcuts are an emanation of a healthy relation to proceduralization;\u003c/p\u003e\u003cp id=\"11ea\"\u003e\u003cstrong\u003eDesign is an iterative process\u003c/strong\u003e — it is very unlikely to concoct a perfect design on the first try.\u003c/p\u003e\u003cp id=\"ed21\"\u003e\u003cstrong\u003eDesign Bureaucracy should be punished\u003c/strong\u003e — the procedure is just a subsidiary mechanism to the goals of any development project.\u003c/p\u003e\u003cp id=\"ddc0\"\u003e\u003cstrong\u003eDesign won’t fly high without proper planning\u003c/strong\u003e — like establishing a Definition of Ready (DoR), meaning pre-conditions that must be fulfilled before a piece of design is allowed into an iteration; or having an ironclad Definition of Done (DoD) with a shared understanding of what it means for work to be finished.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"9a76\"\u003eI’m only highlighting the importance of DoR and DoD. I won’t delve more into project planning, since this would only make this paper less digestible, and this is the opposite of my intention.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"46af\"\u003eNote that the following paragraphs are written from the perspective of a designer actively engaged with the model. Therefore, descriptions revolve around the acumen of knowledge that such a designer should have after each stage or action taken at that specific moment.\u003c/p\u003e\u003cp id=\"70d0\"\u003e\u003cstrong\u003eSaid stages are:\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"2b9d\"\u003eMonitoring the Fundamentals 🏠\u003c/li\u003e\u003cli id=\"7caa\"\u003eContinuous Integration 🏎️\u003c/li\u003e\u003cli id=\"3542\"\u003eContinuous Stewardship 🛡️\u003c/li\u003e\u003cli id=\"3d13\"\u003eContinuous Feedback 💬\u003c/li\u003e\u003cli id=\"ec9c\"\u003eIntegration Testing ⭐️\u003c/li\u003e\u003cli id=\"29a7\"\u003eContinuous Delivery 📦\u003c/li\u003e\u003cli id=\"3c36\"\u003eUser Acceptance Testing/Quality Assurance 👩‍💻\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b4a4\"\u003e\u003cstrong\u003eStage 1. Monitoring the Fundamentals 🏠\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"38c2\"\u003eThe first stage involves either establishing new design foundations or absorbing existing ones. Sometimes, it’s as simple as digesting documentation for CSS frameworks like TailwindCSS, Bootstrap, etc., other times it requires building everything from the ground up.\u003c/p\u003e\u003cp id=\"6327\"\u003eNaturally, the more complex the development project, the more sophisticated the underlying design decisions will be, encompassing fundamentals such as grid system, colors, typography, etc.\u003c/p\u003e\u003cp id=\"8c97\"\u003eThe outcome of that stage is a designer who assimilates the foundations and grasps the entirety of design decisions and their relation to the future code. This accumulated knowledge of the fundamental design setup should give a designer such a degree of fluency, that along the way each teammate can alter the foundations, so they are a better fit for the project as a whole.\u003c/p\u003e\u003cp id=\"8336\"\u003eIn other words, a designer’s role is to understand and monitor the fundamentals, while being ready to amend them in case future code would benefit from such improvements.\u003c/p\u003e\u003cp id=\"7e3e\"\u003eThis stage is further divided into 3 branches, which can happen at any given moment, depending on the situation:\u003c/p\u003e\u003col\u003e\u003cli id=\"ff12\"\u003eEstablishing/Understanding\u003c/li\u003e\u003cli id=\"3e1c\"\u003eReviewing\u003c/li\u003e\u003cli id=\"ef97\"\u003eImproving\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"0781\"\u003e\u003cstrong\u003eStage 2. Continuous Integration 🏎️\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"008f\"\u003eA step that essentially boils down to merging inputs from various designers into a shared repository. In terms of the actual design file, all design platforms are inherently built that way — even with real-time collaboration in a single file — Figma being a prime example.\u003c/p\u003e\u003cp id=\"7f96\"\u003eThus, the design file becomes a unified source of truth, containing all design decisions made during the process. By that, I mean elements, components, colors, layouts, typography, iconography, design language, patterns, variables, etc. — including subsequent tokenization of everything mentioned above.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"53bc\"\u003eTo explore more about tokens and tokenization processes read this: \u003ca href=\"https://medium.com/@andrzej.delgado/ui-crux-reasonable-and-scalable-design-taxonomy-for-tokens-2e97ac36830\" rel=\"noopener\"\u003e\u003cstrong\u003e\u003cem\u003eUI Crux: Reasonable and scalable taxonomy for tokens →\u003c/em\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"8706\"\u003eThe result of this stage is a designer who continuously contributes to a comprehensive collection of visual representations of design decisions that fuel the development process. Crucially, the closer these visuals created by designers align with the coding realities (standard HTML elements, CSS declarations’ outcomes, postCSS specs, Storybook controls in a testing environment, etc.), the swifter and smoother the development and integration will be.\u003c/p\u003e\u003ch2 id=\"f6a3\"\u003e\u003cstrong\u003eStage 3. Continuous Stewardship 🛡️\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"b6a5\"\u003eAt this stage, the focus shifts to independent actions carried out by a designer who assumes the role of an \u003cstrong\u003earchitect\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"bef8\"\u003eWhile it may seem counterintuitive — since all designers ‘Monitor the Fundamentals’ — an architect takes on a more strategic and system-level responsibility. Their stewardship mirrors the CI/CD process in software development, where source code is compiled, dependencies are bundled, and reproducibility across environments is ensured.\u003c/p\u003e\u003cp id=\"5128\"\u003eTo put it simply, replace the word “build” with “design”, and you’ll get the idea.\u003c/p\u003e\u003cp id=\"7b71\"\u003eHaving an architect tasked with strategizing over the design, and seeing through future code is essential to keep up with the fast-paced way code is being developed while maintaining consistency, compatibility, and quality.\u003c/p\u003e\u003cp id=\"d88c\"\u003eSuch a designer is responsible for maintaining shared vocabulary, naming conventions, and methodologies that keep searchability, compactness, consistency, and self-explanation of names and terms used across design and supporting documentation.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"b1b1\"\u003eTo dig deeper into naming conventions, check this out: \u003ca href=\"https://medium.com/@andrzej.delgado/ui-crux-naming-conventions-methodologies-for-designers-c5ce9a6b480e\" rel=\"noopener\"\u003e\u003cstrong\u003e\u003cem\u003eUI Crux: Naming Conventions \u0026amp; Methodologies for Designers →\u003c/em\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"3d19\"\u003eMoreover, evolving requirements are another challenge the architect must tackle. They keep both the designers involved as well as the design itself aligned with any potential changes or shifts in understanding the product.\u003c/p\u003e\u003cp id=\"f86e\"\u003eThe output of this stage is a designer that controls the inflow of design, its quality, dependencies, compatibility, reproducibility, and consistency across different environments, but also gatekeeping the definition and arrival of new components, their strategic importance, and ultimately keeping the total sum of all design assets under control, whilst being vigilant and responsive to evolving requirements, and sitting at the right table where these conversations happen.\u003c/p\u003e\u003cp id=\"a064\"\u003eThis stage can be subdivided into 2 branches:\u003c/p\u003e\u003col\u003e\u003cli id=\"b658\"\u003eUX branch\u003c/li\u003e\u003cli id=\"77cc\"\u003eUI branch\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"82e8\"\u003e— each leaning towards their respective fields of expertise and focus.\u003c/p\u003e\u003ch2 id=\"0d85\"\u003e\u003cstrong\u003eStage 4. Continuous Feedback 💬\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"7151\"\u003eThis stage is an inherent part of any design process. Giving, receiving, and making sense of the feedback is crucial for a successful iterative process.\u003c/p\u003e\u003cp id=\"8553\"\u003eThe outcome of this stage is a designer meeting with internal and external stakeholders, product owners, developers, and other team members involved in the project to gather feedback. This feedback is then organized, filtered, grouped, analyzed, and acted upon if necessary, and ultimately implemented if transformative to the design.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"991d\"\u003eTo learn more about that topic of Feedback, \u003ca href=\"https://jonyablonski.medium.com/effective-design-feedback-a22348c83ca2\" rel=\"noopener\"\u003eover and beyond what you may find in a Google search\u003c/a\u003e, read this article: \u003ca href=\"https://medium.com/design-bootcamp/design-feedback-how-to-give-great-design-feedback-and-how-to-receive-it-861eeec51c6f\" rel=\"noopener\"\u003e\u003cstrong\u003e\u003cem\u003eDesign Feedback: How to give great design feedback, and how to receive it →\u003c/em\u003e\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"9102\"\u003e\u003cstrong\u003eStage 5. Integration Testing ⭐️\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"6465\"\u003eThis is a critical step in the PDM pipeline. When each piece of design lands inside the design file, designers should perform rigorous testing to ensure it performs as expected under different scenarios.\u003c/p\u003e\u003cp id=\"b55e\"\u003eTypically, tests are conducted on small, isolated pieces of designs, but they have to be run in proper contexts. One of the angles of the testing is to validate the behavior and functionality of the design (components, pages, stories) as a whole, detecting any issues that may arise due to the combination of various elements or components.\u003c/p\u003e\u003cp id=\"e966\"\u003eThe outcome of this stage is a designer that employs manual or automated design analysis, assessing the quality, integration assurance, and maintainability of design, considering factors like impact and feasibility. The designer detects potential issues such as \u003ca href=\"https://en.wikipedia.org/wiki/Design_smell\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edesign smells\u003c/a\u003e, unwanted duplications, and general adherence to the design principles (either general or specific to the project). By identifying these problems early on, designers can make necessary improvements, enhancing the overall quality of the future code.\u003c/p\u003e\u003cp id=\"fa69\"\u003eWhat is worth highlighting is that by performing code-based testing (e.g., HTML/CSS), issues that might not be caught in design tools like Figma, may be uncovered. Code-based testing usually sheds light on aspects of design that would have been otherwise overlooked.\u003c/p\u003e\u003ch2 id=\"711e\"\u003e\u003cstrong\u003eStage 6. Continuous Delivery 📦\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"fe19\"\u003eContinuous Delivery takes traditional \u003cstrong\u003edesign handoff \u003c/strong\u003ea step further through the usage of design systems, automated tokens extraction, normalization of component variants, theming guardrails, and even code snippets.\u003c/p\u003e\u003cp id=\"5a0b\"\u003eThere is also room for designers to embed themselves in development tools like \u003cstrong\u003eGitHub\u003c/strong\u003e, \u003cstrong\u003eBitbucket\u003c/strong\u003e, \u003cstrong\u003eMDX\u003c/strong\u003e, \u003cstrong\u003eStorybooks\u003c/strong\u003e, and \u003cstrong\u003eChromatics\u003c/strong\u003e — the domains where developers typically thrive. For instance, Adobe XD has a plugin that integrates directly with VSCode, allowing the creation of UI packages.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"cb29\"\u003eI’m just saying, it’s not like these things are going to bite your fingers off the moment you touch them. The proliferation of such tooling in the design world would do wonders for both developers and designers alike.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"f0b8\"\u003eThe outcome of that stage is a designer who through the above-mentioned tools continuously delivers not only mockups, but also \u003cstrong\u003esystemized documentation\u003c/strong\u003e, \u003cstrong\u003ecode snippets\u003c/strong\u003e, \u003cstrong\u003edesign tokens\u003c/strong\u003e, and possibly \u003cstrong\u003eUI packages \u003c/strong\u003ewhile considering the long-term maintainability of the future code. By doing so, the designer minimizes the time required for developers to implement the code.\u003c/p\u003e\u003ch2 id=\"6266\"\u003e\u003cstrong\u003eStage 7. User Acceptance Testing/Quality Assurance 👩‍💻\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"b802\"\u003eUser Acceptance Testing (UAT) involves validating the software’s functionality, usability, and compatibility with design guidelines and requirements. This stage enables designers to provide feedback and ensures that the software adheres to all design principles.\u003c/p\u003e\u003cp id=\"c24a\"\u003eIdeally, UAT should occur in environments like \u003cstrong\u003eStorybook\u003c/strong\u003e or \u003cstrong\u003eChromatic\u003c/strong\u003e, spanning all viewports and stress-testing all breakpoints.\u003c/p\u003e\u003cp id=\"3f78\"\u003eThe outcome of this stage is a designer who checks the usually overlooked details like alignment, sizing, spacing, consistency, and length of labels, validates different language or currency variations, and inspects in look for apparent bugs. In this stage, the designer can identify ‘mis-designs’, misfits, or anomalies in real-time, in real-world environments in all viewports.\u003c/p\u003e\u003ch2 id=\"8cf4\"\u003e\u003cstrong\u003eThe Holy Grail\u003c/strong\u003e — Automation\u003cstrong\u003e 🏆\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"445c\"\u003eThe North Star, the Holy Grail of such proceduralization, and the true purpose of its existence is the \u003ca href=\"https://www.figma.com/blog/the-future-of-design-systems-is-automated/#plugins-to-automate-repetitive-tasks\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eautomation →\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"2427\"\u003eBy automating each stage of the pipeline, organizations can accelerate the design process, enhance its quality, and deliver value to end users more frequently.\u003c/p\u003e\u003cp id=\"2872\"\u003eIt is not an overstatement to say that we are at the dawn of a new era in design tools — automation is gaining momentum. New apps and platforms are popping up like mushrooms after a rainy day. Although full automation of all stages isn’t yet possible, it is extremely likely, that this scenario will materialize itself much faster than we think.\u003c/p\u003e\u003cp id=\"7fc6\"\u003eOk, let’s cut the smart talk and get down to business. Below are several design tasks that can already be automated with very decent results:\u003c/p\u003e\u003cp id=\"9c5b\"\u003e\u003cstrong\u003e1. Automated Token Generation\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"1ef3\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e:\u003c/strong\u003e Consistent design tokens across platforms and teams\u003c/li\u003e\u003cli id=\"eab3\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e:\u003c/strong\u003e \u003cstrong\u003eSupernova\u003c/strong\u003e, \u003cstrong\u003eFigma (Token Studio Plugin)\u003c/strong\u003e, \u003cstrong\u003eZeroheight\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6ee1\"\u003eThese tools allow designers to create and manage design tokens, ensuring uniformity of design decisions throughout the design system.\u003c/p\u003e\u003cp id=\"a2bd\"\u003eFor example, during a project where we adopted the Progressive Design Model, we were able to save three months from our development cycle. Before using PDM, routine design tasks like testing and documentation would require a lot of manual input, with stacked back-and-forth between designers and developers. However, by automating tasks such as design token generation and integrating them directly into the codebase, we drastically improved the efficiency of our process.\u003c/p\u003e\u003cp id=\"ce73\"\u003e\u003cstrong\u003e2. Code Snippets\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"8c47\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e:\u003c/strong\u003e Almost direct transfer of design elements into code\u003c/li\u003e\u003cli id=\"d19d\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e:\u003c/strong\u003e \u003cstrong\u003eFigma \u0026amp; VSCode\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"b233\"\u003eVisual Studio Code can integrate with Figma to provide real-time code previews by inspecting designs right from VSCode. One of the features creates code suggestion snippets directly based on designs.\u003c/p\u003e\u003cp id=\"b4ae\"\u003eWhen delivering a complex grinding system for the platform, we weren’t about to just toss our design over the wall to Engineering. Oh no — we did everything, testing all scenarios, tweaking each layout, nailing down every edge-case question, and perfecting the grid, like our lives depended on it. By the time we were done, the design wasn’t just solid — it was bulletproof, and the code snippets? Pure perfection. All done with real-time code preview in VSCode.\u003c/p\u003e\u003cp id=\"0b74\"\u003eWhen we finally handed the layouts to Engineering, you should have seen the looks on their faces during that stand-up. The CSS grid was so immaculate that one of the engineers half-joked, ‘\u003cem\u003eIf engineers had fantasies, this would be it.\u003c/em\u003e’ They were more than happy to build on top of it.”\u003c/p\u003e\u003cp id=\"cb01\"\u003eIn total, we cut the usual time spent on the tasks by about 40%, freeing up resources and giving the team more bandwidth to tackle more urgent tickets.\u003c/p\u003e\u003cp id=\"13b9\"\u003e\u003cstrong\u003e3. Design Decisions Directly to Code\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"d0ad\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e:\u003c/strong\u003e Seamless collaboration between designers and developers\u003c/li\u003e\u003cli id=\"660e\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e:\u003c/strong\u003e \u003cstrong\u003eSupernova\u003c/strong\u003e, \u003cstrong\u003eZeroheight\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"37aa\"\u003eIt boils down to connecting design data to the actual codebase. The outcome is streamlining the development workflow with an automation pipeline with direct input from designers. Supernova supports packages (similar to an npm package, for example) that transform design system data into production code.\u003c/p\u003e\u003cp id=\"f5d3\"\u003e\u003cstrong\u003e4. Component Libraries\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"d43d\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e:\u003c/strong\u003e UI Component Catalogue\u003c/li\u003e\u003cli id=\"f97c\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e:\u003c/strong\u003e \u003cstrong\u003eFigma \u0026amp; Storybook\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0cb1\"\u003eThe \u003ca href=\"https://storybook.js.org/addons/storybook-addon-designs/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edesign add-on\u003c/a\u003e for Storybook allows you to embed Figma files alongside your code-based components in Storybook. Meanwhile, the \u003ca href=\"https://www.figma.com/community/plugin/1056265616080331589/Storybook-Connect\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eStorybook plugin\u003c/a\u003e for Figma will enable you to embed stories alongside your design components in Figma. Ultimately, Storybook for Figma can be used by designers in Design Mode or by developers in Dev Mode.\u003c/p\u003e\u003cp id=\"82e0\"\u003e\u003cstrong\u003e5. Accessibility Checks\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"349a\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e:\u003c/strong\u003e Accessible designs\u003c/li\u003e\u003cli id=\"3c76\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e:\u003c/strong\u003e \u003cstrong\u003eFigma (Plugin)\u003c/strong\u003e, \u003cstrong\u003eDeque Axe\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"cb62\"\u003eThese tools can automatically check designs for \u003ca href=\"https://www.figma.com/community/plugin/1373362852131056921/wcag-plugin\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWCAG\u003c/a\u003e accessibility issues, helping designers create good experiences for all users (\u003cem\u003ewink, wink: \u003c/em\u003eit would be great to have an analog for \u003ca href=\"https://www.myndex.com/APCA/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAPCA\u003c/a\u003e).\u003c/p\u003e\u003cp id=\"1008\"\u003e\u003cstrong\u003e6. Dev Tools Integration\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"6d27\"\u003e\u003cstrong\u003e\u003cem\u003eDeliverable\u003c/em\u003e\u003c/strong\u003e: Deliver design turned into code directly to the software development platform\u003c/li\u003e\u003cli id=\"0a57\"\u003e\u003cstrong\u003e\u003cem\u003eTools\u003c/em\u003e\u003c/strong\u003e: \u003cstrong\u003eSupernova\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"ca2f\"\u003eSupernova allows integration and automation of design systems within an existing workflow — \u003ca href=\"https://docs.github.com/en/get-started/start-your-journey/about-github-and-git\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGitHub\u003c/a\u003e, Azure DevOps, Gitlab, BitBucket, or other customized \u003ca href=\"https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eREST endpoints\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"2d24\"\u003eThe Unspoken Dream\u003c/h2\u003e\u003cp id=\"ad39\"\u003eAutomation represents the unspoken dream for many within the design community — a dream of efficiency, accuracy, and seamless workflows. By fully automating every stage in the design pipeline, organizations could radically accelerate the process while enhancing quality and delivering continuous value to end users.\u003c/p\u003e\u003cp id=\"5a43\"\u003eWhile full automation isn’t quite possible yet, it’s undoubtedly closer than many might think, and new tools are sprouting up at a rapid pace.\u003c/p\u003e\u003cp id=\"cb95\"\u003eMoreover, none of these solutions are perfect, and they’re all gonna let you down at some point. But once you get a hold of yourself and stop getting lost in the maze of algorithms, you’ll be the king of the castle, the top dog — a Design Engineering trooper, focused not on mundane pixel pushing but on new exciting features that overtake your competition.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe unspoken dream of true automation in Design.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"7732\"\u003eThe Organizational Aspect of PDM\u003c/h2\u003e\u003cblockquote\u003e\u003cp id=\"b58c\"\u003eSaying all the above, let’s cut to the chase. So, how has the organizational structure for this PDM test run been laid out? Unfortunately, due to a signed NDA and strict corporate policy, I cannot disclose what the project was exactly about. However, for the purposes of this study, these details are actually not important.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"4752\"\u003eOrganizational Readiness\u003c/h2\u003e\u003cp id=\"f11a\"\u003eThe first and most important thing was to get a \u003cstrong\u003eblessing from the brass\u003c/strong\u003e. Since it’s an internal project, getting it was relatively straightforward. Let’s just say it wasn’t a walk in the park, to get everyone on the same page.\u003c/p\u003e\u003cp id=\"ead3\"\u003eNext, as a team, we checked if we had everything to launch and successfully execute everything that had been planned. Furthermore, since this was a big one for us, we also peered with our \u003cem\u003ecollective consciousness\u003c/em\u003e to, make sure there were no hidden skeletons in the closet, that may disrupt, or god forbid, derail the project completely.\u003c/p\u003e\u003cp id=\"ea85\"\u003eExamining operational readiness involved:\u003c/p\u003e\u003col\u003e\u003cli id=\"f0ce\"\u003e\u003cstrong\u003eDesign Alignment:\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cul\u003e\u003cli id=\"c9b1\"\u003e\u003cstrong\u003eShared Vision:\u003c/strong\u003e Two kick-off events were held to get a clear understanding of the project’s goals, objectives, key outcomes, and clarity on the shared vision of the project.\u003c/li\u003e\u003cli id=\"af26\"\u003e\u003cstrong\u003eDesign Principles:\u003c/strong\u003e An introductory part of the future documentation shared with the team, outlining a unified set of principles and axioms guiding the team’s decisions, and ensuring consistency and cohesiveness of the final outputs.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"fb92\"\u003e\u003cstrong\u003e2. Technical Readiness:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"7eaf\"\u003e\u003cstrong\u003eTools and Software:\u003c/strong\u003e The team got access to all necessary software and tools to efficiently complete their tasks. Figma, VSCode, Storybook.\u003c/li\u003e\u003cli id=\"520e\"\u003e\u003cstrong\u003eTechnical Knowledge:\u003c/strong\u003e All designers before the launch of the project got access to crucial knowledge sources: \u003ca href=\"https://uicrux.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003ehttps://uicrux.com\u003c/em\u003e\u003c/a\u003e, and \u003ca href=\"https://mobbin.com,\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003ehttps://mobbin.com\u003c/em\u003e,\u003c/a\u003e among others, ensuring that everyone had the technical skills required to implement their designs effectively.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6b22\"\u003e\u003cstrong\u003e3. Resource Allocation:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"3d76\"\u003e\u003cstrong\u003eTime and Budget:\u003c/strong\u003e We developed capacity and prioritization plans, set milestones, and created a roadmap with tangible deadlines. Financial resources were allocated appropriately to meet the project’s needs.\u003c/li\u003e\u003cli id=\"73b6\"\u003e\u003cstrong\u003eTeam Structure:\u003c/strong\u003e Four new hires were brought on board to ensure that the design team was sufficiently staffed. Moreover, we assigned specific roles to people with the necessary expertise, so they could drive the project consistency and ensure cohesiveness in the final deliverables.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"47bf\"\u003e\u003cstrong\u003e4. Communication and Collaboration:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"814c\"\u003e\u003cstrong\u003eClear Communication:\u003c/strong\u003e Separate communication channels were established to foster an open and transparent flow and exchange of information.\u003c/li\u003e\u003cli id=\"e659\"\u003e\u003cstrong\u003eCollaboration:\u003c/strong\u003e Effective collaboration was recognized as essential to keeping the design process efficient and productive.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"ec8b\"\u003e\u003cstrong\u003e5. Testing and Feedback:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"5eea\"\u003e\u003cstrong\u003eUser Testing:\u003c/strong\u003e Guidelines for testing alongside DoR, DoD, and UAT checklists were put in place.\u003c/li\u003e\u003cli id=\"e0d1\"\u003e\u003cstrong\u003eInternal Reviews:\u003c/strong\u003e Regular ceremonies including retrospectives were scheduled for the squads to help identify potential issues and ensure that the project stayed on track with its objectives.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"27d1\"\u003eFinally, we enlisted a seasoned scrum master to join our team as a Design Operations SME (Design Producer), well-versed in Jira. The new Design Producer ensures the team stays aligned and iterates quickly to meet rapidly evolving requirements, while guiding us through the complexities of design operations.\u003c/p\u003e\u003ch2 id=\"4cba\"\u003eWorkflow Process\u003c/h2\u003e\u003cp id=\"3efe\"\u003eOnce everyone was on board and aligned, we set up organizational scaffolding that came together perfectly with all stages of PDM.\u003c/p\u003e\u003col\u003e\u003cli id=\"042f\"\u003e\u003cstrong\u003eRoles\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"7670\"\u003eA specific role has been assigned to each designer.\u003c/p\u003e\u003cp id=\"9781\"\u003eA \u003cstrong\u003epeer\u003c/strong\u003e — a designer navigating the project’s day-to-day design tasks, and grinding through tickets. Their main tasks are ideation, research, testing, and iterative design. They are also involved in performing the art of peer-to-peer reviews — an amazing chance to share wisdom and experience.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"dbf3\"\u003eThe peer is a design-driven explorer delving into a vast ocean of product development, and ensuring a smooth voyage for himself and others on board.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"6755\"\u003eAn \u003cstrong\u003earchitect\u003c/strong\u003e — a designer, on top of peer designer’s responsibilities is steering the project through the ever-changing waters of requirements and ensuring a smooth sailing journey for all team. They maintain standardization, manage dependencies, and ensure governance throughout the project.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"d73c\"\u003eThe architect acts as the gatekeeper, the strategic overseer, ensuring that only the best, most consistent, and future-proof ideas make it through.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"3b66\"\u003e\u003cstrong\u003e2. Ceremonies\u003c/strong\u003e \u003cem\u003e(Two-week Cycles)\u003c/em\u003e\u003c/p\u003e\u003cp id=\"9f63\"\u003eThe aim of applying sprint tactics was to foster a culture of \u003cstrong\u003econtinuous design\u003c/strong\u003e, \u003cstrong\u003eintegration testing\u003c/strong\u003e, and \u003cstrong\u003econtinuous delivery\u003c/strong\u003e. Our \u003cstrong\u003eProgressive Design Model\u003c/strong\u003e game plan looked like this:\u003c/p\u003e\u003cul\u003e\u003cli id=\"befb\"\u003e\u003cstrong\u003eSprint Planning \u003c/strong\u003e(Every 2nd Monday)\u003c/li\u003e\u003cli id=\"0824\"\u003e\u003cstrong\u003eArchitect Sessions\u003c/strong\u003e (Every Thursday)\u003c/li\u003e\u003cli id=\"d844\"\u003e\u003cstrong\u003eRefinement\u003c/strong\u003e (Every 2nd Wednesday)\u003c/li\u003e\u003cli id=\"77b8\"\u003e\u003cstrong\u003eRetrospective\u003c/strong\u003e (Every 4th Friday)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1d5f\"\u003eAs a perky byproduct, designers are getting a free ticket for an honorary scrum run, gaining valuable insights and first-hand experience of the good, the bad, and the ugly of the software developers\u0026#39; ways of working.\u003c/p\u003e\u003ch2 id=\"d012\"\u003e\u003cstrong\u003eSummary 😎\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"0c1d\"\u003eWrapping up and putting in place a brief summary, it needs to be said, that although at first glance it may look like such proceduralization is an over-complication, \u003cstrong\u003eseasoned designers will likely agree, that it is not an unusual scenario when complex products’ usability gets direct hit or even it gets completely off the rails when proper processes are not in place\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"61a4\"\u003eWhen design operations turn into a free-for-all, it’s like opening the gate of cross-functional collaboration hell.\u003c/p\u003e\u003cp id=\"8b51\"\u003eAnd yes, effective communication is unquestionably the most important thing, \u003cstrong\u003ebut it is critical to realize that even the best-intentioned talks can fall short if there’s no suitable process guiding the project\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"719e\"\u003eImagine you are tackling a project characterized by:\u003c/p\u003e\u003cul\u003e\u003cli id=\"8b42\"\u003ediverse contexts,\u003c/li\u003e\u003cli id=\"d6cd\"\u003etechnical and non-technical dependencies,\u003c/li\u003e\u003cli id=\"6a73\"\u003ewith a high degree of adaptability,\u003c/li\u003e\u003cli id=\"f1be\"\u003ewhere it is essential to mind technical and business constraints,\u003c/li\u003e\u003cli id=\"3638\"\u003etake notice of various factors,\u003c/li\u003e\u003cli id=\"9b7d\"\u003eand large scope involved.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"44c8\"\u003eDealing with a project that ticks at least two of these boxes without a process or strategic outlook in place, it’s like attempting to explore a huge, foreign territory without a map. You might finally find your way, but be sure that, \u003cem\u003elike a good cake is stuffed with raisins\u003c/em\u003e, the journey will be fraught with detours, delays, and unneeded obstacles.\u003c/p\u003e\u003cp id=\"ce58\"\u003eThe Progressive Design Model (PDM) is a proceduralistic approach to prevent these ungodly scenarios, by \u003cstrong\u003eembracing\u003c/strong\u003e an \u003cstrong\u003eiterative\u003c/strong\u003e design process divided into \u003cstrong\u003emanageable steps\u003c/strong\u003e. All for the sake of allowing for \u003cstrong\u003econtinuous refinement\u003c/strong\u003e based on feedback and evolving requirements, whilst covering it with a \u003cstrong\u003efabric of well-defined governance\u003c/strong\u003e with a clear \u003cstrong\u003edivision of responsibilities\u003c/strong\u003e and \u003cstrong\u003echecks and balances\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"77ea\"\u003eIf you want to dive deeper…\u003c/h2\u003e\u003cp id=\"e92d\"\u003eHere are some articles on Design Engineering that are directly connected to the topics covered here. \u003cem\u003eGo check them out:\u003c/em\u003e\u003c/p\u003e\u003cp id=\"8289\"\u003eIf you’re interested in a different angle on the methodologies discussed here, here’s some further reading:\u003c/p\u003e\u003cp id=\"4c55\"\u003eLastly, for those interested in Design Engineering, visit \u003cstrong\u003eUI Crux: A dev-centric platform for designers\u003c/strong\u003e, where you can learn CSS and other powerful stuff.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "30 min read",
  "publishedTime": "2024-10-20T15:13:50.24Z",
  "modifiedTime": null
}
