{
  "id": "dd535ea4-b72a-4ef2-8a88-95df2e13f00a",
  "title": "Transitioning Top-Layer Entries And The Display Property In CSS",
  "link": "https://smashingmagazine.com/2025/01/transitioning-top-layer-entries-display-property-css/",
  "description": "It’s not always the big features that make our everyday lives easier; sometimes, it’s those ease-of-life features that truly enhance our projects. In this article, Brecht De Ruyte highlights two such features: `@starting-style` and `transition-behavior` — two properties that are absolutely welcome additions to your everyday work with CSS animations.",
  "author": "Brecht De Ruyte",
  "published": "Wed, 29 Jan 2025 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 19104,
  "excerpt": "It’s not always the big features that make our everyday lives easier; sometimes, it’s those ease-of-life features that truly enhance our projects. In this article, Brecht De Ruyte highlights two such features: `@starting-style` and `transition-behavior` — two properties that are absolutely welcome additions to your everyday work with CSS animations.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "13 min readCSS, Animation, Tools, TechniquesWe are getting spoiled with so many new features involving animations with CSS, from scroll-driven animations to view transitions, and plenty of things in between. But it’s not always the big features that make our everyday lives easier; sometimes, it’s those ease-of-life features that truly enhance our projects. In this article, Brecht De Ruyte puts two features on display: @starting-style and transition-behavior — two properties that are absolutely welcome additions to your everyday work with CSS animations.Animating from and to display: none; was something we could only achieve with JavaScript to change classes or create other hacks. The reason why we couldn’t do this in CSS is explained in the new CSS Transitions Level 2 specification:“In Level 1 of this specification, transitions can only start during a style change event for elements that have a defined before-change style established by the previous style change event. That means a transition could not be started on an element that was not being rendered for the previous style change event.”In simple terms, this means that we couldn’t start a transition on an element that is hidden or that has just been created.What Does transition-behavior: allow-discrete Do?allow-discrete is a bit of a strange name for a CSS property value, right? We are going on about transitioning display: none, so why isn’t this named transition-behavior: allow-display instead? The reason is that this does a bit more than handling the CSS display property, as there are other “discrete” properties in CSS. A simple rule of thumb is that discrete properties do not transition but usually flip right away between two states. Other examples of discrete properties are visibility and mix-blend-mode. I’ll include an example of these at the end of this article.To summarise, setting the transition-behavior property to allow-discrete allows us to tell the browser it can swap the values of a discrete property (e.g., display, visibility, and mix-blend-mode) at the 50% mark instead of the 0% mark of a transition.What Does @starting-style Do?The @starting-style rule defines the styles of an element right before it is rendered to the page. This is highly needed in combination with transition-behavior and this is why:When an item is added to the DOM or is initially set to display: none, it needs some sort of “starting style” from which it needs to transition. To take the example further, popovers and dialog elements are added to a top layer which is a layer that is outside of your document flow, you can kind of look at it as a sibling of the \u003chtml\u003e element in your page’s structure. Now, when opening this dialog or popover, they get created inside that top layer, so they don’t have any styles to start transitioning from, which is why we set @starting-style. Don’t worry if all of this sounds a bit confusing. The demos might make it more clearly. The important thing to know is that we can give the browser something to start the animation with since it otherwise has nothing to animate from.A Note On Browser SupportAt the moment of writing, the transition-behavior is available in Chrome, Edge, Safari, and Firefox. It’s the same for @starting-style, but Firefox currently does not support animating from display: none. But remember that everything in this article can be perfectly used as a progressive enhancement.Now that we have the theory of all this behind us, let’s get practical. I’ll be covering three use cases in this article:Animating from and to display: none in the DOM.Animating dialogs and popovers entering and exiting the top layer.More “discrete properties” we can handle.Animating From And To display: none In The DOMFor the first example, let’s take a look at @starting-style alone. I created this demo purely to explain the magic. Imagine you want two buttons on a page to add or remove list items inside of an unordered list.This could be your starting HTML:\u003cbutton type=\"button\" class=\"btn-add\"\u003e Add item \u003c/button\u003e \u003cbutton type=\"button\" class=\"btn-remove\"\u003e Remove item \u003c/button\u003e \u003cul role=\"list\"\u003e\u003c/ul\u003e Next, we add actions that add or remove those list items. This can be any method of your choosing, but for demo purposes, I quickly wrote a bit of JavaScript for it:document.addEventListener(\"DOMContentLoaded\", () =\u003e { const addButton = document.querySelector(\".btn-add\"); const removeButton = document.querySelector(\".btn-remove\"); const list = document.querySelector('ul[role=\"list\"]'); addButton.addEventListener(\"click\", () =\u003e { const newItem = document.createElement(\"li\"); list.appendChild(newItem); }); removeButton.addEventListener(\"click\", () =\u003e { if (list.lastElementChild) { list.lastElementChild.classList.add(\"removing\"); setTimeout(() =\u003e { list.removeChild(list.lastElementChild); }, 200); } }); }); When clicking the addButton, an empty list item gets created inside of the unordered list. When clicking the removeButton, the last item gets a new .removing class and finally gets taken out of the DOM after 200ms.With this in place, we can write some CSS for our items to animate the removing part:ul { li { transition: opacity 0.2s, transform 0.2s; \u0026.removing { opacity: 0; transform: translate(0, 50%); } } } This is great! Our .removing animation is already looking perfect, but what we were looking for here was a way to animate the entry of items coming inside of our DOM. For this, we will need to define those starting styles, as well as the final state of our list items.First, let’s update the CSS to have the final state inside of that list item:ul { li { opacity: 1; transform: translate(0, 0); transition: opacity 0.2s, transform 0.2s; \u0026.removing { opacity: 0; transform: translate(0, 50%); } } } Not much has changed, but now it’s up to us to let the browser know what the starting styles should be. We could set this the same way we did the .removing styles like so:ul { li { opacity: 1; transform: translate(0, 0); transition: opacity 0.2s, transform 0.2s; @starting-style { opacity: 0; transform: translate(0, 50%); } \u0026.removing { opacity: 0; transform: translate(0, 50%); } } } Now we’ve let the browser know that the @starting-style should include zero opacity and be slightly nudged to the bottom using a transform. The final result is something like this:But we don’t need to stop there! We could use different animations for entering and exiting. We could, for example, update our starting style to the following:@starting-style { opacity: 0; transform: translate(0, -50%); } Doing this, the items will enter from the top and exit to the bottom. See the full example in this CodePen:See the Pen [@starting-style demo - up-in, down-out [forked]](https://codepen.io/smashingmag/pen/XJroPgg) by utilitybend.See the Pen @starting-style demo - up-in, down-out [forked] by utilitybend.When To Use transition-behavior: allow-discreteIn the previous example, we added and removed items from our DOM. In the next demo, we will show and hide items using the CSS display property. The basic setup is pretty much the same, except we will add eight list items to our DOM with the .hidden class attached to it: \u003cbutton type=\"button\" class=\"btn-add\"\u003e Show item \u003c/button\u003e \u003cbutton type=\"button\" class=\"btn-remove\"\u003e Hide item \u003c/button\u003e \u003cul role=\"list\"\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003cli class=\"hidden\"\u003e\u003c/li\u003e \u003c/ul\u003e Once again, for demo purposes, I added a bit of JavaScript that, this time, removes the .hidden class of the next item when clicking the addButton and adds the hidden class back when clicking the removeButton:document.addEventListener(\"DOMContentLoaded\", () =\u003e { const addButton = document.querySelector(\".btn-add\"); const removeButton = document.querySelector(\".btn-remove\"); const listItems = document.querySelectorAll('ul[role=\"list\"] li'); let activeCount = 0; addButton.addEventListener(\"click\", () =\u003e { if (activeCount \u003c listItems.length) { listItems[activeCount].classList.remove(\"hidden\"); activeCount++; } }); removeButton.addEventListener(\"click\", () =\u003e { if (activeCount \u003e 0) { activeCount--; listItems[activeCount].classList.add(\"hidden\"); } }); }); Let’s put together everything we learned so far, add a @starting-style to our items, and do the basic setup in CSS:ul { li { display: block; opacity: 1; transform: translate(0, 0); transition: opacity 0.2s, transform 0.2s; @starting-style { opacity: 0; transform: translate(0, -50%); } \u0026.hidden { display: none; opacity: 0; transform: translate(0, 50%); } } } This time, we have added the .hidden class, set it to display: none, and added the same opacity and transform declarations as we previously did with the .removing class in the last example. As you might expect, we get a nice fade-in for our items, but removing them is still very abrupt as we set our items directly to display: none.This is where the transition-behavior property comes into play. To break it down a bit more, let’s remove the transition property shorthand of our previous CSS and open it up a bit:ul { li { display: block; opacity: 1; transform: translate(0, 0); transition-property: opacity, transform; transition-duration: 0.2s; } } All that is left to do is transition the display property and set the transition-behavior property to allow-discrete:ul { li { display: block; opacity: 1; transform: translate(0, 0); transition-property: opacity, transform, display; transition-duration: 0.2s; transition-behavior: allow-discrete; /* etc. */ } } We are now animating the element from display: none, and the result is exactly as we wanted it:We can use the transition shorthand property to make our code a little less verbose:transition: opacity 0.2s, transform 0.2s, display 0.2s allow-discrete; You can add allow-discrete in there. But if you do, take note that if you declare a shorthand transition after transition-behavior, it will be overruled. So, instead of this:transition-behavior: allow-discrete; transition: opacity 0.2s, transform 0.2s, display 0.2s; …we want to declare transition-behavior after the transition shorthand:transition: opacity 0.2s, transform 0.2s, display 0.2s; transition-behavior: allow-discrete; Otherwise, the transition shorthand property overrides transition-behavior.See the Pen [@starting-style and transition-behavior: allow-discrete [forked]](https://codepen.io/smashingmag/pen/GgKPXda) by utilitybend.See the Pen @starting-style and transition-behavior: allow-discrete [forked] by utilitybend.Animating Dialogs And Popovers Entering And Exiting The Top LayerLet’s add a few use cases with dialogs and popovers. Dialogs and popovers are good examples because they get added to the top layer when opening them.What Is That Top Layer?We’ve already likened the “top layer” to a sibling of the \u003chtml\u003e element, but you might also think of it as a special layer that sits above everything else on a web page. It’s like a transparent sheet that you can place over a drawing. Anything you draw on that sheet will be visible on top of the original drawing.The original drawing, in this example, is the DOM. This means that the top layer is out of the document flow, which provides us with a few benefits. For example, as I stated before, dialogs and popovers are added to this top layer, and that makes perfect sense because they should always be on top of everything else. No more z-index: 9999!But it’s more than that:z-index is irrelevant: Elements on the top layer are always on top, regardless of their z-index value.DOM hierarchy doesn’t matter: An element’s position in the DOM doesn’t affect its stacking order on the top layer.Backdrops: We get access to a new ::backdrop pseudo-element that lets us style the area between the top layer and the DOM beneath it.Hopefully, you are starting to understand the importance of the top layer and how we can transition elements in and out of it as we would with popovers and dialogues.Transitioning The Dialog Element In The Top LayerThe following HTML contains a button that opens a \u003cdialog\u003e element, and that \u003cdialog\u003e element contains another button that closes the \u003cdialog\u003e. So, we have one button that opens the \u003cdialog\u003e and one that closes it.\u003cbutton class=\"open-dialog\" data-target=\"my-modal\"\u003eShow dialog\u003c/button\u003e \u003cdialog id=\"my-modal\"\u003e \u003cp\u003eHi, there!\u003c/p\u003e \u003cbutton class=\"outline close-dialog\" data-target=\"my-modal\"\u003e close \u003c/button\u003e \u003c/dialog\u003e A lot is happening in HTML with invoker commands that will make the following step a bit easier, but for now, let’s add a bit of JavaScript to make this modal actually work:// Get all open dialog buttons. const openButtons = document.querySelectorAll(\".open-dialog\"); // Get all close dialog buttons. const closeButtons = document.querySelectorAll(\".close-dialog\"); // Add click event listeners to open buttons. openButtons.forEach((button) =\u003c { button.addEventListener(\"click\", () =\u003c { const targetId = button.getAttribute(\"data-target\"); const dialog = document.getElementById(targetId); if (dialog) { dialog.showModal(); } }); }); // Add click event listeners to close buttons. closeButtons.forEach((button) =\u003c { button.addEventListener(\"click\", () =\u003c { const targetId = button.getAttribute(\"data-target\"); const dialog = document.getElementById(targetId); if (dialog) { dialog.close(); } }); }); I’m using the following styles as a starting point. Notice how I’m styling the ::backdrop as an added bonus!dialog { padding: 30px; width: 100%; max-width: 600px; background: #fff; border-radius: 8px; border: 0; box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px; \u0026::backdrop { background-image: linear-gradient( 45deg in oklab, oklch(80% 0.4 222) 0%, oklch(35% 0.5 313) 100% ); } } This results in a pretty hard transition for the entry, meaning it’s not very smooth:Let’s add transitions to this dialog element and the backdrop. I’m going a bit faster this time because by now, you likely see the pattern and know what’s happening:dialog { opacity: 0; translate: 0 30%; transition-property: opacity, translate, display; transition-duration: 0.8s; transition-behavior: allow-discrete; \u0026[open] { opacity: 1; translate: 0 0; @starting-style { opacity: 0; translate: 0 -30%; } } } When a dialog is open, the browser slaps an open attribute on it:\u003cdialog open\u003e ... \u003c/dialog\u003e And that’s something else we can target with CSS, like dialog[open]. So, in this case, we need to set a @starting-style for when the dialog is in an open state.Let’s add a transition for our backdrop while we’re at it:dialog { /* etc. */ \u0026::backdrop { opacity: 0; transition-property: opacity; transition-duration: 1s; } \u0026[open] { /* etc. */ \u0026::backdrop { opacity: 0.8; @starting-style { opacity: 0; } } } } Now you’re probably thinking: A-ha! But you should have added the display property and the transition-behavior: allow-discrete on the backdrop!But no, that is not the case. Even if I would change my backdrop pseudo-element to the following CSS, the result would stay the same: \u0026::backdrop { opacity: 0; transition-property: opacity, display; transition-duration: 1s; transition-behavior: allow-discrete; } It turns out that we are working with a ::backdrop and when working with a ::backdrop, we’re implicitly also working with the CSS overlay property, which specifies whether an element appearing in the top layer is currently rendered in the top layer.And overlay just so happens to be another discrete property that we need to include in the transition-property declaration:dialog { /* etc. */ \u0026::backdrop { transition-property: opacity, display, overlay; /* etc. */ } Unfortunately, this is currently only supported in Chromium browsers, but it can be perfectly used as a progressive enhancement.And, yes, we need to add it to the dialog styles as well:dialog { transition-property: opacity, translate, display, overlay; /* etc. */ \u0026::backdrop { transition-property: opacity, display, overlay; /* etc. */ } See the Pen [Dialog: starting-style, transition-behavior, overlay [forked]](https://codepen.io/smashingmag/pen/pvzqOGe) by utilitybend.See the Pen Dialog: starting-style, transition-behavior, overlay [forked] by utilitybend.It’s pretty much the same thing for a popover instead of a dialog. I’m using the same technique, only working with popovers this time:See the Pen [Popover transition with @starting-style [forked]](https://codepen.io/smashingmag/pen/emObLxe) by utilitybend.See the Pen Popover transition with @starting-style [forked] by utilitybend.Other Discrete PropertiesThere are a few other discrete properties besides the ones we covered here. If you remember the second demo, where we transitioned some items from and to display: none, the same can be achieved with the visibility property instead. This can be handy for those cases where you want items to preserve space for the element’s box, even though it is invisible.So, here’s the same example, only using visibility instead of display.See the Pen [Transitioning the visibility property [forked]](https://codepen.io/smashingmag/pen/LEPMJqX) by utilitybend.See the Pen Transitioning the visibility property [forked] by utilitybend.The CSS mix-blend-mode property is another one that is considered discrete. To be completely honest, I can’t find a good use case for a demo. But I went ahead and created a somewhat trite example where two mix-blend-modes switch right in the middle of the transition instead of right away.See the Pen [Transitioning mix-blend-mode [forked]](https://codepen.io/smashingmag/pen/bNbOxZp) by utilitybend.See the Pen Transitioning mix-blend-mode [forked] by utilitybend.Wrapping UpThat’s an overview of how we can transition elements in and out of the top layer! In an ideal world, we could get away without needing a completely new property like transition-behavior just to transition otherwise “un-transitionable” properties, but here we are, and I’m glad we have it.But we also got to learn about @starting-style and how it provides browsers with a set of styles that we can apply to the start of a transition for an element that’s in the top layer. Otherwise, the element has nothing to transition from at first render, and we’d have no way to transition them smoothly in and out of the top layer. (gg, yk)",
  "image": "https://files.smashing.media/articles/transitioning-top-layer-entries-display-property-css/transitioning-top-layer-entries-display-property-css.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e13 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/css\"\u003eCSS\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/animation\"\u003eAnimation\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/tools\"\u003eTools\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/techniques\"\u003eTechniques\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eWe are getting spoiled with so many new features involving animations with CSS, from \u003ca href=\"https://www.smashingmagazine.com/2024/12/introduction-css-scroll-driven-animations/\"\u003escroll-driven animations\u003c/a\u003e to \u003ca href=\"https://www.smashingmagazine.com/2023/12/view-transitions-api-ui-animations-part1/\"\u003eview transitions\u003c/a\u003e, and plenty of things in between. But it’s not always the big features that make our everyday lives easier; sometimes, it’s those ease-of-life features that truly enhance our projects. In this article, Brecht De Ruyte puts two features on display: \u003ccode\u003e@starting-style\u003c/code\u003e and \u003ccode\u003etransition-behavior\u003c/code\u003e — two properties that are absolutely welcome additions to your everyday work with CSS animations.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eAnimating from and to \u003ccode\u003edisplay: none;\u003c/code\u003e was something we could only achieve with JavaScript to change classes or create other hacks. The reason why we couldn’t do this in CSS is explained in the new \u003ca href=\"https://www.w3.org/TR/css-transitions-2/#defining-before-change-style\"\u003eCSS Transitions Level 2 specification\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e“In Level 1 of this specification, transitions can only start during a style change event for elements that have a defined before-change style established by the previous style change event. That means a transition could not be started on an element that was not being rendered for the previous style change event.”\u003c/blockquote\u003e\u003cp\u003eIn simple terms, this means that we couldn’t start a transition on an element that is hidden or that has just been created.\u003c/p\u003e\u003ch3 id=\"what-does-transition-behavior-allow-discrete-do\"\u003eWhat Does \u003ccode\u003etransition-behavior: allow-discrete\u003c/code\u003e Do?\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eallow-discrete\u003c/code\u003e is a bit of a strange name for a CSS property value, right? We are going on about transitioning \u003ccode\u003edisplay: none\u003c/code\u003e, so why isn’t this named \u003ccode\u003etransition-behavior: allow-display\u003c/code\u003e instead? The reason is that this does a bit more than handling the CSS \u003ccode\u003edisplay\u003c/code\u003e property, as there are other “discrete” properties in CSS. A simple rule of thumb is that discrete properties do not transition but usually flip right away between two states. Other examples of discrete properties are \u003ccode\u003evisibility\u003c/code\u003e and \u003ccode\u003emix-blend-mode\u003c/code\u003e. I’ll include an example of these at the end of this article.\u003c/p\u003e\u003cp\u003eTo summarise, setting the \u003ccode\u003etransition-behavior\u003c/code\u003e property to \u003ccode\u003eallow-discrete\u003c/code\u003e allows us to tell the browser it can swap the values of a discrete property (e.g., \u003ccode\u003edisplay\u003c/code\u003e, \u003ccode\u003evisibility\u003c/code\u003e, and \u003ccode\u003emix-blend-mode\u003c/code\u003e) at the 50% mark instead of the 0% mark of a transition.\u003c/p\u003e\u003ch3 id=\"what-does-starting-style-do\"\u003eWhat Does \u003ccode\u003e@starting-style\u003c/code\u003e Do?\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003e@starting-style\u003c/code\u003e rule defines the styles of an element right before it is rendered to the page. This is highly needed in combination with \u003ccode\u003etransition-behavior\u003c/code\u003e and this is why:\u003c/p\u003e\u003cp\u003eWhen an item is added to the DOM or is initially set to \u003ccode\u003edisplay: none\u003c/code\u003e, it needs some sort of “starting style” from which it needs to transition. To take the example further, \u003ca href=\"https://css-tricks.com/clarifying-the-relationship-between-popovers-and-dialogs/\"\u003epopovers and dialog elements\u003c/a\u003e are added to a top layer which is a layer that is outside of your document flow, you can kind of look at it as a sibling of the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e element in your page’s structure. Now, when opening this dialog or popover, they get created inside that top layer, so they don’t have any styles to start transitioning from, which is why we set \u003ccode\u003e@starting-style\u003c/code\u003e. Don’t worry if all of this sounds a bit confusing. The demos might make it more clearly. The important thing to know is that we can give the browser something to start the animation with since it otherwise has nothing to animate from.\u003c/p\u003e\u003ch3 id=\"a-note-on-browser-support\"\u003eA Note On Browser Support\u003c/h3\u003e\u003cp\u003eAt the moment of writing, the \u003ccode\u003etransition-behavior\u003c/code\u003e is available in Chrome, Edge, Safari, and Firefox. It’s the same for \u003ccode\u003e@starting-style\u003c/code\u003e, but Firefox currently does not support animating from \u003ccode\u003edisplay: none\u003c/code\u003e. But remember that everything in this article can be perfectly used as a progressive enhancement.\u003c/p\u003e\u003cp\u003eNow that we have the theory of all this behind us, let’s get practical. I’ll be covering three use cases in this article:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAnimating from and to \u003ccode\u003edisplay: none\u003c/code\u003e in the DOM.\u003c/li\u003e\u003cli\u003eAnimating dialogs and popovers entering and exiting the top layer.\u003c/li\u003e\u003cli\u003eMore “discrete properties” we can handle.\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"animating-from-and-to-display-none-in-the-dom\"\u003eAnimating From And To \u003ccode\u003edisplay: none\u003c/code\u003e In The DOM\u003c/h2\u003e\u003cp\u003eFor the first example, let’s take a look at \u003ccode\u003e@starting-style\u003c/code\u003e alone. I created this demo purely to explain the magic. Imagine you want two buttons on a page to add or remove list items inside of an unordered list.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eThis could be your starting HTML:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn-add\u0026#34;\u0026gt;\n  Add item\n\u0026lt;/button\u0026gt;\n\u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn-remove\u0026#34;\u0026gt;\n  Remove item\n\u0026lt;/button\u0026gt;\n\u0026lt;ul role=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we add actions that add or remove those list items. This can be any method of your choosing, but for demo purposes, I quickly wrote a bit of JavaScript for it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; {\n  const addButton = document.querySelector(\u0026#34;.btn-add\u0026#34;);\n  const removeButton = document.querySelector(\u0026#34;.btn-remove\u0026#34;);\n  const list = document.querySelector(\u0026#39;ul[role=\u0026#34;list\u0026#34;]\u0026#39;);\n\n  addButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    const newItem = document.createElement(\u0026#34;li\u0026#34;);\n    list.appendChild(newItem);\n  });\n\n  removeButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    if (list.lastElementChild) {\n      list.lastElementChild.classList.add(\u0026#34;removing\u0026#34;);\n      setTimeout(() =\u0026gt; {\n        list.removeChild(list.lastElementChild);\n      }, 200);\n    }\n  });\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen clicking the \u003ccode\u003eaddButton\u003c/code\u003e, an empty list item gets created inside of the unordered list. When clicking the \u003ccode\u003eremoveButton\u003c/code\u003e, the last item gets a new \u003ccode\u003e.removing\u003c/code\u003e class and finally gets taken out of the DOM after 200ms.\u003c/p\u003e\u003cp\u003eWith this in place, we can write some CSS for our items to animate the removing part:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      transition: opacity 0.2s, transform 0.2s;\n\n      \u0026amp;.removing {\n        opacity: 0;\n        transform: translate(0, 50%);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eThis is great! Our \u003ccode\u003e.removing\u003c/code\u003e animation is already looking perfect, but what we were looking for here was a way to animate the entry of items coming inside of our DOM. For this, we will need to define those starting styles, as well as the final state of our list items.\u003c/p\u003e\u003cp\u003eFirst, let’s update the CSS to have the final state inside of that list item:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      opacity: 1;\n      transform: translate(0, 0);\n      transition: opacity 0.2s, transform 0.2s;\n\n      \u0026amp;.removing {\n        opacity: 0;\n        transform: translate(0, 50%);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNot much has changed, but now it’s up to us to let the browser know what the starting styles should be. We could set this the same way we did the \u003ccode\u003e.removing\u003c/code\u003e styles like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      opacity: 1;\n      transform: translate(0, 0);\n      transition: opacity 0.2s, transform 0.2s;\n\n      @starting-style {\n        opacity: 0;\n        transform: translate(0, 50%);\n      }\n\n      \u0026amp;.removing {\n        opacity: 0;\n        transform: translate(0, 50%);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we’ve let the browser know that the \u003ccode\u003e@starting-style\u003c/code\u003e should include zero opacity and be slightly nudged to the bottom using a \u003ccode\u003etransform\u003c/code\u003e. The final result is something like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eBut we don’t need to stop there! We could use different animations for entering and exiting. We could, for example, update our starting style to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e@starting-style {\n  opacity: 0;\n  transform: translate(0, -50%);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDoing this, the items will enter from the top and exit to the bottom. See the full example in this CodePen:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"XJroPgg\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [@starting-style demo - up-in, down-out [forked]](https://codepen.io/smashingmag/pen/XJroPgg) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/XJroPgg\"\u003e@starting-style demo - up-in, down-out [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"when-to-use-transition-behavior-allow-discrete\"\u003eWhen To Use \u003ccode\u003etransition-behavior: allow-discrete\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eIn the previous example, we added and removed items from our DOM. In the next demo, we will show and hide items using the CSS \u003ccode\u003edisplay\u003c/code\u003e property. The basic setup is pretty much the same, except we will add eight list items to our DOM with the \u003ccode\u003e.hidden\u003c/code\u003e class attached to it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn-add\u0026#34;\u0026gt;\n    Show item\n  \u0026lt;/button\u0026gt;\n  \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn-remove\u0026#34;\u0026gt;\n    Hide item\n  \u0026lt;/button\u0026gt;\n\n\u0026lt;ul role=\u0026#34;list\u0026#34;\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;li class=\u0026#34;hidden\u0026#34;\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce again, for demo purposes, I added a bit of JavaScript that, this time, removes the \u003ccode\u003e.hidden\u003c/code\u003e class of the next item when clicking the \u003ccode\u003eaddButton\u003c/code\u003e and adds the \u003ccode\u003ehidden\u003c/code\u003e class back when clicking the \u003ccode\u003eremoveButton\u003c/code\u003e:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; {\n  const addButton = document.querySelector(\u0026#34;.btn-add\u0026#34;);\n  const removeButton = document.querySelector(\u0026#34;.btn-remove\u0026#34;);\n  const listItems = document.querySelectorAll(\u0026#39;ul[role=\u0026#34;list\u0026#34;] li\u0026#39;);\n\n  let activeCount = 0;\n\n  addButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    if (activeCount \u0026lt; listItems.length) {\n      listItems[activeCount].classList.remove(\u0026#34;hidden\u0026#34;);\n      activeCount++;\n    }\n  });\n\n  removeButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    if (activeCount \u0026gt; 0) {\n      activeCount--;\n      listItems[activeCount].classList.add(\u0026#34;hidden\u0026#34;);\n    }\n  });\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet’s put together everything we learned so far, add a \u003ccode\u003e@starting-style\u003c/code\u003e to our items, and do the basic setup in CSS:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      display: block;\n      opacity: 1;\n      transform: translate(0, 0);\n      transition: opacity 0.2s, transform 0.2s;\n\n      @starting-style {\n        opacity: 0;\n        transform: translate(0, -50%);\n      }\n\n      \u0026amp;.hidden {\n        display: none;\n        opacity: 0;\n        transform: translate(0, 50%);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis time, we have added the \u003ccode\u003e.hidden\u003c/code\u003e class, set it to \u003ccode\u003edisplay: none\u003c/code\u003e, and added the same \u003ccode\u003eopacity\u003c/code\u003e and \u003ccode\u003etransform\u003c/code\u003e declarations as we previously did with the \u003ccode\u003e.removing\u003c/code\u003e class in the last example. As you might expect, we get a nice fade-in for our items, but removing them is still very abrupt as we set our items directly to \u003ccode\u003edisplay: none\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eThis is where the \u003ccode\u003etransition-behavior\u003c/code\u003e property comes into play. To break it down a bit more, let’s remove the \u003ccode\u003etransition\u003c/code\u003e property shorthand of our previous CSS and open it up a bit:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      display: block;\n      opacity: 1;\n      transform: translate(0, 0);\n      transition-property: opacity, transform;\n      transition-duration: 0.2s;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAll that is left to do is transition the \u003ccode\u003edisplay\u003c/code\u003e property and set the \u003ccode\u003etransition-behavior\u003c/code\u003e property to \u003ccode\u003eallow-discrete\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eul {\n    li {\n      display: block;\n      opacity: 1;\n      transform: translate(0, 0);\n      transition-property: opacity, transform, display;\n      transition-duration: 0.2s;\n      transition-behavior: allow-discrete;\n      /* etc. */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe are now animating the element from \u003ccode\u003edisplay: none\u003c/code\u003e, and the result is exactly as we wanted it:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eWe can use the \u003ccode\u003etransition\u003c/code\u003e shorthand property to make our code a little less verbose:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003etransition: opacity 0.2s, transform 0.2s, display 0.2s allow-discrete;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can add \u003ccode\u003eallow-discrete\u003c/code\u003e in there. But if you do, take note that if you declare a shorthand transition after \u003ccode\u003etransition-behavior\u003c/code\u003e, it will be overruled. So, instead of this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003etransition-behavior: allow-discrete;\ntransition: opacity 0.2s, transform 0.2s, display 0.2s;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e…we want to declare \u003ccode\u003etransition-behavior\u003c/code\u003e \u003cem\u003eafter\u003c/em\u003e the \u003ccode\u003etransition\u003c/code\u003e shorthand:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003etransition: opacity 0.2s, transform 0.2s, display 0.2s;\ntransition-behavior: allow-discrete;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOtherwise, the \u003ccode\u003etransition\u003c/code\u003e shorthand property overrides \u003ccode\u003etransition-behavior\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"GgKPXda\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [@starting-style and transition-behavior: allow-discrete [forked]](https://codepen.io/smashingmag/pen/GgKPXda) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/GgKPXda\"\u003e@starting-style and transition-behavior: allow-discrete [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"animating-dialogs-and-popovers-entering-and-exiting-the-top-layer\"\u003eAnimating Dialogs And Popovers Entering And Exiting The Top Layer\u003c/h2\u003e\u003cp\u003eLet’s add a few use cases with dialogs and popovers. Dialogs and popovers are good examples because they get added to the top layer when opening them.\u003c/p\u003e\u003ch3 id=\"what-is-that-top-layer\"\u003eWhat Is That Top Layer?\u003c/h3\u003e\u003cp\u003eWe’ve already likened the “top layer” to a sibling of the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e element, but you might also think of it as a special layer that sits above everything else on a web page. It’s like a transparent sheet that you can place over a drawing. Anything you draw on that sheet will be visible on top of the original drawing.\u003c/p\u003e\u003cp\u003eThe original drawing, in this example, is the DOM. This means that the top layer is out of the document flow, which provides us with a few benefits. For example, as I stated before, dialogs and popovers are added to this top layer, and that makes perfect sense because they should always be on top of everything else. No more \u003ccode\u003ez-index: 9999\u003c/code\u003e!\u003c/p\u003e\u003cp\u003eBut it’s more than that:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ez-index\u003c/code\u003e is irrelevant\u003c/strong\u003e: Elements on the top layer are always on top, regardless of their \u003ccode\u003ez-index\u003c/code\u003e value.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDOM hierarchy doesn’t matter\u003c/strong\u003e: An element’s position in the DOM doesn’t affect its stacking order on the top layer.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eBackdrops\u003c/strong\u003e: We get access to a new \u003ccode\u003e::backdrop\u003c/code\u003e pseudo-element that lets us style the area between the top layer and the DOM beneath it.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eHopefully, you are starting to understand the importance of the top layer and how we can transition elements in and out of it as we would with popovers and dialogues.\u003c/p\u003e\u003ch3 id=\"transitioning-the-dialog-element-in-the-top-layer\"\u003eTransitioning The Dialog Element In The Top Layer\u003c/h3\u003e\u003cp\u003eThe following HTML contains a button that opens a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element, and that \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element contains another button that closes the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e. So, we have one button that opens the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e and one that closes it.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;button class=\u0026#34;open-dialog\u0026#34; data-target=\u0026#34;my-modal\u0026#34;\u0026gt;Show dialog\u0026lt;/button\u0026gt;\n\n\u0026lt;dialog id=\u0026#34;my-modal\u0026#34;\u0026gt;\n  \u0026lt;p\u0026gt;Hi, there!\u0026lt;/p\u0026gt;\n  \u0026lt;button class=\u0026#34;outline close-dialog\u0026#34; data-target=\u0026#34;my-modal\u0026#34;\u0026gt;\n    close\n  \u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA lot is happening in HTML with \u003ca href=\"https://utilitybend.com/blog/an-update-on-invokers-invoker-commands-in-html\"\u003einvoker commands\u003c/a\u003e that will make the following step a bit easier, but for now, let’s add a bit of JavaScript to make this modal actually work:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// Get all open dialog buttons.\nconst openButtons = document.querySelectorAll(\u0026#34;.open-dialog\u0026#34;);\n// Get all close dialog buttons.\nconst closeButtons = document.querySelectorAll(\u0026#34;.close-dialog\u0026#34;);\n\n// Add click event listeners to open buttons.\nopenButtons.forEach((button) =\u0026lt; {\n  button.addEventListener(\u0026#34;click\u0026#34;, () =\u0026lt; {\n    const targetId = button.getAttribute(\u0026#34;data-target\u0026#34;);\n    const dialog = document.getElementById(targetId);\n    if (dialog) {\n      dialog.showModal();\n    }\n  });\n});\n\n// Add click event listeners to close buttons.\ncloseButtons.forEach((button) =\u0026lt; {\n  button.addEventListener(\u0026#34;click\u0026#34;, () =\u0026lt; {\n    const targetId = button.getAttribute(\u0026#34;data-target\u0026#34;);\n    const dialog = document.getElementById(targetId);\n    if (dialog) {\n      dialog.close();\n    }\n  });\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI’m using the following styles as a starting point. Notice how I’m styling the \u003ccode\u003e::backdrop\u003c/code\u003e as an added bonus!\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edialog {\n  padding: 30px;\n  width: 100%;\n  max-width: 600px;\n  background: #fff;\n  border-radius: 8px;\n  border: 0;\n  box-shadow: \n    rgba(0, 0, 0, 0.3) 0px 19px 38px,\n    rgba(0, 0, 0, 0.22) 0px 15px 12px;\n    \n  \u0026amp;::backdrop {\n    background-image: linear-gradient(\n      45deg in oklab,\n      oklch(80% 0.4 222) 0%,\n      oklch(35% 0.5 313) 100%\n    );\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis results in a pretty hard transition for the entry, meaning it’s not very smooth:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eLet’s add transitions to this dialog element and the backdrop. I’m going a bit faster this time because by now, you likely see the pattern and know what’s happening:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edialog {\n  opacity: 0;\n  translate: 0 30%;\n  transition-property: opacity, translate, display;\n  transition-duration: 0.8s;\n\n  transition-behavior: allow-discrete;\n  \n  \u0026amp;[open] {\n    opacity: 1;\n    translate: 0 0;\n\n    @starting-style {\n      opacity: 0;\n      translate: 0 -30%;\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen a dialog is open, the browser slaps an \u003ccode\u003eopen\u003c/code\u003e attribute on it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;dialog open\u0026gt; ... \u0026lt;/dialog\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd that’s something else we can target with CSS, like \u003ccode\u003edialog[open]\u003c/code\u003e. So, in this case, we need to set a \u003ccode\u003e@starting-style\u003c/code\u003e for when the dialog is in an \u003ccode\u003eopen\u003c/code\u003e state.\u003c/p\u003e\u003cp\u003eLet’s add a transition for our backdrop while we’re at it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edialog {\n  /* etc. */\n  \u0026amp;::backdrop {\n    opacity: 0;\n    transition-property: opacity;\n    transition-duration: 1s;\n  }\n\n  \u0026amp;[open] {\n    /* etc. */\n    \u0026amp;::backdrop {\n      opacity: 0.8;\n\n      @starting-style {\n        opacity: 0;\n      }\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eNow you’re probably thinking: \u003cem\u003eA-ha! But you should have added the \u003ccode\u003edisplay\u003c/code\u003e property and the \u003ccode\u003etransition-behavior: allow-discrete\u003c/code\u003e on the backdrop!\u003c/em\u003e\u003c/p\u003e\u003cp\u003eBut no, that is not the case. Even if I would change my backdrop pseudo-element to the following CSS, the result would stay the same:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e \u0026amp;::backdrop {\n    opacity: 0;\n    transition-property: opacity, display;\n    transition-duration: 1s;\n    transition-behavior: allow-discrete;\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt turns out that we are working with a \u003ccode\u003e::backdrop\u003c/code\u003e and when working with a \u003ccode\u003e::backdrop\u003c/code\u003e, we’re implicitly also working with the CSS \u003ccode\u003eoverlay\u003c/code\u003e property, which specifies whether an element appearing in the top layer is currently rendered in the top layer.\u003c/p\u003e\u003cp\u003eAnd \u003ccode\u003eoverlay\u003c/code\u003e just so happens to be another discrete property that we need to include in the \u003ccode\u003etransition-property\u003c/code\u003e declaration:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edialog {\n  /* etc. */\n\n\u0026amp;::backdrop {\n  transition-property: opacity, display, overlay;\n  /* etc. */\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUnfortunately, this is currently only supported in Chromium browsers, but it can be perfectly used as a progressive enhancement.\u003c/p\u003e\u003cp\u003eAnd, yes, we need to add it to the \u003ccode\u003edialog\u003c/code\u003e styles as well:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003edialog {\n  transition-property: opacity, translate, display, overlay;\n  /* etc. */\n\n\u0026amp;::backdrop {\n  transition-property: opacity, display, overlay;\n  /* etc. */\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"pvzqOGe\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Dialog: starting-style, transition-behavior, overlay [forked]](https://codepen.io/smashingmag/pen/pvzqOGe) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/pvzqOGe\"\u003eDialog: starting-style, transition-behavior, overlay [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIt’s pretty much the same thing for a popover instead of a dialog. I’m using the same technique, only working with popovers this time:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"emObLxe\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Popover transition with @starting-style [forked]](https://codepen.io/smashingmag/pen/emObLxe) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/emObLxe\"\u003ePopover transition with @starting-style [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"other-discrete-properties\"\u003eOther Discrete Properties\u003c/h2\u003e\u003cp\u003eThere are a few other discrete properties besides the ones we covered here. If you remember the second demo, where we transitioned some items from and to \u003ccode\u003edisplay: none\u003c/code\u003e, the same can be achieved with the \u003ccode\u003evisibility\u003c/code\u003e property instead. This can be handy for those cases where you want items to preserve space for the element’s box, even though it is invisible.\u003c/p\u003e\u003cp\u003eSo, here’s the same example, only using \u003ccode\u003evisibility\u003c/code\u003e instead of \u003ccode\u003edisplay\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"LEPMJqX\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Transitioning the visibility property [forked]](https://codepen.io/smashingmag/pen/LEPMJqX) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/LEPMJqX\"\u003eTransitioning the visibility property [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe CSS \u003cstrong\u003e\u003ccode\u003emix-blend-mode\u003c/code\u003e\u003c/strong\u003e property is another one that is considered discrete. To be completely honest, I can’t find a good use case for a demo. But I went ahead and created a somewhat trite example where two \u003ccode\u003emix-blend-mode\u003c/code\u003es switch right in the middle of the transition instead of right away.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"bNbOxZp\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Transitioning mix-blend-mode [forked]](https://codepen.io/smashingmag/pen/bNbOxZp) by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/bNbOxZp\"\u003eTransitioning mix-blend-mode [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/utilitybend\"\u003eutilitybend\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\u003cp\u003eThat’s an overview of how we can transition elements in and out of the top layer! In an ideal world, we could get away without needing a completely new property like \u003ccode\u003etransition-behavior\u003c/code\u003e just to transition otherwise “un-transitionable” properties, but here we are, and I’m glad we have it.\u003c/p\u003e\u003cp\u003eBut we also got to learn about \u003ccode\u003e@starting-style\u003c/code\u003e and how it provides browsers with a set of styles that we can apply to the start of a transition for an element that’s in the top layer. Otherwise, the element has nothing to transition from at first render, and we’d have no way to transition them smoothly in and out of the top layer.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": "2025-01-29T10:00:00Z",
  "modifiedTime": "2025-01-29T10:00:00Z"
}
