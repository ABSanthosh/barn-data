{
  "id": "262d5c43-aa17-407c-8f13-1a18c45bae20",
  "title": "Mastering SVG Arcs",
  "link": "https://smashingmagazine.com/2024/12/mastering-svg-arcs/",
  "description": "SVG arcs demystified! Akshay Gupta explains how to master radii, rotation, and arc direction to create stunning curves. Make arcs a powerful part of your SVG toolkit for creating more dynamic, intricate designs with confidence.",
  "author": "Akshay Gupta",
  "published": "Mon, 09 Dec 2024 09:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 10250,
  "excerpt": "SVG arcs demystified! Akshay Gupta explains how to master radii, rotation, and arc direction to create stunning curves. Make arcs a powerful part of your SVG toolkit for creating more dynamic, intricate designs with confidence.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "9 min readSVG, Design, CodingSVG arcs demystified! Akshay Gupta explains how to master radii, rotation, and arc direction to create stunning curves. Make arcs a powerful part of your SVG toolkit for creating more dynamic, intricate designs with confidence.So, I love drawing birds with code. Inspired by my brother’s love for birdwatching, I admire the uniqueness of their feathers, colors, and sounds. But what I notice most is the way their bodies curve and different birds can have dramatically different curves! So, I took my love for drawing with SVG graphics and used it to experiment with bird shapes. Over time, I’ve drawn enough to become incredibly adept at working with arc shapes.(Large preview)Here are a few of my recent works. Inspired by designs I came across on Dribbble, I created my versions with code. You can browse through the code for each on my CodePen.But before we dive into creating curves with arcs, please pause here and check out Myriam Frisano’s recent article, “SVG Coding Examples: Useful Recipes For Writing Vectors By Hand.” It’s an excellent primer to the SVG syntax and it will give you solid context heading into the concepts we’re covering here when it comes to mastering SVG arcs.A Quick SVG RefresherYou probably know that SVGs are crisp, infinitely scalable illustrations without pixelated degradation — vectors for the win! What you might not know is that few developers write SVG code. Why? Well, the syntax looks complicated and unfamiliar compared to, say, HTML. But trust me, once you break it down, it’s not only possible to hand-code SVG but also quite a bit of fun.Let’s make sure you’re up to speed on the SVG viewBox because it’s a key concept when it comes to the scalable part of *SVG. We’ll use the analogy of a camera, lens, and canvas to explain this concept. Think of your browser window as a camera and the SVG viewBox as the camera lens focusing on the painting of a bird you’ve created (the SVG). Imagine the painting on a large canvas that may stretch far beyond what the camera captures. The viewBox defines which part of this canvas is visible through the camera.(Large preview)Let’s say we have an SVG element that we’re sizing at 600px square with width and height attributes directly on the \u003csvg\u003e element.\u003csvg width=\"600px\" height=\"600px\"\u003e Let’s turn our attention to the viewBox attribute:\u003csvg width=\"600px\" height=\"600px\" viewBox=\"-300 -300 600 600\"\u003e The viewBox attribute defines the internal coordinate system for the SVG, with four values mapping to the SVG’s x, y, width, and height in that order.Here’s how this relates to our analogy:Camera Position and SizeThe -300, -300 represents the camera lens’ left and top edge position. Meanwhile, 600 x 600 is like the camera’s frame size, showing a specific portion of that space.Unchanging Canvas SizeChanging the x and y values adjusts where the camera points, and width and height govern how much of the canvas it frames. It doesn’t resize the actual canvas (the SVG element itself, which remains at 600×600 pixels). No matter where the camera is positioned or zoomed, the canvas itself remains fixed.So, when you adjust the viewBox coordinates, you’re simply choosing a new area of the canvas to focus on without resizing the canvas itself. This lets you control the visible area without changing the SVG’s actual display dimensions.(Large preview)You now have the context you need to learn how to work with \u003cpath\u003e elements in SVG, which is where we start working with arcs!The \u003cpath\u003e ElementWe have an \u003csvg\u003e element. And we’re viewing the element’s contents through the “lens” of a viewBox.A \u003cpath\u003e allows us to draw shapes. We have other elements for drawing shapes — namely \u003ccircle\u003e, \u003cline\u003e, and \u003cpolygon\u003e — but imagine being restricted to strict geometrical shapes as an artist. That’s where the custom \u003cpath\u003e element comes in. It’s used to draw complex shapes that cannot be created with the basic ones. Think of \u003cpath\u003e as a flexible container that lets you mix and match different drawing commands.With a single \u003cpath\u003e, you can combine multiple drawing commands into one smooth, elegant design. Today, we’re focusing on a super specific path command: arcs. In other words, what we’re doing is drawing arc shapes with \u003cpath\u003e.Here’s a quick, no-frills example that places a \u003cpath\u003e inside the \u003csvg\u003e example we looked at earlier:\u003csvg width=\"600px\" height=\"600px\" viewBox=\"-300 -300 600 600\"\u003e \u003cpath d=\"M 0 0 A 100 100 0 1 1 200 0\" fill=\"transparent\" stroke=\"black\" stroke-width=\"24\" /\u003e \u003c/svg\u003e See the Pen [Arc path animation [forked]](https://codepen.io/smashingmag/pen/bNbeQQy) by akshaygpt.See the Pen Arc path animation [forked] by akshaygpt.Now, I get it. Looking at that string of numbers for the first time is like staring into the Matrix, right? But once you get the hang of it, you’ll see that arcs aren’t as scary as they look.Let’s break down the \u003cpath\u003e in that example. We’ll break it down even further in the next section, but for now:M 0 0 moves the path to the center of the viewBox but doesn’t actually “draw” anything just yet.A 100 100 0 1 1 200 0 draws an arc with a radius of 100 in both the X and Y axes, ending at (200, 0).You can visualize the coordinate positions in red resulting from different M commands in the following demo:See the Pen [Arc Possibilities b/w 2 points [forked]](https://codepen.io/smashingmag/pen/EaYyOGW) by akshaygpt.See the Pen Arc Possibilities b/w 2 points [forked] by akshaygpt.See that? We have two points along the X-axis that are relative to the viewBox’s center, and a curved line connects them. Now, know that the numbers in an M command are setting coordinates, and the numbers in an A command draw a line along the SVG’s axes. You just drew a curve in SVG!Dissecting An ArcWe can zoom into the M and A commands even further to better understand what’s happening.\u003cpath d=\"M 0 0 A 100 100 0 1 1 200 0\" /\u003e First off, we’re working with an arc, or more accurately, an elliptical arc, which is a curved line. We know that a perfect circle is merely an ellipse with equal radii in both the X and Y directions. We can change the shape of the circle by giving it different, unmatching radii values.This is what we know so far:M0: Coordinate along the X-axis.0: Coordinate along the Y-axis.A100: Radius value in the X direction.100: Radius value in the Y direction.200: The arc’s endpoint in the X-direction.0: The arc’s endpoint in the Y-direction.There are three values in the A command that we sort of skipped. These are like “switches” in the sense that they are Boolean values that enable or disable certain things about the arc.0: Rotates the arc along the X-axis.1: Determines whether this is a “small” arc (0) with a span greater than 180° or a “large” arc (1) with a span greater than 180°.1: Sets whether the arc “sweeps” in a clockwise direction or a counter-clockwise direction, where 0 equals clockwise and 1 equals counter-clockwise.If we take this information and re-write the \u003cpath\u003e with these definitions, then it starts to come together more clearly:\u003cpath d=\" M \u003cx-coordinate\u003e \u003cy-coordinate\u003e A \u003cradius-x\u003e \u003cradius-y\u003e \u003crotation-x\u003e \u003clarge-arc-flag\u003e \u003csweep-flag\u003e \u003cendpoint-x\u003e \u003cendpoint-y\u003e \" /\u003e Maybe we can simplify that a bit using abbreviations:\u003cpath d=\" M \u003cx\u003e \u003cy\u003e A \u003crx\u003e \u003cry\u003e \u003crotation\u003e \u003carc\u003e \u003csweep\u003e \u003cex\u003e \u003cey\u003e \" /\u003e (Large preview)Let’s take this information and start playing with values to see how it behaves.Visualizing The PossibilitiesAgain, if this is the \u003cpath\u003e we’re starting with:\u003cpath d=\"M 0 0 A 100 100 0 1 1 200 0\"/\u003e Then, we can manipulate it in myriad ways. Mathematically speaking, you can create an infinite number of arcs between any two points by adjusting the parameters. Here are a few variations of an arc that we get when all we do is change the arc’s endpoints in the X (\u003cex\u003e) and Y (\u003cey\u003e) directions.See the Pen [Arc Possibilities b/w 2 points [forked]](https://codepen.io/smashingmag/pen/WbexYLV) by akshaygpt.See the Pen Arc Possibilities b/w 2 points [forked] by akshaygpt.Or, let’s control the arc’s width and height by updating its radius in the X direction (\u003crx\u003e) and the Y direction (\u003cry\u003e). If we play around with the \u003crx\u003e value, we can manipulate the arc’s height:See the Pen [Rx [forked]](https://codepen.io/smashingmag/pen/xbKOQMr) by akshaygpt.See the Pen Rx [forked] by akshaygpt.Similarly, we can manipulate the arc’s width by updating the \u003cry\u003e value:See the Pen [Ry [forked]](https://codepen.io/smashingmag/pen/mybEQvG) by akshaygpt.See the Pen Ry [forked] by akshaygpt.Let’s see what happens when we rotate the arc along its X-axis (\u003crotation\u003e). This parameter rotates the arc’s ellipse around its center. It won’t affect circles, but it’s a game-changer for ellipses.See the Pen [x-axis-rotation [forked]](https://codepen.io/smashingmag/pen/VYZjVRx) by akshaygpt.See the Pen x-axis-rotation [forked] by akshaygpt.Even with a fixed set of endpoints and radii (\u003crx\u003e and \u003cry\u003e), and a given angle of rotation, four distinct arcs can connect them. That’s because we have the \u003carc\u003e flag value that can be one of two values, as well as the \u003csweep\u003e flag that is also one of two values. Two boolean values, each with two arguments, give us four distinct possibilities.See the Pen [4 cases [forked]](https://codepen.io/smashingmag/pen/wBwWQOb) by akshaygpt.See the Pen 4 cases [forked] by akshaygpt.And lastly, adjusting the arc’s endpoint along the X (\u003cex\u003e) and Y (\u003cey\u003e) directions shifts the arc’s location without changing the overall shape.See the Pen [endx, endy [forked]](https://codepen.io/smashingmag/pen/xbKOQeL) by akshaygpt.See the Pen endx, endy [forked] by akshaygpt.Wrapping UpAnd there you have it, SVG arcs demystified! Whether you’re manipulating radii, rotation, or arc direction, you now have all the tools to master these beautiful curves. With practice, arcs will become just another part of your SVG toolkit, one that gives you the power to create more dynamic, intricate designs with confidence.So keep playing, keep experimenting, and soon you’ll be bending arcs like a pro — making your SVGs not just functional but beautifully artistic. If you enjoyed this dive into arcs, drop a like or share it with your friends. Let’s keep pushing the boundaries of what SVG can do! (gg, yk)",
  "image": "https://files.smashing.media/articles/mastering-svg-arcs/mastering-svg-arcs.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e9 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/svg\"\u003eSVG\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eSVG arcs demystified! Akshay Gupta explains how to master radii, rotation, and arc direction to create stunning curves. Make arcs a powerful part of your SVG toolkit for creating more dynamic, intricate designs with confidence.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eSo, \u003cstrong\u003eI love drawing birds with code.\u003c/strong\u003e Inspired by my brother’s love for birdwatching, I admire the uniqueness of their feathers, colors, and sounds. But what I notice most is the way their bodies curve and different birds can have dramatically different curves! So, I took my love for drawing with SVG graphics and used it to experiment with bird shapes. Over time, I’ve drawn enough to become incredibly adept at working with arc shapes.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"800\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg\" sizes=\"100vw\" alt=\"Five examples of birds drawn in SVG, including a peacock, robin, parakeet, parrot, and toucan.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/1-birds-with-code-svg.jpg\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eHere are a few of my recent works. Inspired by designs I came across on \u003ca href=\"https://dribbble.com\"\u003eDribbble\u003c/a\u003e, I created my versions with code. You can browse through the code for each on my \u003ca href=\"https://codepen.io/akshaygpt\"\u003eCodePen\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eBut before we dive into creating curves with arcs, please pause here and check out Myriam Frisano’s recent article, “\u003ca href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\"\u003eSVG Coding Examples: Useful Recipes For Writing Vectors By Hand\u003c/a\u003e.” It’s an excellent primer to the SVG syntax and it will give you solid context heading into the concepts we’re covering here when it comes to mastering \u003cstrong\u003eSVG arcs\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"a-quick-svg-refresher\"\u003eA Quick SVG Refresher\u003c/h2\u003e\u003cp\u003eYou probably know that SVGs are crisp, infinitely scalable illustrations without pixelated degradation — vectors for the win! What you might not know is that \u003cstrong\u003efew developers write SVG code.\u003c/strong\u003e Why? Well, the syntax looks complicated and unfamiliar compared to, say, HTML. But trust me, once you break it down, it’s not only possible to hand-code SVG but also quite a bit of fun.\u003c/p\u003e\u003cp\u003eLet’s make sure you’re up to speed on the SVG \u003ccode\u003eviewBox\u003c/code\u003e because it’s a key concept when it comes to the \u003cem\u003escalable\u003c/em\u003e part of *SVG. We’ll use the analogy of a camera, lens, and canvas to explain this concept. Think of your browser window as a camera and the SVG \u003ccode\u003eviewBox\u003c/code\u003e as the camera lens focusing on the painting of a bird you’ve created (the SVG). Imagine the painting on a large canvas that may stretch far beyond what the camera captures. The \u003ccode\u003eviewBox\u003c/code\u003e defines which part of this canvas is visible through the camera.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"555\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png\" sizes=\"100vw\" alt=\"Illustrating the viewBox in green, like a camera lens.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/2-svg-viewbox.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eLet’s say we have an SVG element that we’re sizing at \u003ccode\u003e600px\u003c/code\u003e square with \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes directly on the \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg width=\u0026#34;600px\u0026#34; height=\u0026#34;600px\u0026#34;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet’s turn our attention to the \u003ccode\u003eviewBox\u003c/code\u003e attribute:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg width=\u0026#34;600px\u0026#34; height=\u0026#34;600px\u0026#34; viewBox=\u0026#34;-300 -300 600 600\u0026#34;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eviewBox\u003c/code\u003e attribute defines the internal coordinate system for the SVG, with four values mapping to the SVG’s x, y, width, and height in that order.\u003c/p\u003e\u003cp\u003eHere’s how this relates to our analogy:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eCamera Position and Size\u003c/strong\u003e\u003cbr/\u003eThe \u003ccode\u003e-300, -300\u003c/code\u003e represents the camera lens’ left and top edge position. Meanwhile, \u003ccode\u003e600 x 600\u003c/code\u003e is like the camera’s frame size, showing a specific portion of that space.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eUnchanging Canvas Size\u003c/strong\u003e\u003cbr/\u003eChanging the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values adjusts where the camera points, and \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e govern how much of the canvas it frames. It doesn’t resize the actual canvas (the SVG element itself, which remains at \u003ccode\u003e600\u003c/code\u003e×\u003ccode\u003e600\u003c/code\u003e pixels). No matter where the camera is positioned or zoomed, the canvas itself remains fixed.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eSo, when you adjust the \u003ccode\u003eviewBox\u003c/code\u003e coordinates, you’re simply choosing a new area of the canvas to focus on without resizing the canvas itself. This lets you control the visible area without changing the SVG’s actual display dimensions.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"663\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png\" sizes=\"100vw\" alt=\"Demonstrating coordinates for the top-left corner (-300,-300), center (0,0), and the direction of x and y axis (left to right and top to bottom respectively) of the viewBox.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/3-coordinates-viewbox.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eYou now have the context you need to learn how to work with \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e elements in SVG, which is where we start working with arcs!\u003c/p\u003e\u003ch2 id=\"the-path-element\"\u003eThe \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e Element\u003c/h2\u003e\u003cp\u003eWe have an \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e element. And we’re viewing the element’s contents through the “lens” of a \u003ccode\u003eviewBox\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e allows us to draw shapes. We have other elements for drawing shapes — namely \u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;line\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;polygon\u0026gt;\u003c/code\u003e — but imagine being restricted to strict geometrical shapes as an artist. That’s where the custom \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e element comes in. It’s used to draw complex shapes that cannot be created with the basic ones. Think of \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e as a flexible container that lets you mix and match different drawing commands.\u003c/p\u003e\u003cp\u003eWith a single \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e, you can combine multiple drawing commands into one smooth, elegant design. Today, we’re focusing on a super specific path command: \u003cstrong\u003earcs.\u003c/strong\u003e In other words, what we’re doing is drawing arc shapes with \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eHere’s a quick, no-frills example that places a \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e inside the \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e example we looked at earlier:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg width=\u0026#34;600px\u0026#34; height=\u0026#34;600px\u0026#34; viewBox=\u0026#34;-300 -300 600 600\u0026#34;\u0026gt;\u003c/code\u003e\n  \u003ccode\u003e\u0026lt;path d=\u0026#34;M 0 0 A 100 100 0 1 1 200 0\u0026#34;\u003c/code\u003e \n    \u003ccode\u003efill=\u0026#34;transparent\u0026#34;\n    stroke=\u0026#34;black\u0026#34;\n    stroke-width=\u0026#34;24\u0026#34;\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"bNbeQQy\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Arc path animation [forked]](https://codepen.io/smashingmag/pen/bNbeQQy) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/bNbeQQy\"\u003eArc path animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eNow, I get it. Looking at that string of numbers for the first time is like staring into the Matrix, right? But once you get the hang of it, you’ll see that arcs aren’t as scary as they look.\u003c/p\u003e\u003cp\u003eLet’s break down the \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e in that example. We’ll break it down even further in the next section, but for now:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eM 0 0\u003c/code\u003e moves the path to the center of the \u003ccode\u003eviewBox\u003c/code\u003e but doesn’t actually “draw” anything just yet.\u003c/li\u003e\u003cli\u003e\u003ccode\u003eA 100 100 0 1 1 200 0\u003c/code\u003e draws an arc with a radius of \u003ccode\u003e100\u003c/code\u003e in both the X and Y axes, ending at \u003ccode\u003e(200, 0)\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou can visualize the coordinate positions in red resulting from different \u003ccode\u003eM\u003c/code\u003e commands in the following demo:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"EaYyOGW\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Arc Possibilities b/w 2 points [forked]](https://codepen.io/smashingmag/pen/EaYyOGW) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/EaYyOGW\"\u003eArc Possibilities b/w 2 points [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSee that? We have two points along the X-axis that are relative to the \u003ccode\u003eviewBox\u003c/code\u003e’s center, and a curved line connects them. Now, know that the numbers in an \u003ccode\u003eM\u003c/code\u003e command are setting coordinates, and the numbers in an \u003ccode\u003eA\u003c/code\u003e command draw a line along the SVG’s axes. You just drew a curve in SVG!\u003c/p\u003e\u003ch2 id=\"dissecting-an-arc\"\u003eDissecting An Arc\u003c/h2\u003e\u003cp\u003eWe can zoom into the \u003ccode\u003eM\u003c/code\u003e and \u003ccode\u003eA\u003c/code\u003e commands even further to better understand what’s happening.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;M 0 0 A 100 100 0 1 1 200 0\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst off, we’re working with an arc, or more accurately, an \u003cstrong\u003eelliptical arc\u003c/strong\u003e, which is a curved line. We know that a perfect circle is merely an \u003cem\u003eellipse\u003c/em\u003e with equal radii in both the X and Y directions. We can change the shape of the circle by giving it different, unmatching radii values.\u003c/p\u003e\u003cp\u003eThis is what we know so far:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003eM\u003c/code\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e:\u003c/strong\u003e Coordinate along the X-axis.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e:\u003c/strong\u003e Coordinate along the Y-axis.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e100\u003c/code\u003e:\u003c/strong\u003e Radius value in the X direction.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e100\u003c/code\u003e:\u003c/strong\u003e Radius value in the Y direction.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e200\u003c/code\u003e:\u003c/strong\u003e The arc’s endpoint in the X-direction.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e:\u003c/strong\u003e The arc’s endpoint in the Y-direction.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThere are three values in the \u003ccode\u003eA\u003c/code\u003e command that we sort of skipped. These are like “switches” in the sense that they are Boolean values that enable or disable certain things about the arc.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e:\u003c/strong\u003e Rotates the arc along the X-axis.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/strong\u003e Determines whether this is a “small” arc (\u003ccode\u003e0\u003c/code\u003e) with a span greater than 180° or a “large” arc (\u003ccode\u003e1\u003c/code\u003e) with a span greater than 180°.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e:\u003c/strong\u003e Sets whether the arc “sweeps” in a clockwise direction or a counter-clockwise direction, where \u003ccode\u003e0\u003c/code\u003e equals clockwise and \u003ccode\u003e1\u003c/code\u003e equals counter-clockwise.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf we take this information and re-write the \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e with these definitions, then it starts to come together more clearly:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;\n  M \u0026lt;x-coordinate\u0026gt; \u0026lt;y-coordinate\u0026gt; \n  A \u0026lt;radius-x\u0026gt; \u0026lt;radius-y\u0026gt; \u0026lt;rotation-x\u0026gt; \u0026lt;large-arc-flag\u0026gt; \u0026lt;sweep-flag\u0026gt; \u0026lt;endpoint-x\u0026gt; \u0026lt;endpoint-y\u0026gt;\n\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMaybe we can simplify that a bit using abbreviations:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;\n  M \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; \n  A \u0026lt;rx\u0026gt; \u0026lt;ry\u0026gt; \u0026lt;rotation\u0026gt; \u0026lt;arc\u0026gt; \u0026lt;sweep\u0026gt; \u0026lt;ex\u0026gt; \u0026lt;ey\u0026gt;\n\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"754\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png\" sizes=\"100vw\" alt=\"Illustrating an arc’s X and Y radii, as well as the amount of its rotation.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/mastering-svg-arcs/4-illustrating-arc-x-y-radii.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eLet’s take this information and start playing with values to see how it behaves.\u003c/p\u003e\u003ch2 id=\"visualizing-the-possibilities\"\u003eVisualizing The Possibilities\u003c/h2\u003e\u003cp\u003eAgain, if this is the \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e we’re starting with:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;M 0 0 A 100 100 0 1 1 200 0\u0026#34;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, we can manipulate it in myriad ways. Mathematically speaking, you can create an infinite number of arcs between any two points by adjusting the parameters. Here are a few variations of an arc that we get when all we do is change the arc’s endpoints in the X (\u003ccode\u003e\u0026lt;ex\u0026gt;\u003c/code\u003e) and Y (\u003ccode\u003e\u0026lt;ey\u0026gt;\u003c/code\u003e) directions.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"WbexYLV\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Arc Possibilities b/w 2 points [forked]](https://codepen.io/smashingmag/pen/WbexYLV) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/WbexYLV\"\u003eArc Possibilities b/w 2 points [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eOr, let’s control the arc’s width and height by updating its radius in the X direction (\u003ccode\u003e\u0026lt;rx\u0026gt;\u003c/code\u003e) and the Y direction (\u003ccode\u003e\u0026lt;ry\u0026gt;\u003c/code\u003e). If we play around with the \u003ccode\u003e\u0026lt;rx\u0026gt;\u003c/code\u003e value, we can manipulate the arc’s height:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"xbKOQMr\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Rx [forked]](https://codepen.io/smashingmag/pen/xbKOQMr) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/xbKOQMr\"\u003eRx [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSimilarly, we can manipulate the arc’s width by updating the \u003ccode\u003e\u0026lt;ry\u0026gt;\u003c/code\u003e value:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"mybEQvG\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Ry [forked]](https://codepen.io/smashingmag/pen/mybEQvG) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/mybEQvG\"\u003eRy [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eLet’s see what happens when we rotate the arc along its X-axis (\u003ccode\u003e\u0026lt;rotation\u0026gt;\u003c/code\u003e). This parameter rotates the arc’s ellipse around its center. It won’t affect circles, but it’s a game-changer for ellipses.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"VYZjVRx\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [x-axis-rotation [forked]](https://codepen.io/smashingmag/pen/VYZjVRx) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/VYZjVRx\"\u003ex-axis-rotation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eEven with a fixed set of endpoints and radii (\u003ccode\u003e\u0026lt;rx\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;ry\u0026gt;\u003c/code\u003e), and a given angle of rotation, four distinct arcs can connect them. That’s because we have the \u003ccode\u003e\u0026lt;arc\u0026gt;\u003c/code\u003e flag value that can be one of two values, as well as the \u003ccode\u003e\u0026lt;sweep\u0026gt;\u003c/code\u003e flag that is also one of two values. Two boolean values, each with two arguments, give us four distinct possibilities.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"wBwWQOb\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [4 cases [forked]](https://codepen.io/smashingmag/pen/wBwWQOb) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/wBwWQOb\"\u003e4 cases [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnd lastly, adjusting the arc’s endpoint along the X (\u003ccode\u003e\u0026lt;ex\u0026gt;\u003c/code\u003e) and Y (\u003ccode\u003e\u0026lt;ey\u0026gt;\u003c/code\u003e) directions shifts the arc’s location without changing the overall shape.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"xbKOQeL\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [endx, endy [forked]](https://codepen.io/smashingmag/pen/xbKOQeL) by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/xbKOQeL\"\u003eendx, endy [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/akshaygpt\"\u003eakshaygpt\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\u003cp\u003eAnd there you have it, SVG arcs demystified! Whether you’re manipulating radii, rotation, or arc direction, you now have all the tools to master these beautiful curves. With practice, arcs will become just another part of your SVG toolkit, one that gives you the power to create \u003cstrong\u003emore dynamic, intricate designs\u003c/strong\u003e with confidence.\u003c/p\u003e\u003cp\u003eSo keep playing, keep experimenting, and soon you’ll be bending arcs like a pro — making your SVGs not just functional but beautifully artistic. If you enjoyed this dive into arcs, drop a like or share it with your friends. Let’s keep pushing the boundaries of what SVG can do!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-12-09T09:00:00Z",
  "modifiedTime": "2024-12-09T09:00:00Z"
}
