{
  "id": "26943084-426a-4ce0-8172-7c2077f66429",
  "title": "The relation between software quality and UX",
  "link": "https://uxdesign.cc/the-relation-between-software-quality-and-ux-616350f959c0?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Filipe Nzongo",
  "published": "Mon, 26 May 2025 19:58:46 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "software-engineering",
    "ux",
    "technology",
    "quality-software",
    "design"
  ],
  "byline": "Filipe Nzongo",
  "length": 19685,
  "excerpt": "The relationship between software quality and User Experience (UX), encompassing Human-Computer Interaction (HCI), is intrinsically related and fundamental to the success of any interactive product…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "The relation between software quality and UXDoes your company’s digital product have quality?The relationship between software quality and User Experience (UX), encompassing Human-Computer Interaction (HCI), is intrinsically related and fundamental to the success of any interactive product or software. While they might appear to be distinct disciplines, they are complementary and mutually dependent in creating effective, efficient, and satisfying user experiences.The inspiration for this article originates from a fundamental insight gained during my software engineering studies at UNILINS. My scientific initiation project provided a deep dive into human-computer interaction (HCI), multimedia, and software quality. I was particularly struck by how both HCI and Software Quality prioritized a system’s intrinsic quality, moving beyond just interactive design. Even now, I consistently see software that suffers from poor design, not only from a visual standpoint but also in critical areas like information architecture and user experience (UX).In this article, I will explore the relationship between software quality and user experience, along with their conceptual connections. I will also explain why designers should learn more about software quality, as the focus on building quality software cannot be limited to just visual design; it must extend beyond that to include how the software is engineered from a technical perspective.What is software quality?Defining quality is a complex task because its nature is inherently subjective. What’s considered quality can vary significantly across projects, clients, and even cultures, making it a non-standardized concept.In the realm of computer science and software engineering, the IEEE (Institute of Electrical and Electronics Engineers) offers two perspectives: “The degree to which a system, component, or process conforms to specified requirements” or “The degree to which a system, component, or process conforms to the needs and expectations of customers or users.”Complementing this perspective, Pressman (2006, p. 580) defines software quality as “conforming to explicitly stated functional and performance requirements, explicitly documented development standards, and implicit characteristics expected of all professionally developed software.”Software quality is intrinsically related to quality assurance. My research in this field led me to develop and document a process, UXDQA, which can offer a practical perspective on how to approach this assurance.In the current landscape, the relevance of quality for business competitiveness has reached a new level. What was once seen as a differentiator is now an indispensable prerequisite for staying in the market, as pointed out by the DEVMEDIA website. With the immense and continuous demand for computer systems, organizations must consider quality a central and non-negotiable element at all stages of software development, aiming for the sustainability of their competitiveness.In other words, software quality refers to the characteristics of a software product that determine its ability to satisfy the declared and implicit needs of the user. This covers aspects like:Functionality: Does the software do what it’s supposed to do, correctly and completely? If a banking app crashes frequently, that’s a sign of a lack of quality.Reliability: Does the software operate without failures under specified conditions and for a determined period?Usability: Is the software easy for the user to learn, use, and understand?Efficiency: Does the software optimize system resources (performance, response time, resource consumption)?Maintainability: Is the software easy to modify, correct, and adapt?Portability: This isn’t just about the technical ability to move the software; for the user, it means the expectation that it will work anywhere. This includes compatibility with different hardware and software configurations. The design should anticipate that the product is accessible and functional across various devices, avoiding user exclusion unless there’s a very clear business justification for it.Security: Does the software protect data and functionalities from unauthorized access?The perception of qualityIn today’s dynamic software development landscape, characterized by an exponential demand for computer systems, quality has emerged as an undeniable factor for organizational competitiveness. It’s crucial to demystify the idea that artificial intelligence (AI) will solve all quality challenges. While AI can optimize processes and assist in fault detection, the responsibility for conceiving, designing, and ensuring the inherent quality of software remains an essentially human task, demanding discernment and meticulous attention.AI powered product for software testing. Source: Work\u0026CoFurthermore, it’s worth noting that quality itself is perceived differently by each stakeholder. While a user focuses on usability and the fulfillment of their needs, a developer might prioritize maintainability and the absence of bugs. Meanwhile, a product or project manager might be more concerned with cost, deadlines, and strategic alignment. This diversity of perspectives necessitates a multifaceted approach in the pursuit of quality.User: Their interest is primarily focused on using the software. They’re mainly concerned with ease of use, performance, the reliability of results, and the price.Developer: Quality is more geared towards the software’s internal characteristics. They also evaluate aspects of compliance with client requirements.Manager: Product quality cannot be separated from the organization’s interests, and they also control the development timeline.Given this, we can recognize that software quality isn’t merely another requirement or a formality viewed as ‘boring’ by some developers or managers. Instead, it’s a fundamental necessity that permeates the entire process of developing computer systems, essential for achieving business objectives, project goals, and, importantly, user satisfaction.The relationship between software quality and UXThe intersection of software quality and user experience (UX) is more than just a theoretical concept; it’s the bedrock of successful digital products. While they might seem like two separate fields, they are, in fact, deeply interdependent.A beautifully designed interface means little if the underlying software is buggy, slow, or unreliable. Ultimately, the true test of any software lies in how well it performs and how seamlessly users can interact with it. Indeed, software quality is an essential pillar for a good user experience. Even the most innovative design can fail if the software has problems with functionality, reliability, or performance.Let’s break down how these two crucial areas intertwine:Usability as a link: Usability is a crucial attribute of any digital product; it defines how easy user interfaces are to use. A product that is not easy to use or learn will quickly be abandoned by users. Moreover, usability is also one of the software quality principles outlined in the ISO/IEC 25010 standards. This principle includes user interface aesthetics, user error protection, and other attributes that need to be considered when designing a digital product.Impact on satisfaction: Bugs, slow performance, frequent errors, and confusing interfaces (all indicators of low software quality) inevitably lead to user frustration and dissatisfaction, often causing users to abandon a product. In contrast, quality software provides a smooth and reliable experience, boosting user satisfaction and loyalty.Trust and credibility: High-quality software conveys professionalism, trust, and credibility for a company. Quality issues can severely damage a brand’s image and erode user confidence.Efficiency and productivity: Efficient software allows users to complete their tasks quickly and without obstacles, significantly increasing their productivity.Accessibility: Software quality also ties into accessibility, ensuring that people with diverse abilities can effectively use the product. This is a vital aspect of both software quality and UX/HCI, fostering inclusive design.Software quality standardsThe world of software development is governed by a variety of quality standards, each with its unique characteristics. Selecting the most appropriate standard is a strategic decision that depends on the specifications of each project and the culture of each company. The fundamental purpose of these standards is to elevate development practices, resulting in the delivery of intrinsically higher-quality software.For this article, we’ll specifically focus on ISO/IEC 25010:2011, which was recently updated to ISO/IEC 25002:2024. This standard is widely recognized and details the following eight characteristics of software product quality:Functional suitabilityPerformance efficiencyCompatibilityUsabilityReliabilitySecurityMaintainabilityPortabilityEight software product quality characteristics. Source: SQuaRE (ISO/IEC 25010)However, applying and adhering to software quality standards, while seemingly straightforward in theory, presents a considerable practical challenge. This process demands a holistic view and meticulous verification of all system requirements and functionalities, ensuring the final product genuinely meets user needs and business objectives.In the next section, we’ll delve deeper into two crucial characteristics from ISO/IEC 25010:2011: Maintainability and Reliability. We’ll demonstrate how these attributes are intrinsically related to the use of design systems and the application of strategic visual design.The relationship between maintainability and design systemsThe ease with which a software product can be maintained and evolved is a crucial measure of its overall quality. For many designers early in their careers, the delivery and hand-off of the User Interface (UI) signals the completion of their work. However, this perspective is flawed. It’s crucial to consider the product’s future state and long-term viability post-launch. This foresight directly relates to maintainability, an attribute significantly enhanced by the implementation of a design system.In the context of maintainability, a design system serve as a unified library of reusable UI components, interaction patterns, and visual guidelines. As such, it simplifies the maintenance of your digital product and facilitates:Consistency: “Consistency in interaction design goes beyond merely reusing the same components, patterns, or elements. It’s about crafting a cohesive and predictable experience where users can navigate and interact with a product without having to relearn processes with each interaction.” (Nzongo, 2022, p.102). A design system helps ensure this consistency by establishing a shared vocabulary between designers and developers. This streamlines updates and prevents the visual and behavioral inconsistencies that might confuse users and complicate maintenance. For instance, if your company updates its brand, a design system makes it easy to refresh the UI with new colors just by changing a color token or border radius attribute.Scalability: A design system allows a product to evolve over time, maintaining its consistency without losing its established interaction models, and making it easy to add new functionalities. Take, for instance, the macOS Menu Bar, which has maintained its core design since 1984.MacOs Menu Bar. Source: Martin NobelCollaboration: Design system facilitates smoother collaboration between designers and developers. By working with a well-defined set of references and shared vocabulary, they reduce ambiguities and implementation errors.Cost reduction: According to Jules Mahe (2024), a design system can reduce the time and effort needed to design and develop new features or make changes. By reusing components and patterns, it positively impacts long-term maintenance costs.Therefore, it’s crucial to understand that a design system isn’t just a design tool. Within the scope of software quality, it establishes itself as a strategic asset that significantly boosts maintainability, decisively influencing the overall quality and longevity of the software.Product reliability is importantFrom a user’s perspective, software reliability is a cornerstone of quality. It’s crucial for a digital product to not just function, but also to convey security and credibility. Software that fails to establish this connection of trust will face significant challenges in retaining users and fostering a lasting relationship.To mitigate distrust, the visual design must align with the brand’s and product’s objectives. A banking app, for instance, should visually project the image of stability and security inherent to a financial institution, avoiding any ambiguity that could generate hesitation during the user’s first interaction.Considering this premise, let’s do a quick test: which of the following (UI) products inspires more trust, based solely on its visual design?Side-by-side comparison of two mobile login UI screens. Source: Filipe NzongoWhen visual design perfectly aligns with the software’s objectives, it becomes a powerful influencer of users’ perceived reliability. Beyond building this perception, a refined visual design can directly facilitate technology acceptance, a factor related to user experience (UX) and a user’s willingness to adopt and use the product.How software looks and feels visually is incredibly important. As David Robins and his colleagues (2010) show, design choices have the power to either foster or undermine user trust, affecting several aspects:Professionalism and credibility: A well-crafted visual design that’s consistent and aligned with the brand’s identity conveys professionalism and credibility. In contrast, an amateurish, disorganized, or inconsistent design can breed distrust and the perception of unreliable software.Clarity: Design that prioritizes clarity helps users understand how the software works and anticipate its outcomes. This reduces frustration and increases confidence in the system’s ability to perform tasks correctly.Perceptual security: Visual elements that communicate security, like padlock icons in login forms or clear warnings about destructive actions, can significantly boost user confidence in the protection of their data and the system’s integrity.Brand consistency: A visual design that faithfully reflects a brand’s values and identity can strengthen user trust in the company and, by extension, in its software products.Visual feedback: Good design provides clear visual feedback on user actions and the system’s status. This helps users understand what’s happening and trust that the software is operating as expected.It’s important to note that visual design alone doesn’t guarantee the technical reliability of software. However, it plays a critical role in the user’s perception of reliability. A technically robust software product with a visual design that conveys amateurism or insecurity will struggle to build the trust needed for adoption and continued use.Why should you study software quality?It’s important to clarify that interactive product designers aren’t expected to become experts in software quality, testing, or system architecture. However, possessing a foundational knowledge of software quality principles is of utmost importance. This understanding can even be a significant competitive differentiator, positioning you ahead of other professionals who overlook these precepts, and here’s why:Designing viable solutions: Understanding the limitations and best practices of software development empowers designers to create solutions that are not only usable and desirable but also technically viable and implementable. This comprehension helps avoid interfaces with excessive “flourishes” like those often seen in Dribbble portfolios, which, while aesthetically appealing, might be unfeasible or too costly to implement and maintain.Making informed design decisions: Grasping the impact of software quality on the user allows designers to prioritize design elements that contribute to a reliable and efficient experience. This involves, for instance, designing with good system performance or common error prevention in mind.OBS: A classic case is that Netflix and YouTube operate similarly when the platform detects a fluctuation in the user’s internet bandwidth; instead of interrupting the video, it reduces the video quality to maintain continuous playback. This is an insightful design decision, directly influenced by the understanding that software efficiency and resilience directly impact User Experience (UX).Communicating effectively with developers: A shared vocabulary related to quality facilitates communication and collaboration with the development team, ensuring that quality requirements are considered from the project’s inception.Advocating for the User: By understanding the negative impacts of poor quality on the user experience, designers can champion the prioritization of quality throughout the development process.Contributing to product strategy: Software quality directly affects market perception, customer satisfaction, and consequently, business success. Designers with this perspective can contribute more strategically to product development.Improving iteration and feedback: Knowledge of software quality principles helps designers build more effective testing and feedback processes, ultimately improving the user experience.In summary, software quality isn’t an exclusive concern of the development team. It’s a defining factor for the user experience that interactive product designers aim to create. Integrating knowledge about software quality into the design process is essential to ensure digital products are not only beautiful and easy to use but also reliable, efficient, and ultimately, successful.ConclusionThroughout this article, we’ve explored how software quality transcends the technical sphere, revealing itself as a fundamental pillar for user experience (UX). We’ve seen that while the definition of quality can be subjective and multifaceted, varying among users, developers, and product managers, it is, in its essence, the key to building successful and reliable digital products.I’ve shown how attributes from ISO/IEC 25010:2011, such as maintainability (strongly supported by a Design System as a strategic asset) and reliability (influenced by visual design aligned with objectives), are directly impacted by design decisions. It became clear that visual design isn’t just about aesthetics; it’s a powerful driver of perceived trust and technology acceptance by the user.It’s crucial to reiterate: interactive product designers don’t need to be software engineering specialists, but a foundational understanding of its quality principles is an invaluable competitive advantage. This knowledge empowers designers to create viable solutions, make informed decisions, and communicate effectively with the development team.Therefore, the concern for building quality software cannot be limited to just visual design. It must transcend and encompass how the software is conceived from an engineering perspective. Software quality is a genuinely multidisciplinary concern, where design plays a significant role in creating digital products that are robust, usable, and, above all, reliable. By embracing this holistic perspective, interactive product designers will be better equipped to create solutions that not only meet functional needs but also exceed users’ emotional expectations, building truly memorable experiences.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*vS1Hr5hB4OGqFziTS1KHCQ.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"8853\" data-testid=\"storyTitle\"\u003eThe relation between software quality and UX\u003c/h2\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"b69d\"\u003eDoes your company’s digital product have quality?\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@filipesamuel?source=post_page---byline--616350f959c0---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Filipe Nzongo\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*V1-6LL1eKR-Ij5hmvlKzCA.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"bcdd\"\u003eThe relationship between software quality and User Experience (UX), encompassing Human-Computer Interaction (HCI), is intrinsically related and fundamental to the success of any interactive product or software. While they might appear to be distinct disciplines, they are complementary and mutually dependent in creating effective, efficient, and satisfying user experiences.\u003c/p\u003e\u003cp id=\"832e\"\u003eThe inspiration for this article originates from a fundamental insight gained during my software engineering studies at UNILINS. My scientific initiation project provided a deep dive into human-computer interaction (HCI), multimedia, and software quality. I was particularly struck by how both HCI and Software Quality prioritized a system’s intrinsic quality, moving beyond just interactive design. Even now, I consistently see software that suffers from poor design, not only from a visual standpoint but also in critical areas like information architecture and user experience (UX).\u003c/p\u003e\u003cp id=\"b14f\"\u003eIn this article, I will explore the relationship between software quality and user experience, along with their conceptual connections. I will also explain why designers should learn more about software quality, as the focus on building quality software cannot be limited to just visual design; it must extend beyond that to include how the software is engineered from a technical perspective.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"8daf\"\u003eWhat is software quality?\u003c/h2\u003e\u003cp id=\"4dd5\"\u003eDefining quality is a complex task because its nature is inherently subjective. What’s considered quality can vary significantly across projects, clients, and even cultures, making it a non-standardized concept.\u003c/p\u003e\u003cp id=\"4470\"\u003eIn the realm of computer science and software engineering, the \u003ca href=\"https://ieeexplore.ieee.org/document/5989598\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIEEE (Institute of Electrical and Electronics Engineers)\u003c/a\u003e offers two perspectives: “The degree to which a system, component, or process conforms to specified requirements” or “The degree to which a system, component, or process conforms to the needs and expectations of customers or users.”\u003c/p\u003e\u003cp id=\"eafb\"\u003eComplementing this perspective, \u003ca href=\"https://intranetssn.github.io/www.ssn.net/twiki/pub/CseIntranet/CseBCS6403/PressmanBook.pdf\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePressman (2006, p. 580) \u003c/a\u003edefines software quality as “conforming to explicitly stated functional and performance requirements, explicitly documented development standards, and implicit characteristics expected of all professionally developed software.”\u003c/p\u003e\u003cp id=\"2719\"\u003eSoftware quality is intrinsically related to quality assurance. My research in this field led me to develop and document a process, \u003ca href=\"https://brasil.uxdesign.cc/https-brasil-uxdesign-cc-user-experience-design-quality-assurance-bfa9ad1c2b1d\" rel=\"noopener\" target=\"_blank\"\u003eUXDQA, which can offer a practical perspective on how to approach this assurance.\u003c/a\u003e\u003c/p\u003e\u003cp id=\"18c1\"\u003eIn the current landscape, the relevance of quality for business competitiveness has reached a new level. What was once seen as a differentiator is now an indispensable prerequisite for staying in the market, as pointed out by the \u003ca href=\"https://web.archive.org/web/20240714210759/https://www.devmedia.com.br/qualidade-de-software-engenharia-de-software-29/18209\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDEVMEDIA\u003c/a\u003e website. With the immense and continuous demand for computer systems, organizations must consider quality a central and non-negotiable element at all stages of software development, aiming for the sustainability of their competitiveness.\u003c/p\u003e\u003cp id=\"57fe\"\u003eIn other words, software quality refers to the characteristics of a software product that determine its ability to satisfy the declared and implicit needs of the user. This covers aspects like:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d4b5\"\u003e\u003cstrong\u003eFunctionality:\u003c/strong\u003e Does the software do what it’s supposed to do, correctly and completely? If a banking app crashes frequently, that’s a sign of a lack of quality.\u003c/li\u003e\u003cli id=\"9314\"\u003e\u003cstrong\u003eReliability:\u003c/strong\u003e Does the software operate without failures under specified conditions and for a determined period?\u003c/li\u003e\u003cli id=\"62ec\"\u003e\u003cstrong\u003eUsability:\u003c/strong\u003e Is the software easy for the user to learn, use, and understand?\u003c/li\u003e\u003cli id=\"0d94\"\u003e\u003cstrong\u003eEfficiency:\u003c/strong\u003e Does the software optimize system resources (performance, response time, resource consumption)?\u003c/li\u003e\u003cli id=\"7eea\"\u003e\u003cstrong\u003eMaintainability:\u003c/strong\u003e Is the software easy to modify, correct, and adapt?\u003c/li\u003e\u003cli id=\"3de1\"\u003e\u003cstrong\u003ePortability:\u003c/strong\u003e This isn’t just about the technical ability to move the software; for the user, it means the expectation that it will work anywhere. This includes compatibility with different hardware and software configurations. The design should anticipate that the product is accessible and functional across various devices, avoiding user exclusion unless there’s a very clear business justification for it.\u003c/li\u003e\u003cli id=\"e795\"\u003e\u003cstrong\u003eSecurity:\u003c/strong\u003e Does the software protect data and functionalities from unauthorized access?\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"4f0e\"\u003eThe perception of quality\u003c/h2\u003e\u003cp id=\"7dd6\"\u003eIn today’s dynamic software development landscape, characterized by an exponential demand for computer systems, quality has emerged as an undeniable factor for organizational competitiveness. It’s crucial to demystify the idea that artificial intelligence (AI) will solve all quality challenges. While AI can optimize processes and assist in fault detection, the responsibility for conceiving, designing, and ensuring the inherent quality of software remains an essentially human task, demanding discernment and meticulous attention.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAI powered product for software testing. Source: \u003ca href=\"https://work.co/news/codesail/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWork\u0026amp;Co\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"f386\"\u003eFurthermore, it’s worth noting that quality itself is perceived differently by each stakeholder. While a user focuses on usability and the fulfillment of their needs, a developer might prioritize maintainability and the absence of bugs. Meanwhile, a product or project manager might be more concerned with cost, deadlines, and strategic alignment. This diversity of perspectives necessitates a multifaceted approach in the pursuit of quality.\u003c/p\u003e\u003cul\u003e\u003cli id=\"e4a3\"\u003e\u003cstrong\u003eUser:\u003c/strong\u003e Their interest is primarily focused on using the software. They’re mainly concerned with ease of use, performance, the reliability of results, and the price.\u003c/li\u003e\u003cli id=\"f03b\"\u003e\u003cstrong\u003eDeveloper:\u003c/strong\u003e Quality is more geared towards the software’s internal characteristics. They also evaluate aspects of compliance with client requirements.\u003c/li\u003e\u003cli id=\"8bd6\"\u003e\u003cstrong\u003eManager:\u003c/strong\u003e Product quality cannot be separated from the organization’s interests, and they also control the development timeline.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"658a\"\u003eGiven this, we can recognize that software quality isn’t merely another requirement or a formality viewed as ‘boring’ by some developers or managers. Instead, it’s a fundamental necessity that permeates the entire process of developing computer systems, essential for achieving business objectives, project goals, and, importantly, user satisfaction.\u003c/p\u003e\u003ch2 id=\"3ec3\"\u003eThe relationship between software quality and UX\u003c/h2\u003e\u003cp id=\"62c0\"\u003eThe intersection of software quality and user experience (UX) is more than just a theoretical concept; it’s the bedrock of successful digital products. While they might seem like two separate fields, they are, in fact, deeply interdependent.\u003c/p\u003e\u003cp id=\"0fe2\"\u003eA beautifully designed interface means little if the underlying software is buggy, slow, or unreliable. Ultimately, the true test of any software lies in how well it performs and how seamlessly users can interact with it. Indeed, software quality is an essential pillar for a good user experience. Even the most innovative design can fail if the software has problems with functionality, reliability, or performance.\u003c/p\u003e\u003cp id=\"a538\"\u003eLet’s break down how these two crucial areas intertwine:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d340\"\u003e\u003cstrong\u003eUsability as a link:\u003c/strong\u003e Usability is a crucial attribute of any digital product; it \u003ca href=\"https://www.nngroup.com/articles/usability-101-introduction-to-usability/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edefines how easy user interfaces are to use\u003c/a\u003e. A product that is not easy to use or learn will quickly be abandoned by users. Moreover, usability is also one of the software quality principles outlined in the \u003ca href=\"https://github.com/patricksavalle/devops-project-template/blob/main/content/softwarequality.md\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eISO/IEC 25010 standards\u003c/a\u003e. This principle includes user interface aesthetics, user error protection, and other attributes that need to be considered when designing a digital product.\u003c/li\u003e\u003cli id=\"5c56\"\u003e\u003cstrong\u003eImpact on satisfaction:\u003c/strong\u003e Bugs, \u003ca href=\"https://designingforperformance.com/performance-is-ux/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eslow performance\u003c/a\u003e, frequent errors, and confusing interfaces (all indicators of low software quality) inevitably lead to \u003ca href=\"https://dl.acm.org/doi/pdf/10.14236/ewic/hci2014.3\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003euser frustration and dissatisfaction\u003c/a\u003e, often causing users to abandon a product. In contrast, quality software provides a smooth and reliable experience, boosting user satisfaction and loyalty.\u003c/li\u003e\u003cli id=\"8bd4\"\u003e\u003cstrong\u003eTrust and credibility:\u003c/strong\u003e High-quality software conveys professionalism, trust, and \u003ca href=\"https://www.interaction-design.org/literature/topics/credibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecredibility for a company\u003c/a\u003e. Quality issues can severely damage a brand’s image and erode user confidence.\u003c/li\u003e\u003cli id=\"4b03\"\u003e\u003cstrong\u003eEfficiency and productivity:\u003c/strong\u003e Efficient software allows users to complete their tasks quickly and without obstacles, significantly increasing their productivity.\u003c/li\u003e\u003cli id=\"a808\"\u003e\u003cstrong\u003eAccessibility:\u003c/strong\u003e \u003ca href=\"https://www.sciencedirect.com/science/article/abs/pii/S0167642323001090\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSoftware quality also ties into accessibility\u003c/a\u003e, ensuring that people with diverse abilities can effectively use the product. This is a vital aspect of both software quality and UX/HCI, fostering inclusive design.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"581e\"\u003eSoftware quality standards\u003c/h2\u003e\u003cp id=\"ce8a\"\u003eThe world of software development is governed by a variety of quality standards, each with its unique characteristics. Selecting the most appropriate standard is a strategic decision that depends on the specifications of each project and the culture of each company. The fundamental purpose of these standards is to elevate development practices, resulting in the delivery of intrinsically higher-quality software.\u003c/p\u003e\u003cp id=\"c0cc\"\u003eFor this article, we’ll specifically focus on \u003ca href=\"https://github.com/patricksavalle/devops-project-template/blob/main/content/softwarequality.md\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eISO/IEC 25010:2011\u003c/a\u003e, which was recently updated to \u003ca href=\"https://www.iso.org/obp/ui/en/#iso:std:iso-iec:25002:ed-1:v1:en\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eISO/IEC 25002:2024\u003c/a\u003e. This standard is widely recognized and details the following eight characteristics of software product quality:\u003c/p\u003e\u003cul\u003e\u003cli id=\"de0d\"\u003e\u003cstrong\u003eFunctional suitability\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"90a9\"\u003e\u003cstrong\u003ePerformance efficiency\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"672e\"\u003e\u003cstrong\u003eCompatibility\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"5752\"\u003e\u003cstrong\u003eUsability\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"e026\"\u003e\u003cstrong\u003eReliability\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"9776\"\u003e\u003cstrong\u003eSecurity\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"91a7\"\u003e\u003cstrong\u003eMaintainability\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"f492\"\u003e\u003cstrong\u003ePortability\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cfigcaption\u003eEight software product quality characteristics. Source: SQuaRE (ISO/IEC 25010)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"dc79\"\u003eHowever, applying and adhering to software quality standards, while seemingly straightforward in theory, presents a considerable practical challenge. This process demands a holistic view and meticulous verification of all system requirements and functionalities, ensuring the final product genuinely meets user needs and business objectives.\u003c/p\u003e\u003cp id=\"86b8\"\u003eIn the next section, we’ll delve deeper into two crucial characteristics from ISO/IEC 25010:2011: Maintainability and Reliability. We’ll demonstrate how these attributes are intrinsically related to the use of design systems and the application of strategic visual design.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"f98b\"\u003eThe relationship between maintainability and design systems\u003c/h2\u003e\u003cp id=\"f8b2\"\u003eThe ease with which a software product can be maintained and evolved is a crucial measure of its overall quality. For many designers early in their careers, the delivery and hand-off of the User Interface (UI) signals the completion of their work. However, this perspective is flawed. It’s crucial to consider the product’s future state and long-term viability post-launch. This foresight directly relates to maintainability, an attribute significantly enhanced by the implementation of a design system.\u003c/p\u003e\u003cp id=\"d448\"\u003eIn the context of maintainability, a design system serve as a unified library of reusable UI components, interaction patterns, and visual guidelines. As such, it simplifies the maintenance of your digital product and facilitates:\u003c/p\u003e\u003cul\u003e\u003cli id=\"560f\"\u003e\u003cstrong\u003eConsistency:\u003c/strong\u003e “Consistency in interaction design goes beyond merely reusing the same components, patterns, or elements. It’s about crafting a cohesive and predictable experience where users can navigate and interact with a product without having to relearn processes with each interaction.” (Nzongo, 2022, p.102). A design system helps ensure this consistency by establishing a shared vocabulary between designers and developers. This streamlines updates and prevents the visual and behavioral inconsistencies that might confuse users and complicate maintenance. For instance, if your company updates its brand, a design system makes it easy to refresh the UI with new colors just by changing a color token or border radius attribute.\u003c/li\u003e\u003cli id=\"6e65\"\u003e\u003cstrong\u003eScalability:\u003c/strong\u003e A design system \u003ca rel=\"noopener\" href=\"https://uxdesign.cc/scaling-design-systems-2d84bb0cd060\" target=\"_blank\"\u003eallows a product to evolve over time\u003c/a\u003e, maintaining its consistency without losing its established \u003ca href=\"https://www.uxmatters.com/mt/archives/2012/01/defining-an-interaction-model-the-cornerstone-of-application-design.php\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003einteraction models\u003c/a\u003e, and making it easy to add new functionalities. Take, for instance, the macOS Menu Bar, which has maintained its core design since 1984.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cfigcaption\u003eMacOs Menu Bar. Source: \u003ca href=\"https://x.com/itsnobeltech/status/1557685036211912704\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMartin Nobel\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"31f3\"\u003e\u003cstrong\u003eCollaboration:\u003c/strong\u003e \u003ca href=\"https://www.smashingmagazine.com/2023/05/design-patterns-collaborate-design-system/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDesign system facilitates smoother collaboration between designers and developers\u003c/a\u003e. By working with a well-defined set of references and shared vocabulary, they reduce ambiguities and implementation errors.\u003c/li\u003e\u003cli id=\"0a83\"\u003e\u003cstrong\u003eCost reduction:\u003c/strong\u003e According to Jules Mahe (2024), a design system can \u003ca href=\"https://zeroheight.com/blog/what-is-the-value-of-a-design-system/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ereduce the time and effort needed to design and develop\u003c/a\u003e new features or make changes. By reusing components and patterns, it positively impacts long-term maintenance costs.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"d593\"\u003eTherefore, it’s crucial to understand that a design system isn’t just a design tool. Within the scope of software quality, it establishes itself as a strategic asset that significantly boosts maintainability, decisively influencing the overall quality and longevity of the software.\u003c/p\u003e\u003ch2 id=\"8871\"\u003eProduct reliability is important\u003c/h2\u003e\u003cp id=\"834e\"\u003eFrom a user’s perspective, software reliability is a cornerstone of quality. It’s crucial for a digital product to not just function, but also to convey security and credibility. Software that fails to establish this connection of trust will face significant challenges in retaining users and fostering a lasting relationship.\u003c/p\u003e\u003cp id=\"3294\"\u003eTo mitigate distrust, the visual design must align with the brand’s and product’s objectives. A banking app, for instance, should visually project the image of stability and security inherent to a financial institution, avoiding any ambiguity that could generate hesitation during the user’s first interaction.\u003c/p\u003e\u003cp id=\"2224\"\u003eConsidering this premise, let’s do a quick test: which of the following (UI) products inspires more trust, based solely on its visual design?\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eSide-by-side comparison of two mobile login UI screens. Source: Filipe Nzongo\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"76db\"\u003eWhen visual design perfectly aligns with the software’s objectives, it becomes a powerful influencer of users’ perceived reliability. Beyond building this perception, a refined visual design can directly facilitate \u003ca href=\"https://en.wikipedia.org/wiki/Technology_acceptance_model\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003etechnology acceptance\u003c/a\u003e, a factor related to user experience (UX) and a user’s willingness to adopt and use the product.\u003c/p\u003e\u003cp id=\"ee16\"\u003eHow software looks and feels visually is incredibly important. \u003ca href=\"https://sci-hub.ru/10.1002/asi.21224\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAs David Robins and his colleagues (2010)\u003c/a\u003e show, design choices have the power to either foster or undermine user trust, affecting several aspects:\u003c/p\u003e\u003cul\u003e\u003cli id=\"6383\"\u003e\u003cstrong\u003eProfessionalism and credibility:\u003c/strong\u003e A well-crafted visual design that’s consistent and aligned with the brand’s identity conveys professionalism and credibility. In contrast, an amateurish, disorganized, or inconsistent design can \u003ca href=\"https://www.researchgate.net/publication/287796926_The_Relationship_of_UX_and_Perceptions_of_Credibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ebreed distrust and the perception of unreliable software\u003c/a\u003e.\u003c/li\u003e\u003cli id=\"c5f0\"\u003e\u003cstrong\u003eClarity:\u003c/strong\u003e \u003ca rel=\"noopener\" href=\"https://uxdesign.cc/the-importance-of-clarity-in-ux-91052e0ad4e4\" target=\"_blank\"\u003eDesign that prioritizes clarity helps users understand\u003c/a\u003e how the software works and anticipate its outcomes. This reduces frustration and increases confidence in the system’s ability to perform tasks correctly.\u003c/li\u003e\u003cli id=\"d8cf\"\u003e\u003cstrong\u003ePerceptual security:\u003c/strong\u003e \u003ca href=\"https://arxiv.org/pdf/2504.02109v1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eVisual elements that communicate security\u003c/a\u003e, like padlock icons in login forms or clear warnings about destructive actions, can significantly boost user confidence in the protection of their data and the system’s integrity.\u003c/li\u003e\u003cli id=\"43a6\"\u003e\u003cstrong\u003eBrand consistency:\u003c/strong\u003e A \u003ca href=\"https://www.forbes.com/councils/forbescommunicationscouncil/2024/12/30/the-importance-of-consistency-in-branding/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003evisual design that faithfully reflects a brand’s values \u003c/a\u003eand identity can strengthen user trust in the company and, by extension, in its software products.\u003c/li\u003e\u003cli id=\"16f1\"\u003e\u003cstrong\u003eVisual feedback:\u003c/strong\u003e \u003ca rel=\"noopener\" href=\"https://uxdesign.cc/the-importance-of-hover-states-c9312d7fd516\" target=\"_blank\"\u003eGood design provides clear visual feedback on user actions\u003c/a\u003e and the \u003ca href=\"https://www.nngroup.com/articles/visibility-system-status/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esystem’s status\u003c/a\u003e. This helps users understand what’s happening and trust that the software is operating as expected.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1642\"\u003eIt’s important to note that visual design alone doesn’t guarantee the technical reliability of software. However, it plays a critical role in the user’s perception of reliability. A technically robust software product with a visual design that conveys amateurism or insecurity will struggle to build the trust needed for adoption and continued use.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"aa00\"\u003eWhy should you study software quality?\u003c/h2\u003e\u003cp id=\"9738\"\u003eIt’s important to clarify that interactive product designers aren’t expected to become experts in software quality, testing, or system architecture. However, possessing a foundational knowledge of software quality principles is of utmost importance. This understanding can even be a significant competitive differentiator, positioning you ahead of other professionals who overlook these precepts, and here’s why:\u003c/p\u003e\u003cul\u003e\u003cli id=\"64c9\"\u003e\u003cstrong\u003eDesigning viable solutions:\u003c/strong\u003e \u003ca rel=\"noopener\" href=\"https://uxdesign.cc/design-with-the-engineering-constraints-a014aabb86dd\" target=\"_blank\"\u003eUnderstanding the limitations and best practices of software development empowers designers\u003c/a\u003e to create solutions that are not only usable and desirable but also technically viable and implementable. This comprehension helps avoid interfaces with excessive “flourishes” like those often seen in Dribbble portfolios, which, while aesthetically appealing, might be unfeasible or too costly to implement and maintain.\u003c/li\u003e\u003cli id=\"9179\"\u003e\u003cstrong\u003eMaking informed design decisions:\u003c/strong\u003e Grasping the impact of software quality on the user allows designers to prioritize design elements that contribute to a reliable and efficient experience. This involves, for instance, designing with good system performance or common error prevention in mind.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0ceb\"\u003e\u003cstrong\u003eOBS:\u003c/strong\u003e A classic case is that Netflix and YouTube operate similarly \u003ca href=\"https://netflixtechblog.com/optimizing-the-netflix-streaming-experience-with-data-science-725f04c3e834\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewhen the platform detects a fluctuation in the user’s internet bandwidth; instead of interrupting the video, it reduces the video quality to maintain continuous playback\u003c/a\u003e. This is an insightful design decision, directly influenced by the understanding that software efficiency and resilience directly impact User Experience (UX).\u003c/p\u003e\u003cul\u003e\u003cli id=\"1664\"\u003e\u003cstrong\u003eCommunicating effectively with developers:\u003c/strong\u003e A \u003ca href=\"https://www.tandfonline.com/doi/abs/10.1080/10447318.2019.1587856\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eshared vocabulary related to quality facilitates communication and collaboration\u003c/a\u003e with the development team, ensuring that quality requirements are considered from the project’s inception.\u003c/li\u003e\u003cli id=\"d9ae\"\u003e\u003cstrong\u003eAdvocating for the User:\u003c/strong\u003e By understanding the negative impacts of poor quality on the user experience, \u003ca href=\"https://en.wikipedia.org/wiki/User_advocacy\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edesigners can champion\u003c/a\u003e the prioritization of quality throughout the development process.\u003cbr/\u003e\u003cstrong\u003eContributing to product strategy:\u003c/strong\u003e Software quality directly affects market perception, customer satisfaction, and consequently, business success. \u003ca href=\"https://uxmag.com/articles/influencing-business-strategy-through-design\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDesigners with this perspective can contribute more strategically\u003c/a\u003e to product development.\u003c/li\u003e\u003cli id=\"afd8\"\u003e\u003cstrong\u003eImproving iteration and feedback:\u003c/strong\u003e Knowledge of software quality principles helps designers build more effective testing and feedback processes, ultimately improving the user experience.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0236\"\u003eIn summary, software quality isn’t an exclusive concern of the development team. It’s a defining factor for the user experience that interactive product designers aim to create. Integrating knowledge about software quality into the design process is essential to ensure digital products are not only beautiful and easy to use but also reliable, efficient, and ultimately, successful.\u003c/p\u003e\u003ch2 id=\"ec0f\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"b0d9\"\u003eThroughout this article, we’ve explored how software quality transcends the technical sphere, revealing itself as a fundamental pillar for user experience (UX). We’ve seen that while the definition of quality can be subjective and multifaceted, varying among users, developers, and product managers, it is, in its essence, the key to building successful and reliable digital products.\u003c/p\u003e\u003cp id=\"bb95\"\u003eI’ve shown how attributes from ISO/IEC 25010:2011, such as maintainability (strongly supported by a Design System as a strategic asset) and reliability (influenced by visual design aligned with objectives), are directly impacted by design decisions. It became clear that visual design isn’t just about aesthetics; it’s a powerful driver of perceived trust and technology acceptance by the user.\u003c/p\u003e\u003cp id=\"1cd7\"\u003eIt’s crucial to reiterate: interactive product designers don’t need to be software engineering specialists, but a foundational understanding of its quality principles is an invaluable competitive advantage. This knowledge empowers designers to create viable solutions, make informed decisions, and communicate effectively with the development team.\u003c/p\u003e\u003cp id=\"3e29\"\u003eTherefore, the concern for building quality software cannot be limited to just visual design. It must transcend and encompass how the software is conceived from an engineering perspective. Software quality is a genuinely multidisciplinary concern, where design plays a significant role in creating digital products that are robust, usable, and, above all, reliable. By embracing this holistic perspective, interactive product designers will be better equipped to create solutions that not only meet functional needs but also exceed users’ emotional expectations, building truly memorable experiences.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": "2025-05-26T19:58:46.602Z",
  "modifiedTime": null
}
