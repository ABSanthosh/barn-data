{
  "id": "40447a5f-8318-4e46-8dc5-e2a41cb74a76",
  "title": "Designing for AI Engineers: UI patterns you need to know",
  "link": "https://uxdesign.cc/designing-for-ai-engineers-what-ui-patterns-and-principles-you-need-to-know-8b16a5b62a61?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Eve Weinberg",
  "published": "Fri, 14 Feb 2025 21:48:19 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "artificial-intelligence",
    "ux-design",
    "ux",
    "ai",
    "startup"
  ],
  "byline": "Eve Weinberg",
  "length": 9676,
  "excerpt": "As the Head of Design at Modular AI, my team is going from 0 to 1 on a lot of AI products and workflows this year. Even though I’ve been designing for developers for years, I’ve personally had to…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "A reference article with guiding principles, patterns, and personas to help designers become more AI literate.As the Head of Design at Modular AI, my team is going from 0 to 1 on a lot of AI products and workflows this year. Even though I’ve been designing for developers for years, I’ve personally had to quickly ramp up on some AI specific topics and build out our personas, so I thought I’d share a few best practices and top references I’ve established for myself.Guiding UI principles:Condensed information is welcomed. Much like the B2B industries of data science and fintech, these personas welcome dense data — as well as it’s designed with a strong hierarchy. So, reduce those margins!Parsed metadata is the most clear. Extracting out the metadata and making it search/filter/sortable is important. Tables, side drawers, tagging systems — these are the main design system elements to refine.Remember Jakob’s law — user’s spend more time on other sites than your own. There are strong leaders in AI, such as HuggingFace and OpenAI. If they’ve established a pattern and there’s no strong reason to deviate, go with it. I know, I know, this goes against first principles, but there’s a time and a place for first principles. I’lll leave it to you to decide that for your team and roadmap.A great sources for designing for developers is Github’s design system. Here are a few of their principles that are clearly custom to the developer persona:It’s not fully shipped until it’s fastAnything added dilutes everything elsePracticality beats purityApproachable is better than simpleHalf measures are as bad as nothing at allEncourage flowFavor focus over featuresSo with those principles in mind here are some key interfaces that my team has released this year. Keep in mind my team is 4 people (2 designers \u0026 2 developers), and we’re a fast-paced start-up. Our designs are all released as MVPs at first, then iterated once live, and often built off of existing systems to get from 0 to 1 and get real external validation as fast as possible. All of the designs in this post were created by myself and Will Rust together. Design is a team sport.The screens I’ll cover:Product 1: Chat with an LLM (Simple marketing page version)As end users, we’re very familiar with chat interfaces by now. Chatting with an LLM (large language model) as a developer is almost identical to the end user experiences on AI platforms like Chat GPT, Duck Assist, or Perplexity. It’s about being as clean as possible and providing fast and concise answers.The main difference is that an AI developer is also evaluating the model in terms of it’s speed, ease of building on top of it, it’s compatibility, and deploying it.Keep it as clean as a traditional search engine, but offer a subtle 2nd layer of what’s happening under the hood, including things like links to the documentation, benchmarking data showcasing the speed of the model, and other data such as cost per token . Here is how we solved for that at Modular.UI frameworks we used: https://www.gradio.app/, Mantine, TailwindScreen 1 — simple ‘start chatting’ intro screen showing the user which model it is, what hardware it’s running on, and the traffic volume it’s handling.And of course everything is light/dark mode compatible. Here’s the darkmode version where we embedded the chat inside our developer console.Screen 2 —chat results, showing benchmarked data, as well as links to tutorials, the code, and next steps for deployment of this model.Left: Expanded benchmark results; Right: Consolidated benchmarksScreen 3 — The embedded version. For this version, we trained MAX specifically on our documentation using RAG. We started this experiment for internal users only and are hoping to release soon.A few choice references:Product 2: Model RepositoryOne of the most important things that an AI developer needs to do is evaluate GenAI models. This starts with searching through a model repository — also called a ‘model garden,’ ‘model library,’ or ‘model hub.’ For marketing/SEO reasons, this is usually a logged out experience, with the main goal being to show users all the models that your platform is compatible with, and encouraging them to log in if they want to test the model more seriously. Our model repo is live at builds.modular.comThe most important features here are essentially search and filter. You want to make sure the user can find what they’re looking for, from a large dataset of what might be hundreds to thousands of models.Screen 2 — Model detail page. This page tells the user how many variants we have of each model, how to quickly run the model locally, and how to deploy it to a GPU in the cloud if they want to.There are some fun technical details related to model parameter size, quantization, hardware compatibility, etc. But in the end it all comes down to gestalt clustering and creating the right hierarchy.Designs created by Eve Weinberg (me) and Will RustMy top references here are Huggingface (because they’re the leader in this space), Kaggle (because they have a thriving community) , together AI (because they’re Enterprise), and Replicate (because 80k hits per day is alot):Like with all successful UI, keep in mind the users mindset here. The AI developer is thinking about models in terms of what task the model can complete, the size of the model, it’s performance, and who made it.Product 3: PlaygroundA playground refers to an environment designed for experimentation, testing, and learning without the risks of affecting live systems or production environments. For AI developers, it more specifically will include things like trying out the AI models, testing prompts, and fine-tuning parameters without the need for extensive infrastructure.We’re just getting ours up and running now, so I’ll just talk about the main features and show some references.Main features:Logged in and Billing connected. Just a small note, but users usually need to connect a credit card because you’re officially running AI compute now.Sliders to control the model’s parameters, change the model entirely.Pay-as-you-go pricingLeft: Vercel; Right: GoogleThis segues perfectly into the whole console experience.Product 4: Developer ConsoleFrom a layout and information architecture perspective, this is like any other desktop console. We use tailwind, mantine, and chartjs to make ours.We got a ittle carried away with bespoke numbering for a bitThe fun UI features here are the data monitoring dashboards. If you’ve ever designed an Enterprise dashboard then the rest honestly is the same — Role based access control, billing, organization hierarchy with members inside that can invite other members, notifications, settings, etc.Product 5: DocumentationOk, let’s get into some bread and butter — Documentation! Everyone’s favorite thing to design ;) Here’s ours. This was actually my first time ever fully owning the design of a documentation site. We use Docusuarus for ours, as well as Algolia search, which has fantastic UI out of the box!https://docs.modular.com/maxAs far as the information architecture goes, we’ve discussed a few approaches here, and narrowed in on two overarching concepts:Follow the user’s JTBD (jobs to be done) — in what order do they accomplish these tasks. For us, it’s: test locally, serve, deploy to cloud, monitor, scale.Follow the architecture of your product. For us, we have a whole platform that goes from low-level GPU programming to auto-scaling in cloud, so this is also compelling for us to categorize in this way.Whichever you choose, a landing page that reiterates this is critical.Our most visited page is our ‘Quickstart’ (not surprisingly!). And we’re continuously optimizing this page for faster competition, and higher completion rates.Some references:Streamlit Docs (easier when the product surface is smaller)And as I mentioned, Algolia search is fantastic. Here’s how it looks for us:Search lightboxedSearch page allows for search across all products and versionsProduct 6: Recipes \u0026 CodeRecipes (or cookbooks) is a silly, yet standardized way, of referring to step-by-step instructions. In their most interactive form they are notebooks, where each section is executable code. In their simplest form they’re just a series of instructions with copy/paste-able code snippets.As I mentioned, we build extremely iteratively, so our MVP is truly just rendering a github code example, with metadata called out on the right. I find this this audience, the cleaner and simpler the better. The content itself is so dense, the design shouldn’t call attention to itself.A large part of the design system for these articles, is just how you render code, so having an organized system for light and darkmode is a key focus. We use mantine system for this and set our custom colors there, and you can lean on established best practices for CLI color schemes, as shown in this article: https://hamvocke.com/blog/lets-create-a-terminal-color-scheme/Design system for styling codeAnd don’t forget to have some fun with the CLI, ascii art, and clear progress bars! For UX of the CLI, I just try and teach my engineering teammates the basic 10 NNG principles, and the top one leveraged is ‘visibility of system status’.Progress bars in the terminalWhat’s next?I’m really excited to build so many more workflows and share them. I hope to focus on agentic workflows and cloud monitoring dashboards next.Two ‘low code’ agentic workflow images from the tool n8n.Bonus image — AI Engineer PersonasAs a reference, here is a genericized version of the personas that I created for Modular. Our bullseye is the ‘Solution Builder’ for now.Stay tuned, and thx for reading.Eve",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*55CbrT0QfrwejlGo5c0zag.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"326c\"\u003eA reference article with guiding principles, patterns, and personas to help designers become more AI literate.\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://evejweinberg.medium.com/?source=post_page---byline--8b16a5b62a61---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Eve Weinberg\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*yLXhJO4ZssD7eEHARz2r1w.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--8b16a5b62a61---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"cb95\"\u003eAs the Head of Design at \u003ca href=\"https://www.modular.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eModular AI\u003c/a\u003e, my team is going from 0 to 1 on a lot of AI products and workflows this year. Even though I’ve been designing for developers for years, I’ve personally had to quickly ramp up on some AI specific topics and build out our personas, so I thought I’d share a few best practices and top references I’ve established for myself.\u003c/p\u003e\u003ch2 id=\"a7aa\"\u003eGuiding UI principles:\u003c/h2\u003e\u003col\u003e\u003cli id=\"edc6\"\u003eCondensed information is welcomed. Much like the B2B industries of data science and fintech, these personas welcome dense data — as well as it’s designed with a strong hierarchy. So, reduce those margins!\u003c/li\u003e\u003cli id=\"12ba\"\u003eParsed metadata is the most clear. Extracting out the metadata and making it search/filter/sortable is important. Tables, side drawers, tagging systems — these are the main design system elements to refine.\u003c/li\u003e\u003cli id=\"48fa\"\u003eRemember \u003ca href=\"https://lawsofux.com/jakobs-law/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJakob’s law\u003c/a\u003e — user’s spend more time on other sites than your own. There are strong leaders in AI, such as HuggingFace and OpenAI. If they’ve established a pattern and there’s no strong reason to deviate, go with it. I know, I know, this goes against first principles, but there’s a time and a place for first principles. I’lll leave it to you to decide that for your team and roadmap.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"99dd\"\u003eA great sources for designing for developers is \u003ca href=\"https://primer.style/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGithub’s design system\u003c/a\u003e. Here are a few of \u003cem\u003etheir\u003c/em\u003e principles that are clearly custom to the developer persona:\u003c/p\u003e\u003cul\u003e\u003cli id=\"f1b1\"\u003eIt’s not fully shipped until it’s fast\u003c/li\u003e\u003cli id=\"a69e\"\u003eAnything added dilutes everything else\u003c/li\u003e\u003cli id=\"178a\"\u003ePracticality beats purity\u003c/li\u003e\u003cli id=\"c14f\"\u003eApproachable is better than simple\u003c/li\u003e\u003cli id=\"d1a2\"\u003eHalf measures are as bad as nothing at all\u003c/li\u003e\u003cli id=\"53b2\"\u003eEncourage flow\u003c/li\u003e\u003cli id=\"c77b\"\u003eFavor focus over features\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8608\"\u003eSo with those principles in mind here are some key interfaces that my team has released this year. Keep in mind my team is 4 people (2 designers \u0026amp; 2 developers), and we’re a fast-paced start-up. Our designs are all released as MVPs at first, then iterated once live, and often built off of existing systems to get from 0 to 1 and get real external validation as fast as possible. All of the designs in this post were created by myself and \u003ca href=\"https://www.willrust.co/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWill Rust\u003c/a\u003e together. Design is a team sport.\u003c/p\u003e\u003cp id=\"123f\"\u003eThe screens I’ll cover:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"72cf\"\u003eProduct 1: Chat with an LLM (Simple marketing page version)\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"b33f\"\u003eAs end users, we’re very familiar with chat interfaces by now. Chatting with an LLM (large language model) as a developer is almost identical to the end user experiences on AI platforms like\u003ca href=\"https://chatgpt.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e Chat GPT\u003c/a\u003e, \u003ca href=\"https://duckduckgo.com/?q=DuckDuckGo+AI+Chat\u0026amp;ia=chat\u0026amp;duckai=1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDuck Assist\u003c/a\u003e, or \u003ca href=\"https://www.perplexity.ai/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePerplexity\u003c/a\u003e. It’s about being as clean as possible and providing fast and concise answers.\u003c/p\u003e\u003cp id=\"d7ef\"\u003eThe main difference is that an AI developer is also evaluating the model in terms of it’s speed, ease of building on top of it, it’s compatibility, and deploying it.\u003c/p\u003e\u003cp id=\"3cb2\"\u003eKeep it as clean as a traditional search engine, but offer a subtle 2nd layer of what’s happening under the hood, including things like links to the documentation, benchmarking data showcasing the speed of the model, and other data such as cost per token . Here is how we solved for that at Modular.\u003c/p\u003e\u003cp id=\"2386\"\u003e\u003cstrong\u003eUI frameworks we used:\u003c/strong\u003e \u003ca href=\"https://www.gradio.app/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://www.gradio.app/\u003c/a\u003e, \u003ca href=\"https://mantine.dev/getting-started/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMantine\u003c/a\u003e, \u003ca href=\"https://tailwindcss.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTailwind\u003c/a\u003e\u003c/p\u003e\u003cp id=\"44d4\"\u003eScreen 1 — simple ‘start chatting’ intro screen showing the user which model it is, what hardware it’s running on, and the traffic volume it’s handling.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"97f6\"\u003eAnd of course everything is light/dark mode compatible. Here’s the darkmode version where we embedded the chat inside our developer console.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"f4c8\"\u003eScreen 2 —chat results, showing benchmarked data, as well as links to tutorials, the code, and next steps for deployment of this model.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eLeft: Expanded benchmark results; Right: Consolidated benchmarks\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"bf88\"\u003eScreen 3 — The embedded version. For this version, we trained MAX specifically on our documentation using RAG. We started this experiment for internal users only and are hoping to release soon.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"e373\"\u003eA few choice references:\u003c/h2\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"452e\"\u003eProduct 2: Model Repository\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"458b\"\u003eOne of the most important things that an AI developer needs to do is evaluate GenAI models. This starts with searching through a model repository — also called a ‘model garden,’ ‘model library,’ or ‘model hub.’ For marketing/SEO reasons, this is usually a logged out experience, with the main goal being to show users all the models that your platform is compatible with, and encouraging them to log in if they want to test the model more seriously. Our model repo is live at \u003ca href=\"https://builds.modular.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ebuilds.modular.com\u003c/a\u003e\u003c/p\u003e\u003cp id=\"3504\"\u003eThe most important features here are essentially search and filter. You want to make sure the user can find what they’re looking for, from a large dataset of what might be hundreds to thousands of models.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"2a76\"\u003eScreen 2 — Model detail page. This page tells the user how many variants we have of each model, how to quickly run the model locally, and how to deploy it to a GPU in the cloud if they want to.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"d7ba\"\u003eThere are some fun technical details related to model parameter size, quantization, hardware compatibility, etc. But in the end it all comes down to gestalt clustering and creating the right hierarchy.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDesigns created by Eve Weinberg (me) and \u003ca href=\"https://www.willrust.co/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWill Rust\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ecad\"\u003eMy top references here are Huggingface (because they’re the leader in this space), Kaggle (because they have a thriving community) , together AI (because they’re Enterprise), and Replicate (because 80k hits per day is alot):\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b294\"\u003eLike with all successful UI, keep in mind the users mindset here. The AI developer is thinking about models in terms of what task the model can complete, the size of the model, it’s performance, and who made it.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"8655\"\u003eProduct 3: Playground\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8cff\"\u003eA \u003cem\u003eplayground\u003c/em\u003e refers to an environment designed for experimentation, testing, and learning without the risks of affecting live systems or production environments. For AI developers, it more specifically will include things like trying out the AI models, testing prompts, and fine-tuning parameters without the need for extensive infrastructure.\u003c/p\u003e\u003cp id=\"314b\"\u003eWe’re just getting ours up and running now, so I’ll just talk about the main features and show some references.\u003c/p\u003e\u003cp id=\"e8d6\"\u003e\u003cstrong\u003eMain features:\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"4e2d\"\u003eLogged in and Billing connected. Just a small note, but users usually need to connect a credit card because you’re officially running AI compute now.\u003c/li\u003e\u003cli id=\"6dcf\"\u003eSliders to control the model’s parameters, change the model entirely.\u003c/li\u003e\u003cli id=\"357a\"\u003ePay-as-you-go pricing\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eLeft: Vercel; Right: Google\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"c932\"\u003eThis segues perfectly into the whole console experience.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"6f86\"\u003eProduct 4: Developer Console\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"3679\"\u003eFrom a layout and information architecture perspective, this is like any other desktop console. We use tailwind, mantine, and chartjs to make ours.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eWe got a ittle carried away with bespoke numbering for a bit\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"7089\"\u003eThe fun UI features here are the data monitoring dashboards. If you’ve ever designed an Enterprise dashboard then the rest honestly is the same — Role based access control, billing, organization hierarchy with members inside that can invite other members, notifications, settings, etc.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"237a\"\u003eProduct 5: Documentation\u003c/h2\u003e\u003cp id=\"f829\"\u003eOk, let’s get into some bread and butter — Documentation! Everyone’s favorite thing to design ;) \u003ca href=\"https://docs.modular.com/max/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHere’s ours\u003c/a\u003e. This was actually my first time ever fully owning the design of a documentation site. We use \u003ca href=\"https://docusaurus.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDocusuarus\u003c/a\u003e for ours, as well as \u003ca href=\"https://www.algolia.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAlgolia\u003c/a\u003e search, which has fantastic UI out of the box!\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://docs.modular.com/max\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://docs.modular.com/max\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"f7d6\"\u003eAs far as the information architecture goes, we’ve discussed a few approaches here, and narrowed in on two overarching concepts:\u003c/p\u003e\u003col\u003e\u003cli id=\"924f\"\u003eFollow the user’s JTBD (jobs to be done) — in what order do they accomplish these tasks. For us, it’s: test locally, serve, deploy to cloud, monitor, scale.\u003c/li\u003e\u003cli id=\"7824\"\u003eFollow the architecture of your product. For us, we have a whole platform that goes from low-level GPU programming to auto-scaling in cloud, so this is also compelling for us to categorize in this way.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"8947\"\u003eWhichever you choose, a landing page that reiterates this is critical.\u003c/p\u003e\u003cp id=\"c600\"\u003eOur most visited page is our ‘Quickstart’ (not surprisingly!). And we’re continuously optimizing this page for faster competition, and higher completion rates.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"590f\"\u003e\u003cstrong\u003eSome references:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://docs.streamlit.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eStreamlit Docs\u003c/a\u003e (easier when the product surface is smaller)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"0c8a\"\u003eAnd as I mentioned, Algolia search is fantastic. Here’s how it looks for us:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSearch lightboxed\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eSearch page allows for search across all products and versions\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"efb3\"\u003eProduct 6: Recipes \u0026amp; Code\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"c807\"\u003eRecipes (or cookbooks) is a silly, yet standardized way, of referring to step-by-step instructions. In their most interactive form they are notebooks, where each section is executable code. In their simplest form they’re just a series of instructions with copy/paste-able code snippets.\u003c/p\u003e\u003cp id=\"90ec\"\u003eAs I mentioned, we build extremely iteratively, so our MVP is truly just rendering a github code example, with metadata called out on the right. I find this this audience, the cleaner and simpler the better. The content itself is so dense, the design shouldn’t call attention to itself.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"b226\"\u003eA large part of the design system for these articles, is just how you render code, so having an organized system for light and darkmode is a key focus. We use \u003ca href=\"https://mantine.dev/core/code/#custom-color\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003emantine system\u003c/a\u003e for this and set our custom colors there, and you can lean on established best practices for CLI color schemes, as shown in this article: \u003ca href=\"https://hamvocke.com/blog/lets-create-a-terminal-color-scheme/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://hamvocke.com/blog/lets-create-a-terminal-color-scheme/\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDesign system for styling code\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ebc5\"\u003eAnd don’t forget to have some fun with the CLI, ascii art, and clear progress bars! For UX of the CLI, I just try and teach my engineering teammates the basic 10 NNG principles, and the top one leveraged is ‘\u003ca href=\"https://www.nngroup.com/articles/visibility-system-status/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003evisibility of system status\u003c/a\u003e’.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eProgress bars in the terminal\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"3953\"\u003eWhat’s next?\u003c/h2\u003e\u003cp id=\"2786\"\u003eI’m really excited to build so many more workflows and share them. I hope to focus on agentic workflows and cloud monitoring dashboards next.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eTwo ‘low code’ agentic workflow images from the tool \u003ca href=\"https://n8n.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003en8n\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"923b\"\u003eBonus image — AI Engineer Personas\u003c/h2\u003e\u003cp id=\"2116\"\u003eAs a reference, here is a genericized version of the personas that I created for Modular. Our bullseye is the ‘Solution Builder’ for now.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5d03\"\u003eStay tuned, and thx for reading.\u003c/p\u003e\u003cp id=\"96b4\"\u003eEve\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-02-09T18:41:00.068Z",
  "modifiedTime": null
}
