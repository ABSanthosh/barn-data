{
  "id": "2d2a4bb6-32ea-4ccf-90dc-45ba0e6db846",
  "title": "Decoding The SVG path Element: Line Commands",
  "link": "https://smashingmagazine.com/2025/06/decoding-svg-path-element-line-commands/",
  "description": "SVG is easy — until you meet `path`. However, it’s not as confusing as it initially looks. In this first installment of a pair of articles, Myriam Frisano aims to teach you the basics of `` and its sometimes mystifying commands. With simple examples and visualizations, she’ll help you understand the easy syntax and underlying rules of SVG’s most powerful element so that by the end, you’re fully able to translate SVG semantic tags into a language `path` understands.",
  "author": "Myriam Frisano",
  "published": "Mon, 09 Jun 2025 08:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 12508,
  "excerpt": "SVG is easy — until you meet `path`. However, it’s not as confusing as it initially looks. In this first installment of a pair of articles, Myriam Frisano aims to teach you the basics of `` and its sometimes mystifying commands. With simple examples and visualizations, she’ll help you understand the easy syntax and underlying rules of SVG’s most powerful element so that by the end, you’re fully able to translate SVG semantic tags into a language `path` understands.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "11 min readSVG, Coding, TechniquesSVG is easy — until you meet path. However, it’s not as confusing as it initially looks. In this first installment of a pair of articles, Myriam Frisano aims to teach you the basics of \u003cpath\u003e and its sometimes mystifying commands. With simple examples and visualizations, she’ll help you understand the easy syntax and underlying rules of SVG’s most powerful element so that by the end, you’re fully able to translate SVG semantic tags into a language path understands.In a previous article, we looked at some practical examples of how to code SVG by hand. In that guide, we covered the basics of the SVG elements rect, circle, ellipse, line, polyline, and polygon (and also g).This time around, we are going to tackle a more advanced topic, the absolute powerhouse of SVG elements: path. Don’t get me wrong; I still stand by my point that image paths are better drawn in vector programs than coded (unless you’re the type of creative who makes non-logical visual art in code — then go forth and create awe-inspiring wonders; you’re probably not the audience of this article). But when it comes to technical drawings and data visualizations, the path element unlocks a wide array of possibilities and opens up the world of hand-coded SVGs.The path syntax can be really complex. We’re going to tackle it in two separate parts. In this first installment, we’re learning all about straight and angular paths. In the second part, we’ll make lines bend, twist, and turn.Required Knowledge And Guide StructureNote: If you are unfamiliar with the basics of SVG, such as the subject of viewBox and the basic syntax of the simple elements (rect, line, g, and so on), I recommend reading my guide before diving into this one. You should also familiarize yourself with \u003ctext\u003e if you want to understand each line of code in the examples.Before we get started, I want to quickly recap how I code SVG using JavaScript. I don’t like dealing with numbers and math, and reading SVG Code with numbers filled into every attribute makes me lose all understanding of it. By giving coordinates names and having all my math easy to parse and write out, I have a much better time with this type of code, and I think you will, too.The goal of this article is more about understanding path syntax than it is about doing placement or how to leverage loops and other more basic things. So, I will not run you through the entire setup of each example. I’ll instead share snippets of the code, but they may be slightly adjusted from the CodePen or simplified to make this article easier to read. However, if there are specific questions about code that are not part of the text in the CodePen demos, the comment section is open.To keep this all framework-agnostic, the code is written in vanilla JavaScript (though, really, TypeScript is your friend the more complicated your SVG becomes, and I missed it when writing some of these).Setting Up For SuccessAs the path element relies on our understanding of some of the coordinates we plug into the commands, I think it is a lot easier if we have a bit of visual orientation. So, all of the examples will be coded on top of a visual representation of a traditional viewBox setup with the origin in the top-left corner (so, values in the shape of 0 0 ${width} ${height}.I added text labels as well to make it easier to point you to specific areas within the grid.Please note that I recommend being careful when adding text within the \u003ctext\u003e element in SVG if you want your text to be accessible. If the graphic relies on text scaling like the rest of your website, it would be better to have it rendered through HTML. But for our examples here, it should be sufficient.So, this is what we’ll be plotting on top of:See the Pen [SVG Viewbox Grid Visual [forked]](https://codepen.io/smashingmag/pen/MYwEdVN) by Myriam.See the Pen SVG Viewbox Grid Visual [forked] by Myriam.Alright, we now have a ViewBox Visualizing Grid. I think we’re ready for our first session with the beast.Enter path And The All-Powerful d AttributeThe \u003cpath\u003e element has a d attribute, which speaks its own language. So, within d, you’re talking in terms of “commands”.When I think of non-path versus path elements, I like to think that the reason why we have to write much more complex drawing instructions is this: All non-path elements are just dumber paths. In the background, they have one pre-drawn path shape that they will always render based on a few parameters you pass in. But path has no default shape. The shape logic has to be exposed to you, while it can be neatly hidden away for all other elements.Let’s learn about those commands.Where It All Begins: MThe first, which is where each path begins, is the M command, which moves the pen to a point. This command places your starting point, but it does not draw a single thing. A path with just an M command is an auto-delete when cleaning up SVG files.It takes two arguments: the x and y coordinates of your start position.const uselessPathCommand = `M${start.x} ${start.y}`; Basic Line Commands: M , L, H, VThese are fun and easy: L, H, and V, all draw a line from the current point to the point specified.L takes two arguments, the x and y positions of the point you want to draw to.const pathCommandL = `M${start.x} ${start.y} L${end.x} ${end.y}`; H and V, on the other hand, only take one argument because they are only drawing a line in one direction. For H, you specify the x position, and for V, you specify the y position. The other value is implied.const pathCommandH = `M${start.x} ${start.y} H${end.x}`; const pathCommandV = `M${start.x} ${start.y} V${end.y}`; To visualize how this works, I created a function that draws the path, as well as points with labels on them, so we can see what happens.See the Pen [Simple Lines with path [forked]](https://codepen.io/smashingmag/pen/azOLrjZ) by Myriam.See the Pen Simple Lines with path [forked] by Myriam.We have three lines in that image. The L command is used for the red path. It starts with M at (10,10), then moves diagonally down to (100,100). The command is: M10 10 L100 100.The blue line is horizontal. It starts at (10,55) and should end at (100, 55). We could use the L command, but we’d have to write 55 again. So, instead, we write M10 55 H100, and then SVG knows to look back at the y value of M for the y value of H.It’s the same thing for the green line, but when we use the V command, SVG knows to refer back to the x value of M for the x value of V.If we compare the resulting horizontal path with the same implementation in a \u003cline\u003e element, we mayNotice how much more efficient path can be, andRemove quite a bit of meaning for anyone who doesn’t speak path.Because, as we look at these strings, one of them is called “line”. And while the rest doesn’t mean anything out of context, the line definitely conjures a specific image in our heads.\u003cpath d=\"M 10 55 H 100\" /\u003e \u003cline x1=\"10\" y1=\"55\" x2=\"100\" y2=\"55\" /\u003e Making Polygons And Polylines With ZIn the previous section, we learned how path can behave like \u003cline\u003e, which is pretty cool. But it can do more. It can also act like polyline and polygon.Remember, how those two basically work the same, but polygon connects the first and last point, while polyline does not? The path element can do the same thing. There is a separate command to close the path with a line, which is the Z command.const polyline2Points = `M${start.x} ${start.y} L${p1.x} ${p1.y} L${p2.x} ${p2.y}`; const polygon2Points = `M${start.x} ${start.y} L${p1.x} ${p1.y} L${p2.x} ${p2.y} Z`; So, let’s see this in action and create a repeating triangle shape. Every odd time, it’s open, and every even time, it’s closed. Pretty neat!See the Pen [Alternating Triangles [forked]](https://codepen.io/smashingmag/pen/emNGaPm) by Myriam.See the Pen Alternating Triangles [forked] by Myriam.When it comes to comparing path versus polygon and polyline, the other tags tell us about their names, but I would argue that fewer people know what a polygon is versus what a line is (and probably even fewer know what a polyline is. Heck, even the program I’m writing this article in tells me polyline is not a valid word). The argument to use these two tags over path for legibility is weak, in my opinion, and I guess you’d probably agree that this looks like equal levels of meaningless string given to an SVG element.\u003cpath d=\"M0 0 L86.6 50 L0 100 Z\" /\u003e \u003cpolygon points=\"0,0 86.6,50 0,100\" /\u003e \u003cpath d=\"M0 0 L86.6 50 L0 100\" /\u003e \u003cpolyline points=\"0,0 86.6,50 0,100\" /\u003e Relative Commands: m, l, h, vAll of the line commands exist in absolute and relative versions. The difference is that the relative commands are lowercase, e.g., m, l, h, and v. The relative commands are always relative to the last point, so instead of declaring an x value, you’re declaring a dx value, saying this is how many units you’re moving.Before we look at the example visually, I want you to look at the following three-line commands. Try not to look at the CodePen beforehand.const lines = [ { d: `M10 10 L 10 30 L 30 30`, color: \"var(--_red)\" }, { d: `M40 10 l 0 20 l 20 0`, color: \"var(--_blue)\" }, { d: `M70 10 l 0 20 L 90 30`, color: \"var(--_green)\" } ]; As I mentioned, I hate looking at numbers without meaning, but there is one number whose meaning is pretty constant in most contexts: 0. Seeing a 0 in combination with a command I just learned means relative manages to instantly tell me that nothing is happening. Seeing l 0 20 by itself tells me that this line only moves along one axis instead of two.And looking at that entire blue path command, the repeated 20 value gives me a sense that the shape might have some regularity to it. The first path does a bit of that by repeating 10 and 30. But the third? As someone who can’t do math in my head, that third string gives me nothing.Now, you might be surprised, but they all draw the same shape, just in different places.See the Pen [SVG Compound Paths [forked]](https://codepen.io/smashingmag/pen/vEOewQp) by Myriam.See the Pen SVG Compound Paths [forked] by Myriam.So, how valuable is it that we can recognize the regularity in the blue path? Not very, in my opinion. In some cases, going with the relative value is easier than an absolute one. In other cases, the absolute is king. Neither is better nor worse.And, in all cases, that previous example would be much more efficient if it were set up with a variable for the gap, a variable for the shape size, and a function to generate the path definition that’s called from within a loop so it can take in the index to properly calculate the start point.Jumping Points: How To Make Compound PathsAnother very useful thing is something you don’t see visually in the previous CodePen, but it relates to the grid and its code.I snuck in a grid drawing update.With the method used in earlier examples, using line to draw the grid, the above CodePen would’ve rendered the grid with 14 separate elements. If you go and inspect the final code of that last CodePen, you’ll notice that there is just a single path element within the .grid group.It looks like this, which is not fun to look at but holds the secret to how it’s possible:\u003cpath d=\"M0 0 H110 M0 10 H110 M0 20 H110 M0 30 H110 M0 0 V45 M10 0 V45 M20 0 V45 M30 0 V45 M40 0 V45 M50 0 V45 M60 0 V45 M70 0 V45 M80 0 V45 M90 0 V45\" stroke=\"currentColor\" stroke-width=\"0.2\" fill=\"none\"\u003e\u003c/path\u003e If we take a close look, we may notice that there are multiple M commands. This is the magic of compound paths.Since the M/m commands don’t actually draw and just place the cursor, a path can have jumps.So, whenever we have multiple paths that share common styling and don’t need to have separate interactions, we can just chain them together to make our code shorter.Coming Up NextArmed with this knowledge, we’re now able to replace line, polyline, and polygon with path commands and combine them in compound paths. But there is so much more to uncover because path doesn’t just offer foreign-language versions of lines but also gives us the option to code circles and ellipses that have open space and can sometimes also bend, twist, and turn. We’ll refer to those as curves and arcs, and discuss them more explicitly in the next article.Further Reading On SmashingMag“Mastering SVG Arcs,” Akshay Gupta“Accessible SVGs: Perfect Patterns For Screen Reader Users,” Carie Fisher“Easy SVG Customization And Animation: A Practical Guide,” Adrian Bece“Magical SVG Techniques,” Cosima Mielke (gg, yk)",
  "image": "https://files.smashing.media/articles/decoding-svg-path-element-line-commands/decoding-svg-path-element-line-commands.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e11 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/svg\"\u003eSVG\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/techniques\"\u003eTechniques\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eSVG is easy — until you meet \u003ccode\u003epath\u003c/code\u003e. However, it’s not as confusing as it initially looks. In this first installment of a pair of articles, Myriam Frisano aims to teach you the basics of \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e and its sometimes mystifying commands. With simple examples and visualizations, she’ll help you understand the easy syntax and underlying rules of SVG’s most powerful element so that by the end, you’re fully able to translate SVG semantic tags into a language \u003ccode\u003epath\u003c/code\u003e understands.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eIn a previous article, we looked at some \u003ca href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\"\u003epractical examples of how to code SVG by hand\u003c/a\u003e. In that guide, we covered the basics of the SVG elements \u003ccode\u003erect\u003c/code\u003e, \u003ccode\u003ecircle\u003c/code\u003e, \u003ccode\u003eellipse\u003c/code\u003e, \u003ccode\u003eline\u003c/code\u003e, \u003ccode\u003epolyline\u003c/code\u003e, and \u003ccode\u003epolygon\u003c/code\u003e (and also \u003ccode\u003eg\u003c/code\u003e).\u003c/p\u003e\u003cp\u003eThis time around, we are going to tackle a more advanced topic, the absolute powerhouse of SVG elements: \u003ccode\u003epath\u003c/code\u003e. Don’t get me wrong; I still stand by my point that image paths are better drawn in vector programs than coded (unless you’re the type of creative who makes non-logical visual art in code — then go forth and create awe-inspiring wonders; you’re probably not the audience of this article). But when it comes to \u003cstrong\u003etechnical drawings\u003c/strong\u003e and \u003cstrong\u003edata visualizations\u003c/strong\u003e, the \u003ccode\u003epath\u003c/code\u003e element unlocks a wide array of possibilities and opens up the world of hand-coded SVGs.\u003c/p\u003e\u003cp\u003eThe path syntax can be really complex. We’re going to tackle it in two separate parts. In this first installment, we’re learning all about \u003cstrong\u003estraight and angular paths\u003c/strong\u003e. In the second part, we’ll make lines bend, twist, and turn.\u003c/p\u003e\u003ch2 id=\"required-knowledge-and-guide-structure\"\u003eRequired Knowledge And Guide Structure\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eIf you are unfamiliar with the basics of SVG, such as the subject of \u003ccode\u003eviewBox\u003c/code\u003e and the basic syntax of the simple elements (\u003ccode\u003erect\u003c/code\u003e, \u003ccode\u003eline\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e, and so on), I recommend reading \u003ca href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\"\u003emy guide\u003c/a\u003e before diving into this one. You should also \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/text\"\u003efamiliarize yourself with \u003ccode\u003e\u0026lt;text\u0026gt;\u003c/code\u003e\u003c/a\u003e if you want to understand each line of code in the examples.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eBefore we get started, I want to quickly recap how I code SVG using JavaScript. I don’t like dealing with numbers and math, and reading SVG Code with numbers filled into every attribute makes me lose all understanding of it. By giving coordinates names and having all my math easy to parse and write out, I have a much better time with this type of code, and I think you will, too.\u003c/p\u003e\u003cp\u003eThe goal of this article is more about \u003cstrong\u003eunderstanding \u003ccode\u003epath\u003c/code\u003e syntax\u003c/strong\u003e than it is about doing placement or how to leverage loops and other more basic things. So, I will not run you through the entire setup of each example. I’ll instead share snippets of the code, but they may be slightly adjusted from the CodePen or simplified to make this article easier to read. However, if there are specific questions about code that are not part of the text in the CodePen demos, the comment section is open.\u003c/p\u003e\u003cp\u003eTo keep this all framework-agnostic, the code is written in vanilla JavaScript (though, really, TypeScript is your friend the more complicated your SVG becomes, and I missed it when writing some of these).\u003c/p\u003e\u003ch2 id=\"setting-up-for-success\"\u003eSetting Up For Success\u003c/h2\u003e\u003cp\u003eAs the \u003ccode\u003epath\u003c/code\u003e element relies on our understanding of some of the coordinates we plug into the commands, I think it is a lot easier if we have a bit of visual orientation. So, all of the examples will be coded on top of a visual representation of a traditional \u003ccode\u003eviewBox\u003c/code\u003e setup with the origin in the top-left corner (so, values in the shape of \u003ccode\u003e0 0 ${width} ${height}\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eI added text labels as well to make it easier to point you to specific areas within the grid.\u003c/p\u003e\u003cblockquote\u003ePlease note that I recommend being careful when adding text within the \u003ccode\u003e\u0026lt;text\u0026gt;\u003c/code\u003e element in SVG if you want your text to be accessible. If the graphic relies on text scaling like the rest of your website, it would be better to have it rendered through HTML. But for our examples here, it should be sufficient.\u003c/blockquote\u003e\u003cp\u003eSo, this is what we’ll be plotting on top of:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"MYwEdVN\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Viewbox Grid Visual [forked]](https://codepen.io/smashingmag/pen/MYwEdVN) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/MYwEdVN\"\u003eSVG Viewbox Grid Visual [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAlright, we now have a ViewBox Visualizing Grid. I think we’re ready for our first session with the beast.\u003c/p\u003e\u003ch2 id=\"enter-path-and-the-all-powerful-d-attribute\"\u003eEnter \u003ccode\u003epath\u003c/code\u003e And The All-Powerful \u003ccode\u003ed\u003c/code\u003e Attribute\u003c/h2\u003e\u003cp\u003eThe \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e element has a \u003ccode\u003ed\u003c/code\u003e attribute, which speaks its own language. So, within \u003ccode\u003ed\u003c/code\u003e, you’re talking in terms of “commands”.\u003c/p\u003e\u003cp\u003eWhen I think of \u003ccode\u003enon-path\u003c/code\u003e versus \u003ccode\u003epath\u003c/code\u003e elements, I like to think that the reason why we have to write much more complex drawing instructions is this: \u003cstrong\u003eAll non-path elements are just dumber paths.\u003c/strong\u003e In the background, they have one pre-drawn path shape that they will always render based on a few parameters you pass in. But \u003ccode\u003epath\u003c/code\u003e has no default shape. The shape logic has to be exposed to you, while it can be neatly hidden away for all other elements.\u003c/p\u003e\u003cp\u003eLet’s learn about those commands.\u003c/p\u003e\u003ch2 id=\"where-it-all-begins-m\"\u003eWhere It All Begins: \u003ccode\u003eM\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eThe first, which is where each path begins, is the \u003ccode\u003eM\u003c/code\u003e command, which moves the pen to a point. This command places your starting point, but it \u003cstrong\u003edoes not draw a single thing\u003c/strong\u003e. A path with just an \u003ccode\u003eM\u003c/code\u003e command is an \u003ccode\u003eauto-delete\u003c/code\u003e when cleaning up SVG files.\u003c/p\u003e\u003cp\u003eIt takes two arguments: the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e coordinates of your start position.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst uselessPathCommand = `M${start.x} ${start.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"basic-line-commands-m-l-h-v\"\u003eBasic Line Commands: \u003ccode\u003eM\u003c/code\u003e , \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eH\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eThese are fun and easy: \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eH\u003c/code\u003e, and \u003ccode\u003eV\u003c/code\u003e, all draw a line from the current point to the point specified.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eL\u003c/code\u003e takes \u003cstrong\u003etwo arguments\u003c/strong\u003e, the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e positions of the point you want to draw to.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst pathCommandL = `M${start.x} ${start.y} L${end.x} ${end.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eH\u003c/code\u003e and \u003ccode\u003eV\u003c/code\u003e, on the other hand, only take \u003cstrong\u003eone argument\u003c/strong\u003e because they are only drawing a line in one direction. For \u003ccode\u003eH\u003c/code\u003e, you specify the \u003ccode\u003ex\u003c/code\u003e position, and for \u003ccode\u003eV\u003c/code\u003e, you specify the \u003ccode\u003ey\u003c/code\u003e position. The other value is implied.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst pathCommandH = `M${start.x} ${start.y} H${end.x}`;\nconst pathCommandV = `M${start.x} ${start.y} V${end.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo visualize how this works, I created a function that draws the path, as well as points with labels on them, so we can see what happens.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"azOLrjZ\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Simple Lines with path [forked]](https://codepen.io/smashingmag/pen/azOLrjZ) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/azOLrjZ\"\u003eSimple Lines with path [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWe have three lines in that image. The \u003ccode\u003eL\u003c/code\u003e command is used for the red path. It starts with \u003ccode\u003eM\u003c/code\u003e at \u003ccode\u003e(10,10)\u003c/code\u003e, then moves diagonally down to \u003ccode\u003e(100,100)\u003c/code\u003e. The command is: \u003ccode\u003eM10 10 L100 100\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe blue line is horizontal. It starts at \u003ccode\u003e(10,55)\u003c/code\u003e and should end at \u003ccode\u003e(100, 55)\u003c/code\u003e. We could use the \u003ccode\u003eL\u003c/code\u003e command, but we’d have to write \u003ccode\u003e55\u003c/code\u003e again. So, instead, we write \u003ccode\u003eM10 55 H100\u003c/code\u003e, and then SVG knows to look back at the \u003ccode\u003ey\u003c/code\u003e value of \u003ccode\u003eM\u003c/code\u003e for the \u003ccode\u003ey\u003c/code\u003e value of \u003ccode\u003eH\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIt’s the same thing for the green line, but when we use the \u003ccode\u003eV\u003c/code\u003e command, SVG knows to refer back to the \u003ccode\u003ex\u003c/code\u003e value of \u003ccode\u003eM\u003c/code\u003e for the \u003ccode\u003ex\u003c/code\u003e value of \u003ccode\u003eV\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIf we compare the resulting horizontal path with the same implementation in a \u003ccode\u003e\u0026lt;line\u0026gt;\u003c/code\u003e element, we may\u003c/p\u003e\u003col\u003e\u003cli\u003eNotice how much more efficient \u003ccode\u003epath\u003c/code\u003e can be, and\u003c/li\u003e\u003cli\u003eRemove quite a bit of meaning for anyone who doesn’t speak \u003ccode\u003epath\u003c/code\u003e.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eBecause, as we look at these strings, one of them is called “line”. And while the rest doesn’t mean anything out of context, the line definitely conjures a specific image in our heads.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;M 10 55 H 100\u0026#34; /\u0026gt;\n\u0026lt;line x1=\u0026#34;10\u0026#34; y1=\u0026#34;55\u0026#34; x2=\u0026#34;100\u0026#34; y2=\u0026#34;55\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"making-polygons-and-polylines-with-z\"\u003eMaking Polygons And Polylines With \u003ccode\u003eZ\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eIn the previous section, we learned how \u003ccode\u003epath\u003c/code\u003e can behave like \u003ccode\u003e\u0026lt;line\u0026gt;\u003c/code\u003e, which is pretty cool. But it can do more. It can also act like \u003ccode\u003epolyline\u003c/code\u003e and \u003ccode\u003epolygon\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eRemember, how those two basically work the same, but \u003ccode\u003epolygon\u003c/code\u003e connects the first and last point, while \u003ccode\u003epolyline\u003c/code\u003e does not? The \u003ccode\u003epath\u003c/code\u003e element can do the same thing. There is a separate command to close the path with a line, which is the \u003ccode\u003eZ\u003c/code\u003e command.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst polyline2Points = `M${start.x} ${start.y} L${p1.x} ${p1.y} L${p2.x} ${p2.y}`;\nconst polygon2Points  = `M${start.x} ${start.y} L${p1.x} ${p1.y} L${p2.x} ${p2.y} Z`;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo, let’s see this in action and create a repeating triangle shape. Every odd time, it’s open, and every even time, it’s closed. Pretty neat!\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"emNGaPm\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Alternating Triangles [forked]](https://codepen.io/smashingmag/pen/emNGaPm) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/emNGaPm\"\u003eAlternating Triangles [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWhen it comes to comparing \u003ccode\u003epath\u003c/code\u003e versus \u003ccode\u003epolygon\u003c/code\u003e and \u003ccode\u003epolyline\u003c/code\u003e, the other tags tell us about their names, but I would argue that fewer people know what a polygon is versus what a line is (and probably even fewer know what a polyline is. Heck, even the program I’m writing this article in tells me polyline is not a valid word). The argument to use these two tags over \u003ccode\u003epath\u003c/code\u003e for legibility is weak, in my opinion, and I guess you’d probably agree that this looks like equal levels of meaningless string given to an SVG element.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;M0 0 L86.6 50 L0 100 Z\u0026#34; /\u0026gt;\n\u0026lt;polygon points=\u0026#34;0,0 86.6,50 0,100\u0026#34; /\u0026gt;\n\n\u0026lt;path d=\u0026#34;M0 0 L86.6 50 L0 100\u0026#34; /\u0026gt;\n\u0026lt;polyline points=\u0026#34;0,0 86.6,50 0,100\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"relative-commands-m-l-h-v\"\u003eRelative Commands: \u003ccode\u003em\u003c/code\u003e, \u003ccode\u003el\u003c/code\u003e, \u003ccode\u003eh\u003c/code\u003e, \u003ccode\u003ev\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eAll of the line commands exist in absolute and relative versions. The difference is that the relative commands are lowercase, e.g., \u003ccode\u003em\u003c/code\u003e, \u003ccode\u003el\u003c/code\u003e, \u003ccode\u003eh\u003c/code\u003e, and \u003ccode\u003ev\u003c/code\u003e. The relative commands are always relative to the last point, so instead of declaring an \u003ccode\u003ex\u003c/code\u003e value, you’re declaring a \u003ccode\u003edx\u003c/code\u003e value, saying this is how many units you’re moving.\u003c/p\u003e\u003cp\u003eBefore we look at the example visually, I want you to look at the following three-line commands. Try not to look at the CodePen beforehand.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst lines = [\n  { d: `M10 10 L 10 30 L 30 30`, color: \u0026#34;var(--_red)\u0026#34; },\n  { d: `M40 10 l 0 20 l 20 0`, color: \u0026#34;var(--_blue)\u0026#34; },\n  { d: `M70 10 l 0 20 L 90 30`, color: \u0026#34;var(--_green)\u0026#34; }\n];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs I mentioned, I hate looking at numbers without meaning, but there is one number whose meaning is pretty constant in most contexts: \u003ccode\u003e0\u003c/code\u003e. Seeing a \u003ccode\u003e0\u003c/code\u003e in combination with a command I just learned means \u003cem\u003erelative\u003c/em\u003e manages to instantly tell me that nothing is happening. Seeing \u003ccode\u003el 0 20\u003c/code\u003e by itself tells me that this line only moves along one axis instead of two.\u003c/p\u003e\u003cp\u003eAnd looking at that entire blue path command, the repeated \u003ccode\u003e20\u003c/code\u003e value gives me a sense that the shape might have some regularity to it. The first path does a bit of that by repeating \u003ccode\u003e10\u003c/code\u003e and \u003ccode\u003e30\u003c/code\u003e. But the third? As someone who can’t do math in my head, that third string gives me \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eNow, you might be surprised, but they all draw the same shape, just in different places.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"vEOewQp\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Compound Paths [forked]](https://codepen.io/smashingmag/pen/vEOewQp) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/vEOewQp\"\u003eSVG Compound Paths [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSo, how valuable is it that we can recognize the regularity in the blue path? Not very, in my opinion. In some cases, going with the relative value is easier than an absolute one. In other cases, the absolute is king. Neither is better nor worse.\u003c/p\u003e\u003cblockquote\u003eAnd, in all cases, that previous example would be much more efficient if it were set up with a variable for the gap, a variable for the shape size, and a function to generate the path definition that’s called from within a loop so it can take in the index to properly calculate the start point.\u003c/blockquote\u003e\u003ch2 id=\"jumping-points-how-to-make-compound-paths\"\u003eJumping Points: How To Make Compound Paths\u003c/h2\u003e\u003cp\u003eAnother very useful thing is something you don’t see visually in the previous CodePen, but it relates to the grid and its code.\u003c/p\u003e\u003cp\u003eI snuck in a grid drawing update.\u003c/p\u003e\u003cp\u003eWith the method used in earlier examples, using \u003ccode\u003eline\u003c/code\u003e to draw the grid, the above CodePen would’ve rendered the grid with 14 separate elements. If you go and inspect the final code of that last CodePen, you’ll notice that there is just a single path element within the \u003ccode\u003e.grid\u003c/code\u003e group.\u003c/p\u003e\u003cp\u003eIt looks like this, which is not fun to look at but holds the secret to how it’s possible:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;path d=\u0026#34;M0 0 H110 M0 10 H110 M0 20 H110 M0 30 H110 M0 0 V45 M10 0 V45 M20 0 V45 M30 0 V45 M40 0 V45 M50 0 V45 M60 0 V45 M70 0 V45 M80 0 V45 M90 0 V45\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;0.2\u0026#34; fill=\u0026#34;none\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf we take a close look, we may notice that there are multiple \u003ccode\u003eM\u003c/code\u003e commands. This is the magic of compound paths.\u003c/p\u003e\u003cblockquote\u003eSince the \u003ccode\u003eM/m\u003c/code\u003e commands don’t actually draw and just place the cursor, a \u003ccode\u003epath\u003c/code\u003e can have jumps.\u003c/blockquote\u003e\u003cp\u003eSo, whenever we have multiple paths that share common styling and don’t need to have separate interactions, we can just chain them together to make our code shorter.\u003c/p\u003e\u003ch2 id=\"coming-up-next\"\u003eComing Up Next\u003c/h2\u003e\u003cp\u003eArmed with this knowledge, we’re now able to replace \u003ccode\u003eline\u003c/code\u003e, \u003ccode\u003epolyline\u003c/code\u003e, and \u003ccode\u003epolygon\u003c/code\u003e with \u003ccode\u003epath\u003c/code\u003e commands and combine them in compound paths. But there is so much more to uncover because \u003ccode\u003epath\u003c/code\u003e doesn’t just offer foreign-language versions of lines but also gives us the option to code \u003ccode\u003ecircles\u003c/code\u003e and \u003ccode\u003eellipses\u003c/code\u003e that have open space and can sometimes also bend, twist, and turn. We’ll refer to those as \u003cem\u003ecurves\u003c/em\u003e and \u003cem\u003earcs\u003c/em\u003e, and discuss them more explicitly in the next article.\u003c/p\u003e\u003ch3 id=\"further-reading-on-smashingmag\"\u003eFurther Reading On SmashingMag\u003c/h3\u003e\u003cul\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2024/12/mastering-svg-arcs/\"\u003eMastering SVG Arcs\u003c/a\u003e,” Akshay Gupta\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2021/05/accessible-svg-patterns-comparison/\"\u003eAccessible SVGs: Perfect Patterns For Screen Reader Users\u003c/a\u003e,” Carie Fisher\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2023/01/svg-customization-animation-practical-guide/\"\u003eEasy SVG Customization And Animation: A Practical Guide\u003c/a\u003e,” Adrian Bece\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2022/05/magical-svg-techniques/\"\u003eMagical SVG Techniques\u003c/a\u003e,” Cosima Mielke\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-06-09T08:00:00Z",
  "modifiedTime": "2025-06-09T08:00:00Z"
}
