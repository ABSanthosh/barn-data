{
  "id": "c40804ea-4ad3-459f-868a-569b48b81471",
  "title": "SVG Coding Examples: Useful Recipes For Writing Vectors By Hand",
  "link": "https://smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/",
  "description": "Myriam Frisano explores the basics of hand-coding SVGs with practical examples to demystify the inner workings of common SVG elements. In this guide, you’ll learn about asking the right questions to solve common positioning problems and how to leverage JavaScript so that, by the end, you can add “SVG coding” to your toolbox. You’ll also be able to declare proudly, “I know how to draw literal pictures with words!”",
  "author": "Myriam Frisano",
  "published": "Wed, 18 Sep 2024 09:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 31667,
  "excerpt": "Myriam Frisano explores the basics of hand-coding SVGs with practical examples to demystify the inner workings of common SVG elements. In this guide, you’ll learn about asking the right questions to solve common positioning problems and how to leverage JavaScript so that, by the end, you can add “SVG coding” to your toolbox. You’ll also be able to declare proudly, “I know how to draw literal pictures with words!”",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "22 min readSVG, Coding, GuidesMyriam Frisano explores the basics of hand-coding SVGs with practical examples to demystify the inner workings of common SVG elements. In this guide, you’ll learn about asking the right questions to solve common positioning problems and how to leverage JavaScript so that, by the end, you can add “SVG coding” to your toolbox. You’ll also be able to declare proudly, “I know how to draw literal pictures with words!”Even though I am the kind of front-end engineer who manually cleans up SVG files when they are a mess, I never expected to become one of those people. You know, those crazy people that draw with code.But here we are.I dove deep into SVG specs last winter when I created a project to draw Calligraphy Grids, and even though I knew the basic structures and rules of SVG, it was only then that I fully tried to figure out and understand what all of those numbers meant and how they interacted with each other.And, once you get the hang of it, it is actually very interesting and quite fun to code SVG by hand.No \u003cpath\u003e aheadWe won’t go into more complex SVG shapes like paths in this article, this is more about practical information for simple SVGs. When it comes to drawing curves, I still recommend using a tool like Illustrator or Affinity. However, if you are super into compounding your lines, a path is useful. Maybe we’ll do that in Part 2.Also, this guide focuses mostly on practical examples that illustrate some of the math involved when drawing SVGs. There is a wonderful article here that goes a bit deeper into the specs, which I recommend reading if you’re more interested in that: “A Practical Guide To SVG And Design Tools.”Drawing With Math. Remember Coordinate Systems?Illustrator, Affinity, and all other vector programs are basically just helping you draw on a coordinate system, and then those paths and shapes are stored in SVG files.If you open up these files in an editor, you’ll see that they are just a bunch of paths that contain lots of numbers, which are coordinates in that coordinate system that make up the lines.But, there is a difference between the all-powerful \u003cpath\u003e and the other, more semantic elements like \u003crect\u003e, \u003ccircle\u003e, \u003cline\u003e, \u003cellipse\u003e, \u003cpolygon\u003e, and \u003cpolyline\u003e.These elements are not that hard to read and write by hand, and they open up a lot of possibilities to add animation and other fun stuff. So, while most people might only think of SVGs as never-pixelated, infinitely scaling images, they can also be quite comprehensive pieces of code.How Does SVG Work? unit != unitBefore we get started on how SVG elements are drawn, let’s talk about the ways units work in SVG because they might be a bit confusing when you first get started.The beauty of SVG is that it’s a vector format, which means that the units are somewhat detached from the browser and are instead just relative to the coordinate system you’re working in.That means you would not use a unit within SVG but rather just use numbers and then define the size of the document you’re working with.So, your width and height might be using CSS rem units, but in your viewBox, units become just a concept that helps you in establishing sizing relationships.What Is The viewBox?The viewBox works a little bit like the CSS aspect-ratio property. It helps you establish a relationship between the width and the height of your coordinate system and sets up the box you’re working in. I tend to think of the viewBox as my “document” size.Any element that is placed within the SVG with bigger dimensions than the viewBox will not be visible. So, the viewBox is the cutout of the coordinate system we’re looking through. The width and height attributes are unnecessary if there is a viewBox attribute.So, in short, having an SVG with a viewBox makes it behave a lot like a regular image. And just like with images, it’s usually easiest to just set either a width or a height and let the other dimension be automatically sized based on the intrinsic aspect ratio dimensions.So, if we were to create a function that draws an SVG, we might store three separate variables and fill them in like this:`\u003csvg width=\"${svgWidth}\" viewBox=\"0 0 ${documentWidth} ${documentHeight}\" xmlns=\"http://www.w3.org/2000/svg\" \u003e`; SVG Things Of NoteThere is a lot to know about SVG: When you want to reuse an image a lot, you may want to turn it into a symbol that can then be referenced with a use tag, you can create sprites, and there are some best practices when using them for icons, and so on.Unfortunately, this is a bit out of the scope of this article. Here, we’re mainly focusing on designing SVG files and not on how we can optimize and use them.However, one thing of note that is easier to implement from the start is accessibility.SVGs can be used in an \u003cimg\u003e tag, where alt tags are available, but then you lose the ability to interact with your SVG code, so inlining might be your preference.When inlining, it’s easiest to declare role=\"img\" and then add a \u003ctitle\u003e tag with your image title.Note: You can check out this article for SVG and Accessibility recommendations.\u003csvg role=\"img\" [...attr] \u003e \u003ctitle\u003eAn accessible title\u003c/title\u003e \u003c!-- design code --\u003e \u003c/svg\u003e Drawing SVG With JavaScriptThere is usually some mathematics involved when drawing SVGs. It’s usually fairly simple arithmetic (except, you know, in case you draw calligraphy grids and then have to dig out trigonometry…), but I think even for simple math, most people don’t write their SVGs in pure HTML and thus would like to use algebra.At least for me, I find it much easier to understand SVG Code when giving meaning to numbers, so I always stick to JavaScript, and by giving my coordinates names, I like them immeasurable times more.So, for the upcoming examples, we’ll look at the list of variables with the simple math and then JSX-style templates for interpolation, as that gives more legible syntax highlighting than string interpolations, and then each example will be available as a CodePen.To keep this Guide framework-agnostic, I wanted to quickly go over drawing SVG elements with just good old vanilla JavaScript.We’ll create a container element in HTML that we can put our SVG into and grab that element with JavaScript.\u003cdiv data-svg-container\u003e\u003c/div\u003e \u003cscript src=\"template.js\"\u003e\u003c/script\u003e To make it simple, we’ll draw a rectangle \u003crect\u003e that covers the entire viewBox and uses a fill.Note: You can add all valid CSS values as fills, so a fixed color, or something like currentColor to access the site’s text color or a CSS variable would work here if you’re inlining your SVG and want it to interact with the page it’s placed in.Let’s first start with our variable setup.// vars const container = document.querySelector(\"[data-svg-container]\"); const svgWidth = \"30rem\"; // use any value with units here const documentWidth = 100; const documentHeight = 100; const rectWidth = documentWidth; const rectHeight = documentHeight; const rectFill = \"currentColor\"; // use any color value here const title = \"A simple square box\"; Method 1: Create Element and Set AttributesThis method is easier to keep type-safe (if using TypeScript) — uses proper SVG elements and attributes, and so on — but it is less performant and may take a long time if you have many elements.const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"); const titleElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"title\"); const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\"); svg.setAttribute(\"width\", svgWidth); svg.setAttribute(\"viewBox\", `0 0 ${documentWidth} ${documentHeight}`); svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"); svg.setAttribute(\"role\", \"img\"); titleElement.textContent = title; rect.setAttribute(\"width\", rectWidth); rect.setAttribute(\"height\", rectHeight); rect.setAttribute(\"fill\", rectFill); svg.appendChild(titleElement); svg.appendChild(rect); container.appendChild(svg); See the Pen [SVG Rectangle (JS Method 1) [forked]](https://codepen.io/smashingmag/pen/LYKKVzg) by Myriam.See the Pen SVG Rectangle (JS Method 1) [forked] by Myriam.Method 2: Create An SVG StringAlternatively, you can create an SVG string and set the innerHTML of the container to that string. This is more performant, but you lose type safety, and the elements aren’t properly created in the DOM.container.innerHTML = ` \u003csvg width=\"${svgWidth}\" viewBox=\"0 0 ${documentWidth} ${documentHeight}\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ctitle\u003e${title}\u003c/title\u003e \u003crect width=\"${rectWidth}\" height=\"${rectHeight}\" fill=\"${rectFill}\" /\u003e \u003c/svg\u003e`; See the Pen [SVG Rectangle (JS Method 2) [forked]](https://codepen.io/smashingmag/pen/BaggNmN) by Myriam.See the Pen SVG Rectangle (JS Method 2) [forked] by Myriam.Method 3: Best Of Both WorldsThe best of both worlds is to just create the SVG itself as a DOM element and then set the content of the SVG via innerHTML.We’re appending a proper SVG element to the container and can type-check that and have access to it properly. You aren’t typically going to be changing the content of the SVG that much, so I feel like this is probably the best way to do it.const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"); svg.setAttribute(\"width\", svgWidth); svg.setAttribute(\"viewBox\", `0 0 ${documentWidth} ${documentHeight}`); svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"); svg.setAttribute(\"role\", \"img\"); svg.innerHTML = ` \u003ctitle\u003e${title}\u003c/title\u003e \u003crect width=\"${rectWidth}\" height=\"${rectHeight}\" fill=\"${rectFill}\" /\u003e `; container.appendChild(svg); See the Pen [SVG Rectangle (JS Method 3) [forked]](https://codepen.io/smashingmag/pen/RwzzPjz) by Myriam.See the Pen SVG Rectangle (JS Method 3) [forked] by Myriam.Drawing Basic ElementsOkay, so now that we have the basics of the SVG setup, let’s look into how the most common elements are drawn.Drawing Boxes\u003crect\u003e creates a box, as we’ve learned in the previous example. It has y and x attributes, which define the position of the top left corner. They are optional, and if not set, the box will be drawn at the origin (0,0) like in that previous example.There are also rx and ry attributes. Those are radii. If you define rx, ry will automatically be set to the same value unless you redeclare it, then you’d use an elliptical corner-radius instead of a circular one.Let’s draw four different rectangles in our next SVG, one in each quadrant:Top left: This is just a rectangle with a top and left offset and a width and height.Top right: We will make use of a small corner radius to make it a rounded rectangle.Bottom left: It uses such a large corner radius that it turns into a circle. It has a bit of a weird box origin, but it’s an option.Bottom right: It uses an elliptical corner radius for this squoval shape.This is the implementation in JavaScript:const rectDocWidth = 200; const rectDocHeight = 200; const rectFill = \"currentColor\"; const docOffset = 15; const rectSize = rectDocWidth / 2 - docOffset * 2; const roundedCornerRadius = 10; const circleLookRadius = rectSize / 2; const ellipticalRy = roundedCornerRadius * 2; And to then set up the SVG, we’ll apply these variables to the template:\u003csvg width={svgWidth} viewBox={`0 0 ${rectDocWidth} ${rectDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ctitle\u003eFour Rectangles of different qualities placed in each quadrant\u003c/title\u003e \u003crect x={docOffset} y={docOffset} width={rectSize} height={rectSize} fill={rectFill} /\u003e \u003crect x={rectDocWidth - rectSize - docOffset} rx={roundedCornerRadius} y={docOffset} width={rectSize} height={rectSize} fill={rectFill} /\u003e \u003crect x={docOffset} rx={circleLookRadius} y={rectDocHeight - rectSize - docOffset} width={rectSize} height={rectSize} fill={rectFill} /\u003e \u003crect x={rectDocWidth - rectSize - docOffset} rx={roundedCornerRadius} ry={ellipticalRy} y={rectDocHeight - rectSize - docOffset} width={rectSize} height={rectSize} fill={rectFill} /\u003e \u003c/svg\u003e And this is the result:See the Pen [SVG Rect [forked]](https://codepen.io/smashingmag/pen/mdZZJpN) by Myriam.See the Pen SVG Rect [forked] by Myriam.Drawing LinesThere is a \u003cline\u003e element in SVG that takes an x1, y1, x2, and y2 attribute, which are the coordinates of the start and end points of the line.For me, knowing how to draw straight horizontal or vertical lines was fairly important.The rules for that are simple: We’ll just have to make sure that the y values are the same for a horizontal line and the x values are the same for a vertical line.Let’s look at an example where we draw a horizontal and a vertical line through the center of our document. I purposefully used some weirder numbers here; you’ll see that the resulting SVG is still perfectly centered, though, since it’s totally fine to use floating point numbers in SVG, and we don’t really run into subpixel rendering issues as we do in some CSS cases, where we end up with fractional pixels.These are the JavaScript variables we set up:const lineDocWidth = 421; const lineDocHeight = 391; const lineStroke = \"currentColor\"; const lineStrokeWidth = 5; const horizontalLineStart = 0; const horizontalLineEnd = lineDocWidth; const horizontalLineY = lineDocHeight / 2; const verticalLineStart = 0; const verticalLineEnd = lineDocHeight; const verticalLineX = lineDocWidth / 2; And this is how we can integrate these variables into the SVG element:\u003csvg width={svgWidth} viewBox={`0 0 ${lineDocWidth} ${lineDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ctitle\u003eHorizontal and Vertical Line through the middle of the document\u003c/title\u003e \u003cline x1={horizontalLineStart} x2={horizontalLineEnd} y1={horizontalLineY} y2={horizontalLineY} stroke={lineStroke} stroke-width={lineStrokeWidth} /\u003e \u003cline x1={verticalLineX} x2={verticalLineX} y1={verticalLineStart} y2={verticalLineEnd} stroke={lineStroke} stroke-width={lineStrokeWidth} /\u003e \u003c/svg\u003e And here’s our result:See the Pen [SVG Line [forked]](https://codepen.io/smashingmag/pen/abggOqK) by Myriam.See the Pen SVG Line [forked] by Myriam.Drawing Circles\u003ccircle\u003e elements have cx, cy, and r as coordinates. The x and y values are relative to the circle center, and r describes the radius of the circle.This is where things are less intuitive in my head because there will be times when I want the edge of the circle to be placed at a certain point and not the center, and I’ll usually also think in terms of diameters, not radii.So, let’s say we want to draw a circle whose outer edge is offset from the bottom left corner by a certain amount and whose diameter is a certain size. We’d have to do some math again to calculate our coordinates.These are the variables in JavaScript that we’re working with:const circleDocWidth = 100; const circleDocHeight = 100; const circleOffset = 10; const circleDiameter = 20; const circleRadius = circleDiameter / 2; const circleX = circleOffset + circleRadius; const circleY = circleDocHeight - circleOffset - circleRadius; And, just like before, this is how we might integrate them into the SVG element:\u003csvg width={svgWidth} viewBox={`0 0 ${circleDocWidth} ${circleDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ccircle cx={circleX} cy={circleY} r={circleRadius} fill=\"red\" /\u003e \u003c/svg\u003e And this is what it looks like:See the Pen [SVG Circle [forked]](https://codepen.io/smashingmag/pen/KKjjpoW) by Myriam.See the Pen SVG Circle [forked] by Myriam.Drawing Ellipses\u003cellipse\u003e elements have cx, cy, rx, and ry as coordinates. The x and y values are relative to the ellipse center, and rx and ry describe the radius of the ellipse.Let’s draw an ellipse that is offset from the top right corner by a certain amount, whose horizontal radius is a certain size, and whose vertical radius is half of that.For that we need to define our variables in JavaScript:const ellipseSVGWidth = 100; const ellipseDocWidth = 100; const ellipseDocHeight = 100; const ellipseOffset = 10; const ellipseHorizontalRadius = ellipseDocWidth / 2 - ellipseOffset; const ellipseVerticalRadius = ellipseHorizontalRadius / 2; const ellipseX = ellipseDocWidth - ellipseOffset - ellipseHorizontalRadius; const ellipseY = ellipseOffset + ellipseVerticalRadius; …and integrate them into the SVG element:\u003csvg width={svgWidth} viewBox={`0 0 ${ellipseDocWidth} ${ellipseDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ctitle\u003eEllipse offset from the top right corner\u003c/title\u003e \u003cellipse cx={ellipseX} cy={ellipseY} rx={ellipseHorizontalRadius} ry={ellipseVerticalRadius} fill=\"hotpink\" /\u003e \u003c/svg\u003e Here’s the result:See the Pen [SVG Ellipse [forked]](https://codepen.io/smashingmag/pen/NWZZqMR) by Myriam.See the Pen SVG Ellipse [forked] by Myriam.Connecting Dots With \u003cpolyline\u003e And \u003cpolygon\u003eLet’s say we want to have a line that has multiple points but doesn’t make a rectangle or a circle.This is where we can use polyline and polygon, which share the same attributes and only differ in the way that a polygon will connect the first and last point, while a polyline won’t.They take a points attribute, which is a list of x and y values separated by a space, and, by default, both of them have a fill, which can be a bit strange. That’s especially true for a polyline, so you might want to set that value to none.Let’s say we have three circles, and we want to have lines connecting their centers. We can just take the cx and cy values of those circles and chain them together in the points attribute.SVG is drawn from background to foreground, so the circles are drawn first, then the lines so they are stacked on top of each other.To notice the differences between the polyline and the polygon, we’ll draw our composite four times, like we did before with the circles.This time, we have more than one element, though. To make it quicker to scan which set belongs together, we can make use of the g element, which groups multiple elements together. It allows us to apply certain attributes to all children at the same time.To see that in action and to save us a bit of time, in having to adjust x and y values for each separate element within the composite, we can apply a transform to that group element to push our composite into the different quadrants.transform=\"translate(x,y)” is how we do that. The transform attribute works a lot like CSS transforms, with slight differences in syntax. But in most simple cases, we can assume the same thing to happen. The translate attribute will take the original position and then move the elements contained within the group along the x and y axis.So, let’s have a look at our SVG:From left to right, bottom to top: Polyline with no fill applied, polyline with fill, polygon with no fill, polygon with fill. (SVG preview)Here, you can see that with the same coordinates, a polyline won’t draw the line between the blue and the red dot, while a polygon will. However, when applying a fill, they take the exact same information as if the shape was closed, which is the right side of the graphic, where the polyline makes it look like a piece of a circle is missing.This is the second time where we have dealt with quite a bit of repetition, and we can have a look at how we could leverage the power of JavaScript logic to render our template faster.But first, we need a basic implementation like we’ve done before. We’re creating objects for the circles, and then we’re chaining the cx and cy values together to create the points attribute. We’re also storing our transforms in variables.const polyDocWidth = 200; const polyDocHeight = 200; const circleOne = { cx: 25, cy: 80, r: 10, fill: \"red\" }; const circleTwo = { cx: 40, cy: 20, r: 5, fill: \"lime\" }; const circleThree = { cx: 70, cy: 60, r: 8, fill: \"cyan\" }; const points = `${circleOne.cx},${circleOne.cy} ${circleTwo.cx},${circleTwo.cy} ${circleThree.cx},${circleThree.cy}`; const moveToTopRight = `translate(${polyDocWidth / 2}, 0)`; const moveToBottomRight = `translate(${polyDocWidth / 2}, ${polyDocHeight / 2})`; const moveToBottomLeft = `translate(0, ${polyDocHeight / 2})`; And then, we apply the variables to the template, using either a polyline or polygon element and a fill attribute that is either set to none or a color value. \u003csvg width={svgWidth} viewBox={`0 0 ${polyDocWidth} ${polyDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003ctitle\u003eComposite shape comparison\u003c/title\u003e \u003cg\u003e \u003ccircle cx={circleOne.cx} cy={circleOne.cy} r={circleOne.r} fill={circleOne.fill} /\u003e \u003ccircle cx={circleTwo.cx} cy={circleTwo.cy} r={circleTwo.r} fill={circleTwo.fill} /\u003e \u003ccircle cx={circleThree.cx} cy={circleThree.cy} r={circleThree.r} fill={circleThree.fill} /\u003e \u003cpolyline points={points} fill=\"none\" stroke=\"black\" /\u003e \u003c/g\u003e \u003cg transform={moveToTopRight}\u003e \u003ccircle cx={circleOne.cx} cy={circleOne.cy} r={circleOne.r} fill={circleOne.fill} /\u003e \u003ccircle cx={circleTwo.cx} cy={circleTwo.cy} r={circleTwo.r} fill={circleTwo.fill} /\u003e \u003ccircle cx={circleThree.cx} cy={circleThree.cy} r={circleThree.r} fill={circleThree.fill} /\u003e \u003cpolyline points={points} fill=\"white\" stroke=\"black\" /\u003e \u003c/g\u003e \u003cg transform={moveToBottomLeft}\u003e \u003ccircle cx={circleOne.cx} cy={circleOne.cy} r={circleOne.r} fill={circleOne.fill} /\u003e \u003ccircle cx={circleTwo.cx} cy={circleTwo.cy} r={circleTwo.r} fill={circleTwo.fill} /\u003e \u003ccircle cx={circleThree.cx} cy={circleThree.cy} r={circleThree.r} fill={circleThree.fill} /\u003e \u003cpolygon points={points} fill=\"none\" stroke=\"black\" /\u003e \u003c/g\u003e \u003cg transform={moveToBottomRight}\u003e \u003ccircle cx={circleOne.cx} cy={circleOne.cy} r={circleOne.r} fill={circleOne.fill} /\u003e \u003ccircle cx={circleTwo.cx} cy={circleTwo.cy} r={circleTwo.r} fill={circleTwo.fill} /\u003e \u003ccircle cx={circleThree.cx} cy={circleThree.cy} r={circleThree.r} fill={circleThree.fill} /\u003e \u003cpolygon points={points} fill=\"white\" stroke=\"black\" /\u003e \u003c/g\u003e \u003c/svg\u003e And here’s a version of it to play with:See the Pen [SVG Polygon / Polyline (simple) [forked]](https://codepen.io/smashingmag/pen/OJeeVoM) by Myriam.See the Pen SVG Polygon / Polyline (simple) [forked] by Myriam.Dealing With RepetitionWhen it comes to drawing SVGs, you may find that you’ll be repeating a lot of the same code over and over again. This is where JavaScript can come in handy, so let’s look at the composite example again and see how we could optimize it so that there is less repetition.Observations:We have three circle elements, all following the same pattern.We create one repetition to change the fill style for the element.We repeat those two elements one more time, with either a polyline or a polygon.We have four different transforms (technically, no transform is a transform in this case).This tells us that we can create nested loops.Let’s go back to just a vanilla implementation for this since the way loops are done is quite different across frameworks.You could make this more generic and write separate generator functions for each type of element, but this is just to give you an idea of what you could do in terms of logic. There are certainly still ways to optimize this.I’ve opted to have arrays for each type of variation that we have and wrote a helper function that goes through the data and builds out an array of objects with all the necessary information for each group. In such a short array, it would certainly be a viable option to just have the data stored in one element, where the values are repeated, but we’re taking the DRY thing seriously in this one.The group array can then be looped over to build our SVG HTML.const container = document.querySelector(\"[data-svg-container]\"); const svgWidth = 200; const documentWidth = 200; const documentHeight = 200; const halfWidth = documentWidth / 2; const halfHeight = documentHeight / 2; const circles = [ { cx: 25, cy: 80, r: 10, fill: \"red\" }, { cx: 40, cy: 20, r: 5, fill: \"lime\" }, { cx: 70, cy: 60, r: 8, fill: \"cyan\" }, ]; const points = circles.map(({ cx, cy }) =\u003e `${cx},${cy}`).join(\" \"); const elements = [\"polyline\", \"polygon\"]; const fillOptions = [\"none\", \"white\"]; const transforms = [ undefined, `translate(${halfWidth}, 0)`, `translate(0, ${halfHeight})`, `translate(${halfWidth}, ${halfHeight})`, ]; const makeGroupsDataObject = () =\u003e { let counter = 0; const g = []; elements.forEach((element) =\u003e { fillOptions.forEach((fill) =\u003e { const transform = transforms[counter++]; g.push({ element, fill, transform }); }); }); return g; }; const groups = makeGroupsDataObject(); // result: // [ // { // element: \"polyline\", // fill: \"none\", // }, // { // element: \"polyline\", // fill: \"white\", // transform: \"translate(100, 0)\", // }, // { // element: \"polygon\", // fill: \"none\", // transform: \"translate(0, 100)\", // }, // { // element: \"polygon\", // fill: \"white\", // transform: \"translate(100, 100)\", // } // ] const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"); svg.setAttribute(\"width\", svgWidth); svg.setAttribute(\"viewBox\", `0 0 ${documentWidth} ${documentHeight}`); svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"); svg.setAttribute(\"role\", \"img\"); svg.innerHTML = \"\u003ctitle\u003eComposite shape comparison\u003c/title\u003e\"; groups.forEach((groupData) =\u003e { const circlesHTML = circles .map((circle) =\u003e { return ` \u003ccircle cx=\"${circle.cx}\" cy=\"${circle.cy}\" r=\"${circle.r}\" fill=\"${circle.fill}\" /\u003e`; }) .join(\"\"); const polyElementHTML = ` \u003c${groupData.element} points=\"${points}\" fill=\"${groupData.fill}\" stroke=\"black\" /\u003e`; const group = ` \u003cg ${groupData.transform ? `transform=\"${groupData.transform}\"` : \"\"}\u003e ${circlesHTML} ${polyElementHTML} \u003c/g\u003e `; svg.innerHTML += group; }); container.appendChild(svg); And here’s the Codepen of that:See the Pen [SVG Polygon / Polyline (JS loop version) [forked]](https://codepen.io/smashingmag/pen/XWLLbPq) by Myriam.See the Pen SVG Polygon / Polyline (JS loop version) [forked] by Myriam.More Fun StuffNow, that’s all the basics I wanted to cover, but there is so much more you can do with SVG. There is more you can do with transform; you can use a mask, you can use a marker, and so on.We don’t have time to dive into all of them today, but since this started for me when making Calligraphy Grids, I wanted to show you the two most satisfying ones, which I, unfortunately, can’t use in the generator since I wanted to be able to open my generated SVGs in Affinity and it doesn’t support pattern.Okay, so pattern is part of the defs section within the SVG, which is where you can define reusable elements that you can then reference in your SVG.Graph Grid with patternIf you think about it, a graph is just a bunch of horizontal and vertical lines that repeat across the x- and y-axis.So, pattern can help us with that. We can create a \u003crect\u003e and then reference a pattern in the fill attribute of the rect. The pattern then has its own width, height, and viewBox, which defines how the pattern is repeated.So, let’s say we want to perfectly center our graph grid in any given width or height, and we want to be able to define the size of our resulting squares (cells).Once again, let’s start with the JavaScipt variables:const graphDocWidth = 226; const graphDocHeight = 101; const cellSize = 5; const strokeWidth = 0.3; const strokeColor = \"currentColor\"; const patternHeight = (cellSize / graphDocHeight) * 100; const patternWidth = (cellSize / graphDocWidth) * 100; const gridYStart = (graphDocHeight % cellSize) / 2; const gridXStart = (graphDocWidth % cellSize) / 2; Now, we can apply them to the SVG element:\u003csvg width={svgWidth} viewBox={`0 0 ${graphDocWidth} ${graphDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003cdefs\u003e \u003cpattern id=\"horizontal\" viewBox={`0 0 ${graphDocWidth} ${strokeWidth}`} width=\"100%\" height={`${patternHeight}%`} \u003e \u003cline x1=\"0\" x2={graphDocWidth} y1={gridYStart} y2={gridYStart} stroke={strokeColor} stroke-width={strokeWidth} /\u003e \u003c/pattern\u003e \u003cpattern id=\"vertical\" viewBox={`0 0 ${strokeWidth} ${graphDocHeight}`} width={`${patternWidth}%`} height=\"100%\" \u003e \u003cline y1={0} y2={graphDocHeight} x1={gridXStart} x2={gridXStart} stroke={strokeColor} stroke-width={strokeWidth} /\u003e \u003c/pattern\u003e \u003c/defs\u003e \u003ctitle\u003eA graph grid\u003c/title\u003e \u003crect width={graphDocWidth} height={graphDocHeight} fill=\"url(#horizontal)\" /\u003e \u003crect width={graphDocWidth} height={graphDocHeight} fill=\"url(#vertical)\" /\u003e \u003c/svg\u003e And this is what that then looks like:See the Pen [SVG Graph Grid [forked]](https://codepen.io/smashingmag/pen/XWLLbxq) by Myriam.See the Pen SVG Graph Grid [forked] by Myriam.Dot Grid With patternIf we wanted to draw a dot grid instead, we could simply repeat a circle. Or, we could alternatively use a line with a stroke-dasharray and stroke-dashoffset to create a dashed line. And we’d only need one line in this case.Starting with our JavaScript variables:const dotDocWidth = 219; const dotDocHeight = 100; const cellSize = 4; const strokeColor = \"black\"; const gridYStart = (dotDocHeight % cellSize) / 2; const gridXStart = (dotDocWidth % cellSize) / 2; const dotSize = 0.5; const patternHeight = (cellSize / dotDocHeight) * 100; And then adding them to the SVG element:\u003csvg width={svgWidth} viewBox={`0 0 ${dotDocWidth} ${dotDocHeight}`} xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" \u003e \u003cdefs\u003e \u003cpattern id=\"horizontal-dotted-line\" viewBox={`0 0 ${dotDocWidth} ${dotSize}`} width=\"100%\" height={`${patternHeight}%`} \u003e \u003cline x1={gridXStart} y1={gridYStart} x2={dotDocWidth} y2={gridYStart} stroke={strokeColor} stroke-width={dotSize} stroke-dasharray={`0,${cellSize}`} stroke-linecap=\"round\" \u003e\u003c/line\u003e \u003c/pattern\u003e \u003c/defs\u003e \u003ctitle\u003eA Dot Grid\u003c/title\u003e \u003crect x=\"0\" y=\"0\" width={dotDocWidth} height={dotDocHeight} fill=\"url(#horizontal-dotted-line)\" \u003e\u003c/rect\u003e \u003c/svg\u003e And this is what that looks like:See the Pen [SVG Dot Grid [forked]](https://codepen.io/smashingmag/pen/eYwwNQM) by Myriam.See the Pen SVG Dot Grid [forked] by Myriam.ConclusionThis brings us to the end of our little introductory journey into SVG. As you can see, coding SVG by hand is not as scary as it seems. If you break it down into the basic elements, it becomes quite like any other coding task:We analyze the problem,Break it down into smaller parts,Examine each coordinate and its mathematical breakdown,And then put it all together.I hope that this article has given you a starting point into the wonderful world of coded images and that it gives you the motivation to delve deeper into the specs and try drawing some yourself. (yk)",
  "image": "https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/svg-coding-examples-recipes-writing-vectors-by-hand.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e22 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/svg\"\u003eSVG\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/guides\"\u003eGuides\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eMyriam Frisano explores the basics of hand-coding SVGs with practical examples to demystify the inner workings of common SVG elements. In this guide, you’ll learn about asking the right questions to solve common positioning problems and how to leverage JavaScript so that, by the end, you can add “SVG coding” to your toolbox. You’ll also be able to declare proudly, “I know how to draw literal pictures with words!”\u003c/section\u003e\u003c/p\u003e\u003cp\u003eEven though I am the kind of front-end engineer who manually cleans up SVG files when they are a mess, I never expected to become one of \u003cem\u003ethose\u003c/em\u003e people. You know, those crazy people that \u003cem\u003edraw with code.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eBut here we are.\u003c/p\u003e\u003cp\u003eI dove deep into SVG specs last winter when I created a project to \u003ca href=\"https://code.halfapx.com/guideline-generator/\"\u003edraw Calligraphy Grids\u003c/a\u003e, and even though I knew the basic structures and rules of SVG, it was only then that I fully tried to figure out and understand what all of those numbers meant and how they interacted with each other.\u003c/p\u003e\u003cp\u003eAnd, once you get the hang of it, it is actually very interesting and quite fun to code SVG by hand.\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eNo \u0026lt;path\u0026gt; ahead\u003c/strong\u003e\u003cp\u003eWe won’t go into more complex SVG shapes like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\"\u003epaths\u003c/a\u003e in this article, this is more about practical information for simple SVGs. When it comes to drawing curves, I still recommend using a tool like Illustrator or Affinity. However, if you are super into compounding your lines, a path is useful. Maybe we’ll do that in Part 2.\u003c/p\u003e\u003cp\u003eAlso, this guide focuses mostly on practical examples that illustrate some of the math involved when drawing SVGs. There is a wonderful article here that goes a bit deeper into the specs, which I recommend reading if you’re more interested in that: “\u003ca href=\"https://www.smashingmagazine.com/2019/05/svg-design-tools-practical-guide/#comments-svg-design-tools-practical-guide\"\u003eA Practical Guide To SVG And Design Tools\u003c/a\u003e.”\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"drawing-with-math-remember-coordinate-systems\"\u003eDrawing With Math. Remember Coordinate Systems?\u003c/h2\u003e\u003cp\u003eIllustrator, Affinity, and all other vector programs are basically just helping you draw on a coordinate system, and then those paths and shapes are stored in SVG files.\u003c/p\u003e\u003cp\u003eIf you open up these files in an editor, you’ll see that they are just a bunch of paths that contain lots of numbers, which are coordinates in that coordinate system that make up the lines.\u003c/p\u003e\u003cp\u003eBut, there is a difference between the all-powerful \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e and the other, more semantic elements like \u003ccode\u003e\u0026lt;rect\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;line\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;ellipse\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;polygon\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;polyline\u0026gt;\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThese elements are not that hard to read and write by hand, and they open up a lot of possibilities to add animation and other fun stuff. So, while most people might only think of SVGs as never-pixelated, infinitely scaling images, they can also be quite comprehensive pieces of code.\u003c/p\u003e\u003ch3 id=\"how-does-svg-work-unit-unit\"\u003eHow Does SVG Work? \u003ccode\u003eunit != unit\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eBefore we get started on how SVG elements are drawn, let’s talk about the ways units work in SVG because they might be a bit confusing when you first get started.\u003c/p\u003e\u003cp\u003eThe beauty of SVG is that it’s a vector format, which means that the units are somewhat detached from the browser and are instead just relative to the coordinate system you’re working in.\u003c/p\u003e\u003cp\u003eThat means you would \u003cstrong\u003enot\u003c/strong\u003e use a unit within SVG but rather just use numbers and then define the size of the document you’re working with.\u003c/p\u003e\u003cp\u003eSo, your \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e might be using CSS \u003ccode\u003erem\u003c/code\u003e units, but in your \u003ccode\u003eviewBox\u003c/code\u003e, units become just a concept that helps you in establishing sizing relationships.\u003c/p\u003e\u003ch3 id=\"what-is-the-viewbox\"\u003eWhat Is The \u003ccode\u003eviewBox\u003c/code\u003e?\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eviewBox\u003c/code\u003e works a little bit like the CSS \u003ccode\u003easpect-ratio\u003c/code\u003e property. It helps you establish a relationship between the width and the height of your coordinate system and sets up the box you’re working in. I tend to think of the \u003ccode\u003eviewBox\u003c/code\u003e as my “document” size.\u003c/p\u003e\u003cp\u003eAny element that is placed within the SVG with bigger dimensions than the \u003ccode\u003eviewBox\u003c/code\u003e will not be visible. So, the \u003ccode\u003eviewBox\u003c/code\u003e is the cutout of the coordinate system we’re looking through. The \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes are unnecessary if there is a \u003ccode\u003eviewBox\u003c/code\u003e attribute.\u003c/p\u003e\u003cp\u003eSo, in short, having an SVG with a \u003ccode\u003eviewBox\u003c/code\u003e makes it behave a lot like a regular image. And just like with images, it’s usually easiest to just set either a \u003ccode\u003ewidth\u003c/code\u003e or a \u003ccode\u003eheight\u003c/code\u003e and let the other dimension be automatically sized based on the intrinsic aspect ratio dimensions.\u003c/p\u003e\u003cp\u003eSo, if we were to create a function that draws an SVG, we might store three separate variables and fill them in like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e`\u0026lt;svg \n  width=\u0026#34;${svgWidth}\u0026#34; \n  viewBox=\u0026#34;0 0 ${documentWidth} ${documentHeight}\u0026#34; \n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n\u0026gt;`;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"svg-things-of-note\"\u003eSVG Things Of Note\u003c/h3\u003e\u003cp\u003eThere is a lot to know about SVG: When you want to reuse an image a lot, you may want to turn it into a \u003ccode\u003esymbol\u003c/code\u003e that can then be referenced with a \u003ccode\u003euse\u003c/code\u003e tag, you can create sprites, and there are some best practices when using them for icons, and so on.\u003c/p\u003e\u003cp\u003eUnfortunately, this is a bit out of the scope of this article. Here, we’re mainly focusing on designing SVG files and not on how we can optimize and use them.\u003c/p\u003e\u003cp\u003eHowever, one thing of note that is easier to implement from the start is \u003cstrong\u003eaccessibility\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eSVGs can be used in an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag, where \u003ccode\u003ealt\u003c/code\u003e tags are available, but then you lose the ability to interact with your SVG code, so inlining might be your preference.\u003c/p\u003e\u003cp\u003eWhen inlining, it’s easiest to declare \u003ccode\u003erole=\u0026#34;img\u0026#34;\u003c/code\u003e and then add a \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e tag with your image title.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eYou can check out \u003ca href=\"https://www.smashingmagazine.com/2021/05/accessible-svg-patterns-comparison/\"\u003ethis article for SVG and Accessibility recommendations\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  role=\u0026#34;img\u0026#34;\n  [...attr]\n\u0026gt;\n  \u0026lt;title\u0026gt;An accessible title\u0026lt;/title\u0026gt;\n  \u0026lt;!-- design code --\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"drawing-svg-with-javascript\"\u003eDrawing SVG With JavaScript\u003c/h2\u003e\u003cp\u003eThere is usually some mathematics involved when drawing SVGs. It’s usually fairly simple arithmetic (except, you know, in case you draw calligraphy grids and then have to dig out trigonometry…), but I think even for simple math, most people don’t write their SVGs in pure HTML and thus would like to use algebra.\u003c/p\u003e\u003cp\u003eAt least for me, I find it much easier to understand SVG Code when giving meaning to numbers, so I always stick to JavaScript, and by giving my coordinates names, I like them immeasurable times more.\u003c/p\u003e\u003cp\u003eSo, for the upcoming examples, we’ll look at the list of variables with the simple math and then JSX-style templates for interpolation, as that gives more legible syntax highlighting than string interpolations, and then each example will be available as a CodePen.\u003c/p\u003e\u003cp\u003eTo keep this Guide framework-agnostic, I wanted to quickly go over drawing SVG elements with just good old vanilla JavaScript.\u003c/p\u003e\u003cp\u003eWe’ll create a container element in HTML that we can put our SVG into and grab that element with JavaScript.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;div data-svg-container\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;script src=\u0026#34;template.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo make it simple, we’ll draw a rectangle \u003ccode\u003e\u0026lt;rect\u0026gt;\u003c/code\u003e that covers the entire \u003ccode\u003eviewBox\u003c/code\u003e and uses a fill.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eYou can add all valid CSS values as fills, so a fixed color, or something like \u003ccode\u003ecurrentColor\u003c/code\u003e to access the site’s text color or a CSS variable would work here if you’re inlining your SVG and want it to interact with the page it’s placed in.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eLet’s first start with our variable setup.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// vars\nconst container = document.querySelector(\u0026#34;[data-svg-container]\u0026#34;);\nconst svgWidth = \u0026#34;30rem\u0026#34;; // use any value with units here\nconst documentWidth = 100;\nconst documentHeight = 100;\nconst rectWidth = documentWidth;\nconst rectHeight = documentHeight;\nconst rectFill = \u0026#34;currentColor\u0026#34;; // use any color value here\nconst title = \u0026#34;A simple square box\u0026#34;;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"method-1-create-element-and-set-attributes\"\u003eMethod 1: Create Element and Set Attributes\u003c/h3\u003e\u003cp\u003eThis method is easier to keep type-safe (if using TypeScript) — uses proper SVG elements and attributes, and so on — but it is less performant and may take a long time if you have many elements.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst svg = document.createElementNS(\u0026#34;http://www.w3.org/2000/svg\u0026#34;, \u0026#34;svg\u0026#34;);\nconst titleElement = document.createElementNS(\u0026#34;http://www.w3.org/2000/svg\u0026#34;, \u0026#34;title\u0026#34;);\nconst rect = document.createElementNS(\u0026#34;http://www.w3.org/2000/svg\u0026#34;, \u0026#34;rect\u0026#34;);\n\nsvg.setAttribute(\u0026#34;width\u0026#34;, svgWidth);\nsvg.setAttribute(\u0026#34;viewBox\u0026#34;, `0 0 ${documentWidth} ${documentHeight}`);\nsvg.setAttribute(\u0026#34;xmlns\u0026#34;, \u0026#34;http://www.w3.org/2000/svg\u0026#34;);\nsvg.setAttribute(\u0026#34;role\u0026#34;, \u0026#34;img\u0026#34;);\n\ntitleElement.textContent = title;\n\nrect.setAttribute(\u0026#34;width\u0026#34;, rectWidth);\nrect.setAttribute(\u0026#34;height\u0026#34;, rectHeight);\nrect.setAttribute(\u0026#34;fill\u0026#34;, rectFill);\n\nsvg.appendChild(titleElement);\nsvg.appendChild(rect);\n\ncontainer.appendChild(svg);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"LYKKVzg\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Rectangle (JS Method 1) [forked]](https://codepen.io/smashingmag/pen/LYKKVzg) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/LYKKVzg\"\u003eSVG Rectangle (JS Method 1) [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"method-2-create-an-svg-string\"\u003eMethod 2: Create An SVG String\u003c/h3\u003e\u003cp\u003eAlternatively, you can create an SVG string and set the \u003ccode\u003einnerHTML\u003c/code\u003e of the container to that string. This is more performant, but you lose type safety, and the elements aren’t properly created in the DOM.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econtainer.innerHTML = `\n\u0026lt;svg \n  width=\u0026#34;${svgWidth}\u0026#34; \n  viewBox=\u0026#34;0 0 ${documentWidth} ${documentHeight}\u0026#34; \n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; \n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;title\u0026gt;${title}\u0026lt;/title\u0026gt;\n  \u0026lt;rect \n    width=\u0026#34;${rectWidth}\u0026#34; \n    height=\u0026#34;${rectHeight}\u0026#34; \n    fill=\u0026#34;${rectFill}\u0026#34; \n  /\u0026gt;\n\u0026lt;/svg\u0026gt;`;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"BaggNmN\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Rectangle (JS Method 2) [forked]](https://codepen.io/smashingmag/pen/BaggNmN) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/BaggNmN\"\u003eSVG Rectangle (JS Method 2) [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"method-3-best-of-both-worlds\"\u003eMethod 3: Best Of Both Worlds\u003c/h3\u003e\u003cp\u003eThe best of both worlds is to just create the SVG itself as a DOM element and then set the content of the SVG via \u003ccode\u003einnerHTML\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eWe’re appending a proper SVG element to the container and can type-check that and have access to it properly. You aren’t typically going to be changing the content of the SVG that much, so I feel like this is probably the best way to do it.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst svg = document.createElementNS(\u0026#34;http://www.w3.org/2000/svg\u0026#34;, \u0026#34;svg\u0026#34;);\n\nsvg.setAttribute(\u0026#34;width\u0026#34;, svgWidth);\nsvg.setAttribute(\u0026#34;viewBox\u0026#34;, `0 0 ${documentWidth} ${documentHeight}`);\nsvg.setAttribute(\u0026#34;xmlns\u0026#34;, \u0026#34;http://www.w3.org/2000/svg\u0026#34;);\nsvg.setAttribute(\u0026#34;role\u0026#34;, \u0026#34;img\u0026#34;);\n\nsvg.innerHTML = `\n  \u0026lt;title\u0026gt;${title}\u0026lt;/title\u0026gt;\n  \u0026lt;rect \n    width=\u0026#34;${rectWidth}\u0026#34; \n    height=\u0026#34;${rectHeight}\u0026#34; \n    fill=\u0026#34;${rectFill}\u0026#34; \n  /\u0026gt;\n`;\n\ncontainer.appendChild(svg);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"RwzzPjz\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Rectangle (JS Method 3) [forked]](https://codepen.io/smashingmag/pen/RwzzPjz) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/RwzzPjz\"\u003eSVG Rectangle (JS Method 3) [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"drawing-basic-elements\"\u003eDrawing Basic Elements\u003c/h2\u003e\u003cp\u003eOkay, so now that we have the basics of the SVG setup, let’s look into how the most common elements are drawn.\u003c/p\u003e\u003ch3 id=\"drawing-boxes\"\u003eDrawing Boxes\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;rect\u0026gt;\u003c/code\u003e creates a box, as we’ve learned in the previous example. It has \u003ccode\u003ey\u003c/code\u003e and \u003ccode\u003ex\u003c/code\u003e attributes, which define the position of the top left corner. They are optional, and if not set, the box will be drawn at the origin \u003ccode\u003e(0,0)\u003c/code\u003e like in that previous example.\u003c/p\u003e\u003cp\u003eThere are also \u003ccode\u003erx\u003c/code\u003e and \u003ccode\u003ery\u003c/code\u003e attributes. Those are radii. If you define \u003ccode\u003erx\u003c/code\u003e, \u003ccode\u003ery\u003c/code\u003e will automatically be set to the same value unless you redeclare it, then you’d use an elliptical corner-radius instead of a circular one.\u003c/p\u003e\u003cp\u003eLet’s draw four different rectangles in our next SVG, one in each quadrant:\u003c/p\u003e\u003col\u003e\u003cli\u003eTop left: This is just a rectangle with a top and left offset and a width and height.\u003c/li\u003e\u003cli\u003eTop right: We will make use of a small corner radius to make it a rounded rectangle.\u003c/li\u003e\u003cli\u003eBottom left: It uses such a large corner radius that it turns into a circle. It has a bit of a weird box origin, but it’s an option.\u003c/li\u003e\u003cli\u003eBottom right: It uses an elliptical corner radius for this squoval shape.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThis is the implementation in JavaScript:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst rectDocWidth = 200;\nconst rectDocHeight = 200;\nconst rectFill = \u0026#34;currentColor\u0026#34;;\nconst docOffset = 15;\nconst rectSize = rectDocWidth / 2 - docOffset * 2;\nconst roundedCornerRadius = 10;\nconst circleLookRadius = rectSize / 2;\nconst ellipticalRy = roundedCornerRadius * 2;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd to then set up the SVG, we’ll apply these variables to the template:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${rectDocWidth} ${rectDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;title\u0026gt;Four Rectangles of different qualities placed in each quadrant\u0026lt;/title\u0026gt;\n  \u0026lt;rect\n    x={docOffset}\n    y={docOffset}\n    width={rectSize}\n    height={rectSize}\n    fill={rectFill}\n  /\u0026gt;\n  \u0026lt;rect\n    x={rectDocWidth - rectSize - docOffset}\n    rx={roundedCornerRadius}\n    y={docOffset}\n    width={rectSize}\n    height={rectSize}\n    fill={rectFill}\n  /\u0026gt;\n  \u0026lt;rect\n    x={docOffset}\n    rx={circleLookRadius}\n    y={rectDocHeight - rectSize - docOffset}\n    width={rectSize}\n    height={rectSize}\n    fill={rectFill}\n  /\u0026gt;\n  \u0026lt;rect\n    x={rectDocWidth - rectSize - docOffset}\n    rx={roundedCornerRadius}\n    ry={ellipticalRy}\n    y={rectDocHeight - rectSize - docOffset}\n    width={rectSize}\n    height={rectSize}\n    fill={rectFill}\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd this is the result:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"mdZZJpN\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Rect [forked]](https://codepen.io/smashingmag/pen/mdZZJpN) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/mdZZJpN\"\u003eSVG Rect [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"drawing-lines\"\u003eDrawing Lines\u003c/h2\u003e\u003cp\u003eThere is a \u003ccode\u003e\u0026lt;line\u0026gt;\u003c/code\u003e element in SVG that takes an \u003ccode\u003ex1\u003c/code\u003e, \u003ccode\u003ey1\u003c/code\u003e, \u003ccode\u003ex2\u003c/code\u003e, and \u003ccode\u003ey2\u003c/code\u003e attribute, which are the coordinates of the start and end points of the line.\u003c/p\u003e\u003cp\u003eFor me, knowing how to draw straight horizontal or vertical lines was fairly important.\u003c/p\u003e\u003cp\u003eThe rules for that are simple: \u003cstrong\u003eWe’ll just have to make sure that the \u003ccode\u003ey\u003c/code\u003e values are the same for a horizontal line and the \u003ccode\u003ex\u003c/code\u003e values are the same for a vertical line.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLet’s look at an example where we draw a horizontal and a vertical line through the center of our document. I purposefully used some weirder numbers here; you’ll see that the resulting SVG is still perfectly centered, though, since it’s totally fine to use floating point numbers in SVG, and we don’t really run into subpixel rendering issues as we do in some CSS cases, where we end up with fractional pixels.\u003c/p\u003e\u003cp\u003eThese are the JavaScript variables we set up:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst lineDocWidth = 421;\nconst lineDocHeight = 391;\nconst lineStroke = \u0026#34;currentColor\u0026#34;;\nconst lineStrokeWidth = 5;\nconst horizontalLineStart = 0;\nconst horizontalLineEnd = lineDocWidth;\nconst horizontalLineY = lineDocHeight / 2;\nconst verticalLineStart = 0;\nconst verticalLineEnd = lineDocHeight;\nconst verticalLineX = lineDocWidth / 2;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is how we can integrate these variables into the SVG element:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${lineDocWidth} ${lineDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;title\u0026gt;Horizontal and Vertical Line through the middle of the document\u0026lt;/title\u0026gt;\n  \u0026lt;line\n    x1={horizontalLineStart}\n    x2={horizontalLineEnd}\n    y1={horizontalLineY}\n    y2={horizontalLineY}\n    stroke={lineStroke}\n    stroke-width={lineStrokeWidth}\n  /\u0026gt;\n  \u0026lt;line\n    x1={verticalLineX}\n    x2={verticalLineX}\n    y1={verticalLineStart}\n    y2={verticalLineEnd}\n    stroke={lineStroke}\n    stroke-width={lineStrokeWidth}\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd here’s our result:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"abggOqK\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Line [forked]](https://codepen.io/smashingmag/pen/abggOqK) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/abggOqK\"\u003eSVG Line [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"drawing-circles\"\u003eDrawing Circles\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;circle\u0026gt;\u003c/code\u003e elements have \u003ccode\u003ecx\u003c/code\u003e, \u003ccode\u003ecy\u003c/code\u003e, and \u003ccode\u003er\u003c/code\u003e as coordinates. The \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values are relative to the circle center, and \u003ccode\u003er\u003c/code\u003e describes the radius of the circle.\u003c/p\u003e\u003cp\u003eThis is where things are less intuitive in my head because there will be times when I want the edge of the circle to be placed at a certain point and not the center, and I’ll usually also think in terms of diameters, not radii.\u003c/p\u003e\u003cp\u003eSo, let’s say we want to draw a circle whose outer edge is offset from the bottom left corner by a certain amount and whose diameter is a certain size. We’d have to do some math again to calculate our coordinates.\u003c/p\u003e\u003cp\u003eThese are the variables in JavaScript that we’re working with:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst circleDocWidth = 100;\nconst circleDocHeight = 100;\nconst circleOffset = 10;\nconst circleDiameter = 20;\nconst circleRadius = circleDiameter / 2;\nconst circleX = circleOffset + circleRadius;\nconst circleY = circleDocHeight - circleOffset - circleRadius;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd, just like before, this is how we might integrate them into the SVG element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${circleDocWidth} ${circleDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;circle\n    cx={circleX}\n    cy={circleY}\n    r={circleRadius}\n    fill=\u0026#34;red\u0026#34;\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is what it looks like:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"KKjjpoW\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Circle [forked]](https://codepen.io/smashingmag/pen/KKjjpoW) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/KKjjpoW\"\u003eSVG Circle [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"drawing-ellipses\"\u003eDrawing Ellipses\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;ellipse\u0026gt;\u003c/code\u003e elements have \u003ccode\u003ecx\u003c/code\u003e, \u003ccode\u003ecy\u003c/code\u003e, \u003ccode\u003erx\u003c/code\u003e, and \u003ccode\u003ery\u003c/code\u003e as coordinates. The \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values are relative to the ellipse center, and \u003ccode\u003erx\u003c/code\u003e and \u003ccode\u003ery\u003c/code\u003e describe the radius of the ellipse.\u003c/p\u003e\u003cp\u003eLet’s draw an ellipse that is offset from the top right corner by a certain amount, whose horizontal radius is a certain size, and whose vertical radius is half of that.\u003c/p\u003e\u003cp\u003eFor that we need to define our variables in JavaScript:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst ellipseSVGWidth = 100;\nconst ellipseDocWidth = 100;\nconst ellipseDocHeight = 100;\nconst ellipseOffset = 10;\nconst ellipseHorizontalRadius = ellipseDocWidth / 2 - ellipseOffset;\nconst ellipseVerticalRadius = ellipseHorizontalRadius / 2;\nconst ellipseX = ellipseDocWidth - ellipseOffset - ellipseHorizontalRadius;\nconst ellipseY = ellipseOffset + ellipseVerticalRadius;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e…and integrate them into the SVG element:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${ellipseDocWidth} ${ellipseDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;title\u0026gt;Ellipse offset from the top right corner\u0026lt;/title\u0026gt;\n  \u0026lt;ellipse\n    cx={ellipseX}\n    cy={ellipseY}\n    rx={ellipseHorizontalRadius}\n    ry={ellipseVerticalRadius}\n    fill=\u0026#34;hotpink\u0026#34;\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere’s the result:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"NWZZqMR\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Ellipse [forked]](https://codepen.io/smashingmag/pen/NWZZqMR) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/NWZZqMR\"\u003eSVG Ellipse [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"connecting-dots-with-polyline-and-polygon\"\u003eConnecting Dots With \u003ccode\u003e\u0026lt;polyline\u0026gt;\u003c/code\u003e And \u003ccode\u003e\u0026lt;polygon\u0026gt;\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eLet’s say we want to have a line that has multiple points but doesn’t make a rectangle or a circle.\u003c/p\u003e\u003cp\u003eThis is where we can use \u003ccode\u003epolyline\u003c/code\u003e and \u003ccode\u003epolygon\u003c/code\u003e, which share the same attributes and only differ in the way that a \u003ccode\u003epolygon\u003c/code\u003e will connect the first and last point, while a \u003ccode\u003epolyline\u003c/code\u003e won’t.\u003c/p\u003e\u003cp\u003eThey take a \u003ccode\u003epoints\u003c/code\u003e attribute, which is a list of \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values separated by a space, and, by default, both of them have a \u003ccode\u003efill\u003c/code\u003e, which can be a bit strange. That’s especially true for a \u003ccode\u003epolyline\u003c/code\u003e, so you might want to set that value to \u003ccode\u003enone\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eLet’s say we have three circles, and we want to have lines connecting their centers. We can just take the \u003ccode\u003ecx\u003c/code\u003e and \u003ccode\u003ecy\u003c/code\u003e values of those circles and chain them together in the \u003ccode\u003epoints\u003c/code\u003e attribute.\u003c/p\u003e\u003cp\u003eSVG is drawn from background to foreground, so the circles are drawn first, then the lines so they are stacked on top of each other.\u003c/p\u003e\u003cp\u003eTo notice the differences between the polyline and the polygon, we’ll draw our composite four times, like we did before with the circles.\u003c/p\u003e\u003cp\u003eThis time, we have more than one element, though. To make it quicker to scan which set belongs together, we can make use of the \u003ccode\u003eg\u003c/code\u003e element, which groups multiple elements together. It allows us to apply certain attributes to all children at the same time.\u003c/p\u003e\u003cp\u003eTo see that in action and to save us a bit of time, in having to adjust \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e values for each separate element within the composite, we can apply a \u003ccode\u003etransform\u003c/code\u003e to that group element to push our composite into the different quadrants.\u003c/p\u003e\u003cp\u003e\u003ccode\u003etransform=\u0026#34;translate(x,y)\u003c/code\u003e” is how we do that. The transform attribute works a lot like CSS transforms, with slight differences in syntax. But in most simple cases, we can assume the same thing to happen. The translate attribute will take the original position and then move the elements contained within the group along the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e axis.\u003c/p\u003e\u003cp\u003eSo, let’s have a look at our SVG:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.svg\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"800\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.png\" sizes=\"100vw\" alt=\"From left to right, bottom to top: Polyline with no fill applied, polyline with fill, polygon with no fill, polygon with fill\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFrom left to right, bottom to top: Polyline with no fill applied, polyline with fill, polygon with no fill, polygon with fill. (\u003ca href=\"https://files.smashing.media/articles/svg-coding-examples-recipes-writing-vectors-by-hand/polygon-polyline-composite-fixed.svg\"\u003eSVG preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eHere, you can see that with the same coordinates, a polyline won’t draw the line between the blue and the red dot, while a polygon will. However, when applying a fill, they take the exact same information as if the shape was closed, which is the right side of the graphic, where the polyline makes it look like a piece of a circle is missing.\u003c/p\u003e\u003cp\u003eThis is the second time where we have dealt with quite a bit of repetition, and we can have a look at how we could leverage the power of JavaScript logic to render our template faster.\u003c/p\u003e\u003cp\u003eBut first, we need a basic implementation like we’ve done before. We’re creating objects for the circles, and then we’re chaining the \u003ccode\u003ecx\u003c/code\u003e and \u003ccode\u003ecy\u003c/code\u003e values together to create the \u003ccode\u003epoints\u003c/code\u003e attribute. We’re also storing our transforms in variables.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst polyDocWidth = 200;\nconst polyDocHeight = 200;\nconst circleOne = { cx: 25, cy: 80, r: 10, fill: \u0026#34;red\u0026#34; };\nconst circleTwo = { cx: 40, cy: 20, r: 5, fill: \u0026#34;lime\u0026#34; };\nconst circleThree = { cx: 70, cy: 60, r: 8, fill: \u0026#34;cyan\u0026#34; };\nconst points = `${circleOne.cx},${circleOne.cy} ${circleTwo.cx},${circleTwo.cy} ${circleThree.cx},${circleThree.cy}`;\nconst moveToTopRight = `translate(${polyDocWidth / 2}, 0)`;\nconst moveToBottomRight = `translate(${polyDocWidth / 2}, ${polyDocHeight / 2})`;\nconst moveToBottomLeft = `translate(0, ${polyDocHeight / 2})`;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd then, we apply the variables to the template, using either a \u003ccode\u003epolyline\u003c/code\u003e or \u003ccode\u003epolygon\u003c/code\u003e element and a \u003ccode\u003efill\u003c/code\u003e attribute that is either set to \u003ccode\u003enone\u003c/code\u003e or a color value.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\n\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${polyDocWidth} ${polyDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;title\u0026gt;Composite shape comparison\u0026lt;/title\u0026gt;\n  \u0026lt;g\u0026gt;\n    \u0026lt;circle\n      cx={circleOne.cx}\n      cy={circleOne.cy}\n      r={circleOne.r}\n      fill={circleOne.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleTwo.cx}\n      cy={circleTwo.cy}\n      r={circleTwo.r}\n      fill={circleTwo.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleThree.cx}\n      cy={circleThree.cy}\n      r={circleThree.r}\n      fill={circleThree.fill}\n    /\u0026gt;\n    \u0026lt;polyline\n      points={points}\n      fill=\u0026#34;none\u0026#34;\n      stroke=\u0026#34;black\u0026#34;\n    /\u0026gt;\n  \u0026lt;/g\u0026gt;\n  \u0026lt;g transform={moveToTopRight}\u0026gt;\n    \u0026lt;circle\n      cx={circleOne.cx}\n      cy={circleOne.cy}\n      r={circleOne.r}\n      fill={circleOne.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleTwo.cx}\n      cy={circleTwo.cy}\n      r={circleTwo.r}\n      fill={circleTwo.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleThree.cx}\n      cy={circleThree.cy}\n      r={circleThree.r}\n      fill={circleThree.fill}\n    /\u0026gt;\n    \u0026lt;polyline\n      points={points}\n      fill=\u0026#34;white\u0026#34;\n      stroke=\u0026#34;black\u0026#34;\n    /\u0026gt;\n  \u0026lt;/g\u0026gt;\n  \u0026lt;g transform={moveToBottomLeft}\u0026gt;\n    \u0026lt;circle\n      cx={circleOne.cx}\n      cy={circleOne.cy}\n      r={circleOne.r}\n      fill={circleOne.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleTwo.cx}\n      cy={circleTwo.cy}\n      r={circleTwo.r}\n      fill={circleTwo.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleThree.cx}\n      cy={circleThree.cy}\n      r={circleThree.r}\n      fill={circleThree.fill}\n    /\u0026gt;\n    \u0026lt;polygon\n      points={points}\n      fill=\u0026#34;none\u0026#34;\n      stroke=\u0026#34;black\u0026#34;\n    /\u0026gt;\n  \u0026lt;/g\u0026gt;\n  \u0026lt;g transform={moveToBottomRight}\u0026gt;\n    \u0026lt;circle\n      cx={circleOne.cx}\n      cy={circleOne.cy}\n      r={circleOne.r}\n      fill={circleOne.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleTwo.cx}\n      cy={circleTwo.cy}\n      r={circleTwo.r}\n      fill={circleTwo.fill}\n    /\u0026gt;\n    \u0026lt;circle\n      cx={circleThree.cx}\n      cy={circleThree.cy}\n      r={circleThree.r}\n      fill={circleThree.fill}\n    /\u0026gt;\n    \u0026lt;polygon\n      points={points}\n      fill=\u0026#34;white\u0026#34;\n      stroke=\u0026#34;black\u0026#34;\n    /\u0026gt;\n  \u0026lt;/g\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd here’s a version of it to play with:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"OJeeVoM\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Polygon / Polyline (simple) [forked]](https://codepen.io/smashingmag/pen/OJeeVoM) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/OJeeVoM\"\u003eSVG Polygon / Polyline (simple) [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"dealing-with-repetition\"\u003eDealing With Repetition\u003c/h2\u003e\u003cp\u003eWhen it comes to drawing SVGs, you may find that you’ll be repeating a lot of the same code over and over again. This is where JavaScript can come in handy, so let’s look at the composite example again and see how we could optimize it so that there is less repetition.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eObservations:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe have three circle elements, all following the same pattern.\u003c/li\u003e\u003cli\u003eWe create one repetition to change the \u003ccode\u003efill\u003c/code\u003e style for the element.\u003c/li\u003e\u003cli\u003eWe repeat those two elements one more time, with either a \u003ccode\u003epolyline\u003c/code\u003e or a \u003ccode\u003epolygon\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eWe have four different \u003ccode\u003etransforms\u003c/code\u003e (technically, no transform is a transform in this case).\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis tells us that we can create nested loops.\u003c/p\u003e\u003cp\u003eLet’s go back to just a vanilla implementation for this since the way loops are done is quite different across frameworks.\u003c/p\u003e\u003cp\u003eYou could make this more generic and write separate generator functions for each type of element, but this is just to give you an idea of what you could do in terms of logic. There are certainly still ways to optimize this.\u003c/p\u003e\u003cp\u003eI’ve opted to have arrays for each type of variation that we have and wrote a helper function that goes through the data and builds out an array of objects with all the necessary information for each group. In such a short array, it would certainly be a viable option to just have the data stored in one element, where the values are repeated, but we’re taking the DRY thing seriously in this one.\u003c/p\u003e\u003cp\u003eThe group array can then be looped over to build our SVG HTML.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst container = document.querySelector(\u0026#34;[data-svg-container]\u0026#34;);\nconst svgWidth = 200;\nconst documentWidth = 200;\nconst documentHeight = 200;\nconst halfWidth = documentWidth / 2;\nconst halfHeight = documentHeight / 2;\nconst circles = [\n  { cx: 25, cy: 80, r: 10, fill: \u0026#34;red\u0026#34; },\n  { cx: 40, cy: 20, r: 5, fill: \u0026#34;lime\u0026#34; },\n  { cx: 70, cy: 60, r: 8, fill: \u0026#34;cyan\u0026#34; },\n];\nconst points = circles.map(({ cx, cy }) =\u0026gt; `${cx},${cy}`).join(\u0026#34; \u0026#34;);\nconst elements = [\u0026#34;polyline\u0026#34;, \u0026#34;polygon\u0026#34;];\nconst fillOptions = [\u0026#34;none\u0026#34;, \u0026#34;white\u0026#34;];\nconst transforms = [\n  undefined,\n  `translate(${halfWidth}, 0)`,\n  `translate(0, ${halfHeight})`,\n  `translate(${halfWidth}, ${halfHeight})`,\n];\nconst makeGroupsDataObject = () =\u0026gt; {\n  let counter = 0;\n  const g = [];\n  elements.forEach((element) =\u0026gt; {\n    fillOptions.forEach((fill) =\u0026gt; {\n      const transform = transforms[counter++];\n      g.push({ element, fill, transform });\n    });\n  });\n  return g;\n};\nconst groups = makeGroupsDataObject();\n// result:\n// [\n//   {\n//     element: \u0026#34;polyline\u0026#34;,\n//     fill: \u0026#34;none\u0026#34;,\n//   },\n//   {\n//     element: \u0026#34;polyline\u0026#34;,\n//     fill: \u0026#34;white\u0026#34;,\n//     transform: \u0026#34;translate(100, 0)\u0026#34;,\n//   },\n//   {\n//     element: \u0026#34;polygon\u0026#34;,\n//     fill: \u0026#34;none\u0026#34;,\n//     transform: \u0026#34;translate(0, 100)\u0026#34;,\n//   },\n//   {\n//     element: \u0026#34;polygon\u0026#34;,\n//     fill: \u0026#34;white\u0026#34;,\n//     transform: \u0026#34;translate(100, 100)\u0026#34;,\n//   }\n// ]\n\nconst svg = document.createElementNS(\u0026#34;http://www.w3.org/2000/svg\u0026#34;, \u0026#34;svg\u0026#34;);\nsvg.setAttribute(\u0026#34;width\u0026#34;, svgWidth);\nsvg.setAttribute(\u0026#34;viewBox\u0026#34;, `0 0 ${documentWidth} ${documentHeight}`);\nsvg.setAttribute(\u0026#34;xmlns\u0026#34;, \u0026#34;http://www.w3.org/2000/svg\u0026#34;);\nsvg.setAttribute(\u0026#34;role\u0026#34;, \u0026#34;img\u0026#34;);\nsvg.innerHTML = \u0026#34;\u0026lt;title\u0026gt;Composite shape comparison\u0026lt;/title\u0026gt;\u0026#34;;\ngroups.forEach((groupData) =\u0026gt; {\n  const circlesHTML = circles\n    .map((circle) =\u0026gt; {\n      return `\n        \u0026lt;circle \n          cx=\u0026#34;${circle.cx}\u0026#34; \n          cy=\u0026#34;${circle.cy}\u0026#34; \n          r=\u0026#34;${circle.r}\u0026#34; \n          fill=\u0026#34;${circle.fill}\u0026#34;\n        /\u0026gt;`;\n    })\n    .join(\u0026#34;\u0026#34;);\n  const polyElementHTML = `\n    \u0026lt;${groupData.element} \n      points=\u0026#34;${points}\u0026#34; \n      fill=\u0026#34;${groupData.fill}\u0026#34; \n      stroke=\u0026#34;black\u0026#34; \n    /\u0026gt;`;\n  const group = `\n      \u0026lt;g ${groupData.transform ? `transform=\u0026#34;${groupData.transform}\u0026#34;` : \u0026#34;\u0026#34;}\u0026gt;\n        ${circlesHTML}\n        ${polyElementHTML}\n      \u0026lt;/g\u0026gt;\n    `;\n  svg.innerHTML += group;\n});\ncontainer.appendChild(svg);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd here’s the Codepen of that:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"XWLLbPq\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Polygon / Polyline (JS loop version) [forked]](https://codepen.io/smashingmag/pen/XWLLbPq) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/XWLLbPq\"\u003eSVG Polygon / Polyline (JS loop version) [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"more-fun-stuff\"\u003eMore Fun Stuff\u003c/h2\u003e\u003cp\u003eNow, that’s all the basics I wanted to cover, but there is so much more you can do with SVG. There is more you can do with \u003ccode\u003etransform\u003c/code\u003e; you can use a \u003ccode\u003emask\u003c/code\u003e, you can use a \u003ccode\u003emarker\u003c/code\u003e, and so on.\u003c/p\u003e\u003cp\u003eWe don’t have time to dive into all of them today, but since this started for me when making Calligraphy Grids, I wanted to show you the two most satisfying ones, which I, unfortunately, can’t use in the generator since I wanted to be able to open my generated SVGs in Affinity and it doesn’t support \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eOkay, so \u003ccode\u003epattern\u003c/code\u003e is part of the \u003ccode\u003edefs\u003c/code\u003e section within the SVG, which is where you can define reusable elements that you can then reference in your SVG.\u003c/p\u003e\u003ch3 id=\"graph-grid-with-pattern\"\u003eGraph Grid with \u003ccode\u003epattern\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eIf you think about it, a graph is just a bunch of horizontal and vertical lines that repeat across the x- and y-axis.\u003c/p\u003e\u003cp\u003eSo, \u003ccode\u003epattern\u003c/code\u003e can help us with that. We can create a \u003ccode\u003e\u0026lt;rect\u0026gt;\u003c/code\u003e and then reference a \u003ccode\u003epattern\u003c/code\u003e in the \u003ccode\u003efill\u003c/code\u003e attribute of the \u003ccode\u003erect\u003c/code\u003e. The pattern then has its own \u003ccode\u003ewidth\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, and \u003ccode\u003eviewBox\u003c/code\u003e, which defines how the pattern is repeated.\u003c/p\u003e\u003cp\u003eSo, let’s say we want to perfectly center our graph grid in any given width or height, and we want to be able to define the size of our resulting squares (cells).\u003c/p\u003e\u003cp\u003eOnce again, let’s start with the JavaScipt variables:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst graphDocWidth = 226;\nconst graphDocHeight = 101;\nconst cellSize = 5;\nconst strokeWidth = 0.3;\nconst strokeColor = \u0026#34;currentColor\u0026#34;;\nconst patternHeight = (cellSize / graphDocHeight) * 100;\nconst patternWidth = (cellSize / graphDocWidth) * 100;\nconst gridYStart = (graphDocHeight % cellSize) / 2;\nconst gridXStart = (graphDocWidth % cellSize) / 2;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, we can apply them to the SVG element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${graphDocWidth} ${graphDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;defs\u0026gt;\n    \u0026lt;pattern\n      id=\u0026#34;horizontal\u0026#34;\n      viewBox={`0 0 ${graphDocWidth} ${strokeWidth}`}\n      width=\u0026#34;100%\u0026#34;\n      height={`${patternHeight}%`}\n    \u0026gt;\n      \u0026lt;line\n        x1=\u0026#34;0\u0026#34;\n        x2={graphDocWidth}\n        y1={gridYStart}\n        y2={gridYStart}\n        stroke={strokeColor}\n        stroke-width={strokeWidth}\n      /\u0026gt;\n    \u0026lt;/pattern\u0026gt;\n    \u0026lt;pattern\n      id=\u0026#34;vertical\u0026#34;\n      viewBox={`0 0 ${strokeWidth} ${graphDocHeight}`}\n      width={`${patternWidth}%`}\n      height=\u0026#34;100%\u0026#34;\n    \u0026gt;\n      \u0026lt;line\n        y1={0}\n        y2={graphDocHeight}\n        x1={gridXStart}\n        x2={gridXStart}\n        stroke={strokeColor}\n        stroke-width={strokeWidth}\n      /\u0026gt;\n    \u0026lt;/pattern\u0026gt;\n  \u0026lt;/defs\u0026gt;\n  \u0026lt;title\u0026gt;A graph grid\u0026lt;/title\u0026gt;\n  \u0026lt;rect\n    width={graphDocWidth}\n    height={graphDocHeight}\n    fill=\u0026#34;url(#horizontal)\u0026#34;\n  /\u0026gt;\n  \u0026lt;rect\n    width={graphDocWidth}\n    height={graphDocHeight}\n    fill=\u0026#34;url(#vertical)\u0026#34;\n  /\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is what that then looks like:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"XWLLbxq\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Graph Grid [forked]](https://codepen.io/smashingmag/pen/XWLLbxq) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/XWLLbxq\"\u003eSVG Graph Grid [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"dot-grid-with-pattern\"\u003eDot Grid With \u003ccode\u003epattern\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eIf we wanted to draw a dot grid instead, we could simply repeat a circle. Or, we could alternatively use a line with a \u003ccode\u003estroke-dasharray\u003c/code\u003e and \u003ccode\u003estroke-dashoffset\u003c/code\u003e to create a dashed line. And we’d only need one line in this case.\u003c/p\u003e\u003cp\u003eStarting with our JavaScript variables:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst dotDocWidth = 219;\nconst dotDocHeight = 100;\nconst cellSize = 4;\nconst strokeColor = \u0026#34;black\u0026#34;;\nconst gridYStart = (dotDocHeight % cellSize) / 2;\nconst gridXStart = (dotDocWidth % cellSize) / 2;\nconst dotSize = 0.5;\nconst patternHeight = (cellSize / dotDocHeight) * 100;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd then adding them to the SVG element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg\n  width={svgWidth}\n  viewBox={`0 0 ${dotDocWidth} ${dotDocHeight}`}\n  xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\n  role=\u0026#34;img\u0026#34;\n\u0026gt;\n  \u0026lt;defs\u0026gt;\n    \u0026lt;pattern\n      id=\u0026#34;horizontal-dotted-line\u0026#34;\n      viewBox={`0 0 ${dotDocWidth} ${dotSize}`}\n      width=\u0026#34;100%\u0026#34;\n      height={`${patternHeight}%`}\n    \u0026gt;\n      \u0026lt;line\n        x1={gridXStart}\n        y1={gridYStart}\n        x2={dotDocWidth}\n        y2={gridYStart}\n        stroke={strokeColor}\n        stroke-width={dotSize}\n        stroke-dasharray={`0,${cellSize}`}\n        stroke-linecap=\u0026#34;round\u0026#34;\n      \u0026gt;\u0026lt;/line\u0026gt;\n    \u0026lt;/pattern\u0026gt;\n  \u0026lt;/defs\u0026gt;\n  \u0026lt;title\u0026gt;A Dot Grid\u0026lt;/title\u0026gt;\n  \u0026lt;rect\n    x=\u0026#34;0\u0026#34;\n    y=\u0026#34;0\u0026#34;\n    width={dotDocWidth}\n    height={dotDocHeight}\n    fill=\u0026#34;url(#horizontal-dotted-line)\u0026#34;\n  \u0026gt;\u0026lt;/rect\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd this is what that looks like:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"eYwwNQM\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Dot Grid [forked]](https://codepen.io/smashingmag/pen/eYwwNQM) by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/eYwwNQM\"\u003eSVG Dot Grid [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/mynimi\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eThis brings us to the end of our little introductory journey into SVG. As you can see, coding SVG by hand is not as scary as it seems. If you break it down into the basic elements, it becomes quite like any other coding task:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWe analyze the problem,\u003c/li\u003e\u003cli\u003eBreak it down into smaller parts,\u003c/li\u003e\u003cli\u003eExamine each coordinate and its mathematical breakdown,\u003c/li\u003e\u003cli\u003eAnd then put it all together.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI hope that this article has given you a starting point into the wonderful world of coded images and that it gives you the motivation to delve deeper into the specs and try drawing some yourself.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "33 min read",
  "publishedTime": "2024-09-18T09:00:00Z",
  "modifiedTime": "2024-09-18T09:00:00Z"
}
