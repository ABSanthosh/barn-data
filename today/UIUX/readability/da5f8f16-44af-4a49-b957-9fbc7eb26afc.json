{
  "id": "da5f8f16-44af-4a49-b957-9fbc7eb26afc",
  "title": "Open-Source Meets Design Tooling With Penpot",
  "link": "https://smashingmagazine.com/2024/11/open-source-meets-design-tooling-penpot/",
  "description": "Penpot helps designers and developers work better together by offering a free, open-source design tool based on open web standards. Today, let’s explore its newly released Penpot Plugin System. So now, if there’s a functionality missing, you don’t need to jump into the code base straight away; you can create a plugin to achieve what you need. And you can even serve it from localhost!",
  "author": "Atila Fassina",
  "published": "Thu, 14 Nov 2024 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 6835,
  "excerpt": "Penpot helps designers and developers work better together by offering a free, open-source design tool based on open web standards. Today, let’s explore its newly released Penpot Plugin System. So now, if there’s a functionality missing, you don’t need to jump into the code base straight away; you can create a plugin to achieve what you need. And you can even serve it from localhost!",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "5 min readWorkflow, Plugins, Tools, UIPenpot helps designers and developers work better together by offering a free, open-source design tool based on open web standards. Today, let’s explore its newly released Penpot Plugin System. So now, if there’s a functionality missing, you don’t need to jump into the code base straight away; you can create a plugin to achieve what you need. And you can even serve it from localhost!Penpot is a free, open-source design tool that allows true collaboration between designers and developers. Designers can create interactive prototypes and design systems at scale, while developers enjoy ready-to-use code and make their workflow easy and fast because it’s built with web technologies, works in the browser, and has already passed 33K starts on GitHub.The UI feels intuitive and makes it easy to get things done, even for someone who’s not a designer (guilty as charged!). You can get things done in the same way and with the same quality as with other more popular and closed-source tools like Figma.(Large preview)Why Open-Source Is ImportantAs someone who works with commercial open-source on my day-to-day, I strongly believe in it as a way to be closer to your users and unlock the next level of delivery. Being open-source creates a whole new level of accountability and flexibility for a tool.Developers are a different breed of user. When we hit a quirk or a gap in the UX, our first instinct is to play detective and figure out why that pattern stuck out as a sore thumb to what we’ve been doing. When the code is open-source, it’s not unusual for us to jump into the source and create an issue with a proposal on how to solve it already. At least, that’s the dream.On top of that, being open-source allows you and your team to self-host, giving you that extra layer of privacy and control, or at least a more cost-effective solution if you have the time and skills to DYI it all.When the cards are played right, and the team is able to afford the long-term benefits, commercial open-source is a win-win strategy.Introducing: Penpot Plugin SystemTalking about the extensibility of open-source, Penpot has the PenpotHub the home for open-source templates and the newly released plugin gallery. So now, if there’s a functionality missing, you don’t need to jump into the code-base straightaway — you can create a plugin to achieve what you need. And you can even serve it from localhost!Creating Penpot PluginsWhen it comes to the plugins, creating one is extremely ergonomic. First, there are already set templates for a few frameworks, and I created one for SolidJS in this PR — the power of open-source!When using Vite, plugins are Single-Page Applications; if you have ever built a Hello World app with Vite, you have what it takes to create a plugin. On top of that, the Penpot team has a few packages that can give you a headstart in the process:npm install @penpot/plugin-styles That will allow you to import with a CSS loader or a CSS import from @penpot/plugin-styles/styles.css. The JavaScript API is available through the window object, but if your plugin is in TypeScript, you need to teach it:npm add -D @penpot/plugin-types With those types in your node_modules, you can pop-up the tsconfig.json and add the types to the compilerOptions.{ \"compilerOptions\": { \"types\": [\"@penpot/plugin-types\"] } } And there you are, now, the Language Service Provider in your editor and the TypeScript Compiler will accept that penpot is a valid namespace, and you’ll have auto-completion for the Penpot APIs throughout your entire project. For example, defining your plugin will look like the following:penpot.ui.open(\"Your Plugin Name\", \"\", { width: 500, height: 600 }) The last step is to define a plugin manifest in a manifest.json file and make sure it’s in the outpot directory from Vite. The manifest will indicate where each asset is and what permissions your plugin requires to work:{ \"name\": \"Your Plugin Name\", \"description\": \"A Super plugin that will win Penpot Plugin Contest\", \"code\": \"/plugin.js\", \"icon\": \"/icon.png\", \"permissions\": [ \"content:read\", \"content:write\", \"library:read\", \"library:write\", \"user:read\", \"comment:read\", \"comment:write\", \"allow:downloads\" ] } Once the initial setup is done, the communication between the Penpot API and the plugin interface is done with a bidirectional messaging system, not so different than what you’d do with a Web-Worker.So, to send a message from your plugin to the Penpot API, you can do the following:penpot.ui.sendMessage(\"Hello from my Plugin\"); And to receive it back, you need to add an event listener to the window object (the top-level scope) of your plugin:window.addEventListener(\"message\", event =\u003e { console.log(\"Received from Pendpot::: \", event.data); }) A quick performance tip: If you’re creating a more complex plugin with different views and perhaps even routes, you need to have a cleanup logic. Most frameworks provide decent ergonomics to do that; for example, React does it via their return statements.useEffect(() =\u003e { function handleMessage(e) { console.log(\"Received from Pendpot::: \", event.data); } window.addEventListener('message', handleMessage); return () =\u003e window.removeEventListener('message', handleMessage); }, []); And Solid has onMount and onCleanup helpers for it:onMount(() =\u003e { function handleMessage(e) { console.log(\"Received from Penpot::: \", event.data); } window.addEventListener('message', handleMessage); }) onCleanup(() =\u003e { window.removeEventListener('message', handleMessage); }) Or with the @solid-primitive/event-listener helper library, so it will be automatically disposed:import { makeEventListener } from \"@solid-primitives/event-listener\"; function Component() { const clear = makeEventListener(window, \"message\", handleMessage); // ... return (\u003cspan\u003eHello!\u003c/span\u003e) } In the official documentation, there’s a step-by-step guide that will walk you through the process of creating, testing, and publishing your plugin. It will even help you out.So, what are you waiting for?Plugin Contest: Imagine, Build, WinWell, maybe you’re waiting for a push of motivation. The Penpot team thought of that, which is why they’re starting a Plugin Contest!(Large preview)For this contest, they want a fully functional plugin; it must be open-source and include comprehensive documentation. Detailing its features, installation, and usage. The first prize is US$ 1000, and the criteria are innovation, functionality, usability, performance, and code quality. The contest will run from November 15th to December 15th.Final ThoughtsIf you decide to build a plugin, I’d love to know what you’re building and what stack you chose. Please let me know in the comments below or on BlueSky! (yk)",
  "image": "https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/open-source-meets-design-tooling-penpot.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e5 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/workflow\"\u003eWorkflow\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/plugins\"\u003ePlugins\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/tools\"\u003eTools\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/ui\"\u003eUI\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003ePenpot helps designers and developers work better together by offering a free, open-source design tool based on open web standards. Today, let’s explore its newly released Penpot Plugin System. So now, if there’s a functionality missing, you don’t need to jump into the code base straight away; you can create a plugin to achieve what you need. And you can even serve it from localhost!\u003c/section\u003e\u003c/p\u003e\u003cp\u003ePenpot is a free, open-source design tool that allows true collaboration between designers and developers. Designers can create interactive prototypes and design systems at scale, while developers enjoy ready-to-use code and make their workflow easy and fast because it’s built with web technologies, works in the browser, and has already passed \u003ca href=\"https://github.com/penpot/penpot\"\u003e33K starts on GitHub\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe UI feels intuitive and makes it easy to get things done, even for someone who’s not a designer (guilty as charged!). You can get things done in the same way and with the same quality as with other more popular and closed-source tools like Figma.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"532\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png\" sizes=\"100vw\" alt=\"Penpot tool\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/1-penpot.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"why-open-source-is-important\"\u003eWhy Open-Source Is Important\u003c/h2\u003e\u003cp\u003eAs someone who works with commercial open-source on my day-to-day, I strongly believe in it as a way to be closer to your users and unlock the next level of delivery. Being open-source creates a whole new level of accountability and flexibility for a tool.\u003c/p\u003e\u003cp\u003eDevelopers are a different breed of user. When we hit a quirk or a gap in the UX, our first instinct is to play detective and figure out why that pattern stuck out as a sore thumb to what we’ve been doing. When the code is open-source, it’s not unusual for us to jump into the source and create an issue with a proposal on how to solve it already. At least, that’s the dream.\u003c/p\u003e\u003cp\u003eOn top of that, being open-source allows you and your team to \u003cstrong\u003eself-host\u003c/strong\u003e, giving you that extra layer of privacy and control, or at least a more cost-effective solution if you have the time and skills to DYI it all.\u003c/p\u003e\u003cp\u003eWhen the cards are played right, and the team is able to afford the long-term benefits, commercial open-source is a win-win strategy.\u003c/p\u003e\u003ch2 id=\"introducing-penpot-plugin-system\"\u003eIntroducing: Penpot Plugin System\u003c/h2\u003e\u003cp\u003eTalking about the extensibility of open-source, Penpot has the \u003ca href=\"https://penpot.app/penpothub?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=PluginsContest\"\u003ePenpotHub\u003c/a\u003e the home for open-source \u003cstrong\u003etemplates\u003c/strong\u003e and the newly released \u003cstrong\u003eplugin\u003c/strong\u003e gallery. So now, if there’s a functionality missing, you don’t need to jump into the code-base straightaway — you can create a plugin to achieve what you need. And you can even serve it from localhost!\u003c/p\u003e\u003ch3 id=\"creating-penpot-plugins\"\u003eCreating Penpot Plugins\u003c/h3\u003e\u003cp\u003eWhen it comes to the plugins, creating one is extremely ergonomic. First, there are already set \u003ca href=\"https://penpot.app/penpothub/libraries-templates?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=PluginsContest\"\u003etemplates\u003c/a\u003e for a few frameworks, and I created one for \u003ca href=\"https://github.com/penpot/plugin-examples/pull/2\"\u003eSolidJS in this PR\u003c/a\u003e — the power of open-source!\u003c/p\u003e\u003cp\u003eWhen using \u003ca href=\"https://vite.dev/\"\u003eVite\u003c/a\u003e, plugins are Single-Page Applications; if you have ever built a Hello World app with Vite, you have what it takes to create a plugin. On top of that, the Penpot team has a few packages that can give you a headstart in the process:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enpm install @penpot/plugin-styles\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat will allow you to import with a CSS loader or a CSS import from \u003ccode\u003e@penpot/plugin-styles/styles.css\u003c/code\u003e. The JavaScript API is available through the window object, but if your plugin is in TypeScript, you need to teach it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enpm add -D @penpot/plugin-types\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWith those types in your \u003ccode\u003enode_modules\u003c/code\u003e, you can pop-up the \u003ccode\u003etsconfig.json\u003c/code\u003e and add the \u003ccode\u003etypes\u003c/code\u003e to the \u003ccode\u003ecompilerOptions\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e{\n  \u0026#34;compilerOptions\u0026#34;: {\n    \u0026#34;types\u0026#34;: [\u0026#34;@penpot/plugin-types\u0026#34;]\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd there you are, now, the Language Service Provider in your editor and the TypeScript Compiler will accept that penpot is a valid namespace, and you’ll have auto-completion for the Penpot APIs throughout your entire project. For example, defining your plugin will look like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epenpot.ui.open(\u0026#34;Your Plugin Name\u0026#34;, \u0026#34;\u0026#34;, {\n  width: 500,\n  height: 600\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe last step is to define a plugin manifest in a \u003ccode\u003emanifest.json\u003c/code\u003e file and make sure it’s in the outpot directory from Vite. The manifest will indicate where each asset is and what permissions your plugin requires to work:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e{\n  \u0026#34;name\u0026#34;: \u0026#34;Your Plugin Name\u0026#34;,\n  \u0026#34;description\u0026#34;: \u0026#34;A Super plugin that will win Penpot Plugin Contest\u0026#34;,\n  \u0026#34;code\u0026#34;: \u0026#34;/plugin.js\u0026#34;,\n  \u0026#34;icon\u0026#34;: \u0026#34;/icon.png\u0026#34;,\n  \u0026#34;permissions\u0026#34;: [\n    \u0026#34;content:read\u0026#34;,\n    \u0026#34;content:write\u0026#34;,\n    \u0026#34;library:read\u0026#34;,\n    \u0026#34;library:write\u0026#34;,\n    \u0026#34;user:read\u0026#34;,\n    \u0026#34;comment:read\u0026#34;,\n    \u0026#34;comment:write\u0026#34;,\n    \u0026#34;allow:downloads\u0026#34;\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce the initial setup is done, the communication between the Penpot API and the plugin interface is done with a bidirectional messaging system, not so different than what you’d do with a Web-Worker.\u003c/p\u003e\u003cp\u003eSo, to send a message from your plugin to the Penpot API, you can do the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epenpot.ui.sendMessage(\u0026#34;Hello from my Plugin\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd to receive it back, you need to add an event listener to the \u003ccode\u003ewindow\u003c/code\u003e object (the top-level scope) of your plugin:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ewindow.addEventListener(\u0026#34;message\u0026#34;, event =\u0026gt; {\n  console.log(\u0026#34;Received from Pendpot::: \u0026#34;, event.data);\n})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eA quick performance tip\u003c/strong\u003e: \u003cem\u003eIf you’re creating a more complex plugin with different views and perhaps even routes, you need to have a cleanup logic. Most frameworks provide decent ergonomics to do that; for example, React does it via their return statements.\u003c/em\u003e\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003euseEffect(() =\u0026gt; {\n  function handleMessage(e) {\n    console.log(\u0026#34;Received from Pendpot::: \u0026#34;, event.data);\n  }\n  window.addEventListener(\u0026#39;message\u0026#39;, handleMessage);\n  \n  return () =\u0026gt; window.removeEventListener(\u0026#39;message\u0026#39;, handleMessage);\n}, []);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd Solid has \u003ccode\u003eonMount\u003c/code\u003e and \u003ccode\u003eonCleanup\u003c/code\u003e helpers for it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eonMount(() =\u0026gt; {\n  function handleMessage(e) {\n    console.log(\u0026#34;Received from Penpot::: \u0026#34;, event.data);\n  }\n  window.addEventListener(\u0026#39;message\u0026#39;, handleMessage);\n})\n\nonCleanup(() =\u0026gt; {\n  window.removeEventListener(\u0026#39;message\u0026#39;, handleMessage);\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr with the \u003ca href=\"https://primitives.solidjs.community/package/event-listener#createeventlistener\"\u003e\u003ccode\u003e@solid-primitive/event-listener\u003c/code\u003e\u003c/a\u003e helper library, so it will be automatically disposed:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eimport { makeEventListener } from \u0026#34;@solid-primitives/event-listener\u0026#34;;\n\nfunction Component() {\n  \n  const clear = makeEventListener(window, \u0026#34;message\u0026#34;, handleMessage);\n  \n  // ...\n  return (\u0026lt;span\u0026gt;Hello!\u0026lt;/span\u0026gt;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the official documentation, there’s a \u003ca href=\"https://help.penpot.app/plugins/create-a-plugin?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=PluginsContest\"\u003estep-by-step guide\u003c/a\u003e that will walk you through the process of creating, testing, and publishing your plugin. It will even help you out.\u003c/p\u003e\u003cp\u003eSo, what are you waiting for?\u003c/p\u003e\u003ch2 id=\"plugin-contest-imagine-build-win\"\u003ePlugin Contest: Imagine, Build, Win\u003c/h2\u003e\u003cp\u003eWell, maybe you’re waiting for a push of motivation. The \u003ca href=\"https://penpot.app/?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=PluginsContest\"\u003ePenpot\u003c/a\u003e team thought of that, which is why they’re starting a \u003ca href=\"https://penpot.app/plugins-contest?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=PluginsContest\"\u003ePlugin Contest\u003c/a\u003e!\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg\" sizes=\"100vw\" alt=\"Penpot plugin contest poster\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/open-source-meets-design-tooling-penpot/penpot-plugin-contest.jpg\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFor this contest, they want a fully functional plugin; it must be open-source and include comprehensive documentation. Detailing its features, installation, and usage. The first prize is US$ 1000, and the criteria are innovation, functionality, usability, performance, and code quality. The contest will run from November 15th to December 15th.\u003c/p\u003e\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\u003cp\u003eIf you decide to build a plugin, I’d love to know what you’re building and what stack you chose. Please let me know in the comments below or on \u003ca href=\"https://atila.io/bsky\"\u003eBlueSky\u003c/a\u003e!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-11-14T10:00:00Z",
  "modifiedTime": "2024-11-14T10:00:00Z"
}
