{
  "id": "53b13c61-964b-4589-8357-1d9345976339",
  "title": "New Front-End Features For Designers In 2025",
  "link": "https://smashingmagazine.com/2024/12/new-front-end-features-for-designers-in-2025/",
  "description": "Searching for the most flexible front-end workflows and toolkits, it’s easy to forget how powerful some of the fundamentals on the web have become these days. This post is a journey through new front-end features and what they are capable of.",
  "author": "Cosima Mielke",
  "published": "Tue, 31 Dec 2024 12:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 17602,
  "excerpt": "Searching for the most flexible front-end workflows and toolkits, it’s easy to forget how powerful some of the fundamentals on the web have become these days. This post is a journey through new front-end features and what they are capable of.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "14 min readCSS, HTMLSearching for the most flexible front-end workflows and toolkits, it’s easy to forget how powerful some of the fundamentals on the web have become these days. This post is a journey through new front-end features and what they are capable of.Component-specific styling, styling parents based on their children, relative colors — the web platform is going through exciting times, and many things that required JavaScript in the past can today be achieved with one simple line of HTML and CSS.As we are moving towards 2025, it’s a good time to revisit some of the incredible new technologies that are broadly available and supported in modern browsers today. Let’s dive right in and explore how they can simplify your day-to-day work and help you build modern UI components.Table of ContentsBelow you’ll find quick jumps to topics you may be interested in, or skip the table of contents.anchor-positioningauto field-sizingcontainer queries\u003cdialog\u003eexclusive accordions:focus-visible:hashidden=until-foundhigh-definition colors\u003chr\u003e in selectinputmodemin(), max(), clamp()relative colorsresponsive videosscroll behaviorscroll snaptext-wrap: balance:user-valid and :user-invalidView Transitions APICSS Container Queries And Style QueriesComponent-specific styling? What has long sounded like a dream to any developer, is slowly but surely becoming reality. Thanks to container queries, we can now query the width and style of the container in which components live.Style queries give us more logical control of styles in CSS. (Large preview)As Una Kravets points out in her introduction to style queries, this currently only works with CSS custom property values, but there are already some real-world use cases where style queries shine: They come in particularly handy when you have a reusable component with multiple variations or when you don’t have control over all of your styles but need to apply changes in certain cases.If you want to dive deeper into what’s possible with container style queries and the things we can — maybe — look forward to in the future, also be sure to take a look at Geoff Graham’s post. He dug deep into the more nuanced aspects of style queries and summarized the things that stood out to him.No More Typographic Orphans And WidowsWe all know those headlines where the last word breaks onto a new line and stands there alone, breaking the visual and looking, well, odd. Of course, there’s the good ol’ \u003cbr\u003e to break the text manually or a \u003cspan\u003e to divide the content into different parts. But have you heard of text-wrap: balance already?No more odd line breaks, thanks to text-wrap: balance. (Large preview)By applying the text-wrap: balance property, the browser will automatically calculate the number of words and divide them equally between two lines — perfect for page titles, card titles, tooltips, modals, and FAQs, for example. Ahmad Shadeed wrote a helpful guide to text-wrap: balance in which he takes a detailed look at the property and how it can help you make your headlines look more consistent.When dealing with large blocks of text, such as paragraphs, you might want to look into text-wrap: pretty to prevent orphans on the last line.Auto Field-Sizing For FormsFinding just the right size for an input field usually involves a lot of guesswork — or JavaScript — to count characters and increase the field’s height or width as a user enters text. CSS field-sizing is here to change that. With field-sizing, we can auto-grow inputs and text areas, but also auto-shrink short select menus, so the form always fits content size perfectly. All we need to make it happen is one line of CSS.Auto field-sizing allows us to automatically grow or shrink inputs and text areas depending on the content size. (Large preview)Adam Argyle summarized everything you need to know about field-sizing, exploring in detail how field-sizing affects different \u003cform\u003e elements. To prevent your input fields from becoming too small or too large, it is also a good idea to insert some additional styles that keep them in shape. Adam shares a code snippet that you can copy-and-paste right away.Making Hidden Content SearchableAccordions are a popular UI pattern, but they come with a caveat: The content inside the collapsed sections is impossible to search with find-in-page search. By using the hidden=until-found attribute and the beforematch event, we can solve the problem and even make the content accessible to search engines.hidden=until-found makes hidden content in accordions searchable. (Large preview)As Joey Arhar explains in his guide to making collapsed content searchable, you can replace the styles that hide the section with the hidden=until-found attribute. If your page also has another state that needs to be kept in sync with whether or not your section is revealed, he recommends adding a beforematch event listener. It will be fired on the hidden=until-found element right before the element is revealed by the browser.It’s a small upgrade for the \u003cselect\u003e element, but a mighty one: We can now add \u003chr\u003e into the list of select options, and they will appear as separators to help visually break up the options in the list.Perfect when your select menu has a lot of options: It’s now possible to group content. (Large preview)If you want to refine things further, also be sure to take a look at \u003coptgroup\u003e. The HTML element lets you group options within a \u003cselect\u003e element by adding a subheading for each group.Sometimes, you need a quick and easy way to make an element a scrollable container. CSS scroll snap makes it possible. The CSS feature enables us to create a well-controlled scrolling experience that lets users precisely swipe left and right and snap to a specific item in the container. No JavaScript required.Have you ever wished there was a CSS feature that makes it easy to create a scrollable container? CSS scroll snap is here to help. (Large preview)Ahmad Shadeed wrote a practical guide that walks you step by step through the process of setting up a container with scroll snap. You can use it to create image galleries, avatar lists, or other components where you want a user to scroll and snap through the content, whether it’s horizontally or vertically.Whether you use it for footnotes, tooltips, connector lines, visual cross-referencing, or dynamic labels in charts, the CSS Anchor Positioning API enables us to natively position elements relative to other elements, known as anchors.The CSS Anchor Positioning API helps us create layered interfaces without any third-party libraries. (Large preview)In her introduction to the CSS Anchor Positioning API, Una Kravets summarized in detail how anchor positioning works. She takes a closer look at the mechanism behind anchor positioning, how to tether to one and multiple anchors, and how to size and position an anchor-positioned element based on the size of its anchor. Browser support is still limited, so you might want to use the API with some precautions. Una’s guide includes what to watch out for.High-Definition Colors With OKLCH And OKLABWith high-definition colors with LCH, okLCH, LAB, and okLAB that give us access to 50% more colors, the times of RGB/HSL might be over soon. To get you familiar with the new color spaces, Vitaly wrote a quick overview of what you need to know.The times of RGB/HSL might be over soon. Say hello to high-definition colors. (Large preview)Both OKLCH and OKLAB are based on human perception and can specify any color the human eye can see. While OKLAB works best for rich gradients, OKLCH is a fantastic fit for color palettes in design systems. OKLCH/OKLAB colors are fully supported in Chrome, Edge, Safari, Firefox, and Opera. Figma doesn’t support them yet.Relative Colors In CSSLet’s say you have a background color and want to reduce its luminosity by 25%, or you want to use a complementary color without having to calculate it yourself. The relative color syntax (RCS) makes it possible to create a new color based on a given color.Relative colors allow us to automatically calculate a new color based on an existing color. (Large preview)To derive and compute a new color, we can use the from keyword for color functions (color(), hsl(), oklch(), etc.) to modify the values of the input color. Adam Argyle shares some code snippets of what this looks like in practice, or check the spec for more details.Smooth Transitions With The View Transitions APIThere are a number of use cases where a smooth visual transition can make the user experience more engaging. When a thumbnail image on a product listing page transitions into a full-size image on the product detail page, for example, or when you have a fixed navigation bar that stays in place as you navigate from one page to another. The View Transitions API helps us create seamless visual transitions between different views on a site.The View Transitions API creates seamless visual transitions between different views. (Large preview)View transitions can be triggered not only on a single document but also between two different documents. Both rely on the same principle: The browser takes snapshots of the old and new states, the DOM gets updated while rendering is suppressed, and the transitions are powered by CSS Animations. The only difference lies in how you trigger them, as Bramus Van Damme explains in his guide to the View Transitions API. A good alternative to single page apps that often rely on heavy JavaScript frameworks.Exclusive AccordionsThe ‘exclusive accordion’ is a variation of the accordion component. It only allows one disclosure widget to be open at the same time, so when a user opens a new one, the one that is already open will be closed automatically to save space. Thanks to CSS, we can now create the effect without a single line of JavaScript.An exclusive accordion automatically closes a disclosure widget when a new one is opened. (Large preview)To build an exclusive accordion, we need to add a name attribute to the \u003cdetails\u003e elements. When this attribute is used, all \u003cdetails\u003e elements that have the same name value form a semantic group and behave as an exclusive accordion. Bramus Van Damme summarized in detail how it works.Live And Late ValidationWhen we use :valid and :invalid to apply styling based on a user’s input, there’s a downside: a form control that is required and empty will match :invalid even if a user hasn’t started interacting with it yet. To prevent this from happening, we usually had to write stateful code that keeps track of input a user has changed. But not anymore.:user-valid and :user-invalid improve the user experience of input validation. (Large preview)With :user-valid and :user-invalid, we now have a native CSS solution that handles all of this automatically. Contrary to :valid and :invalid, the :user-valid and :user-invalid pseudo-classes give users feedback about mistakes only after they have changed the input. :user-valid and :user-invalid work with input, select, and textarea controls.Imagine you have a scrolling box and a series of links that target an anchored position inside the box. When a user clicks on one of the links, it will take them to the content section inside the scrolling box — with a rather abrupt jump. The scroll-behavior property makes the scrolling transition a lot smoother, only with CSS.scroll-behavior sets the behavior for a scrolling box when scrolling is triggered by the navigation. (Large preview)When setting the scroll-behavior value to smooth, the scrolling box will scroll in a smooth fashion using a user-agent-defined easing function over a user-agent-defined period of time. Of course, you can also use scroll-behavior: auto, and the scrolling box will scroll instantly.Making Focus VisibleFocus styles are essential to help keyboard users navigate a page. However, for mouse users, it can be irritating when a focus ring appears around a button or link as they click on it. :focus-visible is here to help us create the best experience for both user groups: It displays focus styles for keyboard users and hides them for mouse users.:focus-visible shows focus styles only when necessary. (Large preview):focus-visible applies while an element matches the :focus pseudo-class and the User Agent determines via heuristics that the focus should be made visible on the element. Curious how it works in practice? MDN Web Docs highlights the differences between :focus and :focus-visible, what you need to consider accessibility-wise, and how to provide a fallback for old browser versions that don’t support :focus-visible.Styling Parents Based On ChildrenHistorically, CSS selectors have worked in a top-down fashion, allowing us to style a child based on its parent. The new CSS pseudo-class :has works the other way round: We can now style a parent based on its children. But that’s not all yet. Josh W. Comeau wrote a fantastic introduction to :has in which he explores real-world use cases that show what the pseudo-class is capable of.:has makes it possible to style one element based on the property or status of any other element. (Large preview):has is not limited to parent-child relationships or direct siblings. Instead, it lets us style one element based on the properties or status of any other element in a totally different container. And it can be used as a sort of global event listener, as Josh shows — to disable scrolling on a page when a modal is open or to create a JavaScript-free dark mode toggle, for example.Interpolate Between Values For Type And SpacingCSS comparison functions min(), max(), and clamp() are today supported in all major browsers, providing us with an effective way to create dynamic layouts with fluid type scales, grids, and spacing systems.The future of design is fluid. (Large preview)To get you fit for using the functions in your projects right away, Ahmad Shadeed wrote a comprehensive guide in which he explains everything you need to know about min(), max(), and clamp(), with practical examples and use cases and including all the points of confusion you might encounter.If you’re looking for a quick and easy way to create fluid scales, the Fluid Type Scale Calculator by Utopia has got your back. All you need to do is define min and max viewport widths and the number of scale steps, and the calculator provides you with a responsive preview of the scale and the CSS code snippet.Reliable Dialog And PopoverIf you’re looking for a quick way to create a modal or popup, the \u003cdialog\u003e HTML element finally offers a native (and accessible!) solution to help you get the job done. It represents a modal or non-modal dialog box or other interactive component, such as a confirmation prompt or a subwindow used to enter data.We now have accessible \u003cdialog\u003e menus for blocking pop-ups and popovers for non-blocking menus. (Large preview)While modal dialog boxes interrupt interaction with a page, non-modal dialog boxes allow interaction with the page while the dialog is open. Adam Argyle published some code snippets that show how \u003cdialog\u003e can block pop-ups and popovers for non-blocking menus, out of the box.Responsive HTML Video And AudioIn 2014, media attribute support for HTML video sources was deleted from the HTML standard. Last year, it made a comeback, which means that we can use media queries for delivering responsive HTML videos.Adjusting video and audio files based on the browser’s viewport reduces page payload. (Large preview)Scott Jehl summarized how responsive HTML video — and even audio — works, what you need to consider when writing the markup, and what other types of media queries can be used in combination with HTML video.The Right Virtual Keyboard On MobileIt’s a small detail, but one that adds to a well-considered user experience: displaying the most comfortable touchscreen keyboard to help a user enter their information without having to switch back and forth to insert numbers, punctuation, or special characters like an @ symbol.The right virtual keyboard improves the user experience for mobile users. (Large preview)To show the right keyboard layout, we can use inputmode. It instructs the browser which keyboard to display and supports values for numeric, telephone, decimal, email, URL, and search keyboards. To further improve the UX, we can add the enterkeyhint attribute: it adjusts the text on the Enter key. If no enterkeyhint is used, the user agent might use contextual information from the inputmode attribute.A Look Into The FutureAs we are starting to adopt all of these shiny new front-end features in our projects, the web platform is, of course, constantly evolving — and there are some exciting things on the horizon already! For example, we are very close to getting masonry layout, fully customizable drop-downs with \u003cselectmenu\u003e, and text-box trimming for adjusting fonts to be perfectly aligned within the grid. Kudos to all the wonderful people who are working tirelessly to push the web forward! 👏In the meantime, we hope you found something helpful in this post that you can apply to your product or application right away. Happy tinkering!Smashing Weekly NewsletterYou want to stay on top of what’s happening in the world of front-end and UX? With our weekly newsletter, we aim to bring you useful, practical tidbits and share some of the helpful things that folks are working on in the web industry. Every issue is curated, written, and edited with love and care. No third-party mailings or hidden advertising.Also, when you subscribe, you really help us pay the bills. Thank you for your kind support! (vf, il)",
  "image": "https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e14 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/css\"\u003eCSS\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/html\"\u003eHTML\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eSearching for the most flexible front-end workflows and toolkits, it’s easy to forget how powerful some of the fundamentals on the web have become these days. This post is a journey through new front-end features and what they are capable of.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eComponent-specific styling, styling parents based on their children, relative colors — the web platform is going through \u003cstrong\u003eexciting times\u003c/strong\u003e, and many things that required JavaScript in the past can today be achieved with \u003cstrong\u003eone simple line of HTML and CSS\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eAs we are moving towards 2025, it’s a good time to revisit some of the \u003cstrong\u003eincredible new technologies\u003c/strong\u003e that are broadly available and supported in modern browsers today. Let’s dive right in and explore how they can simplify your day-to-day work and help you build modern UI components.\u003c/p\u003e\u003ch3 id=\"table-of-contents\"\u003eTable of Contents\u003c/h3\u003e\u003cp\u003eBelow you’ll find quick jumps to topics you may be interested in, or \u003ca href=\"#css-container-queries-and-style-queries\"\u003eskip the table of contents\u003c/a\u003e.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#anchor-positioning-for-tooltips-and-popovers\"\u003eanchor-positioning\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#auto-field-sizing-for-forms\"\u003eauto field-sizing\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#css-container-queries-and-style-queries\"\u003econtainer queries\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#reliable-dialog-and-popover\"\u003e\u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#exclusive-accordions\"\u003eexclusive accordions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#making-focus-visible\"\u003e\u003ccode\u003e:focus-visible\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#styling-parents-based-on-children\"\u003e\u003ccode\u003e:has\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#making-hidden-content-searchable\"\u003e\u003ccode\u003ehidden=until-found\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#high-definition-colors-with-oklch-and-oklab\"\u003ehigh-definition colors\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#styling-groups-within-select-menus\"\u003e\u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e in select\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#the-right-virtual-keyboard-on-mobile\"\u003e\u003ccode\u003einputmode\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#interpolate-between-values-for-type-and-spacing\"\u003e\u003ccode\u003emin()\u003c/code\u003e, \u003ccode\u003emax()\u003c/code\u003e, \u003ccode\u003eclamp()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#relative-colors-in-css\"\u003erelative colors\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#responsive-html-video-and-audio\"\u003eresponsive videos\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#smooth-scrolling-behavior\"\u003escroll behavior\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#simpler-snapping-for-scrollable-containers\"\u003escroll snap\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#no-more-typographic-orphans-and-widows\"\u003e\u003ccode\u003etext-wrap: balance\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#live-and-late-validation\"\u003e\u003ccode\u003e:user-valid\u003c/code\u003e and \u003ccode\u003e:user-invalid\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#smooth-transitions-with-the-view-transitions-api\"\u003eView Transitions API\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"css-container-queries-and-style-queries\"\u003eCSS Container Queries And Style Queries\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eComponent-specific styling\u003c/strong\u003e? What has long sounded like a dream to any developer, is slowly but surely becoming reality. Thanks to container queries, we can now query the width and style of the container in which components live.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/style-queries\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"521\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png\" sizes=\"100vw\" alt=\"CSS Container Queries And Style Queries\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/style-queries\"\u003eStyle queries\u003c/a\u003e give us more logical control of styles in CSS. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/style-queries-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAs Una Kravets points out in her \u003ca href=\"https://developer.chrome.com/docs/css-ui/style-queries\"\u003eintroduction to style queries\u003c/a\u003e, this currently only works with CSS custom property values, but there are already some real-world use cases where style queries shine: They come in particularly handy when you have a \u003cstrong\u003ereusable component with multiple variations\u003c/strong\u003e or when you don’t have control over all of your styles but need to apply changes in certain cases.\u003c/p\u003e\u003cp\u003eIf you want to dive deeper into what’s possible with container style queries and the things we can — maybe — look forward to in the future, also be sure to take a look at \u003ca href=\"https://css-tricks.com/digging-deeper-into-container-style-queries/\"\u003eGeoff Graham’s post\u003c/a\u003e. He dug deep into the \u003cstrong\u003emore nuanced aspects of style queries\u003c/strong\u003e and summarized the things that stood out to him.\u003c/p\u003e\u003ch2 id=\"no-more-typographic-orphans-and-widows\"\u003eNo More Typographic Orphans And Widows\u003c/h2\u003e\u003cp\u003eWe all know those headlines where the last word breaks onto a new line and stands there alone, breaking the visual and looking, well, odd. Of course, there’s the good ol’ \u003ccode\u003e\u0026lt;br\u0026gt;\u003c/code\u003e to break the text manually or a \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e to \u003cstrong\u003edivide the content into different parts\u003c/strong\u003e. But have you heard of \u003ccode\u003etext-wrap: balance\u003c/code\u003e already?\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://ishadeed.com/article/css-text-wrap-balance/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"369\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png\" sizes=\"100vw\" alt=\"No More Typographic Orphans And Widows\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eNo more odd line breaks, thanks to \u003ca href=\"https://ishadeed.com/article/css-text-wrap-balance/\"\u003e\u003ccode\u003etext-wrap: balance\u003c/code\u003e\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/text-wrap-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eBy applying the \u003ccode\u003etext-wrap: balance\u003c/code\u003e property, the browser will automatically \u003cstrong\u003ecalculate the number of words\u003c/strong\u003e and divide them equally between two lines — perfect for \u003cstrong\u003epage titles\u003c/strong\u003e, card titles, tooltips, modals, and FAQs, for example. Ahmad Shadeed wrote a helpful \u003ca href=\"https://ishadeed.com/article/css-text-wrap-balance/\"\u003eguide to \u003ccode\u003etext-wrap: balance\u003c/code\u003e\u003c/a\u003e in which he takes a detailed look at the property and how it can help you make your headlines look more consistent.\u003c/p\u003e\u003cp\u003eWhen dealing with large blocks of text, such as \u003cstrong\u003eparagraphs\u003c/strong\u003e, you might want to look into \u003ccode\u003etext-wrap: pretty\u003c/code\u003e to \u003ca href=\"https://developer.chrome.com/blog/css-text-wrap-pretty\"\u003eprevent orphans on the last line\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"auto-field-sizing-for-forms\"\u003eAuto Field-Sizing For Forms\u003c/h2\u003e\u003cp\u003eFinding just the right size for an input field usually involves a lot of guesswork — or JavaScript — to count characters and increase the field’s height or width as a user enters text. CSS \u003ccode\u003efield-sizing\u003c/code\u003e is here to change that. With field-sizing, we can \u003cstrong\u003eauto-grow inputs and text areas\u003c/strong\u003e, but also auto-shrink short select menus, so the form always fits content size perfectly. All we need to make it happen is one line of CSS.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/css-field-sizing\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"496\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png\" sizes=\"100vw\" alt=\"Auto Field-Sizing For Forms\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/css-field-sizing\"\u003eAuto field-sizing\u003c/a\u003e allows us to automatically grow or shrink inputs and text areas depending on the content size. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/auto-field-sizing-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAdam Argyle summarized \u003ca href=\"https://developer.chrome.com/docs/css-ui/css-field-sizing\"\u003eeverything you need to know about field-sizing\u003c/a\u003e, exploring in detail how \u003ccode\u003efield-sizing\u003c/code\u003e affects different \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e elements. To prevent your input fields from becoming too small or too large, it is also a good idea to insert some \u003cstrong\u003eadditional styles\u003c/strong\u003e that keep them in shape. Adam shares a code snippet that you can copy-and-paste right away.\u003c/p\u003e\u003ch2 id=\"making-hidden-content-searchable\"\u003eMaking Hidden Content Searchable\u003c/h2\u003e\u003cp\u003eAccordions are a popular UI pattern, but they come with a caveat: The content inside the collapsed sections is impossible to search with \u003cstrong\u003efind-in-page search\u003c/strong\u003e. By using the \u003ccode\u003ehidden=until-found\u003c/code\u003e attribute and the \u003ccode\u003ebeforematch\u003c/code\u003e event, we can solve the problem and even make the content accessible to search engines.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/hidden-until-found\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"475\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png\" sizes=\"100vw\" alt=\"Making Hidden Content Searchable\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/hidden-until-found\"\u003e\u003ccode\u003ehidden=until-found\u003c/code\u003e\u003c/a\u003e makes hidden content in accordions searchable. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/hidden-until-found-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAs Joey Arhar explains in his \u003ca href=\"https://developer.chrome.com/docs/css-ui/hidden-until-found\"\u003eguide to making collapsed content searchable\u003c/a\u003e, you can \u003cstrong\u003ereplace the styles that hide the section\u003c/strong\u003e with the \u003ccode\u003ehidden=until-found\u003c/code\u003e attribute. If your page also has another state that needs to be kept in sync with whether or not your section is revealed, he recommends adding a \u003ccode\u003ebeforematch\u003c/code\u003e event listener. It will be fired on the \u003ccode\u003ehidden=until-found\u003c/code\u003e element right before the element is revealed by the browser.\u003c/p\u003e\u003cp\u003eIt’s a small upgrade for the \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element, but a mighty one: We can now add \u003ccode\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e into the list of select options, and they will \u003ca href=\"https://developer.chrome.com/blog/hr-in-select\"\u003eappear as separators\u003c/a\u003e to help \u003cstrong\u003evisually break up the options\u003c/strong\u003e in the list.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/blog/hr-in-select\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"565\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png\" sizes=\"100vw\" alt=\"Styling Groups Within Select Menus\"/\u003e\u003c/a\u003e\u003cfigcaption\u003ePerfect when your select menu has a lot of options: It’s now possible to \u003ca href=\"https://developer.chrome.com/blog/hr-in-select\"\u003egroup content\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/select-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIf you want to refine things further, also be sure to take a look at \u003ccode\u003e\u0026lt;optgroup\u0026gt;\u003c/code\u003e. The HTML element lets you \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\"\u003egroup options within a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element\u003c/a\u003e by adding a \u003cstrong\u003esubheading\u003c/strong\u003e for each group.\u003c/p\u003e\u003cp\u003eSometimes, you need a quick and easy way to make an element a scrollable container. CSS scroll snap makes it possible. The CSS feature enables us to create a \u003cstrong\u003ewell-controlled scrolling experience\u003c/strong\u003e that lets users precisely swipe left and right and snap to a specific item in the container. No JavaScript required.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://ishadeed.com/article/css-scroll-snap/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"546\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png\" sizes=\"100vw\" alt=\"Simpler Snapping For Scalable Containers\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eHave you ever wished there was a CSS feature that makes it easy to create a scrollable container? \u003ca href=\"https://ishadeed.com/article/css-scroll-snap/\"\u003eCSS scroll snap\u003c/a\u003e is here to help. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/snapping-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAhmad Shadeed wrote a \u003ca href=\"https://ishadeed.com/article/css-scroll-snap/\"\u003epractical guide\u003c/a\u003e that walks you step by step through the process of setting up a container with scroll snap. You can use it to create \u003cstrong\u003eimage galleries\u003c/strong\u003e, avatar lists, or other components where you want a user to scroll and snap through the content, whether it’s horizontally or vertically.\u003c/p\u003e\u003cp\u003eWhether you use it for footnotes, tooltips, connector lines, visual cross-referencing, or dynamic labels in charts, the CSS Anchor Positioning API enables us to \u003cstrong\u003enatively position elements relative to other elements\u003c/strong\u003e, known as \u003cem\u003eanchors\u003c/em\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/blog/anchor-positioning-api\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"449\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png\" sizes=\"100vw\" alt=\"Anchor Positioning For Tooltips And Popovers\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe \u003ca href=\"https://developer.chrome.com/blog/anchor-positioning-api\"\u003eCSS Anchor Positioning API\u003c/a\u003e helps us create layered interfaces without any third-party libraries. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/anchor-positioning-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIn her \u003ca href=\"https://developer.chrome.com/blog/anchor-positioning-api\"\u003eintroduction to the CSS Anchor Positioning API\u003c/a\u003e, Una Kravets summarized in detail how anchor positioning works. She takes a closer look at the mechanism behind anchor positioning, how to tether to one and \u003cstrong\u003emultiple anchors\u003c/strong\u003e, and how to size and position an anchor-positioned element based on the size of its anchor. Browser support is still limited, so you might want to use the API with some precautions. Una’s guide includes what to watch out for.\u003c/p\u003e\u003ch2 id=\"high-definition-colors-with-oklch-and-oklab\"\u003eHigh-Definition Colors With OKLCH And OKLAB\u003c/h2\u003e\u003cp\u003eWith high-definition colors with LCH, okLCH, LAB, and okLAB that give us access to \u003cstrong\u003e50% more colors\u003c/strong\u003e, the times of RGB/HSL might be over soon. To get you familiar with the new color spaces, Vitaly wrote a quick \u003ca href=\"https://www.linkedin.com/posts/vitalyfriedman_colors-design-css-activity-7062428890362699776-LdLe/\"\u003eoverview of what you need to know\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://www.linkedin.com/posts/vitalyfriedman_colors-design-css-activity-7062428890362699776-LdLe/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"631\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png\" sizes=\"100vw\" alt=\"High-Definition Colors With OKLCH And OKLAB\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe times of RGB/HSL might be over soon. Say hello to \u003ca href=\"https://www.linkedin.com/posts/vitalyfriedman_colors-design-css-activity-7062428890362699776-LdLe/\"\u003ehigh-definition colors\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/color-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eBoth OKLCH and OKLAB are based on human perception and can specify any color the human eye can see. While OKLAB works best for rich gradients, OKLCH is a fantastic fit for color palettes in \u003cstrong\u003edesign systems\u003c/strong\u003e. OKLCH/OKLAB colors are fully supported in Chrome, Edge, Safari, Firefox, and Opera. Figma doesn’t support them yet.\u003c/p\u003e\u003ch2 id=\"relative-colors-in-css\"\u003eRelative Colors In CSS\u003c/h2\u003e\u003cp\u003eLet’s say you have a background color and want to reduce its \u003cstrong\u003eluminosity\u003c/strong\u003e by 25%, or you want to use a complementary color without having to calculate it yourself. The relative color syntax (RCS) makes it possible to create a new color based on a given color.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://smashing-freiburg-2024.netlify.app/24-relative-color/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"483\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png\" sizes=\"100vw\" alt=\"Relative Colors In CSS\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://smashing-freiburg-2024.netlify.app/24-relative-color/\"\u003eRelative colors\u003c/a\u003e allow us to automatically calculate a new color based on an existing color. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/relative-color.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo derive and compute a new color, we can use the \u003ccode\u003efrom\u003c/code\u003e keyword for color functions (\u003ccode\u003ecolor()\u003c/code\u003e, \u003ccode\u003ehsl()\u003c/code\u003e, \u003ccode\u003eoklch()\u003c/code\u003e, etc.) to \u003cstrong\u003emodify the values of the input color\u003c/strong\u003e. Adam Argyle shares some \u003ca href=\"https://smashing-freiburg-2024.netlify.app/24-relative-color/\"\u003ecode snippets\u003c/a\u003e of what this looks like in practice, or check the \u003ca href=\"https://drafts.csswg.org/css-color-5/#relative-colors\"\u003espec\u003c/a\u003e for more details.\u003c/p\u003e\u003ch2 id=\"smooth-transitions-with-the-view-transitions-api\"\u003eSmooth Transitions With The View Transitions API\u003c/h2\u003e\u003cp\u003eThere are a number of use cases where a smooth visual transition can make the user experience more engaging. When a thumbnail image on a product listing page transitions into a full-size image on the product detail page, for example, or when you have a \u003cstrong\u003efixed navigation bar\u003c/strong\u003e that stays in place as you navigate from one page to another. The View Transitions API helps us create seamless visual transitions between different views on a site.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"506\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png\" sizes=\"100vw\" alt=\"Smooth Transitions With The View Transitions API\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe \u003ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions\"\u003eView Transitions API\u003c/a\u003e creates seamless visual transitions between different views. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/view-transitions-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eView transitions can be triggered not only on a single document but also \u003cstrong\u003ebetween two different documents\u003c/strong\u003e. Both rely on the same principle: The browser takes snapshots of the old and new states, the DOM gets updated while rendering is suppressed, and the transitions are powered by CSS Animations. The only difference lies in how you trigger them, as Bramus Van Damme explains in his \u003ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions\"\u003eguide to the View Transitions API\u003c/a\u003e. A good \u003ca href=\"https://www.debugbear.com/blog/view-transitions-spa-without-framework\"\u003ealternative to single page apps\u003c/a\u003e that often rely on heavy JavaScript frameworks.\u003c/p\u003e\u003ch2 id=\"exclusive-accordions\"\u003eExclusive Accordions\u003c/h2\u003e\u003cp\u003eThe ‘exclusive accordion’ is a variation of the accordion component. It only allows one disclosure widget to be open at the same time, so when a user opens a new one, the one that is already open will be \u003cstrong\u003eclosed automatically\u003c/strong\u003e to save space. Thanks to CSS, we can now create the effect without a single line of JavaScript.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/exclusive-accordion\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"495\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png\" sizes=\"100vw\" alt=\"Exclusive Accordions\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eAn \u003ca href=\"https://developer.chrome.com/docs/css-ui/exclusive-accordion\"\u003eexclusive accordion\u003c/a\u003e automatically closes a disclosure widget when a new one is opened. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/exclusive-accordion-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo build an exclusive accordion, we need to add a \u003ccode\u003ename\u003c/code\u003e attribute to the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements. When this attribute is used, all \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements that have the same \u003ccode\u003ename\u003c/code\u003e value form a \u003cstrong\u003esemantic group\u003c/strong\u003e and behave as an exclusive accordion. Bramus Van Damme \u003ca href=\"https://developer.chrome.com/docs/css-ui/exclusive-accordion\"\u003esummarized in detail how it works\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"live-and-late-validation\"\u003eLive And Late Validation\u003c/h2\u003e\u003cp\u003eWhen we use \u003ccode\u003e:valid\u003c/code\u003e and \u003ccode\u003e:invalid\u003c/code\u003e to apply styling based on a user’s input, there’s a downside: a form control that is \u003cstrong\u003erequired and empty\u003c/strong\u003e will match \u003ccode\u003e:invalid\u003c/code\u003e even if a user hasn’t started interacting with it yet. To prevent this from happening, we usually had to write stateful code that keeps track of input a user has changed. But not anymore.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://web.dev/articles/user-valid-and-user-invalid-pseudo-classes\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"461\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png\" sizes=\"100vw\" alt=\"Live And Late Validation\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://web.dev/articles/user-valid-and-user-invalid-pseudo-classes\"\u003e\u003ccode\u003e:user-valid\u003c/code\u003e and \u003ccode\u003e:user-invalid\u003c/code\u003e\u003c/a\u003e improve the user experience of input validation. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/validation-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWith \u003ccode\u003e:user-valid\u003c/code\u003e and \u003ccode\u003e:user-invalid\u003c/code\u003e, we now have a \u003ca href=\"https://web.dev/articles/user-valid-and-user-invalid-pseudo-classes\"\u003enative CSS solution that handles all of this automatically\u003c/a\u003e. Contrary to \u003ccode\u003e:valid\u003c/code\u003e and \u003ccode\u003e:invalid\u003c/code\u003e, the \u003ccode\u003e:user-valid\u003c/code\u003e and \u003ccode\u003e:user-invalid\u003c/code\u003e pseudo-classes give users feedback about mistakes only \u003cstrong\u003eafter they have changed the input\u003c/strong\u003e. \u003ccode\u003e:user-valid\u003c/code\u003e and \u003ccode\u003e:user-invalid\u003c/code\u003e work with input, select, and textarea controls.\u003c/p\u003e\u003cp\u003eImagine you have a scrolling box and a series of links that \u003cstrong\u003etarget an anchored position\u003c/strong\u003e inside the box. When a user clicks on one of the links, it will take them to the content section inside the scrolling box — with a rather abrupt jump. The \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\"\u003e\u003ccode\u003escroll-behavior\u003c/code\u003e property\u003c/a\u003e makes the scrolling transition a lot smoother, only with CSS.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"419\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png\" sizes=\"100vw\" alt=\"Smooth Scrolling Behavior\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\"\u003e\u003ccode\u003escroll-behavior\u003c/code\u003e\u003c/a\u003e sets the behavior for a scrolling box when scrolling is triggered by the navigation. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/scroll-behavior-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWhen setting the \u003ccode\u003escroll-behavior\u003c/code\u003e value to \u003ccode\u003esmooth\u003c/code\u003e, the scrolling box will scroll in a \u003cstrong\u003esmooth fashion\u003c/strong\u003e using a user-agent-defined easing function over a user-agent-defined period of time. Of course, you can also use \u003ccode\u003escroll-behavior: auto\u003c/code\u003e, and the scrolling box will scroll instantly.\u003c/p\u003e\u003ch2 id=\"making-focus-visible\"\u003eMaking Focus Visible\u003c/h2\u003e\u003cp\u003eFocus styles are essential to help keyboard users navigate a page. However, for mouse users, it can be irritating when a focus ring appears around a button or link as they click on it. \u003ccode\u003e:focus-visible\u003c/code\u003e is here to help us create the best experience for both user groups: It displays \u003cstrong\u003efocus styles for keyboard users\u003c/strong\u003e and hides them for mouse users.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"379\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png\" sizes=\"100vw\" alt=\"Making Focus Visible\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"\u003e\u003ccode\u003e:focus-visible\u003c/code\u003e\u003c/a\u003e shows focus styles only when necessary. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/focus-visible-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ccode\u003e:focus-visible\u003c/code\u003e applies while an element matches the \u003ccode\u003e:focus\u003c/code\u003e pseudo-class and the User Agent determines via \u003cstrong\u003eheuristics\u003c/strong\u003e that the focus should be made visible on the element. Curious how it works in practice? MDN Web Docs highlights the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"\u003edifferences between \u003ccode\u003e:focus\u003c/code\u003e and \u003ccode\u003e:focus-visible\u003c/code\u003e\u003c/a\u003e, what you need to consider accessibility-wise, and how to provide a fallback for old browser versions that don’t support \u003ccode\u003e:focus-visible\u003c/code\u003e.\u003c/p\u003e\u003ch2 id=\"styling-parents-based-on-children\"\u003eStyling Parents Based On Children\u003c/h2\u003e\u003cp\u003eHistorically, CSS selectors have worked in a top-down fashion, allowing us to style a child based on its parent. The new CSS pseudo-class \u003ccode\u003e:has\u003c/code\u003e works the other way round: We can now \u003cstrong\u003estyle a parent based on its children\u003c/strong\u003e. But that’s not all yet. Josh W. Comeau wrote a fantastic \u003ca href=\"https://www.joshwcomeau.com/css/has/\"\u003eintroduction to \u003ccode\u003e:has\u003c/code\u003e\u003c/a\u003e in which he explores real-world use cases that show what the pseudo-class is capable of.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://www.joshwcomeau.com/css/has/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"546\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png\" sizes=\"100vw\" alt=\"Styling Parents Based On Children\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://www.joshwcomeau.com/css/has/\"\u003e\u003ccode\u003e:has\u003c/code\u003e\u003c/a\u003e makes it possible to style one element based on the property or status of any other element. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/has-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ccode\u003e:has\u003c/code\u003e is not limited to parent-child relationships or direct siblings. Instead, it lets us style one element based on the properties or status of any other element in a totally \u003cstrong\u003edifferent container\u003c/strong\u003e. And it can be used as a sort of global event listener, as Josh shows — to disable scrolling on a page when a modal is open or to create a JavaScript-free dark mode toggle, for example.\u003c/p\u003e\u003ch2 id=\"interpolate-between-values-for-type-and-spacing\"\u003eInterpolate Between Values For Type And Spacing\u003c/h2\u003e\u003cp\u003eCSS comparison functions \u003ccode\u003emin()\u003c/code\u003e, \u003ccode\u003emax()\u003c/code\u003e, and \u003ccode\u003eclamp()\u003c/code\u003e are today supported in all major browsers, providing us with an effective way to create dynamic layouts with \u003cstrong\u003efluid type scales\u003c/strong\u003e, grids, and spacing systems.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://ishadeed.com/article/css-min-max-clamp/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"384\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png\" sizes=\"100vw\" alt=\"Interpolate Between Values For Type And Spacing\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe future of design is \u003ca href=\"https://ishadeed.com/article/css-min-max-clamp/\"\u003efluid\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/comparison-functions-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo get you fit for using the functions in your projects right away, Ahmad Shadeed wrote a \u003ca href=\"https://ishadeed.com/article/css-min-max-clamp/\"\u003ecomprehensive guide\u003c/a\u003e in which he explains everything you need to know about \u003ccode\u003emin()\u003c/code\u003e, \u003ccode\u003emax()\u003c/code\u003e, and \u003ccode\u003eclamp()\u003c/code\u003e, with \u003cstrong\u003epractical examples\u003c/strong\u003e and use cases and including all the points of confusion you might encounter.\u003c/p\u003e\u003cp\u003eIf you’re looking for a quick and easy way to create fluid scales, the \u003ca href=\"https://utopia.fyi/type/calculator/\"\u003eFluid Type Scale Calculator\u003c/a\u003e by Utopia has got your back. All you need to do is define min and max viewport widths and the number of scale steps, and the \u003cstrong\u003ecalculator\u003c/strong\u003e provides you with a responsive preview of the scale and the CSS code snippet.\u003c/p\u003e\u003ch2 id=\"reliable-dialog-and-popover\"\u003eReliable Dialog And Popover\u003c/h2\u003e\u003cp\u003eIf you’re looking for a quick way to create a modal or popup, the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"\u003e\u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e HTML element\u003c/a\u003e finally offers a native (and accessible!) solution to help you get the job done. It represents a \u003cstrong\u003emodal or non-modal dialog box\u003c/strong\u003e or other interactive component, such as a confirmation prompt or a subwindow used to enter data.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://smashing-freiburg-2024.netlify.app/27-dialog/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"425\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png\" sizes=\"100vw\" alt=\"Reliable dialog And Popover\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eWe now have accessible \u003ca href=\"https://smashing-freiburg-2024.netlify.app/27-dialog/\"\u003e\u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e menus\u003c/a\u003e for blocking pop-ups and popovers for non-blocking menus. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/dialog.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWhile modal dialog boxes interrupt interaction with a page, non-modal dialog boxes \u003cstrong\u003eallow interaction\u003c/strong\u003e with the page while the dialog is open. Adam Argyle published some \u003ca href=\"https://smashing-freiburg-2024.netlify.app/27-dialog/\"\u003ecode snippets\u003c/a\u003e that show how \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e can block pop-ups and popovers for non-blocking menus, out of the box.\u003c/p\u003e\u003ch2 id=\"responsive-html-video-and-audio\"\u003eResponsive HTML Video And Audio\u003c/h2\u003e\u003cp\u003eIn 2014, media attribute support for HTML video sources was deleted from the HTML standard. Last year, it made a comeback, which means that we can use \u003cstrong\u003emedia queries\u003c/strong\u003e for delivering responsive HTML videos.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://scottjehl.com/posts/using-responsive-video/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"468\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png\" sizes=\"100vw\" alt=\"Responsive HTML Video And Audio\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003ca href=\"https://scottjehl.com/posts/using-responsive-video/\"\u003eAdjusting video and audio files based on the browser’s viewport\u003c/a\u003e reduces page payload. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/video-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eScott Jehl summarized \u003ca href=\"https://scottjehl.com/posts/using-responsive-video/\"\u003ehow responsive HTML video — and even audio — works\u003c/a\u003e, what you need to consider when writing the markup, and what other types of media queries can be used in combination with HTML video.\u003c/p\u003e\u003ch2 id=\"the-right-virtual-keyboard-on-mobile\"\u003eThe Right Virtual Keyboard On Mobile\u003c/h2\u003e\u003cp\u003eIt’s a small detail, but one that adds to a well-considered user experience: displaying the \u003cstrong\u003emost comfortable touchscreen keyboard\u003c/strong\u003e to help a user enter their information without having to switch back and forth to insert numbers, punctuation, or special characters like an \u003ccode\u003e@\u003c/code\u003e symbol.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"271\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png\" sizes=\"100vw\" alt=\"Right Virtual Keyboards On Mobile\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe \u003ca href=\"https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/\"\u003eright virtual keyboard\u003c/a\u003e improves the user experience for mobile users. (\u003ca href=\"https://files.smashing.media/articles/new-front-end-features-for-designers-in-2025/mobile-keyboard-opt.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo show the right keyboard layout, we can use \u003ccode\u003einputmode\u003c/code\u003e. It \u003ca href=\"https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/\"\u003einstructs the browser which keyboard to display\u003c/a\u003e and supports values for \u003cstrong\u003enumeric\u003c/strong\u003e, telephone, decimal, \u003cstrong\u003eemail\u003c/strong\u003e, \u003cstrong\u003eURL\u003c/strong\u003e, and search keyboards. To further improve the UX, we can add the \u003ccode\u003eenterkeyhint\u003c/code\u003e attribute: it \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint\"\u003eadjusts the text on the Enter key\u003c/a\u003e. If no \u003ccode\u003eenterkeyhint\u003c/code\u003e is used, the user agent might use contextual information from the \u003ccode\u003einputmode\u003c/code\u003e attribute.\u003c/p\u003e\u003ch2 id=\"a-look-into-the-future\"\u003eA Look Into The Future\u003c/h2\u003e\u003cp\u003eAs we are starting to adopt all of these shiny new front-end features in our projects, the web platform is, of course, constantly evolving — and there are some exciting things on the horizon already! For example, we are very close to getting \u003cstrong\u003emasonry layout\u003c/strong\u003e, fully \u003cstrong\u003ecustomizable drop-downs\u003c/strong\u003e with \u003ccode\u003e\u0026lt;selectmenu\u0026gt;\u003c/code\u003e, and \u003cstrong\u003etext-box trimming\u003c/strong\u003e for adjusting fonts to be perfectly aligned within the grid. Kudos to all the wonderful people who are working tirelessly to push the web forward! 👏\u003c/p\u003e\u003cp\u003eIn the meantime, we hope you found something helpful in this post that you can apply to your product or application right away. Happy tinkering!\u003c/p\u003e\u003ch2 id=\"smashing-weekly-newsletter\"\u003eSmashing Weekly Newsletter\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-with-slippers.svg\" width=\"200\" alt=\"The weekly Smashing Newsletter\"/\u003e\u003c/a\u003eYou want to stay on top of what’s happening in the world of front-end and UX? With our \u003ca href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\"\u003eweekly newsletter\u003c/a\u003e, we aim to bring you \u003cstrong\u003euseful, practical tidbits\u003c/strong\u003e and share some of the helpful things that folks are working on in the web industry. Every issue is curated, written, and edited with love and care. No third-party mailings or hidden advertising.\u003c/p\u003e\u003cp\u003eAlso, when you \u003ca href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\"\u003esubscribe\u003c/a\u003e, you really help us pay the bills. Thank you for your kind support!\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(vf, il)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "19 min read",
  "publishedTime": "2024-12-31T12:00:00Z",
  "modifiedTime": "2024-12-31T12:00:00Z"
}
