{
  "id": "83c13c66-4096-4e03-b050-d5d0ea4bff1c",
  "title": "Button States: Communicate Interaction",
  "link": "https://www.nngroup.com/articles/button-states-communicate-interaction/?utm_source=rss\u0026utm_medium=feed\u0026utm_campaign=rss-syndication",
  "description": "Minor visual changes help users distinguish between 5 different button states: enabled, disabled, hovered, focused, pressed.",
  "author": "Kelley Gordon",
  "published": "Fri, 25 Apr 2025 17:00:00 +0000",
  "source": "https://www.nngroup.com/feed/rss/",
  "categories": [
    "Article"
  ],
  "byline": "Kelley Gordon",
  "length": 8933,
  "excerpt": "Minor visual changes help users distinguish between 5 different button states: enabled, disabled, hovered, focused, pressed.",
  "siteName": "Nielsen Norman Group",
  "favicon": "",
  "text": "Summary:  Minor visual changes help users distinguish between 5 different button states: enabled, disabled, hovered, focused, pressed. Buttons are core user-interface elements that, when clicked or tapped, execute an action. When designed correctly, buttons set accurate user expectations and help them understand how to interact with the interface. In addition to clear button labels, effective signaling of button states is critical for a good design. Button States Explained Other States: Loading and Selected Button States vs. Button Styles Don’t Forget a Useful Button Label Button States Explained You’ve probably experienced that annoying situation when you try to click on a button, but nothing happens. How do you know when you can click on a button versus when you can’t? Designers usually communicate that type of information through subtle visual cues that indicate to users the state of the button: whether it’s clickable or not, whether it has been pressed, whether it has been hovered on. The most commonly used button states are:  Enabled Disabled Hover Focus Pressed Enabled State The enabled state, also sometimes called the default state, indicates that the button can be pressed or otherwise interacted with. When a button is in this state, it’s available to be clicked or tapped, and will perform its intended action. This bold, solid-filled enabled state lets users know it’s ready to perform a specific action when clicked. When a button is available and active, we usually want it to catch users’ attention — especially if it’s a primary or call-to-action button.  Typical styles for enabled buttons have the following visual characteristics: High contrast between the button and the rest of the design Legible label An optional skeuomorphic shadow to add a 3D feeling Disabled State Opposite of the enabled state is the disabled state. This state indicates that the button's action is unavailable — the button can't currently be clicked or tapped. In the disabled state, the button's appearance doesn't change when users try to interact with it. For example, if a user has not filled in all required fields in a form, the form’s Submit button may not be active. When a user clicks the disabled button, nothing happens, as it’s unavailable. Typical styles for disabled buttons have the following visual characteristics: A light gray or otherwise desaturated color or a more muted version of its abled state to signal it isn’t clickable or tappable Lower contrast between the label and the background (but mind readability) A disabled button is usually lighter than the enabled one and has a lower contrast between the label and its background. Labels for disabled states don’t need to be as high-contrast as those for enabled states, but you still want people to be able to read them. On the other hand, you don’t want the contrast to be as high as to trick people into thinking the button is clickable. If you are designing button states, it’s a good idea to test them with real users to make sure they are usable and visually distinct.  Disabled button states should also have the ARIA-disabled: true attribute added to the code. This attribute will allow the button to still receive tab focus but will indicate to screen readers that the button is inactive, thus announcing to users its disabled state. Hover State The hover state is triggered when a user moves their mouse cursor over a button or other design element and is meant to indicate that the button is clickable. (This state will obviously not be visible to users who do not use a mouse — for example, mobile users.) To prevent the color change from happening when users don’t mean to hover over a button (for example, because they are moving their mouse across the screen) a slight delay (around 150–200ms) should be added to this state.           Typical hover states have the following visual characteristics: A slight darkening of the background color compared to the enabled state Changing the cursor from an arrow to a hand The hover state appears when a user places her cursor over the button. Focus State The focus (or keyboard-focus) state helps people know which active button has the keyboard focus. When a user uses the Tab key to move across various active elements on a page, the focus state indicates which element is currently selected (and could be activated by using the Enter key). The focus state should appear pretty quickly (around 100-150ms) after the user uses the keyboard. Otherwise, the user may end up tabbing on the keyboard again and may miss the desired button. The white outline around the button lets users know which button has the keyboard focus. By default, a focus state is signaled by a blue outline around the element. However, you can easily customize how the focus element looks like, to fit your visual-design needs or brand standards.  That being said, I strongly recommend that you stick to the stroke or outline to indicate focus, as opposed to relying on color change alone, for two reasons. First, this indicator is the default signal and many users expect it. Second, color change alone may not be perceived by some people with vision impairments. Pressed State The pressed state indicates that the user has tapped or clicked a button. It is meant to give the user feedback that the action they performed was registered by the system and usually appears as a very slight color change or a very short and minimal animation. The pressed state should appear within 100–150ms for the user to register that the pressing action is instantaneous. If this feedback is not timely, users will press the button multiple times and potentially cause issues. The pressed state, lets users know that the action they performed was registered by the system. Other States: Loading and Selected In addition to these 5 core button states — enabled, disabled, hover, focus, and pressed — there are a few more fundamental states to include in a design system.  Loading State This button state lets users know that the action corresponding to that button is being performed. It is used for actions that tend to take a longer amount of time to complete (for example, because they require some backend verification or the loading of a larger document).  The loading state typically uses the enabled state and adds a loading spinner or indicator to the left of the button label. Once loading is complete and the action is performed, oftentimes, you will see the spinner animate to a check icon to visually show that the action was successful. The loading state indicates that the action associated with the button is being completed. It is usually reserved for actions that require a longer amount of time (such as the uploading of an image). Selected State The selected state is associated with checkboxes or radio buttons, and it indicates that the user selected that option. Note that this state is not a button state, but we include it here because sometimes it is confused with the button pressed state. The selected state for a checkbox or radio button indicates that that item has been selected by the user. It is not the same as the pressed state for a button. Button States vs. Button Styles A button style refers to how the button is visually represented in the interfaces and how much visual emphasis it gets. In an interface, it’s typical to distinguish among three (or more) different button styles: primary, secondary, and tertiary, depending on the button’s importance in the UI. The same button can be in different states at different times, depending on the user’s actions or the system’s state. But one button will have only one style.  Primary  Primary buttons have the most visual emphasis to grab user attention and direct them to an important or common action such as compose, create, save, and check out. Primary buttons are typically solid, filled buttons. Secondary Secondary buttons have a medium visual emphasis and are meant for actions that are less important or commonly used. These are actions like cancel and reply. Secondary styles are typically outline buttons. Tertiary Tertiary buttons have the least amount of visual emphasis and are dedicated to optional or supplementary actions (e.g., view more). Button styles help provide the intended visual emphasis to actions, while button states inform users of the interaction status of the button. Don’t Forget a Useful Button Label While button states are crucial to designing good, usable buttons, another equally important aspect of a button is its label. Labels should clearly describe what the button will do, while being substantial and succinct enough to stand alone. Avoid generic labels such as Continue or Next. These small bits of UX copy massively contribute to the findability and accessibility of your site’s functionality.",
  "image": "https://media.nngroup.com/media/articles/opengraph_images/Social-Card-Button-States-opengraph.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\u003cspan\u003e\n                  Summary: \n                \u003c/span\u003eMinor visual changes help users distinguish between 5 different button states: enabled, disabled, hovered, focused, pressed.\n              \u003c/p\u003e\u003cdiv\u003e\n              \u003cp\u003e\u003cspan\u003e\u003cstrong\u003eButtons\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e are core \u003c/span\u003e\u003ca href=\"https://www.nngroup.com/articles/ui-elements-glossary/\"\u003e\u003cspan\u003e\u003cu\u003euser-interface elements\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e that, when clicked or tapped, execute an action. When designed correctly, buttons set accurate user expectations and help them understand how to interact with the interface. In addition to clear button labels, effective signaling of button states is critical for a good design.\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-button-states-explained-1\"\u003eButton States Explained\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-other-states-loading-and-selected-2\"\u003eOther States: Loading and Selected\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-button-states-vs-button-styles-3\"\u003eButton States vs. Button Styles\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-dont-forget-a-useful-button-label-4\"\u003eDon’t Forget a Useful Button Label\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003ch2 id=\"toc-button-states-explained-1\"\u003e\u003cspan\u003eButton States Explained\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eYou’ve probably experienced that annoying situation when you try to click on a button, but nothing happens. How do you know when you can click on a button versus when you can’t? Designers usually communicate that type of information through subtle visual cues that indicate to users the state of the button: whether it’s clickable or not, whether it has been pressed, whether it has been hovered on.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThe most commonly used button states are: \u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003cem\u003eEnabled\u003c/em\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003cem\u003eDisabled\u003c/em\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003cem\u003eHover\u003c/em\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003cem\u003eFocus\u003c/em\u003e\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e\u003cem\u003ePressed\u003c/em\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"\" height=\"394\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/button-states.jpg\" width=\"1000\"/\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eEnabled\u003c/span\u003e\u003cspan\u003e State\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003eenabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state, also sometimes called the default state, \u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eindicates that the button can be pressed or otherwise interacted with.\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e When a button is in this state, it’s available to be clicked or tapped, and will perform its intended action. \u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"488\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/enabled-button.jpg\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThis bold, solid-filled enabled state lets users know it’s ready to perform a specific action when clicked.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003eWhen a button is available and active, we usually want it to catch users’ attention — especially if it’s a primary or call-to-action button. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eTypical styles for \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e\u003cem\u003eenabled\u003c/em\u003e\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003ebuttons have the following visual characteristics:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eHigh contrast between the button and the rest of the design\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eLegible label\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eAn optional \u003c/span\u003e\u003ca href=\"https://www.nngroup.com/articles/skeuomorphism/\"\u003e\u003cspan\u003e\u003cu\u003eskeuomorphic\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e shadow to add a 3D feeling\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e\u003cspan\u003eDisabled\u003c/span\u003e\u003cspan\u003e State\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eOpposite of the \u003c/span\u003e\u003cspan\u003e\u003cem\u003eenabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state is the \u003c/span\u003e\u003cspan\u003e\u003cem\u003edisabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state. This state \u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eindicates that the button\u0026#39;s action is unavailable\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e — the button can\u0026#39;t currently be clicked or tapped. \u003c/span\u003e\u003cspan\u003eIn the \u003c/span\u003e\u003cspan\u003e\u003cem\u003edisabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state, the button\u0026#39;s appearance doesn\u0026#39;t change when users try to interact with it.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eFor example, if a user has not filled in all required fields in a \u003c/span\u003e\u003ca href=\"https://www.nngroup.com/articles/eas-framework-simplify-forms/\"\u003e\u003cspan\u003e\u003cu\u003eform\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, the form’s \u003c/span\u003e\u003cspan\u003e\u003cem\u003eSubmit\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e button may not be active.\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"484\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/disabled-1.gif\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eWhen a user clicks the\u003c/em\u003e disabled \u003cem\u003ebutton, nothing happens, as it’s unavailable.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eTypical styles for \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e\u003cem\u003edisabled\u003c/em\u003e\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e buttons \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003ehave the following visual characteristics:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eA light gray or otherwise desaturated color or a more muted version of its abled state to signal it isn’t clickable or tappable\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eLower contrast between the label and the background (but mind readability)\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"488\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/enabled-disabled.jpg\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eA\u003c/em\u003e disabled \u003cem\u003ebutton is usually lighter than the\u003c/em\u003e enabled \u003cem\u003eone and has a lower contrast between the label and its background.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003eLabels for \u003cem\u003edisabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e states don’t need to be as high-contrast as those for \u003c/span\u003e\u003cspan\u003e\u003cem\u003eenabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e states, but you still want people to be able to read them. On the other hand, you don’t want the contrast to be as high as to trick people into thinking the button is clickable. If you are designing button states, it’s a good idea to test them with real users to make sure they are usable and visually distinct. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cem\u003eDisabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e button states should also have the \u003c/span\u003e\u003cspan\u003e\u003cem\u003eARIA-disabled: true\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e attribute added to the code. This attribute will allow the button to still receive tab focus but will indicate to screen readers that the button is inactive, thus announcing to users its \u003c/span\u003e\u003cspan\u003e\u003cem\u003edisabled\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eHover\u003c/span\u003e\u003cspan\u003e State\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003ehover\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state is triggered when a user moves their mouse cursor over a button or other design element and is meant to \u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eindicate that the button is clickable. \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e(This state will obviously not be visible\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eto users who do not use a mouse — for example, mobile users.) To prevent the color change from happening when users don’t mean to hover over a button (for example, because they are moving their mouse across the screen) a slight delay (around 150–200ms) should be added to this state.\u003c/span\u003e\u003cspan\u003e          \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eTypical \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e\u003cem\u003ehover\u003c/em\u003e\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e states \u003c/strong\u003e\u003c/span\u003e\u003cspan\u003ehave the following visual characteristics\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003e:\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eA slight darkening of the background color compared to the enabled state\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eChanging the cursor from an arrow to a hand\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"484\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/hover-1.gif\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe\u003c/em\u003e hover \u003cem\u003estate appears when a user places her cursor over the button.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003ch3\u003e\u003cspan\u003eFocus\u003c/span\u003e\u003cspan\u003e State\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003efocus\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e (or \u003c/span\u003e\u003cspan\u003e\u003cem\u003ekeyboard-focus\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e) state \u003c/span\u003e\u003cspan\u003e\u003cstrong\u003ehelps people know which active button has the keyboard focus.\u003c/strong\u003e\u003c/span\u003e\u003cspan\u003e When a user uses the \u003c/span\u003e\u003cspan\u003e\u003cem\u003eTab \u003c/em\u003e\u003c/span\u003e\u003cspan\u003ekey to move across various active elements on a page, the focus state indicates which element is currently selected (and could be activated by using the \u003c/span\u003e\u003cspan\u003e\u003cem\u003eEnter \u003c/em\u003e\u003c/span\u003e\u003cspan\u003ekey). The focus state should appear pretty quickly (around 100-150ms) after the user uses the keyboard. Otherwise, the user may end up tabbing on the keyboard again and may miss the desired button.\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"484\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/focus-1.gif\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe white outline around the button lets users know which button has the keyboard focus.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003eBy default, a \u003c/span\u003e\u003cspan\u003e\u003cem\u003efocus\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state is signaled by a blue outline around the element. However, you can easily customize how the focus element looks like, to fit your visual-design needs or brand standards. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThat being said, I strongly recommend that you stick to the stroke or outline to indicate focus, as opposed to relying on color change alone, for two reasons. First, this indicator is the default signal and many users expect it. Second, color change alone may not be perceived by some people with vision impairments.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003ePressed\u003c/span\u003e\u003cspan\u003e State\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003epressed\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state indicates that the user has tapped or clicked a button. It is meant to give the user feedback that the action they performed was registered by the system and usually appears as a very slight color change or a very short and minimal animation. The \u003c/span\u003e\u003cspan\u003e\u003cem\u003epressed\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state should appear within 100–150ms for the user to register that the pressing action is instantaneous. If this feedback is not timely, users will press the button multiple times and potentially cause issues.\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"484\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/pressed-1.gif\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe\u003c/em\u003e pressed \u003cem\u003estate, lets users know that the action they performed was registered by the system.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003ch2 id=\"toc-other-states-loading-and-selected-2\"\u003e\u003cspan\u003eOther States: Loading and Selected\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eIn addition to these 5 core button states \u003c/span\u003e— \u003cspan\u003e\u003cem\u003eenabled, disabled, hover, focus\u003c/em\u003e, and \u003cem\u003epressed \u003c/em\u003e\u003c/span\u003e—\u003cspan\u003e there are a few more fundamental states to include in a design system. \u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eLoading\u003cem\u003e \u003c/em\u003e\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThis button state lets users know that the action corresponding to that button is being performed.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eIt is used for actions that tend to take a longer amount of time to complete (for example, because they require some backend verification or the loading of a larger document). \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003eloading\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state typically uses the enabled state and adds a loading spinner or indicator to the left of the button label. Once loading is complete and the action is performed, oftentimes, you will see the spinner animate to a check icon to visually show that the action was successful.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"745\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/kelleysavebuttonanimation.gif\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe\u003c/em\u003e loading \u003cem\u003estate indicates that the action associated with the button is being completed. It is usually reserved for actions that require a longer amount of time (such as the uploading of an image).\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003ch3\u003e\u003cspan\u003eSelected\u003cem\u003e \u003c/em\u003e\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003cspan\u003e\u003cem\u003eselected\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state is associated with checkboxes or radio buttons, and it indicates that the user selected that option. Note that this state is \u003c/span\u003e\u003cspan\u003e\u003cem\u003enot\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e a button state, but we include it here because sometimes it is confused with the button \u003c/span\u003e\u003cspan\u003e\u003cem\u003epressed\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e state.\u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"488\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/selected-state.jpg\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe \u003c/em\u003eselected \u003cem\u003estate for a checkbox or radio button indicates that that item has been selected by the user. It is not the same as the \u003c/em\u003epressed\u003cem\u003e state for a button.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003ch2 id=\"toc-button-states-vs-button-styles-3\"\u003e\u003cspan\u003eButton States vs. Button Styles\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eA button style refers to how the button is visually represented in the interfaces and how much visual emphasis it gets. In an interface, it’s typical to distinguish among three (or more) different button styles: primary, secondary, and tertiary, depending on the button’s importance in the UI. The same button can be in different states at different times, depending on the user’s actions or the system’s state. But one button will have only one style. \u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003ePrimary \u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003ePrimary buttons have the most visual emphasis to grab user attention and direct them to an important or common action such as \u003c/span\u003e\u003cspan\u003e\u003cem\u003ecompose\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\u003cem\u003ecreate\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\u003cem\u003esave\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e, and \u003c/span\u003e\u003cspan\u003e\u003cem\u003echeck\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u003cem\u003eout\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e. Primary buttons are typically solid, filled buttons.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eSecondary\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eSecondary buttons have a medium visual emphasis and are meant for actions that are less important or commonly used. These are actions like \u003c/span\u003e\u003cspan\u003e\u003cem\u003ecancel \u003c/em\u003e\u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u003cem\u003ereply\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e. Secondary styles are typically outline buttons.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eTertiary\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eTertiary buttons have the least amount of visual emphasis and are dedicated to optional or supplementary actions (e.g., \u003c/span\u003e\u003cspan\u003e\u003cem\u003eview\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u003cem\u003emore\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e). \u003c/span\u003e\u003c/p\u003e\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg alt=\"\" height=\"560\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/04/21/button-styles.jpg\" width=\"1000\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eButton styles help provide the intended visual emphasis to actions, while button states inform users of the interaction status of the button.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\u003ch2 id=\"toc-dont-forget-a-useful-button-label-4\"\u003e\u003cspan\u003eDon’t Forget a Useful Button Label\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eWhile button states are crucial to designing good, usable buttons, another equally important aspect of a button is its label. \u003c/span\u003e\u003ca href=\"https://www.nngroup.com/articles/better-link-labels/\"\u003e\u003cspan\u003e\u003cu\u003eLabels should clearly describe what the button will do, while being substantial and succinct enough to stand alone.\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e Avoid generic labels such as \u003c/span\u003e\u003cspan\u003e\u003cem\u003eContinue \u003c/em\u003e\u003c/span\u003e\u003cspan\u003eor \u003c/span\u003e\u003cspan\u003e\u003cem\u003eNext.\u003c/em\u003e\u003c/span\u003e\u003cspan\u003e These small bits of UX copy massively contribute to the findability and accessibility of your site’s functionality.\u003c/span\u003e\u003c/p\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-04-25T17:00:00Z",
  "modifiedTime": null
}
