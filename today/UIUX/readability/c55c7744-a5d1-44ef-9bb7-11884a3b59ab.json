{
  "id": "c55c7744-a5d1-44ef-9bb7-11884a3b59ab",
  "title": "Taking RWD To The Extreme",
  "link": "https://smashingmagazine.com/2025/02/taking-rwd-to-the-extreme/",
  "description": "Tomasz Jakut reflects on the evolution of web design, from the days of table-based layouts and Flash games to the rise of responsive web design (RWD), which often feels like the end of history in web layout. But as 2025 marks the 15th anniversary of Ethan Marcotte’s article, it’s worth asking whether something significant happened after RWD — something so seamless that it went almost unnoticed.",
  "author": "Tomasz Jakut",
  "published": "Fri, 07 Feb 2025 13:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 17983,
  "excerpt": "Tomasz Jakut reflects on the evolution of web design, from the days of table-based layouts and Flash games to the rise of responsive web design (RWD), which often feels like the end of history in web layout. But as 2025 marks the 15th anniversary of Ethan Marcotte’s article, it’s worth asking whether something significant happened after RWD — something so seamless that it went almost unnoticed.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "15 min readDesign, Responsive Design, Web DesignTomasz Jakut reflects on the evolution of web design, recalling the days when table layouts were all the rage and Flash games were shaping the online culture. And then responsive web design (RWD) happened — and it often feels like the end of history; well, at least for web design. After all, we still create responsive websites, and that’s The True Way™ of doing layouts on the web. Yet the current year, 2025, marks the 15th anniversary of Ethan Marcotte’s article, which forever changed web development. That’s a whole era in “web” years. So, maybe something happened after RWD, but it was so obvious that it went nearly invisible. Let’s try to uncover this something.When Ethan Marcotte conceived RWD, web technologies were far less mature than today. As web developers, we started to grasp how to do things with floats after years of stuffing everything inside table cells. There weren’t many possible ways to achieve a responsive site. There were two of them: fluid grids (based on percentages) and media queries, which were a hot new thing back then.What was lacking was a real layout system that would allow us to lay things out on a page instead of improvising with floating content. We had to wait several years for Flexbox to appear. And CSS Grid followed that.Undoubtedly, new layout systems native to the browser were groundbreaking 10 years ago. They were revolutionary enough to usher in a new era. In her talk “Everything You Know About Web Design Just Changed” at the An Event Apart conference in 2019, Jen Simmons proposed a name for it: Intrinsic Web Design (IWD). Let’s disarm that fancy word first. According to the Merriam-Webster dictionary, intrinsic means “belonging to the essential nature or constitution of a thing.” In other words, IWD is a natural way of doing design for the web. And that boils down to using CSS layout systems for… laying out things. That’s it.It does not sound that groundbreaking on its own. But it opens a lot of possibilities that weren’t earlier available with float-based layouts or table ones. We got the best things from both worlds: two-dimensional layouts (like tables with their rows and columns) with wrapping abilities (like floating content when there is not enough space for it). And there are even more goodies, like mixing fixed-sized content with fluid-sized content or intentionally overlapping elements:See the Pen [Overlapping elements [forked]](https://codepen.io/smashingmag/pen/zxOgdoM) by Comandeer.See the Pen Overlapping elements [forked] by Comandeer.As Jen points out in her presentation, this allows us to finally make even fancy designs in the “web” way, eliminating the tension between web designers and developers. No more “This print design can’t be translated for the web!” Well, at least far fewer arguments…But here’s the strange part: that new era didn’t come. IWD never became a household term, the same way that RWD has. We’re still stuck to the good and old RWD era. Yet, Flexbox and Grid became indispensable tools in (nearly) every web developer’s tool belt. They are so natural and intrinsic that we intuitively started to use them, missing their whole revolutionary aspect. Instead of a groundbreaking revolution of IWD, we chose a longer but steadier evolution of RWD.Enter The BrowserI believe that IWD paved the way for more radical ideas, even if it hasn’t developed into a bonafide era. And the central point of all of those radical ideas is a browser — that part of the web that sits between our code and the user. Web developers have always had a love-hate relationship with browsers. (Don’t get me started on Internet Explorer!) They often amuse us both with new features (WebGPU for the win!) and cryptic bugs (points suddenly take up more space, what the heck?). But at the end of the day, we tell the browser what to do to display our page the way we want it to be displayed to the user.In some ways, IWD challenged that approach. CSS layout systems aren’t taking direct orders from a web developer. We can barely hint at what we want them to do. But the final decision lies with the browser. And what if we take it even further?Heydon Pickering proposed the term algorithmic layouts to describe such an approach. The web is inherently algorithmic. Even the simplest page uses internal algorithms to lay things out: a block of text forms a flow layout that will wrap when there is not enough space in the line. And that’s so obvious that we don’t even think about it. That’s just how text works, and that’s how it has always worked. And yet, there is an algorithm behind that. That and all CSS layout systems. We can use Flexbox to make a simple layout that displays on a single line by default and falls back to wrapping up multiple lines if there is not enough space, just like text.See the Pen [Resizable flexbox container [forked]](https://codepen.io/smashingmag/pen/wBwVqJJ) by Comandeer.See the Pen Resizable flexbox container [forked] by Comandeer.And we get all of these algorithms for free! The only thing we need to do is to allow Flexbox to wrap with the flex-wrap property. And it wraps by itself. Imagine that you need to calculate when and how the layout should wrap — that would be a nightmare. Fortunately, browsers are good at laying out things. After all, they have been doing it for over 35 years. They’re experienced in that, so just let them handle this stuff. That’s the power of algorithmic layouts: they work the best when left alone.Andy Bell summed it pretty well during All Day Hey! in 2022 when he recommended that we “be the browser’s mentor, not its micromanager.” Don’t try to be smarter than a browser because it knows things you can’t possibly know. You don’t know what device the user uses — its processing power, current battery level, viewport, and connection stability. You don’t know what assistive technologies the user uses or how they configured their operating system. You don’t know if they disable cookies and JavaScript.You know only one thing: there is that peculiar thing between your website and the user called browser — and it knows much more about the page and the user than you do. It’s like an excellent translator that you hire for those extremely important business negotiations with someone from a totally foreign culture that you don’t know anything about. But the translator knows it well and translates your words with ease, gently closing the cultural chasm between you and the potential customer. You don’t want to force them to translate your words literally — that could be catastrophic. What you want is to provide them with your message and allow them to do the magic of shaping it into a message understandable to the customer. And the same applies to browsers; they know better how to display your website.Enter The Declarative DesignI think that Jen, Heydon, and Andy speak of the same thing — an approach that shifts much of the work from the web developer to the browser. Instead of telling it how to do things, we rather tell it what to do and leave it to figure out the “how” part by itself.As Jeremy Keith notices, there has been a shift from an imperative design (telling the browser “how”) to a declarative one (telling the browser “what”). Specifically, Jeremy says that we ought to “focus on creating the right inputs rather than trying to control every possible output.”That’s quite similar to what we do with AI today: we meticulously craft our prompts (inputs) and hope to get the right answer (output). However, there is a very important difference between AI and browsers: the latter is not a black box.Everything (well, most of what) the browser does is described in detail in open web standards, so we’re able to make educated guesses about the output. Granted, we can’t be sure if the user sees the two-column layout on their 8K screen or a one-column layout on their microwave’s small screen (if it can run DOOM, it can run a web browser!). But we know for sure that we defined these two edge cases, and the browser works out everything in between.In theory, it all sounds nice and easy. Let’s try to make the declarative design more actionable. If we gather the techniques mentioned by Jen, Heydon, Andy, and Jeremy, we will end up with roughly the following list:Use Native Layout SystemsThey’re available in basically every browser on the market and have been for years, and I believe that they are, indeed, widely used. But from time to time, a question pops up: Which layout system should I use? And the answer is: Yes. Mix and match! After all, different elements on the page would work better with different layout systems. Take, for example, this navigation on top with several links in one row that should wrap if there is not enough space. Sounds like Flexbox. Is the main part divided into three columns, with the third column positioned at the bottom of the content? Definitely CSS Grid. As for the text content? Well, that’s flow.(Large preview)Native layout systems are here to make the browser work for you — don’t hesitate to use that to your advantage.Start With Semantic HTMLHTML is the backbone of the web. It’s the language that structures and formats the content for the user. And it comes with a huge bonus: it loads and displays to the user, even if CSS and JavsScript fail to load for whatever reason. In other words, the website should still make sense to the user even if the CSS that provides the layout and the JavsScript that provides the interactivity are no-shows. A website is a text document, not so different from the one you can create in a text processor, like Word or LibreWriter.Semantic HTML also provides important accessibility features, like headings that are often used by screen-reader users for navigating pages. This is why starting not just with any markup but semantic markup for meaningful structure is a crucial step to embracing native web features.Use Fluid Type With Fluid SpaceWe often need to adjust the font size of our content when the screen size changes. Smaller screens mean being able to display less content, and larger screens provide more affordance for additional content. This is why we ought to make content as fluid as possible, by which I mean the content should automatically adjust based on the screen’s size. A fluid typographic system optimizes the content’s legibility when it’s being viewed in different contexts.Nowadays, we can achieve truly fluid type with one line of CSS, thanks to the clamp() function:font-size: clamp(1rem, calc(1rem + 2.5vw), 6rem); The maths involved in it goes quite above my head. Thankfully, there is a detailed article on fluid type by Adrian Bece here on Smashing Magazine and Utopia, a handy tool for doing the maths for us. But beware — there be dragons! Or at least possible accessibility issues. By limiting the maximum font size, we could break the ability to zoom the text content, violating one of the WCAG’s requirements (though there are ways to address that).Fortunately, fluid space is much easier to grasp: if gaps (margins) between elements are defined in font-dependent units (like rem or em), they will scale alongside the font size. Yet rest assured, there are also caveats.Always Bet On Progressive EnhancementYes, that’s this over-20-year-old technique for creating web pages. And it’s still relevant today in 2025. Many interesting features have limited availability — like cross-page view transitions. They won’t work for every user, but enabling them is as simple as adding one line of CSS:@view-transition { navigation: auto; } It won’t work in some browsers, but it also won’t break anything. And if some browser catches up with the standard, the code is already there, and view transitions start to work in that browser on your website. It’s sort of like opting into the feature when it’s ready.That’s progressive enhancement at its best: allowing you to make your stairs into an escalator whenever it’s possible.It applies to many more things in CSS (unsupported grid is just a flow layout, unsupported masonry layout is just a grid, and so on) and other web technologies.Trust The BrowserTrust it because it knows much more about how safe it is for users to surf the web. Besides, it’s a computer program, and computer programs are pretty good at calculating things. So instead of calculating all these breakpoints ourselves, take their helping hand and allow them to do it for you. Just give them some constraints. Make that \u003cmain\u003e element no wider than 60 characters and no narrower than 20 characters — and then relax, watching the browser make it 37 characters on some super rare viewport you’ve never encountered before. It Just Works™.But trusting the browser also means trusting the open web. After all, these algorithms responsible for laying things out are all parts of the standards.Ditch The “Physical” CSSThat’s a bonus point from me. Layout systems introduced the concept of logical CSS. Flexbox does not have a notion of a left or right side — it has a start and an end. And that way of thinking lurked into other areas of CSS, creating the whole CSS Logical Properties and Values module. After working more with layout systems, logical CSS seems much more intuitive than the old “physical” one. It also has at least one advantage over the old way of doing things: it works far better with internationalized content.See the Pen [Physical vs logical CSS [forked]](https://codepen.io/smashingmag/pen/mybNMzR) by Comandeer.See the Pen Physical vs logical CSS [forked] by Comandeer.The demo above shows the difference between physical and logical CSS. The physical tiles have the text-align: left property applied, while the logical ones have text-align: start. When the “left to right” inline text direction is set, both of them look the same. But when the “right to left” one is set, the logical tiles “move” their start to the right, moving the text alongside it.Additionally, containers with tiles have their width set — the physical container with the width: 400px property and the logical one with the inline-size: 400px property. They both look the same as long as the block text direction is set to “horizontal.” But when it is set to “vertical,” the logical one switches its width with the height (as now the line of text is going from top to bottom, not from left to right), and the physical one keeps its initial width and height.“What do you mean by taking RWD to the extreme — it’s already pretty extreme!”I hear you. But I believe that there’s still room for more. The changes described above are a big shift in the RWD world. But this shift is mainly technological. Fluid type without the clamp() method or algorithmic layouts without flexbox and grid couldn’t possibly exist — at least not without some horrible hacks (does anyone still remember CSS locks?). Our web development routine just caught up to what the modern browser can do. Yet, there is still another shift that could happen: a mental one.I’ll be honest: I’m a die-hard fanatic of using rem and em length units. I’ve been using them for years, but they clicked for me only when I stopped trying to translate them into pixels. And what helped me in it was a… chemistry class I attended many years ago. When working with all these chemical concoctions, you often need to calculate their ratios. There’s that fancy method for doing that:60 — 100% 20 — x x=100%*20/60=33.(3)% After I applied this way of thinking to rem and em units, I entered a new world of thinking about layouts: a ratio-based one. Because there is still a myth that 1 rem roughly equals 16 pixels — except it doesn’t. It could equal any number of pixels because it all depends on what value the user sets in their browser. So, thinking in concrete numbers is, in fact, incompatible with rem and em units. The only fully compatible way is to… keep it as-is.(Large preview)And I know that sounds crazy, but it forces a change in thinking about websites. If you don’t know the most basic information about your content (the font size), you can’t really apply any concrete numbers to your layout. You can only think in ratios. If the font size equals ✕, your heading could equal 2✕, the main column 60✕, some text input — 10✕, and so on. This way, everything should work out with any font size and, by extension, scale up with any font size.We’ve already been doing that with layout systems — we allow them to work on ratios and figure out how big each part of the layout should be. And we’ve also been doing that with rem and em units for scaling things up depending on font size. The only thing left is to completely forget the “1rem = 16px” equation and fully embrace the exciting shores of unknown dimensions.But that sort of mental shift comes with one not-so-straightforward consequence. Not setting the font size and working with the user-provided one instead fully moves the power from the web developer to the browser and, effectively, the user. And the browser can provide us with far more information about user preferences.Thanks to the modern CSS, we can respond to these things. For example, we can switch to dark mode if the user prefers one, we can limit motion if the user requests it, we can make clickable areas bigger if the device has a touch screen, and so on. By having this kind of dialogue with the browser, exchanging information (it gives us data on the user, and we give it hints on how to display our content), we empower the user in the result. The content would be displayed in the way they want. That makes our website far more inclusive and accessible.After all, the users know what they need best. If they set the default font size to 64 pixels, they would be grateful if we respected that value. We don’t know why they did it (maybe they have some kind of vision impairment, or maybe they simply have a screen far away from them); we only know they did it — and we respect that.And that’s responsive design for me. (gg, yk)",
  "image": "https://files.smashing.media/articles/taking-rwd-to-the-extreme/taking-rwd-to-the-extreme.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e15 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/responsive-design\"\u003eResponsive Design\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/web-design\"\u003eWeb Design\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eTomasz Jakut reflects on the evolution of web design, recalling the days when table layouts were all the rage and Flash games were shaping the online culture. And then \u003cstrong\u003eresponsive web design\u003c/strong\u003e (RWD) happened — and it often feels like the end of history; well, at least for web design. After all, we still create responsive websites, and that’s The True Way™ of doing layouts on the web. Yet the current year, 2025, marks the \u003cem\u003e15th\u003c/em\u003e anniversary of \u003ca href=\"https://alistapart.com/article/responsive-web-design/\"\u003eEthan Marcotte’s article\u003c/a\u003e, which forever changed web development. That’s a whole era in “web” years. So, maybe \u003cem\u003esomething\u003c/em\u003e happened after RWD, but it was so obvious that it went nearly invisible. Let’s try to uncover this \u003cem\u003esomething\u003c/em\u003e.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eWhen Ethan Marcotte conceived RWD, web technologies were far less mature than today. As web developers, we started to grasp how to do things with \u003ccode\u003efloat\u003c/code\u003es after years of stuffing everything inside table cells. There weren’t many possible ways to achieve a responsive site. There were two of them: \u003cstrong\u003efluid grids\u003c/strong\u003e (based on percentages) and \u003cstrong\u003emedia queries\u003c/strong\u003e, which were a hot new thing back then.\u003c/p\u003e\u003cp\u003eWhat was lacking was a \u003cem\u003ereal\u003c/em\u003e layout system that would allow us to \u003cem\u003elay\u003c/em\u003e \u003cem\u003ethings\u003c/em\u003e \u003cem\u003eout\u003c/em\u003e on a page instead of improvising with floating content. We had to wait several years for Flexbox to appear. And CSS Grid followed that.\u003c/p\u003e\u003cp\u003eUndoubtedly, new layout systems native to the browser were groundbreaking 10 years ago. They were revolutionary enough to usher in a new era. In her talk “\u003ca href=\"https://talks.jensimmons.com/jugbbe/everything-you-know-about-web-design-just-changed\"\u003eEverything You Know About Web Design Just Changed\u003c/a\u003e” at the An Event Apart conference in 2019, Jen Simmons proposed a name for it: \u003cstrong\u003eIntrinsic Web Design (IWD)\u003c/strong\u003e. Let’s disarm that fancy word first. According to the Merriam-Webster dictionary, intrinsic means “\u003ca href=\"https://www.merriam-webster.com/dictionary/intrinsic\"\u003e\u003cem\u003ebelonging to the essential nature or constitution of a thing\u003c/em\u003e\u003c/a\u003e.” In other words, IWD is a natural way of doing design for the web. And that boils down to using CSS layout systems for… laying out things. That’s it.\u003c/p\u003e\u003cp\u003eIt does not sound that groundbreaking on its own. But it opens a lot of possibilities that weren’t earlier available with float-based layouts or table ones. We got the best things from both worlds: two-dimensional layouts (like tables with their rows and columns) with wrapping abilities (like floating content when there is not enough space for it). And there are even more goodies, like mixing fixed-sized content with fluid-sized content or intentionally overlapping elements:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"zxOgdoM\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Overlapping elements [forked]](https://codepen.io/smashingmag/pen/zxOgdoM) by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/zxOgdoM\"\u003eOverlapping elements [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAs Jen points out in her presentation, this allows us to finally make even \u003cem\u003efancy\u003c/em\u003e designs in the “web” way, eliminating the tension between web designers and developers. No more \u003cem\u003e“This print design can’t be translated for the web!”\u003c/em\u003e Well, at least far fewer arguments…\u003c/p\u003e\u003cp\u003eBut here’s the strange part: that new era didn’t come. IWD never became a household term, the same way that RWD has. We’re still stuck to the good and old RWD era. Yet, Flexbox and Grid became indispensable tools in (nearly) every web developer’s tool belt. They are so natural and \u003cem\u003eintrinsic\u003c/em\u003e that we intuitively started to use them, missing their whole revolutionary aspect. Instead of a groundbreaking revolution of IWD, we chose a longer but steadier evolution of RWD.\u003c/p\u003e\u003ch2 id=\"enter-the-browser\"\u003eEnter The Browser\u003c/h2\u003e\u003cp\u003eI believe that IWD paved the way for more radical ideas, even if it hasn’t developed into a bonafide era. And the central point of all of those radical ideas is a browser — that part of the web that sits between our code and the user. Web developers have always had a love-hate relationship with browsers. (Don’t get me started on Internet Explorer!) They often amuse us both with new features (\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API\"\u003eWebGPU\u003c/a\u003e for the win!) and cryptic bugs (\u003ca href=\"https://issues.chromium.org/issues/40825240\"\u003epoints suddenly take up more space\u003c/a\u003e, what the heck?). But at the end of the day, we tell the browser what to do to display our page the way \u003cem\u003ewe\u003c/em\u003e want it to be displayed to the user.\u003c/p\u003e\u003cp\u003eIn some ways, IWD challenged that approach. CSS layout systems aren’t taking direct orders from a web developer. \u003ca href=\"https://www.miriamsuzanne.com/2019/10/03/css-is-weird/\"\u003eWe can barely \u003cem\u003ehint\u003c/em\u003e at what we want them to do\u003c/a\u003e. But the final decision lies with the browser. And what if we take it even further?\u003c/p\u003e\u003cp\u003eHeydon Pickering proposed the term \u003ca href=\"https://every-layout.dev/blog/algorithmic-design/\"\u003e\u003cem\u003ealgorithmic layouts\u003c/em\u003e\u003c/a\u003e to describe such an approach. The web is inherently algorithmic. Even \u003ca href=\"https://motherfuckingwebsite.com/\"\u003ethe simplest page\u003c/a\u003e uses internal algorithms to lay things out: a block of text forms a flow layout that will wrap when there is not enough space in the line. And that’s so obvious that we don’t even think about it. That’s just how text works, and that’s how it has always worked. And yet, there is an algorithm behind that. That and all CSS layout systems. We can use Flexbox to make a simple layout that displays on a single line by default and falls back to wrapping up multiple lines if there is not enough space, just like text.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"wBwVqJJ\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Resizable flexbox container [forked]](https://codepen.io/smashingmag/pen/wBwVqJJ) by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/wBwVqJJ\"\u003eResizable flexbox container [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnd we get all of these algorithms for free! The only thing we need to do is to allow Flexbox to wrap with the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\"\u003e\u003ccode\u003eflex-wrap\u003c/code\u003e property\u003c/a\u003e. And it wraps by itself. Imagine that you need to calculate when and how the layout should wrap — that would be a nightmare. Fortunately, browsers are good at laying out things. After all, they have been doing it for over 35 years. They’re experienced in that, so just let them handle this stuff. That’s the power of algorithmic layouts: they work the best when left alone.\u003c/p\u003e\u003cp\u003eAndy Bell summed it pretty well during \u003cem\u003eAll Day Hey!\u003c/em\u003e in 2022 when he recommended that we “\u003ca href=\"https://www.youtube.com/watch?v=5uhIiI9Ld5M\"\u003ebe the browser’s mentor, not its micromanager\u003c/a\u003e.” Don’t try to be smarter than a browser because it knows things you can’t possibly know. You don’t know what device the user uses — its processing power, current battery level, \u003ca href=\"https://viewports.fyi/\"\u003eviewport\u003c/a\u003e, and connection stability. You don’t know what assistive technologies the user uses or how they configured their operating system. You don’t know if they disable cookies and JavaScript.\u003c/p\u003e\u003cp\u003eYou know only one thing: there is that peculiar thing between your website and the user called browser — and it knows much more about the page and the user than you do. It’s like an excellent translator that you hire for those extremely important business negotiations with someone from a totally foreign culture that you don’t know anything about. But the translator knows it well and translates your words with ease, gently closing the cultural chasm between you and the potential customer. You don’t want to force them to translate your words literally — that could be catastrophic. What you want is to provide them with your message and allow them to do the magic of shaping it into a message understandable to the customer. And the same applies to browsers; they know better how to display your website.\u003c/p\u003e\u003ch2 id=\"enter-the-declarative-design\"\u003eEnter The Declarative Design\u003c/h2\u003e\u003cp\u003eI think that Jen, Heydon, and Andy speak of the same thing — an approach that shifts much of the work from the web developer to the browser. Instead of telling it \u003cem\u003ehow\u003c/em\u003e to do things, we rather tell it \u003cem\u003ewhat\u003c/em\u003e to do and leave it to figure out the “how” part by itself.\u003c/p\u003e\u003cp\u003eAs Jeremy Keith notices, there has been a shift from an \u003cstrong\u003eimperative\u003c/strong\u003e design (telling the browser “how”) to a \u003cstrong\u003edeclarative\u003c/strong\u003e one (telling the browser “what”). Specifically, \u003ca href=\"https://adactio.com/journal/18982\"\u003eJeremy says\u003c/a\u003e that we ought to “focus on creating the right \u003cem\u003einputs\u003c/em\u003e rather than trying to control every possible \u003cem\u003eoutput\u003c/em\u003e.”\u003c/p\u003e\u003cp\u003eThat’s quite similar to what we do with AI today: we meticulously craft our prompts (inputs) and hope to get the right answer (output). However, there is a very important difference between AI and browsers: the latter is not a black box.\u003c/p\u003e\u003cp\u003eEverything (well, most of what) the browser does is described in detail in open web standards, so we’re able to make educated guesses about the output. Granted, we can’t be sure if the user sees the two-column layout on their 8K screen or a one-column layout on their microwave’s small screen (\u003ca href=\"https://www.reddit.com/r/itrunsdoom/comments/cuoymo/doom_on_a_microwave/\"\u003eif it can run DOOM\u003c/a\u003e, it can run a web browser!). But we know for sure that we defined these two edge cases, and the browser works out everything in between.\u003c/p\u003e\u003cp\u003eIn theory, it all sounds nice and easy. Let’s try to make the declarative design more actionable. If we gather the techniques mentioned by Jen, Heydon, Andy, and Jeremy, we will end up with roughly the following list:\u003c/p\u003e\u003ch3 id=\"use-native-layout-systems\"\u003eUse Native Layout Systems\u003c/h3\u003e\u003cp\u003eThey’re available in basically every browser on the market and have been for years, and I believe that they are, indeed, widely used. But from time to time, a question pops up: \u003cstrong\u003eWhich layout system should I use?\u003c/strong\u003e And the answer is: Yes. Mix and match! After all, different elements on the page would work better with different layout systems. Take, for example, this navigation on top with several links in one row that should wrap if there is not enough space. Sounds like Flexbox. Is the main part divided into three columns, with the third column positioned at the bottom of the content? Definitely CSS Grid. As for the text content? Well, that’s flow.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"677\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png\" sizes=\"100vw\" alt=\"A layout of the page: there is a navigation in the top left corner, based on the flexbox; the main area is based on the grid and divided into three columns and two rows; the first column contains an aside content; the second column contains the main content; the third column contains another aside content that occupies the second row.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/1-layouts.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aNative%20layout%20systems%20are%20here%20to%20make%20the%20browser%20work%20for%20you%20%e2%80%94%20don%e2%80%99t%20hesitate%20to%20use%20that%20to%20your%20advantage.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f02%2ftaking-rwd-to-the-extreme%2f\"\u003eNative layout systems are here to make the browser work for you — don’t hesitate to use that to your advantage.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch3 id=\"start-with-semantic-html\"\u003eStart With Semantic HTML\u003c/h3\u003e\u003cp\u003eHTML is the backbone of the web. It’s the language that structures and formats the content for the user. And it comes with a huge bonus: it loads and displays to the user, even if CSS and JavsScript fail to load for whatever reason. In other words, the website should still make sense to the user even if the CSS that provides the layout and the JavsScript that provides the interactivity are no-shows. A website is a text document, not so different from the one you can create in a text processor, like Word or LibreWriter.\u003c/p\u003e\u003cp\u003eSemantic HTML also provides important accessibility features, like headings that are often \u003ca href=\"https://webaim.org/projects/screenreadersurvey10/#finding\"\u003eused by screen-reader users for navigating pages\u003c/a\u003e. This is why starting not just with any markup but \u003cem\u003esemantic\u003c/em\u003e markup for meaningful structure is a crucial step to embracing native web features.\u003c/p\u003e\u003ch3 id=\"use-fluid-type-with-fluid-space\"\u003eUse Fluid Type With Fluid Space\u003c/h3\u003e\u003cp\u003eWe often need to adjust the font size of our content when the screen size changes. Smaller screens mean being able to display less content, and larger screens provide more affordance for additional content. This is why we ought to make content as \u003cem\u003efluid\u003c/em\u003e as possible, by which I mean the content should automatically adjust based on the screen’s size. A fluid typographic system optimizes the content’s legibility when it’s being viewed in different contexts.\u003c/p\u003e\u003cp\u003eNowadays, we can achieve truly fluid type with one line of CSS, thanks to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clamp\"\u003e\u003ccode\u003eclamp()\u003c/code\u003e function\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efont-size: clamp(1rem, calc(1rem + 2.5vw), 6rem);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe maths involved in it goes quite above my head. Thankfully, there is a \u003ca href=\"https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/\"\u003edetailed article on fluid type by Adrian Bece\u003c/a\u003e here on Smashing Magazine and \u003ca href=\"https://utopia.fyi/\"\u003eUtopia\u003c/a\u003e, a handy tool for doing the maths for us. But beware — there be dragons! Or at least \u003ca href=\"https://adrianroselli.com/2019/12/responsive-type-and-zoom.html\"\u003epossible accessibility issues\u003c/a\u003e. By limiting the maximum font size, we could break the ability to zoom the text content, violating \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html\"\u003eone of the WCAG’s requirements\u003c/a\u003e (though there are \u003ca href=\"https://www.smashingmagazine.com/2023/11/addressing-accessibility-concerns-fluid-type/\"\u003eways to address that\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eFortunately, fluid space is much easier to grasp: if gaps (margins) between elements are defined in font-dependent units (like \u003ccode\u003erem\u003c/code\u003e or \u003ccode\u003eem\u003c/code\u003e), they will scale alongside the font size. Yet rest assured, \u003ca href=\"https://ashleemboyer.com/blog/why-you-should-use-px-units-for-margin-padding-and-other-spacing-techniques\"\u003ethere are also caveats\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"always-bet-on-progressive-enhancement\"\u003eAlways Bet On Progressive Enhancement\u003c/h3\u003e\u003cp\u003eYes, that’s this over-20-year-old technique for creating web pages. And it’s still relevant today in 2025. Many interesting features have limited availability — like cross-page \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API\"\u003eview transitions\u003c/a\u003e. They won’t work for every user, but enabling them is as simple as adding one line of CSS:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e@view-transition { navigation: auto; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt won’t work in some browsers, but it also won’t break anything. And if some browser catches up with the standard, the code is already there, and view transitions start to work in that browser on your website. It’s sort of like opting into the feature when it’s ready.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aThat%e2%80%99s%20progressive%20enhancement%20at%20its%20best:%20allowing%20you%20to%20make%20your%20stairs%20into%20an%20escalator%20whenever%20it%e2%80%99s%20possible.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f02%2ftaking-rwd-to-the-extreme%2f\"\u003eThat’s progressive enhancement at its best: allowing you to make your stairs into an escalator whenever it’s possible.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eIt applies to many more things in CSS (unsupported grid is just a flow layout, unsupported \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Masonry_layout\"\u003emasonry layout\u003c/a\u003e is just a grid, and so on) and other web technologies.\u003c/p\u003e\u003ch3 id=\"trust-the-browser\"\u003eTrust The Browser\u003c/h3\u003e\u003cp\u003eTrust it because it knows much more about how safe it is for users to surf the web. Besides, it’s a computer program, and computer programs are pretty good at calculating things. So instead of calculating all these breakpoints ourselves, take their helping hand and allow them to do it for you. Just give them some constraints. Make that \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element no wider than 60 characters and no narrower than 20 characters — and then relax, watching the browser make it 37 characters on some super rare viewport you’ve never encountered before. It Just Works™.\u003c/p\u003e\u003cp\u003eBut trusting the browser also means trusting \u003ca href=\"https://www.w3.org/standards/\"\u003ethe open web\u003c/a\u003e. After all, these algorithms responsible for laying things out are all parts of the standards.\u003c/p\u003e\u003ch3 id=\"ditch-the-physical-css\"\u003eDitch The “Physical” CSS\u003c/h3\u003e\u003cp\u003eThat’s a bonus point from me. Layout systems introduced the concept of logical CSS. Flexbox does not have a notion of a left or right side — it has a start and an end. And that way of thinking lurked into other areas of CSS, creating the whole \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values\"\u003eCSS Logical Properties and Values module\u003c/a\u003e. After working more with layout systems, logical CSS seems much more intuitive than the old “physical” one. It also has at least one advantage over the old way of doing things: \u003cstrong\u003eit works far better with internationalized content\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"mybNMzR\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Physical vs logical CSS [forked]](https://codepen.io/smashingmag/pen/mybNMzR) by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/mybNMzR\"\u003ePhysical vs logical CSS [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/Comandeer\"\u003eComandeer\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe demo above shows the difference between physical and logical CSS. The physical tiles have the \u003ccode\u003etext-align: left\u003c/code\u003e property applied, while the logical ones have \u003ccode\u003etext-align: start\u003c/code\u003e. When the “left to right” inline text direction is set, both of them look the same. But when the “right to left” one is set, the logical tiles “move” their start to the right, moving the text alongside it.\u003c/p\u003e\u003cp\u003eAdditionally, containers with tiles have their width set — the physical container with the \u003ccode\u003ewidth: 400px\u003c/code\u003e property and the logical one with the \u003ccode\u003einline-size: 400px\u003c/code\u003e property. They both look the same as long as the block text direction is set to “horizontal.” But when it is set to “vertical,” the logical one switches its width with the height (as now the line of text is going from top to bottom, not from left to right), and the physical one keeps its initial width and height.\u003c/p\u003e\u003cblockquote\u003e“What do you mean by taking RWD to the extreme — it’s already pretty extreme!”\u003c/blockquote\u003e\u003cp\u003eI hear you. But I believe that there’s still room for more. The changes described above are a big shift in the RWD world. But this shift is mainly technological. Fluid type without the \u003ccode\u003eclamp()\u003c/code\u003e method or algorithmic layouts without flexbox and grid couldn’t possibly exist — at least not without some horrible hacks (does anyone still remember \u003ca href=\"https://fvsch.com/css-locks\"\u003eCSS locks\u003c/a\u003e?). Our web development routine just caught up to what the modern browser can do. Yet, there is still another shift that could happen: a mental one.\u003c/p\u003e\u003cp\u003eI’ll be honest: I’m a die-hard fanatic of using \u003ccode\u003erem\u003c/code\u003e and \u003ccode\u003eem\u003c/code\u003e length units. I’ve been using them for years, but they clicked for me only when I stopped trying to translate them into pixels. And what helped me in it was a… chemistry class I attended many years ago. When working with all these chemical concoctions, you often need to calculate their ratios. There’s that fancy method for doing that:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e60 — 100%\n20 — x\n\nx=100%*20/60=33.(3)%\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAfter I applied this way of thinking to \u003ccode\u003erem\u003c/code\u003e and \u003ccode\u003eem\u003c/code\u003e units, I entered a new world of thinking about layouts: a ratio-based one. Because there is still a myth that 1 rem roughly equals 16 pixels — except \u003ca href=\"https://nicolas-hoizey.com/articles/2016/03/02/people-don-t-change-the-default-16px-font-size-in-their-browser/\"\u003eit doesn’t\u003c/a\u003e. It could equal any number of pixels because it all depends on what value the user sets in their browser. So, thinking in concrete numbers is, in fact, incompatible with \u003ccode\u003erem\u003c/code\u003e and \u003ccode\u003eem\u003c/code\u003e units. The only fully compatible way is to… keep it as-is.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png\" sizes=\"100vw\" alt=\"A confused teenager asks his father: “So how do I know how big is 1 rem?” and the father answers with a smile: “That’s the neat part, you don’t”.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/taking-rwd-to-the-extreme/2-meme-one-rem.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnd I know that sounds crazy, but it forces a change in thinking about websites. If you don’t know the most basic information about your content (the font size), you can’t really apply any concrete numbers to your layout. You can only think in \u003cem\u003eratios\u003c/em\u003e. If the font size equals \u003ccode\u003e✕\u003c/code\u003e, your heading could equal \u003ccode\u003e2✕\u003c/code\u003e, the main column \u003ccode\u003e60✕\u003c/code\u003e, some text input — \u003ccode\u003e10✕\u003c/code\u003e, and so on. This way, everything should work out with any font size and, by extension, scale up with any font size.\u003c/p\u003e\u003cp\u003eWe’ve already been doing that with layout systems — we allow them to work on ratios and figure out how big each part of the layout should be. And we’ve also been doing that with \u003ccode\u003erem\u003c/code\u003e and \u003ccode\u003eem\u003c/code\u003e units for \u003ca href=\"https://css-tricks.com/rems-ems/\"\u003escaling things up depending on font size\u003c/a\u003e. The only thing left is to completely forget the “\u003ccode\u003e1rem\u003c/code\u003e = \u003ccode\u003e16px\u003c/code\u003e” equation and fully embrace the exciting shores of unknown dimensions.\u003c/p\u003e\u003cp\u003eBut that sort of mental shift comes with one not-so-straightforward consequence. Not setting the font size and working with the user-provided one instead fully \u003cstrong\u003emoves the power from the web developer to the browser and, effectively, the user\u003c/strong\u003e. And the browser can provide us with \u003ca href=\"https://www.smashingmagazine.com/2023/08/css-accessibility-inclusion-user-choice/\"\u003efar more information about user preferences\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThanks to the modern CSS, we can \u003cem\u003erespond\u003c/em\u003e to these things. For example, we can switch to dark mode if the user prefers one, we can limit motion if the user requests it, we can make clickable areas bigger if the device has a touch screen, and so on. By having this kind of \u003cstrong\u003edialogue with the browser\u003c/strong\u003e, exchanging information (it gives us data on the user, and we give it hints on how to display our content), we \u003cstrong\u003eempower the user\u003c/strong\u003e in the result. The content would be displayed in the way \u003cem\u003ethey\u003c/em\u003e want. That makes our website far more inclusive and accessible.\u003c/p\u003e\u003cp\u003eAfter all, the users know what they need best. If they set the default font size to 64 pixels, they would be grateful if we respected that value. We don’t know why they did it (maybe they have some kind of vision impairment, or maybe they simply have a screen far away from them); we only know they did it — and we respect that.\u003c/p\u003e\u003cp\u003eAnd that’s responsive design for me.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "19 min read",
  "publishedTime": "2025-02-07T13:00:00Z",
  "modifiedTime": "2025-02-07T13:00:00Z"
}
