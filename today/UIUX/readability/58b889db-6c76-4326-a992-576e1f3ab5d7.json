{
  "id": "58b889db-6c76-4326-a992-576e1f3ab5d7",
  "title": "How To Fix Largest Contentful Issues With Subpart Analysis",
  "link": "https://smashingmagazine.com/2025/03/how-fix-largest-contentful-issues-subpart-analysis/",
  "description": "Struggling with slow Largest Contentful Paint (LCP)? Newly introduced by Google, LCP subparts help you pinpoint where page load delays come from. Now, in the Chrome UX Report, this data provides real visitor insights to speed up your site and boost rankings. Matt Zeunert unpacks what LCP subparts are, what they mean for your website speed, and how you can measure them.",
  "author": "Matt Zeunert",
  "published": "Thu, 06 Mar 2025 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 8343,
  "excerpt": "Struggling with slow Largest Contentful Paint (LCP)? Newly introduced by Google, LCP subparts help you pinpoint where page load delays come from. Now, in the Chrome UX Report, this data provides real visitor insights to speed up your site and boost rankings. Matt Zeunert unpacks what LCP subparts are, what they mean for your website speed, and how you can measure them.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "7 min readPerformance, Optimization, User ExperienceStruggling with slow Largest Contentful Paint (LCP)? Newly introduced by Google, LCP subparts help you pinpoint where page load delays come from. Now, in the Chrome UX Report, this data provides real visitor insights to speed up your site and boost rankings. Matt Zeunert unpacks what LCP subparts are, what they mean for your website speed, and how you can measure them.The Largest Contentful Paint (LCP) in Core Web Vitals measures how quickly a website loads from a visitor’s perspective. It looks at how long after opening a page the largest content element becomes visible. If your website is loading slowly, that’s bad for user experience and can also cause your site to rank lower in Google.When trying to fix LCP issues, it’s not always clear what to focus on. Is the server too slow? Are images too big? Is the content not being displayed? Google has been working to address that recently by introducing LCP subparts, which tell you where page load delays are coming from. They’ve also added this data to the Chrome UX Report, allowing you to see what causes delays for real visitors on your website!Let’s take a look at what the LCP subparts are, what they mean for your website speed, and how you can measure them.The Four LCP SubpartsLCP subparts split the Largest Contentful Paint metric into four different components:Time to First Byte (TTFB): How quickly the server responds to the document request.Resource Load Delay: Time spent before the LCP image starts to download.Resource Load Time: Time spent downloading the LCP image.Element Render Delay: Time before the LCP element is displayed.The resource timings only apply if the largest page element is an image or background image. For text elements, the Load Delay and Load Time components are always zero.How To Measure LCP SubpartsOne way to measure how much each component contributes to the LCP score on your website is to use DebugBear’s website speed test. Expand the Largest Contentful Paint metric to see subparts and other details related to your LCP score.Here, we can see that TTFB and image Load Duration together account for 78% of the overall LCP score. That tells us that these two components are the most impactful places to start optimizing.(Large preview)What’s happening during each of these stages? A network request waterfall can help us understand what resources are loading through each stage.The LCP Image Discovery view filters the waterfall visualization to just the resources that are relevant to displaying the Largest Contentful Paint image. In this case, each of the first three stages contains one request, and the final stage finishes quickly with no new resources loaded. But that depends on your specific website and won’t always be the case.(Large preview)Time To First ByteThe first step to display the largest page element is fetching the document HTML. We recently published an article about how to improve the TTFB metric.In this example, we can see that creating the server connection doesn’t take all that long. Most of the time is spent waiting for the server to generate the page HTML. So, to improve the TTFB, we need to speed up that process or cache the HTML so we can skip the HTML generation entirely.Resource Load DelayThe “resource” we want to load is the LCP image. Ideally, we just have an \u003cimg\u003e tag near the top of the HTML, and the browser finds it right away and starts loading it.But sometimes, we get a Load Delay, as is the case here. Instead of loading the image directly, the page uses lazysize.js, an image lazy loading library that only loads the LCP image once it has detected that it will appear in the viewport.Part of the Load Delay is caused by having to download that JavaScript library. But the browser also needs to complete the page layout and start rendering content before the library will know that the image is in the viewport. After finishing the request, there’s a CPU task (in orange) that leads up to the First Contentful Paint milestone, when the page starts rendering. Only then does the library trigger the LCP image request.(Large preview)How do we optimize this? First of all, instead of using a lazy loading library, you can use the native loading=\"lazy\" image attribute. That way, loading images no longer depends on first loading JavaScript code.But more specifically, the LCP image should not be lazily loaded. That way, the browser can start loading it as soon as the HTML code is ready. According to Google, you should aim to eliminate resource load delay entirely.Resources Load DurationThe Load Duration subpart is probably the most straightforward: you need to download the LCP image before you can display it!In this example, the image is loaded from the same domain as the HTML. That’s good because the browser doesn’t have to connect to a new server.Other techniques you can use to reduce load delay:Use a modern image format that provides better compression.Load images at a size that matches the size they are displayed at.Deprioritize other resources that might compete with the LCP image.Element Render DelayThe fourth and final LCP component, Render Delay, is often the most confusing. The resource has loaded, but for some reason, the browser isn’t ready to show it to the user yet!Luckily, in the example we’ve been looking at so far, the LCP image appears quickly after it’s been loaded. One common reason for render delay is that the LCP element is not an image. In that case, the render delay is caused by render-blocking scripts and stylesheets. The text can only appear after these have loaded and the browser has completed the rendering process.(Large preview)Another reason you might see render delay is when the website preloads the LCP image. Preloading is a good idea, as it practically eliminates any load delay and ensures the image is loaded early.However, if the image finishes downloading before the page is ready to render, you’ll see an increase in render delay on the page. And that’s fine! You’ve improved your website speed overall, but after optimizing your image, you’ve uncovered a new bottleneck to focus on.(Large preview)LCP Subparts In Real User CrUX DataLooking at the Largest Contentful Paint subparts in lab-based tests can provide a lot of insight into where you can optimize. But all too often, the LCP in the lab doesn’t match what’s happening for real users!That’s why, in February 2025, Google started including subpart data in the CrUX data report. It’s not (yet?) included in PageSpeed Insights, but you can see those metrics in DebugBear’s “Web Vitals” tab.(Large preview)One super useful bit of info here is the LCP resource type: it tells you how many visitors saw the LCP element as a text element or an image.Even for the same page, different visitors will see slightly different content. For example, different elements are visible based on the device size, or some visitors will see a cookie banner while others see the actual page content.To make the data easier to interpret, Google only reports subpart data for images.If the LCP element is usually text on the page, then the subparts info won’t be very helpful, as it won’t apply to most of your visitors.But breaking down text LCP is relatively easy: everything that’s not part of the TTFB score is render-delayed.Track Subparts On Your Website With Real User MonitoringLab data doesn’t always match what real users experience. CrUX data is superficial, only reported for high-traffic pages, and takes at least 4 weeks to fully update after a change has been rolled out.That’s why a real-user monitoring tool like DebugBear comes in handy when fixing your LCP scores. You can track scores across all pages on your website over time and get dedicated dashboards for each LCP subpart.(Large preview)You can also review specific visitor experiences, see what the LCP image was for them, inspect a request waterfall, and check LCP subpart timings. Sign up for a free trial.(Large preview)ConclusionHaving more granular metric data available for the Largest Contentful Paint gives web developers a big leg up when making their website faster.Including subparts in CrUX provides new insight into how real visitors experience your website and can tell if the optimizations you’re considering would really be impactful. (gg, yk)",
  "image": "https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/how-fix-largest-contentful-issues-subpart-analysis.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e7 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/performance\"\u003ePerformance\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/optimization\"\u003eOptimization\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/user-experience\"\u003eUser Experience\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eStruggling with slow Largest Contentful Paint (LCP)? Newly introduced by Google, LCP subparts help you pinpoint where page load delays come from. Now, in the Chrome UX Report, this data provides real visitor insights to speed up your site and boost rankings. Matt Zeunert unpacks what LCP subparts are, what they mean for your website speed, and how you can measure them.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eThe \u003ca href=\"https://www.debugbear.com/docs/metrics/largest-contentful-paint?utm_campaign=sm-9\"\u003eLargest Contentful Paint\u003c/a\u003e (LCP) in Core Web Vitals measures how quickly a website loads from a visitor’s perspective. It looks at how long after opening a page the largest content element becomes visible. If your website is loading slowly, that’s bad for user experience and can also cause your site to \u003ca href=\"https://developers.google.com/search/docs/appearance/page-experience#ranking\"\u003erank lower in Google\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWhen trying to fix LCP issues, it’s not always clear what to focus on. Is the server too slow? Are images too big? Is the content not being displayed? Google has been working to address that recently by introducing \u003ca href=\"https://www.debugbear.com/blog/lcp-subparts?utm_campaign=sm-9\"\u003eLCP subparts\u003c/a\u003e, which tell you where page load delays are coming from. They’ve also added this data to the \u003ca href=\"https://www.debugbear.com/blog/chrome-user-experience-report?utm_campaign=sm-9\"\u003eChrome UX Report\u003c/a\u003e, allowing you to see what causes delays for real visitors on your website!\u003c/p\u003e\u003cp\u003eLet’s take a look at what the LCP subparts are, what they mean for your website speed, and how you can measure them.\u003c/p\u003e\u003ch2 id=\"the-four-lcp-subparts\"\u003eThe Four LCP Subparts\u003c/h2\u003e\u003cp\u003eLCP subparts split the Largest Contentful Paint metric into four different components:\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cstrong\u003eTime to First Byte (TTFB)\u003c/strong\u003e: How quickly the server responds to the document request.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eResource Load Delay\u003c/strong\u003e: Time spent before the LCP image starts to download.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eResource Load Time\u003c/strong\u003e: Time spent downloading the LCP image.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eElement Render Delay\u003c/strong\u003e: Time before the LCP element is displayed.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe resource timings only apply if the largest page element is an image or background image. For text elements, the Load Delay and Load Time components are always zero.\u003c/p\u003e\u003ch2 id=\"how-to-measure-lcp-subparts\"\u003eHow To Measure LCP Subparts\u003c/h2\u003e\u003cp\u003eOne way to measure how much each component contributes to the LCP score on your website is to use DebugBear’s \u003ca href=\"https://www.debugbear.com/test/website-speed?utm_campaign=sm-9\"\u003ewebsite speed test\u003c/a\u003e. Expand the Largest Contentful Paint metric to see subparts and other details related to your LCP score.\u003c/p\u003e\u003cp\u003eHere, we can see that TTFB and image Load Duration together account for 78% of the overall LCP score. That tells us that these two components are the most impactful places to start optimizing.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"441\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png\" sizes=\"100vw\" alt=\"LCP Subparts\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/1-lcp-subparts.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWhat’s happening during each of these stages? A network \u003ca href=\"https://www.debugbear.com/docs/waterfall?utm_campaign=sm-9\"\u003erequest waterfall\u003c/a\u003e can help us understand what resources are loading through each stage.\u003c/p\u003e\u003cp\u003eThe LCP Image Discovery view filters the waterfall visualization to just the resources that are relevant to displaying the Largest Contentful Paint image. In this case, each of the first three stages contains one request, and the final stage finishes quickly with no new resources loaded. But that depends on your specific website and won’t always be the case.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"331\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png\" sizes=\"100vw\" alt=\"LCP image discovery\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/2-lcp-image-discovery.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"time-to-first-byte\"\u003eTime To First Byte\u003c/h2\u003e\u003cp\u003eThe first step to display the largest page element is fetching the document HTML. We recently published an \u003ca href=\"https://www.smashingmagazine.com/2025/02/time-to-first-byte-beyond-server-response-time/\"\u003earticle about how to improve the TTFB metric\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn this example, we can see that creating the server connection doesn’t take all that long. Most of the time is spent waiting for the server to generate the page HTML. So, to improve the TTFB, we need to speed up that process or cache the HTML so we can skip the HTML generation entirely.\u003c/p\u003e\u003ch2 id=\"resource-load-delay\"\u003eResource Load Delay\u003c/h2\u003e\u003cp\u003eThe “resource” we want to load is the LCP image. Ideally, we just have an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag near the top of the HTML, and the browser finds it right away and starts loading it.\u003c/p\u003e\u003cp\u003eBut sometimes, we get a \u003ca href=\"https://www.debugbear.com/blog/lcp-resource-load-delay?utm_campaign=sm-9\"\u003eLoad Delay\u003c/a\u003e, as is the case here. Instead of loading the image directly, the page uses \u003ccode\u003elazysize.js\u003c/code\u003e, \u003cstrong\u003ean image lazy loading library\u003c/strong\u003e that only loads the LCP image once it has detected that it will appear in the viewport.\u003c/p\u003e\u003cp\u003ePart of the Load Delay is caused by having to download that JavaScript library. But the browser also needs to complete the page layout and start rendering content before the library will know that the image is in the viewport. After finishing the request, there’s a CPU task (in orange) that leads up to the \u003ca href=\"https://www.debugbear.com/docs/metrics/first-contentful-paint?utm_campaign=sm-9\"\u003eFirst Contentful Paint\u003c/a\u003e milestone, when the page starts rendering. Only then does the library trigger the LCP image request.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"255\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png\" sizes=\"100vw\" alt=\"Load Delay\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/3-load-delay.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eHow do we optimize this? First of all, instead of using a lazy loading library, you can use the native \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#loading\"\u003e\u003ccode\u003eloading=\u0026#34;lazy\u0026#34;\u003c/code\u003e image attribute\u003c/a\u003e. That way, loading images \u003cstrong\u003eno longer depends on first loading JavaScript code\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eBut more specifically, \u003ca href=\"https://www.debugbear.com/docs/lcp-lazily-loaded?utm_campaign=sm-9\"\u003ethe LCP image should not be lazily loaded\u003c/a\u003e. That way, the browser can start loading it as soon as the HTML code is ready. According to Google, you should aim to \u003ca href=\"https://web.dev/articles/optimize-lcp#1_eliminate_resource_load_delay\"\u003eeliminate resource load delay entirely\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"resources-load-duration\"\u003eResources Load Duration\u003c/h2\u003e\u003cp\u003eThe \u003ca href=\"https://www.debugbear.com/blog/lcp-resource-load-duration?utm_campaign=sm-9\"\u003eLoad Duration subpart\u003c/a\u003e is probably the most straightforward: you need to download the LCP image before you can display it!\u003c/p\u003e\u003cp\u003eIn this example, the image is loaded from the same domain as the HTML. That’s good because the browser doesn’t have to connect to a new server.\u003c/p\u003e\u003cp\u003eOther techniques you can use to reduce load delay:\u003c/p\u003e\u003cul\u003e\u003cli\u003eUse a \u003ca href=\"https://www.debugbear.com/blog/image-formats?utm_campaign=sm-9\"\u003emodern image format\u003c/a\u003e that provides better compression.\u003c/li\u003e\u003cli\u003eLoad images at a size that \u003ca href=\"https://developer.chrome.com/docs/lighthouse/performance/uses-responsive-images\"\u003ematches the size they are displayed at\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eDeprioritize other resources that might \u003ca href=\"https://www.debugbear.com/blog/bandwidth-competition-page-speed?utm_campaign=sm-9\"\u003ecompete with the LCP image\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"element-render-delay\"\u003eElement Render Delay\u003c/h2\u003e\u003cp\u003eThe fourth and final LCP component, \u003ca href=\"https://www.debugbear.com/blog/lcp-render-delay?utm_campaign=sm-9\"\u003eRender Delay\u003c/a\u003e, is often the most confusing. The resource has loaded, but for some reason, the browser isn’t ready to show it to the user yet!\u003c/p\u003e\u003cp\u003eLuckily, in the example we’ve been looking at so far, the LCP image appears quickly after it’s been loaded. One common reason for render delay is that \u003cstrong\u003ethe LCP element is not an image\u003c/strong\u003e. In that case, the render delay is caused by \u003cstrong\u003erender-blocking scripts\u003c/strong\u003e and \u003cstrong\u003estylesheets\u003c/strong\u003e. The text can only appear after these have loaded and the browser has completed the rendering process.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"395\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png\" sizes=\"100vw\" alt=\"Render Delay\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/4-render-delay.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnother reason you might see render delay is when the website \u003ca href=\"https://www.debugbear.com/blog/preload-largest-contentful-paint-image?utm_campaign=sm-9\"\u003epreloads the LCP image\u003c/a\u003e. Preloading is a good idea, as it practically eliminates any load delay and ensures the image is loaded early.\u003c/p\u003e\u003cp\u003eHowever, if the image finishes downloading before the page is ready to render, you’ll see an increase in render delay on the page. And that’s fine! You’ve improved your website speed overall, but after optimizing your image, you’ve uncovered a new bottleneck to focus on.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"382\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png\" sizes=\"100vw\" alt=\"Render Delay with preloaded LCP image\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/5-render-delay-preloaded-lcp-image.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"lcp-subparts-in-real-user-crux-data\"\u003eLCP Subparts In Real User CrUX Data\u003c/h2\u003e\u003cp\u003eLooking at the Largest Contentful Paint subparts in lab-based tests can provide a lot of insight into where you can optimize. But all too often, the LCP in \u003ca href=\"https://www.debugbear.com/blog/lcp-lab-field-differences?utm_campaign=sm-9\"\u003ethe lab doesn’t match what’s happening for real users\u003c/a\u003e!\u003c/p\u003e\u003cp\u003eThat’s why, in February 2025, Google started \u003ca href=\"https://developer.chrome.com/blog/crux-2025-02\"\u003eincluding subpart data in the CrUX data report\u003c/a\u003e. It’s not (yet?) included in PageSpeed Insights, but you can see those metrics in DebugBear’s “Web Vitals” tab.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"523\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png\" sizes=\"100vw\" alt=\"Subpart data in the CrUX data report\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/6-crux-lcp-subparts.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eOne super useful bit of info here is \u003cstrong\u003ethe LCP resource type\u003c/strong\u003e: it tells you how many visitors saw the LCP element as a text element or an image.\u003c/p\u003e\u003cp\u003eEven for the same page, different visitors will see slightly different content. For example, different elements are visible based on the device size, or some visitors will see a cookie banner while others see the actual page content.\u003c/p\u003e\u003cp\u003eTo make the data easier to interpret, Google only reports subpart data for images.\u003c/p\u003e\u003cblockquote\u003eIf the LCP element is usually text on the page, then the subparts info won’t be very helpful, as it won’t apply to most of your visitors.\u003c/blockquote\u003e\u003cp\u003eBut breaking down text LCP is relatively easy: everything that’s not part of the TTFB score is render-delayed.\u003c/p\u003e\u003ch2 id=\"track-subparts-on-your-website-with-real-user-monitoring\"\u003eTrack Subparts On Your Website With Real User Monitoring\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.smashingmagazine.com/2023/08/running-page-speed-test-monitoring-versus-measuring/\"\u003eLab data doesn’t always match what real users experience.\u003c/a\u003e CrUX data is superficial, \u003cstrong\u003eonly reported for high-traffic pages\u003c/strong\u003e, and takes at least \u003cstrong\u003e4 weeks\u003c/strong\u003e to fully update after a change has been rolled out.\u003c/p\u003e\u003cp\u003eThat’s why a \u003ca href=\"https://www.debugbear.com/real-user-monitoring?utm_campaign=sm-9\"\u003ereal-user monitoring tool like DebugBear\u003c/a\u003e comes in handy when fixing your LCP scores. You can \u003cstrong\u003etrack scores across all pages\u003c/strong\u003e on your website over time and get dedicated dashboards for each LCP subpart.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"601\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png\" sizes=\"100vw\" alt=\"Dashboards for each LCP subpart\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/7-dashboards-each-lcp-subpart.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eYou can also \u003cstrong\u003ereview specific visitor experiences\u003c/strong\u003e, see what the LCP image was for them, inspect a request waterfall, and check LCP subpart timings. \u003ca href=\"https://www.debugbear.com/signup?utm_campaign=sm-9\"\u003eSign up for a free trial\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"582\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png\" sizes=\"100vw\" alt=\"DebugBear tool where you can review visitor experiences and check LCP subpart timings\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-fix-largest-contentful-issues-subpart-analysis/8-lcp-scores-visitor-experiences.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eHaving more granular metric data available for the Largest Contentful Paint gives web developers a big leg up when making their website faster.\u003c/p\u003e\u003cp\u003eIncluding subparts in CrUX provides new insight into how real visitors experience your website and can tell if the optimizations you’re considering would really be impactful.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-03-06T10:00:00Z",
  "modifiedTime": "2025-03-06T10:00:00Z"
}
