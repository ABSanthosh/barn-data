{
  "id": "c89ae2e6-0e92-46a0-89fc-327c53a3e96b",
  "title": "Decoding The SVG path Element: Curve And Arc Commands",
  "link": "https://smashingmagazine.com/2025/06/decoding-svg-path-element-curve-arc-commands/",
  "description": "On her quest to teach you how to code vectors by hand, Myriam Frisano’s second installment of a `path` deep dive explores the most complex aspects of SVG’s most powerful element. She’ll help you understand the underlying rules and function of how curves and arcs are constructed. By the end of it, your toolkit is ready to tackle all types of tasks required to draw with code — even if some of the lines twist and turn.",
  "author": "Myriam Frisano",
  "published": "Mon, 23 Jun 2025 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 16039,
  "excerpt": "On her quest to teach you how to code vectors by hand, Myriam Frisano’s second installment of a `path` deep dive explores the most complex aspects of SVG’s most powerful element. She’ll help you understand the underlying rules and function of how curves and arcs are constructed. By the end of it, your toolkit is ready to tackle all types of tasks required to draw with code — even if some of the lines twist and turn.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "13 min readCSS, Coding, TechniquesOn her quest to teach you how to code vectors by hand, Myriam Frisano’s second installment of a path deep dive explores the most complex aspects of SVG’s most powerful element. She’ll help you understand the underlying rules and function of how curves and arcs are constructed. By the end of it, your toolkit is ready to tackle all types of tasks required to draw with code — even if some of the lines twist and turn.In the first part of decoding the SVG path pair, we mostly dealt with converting things from semantic tags (line, polyline, polygon) into the path command syntax, but the path element didn’t really offer us any new shape options. This will change in this article as we’re learning how to draw curves and arcs, which just refer to parts of an ellipse.TL;DR On Previous ArticlesIf this is your first meeting with this series, I recommend you familiarize yourself with the basics of hand-coding SVG, as well as how the \u003cmarker\u003e works and have a basic understanding of animate, as this guide doesn’t explain them. I also recommend knowing about the M/m command within the \u003cpath\u003e d attribute (I wrote the aforementioned article on path line commands to help).Note: This article will solely focus on the syntax of curve and arc commands and not offer an introduction to path as an element.Before we get started, I want to do a quick recap of how I code SVG, which is by using JavaScript. I don’t like dealing with numbers and math, and reading SVG code that has numbers filled into every attribute makes me lose all understanding of it. By giving coordinates names and having all my math easy to parse and all written out, I have a much better time with this type of code, and I think you will, too.As the goal of this article is about understanding path syntax and not about doing placement or how to leverage loops and other more basic things, I will not run you through the entire setup of each example. I’ll share some snippets of the code, but please note that it may be slightly adjusted from the CodePen or simplified to make the article easier to read. However, if there are specific questions about code not part of the text that’s in the CodePen demos — the comment section is open, as always.To keep this all framework-agnostic, the code is written in vanilla JavaScript, though, in practice, TypeScript comes highly recommended when dealing with complex images.Drawing Bézier CurvesBeing able to draw lines, polygons, polylines, and compounded versions of them is all fun and nice, but path can also do more than just offer more cryptic implementations of basic semantic SVG tags.One of those additional types is Bézier curves.There are multiple different curve commands. And this is where the idea of points and control points comes in.Bézier math plotting is out of scope for this article.But, there is a visually gorgeous video by Freya Holmér called The Beauty of Bézier Curves which gets into the construction of cubic and quadratic bézier curves that features beautiful animation and the math becomes a lot easier to digest.Luckily, SVG allows us to draw quadratic curves with one control point and cubic curves with two control points without having to do any additional math.So, what is a control point? A control point is the position of the handle that controls the curve. It is not a point that is drawn.I found the best way to understand these path commands is to render them like a GUI, like Affinity and Illustrator would. Then, draw the “handles” and draw a few random curves with different properties, and see how they affect the curve. Seeing that animation also really helps to see the mechanics of these commands.This is what I’ll be using markers and animation for in the following visuals. You will notice that the markers I use are rectangles and circles, and since they are connected to lines, I can make use of marker and then save myself a lot of animation time because these additional elements are rigged to the system. (And animating a single d command instead of x and y attributes separately makes the SVG code also much shorter.)Quadratic Bézier Curves: Q \u0026 T CommandsThe Q command is used to draw quadratic béziers. It takes two arguments: the control point and the end point.So, for a simple curve, we would start with M to move to the start point, then Q to draw the curve.const path = `M${start.x} ${start.y} Q${control.x} ${control.y} ${end.x} ${end.y}`; Since we have the Control Point, the Start Point, and the End Point, it’s actually quite simple to render the singular handle path like a graphics program would.Funny enough, you probably have never interacted with a quadratic Bézier curve like with a cubic one in most common GUIs! Most of the common programs will convert this curve to a cubic curve with two handles and control points as soon as you want to play with it.For the drawing, I created a couple of markers, and I’m drawing the handle in red to make it stand out a bit better.I also stroked the main path with a gradient and gave it a crosshatch pattern fill. (We looked at pattern in my first article, linearGradient is fairly similar. They’re both def elements you can refer to via id.) I like seeing the fill, but if you find it distracting, you can modify the variable for it.I encourage you to look at the example with and without the rendering of the handle to see some of the nuance that happens around the points as the control points get closer to them.See the Pen [SVG Path Quadratic Bézier Curve Visual [forked]](https://codepen.io/smashingmag/pen/LEVXLoJ) by Myriam.See the Pen SVG Path Quadratic Bézier Curve Visual [forked] by Myriam.Quadratic Béziers are the “less-bendy” ones.These curves always remain somewhat related to “u” or “n” shapes and can’t be manipulated to be contorted. They can be squished, though.Connected Bézier curves are called “Splines”. And there is an additional command when chaining multiple quadratic curves, which is the T command.The T command is used to draw a curve that is connected to the previous curve, so it always has to follow a Q command (or another T command). It only takes one argument, which is the endpoint of the curve.const path = `M${p1.x} ${p1.y} Q${cP.x} ${cP.y} ${p2.x} ${p2.y} T${p3.x} ${p3.y}` The T command will actually use information about our control Point cP within the Q command.To see how I created the following example. Notice that the inferred handles are drawn in green, while our specified controls are still rendered in red.See the Pen [SVG Path Quadratic Curve T Command [forked]](https://codepen.io/smashingmag/pen/vEOQJBM) by Myriam.See the Pen SVG Path Quadratic Curve T Command [forked] by Myriam.OK, so the top curve takes two Q commands, which means, in total, there are three control points. Using a separate control point to create the scallop makes sense, but the third control point is just a reflection of the second control point through the preceding point.This is what the T command does. It infers control points by reflecting them through the end point of the preceding Q (or T) command. You can see how the system all links up in the animation below, where all I’ve manipulated is the position of the main points and the first control points. The inferred control points follow along.See the Pen [SVG Path Quadratic Bézier Spline T Command Visual [forked]](https://codepen.io/smashingmag/pen/WbvYENx) by Myriam.See the Pen SVG Path Quadratic Bézier Spline T Command Visual [forked] by Myriam.The q and t commands also exist, so they will use relative coordinates.Before I go on, if you do want to interact with a cubic curve, SVG Path Editor allows you to edit all path commands very nicely.Cubic Bézier Curves: C And SCubic Bézier curves work basically like quadratic ones, but instead of having one control point, they have two. This is probably the curve you are most familiar with.The order is that you start with the first control point, then the second, and then the end point.const path = `M${p1.x} ${p1.y} C${cP1.x} ${cP1.y} ${cP2.x} ${cP2.y} ${p2.x} ${p2.y}`; Let’s look at a visual to see it in action.See the Pen [SVG Path Cubic Bézier Curve Animation [forked]](https://codepen.io/smashingmag/pen/EajOvaL) by Myriam.See the Pen SVG Path Cubic Bézier Curve Animation [forked] by Myriam.Cubic Bézier curves are contortionists.Unlike the quadratic curve, this one can curl up and form loops and take on completely different shapes than any other SVG element. It can split the filled area into two parts, while the quadratic curve can not.Just like with the T command, a reflecting command is available for cubic curves S.When using it, we get the first control point through the reflection, while we can define the new end control point and then the end point. Like before, this requires a spline, so at least one preceding C (or S) command.const path = ` M ${p0.x} ${p0.y} C ${c0.x} ${c0.y} ${c1.x} ${c1.y} ${p1.x} ${p1.y} S ${c2.x} ${c2.y} ${p2.x} ${p2.y} `; I created a living visual for that as well.See the Pen [SVG Path Cubic Bézier Spline S Command Visual [forked]](https://codepen.io/smashingmag/pen/RNPqZPz) by Myriam.See the Pen SVG Path Cubic Bézier Spline S Command Visual [forked] by Myriam.When to use T and S:The big advantage of using these chaining reflecting commands is if you want to draw waves or just absolutely ensure that your spline connection is smooth.If you can’t use a reflection but want to have a nice, smooth connection, make sure your control points form a straight line. If you have a kink in the handles, your spline will get one, too.Arcs: A CommandFinally, the last type of path command is to create arcs. Arcs are sections of circles or ellipses.It’s my least favorite command because there are so many elements to it. But it is the secret to drawing a proper donut chart, so I have a bit of time spent with it under my belt.Let’s look at it.Like with any other path command, lowercase implies relative coordinates. So, just as there is an A command, there’s also an a.So, an arc path looks like this:const path = `M${start.x} ${start.y} A${radius.x} ${radius.y} ${xAxisRotation} ${largeArcFlag} ${sweepFlag} ${end.x} ${end.y}`; And what the heck are xAxisRotation, largeArcFlag, and sweepFlag supposed to be? In short:xAxisRotation is the rotation of the underlying ellipse’s axes in degrees.largeArcFlag is a boolean value that determines if the arc is greater than 180°.sweepFlag is also a boolean and determines the arc direction, so does it go clockwise or counter-clockwise?To better understand these concepts, I created this visual.See the Pen [SVG Path Arc Command Visuals [forked]](https://codepen.io/smashingmag/pen/GgJwvZR) by Myriam.See the Pen SVG Path Arc Command Visuals [forked] by Myriam.Radius SizeYou’ll notice in that CodePen that there are ellipses drawn for each command. In the top row, they are overlapping, while in the bottom row, they are stacked up. Both rows actually use the same radius.x and radius.y values in their arc definitions, while the distance between the start and end points increases for the second row.The reason why the stacking happens is that the radius size is only taken into consideration if the start and end points fit within the specified ellipse. That behavior surprised me, and thus, I dug into the specs and found the following information on how the arc works:“Arbitrary numerical values are permitted for all elliptical arc parameters (other than the boolean flags), but user agents must make the following adjustments for invalid values when rendering curves or calculating their geometry:If the endpoint (x, y) of the segment is identical to the current point (e.g., the endpoint of the previous segment), then this is equivalent to omitting the elliptical arc segment entirely.If either rx or ry is 0, then this arc is treated as a straight line segment (a “lineto”) joining the endpoints.If either rx or ry have negative signs, these are dropped; the absolute value is used instead.If rx, ry and x-axis-rotation are such that there is no solution (basically, the ellipse is not big enough to reach from the current point to the new endpoint) then the ellipse is scaled up uniformly until there is exactly one solution (until the ellipse is just big enough).See the appendix section Correction of out-of-range radii for the mathematical formula for this scaling operation.”— 9.5.1 Out-of-range elliptical arc parametersSo, really, that stacking is just nice and graceful error-handling and not how it was intended. Because the top row is how arcs should be used.When plugging in logical values, the underlying ellipses and the two points give us four drawing options for how we could connect the two points along an elliptical path. That’s what the boolean values are for.xAxisRotationBefore we get to the booleans, the crosshatch pattern shows the xAxisrotation. The ellipse is rotated around its center, with the degree value being in relation to the x-direction of the SVG.So, if you work with a circular ellipse, the rotation won’t have any effect on the arc (except if you use it in a pattern like I did there).Sweep FlagNotice the little arrow marker to show the arc drawing direction. If the value is 0, the arc is drawn clockwise. If the value is 1, the arc is drawn counterclockwise.Large Arc FlagThe large Arc Flag tells the path if you want the smaller or the larger arc from the ellipse. If we have a scaled case, we get exactly 180° of our ellipse.Arcs usually require a lot more annoying circular number-wrangling than I am happy doing (As soon as radians come to play, I tend to spiral into rabbit holes where I have to relearn too much math I happily forget.)They are more reliant on values being related to each other for the outcome to be as expected and there’s just so much information going in.But — and that’s a bit but — arcs are wonderfully powerful!ConclusionAlright, that was a lot! However, I do hope that you are starting to see how path commands can be helpful. I find them extremely useful to illustrate data.Once you know how easy it is to set up stuff like grids, boxes, and curves, it doesn’t take many more steps to create visualizations that are a bit more unique than what the standard data visualization libraries offer.With everything you’ve learned in this series of articles, you’re basically fully equipped to render all different types of charts — or other types of visualizations.Like, how about visualizing the underlying cubic-bezier of something like transition-timing-function: ease; in CSS? That’s the thing I made to figure out how I could turn those transition-timing-functions into something an \u003canimate\u003e tag understands.See the Pen [CSS Cubic Beziers as SVG Animations \u0026 CSS Transition Comparisons [forked]](https://codepen.io/smashingmag/pen/gbpQxgp) by Myriam.See the Pen CSS Cubic Beziers as SVG Animations \u0026 CSS Transition Comparisons [forked] by Myriam.SVG is fun and quirky, and the path element may be the holder of the most overwhelming string of symbols you’ve ever laid eyes on during code inspection. However, if you take the time to understand the underlying logic, it all transforms into one beautifully simple and extremely powerful syntax.I hope with this pair of path decoding articles, I managed to expose the underlying mechanics of how path plots work. If you want even more resources that don’t require you to dive through specs, try the MDN tutorial about paths. It’s short and compact, and was the main resource for me to learn all of this.However, since I wrote my deep dive on the topic, I stumbled into the beautiful svg-tutorial.com, which does a wonderful job visualizing SVG coding as a whole but mostly features my favorite arc visual of them all in the Arc Editor. And if you have a path that you’d like properly decoded without having to store all of the information in these two articles, there’s SVG Path Visualizer, which breaks down path information super nicely.And now: Go forth and have fun playing in the matrix. (gg, yk)",
  "image": "https://files.smashing.media/decoding-svg-path-element-curve-arc-commands/decoding-svg-path-element-curve-arc-commands.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e13 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/css\"\u003eCSS\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/techniques\"\u003eTechniques\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eOn her quest to teach you how to code vectors by hand, Myriam Frisano’s second installment of a \u003ccode\u003epath\u003c/code\u003e deep dive explores the most complex aspects of SVG’s most powerful element. She’ll help you understand the underlying rules and function of how curves and arcs are constructed. By the end of it, your toolkit is ready to tackle all types of tasks required to draw with code — even if some of the lines twist and turn.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eIn the \u003ca href=\"https://www.smashingmagazine.com/2025/06/decoding-svg-path-element-line-commands/\"\u003efirst part of decoding the SVG \u003ccode\u003epath\u003c/code\u003e pair\u003c/a\u003e, we mostly dealt with converting things from semantic tags (\u003ccode\u003eline\u003c/code\u003e, \u003ccode\u003epolyline\u003c/code\u003e, \u003ccode\u003epolygon\u003c/code\u003e) into the \u003ccode\u003epath\u003c/code\u003e command syntax, but the \u003ccode\u003epath\u003c/code\u003e element didn’t really offer us any new shape options. This will change in this article as we’re learning how to draw \u003cstrong\u003ecurves\u003c/strong\u003e and \u003cstrong\u003earcs\u003c/strong\u003e, which just refer to parts of an ellipse.\u003c/p\u003e\u003ch2 id=\"tl-dr-on-previous-articles\"\u003eTL;DR On Previous Articles\u003c/h2\u003e\u003cp\u003eIf this is your first meeting with this series, I recommend you familiarize yourself with the \u003ca href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\"\u003ebasics of hand-coding SVG\u003c/a\u003e, as well as \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/marker\"\u003ehow the \u003ccode\u003e\u0026lt;marker\u0026gt;\u003c/code\u003e works\u003c/a\u003e and have a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/animate\"\u003ebasic understanding of animate\u003c/a\u003e, as this guide doesn’t explain them. I also recommend knowing about the \u003ccode\u003eM/m\u003c/code\u003e command within the \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e \u003ccode\u003ed\u003c/code\u003e attribute (I wrote the aforementioned \u003ca href=\"https://www.smashingmagazine.com/2025/06/decoding-svg-path-element-line-commands/\"\u003earticle on path line commands\u003c/a\u003e to help).\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eThis article will solely focus on the syntax of curve and arc commands and not offer an introduction to \u003ccode\u003epath\u003c/code\u003e as an element.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eBefore we get started, I want to do a quick recap of how I code SVG, which is by using JavaScript. I don’t like dealing with numbers and math, and reading SVG code that has numbers filled into every attribute makes me lose all understanding of it. By giving coordinates names and having all my math easy to parse and all written out, I have a much better time with this type of code, and I think you will, too.\u003c/p\u003e\u003cp\u003eAs the goal of this article is about understanding \u003ccode\u003epath\u003c/code\u003e syntax and not about doing placement or how to leverage loops and other more basic things, I will not run you through the entire setup of each example. I’ll share some snippets of the code, but please note that it may be slightly adjusted from the CodePen or simplified to make the article easier to read. However, if there are specific questions about code not part of the text that’s in the CodePen demos — the comment section is open, as always.\u003c/p\u003e\u003cp\u003eTo keep this all framework-agnostic, the code is written in vanilla JavaScript, though, in practice, TypeScript comes highly recommended when dealing with complex images.\u003c/p\u003e\u003ch2 id=\"drawing-bézier-curves\"\u003eDrawing Bézier Curves\u003c/h2\u003e\u003cp\u003eBeing able to draw lines, polygons, polylines, and compounded versions of them is all fun and nice, but \u003ccode\u003epath\u003c/code\u003e can also do more than just offer more cryptic implementations of basic semantic SVG tags.\u003c/p\u003e\u003cp\u003eOne of those additional types is Bézier curves.\u003c/p\u003e\u003cp\u003eThere are multiple different curve commands. And this is where the idea of points and control points comes in.\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eBézier math plotting is out of scope for this article.\u003c/strong\u003e\u003cbr/\u003eBut, there is a visually gorgeous video by Freya Holmér called \u003ca href=\"https://youtu.be/aVwxzDHniEw?si=WB_3i88VVJlZS6jf\"\u003eThe Beauty of Bézier Curves\u003c/a\u003e which gets into the construction of cubic and quadratic bézier curves that features beautiful animation and the math becomes a lot easier to digest.\u003c/blockquote\u003e\u003cp\u003eLuckily, SVG allows us to draw quadratic curves with one control point and cubic curves with two control points without having to do any additional math.\u003c/p\u003e\u003cp\u003eSo, what is a control point? A control point is the position of the handle that controls the curve. It is not a point that is drawn.\u003c/p\u003e\u003cp\u003eI found the best way to understand these path commands is to render them like a GUI, like Affinity and Illustrator would. Then, draw the “handles” and draw a few random curves with different properties, and see how they affect the curve. Seeing that animation also really helps to see the mechanics of these commands.\u003c/p\u003e\u003cp\u003eThis is what I’ll be using markers and animation for in the following visuals. You will notice that the markers I use are rectangles and circles, and since they are connected to lines, I can make use of \u003ccode\u003emarker\u003c/code\u003e and then save myself a lot of animation time because these additional elements are rigged to the system. (And animating a single \u003ccode\u003ed\u003c/code\u003e command instead of \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e attributes separately makes the SVG code also much shorter.)\u003c/p\u003e\u003ch3 id=\"quadratic-bézier-curves-q-t-commands\"\u003eQuadratic Bézier Curves: \u003ccode\u003eQ\u003c/code\u003e \u0026amp; \u003ccode\u003eT\u003c/code\u003e Commands\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eQ\u003c/code\u003e command is used to draw quadratic béziers. It takes two arguments: the control point and the end point.\u003c/p\u003e\u003cp\u003eSo, for a simple curve, we would start with \u003ccode\u003eM\u003c/code\u003e to move to the start point, then \u003ccode\u003eQ\u003c/code\u003e to draw the curve.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst path = `M${start.x} ${start.y} Q${control.x} ${control.y} ${end.x} ${end.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince we have the Control Point, the Start Point, and the End Point, it’s actually quite simple to render the singular handle path like a graphics program would.\u003c/p\u003e\u003cp\u003eFunny enough, you probably have never interacted with a quadratic Bézier curve like with a cubic one in most common GUIs! Most of the common programs will convert this curve to a cubic curve with two handles and control points as soon as you want to play with it.\u003c/p\u003e\u003cp\u003eFor the drawing, I created a couple of markers, and I’m drawing the handle in red to make it stand out a bit better.\u003c/p\u003e\u003cp\u003eI also stroked the main \u003ccode\u003epath\u003c/code\u003e with a gradient and gave it a crosshatch pattern fill. (We looked at \u003ccode\u003epattern\u003c/code\u003e in \u003ca href=\"https://www.smashingmagazine.com/2025/06/decoding-svg-path-element-line-commands/\"\u003emy first article\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient\"\u003e\u003ccode\u003elinearGradient\u003c/code\u003e\u003c/a\u003e is fairly similar. They’re both \u003ccode\u003edef\u003c/code\u003e elements you can refer to via \u003ccode\u003eid\u003c/code\u003e.) I like seeing the fill, but if you find it distracting, you can modify the variable for it.\u003c/p\u003e\u003cp\u003eI encourage you to look at the example with and without the rendering of the handle to see some of the nuance that happens around the points as the control points get closer to them.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"LEVXLoJ\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Quadratic Bézier Curve Visual [forked]](https://codepen.io/smashingmag/pen/LEVXLoJ) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/LEVXLoJ\"\u003eSVG Path Quadratic Bézier Curve Visual [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cstrong\u003eQuadratic Béziers are the “less-bendy” ones.\u003c/strong\u003e\u003cbr/\u003eThese curves always remain somewhat related to “u” or “n” shapes and can’t be manipulated to be contorted. They can be squished, though.\u003c/blockquote\u003e\u003cp\u003eConnected Bézier curves are called “Splines”. And there is an additional command when chaining multiple quadratic curves, which is the \u003ccode\u003eT\u003c/code\u003e command.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003eT\u003c/code\u003e command is used to draw a curve that is connected to the previous curve, so it always has to follow a \u003ccode\u003eQ\u003c/code\u003e command (or another \u003ccode\u003eT\u003c/code\u003e command). It only takes one argument, which is the endpoint of the curve.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst path = `M${p1.x} ${p1.y} Q${cP.x} ${cP.y} ${p2.x} ${p2.y} T${p3.x} ${p3.y}`\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eT\u003c/code\u003e command will actually use information about our control Point \u003ccode\u003ecP\u003c/code\u003e within the \u003ccode\u003eQ\u003c/code\u003e command.\u003c/p\u003e\u003cp\u003eTo see how I created the following example. Notice that the inferred handles are drawn in green, while our specified controls are still rendered in red.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"vEOQJBM\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Quadratic Curve T Command [forked]](https://codepen.io/smashingmag/pen/vEOQJBM) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/vEOQJBM\"\u003eSVG Path Quadratic Curve T Command [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eOK, so the top curve takes two \u003ccode\u003eQ\u003c/code\u003e commands, which means, in total, there are three control points. Using a separate control point to create the scallop makes sense, but the third control point is just a reflection of the second control point through the preceding point.\u003c/p\u003e\u003cp\u003eThis is what the \u003ccode\u003eT\u003c/code\u003e command does. It infers control points by reflecting them through the end point of the preceding \u003ccode\u003eQ\u003c/code\u003e (or \u003ccode\u003eT\u003c/code\u003e) command. You can see how the system all links up in the animation below, where all I’ve manipulated is the position of the main points and the first control points. The inferred control points follow along.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"WbvYENx\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Quadratic Bézier Spline T Command Visual [forked]](https://codepen.io/smashingmag/pen/WbvYENx) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/WbvYENx\"\u003eSVG Path Quadratic Bézier Spline T Command Visual [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe \u003ccode\u003eq\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e commands also exist, so they will use relative coordinates.\u003c/p\u003e\u003cp\u003eBefore I go on, if you do want to interact with a cubic curve, \u003ca href=\"https://yqnn.github.io/svg-path-editor/\"\u003eSVG Path Editor\u003c/a\u003e allows you to edit all path commands very nicely.\u003c/p\u003e\u003ch3 id=\"cubic-bézier-curves-c-and-s\"\u003eCubic Bézier Curves: \u003ccode\u003eC\u003c/code\u003e And \u003ccode\u003eS\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eCubic Bézier curves work basically like quadratic ones, but instead of having one control point, they have two. This is probably the curve you are most familiar with.\u003c/p\u003e\u003cp\u003eThe order is that you start with the first control point, then the second, and then the end point.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst path = `M${p1.x} ${p1.y} C${cP1.x} ${cP1.y} ${cP2.x} ${cP2.y} ${p2.x} ${p2.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet’s look at a visual to see it in action.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"EajOvaL\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Cubic Bézier Curve Animation [forked]](https://codepen.io/smashingmag/pen/EajOvaL) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/EajOvaL\"\u003eSVG Path Cubic Bézier Curve Animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cstrong\u003eCubic Bézier curves are contortionists.\u003c/strong\u003e\u003cbr/\u003eUnlike the quadratic curve, this one can curl up and form loops and take on completely different shapes than any other SVG element. It can split the filled area into two parts, while the quadratic curve can not.\u003c/blockquote\u003e\u003cp\u003eJust like with the \u003ccode\u003eT\u003c/code\u003e command, a reflecting command is available for cubic curves \u003ccode\u003eS\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eWhen using it, we get the first control point through the reflection, while we can define the new end control point and then the end point. Like before, this requires a spline, so at least one preceding \u003ccode\u003eC\u003c/code\u003e (or \u003ccode\u003eS\u003c/code\u003e) command.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst path = `    \n  M ${p0.x} ${p0.y}\n  C ${c0.x} ${c0.y} ${c1.x} ${c1.y} ${p1.x} ${p1.y}\n  S ${c2.x} ${c2.y} ${p2.x} ${p2.y}\n`;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI created a living visual for that as well.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"RNPqZPz\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Cubic Bézier Spline S Command Visual [forked]](https://codepen.io/smashingmag/pen/RNPqZPz) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/RNPqZPz\"\u003eSVG Path Cubic Bézier Spline S Command Visual [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cstrong\u003eWhen to use \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eS\u003c/code\u003e:\u003c/strong\u003e\u003cbr/\u003eThe big advantage of using these chaining reflecting commands is if you want to draw waves or just absolutely ensure that your spline connection is smooth.\u003c/blockquote\u003e\u003cp\u003eIf you can’t use a reflection but want to have a nice, smooth connection, make sure your control points form a straight line. If you have a kink in the handles, your spline will get one, too.\u003c/p\u003e\u003ch2 id=\"arcs-a-command\"\u003eArcs: \u003ccode\u003eA\u003c/code\u003e Command\u003c/h2\u003e\u003cp\u003eFinally, the last type of \u003ccode\u003epath\u003c/code\u003e command is to create arcs. Arcs are sections of circles or ellipses.\u003c/p\u003e\u003cp\u003eIt’s my least favorite command because there are so many elements to it. But it is the secret to drawing a proper donut chart, so I have a bit of time spent with it under my belt.\u003c/p\u003e\u003cp\u003eLet’s look at it.\u003c/p\u003e\u003cp\u003eLike with any other \u003ccode\u003epath\u003c/code\u003e command, lowercase implies relative coordinates. So, just as there is an \u003ccode\u003eA\u003c/code\u003e command, there’s also an \u003ccode\u003ea\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eSo, an arc path looks like this:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst path = `M${start.x} ${start.y} A${radius.x} ${radius.y} ${xAxisRotation} ${largeArcFlag} ${sweepFlag} ${end.x} ${end.y}`;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd what the heck are \u003ccode\u003exAxisRotation\u003c/code\u003e, \u003ccode\u003elargeArcFlag\u003c/code\u003e, and \u003ccode\u003esweepFlag\u003c/code\u003e supposed to be? In short:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003exAxisRotation\u003c/code\u003e is the rotation of the underlying ellipse’s axes in degrees.\u003c/li\u003e\u003cli\u003e\u003ccode\u003elargeArcFlag\u003c/code\u003e is a boolean value that determines if the arc is greater than 180°.\u003c/li\u003e\u003cli\u003e\u003ccode\u003esweepFlag\u003c/code\u003e is also a boolean and determines the arc direction, so does it go clockwise or counter-clockwise?\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo better understand these concepts, I created this visual.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"GgJwvZR\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [SVG Path Arc Command Visuals [forked]](https://codepen.io/smashingmag/pen/GgJwvZR) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/GgJwvZR\"\u003eSVG Path Arc Command Visuals [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"radius-size\"\u003eRadius Size\u003c/h3\u003e\u003cp\u003eYou’ll notice in that CodePen that there are ellipses drawn for each command. In the top row, they are overlapping, while in the bottom row, they are stacked up. Both rows actually use the same \u003ccode\u003eradius.x\u003c/code\u003e and \u003ccode\u003eradius.y\u003c/code\u003e values in their arc definitions, while the distance between the start and end points increases for the second row.\u003c/p\u003e\u003cp\u003eThe reason why the stacking happens is that the radius size is only taken into consideration if the start and end points fit within the specified ellipse. That behavior surprised me, and thus, I dug into the specs and found the following information on how the arc works:\u003c/p\u003e\u003cblockquote\u003e“Arbitrary numerical values are permitted for all elliptical arc parameters (other than the boolean flags), but user agents must make the following adjustments for invalid values when rendering curves or calculating their geometry:\u003cp\u003eIf the endpoint (\u003cstrong\u003ex\u003c/strong\u003e, \u003cstrong\u003ey\u003c/strong\u003e) of the segment is identical to the current point (e.g., the endpoint of the previous segment), then this is equivalent to omitting the elliptical arc segment entirely.\u003c/p\u003e\u003cp\u003eIf either \u003cstrong\u003erx\u003c/strong\u003e or \u003cstrong\u003ery\u003c/strong\u003e is 0, then this arc is treated as a straight line segment (a “lineto”) joining the endpoints.\u003c/p\u003e\u003cp\u003eIf either \u003cstrong\u003erx\u003c/strong\u003e or \u003cstrong\u003ery\u003c/strong\u003e have negative signs, these are dropped; the absolute value is used instead.\u003c/p\u003e\u003cp\u003eIf \u003cstrong\u003erx\u003c/strong\u003e, \u003cstrong\u003ery\u003c/strong\u003e and \u003cstrong\u003ex-axis-rotation\u003c/strong\u003e are such that there is no solution (basically, the ellipse is not big enough to reach from the current point to the new endpoint) then the ellipse is scaled up uniformly until there is exactly one solution (until the ellipse is just big enough).\u003c/p\u003e\u003cp\u003eSee the appendix section \u003ca href=\"https://svgwg.org/svg2-draft/implnote.html#ArcCorrectionOutOfRangeRadii\"\u003eCorrection of out-of-range radii\u003c/a\u003e for the mathematical formula for this scaling operation.”\u003c/p\u003e\u003cp\u003e— \u003ca href=\"https://svgwg.org/svg2-draft/paths.html#ArcOutOfRangeParameters\"\u003e9.5.1 Out-of-range elliptical arc parameters\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eSo, really, that stacking is just nice and graceful error-handling and not how it was intended. Because the top row is how arcs should be used.\u003c/p\u003e\u003cblockquote\u003eWhen plugging in logical values, the underlying ellipses and the two points give us four drawing options for how we could connect the two points along an elliptical path. That’s what the boolean values are for.\u003c/blockquote\u003e\u003ch3 id=\"xaxisrotation\"\u003e\u003ccode\u003exAxisRotation\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eBefore we get to the booleans, the crosshatch pattern shows the \u003ccode\u003exAxisrotation\u003c/code\u003e. The ellipse is rotated around its center, with the degree value being in relation to the x-direction of the SVG.\u003c/p\u003e\u003cp\u003eSo, if you work with a circular ellipse, the rotation won’t have any effect on the arc (except if you use it in a pattern like I did there).\u003c/p\u003e\u003ch3 id=\"sweep-flag\"\u003eSweep Flag\u003c/h3\u003e\u003cp\u003eNotice the little arrow marker to show the arc drawing direction. If the value is 0, the arc is drawn clockwise. If the value is 1, the arc is drawn counterclockwise.\u003c/p\u003e\u003ch3 id=\"large-arc-flag\"\u003eLarge Arc Flag\u003c/h3\u003e\u003cp\u003eThe large Arc Flag tells the path if you want the smaller or the larger arc from the ellipse. If we have a scaled case, we get exactly 180° of our ellipse.\u003c/p\u003e\u003cblockquote\u003eArcs usually require a lot more annoying circular number-wrangling than I am happy doing (As soon as radians come to play, I tend to spiral into rabbit holes where I have to relearn too much math I happily forget.)\u003cp\u003eThey are more reliant on values being related to each other for the outcome to be as expected and there’s just so much information going in.\u003c/p\u003e\u003cp\u003eBut — and that’s a bit but — arcs are wonderfully powerful!\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eAlright, that was a lot! However, I do hope that you are starting to see how \u003ccode\u003epath\u003c/code\u003e commands can be helpful. I find them extremely useful to illustrate data.\u003c/p\u003e\u003cp\u003eOnce you know how easy it is to set up stuff like grids, boxes, and curves, it doesn’t take many more steps to create visualizations that are a bit more unique than what the standard data visualization libraries offer.\u003c/p\u003e\u003cblockquote\u003eWith everything you’ve learned in this series of articles, you’re basically fully equipped to render all different types of charts — or other types of visualizations.\u003c/blockquote\u003e\u003cp\u003eLike, how about visualizing the underlying cubic-bezier of something like \u003ccode\u003etransition-timing-function: ease;\u003c/code\u003e in CSS? That’s the thing I made to figure out how I could turn those transition-timing-functions into something an \u003ccode\u003e\u0026lt;animate\u0026gt;\u003c/code\u003e tag understands.\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"gbpQxgp\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [CSS Cubic Beziers as SVG Animations \u0026amp; CSS Transition Comparisons [forked]](https://codepen.io/smashingmag/pen/gbpQxgp) by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/gbpQxgp\"\u003eCSS Cubic Beziers as SVG Animations \u0026amp; CSS Transition Comparisons [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/halfapx\"\u003eMyriam\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSVG is fun and quirky, and the \u003ccode\u003epath\u003c/code\u003e element may be the holder of the most overwhelming string of symbols you’ve ever laid eyes on during code inspection. However, if you take the time to understand the underlying logic, it all transforms into one beautifully simple and extremely powerful syntax.\u003c/p\u003e\u003cp\u003eI hope with this pair of \u003ccode\u003epath\u003c/code\u003e decoding articles, I managed to expose the underlying mechanics of how path plots work. If you want even more resources that don’t require you to dive through specs, try the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\"\u003eMDN tutorial about paths\u003c/a\u003e. It’s short and compact, and was the main resource for me to learn all of this.\u003c/p\u003e\u003cp\u003eHowever, since I wrote my deep dive on the topic, I stumbled into the beautiful \u003ca href=\"https://svg-tutorial.com\"\u003esvg-tutorial.com\u003c/a\u003e, which does a wonderful job visualizing SVG coding as a whole but mostly features my favorite arc visual of them all in the \u003ca href=\"https://svg-tutorial.com/editor/arc\"\u003eArc Editor\u003c/a\u003e. And if you have a path that you’d like properly decoded without having to store all of the information in these two articles, there’s \u003ca href=\"https://svg-path-visualizer.netlify.app/\"\u003eSVG Path Visualizer\u003c/a\u003e, which breaks down path information super nicely.\u003c/p\u003e\u003cp\u003eAnd now: Go forth and have fun playing in the matrix.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": "2025-06-23T10:00:00Z",
  "modifiedTime": "2025-06-23T10:00:00Z"
}
