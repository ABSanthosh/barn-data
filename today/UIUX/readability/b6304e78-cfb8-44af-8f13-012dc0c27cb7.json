{
  "id": "b6304e78-cfb8-44af-8f13-012dc0c27cb7",
  "title": "Component Spec: the design system component delivery",
  "link": "https://uxdesign.cc/component-spec-the-design-system-component-delivery-5f88db6ccf7e?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Matan Rosen",
  "published": "Sun, 13 Oct 2024 19:33:42 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "ux",
    "ui",
    "design-systems",
    "product-management",
    "design"
  ],
  "byline": "Matan Rosen",
  "length": 14963,
  "excerpt": "Over the years, I’ve worked closely with developers, product managers, quality assurance engineers, and other development contributors. All of these have helped me learn a lot about a product’s life…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Once called design handoff or design reviews, delivering information and context for development is crucial for bringing the design intentions to life. When looking at scale, for a design system to function without faults, Component Specs should cover it all.Over the years, I’ve worked closely with developers, product managers, quality assurance engineers, and other development contributors. All of these have helped me learn a lot about a product’s life cycle. By now, there is a paradigm on how a product’s development cycle should look like:As Pelin Kenez, Co-Founder \u0026 CEO at Zeplin, puts it:It’s where the “infinite possibilities” of Design Creation met the “bounded realities” of bringing the design to life.This development cycle presents challenges in all its steps. In this article, I’ll talk about how the design delivery step, specifically in an area of what I call Component Spec, bundles up all the necessary information to craft a cohesive and comprehensive component set to be used as part of a product’s design system.Common groundsOften, beginner designers who are not yet familiar with the “laws of physics” in web and native app development tend to create product designs that showcase a flow. Their deliverables typically consist of a series of screens, ideally connected by a flow from start to finish.A typical flow, XM CyberMost of these designers don’t consider how their designs will be implemented, which is crucial. In my view, this awareness distinguishes junior UX/UI designers from mid-level ones. Eventually, not all of the designer’s wants and dreams can be realized in development — not just because they may be impractical with existing tools, but also because they often overlook edge cases and responsiveness. This can lead to reliability issues and unexpected behavior when the developed pages or components face real-life scenarios, interact with other elements, or encounter more content than they were designed to handle.Creating designs that make sense inside the structure and limitations of web and native app development differentiates a junior UX/UI designer from a mid-level designer.Reliability and unexpected behaviorHave you ever come across a website, SaaS platform, or product with obvious visual bugs? I certainly have, often remarking, “What poor development!” However, the issue usually isn’t with the developers’ decisions; instead, I believe it stems from a lack of clear design and product definition.An example of a bug in the UI. The containers aren’t reacting correctly to window size changes.Such issues should not exist; they create roadblocks in the user experience, hindering the product’s ability to deliver value and increasing costs in terms of man-hours for the development team. Developers must identify the problem, correct the relevant code, test it, and then merge it into production. A significant amount of time is wasted on fixing these issues, particularly when they occur in reusable components. Proper design definition could have prevented this. When implemented at scale within a design system, these problems can be minimized, helping to avoid poor experiences and unexpected behavior across the product.Delivery of informationIn a typical design system, you’d find instructions for designers on when and how to use the available components in their designs, often providing edge cases, different variants, and copy guidelines. Designers, as consumers of the design system that need to use it, will face a set of rules and limitations that will help them while building designs, but that is just on the surface level. What about developers? They are also a type of design system consumer. They will take the design instructions and build the pages and screens with those components. Can the design document provide sufficient documentation when creating a new component?Consider one of the most basic, if not the first, components any designer will create in their design system journey — The Button.Some of the ingredients that makes up a button componentWe must decide on a few characteristics of that button before using it as a shared component within our design system. Name a few: size, color, icon, radius, typography, padding, gap. That is even before we discussed different size variants or the actual button usage!In the past, designers usually provided a static image that reflected the layout and size of the component. You can usually still find this kind of detailed image on beginner designer groups on social networks. Back then, that may have been fine, but today, it is far from a complete list of instructions for the development of a UI component.A basic and superficial way of defining the layout of a buttonThe example above contains the bare minimum needed. When a developer approaches the development, in this case, a button, they must define many other parameters. If the designer hasn’t defined them, where should the developer get them from? I’m writing this article in the year 2024, and fortunately for our developer, Figma’s dev mode can come to our help!Like the confused IKEA man who can call the IKEA store for help, the developer can consult the dev mode properties panel to get (most of) the necessary instruction he so desperately needs.The IKEA man calling the storeCan’t Dev mode suffice?While Figma’s Dev mode provides much information about a component’s layout, position, style, and typography, it will do its best to show relevant information for a developer to follow. By that, I mean that Dev mode doesn’t have all the tools, measurements, and capabilities to display code effectively. Seasoned developers will use the properties as a guideline but will prefer to write the code differently.Undefined outcomesDesigners might want (or even need) a canvas when they are messing around, trying things out, brainstorming, discussing, showing variations to stakeholders etc.Erez Reznikov, Evolving beyond a canvas tool, SubstackAs Erez Reznikov points out, designers thrive with the freedom of working on a “canvas” rather than being bound by the “gravity” of the DOM (Document Object Model) while exploring creative ideas.Moreover, most UI design tools, by their nature, allow designers to create screens in a way that may lead them to overlook the need for their designs to function within the ‘laws of physics’ that govern web and native platforms. That is just how these tools work.From Erez’s article about Evolving beyond a canvas toolDesigners may sometimes overlook the fact that their designs need to function within the ‘laws of physics’ that govern web and native platforms.This fact may lead to poorly defined components, ending up in unpredictable edge-case behavior. For example, a typical button might look great in one state but lack the necessary adaptability when dynamic content is introduced. For instance, what happens when the parent container narrows, and the button no longer has enough space on the sides? Should it:Line break but keep the previous height?Adjust the height for more lines?Extended the text outside the borders?What happens when there’s no space? Another unexpected behaviour of a UI componentTo resolve this unexpected behavior, I recommend implementing a rule that truncates the button’s text with an ellipsis and prompts a tooltip with the complete text on hover.Use ellipsis and a tooltip if neededHowever, these definitions are not shown in Figma unless specifically defined by the designer and written explicitly. These definitions might be overlooked because the component was built on a canvas, where the constrains of layout may not be enforced.When inspecting the button, Figma will provide information about its layout. Considering the padding and height properties, Figma tells us that the padding is padding: 0px 24px which means that it has 0px on top of a button and 24px to the left and right. The more robust way for this component to be written is with the padding-inline property since that component's height and the inner elements' position is already defined.The properties and values of a layout that Figma providespadding-inline is a CSS logical shorthand property that combines the padding-inline-start and padding-inline-end properties into a single declaration, creating space around an element’s content in the inline (left and right) direction. — Joel Olawanle on css-tricks.comIn addition to the above, designers may not utilize the full range of properties and parameters that real development offers. For example, Figma utilizes Auto-layout as a Flexbox Layout, allowing child elements to be fixed with px or set to fill or hug. Countering that, designers are not usually exposed to actual development, which limits their knowledge about other options; the CSS Grid Layout allows users to input px, percentages, or fr units, allowing for more control over the outcome of dynamic content.Although they look the same, thy allow diffrent outcomes for dynamic content.Other maintainable CSS units are all of the relative units: em, ex, rem, vw, vh, vmin, vmax, %, and ch which I’ve written about here:The above are examples of writing better code, within Figma and outside, adding to the fact that developers need better instructions for the intended design, specifically when creating a reusable component for the design system.Creating specifications as a teamGoing back to the confused IKEA man, the instruction manual sometimes tells you to team up with a friend and build the SMÅSTAD wardrobe together. Two can be better than one; in our case, a designer teaming up with a developer to share knowledge will result in better design system components.The IKEA man gets a helpping hand.Designers should learn from developers about their practices and understand how code works so they can design more robust components. When creating a shared language, the best way to communicate a design system component's definitions is through a specification document. While working at XM Cyber as a sole designer and later as the head of UX and design, leading a team of designers, I crafted a template for a document I like to call Component Spec.An example of a Component Spec for the basic button componentWhy use Component Spec?TL;DR: If you’re starting with this section, here’s a quick recap: The Component Spec gathers all the essential details needed to create a complete and consistent component set for a product’s design system. This includes variants, edge cases, and limitations. By defining the component comprehensively, we minimize the risk of it malfunctioning or acting unpredictably with dynamic content.What does Component Spec include?Definition and showcaseThis section typically displays various states and variants of the component, accompanied by a brief explanation of its usage. The goal is to provide developers with the necessary context to understand how the component is intended to be used and to encourage them to suggest relevant adjustments if they have any input.Intro and defenitions of a Call to action button, XM CyberAnatomy, Rules \u0026 limitations, and animationAnatomy — Starting with the most complex variation, the designer should detail the component's different parts and inner components (if any); this will be used as a reference in the limitations, edge cases, and tokens sections.Rules \u0026 limitations—Components are expected to function within certain parameters, as outlined earlier. This section details those boundaries, including handling edge cases, empty states, errors, and text constraints. It also covers alignment, behavior within groups or arrays, and any other functional rules developers must enforce to ensure the component operates consistently and reliably across all scenarios.Animation — Define as needed. Aviad Shahar wrote a guide for creating a timeline that makes senseExplicitly showing how to set boundaries for the buttonKeyboard accessibilityThis section should outline the component’s keyboard interactions, addressing both accessibility requirements and shortcuts for power users. It should specify the navigation order for elements when using the Tab key or arrow keys, ensuring a logical and intuitive flow for keyboard users.Tokens and variantsThis section provides a detailed breakdown of the component’s measurements and values, ideally presented as design tokens. Begin with the default variant, documenting every property used. For subsequent variants, only note the changes or new properties, emphasizing the differences between variants while keeping the section concise. This approach ensures clarity while avoiding unnecessary repetition in what is typically a more comprehensive part of the document.All values are design tokensThis example is full of design tokens from XMDS2, XM Cyber’s design system. which you can learn more about below:The example below highlights the differences in CSS properties between Figma’s default layout and my suggested arrangement. Organizing the layout this way improves readability. As noted earlier, some properties may appear differently than how a developer would implement them: padding: 0px var(-a_commonPadding) vs padding-inline: var(-a_commonPadding) . When concerning text length, character length with the fr unit.Comparing Figma with Component SpecStorybookFinally, the component should be thoroughly documented within your front-end documentation system, with Storybook being the most widely used tool today. It’s recommended to create an interactive showcase of the component’s key variants, allowing for easy exploration and testing of its functionality.Showcasing it in StorybookWhat have we learned?In this article, we’ve learned how important it is for us to have a solid Component Spec in our design system, as it acts as a crucial link between our design and development teams. It highlights the need for us to think about how our designs will work in real-world situations, especially regarding dynamic content. By working closely with developers, we can create clear documentation that explains how components should function while keeping in mind any technical constraints. This teamwork helps ensure that our components are not just visually appealing but also flexible and reliable in various user interactions, ultimately improving the user experience and reducing development headaches.Main takeawaysManaging unexpected behaviors: A well-defined Component Spec is crucial for minimizing unexpected behaviors in components and ensuring they operate reliably with dynamic content while addressing variants, edge cases, and limitations.Bridging design and development: Effective collaboration between designers and developers is essential, as designers must understand technical limitations while developers rely on clear specifications to build components.Defining component parameters: Designers need to outline all relevant parameters — like size, color, and behavior — to eliminate ambiguity and guide developers in implementation.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*5-8JiNhXVuxzJ3aj5fdoKA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"8299\"\u003eOnce called design handoff or design reviews, delivering information and context for development is crucial for bringing the design intentions to life. When looking at scale, for a design system to function without faults, Component Specs should cover it all.\u003c/h2\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@mr.matan.rosen?source=post_page-----5f88db6ccf7e--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Matan Rosen\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*kExtJ3iDd3Ihs-hArNlg2g.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page-----5f88db6ccf7e--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d2e9\"\u003e\u003cspan\u003eO\u003c/span\u003ever the years, I’ve worked closely with developers, product managers, quality assurance engineers, and other development contributors. All of these have helped me learn a lot about a product’s life cycle. By now, there is a paradigm on how a product’s development cycle should look like:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"2dda\"\u003eAs \u003ca href=\"https://www.linkedin.com/in/pelinkenez/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePelin Kenez\u003c/a\u003e, Co-Founder \u0026amp; CEO at Zeplin, \u003ca href=\"https://blog.zeplin.io/design-delivery-isnt-new-it-s-just-more-important-than-ever-9f6bc9cf6445/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eputs it\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"ff81\"\u003eIt’s where the “infinite possibilities” of Design Creation met the “bounded realities” of bringing the design to life.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"7042\"\u003eThis development cycle presents challenges in all its steps. In this article, I’ll talk about how the design delivery step, specifically in an area of what I call Component Spec, bundles up all the necessary information to craft a cohesive and comprehensive component set to be used as part of a product’s design system.\u003c/p\u003e\u003ch2 id=\"2501\"\u003eCommon grounds\u003c/h2\u003e\u003cp id=\"1c2b\"\u003eOften, beginner designers who are not yet familiar with the “laws of physics” in web and native app development tend to create product designs that showcase a flow. Their deliverables typically consist of a series of screens, ideally connected by a flow from start to finish.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA typical flow, XM Cyber\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b492\"\u003eMost of these designers don’t consider how their designs will be implemented, which is crucial. In my view, this awareness distinguishes junior UX/UI designers from mid-level ones. Eventually, not all of the designer’s wants and dreams can be realized in development — not just because they may be impractical with existing tools, but also because they often overlook edge cases and responsiveness. This can lead to reliability issues and unexpected behavior when the developed pages or components face real-life scenarios, interact with other elements, or encounter more content than they were designed to handle.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"9ac2\"\u003e\u003cstrong\u003eCreating designs that make sense inside the structure and limitations of web and native app development differentiates a junior UX/UI designer from a mid-level designer.\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"16e1\"\u003eReliability and unexpected behavior\u003c/h2\u003e\u003cp id=\"3ec4\"\u003eHave you ever come across a website, SaaS platform, or product with obvious visual bugs? I certainly have, often remarking, “What poor development!” However, the issue usually isn’t with the developers’ decisions; instead, I believe it stems from a lack of clear design and product definition.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAn example of a bug in the UI. The containers aren’t reacting correctly to window size changes.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"710b\"\u003eSuch issues should not exist; they create roadblocks in the user experience, hindering the product’s ability to deliver value and increasing costs in terms of man-hours for the development team. Developers must identify the problem, correct the relevant code, test it, and then merge it into production. A significant amount of time is wasted on fixing these issues, particularly when they occur in reusable components. Proper design definition could have prevented this. When implemented at scale within a design system, these problems can be minimized, helping to avoid poor experiences and unexpected behavior across the product.\u003c/p\u003e\u003ch2 id=\"903c\"\u003eDelivery of information\u003c/h2\u003e\u003cp id=\"cf37\"\u003eIn a typical design system, you’d find instructions for designers on when and how to use the available components in their designs, often providing edge cases, different variants, and copy guidelines. Designers, as consumers of the design system that need to use it, will face a set of rules and limitations that will help them while building designs, but that is just on the surface level. What about developers? They are also a type of design system consumer. They will take the design instructions and build the pages and screens with those components. Can the design document provide sufficient documentation when creating a new component?\u003c/p\u003e\u003cp id=\"6d43\"\u003eConsider one of the most basic, if not the first, components any designer will create in their design system journey — The Button.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSome of the ingredients that makes up a button component\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b522\"\u003eWe must decide on a few characteristics of that button before using it as a shared component within our design system. Name a few: size, color, icon, radius, typography, padding, gap. That is even before we discussed different size variants or the actual button usage!\u003c/p\u003e\u003cp id=\"ee8a\"\u003eIn the past, designers usually provided a static image that reflected the layout and size of the component. You can usually still find this kind of detailed image on beginner designer groups on social networks. Back then, that may have been fine, but today, it is far from a complete list of instructions for the development of a UI component.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA basic and superficial way of defining the layout of a button\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"7373\"\u003eThe example above contains the bare minimum needed. When a developer approaches the development, in this case, a button, they must define many other parameters. If the designer hasn’t defined them, where should the developer get them from? I’m writing this article in the year 2024, and fortunately for our developer, Figma’s dev mode can come to our help!\u003c/p\u003e\u003cp id=\"6b1f\"\u003eLike the confused IKEA man who can call the IKEA store for help, the developer can consult the dev mode properties panel to get (most of) the necessary instruction he so desperately needs.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe IKEA man calling the store\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"de53\"\u003eCan’t Dev mode suffice?\u003c/h2\u003e\u003cp id=\"6581\"\u003eWhile Figma’s Dev mode provides much information about a component’s layout, position, style, and typography, it will do its best to show relevant information for a developer to follow. By that, I mean that Dev mode doesn’t have all the tools, measurements, and capabilities to display code effectively. Seasoned developers will use the properties as a guideline but will prefer to write the code differently.\u003c/p\u003e\u003ch2 id=\"f07d\"\u003eUndefined outcomes\u003c/h2\u003e\u003cblockquote\u003e\u003cp id=\"bb71\"\u003eDesigners might want (or even need) a canvas when they are messing around, trying things out, brainstorming, discussing, showing variations to stakeholders etc.\u003cbr/\u003e\u003ca href=\"https://open.substack.com/pub/erezreznikov/p/evolving-beyond-a-canvas-tool?r=ed6fd\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eErez Reznikov, Evolving beyond a canvas tool, Substack\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"d80b\"\u003eAs \u003cspan\u003e\u003cspan aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/u/1a7046474bbe?source=post_page-----5f88db6ccf7e--------------------------------\" rel=\"noopener\" target=\"_blank\"\u003eErez Reznikov\u003c/a\u003e\u003c/span\u003e\u003c/span\u003e points out, designers thrive with the freedom of working on a “canvas” rather than being bound by the “gravity” of the DOM (Document Object Model) while exploring creative ideas.\u003c/p\u003e\u003cp id=\"b8d5\"\u003eMoreover, most UI design tools, by their nature, allow designers to create screens in a way that may lead them to overlook the need for their designs to function within the ‘laws of physics’ that govern web and native platforms. That is just how these tools work.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eFrom Erez’s \u003ca href=\"https://open.substack.com/pub/erezreznikov/p/evolving-beyond-a-canvas-tool?r=ed6fd\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003earticle\u003c/a\u003e about Evolving beyond a canvas tool\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"debd\"\u003eDesigners may sometimes overlook the fact that their designs need to function within the ‘laws of physics’ that govern web and native platforms.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"e2ae\"\u003eThis fact may lead to poorly defined components, ending up in unpredictable edge-case behavior. For example, a typical button might look great in one state but lack the necessary adaptability when dynamic content is introduced. For instance, what happens when the parent container narrows, and the button no longer has enough space on the sides? Should it:\u003c/p\u003e\u003col\u003e\u003cli id=\"a5e0\"\u003eLine break but keep the previous height?\u003c/li\u003e\u003cli id=\"6a26\"\u003eAdjust the height for more lines?\u003c/li\u003e\u003cli id=\"8af9\"\u003eExtended the text outside the borders?\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003cfigcaption\u003eWhat happens when there’s no space? Another unexpected behaviour of a UI component\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"7228\"\u003eTo resolve this unexpected behavior, I recommend implementing a rule that truncates the button’s text with an ellipsis and prompts a tooltip with the complete text on hover.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eUse ellipsis and a tooltip if needed\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"917e\"\u003eHowever, these definitions are not shown in Figma unless specifically defined by the designer and written explicitly. These definitions might be overlooked because the component was built on a canvas, where the constrains of layout may not be enforced.\u003c/p\u003e\u003cp id=\"409d\"\u003eWhen inspecting the button, Figma will provide information about its layout. Considering the padding and height properties, Figma tells us that the padding is \u003ccode\u003epadding: 0px 24px\u003c/code\u003e which means that it has 0px on top of a button and 24px to the left and right. The more robust way for this component to be written is with the \u003ccode\u003epadding-inline\u003c/code\u003e property since that component\u0026#39;s height and the inner elements\u0026#39; position is already defined.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe properties and values of a layout that Figma provides\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"2c08\"\u003e\u003ccode\u003e\u003cstrong\u003epadding-inline\u003c/strong\u003e\u003c/code\u003e is a CSS logical shorthand property that combines the \u003ccode\u003epadding-inline-start\u003c/code\u003e and \u003ccode\u003epadding-inline-end\u003c/code\u003e properties into a single declaration, creating space around an element’s content in the \u003cstrong\u003einline\u003c/strong\u003e (left and right) direction.\u003cbr/\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/p/padding-inline/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e — Joel Olawanle on css-tricks.com\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"1f20\"\u003eIn addition to the above, designers may not utilize the full range of properties and parameters that real development offers. For example, Figma utilizes Auto-layout as a \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFlexbox Layout\u003c/a\u003e, allowing child elements to be fixed with \u003ccode\u003epx\u003c/code\u003e or set to fill or hug. Countering that, designers are not usually exposed to actual development, which limits their knowledge about other options; the \u003ca href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCSS Grid Layout\u003c/a\u003e allows users to input \u003ccode\u003epx\u003c/code\u003e, percentages, or \u003ccode\u003efr\u003c/code\u003e units, allowing for more control over the outcome of dynamic content.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eAlthough they look the same, thy allow diffrent outcomes for dynamic content.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"90e3\"\u003eOther maintainable CSS units are all of the relative units: \u003ccode\u003eem\u003c/code\u003e, \u003ccode\u003eex\u003c/code\u003e, \u003ccode\u003erem\u003c/code\u003e, \u003ccode\u003evw\u003c/code\u003e, \u003ccode\u003evh\u003c/code\u003e, \u003ccode\u003evmin\u003c/code\u003e, \u003ccode\u003evmax\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e, and \u003ccode\u003ech\u003c/code\u003e which I’ve written about here:\u003c/p\u003e\u003cp id=\"302a\"\u003eThe above are examples of writing better code, within Figma and outside, adding to the fact that developers need better instructions for the intended design, specifically when creating a reusable component for the design system.\u003c/p\u003e\u003ch2 id=\"b3b0\"\u003eCreating specifications as a team\u003c/h2\u003e\u003cp id=\"5f36\"\u003eGoing back to the confused IKEA man, the instruction manual sometimes tells you to team up with a friend and build the SMÅSTAD wardrobe together. Two can be better than one; in our case, a designer teaming up with a developer to share knowledge will result in better design system components.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe IKEA man gets a helpping hand.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"82bd\"\u003eDesigners should learn from developers about their practices and understand how code works so they can design more robust components. When creating a shared language, the best way to communicate a design system component\u0026#39;s definitions is through a specification document. While working at XM Cyber as a sole designer and later as the head of UX and design, leading a team of designers, I crafted a template for a document I like to call \u003cstrong\u003eComponent Spec\u003c/strong\u003e.\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cfigure\u003e\u003cpicture\u003e\u003csource srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 1100w, https://miro.medium.com/v2/resize:fit:4800/format:webp/1*K6pEC1_oRyiep0Pq8kRJQA.png 4800w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 100vw\" type=\"image/webp\"/\u003e\u003csource data-testid=\"og\" srcset=\"https://miro.medium.com/v2/resize:fit:640/1*K6pEC1_oRyiep0Pq8kRJQA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*K6pEC1_oRyiep0Pq8kRJQA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*K6pEC1_oRyiep0Pq8kRJQA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*K6pEC1_oRyiep0Pq8kRJQA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*K6pEC1_oRyiep0Pq8kRJQA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*K6pEC1_oRyiep0Pq8kRJQA.png 1100w, https://miro.medium.com/v2/resize:fit:4800/1*K6pEC1_oRyiep0Pq8kRJQA.png 4800w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 100vw\"/\u003e\u003c/picture\u003e\u003cfigcaption\u003eAn example of a Component Spec for the basic button component\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"1dcb\"\u003eWhy use Component Spec?\u003c/h2\u003e\u003cp id=\"d332\"\u003eTL;DR: If you’re starting with this section, here’s a quick recap: The Component Spec gathers all the essential details needed to create a complete and consistent component set for a product’s design system. This includes variants, edge cases, and limitations. By defining the component comprehensively, we minimize the risk of it malfunctioning or acting unpredictably with dynamic content.\u003c/p\u003e\u003ch2 id=\"fa6d\"\u003eWhat does Component Spec include?\u003c/h2\u003e\u003ch2 id=\"2a95\"\u003e\u003cstrong\u003eDefinition and showcase\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"6bdb\"\u003eThis section typically displays various states and variants of the component, accompanied by a brief explanation of its usage. The goal is to provide developers with the necessary context to understand how the component is intended to be used and to encourage them to suggest relevant adjustments if they have any input.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eIntro and defenitions of a Call to action button, XM Cyber\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"2240\"\u003e\u003cstrong\u003eAnatomy, Rules \u0026amp; limitations, and animation\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"4c73\"\u003e\u003cstrong\u003eAnatomy\u003c/strong\u003e — Starting with the most complex variation, the designer should detail the component\u0026#39;s different parts and inner components (if any); this will be used as a reference in the limitations, edge cases, and tokens sections.\u003cbr/\u003e\u003cstrong\u003eRules \u0026amp; limitations\u003c/strong\u003e—Components are expected to function within certain parameters, as outlined earlier. This section details those boundaries, including handling edge cases, empty states, errors, and text constraints. It also covers alignment, behavior within groups or arrays, and any other functional rules developers must enforce to ensure the component operates consistently and reliably across all scenarios.\u003cbr/\u003e\u003cstrong\u003eAnimation \u003c/strong\u003e— Define as needed. \u003ca href=\"https://medium.com/@aviadtend/motion-design-system-practical-guide-8c15599262fe\" rel=\"noopener\"\u003eAviad Shahar wrote a guide for creating a timeline that makes sense\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eExplicitly showing how to set boundaries for the button\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"32d7\"\u003e\u003cstrong\u003eKeyboard accessibility\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"3101\"\u003eThis section should outline the component’s keyboard interactions, addressing both accessibility requirements and shortcuts for power users. It should specify the navigation order for elements when using the Tab key or arrow keys, ensuring a logical and intuitive flow for keyboard users.\u003c/p\u003e\u003ch2 id=\"4a38\"\u003e\u003cstrong\u003eTokens and variants\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"cd90\"\u003eThis section provides a detailed breakdown of the component’s measurements and values, ideally presented as design tokens. Begin with the default variant, documenting every property used. For subsequent variants, only note the changes or new properties, emphasizing the differences between variants while keeping the section concise. This approach ensures clarity while avoiding unnecessary repetition in what is typically a more comprehensive part of the document.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAll values are design tokens\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"51db\"\u003eThis example is full of design tokens from XMDS2, XM Cyber’s design system. which you can learn more about below:\u003c/p\u003e\u003cp id=\"f62e\"\u003eThe example below highlights the differences in CSS properties between Figma’s default layout and my suggested arrangement. Organizing the layout this way improves readability. As noted earlier, some properties may appear differently than how a developer would implement them: \u003ccode\u003epadding: 0px var(-a_commonPadding)\u003c/code\u003e vs \u003ccode\u003epadding-inline: var(-a_commonPadding)\u003c/code\u003e . When concerning text length, character length with the \u003ccode\u003efr\u003c/code\u003e unit.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eComparing Figma with Component Spec\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"7e3c\"\u003e\u003cstrong\u003eStorybook\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"7141\"\u003eFinally, the component should be thoroughly documented within your front-end documentation system, with Storybook being the most widely used tool today. It’s recommended to create an interactive showcase of the component’s key variants, allowing for easy exploration and testing of its functionality.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowcasing it in Storybook\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"d5ef\"\u003eWhat have we learned?\u003c/h2\u003e\u003cp id=\"c028\"\u003eIn this article, we’ve learned how important it is for us to have a solid Component Spec in our design system, as it acts as a crucial link between our design and development teams. It highlights the need for us to think about how our designs will work in real-world situations, especially regarding dynamic content. By working closely with developers, we can create clear documentation that explains how components should function while keeping in mind any technical constraints. This teamwork helps ensure that our components are not just visually appealing but also flexible and reliable in various user interactions, ultimately improving the user experience and reducing development headaches.\u003c/p\u003e\u003ch2 id=\"de40\"\u003eMain takeaways\u003c/h2\u003e\u003col\u003e\u003cli id=\"7ddd\"\u003e\u003cstrong\u003eManaging unexpected behaviors\u003c/strong\u003e: A well-defined Component Spec is crucial for minimizing unexpected behaviors in components and ensuring they operate reliably with dynamic content while addressing variants, edge cases, and limitations.\u003c/li\u003e\u003cli id=\"8226\"\u003e\u003cstrong\u003eBridging design and development\u003c/strong\u003e: Effective collaboration between designers and developers is essential, as designers must understand technical limitations while developers rely on clear specifications to build components.\u003c/li\u003e\u003cli id=\"c67d\"\u003e\u003cstrong\u003eDefining component parameters\u003c/strong\u003e: Designers need to outline all relevant parameters — like size, color, and behavior — to eliminate ambiguity and guide developers in implementation.\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2024-10-13T19:33:42.05Z",
  "modifiedTime": null
}
