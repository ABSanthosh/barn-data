{
  "id": "c61c613a-0298-422d-a763-5508a1a4156e",
  "title": "Generating Unique Random Numbers In JavaScript Using Sets",
  "link": "https://smashingmagazine.com/2024/08/generating-unique-random-numbers-javascript-using-sets/",
  "description": "Want to create more randomized effects in your JavaScript code? The `Math.random()` method alone, with its limitations, won’t cut it for generating unique random numbers. Amejimaobari Ollornwi explains how to generate a series of unique random numbers using the `Set` object, how to use these random numbers as indexes for arrays, and explores some practical applications of randomization.",
  "author": "Amejimaobari Ollornwi",
  "published": "Mon, 26 Aug 2024 15:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 7415,
  "excerpt": "Want to create more randomized effects in your JavaScript code? The `Math.random()` method alone, with its limitations, won’t cut it for generating unique random numbers. Amejimaobari Ollornwi explains how to generate a series of unique random numbers using the `Set` object, how to use these random numbers as indexes for arrays, and explores some practical applications of randomization.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "6 min readJavaScript, Coding, TechniquesWant to create more randomized effects in your JavaScript code? The Math.random() method alone, with its limitations, won’t cut it for generating unique random numbers. Amejimaobari Ollornwi explains how to generate a series of unique random numbers using the Set object, how to use these random numbers as indexes for arrays, and explores some practical applications of randomization.JavaScript comes with a lot of built-in functions that allow you to carry out so many different operations. One of these built-in functions is the Math.random() method, which generates a random floating-point number that can then be manipulated into integers.However, if you wish to generate a series of unique random numbers and create more random effects in your code, you will need to come up with a custom solution for yourself because the Math.random() method on its own cannot do that for you.In this article, we’re going to be learning how to circumvent this issue and generate a series of unique random numbers using the Set object in JavaScript, which we can then use to create more randomized effects in our code.Note: This article assumes that you know how to generate random numbers in JavaScript, as well as how to work with sets and arrays.Generating a Unique Series of Random NumbersOne of the ways to generate a unique series of random numbers in JavaScript is by using Set objects. The reason why we’re making use of sets is because the elements of a set are unique. We can iteratively generate and insert random integers into sets until we get the number of integers we want.And since sets do not allow duplicate elements, they are going to serve as a filter to remove all of the duplicate numbers that are generated and inserted into them so that we get a set of unique integers.Here’s how we are going to approach the work:Create a Set object.Define how many random numbers to produce and what range of numbers to use.Generate each random number and immediately insert the numbers into the Set until the Set is filled with a certain number of them.The following is a quick example of how the code comes together:function generateRandomNumbers(count, min, max) { // 1: Create a `Set` object let uniqueNumbers = new Set(); while (uniqueNumbers.size \u003c count) { // 2: Generate each random number uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min); } // 3: Immediately insert them numbers into the Set... return Array.from(uniqueNumbers); } // ...set how many numbers to generate from a given range console.log(generateRandomNumbers(5, 5, 10)); What the code does is create a new Set object and then generate and add the random numbers to the set until our desired number of integers has been included in the set. The reason why we’re returning an array is because they are easier to work with.One thing to note, however, is that the number of integers you want to generate (represented by count in the code) should be less than the upper limit of your range plus one (represented by max + 1 in the code). Otherwise, the code will run forever. You can add an if statement to the code to ensure that this is always the case:function generateRandomNumbers(count, min, max) { // if statement checks that `count` is less than `max + 1` if (count \u003e max + 1) { return \"count cannot be greater than the upper limit of range\"; } else { let uniqueNumbers = new Set(); while (uniqueNumbers.size \u003c count) { uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min); } return Array.from(uniqueNumbers); } } console.log(generateRandomNumbers(5, 5, 10)); Using the Series of Unique Random Numbers as Array IndexesIt is one thing to generate a series of random numbers. It’s another thing to use them.Being able to use a series of random numbers with arrays unlocks so many possibilities: you can use them in shuffling playlists in a music app, randomly sampling data for analysis, or, as I did, shuffling the tiles in a memory game.Let’s take the code from the last example and work off of it to return random letters of the alphabet. First, we’ll construct an array of letters:const englishAlphabets = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]; // rest of code Then we map the letters in the range of numbers:const englishAlphabets = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]; // generateRandomNumbers() const randomAlphabets = randomIndexes.map((index) =\u003e englishAlphabets[index]); In the original code, the generateRandomNumbers() function is logged to the console. This time, we’ll construct a new variable that calls the function so it can be consumed by randomAlphabets:const englishAlphabets = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]; // generateRandomNumbers() const randomIndexes = generateRandomNumbers(5, 0, 25); const randomAlphabets = randomIndexes.map((index) =\u003e englishAlphabets[index]); Now we can log the output to the console like we did before to see the results:const englishAlphabets = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]; // generateRandomNumbers() const randomIndexes = generateRandomNumbers(5, 0, 25); const randomAlphabets = randomIndexes.map((index) =\u003e englishAlphabets[index]); console.log(randomAlphabets); And, when we put the generateRandomNumbers() function definition back in, we get the final code:const englishAlphabets = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ]; function generateRandomNumbers(count, min, max) { if (count \u003e max + 1) { return \"count cannot be greater than the upper limit of range\"; } else { let uniqueNumbers = new Set(); while (uniqueNumbers.size \u003c count) { uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min); } return Array.from(uniqueNumbers); } } const randomIndexes = generateRandomNumbers(5, 0, 25); const randomAlphabets = randomIndexes.map((index) =\u003e englishAlphabets[index]); console.log(randomAlphabets); So, in this example, we created a new array of alphabets by randomly selecting some letters in our englishAlphabets array.You can pass in a count argument of englishAlphabets.length to the generateRandomNumbers function if you desire to shuffle the elements in the englishAlphabets array instead. This is what I mean:generateRandomNumbers(englishAlphabets.length, 0, 25); Wrapping UpIn this article, we’ve discussed how to create randomization in JavaScript by covering how to generate a series of unique random numbers, how to use these random numbers as indexes for arrays, and also some practical applications of randomization.The best way to learn anything in software development is by consuming content and reinforcing whatever knowledge you’ve gotten from that content by practicing. So, don’t stop here. Run the examples in this tutorial (if you haven’t done so), play around with them, come up with your own unique solutions, and also don’t forget to share your good work. Ciao! (yk)",
  "image": "https://files.smashing.media/articles/generating-unique-random-numbers-javascript-using-sets/generating-unique-random-numbers-javascript-using-sets.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e6 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/javascript\"\u003eJavaScript\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/techniques\"\u003eTechniques\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eWant to create more randomized effects in your JavaScript code? The \u003ccode\u003eMath.random()\u003c/code\u003e method alone, with its limitations, won’t cut it for generating unique random numbers. Amejimaobari Ollornwi explains how to generate a series of unique random numbers using the \u003ccode\u003eSet\u003c/code\u003e object, how to use these random numbers as indexes for arrays, and explores some practical applications of randomization.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eJavaScript comes with a lot of built-in functions that allow you to carry out so many different operations. One of these built-in functions is the \u003ccode\u003eMath.random()\u003c/code\u003e method, which generates a random floating-point number that can then be manipulated into integers.\u003c/p\u003e\u003cp\u003eHowever, if you wish to generate a series of unique random numbers and create more random effects in your code, you will need to come up with a custom solution for yourself because the \u003ccode\u003eMath.random()\u003c/code\u003e method on its own cannot do that for you.\u003c/p\u003e\u003cp\u003eIn this article, we’re going to be learning how to circumvent this issue and generate a series of unique random numbers using the \u003ccode\u003eSet\u003c/code\u003e object in JavaScript, which we can then use to create more randomized effects in our code.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eThis article assumes that you know how to generate random numbers in JavaScript, as well as how to work with sets and arrays.\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"generating-a-unique-series-of-random-numbers\"\u003eGenerating a Unique Series of Random Numbers\u003c/h2\u003e\u003cp\u003eOne of the ways to generate a unique series of random numbers in JavaScript is by using \u003ccode\u003eSet\u003c/code\u003e objects. The reason why we’re making use of sets is because the elements of a set are unique. We can iteratively generate and insert random integers into sets until we get the number of integers we want.\u003c/p\u003e\u003cp\u003eAnd since sets do not allow duplicate elements, they are going to serve as a filter to remove all of the duplicate numbers that are generated and inserted into them so that we get a set of unique integers.\u003c/p\u003e\u003cp\u003eHere’s how we are going to approach the work:\u003c/p\u003e\u003col\u003e\u003cli\u003eCreate a \u003ccode\u003eSet\u003c/code\u003e object.\u003c/li\u003e\u003cli\u003eDefine how many random numbers to produce and what range of numbers to use.\u003c/li\u003e\u003cli\u003eGenerate each random number and immediately insert the numbers into the \u003ccode\u003eSet\u003c/code\u003e until the \u003ccode\u003eSet\u003c/code\u003e is filled with a certain number of them.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe following is a quick example of how the code comes together:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efunction generateRandomNumbers(count, min, max) {\n  // 1: Create a `Set` object\n  let uniqueNumbers = new Set();\n  while (uniqueNumbers.size \u0026lt; count) {\n    // 2: Generate each random number\n    uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n  }\n  // 3: Immediately insert them numbers into the Set...\n  return Array.from(uniqueNumbers);\n}\n// ...set how many numbers to generate from a given range\nconsole.log(generateRandomNumbers(5, 5, 10));\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat the code does is create a new \u003ccode\u003eSet\u003c/code\u003e object and then generate and add the random numbers to the set until our desired number of integers has been included in the set. The reason why we’re returning an array is because they are easier to work with.\u003c/p\u003e\u003cp\u003eOne thing to note, however, is that the number of integers you want to generate (represented by \u003ccode\u003ecount\u003c/code\u003e in the code) should be less than the upper limit of your range plus one (represented by \u003ccode\u003emax + 1\u003c/code\u003e in the code). Otherwise, the code will run forever. You can add an \u003ccode\u003eif statement\u003c/code\u003e to the code to ensure that this is always the case:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efunction generateRandomNumbers(count, min, max) {\n  // if statement checks that `count` is less than `max + 1`\n  if (count \u0026gt; max + 1) {\n    return \u0026#34;count cannot be greater than the upper limit of range\u0026#34;;\n  } else {\n    let uniqueNumbers = new Set();\n    while (uniqueNumbers.size \u0026lt; count) {\n      uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n    }\n    return Array.from(uniqueNumbers);\n  }\n}\nconsole.log(generateRandomNumbers(5, 5, 10));\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"using-the-series-of-unique-random-numbers-as-array-indexes\"\u003eUsing the Series of Unique Random Numbers as Array Indexes\u003c/h2\u003e\u003cp\u003eIt is one thing to generate a series of random numbers. It’s another thing to use them.\u003c/p\u003e\u003cp\u003eBeing able to use a series of random numbers with arrays unlocks so many possibilities: you can use them in shuffling playlists in a music app, randomly sampling data for analysis, or, as I did, \u003ca href=\"https://github.com/jimavictor/remoji\"\u003eshuffling the tiles in a memory game\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLet’s take the code from the last example and work off of it to return random letters of the alphabet. First, we’ll construct an array of letters:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst englishAlphabets = [\n  \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \n  \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;\n];\n\n// rest of code\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we \u003ccode\u003emap\u003c/code\u003e the letters in the range of numbers:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst englishAlphabets = [\n  \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \n  \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;\n];\n\n// generateRandomNumbers()\n\nconst randomAlphabets = randomIndexes.map((index) =\u0026gt; englishAlphabets[index]);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the original code, the \u003ccode\u003egenerateRandomNumbers()\u003c/code\u003e function is logged to the console. This time, we’ll construct a new variable that calls the function so it can be consumed by \u003ccode\u003erandomAlphabets\u003c/code\u003e:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst englishAlphabets = [\n  \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \n  \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;\n];\n\n// generateRandomNumbers()\n\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =\u0026gt; englishAlphabets[index]);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we can log the output to the console like we did before to see the results:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst englishAlphabets = [\n  \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \n  \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;\n];\n\n// generateRandomNumbers()\n\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =\u0026gt; englishAlphabets[index]);\nconsole.log(randomAlphabets);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd, when we put the \u003ccode\u003egenerateRandomNumbers\u003c/code\u003e\u003ccode\u003e()\u003c/code\u003e function definition back in, we get the final code:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst englishAlphabets = [\n  \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \n  \u0026#39;N\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;P\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;Z\u0026#39;\n];\nfunction generateRandomNumbers(count, min, max) {\n  if (count \u0026gt; max + 1) {\n    return \u0026#34;count cannot be greater than the upper limit of range\u0026#34;;\n  } else {\n    let uniqueNumbers = new Set();\n    while (uniqueNumbers.size \u0026lt; count) {\n      uniqueNumbers.add(Math.floor(Math.random() * (max - min + 1)) + min);\n    }\n    return Array.from(uniqueNumbers);\n  }\n}\nconst randomIndexes = generateRandomNumbers(5, 0, 25);\nconst randomAlphabets = randomIndexes.map((index) =\u0026gt; englishAlphabets[index]);\nconsole.log(randomAlphabets);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo, in this example, we created a new array of alphabets by randomly selecting some letters in our \u003ccode\u003eenglishAlphabets\u003c/code\u003e array.\u003c/p\u003e\u003cp\u003eYou can pass in a count argument of \u003ccode\u003eenglishAlphabets.length\u003c/code\u003e to the \u003ccode\u003egenerateRandomNumbers\u003c/code\u003e function if you desire to shuffle the elements in the \u003ccode\u003eenglishAlphabets\u003c/code\u003e array instead. This is what I mean:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003egenerateRandomNumbers(englishAlphabets.length, 0, 25);\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\u003cp\u003eIn this article, we’ve discussed how to create randomization in JavaScript by covering how to generate a series of unique random numbers, how to use these random numbers as indexes for arrays, and also some practical applications of randomization.\u003c/p\u003e\u003cp\u003eThe best way to learn anything in software development is by consuming content and reinforcing whatever knowledge you’ve gotten from that content by practicing. So, don’t stop here. Run the examples in this tutorial (if you haven’t done so), play around with them, come up with your own unique solutions, and also don’t forget to share your good work. Ciao!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-08-26T15:00:00Z",
  "modifiedTime": "2024-08-26T15:00:00Z"
}
