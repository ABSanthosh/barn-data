{
  "id": "3f67b02e-80b4-4fd6-9509-d3f35037119b",
  "title": "How To Manage Dangerous Actions In User Interfaces",
  "link": "https://smashingmagazine.com/2024/09/how-manage-dangerous-actions-user-interfaces/",
  "description": "One of the main laws that applies to almost everything in our lives, including building digital products, is Murphy’s Law: “Anything that can go wrong will go wrong.” Our goal is to prevent things from going wrong and, if they do, mitigate the consequences. In this article, Victor Ponamarev explores different strategies for preventing users from making mistakes.",
  "author": "Victor Ponamariov",
  "published": "Fri, 27 Sep 2024 15:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 25553,
  "excerpt": "One of the main laws that applies to almost everything in our lives, including building digital products, is Murphy’s Law: “Anything that can go wrong will go wrong.” Our goal is to prevent things from going wrong and, if they do, mitigate the consequences. In this article, Victor Ponamarev explores different strategies for preventing users from making mistakes.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "21 min readUser Interface, User Experience, DesignOne of the main laws that applies to almost everything in our lives, including building digital products, is Murphy’s Law: “Anything that can go wrong will go wrong.” Our goal is to prevent things from going wrong and, if they do, mitigate the consequences. In this article, Victor Ponamarev explores different strategies for preventing users from making mistakes.By definition, an interface is a layer between the user and a system, serving the purpose of communication between them. Interacting with the interface usually requires users to perform certain actions.Different actions can lead to various outcomes, some of which might be critical.While we often need to provide additional protection in case users attempt to perform dangerous or irreversible actions, It’s good to remember that one of the ten usability heuristics called “Error Prevention” says:“Good error messages are important, but the best designs carefully prevent problems from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.”What Is A Dangerous Action?Surprisingly, when we talk about dangerous actions, it doesn’t necessarily mean that something is being deleted.Here’s an example of a dangerous action from the banking application I use:A screenshot from a bank application providing a loan. (Large preview)The bank approved a loan for me, and as soon as I clicked “Get Money,” it meant that I had signed the necessary documents and accepted the loan. All I have to do is tap the yellow button, and I’ll get the money.As a result of an accidental tap, you might end up taking a loan when you didn’t intend to, which is why this action can be considered significant and dangerous.Therefore, a dangerous action does not necessarily mean deleting something.Some examples may include the following:Sending an email,Placing an order,Publishing a post,Making a bank transaction,Signing a legal document,Permanently blocking a user,Granting or revoking permissions.Ways To Confirm Dangerous ActionsThere are many methods to prevent users from losing their data or taking irreversible actions unintentionally. One approach is to ask users to explicitly confirm their actions.There are several ways to implement this, each with its own pros and cons.Modal DialogsFirst of all, we should understand the difference between modal and non-modal dialogs. It’s better to think about modality state since dialogs, popups, alerts — all of these might be presented either in the modal state or not. I will use the term dialogs as a general reference, but the keyword here is modality.“Modality is a design technique that presents content in a separate, dedicated mode that prevents interaction with the parent view and requires an explicit action to dismiss.”— Apple design guidesModal dialogs require immediate user action. In other words, you cannot continue working with an application until you respond in some way.Non-modal dialogs, on the other hand, allow you to keep using the application without interruption. A common example of a non-modal element is a toast message that appears in the corner of the screen and does not require you to do anything to continue using the app.When used properly, modal dialogs are an effective way to prevent accidental clicks on dangerous actions.The main problem with them is that if they are used to confirm routine actions (such as marking a task as done), they can cause irritation and create a habit of mindlessly confirming them on autopilot.However, this is one of the most popular methods. Besides, it can be combined with other methods, so let’s dive into it deeper.When To Use ThemUse modal dialogs when a user action will have serious consequences, especially if the result of the action is irreversible. Typical cases include deleting a post or project, confirming a transaction, and so on.It depends on what kind of action users want to take, but the main thing to keep in mind is how serious the consequences are and whether the action is reversible or not.Things To Keep In MindAvoid vague language.If you ask users, “Are you sure?” chances are, they will not have any doubts.In the title, specify what exactly will happen or which entity will be affected (e.g., project name, user name, amount of money).Provide an icon that indicates that the action is dangerous.It both increases the chances that users will not automatically confirm it and is good for accessibility reasons (people with color blindness will notice the icon even if it appears grey to them, signaling its importance).In the description, be specific and highlight the necessary information.The CTA button should also contain a word that reflects the action.Instead of “Yes” or “Confirm,” use more descriptive options like “Delete,” “Pay $97,” “Make Transaction,” “Send Message,” and so on — including the entity name or amount of money in the button is also helpful. Compare: “Confirm” versus “Pay $97.” The latter is much more specific.Avoid general language in confirmation dialogs. Instead, be as specific as possible. (Large preview)However, this might not be enough.In some cases, you may require an extra action. A typical solution is to ask users to type something (e.g., a project name) to unblock the CTA button.Here are a few examples:ConvertKit asks users to type “DO IT” when removing subscribers.Pro tip: Note that they placed the buttons on the left side! This is a nice example of applying proximity law. It seems reasonable since the submit button is closer to the form (even if it consists of only one input).ConvertKit asks for an extra action if you want to delete your subscribers. (Large preview)Resend asks users to type “DELETE” if they want to delete an API key, which could have very serious consequences. The API key might be used in many of your apps, and you don’t want to break anything.Resend asks for extra action as well if you want to delete your API key. (Large preview)This modal is one of the best examples of following the best practices:The title says what the action is (“Delete API Key”).In the text, they mentioned the name of the API Key in bold and in a different color (“Onboarding”).The red label that the action can not be undone makes it clearer that this is a serious action.Extra action is required (typing “DELETE”).The CTA button has both a color indicator (red usually is used for destructive actions) and a proper label — “Delete API Key”. Not a general word, e.g., “Confirm” or “Delete.”Notice that Resend also places buttons on the left side, just as ConvertKit does.Note: While generally disabling submit buttons is considered bad practice, this is one of the cases where it is acceptable. The dialog’s request is clear and straightforward both in ConvertKit and Resend examples.Moreover, we can even skip the submit button altogether. This applies to cases where users are asked to input an OTP, PIN, or 2FA code. For example, the bank app I use does not even have a log in button.On the one hand, we still ask users to perform an extra action (input the code). On the other hand, it eliminates the need for an additional click.A bank application asks for your code to log in without a submit button. (Large preview)Accessibility ConcernsThere is ongoing debate about whether or not to include a submit button when entering a simple OTP. By “simple,” I mean one that consists of 4-6 digits.While I am not an accessibility expert, I don’t see any major downsides to omitting the submit button in straightforward cases like this.First, the OTP step is typically an intermediate part of the user flow, meaning a form with four inputs appears during some process. The first input is automatically focused, and users can navigate through them using the Tab key.The key point is that, due to the small amount of information required (four digits), it is generally acceptable to auto-submit the form as soon as the digits are entered, even if a mistake is made.On the one hand, if we care about accessibility, nothing stops us from providing users control over the inputs. On the other hand, auto-submission streamlines the process in most cases, and in the rare event of an error, the user can easily re-enter the digits.Danger ZonesFor the most critical actions, you may use the so-called “Danger zone” pattern.Github repository danger zone settings. (Large preview)A common way to implement this is to either have a dedicated page or place the set of actions at the bottom of the settings/account page.It might contain one or more actions and is usually combined with other methods, e.g., a modal dialog. The more actions you have, the more likely you’ll need a dedicated page.Plausible has a dedicated page for the Danger zone. (Large preview)When To Use ThemUse a Danger Zone to group actions that are irreversible or have a high potential for data loss or significant outcomes for users.These actions typically include things like account deletion, data wiping, or permission changes that could affect the user’s access or data.Things To Keep In MindUse colors like red, warning icons, or borders to visually differentiate the Danger Zone from the rest of the page.Each action in the Danger Zone should have a clear description of what will happen if the user proceeds so that users understand the potential consequences.Ask users for extra effort. Usually, the actions are irreversible and critical. In this case, you may ask users to repeat their password or use 2FA because if someone else gets access to the page, it will not be that easy to do the harmful action.Keep only truly critical actions there. Avoid making a danger zone for the sake of having one.Inline GuardsRecently, I discovered that some apps have started using inline confirmation. This means that when you click on a dangerous action, it changes its label and asks you to click again.This pattern is used by apps like Zapier and Typefully. While at first it seems convenient, it has sparked a lot of discussion and questions on X and Linkedin.Typefully asks for confirmation when deleting a post.When To Use ThemThis is for non-critical actions that might be accidentally executed, usually due to a misclick.There was a concern mentioned by the community of designers regarding the case of users still being able to execute the action by double-clicking.However, there are three things to consider:This kind of confirmation is convenient for actions that are not dangerous, but at the same time, it’d be better to ask for an extra effort.Ideally, we should provide an option to undo the action or push the deleted item to an archive page (in case we delete something). This is a good combination to make sure that users are safe.The purpose of inline confirmation is to prevent accidental clicks, contrasting with cases where we alert users to the serious consequences of their actions.Even though the Jakob’s law says that“Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know.”It doesn’t mean that you cannot facilitate the usage of an app by introducing new patterns. Otherwise, the web wouldn’t evolve at all.There is a fine line when patterns gradually change, both in terms of design (e.g., transitioning from skeuomorphism to flat, minimalistic design) and usability (e.g., push notifications, real-time support).Zapier asks for confirmation when deleting an action. (Large preview)I’ve seen attempts to try to fix accidental double-clicking by changing the position of the inline confirmation label that appears after the first click.But this creates layout shifts. When users work with the app daily, it may cause more irritation than help.As an option, we can solve this issue by adding a tiny delay, e.g., 100-200ms, to prevent double-clicking.It also matters who your users are. Remember the good old days when we used to click a dozen times to launch Internet Explorer and ended up with dozens of open instances?If your target audience is likely to do this, apparently, the pattern will not work.However, for apps like Zapier or Typefully, my assumption is that the target audience might benefit from the pattern.Two-factor Authorization ConfirmationThis method involves sending a confirmation request, with or without some kind of verification code, to another place, such as:SMS,Email,Authenticator app on mobile,Push notifications (e.g., instead of sending SMS, you may choose to send push notifications),Messengers.Notice: I’m not talking about authentication (namely, login process), but rather a confirmation action.An example that I personally face a lot is an app for sending cryptocurrency. Since this is a sensitive request, apart from submitting the requisition from a website, I should also approve it via email.An app asking to verify a transaction via email. (Large preview)When To Use ItIt can be used for such operations as money transfers, ownership transfers, and account deletion (even if you have a danger zone). Most of us use this method quite often when we pay online, and our banks send us OTP (one-time password or one-time code).It may go after the first initial protection method, e.g., a confirmation dialog.As you can see, the methods are often combined and used together. We should not consider each of them in isolation but rather in the context of the whole business process.PasskeysPasskeys are a modern, password-less authentication method designed to enhance both security and user experience.“Passkeys are a replacement for passwords. A password is something that can be remembered and typed, and a passkey is a secret stored on one’s devices, unlocked with biometrics.”— passkeys.devThere are a few pros of using passkeys over 2FA, both in terms of security and UX:Unlike 2FA, which typically requires entering a code from another device or app (e.g., SMS or authenticator apps), passkeys streamline the confirmation process. They don’t require switching between devices or waiting for a code to arrive, providing immediate authentication.While 2FA provides extra protection, it is vulnerable to phishing, SIM-swapping, or interception. Passkeys are much more resistant to such attacks because they use public-private key cryptography. This means no secret code is ever sent over the network, making it phishing-resistant and not reliant on SMS or email, which can be compromised.Passkeys require less mental effort from users. There’s no need to remember a password or type a code — just authenticate with a fingerprint, facial recognition, or device-specific PIN. This way, we reduce cognitive load.With passkeys, the authentication process is almost instant. Unlike 2FA, where users might have to wait for a code or switch to another device, passkeys give us the opportunity to confirm actions without switching context, e.g., opening your email inbox or copying OTP from a mobile device.The passkeys are widely supported and more and more companies adopt it.A screenshot from passkeys.io showing some of the companies that have already adopted the passkeys technology. (Large preview)Second-person ConfirmationThis is a mechanism when two users are involved in the process. We may call them initiator and approver.In this case, the initiator makes a request to take some action while the approver decides whether to confirm it or not.In both roles, a confirmation dialog or other UI patterns may be used. However, the main idea is to separate responsibilities and decrease the probability of a bad decision.Actually, you have likely encountered this method many times before. For example, a developer submits a pull request, while a code reviewer decides whether to confirm it or decline.Merging a pull request on GitHub. (Large preview)When To Use ItIt is best suited for situations when the seriousness of decisions requires few people involved.There is a direct analogy from real life. Take a look at the picture below:Image source: Unsplash. (Large preview)The Council of Physicians reminds us that in medicine, seeking a second opinion is crucial, as collaboration and diverse perspectives often result in more informed decisions and better patient care. This is a perfect example of when a second opinion or an approver is essential.Here, you will find some apps that use this method:GitHub, as previously mentioned, for merging pull requests.Jira and other similar apps. For example, when you move issues through a certain workflow stage, it may require manager approval.Banking applications. When you make a high-value transaction, it could be necessary to verify it for legal issues.Deel, which is a global hiring and payroll. One part (e.g., employer) draws up a contract and sends it to another part (e.g., freelancer), and the freelancer accepts it.But here is the thing: We can consider it a separate method or rather an approach for implementing business logic because even if another person confirms an action, it is still a dangerous action, with the only difference being that now it’s another person who should approve it.So, all of the examples mentioned above are not exactly a standalone specific way to protect users from making wrong decisions from the UI point of view. It’s rather an approach that helps us to reduce the number of critical mistakes.Do We Actually Need To Ask Users?When you ask users to take action, you should be aware of its original purpose.The fact that users make actions does not mean that they make them consciously.There are many behavioral phenomena that come from psychology, to name a few:Cognitive inertia: The tendency of a person to stick to familiar decisions, even if they are not suitable for the current situation. For instance, the vast majority of people don’t read user agreements. They simply agree with the lengthy text because it’s necessary from the legal point of view.Availability Heuristic: People often make decisions based on information that is easily accessible or familiar to them rather than making a mental effort. When users see the same confirmation popups, they might automatically accept them based on their previous successful experience. Of course, sooner or later, it might not work, and the acceptance of required action can lead to bad consequences.Cognitive Miser: The human mind is considered to be a cognitive miser due to the tendency of humans to think and solve problems in simpler and less effortful ways rather than in more sophisticated and effortful ways, regardless of intelligence. This explains why many users just click “yes” or “agree” without carefully reading the text.Quite a representative example is banner blindness, even though not related to confirmation but, in fact, revolves around the same human behavior idiosyncrasies.A reasonable question that may arise: What are the alternatives?Even though we cannot entirely affect users’ behavior, there are a few tactics we can use.DelayingIn some scenarios, we can artificially delay the task execution in a graceful way.One of my favorite examples is an app called Glovo, which is a food delivery app. Let’s have a look at the three screens you will see when you order something.Workflow of a food delivery app that uses an illusion of progress. (Large preview)The first screen is a cart with items you chose to buy (and an annoying promotion of subscription that takes ⅓ of the screen).After you tap the “confirm order” button, you’ll see the second screen, which asks you whether everything is correct. However, the information appears gradually with fade-in animation. Also, you can see there is a progress bar, which is a fake one.After a few seconds, you’ll see another screen that shows that the app is trying to charge your card; this time, it’s a real process. After the transaction proceeds, you’ll see the status of the order and approximate delivery time.Pro tip: When you show the status of the order and visually highlight or animate the first step, it makes users more confident that the order will be completed. Because of the trick that is called Goal-Gradient Effect.You’ve just paid, and “something starts happening” (at least visually), which is a sign that “Oh, they should have already started preparing my order. That’s nice!”Real purchase action that takes place after an artificial delay. (Large preview)The purpose of the screen with a fake progress bar is to let users verify the order details and confirm them.But this is done in a very exquisite way:On the first screen, you click “confirm order”. It doesn’t invoke any modals or popups, such as “Are you sure?”.On the second screen, users can see how information about their order appears right away, and the scroll bar at the bottom goes further. It seems like that app is doing something, but it’s an illusion. An illusion that makes you take another quick look at what you’ve just ordered.In the previous version of the app, you couldn’t even skip the process; you could only cancel it. Now they added the “Continue” button, which is essentially “Yes, I’m sure” confirmation.This means that we return back again to the drawbacks of classic confirmation modals since users can skip the process. But the approach is different: it’s a combination of a feedback loop from the app and skipping the process.This combination makes users pay attention to the address, order, and price at least sometimes, and it gives them time to cancel the order, while in the classic approach, the confirmation is “yes or no?” which is more likely to be confirmed right away.The Undo OptionThe undo pattern allows users to reverse an action they have just performed, providing a safety net that reduces anxiety around making mistakes.Unlike confirmation modals that interrupt the workflow to ask for user confirmation, the undo pattern provides a smoother experience by allowing actions to be completed with the option to reverse them if needed.When To Use ItIt works perfectly fine for non-destructive, reversible actions \u0026mdashl actions that don’t have significant and immediate consequences:Reversing actions when editing a document (The beloved ctrl + z shortcut);Removing a file (if it goes to the trash bin first);Changing the status of a task (e.g., if you accidentally marked a task completed);Deleting a message in a chat;Applying filters to a photo.Combined with a timer, you can extend the number of options since such tasks as sending an email or making a money transfer could be undone.An example of an undo toast with a timer. (Large preview)When You Cannot Use ItIt’s not suitable for actions that have serious consequences, such as the following:Deleting an account;Submitting legal documents;Purchasing goods (refund is not the same as the undo option);Making requests for third-party APIs (in most cases).How To Implement Them?The most common way that most people use every day is to provide a shortcut (ctrl + z). However, it’s constrained to some cases, such as text editors, moving files between folders, and so on.Toasts are probably the most common way to implement these web and mobile apps. The only thing that you should keep in mind is that it should stand out enough to be noticed. Hiding them in a corner with a tiny message and color that is not noticeable might not work — especially on wide screens.A straightforward solution is simply to have a button that does the undo option. Preferably close to the button that evokes the action that you want to undo.The undo option is tightly related to the concept called soft deleting, which is widely used in backend frameworks such as Laravel.The concept means that when users delete something via the UI, it looks like it has been deleted, but in the database, we keep the data but mark it as deleted. The data is not lost, which is why the undo option is possible since we don’t actually delete anything but rather mark it as deleted.This is a good technique to ensure that data is never lost. However, not every table needs this.For example, if you delete an account and don’t want users to restore it (perhaps due to legal regulations), then you should erase the data completely. But in many cases, it might be a good idea to consider soft deleting. In the worst case, you’ll be able to manually restore user data if it cannot be done via the UI for some reason.ConclusionThere’s something I want everyone to keep in mind, regardless of who you are or what you do.Every situation is unique. A certain approach might work or fail for a variety of reasons. You might sometimes wonder why a specific decision was made, but you may not realize how many times the interface was revised based on real user feedback.User behavior is affected by many factors, including country, age, culture, education, familiarity with certain patterns, disabilities, and more.What’s crucial is to stay in control of your data and users and be prepared to respond when something goes wrong. Following best practices is important, but you must still verify if they work in your specific case.Just like in chess, there are many rules — and even more exceptions.Further ReadingModality, Apple“An effective ‘Cancel’ dialog confirmation on Web,” João Bexiga“Confirm or undo? Which is the better option?,” Josh Wayne“Understanding Soft Delete and Hard Delete,” Suraj Singh Bisht“Confirmation Dialogs Can Prevent User Errors — If Not Overused,” Jakob Nielsen“Microcopy for confirmation dialogues,” Kinneret YifrahWhat is a passkey?, passkeys.io (vf, il, yk)",
  "image": "https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/how-manage-dangerous-actions-user-interfaces.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e21 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/user-interface\"\u003eUser Interface\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/user-experience\"\u003eUser Experience\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eOne of the main laws that applies to almost everything in our lives, including building digital products, is Murphy’s Law: “Anything that can go wrong will go wrong.” Our goal is to prevent things from going wrong and, if they do, mitigate the consequences. In this article, Victor Ponamarev explores different strategies for preventing users from making mistakes.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eBy definition, an interface is a layer between the user and a system, serving the purpose of communication between them. Interacting with the interface usually requires users to perform certain actions.\u003c/p\u003e\u003cp\u003eDifferent actions can lead to various outcomes, some of which might be critical.\u003c/p\u003e\u003cp\u003eWhile we often need to provide additional protection in case users attempt to perform dangerous or irreversible actions, It’s good to remember that one of \u003ca href=\"https://www.nngroup.com/articles/ten-usability-heuristics/\"\u003ethe ten usability heuristics\u003c/a\u003e called “Error Prevention” says:\u003c/p\u003e\u003cblockquote\u003e“Good error messages are important, but the best designs carefully \u003cstrong\u003eprevent problems from occurring in the first place\u003c/strong\u003e. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.”\u003c/blockquote\u003e\u003ch2 id=\"what-is-a-dangerous-action\"\u003eWhat Is A Dangerous Action?\u003c/h2\u003e\u003cp\u003eSurprisingly, when we talk about dangerous actions, it doesn’t necessarily mean that something is being deleted.\u003c/p\u003e\u003cp\u003eHere’s an example of a dangerous action from the banking application I use:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"636\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png\" sizes=\"100vw\" alt=\"A screenshot from a bank application providing a loan.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eA screenshot from a bank application providing a loan. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/1-screenshot-bank-application.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe bank approved a loan for me, and as soon as I clicked \u003cem\u003e“Get Money,”\u003c/em\u003e it meant that I had signed the necessary documents and accepted the loan. All I have to do is tap the yellow button, and I’ll get the money.\u003c/p\u003e\u003cp\u003eAs a result of an accidental tap, you might end up taking a loan when you didn’t intend to, which is why this action can be considered significant and dangerous.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTherefore, a dangerous action does not necessarily mean deleting something.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSome examples may include the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSending an email,\u003c/li\u003e\u003cli\u003ePlacing an order,\u003c/li\u003e\u003cli\u003ePublishing a post,\u003c/li\u003e\u003cli\u003eMaking a bank transaction,\u003c/li\u003e\u003cli\u003eSigning a legal document,\u003c/li\u003e\u003cli\u003ePermanently blocking a user,\u003c/li\u003e\u003cli\u003eGranting or revoking permissions.\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"ways-to-confirm-dangerous-actions\"\u003eWays To Confirm Dangerous Actions\u003c/h2\u003e\u003cp\u003eThere are many methods to prevent users from losing their data or taking irreversible actions unintentionally. One approach is to ask users to explicitly confirm their actions.\u003c/p\u003e\u003cp\u003eThere are several ways to implement this, each with its own pros and cons.\u003c/p\u003e\u003ch3 id=\"modal-dialogs\"\u003eModal Dialogs\u003c/h3\u003e\u003cp\u003eFirst of all, we should understand the difference between modal and non-modal dialogs. It’s better to think about \u003cstrong\u003e\u003cem\u003emodality state\u003c/em\u003e\u003c/strong\u003e since dialogs, popups, alerts — all of these might be presented either in the modal state or not. I will use the term dialogs as a general reference, but the keyword here is \u003cstrong\u003emodality.\u003c/strong\u003e\u003c/p\u003e\u003cblockquote\u003e“Modality is a design technique that presents content in a separate, dedicated mode that prevents interaction with the parent view and requires an explicit action to dismiss.”\u003cp\u003e— \u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/modality\"\u003eApple design guides\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cstrong\u003eModal dialogs require immediate user action.\u003c/strong\u003e In other words, you cannot continue working with an application until you respond in some way.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNon-modal dialogs, on the other hand, allow you to keep using the application\u003c/strong\u003e without interruption. A common example of a non-modal element is a toast message that appears in the corner of the screen and does not require you to do anything to continue using the app.\u003c/p\u003e\u003cp\u003eWhen used properly, modal dialogs are an effective way to prevent accidental clicks on dangerous actions.\u003c/p\u003e\u003cp\u003eThe main problem with them is that if they are used to confirm routine actions (such as marking a task as done), they can cause irritation and create a habit of mindlessly confirming them on autopilot.\u003c/p\u003e\u003cp\u003eHowever, this is one of the most popular methods. Besides, it can be combined with other methods, so let’s dive into it deeper.\u003c/p\u003e\u003ch4 id=\"when-to-use-them\"\u003eWhen To Use Them\u003c/h4\u003e\u003cp\u003eUse modal dialogs when a user action will have serious consequences, especially if the result of the action is irreversible. Typical cases include deleting a post or project, confirming a transaction, and so on.\u003c/p\u003e\u003cp\u003eIt depends on what kind of action users want to take, but the main thing to keep in mind is \u003cstrong\u003e\u003cem\u003ehow serious the consequences are and whether the action is reversible or not.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003ch4 id=\"things-to-keep-in-mind\"\u003eThings To Keep In Mind\u003c/h4\u003e\u003col\u003e\u003cli\u003e\u003cstrong\u003eAvoid vague language.\u003c/strong\u003e\u003cbr/\u003eIf you ask users, \u003cem\u003e“Are you sure?”\u003c/em\u003e chances are, they will not have any doubts.\u003c/li\u003e\u003cli\u003eIn the title, specify what exactly will happen or which entity will be affected (e.g., project name, user name, amount of money).\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eProvide an icon that indicates that the action is dangerous\u003c/strong\u003e.\u003cbr/\u003eIt both increases the chances that users will not automatically confirm it and is \u003cstrong\u003egood for accessibility reasons\u003c/strong\u003e (people with color blindness will notice the icon even if it appears grey to them, signaling its importance).\u003c/li\u003e\u003cli\u003eIn the description, be specific and highlight the necessary information.\u003c/li\u003e\u003cli\u003eThe CTA button should also contain \u003cstrong\u003ea word that reflects the action\u003c/strong\u003e.\u003cbr/\u003eInstead of \u003cem\u003e“Yes”\u003c/em\u003e or \u003cem\u003e“Confirm,”\u003c/em\u003e use more descriptive options like \u003cem\u003e“Delete,”\u003c/em\u003e \u003cem\u003e“Pay $97,”\u003c/em\u003e \u003cem\u003e“Make Transaction,”\u003c/em\u003e \u003cem\u003e“Send Message,”\u003c/em\u003e and so on — including the entity name or amount of money in the button is also helpful. Compare: \u003cem\u003e“Confirm”\u003c/em\u003e versus \u003cem\u003e“Pay $97.”\u003c/em\u003e The latter is much more specific.\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"614\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png\" sizes=\"100vw\" alt=\"Comparison of two modal dialogs for confirming a dangerous action.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eAvoid general language in confirmation dialogs. Instead, be as specific as possible. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/2-general-language-confirmation-dialogs.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003cstrong\u003eHowever, this might not be enough.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eIn some cases, you may require an extra action. A typical solution is to ask users to type something (e.g., a project name) to unblock the CTA button.\u003c/p\u003e\u003cp\u003eHere are a few examples:\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://convertkit.com/\"\u003e\u003cstrong\u003eConvertKit\u003c/strong\u003e\u003c/a\u003e asks users to type \u003cem\u003e“DO IT”\u003c/em\u003e when removing subscribers.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePro tip\u003c/strong\u003e: \u003cem\u003eNote that they placed the buttons on the left side! This is a nice example of applying \u003ca href=\"https://lawsofux.com/law-of-proximity/\"\u003eproximity law\u003c/a\u003e. It seems reasonable since the submit button is closer to the form (even if it consists of only one input).\u003c/em\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png\" sizes=\"100vw\" alt=\"Confirmation modal dialog from ConvertKit asking you to confirm deleting subscribers.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eConvertKit asks for an extra action if you want to delete your subscribers. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/3-convertkit.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003ca href=\"https://resend.com/\"\u003e\u003cstrong\u003eResend\u003c/strong\u003e\u003c/a\u003e asks users to type \u003cem\u003e“DELETE”\u003c/em\u003e if they want to delete an API key, which could have very serious consequences. The API key might be used in many of your apps, and you don’t want to break anything.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png\" sizes=\"100vw\" alt=\"Resend modal dialog asking you to confirm API key deletion.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eResend asks for extra action as well if you want to delete your API key. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/4-resend-modal-dialog.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThis modal is one of the best examples of following the best practices:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe title says what the action is (\u003cem\u003e“Delete API Key”\u003c/em\u003e).\u003c/li\u003e\u003cli\u003eIn the text, they mentioned the name of the API Key in bold and in a different color (\u003cem\u003e“Onboarding”\u003c/em\u003e).\u003c/li\u003e\u003cli\u003eThe red label that the action can not be undone makes it clearer that this is a serious action.\u003c/li\u003e\u003cli\u003eExtra action is required (typing \u003cem\u003e“DELETE”\u003c/em\u003e).\u003c/li\u003e\u003cli\u003eThe CTA button has both a color indicator (red usually is used for destructive actions) and a proper label — \u003cem\u003e“Delete API Key”\u003c/em\u003e. Not a general word, e.g., \u003cem\u003e“Confirm”\u003c/em\u003e or \u003cem\u003e“Delete.”\u003c/em\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNotice that Resend also places buttons on the left side, just as ConvertKit does.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eWhile generally \u003ca href=\"https://adamsilver.io/blog/the-problem-with-disabled-buttons-and-what-to-do-instead/\"\u003edisabling submit buttons is considered bad practice\u003c/a\u003e, this is one of the cases where it is acceptable. The dialog’s request is clear and straightforward both in ConvertKit and Resend examples.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eMoreover, we can even skip the submit button altogether. This applies to cases where users are asked to input an OTP, PIN, or 2FA code. For example, the bank app I use does not even have a log in button.\u003c/p\u003e\u003cp\u003eOn the one hand, we still ask users to perform an extra action (input the code). On the other hand, it eliminates the need for an additional click.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"530\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png\" sizes=\"100vw\" alt=\"A screenshot of the login page of a bank app that asks you for a PIN code only and does not have the submit button.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eA bank application asks for your code to log in without a submit button. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/5-bank-application-no-sumbit-button.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"accessibility-concerns\"\u003eAccessibility Concerns\u003c/h4\u003e\u003cp\u003eThere is ongoing debate about whether or not to include a submit button when entering a simple OTP. By “simple,” I mean one that consists of 4-6 digits.\u003c/p\u003e\u003cp\u003eWhile I am not an accessibility expert, I don’t see any major downsides to omitting the submit button in straightforward cases like this.\u003c/p\u003e\u003cp\u003eFirst, the OTP step is typically an intermediate part of the user flow, meaning a form with four inputs appears during some process. The first input is automatically focused, and users can navigate through them using the Tab key.\u003c/p\u003e\u003cp\u003eThe key point is that, due to the small amount of information required (four digits), it is generally acceptable to auto-submit the form as soon as the digits are entered, even if a mistake is made.\u003c/p\u003e\u003cp\u003eOn the one hand, if we care about accessibility, nothing stops us from providing users control over the inputs. On the other hand, auto-submission streamlines the process in most cases, and in the rare event of an error, the user can easily re-enter the digits.\u003c/p\u003e\u003ch3 id=\"danger-zones\"\u003eDanger Zones\u003c/h3\u003e\u003cp\u003eFor the most critical actions, you may use the so-called “Danger zone” pattern.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png\" sizes=\"100vw\" alt=\"Github repository danger zone settings.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eGithub repository danger zone settings. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/6-github-repository-danger-zone-settings.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eA common way to implement this is to either have a dedicated page or place the set of actions at the bottom of the settings/account page.\u003c/p\u003e\u003cp\u003eIt might contain one or more actions and is usually combined with other methods, e.g., a modal dialog. The more actions you have, the more likely you’ll need a dedicated page.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png\" sizes=\"100vw\" alt=\"A separate page for danger zone actions in the Plausible application.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003ePlausible has a dedicated page for the Danger zone. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/7-plausible-danger-zone.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"when-to-use-them-1\"\u003eWhen To Use Them\u003c/h4\u003e\u003cp\u003eUse a Danger Zone to group actions that are irreversible or have a high potential for data loss or significant outcomes for users.\u003c/p\u003e\u003cp\u003eThese actions typically include things like account deletion, data wiping, or permission changes that could affect the user’s access or data.\u003c/p\u003e\u003ch4 id=\"things-to-keep-in-mind-1\"\u003eThings To Keep In Mind\u003c/h4\u003e\u003col\u003e\u003cli\u003eUse colors like red, warning icons, or borders to visually differentiate the Danger Zone from the rest of the page.\u003c/li\u003e\u003cli\u003eEach action in the Danger Zone should have \u003cstrong\u003ea clear description of what will happen if the user proceeds\u003c/strong\u003e so that users understand the potential consequences.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAsk users for extra effort.\u003c/strong\u003e Usually, the actions are irreversible and critical. In this case, you may ask users to repeat their password or use 2FA because if someone else gets access to the page, it will not be that easy to do the harmful action.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eKeep only truly critical actions there.\u003c/strong\u003e Avoid making a danger zone for the sake of having one.\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"inline-guards\"\u003eInline Guards\u003c/h3\u003e\u003cp\u003eRecently, I discovered that some apps have started using inline confirmation. This means that when you click on a dangerous action, it changes its label and asks you to click again.\u003c/p\u003e\u003cp\u003eThis pattern is used by apps like Zapier and Typefully. While at first it seems convenient, it has sparked a lot of discussion and questions on \u003ca href=\"https://x.com/vponamariov/status/1787832616722338016\"\u003eX\u003c/a\u003e and \u003ca href=\"https://www.linkedin.com/posts/vitalyfriedman_ux-design-activity-7200522626224582658-AGVB\"\u003eLinkedin\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eTypefully asks for confirmation when deleting a post.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"when-to-use-them-2\"\u003eWhen To Use Them\u003c/h4\u003e\u003cp\u003eThis is for non-critical actions that might be accidentally executed, usually due to a misclick.\u003c/p\u003e\u003cp\u003eThere was a concern mentioned by the community of designers regarding the case of users still being able to execute the action by double-clicking.\u003c/p\u003e\u003cp\u003eHowever, there are three things to consider:\u003c/p\u003e\u003col\u003e\u003cli\u003eThis kind of confirmation is convenient for actions that are not dangerous, but at the same time, it’d be better to ask for an extra effort.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eIdeally\u003c/strong\u003e, we should provide an option to undo the action or push the deleted item to an archive page (in case we delete something). This is a good combination to make sure that users are safe.\u003c/li\u003e\u003cli\u003eThe purpose of inline confirmation is to prevent \u003cstrong\u003eaccidental\u003c/strong\u003e clicks, contrasting with cases where we alert users to the serious consequences of their actions.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eEven though the \u003ca href=\"https://lawsofux.com/jakobs-law/\"\u003eJakob’s law\u003c/a\u003e says that\u003c/p\u003e\u003cblockquote\u003e“Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know.”\u003c/blockquote\u003e\u003cp\u003eIt doesn’t mean that you cannot facilitate the usage of an app by introducing new patterns. Otherwise, the web wouldn’t evolve at all.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aThere%20is%20a%20fine%20line%20when%20patterns%20gradually%20change,%20both%20in%20terms%20of%20design%20%28e.g.,%20transitioning%20from%20skeuomorphism%20to%20flat,%20minimalistic%20design%29%20and%20usability%20%28e.g.,%20push%20notifications,%20real-time%20support%29.%0a\u0026amp;url=https://smashingmagazine.com%2f2024%2f09%2fhow-manage-dangerous-actions-user-interfaces%2f\"\u003eThere is a fine line when patterns gradually change, both in terms of design (e.g., transitioning from skeuomorphism to flat, minimalistic design) and usability (e.g., push notifications, real-time support).\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png\" sizes=\"100vw\" alt=\"Zapier asks for confirmation when deleting an action.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eZapier asks for confirmation when deleting an action. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/8-zapier-confirmation-deleting.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eI’ve seen attempts to try to fix accidental double-clicking by changing the position of the inline confirmation label that appears after the first click.\u003c/p\u003e\u003cp\u003eBut this creates layout shifts. When users work with the app daily, it may cause more irritation than help.\u003c/p\u003e\u003cp\u003eAs an option, we can solve this issue by adding a tiny delay, e.g., 100-200ms, to prevent double-clicking.\u003c/p\u003e\u003cp\u003eIt also matters who your users are. Remember the good old days when we used to click a dozen times to launch Internet Explorer and ended up with dozens of open instances?\u003c/p\u003e\u003cp\u003eIf your target audience is likely to do this, apparently, the pattern will not work.\u003c/p\u003e\u003cp\u003eHowever, for apps like Zapier or Typefully, \u003cem\u003emy assumption\u003c/em\u003e is that the target audience might benefit from the pattern.\u003c/p\u003e\u003ch3 id=\"two-factor-authorization-confirmation\"\u003eTwo-factor Authorization Confirmation\u003c/h3\u003e\u003cp\u003eThis method involves sending a confirmation request, with or without some kind of verification code, to another place, such as:\u003c/p\u003e\u003cul\u003e\u003cli\u003eSMS,\u003c/li\u003e\u003cli\u003eEmail,\u003c/li\u003e\u003cli\u003eAuthenticator app on mobile,\u003c/li\u003e\u003cli\u003ePush notifications (e.g., instead of sending SMS, you may choose to send push notifications),\u003c/li\u003e\u003cli\u003eMessengers.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e: \u003cem\u003eI’m not talking about authentication (namely, login process), but rather a confirmation action.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eAn example that I personally face a lot is an app for sending cryptocurrency. Since this is a sensitive request, apart from submitting the requisition from a website, I should also approve it via email.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png\" sizes=\"100vw\" alt=\"Confirmation email for making money transaction.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eAn app asking to verify a transaction via email. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/9-transaction-email-confirmation.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"when-to-use-it\"\u003eWhen To Use It\u003c/h4\u003e\u003cp\u003eIt can be used for such operations as money transfers, ownership transfers, and account deletion (even if you have a danger zone). Most of us use this method quite often when we pay online, and our banks send us OTP (one-time password or one-time code).\u003c/p\u003e\u003cp\u003eIt may go after the first initial protection method, e.g., a confirmation dialog.\u003c/p\u003e\u003cp\u003eAs you can see, the methods are often combined and used together. We should not consider each of them in isolation but rather in the context of the whole business process.\u003c/p\u003e\u003ch3 id=\"passkeys\"\u003ePasskeys\u003c/h3\u003e\u003cp\u003ePasskeys are a modern, password-less authentication method designed to enhance both security and user experience.\u003c/p\u003e\u003cblockquote\u003e“Passkeys are a replacement for passwords. A password is something that can be remembered and typed, and a passkey is a secret stored on one’s devices, unlocked with biometrics.”\u003cp\u003e— \u003ca href=\"https://passkeys.dev/docs/intro/what-are-passkeys/\"\u003epasskeys.dev\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThere are a few pros of using passkeys over 2FA, both in terms of security and UX:\u003c/p\u003e\u003col\u003e\u003cli\u003eUnlike 2FA, which typically requires entering a code from another device or app (e.g., SMS or authenticator apps), passkeys streamline the confirmation process. They \u003cstrong\u003edon’t require switching between devices or waiting for a code to arrive\u003c/strong\u003e, providing immediate authentication.\u003c/li\u003e\u003cli\u003eWhile 2FA provides extra protection, it is vulnerable to phishing, SIM-swapping, or interception. Passkeys are much more resistant to such attacks because they use public-private key cryptography. This means \u003cstrong\u003eno secret code is ever sent over the network\u003c/strong\u003e, making it phishing-resistant and not reliant on SMS or email, which can be compromised.\u003c/li\u003e\u003cli\u003ePasskeys require less mental effort from users. There’s no need to remember a password or type a code — just authenticate with a fingerprint, facial recognition, or device-specific PIN. This way, we \u003ca href=\"https://en.wikipedia.org/wiki/Cognitive_load\"\u003ereduce cognitive load\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eWith passkeys, the authentication process is almost \u003cstrong\u003einstant\u003c/strong\u003e. Unlike 2FA, where users might have to wait for a code or switch to another device, passkeys give us the opportunity to confirm actions without switching context, e.g., opening your email inbox or copying OTP from a mobile device.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe passkeys are \u003ca href=\"https://passkeys.dev/device-support/\"\u003ewidely supported\u003c/a\u003e and more and more \u003ca href=\"https://www.passkeys.io/who-supports-passkeys\"\u003ecompanies\u003c/a\u003e adopt it.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png\" sizes=\"100vw\" alt=\"Screenshot from passkeys.io showing some of the companies that have already adopted the passkeys technology.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eA screenshot from \u003ca href=\"https://www.passkeys.io/who-supports-passkeys\"\u003epasskeys.io\u003c/a\u003e showing some of the companies that have already adopted the passkeys technology. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/10-passkey-companies.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"second-person-confirmation\"\u003eSecond-person Confirmation\u003c/h3\u003e\u003cp\u003eThis is a mechanism when two users are involved in the process. We may call them initiator and approver.\u003c/p\u003e\u003cp\u003eIn this case, the initiator makes a request to take some action while the approver decides whether to confirm it or not.\u003c/p\u003e\u003cp\u003eIn both roles, a confirmation dialog or other UI patterns may be used. However, the main idea is to separate responsibilities and decrease the probability of a bad decision.\u003c/p\u003e\u003cp\u003eActually, you have likely encountered this method many times before. For example, a developer submits a pull request, while a code reviewer decides whether to confirm it or decline.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png\" sizes=\"100vw\" alt=\"Merging a pull request on GitHub.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eMerging a pull request on GitHub. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/11-github-merge-pull-request.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"when-to-use-it-1\"\u003eWhen To Use It\u003c/h4\u003e\u003cp\u003eIt is best suited for situations when the seriousness of decisions requires few people involved.\u003c/p\u003e\u003cp\u003eThere is a direct analogy from real life. Take a look at the picture below:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png\" sizes=\"100vw\" alt=\"A picture where two doctors discussing an issue.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eImage source: \u003ca href=\"https://unsplash.com/photos/a-man-showing-something-on-the-computer-5VkNa1LrS8A\"\u003eUnsplash\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/12-doctors-discussion.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe Council of Physicians reminds us that in medicine, seeking a second opinion is crucial, as collaboration and diverse perspectives often result in more informed decisions and better patient care. This is a perfect example of when a second opinion or an approver is essential.\u003c/p\u003e\u003cp\u003eHere, you will find some apps that use this method:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eGitHub\u003c/strong\u003e, as previously mentioned, for merging pull requests.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eJira\u003c/strong\u003e and other similar apps. For example, when you move issues through a certain workflow stage, it may require manager approval.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eBanking applications.\u003c/strong\u003e When you make a high-value transaction, it could be necessary to verify it for legal issues.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDeel\u003c/strong\u003e, which is a global hiring and payroll. One part (e.g., employer) draws up a contract and sends it to another part (e.g., freelancer), and the freelancer accepts it.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBut here is the thing: We can consider it a separate method or rather an approach for implementing business logic because even if another person confirms an action, it is still a dangerous action, with the only difference being that now it’s another person who should approve it.\u003c/p\u003e\u003cp\u003eSo, all of the examples mentioned above are not exactly a standalone specific way to protect users from making wrong decisions from the UI point of view. It’s rather an approach that helps us to reduce the number of critical mistakes.\u003c/p\u003e\u003ch2 id=\"do-we-actually-need-to-ask-users\"\u003eDo We Actually Need To Ask Users?\u003c/h2\u003e\u003cp\u003eWhen you ask users to take action, you should be aware of its original purpose.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aThe%20fact%20that%20users%20make%20actions%20does%20not%20mean%20that%20they%20make%20them%20consciously.%0a\u0026amp;url=https://smashingmagazine.com%2f2024%2f09%2fhow-manage-dangerous-actions-user-interfaces%2f\"\u003eThe fact that users make actions does not mean that they make them consciously.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThere are many behavioral phenomena that come from psychology, to name a few:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cognitive_inertia\"\u003e\u003cstrong\u003eCognitive inertia\u003c/strong\u003e\u003c/a\u003e: The tendency of a person to stick to familiar decisions, even if they are not suitable for the current situation. For instance, the vast majority of people don’t read user agreements. They simply agree with the lengthy text because it’s necessary from the legal point of view.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Availability_heuristic\"\u003e\u003cstrong\u003eAvailability Heuristic\u003c/strong\u003e\u003c/a\u003e: People often make decisions based on information that is easily accessible or familiar to them rather than making a mental effort. When users see the same confirmation popups, they might automatically accept them based on their previous successful experience. Of course, sooner or later, it might not work, and the acceptance of required action can lead to bad consequences.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cognitive_miser\"\u003e\u003cstrong\u003eCognitive Miser\u003c/strong\u003e\u003c/a\u003e: The human mind is considered to be a cognitive miser due to the tendency of humans to think and solve problems in simpler and less effortful ways rather than in more sophisticated and effortful ways, regardless of intelligence. This explains why many users just click “yes” or “agree” without carefully reading the text.\u003c/li\u003e\u003cli\u003eQuite a representative example is \u003ca href=\"https://en.wikipedia.org/wiki/Banner_blindness\"\u003e\u003cstrong\u003ebanner blindness\u003c/strong\u003e\u003c/a\u003e, even though not related to confirmation but, in fact, revolves around the same human behavior idiosyncrasies.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eA reasonable question that may arise: What are the alternatives?\u003c/p\u003e\u003cp\u003eEven though we cannot entirely affect users’ behavior, there are a few tactics we can use.\u003c/p\u003e\u003ch3 id=\"delaying\"\u003eDelaying\u003c/h3\u003e\u003cp\u003eIn some scenarios, we can artificially delay the task execution in a graceful way.\u003c/p\u003e\u003cp\u003eOne of my favorite examples is an app called Glovo, which is a food delivery app. Let’s have a look at the three screens you will see when you order something.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"567\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png\" sizes=\"100vw\" alt=\"Workflow of a food delivery app that uses an illusion of progress.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eWorkflow of a food delivery app that uses an illusion of progress. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/13-food-delivery-verification-process.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe first screen is a cart with items you chose to buy (and an annoying promotion of subscription that takes ⅓ of the screen).\u003c/p\u003e\u003cp\u003eAfter you tap the “confirm order” button, you’ll see the second screen, which asks you whether everything is correct. However, the information appears gradually with fade-in animation. Also, you can see there is a progress bar, which is a \u003cstrong\u003efake one\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eAfter a few seconds, you’ll see another screen that shows that the app is trying to charge your card; this time, it’s a real process. After the transaction proceeds, you’ll see the status of the order and approximate delivery time.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePro tip\u003c/strong\u003e: \u003cem\u003eWhen you show the status of the order and visually highlight or animate the first step, it makes users more confident that the order will be completed. Because of the trick that is called \u003ca href=\"https://lawsofux.com/goal-gradient-effect/\"\u003eGoal-Gradient Effect\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eYou’ve just paid, and “something starts happening” (at least visually), which is a sign that \u003cem\u003e“Oh, they should have already started preparing my order. That’s nice!”\u003c/em\u003e\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png\" sizes=\"100vw\" alt=\"Real purchase action that takes place after an artificial delay.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eReal purchase action that takes place after an artificial delay. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/14-real-purchase-action.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe purpose of the screen with a fake progress bar is to let users verify the order details and confirm them.\u003c/p\u003e\u003cp\u003eBut this is done in a very exquisite way:\u003c/p\u003e\u003col\u003e\u003cli\u003eOn the first screen, you click \u003cem\u003e“confirm order”\u003c/em\u003e. It doesn’t invoke any modals or popups, such as \u003cem\u003e“Are you sure?”\u003c/em\u003e.\u003c/li\u003e\u003cli\u003eOn the second screen, users can see how information about their order appears right away, and the scroll bar at the bottom goes further. It seems like that app is doing something, but it’s an illusion. An illusion that makes you take another quick look at what you’ve just ordered.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIn the previous version of the app, you couldn’t even skip the process; you could only cancel it. Now they added the \u003cem\u003e“Continue”\u003c/em\u003e button, which is essentially \u003cem\u003e“Yes, I’m sure”\u003c/em\u003e confirmation.\u003c/p\u003e\u003cp\u003eThis means that we return back again to the drawbacks of classic confirmation modals since users can skip the process. But the approach is different: it’s a combination of a feedback loop from the app and skipping the process.\u003c/p\u003e\u003cp\u003eThis combination makes users pay attention to the address, order, and price at least sometimes, and it gives them time to cancel the order, while in the classic approach, the confirmation is \u003cem\u003e“yes or no?”\u003c/em\u003e which is more likely to be confirmed right away.\u003c/p\u003e\u003ch3 id=\"the-undo-option\"\u003eThe Undo Option\u003c/h3\u003e\u003cp\u003eThe undo pattern allows users to reverse an action they have just performed, providing a safety net that reduces anxiety around making mistakes.\u003c/p\u003e\u003cp\u003eUnlike confirmation modals that interrupt the workflow to ask for user confirmation, the undo pattern provides a smoother experience by allowing actions to be completed with the option to reverse them if needed.\u003c/p\u003e\u003ch4 id=\"when-to-use-it-2\"\u003eWhen To Use It\u003c/h4\u003e\u003cp\u003eIt works perfectly fine for non-destructive, reversible actions \u0026amp;mdashl actions that don’t have significant and immediate consequences:\u003c/p\u003e\u003cul\u003e\u003cli\u003eReversing actions when editing a document (The beloved \u003ckbd\u003ectrl\u003c/kbd\u003e + \u003ckbd\u003ez\u003c/kbd\u003e shortcut);\u003c/li\u003e\u003cli\u003eRemoving a file (if it goes to the trash bin first);\u003c/li\u003e\u003cli\u003eChanging the status of a task (e.g., if you accidentally marked a task completed);\u003c/li\u003e\u003cli\u003eDeleting a message in a chat;\u003c/li\u003e\u003cli\u003eApplying filters to a photo.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eCombined with a timer, you can extend the number of options since such tasks as sending an email or making a money transfer could be undone.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"267\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png\" sizes=\"100vw\" alt=\"Toast notification with undo action and timer.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eAn example of an undo toast with a timer. (\u003ca href=\"https://files.smashing.media/articles/how-manage-dangerous-actions-user-interfaces/15-undo-with-timer.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"when-you-cannot-use-it\"\u003eWhen You Cannot Use It\u003c/h4\u003e\u003cp\u003eIt’s not suitable for actions that have serious consequences, such as the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDeleting an account;\u003c/li\u003e\u003cli\u003eSubmitting legal documents;\u003c/li\u003e\u003cli\u003ePurchasing goods (refund is not the same as the undo option);\u003c/li\u003e\u003cli\u003eMaking requests for third-party APIs (in most cases).\u003c/li\u003e\u003c/ul\u003e\u003ch4 id=\"how-to-implement-them\"\u003eHow To Implement Them?\u003c/h4\u003e\u003col\u003e\u003cli\u003eThe most common way that most people use every day is to provide a shortcut (\u003ckbd\u003ectrl\u003c/kbd\u003e + \u003ckbd\u003ez\u003c/kbd\u003e). However, it’s constrained to some cases, such as text editors, moving files between folders, and so on.\u003c/li\u003e\u003cli\u003eToasts are probably the most common way to implement these web and mobile apps. The only thing that you should keep in mind is that it should stand out enough to be noticed. Hiding them in a corner with a tiny message and color that is not noticeable might not work — especially on wide screens.\u003c/li\u003e\u003cli\u003eA straightforward solution is simply to have a button that does the undo option. Preferably close to the button that evokes the action that you want to undo.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe undo option is tightly related to the concept called \u003cstrong\u003esoft deleting\u003c/strong\u003e, which is widely used in backend frameworks such as \u003ca href=\"https://laravel.com/docs/11.x/eloquent#soft-deleting\"\u003eLaravel\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe concept means that when users delete something via the UI, it \u003cem\u003elooks like it has been deleted\u003c/em\u003e, but in the database, we keep the data but mark it as deleted. The data is not lost, which is why the undo option is possible since we don’t actually delete anything but rather mark it as deleted.\u003c/p\u003e\u003cp\u003eThis is a good technique to ensure that data is never lost. However, not every table needs this.\u003c/p\u003e\u003cp\u003eFor example, if you delete an account and don’t want users to restore it (perhaps due to legal regulations), then you should erase the data completely. But in many cases, it might be a good idea to consider soft deleting. In the worst case, you’ll be able to manually restore user data if it cannot be done via the UI for some reason.\u003c/p\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eThere’s something I want everyone to keep in mind, regardless of who you are or what you do.\u003c/p\u003e\u003cp\u003eEvery situation is unique. A certain approach might work or fail for a variety of reasons. You might sometimes wonder why a specific decision was made, but you may not realize how many times the interface was revised based on real user feedback.\u003c/p\u003e\u003cp\u003eUser behavior is affected by many factors, including country, age, culture, education, familiarity with certain patterns, disabilities, and more.\u003c/p\u003e\u003cp\u003eWhat’s crucial is to \u003cstrong\u003estay in control of your data and users and be prepared to respond when something goes wrong\u003c/strong\u003e. Following best practices is important, but you must still verify if they work in your specific case.\u003c/p\u003e\u003cp\u003eJust like in chess, there are many rules — and even more exceptions.\u003c/p\u003e\u003ch3 id=\"further-reading\"\u003eFurther Reading\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/modality\"\u003eModality\u003c/a\u003e, Apple\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://medium.com/@joaopegb/ux-writing-an-effective-cancel-dialog-confirmation-on-web-539b73a39929\"\u003eAn effective ‘Cancel’ dialog confirmation on Web\u003c/a\u003e,” João Bexiga\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://joshwayne.com/posts/confirm-or-undo/\"\u003eConfirm or undo? Which is the better option?\u003c/a\u003e,” Josh Wayne\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://surajsinghbisht054.medium.com/understanding-soft-delete-and-hard-delete-in-software-development-best-practices-and-importance-539a935d71b5\"\u003eUnderstanding Soft Delete and Hard Delete\u003c/a\u003e,” Suraj Singh Bisht\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.nngroup.com/articles/confirmation-dialog/\"\u003eConfirmation Dialogs Can Prevent User Errors — If Not Overused\u003c/a\u003e,” Jakob Nielsen\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://uxdesign.cc/are-you-sure-you-want-to-do-this-microcopy-for-confirmation-dialogues-1d94a0f73ac6\"\u003eMicrocopy for confirmation dialogues\u003c/a\u003e,” Kinneret Yifrah\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.passkeys.io/\"\u003eWhat is a passkey?\u003c/a\u003e, passkeys.io\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(vf, il, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "27 min read",
  "publishedTime": "2024-09-27T15:00:00Z",
  "modifiedTime": "2024-09-27T15:00:00Z"
}
