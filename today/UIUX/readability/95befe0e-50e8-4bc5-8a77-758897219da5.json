{
  "id": "95befe0e-50e8-4bc5-8a77-758897219da5",
  "title": "Introduction to Ontology Concepts and Modeling",
  "link": "https://boxesandarrows.com/introduction-to-ontology-concepts-and-modeling/",
  "description": "What is ontology? An ontology is a formal system for modeling concepts and their relationships. Unlike relational database systems, which are essentially interconnected tables, ontologies put a premium on the relationships between concepts by storing the information in a graph database, or triplestore. (The following examples use data derived from PLOS, which makes all of its Open Access data and content available.) Relational databases are good at representing tabular data for one-to-one relationships: However, real-life data is seldom this tidy; The post Introduction to Ontology Concepts and Modeling appeared first on Boxes and Arrows.",
  "author": "Bob Kasenchak",
  "published": "Tue, 02 Nov 2021 13:00:00 +0000",
  "source": "http://boxesandarrows.com/rss/",
  "categories": [
    "Content Strategy",
    "Foundational Thinking",
    "Information Architecture",
    "content",
    "ontology",
    "taxonomy"
  ],
  "byline": "Bob Kasenchak, Ahren E. Lehnert",
  "length": 10256,
  "excerpt": "What is ontology? An ontology is a formal system for modeling concepts and their relationships. Unlike relational database systems, which are essentially interconnected tables, ontologies put a premium on the relationships between concepts by storing the information in a graph database, or triplestore. (The following examples use data derived from PLOS, which makes all of its Open Access data and content available.) Relational databases are good at representing tabular data for one-to-one relationships: However, real-life data is seldom this tidy;",
  "siteName": "Boxes and Arrows",
  "favicon": "",
  "text": "What is ontology? An ontology is a formal system for modeling concepts and their relationships. Unlike relational database systems, which are essentially interconnected tables, ontologies put a premium on the relationships between concepts by storing the information in a graph database, or triplestore. (The following examples use data derived from PLOS, which makes all of its Open Access data and content available.) Relational databases are good at representing tabular data for one-to-one relationships: Figure 1: Data with one-to-one relationships is easily represented in tabular form However, real-life data is seldom this tidy; many-to-one and one-to-many relationships abound, which require additional tables and key-value pairs to represent data. Moreover, the relationships between the data elements is implied by the column headers but nowhere made explicit; you have to infer that “article number 1009086” “has the topic” “Cancer”. So while the information below would require several (at least two) tables to represent: Figure 2: Data with many-to-one relationships requires multiple tables and gets messy quickly …the same information is easily represented in a graph: Figure 3: A graph-based approach is a natural fit for this data Crucially, the relationships between the objects (data elements) in the graph are, explicitly, objects in the system; they are represented by the lines, or edges, between the round nodes. Further, we can expand any node on the graph to see additional connections. Figure 4: This information network modeled as a graph is easy to apprehend at a glance. Lastly, note that the edges (relationships) in the graph are labeled and (potentially) directional. The relationships in the graph aren’t implied through columns with headers, but rather represented directly as objects in the graph (and in the system!). That is to say: in an ontology, both the Boxes and the Arrows are of equal importance. We might also say that objects and relationships are both first-class data citizens. Additionally, ontologies are: Extensible and customizable: existing ontologies may be reused and customizedShareable: ontologies are designed for re-useInteroperable: ontologies can be shared between systems (because they are standards-based)Machine-readable: ontologies are expressed using URIs (or Uniform Resource Identifiers) for identifiers which can be resolved using any compatible systemAmenable to inferencing: ontologies allow reasoning over the graph to discover new, implied relationships and make them explicit; this can be used for machine learning-type applications Ontologies are stored in RDF (short for Resource Description Framework), a Worldwide Web Consortium (or W3C) standard designed for this purpose. RDF is based on the concept of triples, which store information in a simple three-part format describing the two objects to be related (the Subject and Object) and the relationship (Predicate) linking them. In this way, simple factual information can be modeled in a way that resembles how we understand facts. A graph is essentially the sum total of all of the triples in the system showing all of the concepts and relationships. Figure 5: Many graphs are, of course, much larger than this one. Is an ontology just a fancy taxonomy? Yes and no. All taxonomies can be expressed as ontologies, but ontologies admit more relationships between concepts than standard taxonomic hierarchical and associative relationships. This is outlined in the simple table below: An ontology may include one or more taxonomies. A useful (but incomplete) way to begin thinking about ontologies is to imagine several taxonomies linked together. This example (an upper ontology) from scholarly publishing illustrates the classes of objects and their relationships in a model of the data in that ecosystem: Figure 6: An upper ontology is the empty data model showing the permitted relationships between schemes of objects, including both inter- and intra-scheme relationships. Circular lines represent relationships of a class with itself, so the UNESCO Thesaurus (a topical taxonomy) is permitted to have Broader-Narrower concepts, while the list of Journals is flat. Note that this scheme does not have any concepts; it is the upper ontology only: the model of abstract relationships between classes of objects. To complicate matters further, SKOS is an RDF-compliant ontology data model designed to structure and share taxonomies. Ontologies essentially comprise two parts: the upper ontology, which is the schema used to define objects, their attributes, and relationships in a general way; and the lower (or domain) ontology, which is the data populating the schema(s). As noted, lower ontologies may be one or more taxonomies, flat lists (for example, of people), or any other collection of objects, each with its own set of properties (fields) and permitted relationships. Here is an example of an upper ontology I devised to model whisk(e)ys. Note that there is no information about individual whiskies, distilleries, and so on; the model merely shows the classes of objects and the permitted relationships between them: Figure 7: Modeling your upper ontology requires explicating attributes and relationships for each scheme.  SKOS is therefore an upper ontology (an empty taxonomy schema) used to describe and store elements of a taxonomy, the terms and relationships of which comprise a lower ontology. In essence, the upper ontology is the schema describing the permitted objects, attributes, and relationships, while the lower ontology comprises the objects, attributes, and relationships themselves. Many upper and lower ontologies are published as open data and can be adopted and re-used (given the appropriate permissions, if applicable). Why would I need an ontology? Ontologies are useful for expressing data in which the relationships between objects are important. In relational database systems (which are, to be clear, exceedingly useful for many applications) relationships between data in fields are implied by, for example, column headers, as shown above. In an ontology, those relationships are made explicit and exist as objects in the system. This makes certain types of queries less expensive (in terms of processing time and power) and allows the traversal of information. Ontologies, as mentioned, also allow for inferencing: the addition of new triples implied by, but not explicitly depicted in, the graph. The stock example is still a good one. If I have triples stating …as a person I can infer that John lives in England. I can also query this information and, if I like, add the triple “John lives in England” to my graph. Graph querying is done using a language called SPARQL (for which you can find learning resources) that allows you to ask questions about and add information to your graph. Ontologies are great for modeling,and storing information about, complex information ecosystems, workflows, products, customer information, and anything else that requires an emphasis on the relationships between objects. How do I get started modeling an ontology? As with any data modeling, begin with the objects you want to model and their attributes. Brainstorming the types (or classes) of concepts (nodes, boxes) and their relationships (edges, arrows) is a good way to begin. For example, you may be representing People (customers, users, employees) which will require fields like name(s), email, location information, birthdate, or whatever other information is relevant to your systems and project. Another class of object might be Organizations (companies, clients, competitors, educational institutions, or whatever is relevant) which will require different fields (that is: a different set of fields) than People, which is what distinguishes them as a type of object. Commonly (although certainly not universally) some kind of conceptual or topical vocabulary—probably a taxonomy or thesaurus—may be used to classify content, expertise, products, or anything else. This will require another set of attributes with data to describe the concepts like definitions, links to Wikipedia or some other source with additional information, and Linked Data URIs to places like DBpedia or Wikidata—essentially, hooks to other ontologies to assert equivalence. After drafting out the classes and their attributes, you can define the relationships (edges, lines) between the nodes. This can be basically anything you can imagine. Be precise; ontological relationships can be as richly descriptive as you like, so feel free to model exactly the useful relationships between objects in your information ecosystem. Remember, though: you don’t need to get everything in on the first try. Ontologies are extensible, so it’s sensible to try to model and solve for some specific problem as you can always extend the ontology to include more later on. It’s also crucial to remember that many upper ontologies (bundles of attributes and relationships, and often classes) are open and free to reuse. There’s no sense in inventing a field called “Title” for your content when Dublin Core already has such a field; it’s also easier to link your ontology to other ontologies if you reuse common and existing attributes and relationships. Essentially, to create your ontology you can mix-and-match existing attributes and relationships gathered from other ontologies and combine them with your own attributes and relationships to create the data model you need. Since ontologies are interoperable (essentially: everything is a URI, following Linked Data principles) you can extend and customize your ontology schema as your needs grow. We hope this serves as a good introduction without getting bogged down in the overly technical. We are always happy to talk ontologies; please reach out to bob.kasenchak@synaptica.com or ahren.lehnert@synaptica.com if you like. Bob Kasenchak and Ahren Lehnert work for Synaptica, a leading vendor of taxonomy and ontology solutions. Featured image: “The Flavour Thesaurus” by duncan is licensed under CC BY-NC 2.0",
  "image": "https://boxesandarrows.com/wp-content/uploads/2021/10/5361759700_40ef91c7a3_b.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\n\u003ch3\u003e\u003cstrong\u003eWhat is ontology?\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eAn ontology is a formal system for modeling concepts and their relationships. Unlike relational database systems, which are essentially interconnected tables, ontologies put a premium on the relationships between concepts by storing the information in a graph database, or triplestore.\u003c/p\u003e\n\n\n\n\u003cp\u003e(The following examples use data derived from \u003ca href=\"https://plos.org/\"\u003ePLOS\u003c/a\u003e, which makes all of its \u003ca href=\"https://sparcopen.org/open-access/\"\u003eOpen Access\u003c/a\u003e data and content available.)\u003c/p\u003e\n\n\n\n\u003cp\u003eRelational databases are good at representing tabular data for one-to-one relationships:\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_1.png\"\u003e\u003cimg decoding=\"async\" width=\"604\" height=\"107\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_1.png\" alt=\"tabular data with article, journal, author, and topic columns\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_1.png 604w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_1-300x53.png 300w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_1-600x107.png 600w\" sizes=\"(max-width: 604px) 100vw, 604px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 1: Data with one-to-one relationships is easily represented in tabular form\u003cbr/\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eHowever, real-life data is seldom this tidy; many-to-one and one-to-many relationships abound, which require additional tables and key-value pairs to represent data. Moreover, the relationships between the data elements is implied by the column headers but nowhere made explicit; you have to infer that “article number 1009086” “has the topic” “Cancer”.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo while the information below would require several (at least two) tables to represent:\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_2.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"591\" height=\"237\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_2.png\" alt=\"table columns labeled article, journal, author, topic for many-to-one relationships\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_2.png 591w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_2-300x120.png 300w\" sizes=\"(max-width: 591px) 100vw, 591px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 2: Data with many-to-one relationships requires multiple tables and gets messy quickly\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e…the same information is easily represented in a graph:\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_3.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"462\" height=\"422\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_3.png\" alt=\"A radial graph depicting topics, authors, journal, and article with relationships illustrated. Caption: Figure 3: A graph-based approach is a natural fit for this data\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_3.png 462w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_3-300x274.png 300w\" sizes=\"(max-width: 462px) 100vw, 462px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 3: A graph-based approach is a natural fit for this data\u003cbr/\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eCrucially, the relationships between the objects (data elements) in the graph are, explicitly, objects in the system; they are represented by the lines, or edges, between the round nodes.\u003c/p\u003e\n\n\n\n\u003cp\u003eFurther, we can expand any node on the graph to see additional connections.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"510\" height=\"513\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4.png\" alt=\"multiple radial graphs showing complex relationships. Caption: Figure 4: This information network modeled as a graph is easy to apprehend at a glance.\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4.png 510w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4-298x300.png 298w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4-150x150.png 150w\" sizes=\"(max-width: 510px) 100vw, 510px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 4: This information network modeled as a graph is easy to apprehend at a glance.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eLastly, note that the edges (relationships) in the graph are labeled and (potentially) directional. The relationships in the graph aren’t implied through columns with headers, but rather represented directly as objects in the graph (and in the system!).\u003c/p\u003e\n\n\n\n\u003cp\u003eThat is to say: in an ontology, both the \u003cem\u003eBoxes\u003c/em\u003e and the \u003cem\u003eArrows\u003c/em\u003e are of equal importance. We might also say that objects and relationships are both \u003cem\u003efirst-class data citizens\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAdditionally, ontologies are:\u003c/p\u003e\n\n\n\n\u003col\u003e\u003cli\u003eExtensible and customizable: existing ontologies may be reused and customized\u003c/li\u003e\u003cli\u003eShareable: ontologies are designed for re-use\u003c/li\u003e\u003cli\u003eInteroperable: ontologies can be shared between systems (because they are standards-based)\u003c/li\u003e\u003cli\u003eMachine-readable: ontologies are expressed using URIs (or \u003ca href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\"\u003eUniform Resource Identifiers\u003c/a\u003e) for identifiers which can be resolved using any compatible system\u003c/li\u003e\u003cli\u003eAmenable to inferencing: ontologies allow reasoning over the graph to discover new, implied relationships and make them explicit; this can be used for machine learning-type applications\u003c/li\u003e\u003c/ol\u003e\n\n\n\n\u003cp\u003eOntologies are stored in \u003ca href=\"https://www.w3.org/RDF/\"\u003eRDF\u003c/a\u003e (short for Resource Description Framework), a \u003ca href=\"https://www.w3.org/\"\u003eWorldwide Web Consortium\u003c/a\u003e (or W3C) standard designed for this purpose. RDF is based on the concept of \u003ca href=\"https://www.synaptica.com/triples-triads-and-semantics/\"\u003etriples\u003c/a\u003e, which store information in a simple three-part format describing the two objects to be related (the Subject and Object) and the relationship (Predicate) linking them.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4a.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"681\" height=\"158\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4a.png\" alt=\"Simple table showing subject, predicate, and object.\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4a.png 681w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_4a-300x70.png 300w\" sizes=\"(max-width: 681px) 100vw, 681px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn this way, simple factual information can be modeled in a way that resembles how we understand facts.\u003c/p\u003e\n\n\n\n\u003cp\u003eA graph is essentially the sum total of all of the triples in the system showing all of the concepts and relationships.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"442\" height=\"427\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5.png\" alt=\"Figure 5: large, complex radial graph\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5.png 442w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5-300x290.png 300w\" sizes=\"(max-width: 442px) 100vw, 442px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 5: Many graphs are, of course, much larger than this one.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eIs an ontology just a fancy taxonomy?\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eYes and no. All taxonomies can be expressed as ontologies, but ontologies admit more relationships between concepts than standard taxonomic hierarchical and associative relationships. This is outlined in the simple table below:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5a.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"608\" height=\"147\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5a.png\" alt=\"Simple table showing taxonomic/thesaural relationships and ontological relationships.\nColumn 1 says Taxonomic (Thesaural) Relationships with rows reading Broader Term-Narrower Term, and Related term. Column 2 says Ontological relationships with one row reading Anything you can think of.\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5a.png 608w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_5a-300x73.png 300w\" sizes=\"(max-width: 608px) 100vw, 608px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAn ontology \u003cem\u003emay\u003c/em\u003e include one or more taxonomies. A useful (but incomplete) way to begin thinking about ontologies is to imagine several taxonomies linked together. This example (an upper ontology) from scholarly publishing illustrates the classes of objects and their relationships in a model of the data in that ecosystem:\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_6.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"562\" height=\"356\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_6.png\" alt=\"Figure 6: An upper ontology is the empty data model showing the permitted relationships between schemes of objects, including both inter- and intra-scheme relationships.\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_6.png 562w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_6-300x190.png 300w\" sizes=\"(max-width: 562px) 100vw, 562px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 6: An upper ontology is the empty data model showing the permitted relationships between schemes of objects, including both inter- and intra-scheme relationships.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eCircular lines represent relationships of a class with itself, so the UNESCO Thesaurus (a topical taxonomy) is permitted to have Broader-Narrower concepts, while the list of Journals is flat. Note that this scheme does not have any concepts; it is the upper ontology only: the model of abstract relationships between classes of objects.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo complicate matters further, \u003ca href=\"https://www.w3.org/2004/02/skos/\"\u003eSKOS\u003c/a\u003e is an RDF-compliant ontology data model designed to structure and share taxonomies. Ontologies essentially comprise two parts: the upper ontology, which is the schema used to define objects, their attributes, and relationships in a general way; and the lower (or domain) ontology, which is the data populating the schema(s). As noted, lower ontologies may be one or more taxonomies, flat lists (for example, of people), or any other collection of objects, each with its own set of properties (fields) and permitted relationships.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is an example of an upper ontology I devised to model whisk(e)ys. Note that there is no information about individual whiskies, distilleries, and so on; the model merely shows the classes of objects and the permitted relationships between them:\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"414\" height=\"480\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7.png\" alt=\"Figure 7: Modeling your upper ontology requires explicating attributes and relationships for each scheme. \" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7.png 414w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7-259x300.png 259w\" sizes=\"(max-width: 414px) 100vw, 414px\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eFigure 7: Modeling your upper ontology requires explicating attributes and relationships for each scheme. \u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eSKOS is therefore an \u003ca href=\"https://en.wikipedia.org/wiki/Upper_ontology\"\u003eupper ontology\u003c/a\u003e (an empty taxonomy schema) used to describe and store elements of a taxonomy, the terms and relationships of which comprise a \u003cem\u003elower ontology\u003c/em\u003e. In essence, the upper ontology is the schema describing the permitted objects, attributes, and relationships, while the lower ontology comprises the objects, attributes, and relationships themselves.\u003c/p\u003e\n\n\n\n\u003cp\u003eMany upper and lower ontologies are published as open data and can be adopted and re-used (given the appropriate permissions, if applicable).\u003c/p\u003e\n\n\n\n\u003ch3\u003eWhy would I need an ontology?\u003c/h3\u003e\n\n\n\n\u003cp\u003eOntologies are useful for expressing data in which the relationships between objects are important. In relational database systems (which are, to be clear, exceedingly useful for many applications) relationships between data in fields are implied by, for example, column headers, as shown above. In an ontology, those relationships are made explicit and exist as objects in the system.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis makes certain types of queries less expensive (in terms of processing time and power) and allows the traversal of information. Ontologies, as mentioned, also allow for inferencing: the addition of new triples implied by, but not explicitly depicted in, the graph. The stock example is still a good one. If I have triples stating\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7a.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"352\" height=\"145\" src=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7a.png\" alt=\"Table columns read Subject, Predicate, Object. Row says John, lives in, London.\" srcset=\"https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7a.png 352w, https://boxesandarrows.com/wp-content/uploads/2021/10/ont_image_7a-300x124.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e…as a person I can infer that John \u003cem\u003elives in\u003c/em\u003e England. I can also query this information and, if I like, add the triple “John \u003cem\u003elives in\u003c/em\u003e England” to my graph.\u003c/p\u003e\n\n\n\n\u003cp\u003eGraph querying is done using a language called \u003ca href=\"https://www.w3.org/TR/rdf-sparql-query/\"\u003eSPARQL\u003c/a\u003e (for which you can find learning \u003ca href=\"http://www.learningsparql.com/\"\u003eresources\u003c/a\u003e) that allows you to ask questions about and add information to your graph.\u003c/p\u003e\n\n\n\n\u003cp\u003eOntologies are great for modeling,and storing information about, complex information ecosystems, workflows, products, customer information, and anything else that requires an emphasis on the relationships between objects.\u003c/p\u003e\n\n\n\n\u003ch3\u003eHow do I get started modeling an ontology?\u003c/h3\u003e\n\n\n\n\u003cp\u003eAs with any data modeling, begin with the objects you want to model and their attributes. Brainstorming the types (or \u003cem\u003eclasses\u003c/em\u003e) of concepts (nodes, boxes) and their relationships (edges, arrows) is a good way to begin.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, you may be representing People (customers, users, employees) which will require fields like name(s), email, location information, birthdate, or whatever other information is relevant to your systems and project. Another class of object might be Organizations (companies, clients, competitors, educational institutions, or whatever is relevant) which will require different fields (that is: a different set of fields) than People, which is what distinguishes them as a \u003cem\u003etype of object\u003c/em\u003e. Commonly (although certainly not universally) some kind of conceptual or topical vocabulary—probably a taxonomy or thesaurus—may be used to classify content, expertise, products, or anything else. This will require another set of attributes with data to describe the concepts like definitions, links to Wikipedia or some other source with additional information, and Linked Data URIs to places like \u003ca href=\"https://www.dbpedia.org/\"\u003eDBpedia\u003c/a\u003e or \u003ca href=\"https://www.wikidata.org/wiki/Wikidata:Main_Page\"\u003eWikidata\u003c/a\u003e—essentially, hooks to other ontologies to assert equivalence.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter drafting out the classes and their attributes, you can define the relationships (edges, lines) between the nodes. This can be basically anything you can imagine. Be precise; ontological relationships can be as richly descriptive as you like, so feel free to model exactly the useful relationships between objects in your information ecosystem.\u003c/p\u003e\n\n\n\n\u003cp\u003eRemember, though: you don’t need to get everything in on the first try. Ontologies are \u003cem\u003eextensible\u003c/em\u003e, so it’s sensible to try to model and solve for some specific problem as you can always extend the ontology to include more later on.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s also crucial to remember that many upper ontologies (bundles of attributes and relationships, and often classes) are open and free to reuse. There’s no sense in inventing a field called “Title” for your content when \u003ca href=\"https://dublincore.org/\"\u003eDublin Core\u003c/a\u003e already has such a field; it’s also easier to link your ontology to other ontologies if you reuse common and existing attributes and relationships.\u003c/p\u003e\n\n\n\n\u003cp\u003eEssentially, to create your ontology you can mix-and-match existing attributes and relationships gathered from other ontologies and combine them with your own attributes and relationships to create the data model you need. Since ontologies are interoperable (essentially: everything is a URI, following Linked Data principles) you can extend and customize your ontology schema as your needs grow.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe hope this serves as a good introduction without getting bogged down in the overly technical. We are always happy to talk ontologies; please reach out to \u003ca href=\"mailto:bob.kasenchak@synaptica.com\"\u003ebob.kasenchak@synaptica.com\u003c/a\u003e or \u003ca href=\"mailto:ahren.lehnert@synaptica.com\"\u003eahren.lehnert@synaptica.com\u003c/a\u003e if you like.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eBob Kasenchak and Ahren Lehnert work for \u003ca href=\"https://www.synaptica.com/triples-triads-and-semantics/\"\u003eSynaptica\u003c/a\u003e, a leading vendor of taxonomy and ontology solutions.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eFeatured image: \u003ca target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://www.flickr.com/photos/34427470616@N01/5361759700\"\u003e“The Flavour Thesaurus”\u003c/a\u003e by \u003ca href=\"https://www.flickr.com/photos/34427470616@N01\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eduncan\u003c/a\u003e is licensed under \u003ca href=\"https://creativecommons.org/licenses/by-nc/2.0/?ref=ccsearch\u0026amp;atype=rich\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCC BY-NC 2.0\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2021-11-02T13:00:00Z",
  "modifiedTime": "2021-11-01T21:49:03Z"
}
