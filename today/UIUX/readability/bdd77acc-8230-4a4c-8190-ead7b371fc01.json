{
  "id": "bdd77acc-8230-4a4c-8190-ead7b371fc01",
  "title": "How To Build Custom Data Visualizations Using Luzmo Flex",
  "link": "https://smashingmagazine.com/2024/09/how-build-custom-data-visualizations-luzmo-flex/",
  "description": "Bringing data to life in your application can be done without the usual headaches. Paul Scanlon shows you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data.",
  "author": "Paul Scanlon",
  "published": "Thu, 12 Sep 2024 11:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 23069,
  "excerpt": "Bringing data to life in your application can be done without the usual headaches. Paul Scanlon shows you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "16 min readData Visualization, Workflow, UX, DesignBringing data to life in your application can be done without the usual headaches. Paul Scanlon shows you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data.In this article, I’ll introduce you to Luzmo Flex, a new feature from the Luzmo team who have been working hard making developer tooling to flatten the on-ramp for analytics reporting and data visualization.With Luzmo Flex, you can hook up a dataset and create beautifully crafted, fully customizable interactive charts that meet your reporting needs. They easily integrate and interact with other components of your web app, allowing you to move away from a traditional “dashboard” interface and build more bespoke data products.While many charting libraries offer similar features, I often found it challenging to get the data into the right shape that the library needed. In this article, I’ll show you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data!What Is Luzmo Flex?Well, it’s two things, really. First of all, Luzmo is a low-code platform for embedded analytics. You can create datasets from just about anything, connect them to APIs like Google Analytics or your PostgreSQL database, or even upload static data in a .csv file and start creating data visualizations with drag and drop.Secondly, Luzmo Flex is their new React component that can be configured to create custom data visualizations. Everything from the way you query your data to the way you display it can be achieved through code using the LuzmoVizItemComponent.What makes Luzmo Flex unique is that you can reuse the core functionalities of Luzmo’s low-code embedded analytics platform in your custom-coded components.That means, besides creating ready-to-use datasets, you can set up functions like the following out-of-the-box:Multi-tenant analytics: Showing different data or visualizations to different users of your app.Localization: Displaying charts in multiple languages, currencies, and timezones without much custom development.Interactivity: Set up event listeners to create complex interactivity between Luzmo’s viz items and any non-Luzmo components in your app.What Can You Build With Luzmo Flex?By combining these off-the-shelf functions with flexibility through code, Luzmo Flex makes a great solution for building bespoke data products that go beyond the limits of a traditional dashboard interface. Below are a few examples of what that could look like.Report BuilderA custom report builder that lets users search and filter a dataset and render it out using a number of different charts.Luzmo Flex: Report builder. (Large preview)Filter PanelEnable powerful filtering using HTML Select inputs, which will update each chart shown on the page.Luzmo Flex:Dashboard filter panel. (Large preview)Wearables DashboardOr how about a sleep tracker hooked up to your phone to track all those important snoozes?Luzmo Flex: Wearables Dashboard. (Large preview)When to Consider Luzmo Flex vs Chart LibrariesWhen building data-intensive applications, using something like Recharts, a well-known React charting library, you’ll likely need to reformat the data to fit the required shape. For instance, if I request the top 3 page views from the last seven days for my site, paulie.dev, I would have to use the Google Analytics API using the following query.import dotenv from 'dotenv'; import { BetaAnalyticsDataClient } from '@google-analytics/data'; dotenv.config(); const credentials = JSON.parse( Buffer.from(process.env.GOOGLE_APPLICATION_CREDENTIALS_BASE64, 'base64').toString('utf-8') ); const analyticsDataClient = new BetaAnalyticsDataClient({ credentials, }); const [{ rows }] = await analyticsDataClient.runReport({ property: `properties/${process.env.GA4_PROPERTY_ID}`, dateRanges: [ { startDate: '7daysAgo', endDate: 'today', }, ], dimensions: [ { name: 'fullPageUrl', }, { name: 'pageTitle', }, ], metrics: [ { name: 'totalUsers', }, ], limit: 3, metricAggregations: ['MAXIMUM'], }); The response would look something like this:[ { \"dimensionValues\": [ { \"value\": \"www.paulie.dev/\", \"oneValue\": \"value\" }, { \"value\": \"Paul Scanlon | Home\", \"oneValue\": \"value\" } ], \"metricValues\": [ { \"value\": \"61\", \"oneValue\": \"value\" } ] }, { \"dimensionValues\": [ { \"value\": \"www.paulie.dev/posts/2023/11/a-set-of-sign-in-with-google-buttons-made-with-tailwind/\", \"oneValue\": \"value\" }, { \"value\": \"Paul Scanlon | A set of: \\\"Sign In With Google\\\" Buttons Made With Tailwind\", \"oneValue\": \"value\" } ], \"metricValues\": [ { \"value\": \"41\", \"oneValue\": \"value\" } ] }, { \"dimensionValues\": [ { \"value\": \"www.paulie.dev/posts/2023/10/what-is-a-proxy-redirect/\", \"oneValue\": \"value\" }, { \"value\": \"Paul Scanlon | What Is a Proxy Redirect?\", \"oneValue\": \"value\" } ], \"metricValues\": [ { \"value\": \"23\", \"oneValue\": \"value\" } ] } ] To make that data work with Recharts, I’d need to reformat it so it conforms to the following data shape.[ { \"name\": \"Paul Scanlon | Home\", \"value\": 61 }, { \"name\": \"Paul Scanlon | A set of: \\\"Sign In With Google\\\" Buttons Made With Tailwind\", \"value\": 41 }, { \"name\": \"Paul Scanlon | What Is a Proxy Redirect?\", \"value\": 23 } ] To accomplish this, I’d need to use an Array.prototype.map() to iterate over each item, destructure the relevant data and return a key-value pair for the name and value for each.const data = response.rows.map((row) =\u003e { const { dimensionValues, metricValues } = row; const pageTitle = dimensionValues[1].value; const totalUsers = parseInt(metricValues[0].value); return { name: pageTitle, value: totalUsers, }; }); And naturally, if you’re reformatting data this way in your application, you’d also want to write unit tests to ensure the data is always formatted correctly to avoid breaking your application… and all of this before you even get on to creating your charts!With Luzmo Flex, all of this goes away, leaving you more time to focus on which data to display and how best to display it.The First Steps to Building Bespoke Data ProductsTypically, when building user interfaces that display data insights, your first job will be to figure out how to query the data source. This can take many forms, from RESTful API requests to direct database queries or sometimes reading from static files. Your next job will be figuring out when and how often these requests need to occur.For data that rarely changes: Perhaps a query in the build step will work.For data that changes regularly: A server-side request on page load.For ever-changing data: A client-side request that polls an API on an interval.Each will likely inform your application’s architecture, and there’s no single solution to this. Your last job, as mentioned, will be wrangling the responses, reformatting the data, and displaying it in the UI.Below, I’ll show you how to do this using Luzmo Flex by using a simple example product.What We’re Building: Custom Data Visualizations As CodeHere’s a screenshot of a simple data product I’ve built that displays three different charts for different reporting dimensions exposed by the Google Analytics API for page views for my site, paulie.dev, from the last seven days.You can find all the code used in this article on the following link:https://github.com/luzmo-official/luzmo-flex-tutorial(Large preview)Getting Started With LuzmoBefore we get going, hop over to Luzmo and sign up for a free trial. You might also like to have a read of one of the getting started guides listed below. In this article, I’ll be using the Next.js starter.Getting started with Luzmo Data Visualization and Next.jshttps://github.com/luzmo-official/luzmo-getting-started-next-jsGetting started with Luzmo Data Visualization and Astrohttps://github.com/luzmo-official/luzmo-getting-started-astroCreating a Google Analytics DatasetTo create data visualization, you’ll first need data! To achieve this using Luzmo, head over to the dashboard, select Datasets from the navigation, and select GA4 Google Analytics. Follow the steps shown in the UI to connect Luzmo with your Google Analytics account.(Large preview)With the setup complete, you can now select which reporting dimensions to add to your dataset. To follow along with this article, select Custom selection.(Large preview)Lastly, select the following using the search input. Device Category, Page Title, Date, and Total users, then click Import when you’re ready.(Large preview)You now have all the data required to build the Google Analytics dashboard. You can access the dataset ID from the URL address bar in your browser. You’ll need this in a later step.(Large preview)If you’ve followed along from either of the first two getting started guides, you’ll have your API Key, API Token, App server, and API host environment variables set up and saved in a .env file.Install DependenciesIf you’ve cloned one of the starter repositories, run the following to install the required dependencies.npm install Next, install the Luzmo React Embed dependency which exports the LuzmoVizItemComponent.npm install @luzmo/react-embed@latest Now, find page.tsx located in the src/app directory, and add your dataset id as shown below.Add the access object from the destructured response and pass access.datasets[0].id onto the LuzmoClientComponent component using a prop named datasetId.// src/app/page.tsx + import dynamic from 'next/dynamic'; import Luzmo from '@luzmo/nodejs-sdk'; - import LuzmoClientComponent from './components/luzmo-client-component'; + const LuzmoClientComponent = dynamic(() =\u003e import('./components/luzmo-client-component'), { ssr: false, }); const client = new Luzmo({ api_key: process.env.LUZMO_API_KEY!, api_token: process.env.LUZMO_API_TOKEN!, host: process.env.NEXT_PUBLIC_LUZMO_API_HOST!, }); export default async function Home() { const response = await client.create('authorization', { type: 'embed', username: 'user id', name: 'first name last name', email: 'name@email.com', access: { datasets: [ { - id: '\u003cdataset_id\u003e', + id: '42b43db3-24b2-45e7-98c5-3fcdef20b1a3', rights: 'use', }, ], }, }); - const { id, token } = response; + const { id, token, access } = response; - return \u003cLuzmoClientComponent authKey={id} authToken={token} /\u003e; + return \u003cLuzmoClientComponent authKey={id} authToken={token} datasetId={access.datasets[0].id} /\u003e; } And lastly, find luzmo-client-component.tsx located in src/app/components. This is where you’ll be creating your charts.Building a Donut ChartThe first chart you’ll create is a Donut chart that shows the various devices used by visitors to your site.(Large preview)Add the following code to luzmo-client-component.tsx component.// src/app/component/luzmo-client-component.tsx 'use client'; + import { LuzmoVizItemComponent } from '@luzmo/react-embed'; interface Props { authKey: string; authToken: string; + datasetId: string; } - export default function LuzmoClientComponent({ authKey, authToken}: Props) { + export default function LuzmoClientComponent({ authKey, authToken, datasetId }: Props) { + const date = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(); // creates a date 7 days ago console.log({ authKey, authToken }); return ( \u003csection\u003e + \u003cdiv className='w-1/2 h-80'\u003e + \u003cLuzmoVizItemComponent + appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER} + apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST} + authKey={authKey} + authToken={authToken} + type='donut-chart' + options={{ + title: { + en: `Devices from last 7 days`, + }, + display: { + title: true, + }, + mode: 'donut', + legend: { + position: 'bottom', + }, + }} + slots={[ + { + name: 'measure', + content: [ + { + label: { + en: 'Total users', + }, + column: '\u003ccolumn id\u003e', // Total users + set: datasetId, + type: 'numeric', + format: '.4f', + }, + ], + }, + { + name: 'category', + content: [ + { + label: { + en: 'Device category', + }, + column: '\u003ccolumn id\u003e', // Device category + set: datasetId, + type: 'hierarchy', + }, + ], + }, + ]} + filters={[ + { + condition: 'or', + filters: [ + { + expression: '? \u003e= ?', + parameters: [ + { + column_id: '\u003ccolumn id\u003e', // Date + dataset_id: datasetId, + }, + date, + ], + }, + ], + }, + ]} + /\u003e + \u003cdiv/\u003e \u003c/section\u003e ); } There’s quite a lot going on in the above code snippet, and I will explain it all in due course, but first, I’ll need to cover a particularly tricky part of the configuration.Column IDsYou’ll notice the filters parameters, measure, and category content all require a column id.In the filters parameters, the key is named column_id, and in the measure and category, the key is named column. Both of these are actually the column IDs from the dataset. And here’s how you can find them.Back in the Luzmo dashboard, click into your dataset and look for the “more dots” next to each column heading. From the menu, select Copy column id. Add each column ID to the keys in the configuration objects.In my example, I’m using the Total users for the measure, the Device category for the category, and the Date for the filter.(Large preview)If you’ve added the column IDs correctly, you should be able to see a rendered chart on your screen!… and as promised, here’s a breakdown of the configuration.Initial Props Donut chartThe first part is fairly straightforward. appServer and authKey are the environment variables you saved to your .env file, and authKey and authToken are destructured from the authorization request and passed into this component via props.The type prop determines which type of chart to render. In my example, I’m using donut-chart, but you could choose from one of the many options available, area-chart, bar-chart, bubble-chart, box-plot, and many more. You can see all the available options in the Luzmo documentation under Chart docs.\u003cLuzmoVizItemComponent appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER} apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST} authKey={authKey} authToken={authToken} type='donut-chart' The one thing I should point out is my use of Tailwind classes: w-1/2 (width: 50%) and h-80 (height: 20rem). The LuzmoVizItemComponent ships with height 100%, so you’ll need to wrap the component with an element that has an actual height, or you won’t be able to see the chart on the page as it could be 100% of the height of an element with no height.Donut Chart OptionsThe options object is where you can customize the appearance of your chart. It accepts many configuration options, among which:A title for the chart that accepts a locale with corresponding text to display.A display title value to determine if the title is shown or not.A mode to determine if the chart is to be of type donut or pie chart.A legend option to determine where the legend can be positioned.All the available configuration options can be seen in the Donut chart documentation.options={{ title: { en: `Devices from last 7 days`, }, display: { title: true, }, mode: 'donut', legend: { position: 'bottom', }, }} Donut Chart SlotsSlots are where you can configure which column from your dataset to use for the category and measure.Slots can contain multiple measures, useful for displaying two columns of data per chart, but if more than two are used, one will become the measure.Each measure contains a content array. The content array, among many other configurations, can include the following:A label and locale,The column id from the dataset,The datasetId,The type of data you’re displaying,A format for the data.The format used here is Python syntax for floating-point numbers; it’s similar to JavaScript’s .toFixed() method, e.g number.toFixed(4).The hierarchy type is ​​the Luzmo standard data type. Any text column is considered as an hierarchical data type.You can read more in the Donut chart documentation about available configuration options for slots.slots={[ { name: 'measure', content: [ { label: { en: 'Total users', }, column: '\u003ccolumn id\u003e', // Total users set: datasetId, type: 'numeric', format: '.4f', }, ], }, { name: 'category', content: [ { label: { en: 'Device category', }, column: '\u003ccolumn id\u003e', // Device category set: datasetId, type: 'hierarchy', }, ], }, ]} Donut Chart FiltersThe filters object is where you can apply conditions that will determine which data will be shown. In my example, I only want to show data from the last seven days. To accomplish this, I first create the date variable:const date = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(); This would produce an ISO date string, e.g., 2024-08-21T14:25:40.088Z, which I can use with the filter. The filter uses Luzmo’s Filter Expressions, to determine if the date for each row of the data is greater than or equal to the date variable. You can read more about Filter Expressions in Luzmo’s Academy article.filters={[ { condition: 'or', filters: [ { expression: '? \u003e= ?', parameters: [ { column_id: '\u003ccolumn id\u003e', // Date dataset_id: datasetId, }, date, ], }, ], }, ]} Building a Line ChartThe second chart you’ll be creating is a Line chart that displays the number of page views on each date from the last seven days from folks who visit your site.(Large preview)Initial Props Line ChartAs with the Donut chart, the initial props are pretty much the same, but the type has been changed to line-chart.\u003cLuzmoVizItemComponent appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER} apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST} authKey={authKey} authToken={authToken} type='line-chart' Line Chart OptionsThe options for the Line chart are as follows, and the mode has been changed to line-chart.options={{ title: { en: `Site visits from last 7 days`, }, display: { title: true, }, mode: 'grouped', }} Line Chart SlotsThe slots object is almost the same as before with the Donut chart, but for the Line chart, I’m using the date column from the dataset instead of the device category, and instead of category, I’m using the x-axis slot type. To ensure I’m formatting the data correctly (by day), I’ve used level 5. You can read more about levels in the docs.slots={[ { name: 'measure', content: [ { label: { en: 'Total users', }, column: '\u003ccolumn id\u003e', // Total users set: datasetId, type: 'numeric', format: '.4f', }, ], }, { name: 'x-axis', content: [ { label: { en: 'Date', }, column: '\u003ccolumn id\u003e', // Date set: datasetId, type: 'datetime', level: 5, }, ], }, ]} Line Chart FiltersI’ve used the same filters as I used in the Donut chart.Building a Bar ChartThe last chart you’ll be creating is a Bar chart that displays the number of page views for the top ten most viewed pages on your site.(Large preview)Initial Props Bar ChartAs with the Donut and Line chart, the initial props are pretty much the same, but the type has been changed to bar-chart.\u003cLuzmoVizItemComponent className='w-full h-80' appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER} apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST} authKey={authKey} authToken={authToken} type='bar-chart' Bar Chart OptionsThe options for the Bar chart are a little more involved. I’ve included some styling options for the border-radii of the bars, limited the number of results to 10, and sorted the data by the highest page view count first using the sort by measure and direction options.options={{ title: { en: `Page views from last 7 days`, }, display: { title: true, }, mode: 'grouped', bars: { roundedCorners: 5, }, limit: { number: 10, }, sort: { by: 'measure', direction: 'desc', }, }} Line Chart SlotsAs with the Line chart, I’ve used an axis for one of the columns from the dataset. In this case, it’s the y-axis which displays the page title.slots={[ { name: 'measure', content: [ { label: { en: 'Total users', }, column: '\u003ccolumn id\u003e', // Total users set: datasetId, type: 'numeric', format: '.4f', }, ], }, { name: 'y-axis', content: [ { label: { en: 'Page title', }, column: '\u003ccolumn id\u003e', // Page title set: datasetId, type: 'hierarchy', }, ], }, ]} Bar Chart FiltersI’ve used the same filters as I used in the Donut and Line chart.What’s NextAs you can see, there are plenty of types of charts and customization options. Because this is just an “ordinary” React component, you can very easily make it configurable by an end user by allowing options to be set and unset using HTML input elements, checkbox, select, date, and so on.But for me, the real power behind this is not having to mutate data!This is particularly pertinent when displaying multiple charts with different reporting dimensions. Typically, this would require each to have their own utility function or reformatting method. That said, setting column IDs and dataset IDs is a little fiddly, but once you have the component hooked up to the dataset, you can configure and reconfigure as much as you like, all without having to rewrite data formatting functions.If you’re interested in bringing data to life in your application and want to get it done without the usual headaches, book a free demo with the Luzmo team to learn more! (yk, il)",
  "image": "https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/how-build-custom-data-visualizations-luzmo-flex.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e16 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/data-visualization\"\u003eData Visualization\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/workflow\"\u003eWorkflow\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/ux\"\u003eUX\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eBringing data to life in your application can be done without the usual headaches. Paul Scanlon shows you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eIn this article, I’ll introduce you to \u003ca href=\"https://www.luzmo.com/flex\"\u003eLuzmo Flex\u003c/a\u003e, a new feature from the Luzmo team who have been working hard making developer tooling to flatten the on-ramp for analytics reporting and data visualization.\u003c/p\u003e\u003cp\u003eWith Luzmo Flex, you can hook up a dataset and create beautifully crafted, fully customizable interactive charts that meet your reporting needs. They easily integrate and interact with other components of your web app, allowing you to move away from a traditional “dashboard” interface and build more bespoke data products.\u003c/p\u003e\u003cp\u003eWhile many charting libraries offer similar features, I often found it challenging to get the data into the right shape that the library needed. In this article, I’ll show you how you can build beautiful data visualizations using the Google Analytics API, and you won’t have to spend any time “massaging” the data!\u003c/p\u003e\u003ch2 id=\"what-is-luzmo-flex\"\u003eWhat Is Luzmo Flex?\u003c/h2\u003e\u003cp\u003eWell, it’s two things, really. First of all, Luzmo is a low-code platform for embedded analytics. You can create datasets from just about anything, connect them to APIs like Google Analytics or your PostgreSQL database, or even upload static data in a \u003ccode\u003e.csv\u003c/code\u003e file and start creating data visualizations with drag and drop.\u003c/p\u003e\u003cp\u003eSecondly, Luzmo Flex is their new React component that can be configured to create custom data visualizations. Everything from the way you query your data to the way you display it can be achieved through code using the \u003ca href=\"https://developer.luzmo.com/guide/flex--introduction?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eLuzmoVizItemComponent\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aWhat%20makes%20Luzmo%20Flex%20unique%20is%20that%20you%20can%20reuse%20the%20core%20functionalities%20of%20Luzmo%e2%80%99s%20low-code%20embedded%20analytics%20platform%20in%20your%20custom-coded%20components.%0a\u0026amp;url=https://smashingmagazine.com%2f2024%2f09%2fhow-build-custom-data-visualizations-luzmo-flex%2f\"\u003eWhat makes Luzmo Flex unique is that you can reuse the core functionalities of Luzmo’s low-code embedded analytics platform in your custom-coded components.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThat means, besides creating ready-to-use datasets, you can set up functions like the following out-of-the-box:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eMulti-tenant analytics\u003c/strong\u003e: Showing different data or visualizations to different users of your app.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eLocalization\u003c/strong\u003e: Displaying charts in multiple languages, currencies, and timezones without much custom development.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eInteractivity\u003c/strong\u003e: Set up event listeners to create complex interactivity between Luzmo’s viz items and any non-Luzmo components in your app.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"what-can-you-build-with-luzmo-flex\"\u003eWhat Can You Build With Luzmo Flex?\u003c/h3\u003e\u003cp\u003eBy combining these off-the-shelf functions with flexibility through code, Luzmo Flex makes a great solution for building bespoke data products that go beyond the limits of a traditional dashboard interface. Below are a few examples of what that could look like.\u003c/p\u003e\u003ch4 id=\"report-builder\"\u003eReport Builder\u003c/h4\u003e\u003cp\u003eA custom report builder that lets users search and filter a dataset and render it out using a number of different charts.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://showcases.luzmo.com/report-builder/?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png\" sizes=\"100vw\" alt=\"A screenshot of a custom report builder\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eLuzmo Flex: \u003ca href=\"https://showcases.luzmo.com/report-builder/?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eReport builder\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/1-luzmo-flex-custom-report-builder.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"filter-panel\"\u003eFilter Panel\u003c/h4\u003e\u003cp\u003eEnable powerful filtering using HTML Select inputs, which will update each chart shown on the page.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://showcases.luzmo.com/dashboard-filter-panel/?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png\" sizes=\"100vw\" alt=\"Dashboard filter panel\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eLuzmo Flex:\u003ca href=\"https://showcases.luzmo.com/dashboard-filter-panel/?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eDashboard filter panel\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/2-luzmo-flex-filter-panel.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch4 id=\"wearables-dashboard\"\u003eWearables Dashboard\u003c/h4\u003e\u003cp\u003eOr how about a sleep tracker hooked up to your phone to track all those important snoozes?\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://showcases.luzmo.com/wearables-dashboard?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png\" sizes=\"100vw\" alt=\"Wearables Dashboard\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eLuzmo Flex: \u003ca href=\"https://showcases.luzmo.com/wearables-dashboard?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eWearables Dashboard\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/3-wearables-dashboard.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"when-to-consider-luzmo-flex-vs-chart-libraries\"\u003eWhen to Consider Luzmo Flex vs Chart Libraries\u003c/h2\u003e\u003cp\u003eWhen building data-intensive applications, using something like \u003ca href=\"https://recharts.org/en-US\"\u003eRecharts\u003c/a\u003e, a well-known React charting library, you’ll likely need to reformat the data to fit the required shape. For instance, if I request the top 3 page views from the last seven days for my site, \u003ca href=\"https://www.paulie.dev/\"\u003epaulie.dev\u003c/a\u003e, I would have to use the Google Analytics API using the following query.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eimport dotenv from \u0026#39;dotenv\u0026#39;;\nimport { BetaAnalyticsDataClient } from \u0026#39;@google-analytics/data\u0026#39;;\ndotenv.config();\n\nconst credentials = JSON.parse(\n  Buffer.from(process.env.GOOGLE_APPLICATION_CREDENTIALS_BASE64, \u0026#39;base64\u0026#39;).toString(\u0026#39;utf-8\u0026#39;)\n);\n\nconst analyticsDataClient = new BetaAnalyticsDataClient({\n  credentials,\n});\n\nconst [{ rows }] = await analyticsDataClient.runReport({\n  property: `properties/${process.env.GA4_PROPERTY_ID}`,\n  dateRanges: [\n    {\n      startDate: \u0026#39;7daysAgo\u0026#39;,\n      endDate: \u0026#39;today\u0026#39;,\n    },\n  ],\n  dimensions: [\n    {\n      name: \u0026#39;fullPageUrl\u0026#39;,\n    },\n    {\n      name: \u0026#39;pageTitle\u0026#39;,\n    },\n  ],\n  metrics: [\n    {\n      name: \u0026#39;totalUsers\u0026#39;,\n    },\n  ],\n  limit: 3,\n  metricAggregations: [\u0026#39;MAXIMUM\u0026#39;],\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe response would look something like this:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e[\n  {\n    \u0026#34;dimensionValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;www.paulie.dev/\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      },\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;Paul Scanlon | Home\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ],\n    \u0026#34;metricValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;61\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ]\n  },\n  {\n    \u0026#34;dimensionValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;www.paulie.dev/posts/2023/11/a-set-of-sign-in-with-google-buttons-made-with-tailwind/\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      },\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;Paul Scanlon | A set of: \\\u0026#34;Sign In With Google\\\u0026#34; Buttons Made With Tailwind\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ],\n    \u0026#34;metricValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;41\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ]\n  },\n  {\n    \u0026#34;dimensionValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;www.paulie.dev/posts/2023/10/what-is-a-proxy-redirect/\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      },\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;Paul Scanlon | What Is a Proxy Redirect?\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ],\n    \u0026#34;metricValues\u0026#34;: [\n      {\n        \u0026#34;value\u0026#34;: \u0026#34;23\u0026#34;,\n        \u0026#34;oneValue\u0026#34;: \u0026#34;value\u0026#34;\n      }\n    ]\n  }\n]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo make that data work with Recharts, I’d need to reformat it so it conforms to the following data shape.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e[\n  {\n    \u0026#34;name\u0026#34;: \u0026#34;Paul Scanlon | Home\u0026#34;,\n    \u0026#34;value\u0026#34;: 61\n  },\n  {\n    \u0026#34;name\u0026#34;: \u0026#34;Paul Scanlon | A set of: \\\u0026#34;Sign In With Google\\\u0026#34; Buttons Made With Tailwind\u0026#34;,\n    \u0026#34;value\u0026#34;: 41\n  },\n  {\n    \u0026#34;name\u0026#34;: \u0026#34;Paul Scanlon | What Is a Proxy Redirect?\u0026#34;,\n    \u0026#34;value\u0026#34;: 23\n  }\n]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo accomplish this, I’d need to use an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003e\u003ccode\u003eArray.prototype.map()\u003c/code\u003e\u003c/a\u003e to iterate over each item, destructure the relevant data and return a key-value pair for the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003evalue\u003c/code\u003e for each.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst data = response.rows.map((row) =\u0026gt; {\n  const { dimensionValues, metricValues } = row;\n\n  const pageTitle = dimensionValues[1].value;\n  const totalUsers = parseInt(metricValues[0].value);\n\n  return {\n    name: pageTitle,\n    value: totalUsers,\n  };\n});\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd naturally, if you’re reformatting data this way in your application, you’d also want to write unit tests to ensure the data is always formatted correctly to avoid breaking your application… and all of this before you even get on to creating your charts!\u003c/p\u003e\u003cp\u003eWith Luzmo Flex, all of this goes away, leaving you more time to focus on which data to display and how best to display it.\u003c/p\u003e\u003ch2 id=\"the-first-steps-to-building-bespoke-data-products\"\u003eThe First Steps to Building Bespoke Data Products\u003c/h2\u003e\u003cp\u003eTypically, when building user interfaces that display data insights, your first job will be to figure out how to query the data source. This can take many forms, from RESTful API requests to direct database queries or sometimes reading from static files. Your next job will be figuring out when and how often these requests need to occur.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eFor data that rarely changes\u003c/strong\u003e: Perhaps a query in the build step will work.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFor data that changes regularly\u003c/strong\u003e: A server-side request on page load.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFor ever-changing data\u003c/strong\u003e: A client-side request that polls an API on an interval.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eEach will likely inform your application’s architecture, and there’s no single solution to this. Your last job, as mentioned, will be wrangling the responses, reformatting the data, and displaying it in the UI.\u003c/p\u003e\u003cp\u003eBelow, I’ll show you how to do this using Luzmo Flex by using a simple example product.\u003c/p\u003e\u003ch2 id=\"what-we-re-building-custom-data-visualizations-as-code\"\u003eWhat We’re Building: Custom Data Visualizations As Code\u003c/h2\u003e\u003cp\u003eHere’s a screenshot of a simple data product I’ve built that displays three different charts for different reporting dimensions exposed by the Google Analytics API for page views for my site, \u003ca href=\"https://www.paulie.dev/\"\u003epaulie.dev\u003c/a\u003e, from the last seven days.\u003c/p\u003e\u003cp\u003eYou can find all the code used in this article on the following link:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/luzmo-official/luzmo-flex-tutorial\"\u003ehttps://github.com/luzmo-official/luzmo-flex-tutorial\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png\" sizes=\"100vw\" alt=\"A screenshot of a simple data product that displays three different charts for different reporting dimensions exposed by the Google Analytics API\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/4-custom-data-visualizations-charts.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"getting-started-with-luzmo\"\u003eGetting Started With Luzmo\u003c/h2\u003e\u003cp\u003eBefore we get going, hop over to Luzmo and \u003ca href=\"https://app.luzmo.com/signup?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003esign up for a free trial\u003c/a\u003e. You might also like to have a read of one of the getting started guides listed below. In this article, I’ll be using the Next.js starter.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.luzmo.com/blog/data-visualization-nextjs-luzmo?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eGetting started with Luzmo Data Visualization and Next.js\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/luzmo-official/luzmo-getting-started-next-js\"\u003ehttps://github.com/luzmo-official/luzmo-getting-started-next-js\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.luzmo.com/blog/data-visualization-astro-luzmo?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eGetting started with Luzmo Data Visualization and Astro\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/luzmo-official/luzmo-getting-started-astro\"\u003ehttps://github.com/luzmo-official/luzmo-getting-started-astro\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"creating-a-google-analytics-dataset\"\u003eCreating a Google Analytics Dataset\u003c/h2\u003e\u003cp\u003eTo create data visualization, you’ll first need data! To achieve this using Luzmo, head over to the dashboard, select Datasets from the navigation, and select \u003cstrong\u003eGA4 Google Analytics\u003c/strong\u003e. Follow the steps shown in the UI to connect Luzmo with your Google Analytics account.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png\" sizes=\"100vw\" alt=\"A dashboard with the selected Datasets from the navigation and highlighted GA4 Google Analytics\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/5-ga4-google-analytics.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eWith the setup complete, you can now select which reporting dimensions to add to your dataset. To follow along with this article, select \u003cstrong\u003eCustom selection\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png\" sizes=\"100vw\" alt=\"A screenshot with the Custom selection selected\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/6-reporting-dimensions-custom-selection.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eLastly, select the following using the search input. \u003cstrong\u003eDevice Category\u003c/strong\u003e, \u003cstrong\u003ePage Title\u003c/strong\u003e, \u003cstrong\u003eDate\u003c/strong\u003e, and \u003cstrong\u003eTotal users\u003c/strong\u003e, then click \u003cstrong\u003eImport\u003c/strong\u003e when you’re ready.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png\" sizes=\"100vw\" alt=\"A screenshot with the selected Device Category, Page Title, Date, and Total users\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/7-google-analytics-dataset.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eYou now have all the data required to build the Google Analytics dashboard. You can access the dataset ID from the URL address bar in your browser. You’ll need this in a later step.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png\" sizes=\"100vw\" alt=\"A screenshot with the highlighted URL address bar in a browser\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/8-google-analytics-dashboard.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIf you’ve followed along from either of the first two getting started guides, you’ll have your \u003cstrong\u003eAPI Key\u003c/strong\u003e, \u003cstrong\u003eAPI Token\u003c/strong\u003e, \u003cstrong\u003eApp server\u003c/strong\u003e, and \u003cstrong\u003eAPI host\u003c/strong\u003e environment variables set up and saved in a \u003ccode\u003e.env\u003c/code\u003e file.\u003c/p\u003e\u003ch3 id=\"install-dependencies\"\u003eInstall Dependencies\u003c/h3\u003e\u003cp\u003eIf you’ve cloned one of the starter repositories, run the following to install the required dependencies.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, install the Luzmo React Embed dependency which exports the \u003ccode\u003eLuzmoVizItemComponent\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enpm install  @luzmo/react-embed@latest\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, find \u003ccode\u003epage.tsx\u003c/code\u003e located in the \u003cstrong\u003esrc/app\u003c/strong\u003e directory, and add your dataset \u003ccode\u003eid\u003c/code\u003e as shown below.\u003c/p\u003e\u003cp\u003eAdd the \u003ccode\u003eaccess\u003c/code\u003e object from the destructured response and pass \u003ccode\u003eaccess.datasets[0].id\u003c/code\u003e onto the \u003ccode\u003eLuzmoClientComponent\u003c/code\u003e component using a prop named \u003ccode\u003edatasetId\u003c/code\u003e.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// src/app/page.tsx\n\n\n+ import dynamic from \u0026#39;next/dynamic\u0026#39;;\n\nimport Luzmo from \u0026#39;@luzmo/nodejs-sdk\u0026#39;;\n- import LuzmoClientComponent from \u0026#39;./components/luzmo-client-component\u0026#39;;\n+ const LuzmoClientComponent = dynamic(() =\u0026gt; import(\u0026#39;./components/luzmo-client-component\u0026#39;), {\n  ssr: false,\n});\n\n\nconst client = new Luzmo({\n  api_key: process.env.LUZMO_API_KEY!,\n  api_token: process.env.LUZMO_API_TOKEN!,\n  host: process.env.NEXT_PUBLIC_LUZMO_API_HOST!,\n});\n\nexport default async function Home() {\n  const response = await client.create(\u0026#39;authorization\u0026#39;, {\n    type: \u0026#39;embed\u0026#39;,\n    username: \u0026#39;user id\u0026#39;,\n    name: \u0026#39;first name last name\u0026#39;,\n    email: \u0026#39;name@email.com\u0026#39;,\n    access: {\n      datasets: [\n        {\n-          id: \u0026#39;\u0026lt;dataset_id\u0026gt;\u0026#39;,\n+          id: \u0026#39;42b43db3-24b2-45e7-98c5-3fcdef20b1a3\u0026#39;,\n          rights: \u0026#39;use\u0026#39;,\n        },\n      ],\n    },\n  });\n\n-  const { id, token } = response;\n+  const { id, token, access } = response;\n\n-  return \u0026lt;LuzmoClientComponent authKey={id} authToken={token} /\u0026gt;;\n+  return \u0026lt;LuzmoClientComponent authKey={id} authToken={token} datasetId={access.datasets[0].id} /\u0026gt;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd lastly, find \u003ccode\u003eluzmo-client-component.tsx\u003c/code\u003e located in \u003cstrong\u003esrc/app/components\u003c/strong\u003e. This is where you’ll be creating your charts.\u003c/p\u003e\u003ch2 id=\"building-a-donut-chart\"\u003eBuilding a Donut Chart\u003c/h2\u003e\u003cp\u003eThe first chart you’ll create is a Donut chart that shows the various devices used by visitors to your site.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png\" sizes=\"100vw\" alt=\"A donut chart\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/9-donut-chart.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAdd the following code to \u003ccode\u003eluzmo-client-component.tsx\u003c/code\u003e component.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// src/app/component/luzmo-client-component.tsx\n\n\u0026#39;use client\u0026#39;;\n\n+ import { LuzmoVizItemComponent } from \u0026#39;@luzmo/react-embed\u0026#39;;\n\ninterface Props {\n  authKey: string;\n  authToken: string;\n+  datasetId: string;\n}\n\n- export default function LuzmoClientComponent({ authKey, authToken}: Props) {\n+ export default function LuzmoClientComponent({ authKey, authToken, datasetId }: Props) {\n\n+  const date = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(); // creates a date 7 days ago\n\n  console.log({ authKey, authToken });\n\n  return (\n    \u0026lt;section\u0026gt;\n+    \u0026lt;div className=\u0026#39;w-1/2 h-80\u0026#39;\u0026gt;\n+      \u0026lt;LuzmoVizItemComponent\n+        appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER}\n+        apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST}\n+        authKey={authKey}\n+        authToken={authToken}\n+        type=\u0026#39;donut-chart\u0026#39;\n+        options={{\n+          title: {\n+            en: `Devices from last 7 days`,\n+          },\n+          display: {\n+            title: true,\n+          },\n+          mode: \u0026#39;donut\u0026#39;,\n+          legend: {\n+            position: \u0026#39;bottom\u0026#39;,\n+          },\n+        }}\n+        slots={[\n+          {\n+            name: \u0026#39;measure\u0026#39;,\n+            content: [\n+              {\n+                label: {\n+                  en: \u0026#39;Total users\u0026#39;,\n+                },\n+                column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Total users\n+                set: datasetId,\n+                type: \u0026#39;numeric\u0026#39;,\n+                format: \u0026#39;.4f\u0026#39;,\n+              },\n+            ],\n+          },\n+          {\n+            name: \u0026#39;category\u0026#39;,\n+            content: [\n+              {\n+                label: {\n+                  en: \u0026#39;Device category\u0026#39;,\n+                },\n+                column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Device category\n+                set: datasetId,\n+                type: \u0026#39;hierarchy\u0026#39;,\n+              },\n+            ],\n+          },\n+        ]}\n+        filters={[\n+          {\n+            condition: \u0026#39;or\u0026#39;,\n+            filters: [\n+              {\n+                expression: \u0026#39;? \u0026gt;= ?\u0026#39;,\n+                parameters: [\n+                  {\n+                    column_id: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Date\n+                    dataset_id: datasetId,\n+                  },\n+                  date,\n+                ],\n+              },\n+            ],\n+          },\n+        ]}\n+      /\u0026gt;\n+    \u0026lt;div/\u0026gt;\n    \u0026lt;/section\u0026gt;\n  );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere’s quite a lot going on in the above code snippet, and I will explain it all in due course, but first, I’ll need to cover a particularly tricky part of the configuration.\u003c/p\u003e\u003ch3 id=\"column-ids\"\u003eColumn IDs\u003c/h3\u003e\u003cp\u003eYou’ll notice the \u003cstrong\u003efilters parameters\u003c/strong\u003e, \u003cstrong\u003emeasure\u003c/strong\u003e, and \u003cstrong\u003ecategory\u003c/strong\u003e \u003cstrong\u003econtent\u003c/strong\u003e all require a \u003cstrong\u003ecolumn id\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eIn the \u003cstrong\u003efilters parameters\u003c/strong\u003e, the key is named \u003ccode\u003ecolumn_id\u003c/code\u003e, and in the \u003cstrong\u003emeasure\u003c/strong\u003e and \u003cstrong\u003ecategory\u003c/strong\u003e, the key is named \u003ccode\u003ecolumn\u003c/code\u003e. Both of these are actually the column IDs from the dataset. And here’s how you can find them.\u003c/p\u003e\u003cp\u003eBack in the Luzmo dashboard, click into your dataset and look for the \u003cstrong\u003e“more dots”\u003c/strong\u003e next to each column heading. From the menu, select \u003cstrong\u003eCopy column id\u003c/strong\u003e. Add each column ID to the keys in the configuration objects.\u003c/p\u003e\u003cp\u003eIn my example, I’m using the \u003cstrong\u003eTotal users\u003c/strong\u003e for the \u003cstrong\u003emeasure\u003c/strong\u003e, the \u003cstrong\u003eDevice category\u003c/strong\u003e for the \u003cstrong\u003ecategory\u003c/strong\u003e, and the \u003cstrong\u003eDate\u003c/strong\u003e for the \u003cstrong\u003efilter\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png\" sizes=\"100vw\" alt=\"Luzmo dashboard\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/10-luzmo-dashboard.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIf you’ve added the column IDs correctly, you should be able to see a rendered chart on your screen!\u003c/p\u003e\u003cp\u003e… and as promised, here’s a breakdown of the configuration.\u003c/p\u003e\u003ch3 id=\"initial-props-donut-chart\"\u003eInitial Props Donut chart\u003c/h3\u003e\u003cp\u003eThe first part is fairly straightforward. \u003ccode\u003eappServer\u003c/code\u003e and \u003ccode\u003eauthKey\u003c/code\u003e are the environment variables you saved to your \u003ccode\u003e.env\u003c/code\u003e file, and \u003ccode\u003eauthKey\u003c/code\u003e and \u003ccode\u003eauthToken\u003c/code\u003e are destructured from the authorization request and passed into this component via props.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003etype\u003c/code\u003e prop determines which type of chart to render. In my example, I’m using \u003ccode\u003edonut-chart\u003c/code\u003e, but you could choose from one of the many options available, \u003ccode\u003earea-chart\u003c/code\u003e, \u003ccode\u003ebar-chart\u003c/code\u003e, \u003ccode\u003ebubble-chart\u003c/code\u003e, \u003ccode\u003ebox-plot\u003c/code\u003e, and many more. You can see all the available options in the \u003ca href=\"https://developer.luzmo.com/guide/flex--introduction?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eLuzmo documentation\u003c/a\u003e under \u003ca href=\"https://developer.luzmo.com/guide/flex--chart-docs?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eChart docs\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;LuzmoVizItemComponent\n  appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER}\n  apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST}\n  authKey={authKey}\n  authToken={authToken}\n  type=\u0026#39;donut-chart\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe one thing I should point out is my use of Tailwind classes: \u003ccode\u003ew-1/2\u003c/code\u003e (width: 50%) and \u003ccode\u003eh-80\u003c/code\u003e (height: 20rem). The \u003ccode\u003eLuzmoVizItemComponent\u003c/code\u003e ships with height 100%, so you’ll need to wrap the component with an element that has an actual height, or you won’t be able to see the chart on the page as it could be 100% of the height of an element with no height.\u003c/p\u003e\u003ch3 id=\"donut-chart-options\"\u003eDonut Chart Options\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eoptions\u003c/code\u003e object is where you can customize the appearance of your chart. It accepts many configuration options, among which:\u003c/p\u003e\u003cul\u003e\u003cli\u003eA \u003ccode\u003etitle\u003c/code\u003e for the chart that accepts a \u003ca href=\"https://www.loc.gov/standards/iso639-2/php/English_list.php\"\u003elocale\u003c/a\u003e with corresponding text to display.\u003c/li\u003e\u003cli\u003eA \u003ccode\u003edisplay title\u003c/code\u003e value to determine if the title is shown or not.\u003c/li\u003e\u003cli\u003eA \u003ccode\u003emode\u003c/code\u003e to determine if the chart is to be of type donut or pie chart.\u003c/li\u003e\u003cli\u003eA \u003ccode\u003elegend\u003c/code\u003e option to determine where the legend can be positioned.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAll the available configuration options can be seen in the \u003ca href=\"https://developer.luzmo.com/flex/charts/donut-chart?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eDonut chart documentation\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eoptions={{\n  title: {\n    en: `Devices from last 7 days`,\n  },\n  display: {\n    title: true,\n  },\n  mode: \u0026#39;donut\u0026#39;,\n  legend: {\n    position: \u0026#39;bottom\u0026#39;,\n  },\n}}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"donut-chart-slots\"\u003eDonut Chart Slots\u003c/h3\u003e\u003cp\u003eSlots are where you can configure which column from your dataset to use for the \u003cstrong\u003ecategory\u003c/strong\u003e and \u003cstrong\u003emeasure\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eSlots can contain multiple measures, useful for displaying two columns of data per chart, but if more than two are used, one will become the measure.\u003c/p\u003e\u003cp\u003eEach measure contains a \u003cstrong\u003econtent\u003c/strong\u003e array. The content array, among many other configurations, can include the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003eA \u003ccode\u003elabel\u003c/code\u003e and locale,\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003ecolumn\u003c/code\u003e id from the \u003ccode\u003edataset\u003c/code\u003e,\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003edatasetId\u003c/code\u003e,\u003c/li\u003e\u003cli\u003eThe \u003ccode\u003etype\u003c/code\u003e of data you’re displaying,\u003c/li\u003e\u003cli\u003eA \u003ccode\u003eformat\u003c/code\u003e for the data.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe format used here is Python syntax for \u003ca href=\"https://medium.com/@coucoucamille/float-formatting-in-python-ccb023b86417\"\u003efloating-point numbers\u003c/a\u003e; it’s similar to JavaScript’s \u003ccode\u003e.toFixed()\u003c/code\u003e method, e.g \u003ccode\u003enumber.toFixed(4)\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ehierarchy\u003c/code\u003e type is ​​the Luzmo standard data type. Any text column is considered as an \u003ca href=\"https://academy.luzmo.com/article/p68253bn?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003ehierarchical\u003c/a\u003e data type.\u003c/p\u003e\u003cp\u003eYou can read more in the \u003ca href=\"https://developer.luzmo.com/flex/charts/donut-chart?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eDonut chart documentation\u003c/a\u003e about available configuration options for \u003ca href=\"https://developer.luzmo.com/flex/charts/box-plot#slots?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eslots\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eslots={[\n  {\n    name: \u0026#39;measure\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Total users\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Total users\n        set: datasetId,\n        type: \u0026#39;numeric\u0026#39;,\n        format: \u0026#39;.4f\u0026#39;,\n      },\n    ],\n  },\n  {\n    name: \u0026#39;category\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Device category\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Device category\n        set: datasetId,\n        type: \u0026#39;hierarchy\u0026#39;,\n      },\n    ],\n  },\n]}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"donut-chart-filters\"\u003eDonut Chart Filters\u003c/h3\u003e\u003cp\u003eThe filters object is where you can apply conditions that will determine which data will be shown. In my example, I only want to show data from the last seven days. To accomplish this, I first create the date variable:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst date = new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis would produce an ISO date string, e.g., \u003ccode\u003e2024-08-21T14:25:40.088Z\u003c/code\u003e, which I can use with the filter. The filter uses Luzmo’s \u003ca href=\"https://developer.luzmo.com/guide/flex--component-api-reference#filterexpression?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eFilter Expressions\u003c/a\u003e, to determine if the date for each row of the data is greater than or equal to the date variable. You can read more about Filter Expressions in Luzmo’s \u003ca href=\"https://academy.luzmo.com/article/rfgtd5fs#filters?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003eAcademy article\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efilters={[\n  {\n    condition: \u0026#39;or\u0026#39;,\n    filters: [\n      {\n        expression: \u0026#39;? \u0026gt;= ?\u0026#39;,\n        parameters: [\n          {\n            column_id: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Date\n            dataset_id: datasetId,\n          },\n          date,\n        ],\n      },\n    ],\n  },\n]}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"building-a-line-chart\"\u003eBuilding a Line Chart\u003c/h2\u003e\u003cp\u003eThe second chart you’ll be creating is a Line chart that displays the number of page views on each date from the last seven days from folks who visit your site.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png\" sizes=\"100vw\" alt=\"A line chart\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/11-line-chart.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"initial-props-line-chart\"\u003eInitial Props Line Chart\u003c/h3\u003e\u003cp\u003eAs with the Donut chart, the initial props are pretty much the same, but the \u003ccode\u003etype\u003c/code\u003e has been changed to \u003ccode\u003eline-chart\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;LuzmoVizItemComponent\n  appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER}\n  apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST}\n  authKey={authKey}\n  authToken={authToken}\n  type=\u0026#39;line-chart\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"line-chart-options\"\u003eLine Chart Options\u003c/h3\u003e\u003cp\u003eThe options for the Line chart are as follows, and the \u003ccode\u003emode\u003c/code\u003e has been changed to \u003ccode\u003eline-chart\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eoptions={{\n  title: {\n    en: `Site visits from last 7 days`,\n  },\n  display: {\n    title: true,\n  },\n  mode: \u0026#39;grouped\u0026#39;,\n}}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"line-chart-slots\"\u003eLine Chart Slots\u003c/h3\u003e\u003cp\u003eThe slots object is almost the same as before with the Donut chart, but for the Line chart, I’m using the \u003ccode\u003edate\u003c/code\u003e column from the dataset instead of the device category, and instead of \u003cstrong\u003ecategory\u003c/strong\u003e, I’m using the \u003ccode\u003ex-axis\u003c/code\u003e slot type. To ensure I’m formatting the data correctly (by day), I’ve used level 5. You can read \u003ca href=\"https://www.google.com/url?q=https://developer.luzmo.com/guide/flex--component-api-reference%23filterparameters\u0026amp;sa=D\u0026amp;source=docs\u0026amp;ust=1726144209264303\u0026amp;usg=AOvVaw1jXuSZXJ4dzRDkNcU_sZtQ\"\u003emore about levels in the docs\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eslots={[\n  {\n    name: \u0026#39;measure\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Total users\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Total users\n        set: datasetId,\n        type: \u0026#39;numeric\u0026#39;,\n        format: \u0026#39;.4f\u0026#39;,\n      },\n    ],\n  },\n  {\n    name: \u0026#39;x-axis\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Date\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Date\n        set: datasetId,\n        type: \u0026#39;datetime\u0026#39;,\n        level: 5,\n      },\n    ],\n  },\n]}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"line-chart-filters\"\u003eLine Chart Filters\u003c/h3\u003e\u003cp\u003eI’ve used the same filters as I used in the Donut chart.\u003c/p\u003e\u003ch2 id=\"building-a-bar-chart\"\u003eBuilding a Bar Chart\u003c/h2\u003e\u003cp\u003eThe last chart you’ll be creating is a Bar chart that displays the number of page views for the top ten most viewed pages on your site.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"500\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png\" sizes=\"100vw\" alt=\"A bar chart\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/how-build-custom-data-visualizations-luzmo-flex/12-bar-chart.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"initial-props-bar-chart\"\u003eInitial Props Bar Chart\u003c/h3\u003e\u003cp\u003eAs with the Donut and Line chart, the initial props are pretty much the same, but the \u003ccode\u003etype\u003c/code\u003e has been changed to \u003ccode\u003ebar-chart\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;LuzmoVizItemComponent\n  className=\u0026#39;w-full h-80\u0026#39;\n  appServer={process.env.NEXT_PUBLIC_LUZMO_APP_SERVER}\n  apiHost={process.env.NEXT_PUBLIC_LUZMO_API_HOST}\n  authKey={authKey}\n  authToken={authToken}\n  type=\u0026#39;bar-chart\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"bar-chart-options\"\u003eBar Chart Options\u003c/h3\u003e\u003cp\u003eThe options for the Bar chart are a little more involved. I’ve included some styling options for the \u003ccode\u003eborder-radii\u003c/code\u003e of the bars, limited the number of results to 10, and sorted the data by the highest page view count first using the \u003ccode\u003esort\u003c/code\u003e \u003ccode\u003eby\u003c/code\u003e \u003ccode\u003emeasure\u003c/code\u003e and \u003ccode\u003edirection\u003c/code\u003e options.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eoptions={{\n  title: {\n    en: `Page views from last 7 days`,\n  },\n  display: {\n    title: true,\n  },\n  mode: \u0026#39;grouped\u0026#39;,\n  bars: {\n    roundedCorners: 5,\n  },\n  limit: {\n    number: 10,\n  },\n  sort: {\n    by: \u0026#39;measure\u0026#39;,\n    direction: \u0026#39;desc\u0026#39;,\n  },\n}}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"line-chart-slots-1\"\u003eLine Chart Slots\u003c/h3\u003e\u003cp\u003eAs with the Line chart, I’ve used an axis for one of the columns from the dataset. In this case, it’s the \u003ccode\u003ey-axis\u003c/code\u003e which displays the page title.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eslots={[\n  {\n    name: \u0026#39;measure\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Total users\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Total users\n        set: datasetId,\n        type: \u0026#39;numeric\u0026#39;,\n        format: \u0026#39;.4f\u0026#39;,\n      },\n    ],\n  },\n  {\n    name: \u0026#39;y-axis\u0026#39;,\n    content: [\n      {\n        label: {\n          en: \u0026#39;Page title\u0026#39;,\n        },\n        column: \u0026#39;\u0026lt;column id\u0026gt;\u0026#39;, // Page title\n        set: datasetId,\n        type: \u0026#39;hierarchy\u0026#39;,\n      },\n    ],\n  },\n]}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"bar-chart-filters\"\u003eBar Chart Filters\u003c/h3\u003e\u003cp\u003eI’ve used the same filters as I used in the Donut and Line chart.\u003c/p\u003e\u003ch2 id=\"what-s-next\"\u003eWhat’s Next\u003c/h2\u003e\u003cp\u003eAs you can see, there are plenty of types of charts and customization options. Because this is just an “ordinary” React component, \u003cstrong\u003eyou can very easily make it configurable by an end user\u003c/strong\u003e by allowing options to be set and unset using HTML input elements, checkbox, select, date, and so on.\u003c/p\u003e\u003cp\u003eBut for me, the real power behind this is not having to mutate data!\u003c/p\u003e\u003cp\u003eThis is particularly pertinent when displaying multiple charts with different reporting dimensions. Typically, this would require each to have their own utility function or reformatting method. That said, setting column IDs and dataset IDs is a little fiddly, but once you have the component hooked up to the dataset, you can configure and reconfigure as much as you like, all without having to rewrite data formatting functions.\u003c/p\u003e\u003cp\u003eIf you’re interested in bringing data to life in your application and want to get it done without the usual headaches, \u003ca href=\"https://www.luzmo.com/book-a-demo?utm_medium=referral\u0026amp;utm_source=smashing-magazine\u0026amp;utm_campaign=ALL_blog_luzmo-flex-tutorial\"\u003ebook a free demo with the Luzmo team\u003c/a\u003e to learn more!\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk, il)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "24 min read",
  "publishedTime": "2024-09-12T11:00:00Z",
  "modifiedTime": "2024-09-12T11:00:00Z"
}
