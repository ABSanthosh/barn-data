{
  "id": "d416b3db-64db-4e8d-b74d-1695145c2e7a",
  "title": "Creating An Effective Multistep Form For Better User Experience",
  "link": "https://smashingmagazine.com/2024/12/creating-effective-multistep-form-better-user-experience/",
  "description": "Forms are already notoriously tough to customize and style — to the extent that we’re already starting to see new ideas for more flexible control. But what we don’t often discuss is designing good-form experiences beyond validation. That’s what Jima Victor discusses in this article, focusing specifically on creating multi-step forms that involve navigation between sections.",
  "author": "Amejimaobari Ollornwi",
  "published": "Tue, 03 Dec 2024 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 19438,
  "excerpt": "Forms are already notoriously tough to customize and style — to the extent that we’re already starting to see new ideas for more flexible control. But what we don’t often discuss is designing good-form experiences beyond validation. That’s what Jima Victor discusses in this article, focusing specifically on creating multi-step forms that involve navigation between sections.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "13 min readJavaScript, UX, DesignForms are already notoriously tough to customize and style — to the extent that we’re already starting to see new ideas for more flexible control. But what we don’t often discuss is designing good-form experiences beyond validation. That’s what Jima Victor discusses in this article, focusing specifically on creating multi-step forms that involve navigation between sections.For a multistep form, planning involves structuring questions logically across steps, grouping similar questions, and minimizing the number of steps and the amount of required information for each step. Whatever makes each step focused and manageable is what should be aimed for.In this tutorial, we will create a multistep form for a job application. Here are the details we are going to be requesting from the applicant at each step:Personal InformationCollects applicant’s name, email, and phone number.Work ExperienceCollects the applicant’s most recent company, job title, and years of experience.Skills \u0026 QualificationsThe applicant lists their skills and selects their highest degree.Review \u0026 SubmitThis step is not going to collect any information. Instead, it provides an opportunity for the applicant to go back and review the information entered in the previous steps of the form before submitting it.You can think of structuring these questions as a digital way of getting to know somebody. You can’t meet someone for the first time and ask them about their work experience without first asking for their name.Based on the steps we have above, this is what the body of our HTML with our form should look like. First, the main \u003cform\u003e element:\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003c!-- Step 2: Work Experience --\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003c/form\u003e Step 1 is for filling in personal information, like the applicant’s name, email address, and phone number:\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003cfieldset class=\"step\" id=\"step-1\"\u003e \u003clegend id=\"step1Label\"\u003eStep 1: Personal Information\u003c/legend\u003e \u003clabel for=\"name\"\u003eFull Name\u003c/label\u003e \u003cinput type=\"text\" id=\"name\" name=\"name\" required /\u003e \u003clabel for=\"email\"\u003eEmail Address\u003c/label\u003e \u003cinput type=\"email\" id=\"email\" name=\"email\" required /\u003e \u003clabel for=\"phone\"\u003ePhone Number\u003c/label\u003e \u003cinput type=\"tel\" id=\"phone\" name=\"phone\" required /\u003e \u003c/fieldset\u003e \u003c!-- Step 2: Work Experience --\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003c/form\u003e Once the applicant completes the first step, we’ll navigate them to Step 2, focusing on their work experience so that we can collect information like their most recent company, job title, and years of experience. We’ll tack on a new \u003cfieldset\u003e with those inputs:\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003c!-- Step 2: Work Experience --\u003e \u003cfieldset class=\"step\" id=\"step-2\" hidden\u003e \u003clegend id=\"step2Label\"\u003eStep 2: Work Experience\u003c/legend\u003e \u003clabel for=\"company\"\u003eMost Recent Company\u003c/label\u003e \u003cinput type=\"text\" id=\"company\" name=\"company\" required /\u003e \u003clabel for=\"jobTitle\"\u003eJob Title\u003c/label\u003e \u003cinput type=\"text\" id=\"jobTitle\" name=\"jobTitle\" required /\u003e \u003clabel for=\"yearsExperience\"\u003eYears of Experience\u003c/label\u003e \u003cinput type=\"number\" id=\"yearsExperience\" name=\"yearsExperience\" min=\"0\" required /\u003e \u003c/fieldset\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003c/form\u003e Step 3 is all about the applicant listing their skills and qualifications for the job they’re applying for:\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003c!-- Step 2: Work Experience --\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003cfieldset class=\"step\" id=\"step-3\" hidden\u003e \u003clegend id=\"step3Label\"\u003eStep 3: Skills \u0026 Qualifications\u003c/legend\u003e \u003clabel for=\"skills\"\u003eSkill(s)\u003c/label\u003e \u003ctextarea id=\"skills\" name=\"skills\" rows=\"4\" required\u003e\u003c/textarea\u003e \u003clabel for=\"highestDegree\"\u003eDegree Obtained (Highest)\u003c/label\u003e \u003cselect id=\"highestDegree\" name=\"highestDegree\" required\u003e \u003coption value=\"\"\u003eSelect Degree\u003c/option\u003e \u003coption value=\"highschool\"\u003eHigh School Diploma\u003c/option\u003e \u003coption value=\"bachelor\"\u003eBachelor's Degree\u003c/option\u003e \u003coption value=\"master\"\u003eMaster's Degree\u003c/option\u003e \u003coption value=\"phd\"\u003ePh.D.\u003c/option\u003e \u003c/select\u003e \u003c/fieldset\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003cfieldset class=\"step\" id=\"step-4\" hidden\u003e \u003clegend id=\"step4Label\"\u003eStep 4: Review \u0026 Submit\u003c/legend\u003e \u003cp\u003eReview your information before submitting the application.\u003c/p\u003e \u003cbutton type=\"submit\"\u003eSubmit Application\u003c/button\u003e \u003c/fieldset\u003e \u003c/form\u003e And, finally, we’ll allow the applicant to review their information before submitting it:\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003c!-- Step 2: Work Experience --\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003cfieldset class=\"step\" id=\"step-4\" hidden\u003e \u003clegend id=\"step4Label\"\u003eStep 4: Review \u0026 Submit\u003c/legend\u003e \u003cp\u003eReview your information before submitting the application.\u003c/p\u003e \u003cbutton type=\"submit\"\u003eSubmit Application\u003c/button\u003e \u003c/fieldset\u003e \u003c/form\u003e Notice: We’ve added a hidden attribute to every fieldset element but the first one. This ensures that the user sees only the first step. Once they are done with the first step, they can proceed to fill out their work experience on the second step by clicking a navigational button. We’ll add this button later on.Adding StylesTo keep things focused, we’re not going to be emphasizing the styles in this tutorial. What we’ll do to keep things simple is leverage the Simple.css style framework to get the form in good shape for the rest of the tutorial.If you’re following along, we can include Simple’s styles in the document \u003chead\u003e:\u003clink rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" /\u003e And from there, go ahead and create a style.css file with the following styles that I’ve folded up.\u003cdetails\u003e \u003csummary\u003eView CSS\u003c/summary\u003e body { min-height: 100vh; display: flex; align-items: center; justify-content: center; } main { padding: 0 30px; } h1 { font-size: 1.8rem; text-align: center; } .stepper { display: flex; justify-content: flex-end; padding-right: 10px; } form { box-shadow: 0px 0px 6px 2px rgba(0, 0, 0, 0.2); padding: 12px; } input, textarea, select { outline: none; } input:valid, textarea:valid, select:valid, input:focus:valid, textarea:focus:valid, select:focus:valid { border-color: green; } input:focus:invalid, textarea:focus:invalid, select:focus:invalid { border: 1px solid red; } \u003c/details\u003e Form Navigation And ValidationAn easy way to ruin the user experience for a multi-step form is to wait until the user gets to the last step in the form before letting them know of any error they made along the way. Each step of the form should be validated for errors before moving on to the next step, and descriptive error messages should be displayed to enable users to understand what is wrong and how to fix it.Now, the only part of our form that is visible is the first step. To complete the form, users need to be able to navigate to the other steps. We are going to use several buttons to pull this off. The first step is going to have a Next button. The second and third steps are going to have both a Previous and a Next button, and the fourth step is going to have a Previous and a Submit button.\u003cform id=\"jobApplicationForm\"\u003e \u003c!-- Step 1: Personal Information --\u003e \u003cfieldset\u003e \u003c!-- ... --\u003e \u003cbutton type=\"button\" class=\"next\" onclick=\"nextStep()\"\u003eNext\u003c/button\u003e \u003c/fieldset\u003e \u003c!-- Step 2: Work Experience --\u003e \u003cfieldset\u003e \u003c!-- ... --\u003e \u003cbutton type=\"button\" class=\"previous\" onclick=\"previousStep()\"\u003ePrevious\u003c/button\u003e \u003cbutton type=\"button\" class=\"next\" onclick=\"nextStep()\"\u003eNext\u003c/button\u003e \u003c/fieldset\u003e \u003c!-- Step 3: Skills \u0026 Qualifications --\u003e \u003cfieldset\u003e \u003c!-- ... --\u003e \u003cbutton type=\"button\" class=\"previous\" onclick=\"previousStep()\"\u003ePrevious\u003c/button\u003e \u003cbutton type=\"button\" class=\"next\" onclick=\"nextStep()\"\u003eNext\u003c/button\u003e \u003c/fieldset\u003e \u003c!-- Step 4: Review \u0026 Submit --\u003e \u003cfieldset\u003e \u003c!-- ... --\u003e \u003cbutton type=\"button\" class=\"previous\" onclick=\"previousStep()\"\u003ePrevious\u003c/button\u003e \u003cbutton type=\"submit\"\u003eSubmit Application\u003c/button\u003e \u003c/fieldset\u003e \u003c/form\u003e Notice: We’ve added onclick attributes to the Previous and Next buttons to link them to their respective JavaScript functions: previousStep() and nextStep().The “Next” ButtonThe nextStep() function is linked to the Next button. Whenever the user clicks the Next button, the nextStep() function will first check to ensure that all the fields for whatever step the user is on have been filled out correctly before moving on to the next step. If the fields haven’t been filled correctly, it displays some error messages, letting the user know that they’ve done something wrong and informing them what to do to make the errors go away.Before we go into the implementation of the nextStep function, there are certain variables we need to define because they will be needed in the function. First, we need the input fields from the DOM so we can run checks on them to make sure they are valid.// Step 1 fields const name = document.getElementById(\"name\"); const email = document.getElementById(\"email\"); const phone = document.getElementById(\"phone\"); // Step 2 fields const company = document.getElementById(\"company\"); const jobTitle = document.getElementById(\"jobTitle\"); const yearsExperience = document.getElementById(\"yearsExperience\"); // Step 3 fields const skills = document.getElementById(\"skills\"); const highestDegree = document.getElementById(\"highestDegree\"); Then, we’re going to need an array to store our error messages.let errorMsgs = []; Also, we would need an element in the DOM where we can insert those error messages after they’ve been generated. This element should be placed in the HTML just below the last fieldset closing tag:\u003cdiv id=\"errorMessages\" style=\"color: rgb(253, 67, 67)\"\u003e\u003c/div\u003e Add the above div to the JavaScript code using the following line:const errorMessagesDiv = document.getElementById(\"errorMessages\"); And finally, we need a variable to keep track of the current step.let currentStep = 1;Now that we have all our variables in place, here’s the implementation of the nextstep() function:function nextStep() { errorMsgs = []; errorMessagesDiv.innerText = \"\"; switch (currentStep) { case 1: addValidationErrors(name, email, phone); validateStep(errorMsgs); break; case 2: addValidationErrors(company, jobTitle, yearsExperience); validateStep(errorMsgs); break; case 3: addValidationErrors(skills, highestDegree); validateStep(errorMsgs); break; } } The moment the Next button is pressed, our code first checks which step the user is currently on, and based on this information, it validates the data for that specific step by calling the addValidationErrors() function. If there are errors, we display them. Then, the form calls the validateStep() function to verify that there are no errors before moving on to the next step. If there are errors, it prevents the user from going on to the next step.Whenever the nextStep() function runs, the error messages are cleared first to avoid appending errors from a different step to existing errors or re-adding existing error messages when the addValidationErrors function runs. The addValidationErrors function is called for each step using the fields for that step as arguments.Here’s how the addValidationErrors function is implemented:function addValidationErrors(fieldOne, fieldTwo, fieldThree = undefined) { if (!fieldOne.checkValidity()) { const label = document.querySelector(`label[for=\"${fieldOne.id}\"]`); errorMsgs.push(`Please Enter A Valid ${label.textContent}`); } if (!fieldTwo.checkValidity()) { const label = document.querySelector(`label[for=\"${fieldTwo.id}\"]`); errorMsgs.push(`Please Enter A Valid ${label.textContent}`); } if (fieldThree \u0026\u0026 !fieldThree.checkValidity()) { const label = document.querySelector(`label[for=\"${fieldThree.id}\"]`); errorMsgs.push(`Please Enter A Valid ${label.textContent}`); } if (errorMsgs.length \u003e 0) { errorMessagesDiv.innerText = errorMsgs.join(\"\\n\"); } } This is how the validateStep() function is defined:function validateStep(errorMsgs) { if (errorMsgs.length === 0) { showStep(currentStep + 1); } } The validateStep() function checks for errors. If there are none, it proceeds to the next step with the help of the showStep() function.function showStep(step) { steps.forEach((el, index) =\u003e { el.hidden = index + 1 !== step; }); currentStep = step; } The showStep() function requires the four fieldsets in the DOM. Add the following line to the top of the JavaScript code to make the fieldsets available:const steps = document.querySelectorAll(\".step\"); What the showStep() function does is to go through all the fieldsets in our form and hide whatever fieldset is not equal to the one we’re navigating to. Then, it updates the currentStep variable to be equal to the step we’re navigating to.The “Previous” ButtonThe previousStep() function is linked to the Previous button. Whenever the previous button is clicked, similarly to the nextStep function, the error messages are also cleared from the page, and navigation is also handled by the showStep function.function previousStep() { errorMessagesDiv.innerText = \"\"; showStep(currentStep - 1); } Whenever the showStep() function is called with “currentStep - 1” as an argument (as in this case), we go back to the previous step, while moving to the next step happens by calling the showStep() function with “currentStep + 1” as an argument (as in the case of the validateStep() function).Improving User Experience With Visual CuesOne other way of improving the user experience for a multi-step form, is by integrating visual cues, things that will give users feedback on the process they are on. These things can include a progress indicator or a stepper to help the user know the exact step they are on.Integrating A StepperTo integrate a stepper into our form (sort of like this one from Material Design), the first thing we need to do is add it to the HTML just below the opening \u003cform\u003e tag.\u003cform id=\"jobApplicationForm\"\u003e \u003cdiv class=\"stepper\"\u003e \u003cspan\u003e\u003cspan class=\"currentStep\"\u003e1\u003c/span\u003e/4\u003c/span\u003e \u003c/div\u003e \u003c!-- ... --\u003e \u003c/form\u003e Next, we need to query the part of the stepper that will represent the current step. This is the span tag with the class name of currentStep.const currentStepDiv = document.querySelector(\".currentStep\"); Now, we need to update the stepper value whenever the previous or next buttons are clicked. To do this, we need to update the showStep() function by appending the following line to it:currentStepDiv.innerText = currentStep; This line is added to the showStep() function because the showStep() function is responsible for navigating between steps and updating the currentStep variable. So, whenever the currentStep variable is updated, the currentStepDiv should also be updated to reflect that change.Storing And Retrieving User DataOne major way we can improve the form’s user experience is by storing user data in the browser. Multistep forms are usually long and require users to enter a lot of information about themselves. Imagine a user filling out 95% of a form, then accidentally hitting the F5 button on their keyboard and losing all their progress. That would be a really bad experience for the user.Using localStorage, we can store user information as soon as it is entered and retrieve it as soon as the DOM content is loaded, so users can always continue filling out their forms from wherever they left off. To add this feature to our forms, we can begin by saving the user’s information as soon as it is typed. This can be achieved using the input event.Before adding the input event listener, get the form element from the DOM:const form = document.getElementById(\"jobApplicationForm\"); Now we can add the input event listener:// Save data on each input event form.addEventListener(\"input\", () =\u003e { const formData = { name: document.getElementById(\"name\").value, email: document.getElementById(\"email\").value, phone: document.getElementById(\"phone\").value, company: document.getElementById(\"company\").value, jobTitle: document.getElementById(\"jobTitle\").value, yearsExperience: document.getElementById(\"yearsExperience\").value, skills: document.getElementById(\"skills\").value, highestDegree: document.getElementById(\"highestDegree\").value, }; localStorage.setItem(\"formData\", JSON.stringify(formData)); }); Next, we need to add some code to help us retrieve the user data once the DOM content is loaded.window.addEventListener(\"DOMContentLoaded\", () =\u003e { const savedData = JSON.parse(localStorage.getItem(\"formData\")); if (savedData) { document.getElementById(\"name\").value = savedData.name || \"\"; document.getElementById(\"email\").value = savedData.email || \"\"; document.getElementById(\"phone\").value = savedData.phone || \"\"; document.getElementById(\"company\").value = savedData.company || \"\"; document.getElementById(\"jobTitle\").value = savedData.jobTitle || \"\"; document.getElementById(\"yearsExperience\").value = savedData.yearsExperience || \"\"; document.getElementById(\"skills\").value = savedData.skills || \"\"; document.getElementById(\"highestDegree\").value = savedData.highestDegree || \"\"; } }); Lastly, it is good practice to remove data from localStorage as soon as it is no longer needed:// Clear data on form submit form.addEventListener('submit', () =\u003e { // Clear localStorage once the form is submitted localStorage.removeItem('formData'); }); Adding The Current Step Value To localStorageIf the user accidentally closes their browser, they should be able to return to wherever they left off. This means that the current step value also has to be saved in localStorage.To save this value, append the following line to the showStep() function:localStorage.setItem(\"storedStep\", currentStep); Now we can retrieve the current step value and return users to wherever they left off whenever the DOM content loads. Add the following code to the DOMContentLoaded handler to do so:const storedStep = localStorage.getItem(\"storedStep\"); if (storedStep) { const storedStepInt = parseInt(storedStep); steps.forEach((el, index) =\u003e { el.hidden = index + 1 !== storedStepInt; }); currentStep = storedStepInt; currentStepDiv.innerText = currentStep; } Also, do not forget to clear the current step value from localStorage when the form is submitted.localStorage.removeItem(\"storedStep\"); The above line should be added to the submit handler.Wrapping UpCreating multi-step forms can help improve user experience for complex data entry. By carefully planning out steps, implementing form validation at each step, and temporarily storing user data in the browser, you make it easier for users to complete long forms.For the full implementation of this multi-step form, you can access the complete code on GitHub. (gg, yk)",
  "image": "https://files.smashing.media/articles/creating-effective-multistep-form-better-user-experience/creating-effective-multistep-form-better-user-experience.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e13 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/javascript\"\u003eJavaScript\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/ux\"\u003eUX\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eForms are already notoriously tough to customize and style — to the extent that we’re already starting to see new ideas for more flexible control. But what we don’t often discuss is designing good-form experiences beyond validation. That’s what Jima Victor discusses in this article, focusing specifically on creating multi-step forms that involve navigation between sections.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eFor a multistep form, planning involves structuring questions logically across steps, grouping similar questions, and minimizing the number of steps and the amount of required information for each step. Whatever makes each step focused and manageable is what should be aimed for.\u003c/p\u003e\u003cp\u003eIn this tutorial, we will create a multistep form for a job application. Here are the details we are going to be requesting from the applicant at each step:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003ePersonal Information\u003c/strong\u003e\u003cbr/\u003eCollects applicant’s name, email, and phone number.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eWork Experience\u003c/strong\u003e\u003cbr/\u003eCollects the applicant’s most recent company, job title, and years of experience.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSkills \u0026amp; Qualifications\u003c/strong\u003e\u003cbr/\u003eThe applicant lists their skills and selects their highest degree.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eReview \u0026amp; Submit\u003c/strong\u003e\u003cbr/\u003eThis step is not going to collect any information. Instead, it provides an opportunity for the applicant to go back and review the information entered in the previous steps of the form before submitting it.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eYou can think of structuring these questions as a digital way of getting to know somebody. You can’t meet someone for the first time and ask them about their work experience without first asking for their name.\u003c/p\u003e\u003cp\u003eBased on the steps we have above, this is what the body of our HTML with our form should look like. First, the main \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 1\u003c/strong\u003e is for filling in personal information, like the applicant’s name, email address, and phone number:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n  \u0026lt;fieldset class=\u0026#34;step\u0026#34; id=\u0026#34;step-1\u0026#34;\u0026gt;\n    \u0026lt;legend id=\u0026#34;step1Label\u0026#34;\u0026gt;Step 1: Personal Information\u0026lt;/legend\u0026gt;\n    \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Full Name\u0026lt;/label\u0026gt;\n    \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; required /\u0026gt;\n    \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email Address\u0026lt;/label\u0026gt;\n    \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; required /\u0026gt;\n    \u0026lt;label for=\u0026#34;phone\u0026#34;\u0026gt;Phone Number\u0026lt;/label\u0026gt;\n    \u0026lt;input type=\u0026#34;tel\u0026#34; id=\u0026#34;phone\u0026#34; name=\u0026#34;phone\u0026#34; required /\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce the applicant completes the first step, we’ll navigate them to \u003cstrong\u003eStep 2\u003c/strong\u003e, focusing on their work experience so that we can collect information like their most recent company, job title, and years of experience. We’ll tack on a new \u003ccode\u003e\u0026lt;fieldset\u0026gt;\u003c/code\u003e with those inputs:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n  \u0026lt;fieldset class=\u0026#34;step\u0026#34; id=\u0026#34;step-2\u0026#34; hidden\u0026gt;\n    \u0026lt;legend id=\u0026#34;step2Label\u0026#34;\u0026gt;Step 2: Work Experience\u0026lt;/legend\u0026gt;\n    \u0026lt;label for=\u0026#34;company\u0026#34;\u0026gt;Most Recent Company\u0026lt;/label\u0026gt;\n    \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;company\u0026#34; name=\u0026#34;company\u0026#34; required /\u0026gt;\n    \u0026lt;label for=\u0026#34;jobTitle\u0026#34;\u0026gt;Job Title\u0026lt;/label\u0026gt;\n    \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;jobTitle\u0026#34; name=\u0026#34;jobTitle\u0026#34; required /\u0026gt;\n    \u0026lt;label for=\u0026#34;yearsExperience\u0026#34;\u0026gt;Years of Experience\u0026lt;/label\u0026gt;\n    \u0026lt;input\n      type=\u0026#34;number\u0026#34;\n      id=\u0026#34;yearsExperience\u0026#34;\n      name=\u0026#34;yearsExperience\u0026#34;\n      min=\u0026#34;0\u0026#34;\n      required\n    /\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eStep 3\u003c/strong\u003e is all about the applicant listing their skills and qualifications for the job they’re applying for:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n  \u0026lt;fieldset class=\u0026#34;step\u0026#34; id=\u0026#34;step-3\u0026#34; hidden\u0026gt;\n    \u0026lt;legend id=\u0026#34;step3Label\u0026#34;\u0026gt;Step 3: Skills \u0026amp; Qualifications\u0026lt;/legend\u0026gt;\n    \u0026lt;label for=\u0026#34;skills\u0026#34;\u0026gt;Skill(s)\u0026lt;/label\u0026gt;\n    \u0026lt;textarea id=\u0026#34;skills\u0026#34; name=\u0026#34;skills\u0026#34; rows=\u0026#34;4\u0026#34; required\u0026gt;\u0026lt;/textarea\u0026gt;\n    \u0026lt;label for=\u0026#34;highestDegree\u0026#34;\u0026gt;Degree Obtained (Highest)\u0026lt;/label\u0026gt;\n    \u0026lt;select id=\u0026#34;highestDegree\u0026#34; name=\u0026#34;highestDegree\u0026#34; required\u0026gt;\n      \u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;Select Degree\u0026lt;/option\u0026gt;\n      \u0026lt;option value=\u0026#34;highschool\u0026#34;\u0026gt;High School Diploma\u0026lt;/option\u0026gt;\n      \u0026lt;option value=\u0026#34;bachelor\u0026#34;\u0026gt;Bachelor\u0026#39;s Degree\u0026lt;/option\u0026gt;\n      \u0026lt;option value=\u0026#34;master\u0026#34;\u0026gt;Master\u0026#39;s Degree\u0026lt;/option\u0026gt;\n      \u0026lt;option value=\u0026#34;phd\u0026#34;\u0026gt;Ph.D.\u0026lt;/option\u0026gt;\n    \u0026lt;/select\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n  \u0026lt;fieldset class=\u0026#34;step\u0026#34; id=\u0026#34;step-4\u0026#34; hidden\u0026gt;\n    \u0026lt;legend id=\u0026#34;step4Label\u0026#34;\u0026gt;Step 4: Review \u0026amp; Submit\u0026lt;/legend\u0026gt;\n    \u0026lt;p\u0026gt;Review your information before submitting the application.\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit Application\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd, finally, we’ll allow the applicant to review their information before submitting it:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n  \u0026lt;fieldset class=\u0026#34;step\u0026#34; id=\u0026#34;step-4\u0026#34; hidden\u0026gt;\n    \u0026lt;legend id=\u0026#34;step4Label\u0026#34;\u0026gt;Step 4: Review \u0026amp; Submit\u0026lt;/legend\u0026gt;\n    \u0026lt;p\u0026gt;Review your information before submitting the application.\u0026lt;/p\u0026gt;\n    \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit Application\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e: We’ve added a \u003ccode\u003ehidden\u003c/code\u003e attribute to every \u003ccode\u003efieldset\u003c/code\u003e element but the first one. This ensures that the user sees only the first step. Once they are done with the first step, they can proceed to fill out their work experience on the second step by clicking a navigational button. We’ll add this button later on.\u003c/p\u003e\u003ch2 id=\"adding-styles\"\u003eAdding Styles\u003c/h2\u003e\u003cp\u003eTo keep things focused, we’re not going to be emphasizing the styles in this tutorial. What we’ll do to keep things simple is leverage the \u003ca href=\"https://simplecss.org\"\u003eSimple.css style framework\u003c/a\u003e to get the form in good shape for the rest of the tutorial.\u003c/p\u003e\u003cp\u003eIf you’re following along, we can include Simple’s styles in the document \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.simplecss.org/simple.min.css\u0026#34; /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd from there, go ahead and create a \u003ccode\u003estyle.css\u003c/code\u003e file with the following styles that I’ve folded up.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;View CSS\u0026lt;/summary\u0026gt;\n  body {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  main {\n    padding: 0 30px;\n  }\n  h1 {\n    font-size: 1.8rem;\n    text-align: center;\n  }\n  .stepper {\n    display: flex;\n    justify-content: flex-end;\n    padding-right: 10px;\n  }\n  form {\n    box-shadow: 0px 0px 6px 2px rgba(0, 0, 0, 0.2);\n    padding: 12px;\n  }\n  input,\n  textarea,\n  select {\n    outline: none;\n  }\n  input:valid,\n  textarea:valid,\n  select:valid,\n  input:focus:valid,\n  textarea:focus:valid,\n  select:focus:valid {\n    border-color: green;\n  }\n  input:focus:invalid,\n  textarea:focus:invalid,\n  select:focus:invalid {\n    border: 1px solid red;\n  }\n\u0026lt;/details\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"form-navigation-and-validation\"\u003eForm Navigation And Validation\u003c/h2\u003e\u003cp\u003eAn easy way to ruin the user experience for a multi-step form is to wait until the user gets to the last step in the form before letting them know of any error they made along the way. Each step of the form should be validated for errors before moving on to the next step, and descriptive error messages should be displayed to enable users to understand what is wrong and how to fix it.\u003c/p\u003e\u003cp\u003eNow, the only part of our form that is visible is the first step. To complete the form, users need to be able to navigate to the other steps. We are going to use several buttons to pull this off. The first step is going to have a \u003ckbd\u003eNext\u003c/kbd\u003e button. The second and third steps are going to have both a \u003ckbd\u003ePrevious\u003c/kbd\u003e and a \u003ckbd\u003eNext\u003c/kbd\u003e button, and the fourth step is going to have a \u003ckbd\u003ePrevious\u003c/kbd\u003e and a \u003ckbd\u003eSubmit\u003c/kbd\u003e button.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;!-- Step 1: Personal Information --\u0026gt;\n  \u0026lt;fieldset\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;next\u0026#34; onclick=\u0026#34;nextStep()\u0026#34;\u0026gt;Next\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\n  \u0026lt;!-- Step 2: Work Experience --\u0026gt;\n  \u0026lt;fieldset\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;previous\u0026#34; onclick=\u0026#34;previousStep()\u0026#34;\u0026gt;Previous\u0026lt;/button\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;next\u0026#34; onclick=\u0026#34;nextStep()\u0026#34;\u0026gt;Next\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\n  \u0026lt;!-- Step 3: Skills \u0026amp; Qualifications --\u0026gt;\n  \u0026lt;fieldset\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;previous\u0026#34; onclick=\u0026#34;previousStep()\u0026#34;\u0026gt;Previous\u0026lt;/button\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;next\u0026#34; onclick=\u0026#34;nextStep()\u0026#34;\u0026gt;Next\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\n  \u0026lt;!-- Step 4: Review \u0026amp; Submit --\u0026gt;\n  \u0026lt;fieldset\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n    \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;previous\u0026#34; onclick=\u0026#34;previousStep()\u0026#34;\u0026gt;Previous\u0026lt;/button\u0026gt;\n    \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit Application\u0026lt;/button\u0026gt;\n  \u0026lt;/fieldset\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e: We’ve added \u003ccode\u003eonclick\u003c/code\u003e attributes to the \u003ckbd\u003ePrevious\u003c/kbd\u003e and \u003ckbd\u003eNext\u003c/kbd\u003e buttons to link them to their respective JavaScript functions: \u003ccode\u003epreviousStep()\u003c/code\u003e and \u003ccode\u003enextStep()\u003c/code\u003e.\u003c/p\u003e\u003ch3 id=\"the-next-button\"\u003eThe “Next” Button\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003enextStep()\u003c/code\u003e function is linked to the Next button. Whenever the user clicks the Next button, the \u003ccode\u003enextStep()\u003c/code\u003e function will first check to ensure that all the fields for whatever step the user is on have been filled out correctly before moving on to the next step. If the fields haven’t been filled correctly, it displays some error messages, letting the user know that they’ve done something wrong and informing them what to do to make the errors go away.\u003c/p\u003e\u003cp\u003eBefore we go into the implementation of the \u003ccode\u003enextStep\u003c/code\u003e function, there are certain variables we need to define because they will be needed in the function. First, we need the input fields from the DOM so we can run checks on them to make sure they are valid.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// Step 1 fields\nconst name = document.getElementById(\u0026#34;name\u0026#34;);\nconst email = document.getElementById(\u0026#34;email\u0026#34;);\nconst phone = document.getElementById(\u0026#34;phone\u0026#34;);\n\n// Step 2 fields\nconst company = document.getElementById(\u0026#34;company\u0026#34;);\nconst jobTitle = document.getElementById(\u0026#34;jobTitle\u0026#34;);\nconst yearsExperience = document.getElementById(\u0026#34;yearsExperience\u0026#34;);\n\n// Step 3 fields\nconst skills = document.getElementById(\u0026#34;skills\u0026#34;);\nconst highestDegree = document.getElementById(\u0026#34;highestDegree\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, we’re going to need an array to store our error messages.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elet errorMsgs = [];\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlso, we would need an element in the DOM where we can insert those error messages after they’ve been generated. This element should be placed in the HTML just below the last \u003ccode\u003efieldset\u003c/code\u003e closing tag:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\u0026#34;errorMessages\u0026#34; style=\u0026#34;color: rgb(253, 67, 67)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdd the above \u003ccode\u003ediv\u003c/code\u003e to the JavaScript code using the following line:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst errorMessagesDiv = document.getElementById(\u0026#34;errorMessages\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd finally, we need a variable to keep track of the current step.\u003c/p\u003e\u003cp\u003e\u003ccode\u003elet currentStep = 1;\u003c/code\u003e\u003c/p\u003e\u003cp\u003eNow that we have all our variables in place, here’s the implementation of the \u003ccode\u003enextstep()\u003c/code\u003e function:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efunction nextStep() {\n  errorMsgs = [];\n  errorMessagesDiv.innerText = \u0026#34;\u0026#34;;\n\n  switch (currentStep) {\n    case 1:\n      addValidationErrors(name, email, phone);\n      validateStep(errorMsgs);\n      break;\n\n    case 2:\n      addValidationErrors(company, jobTitle, yearsExperience);\n      validateStep(errorMsgs);\n      break;\n\n    case 3:\n      addValidationErrors(skills, highestDegree);\n      validateStep(errorMsgs);\n      break;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe moment the \u003ckbd\u003eNext\u003c/kbd\u003e button is pressed, our code first checks which step the user is currently on, and based on this information, it validates the data for that specific step by calling the \u003ccode\u003eaddValidationErrors()\u003c/code\u003e function. If there are errors, we display them. Then, the form calls the \u003ccode\u003evalidateStep()\u003c/code\u003e function to verify that there are no errors before moving on to the next step. If there are errors, it prevents the user from going on to the next step.\u003c/p\u003e\u003cp\u003eWhenever the \u003ccode\u003enextStep()\u003c/code\u003e function runs, the error messages are cleared first to avoid appending errors from a different step to existing errors or re-adding existing error messages when the \u003ccode\u003eaddValidationErrors\u003c/code\u003e function runs. The \u003ccode\u003eaddValidationErrors\u003c/code\u003e function is called for each step using the fields for that step as arguments.\u003c/p\u003e\u003cp\u003eHere’s how the \u003ccode\u003eaddValidationErrors\u003c/code\u003e function is implemented:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efunction addValidationErrors(fieldOne, fieldTwo, fieldThree = undefined) {\n  if (!fieldOne.checkValidity()) {\n    const label = document.querySelector(`label[for=\u0026#34;${fieldOne.id}\u0026#34;]`);\n    errorMsgs.push(`Please Enter A Valid ${label.textContent}`);\n  }\n\n  if (!fieldTwo.checkValidity()) {\n    const label = document.querySelector(`label[for=\u0026#34;${fieldTwo.id}\u0026#34;]`);\n    errorMsgs.push(`Please Enter A Valid ${label.textContent}`);\n  }\n\n  if (fieldThree \u0026amp;\u0026amp; !fieldThree.checkValidity()) {\n    const label = document.querySelector(`label[for=\u0026#34;${fieldThree.id}\u0026#34;]`);\n    errorMsgs.push(`Please Enter A Valid ${label.textContent}`);\n  }\n\n  if (errorMsgs.length \u0026gt; 0) {\n    errorMessagesDiv.innerText = errorMsgs.join(\u0026#34;\\n\u0026#34;);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is how the \u003ccode\u003evalidateStep()\u003c/code\u003e function is defined:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efunction validateStep(errorMsgs) {\n  if (errorMsgs.length === 0) {\n    showStep(currentStep + 1);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003evalidateStep()\u003c/code\u003e function checks for errors. If there are none, it proceeds to the next step with the help of the \u003ccode\u003eshowStep()\u003c/code\u003e function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efunction showStep(step) {\n  steps.forEach((el, index) =\u0026gt; {\n    el.hidden = index + 1 !== step;\n  });\n  currentStep = step;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eshowStep()\u003c/code\u003e function requires the four fieldsets in the DOM. Add the following line to the top of the JavaScript code to make the fieldsets available:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst steps = document.querySelectorAll(\u0026#34;.step\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhat the \u003ccode\u003eshowStep()\u003c/code\u003e function does is to go through all the \u003ccode\u003efieldsets\u003c/code\u003e in our form and hide whatever \u003ccode\u003efieldset\u003c/code\u003e is not equal to the one we’re navigating to. Then, it updates the \u003ccode\u003ecurrentStep\u003c/code\u003e variable to be equal to the step we’re navigating to.\u003c/p\u003e\u003ch3 id=\"the-previous-button\"\u003eThe “Previous” Button\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003epreviousStep()\u003c/code\u003e function is linked to the \u003ckbd\u003ePrevious\u003c/kbd\u003e button. Whenever the previous button is clicked, similarly to the \u003ccode\u003enextStep\u003c/code\u003e function, the error messages are also cleared from the page, and navigation is also handled by the \u003ccode\u003eshowStep\u003c/code\u003e function.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efunction previousStep() {\n  errorMessagesDiv.innerText = \u0026#34;\u0026#34;;\n  showStep(currentStep - 1);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhenever the \u003ccode\u003eshowStep()\u003c/code\u003e function is called with “\u003ccode\u003ecurrentStep - 1\u003c/code\u003e” as an argument (as in this case), we go back to the previous step, while moving to the next step happens by calling the \u003ccode\u003eshowStep()\u003c/code\u003e function with “\u003ccode\u003ecurrentStep + 1\u003c/code\u003e” as an argument (as in the case of the \u003ccode\u003evalidateStep()\u003c/code\u003e function).\u003c/p\u003e\u003ch2 id=\"improving-user-experience-with-visual-cues\"\u003eImproving User Experience With Visual Cues\u003c/h2\u003e\u003cp\u003eOne other way of improving the user experience for a multi-step form, is by integrating visual cues, things that will give users feedback on the process they are on. These things can include a progress indicator or a stepper to help the user know the exact step they are on.\u003c/p\u003e\u003ch3 id=\"integrating-a-stepper\"\u003eIntegrating A Stepper\u003c/h3\u003e\u003cp\u003eTo integrate a stepper into our form (sort of like \u003ca href=\"https://m1.material.io/components/steppers.html#\"\u003ethis one\u003c/a\u003e from Material Design), the first thing we need to do is add it to the HTML just below the opening \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;form id=\u0026#34;jobApplicationForm\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;stepper\u0026#34;\u0026gt;\n    \u0026lt;span\u0026gt;\u0026lt;span class=\u0026#34;currentStep\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt;/4\u0026lt;/span\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we need to query the part of the stepper that will represent the current step. This is the span tag with the class name of \u003ccode\u003ecurrentStep\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst currentStepDiv = document.querySelector(\u0026#34;.currentStep\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, we need to update the stepper value whenever the previous or next buttons are clicked. To do this, we need to update the \u003ccode\u003eshowStep()\u003c/code\u003e function by appending the following line to it:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ecurrentStepDiv.innerText = currentStep;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis line is added to the \u003ccode\u003eshowStep()\u003c/code\u003e function because the \u003ccode\u003eshowStep()\u003c/code\u003e function is responsible for navigating between steps and updating the \u003ccode\u003ecurrentStep\u003c/code\u003e variable. So, whenever the \u003ccode\u003ecurrentStep\u003c/code\u003e variable is updated, the currentStepDiv should also be updated to reflect that change.\u003c/p\u003e\u003ch3 id=\"storing-and-retrieving-user-data\"\u003eStoring And Retrieving User Data\u003c/h3\u003e\u003cp\u003eOne major way we can improve the form’s user experience is by storing user data in the browser. Multistep forms are usually long and require users to enter a lot of information about themselves. Imagine a user filling out 95% of a form, then accidentally hitting the \u003ckbd\u003eF5\u003c/kbd\u003e button on their keyboard and losing all their progress. That would be a really bad experience for the user.\u003c/p\u003e\u003cp\u003eUsing \u003ccode\u003elocalStorage\u003c/code\u003e, we can store user information as soon as it is entered and retrieve it as soon as the DOM content is loaded, so users can always continue filling out their forms from wherever they left off. To add this feature to our forms, we can begin by saving the user’s information as soon as it is typed. This can be achieved using the \u003ccode\u003einput\u003c/code\u003e event.\u003c/p\u003e\u003cp\u003eBefore adding the \u003ccode\u003einput\u003c/code\u003e event listener, get the form element from the DOM:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst form = document.getElementById(\u0026#34;jobApplicationForm\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we can add the \u003ccode\u003einput\u003c/code\u003e event listener:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// Save data on each input event\nform.addEventListener(\u0026#34;input\u0026#34;, () =\u0026gt; {\n  const formData = {\n    name: document.getElementById(\u0026#34;name\u0026#34;).value,\n    email: document.getElementById(\u0026#34;email\u0026#34;).value,\n    phone: document.getElementById(\u0026#34;phone\u0026#34;).value,\n    company: document.getElementById(\u0026#34;company\u0026#34;).value,\n    jobTitle: document.getElementById(\u0026#34;jobTitle\u0026#34;).value,\n    yearsExperience: document.getElementById(\u0026#34;yearsExperience\u0026#34;).value,\n    skills: document.getElementById(\u0026#34;skills\u0026#34;).value,\n    highestDegree: document.getElementById(\u0026#34;highestDegree\u0026#34;).value,\n  };\n  localStorage.setItem(\u0026#34;formData\u0026#34;, JSON.stringify(formData));\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNext, we need to add some code to help us retrieve the user data once the DOM content is loaded.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ewindow.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; {\n  const savedData = JSON.parse(localStorage.getItem(\u0026#34;formData\u0026#34;));\n  if (savedData) {\n    document.getElementById(\u0026#34;name\u0026#34;).value = savedData.name || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;email\u0026#34;).value = savedData.email || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;phone\u0026#34;).value = savedData.phone || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;company\u0026#34;).value = savedData.company || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;jobTitle\u0026#34;).value = savedData.jobTitle || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;yearsExperience\u0026#34;).value = savedData.yearsExperience || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;skills\u0026#34;).value = savedData.skills || \u0026#34;\u0026#34;;\n    document.getElementById(\u0026#34;highestDegree\u0026#34;).value = savedData.highestDegree || \u0026#34;\u0026#34;;\n  }\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLastly, it is good practice to remove data from \u003ccode\u003elocalStorage\u003c/code\u003e as soon as it is no longer needed:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// Clear data on form submit\nform.addEventListener(\u0026#39;submit\u0026#39;, () =\u0026gt; {\n  // Clear localStorage once the form is submitted\n  localStorage.removeItem(\u0026#39;formData\u0026#39;);\n}); \n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"adding-the-current-step-value-to-localstorage\"\u003eAdding The Current Step Value To \u003ccode\u003elocalStorage\u003c/code\u003e\u003c/h3\u003e\u003cp\u003eIf the user accidentally closes their browser, they should be able to return to wherever they left off. This means that the current step value also has to be saved in \u003ccode\u003elocalStorage\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eTo save this value, append the following line to the \u003ccode\u003eshowStep()\u003c/code\u003e function:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elocalStorage.setItem(\u0026#34;storedStep\u0026#34;, currentStep);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we can retrieve the current step value and return users to wherever they left off whenever the DOM content loads. Add the following code to the \u003ccode\u003eDOMContentLoaded\u003c/code\u003e handler to do so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003econst storedStep = localStorage.getItem(\u0026#34;storedStep\u0026#34;);\n\nif (storedStep) {\n    const storedStepInt = parseInt(storedStep);\n    steps.forEach((el, index) =\u0026gt; {\n      el.hidden = index + 1 !== storedStepInt;\n    });\n    currentStep = storedStepInt;\n    currentStepDiv.innerText = currentStep;\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAlso, do not forget to clear the current step value from \u003ccode\u003elocalStorage\u003c/code\u003e when the form is submitted.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elocalStorage.removeItem(\u0026#34;storedStep\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe above line should be added to the submit handler.\u003c/p\u003e\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\u003cp\u003eCreating multi-step forms can help improve user experience for complex data entry. By carefully planning out steps, implementing form validation at each step, and temporarily storing user data in the browser, you make it easier for users to complete long forms.\u003c/p\u003e\u003cp\u003eFor the full implementation of this multi-step form, you can access the complete code on \u003ca href=\"https://github.com/jimavictor/multistep-form\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": "2024-12-03T10:00:00Z",
  "modifiedTime": "2024-12-03T10:00:00Z"
}
