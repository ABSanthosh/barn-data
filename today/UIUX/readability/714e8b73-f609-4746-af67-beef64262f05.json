{
  "id": "714e8b73-f609-4746-af67-beef64262f05",
  "title": "Fail early: the hidden design principle behind great UX",
  "link": "https://uxdesign.cc/fail-early-a-hidden-design-principle-of-good-products-and-services-b23af66e0247?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Niaw de Leon",
  "published": "Tue, 11 Feb 2025 23:50:59 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "ux",
    "product-design",
    "user-experience",
    "customer-experience",
    "user-journey"
  ],
  "byline": "Niaw de Leon",
  "length": 7308,
  "excerpt": "There’s a principle in design that doesn’t have a name — at least, as far as I know — but can make or break products and services due to the intense frustration and rage elicited from users when the…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Why good designs fail as early as possible in the user journey.There’s a principle in design that doesn’t have a name — at least, as far as I know — but can make or break products and services due to the intense frustration and rage elicited from users when the principle is violated. I’ve taken to calling it “failing early” because I keep seeing it pop up everywhere.Just to clarify, I’m not referring to the fail fast principle in startup culture in which it’s preferable to spend minimal resources to test an idea, but it’s a tangentially related concept.At first glance, failing early doesn’t sound like a good thing. “Why would I want my service to fail at all?” you might be thinking.But hear me out.Why is it important to fail early?Whether your product is software, or a retail operation, or any other service, you can’t fulfill all customer requests all of the time. You might have geographic constraints that limit your service coverage to certain areas, disruptions to your supply chain that make certain products unavailable, or you might simply get requests that are outside of your core competency.In those situations, it’s better to let the customer know at the earliest possible time that they can’t get what they want. That’s failing early in a nutshell.In a way, failing early is an extension of the UX heuristic visibility of system status, which advises us to “present feedback to the user as quickly as possible” in order to create trust through predictable interactions.Failing early vs. failing lateConsider the scenario when an experience fails late. Let’s say you go to a restaurant. You leaf through the menu, take a few minutes to decide, and finally call the server. The server takes your order. After 15 minutes of waiting, he informs you that the salted fish fried rice is unavailable and asks if you want to have it replaced. You reluctantly agree. After all, you’ve already spent 15 minutes waiting — a sunk cost fallacy, but let’s leave that discussion for another time. After another 20 minutes of waiting, the iced tea and beef brisket arrives but the server informs you that the dumplings you wanted are unavailable. By then your frustration is reaching volcanic levels but it’s too late to back out now. You eat the food you didn’t want in the first place, make a payment, and leave — vowing to leave a bad review.Compare that to the alternative of failing early. You arrive at the restaurant and take your seat. As soon as you sit down, the server immediately informs you that dumplings and salted fish fried rice are unavailable. You decide to go elsewhere.Flow chart illustrating the fail late vs fail early restaurant scenario we discussedFailing late creates so much frustration and annoyance because it wastes your time and locks you into suboptimal options. Conversely, failing early helps you avoid wasting time and resources and maximizes your autonomy.Applying the “fail early” principle to a food delivery appSo how do we apply the “Fail Early” principle?First, you need to identify your failure scenarios. For a food delivery app, this might include the following:The restaurant is closedThe delivery address is outside of the service areaA specific food item is unavailableExpected delivery delays due to a lack of ridersThen, you need to design your customer journeys and flows so that the failure scenarios can surface at the earliest possible time. This is why it’s common for delivery apps to ask for your location at the beginning of the journey so that it can immediately filter out all restaurants that don’t include your address in their service area.Screenshot of the Puregold grocery delivery app which asks for the location so it can filter out grocery items relevant for a given branchClosed restaurants can be handled by either hiding them from the search results or showing them from the search results but placing a label and applying visual styling to indicate that they’re closed.Unavailable food items can be handled similarly by applying visual styling and clear labels to indicate they’re out of stock.Screenshot of Grab Food delivery clearly communicating unavailable itemsFailing early in digital banking and mobile walletsUsing the method we discussed earlier, let’s first identify a key failure scenario for digital banks: third-party downtime. Mobile wallets and digital banking apps typically integrate with a swathe of other third parties to provide services such as paying bills, adding money to your account, sending money across banks, and so on. Inevitably, these other parties will experience downtime.Now, as we’ve talked about, we need to push the failure as early as possible in the user journey to avoid frustration.For example, if there’s a bank transfer facility and the third-party is down, then we shouldn’t let the customer proceed with the transaction at all so that they don’t waste time typing the recipient’s account number and amount, especially if they haven’t saved those details previously.Screenshot of mobile wallet showing that one of the banks, BDO, is unavailableHow do you actually fail early?We now know how to apply the principle on a high level. There’s still one remaining question, though: how do we actually inform the customer in a digital app or service? Should we show an error? Hide the problematic service or product? Disable the item?As usual, it depends on the context. The most important thing is clearly communicating why they can’t proceed with something.For out of stock products, you could place an “Out of stock” or “Unavailable” badge along with subtly greying out some of the colors, though keep in mind your contrast ratios for accessibility.Screenshot of e-commerce app with “Sold Out” badge on A3 paper item, “Out of Stock” indicated under Quantity, and button label changed to “Add to Wishlist” instead of “Add to Cart”For unavailable services like our bills facility on downtime earlier, we can apply a similar badge along with slightly greying out the icon. Then, show an error message when they tap on the icon.What you SHOULDN’T do is just disable buttons or actions without any explanation via copy or error message. Disable buttons is generally bad practice because the user often doesn’t know why it’s disabled.What if you hid the unavailable item instead? Well, hiding has a similar issue: the user doesn’t know what happened and why they suddenly can’t find a feature or product they wanted. Usually, it’s only a good idea to hide something in the UI if it’s irrelevant to the current mode or situation. There are some exceptions.In our example of a food delivery app earlier, you could initially hide the restaurants that are closed, i.e. outside business hours, but provide a filter to show closed restaurants so that customers can order for the next day. Or, you could sort the search results so that the closed restaurants show up at the bottom. That way, the results are more relevant but the customer can still find the closed restaurants.Key takeawaysFailing early means informing customers as soon as possible when you cannot meet their needs, which helps avoid frustration and wasted timeIdentify potential failure scenarios and find ways to surface them to the user as early as possibleClearly communicate why the product, service, or function is unavailable",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*X7khLkcVbyR9Pzkdq5C_kA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"c3eb\"\u003eWhy good designs fail as early as possible in the user journey.\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@niawdeleon?source=post_page---byline--b23af66e0247--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Niaw de Leon\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*jZrurycI5jgn0OlpGHdmfQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--b23af66e0247--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"daf0\"\u003eThere’s a principle in design that doesn’t have a name — at least, as far as I know — but can make or break products and services due to the intense frustration and rage elicited from users when the principle is violated. I’ve taken to calling it “failing early” because I keep seeing it pop up everywhere.\u003c/p\u003e\u003cp id=\"cef4\"\u003eJust to clarify, I’m not referring to the \u003ca href=\"https://www.techtarget.com/whatis/definition/fail-fast\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003efail fast principle in startup culture\u003c/a\u003e in which it’s preferable to spend minimal resources to test an idea, but it’s a tangentially related concept.\u003c/p\u003e\u003cp id=\"50a5\"\u003eAt first glance, failing early doesn’t sound like a good thing. “Why would I want my service to fail at all?” you might be thinking.\u003c/p\u003e\u003cp id=\"537e\"\u003eBut hear me out.\u003c/p\u003e\u003ch2 id=\"4148\"\u003eWhy is it important to fail early?\u003c/h2\u003e\u003cp id=\"166d\"\u003eWhether your product is software, or a retail operation, or any other service, you can’t fulfill all customer requests all of the time. You might have geographic constraints that limit your service coverage to certain areas, disruptions to your supply chain that make certain products unavailable, or you might simply get requests that are outside of your core competency.\u003c/p\u003e\u003cp id=\"7d19\"\u003eIn those situations, it’s better to let the customer know at the earliest possible time that they can’t get what they want. That’s failing early in a nutshell.\u003c/p\u003e\u003cp id=\"b97c\"\u003eIn a way, failing early is an extension of the UX heuristic \u003ca href=\"https://www.nngroup.com/articles/ten-usability-heuristics/#toc-1-visibility-of-system-status-1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003evisibility of system status\u003c/a\u003e, which advises us to “present feedback to the user as quickly as possible” in order to create trust through predictable interactions.\u003c/p\u003e\u003ch2 id=\"5522\"\u003eFailing early vs. failing late\u003c/h2\u003e\u003cp id=\"86a8\"\u003eConsider the scenario when an experience fails late. Let’s say you go to a restaurant. You leaf through the menu, take a few minutes to decide, and finally call the server. The server takes your order. After 15 minutes of waiting, he informs you that the salted fish fried rice is unavailable and asks if you want to have it replaced. You reluctantly agree. After all, you’ve already spent 15 minutes waiting — a \u003ca href=\"https://thedecisionlab.com/biases/the-sunk-cost-fallacy\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esunk cost fallacy\u003c/a\u003e, but let’s leave that discussion for another time. After another 20 minutes of waiting, the iced tea and beef brisket arrives but the server informs you that the dumplings you wanted are unavailable. By then your frustration is reaching volcanic levels but it’s too late to back out now. You eat the food you didn’t want in the first place, make a payment, and leave — vowing to leave a bad review.\u003c/p\u003e\u003cp id=\"76ab\"\u003eCompare that to the alternative of failing early. You arrive at the restaurant and take your seat. As soon as you sit down, the server immediately informs you that dumplings and salted fish fried rice are unavailable. You decide to go elsewhere.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eFlow chart illustrating the fail late vs fail early restaurant scenario we discussed\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b9d0\"\u003eFailing late creates so much frustration and annoyance because it wastes your time and locks you into suboptimal options. Conversely, failing early helps you avoid wasting time and resources and maximizes your autonomy.\u003c/p\u003e\u003ch2 id=\"71c0\"\u003eApplying the “fail early” principle to a food delivery app\u003c/h2\u003e\u003cp id=\"19c4\"\u003eSo how do we apply the “Fail Early” principle?\u003c/p\u003e\u003cp id=\"1605\"\u003eFirst, you need to identify your failure scenarios. For a food delivery app, this might include the following:\u003c/p\u003e\u003cul\u003e\u003cli id=\"f924\"\u003eThe restaurant is closed\u003c/li\u003e\u003cli id=\"69a0\"\u003eThe delivery address is outside of the service area\u003c/li\u003e\u003cli id=\"a354\"\u003eA specific food item is unavailable\u003c/li\u003e\u003cli id=\"420b\"\u003eExpected delivery delays due to a lack of riders\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1660\"\u003eThen, you need to design your customer journeys and flows so that the failure scenarios can surface at the earliest possible time. This is why it’s common for delivery apps to ask for your location at the beginning of the journey so that it can immediately filter out all restaurants that don’t include your address in their service area.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eScreenshot of the Puregold grocery delivery app which asks for the location so it can filter out grocery items relevant for a given branch\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"fe5f\"\u003eClosed restaurants can be handled by either hiding them from the search results or showing them from the search results but placing a label and applying visual styling to indicate that they’re closed.\u003c/p\u003e\u003cp id=\"5759\"\u003eUnavailable food items can be handled similarly by applying visual styling and clear labels to indicate they’re out of stock.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eScreenshot of Grab Food delivery clearly communicating unavailable items\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"e431\"\u003eFailing early in digital banking and mobile wallets\u003c/h2\u003e\u003cp id=\"1e1c\"\u003eUsing the method we discussed earlier, let’s first identify a key failure scenario for digital banks: third-party downtime. Mobile wallets and digital banking apps typically integrate with a swathe of other third parties to provide services such as paying bills, adding money to your account, sending money across banks, and so on. Inevitably, these other parties will experience downtime.\u003c/p\u003e\u003cp id=\"8766\"\u003eNow, as we’ve talked about, we need to push the failure as early as possible in the user journey to avoid frustration.\u003c/p\u003e\u003cp id=\"a7a2\"\u003eFor example, if there’s a bank transfer facility and the third-party is down, then we shouldn’t let the customer proceed with the transaction at all so that they don’t waste time typing the recipient’s account number and amount, especially if they haven’t saved those details previously.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eScreenshot of mobile wallet showing that one of the banks, BDO, is unavailable\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"6517\"\u003eHow do you actually fail early?\u003c/h2\u003e\u003cp id=\"8f9d\"\u003eWe now know how to apply the principle on a high level. There’s still one remaining question, though: how do we actually inform the customer in a digital app or service? Should we show an error? Hide the problematic service or product? Disable the item?\u003c/p\u003e\u003cp id=\"8956\"\u003eAs usual, it depends on the context. The most important thing is clearly communicating why they can’t proceed with something.\u003c/p\u003e\u003cp id=\"c3e8\"\u003eFor out of stock products, you could place an “Out of stock” or “Unavailable” badge along with subtly greying out some of the colors, though keep in mind your contrast ratios for accessibility.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eScreenshot of e-commerce app with “Sold Out” badge on A3 paper item, “Out of Stock” indicated under Quantity, and button label changed to “Add to Wishlist” instead of “Add to Cart”\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"55dd\"\u003eFor unavailable services like our bills facility on downtime earlier, we can apply a similar badge along with slightly greying out the icon. Then, show an error message when they tap on the icon.\u003c/p\u003e\u003cp id=\"6d84\"\u003eWhat you SHOULDN’T do is just disable buttons or actions without any explanation via copy or error message. \u003ca href=\"https://axesslab.com/disabled-buttons-suck/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDisable buttons is generally bad practice\u003c/a\u003e because the user often doesn’t know why it’s disabled.\u003c/p\u003e\u003cp id=\"bdce\"\u003eWhat if you hid the unavailable item instead? Well, hiding has a \u003ca href=\"https://www.smashingmagazine.com/2024/05/hidden-vs-disabled-ux/#:~:text=Hide%20if%20the%20value%20shown,the%20benefits%20of%20an%20upgrade.\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esimilar issue\u003c/a\u003e: the user doesn’t know what happened and why they suddenly can’t find a feature or product they wanted. Usually, it’s only a good idea to hide something in the UI if it’s irrelevant to the current mode or situation. There are some exceptions.\u003c/p\u003e\u003cp id=\"7a42\"\u003eIn our example of a food delivery app earlier, you could initially hide the restaurants that are closed, i.e. outside business hours, but provide a filter to show closed restaurants so that customers can order for the next day. Or, you could sort the search results so that the closed restaurants show up at the bottom. That way, the results are more relevant but the customer can still find the closed restaurants.\u003c/p\u003e\u003ch2 id=\"8aff\"\u003eKey takeaways\u003c/h2\u003e\u003cul\u003e\u003cli id=\"3487\"\u003eFailing early means informing customers as soon as possible when you cannot meet their needs, which helps avoid frustration and wasted time\u003c/li\u003e\u003cli id=\"2ed9\"\u003eIdentify potential failure scenarios and find ways to surface them to the user as early as possible\u003c/li\u003e\u003cli id=\"44ad\"\u003eClearly communicate why the product, service, or function is unavailable\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-02-08T04:37:18.657Z",
  "modifiedTime": null
}
