{
  "id": "1461dfec-6089-417f-83c9-0ff92c38a7cf",
  "title": "Solo Development: Learning To Let Go Of Perfection",
  "link": "https://smashingmagazine.com/2025/01/solo-development-learning-to-let-go-of-perfection/",
  "description": "The best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring, but it can also become a debilitating hindrance to productivity and progress. Victor Ayomipo shares his personal lessons on what it takes to navigate solo development and build the “right” app.",
  "author": "Victor Ayomipo",
  "published": "Fri, 10 Jan 2025 14:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 14776,
  "excerpt": "The best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring, but it can also become a debilitating hindrance to productivity and progress. Victor Ayomipo shares his personal lessons on what it takes to navigate solo development and build the “right” app.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "13 min readWorkflow, Inspiration, Web Design, Opinion ColumnThe best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring, but it can also become a debilitating hindrance to productivity and progress. Victor Ayomipo shares his personal lessons on what it takes to navigate solo development and build the “right” app.As expected from anyone who has ever tried building anything solo, my goal was not to build an app but the app — the one app that’s so good you wonder how you ever survived without it. I had everything in place: wireframes, a to-do list, project structure — you name it. Then I started building. Just not the product. I started with the landing page for it, which took me four days, and I hadn’t even touched the app’s core features yet. The idea itself was so good I had to start marketing it right away!I found myself making every detail perfect: every color, shadow, gradient, font size, margin, and padding had to be spot on. I don’t even want to say how long the logo took.Spoiler:No one cares about your logo.Why did I get so stuck on something that was never even part of the core app I wanted so badly to build? Why wasn’t I nagging myself to move on when I clearly needed to?The reality of solo development is that there is no one to tell you when to stop or simply say, “Yo, this is good enough! Move on.“ Most users don’t care whether a login button is yellow or green. What they want (and need) is a button that works and solves their problem when clicking it.Test Early And OftenUnnecessary tweaks, indecisive UI decisions, and perfectionism are the core reasons I spend more time on things than necessary.Like most solo developers, I also started with the hope of pushing out builds with the efficiency of a large-scale team. But it is easier said than done.When building solo, you start coding, then you maybe notice a design flaw, and you switch to fixing it, then a bug appears, and you try fixing that, and voilà — the day is gone. There comes a time when it hits you that, “You know what? It’s time to build messy.” That’s when good intentions of project and product management go out the window, and that’s when I find myself working by the seat of my pants rather than plowing forward with defined goals and actionable tasks that are based on good UI/UX principles, like storyboards, user personas, and basic prioritization.This realization is something you have to experience to grasp fully. The trick I’ve learned is to focus on getting something out there for people to see and then work on actual feedback. In other words,It’s more important to get the idea out there and iterate on it than reaching for perfection right out of the gate.Because guess what? Even if you have the greatest app idea in the world, you’re never going to make it perfect until you start receiving feedback on it. You’re no mind reader — as much as we all want to be one — and some insights (often the most relevant) can only be received through real user feedback and analytics. Sure, your early assumptions may be correct, but how do you know until you ship them and start evaluating them?Nowadays, I like to tell others (and myself) to work from hypotheses instead of absolutes. Make an assertion, describe how you intend to test it, and then ship it. With that, you can gather relevant insights that you can use to get closer to perfection — whatever that is.Strength In Recognizing WeaknessLet’s be real: Building a full application on your own is not an easy feat. I’d say it’s like trying to build a house by yourself; it seems doable, but the reality is that it takes a lot more hands than the ones you have to make it happen. And not only to make it happen but to make it happen well.There’s only so much one person can do, and admitting your strengths and weaknesses up-front will serve you well by avoiding the trap that you can do it all alone.I once attempted to build a project management app alone. I knew it might be difficult, but I was confident. Within a few days, this “simple” project grew legs and expanded with new features like team collaboration, analytics, time tracking, and custom reports being added, many of which I was super excited to make.Building a full app takes a lot of time. Think about it; you’re doing the work of a team all alone without any help. There’s no one to provide you with design assets, content, or back-end development. No stakeholder to “swoop and poop” on your ideas (which might be a good thing). Every decision, every line of code, and every design element is 100% on you alone.It is technically possible to build a full-featured app solo, but when you think about it, there’s a reason why the concept of MVP exists. Take Instagram, for example; it wasn’t launched with reels, stories, creator’s insights, and so on. It started with one simple thing: photo sharing.All I’m trying to say is start small, launch, and let users guide the evolution of the product. And if you can recruit more hands to help, that would be even better. Just remember to leverage your strengths and reinforce your weaknesses by leaning on other people’s strengths.Yes, Think Like an MVPThe concept of a minimum viable product (MVP) has always been fascinating to me. In its simplest form, it means building the basic version of your idea that technically works and getting it in front of users. Yes, this is such a straightforward and widely distributed tip, but it’s still one of the hardest principles for solo developers to follow, particularly for me.I mentioned earlier that my “genius” app idea grew legs. And lots of them. I had more ideas than I knew what to do with, and I hadn’t even written a reasonable amount of code! Sure, this app could be enhanced to support face ID, dark mode, advanced security, real-time results, and a bunch of other features. But all these could take months of development for an app that you’re not even certain users want.I’ve learned to ask myself: “What would this project look like if it was easy to build?”. It’s so surreal how the answer almost always aligns with what users want. If you can distill your grand idea into a single indispensable idea that does one or two things extremely well, I think you’ll find — as I have — that the final result is laser-focused on solving real user problems.Ship the simplest version first. Dark mode can wait. All you need is a well-defined idea, a hypothesis to test, and a functional prototype to validate that hypothesis; anything else is probably noise.Handle Imperfection GracefullyYou may have heard about the “Ship it Fast” approach to development and instantly recognize the parallels between it and what I’ve discussed so far. In a sense, “Ship it Fast” is ultimately another way of describing an MVP: get the idea out fast and iterate on it just as quickly.Some might disagree with the ship-fast approach and consider it reckless and unprofessional, which is understandable because, as developers, we care deeply about the quality of our work. However,The ship-fast mentality is not to ignore quality but to push something out ASAP and learn from real user experiences. Ship it now — perfect it later.That’s why I like to tell other developers that shipping an MVP is the safest, most professional way to approach development. It forces you to stay in scope and on task without succumbing to your whimsies. I even go so far as to make myself swear an “Oath of Focus” at the start of every project.I, Vayo, hereby solemnly swear (with one hand on this design blueprint) to make no changes, no additions, and no extra features until this app is fully built in all its MVP glory. I pledge to avoid the temptations of endless tweaking and the thoughts of “just one more feature.”Only when a completed prototype is achieved will I consider any new features, enhancements, or tweaks.Signed,Vayo, Keeper of the MVPRemember, there’s no one there to hold you accountable when you develop on your own. Taking a brief moment to pause and accepting that my first version won’t be flawless helps put me in the right headspace early in the project.Prioritize What MattersI have noticed that no matter what I build, there’s always going to be bugs. Always. If Google still has bugs in the Google Notes app, trust me, then it’s fine for a solo developer to accept that bugs will always be a part of any project.Look at flaky tests. For instance, you could run a test over 1,000 times and get all greens, and then the next day, you run the same test, an error shows. It’s just the nature of software development. And for the case of endlessly adding features, it never ends either. There’s always going to be a new feature that you’re excited about. The challenge is to curb some of that enthusiasm and shelve it responsibly for a later time when it makes sense to work on it.I’ve learned to categorize bugs and features into two types: intrusive and non-intrusive. Intrusive are those things that prevent projects from functioning properly until fixed, like crashes and serious errors. The non-intrusive items are silent ones. Sure, they should be fixed, but the product will work just fine and won’t prevent users from getting value if they aren’t addressed right away.You may want to categorize your bugs and features in other ways, and I’ve seen plenty of other examples, including:High value, low value;High effort, low effort;High-cost, low-cost;Need to have, nice to have.I’ve even seen developers and teams use these categorizations to create some fancy priority “score” that considers each category. Whatever it is that helps you stay focused and on-task is going to be the right approach for you more than what specific category you use.Live With Your StackHere’s a classic conundrum in development circles:Should I use React? Or NextJS? Or wait, how about Vue? I heard it’s more optimized. But hold on, I read that React Redux is dead and that Zustand is the new hot tool.And just like that, you’ve spent an entire day thinking about nothing but the tech stack you’re using to build the darn thing.We all know that an average user could care less about the tech stack under the hood. Go ahead and ask your mom what tech stack WhatsApp is built on, and let me know what she says. Most times, it’s just us who obsesses about tech stacks, and that usually only happens when we’re asked to check under the hood.I have come to accept that there will always be new tech stacks released every single day with the promise of 50% performance and 10% less code. That new tool might scale better, but do I actually have a scaling problem with my current number of zero users? Probably not.My advice:Pick the tools you work with best and stick to those tools until they start working against you.There’s no use fighting something early if something you already know and use gets the job done. Basically, don’t prematurely optimize or constantly chase the latest shiny object.Do Design Before The First Line of CodeI know lots of solo developers out there suck at design, and I’m probably among the top 50. My design process has traditionally been to open VS Code, create a new project, and start building the idea in whatever way comes to mind. No design assets, comps, or wireframes to work with — just pure, unstructured improvisation. That’s not a good idea, and it’s a habit I’m actively trying to break.These days, I make sure to have a blueprint of what I’m building before I start writing code. Once I have that, I make sure to follow through and not change anything to respect my “Oath of Focus.”(Large preview)I like how many teams call comps and wireframes “project artifacts.” They are pieces of evidence that provide a source of truth for how something looks and works. You might be the sort of person who works better with sets of requirements, and that’s totally fine. But having some sort of documentation that you can point back to in your work is like having a turn-by-turn navigation on a long road trip — it’s indispensable for getting where you need to go.And what if you’re like me and don’t pride yourself on being the best designer? That’s another opportunity to admit your weaknesses up-front and recruit help from someone with those strengths. That way, you can articulate the goal and focus on what you’re good at.Give Yourself TimelinesPersonally, without deadlines, I’m almost unstoppable at procrastinating. I’ve started setting time limits when building any project, as it helps with procrastination and makes sure something is pushed out at a specified time. Although this won’t work without accountability, I feel the two work hand in hand.I set a 2–3 week deadline to build a project. And no matter what, as soon as that time is up, I must post or share the work in its current state on my socials. Because of this, I’m not in my comfort zone anymore because I won’t want to share a half-baked project with the public; I’m conditioned to work faster and get it all done. It’s interesting to see the length of time you can go if you can trick your brain.I realize that this is an extreme constraint, and it may not work for you. I’m just the kind of person who needs to know what my boundaries are. Setting deadlines and respecting them makes me a more disciplined developer. More than that, it makes me work efficiently because I stop overthinking things when I know I have a fixed amount of time, and that leads to faster builds.ConclusionThe best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring. However, all that freedom can be intoxicating, and if left unchecked, it becomes a debilitating hindrance to productivity and progress. That’s a good reason why solo development isn’t for everyone. Some folks will respond a lot better to a team environment.But if you are a solo developer, then I hope my personal experiences are helpful to you. I’ve had to look hard at myself in the mirror many days to come to realize that I am not a perfect developer who can build the “perfect” app alone. It takes planning, discipline, and humility to make anything, especially the right app that does exactly the right thing.Ideas are cheap and easy, but stepping out of our freedom and adding our own constraints based on progress over perfection is the secret sauce that keeps us moving and spending our time on those essential things.Further Reading On SmashingMag“What’s The Perfect Design Process?,” Vitaly Friedman“Design Under Constraints: Challenges, Opportunities, And Practical Strategies,” Paul Boag“Improving The Double Diamond Design Process,” Andy Budd“Unexpected Learnings From Coding Artwork Every Day For Five Years,” Saskia Freeke (gg, yk)",
  "image": "https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/solo-development-learning-to-let-go-of-perfection.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e13 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/workflow\"\u003eWorkflow\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/inspiration\"\u003eInspiration\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/web-design\"\u003eWeb Design\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/opinion-column\"\u003eOpinion Column\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eThe best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring, but it can also become a debilitating hindrance to productivity and progress. Victor Ayomipo shares his personal lessons on what it takes to navigate solo development and build the “right” app.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eAs expected from anyone who has ever tried building anything solo, my goal was not to build an app but \u003cem\u003ethe\u003c/em\u003e app — the one app that’s so good you wonder how you ever survived without it. I had everything in place: wireframes, a to-do list, project structure — you name it. Then I started building. Just not the product. I started with the landing page for it, which took me four days, and I hadn’t even touched the app’s core features yet. The idea itself was so good I had to start marketing it right away!\u003c/p\u003e\u003cp\u003eI found myself making every detail \u003cem\u003eperfect\u003c/em\u003e: every color, shadow, gradient, font size, margin, and padding had to be spot on. I don’t even want to say how long the logo took.\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eSpoiler\u003c/strong\u003e:\u003cbr/\u003eNo one cares about your logo.\u003c/blockquote\u003e\u003cp\u003eWhy did I get so stuck on something that was never even part of the core app I wanted so badly to build? Why wasn’t I nagging myself to move on when I clearly needed to?\u003c/p\u003e\u003cp\u003eThe reality of solo development is that there is \u003cstrong\u003eno one to tell you when to stop\u003c/strong\u003e or simply say, \u003cem\u003e“Yo, this is good enough! Move on.“\u003c/em\u003e Most users don’t care whether a login button is yellow or green. What they want (and need) is a button that works and solves their problem when clicking it.\u003c/p\u003e\u003ch2 id=\"test-early-and-often\"\u003eTest Early And Often\u003c/h2\u003e\u003cblockquote\u003eUnnecessary tweaks, indecisive UI decisions, and perfectionism are the core reasons I spend more time on things than necessary.\u003c/blockquote\u003e\u003cp\u003eLike most solo developers, I also started with the hope of pushing out builds with the efficiency of a large-scale team. But it is easier said than done.\u003c/p\u003e\u003cp\u003eWhen building solo, you start coding, then you maybe notice a design flaw, and you switch to fixing it, then a bug appears, and you try fixing that, and \u003cem\u003evoilà\u003c/em\u003e — the day is gone. There comes a time when it hits you that, \u003cem\u003e“You know what? It’s time to build messy.”\u003c/em\u003e That’s when good intentions of project and product management go out the window, and that’s when I find myself working by the seat of my pants rather than plowing forward with defined goals and actionable tasks that are based on good UI/UX principles, like storyboards, user personas, and basic prioritization.\u003c/p\u003e\u003cp\u003eThis realization is something you have to experience to grasp fully. The trick I’ve learned is to focus on getting something out there for people to see and then work on actual feedback. In other words,\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aIt%e2%80%99s%20more%20important%20to%20get%20the%20idea%20out%20there%20and%20iterate%20on%20it%20than%20reaching%20for%20perfection%20right%20out%20of%20the%20gate.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f01%2fsolo-development-learning-to-let-go-of-perfection%2f\"\u003eIt’s more important to get the idea out there and iterate on it than reaching for perfection right out of the gate.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eBecause guess what? Even if you have the greatest app idea in the world, you’re never going to make it perfect until you start receiving feedback on it. You’re no mind reader — as much as we all want to be one — and some insights (often the most relevant) can only be received through real user feedback and analytics. Sure, your early assumptions may be correct, but how do you know until you ship them and start evaluating them?\u003c/p\u003e\u003cp\u003eNowadays, I like to tell others (and myself) to work from \u003cstrong\u003ehypotheses\u003c/strong\u003e instead of \u003cstrong\u003eabsolutes\u003c/strong\u003e. Make an assertion, describe how you intend to test it, and then ship it. With that, you can gather relevant insights that you can use to get closer to perfection — whatever that is.\u003c/p\u003e\u003ch2 id=\"strength-in-recognizing-weakness\"\u003eStrength In Recognizing Weakness\u003c/h2\u003e\u003cp\u003eLet’s be real: Building a full application on your own is not an easy feat. I’d say it’s like trying to build a house by yourself; it seems doable, but the reality is that it takes a lot more hands than the ones you have to make it happen. And not only to make it happen but to make it happen well.\u003c/p\u003e\u003cp\u003eThere’s only so much one person can do, and admitting your strengths and weaknesses up-front will serve you well by avoiding the trap that you can do it all alone.\u003c/p\u003e\u003cp\u003eI once attempted to build a project management app alone. I knew it might be difficult, but I was confident. Within a few days, this “simple” project grew legs and expanded with new features like team collaboration, analytics, time tracking, and custom reports being added, many of which I was super excited to make.\u003c/p\u003e\u003cp\u003eBuilding a full app takes a lot of time. Think about it; you’re doing the work of a team all alone without any help. There’s no one to provide you with design assets, content, or back-end development. No stakeholder to \u003ca href=\"https://css-tricks.com/the-impact-of-team-collaboration-and-communication-on-projects/\"\u003e“swoop and poop”\u003c/a\u003e on your ideas (which might be a good thing). Every decision, every line of code, and every design element is 100% on you alone.\u003c/p\u003e\u003cp\u003eIt is technically possible to build a full-featured app solo, but when you think about it, there’s a reason why the concept of MVP exists. Take Instagram, for example; it wasn’t launched with reels, stories, creator’s insights, and so on. It started with one simple thing: \u003cem\u003ephoto sharing\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eAll I’m trying to say is \u003cstrong\u003estart small\u003c/strong\u003e, \u003cstrong\u003elaunch\u003c/strong\u003e, and \u003cstrong\u003elet users guide the evolution of the product\u003c/strong\u003e. And if you can recruit more hands to help, that would be even better. Just remember to leverage your strengths and reinforce your weaknesses by leaning on other people’s strengths.\u003c/p\u003e\u003ch2 id=\"yes-think-like-an-mvp\"\u003eYes, Think Like an MVP\u003c/h2\u003e\u003cp\u003eThe concept of a \u003cstrong\u003eminimum viable product\u003c/strong\u003e (MVP) has always been fascinating to me. In its simplest form, it means building the basic version of your idea that technically works and getting it in front of users. Yes, this is such a straightforward and widely distributed tip, but it’s still one of the hardest principles for solo developers to follow, particularly for me.\u003c/p\u003e\u003cp\u003eI mentioned earlier that my “genius” app idea grew legs. And lots of them. I had more ideas than I knew what to do with, and I hadn’t even written a reasonable amount of code! Sure, this app could be enhanced to support face ID, dark mode, advanced security, real-time results, and a bunch of other features. But all these could take months of development for an app that you’re not even certain users want.\u003c/p\u003e\u003cp\u003eI’ve learned to ask myself: \u003cem\u003e“What would this project look like if it was easy to build?”.\u003c/em\u003e It’s so surreal how the answer almost always aligns with what users want. If you can distill your grand idea into a single indispensable idea that does one or two things \u003cem\u003eextremely well\u003c/em\u003e, I think you’ll find — as I have — that the final result is laser-focused on solving real user problems.\u003c/p\u003e\u003cp\u003eShip the simplest version first. Dark mode can wait. All you need is a well-defined idea, a hypothesis to test, and a functional prototype to validate that hypothesis; anything else is probably noise.\u003c/p\u003e\u003ch2 id=\"handle-imperfection-gracefully\"\u003eHandle Imperfection Gracefully\u003c/h2\u003e\u003cp\u003eYou may have heard about the \u003ca href=\"https://medium.com/the-liberators/ship-it-fast-what-does-it-mean-why-does-it-matter-and-what-can-you-improve-3ad13d9786b4\"\u003e“Ship it Fast” approach to development\u003c/a\u003e and instantly recognize the parallels between it and what I’ve discussed so far. In a sense, “Ship it Fast” is ultimately another way of describing an MVP: get the idea out fast and iterate on it just as quickly.\u003c/p\u003e\u003cp\u003eSome might disagree with the ship-fast approach and consider it reckless and unprofessional, which is understandable because, as developers, we care deeply about the quality of our work. However,\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aThe%20ship-fast%20mentality%20is%20not%20to%20ignore%20quality%20but%20to%20push%20something%20out%20ASAP%20and%20learn%20from%20real%20user%20experiences.%20Ship%20it%20now%20%e2%80%94%20perfect%20it%20later.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f01%2fsolo-development-learning-to-let-go-of-perfection%2f\"\u003eThe ship-fast mentality is not to ignore quality but to push something out ASAP and learn from real user experiences. Ship it now — perfect it later.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThat’s why I like to tell other developers that \u003cstrong\u003eshipping an MVP is the safest, most professional way to approach development\u003c/strong\u003e. It forces you to stay in scope and on task without succumbing to your whimsies. I even go so far as to make myself swear an “Oath of Focus” at the start of every project.\u003c/p\u003e\u003cblockquote\u003eI, Vayo, hereby solemnly swear (with one hand on this design blueprint) to make no changes, no additions, and no extra features until this app is fully built in all its MVP glory. I pledge to avoid the temptations of endless tweaking and the thoughts of “just one more feature.”\u003cp\u003eOnly when a completed prototype is achieved will I consider any new features, enhancements, or tweaks.\u003c/p\u003e\u003cp\u003eSigned,\u003cbr/\u003eVayo, Keeper of the MVP\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eRemember, there’s no one there to hold you accountable when you develop on your own. Taking a brief moment to pause and accepting that my first version won’t be flawless helps put me in the right headspace early in the project.\u003c/p\u003e\u003ch2 id=\"prioritize-what-matters\"\u003ePrioritize What Matters\u003c/h2\u003e\u003cp\u003eI have noticed that no matter what I build, there’s always going to be bugs. Always. If Google still has bugs in the Google Notes app, trust me, then it’s fine for a solo developer to accept that bugs will always be a part of any project.\u003c/p\u003e\u003cp\u003eLook at flaky tests. For instance, you could run a test over 1,000 times and get all greens, and then the next day, you run the same test, an error shows. It’s just the nature of software development. And for the case of endlessly adding features, it never ends either. There’s always going to be a new feature that you’re excited about. The challenge is \u003cstrong\u003eto curb some of that enthusiasm and shelve it responsibly\u003c/strong\u003e for a later time when it makes sense to work on it.\u003c/p\u003e\u003cp\u003eI’ve learned to categorize bugs and features into two types: \u003cstrong\u003eintrusive\u003c/strong\u003e and \u003cstrong\u003enon-intrusive\u003c/strong\u003e. Intrusive are those things that prevent projects from functioning properly until fixed, like crashes and serious errors. The non-intrusive items are silent ones. Sure, they should be fixed, but the product will work just fine and won’t prevent users from getting value if they aren’t addressed right away.\u003c/p\u003e\u003cp\u003eYou may want to categorize your bugs and features in other ways, and I’ve seen plenty of other examples, including:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHigh value, low value;\u003c/li\u003e\u003cli\u003eHigh effort, low effort;\u003c/li\u003e\u003cli\u003eHigh-cost, low-cost;\u003c/li\u003e\u003cli\u003eNeed to have, nice to have.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI’ve even seen developers and teams use these categorizations to create some fancy priority “score” that considers each category. \u003cstrong\u003eWhatever it is that helps you stay focused and on-task is going to be the right approach for you more than what specific category you use.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"live-with-your-stack\"\u003eLive With Your Stack\u003c/h2\u003e\u003cp\u003eHere’s a classic conundrum in development circles:\u003c/p\u003e\u003cblockquote\u003eShould I use React? Or NextJS? Or wait, how about Vue? I heard it’s more optimized. But hold on, I read that React Redux is dead and that Zustand is the new hot tool.\u003c/blockquote\u003e\u003cp\u003eAnd just like that, you’ve spent an entire day thinking about nothing but the tech stack you’re using to build the darn thing.\u003c/p\u003e\u003cp\u003eWe all know that an average user could care less about the tech stack under the hood. Go ahead and ask your mom what tech stack WhatsApp is built on, and let me know what she says. Most times, it’s just us who obsesses about tech stacks, and that usually only happens when we’re asked to check under the hood.\u003c/p\u003e\u003cp\u003eI have come to accept that there will always be new tech stacks released every single day with the promise of 50% performance and 10% less code. That new tool might scale better, but do I actually have a scaling problem with my current number of \u003cem\u003ezero\u003c/em\u003e users? Probably not.\u003c/p\u003e\u003cp\u003eMy advice:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aPick%20the%20tools%20you%20work%20with%20best%20and%20stick%20to%20those%20tools%20until%20they%20start%20working%20against%20you.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f01%2fsolo-development-learning-to-let-go-of-perfection%2f\"\u003ePick the tools you work with best and stick to those tools until they start working against you.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThere’s no use fighting something early if something you already know and use gets the job done. Basically, \u003cstrong\u003edon’t prematurely optimize or constantly chase the latest shiny object\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"do-design-before-the-first-line-of-code\"\u003eDo Design Before The First Line of Code\u003c/h2\u003e\u003cp\u003eI know lots of solo developers out there suck at design, and I’m probably among the top 50. My design process has traditionally been to open VS Code, create a new project, and start building the idea in whatever way comes to mind. No design assets, comps, or wireframes to work with — just pure, unstructured improvisation. That’s not a good idea, and it’s a habit I’m actively trying to break.\u003c/p\u003e\u003cp\u003eThese days, I make sure to have \u003cstrong\u003ea blueprint of what I’m building\u003c/strong\u003e before I start writing code. Once I have that, I make sure to follow through and not change anything to respect my “Oath of Focus.”\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"593\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg\" sizes=\"100vw\" alt=\"A blueprint of the design\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/solo-development-learning-to-let-go-of-perfection/1-blueprint-design-project.jpg\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eI like how many teams call comps and wireframes “project artifacts.” They are pieces of evidence that provide a source of truth for how something looks and works. You might be the sort of person who works better with sets of requirements, and that’s totally fine. But having some sort of documentation that you can point back to in your work is like having a turn-by-turn navigation on a long road trip — it’s indispensable for getting where you need to go.\u003c/p\u003e\u003cp\u003eAnd what if you’re like me and don’t pride yourself on being the best designer? That’s another opportunity to admit your weaknesses up-front and recruit help from someone with those strengths. That way, you can articulate the goal and focus on what you’re good at.\u003c/p\u003e\u003ch2 id=\"give-yourself-timelines\"\u003eGive Yourself Timelines\u003c/h2\u003e\u003cp\u003ePersonally, without deadlines, I’m almost unstoppable at procrastinating. I’ve started setting time limits when building any project, as it helps with procrastination and makes sure something is pushed out at a specified time. Although this won’t work without accountability, I feel the two work hand in hand.\u003c/p\u003e\u003cp\u003eI set a 2–3 week deadline to build a project. And no matter what, as soon as that time is up, I must post or share the work in its current state on my socials. Because of this, I’m not in my comfort zone anymore because I won’t want to share a half-baked project with the public; I’m conditioned to work faster and get it all done. It’s interesting to see the length of time you can go if you can trick your brain.\u003c/p\u003e\u003cp\u003eI realize that this is an extreme constraint, and it may not work for you. I’m just the kind of person who needs to know what my boundaries are. Setting deadlines and respecting them makes me a more disciplined developer. More than that, it makes me work efficiently because \u003cstrong\u003eI stop overthinking things when I know I have a fixed amount of time\u003c/strong\u003e, and that leads to faster builds.\u003c/p\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eThe best and worst thing about solo development is the “solo” part. There’s a lot of freedom in working alone, and that freedom can be inspiring. However, all that freedom can be intoxicating, and if left unchecked, it becomes a debilitating hindrance to productivity and progress. That’s a good reason why solo development isn’t for everyone. Some folks will respond a lot better to a team environment.\u003c/p\u003e\u003cp\u003eBut if you are a solo developer, then I hope my personal experiences are helpful to you. I’ve had to look hard at myself in the mirror many days to come to realize that I am not a perfect developer who can build the “perfect” app alone. It takes \u003cstrong\u003eplanning\u003c/strong\u003e, \u003cstrong\u003ediscipline\u003c/strong\u003e, and \u003cstrong\u003ehumility\u003c/strong\u003e to make anything, especially the \u003cem\u003eright\u003c/em\u003e app that does exactly the \u003cem\u003eright\u003c/em\u003e thing.\u003c/p\u003e\u003cp\u003eIdeas are cheap and easy, but stepping out of our freedom and adding our own constraints based on \u003cstrong\u003eprogress over perfection\u003c/strong\u003e is the secret sauce that keeps us moving and spending our time on those essential things.\u003c/p\u003e\u003ch3 id=\"further-reading-on-smashingmag\"\u003eFurther Reading On SmashingMag\u003c/h3\u003e\u003cul\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2023/06/perfect-design-process/\"\u003eWhat’s The Perfect Design Process?\u003c/a\u003e,” Vitaly Friedman\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2022/07/overcoming-imposter-syndrome-developing-guiding-principles/\"\u003eDesign Under Constraints: Challenges, Opportunities, And Practical Strategies\u003c/a\u003e,” Paul Boag\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2023/08/improving-double-diamond-design-process/\"\u003eImproving The Double Diamond Design Process\u003c/a\u003e,” Andy Budd\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2020/09/learnings-coding-artwork/\"\u003eUnexpected Learnings From Coding Artwork Every Day For Five Years\u003c/a\u003e,” Saskia Freeke\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-01-10T14:00:00Z",
  "modifiedTime": "2025-01-10T14:00:00Z"
}
