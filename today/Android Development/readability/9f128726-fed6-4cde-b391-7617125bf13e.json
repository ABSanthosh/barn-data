{
  "id": "9f128726-fed6-4cde-b391-7617125bf13e",
  "title": "Jetpack Compose Multiplatform!?",
  "link": "https://chrynan.codes/jetpack-compose-multiplatform/",
  "description": "The Jetpack Compose UI toolkit for Android now supports the Desktop with the possibility of more platforms.",
  "author": "Christopher Keenan",
  "published": "Tue, 08 Dec 2020 23:41:07 GMT",
  "source": "https://chrynan.codes/rss/",
  "categories": [
    "jetpack compose",
    "android",
    "kotlin",
    "kotlin multi-platform",
    "kotlin multiplatform",
    "jetpack",
    "flutter",
    "android compose"
  ],
  "byline": "Christopher Keenan",
  "length": 2789,
  "excerpt": "The Jetpack Compose UI toolkit for Android now supports the Desktop with the possibility of more platforms.",
  "siteName": "Chris Keenan Codes",
  "favicon": "https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/code_FILL0_wght400_GRAD0_opsz48.svg",
  "text": "The Jetpack Compose UI toolkit for Android now supports the Desktop with the possibility of more platforms. Jetpack Compose, the new UI toolkit for Android, that is currently in an Alpha stage, has made it's way over to Desktop App development. The same UI toolkit used for Android application development can now be used for Desktop applications. Though both Jetpack Compose and Compose for Desktop are in early development stages, I'm excited to see them progress and am looking forward to their eventual promotion to stable APIs. There was observation and discussion awhile back about Jetpack Compose being developed using Kotlin Multi-platform (expect/actual declarations, etc). Now with the introduction of Compose for Desktop by Jetbrains, Kotlin Multi-platform has become apparent. But this leads one to wonder, what other platforms can Jetpack Compose target? An experimental project was already created for getting the Jetpack Compose APIs to work for the Web and Javascript. So we know it is possible to target more than just Android with Jetpack Compose, however the question remains: which platform targets will be available? Personally, I would like to see Jetpack Compose expand it's support to iOS. This makes sense since it is a similar platform, both being mobile environments, and with Kotlin Multi-platform it should be possible (though might require heavy work on the iOS implementation side). If that were the case, this could effectively replace Flutter, since a cross-platform UI toolkit along with Kotlin's Multi-platform support would provide a greater app development experience by allowing code sharing and removing redundant platform-specific implementations for every project.Awhile back I wrote an article about some of my concerns with the Jetpack Compose toolkit. Some of these concerns have since been addressed, specifically, the use of ConstraintLayout and RecyclerView alternatives. The Jetpack Compose ReyclerView alternatives are LazyColumnFor and LazyRowFor for vertical and horizontal lists, respectively, as seen in this article. And the use of ConstraintLayout in Jetpack Compose can be seen in the documentation. This alleviates some of my concerns with the Jetpack Compose toolkit and I am looking forward to it's progress and promotion to a stable API.The Jetpack Compose toolkit is a promising approach to UI development on Android, now desktop, and hopefully, soon much more.ResourcesJetpack ComposeJetpack Compose for DesktopJetpack Compose for WebConcerning Jetpack ComposeJetpack Compose: Optimism and Opportunity",
  "image": "https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/untitled-1-.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"site-main\"\u003e\n\u003carticle\u003e\n\n    \u003cheader\u003e\n\n        \n\n        \n\n            \u003cp\u003eThe Jetpack Compose UI toolkit for Android now supports the Desktop with the possibility of more platforms.\u003c/p\u003e\n\n        \u003csection\u003e\n\n            \u003cul\u003e\n                \u003cli\u003e\n                    \u003ca href=\"https://chrynan.codes/author/chrynan/\" aria-label=\"Read more of Christopher Keenan\"\u003e\n                        \u003cimg src=\"https://www.gravatar.com/avatar/2179fa575001969b7a3397951ef91a8f?s=250\u0026amp;d=mm\u0026amp;r=x\" alt=\"Christopher Keenan\"/\u003e\n                    \u003c/a\u003e\n                \u003c/li\u003e\n            \u003c/ul\u003e\n\n            \n\n        \u003c/section\u003e\n\n            \u003cfigure\u003e\n                \u003cimg srcset=\"https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/size/w300/2023/02/untitled-1-.png 300w,\n                            https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/size/w600/2023/02/untitled-1-.png 600w,\n                            https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/size/w1000/2023/02/untitled-1-.png 1000w,\n                            https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/untitled-1-.png 2000w\" sizes=\"(min-width: 1400px) 1400px, 92vw\" src=\"https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/untitled-1-.png\" alt=\"Jetpack Compose Multiplatform!?\"/\u003e\n            \u003c/figure\u003e\n\n    \u003c/header\u003e\n\n    \u003csection\u003e\n        \u003cp\u003e\u003ca href=\"https://developer.android.com/jetpack/compose?ref=chrynan.codes\"\u003eJetpack Compose\u003c/a\u003e, the new UI toolkit for Android, that is currently in an Alpha stage, has made it\u0026#39;s way over to \u003ca href=\"https://www.jetbrains.com/lp/compose/?ref=chrynan.codes\"\u003eDesktop App development\u003c/a\u003e. The same UI toolkit used for Android application development can now be used for Desktop applications. Though both Jetpack Compose and Compose for Desktop are in early development stages, I\u0026#39;m excited to see them progress and am looking forward to their eventual promotion to stable APIs. \u003c/p\u003e\u003cp\u003eThere was observation and discussion awhile back about Jetpack Compose being developed using Kotlin Multi-platform (expect/actual declarations, etc). Now with the introduction of \u003ca href=\"https://www.jetbrains.com/lp/compose/?ref=chrynan.codes\"\u003eCompose for Desktop\u003c/a\u003e by \u003ca href=\"https://www.jetbrains.com/?ref=chrynan.codes\"\u003eJetbrains\u003c/a\u003e, Kotlin Multi-platform has become apparent. But this leads one to wonder, what other platforms can Jetpack Compose target? An \u003ca href=\"https://github.com/JetBrains/compose-for-web-demos?ref=chrynan.codes\"\u003eexperimental project\u003c/a\u003e was already created for getting the Jetpack Compose APIs to work for the Web and Javascript. So we know it is possible to target more than just Android with Jetpack Compose, however the question remains: which platform targets will be available? \u003c/p\u003e\u003cp\u003ePersonally, I would like to see Jetpack Compose expand it\u0026#39;s support to iOS. This makes sense since it is a similar platform, both being mobile environments, and with Kotlin Multi-platform it should be possible (though might require heavy work on the iOS implementation side). If that were the case, this could effectively replace \u003ca href=\"https://flutter.dev/?ref=chrynan.codes\"\u003eFlutter\u003c/a\u003e, since a cross-platform UI toolkit along with Kotlin\u0026#39;s Multi-platform support would provide a greater app development experience by allowing code sharing and removing redundant platform-specific implementations for every project.\u003c/p\u003e\u003cp\u003eAwhile back I wrote an \u003ca href=\"https://chrynan.codes/concerns-with-the-jetpack-compose-library/\"\u003earticle\u003c/a\u003e about some of my concerns with the Jetpack Compose toolkit. Some of these concerns have since been addressed, specifically, the use of \u003ccode\u003eConstraintLayout\u003c/code\u003e and \u003ccode\u003eRecyclerView\u003c/code\u003e alternatives. The Jetpack Compose \u003ccode\u003eReyclerView\u003c/code\u003e alternatives are \u003ccode\u003eLazyColumnFor\u003c/code\u003e and \u003ccode\u003eLazyRowFor\u003c/code\u003e for vertical and horizontal lists, respectively, as seen in this \u003ca href=\"https://proandroiddev.com/how-to-make-a-recyclerview-in-jetpack-compose-bf4751abee80?ref=chrynan.codes\"\u003earticle\u003c/a\u003e. And the use of \u003ccode\u003eConstraintLayout\u003c/code\u003e in Jetpack Compose can be seen in the \u003ca href=\"https://developer.android.com/jetpack/compose/layout?ref=chrynan.codes#contraintlayout\"\u003edocumentation\u003c/a\u003e. This alleviates some of my concerns with the Jetpack Compose toolkit and I am looking forward to it\u0026#39;s progress and promotion to a stable API.\u003c/p\u003e\u003cp\u003eThe Jetpack Compose toolkit is a promising approach to UI development on Android, now desktop, and hopefully, soon much more.\u003c/p\u003e\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://developer.android.com/jetpack/compose?ref=chrynan.codes\"\u003eJetpack Compose\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/lp/compose/?ref=chrynan.codes\"\u003eJetpack Compose for Desktop\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/JetBrains/compose-for-web-demos?ref=chrynan.codes\"\u003eJetpack Compose for Web\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://chrynan.codes/concerns-with-the-jetpack-compose-library/\"\u003eConcerning Jetpack Compose\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://commonsware.com/blog/2019/06/04/jetpack-compose-optimism-opportunity.html?ref=chrynan.codes\"\u003eJetpack Compose: Optimism and Opportunity\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n    \u003c/section\u003e\n\n\n\u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2020-12-08T23:41:07Z",
  "modifiedTime": "2023-02-08T15:28:31Z"
}
