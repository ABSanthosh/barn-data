{
  "id": "3e227f18-d8e6-453b-a84a-fe4e2220b46b",
  "title": "Read a File in a Kotlin/Multiplatform Test",
  "link": "https://publicobject.com/2023/04/16/read-a-project-file-in-a-kotlin-multiplatform-test/",
  "description": "I like writing unit tests that read test cases from a data file:Zipline does ECDSA and EdDSA signing. It gets test data from Project Wycheproof.OkHttp does URL parsing. It gets test data from The web-platform-tests Project.OkHttp-ICU does Unicode Normalization. It gets its test data from Unicode’s",
  "author": "Jesse Wilson",
  "published": "Sun, 16 Apr 2023 02:02:17 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 3166,
  "excerpt": "I like writing unit tests that read test cases from a data file: * Zipline [https://github.com/cashapp/zipline] does ECDSA and EdDSA signing. It gets test data from Project Wycheproof [https://github.com/google/wycheproof] . * OkHttp [https://github.com/square/okhttp/] does URL parsing. It gets test data from The web-platform-tests Project [https://github.com/w3c/web-platform-tests/]. * OkHttp-ICU [https://github.com/swankjesse/okhttp-icu] does Unicode Normalization. It gets i",
  "siteName": "Public Object",
  "favicon": "",
  "text": "I like writing unit tests that read test cases from a data file:Zipline does ECDSA and EdDSA signing. It gets test data from Project Wycheproof.OkHttp does URL parsing. It gets test data from The web-platform-tests Project.OkHttp-ICU does Unicode Normalization. It gets its test data from Unicode’s test suite.In each case I get to leverage somebody else’s hard work to define expected inputs and outputs. Using an upstream project’s test file verbatim makes it easy to apply updates.CWD in Kotlin/Multiplatform TestsDoing this on Kotlin/JVM is very easy. Gradle’s test runner conveniently sets the test process’s current working directory (CWD) to the enclosing module’s directory:val file = File(\"src/test/testdata/file.txt\") val testData = FileInputStream(file).use { inputStream -\u003e readTestData(inputStream) } Kotlin/Native is trickier ’cause java.io.File doesn’t exist there. But I prefer Okio’s FileSystem anyway:val path = \"src/commonTest/testdata/file.txt\".toPath() return FileSystem.SYSTEM.read(path) { readTestData(this) } But soon our luck runs out.On Kotlin/JS the test’s working directory is not the enclosing module’s directory; instead it’s far off in child of a build/ directory off the project root (KT-49125). We’ll also need the optional okio-nodefilesystem artifact to read files from JavaScript.And when tests run on the iOS simulator, the working directory is completely unrelated to the project directory.Set an Environment Variable Instead!We can’t rely on the current working directory to be consistent so we’ll tell our test process where to look using an environment variable.Paste this in your build.gradle.kts to set an environment variable for each kind of test:allprojects { tasks.withType\u003cKotlinJvmTest\u003e().configureEach { environment(\"ZIPLINE_ROOT\", rootDir) } tasks.withType\u003cKotlinNativeTest\u003e().configureEach { environment(\"SIMCTL_CHILD_ZIPLINE_ROOT\", rootDir) environment(\"ZIPLINE_ROOT\", rootDir) } tasks.withType\u003cKotlinJsTest\u003e().configureEach { environment(\"ZIPLINE_ROOT\", rootDir.toString()) } } Note the SIMCTL_CHILD_ prefix! It’s how I got the environment variable to propagate into the iOS simulator. This StackOverflow question tipped me off on it. I couldn’t find formal documentation for this thing.Reading that Environment VariableJust as we set our environment variable in a different way on each platform, we gotta do similarly to read it back.In commonTest:internal expect fun getEnv(name: String): String?In jvmTest: internal actual fun getEnv(name: String): String? = System.getenv(name)In jsTest: internal actual fun getEnv(name: String): String? = js(\"globalThis.process.env[name]\") as String?And in each native target:import platform.posix.getenv import kotlinx.cinterop.toKString internal actual fun getEnv(name: String): String? = getenv(name)?.toKString() Finally the payoff goes in commonTest: private val ziplineRoot = getEnv(\"ZIPLINE_ROOT\")!!.toPath() Multiplatform Tests Are RadIt takes some setup to read files and do environment variables in Kotlin/Multiplatform.But once it’s done? I get to verify that my code does the same thing on every platform. I love it.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\t\t\t\u003cp\u003eI like writing unit tests that read test cases from a data file:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/cashapp/zipline\"\u003eZipline\u003c/a\u003e does ECDSA and EdDSA signing. It gets test data from \u003ca href=\"https://github.com/google/wycheproof\"\u003eProject Wycheproof\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/square/okhttp/\"\u003eOkHttp\u003c/a\u003e does URL parsing. It gets test data from \u003ca href=\"https://github.com/w3c/web-platform-tests/\"\u003eThe web-platform-tests Project\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/swankjesse/okhttp-icu\"\u003eOkHttp-ICU\u003c/a\u003e does Unicode Normalization. It gets its test data from \u003ca href=\"https://www.unicode.org/reports/tr44/#Test_Files\"\u003eUnicode’s test suite\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIn each case I get to leverage somebody else’s hard work to define expected inputs and outputs. Using an upstream project’s test file verbatim makes it easy to apply updates.\u003c/p\u003e\u003ch3 id=\"cwd-in-kotlin-multiplatform-tests\"\u003eCWD in Kotlin/Multiplatform Tests\u003c/h3\u003e\u003cp\u003eDoing this on Kotlin/JVM is very easy. Gradle’s test runner conveniently sets the test process’s current working directory (CWD) to the enclosing module’s directory:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eval file = File(\u0026#34;src/test/testdata/file.txt\u0026#34;)\nval testData = FileInputStream(file).use { inputStream -\u0026gt;\n  readTestData(inputStream)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eKotlin/Native is trickier ’cause \u003ccode\u003ejava.io.File\u003c/code\u003e doesn’t exist there. But I prefer \u003ca href=\"https://square.github.io/okio/file_system/\"\u003eOkio’s FileSystem\u003c/a\u003e anyway:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eval path = \u0026#34;src/commonTest/testdata/file.txt\u0026#34;.toPath()\nreturn FileSystem.SYSTEM.read(path) {\n  readTestData(this)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBut soon our luck runs out.\u003c/p\u003e\u003cp\u003eOn Kotlin/JS the test’s working directory is not the enclosing module’s directory; instead it’s far off in child of a \u003ccode\u003ebuild/\u003c/code\u003e directory off the project root (\u003ca href=\"https://youtrack.jetbrains.com/issue/KT-49125/Ensure-common-tests-are-using-the-same-working-directory-on-all-platforms\"\u003eKT-49125\u003c/a\u003e). We’ll also need the optional \u003ccode\u003eokio-nodefilesystem\u003c/code\u003e artifact to read files from JavaScript.\u003c/p\u003e\u003cp\u003eAnd when tests run on the iOS simulator, the working directory is completely unrelated to the project directory.\u003c/p\u003e\u003ch3 id=\"set-an-environment-variable-instead-\"\u003eSet an Environment Variable Instead!\u003c/h3\u003e\u003cp\u003eWe can’t rely on the current working directory to be consistent so we’ll tell our test process where to look using an environment variable.\u003c/p\u003e\u003cp\u003ePaste this in your \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e to set an environment variable for each kind of test:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eallprojects {\n  tasks.withType\u0026lt;KotlinJvmTest\u0026gt;().configureEach {\n    environment(\u0026#34;ZIPLINE_ROOT\u0026#34;, rootDir)\n  }\n\n  tasks.withType\u0026lt;KotlinNativeTest\u0026gt;().configureEach {\n    environment(\u0026#34;SIMCTL_CHILD_ZIPLINE_ROOT\u0026#34;, rootDir)\n    environment(\u0026#34;ZIPLINE_ROOT\u0026#34;, rootDir)\n  }\n\n  tasks.withType\u0026lt;KotlinJsTest\u0026gt;().configureEach {\n    environment(\u0026#34;ZIPLINE_ROOT\u0026#34;, rootDir.toString())\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote the \u003ccode\u003eSIMCTL_CHILD_\u003c/code\u003e prefix! It’s how I got the environment variable to propagate into the iOS simulator. This \u003ca href=\"https://stackoverflow.com/a/53604237/40013\"\u003eStackOverflow question\u003c/a\u003e tipped me off on it. I couldn’t find formal documentation for this thing.\u003c/p\u003e\u003ch3 id=\"reading-that-environment-variable\"\u003eReading that Environment Variable\u003c/h3\u003e\u003cp\u003eJust as we set our environment variable in a different way on each platform, we gotta do similarly to read it back.\u003c/p\u003e\u003cp\u003eIn \u003ccode\u003ecommonTest\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003einternal expect fun getEnv(name: String): String?\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn \u003ccode\u003ejvmTest\u003c/code\u003e: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003einternal actual fun getEnv(name: String): String? =\n  System.getenv(name)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn \u003ccode\u003ejsTest\u003c/code\u003e: \u003c/p\u003e\u003cpre\u003e\u003ccode\u003einternal actual fun getEnv(name: String): String? = \n  js(\u0026#34;globalThis.process.env[name]\u0026#34;) as String?\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd in each native target:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eimport platform.posix.getenv\nimport kotlinx.cinterop.toKString\n\ninternal actual fun getEnv(name: String): String? =\n  getenv(name)?.toKString()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally the payoff goes in \u003ccode\u003ecommonTest\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    private val ziplineRoot = getEnv(\u0026#34;ZIPLINE_ROOT\u0026#34;)!!.toPath()\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"multiplatform-tests-are-rad\"\u003eMultiplatform Tests Are Rad\u003c/h3\u003e\u003cp\u003eIt takes some setup to read files and do environment variables in Kotlin/Multiplatform.\u003c/p\u003e\u003cp\u003eBut once it’s done? I get to verify that my code does the same thing on every platform. I love it.\u003c/p\u003e\n\t\t\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2023-04-16T02:02:17Z",
  "modifiedTime": "2023-04-16T03:23:27Z"
}
