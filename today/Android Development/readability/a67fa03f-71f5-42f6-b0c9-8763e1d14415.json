{
  "id": "a67fa03f-71f5-42f6-b0c9-8763e1d14415",
  "title": "Adding Custom Actions to Share Sheets in Android 14",
  "link": "https://joebirch.co/android/adding-custom-actions-to-share-sheets-in-android-14/",
  "description": "When interacting with Android Apps, share sheets are a common component that we’ll interact with when sharing content with other apps and contacts. As developers, we can improve the usability of these share sheets by utilising features such as adding previews for content being shared, as well as implementing direct share targets to commonly interacted... Continue reading →",
  "author": "hitherejoe",
  "published": "Fri, 19 Jan 2024 10:02:15 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Android App Development",
    "Android Apps",
    "Android Development",
    "AndroidDev",
    "App Development",
    "jetpack compose",
    "jetpackcompose",
    "Mobile App Development"
  ],
  "byline": "by hitherejoe",
  "length": 4399,
  "excerpt": "When interacting with Android Apps, share sheets are a common component that we'll interact with when sharing content with other apps and contacts. As developers, we can improve the usability of these share sheets by utilising features such as adding previews for content being shared, as well as imp",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "When interacting with Android Apps, share sheets are a common component that we’ll interact with when sharing content with other apps and contacts. As developers, we can improve the usability of these share sheets by utilising features such as adding previews for content being shared, as well as implementing direct share targets to commonly interacted contacts/apps. Alongside these features, Android 14 adds support for custom-chooser actions which allows us to further customise these sheets. In this blog post, we’ll explore these custom actions and learn how we can add them to our own share sheets. Why not sponsor this blog and reach thousands of developers worldwide? On Android 14, Custom Actions provides our users with direct access to common functionality when sharing content from our application. For example, let’s say that our application allows users to share files via the share sheet. In this case, we’ll show some custom actions that allow the users to create links to be shared, or directly share that file to a different folder from where it is currently stored. Share sheets in mobile actions are extremely common user flows, so providing direct access to these actions greatly reduces the friction for performing certain things in our apps. To create these custom actions we can utilise the ChooserAction class – this class represents an individual action that is to be displayed within the share sheet. When it comes to these actions, there are three key pieces of information that we need to provide each with: icon – the icon to be displayed alongside the action label – the label used to describe the intent of the action intent – the pending intent to be associated with the action When it comes to creating a chooser action, we can utilise the Builder class to instantiate an instance of an action. ChooserAction.Builder( Icon.createWithResource(this, R.drawable.baseline_insert_link_24), \"Share public link\", PendingIntent.getBroadcast( this, 1, Intent(Intent.ACTION_VIEW), PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT ) ).build() When it comes to providing our actions to our share sheet, we need to provide an array of actions to our share intent using the Intent.EXTRA_CHOOSER_CUSTOM_ACTIONS key. shareIntent.putExtra(Intent.EXTRA_CHOOSER_CUSTOM_ACTIONS, customActions) If we piece this together with a complete example, we could see a share sheet with multiple custom actions looking like the following: val sendIntent = Intent(Intent.ACTION_SEND) .setType(\"text/plain\") .putExtra(Intent.EXTRA_STREAM, Uri.parse(\"path_to_file\")) val shareIntent = Intent.createChooser(sendIntent, null) val customActions = arrayOf( ChooserAction.Builder( Icon.createWithResource(this, R.drawable.baseline_insert_link_24), \"Share public link\", PendingIntent.getBroadcast( this, 1, Intent(Intent.ACTION_VIEW), PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT ) ).build(), ChooserAction.Builder( Icon.createWithResource(this, R.drawable.baseline_private_connectivity_24), \"Share private link\", PendingIntent.getBroadcast( this, 1, Intent(Intent.ACTION_VIEW), PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT ) ).build(), ChooserAction.Builder( Icon.createWithResource(this, R.drawable.baseline_folder_copy_24), \"Add to folder\", PendingIntent.getBroadcast( this, 1, Intent(Intent.ACTION_VIEW), PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT ) ).build() ) shareIntent.putExtra(Intent.EXTRA_CHOOSER_CUSTOM_ACTIONS, customActions) startActivity(shareIntent) With this in place, we’re now able to display custom actions within our share sheet, providing direct access to common actions for our application. If you’re already supporting Android 14 in your app, these custom actions will be available for you to implement to provide users with a more streamlined sharing experience. I’m looking forward to seeing more apps adopting these actions in the apps that I use, please do share if you’re exploring these for implementation!",
  "image": "https://joebirch.co/wp-content/uploads/2024/01/header.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eWhen interacting with Android Apps, share sheets are a common component that we’ll interact with when sharing content with other apps and contacts. As developers, we can improve the usability of these share sheets by utilising features such as adding previews for content being shared, as well as implementing direct share targets to commonly interacted contacts/apps. Alongside these features, Android 14 adds support for custom-chooser actions which allows us to further customise these sheets. In this blog post, we’ll explore these custom actions and learn how we can add them to our own share sheets.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eWhy not \u003ca href=\"http://joebirch.co/sponser/\"\u003esponsor this blog\u003c/a\u003e and reach thousands of developers worldwide?\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eOn Android 14, \u003ca href=\"https://developer.android.com/training/sharing/send#custom-actions\"\u003eCustom Actions\u003c/a\u003e provides our users with direct access to common functionality when sharing content from our application.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, let’s say that our application allows users to share files via the share sheet. In this case, we’ll show some custom actions that allow the users to create links to be shared, or directly share that file to a different folder from where it is currently stored.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"930\" height=\"1024\" src=\"https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-930x1024.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-930x1024.png 930w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-273x300.png 273w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-768x845.png 768w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-1395x1536.png 1395w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-500x550.png 500w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-150x165.png 150w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-1200x1321.png 1200w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-400x440.png 400w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-800x881.png 800w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-200x220.png 200w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2.png 1440w\" sizes=\"(max-width: 930px) 100vw, 930px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eShare sheets in mobile actions are extremely common user flows, so providing direct access to these actions greatly reduces the friction for performing certain things in our apps.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo create these custom actions we can utilise the \u003cstrong\u003eChooserAction\u003c/strong\u003e class – this class represents an individual action that is to be displayed within the share sheet. When it comes to these actions, there are three key pieces of information that we need to provide each with:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eicon\u003c/strong\u003e – the icon to be displayed alongside the action\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003elabel\u003c/strong\u003e – the label used to describe the intent of the action\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eintent\u003c/strong\u003e – the pending intent to be associated with the action\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWhen it comes to creating a chooser action, we can utilise the \u003cstrong\u003eBuilder\u003c/strong\u003e class to instantiate an instance of an action.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eChooserAction.Builder(\n    Icon.createWithResource(this, R.drawable.baseline_insert_link_24),\n    \u0026#34;Share public link\u0026#34;,\n    PendingIntent.getBroadcast(\n        this,\n        1,\n        Intent(Intent.ACTION_VIEW),\n        PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT\n    )\n).build()\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen it comes to providing our actions to our share sheet, we need to provide an array of actions to our share intent using the \u003cstrong\u003eIntent.EXTRA_CHOOSER_CUSTOM_ACTIONS\u003c/strong\u003e key.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eshareIntent.putExtra(Intent.EXTRA_CHOOSER_CUSTOM_ACTIONS, customActions)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf we piece this together with a complete example, we could see a share sheet with multiple custom actions looking like the following:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval sendIntent = Intent(Intent.ACTION_SEND)\n    .setType(\u0026#34;text/plain\u0026#34;)\n    .putExtra(Intent.EXTRA_STREAM, Uri.parse(\u0026#34;path_to_file\u0026#34;))\nval shareIntent = Intent.createChooser(sendIntent, null)\nval customActions = arrayOf(\n    ChooserAction.Builder(\n        Icon.createWithResource(this, R.drawable.baseline_insert_link_24),\n        \u0026#34;Share public link\u0026#34;,\n        PendingIntent.getBroadcast(\n            this,\n            1,\n            Intent(Intent.ACTION_VIEW),\n            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT\n        )\n    ).build(),\n    ChooserAction.Builder(\n        Icon.createWithResource(this, R.drawable.baseline_private_connectivity_24),\n        \u0026#34;Share private link\u0026#34;,\n        PendingIntent.getBroadcast(\n            this,\n            1,\n            Intent(Intent.ACTION_VIEW),\n            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT\n        )\n    ).build(),\n    ChooserAction.Builder(\n        Icon.createWithResource(this, R.drawable.baseline_folder_copy_24),\n        \u0026#34;Add to folder\u0026#34;,\n        PendingIntent.getBroadcast(\n            this,\n            1,\n            Intent(Intent.ACTION_VIEW),\n            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_CANCEL_CURRENT\n        )\n    ).build()\n)\nshareIntent.putExtra(Intent.EXTRA_CHOOSER_CUSTOM_ACTIONS, customActions)\nstartActivity(shareIntent)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we’re now able to display custom actions within our share sheet, providing direct access to common actions for our application.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"273\" height=\"300\" src=\"https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-273x300.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-273x300.png 273w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-930x1024.png 930w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-768x845.png 768w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-1395x1536.png 1395w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-500x550.png 500w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-150x165.png 150w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-1200x1321.png 1200w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-400x440.png 400w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-800x881.png 800w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2-200x220.png 200w, https://joebirch.co/wp-content/uploads/2024/01/Screenshot_20240119_085633-2.png 1440w\" sizes=\"(max-width: 273px) 100vw, 273px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIf you’re already supporting Android 14 in your app, these custom actions will be available for you to implement to provide users with a more streamlined sharing experience. I’m looking forward to seeing more apps adopting these actions in the apps that I use, please do share if you’re exploring these for implementation!\u003c/p\u003e\n\n\n\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-01-19T10:02:15Z",
  "modifiedTime": "2024-01-19T10:02:15Z"
}
