{
  "id": "cd513481-2984-482a-bbee-c2d85914a4d6",
  "title": "A better way to handle links in TextView",
  "link": "https://saket.me/better-url-handler-textview-android/",
  "description": "There are two ways of “linkifying” URLs in a TextView. First, as an XML attribute: and second, programmatically: TextView textView = (TextView) findViewById(R.id.text1); Linkify.addLinks(textView, Linkify.PHONE_NUMBERS | LINKIFY.WEB_URLS); In both the cases, the framework internally registers a LinkMovementMethod on the TextView that handles dispatching a ACTION_VIEW Intent when any link is clicked. This is why phone-numbers open in a dialer when clicked, […] The post A better way to handle links in TextView appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Sun, 11 Sep 2016 17:48:21 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android",
    "library",
    "textview"
  ],
  "byline": "Saket Narayan",
  "length": 2838,
  "excerpt": "Introducing BetterLinkMovementMethod that lets you set custom URL click listeners on a TextView. It also improves touch area calculation of URLs and their highlighting.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "There are two ways of “linkifying” URLs in a TextView. First, as an XML attribute: \u003cTextView ... android:autoLink=\"phone|web\" /\u003e and second, programmatically: TextView textView = (TextView) findViewById(R.id.text1); Linkify.addLinks(textView, Linkify.PHONE_NUMBERS | LINKIFY.WEB_URLS); In both the cases, the framework internally registers a LinkMovementMethod on the TextView that handles dispatching a ACTION_VIEW Intent when any link is clicked. This is why phone-numbers open in a dialer when clicked, web URLs open in a browser, map URLs open in Google Maps and so on. The source can be seen in URLSpan.class (line #63): @Override public void onClick(View widget) { Uri uri = Uri.parse(getURL()); Context context = widget.getContext(); Intent intent = new Intent(Intent.ACTION_VIEW, uri); intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName()); try { context.startActivity(intent); } ... } The problem with the default LinkMovementMethod is that it’s buggy and non-customizable: 1. Incorrect touch areas It incorrectly calculates a URL’s bounds when the URL is present at any horizontal/vertical end and there’s space available in that direction inside the TextView (including its padding). This is like having ghost links in our app and that’s not good. 2. Unreliable highlighting LinkMovementMethod highlights a URL only the first time it’s clicked and it stops working randomly after that. It also does not correctly track the touch pointer to unhighlight the URL once it’s no longer being touched. 3. No support for custom URL handling We’re also out of luck if we want to show contextual options when a phone-number is clicked instead of simply redirecting to the dialer. BetterLinkMovementMethod Introducing BetterLinkMovementMethod, a.. uh.. better a version of LinkMovementMethod that solves all our problems. It’s designed to be a drop-in replacement for LinkMovementMethod: TextView textView = (TextView) findViewById(R.id.text1); textView.setMovementMethod(BetterLinkMovementMethod.newInstance()); Linkify.addLinks(textView, Linkify.PHONE_NUMBERS); However, the easiest way to get started is by using one of its linkify() methods: BetterLinkMovementMethod.linkify(Linkify.ALL, this)     .setOnLinkClickListener((textView, url) -\u003e {       // Do something with the URL and return true to indicate that // this URL was handled. Otherwise, return false to let Android // handle it.       return true;     })     .setOnLinkLongClickListener((textView, url) -\u003e {       // Handle long-clicks.       return true;     }); Download and source compile 'me.saket:better-link-movement-method:2.2.0' BetterLinkMovementMethod is available on Github. Feel free to raise issues, send contributions or fork it for your own usage. https://github.com/Saketme/Better-Link-Movement-Method",
  "image": "https://saket.me/wp-content/uploads/2016/09/TextView-links.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\u003cp\u003eThere are two ways of “linkifying” URLs in a TextView. First, as an XML attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;TextView\n  ...\n  android:autoLink=\u0026#34;phone|web\u0026#34; /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand second, programmatically:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTextView textView = (TextView) findViewById(R.id.text1);\nLinkify.addLinks(textView, Linkify.PHONE_NUMBERS | LINKIFY.WEB_URLS);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn both the cases, the framework internally registers a \u003ccode\u003eLinkMovementMethod\u003c/code\u003e on the TextView that handles dispatching a \u003ccode\u003eACTION_VIEW\u003c/code\u003e Intent when any link is clicked. This is why phone-numbers open in a dialer when clicked, web URLs open in a browser, map URLs open in Google Maps and so on. The source can be seen in \u003ccode\u003eURLSpan.class (line #63):\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@Override\npublic void onClick(View widget) {\n  Uri uri = Uri.parse(getURL());\n  Context context = widget.getContext();\n  Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n  intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());\n  try {\n    context.startActivity(intent);\n  }\n  ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe problem with the default \u003ccode\u003eLinkMovementMethod\u003c/code\u003e is that it’s buggy and non-customizable:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. Incorrect touch areas\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt incorrectly calculates a URL’s bounds when the URL is present at any horizontal/vertical end and there’s space available in that direction inside the \u003ccode\u003eTextView\u003c/code\u003e (including its padding). This is like having ghost links in our app and that’s not good.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Unreliable highlighting\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eLinkMovementMethod\u003c/code\u003e highlights a URL only the first time it’s clicked and it stops working randomly after that. It also does not correctly track the touch pointer to unhighlight the URL once it’s no longer being touched.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3. No support for custom URL handling\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe’re also out of luck if we want to show contextual options when a phone-number is clicked instead of simply redirecting to the dialer.\u003c/p\u003e\n\u003ch4\u003eBetterLinkMovementMethod\u003c/h4\u003e\n\n\u003cp\u003eIntroducing \u003ccode\u003eBetterLinkMovementMethod\u003c/code\u003e, a.. uh.. better a version of \u003ccode\u003eLinkMovementMethod\u003c/code\u003e that solves all our problems. It’s designed to be a drop-in replacement for \u003ccode\u003eLinkMovementMethod:\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTextView textView = (TextView) findViewById(R.id.text1);\ntextView.setMovementMethod(BetterLinkMovementMethod.newInstance());\nLinkify.addLinks(textView, Linkify.PHONE_NUMBERS);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the easiest way to get started is by using one of its \u003ccode\u003elinkify()\u003c/code\u003e methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBetterLinkMovementMethod.linkify(Linkify.ALL, this)\n    .setOnLinkClickListener((textView, url) -\u0026gt; {\n      // Do something with the URL and return true to indicate that \n      // this URL was handled. Otherwise, return false to let Android\n      // handle it.\n      return true;\n    })\n    .setOnLinkLongClickListener((textView, url) -\u0026gt; {\n      // Handle long-clicks.\n      return true;\n    });\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eDownload and source\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecompile \u0026#39;me.saket:better-link-movement-method:2.2.0\u0026#39;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBetterLinkMovementMethod\u003c/code\u003e is available on Github. Feel free to raise issues, send contributions or fork it for your own usage.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Saketme/Better-Link-Movement-Method\"\u003ehttps://github.com/Saketme/Better-Link-Movement-Method\u003c/a\u003e\u003c/p\u003e\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2016-09-11T17:48:21Z",
  "modifiedTime": "2019-12-18T23:43:20Z"
}
