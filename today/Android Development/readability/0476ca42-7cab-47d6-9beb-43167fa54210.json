{
  "id": "0476ca42-7cab-47d6-9beb-43167fa54210",
  "title": "Extended ADB: En Vogue üíÉ",
  "link": "https://zarah.dev/2024/02/02/adb-model.html",
  "description": "Last year, I wrote about an extended adb script. The idea of the script is to make it really easy to issue an adb command even if there are multiple devices attached by presenting a chooser. For example, if I have two physical devices and an emulator and I want to use my deeplink alias, I get presented with a device chooser: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - 39030FDJH01460 3 - emulator-5554 Select device:",
  "author": "Zarah Dominguez",
  "published": "2024-02-02T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "adb"
  ],
  "byline": "",
  "length": 3906,
  "excerpt": "Last year, I wrote about an extended adb script. The idea of the script is to make it really easy to issue an adb command even if there are multiple devices ...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "Last year, I wrote about an extended adb script. The idea of the script is to make it really easy to issue an adb command even if there are multiple devices attached by presenting a chooser. For example, if I have two physical devices and an emulator and I want to use my deeplink alias, I get presented with a device chooser: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - 39030FDJH01460 3 - emulator-5554 Select device: I wrote about this alias and how it works here. What I eventually learned is that I cannot remember which of those devices is my test phone (which has the app that handles the deeplink) and which is my personal phone. ü§¶‚Äç‚ôÄÔ∏è It would be great if it also shows at least what kind of phone it is. Well, it turns out that adb devices can tell us this information! Hooray! The trick is to include the -l option: ‚ûú ~ adb devices -l List of devices attached R5CR7039LBJ device usb:35926016X product:p3sxxx model:SM_G998B device:p3s transport_id:1 39030FDJH01460 device usb:34930688X product:shiba model:Pixel_8 device:shiba transport_id:1 emulator-5554 device product:sdk_gphone64_arm64 model:sdk_gphone64_arm64 device:emu64a transport_id:2 As before, let‚Äôs find all valid devices, dropping any unauthorised ones, but this time let‚Äôs grab all the information up to the model name: valid_devices=$(echo \"$all_devices\" | grep -v \"unauthorized\" | grep -oE \".*?model:\\S*\") At this point, the variable valid_devices contains the following: R5CR7039LBJ device usb:35926016X product:p3sxxx model:SM_G998B 39030FDJH01460 device usb:34930688X product:shiba model:Pixel_8 emulator-5554 device product:sdk_gphone64_arm64 model:sdk_gphone64_arm64 The only other update our existing script needs is to include the model name when the list of devices is displayed. find_matches=$(echo \"$valid_devices\" | awk 'match($0, /model:/) {print NR \" - \" $1 \" (\" substr($0, RSTART+6) \")\"}') At the heart of it, what we need to do is extract pieces of information from each line; so awk should be good enough for this. When awk is invoked, it: reads the input line by line stores each line in a variable $0 splits each line into words stores each word in variable from $1..$n There‚Äôs a lot of things happening in that awk command, so let‚Äôs step through what it will do for each line in valid_devices: match($0, /model:/) ¬† match built-in function that finds the first match of the provided regular expression ¬† $0 field variable containing the whole line ¬† /model:/ the regular expression to match (\"model:\"), awk syntax needs it to be inside slashes print NR \" - \" $1 \" (\" substr($0, RSTART+6) \")\" ¬† print prints the succeeding items concatenated with the designated separator (default is a space) ¬† NR the record number (i.e. line number being read) ¬† \" - \" print a literal space, a dash, and a space ¬† $1 field variable containing the first word ¬† \" (\" print a literal space and an open brace ¬† substr($0, RSTART+6) ¬† ¬† ¬† substr built-in function to get a substring from $0, starting at index RSTART+6 ¬† ¬† $0 field variable that contains the whole line ¬† ¬† RSTART the index of the last call to match ¬† ¬† +6 move the pointer six places (basically skip \"model:\")\u003c/code\u003e ¬† \")\" ¬† ¬†print a literal closing brace I found awk.js.org and jdoodle.com really helpful when playing around with awk. I found the explanations in awk.js.org particularly useful. Running the deeplink alias again now shows the model name inside braces: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ (SM_G998B) 2 - 39030FDJH01460 (Pixel_8) 3 - emulator-5554 (sdk_gphone64_arm64) Select device: Much better! üëå I just need to make sure I don‚Äôt have to use more Samsungs cause I can never keep track of which Galaxy/Note/etc is which SM_. üòÖ As always, the gist is in Github.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n  \u003carticle\u003e\n    \n\n    \u003cdiv\u003e\n          \u003cp\u003eLast year, I wrote about \u003ca href=\"https://zarah.dev/2023/09/21/adb-devices.html\"\u003ean extended \u003ccode\u003eadb\u003c/code\u003e\u003c/a\u003e script. The idea of the script is to make it really easy to issue an \u003ccode\u003eadb\u003c/code\u003e command even if there are multiple devices attached by presenting a chooser. For example, if I have two physical devices and an emulator and I want to use my deeplink \u003ccode\u003ealias\u003c/code\u003e, I get presented with a device chooser:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nMultiple devices found:\n1 - R5CR7039LBJ\n2 - 39030FDJH01460\n3 - emulator-5554\nSelect device: \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI wrote about this alias and how it works \u003ca href=\"https://zarah.dev/2023/08/30/adb-deeplinks.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhat I eventually learned is that I cannot remember which of those devices is my test phone (which has the app that handles the deeplink) and which is my personal phone. ü§¶‚Äç‚ôÄÔ∏è It would be great if it also shows at least what \u003cem\u003ekind\u003c/em\u003e of phone it is. Well, it turns out that \u003ccode\u003eadb devices\u003c/code\u003e \u003cem\u003ecan\u003c/em\u003e tell us this information! Hooray! The trick is to \u003ca href=\"https://developer.android.com/tools/adb#devicestatus\"\u003einclude the \u003ccode\u003e-l\u003c/code\u003e option\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ adb devices \u003cspan\u003e-l\u003c/span\u003e\nList of devices attached\nR5CR7039LBJ            device usb:35926016X product:p3sxxx model:SM_G998B device:p3s transport_id:1\n39030FDJH01460         device usb:34930688X product:shiba model:Pixel_8 device:shiba transport_id:1\nemulator-5554          device product:sdk_gphone64_arm64 model:sdk_gphone64_arm64 device:emu64a transport_id:2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs before, let‚Äôs find all valid devices, dropping any unauthorised ones, but this time let‚Äôs grab all the information up to the model name:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003evalid_devices\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$all_devices\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e-v\u003c/span\u003e \u003cspan\u003e\u0026#34;unauthorized\u0026#34;\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e-oE\u003c/span\u003e \u003cspan\u003e\u0026#34;.*?model:\u003c/span\u003e\u003cspan\u003e\\S\u003c/span\u003e\u003cspan\u003e*\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAt this point, the variable \u003ccode\u003evalid_devices\u003c/code\u003e contains the following:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eR5CR7039LBJ            device usb:35926016X product:p3sxxx model:SM_G998B\n39030FDJH01460         device usb:34930688X product:shiba model:Pixel_8\nemulator-5554          device product:sdk_gphone64_arm64 model:sdk_gphone64_arm64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe only other update our existing script needs is to include the model name when the list of devices is displayed.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efind_matches\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$valid_devices\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003eawk\u003c/span\u003e \u003cspan\u003e\u0026#39;match($0, /model:/) {print NR \u0026#34; - \u0026#34; $1 \u0026#34; (\u0026#34; substr($0, RSTART+6) \u0026#34;)\u0026#34;}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt the heart of it, what we need to do is extract pieces of information from each line; so \u003ccode\u003eawk\u003c/code\u003e should be good enough for this. When \u003ccode\u003eawk\u003c/code\u003e is invoked, it:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ereads the input line by line\u003c/li\u003e\n  \u003cli\u003estores each line in a variable \u003ccode\u003e$0\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003esplits each line into words\u003c/li\u003e\n  \u003cli\u003estores each word in variable from \u003ccode\u003e$1..$n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere‚Äôs a lot of things happening in that \u003ccode\u003eawk\u003c/code\u003e command, so let‚Äôs step through what it will do for each line in \u003ccode\u003evalid_devices\u003c/code\u003e:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd colspan=\"4\"\u003e\u003ccode\u003ematch($0, /model:/)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ebuilt-in function that finds the first match of the provided regular expression\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003e$0\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003efield variable containing the whole line\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003e/model:/\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ethe regular expression to match (\u0026#34;model:\u0026#34;), \u003ccode\u003eawk\u003c/code\u003e syntax needs it to be inside slashes\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd colspan=\"4\"\u003e\u003ccode\u003eprint NR \u0026#34; - \u0026#34; $1 \u0026#34; (\u0026#34; substr($0, RSTART+6) \u0026#34;)\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eprints the succeeding items concatenated with the designated separator (default is a space)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003eNR\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ethe record number (i.e. line number being read)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003e\u0026#34; - \u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eprint a literal space, a dash, and a space\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003e$1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003efield variable containing the first word\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003e\u0026#34; (\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eprint a literal space and an open brace\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd colspan=\"2\"\u003e\u003ccode\u003esubstr($0, RSTART+6)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003esubstr\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ebuilt-in function to get a substring from \u003ccode\u003e$0\u003c/code\u003e, starting at index \u003ccode\u003eRSTART+6\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e$0\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003efield variable that contains the whole line\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eRSTART\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ethe index of the last call to \u003ccode\u003ematch\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e+6\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003emove the pointer six places (basically skip \u0026#34;model:\u0026#34;)\u0026lt;/code\u0026gt;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026#34;)\u0026#34;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e¬†\u003c/td\u003e\n\u003ctd\u003e¬†print a literal closing brace\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eI found \u003ca href=\"https://awk.js.org/help.html\"\u003eawk.js.org\u003c/a\u003e and \u003ca href=\"https://www.jdoodle.com/execute-awk-online\"\u003ejdoodle.com\u003c/a\u003e really helpful when playing around with \u003ccode\u003eawk\u003c/code\u003e. I found the explanations in \u003ccode\u003eawk.js.org\u003c/code\u003e particularly useful.\u003c/p\u003e\n\n\u003cp\u003eRunning the \u003ccode\u003edeeplink\u003c/code\u003e alias again now shows the model name inside braces:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nMultiple devices found:\n1 - R5CR7039LBJ \u003cspan\u003e(\u003c/span\u003eSM_G998B\u003cspan\u003e)\u003c/span\u003e\n2 - 39030FDJH01460 \u003cspan\u003e(\u003c/span\u003ePixel_8\u003cspan\u003e)\u003c/span\u003e\n3 - emulator-5554 \u003cspan\u003e(\u003c/span\u003esdk_gphone64_arm64\u003cspan\u003e)\u003c/span\u003e\nSelect device: \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eMuch better! üëå I just need to make sure I don‚Äôt have to use more Samsungs cause I can \u003cem\u003enever\u003c/em\u003e keep track of which Galaxy/Note/etc is which \u003ccode\u003eSM_\u003c/code\u003e. üòÖ\u003c/p\u003e\n\n\u003cp\u003eAs always, the gist is in \u003ca href=\"https://gist.github.com/zmdominguez/9a889f1c367e1a21203ce8527c81e612\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\n        \u003c/div\u003e\n  \u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
