{
  "id": "996e1471-4bc0-41ca-8ee2-94207350700b",
  "title": "Implementing Friendly Captcha in Jetpack Compose: A Ready-to-Use Solution",
  "link": "https://proandroiddev.com/implementing-friendly-captcha-in-jetpack-compose-a-ready-to-use-solution-d9300252ba8e?source=rss----c72404660798---4",
  "description": "",
  "author": "Anatolii Frolov",
  "published": "Fri, 14 Feb 2025 00:03:13 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "android-development",
    "android-app-development",
    "jetpack-compose",
    "kotlin"
  ],
  "byline": "Anatolii Frolov",
  "length": 6554,
  "excerpt": "CAPTCHAs are widely used to prevent spam and ensure that users interacting with an application are human. Friendly Captcha is an alternative to traditional CAPTCHAs that offers a privacy-friendly‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "A Step-by-Step Guide to Adding Friendly Captcha in Your Android AppPhoto by Aaron Burden on UnsplashIntroductionCAPTCHAs are widely used to prevent spam and ensure that users interacting with an application are human. Friendly Captcha is an alternative to traditional CAPTCHAs that offers a privacy-friendly, user-friendly, and automated challenge without requiring users to solve puzzles.This article walks you through the integration of Friendly Captcha in a Jetpack Compose Android app using a ready-to-use composable component.Step 1: Add DependenciesEnsure you have WebView support enabled in your project:In AndroidManifest.xml\u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /\u003eIn build.gradle.kts (Module: app)dependencies { implementation \"androidx.compose.ui:ui:1.5.1\" implementation \"androidx.compose.material:material:1.5.1\" implementation \"androidx.compose.ui:ui-tooling-preview:1.5.1\" implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.6.1\" implementation \"androidx.activity:activity-compose:1.7.2\" implementation \"androidx.webkit:webkit:1.6.0\"}Step 2: Add Friendly Captcha API Key\u003cstring name=\"friendly_captcha_api_key\"\u003eYOUR_SITE_KEY_HERE\u003c/string\u003eReplace YOUR_SITE_KEY_HERE with the actual API key from your Friendly Captcha account.Step 3: Implement the CaptchaComponentThis component is responsible for:Embedding the CAPTCHA inside a WebView.Handling the challenge completion using JavaScript callbacks.Enabling the Next button when the challenge is solved.@Composablefun CaptchaComponent( modifier: Modifier = Modifier, onNextButtonEnabled: (enabled: Boolean) -\u003e Unit,) { var captchaResponse by remember { mutableStateOf(\"\") } val buttonEnabled by remember { derivedStateOf { captchaResponse.isNotEmpty() } } LaunchedEffect(buttonEnabled) { onNextButtonEnabled(buttonEnabled) } FriendlyCaptchaComponent(modifier) { response -\u003e captchaResponse = response }}What Happens Here?We use remember { mutableStateOf(\"\") } to track the CAPTCHA response.The button state is updated dynamically with derivedStateOf { captchaResponse.isNotEmpty() }.When the CAPTCHA is solved, the Next button becomes enabled.Step 4: Embed Friendly Captcha in WebViewThe WebView loads the CAPTCHA widget using Friendly Captcha‚Äôs official JavaScript SDK.@SuppressLint(\"SetJavaScriptEnabled\")@Composablefun FriendlyCaptchaComponent( modifier: Modifier = Modifier, onCaptchaSolved: (response: String) -\u003e Unit) { val context = LocalContext.current val captchaHtml = \"\"\" \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" /\u003e \u003cscript type=\"module\" src=\"https://cdn.jsdelivr.net/npm/friendly-challenge@0.9.13/widget.module.min.js\" async defer\u003e\u003c/script\u003e \u003cscript nomodule src=\"https://cdn.jsdelivr.net/npm/friendly-challenge@0.9.13/widget.min.js\" async defer\u003e\u003c/script\u003e \u003cscript\u003e function onReturn(solution) { Android.onCaptchaSolved(solution); } \u003c/script\u003e \u003cstyle\u003e .captcha-container { display: flex; justify-content: center; align-items: center; width: 100%; max-width: 100%; } .frc-captcha { width: 100%; max-width: 100%; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"captcha-container\"\u003e \u003cdiv class=\"frc-captcha\" data-sitekey=\"${context.getString(R.string.friendly_captcha_api_key)}\" data-callback=\"onReturn\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e \"\"\".trimIndent() AndroidView( modifier = modifier.fillMaxWidth(), factory = { ctx -\u003e WebView(ctx).apply { settings.javaScriptEnabled = true settings.domStorageEnabled = true webChromeClient = WebChromeClient() webViewClient = WebViewClient() addJavascriptInterface(object { @JavascriptInterface fun onCaptchaSolved(response: String) { onCaptchaSolved(response) } }, \"Android\") loadDataWithBaseURL(null, captchaHtml, \"text/html\", \"UTF-8\", null) } } )}What Happens Here?The HTML \u0026 JavaScript loads the Friendly Captcha challenge.The data-sitekey dynamically fetches the API key from strings.xml.The JavaScript interface (Android.onCaptchaSolved(response)) sends the response back to the app.Once solved, the Next button is enabled.Step 5: Integrate CAPTCHA Component into Your UINow, place the CaptchaComponent in your UI and connect it to the Next button.var nextButtonEnabled by remember { mutableStateOf(false) }Column(modifier = Modifier.fillMaxSize().padding(16.dp)) { Text( text = \"Solve the CAPTCHA to continue\", style = MaterialTheme.typography.h6, modifier = Modifier.padding(bottom = 10.dp) ) CaptchaComponent( onNextButtonEnabled = { enabled -\u003e nextButtonEnabled = enabled } ) Spacer(modifier = Modifier.height(16.dp)) Button( onClick = { /* Navigate to the next step */ }, enabled = nextButtonEnabled ) { Text(\"Next\") }}What Happens Here?The Next button is initially disabled.Once the CAPTCHA is solved, the onNextButtonEnabled callback updates nextButtonEnabled.The Next button becomes clickable only after CAPTCHA verification.ConclusionYou‚Äôve successfully integrated Friendly Captcha into your Jetpack Compose Android app!This solution is:Easy to integratePrivacy-friendly (No tracking)Works seamlessly with Jetpack ComposeI hope this article has given you a clear and practical way to integrate Friendly Captcha into your Jetpack Compose application. By following these steps, you can enhance your app‚Äôs security without compromising user experience.If you found this guide useful, give it a clap üëèHappy coding, and may your apps stay bot-free! üòäüéâ",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*JJRd6gBBWrZ_-I16",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@af2905g?source=post_page---byline--d9300252ba8e---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Anatolii Frolov\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*jurPOoAqnN5sCEb4cZVUTw.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--d9300252ba8e---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"e680\"\u003eA Step-by-Step Guide to Adding Friendly Captcha in Your Android App\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@aaronburden?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAaron Burden\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"166e\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"9181\"\u003eCAPTCHAs are widely used to prevent spam and ensure that users interacting with an application are human. \u003ca href=\"https://friendlycaptcha.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFriendly Captcha\u003c/a\u003e is an alternative to traditional CAPTCHAs that offers a privacy-friendly, user-friendly, and automated challenge without requiring users to solve puzzles.\u003c/p\u003e\u003cp id=\"ab3a\"\u003eThis article walks you through the integration of Friendly Captcha in a Jetpack Compose Android app using a ready-to-use composable component.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d9c4\"\u003eStep 1: Add Dependencies\u003c/h2\u003e\u003cp id=\"16eb\"\u003eEnsure you have WebView support enabled in your project:\u003c/p\u003e\u003cp id=\"dc5a\"\u003eIn \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c123\"\u003e\u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt;\u003cbr/\u003e\u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_NETWORK_STATE\u0026#34; /\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f6cf\"\u003eIn \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e (Module: app)\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"dc50\"\u003edependencies {\u003cbr/\u003e    implementation \u0026#34;androidx.compose.ui:ui:1.5.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.compose.material:material:1.5.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.compose.ui:ui-tooling-preview:1.5.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.lifecycle:lifecycle-runtime-ktx:2.6.1\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.activity:activity-compose:1.7.2\u0026#34;\u003cbr/\u003e    implementation \u0026#34;androidx.webkit:webkit:1.6.0\u0026#34;\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"faf4\"\u003e\u003cstrong\u003eStep 2: Add Friendly Captcha API Key\u003c/strong\u003e\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"4598\"\u003e\u0026lt;string name=\u0026#34;friendly_captcha_api_key\u0026#34;\u0026gt;YOUR_SITE_KEY_HERE\u0026lt;/string\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4355\"\u003eReplace \u003ccode\u003eYOUR_SITE_KEY_HERE\u003c/code\u003e with the \u003cstrong\u003eactual API key\u003c/strong\u003e from your Friendly Captcha account.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"f0bf\"\u003eStep 3: Implement the \u003ccode\u003eCaptchaComponent\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"5dfb\"\u003eThis component is responsible for:\u003c/p\u003e\u003cul\u003e\u003cli id=\"9935\"\u003eEmbedding the CAPTCHA inside a WebView.\u003c/li\u003e\u003cli id=\"9dd2\"\u003eHandling the challenge completion using JavaScript callbacks.\u003c/li\u003e\u003cli id=\"5d83\"\u003eEnabling the Next button when the challenge is solved.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"8185\"\u003e@Composable\u003cbr/\u003efun CaptchaComponent(\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    onNextButtonEnabled: (enabled: Boolean) -\u0026gt; Unit,\u003cbr/\u003e) {\u003cbr/\u003e    var captchaResponse by remember { mutableStateOf(\u0026#34;\u0026#34;) }\u003cp\u003e    val buttonEnabled by remember {\u003cbr/\u003e        derivedStateOf { captchaResponse.isNotEmpty() }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    LaunchedEffect(buttonEnabled) {\u003cbr/\u003e        onNextButtonEnabled(buttonEnabled)\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    FriendlyCaptchaComponent(modifier) { response -\u0026gt;\u003cbr/\u003e        captchaResponse = response\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2b07\"\u003e\u003cstrong\u003eWhat Happens Here?\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"84e6\"\u003eWe use \u003ccode\u003eremember { mutableStateOf(\u0026#34;\u0026#34;) }\u003c/code\u003e to track the CAPTCHA response.\u003c/li\u003e\u003cli id=\"ebd6\"\u003eThe button state is updated dynamically with \u003ccode\u003ederivedStateOf { captchaResponse.isNotEmpty() }\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"e524\"\u003eWhen the CAPTCHA is solved, the Next button becomes enabled.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"5c38\"\u003eStep 4: Embed Friendly Captcha in WebView\u003c/h2\u003e\u003cp id=\"ae2d\"\u003eThe WebView loads the CAPTCHA widget using \u003ca href=\"https://developer.friendlycaptcha.com/docs/v1/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFriendly Captcha‚Äôs official JavaScript SDK\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8eac\"\u003e@SuppressLint(\u0026#34;SetJavaScriptEnabled\u0026#34;)\u003cbr/\u003e@Composable\u003cbr/\u003efun FriendlyCaptchaComponent(\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    onCaptchaSolved: (response: String) -\u0026gt; Unit\u003cbr/\u003e) {\u003cbr/\u003e    val context = LocalContext.current\u003cp\u003e    val captchaHtml = \u0026#34;\u0026#34;\u0026#34;\u003cbr/\u003e        \u0026lt;!DOCTYPE html\u0026gt;\u003cbr/\u003e        \u0026lt;html\u0026gt;\u003cbr/\u003e            \u0026lt;head\u0026gt;\u003cbr/\u003e                \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt;\u003cbr/\u003e                \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\u0026#34; /\u0026gt;\u003cbr/\u003e                \u0026lt;script type=\u0026#34;module\u0026#34;\u003cbr/\u003e                        src=\u0026#34;https://cdn.jsdelivr.net/npm/friendly-challenge@0.9.13/widget.module.min.js\u0026#34;\u003cbr/\u003e                        async defer\u0026gt;\u0026lt;/script\u0026gt;\u003cbr/\u003e                \u0026lt;script nomodule\u003cbr/\u003e                        src=\u0026#34;https://cdn.jsdelivr.net/npm/friendly-challenge@0.9.13/widget.min.js\u0026#34;\u003cbr/\u003e                        async defer\u0026gt;\u0026lt;/script\u0026gt;\u003cbr/\u003e                \u0026lt;script\u0026gt;\u003cbr/\u003e                    function onReturn(solution) {\u003cbr/\u003e                        Android.onCaptchaSolved(solution);\u003cbr/\u003e                    }\u003cbr/\u003e                \u0026lt;/script\u0026gt;\u003cbr/\u003e                \u0026lt;style\u0026gt;\u003cbr/\u003e                    .captcha-container {\u003cbr/\u003e                        display: flex;\u003cbr/\u003e                        justify-content: center;\u003cbr/\u003e                        align-items: center;\u003cbr/\u003e                        width: 100%;\u003cbr/\u003e                        max-width: 100%;\u003cbr/\u003e                    }\u003cbr/\u003e                    .frc-captcha {\u003cbr/\u003e                        width: 100%;\u003cbr/\u003e                        max-width: 100%;\u003cbr/\u003e                    }\u003cbr/\u003e                \u0026lt;/style\u0026gt;\u003cbr/\u003e            \u0026lt;/head\u0026gt;\u003cbr/\u003e            \u0026lt;body\u0026gt;\u003cbr/\u003e                \u0026lt;div class=\u0026#34;captcha-container\u0026#34;\u0026gt;\u003cbr/\u003e                    \u0026lt;div class=\u0026#34;frc-captcha\u0026#34; \u003cbr/\u003e                         data-sitekey=\u0026#34;${context.getString(R.string.friendly_captcha_api_key)}\u0026#34; \u003cbr/\u003e                         data-callback=\u0026#34;onReturn\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u003cbr/\u003e                \u0026lt;/div\u0026gt;\u003cbr/\u003e            \u0026lt;/body\u0026gt;\u003cbr/\u003e        \u0026lt;/html\u0026gt;\u003cbr/\u003e    \u0026#34;\u0026#34;\u0026#34;.trimIndent()\u003c/p\u003e\u003cp\u003e    AndroidView(\u003cbr/\u003e        modifier = modifier.fillMaxWidth(),\u003cbr/\u003e        factory = { ctx -\u0026gt;\u003cbr/\u003e            WebView(ctx).apply {\u003cbr/\u003e                settings.javaScriptEnabled = true\u003cbr/\u003e                settings.domStorageEnabled = true\u003cbr/\u003e                webChromeClient = WebChromeClient()\u003cbr/\u003e                webViewClient = WebViewClient()\u003c/p\u003e\u003cp\u003e                addJavascriptInterface(object {\u003cbr/\u003e                    @JavascriptInterface\u003cbr/\u003e                    fun onCaptchaSolved(response: String) {\u003cbr/\u003e                        onCaptchaSolved(response)\u003cbr/\u003e                    }\u003cbr/\u003e                }, \u0026#34;Android\u0026#34;)\u003c/p\u003e\u003cp\u003e                loadDataWithBaseURL(null, captchaHtml, \u0026#34;text/html\u0026#34;, \u0026#34;UTF-8\u0026#34;, null)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0e3b\"\u003e\u003cstrong\u003eWhat Happens Here?\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"5ae8\"\u003eThe HTML \u0026amp; JavaScript loads the Friendly Captcha challenge.\u003c/li\u003e\u003cli id=\"27a0\"\u003eThe data-sitekey dynamically fetches the API key from \u003ccode\u003estrings.xml\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"0450\"\u003eThe JavaScript interface (\u003ccode\u003eAndroid.onCaptchaSolved(response)\u003c/code\u003e) sends the response back to the app.\u003c/li\u003e\u003cli id=\"d9b1\"\u003eOnce solved, the Next button is enabled.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"9396\"\u003eStep 5: Integrate CAPTCHA Component into Your UI\u003c/h2\u003e\u003cp id=\"195f\"\u003eNow, place the \u003ccode\u003eCaptchaComponent\u003c/code\u003e in your UI and connect it to the Next button.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0051\"\u003evar nextButtonEnabled by remember { mutableStateOf(false) }\u003cp\u003eColumn(modifier = Modifier.fillMaxSize().padding(16.dp)) {\u003cbr/\u003e    Text(\u003cbr/\u003e        text = \u0026#34;Solve the CAPTCHA to continue\u0026#34;,\u003cbr/\u003e        style = MaterialTheme.typography.h6,\u003cbr/\u003e        modifier = Modifier.padding(bottom = 10.dp)\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e    CaptchaComponent(\u003cbr/\u003e        onNextButtonEnabled = { enabled -\u0026gt;\u003cbr/\u003e            nextButtonEnabled = enabled\u003cbr/\u003e        }\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e    Spacer(modifier = Modifier.height(16.dp))\u003c/p\u003e\u003cp\u003e    Button(\u003cbr/\u003e        onClick = { /* Navigate to the next step */ },\u003cbr/\u003e        enabled = nextButtonEnabled\u003cbr/\u003e    ) {\u003cbr/\u003e        Text(\u0026#34;Next\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a425\"\u003e\u003cstrong\u003eWhat Happens Here?\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"73e5\"\u003eThe Next button is initially disabled.\u003c/li\u003e\u003cli id=\"49ab\"\u003eOnce the CAPTCHA is solved, the \u003ccode\u003eonNextButtonEnabled\u003c/code\u003e callback updates \u003ccode\u003enextButtonEnabled\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"1bff\"\u003eThe Next button becomes clickable only after CAPTCHA verification.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"0b9a\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"0190\"\u003eYou‚Äôve successfully integrated Friendly Captcha into your Jetpack Compose Android app!\u003c/p\u003e\u003cp id=\"6ce6\"\u003eThis solution is:\u003c/p\u003e\u003cul\u003e\u003cli id=\"80fb\"\u003eEasy to integrate\u003c/li\u003e\u003cli id=\"e301\"\u003ePrivacy-friendly (No tracking)\u003c/li\u003e\u003cli id=\"b66a\"\u003eWorks seamlessly with Jetpack Compose\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8512\"\u003eI hope this article has given you a clear and practical way to integrate Friendly Captcha into your Jetpack Compose application. By following these steps, you can enhance your app‚Äôs security without compromising user experience.\u003c/p\u003e\u003cp id=\"3cff\"\u003eIf you found this guide useful, \u003cstrong\u003egive it a clap\u003c/strong\u003e üëè\u003c/p\u003e\u003cp id=\"1790\"\u003eHappy coding, and may your apps stay bot-free! üòäüéâ\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-02-14T00:03:13.46Z",
  "modifiedTime": null
}
