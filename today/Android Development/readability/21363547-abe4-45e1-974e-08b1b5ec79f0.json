{
  "id": "21363547-abe4-45e1-974e-08b1b5ec79f0",
  "title": "The two best ways to secure your API keys in Android projects",
  "link": "https://proandroiddev.com/the-2-best-ways-to-secure-your-api-keys-in-android-projects-12f6a9939053?source=rss----c72404660798---4",
  "description": "",
  "author": "Sagar Malhotra",
  "published": "Tue, 05 Nov 2024 00:13:09 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin",
    "gradle",
    "android",
    "android-app-development",
    "androiddev"
  ],
  "byline": "Sagar Malhotra",
  "length": 5958,
  "excerpt": "Protecting your Android app’s API keys ensures the privacy of user information and secures any unauthorized access to your APIs, this is important and every application should make sure to secure…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Protecting your Android app’s API keys ensures the privacy of user information and secures any unauthorized access to your APIs, this is important and every application should make sure to secure their API keys to prevent any misuse of their services.NOTE: There are always some ways a hacker can reverse engineer your app and get access to your keys, we can only try our best to make it harder for them.I will show you two easy and best ways to maximize the security of the keys you store in your Application.First Approach: Using Properties FileWe will be storing all our secret keys in a Properties file.Create an “app.properties” file, where this “app” can be any name you want, suppose “sagar.properties”.API_KEY = \"1234567890\"API_KEY_PROD = \"12345678901\"3. Paste this file at the top level of your project, where you can also see the gradle.properties file.4. Now, go to your Module level build.gradle file and access this Properties file.val localProps = Properties()val localPropertiesFile = File(rootProject.rootDir,\"sagar.properties\")if (localPropertiesFile.exists() \u0026\u0026 localPropertiesFile.isFile) { localPropertiesFile.inputStream().use { localProps.load(it) }}Note that I am using the Kotlin Gradle file.5. I generally like to create this object in the top-level ,that is outside of the android block. So, that I can easily access this localProps in my buildTypes and productFlavours block.6. Our main goal is to use our defined keys in the Koltin code, not in the Gradle file, so how should we do it?7.1. In Android, we have the option to generate some files named BuildConfig or String Resource files, which you can use in your Kotlin Code or your Manifest.7.2. First enable these features of generated thing:buildFeatures { ... buildConfig = true resValues = true // (Not required in our case) Only If you wanna generate anything for Res files }8. So, we will define the specific keys for each productFlavour or buildType that we need to be present in this generated BuildConfig file.buildTypes { release { ... buildConfigField(\"String\", \"API_KEY\", localProps.getProperty(\"API_KEY_PROD\"))// IF any } debug { ... buildConfigField(\"String\", \"API_KEY\", localProps.getProperty(\"API_KEY\")) }}9. With this buildConfigField method (resValue method for Res files), we added a String Variable API_KEY to our BuildConfig file.10. Now, clean and rebuild your project. The generated folder contains a BuildConfig file that you can access anywhere in your module code.public final class BuildConfig { // Generated file ... // Field from build type: debug public static final String API_KEY = \"1234567890\";}override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) BuildConfig.API_KEY // USe like this}Second Approach: Using CMakeInstall NDK and CMakeGo to Android Studio Settings and download the following items…2. Install a CMake Highlighter3. Add your NDK location in the local.properties file: (ndk.dir is deprecated, so you can skip this step too)sdk.dir=C\\:\\\\Users\\\\sagar\\\\AppData\\\\Local\\\\Android\\\\Sdk ndk.dir=C\\:\\\\Users\\\\sagar\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\ndk\\\\28.0.12433566// Specify your location and version no., you can see that from your File explorer in the same path.4. Create a “cpp” Folder in your app directory.Go to project view, Right-Click on the app directory, create a new directory and name it cpp.5. Create a CMakeLists.txt fileRight-click on the cpp folder -\u003e New -\u003e File -\u003e CMakeLists.txtMake sure to give the exact name.6. Add the following code in your CMakeLists:cmake_minimum_required(VERSION 3.30.5) // Define your CMake versionadd_library( native-lib SHARED libnative-lib.cpp)This is a bridge between your C++ code and your Kotlin/JAVA code, that says native-lib is the shared library name you can access in your JAVA code and “libnative-lib.cpp” is the file name that is being shared.7. So, now we need to make this “libnative-lib.cpp” file to write some C++ code.Create this file in the same cpp folder.8. Now, write your C++ code in it. It is easy if you are familiar with C++, but let me give you a template and explain it…#include \u003cjni.h\u003e#include \u003cstring\u003estd::string getData(int x) { // Some function to get the key depends on the parameter std::string app_secret = \"Null\"; if (x == 1) app_secret = \"123456789\"; if (x == 2) app_secret = \"abcdefg\"; // The number of parameters to be protected can be increased. return app_secret;}extern \"C\" jstringJava_com_sagar_demo_MainActivity_getApiKey( JNIEnv *env, jobject /* this */, jint id) { std::string app_secret = \"Null\"; app_secret = getData(id); return env-\u003eNewStringUTF(app_secret.c_str());}The important thing to notice here is the function named Java_com_sagar_demo_MainActivity_getApiKey.This function should have the exact same name as the File where you want the function to be accessible.I want the function to be accessed with the function named getApiKey which will be in MainActivity with the package as com.sagar.demo.So, its arranged in the same order with “Java” as prefix: Java_com_sagar_demo_MainActivity_getApiKey.9. Add following code in the build.gradle of your module (inside the android block) where you want to get the keys:externalNativeBuild { cmake { path = File(\"cpp\",\"CMakeLists.txt\") version = \"3.30.5\" }}android.ndkVersion = \"28.0.12433566\"10. After adding the configuration in the build.gradle, we will be able to access the function in our MainActivity.Add this in your MainActivity:companion object{ init { System.loadLibrary(\"native-lib\")// Load the library } }private external fun getApiKey(id: Int): String //The implementation will be from C++ file//Add more functions that you created in C++ file.11. Now, you will be able to use the getApiKey function as a normal Kotlin/Java function.Follow Sagar Malhotra for more such content.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*ba3JJ-JCIWGZJi94UTnThw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://sagar0-0.medium.com/?source=post_page---byline--12f6a9939053--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Sagar Malhotra\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*PCJVPFHPX_oQ4eILPEDSag.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--12f6a9939053--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"e44d\"\u003eProtecting your Android app’s API keys ensures the privacy of user information and secures any unauthorized access to your APIs, this is important and every application should make sure to secure their API keys to prevent any misuse of their services.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"92e6\"\u003eNOTE: There are always some ways a hacker can reverse engineer your app and get access to your keys, we can only try our best to make it harder for them.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"e834\"\u003eI will show you two easy and best ways to maximize the security of the keys you store in your Application.\u003c/p\u003e\u003ch2 id=\"7fc4\"\u003eFirst Approach: Using Properties File\u003c/h2\u003e\u003col\u003e\u003cli id=\"81ac\"\u003eWe will be storing all our secret keys in a Properties file.\u003c/li\u003e\u003cli id=\"7e53\"\u003eCreate an “app.properties” file, where this “app” can be any name you want, suppose “sagar.properties”.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"abaf\"\u003eAPI_KEY = \u0026#34;1234567890\u0026#34;\u003cbr/\u003eAPI_KEY_PROD = \u0026#34;12345678901\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0034\"\u003e3. Paste this file at the top level of your project, where you can also see the \u003ccode\u003egradle.properties\u003c/code\u003e file.\u003c/p\u003e\u003cp id=\"9b88\"\u003e4. Now, go to your Module level \u003ccode\u003ebuild.gradle\u003c/code\u003e file and access this Properties file.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e87a\"\u003eval localProps = Properties()\u003cbr/\u003eval localPropertiesFile = File(rootProject.rootDir,\u0026#34;sagar.properties\u0026#34;)\u003cbr/\u003eif (localPropertiesFile.exists() \u0026amp;\u0026amp; localPropertiesFile.isFile) {\u003cbr/\u003e    localPropertiesFile.inputStream().use {\u003cbr/\u003e        localProps.load(it)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"bf0d\"\u003eNote that I am using the Kotlin Gradle file.\u003c/p\u003e\u003cp id=\"293a\"\u003e5. I generally like to create this object in the top-level ,that is outside of the android block. So, that I can easily access this localProps in my buildTypes and productFlavours block.\u003c/p\u003e\u003cp id=\"5191\"\u003e6. Our main goal is to use our defined keys in the Koltin code, not in the Gradle file, so how should we do it?\u003c/p\u003e\u003cp id=\"5c8f\"\u003e7.1. In Android, we have the option to generate some files named BuildConfig or String Resource files, which you can use in your Kotlin Code or your Manifest.\u003c/p\u003e\u003cp id=\"3203\"\u003e7.2. First enable these features of generated thing:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fb69\"\u003ebuildFeatures {\u003cbr/\u003e    ...\u003cbr/\u003e    buildConfig = true\u003cbr/\u003e    resValues = true // (Not required in our case) Only If you wanna generate anything for Res files \u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e46c\"\u003e8. So, we will define the specific keys for each productFlavour or buildType that we need to be present in this generated BuildConfig file.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a0ec\"\u003ebuildTypes {\u003cbr/\u003e    release {\u003cbr/\u003e        ...\u003cbr/\u003e        buildConfigField(\u0026#34;String\u0026#34;, \u0026#34;API_KEY\u0026#34;, localProps.getProperty(\u0026#34;API_KEY_PROD\u0026#34;))// IF any\u003cbr/\u003e    }\u003cbr/\u003e    debug {\u003cbr/\u003e        ...\u003cbr/\u003e        buildConfigField(\u0026#34;String\u0026#34;, \u0026#34;API_KEY\u0026#34;, localProps.getProperty(\u0026#34;API_KEY\u0026#34;))\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c88e\"\u003e9. With this buildConfigField method (resValue method for Res files), we added a String Variable \u003ccode\u003eAPI_KEY\u003c/code\u003e to our BuildConfig file.\u003c/p\u003e\u003cp id=\"7f1e\"\u003e10. Now, clean and rebuild your project. The generated folder contains a BuildConfig file that you can access anywhere in your module code.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5e6f\"\u003epublic final class BuildConfig { // Generated file\u003cbr/\u003e  ...\u003cbr/\u003e  // Field from build type: debug\u003cbr/\u003e  public static final String API_KEY = \u0026#34;1234567890\u0026#34;;\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"f86b\"\u003eoverride fun onCreate(savedInstanceState: Bundle?) {\u003cbr/\u003e    super.onCreate(savedInstanceState)\u003cbr/\u003e    BuildConfig.API_KEY // USe like this\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d204\"\u003eSecond Approach: Using CMake\u003c/h2\u003e\u003col\u003e\u003cli id=\"db59\"\u003eInstall NDK and CMake\u003cbr/\u003eGo to Android Studio Settings and download the following items…\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"31e4\"\u003e2. Install a CMake Highlighter\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6d84\"\u003e3. Add your NDK location in the local.properties file: (ndk.dir is deprecated, so you can skip this step too)\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6b7b\"\u003e\u003cbr/\u003esdk.dir=C\\:\\\\Users\\\\sagar\\\\AppData\\\\Local\\\\Android\\\\Sdk \u003cbr/\u003endk.dir=C\\:\\\\Users\\\\sagar\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\ndk\\\\28.0.12433566\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"ef44\"\u003e// Specify your location and version no., you can see that from your File explorer in the same path.\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b616\"\u003e4. Create a “cpp” Folder in your app directory.\u003c/p\u003e\u003cp id=\"829d\"\u003eGo to project view, Right-Click on the app directory, create a new directory and name it cpp.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0521\"\u003e5. Create a CMakeLists.txt file\u003cbr/\u003eRight-click on the cpp folder -\u0026gt; New -\u0026gt; File -\u0026gt; CMakeLists.txt\u003cbr/\u003eMake sure to give the exact name.\u003c/p\u003e\u003cp id=\"87c8\"\u003e6. Add the following code in your CMakeLists:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b0d1\"\u003ecmake_minimum_required(VERSION 3.30.5) // Define your CMake version\u003cp\u003eadd_library(\u003c/p\u003e\u003cp\u003e    native-lib\u003c/p\u003e\u003cp\u003e    SHARED\u003c/p\u003e\u003cp\u003e    libnative-lib.cpp\u003c/p\u003e\u003cp\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9ca5\"\u003eThis is a bridge between your C++ code and your Kotlin/JAVA code, that says native-lib is the shared library name you can access in your JAVA code and “libnative-lib.cpp” is the file name that is being shared.\u003c/p\u003e\u003cp id=\"9326\"\u003e7. So, now we need to make this “libnative-lib.cpp” file to write some C++ code.\u003cbr/\u003eCreate this file in the same cpp folder.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"3b3a\"\u003e8. Now, write your C++ code in it. It is easy if you are familiar with C++, but let me give you a template and explain it…\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3e8d\"\u003e#include \u0026lt;jni.h\u0026gt;\u003cbr/\u003e#include \u0026lt;string\u0026gt;\u003cp\u003estd::string getData(int x) { // Some function to get the key depends on the parameter\u003cbr/\u003e    std::string app_secret = \u0026#34;Null\u0026#34;;\u003c/p\u003e\u003cp\u003e    if (x == 1) app_secret = \u0026#34;123456789\u0026#34;;\u003cbr/\u003e    if (x == 2) app_secret = \u0026#34;abcdefg\u0026#34;;\u003c/p\u003e\u003cp\u003e    // The number of parameters to be protected can be increased.\u003c/p\u003e\u003cp\u003e    return app_secret;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003eextern \u0026#34;C\u0026#34; jstring\u003cbr/\u003eJava_com_sagar_demo_MainActivity_getApiKey(\u003cbr/\u003e        JNIEnv *env,\u003cbr/\u003e        jobject /* this */,\u003cbr/\u003e        jint id\u003cbr/\u003e) {\u003cbr/\u003e    std::string app_secret = \u0026#34;Null\u0026#34;;\u003cbr/\u003e    app_secret = getData(id);\u003cbr/\u003e    return env-\u0026gt;NewStringUTF(app_secret.c_str());\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e167\"\u003eThe important thing to notice here is the function named \u003ccode\u003eJava_com_sagar_demo_MainActivity_getApiKey\u003c/code\u003e.\u003cbr/\u003eThis function should have the exact same name as the File where you want the function to be accessible.\u003cbr/\u003eI want the function to be accessed with the function named \u003ccode\u003egetApiKey\u003c/code\u003e which will be in \u003ccode\u003eMainActivity\u003c/code\u003e with the package as \u003ccode\u003ecom.sagar.demo\u003c/code\u003e.\u003cbr/\u003eSo, its arranged in the same order with “Java” as prefix: \u003ccode\u003eJava_com_sagar_demo_MainActivity_getApiKey\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"bbee\"\u003e9. Add following code in the build.gradle of your module (inside the android block) where you want to get the keys:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"baa0\"\u003eexternalNativeBuild {\u003cbr/\u003e    cmake {\u003cbr/\u003e        path = File(\u0026#34;cpp\u0026#34;,\u0026#34;CMakeLists.txt\u0026#34;)\u003cbr/\u003e        version = \u0026#34;3.30.5\u0026#34;\u003cbr/\u003e    }\u003cbr/\u003e}\u003cbr/\u003eandroid.ndkVersion = \u0026#34;28.0.12433566\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5a45\"\u003e10. After adding the configuration in the \u003ccode\u003ebuild.gradle\u003c/code\u003e, we will be able to access the function in our MainActivity.\u003c/p\u003e\u003cp id=\"3971\"\u003eAdd this in your MainActivity:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0f32\"\u003ecompanion object{\u003cbr/\u003e        init {\u003cbr/\u003e            System.loadLibrary(\u0026#34;native-lib\u0026#34;)// Load the library\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cp\u003eprivate external fun getApiKey(id: Int): String //The implementation will be from C++ file\u003cbr/\u003e//Add more functions that you created in C++ file.\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"912f\"\u003e11. Now, you will be able to use the getApiKey function as a normal Kotlin/Java function.\u003c/p\u003e\u003cp id=\"cc89\"\u003eFollow Sagar Malhotra for more such content.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-11-04T16:28:42.201Z",
  "modifiedTime": null
}
