{
  "id": "f00c3199-df94-45be-a67c-11cf93178aaa",
  "title": "Github Packages: the right tool for the job?",
  "link": "https://chrynan.codes/github-packages-not-the-right-tool-for-the-job/",
  "description": "Does it meet expectations or come up short?",
  "author": "Christopher Keenan",
  "published": "Sun, 05 Jan 2020 19:52:57 GMT",
  "source": "https://chrynan.codes/rss/",
  "categories": [
    "github packages",
    "github",
    "packages",
    "github package registry",
    "registry",
    "package registry",
    "gradle",
    "maven",
    "library",
    "binary",
    "package repository"
  ],
  "byline": "Christopher Keenan",
  "length": 9912,
  "excerpt": "Does it meet expectations or come up short?",
  "siteName": "Chris Keenan Codes",
  "favicon": "https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/code_FILL0_wght400_GRAD0_opsz48.svg",
  "text": "I've been looking for a simple and inexpensive way to host my Kotlin library binaries for some time. Previously I have used JitPack, but there's no Kotlin multi-platform support. I have tried Bintray in the past but found it to be over-complicated. So, I was left with no good solution for hosting my libraries.Then Github Packages came along and offered up some hope. I was excited about the idea of having my library source code and binaries in one place. And with Github Actions, I could automate the creation and deployment of the binaries. If this works out correctly, this would be the ideal solution. But, unfortunately, I quickly ran into issues with Github Packages that became an impediment to it's adoption. I will discuss those issues in this post.TL;DRGithub Packages suffers from issues that prevent it from being the preferred package repository for Gradle/Maven users.1:1 Repository and Dependency RelationshipEvery Github Repository (Project) acts as a Repository for it's Packages that can be used as Dependencies in other projects. This is an awful design, especially for projects with a single package. For example, to depend on a library in Github Packages, you would need to setup the repositories and dependencies in your build.gradle.kts file like so:repositories { maven { url = uri(\"https://maven.pkg.github.com/$GITHUB_USER/$GITHUB_REPO\") ... } } dependencies { implementation(\"$GROUP:$ARTIFACT_NAME:$VERSION\") } This problem becomes more apparent in a real project that has numerous dependencies, as each dependency from Github Packages has to redundantly specify both the repository and dependency:repositories { maven { url = uri(\"https://maven.pkg.github.com/$GITHUB_USER/$REPO_ONE\") } maven { url = uri(\"https://maven.pkg.github.com/$GITHUB_USER/$REPO_TWO\") } maven { url = uri(\"https://maven.pkg.github.com/$GITHUB_USER/$REPO_THREE\") } } dependencies { implementation(\"$GROUP_ONE:$ARTIFACT_ONE:$VERSION_ONE\") implementation(\"$GROUP_TWO:$ARTIFACT_TWO:$VERSION_TWO\") implementation(\"$GROUP_THREE:$ARTIFACT_THREE:$VERSION_THREE\") } The way it should be implemented is that the library user only has to specify one repository (probably on the Github User account), and then all packages from different projects (belonging to that Github User) will be available as dependencies. It seems that Github made an incorrect correlation between a Github Repository (Project) and a Maven Repository. A source code repository and a package repository are two different concepts. For instance, mavenCentral() is a central package repository for Maven that contains many different dependencies originating from different source code repositories. In order to access these different dependencies, one would only need to specify mavenCentral() as a repository.The way that Github Packages should work:repositories { maven { url = uri(\"https://maven.pkg.github.com/$GITHUB_USER\") } } dependencies { implementation(\"$GROUP_ONE:$ARTIFACT_ONE:$VERSION_ONE\") implementation(\"$GROUP_TWO:$ARTIFACT_TWO:$VERSION_TWO\") implementation(\"$GROUP_THREE:$ARTIFACT_THREE:$VERSION_THREE\") } Authentication Required for InstallingGithub Packages requires authentication, via personal access tokens, to publish and install packages. This makes sense for publishing but seems like a hindrance for using the packages. Also, this is further complicated by the inadequate documentation which doesn't provide detail about how to use a package.The documentation indirectly examplifies how to specify a Github Package Repository to retrieve dependencies, by a snippet on publishing a package within the authentication section (comment added):publishing { repositories { // This is also how to specify a Github package repository maven { name = \"GitHubPackages\" url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\") credentials { username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\") password = project.findProperty(\"gpr.key\") ?: System.getenv(\"PASSWORD\") } } } publications { gpr(MavenPublication) { from(components.java) } } } This wasn't immediately obvious that this was also used for retrieving a package, and was missing from the documentation's \"Installing a package\" section. This StackOverflow answer was much better in illustrating the usage of retrieving a Github Package then the official documentation.The following illustrates how to specify a Github Package Repository:repository { maven { name = \"GithubPackages\" // Name is Optional url = uri(\"https://maven.pkg.github.com/$GITHUB_USER/$GITHUB_REPO\") credentials { // \"grp.user\" and \"gpr.key\" are added to your LOCAL gradle properties file username = project.findProperty(\"gpr.user\") as? String // Github Username password = project.findProperty(\"gpr.key\") as? String // Personal Access Token } } } As illustrated above, accessing a Github Package Registry as a Maven repository requires authentication with a Github Personal Access Token. This can become very verbose, especially with the 1:1 relationship of repositories and dependencies. For private repositories, this is a necessity but for public open source projects, this shouldn't be required.Incorrect group and artifact namesConsider a project with multiple modules:root moduleOne moduleTwo When using the Maven Publish Plugin, these modules are correctly resolved to the following:group.root:module:version // Example: com.chrynan.aaaah:core:0.3.3 However, this isn't the case when publishing packages to Github Packages. The Root Module is ignored, and the package name becomes:group:module:version // Example: com.chrynan:core:0.3.3 This obviously is problematic because it can easily lead to name clashes. However, there is a way around this, by explicitly including the root module in the group name or prefacing the root module into the artifact name (note that I haven't verified that these approaches fully work).Artifact Approach:publishing { group = \"$GROUP\" // com.chrynan ... publications { gpr(MavenPublication) { from(components.android) artifactId = \"$ROOT_MODULE-$SUB_MODULE\" // aaaah-core } } // The dependency could then be accessed like so: // implementation(\"$GROUP:$ROOT_MODULE-$SUB_MODULE:$VERSION\") // Ex: implementation(\"com.chrynan.aaaah-core:0.3.3\") } Group Approach:publishing { group = \"$GROUP.$ROOT_MODULE\" // com.chrynan.aaaah ... publications { gpr(MavenPublication) { from(components.android) artifactId = \"$SUB_MODULE\" // core } } // The dependency could then be accessed like so: // implementation(\"$GROUP.$ROOT_MODULE:$SUB_MODULE:$VERSION\") // Ex: implementation(\"com.chrynan.aaaah:core:0.3.3\") } Multi-platform projects require additional configurationThe documentation uses the following example for publishing multiple packages in the same repository (multiple module projects):plugins { `maven-publish` apply false } subprojects { apply(plugin = \"maven-publish\") configure { repositories { maven { name = \"GitHubPackages\" url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\") credentials { username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\") password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"PASSWORD\") } } } publications { register(\"gpr\") { from(components[\"java\"]) } } } } But this only works for Java modules. The Java Component, components[\"java\"], is only available in Java projects. For Android Projects, an additional plugin is required (or manual configuration), to provide an Android Component. Then the component can be registered like so:// Note that this example is in Groovy publications { mavenAar(MavenPublication) { from components.android } } For Kotlin Multi-platform there is no Java or Android Component and the components block is handled by the system. Though I'm not positive if this resolves correctly with Github Packages.Since each component is handled differently, each module's build file will have to explicitly handle the publications block for itself.Cannot Delete PackagesAccording to the documentation, you cannot delete a package:To avoid breaking projects that may depend on your packages, you cannot  delete an entire public package or specific versions of a public  package.However, you can delete a version of a private package using the Github GraphQL API:Anyone with admin permissions to a repository can delete a version of a private package in that repository.This is an annoying limitation on Github Packages which creates more problems than the one they sought to solve. For instance, when experimenting with Github Packages on a public repository, I published numerous versions of packages which are not valid. These were created when trying different approaches to get the packages to resolve correctly (using more explicit artifactIds). But now, since I can't delete any of the invalid packages, I have numerous packages polluting my repository.ConclusionThe idea behind Github Packages (package registry stored along with the source code repository) is great. Unfortunately, it's shortfalls for modern Gradle/Maven usage are obstacles to it's adoption. Hopefully in the future these will be resolved. But until then, my desire for a modern package repository, with Kotlin Multi-platform in mind, remains.",
  "image": "https://images.unsplash.com/photo-1513672494107-cd9d848a383e?ixlib=rb-1.2.1\u0026q=80\u0026fm=jpg\u0026crop=entropy\u0026cs=tinysrgb\u0026w=2000\u0026fit=max\u0026ixid=eyJhcHBfaWQiOjExNzczfQ",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n        \u003cp\u003eI\u0026#39;ve been looking for a simple and inexpensive way to host my Kotlin library binaries for some time. Previously I have used JitPack, but there\u0026#39;s no Kotlin multi-platform support. I have tried Bintray in the past but found it to be over-complicated. So, I was left with no good solution for hosting my libraries.\u003c/p\u003e\u003cp\u003eThen \u003ca href=\"https://github.com/features/packages?ref=chrynan.codes\"\u003eGithub Packages\u003c/a\u003e came along and offered up some hope. I was excited about the idea of having my library source code and binaries in one place. And with \u003ca href=\"https://github.com/features/actions?ref=chrynan.codes\"\u003eGithub Actions\u003c/a\u003e, I could automate the creation and deployment of the binaries. If this works out correctly, this would be the ideal solution. But, unfortunately, I quickly ran into issues with Github Packages that became an impediment to it\u0026#39;s adoption. I will discuss those issues in this post.\u003c/p\u003e\u003ch3 id=\"tl-dr\"\u003eTL;DR\u003c/h3\u003e\u003cp\u003eGithub Packages suffers from issues that prevent it from being the preferred package repository for Gradle/Maven users.\u003c/p\u003e\u003ch3 id=\"1-1-repository-and-dependency-relationship\"\u003e1:1 Repository and Dependency Relationship\u003c/h3\u003e\u003cp\u003eEvery Github Repository (Project) acts as a Repository for it\u0026#39;s Packages that can be used as Dependencies in other projects. This is an awful design, especially for projects with a single package. For example, to depend on a library in Github Packages, you would need to setup the repositories and dependencies in your \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e file like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erepositories {\n    maven {\n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER/$GITHUB_REPO\u0026#34;)\n        ...\n    }\n}\n\ndependencies {\n    implementation(\u0026#34;$GROUP:$ARTIFACT_NAME:$VERSION\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis problem becomes more apparent in a real project that has numerous dependencies, as each dependency from Github Packages has to redundantly specify both the repository and dependency:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erepositories {\n    maven { \n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER/$REPO_ONE\u0026#34;)\n    }\n    maven {\n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER/$REPO_TWO\u0026#34;)\n    }\n    maven {\n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER/$REPO_THREE\u0026#34;)\n    }\n}\n\ndependencies {\n    implementation(\u0026#34;$GROUP_ONE:$ARTIFACT_ONE:$VERSION_ONE\u0026#34;)\n    implementation(\u0026#34;$GROUP_TWO:$ARTIFACT_TWO:$VERSION_TWO\u0026#34;)\n    implementation(\u0026#34;$GROUP_THREE:$ARTIFACT_THREE:$VERSION_THREE\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe way it should be implemented is that the library user only has to specify one repository (probably on the Github User account), and then all packages from different projects (belonging to that Github User) will be available as dependencies. \u003c/p\u003e\u003cp\u003eIt seems that Github made an incorrect correlation between a Github Repository (Project) and a Maven Repository. A source code repository and a package repository are two different concepts. For instance, \u003ccode\u003emavenCentral()\u003c/code\u003e is a central package repository for Maven that contains many different dependencies originating from different source code repositories. In order to access these different dependencies, one would only need to specify \u003ccode\u003emavenCentral()\u003c/code\u003e as a repository.\u003c/p\u003e\u003cp\u003eThe way that Github Packages \u003cem\u003eshould\u003c/em\u003e work:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erepositories {\n    maven { \n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER\u0026#34;)\n    }\n}\n\ndependencies {\n    implementation(\u0026#34;$GROUP_ONE:$ARTIFACT_ONE:$VERSION_ONE\u0026#34;)\n    implementation(\u0026#34;$GROUP_TWO:$ARTIFACT_TWO:$VERSION_TWO\u0026#34;)\n    implementation(\u0026#34;$GROUP_THREE:$ARTIFACT_THREE:$VERSION_THREE\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"authentication-required-for-installing\"\u003eAuthentication Required for Installing\u003c/h3\u003e\u003cp\u003eGithub Packages \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/about-github-packages?ref=chrynan.codes#about-tokens\"\u003erequires authentication\u003c/a\u003e, via personal access tokens, to publish and install packages. This makes sense for publishing but seems like a hindrance for using the packages. Also, this is further complicated by the inadequate \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/configuring-gradle-for-use-with-github-packages?ref=chrynan.codes\"\u003edocumentation\u003c/a\u003e which doesn\u0026#39;t provide detail about how to use a package.\u003c/p\u003e\u003cp\u003eThe \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/configuring-gradle-for-use-with-github-packages?ref=chrynan.codes\"\u003edocumentation\u003c/a\u003e indirectly examplifies how to specify a Github Package Repository to \u003cem\u003eretrieve\u003c/em\u003e dependencies, by a snippet on \u003cem\u003epublishing\u003c/em\u003e a package within the \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/configuring-gradle-for-use-with-github-packages?ref=chrynan.codes#authenticating-to-github-packages\"\u003eauthentication section\u003c/a\u003e (comment added):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublishing {\n    repositories { // This is also how to specify a Github package repository\n        maven {\n            name = \u0026#34;GitHubPackages\u0026#34;\n            url = uri(\u0026#34;https://maven.pkg.github.com/OWNER/REPOSITORY\u0026#34;)\n            credentials {\n                username = project.findProperty(\u0026#34;gpr.user\u0026#34;) ?: System.getenv(\u0026#34;USERNAME\u0026#34;)\n                password = project.findProperty(\u0026#34;gpr.key\u0026#34;) ?: System.getenv(\u0026#34;PASSWORD\u0026#34;)\n            }\n        }\n    }\n    publications {\n        gpr(MavenPublication) {\n            from(components.java)\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis wasn\u0026#39;t immediately obvious that this was also used for retrieving a package, and was missing from the documentation\u0026#39;s \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/configuring-gradle-for-use-with-github-packages?ref=chrynan.codes#installing-a-package\"\u003e\u0026#34;Installing a package\u0026#34;\u003c/a\u003e section. This \u003ca href=\"https://stackoverflow.com/a/57373631/1478764?ref=chrynan.codes\"\u003eStackOverflow answer\u003c/a\u003e was much better in illustrating the usage of retrieving a Github Package then the official documentation.\u003c/p\u003e\u003cp\u003eThe following illustrates how to specify a Github Package Repository:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erepository {\n    maven {\n        name = \u0026#34;GithubPackages\u0026#34; // Name is Optional\n        url = uri(\u0026#34;https://maven.pkg.github.com/$GITHUB_USER/$GITHUB_REPO\u0026#34;)\n        credentials {\n            // \u0026#34;grp.user\u0026#34; and \u0026#34;gpr.key\u0026#34; are added to your LOCAL gradle properties file\n            username = project.findProperty(\u0026#34;gpr.user\u0026#34;) as? String // Github Username\n            password = project.findProperty(\u0026#34;gpr.key\u0026#34;) as? String // Personal Access Token\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs illustrated above, accessing a Github Package Registry as a Maven repository requires authentication with a Github Personal Access Token. This can become very verbose, especially with the 1:1 relationship of repositories and dependencies. For private repositories, this is a necessity but for public open source projects, this \u003cem\u003eshouldn\u0026#39;t\u003c/em\u003e be required.\u003c/p\u003e\u003ch3 id=\"incorrect-group-and-artifact-names\"\u003eIncorrect group and artifact names\u003c/h3\u003e\u003cp\u003eConsider a project with multiple modules:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eroot\n  moduleOne\n  moduleTwo\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using the \u003ca href=\"https://docs.gradle.org/current/userguide/publishing_maven.html?ref=chrynan.codes\"\u003eMaven Publish Plugin\u003c/a\u003e, these modules are correctly resolved to the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003egroup.root:module:version\n\n// Example:\ncom.chrynan.aaaah:core:0.3.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, this isn\u0026#39;t the case when publishing packages to Github Packages. The Root Module is ignored, and the package name becomes:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003egroup:module:version\n\n// Example:\ncom.chrynan:core:0.3.3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis obviously is problematic because it can easily lead to name clashes. However, there is a way around this, by explicitly including the root module in the group name or prefacing the root module into the artifact name (note that I haven\u0026#39;t verified that these approaches fully work).\u003c/p\u003e\u003cp\u003eArtifact Approach:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublishing {\n    group = \u0026#34;$GROUP\u0026#34; // com.chrynan\n    ...\n    publications {\n        gpr(MavenPublication) {\n            from(components.android)\n            artifactId = \u0026#34;$ROOT_MODULE-$SUB_MODULE\u0026#34; // aaaah-core\n        }\n    }\n    // The dependency could then be accessed like so:\n    // implementation(\u0026#34;$GROUP:$ROOT_MODULE-$SUB_MODULE:$VERSION\u0026#34;)\n    // Ex: implementation(\u0026#34;com.chrynan.aaaah-core:0.3.3\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGroup Approach:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublishing {\n    group = \u0026#34;$GROUP.$ROOT_MODULE\u0026#34; // com.chrynan.aaaah\n    ...\n    publications {\n        gpr(MavenPublication) {\n            from(components.android)\n            artifactId = \u0026#34;$SUB_MODULE\u0026#34; // core\n        }\n    }\n    // The dependency could then be accessed like so:\n    // implementation(\u0026#34;$GROUP.$ROOT_MODULE:$SUB_MODULE:$VERSION\u0026#34;)\n    // Ex: implementation(\u0026#34;com.chrynan.aaaah:core:0.3.3\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"multi-platform-projects-require-additional-configuration\"\u003eMulti-platform projects require additional configuration\u003c/h3\u003e\u003cp\u003eThe \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/configuring-gradle-for-use-with-github-packages?ref=chrynan.codes#authenticating-to-github-packages\"\u003edocumentation\u003c/a\u003e uses the following example for publishing multiple packages in the same repository (multiple module projects):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eplugins {\n    `maven-publish` apply false\n}\n\nsubprojects {\n    apply(plugin = \u0026#34;maven-publish\u0026#34;)\n    configure {\n        repositories {\n            maven {\n                name = \u0026#34;GitHubPackages\u0026#34;\n                url = uri(\u0026#34;https://maven.pkg.github.com/OWNER/REPOSITORY\u0026#34;)\n                credentials {\n                    username = project.findProperty(\u0026#34;gpr.user\u0026#34;) as String? ?: System.getenv(\u0026#34;USERNAME\u0026#34;)\n                    password = project.findProperty(\u0026#34;gpr.key\u0026#34;) as String? ?: System.getenv(\u0026#34;PASSWORD\u0026#34;)\n                }\n            }\n        }\n        publications {\n            register(\u0026#34;gpr\u0026#34;) {\n                from(components[\u0026#34;java\u0026#34;])\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this only works for Java modules. The Java Component, \u003ccode\u003ecomponents[\u0026#34;java\u0026#34;]\u003c/code\u003e, is only available in Java projects. For Android Projects, an additional \u003ca href=\"https://github.com/wupdigital/android-maven-publish?ref=chrynan.codes\"\u003eplugin\u003c/a\u003e is required (or manual configuration), to provide an Android Component. Then the component can be registered like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// Note that this example is in Groovy\npublications {\n    mavenAar(MavenPublication) {\n        from components.android\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor Kotlin Multi-platform there is no Java or Android Component and the components block is \u003ca href=\"https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html?ref=chrynan.codes#publishing-a-multiplatform-library\"\u003ehandled by the system\u003c/a\u003e. Though I\u0026#39;m not positive if this resolves correctly with Github Packages.\u003c/p\u003e\u003cp\u003eSince each component is handled differently, each module\u0026#39;s build file will have to explicitly handle the \u003ccode\u003epublications\u003c/code\u003e block for itself.\u003c/p\u003e\u003ch3 id=\"cannot-delete-packages\"\u003eCannot Delete Packages\u003c/h3\u003e\u003cp\u003eAccording to the \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/deleting-a-package?ref=chrynan.codes\"\u003edocumentation\u003c/a\u003e, you cannot delete a package:\u003c/p\u003e\u003cblockquote\u003eTo avoid breaking projects that may depend on your packages, you cannot  delete an entire public package or specific versions of a public  package.\u003c/blockquote\u003e\u003cp\u003eHowever, \u003ca href=\"https://help.github.com/en/github/managing-packages-with-github-packages/deleting-a-package?ref=chrynan.codes#deleting-a-version-of-a-private-package\"\u003eyou can delete\u003c/a\u003e a version of a private package using the Github GraphQL API:\u003c/p\u003e\u003cblockquote\u003eAnyone with admin permissions to a repository can delete a version of a private package in that repository.\u003c/blockquote\u003e\u003cp\u003eThis is an annoying limitation on Github Packages which creates more problems than the one they sought to solve. For instance, when experimenting with Github Packages on a public repository, I published numerous versions of \u003ca href=\"https://github.com/chRyNaN/aaaah/packages?ref=chrynan.codes\"\u003epackages\u003c/a\u003e which are not valid. These were created when trying different approaches to get the packages to resolve correctly (using more explicit artifactIds). But now, since I can\u0026#39;t delete any of the invalid packages, I have \u003ca href=\"https://github.com/chRyNaN/aaaah/packages?ref=chrynan.codes\"\u003enumerous packages\u003c/a\u003e polluting my repository.\u003c/p\u003e\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\u003cp\u003eThe idea behind Github Packages (package registry stored along with the source code repository) is great. Unfortunately, it\u0026#39;s shortfalls for modern Gradle/Maven usage are obstacles to it\u0026#39;s adoption. Hopefully in the future these will be resolved. But until then, my desire for a modern package repository, with Kotlin Multi-platform in mind, remains.\u003c/p\u003e\n    \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2020-01-05T19:52:57Z",
  "modifiedTime": "2020-01-06T01:35:50Z"
}
