{
  "id": "af6aa270-8d52-434f-8b32-01deefc4d1fd",
  "title": "Apps adopt Transformer to support more reliable and performant media editing use cases",
  "link": "http://android-developers.googleblog.com/2025/01/apps-adopt-transformer-to-support-more-reliable-media-editing-use-cases.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-01-10T09:00:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#camera",
    "#Media",
    "#transformer",
    "Android",
    "Android Media",
    "Jetpack",
    "Media Editing",
    "media3",
    "transformer"
  ],
  "byline": "",
  "length": 4139,
  "excerpt": "Android apps use the Media3 Transformer module to enable efficient media editing and transcoding, improving performance and developer workflows.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Caren Chang – Developer Relations Engineer The Jetpack Media3 library enables Android apps to build high quality media apps. As part of the Media3 library, the Transformer module aims to provide easy to use, reliable, and performant APIs for transcoding and editing media. For example, apps can use Transformer to apply editing operations such as trimming a long piece of media file, or applying effects to video tracks. Transformer can also be used to convert media files from one format to another, such as adjusting the resolution or encoding of the media file. Developing Transformer APIs As part of the process to introduce new APIs, our engineering team works closely with Google apps such as Google Photos to test and experiment the new APIs. Experimental flags are first introduced to enable performance improvements. Once the results are successful and conclusive, these experimental features are then built into the default API implementations or promoted to public APIs for all apps to use. This approach allows Transformer APIs to be tested on a wide variety of devices. Transformer Adoption in apps Apps that have been using Transformer in production observed in-app performance improvements, less code to maintain, and better developer experience. Let’s take a closer look at how Transformer has helped apps for their media-editing use cases. One of users’ favorite features in Google Photos is memory sharing, where snippets of your life story that are curated and presented as Google Photos memories can now be shared as videos to social media and chat apps. However, the process of combining media items to create a video on device is resource intensive and subject to significant latency, especially on low-end devices. To reduce this latency and enable the feature on a wider range of devices, Photos adopted Transformer in their media creation pipeline. Along with other improvements made, the team found that Transformer played a part in reducing the median user latency for creating memory videos by 41% on high-end devices and 27% on mid-range devices. The Photos app also enables users to perform media edits such as trimming or rotating a video. By adopting Transformer APIs for rotating videos, median save latency was reduced by 79% for applicable videos. The app also adopted Transformer’s API for optimizing video trimming, and observed video save latency decrease by 64%. 1 Second Everyday is a personal video journal that helps you create captivating montages and timelapses. One of the app’s main user journeys is sequentially combining short videos to create a meaningful movie. After adopting Transformer for this use case, the app observed that video encoding performance was up to 5x faster, allowing them to explore enabling 4k and HDR support. The Transformer adoption also helped decrease relevant code by 30%, making it easier for the developers to maintain the code base. BandLab is the next-generation music creation platform used by millions around the world to make and share their music. The app originally used MediaCodecs for their video creation use cases, but found that the low level implementation resulted in native crashes that were difficult to debug. After researching more on Transformer, the team made the decision to migrate from MediaCodecs to Transformer. Overall, it only took the team 12 working days for the migration, and this resulted in a simpler codebase and more maintainable pipeline for their media creation use cases. In addition, the app observed that all previously observed native crashes were no longer occurring anymore. What’s next for Transformers? We’re excited to see Transformer’s adoption in the developer community, and will continue adding new features to support more media-editing use cases for the Android ecosystem including: Better support for previewing media edits Improving the performance and developer experience for video frame extraction Easier integration with AI effects and much more Keep an eye out on what we’re working on in the Media3 Github, and file feature requests to help shape the future of Transformer!",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikKVUjXvlmwmoDsLZI1NiHrkIdLze4R_WImhD2i2KiWC3GVm_0ndH5BANZEuBjzLoC4Im565P-4eXPYOBVpxXXlKc0PPCHgydiRelY-GlFxwximISnk5r8nnHo-CI85gjmRP9jQhQjlC_bMJMbG0v7gUCT_MceseBO8wxcmxVpphpntTQNM1os-gXGjSU/w1200-h630-p-k-no-nu/AndroidSpotlight_Adaptive_CameraX_Metadata_02.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta name=\"twitter:image\" content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikKVUjXvlmwmoDsLZI1NiHrkIdLze4R_WImhD2i2KiWC3GVm_0ndH5BANZEuBjzLoC4Im565P-4eXPYOBVpxXXlKc0PPCHgydiRelY-GlFxwximISnk5r8nnHo-CI85gjmRP9jQhQjlC_bMJMbG0v7gUCT_MceseBO8wxcmxVpphpntTQNM1os-gXGjSU/s1600/AndroidSpotlight_Adaptive_CameraX_Metadata_02.png\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Caren Chang – Developer Relations Engineer\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgR4ycWfsT3aaDGXwOWQCKfDIUw1gbHu2GUB8vYS3Apv169XIrijmSJI6vljBZvluu5MjKh7jWKhWlRfg0KbWvLkfFed4EZ-QwZbOTKhVicAo28o2Jgl4nlkfS71eu9JfySzyLtGkJPoVq0CFM3Gfq7trj3i0jL6eBEbrXkd7F27f-HOa8MvUkExBw3YKg/s1600/AndroidSpotlight_Adaptive_CameraX_Banner_02.png\" imageanchor=\"1\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgR4ycWfsT3aaDGXwOWQCKfDIUw1gbHu2GUB8vYS3Apv169XIrijmSJI6vljBZvluu5MjKh7jWKhWlRfg0KbWvLkfFed4EZ-QwZbOTKhVicAo28o2Jgl4nlkfS71eu9JfySzyLtGkJPoVq0CFM3Gfq7trj3i0jL6eBEbrXkd7F27f-HOa8MvUkExBw3YKg/s1600/AndroidSpotlight_Adaptive_CameraX_Banner_02.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eThe \u003ca href=\"https://developer.android.com/media/media3\" target=\"_blank\"\u003eJetpack Media3\u003c/a\u003e library enables Android apps to build high quality media apps. As part of the Media3 library, the \u003ca href=\"https://developer.android.com/media/media3/transformer\" target=\"_blank\"\u003eTransformer\u003c/a\u003e module aims to provide easy to use, reliable, and performant APIs for transcoding and editing media.\u003c/p\u003e\n\n\u003cp\u003eFor example, apps can use Transformer to apply editing operations such as trimming a long piece of media file, or applying effects to video tracks. Transformer can also be used to convert media files from one format to another, such as adjusting the resolution or encoding of the media file.\u003c/p\u003e \n\n\u003ch3\u003eDeveloping Transformer APIs\u003c/h3\u003e\n\n\u003cp\u003eAs part of the process to introduce new APIs, our engineering team works closely with Google apps such as Google Photos to test and experiment the new APIs. Experimental flags are first introduced to enable performance improvements. Once the results are successful and conclusive, these experimental features are then built into the default API implementations or promoted to public APIs for all apps to use. This approach allows Transformer APIs to be tested on a wide variety of devices.\u003c/p\u003e \n\n\u003ch3\u003eTransformer Adoption in apps\u003c/h3\u003e\n\n\u003cp\u003eApps that have been using Transformer in production observed in-app performance improvements, less code to maintain, and better developer experience. Let’s take a closer look at how Transformer has helped apps for their media-editing use cases.\u003c/p\u003e\n\n\u003cp\u003eOne of users’ favorite features in \u003cb\u003eGoogle Photos\u003c/b\u003e is memory sharing, where snippets of your life story that are curated and presented as Google Photos memories can now be shared as videos to social media and chat apps. However, the process of combining media items to create a video on device is resource intensive and subject to significant latency, especially on low-end devices. To reduce this latency and enable the feature on a wider range of devices, Photos adopted Transformer in their media creation pipeline. Along with other improvements made, the team found that Transformer played a part in reducing the median user latency for creating memory videos by 41% on high-end devices and 27% on mid-range devices.\u003c/p\u003e\n\n\u003cp\u003eThe Photos app also enables users to perform media edits such as trimming or rotating a video. By adopting Transformer APIs for \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/media3/effect/ScaleAndRotateTransformation\" target=\"_blank\"\u003erotating videos\u003c/a\u003e, median save latency was reduced by 79% for applicable videos. The app also adopted Transformer’s API for \u003ca href=\"https://developer.android.com/media/media3/transformer/transformations#trim-optimization\" target=\"_blank\"\u003eoptimizing video trimming\u003c/a\u003e, and observed video save latency decrease by 64%.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003e1 Second Everyday\u003c/b\u003e is a personal video journal that helps you create captivating montages and timelapses. One of the app’s main user journeys is sequentially combining short videos to create a meaningful movie. After adopting Transformer for this use case, the app observed that video encoding performance was up to 5x faster, allowing them to explore enabling 4k and HDR support. The Transformer adoption also helped decrease relevant code by 30%, making it easier for the developers to maintain the code base.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eBandLab\u003c/b\u003e is the next-generation music creation platform used by millions around the world to make and share their music. The app originally used MediaCodecs for their video creation use cases, but found that the low level implementation resulted in native crashes that were difficult to debug. After researching more on Transformer, the team made the decision to migrate from MediaCodecs to Transformer. Overall, it only took the team 12 working days for the migration, and this resulted in a simpler codebase and more maintainable pipeline for their media creation use cases. In addition, the app observed that all previously observed native crashes were no longer occurring anymore.\u003c/p\u003e\n\n\u003ch3\u003eWhat’s next for Transformers?\u003c/h3\u003e\n\n\u003cp\u003eWe’re excited to see Transformer’s adoption in the developer community, and will continue adding new features to support more media-editing use cases for the Android ecosystem including:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eBetter support for previewing media edits\u003c/li\u003e\n\u003cli\u003eImproving the performance and developer experience for video frame extraction\u003c/li\u003e\n\u003cli\u003eEasier integration with AI effects\u003c/li\u003e\n\u003cli\u003eand much more\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eKeep an eye out on what we’re working on in the \u003ca href=\"https://github.com/androidx/media/tree/release/libraries/transformer\" target=\"_blank\"\u003eMedia3 Github\u003c/a\u003e, and \u003ca href=\"https://github.com/androidx/media/issues\" target=\"_blank\"\u003efile feature requests\u003c/a\u003e to help shape the future of Transformer!\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
