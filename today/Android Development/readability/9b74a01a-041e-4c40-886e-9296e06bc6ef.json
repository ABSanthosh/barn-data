{
  "id": "9b74a01a-041e-4c40-886e-9296e06bc6ef",
  "title": "Unit Testing Lifecycle and State in ViewModels",
  "link": "https://medium.com/androiddevelopers/unit-testing-lifecycle-and-state-in-viewmodels-9d406c08cbd7?source=rss----95b274b437c2---4",
  "description": "",
  "author": "Marcello Galhardo",
  "published": "Thu, 13 Mar 2025 16:17:59 GMT",
  "source": "https://medium.com/feed/androiddevelopers",
  "categories": [
    "testing",
    "viewmodel",
    "android",
    "kotlin"
  ],
  "byline": "Marcello Galhardo",
  "length": 2119,
  "excerpt": "You can test a ViewModel by simply creating an instance using its constructor in your test code. However, this approach has limitations — there is no straightforward way to: With ViewModelScenario…",
  "siteName": "Android Developers",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Unit Testing Lifecycle and State in ViewModelsWhy It MattersYou can test a ViewModel by simply creating an instance using its constructor in your test code. However, this approach has limitations — there is no straightforward way to:Trigger ViewModelStore.clear() / ViewModel.onCleared().Simulate a save and restore instance state change.With ViewModelScenario, these are now easy to test, helping you catch errors related to ViewModel clean-up and saved state.How to UseFirst, add the dependency to your Gradle file. It’s available from 2.9.0-alpha08:implementation(\"androidx.lifecycle:lifecycle-viewmodel-testing:{version}\")Next, define your ViewModel:class MyViewModel( scope: CoroutineScope, val handle: SavedStateHandle,) : ViewModel(scope) { … }/* Class used by SavedStateHandle. */@Parcelizedata class MyData( val name: String, val surname: String,) : ParcelableFinally, write a unit test for your ViewModel using a ViewModelScenario:class MyViewModelTest { @Test fun testStateRestoration() = runTest { // this: TestScope viewModelScenario { // this: CreationExtras MyViewModel( scope = this@runTest, handle = createSavedStateHandle(), ) }.use { it: ViewModelScenario -\u003e // Set a ViewModel state. it.viewModel.handle[\"key\"] = MyData(\"John\", \"Doe\") // Recreate ViewModel, simulating a state restoration // (including parcelizing). it.recreate() // Verify state is restored correctly after parcelizing. assertThat(it.viewModel.handle[\"key\"]) .isEqualTo(MyData(\"John\", \"Doe\")) } }}Test in DetailsViewModelScenario.recreate() simulates Android’s state saving and restoring, including parcelizing (see Save UI states).It ensures that data in SavedStateHandle is correctly saved and restored.AutoCloseable use {} ensures ViewModelStore.clear() / ViewModel.onCleared() runs after the block finishes.You can manually call ViewModelScenario.close() to trigger a clearing.Also, ViewModelScenario is KMP compatible.We invite you to try out the new API and share any issues or feedback through our Lifecycle issue tracker.Happy testing!",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*JZHO5lsnXJ3BvUdHHbN8xA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"8e1a\" data-testid=\"storyTitle\"\u003eUnit Testing Lifecycle and State in ViewModels\u003c/h2\u003e\u003c/p\u003e\u003ch2 id=\"e733\"\u003eWhy It Matters\u003c/h2\u003e\u003cp id=\"1739\"\u003eYou can test a \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModel.kt;l=99\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModel\u003c/a\u003e by simply creating an instance using its constructor in your test code. However, this approach has limitations — there is no straightforward way to:\u003c/p\u003e\u003cul\u003e\u003cli id=\"8fcc\"\u003eTrigger \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModelStore.kt;l=56\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelStore.clear()\u003c/a\u003e / \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModel.kt;l=167\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModel.onCleared()\u003c/a\u003e.\u003c/li\u003e\u003cli id=\"ab87\"\u003eSimulate a save and restore instance state change.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"f6bf\"\u003eWith \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-testing/src/commonMain/kotlin/androidx/lifecycle/viewmodel/testing/ViewModelScenario.kt;l=128-131\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelScenario\u003c/a\u003e, these are now easy to test, helping you catch errors related to \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModel.kt;l=99\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModel\u003c/a\u003e clean-up and saved state.\u003c/p\u003e\u003ch2 id=\"4218\"\u003eHow to Use\u003c/h2\u003e\u003cp id=\"0c87\"\u003eFirst, add the dependency to your Gradle file. It’s available from \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.0-alpha08\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e2.9.0-alpha08\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"076b\"\u003eimplementation(\u0026#34;androidx.lifecycle:lifecycle-viewmodel-testing:{version}\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"135c\"\u003eNext, define your ViewModel:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"14ed\"\u003eclass MyViewModel(\u003cbr/\u003e  scope: CoroutineScope,\u003cbr/\u003e  val handle: SavedStateHandle,\u003cbr/\u003e) : ViewModel(scope) { … }\u003cp\u003e/* Class used by SavedStateHandle. */\u003cbr/\u003e@Parcelize\u003cbr/\u003edata class MyData(\u003cbr/\u003e  val name: String,\u003cbr/\u003e  val surname: String,\u003cbr/\u003e) : Parcelable\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"dedc\"\u003eFinally, write a unit test for your \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModel.kt;l=99\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModel\u003c/a\u003e using a \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-testing/src/commonMain/kotlin/androidx/lifecycle/viewmodel/testing/ViewModelScenario.kt;l=128-131\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelScenario\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"daaf\"\u003eclass MyViewModelTest {\u003cp\u003e  @Test\u003cbr/\u003e  fun testStateRestoration() = runTest { // this: TestScope\u003cbr/\u003e    viewModelScenario { // this: CreationExtras\u003cbr/\u003e      MyViewModel(\u003cbr/\u003e        scope = this@runTest,\u003cbr/\u003e        handle = createSavedStateHandle(),\u003cbr/\u003e      )\u003cbr/\u003e    }.use { it: ViewModelScenario -\u0026gt;\u003cbr/\u003e      // Set a ViewModel state.  \u003cbr/\u003e      it.viewModel.handle[\u0026#34;key\u0026#34;] = MyData(\u0026#34;John\u0026#34;, \u0026#34;Doe\u0026#34;)\u003c/p\u003e\u003cp\u003e      // Recreate ViewModel, simulating a state restoration\u003cbr/\u003e      // (including parcelizing).  \u003cbr/\u003e      it.recreate()\u003c/p\u003e\u003cp\u003e      // Verify state is restored correctly after parcelizing.  \u003cbr/\u003e      assertThat(it.viewModel.handle[\u0026#34;key\u0026#34;])\u003cbr/\u003e        .isEqualTo(MyData(\u0026#34;John\u0026#34;, \u0026#34;Doe\u0026#34;))\u003cbr/\u003e    }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"47b4\"\u003eTest in Details\u003c/h2\u003e\u003cul\u003e\u003cli id=\"a4ef\"\u003e\u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-testing/src/commonMain/kotlin/androidx/lifecycle/viewmodel/testing/ViewModelScenario.kt;l=92\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelScenario.recreate()\u003c/a\u003e simulates Android’s state saving and restoring, including parcelizing (see \u003ca href=\"https://developer.android.com/topic/libraries/architecture/saving-states#onsaveinstancestate\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSave UI states\u003c/a\u003e).\u003c/li\u003e\u003cli id=\"912f\"\u003eIt ensures that data in \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-savedstate/src/androidMain/kotlin/androidx/lifecycle/SavedStateHandle.android.kt;l=30\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSavedStateHandle\u003c/a\u003e is correctly saved and restored.\u003c/li\u003e\u003cli id=\"0940\"\u003e\u003ca href=\"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-auto-closeable.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAutoCloseable\u003c/a\u003e \u003ccode\u003euse {}\u003c/code\u003e ensures \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModelStore.kt;l=56\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelStore.clear()\u003c/a\u003e / \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel/src/commonMain/kotlin/androidx/lifecycle/ViewModel.kt;l=167\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModel.onCleared()\u003c/a\u003e runs after the block finishes.\u003c/li\u003e\u003cli id=\"d674\"\u003eYou can manually call \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-testing/src/commonMain/kotlin/androidx/lifecycle/viewmodel/testing/ViewModelScenario.kt;l=78-80\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelScenario.close()\u003c/a\u003e to trigger a clearing.\u003c/li\u003e\u003cli id=\"aa45\"\u003eAlso, \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/a775989d0657e5fcbd86bf7949d95a190deb2334:lifecycle/lifecycle-viewmodel-testing/src/commonMain/kotlin/androidx/lifecycle/viewmodel/testing/ViewModelScenario.kt;l=128-131\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eViewModelScenario\u003c/a\u003e is KMP compatible.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a9ba\"\u003eWe invite you to try out the new API and share any issues or feedback through \u003ca href=\"https://issuetracker.google.com/issues/new?component=413132\u0026amp;template=1096619\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eour Lifecycle issue tracker\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"982e\"\u003eHappy testing!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-13T16:17:59.036Z",
  "modifiedTime": null
}
