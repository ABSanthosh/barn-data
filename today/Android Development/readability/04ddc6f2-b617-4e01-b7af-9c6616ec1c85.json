{
  "id": "04ddc6f2-b617-4e01-b7af-9c6616ec1c85",
  "title": "Debugging Coroutines in IntelliJ and Android Studio",
  "link": "https://proandroiddev.com/debugging-coroutines-in-intellij-and-android-studio-1c39fbb862f0?source=rss----c72404660798---4",
  "description": "",
  "author": "Amanda Hinchman",
  "published": "Mon, 07 Apr 2025 01:16:53 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin-coroutines",
    "programming",
    "android",
    "intellij",
    "kotlin"
  ],
  "byline": "Amanda Hinchman",
  "length": 6753,
  "excerpt": "Debugging asynchronous code is difficult, as it can be hard to capture its true nature while putting regular breakpoints in debugging. Here are a few options to keep a coroutine’s true nature: Using…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Debugging asynchronous code is difficult, as it can be hard to capture its true nature while putting regular breakpoints in debugging. Here are a few options to keep a coroutine’s true nature:Options available for IntelliJ IDEALoggingRun/Debug ConfigurationsGUI DebuggingOptions available for Android StudioLoggingExperimental Coroutine Debugging in TestLet’s get to it!Option 1: Via loggingAvailable in both Android Studio and IntelliJ IDEAUsing a good old fashioned println statement will tell you what thread the print statement currently resides in.println( “${msg} | currentThread: ${Thread.currentThread().name}”)The output would look something like this:coroutine launched | current thread: DefaultDispatcher-worker-1coroutine launched | current thread: DefaultDispatcher-worker-4coroutine launched | current thread: DefaultDispatcher-worker-3Checkout history check: {Stevie Nips=100} | current thread: pool-1-thread-2Checkout history check: {Stevie Nips=100, Bailey=40} | current thread: pool-1-thread-3Checkout history check: {Stevie Nips=100, Bailey=240} | current thread: pool-1-thread-1Option 2: Add coroutine debugging via Run/Debug ConfigurationsAvailable in IntelliJ IDEA onlyElevate your coroutine logging with this extra VM option! In your IntelliJ, go Edit Run/Debug Configurations. In VM options, add the flag:-Dkotlinx.coroutines.debugAs a bonus, you can check “Store as project file” to make sure the configuration stays even after exiting IntelliJ.Now, your output tells you the number of coroutines launched, like in the online Kotlin playground.The same sample output is now:coroutine launched | current thread: DefaultDispatcher-worker-1 @coroutine#3coroutine launched | current thread: DefaultDispatcher-worker-3 @coroutine#2coroutine launched | current thread: DefaultDispatcher-worker-4 @coroutine#1Stevie Nips deposited $100 | Checkout history check: {Stevie Nips=100} | current thread: pool-1-thread-2Bailey deposited $200 | Checkout history check: {Stevie Nips=100, Bailey=200} | current thread: pool-1-thread-1Bailey deposited $40 | Checkout history check: {Stevie Nips=100, Bailey=240} | current thread: pool-1-thread-3Option 3: GUI DebuggingOnly available with IntelliJ IDEA and coroutine dependencyThis option only appears with the import:implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.1\")After syncing your Gradle file, run Debug on your code. You should see an extra view option in the Debug window to view Coroutines launched and their current status.Debug window shows the Threads \u0026 Variables console. In addition, a popup shows the Coroutines Console. Pictured are 3 JobImpls with one Coroutine in RUNNING status.For more information in JetBrains documentation see here.Option 4: Experimental Coroutine Debugging in TestingAvailable in Android StudioIt’s a little soul-crushing that Android Studio doesn’t offer the awesome GUI option above. Nonetheless, there is slightly problematic option available for being able to debug coroutines in testing.We can add the following chunk to our build.gradle.kts file, we can add the dependency:testImplementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1\")Then, we can add packaging options within the android { … } section:android { ... packaging { // for JNA and JNA-platform resources.excludes.add(\"META-INF/AL2.0\") resources.excludes.add(\"META-INF/LGPL2.1\") // for byte-buddy resources.excludes.add(\"META-INF/licenses/ASM\") resources.pickFirsts.add(\"win32-x86-64/attach_hotspot_windows.dll\") resources.pickFirsts.add(\"win32-x86/attach_hotspot_windows.dll\") }}This will cause the resource merge algorithm to exclude the problematic license files altogether and only leave a single copy of the files needed for byte-buddy-agent to work.In our testing code, we can run something like:suspend fun computeValue( ): String = coroutineScope { val one = async { computeOne() } val two = async { computeTwo() } combineResults(one, two)}suspend fun combineResults( one: Deferred\u003cString\u003e, two: Deferred\u003cString\u003e): String = one.await() + two.await()suspend fun computeOne( ): String { delay(5000) return \"4\"}suspend fun computeTwo( ): String { delay(5000) return \"2\"}@OptIn(ExperimentalCoroutinesApi::class)class ExampleUnitTest { @Test fun addition_isCorrect() { runBlocking { DebugProbes.install() // \u003c--- install val deferred = async { computeValue() } // Delay for some time delay(1000) // Dump running coroutines DebugProbes.dumpCoroutines() // \u003c--- dump to get logging println(\"\\nDumping only deferred\") DebugProbes.printJob(deferred) } assertEquals(4, 2 + 2) }}Use DebugProbes.install() and DebugProbes.dumpCoroutines() API to get a dump of the current coroutine state in Android unit testing.But hey, it works. But not nearly as appealing as the GUI option offered in IntelliJ IDEA.Here is a truncated view of the dump:Coroutines dump 2025/03/24 18:07:00Coroutine \"coroutine#2\":DeferredCoroutine{Active}@74bdc168, state: SUSPENDED at com...ExampleUnitTestKt.combineResults(ExampleUnitTest.kt:29) at com...ExampleUnitTestKt$computeValue$2.invokeSuspend(ExampleUnitTest.kt:23) at com...ExampleUnitTest$addition_isCorrect$1$deferred$1.invokeSuspend(ExampleUnitTest.kt:48)Coroutine \"coroutine#3\":DeferredCoroutine{Active}@644c78d4, state: SUSPENDED at com...ExampleUnitTestKt.computeOne(ExampleUnitTest.kt:32) at com...ExampleUnitTestKt$computeValue$2$one$1.invokeSuspend(ExampleUnitTest.kt:21)Coroutine \"coroutine#4\":DeferredCoroutine{Active}@532a02d9, state: SUSPENDED at com...ExampleUnitTestKt.computeTwo(ExampleUnitTest.kt:37) at com...ExampleUnitTestKt$computeValue$2$two$1.invokeSuspend(ExampleUnitTest.kt:22)Dumping only deferred\"coroutine#2\":DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.combineResults(ExampleUnitTest.kt:29) \"coroutine#3\":DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.computeOne(ExampleUnitTest.kt:32) \"coroutine#4\":DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.computeTwo(ExampleUnitTest.kt:37)See here for current gripes with Android Studio use for this experimental library.I hope you found this article helpful. Have fun experimenting with these different ways to debug coroutines!Keep up with my latest research on PatreonDid you know the contents of this article were first shared on Patreon a few months back? If you enjoy my work and want to keep up with the latest research, consider subscribing to my Patreon and supporting my work.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*VXCYpVmU_YqrQvSWjkLeXg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://hinchman-amanda.medium.com/?source=post_page---byline--1c39fbb862f0---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Amanda Hinchman\" src=\"https://miro.medium.com/v2/resize:fill:88:88/2*ztG0oUW1cZALNFzt9wMjFA.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--1c39fbb862f0---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"a8ca\"\u003eDebugging asynchronous code is difficult, as it can be hard to capture its true nature while putting regular breakpoints in debugging. Here are a few options to keep a coroutine’s true nature:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"35cc\"\u003e\u003cstrong\u003eOptions available for IntelliJ IDEA\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"1a30\"\u003eLogging\u003c/li\u003e\u003cli id=\"1d25\"\u003eRun/Debug Configurations\u003c/li\u003e\u003cli id=\"939b\"\u003eGUI Debugging\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"48d6\"\u003e\u003cstrong\u003eOptions available for Android Studio\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"edc4\"\u003eLogging\u003c/li\u003e\u003cli id=\"9dfb\"\u003eExperimental Coroutine Debugging in Test\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"9288\"\u003eLet’s get to it!\u003c/p\u003e\u003ch2 id=\"1f4d\"\u003eOption 1: Via logging\u003c/h2\u003e\u003cp id=\"0c00\"\u003e\u003cstrong\u003eAvailable in both Android Studio and IntelliJ IDEA\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"13c3\"\u003eUsing a good old fashioned \u003ccode\u003eprintln\u003c/code\u003e statement will tell you what thread the print statement currently resides in.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"164c\"\u003eprintln( “${msg} | currentThread: ${Thread.currentThread().name}”)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c865\"\u003eThe output would look something like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2f3c\"\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-1\u003cbr/\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-4\u003cbr/\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-3\u003cbr/\u003eCheckout history check: {Stevie Nips=100}    | current thread: pool-1-thread-2\u003cbr/\u003eCheckout history check: {Stevie Nips=100, Bailey=40}    | current thread: pool-1-thread-3\u003cbr/\u003eCheckout history check: {Stevie Nips=100, Bailey=240}    | current thread: pool-1-thread-1\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"12bc\"\u003eOption 2: Add coroutine debugging via Run/Debug Configurations\u003c/h2\u003e\u003cp id=\"40ee\"\u003e\u003cstrong\u003eAvailable in IntelliJ IDEA only\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"c735\"\u003eElevate your coroutine logging with this extra VM option! In your IntelliJ, go \u003cstrong\u003eEdit Run/Debug Configurations. \u003c/strong\u003eIn VM options, add the flag:\u003c/p\u003e\u003cul\u003e\u003cli id=\"ac60\"\u003e\u003ccode\u003e-Dkotlinx.coroutines.debug\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0dd4\"\u003eAs a bonus, you can check “\u003cstrong\u003eStore as project file”\u003c/strong\u003e to make sure the configuration stays even after exiting IntelliJ.\u003c/p\u003e\u003cp id=\"beda\"\u003eNow, your output tells you the number of coroutines launched, like in the \u003ca href=\"https://play.kotlinlang.org/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eonline Kotlin playground\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"e1c5\"\u003eThe same sample output is now:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3f02\"\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-1 @coroutine#3\u003cbr/\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-3 @coroutine#2\u003cbr/\u003ecoroutine launched    | current thread: DefaultDispatcher-worker-4 @coroutine#1\u003cbr/\u003eStevie Nips deposited $100  | Checkout history check: {Stevie Nips=100}    | current thread: pool-1-thread-2\u003cbr/\u003eBailey deposited $200  | Checkout history check: {Stevie Nips=100, Bailey=200}    | current thread: pool-1-thread-1\u003cbr/\u003eBailey deposited $40  | Checkout history check: {Stevie Nips=100, Bailey=240}    | current thread: pool-1-thread-3\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"4ce0\"\u003eOption 3: GUI Debugging\u003c/h2\u003e\u003cp id=\"16b3\"\u003e\u003cstrong\u003eOnly available with IntelliJ IDEA and coroutine dependency\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"5c01\"\u003eThis option only appears with the import:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7d47\"\u003eimplementation(\u0026#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.1\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c117\"\u003eAfter syncing your Gradle file, run \u003cstrong\u003eDebug \u003c/strong\u003eon your code. You should see an extra view option in the \u003cstrong\u003eDebug \u003c/strong\u003ewindow\u003cstrong\u003e \u003c/strong\u003eto view Coroutines launched and their current status.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDebug window shows the Threads \u0026amp; Variables console. In addition, a popup shows the Coroutines Console. Pictured are 3 JobImpls with one Coroutine in RUNNING status.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"4af7\"\u003eFor more information in JetBrains documentation see \u003ca href=\"https://www.jetbrains.com/help/idea/debug-kotlin-coroutines.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"0d94\"\u003eOption 4: Experimental Coroutine Debugging in Testing\u003c/h2\u003e\u003cp id=\"a848\"\u003e\u003cstrong\u003eAvailable in Android Studio\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"4725\"\u003eIt’s a little soul-crushing that Android Studio doesn’t offer the awesome GUI option above. Nonetheless, there is slightly problematic option available for being able to debug coroutines in testing.\u003c/p\u003e\u003cp id=\"db91\"\u003eWe can add the following chunk to our \u003cstrong\u003ebuild.gradle.kts\u003c/strong\u003e file, we can add the dependency:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"84a7\"\u003etestImplementation(\u0026#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"48ae\"\u003eThen, we can add packaging options within the \u003ccode\u003eandroid { … }\u003c/code\u003e section:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f1e6\"\u003eandroid {   \u003cbr/\u003e  ...\u003cbr/\u003e  packaging {\u003cp\u003e        // for JNA and JNA-platform\u003c/p\u003e\u003cp\u003e        resources.excludes.add(\u0026#34;META-INF/AL2.0\u0026#34;)\u003c/p\u003e\u003cp\u003e        resources.excludes.add(\u0026#34;META-INF/LGPL2.1\u0026#34;)\u003c/p\u003e\u003cp\u003e        // for byte-buddy\u003c/p\u003e\u003cp\u003e        resources.excludes.add(\u0026#34;META-INF/licenses/ASM\u0026#34;)\u003c/p\u003e\u003cp\u003e        resources.pickFirsts.add(\u0026#34;win32-x86-64/attach_hotspot_windows.dll\u0026#34;)\u003c/p\u003e\u003cp\u003e        resources.pickFirsts.add(\u0026#34;win32-x86/attach_hotspot_windows.dll\u0026#34;)\u003c/p\u003e\u003cp\u003e  }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c97b\"\u003eThis will cause the resource merge algorithm to exclude the problematic license files altogether and only leave a single copy of the files needed for byte-buddy-agent to work.\u003c/p\u003e\u003cp id=\"cf75\"\u003eIn our testing code, we can run something like:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a1ea\"\u003esuspend fun computeValue( ): String = coroutineScope {\u003cbr/\u003e     val one = async { computeOne() }\u003cbr/\u003e     val two = async { computeTwo() }\u003cbr/\u003e     combineResults(one, two)\u003cbr/\u003e}\u003cp\u003esuspend fun combineResults(\u003cbr/\u003e    one: Deferred\u0026lt;String\u0026gt;,\u003cbr/\u003e    two: Deferred\u0026lt;String\u0026gt;\u003cbr/\u003e): String = one.await() + two.await()\u003c/p\u003e\u003cp\u003esuspend fun computeOne( ): String {\u003cbr/\u003e    delay(5000)\u003cbr/\u003e    return \u0026#34;4\u0026#34;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003esuspend fun computeTwo( ): String {\u003cbr/\u003e    delay(5000)\u003cbr/\u003e    return \u0026#34;2\u0026#34;\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@OptIn(ExperimentalCoroutinesApi::class)\u003cbr/\u003eclass ExampleUnitTest {\u003cbr/\u003e    @Test\u003cbr/\u003e     fun addition_isCorrect() {\u003cbr/\u003e         runBlocking {\u003cbr/\u003e             DebugProbes.install()         // \u0026lt;--- install \u003cbr/\u003e             val deferred = async { computeValue() }\u003cbr/\u003e             // Delay for some time\u003cbr/\u003e             delay(1000)\u003cbr/\u003e             // Dump running coroutines\u003cbr/\u003e             DebugProbes.dumpCoroutines()   // \u0026lt;--- dump to get logging\u003cbr/\u003e             println(\u0026#34;\\nDumping only deferred\u0026#34;)\u003cbr/\u003e             DebugProbes.printJob(deferred)\u003cbr/\u003e       }\u003cbr/\u003e      assertEquals(4, 2 + 2)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"54cf\"\u003eUse \u003ccode\u003eDebugProbes.install()\u003c/code\u003e and \u003ccode\u003eDebugProbes.dumpCoroutines()\u003c/code\u003e API to get a dump of the current coroutine state in Android unit testing.\u003c/p\u003e\u003cp id=\"1ed8\"\u003eBut hey, it works. But not nearly as appealing as the GUI option offered in IntelliJ IDEA.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"96c1\"\u003eHere is a truncated view of the dump:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a95c\"\u003eCoroutines dump 2025/03/24 18:07:00\u003cp\u003eCoroutine \u0026#34;coroutine#2\u0026#34;:DeferredCoroutine{Active}@74bdc168, state: SUSPENDED\u003cbr/\u003e at com...ExampleUnitTestKt.combineResults(ExampleUnitTest.kt:29)\u003cbr/\u003e at com...ExampleUnitTestKt$computeValue$2.invokeSuspend(ExampleUnitTest.kt:23)\u003cbr/\u003e at com...ExampleUnitTest$addition_isCorrect$1$deferred$1.invokeSuspend(ExampleUnitTest.kt:48)\u003c/p\u003e\u003cp\u003eCoroutine \u0026#34;coroutine#3\u0026#34;:DeferredCoroutine{Active}@644c78d4, state: SUSPENDED\u003cbr/\u003e at com...ExampleUnitTestKt.computeOne(ExampleUnitTest.kt:32)\u003cbr/\u003e at com...ExampleUnitTestKt$computeValue$2$one$1.invokeSuspend(ExampleUnitTest.kt:21)\u003c/p\u003e\u003cp\u003eCoroutine \u0026#34;coroutine#4\u0026#34;:DeferredCoroutine{Active}@532a02d9, state: SUSPENDED\u003cbr/\u003e at com...ExampleUnitTestKt.computeTwo(ExampleUnitTest.kt:37)\u003cbr/\u003e at com...ExampleUnitTestKt$computeValue$2$two$1.invokeSuspend(ExampleUnitTest.kt:22)\u003cbr/\u003eDumping only deferred\u003cbr/\u003e\u0026#34;coroutine#2\u0026#34;:DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.combineResults(ExampleUnitTest.kt:29)\u003cbr/\u003e \u0026#34;coroutine#3\u0026#34;:DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.computeOne(ExampleUnitTest.kt:32)\u003cbr/\u003e \u0026#34;coroutine#4\u0026#34;:DeferredCoroutine{Active}, continuation is SUSPENDED at line com...ExampleUnitTestKt.computeTwo(ExampleUnitTest.kt:37)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5b22\"\u003eSee \u003ca href=\"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/#:~:text=Debug%20agent%20and%20Android\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e for current gripes with Android Studio use for this experimental library.\u003c/p\u003e\u003cp id=\"067e\"\u003eI hope you found this article helpful. Have fun experimenting with these different ways to debug coroutines!\u003c/p\u003e\u003ch2 id=\"56a2\"\u003eKeep up with my latest research on Patreon\u003c/h2\u003e\u003cp id=\"d6ae\"\u003eDid you know the contents of this article were first shared on Patreon a few months back? If you enjoy my work and want to keep up with the latest research, consider subscribing to my \u003ca href=\"https://patreon.com/AmandaHinchman?utm_medium=unknown\u0026amp;utm_source=join_link\u0026amp;utm_campaign=creatorshare_creator\u0026amp;utm_content=copyLink\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePatreon\u003c/a\u003e and supporting my work.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-03-24T23:12:44.102Z",
  "modifiedTime": null
}
