{
  "id": "a51050fe-5b13-4d15-999a-764002b50cf3",
  "title": "Extending an Interactive ADB üîÄ",
  "link": "https://zarah.dev/2023/09/21/adb-devices.html",
  "description": "A few weeks ago, I wrote about a script for making adb a little bit more interactive. The script makes the process of running an adb command much smoother if there are multiple devices attached by presenting a chooser. For example, when sending a deeplink: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - emulator-5554 3 - emulator-5556 Select device:",
  "author": "Zarah Dominguez",
  "published": "2023-09-21T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "adb"
  ],
  "byline": "",
  "length": 5978,
  "excerpt": "A few weeks ago, I wrote about a script for making adb a little bit more interactive. The script makes the process of running an adb command much smoother if...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "A few weeks ago, I wrote about a script for making adb a little bit more interactive. The script makes the process of running an adb command much smoother if there are multiple devices attached by presenting a chooser. For example, when sending a deeplink: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - emulator-5554 3 - emulator-5556 Select device: The adb command to be sent is embedded in the script. It works fine if we only need the convenience to run one command, but let‚Äôs face it, in reality I use a bunch of different commands all the time. It does not make sense though to have multiple copies of the script just to support multiple adb commands. I mentioned in that post that it would be nice to be able to make the script generic enough to support multiple commands, and I‚Äôve given it some thought since then. Before we dive into possible solutions, I did notice an issue with the current version of the script. This line figures out how many devices are available: # Find how many devices we have num_matches=$(echo $all_devices | egrep -o \"([[:alnum:]-]+[[:space:]]+device$)\" | wc -l) To recap, it counts how many lines have some text followed by the word ‚Äúdevices‚Äù. It works most of the time, however I noticed that if I plug in a device that has the USB authorisations revoked, that device appears as ‚Äúunauthorized‚Äù. ‚ûú ~ adb devices List of devices attached R5CR7039LBJ unauthorized emulator-5556 device For this post, that line has been updated to remove any lines with ‚Äúunauthorized‚Äù devices: # Drop any unauthorised devices (i.e. USB debugging disabled or authorisations revoked) valid_devices=$(echo $all_devices | grep -v \"([[:alnum:]-]+[[:space:]]+unauthorized$)\" | grep -oE \"([[:alnum:]-]+[[:space:]]+device$)\") Back to the problem at hand: all adb commands are structured in a predicatable manner: adb -s \u003cSERIAL_NUMBER\u003e command We can take advantage of this pattern to extend the scalability of our script. Option 1: Pass a command in as an argument üó£Ô∏è I first explored the option of passing in a stub of the adb command as an argument to the script. If we take the deeplink command for example: adb -s \u003cSERIAL_NUMBER\u003e shell am start -W -a android.intent.action.VIEW -d \"SOME_URL\" it means passing in shell am start -W -a android.intent.action.VIEW -d \"SOME_URL\" into the script. With the command stub now a parameter, we‚Äôd have to change our alias from this: alias deeplink='zsh /Users/zarah/scripts/deeplink.sh $1' to this: alias deeplink='zsh /Users/zarah/scripts/deeplink.sh \"shell am start -W -a android.intent.action.VIEW -d \\\"$1\\\"\"' With this option, the script remains mostly the same except for the part where the command is actually sent. Instead of hard-coding the command, we will use the stub passed in: command adb -s $serial_number $COMMAND This works, but it‚Äôs not the best. There may be instances when we need to run multiple adb commands one after the other. For example, when setting the screen orientation to portrait: function rotatePortrait() { adb shell settings put system accelerometer_rotation 0 adb shell settings put system user_rotation 0 } If we use this version of the script, it will work, but it will also ask multiple times for the serial number. That‚Äôs not good because it is easy to mess it up if different devices were entered for each command. Option 2: Just make it get the serial number üí± In this option, we cut back the functionality of the script to make it do one thing: get the serial number. A big chunk of the script remains the same, the only change reallly is to make the get_devices function skip sending the command and return the serial number chosen instead: # If there are multiple, ask for which device to grab if [[ $num_matches -gt 1 ]]; then get_from_multiple # Otherwise just grab the serial number else serial_number=$(echo $valid_devices | awk '{printf $1}') fi echo \"$serial_number\" This means that issuing the actual command is up to the caller, which may sound annoying and repetitive. Do not fret though, because we can hide all the annoyingness in functions that we can use in our aliases. In the .zshrc file (or wherever your aliases live), we can reference our get_devices script: source \"$(dirname \"$0\")/get_devices.sh\" The syntax to grab the returned value (the serial number) is a bit difficult to remember, so wrapping it in a function is helpful: # Grabs a serial number from all _available_ devices # If there is only one device, grabs that serial number automatically # If there are multiple devices, shows a chooser with the list of serial numbers function getSerialNumber() { serial_number=$(get_devices) } To make it even easier, we can make a convenience function to call through to getSerialNumber and then launch the adb command (thanks to my teammate Ani for suggesting this!): # Sends an interactive ADB command # Usage: Use the usual ADB command, replacing `adb` with `adbi` function adbi() { getSerialNumber \u0026\u0026 adb -s \"$serial_number\" \"$@\" } Applying this to our deeplink alias (which is now a function because Shellcheck will not stop complaining about it): # Deep links function deeplink() { adbi shell am start -W -a android.intent.action.VIEW -d \\\"\"$1\"\\\" } This solution is really adaptible and works well for the rotatePortrait function too: function rotatePortrait() { getSerialNumber adb -s \"$serial_number\" shell settings put system accelerometer_rotation 0 adb -s \"$serial_number\" shell settings put system user_rotation 0 } Now it only asks us to choose the device once and uses that serial number for all the adb commands to be executed. I like this solution a lot for a couple of reasons: it‚Äôs super easy to update our current aliases, i.e. s/adb/adbi the syntax is VERY similar to the usual adb syntax, i.e. s/adb/adbi I think it‚Äôs super obvious that we have a clear winner here ü•áüèãÔ∏è‚Äç‚ôÄÔ∏è Option 2 it is! And to celebrate, as always, the gist is in Github.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eA few weeks ago, I \u003ca href=\"https://zarah.dev/2023/08/30/adb-deeplinks.html\"\u003ewrote about a script\u003c/a\u003e for making \u003ccode\u003eadb\u003c/code\u003e a little bit more interactive. The script makes the process of running an \u003ccode\u003eadb\u003c/code\u003e command much smoother if there are multiple devices attached by presenting a chooser. For example, when sending a deeplink:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nMultiple devices found:\n1 - R5CR7039LBJ\n2 - emulator-5554\n3 - emulator-5556\nSelect device: \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode\u003eadb\u003c/code\u003e command to be sent is embedded in the script. It works fine if we only need the convenience to run one command, but let‚Äôs face it, in reality I use a bunch of different commands all the time. It does not make sense though to have multiple copies of the script just to support multiple \u003ccode\u003eadb\u003c/code\u003e commands.\u003c/p\u003e\n\n\u003cp\u003eI mentioned in that post that it would be nice to be able to make the script generic enough to support multiple commands, and I‚Äôve given it some thought since then.\u003c/p\u003e\n\n\u003cp\u003eBefore we dive into possible solutions, I did notice an issue with the current version of the script. This line figures out how many devices are available:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Find how many devices we have\u003c/span\u003e\n\u003cspan\u003enum_matches\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$all_devices\u003c/span\u003e | egrep \u003cspan\u003e-o\u003c/span\u003e \u003cspan\u003e\u0026#34;([[:alnum:]-]+[[:space:]]+device\u003c/span\u003e\u003cspan\u003e$)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003ewc\u003c/span\u003e \u003cspan\u003e-l\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo recap, it counts how many lines have some text followed by the word ‚Äúdevices‚Äù. It works most of the time, however I noticed that if I plug in a device that has the USB authorisations revoked, that device appears as ‚Äúunauthorized‚Äù.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ adb devices\nList of devices attached\nR5CR7039LBJ   unauthorized\nemulator-5556 device\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor this post, that line has been updated to remove any lines with ‚Äúunauthorized‚Äù devices:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Drop any unauthorised devices (i.e. USB debugging disabled or authorisations revoked)\u003c/span\u003e\n\u003cspan\u003evalid_devices\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$all_devices\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e-v\u003c/span\u003e \u003cspan\u003e\u0026#34;([[:alnum:]-]+[[:space:]]+unauthorized\u003c/span\u003e\u003cspan\u003e$)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e-oE\u003c/span\u003e \u003cspan\u003e\u0026#34;([[:alnum:]-]+[[:space:]]+device\u003c/span\u003e\u003cspan\u003e$)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eBack to the problem at hand: all \u003ccode\u003eadb\u003c/code\u003e commands are \u003ca href=\"https://developer.android.com/tools/adb#issuingcommands\"\u003estructured\u003c/a\u003e in a predicatable manner:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb \u003cspan\u003e-s\u003c/span\u003e \u0026lt;SERIAL_NUMBER\u0026gt; \u003cspan\u003ecommand\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can take advantage of this pattern to extend the scalability of our script.\u003c/p\u003e\n\n\u003ch3 id=\"option-1-pass-a-command-in-as-an-argument-Ô∏è\"\u003eOption 1: Pass a command in as an argument üó£Ô∏è\u003c/h3\u003e\n\n\u003cp\u003eI first explored the option of passing in a stub of the \u003ccode\u003eadb\u003c/code\u003e command as an argument to the script. If we take the deeplink command for example:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb \u003cspan\u003e-s\u003c/span\u003e \u0026lt;SERIAL_NUMBER\u0026gt; shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\u0026#34;SOME_URL\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eit means passing in \u003ccode\u003eshell am start -W -a android.intent.action.VIEW -d \u0026#34;SOME_URL\u0026#34;\u003c/code\u003e into the script. With the command stub now a parameter, we‚Äôd have to change our \u003ccode\u003ealias\u003c/code\u003e from this:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ealias \u003c/span\u003e\u003cspan\u003edeeplink\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;zsh /Users/zarah/scripts/deeplink.sh $1\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eto this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ealias \u003c/span\u003e\u003cspan\u003edeeplink\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;zsh /Users/zarah/scripts/deeplink.sh \u0026#34;shell am start -W -a android.intent.action.VIEW -d \\\u0026#34;$1\\\u0026#34;\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWith this option, the script remains mostly the same except for the part where the command is actually sent. Instead of hard-coding the command, we will use the stub passed in:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecommand \u003c/span\u003eadb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e$serial_number\u003c/span\u003e \u003cspan\u003e$COMMAND\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis works, but it‚Äôs not the best. There may be instances when we need to run multiple \u003ccode\u003eadb\u003c/code\u003e commands one after the other. For example, when setting the screen orientation to portrait:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction \u003c/span\u003erotatePortrait\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  adb shell settings put system accelerometer_rotation 0\n  adb shell settings put system user_rotation 0\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf we use this version of the script, it \u003cem\u003ewill\u003c/em\u003e work, but it will also ask multiple times for the serial number. That‚Äôs not good because it is easy to mess it up if different devices were entered for each command.\u003c/p\u003e\n\n\u003ch3 id=\"option-2-just-make-it-get-the-serial-number-\"\u003eOption 2: Just make it get the serial number üí±\u003c/h3\u003e\n\n\u003cp\u003eIn this option, we cut back the functionality of the script to make it do one thing: get the serial number. A big chunk of the script remains the same, the only change reallly is to make the \u003ccode\u003eget_devices\u003c/code\u003e function skip sending the command and return the serial number chosen instead:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# If there are multiple, ask for which device to grab\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003e$num_matches\u003c/span\u003e \u003cspan\u003e-gt\u003c/span\u003e 1 \u003cspan\u003e]]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ethen\n  \u003c/span\u003eget_from_multiple\n\u003cspan\u003e# Otherwise just grab the serial number\u003c/span\u003e\n\u003cspan\u003eelse\n  \u003c/span\u003e\u003cspan\u003eserial_number\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$valid_devices\u003c/span\u003e | \u003cspan\u003eawk\u003c/span\u003e \u003cspan\u003e\u0026#39;{printf $1}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003efi\n\n\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$serial_number\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis means that issuing the actual command is up to the caller, which may sound annoying and repetitive. Do not fret though, because we can hide all the annoyingness in functions that we can use in our aliases.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003e.zshrc\u003c/code\u003e file (or wherever your \u003ccode\u003ealias\u003c/code\u003ees live), we can reference our \u003ccode\u003eget_devices\u003c/code\u003e script:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esource\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003edirname\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/get_devices.sh\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe syntax to grab the returned value (the serial number) is a bit difficult to remember, so wrapping it in a function is helpful:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Grabs a serial number from all _available_ devices\u003c/span\u003e\n\u003cspan\u003e# If there is only one device, grabs that serial number automatically\u003c/span\u003e\n\u003cspan\u003e# If there are multiple devices, shows a chooser with the list of serial numbers\u003c/span\u003e\n\u003cspan\u003efunction \u003c/span\u003egetSerialNumber\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eserial_number\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003eget_devices\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo make it even easier, we can make a convenience function to call through to \u003ccode\u003egetSerialNumber\u003c/code\u003e and then launch the \u003ccode\u003eadb\u003c/code\u003e command (thanks to my teammate \u003ca href=\"https://www.linkedin.com/in/aniruddhfichadia/\"\u003eAni\u003c/a\u003e for suggesting this!):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Sends an interactive ADB command\u003c/span\u003e\n\u003cspan\u003e# Usage: Use the usual ADB command, replacing `adb` with `adbi`\u003c/span\u003e\n\u003cspan\u003efunction \u003c/span\u003eadbi\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    getSerialNumber \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e adb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$serial_number\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$@\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eApplying this to our deeplink \u003ccode\u003ealias\u003c/code\u003e (which is now a function because \u003ca href=\"https://www.shellcheck.net/\"\u003eShellcheck\u003c/a\u003e will not stop complaining about it):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Deep links\u003c/span\u003e\n\u003cspan\u003efunction \u003c/span\u003edeeplink\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  adbi shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis solution is really adaptible and works well for the \u003ccode\u003erotatePortrait\u003c/code\u003e function too:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction \u003c/span\u003erotatePortrait\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  getSerialNumber\n  adb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$serial_number\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e shell settings put system accelerometer_rotation 0\n  adb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$serial_number\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e shell settings put system user_rotation 0\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow it only asks us to choose the device once and uses that serial number for all the \u003ccode\u003eadb\u003c/code\u003e commands to be executed.\u003c/p\u003e\n\n\u003cp\u003eI like this solution a lot for a couple of reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eit‚Äôs super easy to update our current aliases, i.e. \u003ccode\u003es/adb/adbi\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ethe syntax is VERY similar to the usual \u003ccode\u003eadb\u003c/code\u003e syntax, i.e. \u003ccode\u003es/adb/adbi\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI think it‚Äôs super obvious that we have a clear winner here ü•áüèãÔ∏è‚Äç‚ôÄÔ∏è Option 2 it is! And to celebrate, as always, the gist is in \u003ca href=\"https://gist.github.com/zmdominguez/9a889f1c367e1a21203ce8527c81e612\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
