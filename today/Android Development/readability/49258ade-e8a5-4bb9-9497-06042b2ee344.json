{
  "id": "49258ade-e8a5-4bb9-9497-06042b2ee344",
  "title": "UIViewPropertyAnimator is Too Cute",
  "link": "https://publicobject.com/2025/01/26/uiviewpropertyanimator/",
  "description": "I was using the old UIView APIs when I found some code that broke my brain. Here’s Swift code to animates a UIButton from opaque to transparent over one second.let button = ... let animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) { print(\"2 alpha=\\(button.alpha)\") button.alpha = 0.0",
  "author": "Jesse Wilson",
  "published": "Sun, 26 Jan 2025 21:04:55 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 3031,
  "excerpt": "I was using the old UIView APIs when I found some code that broke my brain. Here’s Swift code to animates a UIButton from opaque to transparent over one second. let button = ... let animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) { print(\"2 alpha=\\(button.alpha)\") button.alpha = 0.0 print(\"3 alpha=\\(button.alpha)\") } print(\"1 alpha=\\(button.alpha)\") animateOut.startAnimation() print(\"4 alpha=\\(button.alpha)\") It prints the button’s alpha four times: 1. Before sta",
  "siteName": "Public Object",
  "favicon": "",
  "text": "I was using the old UIView APIs when I found some code that broke my brain. Here’s Swift code to animates a UIButton from opaque to transparent over one second.let button = ... let animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) { print(\"2 alpha=\\(button.alpha)\") button.alpha = 0.0 print(\"3 alpha=\\(button.alpha)\") } print(\"1 alpha=\\(button.alpha)\") animateOut.startAnimation() print(\"4 alpha=\\(button.alpha)\")It prints the button’s alpha four times:Before starting the animationBefore setting alpha to 0.0After setting alpha to 0.0After starting the animationHere’s the output:1 alpha=1.0 2 alpha=1.0 3 alpha=0.0 4 alpha=0.0And here’s it all running in the simulator: The pixels don’t match the propertiesThe value of button.alpha is 0.0 when startAnimation() returns, and remains at 0.0 forever. But the actual drawn pixels are different! Over the one-second animation the pixels smoothly transition from 1.0 to 0.0.I added code to print button.alpha on every frame: it printed 0.0 each time.It’s bananas that the alpha property doesn’t match the drawn pixels!State captureI’m more familiar with Android’s animation code. Instead of directly assigning properties to their target values as above (button.alpha = 0.0), Android requires me to use Property objects, like View.ALPHA:val animateOut = ObjectAnimator.ofFloat(button, View.ALPHA, 0f)For each property I want to animate, I need to find its Property object or create one. Android uses it to read the initial value and to write an update for each frame.But hang on a sec... how does iOS do capture the initial value? Somehow UIViewPropertyAnimator figures out the initial value of each animated property. It also keeps track of those values somewhere. I don’t know how this works.The pixels don’t match the properties, againThis whole API is such a curiosity! What happens if I change the property while it’s being animated?... animateOut.startAnimation() print(\"4 alpha=\\(button.alpha)\") button.alpha = 1.0 print(\"5 alpha=\\(button.alpha)\") So when the animation completes, the value I set takes effect. I suspect the animation overrides the actual property while it’s running.Only certain propertiesWhat happens if I animate the tint color too?... let animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) { print(\"2 alpha=\\(button.alpha)\") button.alpha = 0.0 button.tintColor = .red print(\"3 alpha=\\(button.alpha)\") } ... The color changes instantly, and the alpha animates over a second. Yuck.Too CuteThe UIViewPropertyAnimator API can do amazing and powerful things! But it’s built on mechanisms that I can’t use. And because there’s no source code to browse, I can’t study it to learn how it works.UPDATE, AN HOUR LATERKhaos Tian, who knows iOS better than I do, read this post and referred me to CALayer.presentation(). That API holds properties during an animation. Super cool!(I’m still trying to figure out how the accessing alpha inside a UIViewPropertyAnimator block creates a property animation.)",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\t\t\t\u003cp\u003eI was using the old \u003ccode\u003eUIView\u003c/code\u003e APIs when I found some code that broke my brain. Here’s Swift code to animates a \u003ccode\u003eUIButton\u003c/code\u003e from opaque to transparent over one second.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elet button = ...\nlet animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) {\n  print(\u0026#34;2 alpha=\\(button.alpha)\u0026#34;)\n  button.alpha = 0.0\n  print(\u0026#34;3 alpha=\\(button.alpha)\u0026#34;)\n}\n\nprint(\u0026#34;1 alpha=\\(button.alpha)\u0026#34;)\nanimateOut.startAnimation()\nprint(\u0026#34;4 alpha=\\(button.alpha)\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt prints the button’s \u003ccode\u003ealpha\u003c/code\u003e four times:\u003c/p\u003e\u003col\u003e\u003cli\u003eBefore starting the animation\u003c/li\u003e\u003cli\u003eBefore setting \u003ccode\u003ealpha\u003c/code\u003e to \u003ccode\u003e0.0\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAfter setting \u003ccode\u003ealpha\u003c/code\u003e to \u003ccode\u003e0.0\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAfter starting the animation\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eHere’s the output:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e1 alpha=1.0\n2 alpha=1.0\n3 alpha=0.0\n4 alpha=0.0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd here’s it all running in the simulator:\u003c/p\u003e\u003cvideo controls=\"\" width=\"600\"\u003e\n  \u003csource src=\"https://cdn.publicobject.com/20250126-animate-out.mp4\" type=\"video/mp4\"/\u003e\n\u003c/video\u003e\n\u003ch3 id=\"the-pixels-don-t-match-the-properties\"\u003eThe pixels don’t match the properties\u003c/h3\u003e\u003cp\u003eThe value of \u003ccode\u003ebutton.alpha\u003c/code\u003e is 0.0 when \u003ccode\u003estartAnimation()\u003c/code\u003e returns, and remains at 0.0 forever. But the actual drawn pixels are different! Over the one-second animation the pixels smoothly transition from 1.0 to 0.0.\u003c/p\u003e\u003cp\u003eI added code to print \u003ccode\u003ebutton.alpha\u003c/code\u003e on every frame: it printed 0.0 each time.\u003c/p\u003e\u003cp\u003eIt’s bananas that the \u003ccode\u003ealpha\u003c/code\u003e property doesn’t match the drawn pixels!\u003c/p\u003e\u003ch3 id=\"state-capture\"\u003eState capture\u003c/h3\u003e\u003cp\u003eI’m more familiar with Android’s animation code. Instead of directly assigning properties to their target values as above (\u003ccode\u003ebutton.alpha = 0.0\u003c/code\u003e), Android requires me to use \u003ccode\u003eProperty\u003c/code\u003e objects, like \u003ccode\u003eView.ALPHA\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eval animateOut = ObjectAnimator.ofFloat(button, View.ALPHA, 0f)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor each property I want to animate, I need to find its \u003ccode\u003eProperty\u003c/code\u003e object or create one. Android uses it to read the initial value and to write an update for each frame.\u003c/p\u003e\u003cp\u003eBut hang on a sec... how does iOS do capture the initial value? Somehow \u003ccode\u003eUIViewPropertyAnimator\u003c/code\u003e figures out the initial value of each animated property. It also keeps track of those values somewhere. I don’t know how this works.\u003c/p\u003e\u003ch3 id=\"the-pixels-don-t-match-the-properties-again\"\u003eThe pixels don’t match the properties, again\u003c/h3\u003e\u003cp\u003eThis whole API is such a curiosity! What happens if I change the property while it’s being animated?\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e...\nanimateOut.startAnimation()\nprint(\u0026#34;4 alpha=\\(button.alpha)\u0026#34;)\nbutton.alpha = 1.0\nprint(\u0026#34;5 alpha=\\(button.alpha)\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\u003cvideo controls=\"\" width=\"600\"\u003e\n  \u003csource src=\"https://cdn.publicobject.com/20250126-animate-out-back-again.mp4\" type=\"video/mp4\"/\u003e\n\u003c/video\u003e\n\u003cp\u003eSo when the animation completes, the value I set takes effect. I suspect the animation \u003cem\u003eoverrides\u003c/em\u003e the actual property while it’s running.\u003c/p\u003e\u003ch3 id=\"only-certain-properties\"\u003eOnly certain properties\u003c/h3\u003e\u003cp\u003eWhat happens if I animate the tint color too?\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e...\nlet animateOut = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) {\n  print(\u0026#34;2 alpha=\\(button.alpha)\u0026#34;)\n  button.alpha = 0.0\n  button.tintColor = .red\n  print(\u0026#34;3 alpha=\\(button.alpha)\u0026#34;)\n}\n...\u003c/code\u003e\u003c/pre\u003e\u003cvideo controls=\"\" width=\"600\"\u003e\n  \u003csource src=\"https://cdn.publicobject.com/20250126-animate-out-back-red.mp4\" type=\"video/mp4\"/\u003e\n\u003c/video\u003e\n\u003cp\u003eThe color changes instantly, and the alpha animates over a second. Yuck.\u003c/p\u003e\u003ch3 id=\"too-cute\"\u003eToo Cute\u003c/h3\u003e\u003cp\u003eThe \u003ccode\u003eUIViewPropertyAnimator\u003c/code\u003e API can do amazing and powerful things! But it’s built on mechanisms that I can’t use. And because there’s no source code to browse, I can’t study it to learn how it works.\u003c/p\u003e\u003ch3 id=\"update-an-hour-later\"\u003eUPDATE, AN HOUR LATER\u003c/h3\u003e\u003cp\u003eKhaos Tian, who knows iOS better than I do, read this post and \u003ca href=\"https://mastodon.tz.is/@khaost/113897021837820912\"\u003ereferred me\u003c/a\u003e to \u003ca href=\"https://developer.apple.com/documentation/quartzcore/calayer/presentation()\"\u003eCALayer.presentation()\u003c/a\u003e. That API holds properties during an animation. Super cool!\u003c/p\u003e\u003cp\u003e(I’m still trying to figure out how the accessing \u003ccode\u003ealpha\u003c/code\u003e inside a \u003ccode\u003eUIViewPropertyAnimator\u003c/code\u003e block creates a property animation.)\u003c/p\u003e\n\t\t\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-01-26T21:04:55Z",
  "modifiedTime": "2025-01-26T23:03:36Z"
}
