{
  "id": "f7e1bd4b-083c-43e7-9da6-f7b8cbef1dfa",
  "title": "Developer Preview: Desktop windowing on Android Tablets",
  "link": "http://android-developers.googleblog.com/2024/09/developer-preview-desktop-windowing-on-android-tablets.html",
  "description": "",
  "author": "Android Developers",
  "published": "2024-09-12T11:00:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "adaptive",
    "desktop",
    "free-form",
    "insets",
    "largescreens",
    "layouts",
    "multitasking",
    "resizing",
    "Tablets",
    "windowing"
  ],
  "byline": "",
  "length": 8859,
  "excerpt": "Desktop windowing on Android tablets enables users to run multiple apps simultaneously and resize windows for optimal multitasking.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Francesco Romano – Developer Relations Engineer on Android, and Fahd Imtiaz – Product Manager, Android Developer To empower tablet users to get more done, we're enhancing freeform windowing, allowing them to run multiple apps simultaneously and resize windows for optimal multitasking. Today, we're excited to share that desktop windowing on Android tablets is available in developer preview. For app developers, the concept of Android apps running in freeform windows has already existed with solutions like Samsung DeX and ChromeOS. Updating your apps to support adaptive layouts, more robust multitasking, and adaptive inputs will ensure your apps work well on large screens across the Android ecosystem. Let’s explore how to optimize your apps for desktop windowing and deliver the optimal experience to users. What is desktop windowing? Desktop windowing allows users to run multiple apps simultaneously and resize app windows, offering a more flexible and desktop-like experience. This, along with a refreshed System UI and new APIs, allows users to be even more productive and creates a more seamless, desktop-like experience on tablets. In Figure 1, you can see the anatomy of the screen with desktop windowing enabled. Things to make note of: Users can run multiple apps side-by-side, simultaneously Taskbar is fixed and shows the running apps, users can pin apps for quick access New header bar with window controls at the top of each window which apps can customize Figure 1: Desktop windowing on a Pixel Tablet.Note: Images are examples and subject to change How can users invoke desktop windowing? By default, apps open in full screen on Android tablets. To run the apps as a desktop window on Pixel Tablet, press and hold the window handle at the top in the middle of the screen and drag it within the UI, as seen in Figure 2. Once you are in the desktop space, all future apps will be launched as desktop windows as well. Figure 2. Press, hold, and drag the window handle to enter desktop windowing.Note: Images are examples and subject to change You can also invoke desktop windowing from the menu that shows up below the window handle when you tap/click on it or use the keyboard shortcut meta key (Windows, Command, or Search) + Ctrl + Down. You can exit desktop windowing and display an app as full screen by closing all active windows or by grabbing the window handle at the top of the window and dragging the app to the top of the screen. You can also use the meta + H keyboard shortcut to run apps as full screen again. To return to the desktop, move a full screen app to the desktop space by using the methods mentioned above, or simply tap on the desktop space tile in the Recents screen. What does this mean for app developers? Desktop windowing on Android tablets creates new opportunities for your apps, particularly around productivity and multitasking. The possibility to resize and reposition multiple app windows allows users to easily compare documents, reference information while composing emails, and multitask efficiently. By optimizing for desktop windowing, you can deliver unique user experiences to match the growing demand for tablet-based productivity. At the same time, you'll enhance the overall user experience on tablets, making your apps more versatile and adaptable to different scenarios. If your app already meets the Tier 2 (Large Screens optimized) quality bar in the Large screen app quality guidelines, then there is minimal additional optimization required! If your app has not been optimized for large screens yet, updating it according to the Large screen app quality guidelines becomes even more crucial in the context of desktop windowing. Let’s see why: Freeform resizing enables users to resize apps to their preference for maximized productivity. Considering this, developers should note: Apps with locked orientation are freely resizable. That means, even if an activity is locked to portrait orientation, users can still resize the app to landscape orientation window. In a future update, apps declared as non-resizable will have their UI scaled while keeping the same aspect ratio. Adaptive layouts: By adapting your UI, apps have an opportunity to effortlessly handle a wide range of window sizes, from compact to expanded screen layouts. In desktop windowing, apps can be resized down to a minimum size of 386dp x 352dp, so make sure to leverage window size classes to adjust your app's layout, content, and interactions to adapt to different window dimensions. State management: With freeform resizing, configuration changes happen each time the window resizes, so your app should either handle these configuration changes gracefully or make sure you are preserving the app state when the OS initiates the re-creation of the app. As a reminder, users can change the screen density while your app is running, so it’s best to ensure that your app can handle screen density configuration changes as well. Figure 3. Apps with locked orientation are freely resizable. Desktop windowing takes productivity on tablets to the next level with multiple apps running simultaneously. Similar to split screen, Desktop windowing encourages users to have multiple windows open. Considering this, developers should note:  Multitasking support: For enhanced productivity, users can have two or more apps open simultaneously, and they expect to easily share content between apps, so add support for drag and drop gestures. Also, ensure your app continues to function correctly even when not in focus, and if your app uses exclusive resources like camera or microphone, the app needs to handle resource loss gracefully when other apps acquire the resource.  Multi-instance support: Users can run multiple instances of your app side-by-side; for example, a document editor application may allow users to start new documents while still being able to reference the already open documents. Apps can set this new Multi-instance property to declare that System UI should be shown for this app to allow it to be launched as multiple instances. Also note that in desktop windowing, new tasks open in a new window, so double-check the user journey if your app starts multiple tasks. Figure 4. Start another instance of Chrome by dragging a tab out of the app window.Note: Images are examples and subject to change With desktop windowing, input methods beyond touch and insets handling become even more important for a seamless user experience.  More input methods (keyboard, mouse): Users are more likely to use your app with a variety of input methods like external keyboards, mice, and trackpads. Check that users can interact smoothly with your app using keyboard and mouse peripherals or through the emulator. Developers can add support for app shortcuts and publish them using the keyboard shortcuts API, which allows users to easily view the supported app shortcuts through a standardized surface on Android devices. Insets handling: All apps when running in desktop windowing have a header bar, even in immersive mode. Ensure your app's content isn't obscured by this. The new header bar is reported as a caption bar in Compose (androidx.compose.foundation:foundation-layout.WindowInsets.Companion.captionBar) and in Views (android.view.WindowInsets.Type.CAPTION_BAR), which is part of the system bars. API 35 also introduced a new appearance type, to make the header bar transparent, to allow apps to draw custom content inside. Get hands-on!  Today we’re announcing a developer preview that provides you with an early opportunity to experience and test desktop windowing. You can try it out on Pixel Tablet before it’s released to AOSP more broadly. The preview is available today. Update your Pixel Tablet to the latest Android 15 QPR1 Beta 2 release to try out desktop windowing. If you don’t have a Pixel Tablet handy, access the Pixel Tablet emulator in Android Studio Preview, and select the Android 15.0 (Google APIs Tablet) target. Once your device is set up, select Enable freeform windows option in Developer options to explore the capabilities of desktop windowing and how your app behaves within this new environment. By optimizing your apps for desktop windowing on Pixel Tablet, you are not only enhancing the app experience on that specific device but also future-proofing your apps for the broader Android ecosystem where freeform windowing will become prevalent. We're excited about the windows of opportunities enabled by desktop windowing, and we look forward to seeing how you adapt your apps for an enhanced user experience. We're committed to improving the desktop windowing experience through future updates. Make sure to test your app and give us feedback. Say tuned for more developer guides and resources!",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEicPESghCRbndcBMRlq8Wnu7htMNL3y9CbNIyI7Y9jW66rsLy2l0fJ4xN6L3g0FAvaz2c8yrNBsPiKPGCLxynePqGfs1Ck276Chv9vfLvGZymzjHZHjfJKz72ncuokqpIhBtEQ4RGr3CmHhsJ7mKAcn2KyLxejWATmWL0BXceOW42zG1fJ8C5Rm2xzt4Vc/w1200-h630-p-k-no-nu/image1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEicPESghCRbndcBMRlq8Wnu7htMNL3y9CbNIyI7Y9jW66rsLy2l0fJ4xN6L3g0FAvaz2c8yrNBsPiKPGCLxynePqGfs1Ck276Chv9vfLvGZymzjHZHjfJKz72ncuokqpIhBtEQ4RGr3CmHhsJ7mKAcn2KyLxejWATmWL0BXceOW42zG1fJ8C5Rm2xzt4Vc/s1600/image1.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by \u003cauthor\u003eFrancesco Romano – Developer Relations Engineer on Android, and Fahd Imtiaz – Product Manager, Android Developer\u003c/author\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eTo empower tablet users to get more done, we\u0026#39;re enhancing freeform windowing, allowing them to run multiple apps simultaneously and resize windows for optimal multitasking. Today, we\u0026#39;re excited to share that desktop windowing on Android tablets is available in developer preview.\u003c/p\u003e \n\n\u003cp\u003eFor app developers, the concept of Android apps running in freeform windows has already existed with solutions like Samsung DeX and ChromeOS. Updating your apps to support adaptive layouts, more robust multitasking, and adaptive inputs will ensure your apps work well on large screens across the Android ecosystem.\u003c/p\u003e  \n\n\u003cp\u003eLet’s explore how to optimize your apps for desktop windowing and deliver the optimal experience to users.\u003c/p\u003e   \n\n\u003ch3\u003eWhat is desktop windowing?\u003c/h3\u003e\n\n\u003cp\u003eDesktop windowing allows users to run multiple apps simultaneously and resize app windows, offering a more flexible and desktop-like experience. This, along with a refreshed System UI and new APIs, allows users to be even more productive and creates a more seamless, desktop-like experience on tablets.\u003c/p\u003e\n\n\u003cp\u003eIn Figure 1,  you can see the anatomy of the screen with desktop windowing enabled. Things to make note of:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eUsers can run multiple apps side-by-side, simultaneously\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003eTaskbar is fixed and shows the running apps, users can pin apps for quick access\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003eNew header bar with window controls at the top of each window which apps can customize\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg alt=\"Desktop windowing on a Pixel Tablet\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEicPESghCRbndcBMRlq8Wnu7htMNL3y9CbNIyI7Y9jW66rsLy2l0fJ4xN6L3g0FAvaz2c8yrNBsPiKPGCLxynePqGfs1Ck276Chv9vfLvGZymzjHZHjfJKz72ncuokqpIhBtEQ4RGr3CmHhsJ7mKAcn2KyLxejWATmWL0BXceOW42zG1fJ8C5Rm2xzt4Vc/s1600/image1.png\" width=\"100%\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003e\u003cb\u003eFigure 1:\u003c/b\u003e Desktop windowing on a Pixel Tablet.\u003c/em\u003e\u003c/center\u003e\u003ccenter\u003e\u003ci\u003eNote: Images are examples and subject to change\u003c/i\u003e\u003c/center\u003e\u003c/imgcaption\u003e\u003cbr/\u003e\n\n\u003ch3\u003eHow can users invoke desktop windowing?\u003c/h3\u003e\n\n\u003cp\u003eBy default, apps open in full screen on Android tablets. To run the apps as a desktop window on Pixel Tablet, press and hold the window handle at the top in the middle of the screen and drag it within the UI, as seen in Figure 2.\u003c/p\u003e\n\n\u003cp\u003eOnce you are in the desktop space, all future apps will be launched as desktop windows as well.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A moving image demonstrating what completing the action \u0026#39;press, hold, and drag the window handle to enter desktop windowing\u0026#39; looks like.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_jE8Pjn_uQZQd9SbAwq2FuFZIWbtmi-iUhSlN4r7_lqlcAYj8IFx57ScR7Vn8nTR0L7XmkBB72-GtKshZbEx5qYT5GLqc_xomjGbE9x0xMTiwqzfzwnb_VySRgpZndUnLnMGGH3ZtcPqpeGAVCx8XwFfpr4C1G9INQSHrKW9NbVtA0rO-URuIPLzUwGg/s1600/image4.gif\" width=\"100%\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003e\u003cb\u003eFigure 2.\u003c/b\u003e Press, hold, and drag the window handle to enter desktop windowing.\u003c/em\u003e\u003c/center\u003e\u003ccenter\u003e\u003ci\u003eNote: Images are examples and subject to change\u003c/i\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eYou can also invoke desktop windowing from the menu that shows up below the window handle when you tap/click on it or use the keyboard shortcut meta key (Windows, Command, or Search) + Ctrl + Down.\u003c/p\u003e\n\n\u003cp\u003eYou can exit desktop windowing and display an app as full screen by closing all active windows or by grabbing the window handle at the top of the window and dragging the app to the top of the screen. You can also use the meta + H keyboard shortcut to run apps as full screen again.\u003c/p\u003e\n\n\u003cp\u003eTo return to the desktop, move a full screen app to the desktop space by using the methods mentioned above, or simply tap on the desktop space tile in the Recents screen.\u003c/p\u003e\n\n\u003ch3\u003eWhat does this mean for app developers?\u003c/h3\u003e\n\n\u003cp\u003eDesktop windowing on Android tablets creates new opportunities for your apps, particularly around productivity and multitasking. The possibility to resize and reposition multiple app windows allows users to easily compare documents, reference information while composing emails, and multitask efficiently.\u003c/p\u003e\n\n\u003cp\u003eBy optimizing for desktop windowing, you can deliver unique user experiences to match the growing demand for tablet-based productivity. At the same time, you\u0026#39;ll enhance the overall user experience on tablets, making your apps more versatile and adaptable to different scenarios.\u003c/p\u003e\n\n\u003cp\u003eIf your app already meets the \u003ca href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality#large_screen_optimized\" target=\"_blank\"\u003eTier 2\u003c/a\u003e (Large Screens optimized) quality bar in the \u003ca href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\" target=\"_blank\"\u003eLarge screen app quality guidelines\u003c/a\u003e, then there is minimal additional optimization required! If your app has not been optimized for large screens yet, updating it according to the Large screen app quality guidelines becomes even more crucial in the context of desktop windowing. Let’s see why:\u003c/p\u003e\n\n\u003cul\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003eFreeform resizing enables users to resize apps to their preference for maximized productivity.\u003c/b\u003e Considering this, developers should note:\u003c/li\u003e\n  \n\u003cul\u003e\u003cul\u003e\u003cli\u003eApps with locked orientation are freely resizable. That means, even if an activity is locked to \u003ca href=\"https://developer.android.com/guide/topics/manifest/activity-element#screen\" target=\"_blank\"\u003eportrait orientation\u003c/a\u003e, users can still resize the app to landscape orientation window. In a future update, apps declared as non-resizable will have their UI scaled while keeping the same aspect ratio.\u003c/li\u003e\n  \n\u003cli\u003e\u003cb\u003eAdaptive layouts: \u003c/b\u003eBy adapting your UI, apps have an opportunity to effortlessly handle a wide range of window sizes, from compact to expanded screen layouts. In desktop windowing, apps can be resized down to a minimum size of 386dp x 352dp, so make sure to leverage \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/window-size-classes\" target=\"_blank\"\u003ewindow size classes\u003c/a\u003e to adjust your app\u0026#39;s layout, content, and interactions to adapt to different window dimensions.\u003c/li\u003e\n  \n\u003cli\u003e\u003cb\u003eState management:\u003c/b\u003e With freeform resizing, configuration changes happen each time the window resizes, so your app should either handle these configuration changes gracefully or make sure you are preserving the app state when the OS initiates the re-creation of the app. As a reminder, users can change the screen density while your app is running, so it’s best to ensure that your app can handle screen density configuration changes as well.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\u003cbr/\u003e\n\n\u003cb\u003e\u003cul\u003e\u003cul\u003e\u003cul\u003e\u003cul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/b\u003e\n\n\u003cimg alt=\"A moving image demonstrating how apps are fully resizable\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiS5IKXTAQsXZFSIfuBhIYNghSGMoBCRCrXbx3Mp2U6ed9eHixlUVIQqtOBwwJFR3Tl00aT1gPKikSzEMw6muFEDC0EdeyyufMrOtaoGpZYxq90tXe1GUriskE_pzxhAVUyibdOTlwjGiqtwLQjo0kT1x7GQd225DmEOCLpqqCU0DhVL4MB1G2bVAnfuGE/s1600/image3.gif\" width=\"100%\"/\u003e\u003cp\u003e\u003cem\u003e\u003cb\u003eFigure 3.\u003c/b\u003e Apps with locked orientation are freely resizable.\u003c/em\u003e\u003c/p\u003e\u003cb\u003e\u003c/b\u003e\u003cbr/\u003e\n\n\u003cli\u003e\u003cb\u003eDesktop windowing takes productivity on tablets to the next level with multiple apps running simultaneously. \u003c/b\u003eSimilar to split screen, Desktop windowing encourages users to have multiple windows open. Considering this, developers should note: \u003c/li\u003e\n  \n  \n\u003cul\u003e\u003cul\u003e\u003cli\u003e\u003cb\u003eMultitasking support:\u003c/b\u003e For enhanced productivity, users can have two or more apps open simultaneously, and they expect to easily share content between apps, so add support for \u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop\" target=\"_blank\"\u003edrag and drop\u003c/a\u003e gestures. Also, ensure your app continues to function correctly even when not in focus, and if your app uses exclusive resources like camera or microphone, the app needs to \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive/support-multi-window-mode#exclusive_resource_access\" target=\"_blank\"\u003ehandle resource loss gracefully\u003c/a\u003e when other apps acquire the resource. \u003c/li\u003e\n  \n\u003cli\u003e\u003cb\u003eMulti-instance support:\u003c/b\u003e Users can run multiple instances of your app side-by-side; for example, a document editor application may allow users to start new documents while still being able to reference the already open documents. Apps can set this \u003ca href=\"https://developer.android.com/reference/android/view/WindowManager#PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI\" target=\"_blank\"\u003enew Multi-instance property\u003c/a\u003e to declare that System UI should be shown for this app to allow it to be launched as multiple instances. Also note that in desktop windowing, \u003ci\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent#FLAG_ACTIVITY_NEW_TASK\" target=\"_blank\"\u003enew tasks\u003c/a\u003e open in a new window\u003c/i\u003e, so double-check the user journey if your app starts multiple tasks.\u003c/li\u003e\u003c/ul\u003e\u003c/ul\u003e\u003cbr/\u003e\n\n\u003cimg alt=\"A moving image demonstrating how you can start another instance of Chrome by dragging a tab out og the app window.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAQtCkHL7YuKy1inlhMZpAykRUattpFAftNevbBYDc5_Pmaj89NHaION-QGNQluq0YTxtHVU1P1cRvA19cmGxZOrdFoRvURGTFVxlh7ji1-L-Mb-en-q1jxBl69gPI_8bdQToDg-55SV-2PU4e79O9SjFfAAIILI1zDd-Oxtd0iqutDxUF9AwLylm54Ig/s1600/Responsive-layouts-GIF.gif\" width=\"100%\"/\u003e\u003cp\u003e\u003cem\u003e\u003cb\u003eFigure 4.\u003c/b\u003e Start another instance of Chrome by dragging a tab out of the app window.\u003c/em\u003e\u003c/p\u003e\u003cb\u003e\u003c/b\u003e\u003cp\u003e\u003cem\u003eNote: Images are examples and subject to change\u003c/em\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003cul\u003e\u003cli\u003e\u003cb\u003eWith desktop windowing, input methods beyond touch and insets handling become even more important for a seamless user experience.\u003c/b\u003e \u003c/li\u003e\u003cul\u003e\n  \n\u003cul\u003e\u003cli\u003e\u003cb\u003eMore input methods (keyboard, mouse):\u003c/b\u003e Users are more likely to use your app with a variety of input methods like external keyboards, mice, and trackpads. Check that users can interact smoothly with your app using \u003ca href=\"https://developer.android.com/codelabs/large-screens/add-keyboard-and-mouse-support-with-compose\" target=\"_blank\"\u003ekeyboard and mouse peripherals\u003c/a\u003e or through the emulator. Developers can add support for app shortcuts and publish them using the keyboard shortcuts API, which allows users to easily view the supported app shortcuts through a standardized surface on Android devices.\u003c/li\u003e\n  \n\u003cli\u003e\u003cb\u003eInsets handling:\u003c/b\u003e  All apps when running in desktop windowing have a header bar, even in immersive mode. Ensure your app\u0026#39;s content isn\u0026#39;t obscured by this. \u003ci\u003eThe new header bar is reported as a caption bar\u003c/i\u003e in Compose (\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#(androidx.compose.foundation.layout.WindowInsets.Companion).captionBar()\" target=\"_blank\"\u003eandroidx.compose.foundation:foundation-layout.WindowInsets.Companion.captionBar\u003c/a\u003e\u003c/span\u003e) and in Views (\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/WindowInsets.Type#captionBar()\"\u003eandroid.view.WindowInsets.Type.CAPTION_BAR\u003c/a\u003e\u003c/span\u003e), which is part of the system bars. API 35 also introduced a new \u003ca href=\"https://developer.android.com/reference/android/view/WindowInsetsController#APPEARANCE_TRANSPARENT_CAPTION_BAR_BACKGROUND\" target=\"_blank\"\u003eappearance type\u003c/a\u003e, to make the header bar transparent, to allow apps to draw custom content inside.\u003c/li\u003e\n  \n\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\n\n\n\u003ch3\u003eGet hands-on! \u003c/h3\u003e\n\n\u003cp\u003eToday we’re announcing a developer preview that provides you with an early opportunity to experience and test desktop windowing. You can try it out on \u003ca href=\"https://developer.android.com/about/versions/15/get#on_pixel\" target=\"_blank\"\u003ePixel Tablet\u003c/a\u003e before it’s released to AOSP more broadly. The preview is available today. Update your Pixel Tablet to the latest Android 15 QPR1 Beta 2 release to try out desktop windowing. If you don’t have a Pixel Tablet handy, access the \u003ca href=\"https://developer.android.com/about/versions/15/get#on_emulator\" target=\"_blank\"\u003ePixel Tablet emulator\u003c/a\u003e in \u003ca href=\"https://developer.android.com/studio/preview\" target=\"_blank\"\u003eAndroid Studio Preview\u003c/a\u003e, and select the Android 15.0 (Google APIs Tablet) target. Once your device is set up, select \u003cb\u003eEnable freeform windows\u003c/b\u003e option in \u003cb\u003eDeveloper options\u003c/b\u003e to explore the capabilities of desktop windowing and how your app behaves within this new environment.\u003c/p\u003e\n\n\u003cp\u003eBy optimizing your apps for desktop windowing on Pixel Tablet, you are not only enhancing the app experience on that specific device but also future-proofing your apps for the broader Android ecosystem where freeform windowing will become prevalent. We\u0026#39;re excited about the windows of opportunities enabled by desktop windowing, and we look forward to seeing how you adapt your apps for an enhanced user experience.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;re committed to improving the desktop windowing experience through future updates. Make sure to test your app and give us \u003ca href=\"https://developer.android.com/about/versions/15/feedback\" target=\"_blank\"\u003efeedback\u003c/a\u003e. Say tuned for more developer guides and resources!\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
