{
  "id": "a3d77f36-6d97-45c5-b3a4-8c8d2ae2a8e7",
  "title": "Try Something Simpler",
  "link": "https://publicobject.com/2025/01/05/try-something-simpler/",
  "description": "The late Joe Armstrong had a great rule for error handling that stuck with me.‘If you can’t do what you want to do try to do something simpler’I was thinking about this recently. I was writing code to embed resource files in an iOS application binary. Here’",
  "author": "Jesse Wilson",
  "published": "Sun, 05 Jan 2025 05:38:25 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 1729,
  "excerpt": "The late Joe Armstrong [https://joearms.github.io/] had a great rule [https://www.youtube.com/watch?v=TTM_b7EJg5E] for error handling that stuck with me. \u003e ‘If you can’t do what you want to do try to do something simpler’ I was thinking about this recently. I was writing code to embed resource files in an iOS application binary. Here’s my first draft: let embeddedDir = OkioPath.companion.toPath( Bundle.pizzaResources.resourcePath!, normalize: false ) The ! in this sample applies Armstron",
  "siteName": "Public Object",
  "favicon": "",
  "text": "The late Joe Armstrong had a great rule for error handling that stuck with me.‘If you can’t do what you want to do try to do something simpler’I was thinking about this recently. I was writing code to embed resource files in an iOS application binary. Here’s my first draft:let embeddedDir = OkioPath.companion.toPath( Bundle.pizzaResources.resourcePath!, normalize: false )The ! in this sample applies Armstrong’s rule:Attempt what I want: Try to load the resource path.I can’t, because the resourcePath is nil.Try to do something simpler: crash the app.The iOS developers I work with don’t like !, or anything else that could crash the app. When I get my Swift experts to review code that uses !, they always recommended I replace ! with if let for a graceful recovery.let embeddedDir: OkioPath if let resourcePath = Bundle.pizzaResources.resourcePath { embeddedDir = OkioPath.companion.toPath(resourcePath, normalize: false) } else { // Fail silently. We won't find the resources, but we'll keep going. embeddedDir = OkioFileSystem.Companion.shared.SYSTEM_TEMPORARY_DIRECTORY }My peers and I value different things.I want code that fails fast. Not being able to load resources should never happen. If it does the system is in an unexpected \u0026 untested state. We should not silently recover.They want code that doesn’t crash. Every day as a software engineer I see things that are never supposed to happen. Why should I have the hubris to claim something will never happen?A hazard of mobile apps is that deploying fixes takes forever. I’ll be in big trouble if Apple ships an iOS update that changes the API. I have to fix the bug, an app reviewer has to approve it, and each of my users needs to get the update.Ugh.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\n\t\t\n\n\n\n\n\n\u003cmain role=\"main\"\u003e\n\t\u003carticle\u003e\n\t\t\u003csection\u003e\n\t\t\t\t\u003cp\u003eThe late \u003ca href=\"https://joearms.github.io/\"\u003eJoe Armstrong\u003c/a\u003e had a \u003ca href=\"https://www.youtube.com/watch?v=TTM_b7EJg5E\"\u003egreat rule\u003c/a\u003e for error handling that stuck with me.\u003c/p\u003e\u003cblockquote\u003e‘If you can’t do what you want to do try to do something simpler’\u003c/blockquote\u003e\u003cp\u003eI was thinking about this recently. I was writing code to embed resource files in an iOS application binary. Here’s my first draft:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elet embeddedDir = OkioPath.companion.toPath(\n  Bundle.pizzaResources.resourcePath!, \n  normalize: false\n)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e!\u003c/code\u003e in this sample applies Armstrong’s rule:\u003c/p\u003e\u003col\u003e\u003cli\u003eAttempt what I want: Try to load the resource path.\u003c/li\u003e\u003cli\u003eI can’t, because the \u003ccode\u003eresourcePath\u003c/code\u003e is nil.\u003c/li\u003e\u003cli\u003eTry to do something simpler: crash the app.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eThe iOS developers I work with don’t like \u003ccode\u003e!\u003c/code\u003e, or anything else that could crash the app. When I get my Swift experts to review code that uses \u003ccode\u003e!\u003c/code\u003e, they always recommended I replace \u003ccode\u003e!\u003c/code\u003e with \u003ccode\u003eif let\u003c/code\u003e for a graceful recovery.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elet embeddedDir: OkioPath\nif let resourcePath = Bundle.pizzaResources.resourcePath {\n  embeddedDir = OkioPath.companion.toPath(resourcePath, normalize: false)\n} else {\n  // Fail silently. We won\u0026#39;t find the resources, but we\u0026#39;ll keep going.\n  embeddedDir = OkioFileSystem.Companion.shared.SYSTEM_TEMPORARY_DIRECTORY\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMy peers and I value different things.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eI want code that fails fast.\u003c/strong\u003e Not being able to load resources should never happen. If it does the system is in an unexpected \u0026amp; untested state. We should not silently recover.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThey want code that doesn’t crash.\u003c/strong\u003e Every day as a software engineer I see things that are never supposed to happen. Why should I have the hubris to claim something will never happen?\u003c/p\u003e\u003cp\u003eA hazard of mobile apps is that deploying fixes takes forever. I’ll be in big trouble if Apple ships an iOS update that changes the API. I have to fix the bug, an app reviewer has to approve it, and each of my users needs to get the update.\u003c/p\u003e\u003cp\u003eUgh.\u003c/p\u003e\n\t\t\t\u003c/section\u003e\n\t\u003c/article\u003e\n\u003c/main\u003e\n\n\n\n\n\t\t\n\n\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-01-05T05:38:25Z",
  "modifiedTime": "2025-01-05T05:38:25Z"
}
