{
  "id": "c1f64ade-d4fb-4c94-a308-2c199954758f",
  "title": "Report card: Java 19 and the end of Kotlin",
  "link": "https://jakewharton.com/report-card-java-19-and-the-end-of-kotlin/",
  "description": "",
  "author": "",
  "published": "2022-09-20T00:00:00+00:00",
  "source": "https://jakewharton.com/atom.xml",
  "categories": null,
  "byline": "",
  "length": 3896,
  "excerpt": "20 September 2022",
  "siteName": "Jake Wharton",
  "favicon": "",
  "text": "Report card: Java 19 and the end of Kotlin 20 September 2022 Three years ago I gave the talk “What’s new in Java 19: The end of Kotlin?” which forecasted what a future Java language would look like in September 2022 when Java 19 was released. Check your calendars, folks. It’s September 2022 right now and Java 19 was released today! As expected my predictions were not perfect, but I’m pretty happy with the results. Let’s check in with each feature and see how my predictions fared report-card style1. Local methods This feature allows for methods to be declared inside of other methods making them effectively private to that method. public static boolean anyMatch(Graph graph, Predicate\u003cNode\u003e predicate) { var seen = new HashSet\u003cNode\u003e(); boolean hasMatch(Node node) { if (!seen.add(node)) return false; // already seen if (predicate.test(node)) return true; // match! return node.getNodes().stream().anyMatch(n -\u003e hasMatch(n)); } return hasMatch(getRoot()); } Grade: F 🔴 Working support for local methods was added to a branch in Project Amber in October 2019. It seemed like a slam dunk, but a JEP for the feature was never created. The branch still sits in the Project Amber repo unchanged in three years. If I had to guess, all eyes in Amber are focused on pattern matching and its related features. Hopefully someday local methods can be picked back up as a proposed feature. Text blocks A multiline string literal for when one line just isn’t enough. System.out.println(\"\"\" SELECT * FROM users WHERE name LIKE 'Jake %' \"\"\"); Grade: A 🟢 Delivered in Java 15. Records A read-only type that exists solely for carrying data with strong, semantic names. record Person(String name, int age) { } Grade: A 🟢 Delivered in Java 16. Sealed hierarchies Define the list of permitted subtypes of your class or interface and prevent any others. sealed interface Developer { } record Person(String name, int age) extends Developer { } record Business(String name) extends Developer { } Grade: A 🟢 Delivered in Java 17. Type patterns Declare a new name to bind when a type test succeeds. Object o = 1; if (o instanceof Integer i) { System.out.println(i + 1); } Grade: A 🟢 Delivered in Java 16 for instanceof. Third preview in Java 19 for use in a switch. Record patterns Bind the component parts of a record type to local names. Developer alice = Person(\"Alice\", 12); switch (alice) { case Person(var name, var age) -\u003e // ... } Grade: C 🟠 First preview in Java 19 Just now starting in preview and does not include things like the use of an underscore (_) as a wildcard or syntax for destructors. Virtual threads All of your blocking calls with none of the blocking. try (var executor = Executors.newVirtualThreadPerTaskExecutor()) { for (int count = 10; count \u003e 0; count--) { executor.submit(() -\u003e { Thread.sleep(100 * count); System.out.println(count) }); }); } Grade: B 🟡 First preview in Java 19. Nice to see it just make the cut, although expect a few previews to be needed before it’s stable. All things considered I think this is a passing report card (despite failing one elective). The next three years of Java will hopefully see the completion of the items above as well as see larger efforts like Project Panama and Project Valhalla start to come to fruition. It’s a great time to be a Java developer. To the surprise of no one, Kotlin did not end. It continued to evolve in the last three years with language features such as context receivers, sealed interfaces, and exhaustive-by-default. It’s also a great time to be a Kotlin developer. But in the end I think we can all agree on one thing: there’s no such thing as OpenJDK LTS and the best long-term version of the JDK is always the latest one. Welcome to my hill. Update to Java 19 today! — Jake Wharton",
  "image": "https://jakewharton.com/static/default_image.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n      \u003ch2\u003eReport card: Java 19 and the end of Kotlin\u003c/h2\u003e\n      \u003cp\u003e20 September 2022\u003c/p\u003e\n\n      \u003cp\u003eThree years ago I gave the talk \u003ca href=\"https://jakewharton.com/whats-new-in-java-19-the-end-of-kotlin/\"\u003e“What’s new in Java 19: The end of Kotlin?”\u003c/a\u003e which forecasted what a future Java language would look like in September 2022 when Java 19 was released.\nCheck your calendars, folks. It’s September 2022 right now and Java 19 was released today!\u003c/p\u003e\n\n\u003cp\u003eAs expected my predictions were not perfect, but I’m pretty happy with the results.\nLet’s check in with each feature and see how my predictions fared report-card style\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"local-methods\"\u003eLocal methods\u003c/h3\u003e\n\n\u003cp\u003eThis feature allows for methods to be declared inside of other methods making them effectively private to that method.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003eanyMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eGraph\u003c/span\u003e \u003cspan\u003egraph\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eNode\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eseen\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eHashSet\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eNode\u003c/span\u003e\u003cspan\u003e\u0026gt;();\u003c/span\u003e\n  \n  \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003ehasMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNode\u003c/span\u003e \u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(!\u003c/span\u003e\u003cspan\u003eseen\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// already seen\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epredicate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003e// match!\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetNodes\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003estream\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003eanyMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003en\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003ehasMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003en\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ehasMatch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetRoot\u003c/span\u003e\u003cspan\u003e());\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: F\u003c/strong\u003e 🔴\u003c/p\u003e\n\n\u003cp\u003eWorking support for local methods was added to a branch in Project Amber in October 2019.\nIt seemed like a slam dunk, but a JEP for the feature was never created.\nThe branch still sits in the Project Amber repo unchanged in three years.\u003c/p\u003e\n\n\u003cp\u003eIf I had to guess, all eyes in Amber are focused on pattern matching and its related features.\nHopefully someday local methods can be picked back up as a proposed feature.\u003c/p\u003e\n\n\u003ch3 id=\"text-blocks\"\u003eText blocks\u003c/h3\u003e\n\n\u003cp\u003eA multiline string literal for when one line just isn’t enough.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eout\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n  SELECT *\n  FROM users\n  WHERE name LIKE \u0026#39;Jake %\u0026#39;\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: A\u003c/strong\u003e 🟢\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/378\"\u003eDelivered in Java 15\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"records\"\u003eRecords\u003c/h3\u003e\n\n\u003cp\u003eA read-only type that exists solely for carrying data with strong, semantic names.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003erecord\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003eage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: A\u003c/strong\u003e 🟢\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/395\"\u003eDelivered in Java 16\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"sealed-hierarchies\"\u003eSealed hierarchies\u003c/h3\u003e\n\n\u003cp\u003eDefine the list of permitted subtypes of your class or interface and prevent any others.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esealed\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eDeveloper\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003erecord\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003eage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eDeveloper\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003erecord\u003c/span\u003e \u003cspan\u003eBusiness\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eDeveloper\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: A\u003c/strong\u003e 🟢\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/409\"\u003eDelivered in Java 17\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"type-patterns\"\u003eType patterns\u003c/h3\u003e\n\n\u003cp\u003eDeclare a new name to bind when a type test succeeds.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eObject\u003c/span\u003e \u003cspan\u003eo\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eo\u003c/span\u003e \u003cspan\u003einstanceof\u003c/span\u003e \u003cspan\u003eInteger\u003c/span\u003e \u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eout\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: A\u003c/strong\u003e 🟢\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/394\"\u003eDelivered in Java 16\u003c/a\u003e for \u003ccode\u003einstanceof\u003c/code\u003e.\n\u003ca href=\"https://openjdk.org/jeps/427\"\u003eThird preview in Java 19\u003c/a\u003e for use in a \u003ccode\u003eswitch\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"record-patterns\"\u003eRecord patterns\u003c/h3\u003e\n\n\u003cp\u003eBind the component parts of a record type to local names.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eDeveloper\u003c/span\u003e \u003cspan\u003ealice\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Alice\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003eswitch\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ealice\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: C\u003c/strong\u003e 🟠\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/405\"\u003eFirst preview in Java 19\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJust now starting in preview and does not include things like the use of an underscore (\u003ccode\u003e_\u003c/code\u003e) as a wildcard or syntax for destructors.\u003c/p\u003e\n\n\u003ch3 id=\"virtual-threads\"\u003eVirtual threads\u003c/h3\u003e\n\n\u003cp\u003eAll of your blocking calls with none of the blocking.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003etry\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eexecutor\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eExecutors\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enewVirtualThreadPerTaskExecutor\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eint\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e--)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eexecutor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esubmit\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eThread\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esleep\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n      \u003cspan\u003eSystem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eout\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e});\u003c/span\u003e\n  \u003cspan\u003e});\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrade: B\u003c/strong\u003e 🟡\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://openjdk.org/jeps/425\"\u003eFirst preview in Java 19\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNice to see it just make the cut, although expect a few previews to be needed before it’s stable.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eAll things considered I think this is a passing report card (despite failing one elective).\u003c/p\u003e\n\n\u003cp\u003eThe next three years of Java will hopefully see the completion of the items above as well as see larger efforts like Project Panama and Project Valhalla start to come to fruition.\nIt’s a great time to be a Java developer.\u003c/p\u003e\n\n\u003cp\u003eTo the surprise of no one, Kotlin did not end. \nIt continued to evolve in the last three years with language features such as context receivers, sealed interfaces, and exhaustive-by-default.\nIt’s also a great time to be a Kotlin developer.\u003c/p\u003e\n\n\u003cp\u003eBut in the end I think we can all agree on one thing: there’s no such thing as OpenJDK LTS and the best long-term version of the JDK is always the latest one. Welcome to my hill. \u003cstrong\u003eUpdate to Java 19 today!\u003c/strong\u003e\u003c/p\u003e\n\n\n\n      \u003cp\u003e— Jake Wharton\u003c/p\u003e\n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2022-09-20T00:00:00Z",
  "modifiedTime": null
}
