{
  "id": "18404b09-b85d-494f-aae4-7ed7e0018011",
  "title": "slf4j-timber",
  "link": "https://android-arsenal.com/details/1/8478",
  "description": "This is a library that allows pure Java / Kotlin modules or libraries using SLF4J as their logging framework to bridge on the Google Android platform in combination with Jake Wharton's Timber logging utility. It's based on the patrickfav/slf4j-timber project with a modern take using Kotlin and the latest version of SLF4J (currently v2.0.0 which relies on ServiceLoader mechanism instead of the static binder mechanism as described here).",
  "author": "",
  "published": "Sun, 03 Mar 2024 07:20:00 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 3517,
  "excerpt": "Logging | slf4j-timber by unveloper",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "slf4j-timber This is a library that allows pure Java / Kotlin modules or libraries using SLF4J as their logging framework to bridge on the Google Android platform in combination with Jake Wharton's Timber logging utility. It's based on the patrickfav/slf4j-timber project with a modern take using Kotlin and the latest version of SLF4J (currently v2.0.6). Usage Attention: since v0.0.3 the artifact is migrated from JitPack to Maven Central. Add the slf4j-timber artifact from this repository as a dependency in your app module: dependencies { implementation(\"com.jakewharton.timber:timber:5.0.1\") implementation(\"io.github.unveloper:slf4j-timber:0.0.8\") } In the pure Java / Kotlin modules should be present the SLF4J artifact: dependencies { implementation(\"org.slf4j:slf4j-api:2.0.6\") } And that's basically it. SLF4J will automatically look for implementations of ILoggerFactory in the classpath (so don't add this parallel to org.slf4j:slf4j-android) Check out the source code to see an example app. Usage of deprecated artifact From v0.0.1 to v0.0.3 Follow the guidelines from jitpack.io to add the JitPack repository to your build file if you have not. Typically, this means an edit to your settings.gradle.kts file to add a new repository definition in the repositories block, like this: dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven(\"https://jitpack.io\") } } Then add the old slf4j-timber artifact (com.github.unveloper:slf4j-timber) from this repository as a dependency in your app module: dependencies { implementation(\"com.jakewharton.timber:timber:5.0.1\") implementation(\"com.github.unveloper:slf4j-timber:0.0.3\") } Dependencies by version slf4j-timber Timber SLF4J 0.0.8 5.0.1 2.0.6 0.0.7 5.0.1 2.0.5 0.0.6 5.0.1 2.0.4 0.0.5 5.0.1 2.0.3 0.0.4 5.0.1 2.0.2 0.0.3 5.0.1 2.0.1 0.0.2 5.0.1 2.0.0 0.0.1 5.0.1 2.0.0 Description Log level mapping The priorities will be converted to LogCat's priority level and passed to Timber.log(...);. The Log.isLoggable() are not respected here, since Timber should be responsible to decide when to log what. The following table shows the mapping from SLF4J log levels to LogCat log levels. SLF4J Android/Timber TRACE VERBOSE DEBUG DEBUG INFO INFO WARN WARN ERROR ERROR Logger name mapping Logger instances created using the LoggerFactory are named either according to the name given as parameter, or the fully qualified class name of the class given as parameter. No truncating will take place since Timber handles this itself. Limitations The Android-Timber binding implementation currently does not support Markers. All logging methods which have a Marker parameter simply delegate to the corresponding method without a Marker parameter, i.e., the Marker parameter is silently ignored. License Copyright (C) 2015-2022 unveloper Copyright (C) 2005-2012 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eslf4j-timber\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThis is a library that allows pure Java / Kotlin modules or libraries using \u003ca href=\"https://www.slf4j.org/\" rel=\"nofollow\" target=\"_blank\"\u003eSLF4J\u003c/a\u003e as their logging framework to bridge on the Google Android platform in combination with \u003ca href=\"https://github.com/JakeWharton/timber\" rel=\"nofollow\" target=\"_blank\"\u003eJake Wharton\u0026#39;s Timber logging utility\u003c/a\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eIt\u0026#39;s based on the \u003ca href=\"https://github.com/patrickfav/slf4j-timber\" rel=\"nofollow\" target=\"_blank\"\u003epatrickfav/slf4j-timber\u003c/a\u003e project with a modern take using Kotlin and the latest version of \u003cem\u003eSLF4J\u003c/em\u003e (currently \u003cstrong\u003ev2.0.6\u003c/strong\u003e).\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003eAttention\u003c/strong\u003e: since v0.0.3 the artifact is migrated from JitPack to Maven Central.\u003c/p\u003e \u003cp dir=\"auto\"\u003eAdd the \u003cem\u003eslf4j-timber\u003c/em\u003e artifact from this repository as a dependency in your \u003ccode\u003eapp\u003c/code\u003e module:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation(\u0026#34;com.jakewharton.timber:timber:5.0.1\u0026#34;) implementation(\u0026#34;io.github.unveloper:slf4j-timber:0.0.8\u0026#34;) }\"\u003e\u003cpre\u003e\u003cspan\u003edependencies\u003c/span\u003e {\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.jakewharton.timber:timber:5.0.1\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eio.github.unveloper:slf4j-timber:0.0.8\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eIn the pure Java / Kotlin modules should be present the \u003cem\u003eSLF4J\u003c/em\u003e artifact:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation(\u0026#34;org.slf4j:slf4j-api:2.0.6\u0026#34;) }\"\u003e\u003cpre\u003e\u003cspan\u003edependencies\u003c/span\u003e {\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.slf4j:slf4j-api:2.0.6\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eAnd that\u0026#39;s basically it. SLF4J will automatically look for implementations of \u003ccode\u003eILoggerFactory\u003c/code\u003e in the classpath (so don\u0026#39;t add this parallel to \u003ccode\u003eorg.slf4j:slf4j-android\u003c/code\u003e)\u003c/p\u003e \u003cp dir=\"auto\"\u003eCheck out the \u003ca href=\"https://github.com/unveloper/slf4j-timber/tree/master/app\" rel=\"nofollow\" target=\"_blank\"\u003esource code\u003c/a\u003e to see an example app.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage of deprecated artifact\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eFrom v0.0.1 to v0.0.3\u003c/p\u003e \u003cp dir=\"auto\"\u003eFollow the guidelines from \u003ca href=\"https://jitpack.io\" rel=\"nofollow\" target=\"_blank\"\u003ejitpack.io\u003c/a\u003e to add the JitPack repository to your build file if you have not.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTypically, this means an edit to your \u003ccode\u003esettings.gradle.kts\u003c/code\u003e file to add a new \u003ccode\u003erepository\u003c/code\u003e definition in the \u003ccode\u003erepositories\u003c/code\u003e block, like this:\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven(\u0026#34;https://jitpack.io\u0026#34;) } }\"\u003e\u003cpre\u003e\u003ccode\u003edependencyResolutionManagement {\n repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n repositories {\n  google()\n  mavenCentral()\n\n  maven(\u0026#34;https://jitpack.io\u0026#34;)\n }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eThen add the old \u003cem\u003eslf4j-timber\u003c/em\u003e artifact (com.github.unveloper:slf4j-timber) from this repository as a dependency in your \u003ccode\u003eapp\u003c/code\u003e module:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation(\u0026#34;com.jakewharton.timber:timber:5.0.1\u0026#34;) implementation(\u0026#34;com.github.unveloper:slf4j-timber:0.0.3\u0026#34;) }\"\u003e\u003cpre\u003e\u003cspan\u003edependencies\u003c/span\u003e {\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.jakewharton.timber:timber:5.0.1\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.github.unveloper:slf4j-timber:0.0.3\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDependencies by version\u003c/h2\u003e\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eslf4j-timber\u003c/th\u003e \u003cth\u003eTimber\u003c/th\u003e \u003cth\u003eSLF4J\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e0.0.8\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.6\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.7\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.5\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.6\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.4\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.5\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.3\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.4\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.2\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.3\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.1\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.2\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.0\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e0.0.1\u003c/td\u003e \u003ctd\u003e5.0.1\u003c/td\u003e \u003ctd\u003e2.0.0\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDescription\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eLog level mapping\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe priorities will be converted to LogCat\u0026#39;s priority level and passed to \u003ccode\u003eTimber.log(...);\u003c/code\u003e. The \u003ccode\u003eLog.isLoggable()\u003c/code\u003e are not respected here, since \u003ccode\u003eTimber\u003c/code\u003e should be responsible to decide when to log what. The following table shows the mapping from SLF4J log levels to LogCat log levels.\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eSLF4J\u003c/th\u003e \u003cth\u003eAndroid/Timber\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eTRACE\u003c/td\u003e \u003ctd\u003eVERBOSE\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eDEBUG\u003c/td\u003e \u003ctd\u003eDEBUG\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eINFO\u003c/td\u003e \u003ctd\u003eINFO\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eWARN\u003c/td\u003e \u003ctd\u003eWARN\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eERROR\u003c/td\u003e \u003ctd\u003eERROR\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eLogger name mapping\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eLogger instances created using the LoggerFactory are named either according to the name given as parameter, or the fully qualified class name of the class given as parameter. No truncating will take place since Timber handles this itself.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eLimitations\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe Android-Timber binding implementation currently does not support Markers. All logging methods which have a Marker parameter simply delegate to the corresponding method without a Marker parameter, i.e., the Marker parameter is silently ignored.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"Copyright (C) 2015-2022 unveloper Copyright (C) 2005-2012 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\"\u003e\u003cpre\u003e\u003ccode\u003eCopyright (C) 2015-2022 unveloper\nCopyright (C) 2005-2012 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
