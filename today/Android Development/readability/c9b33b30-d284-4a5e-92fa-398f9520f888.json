{
  "id": "c9b33b30-d284-4a5e-92fa-398f9520f888",
  "title": "Dialogs in Jetpack Compose",
  "link": "https://blog.kotlin-academy.com/dialogs-in-jetpack-compose-2b7f72b14651?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Narayan Panthi",
  "published": "Mon, 26 Aug 2024 06:54:57 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "android",
    "android-app-development",
    "jetpack-compose",
    "dialog",
    "bottomsheet"
  ],
  "byline": "Narayan Panthi",
  "length": 12991,
  "excerpt": "Dialog in Jetpack Compose| Custom Dialog | Alert Dialog | Full Screen Dialog |",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "Create beautiful dialogs in Jetpack Compose — Episode VDialogs are an essential part of our apps, whether we’re asking users quick questions, or guiding them through simple actions. They offer a unique advantage by capturing the user’s attention, but if not implemented thoughtfully, they can also become a source of distraction.In this article, we’ll explore how to create visually appealing dialogs in Jetpack Compose, starting with a basic alert dialog.Alert DialogAlert dialogs are used to capture the user’s attention and prompt them to make a decision or acknowledge important information.Alert Dialog in Jetpack ComposeWe can create above alert dialog in compose in following way:@Composablefun SimpleAlertDialog( dialogTitle: String, dialogSubTitle: String, onDismissRequest: () -\u003e Unit, onConfirmation: () -\u003e Unit,) { AlertDialog( modifier = Modifier.fillMaxWidth(0.92f), properties = DialogProperties( usePlatformDefaultWidth = false, decorFitsSystemWindows = true, dismissOnClickOutside = true, dismissOnBackPress = true ), shape = RoundedCornerShape(20.dp), onDismissRequest = { onDismissRequest() }, confirmButton = { TextButton(onClick = { onConfirmation() }) { Text(text = \"Yes\") } }, dismissButton = { TextButton(onClick = { onDismissRequest() }) { Text(text = \"Cancel\") } }, title = { Text(text = dialogTitle, fontSize = 18.sp) }, text = { Text(text = dialogSubTitle) })}In Compose, dialog components are separated with pre-defined variable and callbacks:title: The text at the top of the dialog.text: The main message in the center of the dialog.icon: An image or graphic at the top of the dialog.onDismissRequest: A function that runs when the user closes the dialog.dismissButton: The button to cancel or close the dialog.confirmButton: The button to confirm or agree with the action.Some important properties of dialog:dismissOnBackPress: Allows the dialog to be dismissed when the back button is pressed.dismissOnClickOutside: Lets the dialog be dismissed by clicking outside its bounds.securePolicy: Controls whether the FLAG_SECURE policy is applied to the dialog’s window, preventing screenshots.usePlatformDefaultWidth: Limits the dialog’s width to the default width of the platform.decorFitsSystemWindows: Adjusts the dialog’s layout to fit within the system windows, affecting how soft input modes (like the keyboard) interact with the dialog.Styling DialogsIn Jetpack Compose, we can style dialogs by adjusting properties within our app’s theme, similar to how it’s done in traditional Android Development. For instance, if you want to disable the dim background effect behind a dialog, you can customize it directly in your theme.\u003c!-- Dialog Theme --\u003e\u003cstyle name=\"Theme.DialogFullScreen\" parent=\"Theme.MaterialComponents.Light.Dialog\"\u003e \u003citem name=\"android:windowSoftInputMode\"\u003eadjustResize\u003c/item\u003e \u003citem name=\"android:windowLightStatusBar\"\u003etrue\u003c/item\u003e \u003citem name=\"android:statusBarColor\"\u003e@color/white\u003c/item\u003e \u003citem name=\"android:navigationBarColor\"\u003e@color/white\u003c/item\u003e \u003citem name=\"android:backgroundDimEnabled\"\u003efalse\u003c/item\u003e \u003citem name=\"android:backgroundDimAmount\"\u003e0.1\u003c/item\u003e \u003citem name=\"android:windowLightNavigationBar\"\u003etrue\u003c/item\u003e\u003c/style\u003e\u003c!-- App Parent Theme --\u003e\u003cstyle name=\"Theme.FireflyCompose\" parent=\"android:Theme.Material.Light.NoActionBar\"\u003e \u003citem name=\"android:statusBarColor\"\u003e@color/white\u003c/item\u003e \u003citem name=\"android:windowLightStatusBar\"\u003etrue\u003c/item\u003e \u003citem name=\"android:dialogTheme\"\u003e@style/Theme.DialogFullScreen\u003c/item\u003e\u003c/style\u003eAlso we can use DialogWindowProvider to change our dialog style:Dialog(...) { val dialogWindow = getDialogWindow() SideEffect { dialogWindow.let { window -\u003e window?.setDimAmount(0f) window?.setWindowAnimations(-1) } } ...}@ReadOnlyComposable@Composablefun getDialogWindow(): Window? = (LocalView.current.parent as? DialogWindowProvider)?.windowCustom DialogsWe can design our own custom dialogs with Compose that matches with our app’s aesthetics.Custom Alert Dialog with Jetpack ComposeLet’s create above custom dialog using compose.@Composablefun BeautifulCustomDialog( onDismissRequest: () -\u003e Unit, onConfirmation: () -\u003e Unit, painter: Painter, imageDescription: String,) { Dialog(onDismissRequest = { onDismissRequest() }) { Card(shape = RoundedCornerShape(16.dp)) { Column( modifier = Modifier.fillMaxWidth(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally, ) { Box( modifier = Modifier .fillMaxWidth() .background(Color.Blue), contentAlignment = Alignment.Center ) { Image( painter = painter, contentDescription = imageDescription, contentScale = ContentScale.Crop, modifier = Modifier.height(180.dp) ) } Text( text = \"New Update Available\", style = MaterialTheme.typography.bodyMedium, textAlign = TextAlign.Center, modifier = Modifier.padding(16.dp), ) Text( text = \"This is an example of the description of a very beautiful dialog which you may like.\", style = MaterialTheme.typography.bodySmall, textAlign = TextAlign.Center, modifier = Modifier.padding(16.dp, 8.dp, 16.dp, 8.dp), ) Button( onClick = { onDismissRequest() }, modifier = Modifier.padding(8.dp), ) { Text(\"Update Tonight\") } TextButton( onClick = { onConfirmation() }, modifier = Modifier.padding(8.dp), ) { Text(style = MaterialTheme.typography.bodySmall, text = \"View Released Notes\") } } } }}Show/Hide Dialog in ComposableCreating dialogs in Jetpack Compose is straightforward, but managing their visibility requires a slightly different approach compared to traditional dialogs.We need to keep track the dialog’s state and control when to show or hide.@Composablefun HomeScreen() { var showDialog by remember { mutableStateOf(false) } Column() { when { showDialog -\u003e { BeautifulCustomDialog( onDismissRequest = { showBeautifulDialog = false }, onConfirmation = { showBeautifulDialog = false }, painter = painterResource(id = R.drawable.ai_png), imageDescription = \"Sample Image\" )} } TextButton(onClick = { showDialog = true }) { Text(text = \"Beautiful Alert Dialog \") } }}Bottom Sheet DialogBottom sheet dialogs are a great way to present additional content or actions that slide up from the bottom of the screen.Bottom Sheet Dialog with Jetpack ComposeWe can create bottom sheet dialog using ModalBottomSheet, Let’s start creating above design starting with lazy column for the accounts with HeaderItem and FooterItem.@Composablefun AccountItemHeader(accountModel: AccountModel, onAccountClick: (AccountModel) -\u003e Unit) { Card( modifier = Modifier .padding(MaterialTheme.dimens.regular) .fillMaxWidth(), shape = MaterialTheme.shapes.medium ) { Row( Modifier .padding(8.dp) .fillMaxWidth() .align(Alignment.CenterHorizontally) .clickable { onAccountClick(accountModel) }, ) { // this url will be replaced by accountModel.image - added for testing ProfileImageView(\"https://fastly.picsum.photos/id/183/200/300.jpg?hmac=Z9yCtuuIPn5CuOhwIntNEQFIRotghuBn06nqOSL828c\") Column { Text( text = accountModel.name, style = appTypography.bodyMedium, maxLines = 1, color = MaterialTheme.colorScheme.onTertiaryContainer, modifier = Modifier .padding(8.dp) ) Text( text = accountModel.username, style = appTypography.bodySmall, maxLines = 1, color = MaterialTheme.colorScheme.onTertiaryContainer, modifier = Modifier .padding(start = 8.dp, end = 8.dp, bottom = 8.dp) ) } } }}@Composablefun AccountItemFooter(onFooterClicked: () -\u003e Unit) { Card( modifier = Modifier .padding(MaterialTheme.dimens.regular) .fillMaxWidth(), shape = MaterialTheme.shapes.medium ) { Row( Modifier .padding(10.dp) .fillMaxWidth() .align(Alignment.CenterHorizontally) .clickable { onFooterClicked() }, ) { Text( text = \"Add New Account\", style = appTypography.bodyMedium, maxLines = 1, textAlign = TextAlign.Center, color = MaterialTheme.colorScheme.onTertiaryContainer, modifier = Modifier .padding(8.dp) .fillMaxWidth() ) } }}@Composablefun ProfileImageView(imageUrl: String) { AsyncImage( model = imageUrl, contentScale = ContentScale.Crop, contentDescription = \"Profile Image\", modifier = Modifier .size(50.dp) .clip(CircleShape) )}Now, we can add these Header \u0026 Footer items in our lazy column.@Composablefun AccountList(accounts: List\u003cAccountModel\u003e, onAccountClick: (AccountModel) -\u003e Unit) { LazyColumn { items(accounts.size) { index -\u003e AccountItemHeader(accounts[index], onAccountClick) } item { AccountItemFooter() { } } }}And Finally, we can add the account list lazy column in ModalBottomSheet container like below:@OptIn(ExperimentalMaterial3Api::class)@Composablefun MyBottomSheetDialog( accountViewModel: AccountViewModel = hiltViewModel(), sheetState: SheetState, onDismissRequest: () -\u003e Unit, onActionConfirmation: () -\u003e Unit,) { val accountState = accountViewModel.accountState.collectAsStateLifecycleAware() ModalBottomSheet( onDismissRequest = { onDismissRequest() }, sheetState = sheetState ) { Column( modifier = Modifier .fillMaxWidth() .windowInsetsPadding(WindowInsets.safeDrawing), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally, ) { Card( modifier = Modifier .fillMaxWidth() .padding(start = 16.dp, end = 16.dp, bottom = 16.dp) ) { AccountList(accounts = accountState.value.accounts) { } } } }}Same as other dialogs we can toggle BottomSheet dialogs:@OptIn(ExperimentalMaterial3Api::class)@Composablefun ProfileScreen() { var showBottomSheetDialog by remember { mutableStateOf(false) } val sheetState = rememberModalBottomSheetState( skipPartiallyExpanded = false, ) Column() { when { showBottomSheetDialog -\u003e { MyBottomSheetDialog( sheetState = sheetState, onDismissRequest = { showBottomSheetDialog = false }) { showBottomSheetDialog = false } } } }}You might run into an issue where the bottom sheet overlaps with the status bar and navigation bar.This was a known problem in earlier versions of Jetpack Compose. Fortunately, the latest alpha version of the bottom sheet has addressed and fixed this issue. Issue DiscussionThat’s all for this episode! I hope you found it helpful. For any queries and suggestion please do comments.See you in the next episode. Until then, keep composing! 😺Jetpack Compose Series",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*ppsPjakiw_JbzJwRbQ_V3w.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://iamnaran.medium.com/?source=post_page-----2b7f72b14651--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Narayan Panthi\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*J9VrjqTFhRFOtZ3r4ecdqg@2x.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://blog.kotlin-academy.com/?source=post_page-----2b7f72b14651--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Kt. Academy\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*2grDGjzH0tfX8XiaF4Izaw.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"3693\"\u003eCreate beautiful dialogs in Jetpack Compose — Episode V\u003c/p\u003e\u003cp id=\"a020\"\u003e\u003cspan\u003eD\u003c/span\u003eialogs are an essential part of our apps, whether we’re asking users quick questions, or guiding them through simple actions. They offer a unique advantage by capturing the user’s attention, but if not implemented thoughtfully, they can also become a source of distraction.\u003c/p\u003e\u003cp id=\"e911\"\u003e\u003cstrong\u003eIn this article\u003c/strong\u003e, we’ll explore how to create visually appealing dialogs in Jetpack Compose, starting with a basic alert dialog.\u003c/p\u003e\u003ch2 id=\"4276\"\u003eAlert Dialog\u003c/h2\u003e\u003cp id=\"bbd9\"\u003eAlert dialogs are used to capture the user’s attention and prompt them to make a decision or acknowledge important information.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAlert Dialog in Jetpack Compose\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"9ee1\"\u003eWe can create above alert dialog in compose in following way:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8dfc\"\u003e@Composable\u003cbr/\u003efun SimpleAlertDialog(\u003cbr/\u003e    dialogTitle: String,\u003cbr/\u003e    dialogSubTitle: String,\u003cbr/\u003e    onDismissRequest: () -\u0026gt; Unit,\u003cbr/\u003e    onConfirmation: () -\u0026gt; Unit,\u003cbr/\u003e) {\u003cbr/\u003e        AlertDialog(\u003cbr/\u003e            modifier = Modifier.fillMaxWidth(0.92f),\u003cbr/\u003e            properties = DialogProperties(\u003cbr/\u003e                usePlatformDefaultWidth = false,\u003cbr/\u003e                decorFitsSystemWindows = true,\u003cbr/\u003e                dismissOnClickOutside = true,\u003cbr/\u003e                dismissOnBackPress = true\u003cbr/\u003e            ),\u003cbr/\u003e            shape = RoundedCornerShape(20.dp),\u003cbr/\u003e            onDismissRequest = {\u003cbr/\u003e                onDismissRequest()\u003cbr/\u003e            },\u003cbr/\u003e            confirmButton = {\u003cbr/\u003e                TextButton(onClick = { onConfirmation() }) {\u003cbr/\u003e                    Text(text = \u0026#34;Yes\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            },\u003cbr/\u003e            dismissButton = {\u003cbr/\u003e                TextButton(onClick = { onDismissRequest() }) {\u003cbr/\u003e                    Text(text = \u0026#34;Cancel\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            },\u003cbr/\u003e            title = {\u003cbr/\u003e                Text(text = dialogTitle, fontSize = 18.sp)\u003cbr/\u003e            },\u003cbr/\u003e            text = {\u003cbr/\u003e                Text(text = dialogSubTitle)\u003cbr/\u003e            })\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"7199\"\u003eIn Compose, dialog components are separated with pre-defined variable and callbacks:\u003c/p\u003e\u003cul\u003e\u003cli id=\"af8c\"\u003e\u003cstrong\u003etitle\u003c/strong\u003e: The text at the top of the dialog.\u003c/li\u003e\u003cli id=\"fee6\"\u003e\u003cstrong\u003etext\u003c/strong\u003e: The main message in the center of the dialog.\u003c/li\u003e\u003cli id=\"1971\"\u003e\u003cstrong\u003eicon\u003c/strong\u003e: An image or graphic at the top of the dialog.\u003c/li\u003e\u003cli id=\"c462\"\u003e\u003cstrong\u003eonDismissRequest\u003c/strong\u003e: A function that runs when the user closes the dialog.\u003c/li\u003e\u003cli id=\"055f\"\u003e\u003cstrong\u003edismissButton\u003c/strong\u003e: The button to cancel or close the dialog.\u003c/li\u003e\u003cli id=\"5aa2\"\u003e\u003cstrong\u003econfirmButton\u003c/strong\u003e: The button to confirm or agree with the action.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a82a\"\u003eSome important \u003cstrong\u003eproperties\u003c/strong\u003e of dialog:\u003c/p\u003e\u003cul\u003e\u003cli id=\"92e4\"\u003e\u003cstrong\u003edismissOnBackPress\u003c/strong\u003e: Allows the dialog to be dismissed when the back button is pressed.\u003c/li\u003e\u003cli id=\"171a\"\u003e\u003cstrong\u003edismissOnClickOutside\u003c/strong\u003e: Lets the dialog be dismissed by clicking outside its bounds.\u003c/li\u003e\u003cli id=\"0af0\"\u003e\u003cstrong\u003esecurePolicy\u003c/strong\u003e: Controls whether the \u003cstrong\u003eFLAG_SECURE\u003c/strong\u003e policy is applied to the dialog’s window, preventing screenshots.\u003c/li\u003e\u003cli id=\"f5b8\"\u003e\u003cstrong\u003eusePlatformDefaultWidth\u003c/strong\u003e: Limits the dialog’s width to the default width of the platform.\u003c/li\u003e\u003cli id=\"849c\"\u003e\u003cstrong\u003edecorFitsSystemWindows\u003c/strong\u003e: Adjusts the dialog’s layout to fit within the system windows, affecting how soft input modes (like the keyboard) interact with the dialog.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"6523\"\u003eStyling Dialogs\u003c/h2\u003e\u003cp id=\"3136\"\u003eIn Jetpack Compose, we can style dialogs by adjusting properties within our app’s theme, similar to how it’s done in traditional \u003cstrong\u003eAndroid Development\u003c/strong\u003e. For instance, if you want to disable the dim background effect behind a dialog, you can customize it directly in your theme.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"cdb5\"\u003e\u0026lt;!-- Dialog Theme --\u0026gt;\u003cbr/\u003e\u0026lt;style name=\u0026#34;Theme.DialogFullScreen\u0026#34; parent=\u0026#34;Theme.MaterialComponents.Light.Dialog\u0026#34;\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:windowSoftInputMode\u0026#34;\u0026gt;adjustResize\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:windowLightStatusBar\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@color/white\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:navigationBarColor\u0026#34;\u0026gt;@color/white\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:backgroundDimEnabled\u0026#34;\u0026gt;false\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:backgroundDimAmount\u0026#34;\u0026gt;0.1\u0026lt;/item\u0026gt;\u003cbr/\u003e        \u0026lt;item name=\u0026#34;android:windowLightNavigationBar\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt;\u003cbr/\u003e\u0026lt;/style\u0026gt;\u003cp\u003e\u0026lt;!-- App Parent Theme --\u0026gt;\u003cbr/\u003e\u0026lt;style name=\u0026#34;Theme.FireflyCompose\u0026#34; parent=\u0026#34;android:Theme.Material.Light.NoActionBar\u0026#34;\u0026gt;\u003cbr/\u003e      \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@color/white\u0026lt;/item\u0026gt;\u003cbr/\u003e      \u0026lt;item name=\u0026#34;android:windowLightStatusBar\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt;\u003cbr/\u003e      \u0026lt;item name=\u0026#34;android:dialogTheme\u0026#34;\u0026gt;@style/Theme.DialogFullScreen\u0026lt;/item\u0026gt;\u003cbr/\u003e\u0026lt;/style\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c970\"\u003eAlso we can use \u003cstrong\u003eDialogWindowProvider\u003c/strong\u003e to change our dialog style:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ebb2\"\u003eDialog(...) {\u003cp\u003e    val dialogWindow = getDialogWindow()\u003c/p\u003e\u003cp\u003e    SideEffect {\u003cbr/\u003e        dialogWindow.let { window -\u0026gt;\u003cbr/\u003e            window?.setDimAmount(0f)\u003cbr/\u003e            window?.setWindowAnimations(-1)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e ...\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@ReadOnlyComposable\u003cbr/\u003e@Composable\u003cbr/\u003efun getDialogWindow(): Window? = (LocalView.current.parent as? DialogWindowProvider)?.window\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"fd23\"\u003eCustom Dialogs\u003c/h2\u003e\u003cp id=\"a0d8\"\u003eWe can design our own custom dialogs with Compose that matches with our app’s aesthetics.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCustom Alert Dialog with Jetpack Compose\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"08bf\"\u003eLet’s create above custom dialog using compose.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"86d8\"\u003e@Composable\u003cbr/\u003efun BeautifulCustomDialog(\u003cbr/\u003e    onDismissRequest: () -\u0026gt; Unit,\u003cbr/\u003e    onConfirmation: () -\u0026gt; Unit,\u003cbr/\u003e    painter: Painter,\u003cbr/\u003e    imageDescription: String,\u003cbr/\u003e) {\u003cbr/\u003e    Dialog(onDismissRequest = { \u003cbr/\u003e                                 onDismissRequest() \u003cbr/\u003e         }) {\u003cbr/\u003e        Card(shape = RoundedCornerShape(16.dp)) {\u003cbr/\u003e            Column(\u003cbr/\u003e                modifier = Modifier.fillMaxWidth(),\u003cbr/\u003e                verticalArrangement = Arrangement.Center,\u003cbr/\u003e                horizontalAlignment = Alignment.CenterHorizontally,\u003cbr/\u003e            ) {\u003cbr/\u003e                Box(\u003cbr/\u003e                    modifier = Modifier\u003cbr/\u003e                        .fillMaxWidth()\u003cbr/\u003e                        .background(Color.Blue),\u003cbr/\u003e                    contentAlignment = Alignment.Center\u003cbr/\u003e                ) {\u003cbr/\u003e                    Image(\u003cbr/\u003e                        painter = painter,\u003cbr/\u003e                        contentDescription = imageDescription,\u003cbr/\u003e                        contentScale = ContentScale.Crop,\u003cbr/\u003e                        modifier = Modifier.height(180.dp)\u003cbr/\u003e                    )\u003cbr/\u003e                }\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = \u0026#34;New Update Available\u0026#34;,\u003cbr/\u003e                    style = MaterialTheme.typography.bodyMedium,\u003cbr/\u003e                    textAlign = TextAlign.Center,\u003cbr/\u003e                    modifier = Modifier.padding(16.dp),\u003cbr/\u003e                )\u003cp\u003e                Text(\u003cbr/\u003e                    text = \u0026#34;This is an example of the description of a very beautiful dialog which you may like.\u0026#34;,\u003cbr/\u003e                    style = MaterialTheme.typography.bodySmall,\u003cbr/\u003e                    textAlign = TextAlign.Center,\u003cbr/\u003e                    modifier = Modifier.padding(16.dp, 8.dp, 16.dp, 8.dp),\u003cbr/\u003e                )\u003cbr/\u003e                Button(\u003cbr/\u003e                    onClick = { onDismissRequest() },\u003cbr/\u003e                    modifier = Modifier.padding(8.dp),\u003cbr/\u003e                ) {\u003cbr/\u003e                    Text(\u0026#34;Update Tonight\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e                TextButton(\u003cbr/\u003e                    onClick = { onConfirmation() },\u003cbr/\u003e                    modifier = Modifier.padding(8.dp),\u003cbr/\u003e                ) {\u003cbr/\u003e                    Text(style = MaterialTheme.typography.bodySmall, text = \u0026#34;View Released Notes\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d6d2\"\u003eShow/Hide Dialog in Composable\u003c/h2\u003e\u003cp id=\"14e0\"\u003eCreating dialogs in Jetpack Compose is straightforward, but managing their visibility requires a slightly different approach compared to traditional dialogs.\u003c/p\u003e\u003cp id=\"5005\"\u003eWe need to keep track the dialog’s \u003cstrong\u003estate\u003c/strong\u003e and control when to show or hide.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"05c3\"\u003e@Composable\u003cbr/\u003efun HomeScreen() {\u003cp\u003e   var showDialog by remember { mutableStateOf(false) }\u003c/p\u003e\u003cp\u003e   Column() {\u003cbr/\u003e          when {\u003cbr/\u003e              showDialog -\u0026gt; {\u003cbr/\u003e                  BeautifulCustomDialog(\u003cbr/\u003e                    onDismissRequest = { showBeautifulDialog = false },\u003cbr/\u003e                    onConfirmation = { showBeautifulDialog = false },\u003cbr/\u003e                    painter = painterResource(id = R.drawable.ai_png),\u003cbr/\u003e                    imageDescription = \u0026#34;Sample Image\u0026#34;\u003cbr/\u003e                )}\u003cbr/\u003e           }\u003cbr/\u003e           TextButton(onClick = {\u003cbr/\u003e                      showDialog = true\u003cbr/\u003e                  }) {\u003cbr/\u003e                      Text(text = \u0026#34;Beautiful Alert Dialog \u0026#34;)\u003cbr/\u003e           }\u003cbr/\u003e     }\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c2a2\"\u003eBottom Sheet Dialog\u003c/h2\u003e\u003cp id=\"0b46\"\u003eBottom sheet dialogs are a great way to present additional content or actions that slide up from the bottom of the screen.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eBottom Sheet Dialog with Jetpack Compose\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"702e\"\u003eWe can create bottom sheet dialog using \u003cstrong\u003eModalBottomSheet, L\u003c/strong\u003eet’s start creating above design starting with lazy column for the accounts with \u003cstrong\u003eHeaderItem\u003c/strong\u003e and \u003cstrong\u003eFooterItem\u003c/strong\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d42e\"\u003e@Composable\u003cbr/\u003efun AccountItemHeader(accountModel: AccountModel, onAccountClick: (AccountModel) -\u0026gt; Unit) {\u003cbr/\u003e    Card(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .padding(MaterialTheme.dimens.regular)\u003cbr/\u003e            .fillMaxWidth(),\u003cbr/\u003e        shape = MaterialTheme.shapes.medium\u003cbr/\u003e    ) {\u003cbr/\u003e        Row(\u003cbr/\u003e            Modifier\u003cbr/\u003e                .padding(8.dp)\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .align(Alignment.CenterHorizontally)\u003cbr/\u003e                .clickable {\u003cbr/\u003e                    onAccountClick(accountModel)\u003cbr/\u003e                },\u003cbr/\u003e        ) {\u003cbr/\u003e            // this url will be replaced by accountModel.image - added for testing\u003cbr/\u003e            ProfileImageView(\u0026#34;https://fastly.picsum.photos/id/183/200/300.jpg?hmac=Z9yCtuuIPn5CuOhwIntNEQFIRotghuBn06nqOSL828c\u0026#34;)\u003cp\u003e            Column {\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = accountModel.name,\u003cbr/\u003e                    style = appTypography.bodyMedium,\u003cbr/\u003e                    maxLines = 1,\u003cbr/\u003e                    color = MaterialTheme.colorScheme.onTertiaryContainer,\u003cbr/\u003e                    modifier = Modifier\u003cbr/\u003e                        .padding(8.dp)\u003cbr/\u003e                )\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = accountModel.username,\u003cbr/\u003e                    style = appTypography.bodySmall,\u003cbr/\u003e                    maxLines = 1,\u003cbr/\u003e                    color = MaterialTheme.colorScheme.onTertiaryContainer,\u003cbr/\u003e                    modifier = Modifier\u003cbr/\u003e                        .padding(start = 8.dp, end = 8.dp, bottom = 8.dp)\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun AccountItemFooter(onFooterClicked: () -\u0026gt; Unit) {\u003cbr/\u003e    Card(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .padding(MaterialTheme.dimens.regular)\u003cbr/\u003e            .fillMaxWidth(),\u003cbr/\u003e        shape = MaterialTheme.shapes.medium\u003cbr/\u003e    ) {\u003cbr/\u003e        Row(\u003cbr/\u003e            Modifier\u003cbr/\u003e                .padding(10.dp)\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .align(Alignment.CenterHorizontally)\u003cbr/\u003e                .clickable {\u003cbr/\u003e                    onFooterClicked()\u003cbr/\u003e                },\u003cbr/\u003e        ) {\u003cbr/\u003e            Text(\u003cbr/\u003e                text = \u0026#34;Add New Account\u0026#34;,\u003cbr/\u003e                style = appTypography.bodyMedium,\u003cbr/\u003e                maxLines = 1,\u003cbr/\u003e                textAlign = TextAlign.Center,\u003cbr/\u003e                color = MaterialTheme.colorScheme.onTertiaryContainer,\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .padding(8.dp)\u003cbr/\u003e                    .fillMaxWidth()\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun ProfileImageView(imageUrl: String) {\u003cbr/\u003e    AsyncImage(\u003cbr/\u003e        model = imageUrl,\u003cbr/\u003e        contentScale = ContentScale.Crop,\u003cbr/\u003e        contentDescription = \u0026#34;Profile Image\u0026#34;,\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .size(50.dp)\u003cbr/\u003e            .clip(CircleShape)\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e81d\"\u003eNow, we can add these Header \u0026amp; Footer items in our lazy column.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"16c4\"\u003e@Composable\u003cbr/\u003efun AccountList(accounts: List\u0026lt;AccountModel\u0026gt;, onAccountClick: (AccountModel) -\u0026gt; Unit) {\u003cbr/\u003e    LazyColumn {\u003cbr/\u003e        items(accounts.size) { index -\u0026gt;\u003cbr/\u003e            AccountItemHeader(accounts[index], onAccountClick)\u003cbr/\u003e        }\u003cbr/\u003e        item {\u003cbr/\u003e            AccountItemFooter() {\u003cp\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"61c0\"\u003eAnd Finally, we can add the account list lazy column in ModalBottomSheet container like below:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"af12\"\u003e@OptIn(ExperimentalMaterial3Api::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun MyBottomSheetDialog(\u003cbr/\u003e    accountViewModel: AccountViewModel = hiltViewModel(),\u003cbr/\u003e    sheetState: SheetState,\u003cbr/\u003e    onDismissRequest: () -\u0026gt; Unit,\u003cbr/\u003e    onActionConfirmation: () -\u0026gt; Unit,\u003cbr/\u003e) {\u003cbr/\u003e    val accountState = accountViewModel.accountState.collectAsStateLifecycleAware()\u003cp\u003e    ModalBottomSheet(\u003cbr/\u003e        onDismissRequest = {\u003cbr/\u003e            onDismissRequest()\u003cbr/\u003e        },\u003cbr/\u003e        sheetState = sheetState\u003cbr/\u003e    ) {\u003cbr/\u003e        Column(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .windowInsetsPadding(WindowInsets.safeDrawing),\u003cbr/\u003e            verticalArrangement = Arrangement.Center,\u003cbr/\u003e            horizontalAlignment = Alignment.CenterHorizontally,\u003cbr/\u003e        ) {\u003cbr/\u003e            Card(\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .fillMaxWidth()\u003cbr/\u003e                    .padding(start = 16.dp, end = 16.dp, bottom = 16.dp)\u003cbr/\u003e            ) {\u003cbr/\u003e                AccountList(accounts = accountState.value.accounts) {\u003c/p\u003e\u003cp\u003e                }\u003cbr/\u003e            }\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"53c4\"\u003eSame as other dialogs we can toggle BottomSheet dialogs:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2034\"\u003e@OptIn(ExperimentalMaterial3Api::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun ProfileScreen() {\u003cbr/\u003e  var showBottomSheetDialog by remember { mutableStateOf(false) }\u003cp\u003e    val sheetState = rememberModalBottomSheetState(\u003cbr/\u003e          skipPartiallyExpanded = false,\u003cbr/\u003e  )\u003c/p\u003e\u003cp\u003e    Column() {\u003cbr/\u003e    when {\u003cbr/\u003e              showBottomSheetDialog -\u0026gt; {\u003cbr/\u003e                  MyBottomSheetDialog(\u003cbr/\u003e                      sheetState = sheetState,\u003cbr/\u003e                      onDismissRequest = {\u003cbr/\u003e                          showBottomSheetDialog = false\u003c/p\u003e\u003cp\u003e                        }) {\u003cbr/\u003e                      showBottomSheetDialog = false\u003cbr/\u003e                  }\u003cbr/\u003e              }\u003cbr/\u003e          }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"a8bd\"\u003eYou might run into an issue where the bottom sheet overlaps with the status bar and navigation bar.\u003c/p\u003e\u003cp id=\"b203\"\u003eThis was a known problem in \u003cstrong\u003eearlier\u003c/strong\u003e \u003cstrong\u003eversions\u003c/strong\u003e of Jetpack Compose. Fortunately, the latest alpha version of the bottom sheet has addressed and \u003cstrong\u003efixed this issue.\u003c/strong\u003e \u003ca href=\"https://issuetracker.google.com/issues/274872542\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIssue Discussion\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"dfa2\"\u003eThat’s all for this episode! I hope you found it helpful. For any queries and suggestion please do comments.\u003c/p\u003e\u003cp id=\"0c40\"\u003e\u003cstrong\u003eSee you in the next episode. Until then, keep composing! 😺\u003c/strong\u003e\u003c/p\u003e\u003cdiv role=\"button\" tabindex=\"0\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Narayan Panthi\" src=\"https://miro.medium.com/v2/resize:fill:40:40/1*J9VrjqTFhRFOtZ3r4ecdqg@2x.jpeg\" width=\"20\" height=\"20\" loading=\"lazy\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003ch2\u003eJetpack Compose Series\u003c/h2\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2024-08-26T06:54:57.707Z",
  "modifiedTime": null
}
