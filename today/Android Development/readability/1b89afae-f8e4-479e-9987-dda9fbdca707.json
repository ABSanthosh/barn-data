{
  "id": "1b89afae-f8e4-479e-9987-dda9fbdca707",
  "title": "A Bit of Gradle Housekeeping",
  "link": "https://zsmb.co/a-bit-of-gradle-housekeeping/",
  "description": "While cleaning is traditionally a spring activity, let me invite you to do it at the end of summer this time around. In this article, we'll take a look at some Gradle configuration that you can probably clean up in your Android project.",
  "author": "M√°rton Braun",
  "published": "Wed, 01 Sep 2021 20:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "M√°rton Braun",
  "length": 5339,
  "excerpt": "While cleaning is traditionally a spring activity, let me invite you to do it at the end of summer this time around. In this article, we'll take a look at some Gradle configuration that you can probably clean up in your Android project.",
  "siteName": "zsmb.co",
  "favicon": "",
  "text": "While cleaning is traditionally a spring activity, let me invite you to do it at the end of summer this time around. Note: Yes, I‚Äôm still using Groovy because I never found a compelling reason to upgrade to Kotlin DSL ü§∑‚Äç Something I‚Äôm quite enthusiastic about is having the simplest and most default Gradle configuration for an Android project that you can possibly have. Why? Because simple and boring configuration is great! The more configuration you have in these files, the more custom your setup, the harder it is to navigate. When something weird is happening in your project, having simpler project setup avoids a lot of potential headache when you need to figure out what‚Äôs going on. When someone new joins the project or starts working with the project configuration files, a simpler setup will make their lives easier too. In this article, we‚Äôll look at various bits of configuration that you might have in your build files that you don‚Äôt actually need anymore, or can replace with something simpler. Build tools version I‚Äôll start with a classic that you should have removed four years ago when version 3.0.0 of the Android Gradle Plugin was released. Despite that, it still lingers around in many projects. android { buildToolsVersion \"30.0.3\" } This version number is set by default - feel free to simply remove it from your build config! Java version settings Continuing with a more recent change, if you‚Äôre on AGP 4.2 or later, you no longer have to specify that you want to target version 8 of the Java language (which gives you desugaring for various features like lambdas and method references). This means you can remove this config, if you have it in your build files: android { compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } Kotlin JVM target settings On a very similar note, we used to have to specify the JVM version that the Kotlin compiler should target explicitly (as the default was 1.6). Since Kotlin 1.5 however, the default value for this is 1.8, which means you can remove this config as well: android { kotlinOptions { jvmTarget = '1.8' } } *SdkVersion Something not to completely remove but to slightly simplify is the various SDK versions you specify in a project. Traditionally, you have probably used the following properties to set these values: android { compileSdkVersion 31 defaultConfig { minSdkVersion 21 targetSdkVersion 31 } } However, since AGP 4.1.0, these are deprecated and should be replaced with variants that no longer have the Version postfix. So, for example, minSdkVersion is now just minSdk: android { compileSdk 31 defaultConfig { minSdk 21 targetSdk 31 } } The src/main/kotlin source set Back to things you can remove, let‚Äôs talk a bit of Kotlin. If you prefer using the src/main/kotlin folder instead of the src/main/java folder to store your source files (because you‚Äôre just that enthusiastic about using the language), you probably have configuration in your build files that resembles something like this: sourceSets.all { it.java.srcDir \"src/$it.name/kotlin\" } This simply adds the folder in question as a source set where files will be used as compilation sources. The good news is that since version 7.0.0 of the Android Gradle Plugin, you no longer need this. kotlin source folders are just supported by default! Kotlin standard library dependency Let‚Äôs wrap it up with a final Kotlin tip. The classic Kotlin Android project setup includes this variable set in the top level build.gradle file: buildscript { ext.kotlin_version = \"1.5.30\" } And then a reference to it in the module level build.gradle file, where the Standard Library is included: dependencies { implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\" } However, since Kotlin 1.4.0, including the Kotlin Gradle plugin automatically adds the Kotlin Standard Library as a runtime dependency to your modules (since you wouldn‚Äôt want to use the language without its Standard Library anyway). It will include the correct version based on the module‚Äôs properties, matching the version of the plugin, the platform you‚Äôre running on, and the JVM target you have configured. This means that you can remove the explicit dependency on the stdlib from your build files, and as a consequence, you can likely remove the kotlin_version variable as well. Conclusion Thanks for participating in this quick late summer project cleaning initiative. I hope you got to create a quick and simple PR to make your project config a bit leaner. See you next time! Have you ever encountered APIs that show warnings or errors when you use them, saying that they're internal or experimental? In this guide, you'll learn everything you need to know about opt-in APIs in Kotlin: how to create and use them, and all their nuances.StateFlow behaves as a state holder and a Flow of values at the same time. Due to conflation, a collector of a StateFlow might not receive all values that it holds over time. This article covers what that means for your tests.Introducing a new library to conveniently require values from common Android types.Another year over, a new one's almost begun. Here's a brief summary of what I've done in this one.",
  "image": "https://zsmb.co/images/a-bit-of-gradle-housekeeping/gradle-housekeeping-meta.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n  \u003cp\u003eWhile cleaning is traditionally a spring activity, let me invite you to do it at the end of summer this time around.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: Yes, I‚Äôm still using Groovy because I never found a compelling reason to upgrade to Kotlin DSL ü§∑‚Äç\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSomething I‚Äôm quite enthusiastic about is having the simplest and most default Gradle configuration for an Android project that you can possibly have.\u003c/p\u003e\n\u003cp\u003eWhy? Because simple and boring configuration is great! The more configuration you have in these files, the more custom your setup, the harder it is to navigate.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen something weird is happening in your project, having simpler project setup avoids a lot of potential headache when you need to figure out what‚Äôs going on.\u003c/li\u003e\n\u003cli\u003eWhen someone new joins the project or starts working with the project configuration files, a simpler setup will make their lives easier too.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this article, we‚Äôll look at various bits of configuration that you might have in your build files that you don‚Äôt actually need anymore, or can replace with something simpler.\u003c/p\u003e\n\u003ch3 id=\"build-tools-version\"\u003eBuild tools version\u003c/h3\u003e\n\u003cp\u003eI‚Äôll start with a classic that you should have removed four years ago when \u003ca href=\"https://developer.android.com/studio/releases/gradle-plugin#3-0-0\"\u003eversion 3.0.0\u003c/a\u003e of the Android Gradle Plugin was released. Despite that, it still lingers around in many projects.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eandroid {\n    buildToolsVersion \u0026#34;30.0.3\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis version number is set by default - feel free to simply remove it from your build config!\u003c/p\u003e\n\u003ch3 id=\"java-version-settings\"\u003eJava version settings\u003c/h3\u003e\n\u003cp\u003eContinuing with a more recent change, if you‚Äôre on \u003ca href=\"https://developer.android.com/studio/releases/gradle-plugin#java-8-default\"\u003eAGP 4.2\u003c/a\u003e or later, you no longer have to specify that you want to target version 8 of the Java language (which gives you desugaring for \u003ca href=\"https://developer.android.com/studio/write/java8-support#supported_features\"\u003evarious features\u003c/a\u003e like lambdas and method references).\u003c/p\u003e\n\u003cp\u003eThis means you can remove this config, if you have it in your build files:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eandroid {\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"kotlin-jvm-target-settings\"\u003eKotlin JVM target settings\u003c/h3\u003e\n\u003cp\u003eOn a very similar note, we used to have to specify the JVM version that the Kotlin compiler should target explicitly (as the default was 1.6). Since \u003ca href=\"https://kotlinlang.org/docs/whatsnew15.html#new-default-jvm-target-1-8\"\u003eKotlin 1.5\u003c/a\u003e however, the default value for this is \u003ccode\u003e1.8\u003c/code\u003e, which means you can remove this config as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eandroid {\n    kotlinOptions {\n        jvmTarget = \u0026#39;1.8\u0026#39;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"sdkversion\"\u003e*SdkVersion\u003c/h3\u003e\n\u003cp\u003eSomething not to completely remove but to slightly simplify is the various SDK versions you specify in a project. Traditionally, you have probably used the following properties to set these values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eandroid {\n    compileSdkVersion 31\n\n    defaultConfig {\n        minSdkVersion 21\n        targetSdkVersion 31\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, since AGP 4.1.0, these are deprecated and should be replaced with variants that no longer have the \u003ccode\u003eVersion\u003c/code\u003e postfix. So, for example, \u003ccode\u003eminSdkVersion\u003c/code\u003e is now just \u003ccode\u003eminSdk\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eandroid {\n    compileSdk 31\n\n    defaultConfig {\n        minSdk 21\n        targetSdk 31\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"the-srcmainkotlin-source-set\"\u003eThe \u003ccode\u003esrc/main/kotlin\u003c/code\u003e source set\u003c/h3\u003e\n\u003cp\u003eBack to things you can remove, let‚Äôs talk a bit of Kotlin. If you prefer using the \u003ccode\u003esrc/main/kotlin\u003c/code\u003e folder instead of the \u003ccode\u003esrc/main/java\u003c/code\u003e folder to store your source files (because you‚Äôre just \u003cem\u003ethat\u003c/em\u003e  enthusiastic about using the language), you probably have configuration in your build files that resembles something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esourceSets.all {\n    it.java.srcDir \u0026#34;src/$it.name/kotlin\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis simply adds the folder in question as a source set where files will be used as compilation sources.\u003c/p\u003e\n\u003cp\u003eThe good news is that \u003ca href=\"https://stackoverflow.com/questions/41467453/renaming-java-directory-to-kotlin-in-android-studio\"\u003esince version 7.0.0\u003c/a\u003e of the Android Gradle Plugin, you no longer need this. \u003ccode\u003ekotlin\u003c/code\u003e source folders are just supported by default!\u003c/p\u003e\n\u003ch3 id=\"kotlin-standard-library-dependency\"\u003eKotlin standard library dependency\u003c/h3\u003e\n\u003cp\u003eLet‚Äôs wrap it up with a final Kotlin tip. The classic Kotlin Android project setup includes this variable set in the top level \u003ccode\u003ebuild.gradle\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebuildscript {\n    ext.kotlin_version = \u0026#34;1.5.30\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd then a reference to it in the module level \u003ccode\u003ebuild.gradle\u003c/code\u003e file, where the Standard Library is included:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edependencies {\n    implementation \u0026#34;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, \u003ca href=\"https://kotlinlang.org/docs/whatsnew14.html#dependency-on-the-standard-library-added-by-default\"\u003esince Kotlin 1.4.0\u003c/a\u003e, including the Kotlin Gradle plugin automatically adds the Kotlin Standard Library as a runtime dependency to your modules (since you wouldn‚Äôt want to use the language without its Standard Library anyway).\u003c/p\u003e\n\u003cp\u003eIt will include the \u003cem\u003ecorrect\u003c/em\u003e version based on the module‚Äôs properties, matching the version of the plugin, the platform you‚Äôre running on, and the JVM target you have configured.\u003c/p\u003e\n\u003cp\u003eThis means that you can remove the explicit dependency on the stdlib from your build files, and as a consequence, you can likely remove the \u003ccode\u003ekotlin_version\u003c/code\u003e variable as well.\u003c/p\u003e\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\u003cp\u003eThanks for participating in this quick late summer project cleaning initiative. I hope you got to create a quick and simple PR to make your project config a bit leaner. See you next time!\u003c/p\u003e\n\n\u003c/div\u003e\u003cp\u003eHave you ever encountered APIs that show warnings or errors when you use them, saying that they\u0026#39;re internal or experimental? In this guide, you\u0026#39;ll learn everything you need to know about opt-in APIs in Kotlin: how to create and use them, and all their nuances.\u003c/p\u003e\u003cp\u003eStateFlow behaves as a state holder and a Flow of values at the same time. Due to conflation, a collector of a StateFlow might not receive all values that it holds over time. This article covers what that means for your tests.\u003c/p\u003e\u003cp\u003eIntroducing a new library to conveniently require values from common Android types.\u003c/p\u003e\u003cp\u003eAnother year over, a new one\u0026#39;s almost begun. Here\u0026#39;s a brief summary of what I\u0026#39;ve done in this one.\u003c/p\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
