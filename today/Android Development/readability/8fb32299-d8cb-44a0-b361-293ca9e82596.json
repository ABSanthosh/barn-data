{
  "id": "8fb32299-d8cb-44a0-b361-293ca9e82596",
  "title": "Wrap-up 2021",
  "link": "https://zsmb.co/wrap-up-2021/",
  "description": "Another year over, a new one's almost begun. Here's a brief summary of what I've done in this one.",
  "author": "Márton Braun",
  "published": "Fri, 31 Dec 2021 09:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "Márton Braun",
  "length": 9506,
  "excerpt": "Another year over, a new one's almost begun. Here's a brief summary of what I've done in this one.",
  "siteName": "zsmb.co",
  "favicon": "",
  "text": "Another year over, a new one’s almost begun. Here’s a brief summary of what I’ve done in this one. Just like in previous years, this will be a personal ramble. You’ve been warned. For the usual technical content, please tune in next year. Jobby job I spent this calendar year working for Stream full-time. I did this in a (somewhat) new capacity though, as in February, I shifted from a pure Android Engineer role into being an Android Developer Advocate instead. What this meant in practice was that I started sharing my focus between building and contributing to the Android team (as I’ve been doing before) and creating public-facing content and interacting with external developers. This new dimension of my job was quite natural, given that I’ve already been contributing to the community in various ways as a GDE. I’m really thankful to Nick and Nash who were my managers in this role, as they gave me tons of freedom to pick what I wanted to work on, and were all-around very supportive. The devrel team being built out at Stream is also awesome to work with, having experts for various areas. While all of this was terrific, I ended up leaving Stream mid-December. I had a great time working there, and we parted on very good terms. I’d definitely recommend them if you’re looking for a new job - check out their open positions, and feel free to reach out to me if you want to learn more about the company (especially devrel or Android there). For a quick recap of awesome things we achieved at Stream during my time there: We expanded the Android team from a couple people to ~10, building processes, guidelines, and infrastructure along the way to support that. We built and released the new XML-based UI Components at the start of the year. We created a new Jetpack Compose SDK team with Filip Babić as its lead, who I got to work with to build the initial version of the Compose Chat SDK. We then expanded this team to three engineers working (very happily!) on Compose full-time. We cleaned up tons of public API, and shipped brand new, high-quality documentation for the Android SDK. We created content (written and video), sponsored external creators, conferences (such as Droidcon and Android Worldwide) and other open-source libraries that we love, and gave various talks about our engineering work. As a bonus, as I already mentioned last year, I got to work on an open source library full-time, making essentially all of my work for the past year available on my GitHub profile. At the moment, I’m enjoying a month-long funemployment break (about half of which remains) before I get started with my next day job next year. Blogging As far as writing goes, I’ve apparently settled into a steady pace of about one article per month, going for a couple consecutive years now, which I’m quite happy with. Early in the year, I re-released my guide for publishing Android libraries to MavenCentral, updated for 2021. I also wrote a handful of articles on my journey of learning Jetpack Compose. My favourite articles to write are probably the ones that explain technical topics in detail, especially if it’s about something Kotlin. The topics I covered this time around included new sealed features in Kotlin, a detailed guide to Opt-In annotations, validating Kotlin public API, and progress tracking on Android. I’ve split the traffic on my articles between a few different sites this time around. Other than my own blog, I’ve also published on Stream’s blog and have cross-posted several articles to dev.to (which has been a pleasure to work with) and even Medium (which continues to be absolutely woeful all-around). Public speaking Virtual events brought along lots and lots of speaking opportunities, and I said yes to most that came my way. Thanks to these, I ended up more than doubling my yearly appearances, giving 21(!) talks, which included six brand-new ones, and a healthy amount of repeats (of both existing and new talks). I even went on a podcast for the first time (thanks again Holger!). I also gotta give another shout-out here to Filip Babić: four of my appearances were joint talks with him, discussing Compose and the Chat SDK we designed and built with it. Having to do just half a talk these times made it a lot easier to fit in all these events. In the fall, in-person events slowly restarted. I was thrilled to attend both Droidcon Berlin and London, giving a few talks to live audiences and hanging out with tons of people both at and after the conferences. Thankfully, all of this went safely without any problems. I really appreciate all the work that the organizers put in to make them happen. To offset some of the environmental impact of travelling, I’ve again purchased ~4x of their approximated footprint in carbon offsets via The Gold Standard, and I’ve also joined the #TeamSeas party for the same amount. Teaching University work continued as usual this year, and this year’s two semesters were the fourth and fifth runs of my own Kotlin language course. The course continues to run at full capacity – 120 students per semester – and student feedback is still super positive. Naturally, they really enjoy coding in Kotlin, plus they appreciate the quality of the materials (especially compared to other university courses, which unfortunately don’t tend to set a high bar), and they also respond really well to the live-coded lectures that take place entirely in the IDE. As a nice show of appreciation, the lovely people doing education outreach for JetBrains let me speak about my course and its story on a webinar hosted by them, and they were even nice enough to restock me with stickers for next year. In the fall semester, the university went back to in-person classes, after multiple remote teaching semesters. Even with the travel time and extra logistics that this added to my weeks, it’s been really nice to be in the room with students again. It’s still hard to get students to regularly prompt me with questions, but it’s definitely easier this way than over a Zoom call. Organizing Being a meetup organizer this year has still not been easy. With Android Budapest, we managed to host two events, a regular two-talk event online, and an in-person roundtable discussion in the summer. The latter unfortunately had low attendance, but an excellent live stream – catch the recording here! Other than these, we continued participating in Android Worldwide, an awesome collective of Android communities running quarterly events (basically mini-conferences). I’ve also done a bunch of editing and publsihing work for the recordings, available on their YouTube channel. You can follow them on Twitter to make sure you don’t miss future events. Open source This year, most of my open source contributions have been through my day job at Stream, as already noted above. Other than this, back in May I wrote a simple utility library, requireKTX, which makes it easier to deal with some otherwise nullable APIs on Android, by providing non-nullable require... style extensions for various Android types. Thanks largely to community contributions, I’ve also released version 2.0 of the Krate, my SharedPref wrapper library with new \u0026 improved APIs, and performed some maintenance updates on RainbowCake. As a small bonus, I completed this year’s Advent of Code challenge (all in Kotlin, naturally), and you can find my solutions on GitHub. This has been super rewarding for me (except for a couple frustrating days), and I’d highly recommend it for anyone looking to practice a language or their DSA knowledge a bit. Retrospective A year ago, I listed a few things that I planned to continue: teaching, open source, talks, blogging. I’m content with how these all went, though giving talks got a bit out of hand. The other point I’ve had on my list was learning Jetpack Compose. I believe this has been a great success, I have a pretty good understanding of the framework, and thoroughly enjoy working with it. The View system to Compose migration feels just like the Java to Kotlin migration felt. Can’t wait to see it keep progressing in the community. Finally, something else I dipped into briefly at the end of the year was Kotlin Multiplatform, inspired by Marc Reichelt who I had the pleasure of meeting at Droidcon Berlin. While I haven’t used it for anything serious yet, I had a good look at what it currently looks like to set up and run a multiplatform project, and I’m fairly sold on the idea. Wrapped With that, it’s time for me to sign off for this year. I’ll enjoy a few more days of serene time off, and then I’ll be back to do some even more exciting things! See you next year – let’s hope it’s a good one. Have you ever encountered APIs that show warnings or errors when you use them, saying that they're internal or experimental? In this guide, you'll learn everything you need to know about opt-in APIs in Kotlin: how to create and use them, and all their nuances.Another year has come to an end, so it's time to reflect again. I'll attempt to sum up what I've done this year, how that compares to what I was planning to do at this same time last year, and what I expect to be next.Let's send this one off so that we can get started on a better one. The \"usual\" recap of what I've done this year.StateFlow behaves as a state holder and a Flow of values at the same time. Due to conflation, a collector of a StateFlow might not receive all values that it holds over time. This article covers what that means for your tests.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n  \u003cp\u003eAnother year over, a new one’s almost begun. Here’s a brief summary of what I’ve done in this one.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJust like \u003ca href=\"https://zsmb.co/wrap-up-2018/\"\u003ein\u003c/a\u003e \u003ca href=\"https://zsmb.co/wrap-up-2019/\"\u003eprevious\u003c/a\u003e \u003ca href=\"https://zsmb.co/wrap-up-2020/\"\u003eyears\u003c/a\u003e, this will be a personal ramble. You’ve been warned. For the usual technical content, please tune in next year.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"jobby-job\"\u003eJobby job\u003c/h2\u003e\n\u003cp\u003eI spent this calendar year working for Stream full-time. I did this in a (somewhat) new capacity though, as in February, I shifted from a pure Android Engineer role into being an Android Developer Advocate instead.\u003c/p\u003e\n\u003cp\u003eWhat this meant in practice was that I started sharing my focus between building and contributing to the Android team (as I’ve been doing before) and creating public-facing content and interacting with external developers. This new dimension of my job was quite natural, given that I’ve already been contributing to the community in various ways as a GDE.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/stream_avocado.png\" alt=\"The Stream logo with avocados on it\"/\u003e\u003c/p\u003e\n\u003cp\u003eI’m really thankful to \u003ca href=\"https://twitter.com/nickparsons\"\u003eNick\u003c/a\u003e and \u003ca href=\"https://twitter.com/Nash0x7E2\"\u003eNash\u003c/a\u003e who were my managers in this role, as they gave me tons of freedom to pick what I wanted to work on, and were all-around very supportive. The devrel team being built out at Stream is also awesome to work with, having experts for various areas.\u003c/p\u003e\n\u003cp\u003eWhile all of this was terrific, I ended up leaving Stream mid-December. I had a great time working there, and we parted on very good terms. I’d definitely recommend them if you’re looking for a new job - check out their \u003ca href=\"https://getstream.io/team/#jobs\"\u003eopen positions\u003c/a\u003e, and feel free to reach out to me if you want to learn more about the company (especially devrel or Android there).\u003c/p\u003e\n\u003cp\u003eFor a quick recap of awesome things we achieved at Stream during my time there:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe expanded the Android team from a couple people to ~10, building processes, guidelines, and infrastructure along the way to support that.\u003c/li\u003e\n\u003cli\u003eWe built and released the new \u003ca href=\"https://getstream.io/chat/docs/sdk/android/ui/overview/\"\u003eXML-based UI Components\u003c/a\u003e at the start of the year.\u003c/li\u003e\n\u003cli\u003eWe created a new Jetpack Compose SDK team with \u003ca href=\"https://github.com/filbabic\"\u003eFilip Babić\u003c/a\u003e as its lead, who I got to work with to build the initial version of the \u003ca href=\"https://getstream.io/chat/sdk/compose/\"\u003eCompose Chat SDK\u003c/a\u003e. We then expanded this team to three engineers working (very happily!) on Compose full-time.\u003c/li\u003e\n\u003cli\u003eWe cleaned up tons of public API, and shipped brand new, high-quality \u003ca href=\"https://getstream.io/chat/docs/sdk/android/\"\u003edocumentation for the Android SDK\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eWe created content (\u003ca href=\"https://getstream.io/blog/\"\u003ewritten\u003c/a\u003e and \u003ca href=\"https://www.youtube.com/channel/UC2xOn0xQj1HIpHJpOy5tvpA\"\u003evideo\u003c/a\u003e), sponsored external creators, conferences (such as Droidcon and Android Worldwide) and other open-source libraries that we love, and gave \u003ca href=\"https://zsmb.co/talks/compose-chat-sdk/\"\u003evarious\u003c/a\u003e \u003ca href=\"https://zsmb.co/talks/build-effortless-chat-stream-compose/\"\u003etalks\u003c/a\u003e about our engineering work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a bonus, as I already mentioned last year, I got to work on \u003ca href=\"https://github.com/GetStream/stream-chat-android\"\u003ean open source library\u003c/a\u003e full-time, making essentially all of my work for the past year available on \u003ca href=\"https://github.com/zsmb13\"\u003emy GitHub profile\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAt the moment, I’m enjoying a month-long funemployment break (about half of which remains) before I get started with my next day job next year.\u003c/p\u003e\n\u003ch2 id=\"blogging\"\u003eBlogging\u003c/h2\u003e\n\u003cp\u003eAs far as writing goes, I’ve apparently settled into a steady pace of about one article per month, going for a couple consecutive years now, which I’m quite happy with.\u003c/p\u003e\n\u003cp\u003eEarly in the year, I re-released \u003ca href=\"https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/\"\u003emy guide for publishing Android libraries to MavenCentral\u003c/a\u003e, updated for 2021. I also wrote a handful of articles on my \u003ca href=\"https://zsmb.co/compose-o-clock/\"\u003ejourney\u003c/a\u003e \u003ca href=\"https://zsmb.co/prime-table-generator-jetpack-compose/\"\u003eof\u003c/a\u003e \u003ca href=\"https://zsmb.co/pi-practice-app-in-compose/\"\u003elearning\u003c/a\u003e Jetpack Compose.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/articles.png\" alt=\"Pieces of paper on a desk\"/\u003e\u003c/p\u003e\n\u003cp\u003eMy favourite articles to write are probably the ones that explain technical topics in detail, especially if it’s about something Kotlin. The topics I covered this time around included \u003ca href=\"https://zsmb.co/sealed-goodies-coming-in-kotlin-1-5/\"\u003enew sealed features in Kotlin\u003c/a\u003e, \u003ca href=\"https://zsmb.co/opt-in-annotations/\"\u003ea detailed guide to Opt-In annotations\u003c/a\u003e, \u003ca href=\"https://dev.to/zsmb13/keeping-public-api-in-check-with-the-kotlin-binary-validator-plugin-2b6m\"\u003evalidating Kotlin public API\u003c/a\u003e, and \u003ca href=\"https://dev.to/zsmb13/adventures-in-tracking-upload-progress-with-okhttp-and-retrofit-1gff\"\u003eprogress tracking on Android\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI’ve split the traffic on my articles between a few different sites this time around. Other than \u003ca href=\"https://zsmb.co/\"\u003emy own blog\u003c/a\u003e, I’ve also published on \u003ca href=\"https://getstream.io/blog/\"\u003eStream’s blog\u003c/a\u003e and have cross-posted several articles to \u003ca href=\"https://dev.to/zsmb13\"\u003edev.to\u003c/a\u003e (which has been a pleasure to work with) and even \u003ca href=\"https://medium.com/@zsmb13\"\u003eMedium\u003c/a\u003e (which continues to be absolutely woeful all-around).\u003c/p\u003e\n\u003ch2 id=\"public-speaking\"\u003ePublic speaking\u003c/h2\u003e\n\u003cp\u003eVirtual events brought along lots and lots of speaking opportunities, and I said yes to most that came my way. Thanks to these, I ended up more than doubling my yearly appearances, giving 21(!) \u003ca href=\"https://zsmb.co/talks/\"\u003etalks\u003c/a\u003e, which included six brand-new ones, and a healthy amount of repeats (of both existing and new talks). I even went on \u003ca href=\"https://anchor.fm/coding-with-holger/episodes/Android-Development-with-Mrton-Braun-e19hcts\"\u003ea podcast\u003c/a\u003e for the first time (thanks again \u003ca href=\"https://twitter.com/hfsteinhauer\"\u003eHolger\u003c/a\u003e!).\u003c/p\u003e\n\u003cp\u003eI also gotta give another shout-out here to \u003ca href=\"https://github.com/filbabic\"\u003eFilip Babić\u003c/a\u003e: four of my appearances were joint talks with him, discussing Compose and the Chat SDK we designed and built with it. Having to do just half a talk these times made it a lot easier to fit in all these events.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/stage.png\" alt=\"A stage with speakers giving a tech talk\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn the fall, in-person events slowly restarted. I was thrilled to attend both \u003ca href=\"https://zsmb.co/appearances/droidcon-berlin-2021/\"\u003eDroidcon\u003c/a\u003e \u003ca href=\"https://zsmb.co/appearances/droidcon-berlin-2021-compose/\"\u003eBerlin\u003c/a\u003e and \u003ca href=\"https://zsmb.co/appearances/droidcon-london-2021/\"\u003eLondon\u003c/a\u003e, giving a few talks to live audiences and hanging out with tons of people both at and after the conferences. Thankfully, all of this went safely without any problems. I really appreciate all the work that the organizers put in to make them happen.\u003c/p\u003e\n\u003cp\u003eTo offset some of the environmental impact of travelling, I’ve again purchased ~4x of their \u003ca href=\"https://www.icao.int/environmental-protection/CarbonOffset/Pages/default.aspx\"\u003eapproximated\u003c/a\u003e footprint in carbon offsets via \u003ca href=\"https://marketplace.goldstandard.org/collections/projects\"\u003eThe Gold Standard\u003c/a\u003e, and I’ve also joined the \u003ca href=\"https://teamseas.org/\"\u003e#TeamSeas\u003c/a\u003e party for the same amount.\u003c/p\u003e\n\u003ch2 id=\"teaching\"\u003eTeaching\u003c/h2\u003e\n\u003cp\u003eUniversity work continued as usual this year, and this year’s two semesters were the fourth and fifth runs of my own \u003ca href=\"https://portal.vik.bme.hu/kepzes/targyak/VIAUAV41/\"\u003eKotlin language course\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe course continues to run at full capacity – 120 students per semester – and student feedback is still super positive. Naturally, they really enjoy coding in Kotlin, plus they appreciate the quality of the materials (especially compared to other university courses, which unfortunately don’t tend to set a high bar), and they also respond really well to the live-coded lectures that take place entirely in the IDE.\u003c/p\u003e\n\u003cp\u003eAs a nice show of appreciation, the lovely people doing education outreach for JetBrains let me speak about my course and its story on \u003ca href=\"https://www.youtube.com/watch?v=aM-L5_tiVAI\"\u003ea webinar hosted by them\u003c/a\u003e, and they were even nice enough to \u003ca href=\"https://twitter.com/zsmb13/status/1471845006155685890\"\u003erestock me with stickers for next year\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/classroom.png\" alt=\"A classroom of students and me throwing out Kotlin stickers\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn the fall semester, the university went back to in-person classes, after multiple remote teaching semesters. Even with the travel time and extra logistics that this added to my weeks, it’s been really nice to be in the room with students again. It’s still hard to get students to regularly prompt me with questions, but it’s definitely easier this way than over a Zoom call.\u003c/p\u003e\n\u003ch2 id=\"organizing\"\u003eOrganizing\u003c/h2\u003e\n\u003cp\u003eBeing a meetup organizer this year has still not been easy. With \u003ca href=\"https://www.meetup.com/Android-Budapest/\"\u003eAndroid Budapest\u003c/a\u003e, we managed to host two events, a regular two-talk event online, and an in-person roundtable discussion in the summer. The latter unfortunately had low attendance, but an excellent live stream – \u003ca href=\"https://www.youtube.com/watch?v=lDiOaRkynek\"\u003ecatch the recording here!\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/androidww_youtube.png\" alt=\"The Android Worldwide videos\"/\u003e\u003c/p\u003e\n\u003cp\u003eOther than these, we continued participating in \u003ca href=\"https://android-worldwide.com/\"\u003eAndroid Worldwide\u003c/a\u003e, an awesome collective of Android communities running quarterly events (basically mini-conferences). I’ve also done a bunch of editing and publsihing work for the recordings, available \u003ca href=\"https://www.youtube.com/c/AndroidWorldwide\"\u003eon their YouTube channel\u003c/a\u003e. You can follow them \u003ca href=\"https://twitter.com/androidww_\"\u003eon Twitter\u003c/a\u003e to make sure you don’t miss future events.\u003c/p\u003e\n\u003ch2 id=\"open-source\"\u003eOpen source\u003c/h2\u003e\n\u003cp\u003eThis year, most of my open source contributions have been through my day job at Stream, as already noted above.\u003c/p\u003e\n\u003cp\u003eOther than this, back in May I wrote a simple utility library, \u003ca href=\"https://github.com/zsmb13/requireKTX\"\u003erequireKTX\u003c/a\u003e, which makes it easier to deal with some otherwise nullable APIs on Android, by providing non-nullable \u003ccode\u003erequire...\u003c/code\u003e style extensions for various Android types.\u003c/p\u003e\n\u003cp\u003eThanks largely to community contributions, I’ve also released version 2.0 of the \u003ca href=\"https://github.com/AutSoft/Krate\"\u003eKrate\u003c/a\u003e, my SharedPref wrapper library with new \u0026amp; improved APIs, and performed some maintenance updates on \u003ca href=\"https://github.com/rainbowcake/rainbowcake\"\u003eRainbowCake\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/calendar.png\" alt=\"An advent calendar with all days checked, surrounded by stars\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs a small bonus, I completed this year’s \u003ca href=\"https://adventofcode.com/\"\u003eAdvent of Code\u003c/a\u003e challenge (all \u003ca href=\"https://blog.jetbrains.com/kotlin/2021/11/advent-of-code-2021-in-kotlin/\"\u003ein Kotlin\u003c/a\u003e, naturally), and you can find my solutions \u003ca href=\"https://github.com/zsmb13/advent-of-code-2021\"\u003eon GitHub\u003c/a\u003e. This has been super rewarding for me (except for a couple frustrating days), and I’d highly recommend it for anyone looking to practice a language or their \u003ca href=\"https://www.raywenderlich.com/books/data-structures-algorithms-in-kotlin/v2.0\"\u003eDSA\u003c/a\u003e knowledge a bit.\u003c/p\u003e\n\u003ch2 id=\"retrospective\"\u003eRetrospective\u003c/h2\u003e\n\u003cp\u003eA year ago, I listed a few things that I planned to continue: teaching, open source, talks, blogging. I’m content with how these all went, though giving talks got a bit out of hand.\u003c/p\u003e\n\u003cp\u003eThe other point I’ve had on my list was learning Jetpack Compose. I believe this has been a great success, I have a pretty good understanding of the framework, and thoroughly enjoy working with it. The View system to Compose migration feels just like the Java to Kotlin migration felt. Can’t wait to see it keep progressing in the community.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/checklist.png\" alt=\"An all-complete checklist\"/\u003e\u003c/p\u003e\n\u003cp\u003eFinally, something else I dipped into briefly at the end of the year was Kotlin Multiplatform, inspired by \u003ca href=\"https://twitter.com/mreichelt\"\u003eMarc Reichelt\u003c/a\u003e who I had the pleasure of meeting at Droidcon Berlin. While I haven’t used it for anything serious yet, I had a good look at what it currently looks like to set up and run a multiplatform project, and I’m fairly sold on the idea.\u003c/p\u003e\n\u003ch2 id=\"wrapped\"\u003eWrapped\u003c/h2\u003e\n\u003cp\u003eWith that, it’s time for me to sign off for this year. I’ll enjoy a few more days of serene time off, and then I’ll be back to do some even more exciting things!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://zsmb.co/images/wrap-up-2021/crystal_ball.png\" alt=\"A crystal ball with various colours\"/\u003e\u003c/p\u003e\n\u003cp\u003eSee you next year – \u003cem\u003elet’s hope it’s a good one\u003c/em\u003e.\u003c/p\u003e\n\n\u003c/div\u003e\u003cp\u003eHave you ever encountered APIs that show warnings or errors when you use them, saying that they\u0026#39;re internal or experimental? In this guide, you\u0026#39;ll learn everything you need to know about opt-in APIs in Kotlin: how to create and use them, and all their nuances.\u003c/p\u003e\u003cp\u003eAnother year has come to an end, so it\u0026#39;s time to reflect again. I\u0026#39;ll attempt to sum up what I\u0026#39;ve done this year, how that compares to what I was planning to do at this same time last year, and what I expect to be next.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s send this one off so that we can get started on a better one. The \u0026#34;usual\u0026#34; recap of what I\u0026#39;ve done this year.\u003c/p\u003e\u003cp\u003eStateFlow behaves as a state holder and a Flow of values at the same time. Due to conflation, a collector of a StateFlow might not receive all values that it holds over time. This article covers what that means for your tests.\u003c/p\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
