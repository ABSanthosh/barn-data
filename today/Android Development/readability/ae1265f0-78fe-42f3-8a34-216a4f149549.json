{
  "id": "ae1265f0-78fe-42f3-8a34-216a4f149549",
  "title": "YouTubePlayer",
  "link": "https://android-arsenal.com/details/1/8474",
  "description": "YouTube kotlin multiplatform player. The YouTubePlayer composable allows you to embed a YouTube video player in your Jetpack Compose app.",
  "author": "",
  "published": "Tue, 27 Feb 2024 04:48:37 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 5505,
  "excerpt": "Views | YouTubePlayer by Ilia Pavlovskii (IlyaPavlovskii)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "YouTubePlayer YouTube kotlin multiplatform player. The YouTubePlayer composable allows you to embed a YouTube video player in your Jetpack Compose app. Donate If you want to thank me or contribute to the development of the backlog, you may donate me. That helps me to concentrate more on the project. You also might subscribe me on the next platforms to see any updates of my topics Install You can add this library to your project using Gradle. Multiplatform To add to a multiplatform project, add the dependency to the common source-set: repositories { mavenCentral() } kotlin { sourceSets { commonMain { dependencies { implementation(\"io.github.ilyapavlovskii:youtubeplayer-compose:${latest_version}\") } } } } Usage val coroutineScope = rememberCoroutineScope() val hostState = remember { YouTubePlayerHostState() } when(val state = hostState.currentState) { is YouTubePlayerState.Error -\u003e { Text(text = \"Error: ${state.message}\") } YouTubePlayerState.Idle -\u003e { // Do nothing, waiting for initialization } is YouTubePlayerState.Playing -\u003e { // Update UI button states } YouTubePlayerState.Ready -\u003e coroutineScope.launch { hostState.loadVideo(YouTubeVideoId(\"ufKj1sBrC4Q\")) } } YouTubePlayer( modifier = Modifier .fillMaxWidth() .height(300.dp) .gesturesDisabled(), hostState = hostState, options = SimpleYouTubePlayerOptionsBuilder.builder { autoplay(true) controls(false) rel(false) ivLoadPolicy(false) ccLoadPolicy(false) fullscreen = true }, ) Composable function has the next major params: options - to player options builder. All parameters wrapped from official youtube iframe documentation. hostState - controller for track youtube player state and execute one time commands YouTubePlayerHostState The main controller. Contains 2 major public components: currentState - defines actual youtube player state on the screen. Might be: Idle, Ready, Playing, Error executeCommand - suspend function to execution player commands. Receives only one argument - YouTubeExecCommand. Also have an additional sugar functions like: suspend fun loadVideo(videoId: YouTubeVideoId) = executeCommand(YouTubeExecCommand.LoadVideo(videoId)) suspend fun play() = executeCommand(YouTubeExecCommand.Play) suspend fun pause() = executeCommand(YouTubeExecCommand.Pause) suspend fun seekTo(duration: Duration) = executeCommand(YouTubeExecCommand.SeekTo(duration)) suspend fun seekBy(duration: Duration) = executeCommand(YouTubeExecCommand.SeekBy(duration)) suspend fun mute() = executeCommand(YouTubeExecCommand.Mute) suspend fun unMute() = executeCommand(YouTubeExecCommand.Unmute) suspend fun setVolume(volume: Int) = executeCommand(YouTubeExecCommand.SetVolume(volume)) suspend fun setPlaybackRate(rate: Float) = executeCommand(YouTubeExecCommand.SetPlaybackRate(rate)) suspend fun toggleFullScreen() = executeCommand(YouTubeExecCommand.ToggleFullscreen) YouTube player state defines actual youtube player state on the screen. Contains the next possible states: Idle - Idle state means that player is not initialized yet Ready - Means that player is ready to play Playing - player is playing video. Contains the next params: videoId: YouTubeVideoId - id of the video that is playing duration: Duration - duration of the video currentTime: Duration - current time of the video quality: YouTubeEvent.PlaybackQualityChange.Quality - quality of the video, see [YouTubeEvent.PlaybackQualityChange.Quality] isPlaying: Boolean - is video playing Error - Defines error state with error message inside. LoadVideo(val videoId: YouTubeVideoId,val startSeconds: Duration) - load video by youtube id. Possible to start with default start time offset. Play - play video Pause - pause video SeekTo(val duration: Duration) - seek video to a specified time SeekBy(val duration: Duration) - seek video by a specified time Mute - mute sound Unmute - unmute sound SetVolume(val volumePercent: Int) - set volume. Expected argument value from 0 to 100. NextVideo - navigate to a next video PreviousVideo - navigate to a previous video SetLoop(val loop: Boolean) - repeat video. Managed by argument. SetShuffle(val shuffle: Boolean) - shuffle videos. Managed by argument. Ready - calls when youtube player initialization complete PlaybackQualityChange(val quality: Quality) - calls when player quality changes Error(val error: String) - error handle event. See argument for details. VideoDuration(val duration: Duration) - calls when video duration initialized StateChanged(val state: State) - calls when video state changed: UNSTARTED,ENDED, PLAYING, PAUSED, BUFFERING, CUED. TimeChanged(val time: Duration) - timestamp changed OnVideoIdHandled(val videoId: YouTubeVideoId) - callback when video loaded Sample LICENSE Copyright 2024 Ilia Pavlovskii Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "https://raw.githubusercontent.com/IlyaPavlovskii/YouTubePlayer/main/sample.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eYouTubePlayer\u003c/h2\u003e\u003c/p\u003e   \u003cp dir=\"auto\"\u003eYouTube kotlin multiplatform player. The \u003ccode\u003eYouTubePlayer\u003c/code\u003e composable allows you to embed a YouTube video player in your Jetpack Compose app.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDonate\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eIf you want to thank me or contribute to the development of the backlog, you may donate me. That helps me to concentrate more on the project.\u003c/p\u003e  \u003cp dir=\"auto\"\u003eYou also might subscribe me on the next platforms to see any updates of my topics\u003c/p\u003e  \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eInstall\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eYou can add this library to your project using Gradle.\u003c/p\u003e \u003cp dir=\"auto\"\u003eMultiplatform To add to a multiplatform project, add the dependency to the common source-set:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"repositories { mavenCentral() } kotlin { sourceSets { commonMain { dependencies { implementation(\u0026#34;io.github.ilyapavlovskii:youtubeplayer-compose:${latest_version}\u0026#34;) } } } }\"\u003e\u003cpre\u003e\u003cspan\u003erepositories\u003c/span\u003e {\n    mavenCentral()\n}\n\n\u003cspan\u003ekotlin\u003c/span\u003e {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eio.github.ilyapavlovskii:youtubeplayer-compose:\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003elatest_version\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n            }\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val coroutineScope = rememberCoroutineScope() val hostState = remember { YouTubePlayerHostState() } when(val state = hostState.currentState) { is YouTubePlayerState.Error -\u0026gt; { Text(text = \u0026#34;Error: ${state.message}\u0026#34;) } YouTubePlayerState.Idle -\u0026gt; { // Do nothing, waiting for initialization } is YouTubePlayerState.Playing -\u0026gt; { // Update UI button states } YouTubePlayerState.Ready -\u0026gt; coroutineScope.launch { hostState.loadVideo(YouTubeVideoId(\u0026#34;ufKj1sBrC4Q\u0026#34;)) } } YouTubePlayer( modifier = Modifier .fillMaxWidth() .height(300.dp) .gesturesDisabled(), hostState = hostState, options = SimpleYouTubePlayerOptionsBuilder.builder { autoplay(true) controls(false) rel(false) ivLoadPolicy(false) ccLoadPolicy(false) fullscreen = true }, )\"\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e coroutineScope \u003cspan\u003e=\u003c/span\u003e rememberCoroutineScope()\n\u003cspan\u003eval\u003c/span\u003e hostState \u003cspan\u003e=\u003c/span\u003e remember { \u003cspan\u003eYouTubePlayerHostState\u003c/span\u003e() }\n\n\u003cspan\u003ewhen\u003c/span\u003e(\u003cspan\u003eval\u003c/span\u003e state \u003cspan\u003e=\u003c/span\u003e hostState.currentState) {\n    \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eYouTubePlayerState\u003c/span\u003e.\u003cspan\u003eError\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n        \u003cspan\u003eText\u003c/span\u003e(text \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eError: \u003cspan\u003e${state.message}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    }\n    \u003cspan\u003eYouTubePlayerState\u003c/span\u003e.\u003cspan\u003eIdle\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Do nothing, waiting for initialization\u003c/span\u003e\n    }\n    \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eYouTubePlayerState\u003c/span\u003e.\u003cspan\u003ePlaying\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Update UI button states\u003c/span\u003e\n    }\n    \u003cspan\u003eYouTubePlayerState\u003c/span\u003e.\u003cspan\u003eReady\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e coroutineScope.launch {\n        hostState.loadVideo(\u003cspan\u003eYouTubeVideoId\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eufKj1sBrC4Q\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e))\n    }\n}\n\n\u003cspan\u003eYouTubePlayer\u003c/span\u003e(\n    modifier \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eModifier\u003c/span\u003e\n        .fillMaxWidth()\n        .height(\u003cspan\u003e300\u003c/span\u003e.dp)\n        .gesturesDisabled(),\n    hostState \u003cspan\u003e=\u003c/span\u003e hostState,\n    options \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eSimpleYouTubePlayerOptionsBuilder\u003c/span\u003e.builder {\n        autoplay(\u003cspan\u003etrue\u003c/span\u003e)\n        controls(\u003cspan\u003efalse\u003c/span\u003e)\n        rel(\u003cspan\u003efalse\u003c/span\u003e)\n        ivLoadPolicy(\u003cspan\u003efalse\u003c/span\u003e)\n        ccLoadPolicy(\u003cspan\u003efalse\u003c/span\u003e)\n        fullscreen \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    },\n)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eComposable function has the next major params:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e - to player options builder. All parameters wrapped from \u003ca href=\"https://developers.google.com/youtube/player_parameters#Parameters\" rel=\"nofollow\" target=\"_blank\"\u003eofficial youtube iframe documentation\u003c/a\u003e.\u003c/li\u003e \u003cli\u003e\u003ccode\u003ehostState\u003c/code\u003e - controller for track youtube player state and execute one time commands\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eYouTubePlayerHostState\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe main controller. Contains 2 major public components:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003ecurrentState - defines actual youtube player state on the screen. Might be: Idle, Ready, Playing, Error\u003c/li\u003e \u003cli\u003eexecuteCommand - suspend function to execution player commands. Receives only one argument - \u003ca name=\"user-content-youtubeexeccommand\"\u003eYouTubeExecCommand\u003c/a\u003e. Also have an additional sugar functions like:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"suspend fun loadVideo(videoId: YouTubeVideoId) = executeCommand(YouTubeExecCommand.LoadVideo(videoId)) suspend fun play() = executeCommand(YouTubeExecCommand.Play) suspend fun pause() = executeCommand(YouTubeExecCommand.Pause) suspend fun seekTo(duration: Duration) = executeCommand(YouTubeExecCommand.SeekTo(duration)) suspend fun seekBy(duration: Duration) = executeCommand(YouTubeExecCommand.SeekBy(duration)) suspend fun mute() = executeCommand(YouTubeExecCommand.Mute) suspend fun unMute() = executeCommand(YouTubeExecCommand.Unmute) suspend fun setVolume(volume: Int) = executeCommand(YouTubeExecCommand.SetVolume(volume)) suspend fun setPlaybackRate(rate: Float) = executeCommand(YouTubeExecCommand.SetPlaybackRate(rate)) suspend fun toggleFullScreen() = executeCommand(YouTubeExecCommand.ToggleFullscreen)\"\u003e\u003cpre\u003e\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eloadVideo\u003c/span\u003e(\u003cspan\u003evideoId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eYouTubeVideoId\u003c/span\u003e) \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eLoadVideo\u003c/span\u003e(videoId))\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eplay\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003ePlay\u003c/span\u003e)\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003epause\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003ePause\u003c/span\u003e)\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eseekTo\u003c/span\u003e(\u003cspan\u003eduration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDuration\u003c/span\u003e) \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eSeekTo\u003c/span\u003e(duration))\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eseekBy\u003c/span\u003e(\u003cspan\u003eduration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDuration\u003c/span\u003e) \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eSeekBy\u003c/span\u003e(duration))\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003emute\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eMute\u003c/span\u003e)\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eunMute\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eUnmute\u003c/span\u003e)\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetVolume\u003c/span\u003e(\u003cspan\u003evolume\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e) \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eSetVolume\u003c/span\u003e(volume))\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetPlaybackRate\u003c/span\u003e(\u003cspan\u003erate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFloat\u003c/span\u003e) \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eSetPlaybackRate\u003c/span\u003e(rate))\n\u003cspan\u003esuspend\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003etoggleFullScreen\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e executeCommand(\u003cspan\u003eYouTubeExecCommand\u003c/span\u003e.\u003cspan\u003eToggleFullscreen\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e  \u003cp dir=\"auto\"\u003eYouTube player state defines actual youtube player state on the screen. Contains the next possible states:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eIdle\u003c/code\u003e - Idle state means that player is not initialized yet\u003c/li\u003e \u003cli\u003e\u003ccode\u003eReady\u003c/code\u003e - Means that player is ready to play\u003c/li\u003e \u003cli\u003e\u003ccode\u003ePlaying\u003c/code\u003e - player is playing video. Contains the next params:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"videoId: YouTubeVideoId - id of the video that is playing duration: Duration - duration of the video currentTime: Duration - current time of the video quality: YouTubeEvent.PlaybackQualityChange.Quality - quality of the video, see [YouTubeEvent.PlaybackQualityChange.Quality] isPlaying: Boolean - is video playing\"\u003e\u003cpre\u003evideoId\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eYouTubeVideoId\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e id of the video that \u003cspan\u003eis\u003c/span\u003e playing\nduration\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDuration\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e duration of the video\ncurrentTime\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDuration\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e current time of the video\nquality\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eYouTubeEvent\u003c/span\u003e.\u003cspan\u003ePlaybackQualityChange\u003c/span\u003e.\u003cspan\u003eQuality\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e quality of the video, see [\u003cspan\u003eYouTubeEvent\u003c/span\u003e.\u003cspan\u003ePlaybackQualityChange\u003c/span\u003e.\u003cspan\u003eQuality\u003c/span\u003e]\nisPlaying\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBoolean\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003eis\u003c/span\u003e video playing\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eError\u003c/code\u003e - Defines error state with error message inside.\u003c/li\u003e \u003c/ul\u003e  \u003cul dir=\"auto\"\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eLoadVideo(val videoId: YouTubeVideoId,val startSeconds: Duration)\u003c/code\u003e - load video by youtube id. Possible to start with default start time offset.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003ePlay\u003c/code\u003e - play video\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003ePause\u003c/code\u003e - pause video\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eSeekTo(val duration: Duration)\u003c/code\u003e - seek video to a specified time\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eSeekBy(val duration: Duration)\u003c/code\u003e - seek video by a specified time\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eMute\u003c/code\u003e - mute sound\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eUnmute\u003c/code\u003e - unmute sound\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eSetVolume(val volumePercent: Int)\u003c/code\u003e - set volume. Expected argument value from 0 to 100.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eNextVideo\u003c/code\u003e - navigate to a next video\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003ePreviousVideo\u003c/code\u003e - navigate to a previous video\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eSetLoop(val loop: Boolean)\u003c/code\u003e - repeat video. Managed by argument.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eSetShuffle(val shuffle: Boolean)\u003c/code\u003e - shuffle videos. Managed by argument.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e  \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eReady\u003c/code\u003e - calls when youtube player initialization complete\u003c/li\u003e \u003cli\u003e\u003ccode\u003ePlaybackQualityChange(val quality: Quality)\u003c/code\u003e - calls when player quality changes\u003c/li\u003e \u003cli\u003e\u003ccode\u003eError(val error: String)\u003c/code\u003e - error handle event. See argument for details.\u003c/li\u003e \u003cli\u003e\u003ccode\u003eVideoDuration(val duration: Duration)\u003c/code\u003e - calls when video duration initialized\u003c/li\u003e \u003cli\u003e\u003ccode\u003eStateChanged(val state: State)\u003c/code\u003e - calls when video state changed: \u003ccode\u003eUNSTARTED\u003c/code\u003e,\u003ccode\u003eENDED\u003c/code\u003e, \u003ccode\u003ePLAYING\u003c/code\u003e, \u003ccode\u003ePAUSED\u003c/code\u003e, \u003ccode\u003eBUFFERING\u003c/code\u003e, \u003ccode\u003eCUED\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\u003ccode\u003eTimeChanged(val time: Duration)\u003c/code\u003e - timestamp changed\u003c/li\u003e \u003cli\u003e\u003ccode\u003eOnVideoIdHandled(val videoId: YouTubeVideoId)\u003c/code\u003e - callback when video loaded\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSample\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/IlyaPavlovskii/YouTubePlayer/raw/main/sample.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg data-layzr=\"https://raw.githubusercontent.com/IlyaPavlovskii/YouTubePlayer/main/sample.png\" src=\"https://raw.githubusercontent.com/IlyaPavlovskii/YouTubePlayer/main/sample.png\"/\u003e\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLICENSE\u003c/h2\u003e\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"Copyright 2024 Ilia Pavlovskii Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\"\u003e\u003cpre\u003e\u003ccode\u003eCopyright 2024 Ilia Pavlovskii\n\nLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
