{
  "id": "5250656c-49fa-49f7-96f0-460a3a52635b",
  "title": "Live Updates in Android 16: Exploring the Next Evolution of Notifications",
  "link": "https://proandroiddev.com/live-updates-in-android-16-exploring-the-next-evolution-of-notifications-1a5cf5de2068?source=rss----c72404660798---4",
  "description": "",
  "author": "Nav Singh",
  "published": "Sat, 31 May 2025 11:02:03 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "android",
    "android-16",
    "live-updates",
    "notifications"
  ],
  "byline": "Nav Singh",
  "length": 9392,
  "excerpt": "Starting with Android 16, we have a new notification style Notification.ProgressStyle which we can use to create progress-centric notifications. ProgressStyle is quite customizable; It includes the‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Starting with Android 16, we have a new notification style Notification.ProgressStyle which we can use to create progress-centric notifications.This article will teach us how to use this new style to provide live updates to end-users.Important use-cases that we can implement with this are the followingRideshare üöïFood Delivery üöö ü•òNavigation üß≠, etc.ImplementationIn the app‚Äôs build.gradle set the compile SDK to Android 16android { // Android 16 compileSdk = 36 defaultConfig { minSdk = 29 // Android 16 targetSdk = 36 } }Make sure that the app has permission to post promoted notificationsWe can use the canPostPromotedNotifications method of NotificationManager to check if our application has valid access or not.@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun checkInitialization(context: Context) { val canPostLiveUpdates = notificationManager.canPostPromotedNotifications()}Redirect the user to the settings to update their permissionsIf the last step‚Äôs üëÜ result is false We can redirect the user to the settings to update the settings, and then go from there. val intent = Intent(ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT).setData( \"package:${appContext.packageName}\".toUri()), ) (context as Activity).startActivityForResult(intent, PERMISSION_REQUEST_CODE)Verify if the notification itself is promotableWe can use the hasPromotableCharacteristics of Notification to ensure the notification is valid for live update.val isPromotable = notification.hasPromotableCharacteristics()We will create a live update experience for the food delivery use case ü•òLet's create a notification channelIMPORTANCE_MIN = 1 does not qualify a notification as a live updateobject LiveUpdatesNotificationManager { private lateinit var notificationManager: NotificationManager private lateinit var appContext: Context const val CHANNEL_ID = \"live_updates_16_channel_id\" private const val CHANNEL_NAME = \"live_updates_16_channel_name\" private const val NOTIFICATION_ID = 4321fun createChannel(context: Context, notifManager: NotificationManager) { notificationManager = notifManager val channel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, IMPORTANCE_DEFAULT) appContext = context notificationManager.createNotificationChannel(channel)}For our use case, we will have the following five statesOrder placed or confirmed üëçPreparing üßë‚Äçüç≥EnRoute üõ£Ô∏èArriving üöóDelivered ‚úÖTo get started, let‚Äôs start with the base notification.fun buildBaseNotification(appContext: Context): Notification.Builder { return Notification.Builder(appContext, CHANNEL_ID) .setSmallIcon(R.drawable.ic_launcher_foreground) .setOngoing(true) .setColorized(true) .setColor(Color.GRAY)}We need to set the style to ProgressStyle, that can be a live updateSo let‚Äôs create a Progress style for each caseUsing the previous step‚ÄôsüëÜ base notification, we will build upon itOrder placed or confirmed ‚Äî Step 1Ô∏è‚É£fun buildBaseNotification(): Notification.Builder { return buildBaseNotification(appContext, INITIALIZING) .setContentTitle(\"You order is being placed\") .setContentText(\"Confirming with Spicy7...\")}@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildBaseProgressStyle(): ProgressStyle { val progressStyle = ProgressStyle() .setProgressPoints( listOf( ProgressStyle.Point(25).setColor(Color.MAGENTA), ProgressStyle.Point(50).setColor(Color.RED), ProgressStyle.Point(75).setColor(Color.GREEN) ) ).setProgressSegments( listOf( ProgressStyle.Segment(25).setColor(Color.BLUE), ProgressStyle.Segment(25).setColor(Color.MAGENTA), ProgressStyle.Segment(25).setColor(Color.LTGRAY), ProgressStyle.Segment(25).setColor(Color.RED) ) ) return progressStyle}So here we started with 3 points and four segments.ResultStep 1 ‚Äî ResultPreparing üßë‚Äçüç≥ ‚Äî Step 2Ô∏è‚É£We have updated the progress to 25 and added the large icon to the existing notification.Title and text have been updated .setContentTitle(‚ÄúYour order is being prepared‚Äù) .setContentText(‚ÄúNext step will be delivery‚Äù)We will keep three points and four segments.@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildNotification(): Notification.Builder { return buildBaseNotification(appContext, FOOD_PREPARATION) .setContentTitle(\"Your order is being prepared\") .setContentText(\"Next step will be delivery\") .setLargeIcon( IconCompat.createWithResource( appContext, R.drawable.ic_notif_large, ).toIcon(appContext), ) .setStyle(buildBaseProgressStyle().setProgress(25))}@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildBaseProgressStyle(): ProgressStyle { // same like step 1. }ResultStep 2‚Äî ResultEnRoute üõ£Ô∏è ‚Äî Step 3Ô∏è‚É£Here, we set the progress to 50 and set the progress tracker icon ü•ØTitle and text have been updated.setContentTitle(‚ÄúYour order is on its way‚Äù).setContentText(‚ÄúEnroute to destination‚Äù)We show one points(25), and four segments@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildNotification(): Notification.Builder { return buildBaseNotification(appContext, FOOD_ENROUTE) .setContentTitle(\"Your order is on its way\") .setContentText(\"Enroute to destination\") .setStyle( buildBaseProgressStyle() .setProgressTrackerIcon( IconCompat.createWithResource( appContext, R.drawable.shopping_bag, ).toIcon(appContext), ) .setProgress(50), ) .setLargeIcon( IconCompat.createWithResource( appContext, R.drawable.ic_notif_large, ).toIcon(appContext), )}@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildBaseProgressStyle(): ProgressStyle { val progressStyle = ProgressStyle() .setProgressPoints( listOf( ProgressStyle.Point(25).setColor(Color.MAGENTA) ) ).setProgressSegments( listOf( ProgressStyle.Segment(25).setColor(Color.BLUE), ProgressStyle.Segment(25).setColor(Color.MAGENTA), ProgressStyle.Segment(25).setColor(Color.LTGRAY), ProgressStyle.Segment(25).setColor(Color.RED) ) ) return progressStyle}ResultStep 3‚Äî ResultArriving üöó ‚Äî Step 4Ô∏è‚É£Here, we set the progress to 75 and set the progress tracker icon ü•ØTitle and text have been updated.setContentTitle(‚ÄúYour order is arriving...‚Äù) .setContentText(‚ÄúEnjoy.‚Äù)We show two points(25, 50), and four segments@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildNotification(): Notification.Builder { return buildBaseNotification(appContext, FOOD_ARRIVING) .setContentTitle(\"Your order is arriving...\") .setContentText(\"Enjoy üòã\") .setStyle( buildBaseProgressStyle(FOOD_ARRIVING) .setProgressTrackerIcon( IconCompat.createWithResource( appContext, R.drawable.local_shipping, ).toIcon(appContext), ) .setProgress(75), ) .setLargeIcon( IconCompat.createWithResource( appContext, R.drawable.ic_notif_large, ).toIcon(appContext), )}@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildBaseProgressStyle(): ProgressStyle { val progressStyle = ProgressStyle() .setProgressPoints( listOf( ProgressStyle.Point(25).setColor(Color.MAGENTA), ProgressStyle.Point(50).setColor(Color.RED), ) ).setProgressSegments( listOf( ProgressStyle.Segment(25).setColor(Color.BLUE), ProgressStyle.Segment(25).setColor(Color.MAGENTA), ProgressStyle.Segment(25).setColor(Color.LTGRAY), ProgressStyle.Segment(25).setColor(Color.RED) ) ) return progressStyle}sasaResultStep 4‚Äî ResultDelivered ‚úÖ ‚Äî Step 5Ô∏è‚É£Here, we set the progress to 100 and set the progress tracker icon ‚úÖTitle and text have been updated.setContentTitle(‚ÄúYour order is complete.‚Äù) .setContentText(‚ÄúThank you for using our app.‚Äù)We show three points(25, 50, 75), and four segments@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildNotification(): Notification.Builder { return buildBaseNotification(appContext, ORDER_COMPLETE) .setContentTitle(\"Your order is complete.\") .setContentText(\"Thank you for using our app.\") .setStyle( buildBaseProgressStyle(ORDER_COMPLETE) .setProgressTrackerIcon( IconCompat.createWithResource( appContext, R.drawable.check_box, ).toIcon(appContext), ) .setProgress(100), ) .setLargeIcon( IconCompat.createWithResource( appContext, R.drawable.ic_notif_large, ).toIcon(appContext), )}@RequiresApi(Build.VERSION_CODES.BAKLAVA)fun buildBaseProgressStyle(): ProgressStyle { val progressStyle = ProgressStyle() .setProgressPoints( listOf( ProgressStyle.Point(25).setColor(Color.MAGENTA), ProgressStyle.Point(50).setColor(Color.RED), ProgressStyle.Point(75).setColor(Color.LTGRAY) ) ) return progressStyle}ResultStep 5 ‚Äî ResultA few important pointsPoints at the start and end will not show in the progress barDEFAULT_PROGRESS_MAX is 100MAX_PROGRESS_POINT_LIMIT is 4Progress bar‚Äôs max value is calculated based on the segmentsSample codeReferences",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*fAqazoJua9ofXP0X1gejxg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://navczydev.medium.com/?source=post_page---byline--1a5cf5de2068---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Nav Singh\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*fgXFMgSUVAlGSdmMkx9TYw.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"0142\"\u003eStarting with Android 16, we have a new notification style \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle?authuser=3\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNotification.ProgressStyle\u003c/a\u003e\u003c/code\u003e which we can use to create progress-centric notifications.\u003c/p\u003e\u003cp id=\"7af9\"\u003eThis article will teach us how to use this new style to provide live updates to end-users.\u003c/p\u003e\u003cp id=\"0f9a\"\u003eImportant \u003cstrong\u003euse-cases\u003c/strong\u003e that we can implement with this are the following\u003c/p\u003e\u003cul\u003e\u003cli id=\"a497\"\u003eRideshare üöï\u003c/li\u003e\u003cli id=\"eb64\"\u003eFood Delivery üöö ü•ò\u003c/li\u003e\u003cli id=\"5565\"\u003eNavigation üß≠, etc.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"affc\"\u003eImplementation\u003c/h2\u003e\u003cul\u003e\u003cli id=\"f446\"\u003eIn the app‚Äôs \u003ccode\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/code\u003e set the \u003cstrong\u003ecompile SDK \u003c/strong\u003eto \u003cstrong\u003eAndroid 16\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"28cc\"\u003eandroid {\u003cbr/\u003e    // Android 16\u003cbr/\u003e    compileSdk = 36\u003cp\u003e    defaultConfig {\u003cbr/\u003e        minSdk = 29\u003cbr/\u003e        // Android 16\u003cbr/\u003e        targetSdk = 36\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e     }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"a36b\"\u003eMake sure that the app has permission to post promoted notifications\u003c/h2\u003e\u003cul\u003e\u003cli id=\"fd16\"\u003eWe can use the \u003ccode\u003e\u003cstrong\u003ecanPostPromotedNotifications\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003emethod of \u003ccode\u003e\u003cstrong\u003eNotificationManager\u003c/strong\u003e\u003c/code\u003e to check if our application has valid access or not.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"e716\"\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun checkInitialization(context: Context) {\u003cbr/\u003e    val canPostLiveUpdates = notificationManager.canPostPromotedNotifications()\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"cc7f\"\u003eRedirect the user to the settings to update their permissions\u003c/h2\u003e\u003cul\u003e\u003cli id=\"65c7\"\u003eIf the last step‚Äôs üëÜ result is \u003ccode\u003e\u003cstrong\u003efalse\u003c/strong\u003e\u003c/code\u003e We can redirect the user to the \u003cstrong\u003esettings\u003c/strong\u003e to \u003cstrong\u003eupdate\u003c/strong\u003e the settings, and then go from there.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"a146\"\u003e\u003cbr/\u003e val intent = Intent(ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT).setData(\u003cbr/\u003e     \u0026#34;package:${appContext.packageName}\u0026#34;.toUri()),\u003cbr/\u003e )\u003cp\u003e (context as Activity).startActivityForResult(intent, PERMISSION_REQUEST_CODE)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"2de1\"\u003eVerify if the notification itself is promotable\u003c/h2\u003e\u003cul\u003e\u003cli id=\"a217\"\u003eWe can use the \u003ccode\u003e\u003cstrong\u003ehasPromotableCharacteristics\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eof \u003ccode\u003e\u003cstrong\u003eNotification\u003c/strong\u003e\u003c/code\u003e to ensure the notification is valid for live update.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"1b88\"\u003eval isPromotable = notification.hasPromotableCharacteristics()\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"48bd\"\u003e\u003cstrong\u003eWe will create a live update experience for the food delivery use case ü•ò\u003c/strong\u003e\u003c/h2\u003e\u003cul\u003e\u003cli id=\"c155\"\u003eLet\u0026#39;s create a \u003cstrong\u003enotification channel\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"e83a\"\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003eIMPORTANCE_MIN = 1\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003edoes \u003cstrong\u003enot\u003c/strong\u003e qualify a notification as a live update\u003c/p\u003e\u003c/blockquote\u003e\u003cpre\u003e\u003cspan id=\"dc80\"\u003eobject LiveUpdatesNotificationManager {\u003cp\u003e    private lateinit var notificationManager: NotificationManager\u003c/p\u003e\u003cp\u003e    private lateinit var appContext: Context\u003c/p\u003e\u003cp\u003e    const val CHANNEL_ID = \u0026#34;live_updates_16_channel_id\u0026#34;\u003c/p\u003e\u003cp\u003e    private const val CHANNEL_NAME = \u0026#34;live_updates_16_channel_name\u0026#34;\u003c/p\u003e\u003cp\u003e    private const val NOTIFICATION_ID = 4321\u003c/p\u003e\u003cp\u003efun createChannel(context: Context, notifManager: NotificationManager) {\u003cbr/\u003e    notificationManager = notifManager\u003cbr/\u003e    val channel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, IMPORTANCE_DEFAULT)\u003cbr/\u003e    appContext = context\u003cbr/\u003e    notificationManager.createNotificationChannel(channel)\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"362c\"\u003eFor our use case, we will have the following \u003cstrong\u003efive states\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003col\u003e\u003cli id=\"8f3a\"\u003eOrder placed or confirmed üëç\u003c/li\u003e\u003cli id=\"9681\"\u003ePreparing üßë‚Äçüç≥\u003c/li\u003e\u003cli id=\"7c06\"\u003eEnRoute üõ£Ô∏è\u003c/li\u003e\u003cli id=\"135f\"\u003eArriving üöó\u003c/li\u003e\u003cli id=\"fc40\"\u003eDelivered ‚úÖ\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"577c\"\u003eTo get started, let‚Äôs start with the base notification.\u003c/h2\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre\u003e\u003cspan id=\"7060\"\u003efun buildBaseNotification(appContext: Context): Notification.Builder {\u003cbr/\u003e    return Notification.Builder(appContext, CHANNEL_ID)\u003cbr/\u003e        .setSmallIcon(R.drawable.ic_launcher_foreground)\u003cbr/\u003e        .setOngoing(true)\u003cbr/\u003e        .setColorized(true)\u003cbr/\u003e        .setColor(Color.GRAY)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"9fc5\"\u003eWe need to set the \u003cstrong\u003estyle\u003c/strong\u003e to \u003cstrong\u003eProgressStyle, \u003c/strong\u003ethat can be a\u003cstrong\u003e live update\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"2eb5\"\u003e\u003cstrong\u003eSo let‚Äôs create a \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eProgress style\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e for each case\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"56dc\"\u003eUsing the previous step‚ÄôsüëÜ \u003cstrong\u003ebase notification\u003c/strong\u003e, we will build upon it\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"360c\"\u003eOrder placed or confirmed ‚Äî Step 1Ô∏è‚É£\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"28bc\"\u003e\u003cbr/\u003efun buildBaseNotification(): Notification.Builder {\u003cbr/\u003e    return buildBaseNotification(appContext, INITIALIZING)\u003cbr/\u003e        .setContentTitle(\u0026#34;You order is being placed\u0026#34;)\u003cbr/\u003e        .setContentText(\u0026#34;Confirming with Spicy7...\u0026#34;)\u003cbr/\u003e}\u003cp\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildBaseProgressStyle(): ProgressStyle {\u003cbr/\u003e    val progressStyle = ProgressStyle()\u003cbr/\u003e        .setProgressPoints(\u003cbr/\u003e            listOf(\u003cbr/\u003e                ProgressStyle.Point(25).setColor(Color.MAGENTA),\u003cbr/\u003e                ProgressStyle.Point(50).setColor(Color.RED),\u003cbr/\u003e                ProgressStyle.Point(75).setColor(Color.GREEN)\u003cbr/\u003e            )\u003cbr/\u003e        ).setProgressSegments(\u003cbr/\u003e            listOf(\u003cbr/\u003e                ProgressStyle.Segment(25).setColor(Color.BLUE),\u003cbr/\u003e                ProgressStyle.Segment(25).setColor(Color.MAGENTA),\u003cbr/\u003e                ProgressStyle.Segment(25).setColor(Color.LTGRAY),\u003cbr/\u003e                ProgressStyle.Segment(25).setColor(Color.RED)\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e     return progressStyle\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1579\"\u003eSo here we started with \u003ccode\u003e\u003cstrong\u003e3 points\u003c/strong\u003e\u003c/code\u003e and \u003cstrong\u003efour\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003esegments\u003c/strong\u003e\u003c/code\u003e.\u003c/p\u003e\u003ch2 id=\"ffcc\"\u003e\u003cstrong\u003eResult\u003c/strong\u003e\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eStep 1 ‚Äî Result\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"9602\"\u003ePreparing üßë‚Äçüç≥ ‚Äî Step 2Ô∏è‚É£\u003c/h2\u003e\u003cul\u003e\u003cli id=\"5a28\"\u003eWe have updated the \u003cstrong\u003eprogress \u003c/strong\u003eto\u003cstrong\u003e 25 \u003c/strong\u003eand \u003cstrong\u003eadded\u003c/strong\u003e the \u003cstrong\u003elarge icon\u003c/strong\u003e to the existing notification.\u003c/li\u003e\u003cli id=\"26cd\"\u003e\u003cstrong\u003eTitle\u003c/strong\u003e and \u003cstrong\u003etext\u003c/strong\u003e have been \u003cstrong\u003eupdated\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003e .setContentTitle(‚ÄúYour order is being prepared‚Äù)\u003cbr/\u003e .setContentText(‚ÄúNext step will be delivery‚Äù)\u003c/code\u003e\u003c/li\u003e\u003cli id=\"9926\"\u003eWe will keep \u003cstrong\u003ethree\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003epoints\u003c/strong\u003e\u003c/code\u003e and \u003cstrong\u003efour\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003esegments\u003c/strong\u003e\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"ba5a\"\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildNotification(): Notification.Builder {\u003cbr/\u003e    return buildBaseNotification(appContext, FOOD_PREPARATION)\u003cbr/\u003e        .setContentTitle(\u0026#34;Your order is being prepared\u0026#34;)\u003cbr/\u003e        .setContentText(\u0026#34;Next step will be delivery\u0026#34;)\u003cbr/\u003e        .setLargeIcon(\u003cbr/\u003e            IconCompat.createWithResource(\u003cbr/\u003e                appContext, R.drawable.ic_notif_large,\u003cbr/\u003e            ).toIcon(appContext),\u003cbr/\u003e        )\u003cbr/\u003e        .setStyle(buildBaseProgressStyle().setProgress(25))\u003cbr/\u003e}\u003cp\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildBaseProgressStyle(): ProgressStyle {\u003cbr/\u003e    // same like step 1.\u003c/p\u003e\u003cp\u003e    }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d791\"\u003eResult\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eStep 2‚Äî Result\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"2423\"\u003eEnRoute üõ£Ô∏è ‚Äî Step 3Ô∏è‚É£\u003c/h2\u003e\u003cul\u003e\u003cli id=\"9270\"\u003eHere, we set the\u003cstrong\u003e progress \u003c/strong\u003eto\u003cstrong\u003e 50\u003c/strong\u003e and set the \u003cstrong\u003eprogress tracker icon ü•Ø\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"74d8\"\u003e\u003cstrong\u003eTitle\u003c/strong\u003e and \u003cstrong\u003etext\u003c/strong\u003e have been \u003cstrong\u003eupdated\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003e.setContentTitle(‚ÄúYour order is on its way‚Äù)\u003cbr/\u003e.setContentText(‚ÄúEnroute to destination‚Äù)\u003c/code\u003e\u003c/li\u003e\u003cli id=\"7f79\"\u003eWe show \u003cstrong\u003eone\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003epoints\u003c/strong\u003e\u003c/code\u003e(25), and \u003cstrong\u003efour\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003esegments\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"2129\"\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildNotification(): Notification.Builder {\u003cbr/\u003e    return buildBaseNotification(appContext, FOOD_ENROUTE)\u003cbr/\u003e    .setContentTitle(\u0026#34;Your order is on its way\u0026#34;)\u003cbr/\u003e    .setContentText(\u0026#34;Enroute to destination\u0026#34;)\u003cbr/\u003e    .setStyle(\u003cbr/\u003e        buildBaseProgressStyle()\u003cbr/\u003e            .setProgressTrackerIcon(\u003cbr/\u003e                IconCompat.createWithResource(\u003cbr/\u003e                    appContext, R.drawable.shopping_bag,\u003cbr/\u003e                ).toIcon(appContext),\u003cbr/\u003e            )\u003cbr/\u003e            .setProgress(50),\u003cbr/\u003e    )\u003cbr/\u003e    .setLargeIcon(\u003cbr/\u003e        IconCompat.createWithResource(\u003cbr/\u003e            appContext, R.drawable.ic_notif_large,\u003cbr/\u003e        ).toIcon(appContext),\u003cbr/\u003e    )\u003cbr/\u003e}\u003cp\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildBaseProgressStyle(): ProgressStyle {\u003cbr/\u003e    val progressStyle = ProgressStyle()\u003cbr/\u003e    .setProgressPoints(\u003cbr/\u003e        listOf(\u003cbr/\u003e            ProgressStyle.Point(25).setColor(Color.MAGENTA)\u003cbr/\u003e        )\u003cbr/\u003e    ).setProgressSegments(\u003cbr/\u003e        listOf(\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.BLUE),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.MAGENTA),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.LTGRAY),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.RED)\u003cbr/\u003e        )\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e      return progressStyle\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"487c\"\u003eResult\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eStep 3‚Äî Result\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"8a53\"\u003eArriving üöó ‚Äî Step 4Ô∏è‚É£\u003c/h2\u003e\u003cul\u003e\u003cli id=\"bf42\"\u003eHere, we set the\u003cstrong\u003e progress \u003c/strong\u003eto\u003cstrong\u003e 75\u003c/strong\u003e and set the \u003cstrong\u003eprogress tracker icon ü•Ø\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"d9e2\"\u003e\u003cstrong\u003eTitle\u003c/strong\u003e and \u003cstrong\u003etext\u003c/strong\u003e have been \u003cstrong\u003eupdated\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003e.setContentTitle(‚ÄúYour order is arriving...‚Äù)\u003cbr/\u003e .setContentText(‚ÄúEnjoy.‚Äù)\u003c/code\u003e\u003c/li\u003e\u003cli id=\"7cde\"\u003eWe show \u003cstrong\u003etwo\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003epoints\u003c/strong\u003e\u003c/code\u003e(25, 50), and \u003cstrong\u003efour\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003esegments\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"fe18\"\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildNotification(): Notification.Builder {\u003cbr/\u003e    return buildBaseNotification(appContext, FOOD_ARRIVING)\u003cbr/\u003e    .setContentTitle(\u0026#34;Your order is arriving...\u0026#34;)\u003cbr/\u003e    .setContentText(\u0026#34;Enjoy üòã\u0026#34;)\u003cbr/\u003e    .setStyle(\u003cbr/\u003e        buildBaseProgressStyle(FOOD_ARRIVING)\u003cbr/\u003e            .setProgressTrackerIcon(\u003cbr/\u003e                IconCompat.createWithResource(\u003cbr/\u003e                    appContext, R.drawable.local_shipping,\u003cbr/\u003e                ).toIcon(appContext),\u003cbr/\u003e            )\u003cbr/\u003e            .setProgress(75),\u003cbr/\u003e    )\u003cbr/\u003e    .setLargeIcon(\u003cbr/\u003e        IconCompat.createWithResource(\u003cbr/\u003e            appContext, R.drawable.ic_notif_large,\u003cbr/\u003e        ).toIcon(appContext),\u003cbr/\u003e    )\u003cbr/\u003e}\u003cp\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildBaseProgressStyle(): ProgressStyle {\u003cbr/\u003e    val progressStyle = ProgressStyle()\u003cbr/\u003e    .setProgressPoints(\u003cbr/\u003e        listOf(\u003cbr/\u003e            ProgressStyle.Point(25).setColor(Color.MAGENTA),\u003cbr/\u003e            ProgressStyle.Point(50).setColor(Color.RED),\u003cbr/\u003e        )\u003cbr/\u003e    ).setProgressSegments(\u003cbr/\u003e        listOf(\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.BLUE),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.MAGENTA),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.LTGRAY),\u003cbr/\u003e            ProgressStyle.Segment(25).setColor(Color.RED)\u003cbr/\u003e        )\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e      return progressStyle\u003cbr/\u003e}sasa\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"3bfc\"\u003eResult\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eStep 4‚Äî Result\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d203\"\u003eDelivered ‚úÖ ‚Äî Step 5Ô∏è‚É£\u003c/h2\u003e\u003cul\u003e\u003cli id=\"bd34\"\u003eHere, we set the\u003cstrong\u003e progress \u003c/strong\u003eto\u003cstrong\u003e 100\u003c/strong\u003e and set the \u003cstrong\u003eprogress tracker icon ‚úÖ\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"acb6\"\u003e\u003cstrong\u003eTitle\u003c/strong\u003e and \u003cstrong\u003etext\u003c/strong\u003e have been \u003cstrong\u003eupdated\u003c/strong\u003e\u003cbr/\u003e\u003ccode\u003e.setContentTitle(‚ÄúYour order is complete.‚Äù)\u003cbr/\u003e .setContentText(‚ÄúThank you for using our app.‚Äù)\u003c/code\u003e\u003c/li\u003e\u003cli id=\"3d1a\"\u003eWe show \u003cstrong\u003ethree\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003epoints\u003c/strong\u003e\u003c/code\u003e(25, 50, 75), and \u003cstrong\u003efour\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003esegments\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"454e\"\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildNotification(): Notification.Builder {\u003cbr/\u003e    return buildBaseNotification(appContext, ORDER_COMPLETE)\u003cbr/\u003e    .setContentTitle(\u0026#34;Your order is complete.\u0026#34;)\u003cbr/\u003e    .setContentText(\u0026#34;Thank you for using our app.\u0026#34;)\u003cbr/\u003e    .setStyle(\u003cbr/\u003e        buildBaseProgressStyle(ORDER_COMPLETE)\u003cbr/\u003e            .setProgressTrackerIcon(\u003cbr/\u003e                IconCompat.createWithResource(\u003cbr/\u003e                    appContext, R.drawable.check_box,\u003cbr/\u003e                ).toIcon(appContext),\u003cbr/\u003e            )\u003cbr/\u003e            .setProgress(100),\u003cbr/\u003e    )\u003cbr/\u003e    .setLargeIcon(\u003cbr/\u003e        IconCompat.createWithResource(\u003cbr/\u003e            appContext, R.drawable.ic_notif_large,\u003cbr/\u003e        ).toIcon(appContext),\u003cbr/\u003e    )\u003cbr/\u003e}\u003cp\u003e@RequiresApi(Build.VERSION_CODES.BAKLAVA)\u003cbr/\u003efun buildBaseProgressStyle(): ProgressStyle {\u003cbr/\u003e    val progressStyle = ProgressStyle()\u003cbr/\u003e    .setProgressPoints(\u003cbr/\u003e        listOf(\u003cbr/\u003e            ProgressStyle.Point(25).setColor(Color.MAGENTA),\u003cbr/\u003e            ProgressStyle.Point(50).setColor(Color.RED),\u003cbr/\u003e            ProgressStyle.Point(75).setColor(Color.LTGRAY)\u003cbr/\u003e        )\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e      return progressStyle\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c74e\"\u003eResult\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eStep 5 ‚Äî Result\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"e90f\"\u003eA few important points\u003c/h2\u003e\u003cul\u003e\u003cli id=\"1ebb\"\u003ePoints at the \u003cstrong\u003estart\u003c/strong\u003e and \u003cstrong\u003eend\u003c/strong\u003e will not show in the \u003ccode\u003e\u003cstrong\u003eprogress bar\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003cli id=\"316b\"\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003eDEFAULT_PROGRESS_MAX\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e \u003c/em\u003eis\u003cem\u003e \u003c/em\u003e\u003cstrong\u003e\u003cem\u003e100\u003c/em\u003e\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"64b3\"\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003eMAX_PROGRESS_POINT_LIMIT\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e \u003c/em\u003eis \u003cstrong\u003e4\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"adba\"\u003e\u003ccode\u003e\u003cstrong\u003eProgress bar‚Äôs\u003c/strong\u003e\u003c/code\u003e \u003cstrong\u003emax value\u003c/strong\u003e is \u003cstrong\u003ecalculated\u003c/strong\u003e based on the \u003cstrong\u003esegments\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"6890\"\u003eSample code\u003c/h2\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"f3f4\"\u003eReferences\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-05-30T12:32:30.226Z",
  "modifiedTime": null
}
