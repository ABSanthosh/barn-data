{
  "id": "03081ea6-5e58-4d0f-930b-743086d466a5",
  "title": "Deploy Android App on Play Store using Github Action | Yogesh Paliyal",
  "link": "https://proandroiddev.com/deploy-android-app-on-play-store-using-github-action-yogesh-paliyal-2084da7bca25?source=rss----c72404660798---4",
  "description": "",
  "author": "Yogesh Paliyal",
  "published": "Mon, 24 Feb 2025 14:05:20 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-app-development"
  ],
  "byline": "Yogesh Paliyal",
  "length": 2757,
  "excerpt": "The app release process is a repetitive process and take too much time to version bump, build and upload it to play store or other app stores.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "IntroductionThe app release process is a repetitive process and take too much time to version bump, build and upload it to play store or other app stores.To simplify the process I’ve automated this process in my project KeyPass using Github Actions.RequirementsFor most of the apps we have these requirements, there may be different requirements for your app.PrerequisitesBasic idea of Github Actions.Shell Scripting.Android gradle build.End-to-End ProcessHow to triggerWe have the manual trigger to initiate the release process, we have few parameters to start the release.Link to Github Workflow file.Bump Type : Choose from major/minor/patch.Release Notes: As name suggest this will be the release note for our release on play store.In android we are having 2 variables to store the version of the app.versionCode : This number is used only to determine whether one version is more recent than another, with higher numbers indicating more recent versions. This isn’t the version number shown to users.versionName : The version number shown to users. The string has no other purpose than to display to users. the format of the string in x.y.zOn trigger we fetch the current version from build.gradle file where versionCode and versionName is mentioned, then we update the version code and version name and we will write the release notes using this script.Commit and merge the changes.In last step we bump the version and modified the release notes, but we have to merge it to master so next time when we do the version bump it will pick the correct version from master.Create Github Tag \u0026 releaseAfter merging the changes to master, we create the tag and release from the tag, the release can be used in future if want to check the change logs or code that we shipped in that specific release.Generate AAB fileWe have created another workflow, this workflow will create the AAB file and upload the AAB to play store and Indus app store. This workflow will be triggered whenever there is a new release is created on github.Upload on Play StoreOnce the build is created the build will be uploaded on play store using r0adkll/upload-google-play@v1.1.3 github action.We can customize the github action to deploy the build on our desired channel like production, beta, alpha, etc.Additional ConsiderationsStop deploymentWhen the build is in progress we can stop the github workflow to stop the build process in between.Revert the releaseThere is no direct option supported by play store to revert the release, instead we have to re-release a new version with changes reverted.ConclusionBy integrating this process there are several benefits we will get like reduce manual work to build and deploy will also lead to less manual errors, log of all the releases.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*GZstMQCO9SNBIvJi9KigXQ.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@yogeshpaliyal?source=post_page---byline--2084da7bca25---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Yogesh Paliyal\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*T0kkcE4QfKpsVtgQ7jEHbQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--2084da7bca25---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"d01c\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"d23b\"\u003eThe app release process is a repetitive process and take too much time to version bump, build and upload it to play store or other app stores.\u003c/p\u003e\u003cp id=\"7147\"\u003eTo simplify the process I’ve automated this process in my project \u003ca href=\"https://github.com/yogeshpaliyal/KeyPass\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKeyPass\u003c/a\u003e using Github Actions.\u003c/p\u003e\u003ch2 id=\"b071\"\u003eRequirements\u003c/h2\u003e\u003cp id=\"140b\"\u003eFor most of the apps we have these requirements, there may be different requirements for your app.\u003c/p\u003e\u003ch2 id=\"9af8\"\u003ePrerequisites\u003c/h2\u003e\u003cul\u003e\u003cli id=\"1474\"\u003eBasic idea of Github Actions.\u003c/li\u003e\u003cli id=\"34b2\"\u003eShell Scripting.\u003c/li\u003e\u003cli id=\"d199\"\u003eAndroid gradle build.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"83c5\"\u003eEnd-to-End Process\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"64f3\"\u003eHow to trigger\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a672\"\u003eWe have the manual trigger to initiate the release process, we have few parameters to start the release.\u003cbr/\u003e\u003ca href=\"https://github.com/yogeshpaliyal/KeyPass/blob/32c267075a54e6a138091e5741681beab0ab1e3f/.github/workflows/version-bump.yaml\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLink\u003c/a\u003e to Github Workflow file.\u003c/p\u003e\u003cul\u003e\u003cli id=\"cffc\"\u003eBump Type : Choose from major/minor/patch.\u003c/li\u003e\u003cli id=\"a222\"\u003eRelease Notes: As name suggest this will be the release note for our release on play store.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"843a\"\u003eIn android we are having 2 variables to store the version of the app.\u003c/p\u003e\u003cul\u003e\u003cli id=\"789d\"\u003e\u003cstrong\u003eversionCode\u003c/strong\u003e : This number is used only to determine whether one version is more recent than another, with higher numbers indicating more recent versions. This isn’t the version number shown to users.\u003c/li\u003e\u003cli id=\"7e85\"\u003e\u003cstrong\u003eversionName\u003c/strong\u003e : The version number shown to users. The string has no other purpose than to display to users. the format of the string in \u003cstrong\u003ex.y.z\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8e87\"\u003eOn trigger we fetch the current version from \u003ccode\u003ebuild.gradle\u003c/code\u003e file where versionCode and versionName is mentioned, then we update the version code and version name and we will write the release notes using this \u003ca href=\"https://github.com/yogeshpaliyal/KeyPass/blob/32c267075a54e6a138091e5741681beab0ab1e3f/scripts/versionBump.sh\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003escript\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"2442\"\u003eCommit and merge the changes.\u003c/h2\u003e\u003cp id=\"8d36\"\u003eIn last step we bump the version and modified the release notes, but we have to merge it to master so next time when we do the version bump it will pick the correct version from master.\u003c/p\u003e\u003ch2 id=\"7614\"\u003eCreate Github Tag \u0026amp; release\u003c/h2\u003e\u003cp id=\"7989\"\u003eAfter merging the changes to master, we create the tag and release from the tag, the release can be used in future if want to check the change logs or code that we shipped in that specific release.\u003c/p\u003e\u003ch2 id=\"f52e\"\u003eGenerate AAB file\u003c/h2\u003e\u003cp id=\"9dc6\"\u003eWe have created another workflow, \u003ca href=\"https://github.com/yogeshpaliyal/KeyPass/blob/32c267075a54e6a138091e5741681beab0ab1e3f/.github/workflows/production.yml\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethis workflow\u003c/a\u003e will create the AAB file and upload the AAB to play store and Indus app store. This workflow will be triggered whenever there is a new release is created on github.\u003c/p\u003e\u003ch2 id=\"9340\"\u003eUpload on Play Store\u003c/h2\u003e\u003cp id=\"d495\"\u003eOnce the build is created the build will be uploaded on play store using \u003ca href=\"https://github.com/r0adkll/upload-google-play\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003er0adkll/upload-google-play@v1.1.3\u003c/a\u003e github action.\u003c/p\u003e\u003cp id=\"59bc\"\u003eWe can customize the github action to deploy the build on our desired channel like production, beta, alpha, etc.\u003c/p\u003e\u003ch2 id=\"bef9\"\u003eAdditional Considerations\u003c/h2\u003e\u003ch2 id=\"7774\"\u003eStop deployment\u003c/h2\u003e\u003cp id=\"490f\"\u003eWhen the build is in progress we can stop the github workflow to stop the build process in between.\u003c/p\u003e\u003ch2 id=\"e9dd\"\u003eRevert the release\u003c/h2\u003e\u003cp id=\"32d3\"\u003eThere is no direct option supported by play store to revert the release, instead we have to re-release a new version with changes reverted.\u003c/p\u003e\u003ch2 id=\"27a0\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"e047\"\u003eBy integrating this process there are several benefits we will get like reduce manual work to build and deploy will also lead to less manual errors, log of all the releases.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-30T15:22:31.901Z",
  "modifiedTime": null
}
