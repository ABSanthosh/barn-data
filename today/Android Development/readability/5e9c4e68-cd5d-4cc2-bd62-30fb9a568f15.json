{
  "id": "5e9c4e68-cd5d-4cc2-bd62-30fb9a568f15",
  "title": "ObjectStore",
  "link": "https://android-arsenal.com/details/1/8484",
  "description": "A modular object storage framework for Kotlin multiplatform projects.",
  "author": "",
  "published": "Tue, 12 Mar 2024 06:09:39 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 4819,
  "excerpt": "Database | ObjectStore by Drew Carlson (DrewCarlson)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "ObjectStore A modular object storage framework for Kotlin multiplatform projects. Usage ObjectStore provides a simple key/value storage interface which by default uses Type details to derive the Key automatically. To create an ObjectStore you need two things: ObjectStoreWriter: Providers the persistence mechanism to store data for later access. ObjectStoreSerializer: Provides the serialization mechanism to transform objects for storage. val store = ObjectStore( storeWriter = SharedPreferencesStoreWriter(\"prefs\", context), storeSerializer = JsonStoreSerializer() ) // Store an object store.put(User(\"username\", \"email\", ...)) // Get an object or null val user: User? = store.getOrNull\u003cUser\u003e() // Get an object or throw val user: User = store.get\u003cUser\u003e() // Get an object or default val user: User = store.get(default = User(...)) // Get a StateFlow val userFlow: StateFlow\u003cUser?\u003e = store.getFlow\u003cUser\u003e() // Calls to `put` new user objects will be emitted userFlow.collect { println(it) } // Get all keys store.keys() // Remove an object store.remove\u003cUser\u003e() // Remove all objects store.clear() When storing basic types such as String, Boolean, etc. you must provide a key for the record. store.put(false, key = \"my_key\") store.get\u003cBoolean\u003e(default = false, key = \"my_key\") NOTE: When targeting Javascript, all classes used with ObjectStore must be annotated with @Serializable. This is used to derive class and parameter name based keys, other platforms do not use the Kotlinx.serialization library in objectstore-core. Serializers Turning objects into data suitable for storage requires a ObjectStoreSerializer implementation. The following modules provide serialization capabilities using the matching Kotlinx.serialization module. objectstore-cbor: CborStoreSerializer() objectstore-json: JsonStoreSerializer() objectstore-protobuf: ProtoBufStoreSerializer() Writers Storing object data requires a ObjectStoreWriter implementation. The following Writers are provided in the objectstore-core module: Android: SharedPreferencesStoreWriter(\"prefs_name\", context) iOS/macOS/tvOS/watchOS: UserDefaultsStoreWriter() Browser JS: LocalStorageStoreWriter() All: InMemoryStoreWriter() File Writer The objectstore-fs provides file based storage using okio. All targets are supported except iosArm32 and jsBrowser. val store = ObjectStore( storeWriter = FileStoreWriter(\"/storage-directory\") ) The provided path must not exist or be an existing directory where files can be stored. Each value will be stored in a separate file using the hex encoded key as the filename. Secure Writers To store data in a secure way, the objectstore-secure module provides Writers which encrypt data when stored on disk. iOS/macOS/tvOS/watchOS: KeychainStoreWritre(\"com.service.name\", \"com.service.group\") Android: EncryptedSharedPreferencesStoreWriter(\"prefs_name\", context) Wrapped Writers The ValueTransformingStoreWriter provides a hook to encode/decode values before they are written to disk. The transform methods are defined as (type: KType, value: T) -\u003e T, when unhandled you must return the original value. val storeWriter = InMemoryStoreWriter().transformValue( transformGet = { _, value -\u003e (value as? String)?.base64Decoded() ?: value }, transformSet = { _, value -\u003e (value as? String)?.base64Encoded() ?: value } ) The MemCachedStoreWriter provides lazy in-memory caching around any ObjectStoreWriter implementation. val storeWriter = FileStoreWriter(\"/data\").memCached() Download repositories { mavenCentral() // Or snapshots maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\") } dependencies { implementation(\"org.drewcarlson:objectstore-core:$VERSION\") // Serializers implementation(\"org.drewcarlson:objectstore-cbor:$VERSION\") implementation(\"org.drewcarlson:objectstore-json:$VERSION\") implementation(\"org.drewcarlson:objectstore-protobuf:$VERSION\") // Writers implementation(\"org.drewcarlson:objectstore-fs:$VERSION\") implementation(\"org.drewcarlson:objectstore-secure:$VERSION\") } Toml (Click to expand) [versions] objectstore = \"1.0.0-SNAPSHOT\" [libraries] objectstore-core = { module = \"org.drewcarlson:objectstore-core\", version.ref = \"objectstore\" } objectstore-fs = { module = \"org.drewcarlson:objectstore-fs\", version.ref = \"objectstore\" } objectstore-cbor = { module = \"org.drewcarlson:objectstore-cbor\", version.ref = \"objectstore\" } objectstore-json = { module = \"org.drewcarlson:objectstore-json\", version.ref = \"objectstore\" } objectstore-protobuf = { module = \"org.drewcarlson:objectstore-protobuf\", version.ref = \"objectstore\" } objectstore-secure = { module = \"org.drewcarlson:objectstore-secure\", version.ref = \"objectstore\" } License This project is licensed under Apache-2.0, found in LICENSE.",
  "image": "https://avatars.githubusercontent.com/u/1407121?v=4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eObjectStore\u003c/h2\u003e\u003c/p\u003e  \u003cp dir=\"auto\"\u003eA modular object storage framework for Kotlin multiplatform projects.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ccode\u003eObjectStore\u003c/code\u003e provides a simple key/value storage interface which by default uses Type details to derive the Key automatically. To create an \u003ccode\u003eObjectStore\u003c/code\u003e you need two things:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eObjectStoreWriter\u003c/code\u003e: Providers the persistence mechanism to store data for later access.\u003c/li\u003e \u003cli\u003e\u003ccode\u003eObjectStoreSerializer\u003c/code\u003e: Provides the serialization mechanism to transform objects for storage.\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val store = ObjectStore( storeWriter = SharedPreferencesStoreWriter(\u0026#34;prefs\u0026#34;, context), storeSerializer = JsonStoreSerializer() ) // Store an object store.put(User(\u0026#34;username\u0026#34;, \u0026#34;email\u0026#34;, ...)) // Get an object or null val user: User? = store.getOrNull\u0026lt;User\u0026gt;() // Get an object or throw val user: User = store.get\u0026lt;User\u0026gt;() // Get an object or default val user: User = store.get(default = User(...)) // Get a StateFlow val userFlow: StateFlow\u0026lt;User?\u0026gt; = store.getFlow\u0026lt;User\u0026gt;() // Calls to `put` new user objects will be emitted userFlow.collect { println(it) } // Get all keys store.keys() // Remove an object store.remove\u0026lt;User\u0026gt;() // Remove all objects store.clear()\"\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e store \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eObjectStore\u003c/span\u003e(\n    storeWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eSharedPreferencesStoreWriter\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eprefs\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, context),\n    storeSerializer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJsonStoreSerializer\u003c/span\u003e()\n)\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Store an object\u003c/span\u003e\nstore.put(\u003cspan\u003eUser\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eusername\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eemail\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e..\u003c/span\u003e.))\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Get an object or null\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e user\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e store.getOrNull\u0026lt;\u003cspan\u003eUser\u003c/span\u003e\u0026gt;()\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Get an object or throw\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e user\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e store.get\u0026lt;\u003cspan\u003eUser\u003c/span\u003e\u0026gt;()\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Get an object or default\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e user\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e store.get(default \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e(\u003cspan\u003e..\u003c/span\u003e.))\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Get a StateFlow\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e userFlow\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStateFlow\u003c/span\u003e\u0026lt;\u003cspan\u003eUser\u003c/span\u003e?\u0026gt; \u003cspan\u003e=\u003c/span\u003e store.getFlow\u0026lt;\u003cspan\u003eUser\u003c/span\u003e\u0026gt;()\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Calls to `put` new user objects will be emitted\u003c/span\u003e\nuserFlow.collect { \u003cspan\u003eprintln\u003c/span\u003e(it) }\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Get all keys\u003c/span\u003e\nstore.keys()\n\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Remove an object\u003c/span\u003e\nstore.remove\u0026lt;\u003cspan\u003eUser\u003c/span\u003e\u0026gt;()\n\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Remove all objects\u003c/span\u003e\nstore.clear()\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eWhen storing basic types such as \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eBoolean\u003c/code\u003e, etc. you must provide a \u003ccode\u003ekey\u003c/code\u003e for the record.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"store.put(false, key = \u0026#34;my_key\u0026#34;) store.get\u0026lt;Boolean\u0026gt;(default = false, key = \u0026#34;my_key\u0026#34;)\"\u003e\u003cpre\u003estore.put(\u003cspan\u003efalse\u003c/span\u003e, key \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003emy_key\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\nstore.get\u0026lt;\u003cspan\u003eBoolean\u003c/span\u003e\u0026gt;(default \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e, key \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003emy_key\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e When targeting Javascript, all classes used with \u003ccode\u003eObjectStore\u003c/code\u003e must be annotated with \u003ccode\u003e@Serializable\u003c/code\u003e. This is used to derive class and parameter name based keys, other platforms do not use the \u003ca href=\"https://github.com/Kotlin/kotlinx.serialization\" rel=\"nofollow\" target=\"_blank\"\u003e\u003ccode\u003eKotlinx.serialization\u003c/code\u003e\u003c/a\u003e library in \u003ccode\u003eobjectstore-core\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSerializers\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eTurning objects into data suitable for storage requires a \u003ccode\u003eObjectStoreSerializer\u003c/code\u003e implementation. The following modules provide serialization capabilities using the matching \u003ca href=\"https://github.com/Kotlin/kotlinx.serialization\" rel=\"nofollow\" target=\"_blank\"\u003eKotlinx.serialization\u003c/a\u003e module.\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ccode\u003eobjectstore-cbor\u003c/code\u003e: \u003ccode\u003eCborStoreSerializer()\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eobjectstore-json\u003c/code\u003e: \u003ccode\u003eJsonStoreSerializer()\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eobjectstore-protobuf\u003c/code\u003e: \u003ccode\u003eProtoBufStoreSerializer()\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eWriters\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eStoring object data requires a \u003ccode\u003eObjectStoreWriter\u003c/code\u003e implementation. The following Writers are provided in the \u003ccode\u003eobjectstore-core\u003c/code\u003e module:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAndroid: \u003ccode\u003eSharedPreferencesStoreWriter(\u0026#34;prefs_name\u0026#34;, context)\u003c/code\u003e\u003c/li\u003e \u003cli\u003eiOS/macOS/tvOS/watchOS: \u003ccode\u003eUserDefaultsStoreWriter()\u003c/code\u003e\u003c/li\u003e \u003cli\u003eBrowser JS: \u003ccode\u003eLocalStorageStoreWriter()\u003c/code\u003e\u003c/li\u003e \u003cli\u003eAll: \u003ccode\u003eInMemoryStoreWriter()\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eFile Writer\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe \u003ccode\u003eobjectstore-fs\u003c/code\u003e provides file based storage using \u003ca href=\"https://square.github.io/okio\" rel=\"nofollow\" target=\"_blank\"\u003eokio\u003c/a\u003e. All targets are supported except \u003ccode\u003eiosArm32\u003c/code\u003e and \u003ccode\u003ejsBrowser\u003c/code\u003e.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val store = ObjectStore( storeWriter = FileStoreWriter(\u0026#34;/storage-directory\u0026#34;) )\"\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e store \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eObjectStore\u003c/span\u003e(\n    storeWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFileStoreWriter\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/storage-directory\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eThe provided path must not exist or be an existing directory where files can be stored. Each value will be stored in a separate file using the hex encoded key as the filename.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eSecure Writers\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo store data in a secure way, the \u003ccode\u003eobjectstore-secure\u003c/code\u003e module provides Writers which encrypt data when stored on disk.\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eiOS/macOS/tvOS/watchOS: \u003ccode\u003eKeychainStoreWritre(\u0026#34;com.service.name\u0026#34;, \u0026#34;com.service.group\u0026#34;)\u003c/code\u003e\u003c/li\u003e \u003cli\u003eAndroid: \u003ccode\u003eEncryptedSharedPreferencesStoreWriter(\u0026#34;prefs_name\u0026#34;, context)\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eWrapped Writers\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe \u003ccode\u003eValueTransformingStoreWriter\u003c/code\u003e provides a hook to encode/decode values before they are written to disk. The transform methods are defined as \u003ccode\u003e(type: KType, value: T) -\u0026gt; T\u003c/code\u003e, when unhandled you must return the original value.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val storeWriter = InMemoryStoreWriter().transformValue( transformGet = { _, value -\u0026gt; (value as? String)?.base64Decoded() ?: value }, transformSet = { _, value -\u0026gt; (value as? String)?.base64Encoded() ?: value } )\"\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e storeWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eInMemoryStoreWriter\u003c/span\u003e().transformValue(\n    transformGet \u003cspan\u003e=\u003c/span\u003e { _, value \u003cspan\u003e-\u0026gt;\u003c/span\u003e (value \u003cspan\u003eas\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e)?.base64Decoded() \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e value },\n    transformSet \u003cspan\u003e=\u003c/span\u003e { _, value \u003cspan\u003e-\u0026gt;\u003c/span\u003e (value \u003cspan\u003eas\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e)?.base64Encoded() \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e value }\n)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eThe \u003ccode\u003eMemCachedStoreWriter\u003c/code\u003e provides lazy in-memory caching around any \u003ccode\u003eObjectStoreWriter\u003c/code\u003e implementation.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val storeWriter = FileStoreWriter(\u0026#34;/data\u0026#34;).memCached()\"\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e storeWriter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFileStoreWriter\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/data\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e).memCached()\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDownload\u003c/h2\u003e\u003c/p\u003e   \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"repositories { mavenCentral() // Or snapshots maven(\u0026#34;https://s01.oss.sonatype.org/content/repositories/snapshots/\u0026#34;) } dependencies { implementation(\u0026#34;org.drewcarlson:objectstore-core:$VERSION\u0026#34;) // Serializers implementation(\u0026#34;org.drewcarlson:objectstore-cbor:$VERSION\u0026#34;) implementation(\u0026#34;org.drewcarlson:objectstore-json:$VERSION\u0026#34;) implementation(\u0026#34;org.drewcarlson:objectstore-protobuf:$VERSION\u0026#34;) // Writers implementation(\u0026#34;org.drewcarlson:objectstore-fs:$VERSION\u0026#34;) implementation(\u0026#34;org.drewcarlson:objectstore-secure:$VERSION\u0026#34;) }\"\u003e\u003cpre\u003erepositories {\n    mavenCentral()\n    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Or snapshots\u003c/span\u003e\n    maven(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://s01.oss.sonatype.org/content/repositories/snapshots/\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n}\n\ndependencies {\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-core:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    \n    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Serializers\u003c/span\u003e\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-cbor:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-json:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-protobuf:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    \n    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Writers\u003c/span\u003e\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-fs:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-secure:\u003cspan\u003e$VERSION\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n}\u003c/pre\u003e\u003c/div\u003e \u003cdetails\u003e \u003csummary\u003eToml (Click to expand)\u003c/summary\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"[versions] objectstore = \u0026#34;1.0.0-SNAPSHOT\u0026#34; [libraries] objectstore-core = { module = \u0026#34;org.drewcarlson:objectstore-core\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; } objectstore-fs = { module = \u0026#34;org.drewcarlson:objectstore-fs\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; } objectstore-cbor = { module = \u0026#34;org.drewcarlson:objectstore-cbor\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; } objectstore-json = { module = \u0026#34;org.drewcarlson:objectstore-json\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; } objectstore-protobuf = { module = \u0026#34;org.drewcarlson:objectstore-protobuf\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; } objectstore-secure = { module = \u0026#34;org.drewcarlson:objectstore-secure\u0026#34;, version.ref = \u0026#34;objectstore\u0026#34; }\"\u003e\u003cpre\u003e[\u003cspan\u003eversions\u003c/span\u003e]\n\u003cspan\u003eobjectstore\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e1.0.0-SNAPSHOT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\n[\u003cspan\u003elibraries\u003c/span\u003e]\n\u003cspan\u003eobjectstore-core\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-core\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\n\u003cspan\u003eobjectstore-fs\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-fs\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\n\u003cspan\u003eobjectstore-cbor\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-cbor\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\n\u003cspan\u003eobjectstore-json\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-json\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\n\u003cspan\u003eobjectstore-protobuf\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-protobuf\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\n\u003cspan\u003eobjectstore-secure\u003c/span\u003e = { \u003cspan\u003emodule\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorg.drewcarlson:objectstore-secure\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003eversion.ref\u003c/span\u003e = \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eobjectstore\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e \u003c/details\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eLicense\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThis project is licensed under Apache-2.0, found in \u003ca href=\"https://github.com/DrewCarlson/ObjectStore/blob/main/LICENSE\" rel=\"nofollow\" target=\"_blank\"\u003eLICENSE\u003c/a\u003e.\u003c/p\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
