{
  "id": "dd9c5335-f299-4a78-a3b0-fb76cc9e8e85",
  "title": "Android Weekly Issue #635",
  "link": "https://androidweekly.net/issues/issue-635/rss.xml",
  "description": "Articles \u0026 Tutorials Sponsored The subtle art of making releases boring Read how Squarespace’s Unfold team made their mobile release process boring: learn what these non-eventful releases are like and how they came about, dig into how eventful they used to be, and hear why having uneventful releases is a superpower. Using Google Open-source Android Security Lint Library Mickco Lai takes a look at some existing security lint checks that can help you identify security issues in your codebase. Advanced Kotlin Flow Cheat sheet (for Android Engineer) This cheat sheet consolidates the key concepts of various aspects of Kotlin Flows and Gaëlle Minisini shares the insights picked up along the way. Building an effective abstraction layer for UI resources on Android Michell Bak shows how to create a flexible, type-safe abstraction layer for managing UI resources, such as strings and drawables, in Android development. Android Release Automation - Journey to Fully Automated Weekly Releases Marjana Karzek describes the journey to fully automated weekly releases has transformed processes, reducing the time it takes to successfully roll out a feature to 100% of users from 21-25 days to just nine days without engineers getting involved. How to Implement a Splash Screen in Jetpack Compose with the SplashScreen API Learn how to create a simple splash screen using the SplashScreen API. MutableState or MutableStateFlow Kerry Bisset explore the functionalities of both MutableState and MutableStateFlow, comparing their use cases and highlighting how they cater to different needs within the Compose ecosystem Material3 PullToRefresh for Jetpack Compose Stefano Natali explores the new and improved way to implement the PullToRefresh in your Compose UI. Composing Suspend Functions Tanya Arora dives into the world of asynchronous programming with Kotlin coroutines and unlock the full potential of concurrent computation and parallel processing. Efficient Render Passes — On Tile-Based Rendering Hardware Shahbaz Youssefi explains features of TBR hardware, how it can be most efficiently used, how Vulkan makes it very easy to do that, and how OpenGL ES makes it so easy to ruin performance. Android Accessibility Checklist Eevis Panula developed an accessibility checklist for Android developers which aims to help catch many possible accessibility problems. Piloting Kotlin Multiplatform is Easy. Scaling is Hard. To get the most out of KMP for your team, and for KMP as a platform to succeed, Kevin Galligan considers why we need to make scaling easy as well. Introducing: Anvil-KSP After more than a year of work and contributions from the community, Zac Sweers announces a functionally-complete KSP implementation of Anvil code gen. A simple way to proxy local HTTP endpoints for Android Development Mike Yerou takes a look at dev tunnels, which offer a convenient and secure way to proxy local HTTP traffic for your Android app development with minimal configuration and code changes. Place a sponsored post Advertise your Android dev course to over 80k readers We reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development course! Libraries \u0026 Code Shukan Shukan is a minimalist habit tracker built using Kotlin with Jetpack Compose and Room. krossbow A Kotlin multiplatform coroutine-based STOMP client over websockets, with built-in conversions. Bottom Sheet - Composables Core A renderless, highly performant foundational component to build bottom sheets with, jam-packed with styling features without compromising on accessibility or keyboard interactions News Kotlin Roundup: Ktor in Focus Daria Voronina shines the spotlight on Ktor, the framework for building asynchronous servers and clients in connected systems! Stabilize Your Kotlin Development with Koin 3.5 Long-Term Support Kotzilla announces Long Term Support (LTS) versions of Koin. Videos \u0026 Podcasts Applying the Strategy Pattern in Kotlin Dave Leeds examines why the strategy pattern is helpful, applies the pattern in Kotlin, and then shows how to use some of Kotlin's language features to put a more modern spin on it. Background Work in Android: Strategies and Best Practices Aayush Chaudhary traces the history and evolution of background work in Android. Understand how background task management has evolved over different Android versions and the reasons behind these changes. 3 Small Tips To Improve Your Refactoring! Charfaoui Younes discusses how sealed classes and interfaces can improve your code and examines the differences between them. Targeting Android 15 - Why Your App Is NOT Ready Philipp Lackner teaches about the new private space in Android 15 and why it will cause problems for lots of different types of apps. Jetpack Compose To SwiftUI Guide Daniel Atitienei shares a brief introduction to SwiftUI from the perspective of a Jetpack Compose use. Lifecycle path to Multiplatform Google recently converted the AndroidX Lifecycle libraries (ViewModel, Lifecycle Runtime, and Compose support) to Kotlin multi-platform (KMP).",
  "author": "",
  "published": "Sun, 11 Aug 2024 12:38:21 +0000",
  "source": "https://androidweekly.net/rss.xml",
  "categories": null,
  "byline": "",
  "length": 1751,
  "excerpt": "",
  "siteName": "",
  "favicon": "",
  "text": "Read how Squarespace’s Unfold team made their mobile release process boring: learn what these non-eventful releases are like and how they came about, dig into how eventful they used to be, and hear why having uneventful releases is a superpower. Kerry Bisset explore the functionalities of both MutableState and MutableStateFlow, comparing their use cases and highlighting how they cater to different needs within the Compose ecosystem Tanya Arora dives into the world of asynchronous programming with Kotlin coroutines and unlock the full potential of concurrent computation and parallel processing. Eevis Panula developed an accessibility checklist for Android developers which aims to help catch many possible accessibility problems. After more than a year of work and contributions from the community, Zac Sweers announces a functionally-complete KSP implementation of Anvil code gen. Shukan is a minimalist habit tracker built using Kotlin with Jetpack Compose and Room. A Kotlin multiplatform coroutine-based STOMP client over websockets, with built-in conversions. A renderless, highly performant foundational component to build bottom sheets with, jam-packed with styling features without compromising on accessibility or keyboard interactions Daria Voronina shines the spotlight on Ktor, the framework for building asynchronous servers and clients in connected systems! Dave Leeds examines why the strategy pattern is helpful, applies the pattern in Kotlin, and then shows how to use some of Kotlin's language features to put a more modern spin on it. Google recently converted the AndroidX Lifecycle libraries (ViewModel, Lifecycle Runtime, and Compose support) to Kotlin multi-platform (KMP). ]]\u003e",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://engineering.squarespace.com/blog/2024/unfolds-modern-mobile-release-process-and-the-subtle-art-of-making-them-boring\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/66b8af/ba3c93bc32cd00e930/square_square_runway.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eRead how Squarespace’s Unfold team made their mobile release process boring: learn what these non-eventful releases are like and how they came about, dig into how eventful they used to be, and hear why having uneventful releases is a superpower.\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\n\n\n\u003cdiv\u003e\u003cp\u003eKerry Bisset explore the functionalities of both MutableState and MutableStateFlow, comparing their use cases and highlighting how they cater to different needs within the Compose ecosystem\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eTanya Arora dives into the world of asynchronous programming with Kotlin coroutines and unlock the full potential of concurrent computation and parallel processing.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eEevis Panula developed an accessibility checklist for Android developers which aims to help catch many possible accessibility problems. \n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eAfter more than a year of work and contributions from the community, Zac Sweers announces a functionally-complete KSP implementation of Anvil code gen.\n\u003c/p\u003e\u003c/div\u003e\n\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://androidweekly.net/jobs/new\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/66b8b0/3a3c93bc32cd00e942/square_aw.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://github.com/eesuhn/Shukan\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/66b7f4/fc3c93bc32cd00d936/square_Bildschirmfoto_2024-08-11_um_14.37.56.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eShukan is a minimalist habit tracker built using Kotlin with Jetpack Compose and Room.\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eA Kotlin multiplatform coroutine-based STOMP client over websockets, with built-in conversions. \n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eA renderless, highly performant foundational component to build bottom sheets with, jam-packed with styling features without compromising on accessibility or keyboard interactions\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eDaria Voronina shines the spotlight on Ktor, the framework for building asynchronous servers and clients in connected systems! \n\u003c/p\u003e\u003c/div\u003e\n\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=-Ak44LFwlwI\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/66b803/493c93bc32cd00da52/square_Bildschirmfoto_2024-08-11_um_14.36.42.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eDave Leeds examines why the strategy pattern is helpful, applies the pattern in Kotlin, and then shows how to use some of Kotlin\u0026#39;s language features to put a more modern spin on it.\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eGoogle recently converted the AndroidX Lifecycle libraries (ViewModel, Lifecycle Runtime, and Compose support) to Kotlin multi-platform (KMP).\n\u003c/p\u003e\u003c/div\u003e\n]]\u0026gt;\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
