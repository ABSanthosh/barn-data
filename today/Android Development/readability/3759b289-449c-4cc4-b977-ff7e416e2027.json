{
  "id": "3759b289-449c-4cc4-b977-ff7e416e2027",
  "title": "Migrate your Android Project to Compose Multiplatform Project",
  "link": "https://proandroiddev.com/migrate-your-android-project-to-compose-multiplatform-project-0708897caea3?source=rss----c72404660798---4",
  "description": "",
  "author": "Abhiraj Khare",
  "published": "Sat, 04 Jan 2025 19:49:33 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "ios",
    "androiddev",
    "jetpack-compose",
    "kotlin-multiplatform",
    "android"
  ],
  "byline": "Abhiraj Khare",
  "length": 6951,
  "excerpt": "Hi all, I have been working on a Compose Multiplatform project for last few months and this learning journey was remarkable. In same project I got chance to migrate android application codebase to…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Hi all, I have been working on a Compose Multiplatform project for last few months and this learning journey was remarkable. In same project I got chance to migrate android application codebase to Compose Multiplatform which was able to build apps for iOS, Android and Desktop.Prerequisite for such migration is that your project should haveSingle activity and compose navigation for all composable screens.No fragments and no XML viewsKtor as network api clientRoom or SqlDelight for local storageUse of expect/actual to write platform specific codeHere I will be sharing step by step process to migrate sample multi-modular android code into Compose Multiplatform.Clone below repository to get android sample implementation. We will be converting this sample into Compose Multiplatform. (Branch: android_sample)Add blow plugins in project and all module level build.gradle.// Add these plugins in project build.gradlealias(libs.plugins.kotlinMultiplatform) apply falsealias(libs.plugins.composeMultiplatform) apply false// Add these plugins in each module build.gradlealias(libs.plugins.kotlinMultiplatform)alias(libs.plugins.composeMultiplatform)// Remove if present in each module build.gradlealias(libs.plugins.kotlin.android)// Version Catalog:kotlin = \"2.0.0\"compose-multiplatform = \"1.7.0\"kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }composeMultiplatform = { id = \"org.jetbrains.compose\", version.ref = \"compose-multiplatform\" }kotlinMultiplatform = { id = \"org.jetbrains.kotlin.multiplatform\", version.ref = \"kotlin\" }Remove “compileOptions” and “kotlinOptions” if present in all module level build.gradle.All all targets if you want to support your application on Web, iOS, Android and Desktop.wasm: Browser applicationandroidTarget: Android applicationiosXXX: iOS applicationjvm: MacOs and Windows Desktop application running JVMkotlin { @OptIn(ExperimentalWasmDsl::class) wasmJs { browser { val projectDirPath = project.projectDir.path commonWebpackConfig { devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply { static = (static ?: mutableListOf()).apply { // Serve sources to debug inside browser add(projectDirPath) } } } } } androidTarget { @OptIn(ExperimentalKotlinGradlePluginApi::class) compilerOptions { jvmTarget.set(JvmTarget.JVM_11) } } iosX64() iosArm64() iosSimulatorArm64() jvm(\"desktop\") sourceSets { val desktopMain by getting commonMain.dependencies { } androidMain.dependencies { } iosMain.dependencies { } desktopMain.dependencies { } wasmJsMain.dependencies { } }}// Add this in app modulelistOf( iosX64(), iosArm64(), iosSimulatorArm64()).forEach { iosTarget -\u003e iosTarget.binaries.framework { // This will \"app\" fromework baseName = \"app\" isStatic = true }}// Instead of this for ios targetiosX64()iosArm64()iosSimulatorArm64()With sourSets, we can define all platform specific dependencies.commonMain: It will have all multiplatform dependencies which is work on all declared platform. Before adding any dependencies here check whether that library has support on all platform you defined in gradle.androidMain: dependencies which are supported on Android platform.iosMain: dependencies which are supported on iOS platform.desktopMain: dependencies which are supported on Desktop platform.wasmJsMain: dependencies which are supported on Browser platform.Note: Browser application are not advised to develop with Compose Multiplatform as it is alpha stage.Message from google: “New ‘wasm’ target is Work-in-Progress and is subject to change without notice. Please report encountered issues to https://kotl.in/issue”Add compose and module dependencies in commonMain. And sync the project. For navigation, make sure to use JetBrains navigation.implementation(project(\":FeatureOne\"))implementation(project(\":FeatureTwo\"))implementation(project(\":FeatureThree\"))implementation(compose.materialIconsExtended)implementation(compose.ui)implementation(compose.animationGraphics)implementation(compose.material3)implementation(compose.components.resources)implementation(compose.components.uiToolingPreview)implementation(compose.runtime)implementation(compose.foundation)implementation(compose.animation)implementation(libs.navigation)// Version Catalognavigation = \"2.8.0-alpha08\"navigation = { group = \"org.jetbrains.androidx.navigation\", name = \"navigation-compose\", version.ref = \"navigation\" }Now add four directories in each module -\u003e srccommonMain/kotlinandroidMain/kotliniosMain/kotlindesktopMain/kotlinwasmJsMain/kotlinCopy all code of compose, viewModel or business logic written with any multiplatform library into commonMain.In our case for app module, we will move MainActivity, res/ and AndroidManifest.xml in androidMain/kotlin and rest all files in commonMain/kotlin in app module. if any resource/assets belongs to compose UI is present, then we will move them to commonMain/composeResources.Similarly we will move files for other modules. And then build the project and try running on Android devices.Current setup will only work for Android target so, we need to enable other platform target as well. So we will build other targets with the help of “Kotlin Multiplatform Wizard”.Using Kotlin Multiplatform sample, let’s create sample with all required targets. Select Android, iOS, Desktop and Web download sample.Try running all targets:Output will be something like this:Now let’s enable iOS target first, copy “iosApp” folder and paste it into our project.Create MainViewController.kt in: app-\u003e src/iosMain/kotlinpackage com.abkhare.multiplatformmigrationimport androidx.compose.ui.window.ComposeUIViewControllerfun MainViewController() = ComposeUIViewController { AppNavigation() }Now open “iosApp” in Xcode.Modify build script to create compose framework in Xcode. Since our root module is app module so we need to specify “app:embedAndSignAppleFrameworkForXcode”.Now point to correct framework in “ContentView.swift”.You may have to resolve some errors using: https://github.com/abkhare/ComposeMultiplatformMigration/commit/97205c6d9a96a73cbdf7583cee4a6865a2ecf9bdAnd run the project in Xcode. And that’s it you will be able to build the application on iPhone device.Now to Enable “DeskTop” target, create “main.kt” in app-\u003e src/desktopMain/kotlin.fun main() = application { Window( onCloseRequest = ::exitApplication, title = \"MultiplatformSample\", ) { AppNavigation() }}Now run the application by play icon beside main function.You can find full working source code in below repository (branch: main)Stay tuned, I will be sharing more such in-depth articles on Compose Multiplatform.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*xxXBV-5F7Fk_mGYyNinErg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@abhirajkhare?source=post_page---byline--0708897caea3--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Abhiraj Khare\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*Z2wKVp7b89vKWDqJ4t5Z7A.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--0708897caea3--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"cdd1\"\u003eHi all, I have been working on a Compose Multiplatform project for last few months and this learning journey was remarkable. In same project I got chance to migrate android application codebase to Compose Multiplatform which was able to build apps for iOS, Android and Desktop.\u003c/p\u003e\u003cp id=\"d3d6\"\u003ePrerequisite for such migration is that your project should have\u003c/p\u003e\u003cul\u003e\u003cli id=\"5e98\"\u003eSingle activity and compose navigation for all composable screens.\u003c/li\u003e\u003cli id=\"c99d\"\u003eNo fragments and no XML views\u003c/li\u003e\u003cli id=\"943a\"\u003eKtor as network api client\u003c/li\u003e\u003cli id=\"7140\"\u003eRoom or SqlDelight for local storage\u003c/li\u003e\u003cli id=\"5cc2\"\u003eUse of expect/actual to write platform specific code\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c47f\"\u003eHere I will be sharing step by step process to migrate sample multi-modular android code into Compose Multiplatform.\u003c/p\u003e\u003cp id=\"79d2\"\u003eClone below repository to get android sample implementation. We will be converting this sample into Compose Multiplatform. (Branch: \u003ca href=\"https://github.com/abkhare/ComposeMultiplatformMigration/tree/android_sample\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eandroid_sample\u003c/a\u003e)\u003c/p\u003e\u003cp id=\"a014\"\u003eAdd blow plugins in project and all module level build.gradle.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2fce\"\u003e// Add these plugins in project build.gradle\u003cbr/\u003ealias(libs.plugins.kotlinMultiplatform) apply false\u003cbr/\u003ealias(libs.plugins.composeMultiplatform) apply false\u003cp\u003e// Add these plugins in each module build.gradle\u003cbr/\u003ealias(libs.plugins.kotlinMultiplatform)\u003cbr/\u003ealias(libs.plugins.composeMultiplatform)\u003cbr/\u003e// Remove if present in each module build.gradle\u003cbr/\u003ealias(libs.plugins.kotlin.android)\u003c/p\u003e\u003cp\u003e// Version Catalog:\u003cbr/\u003ekotlin = \u0026#34;2.0.0\u0026#34;\u003cbr/\u003ecompose-multiplatform = \u0026#34;1.7.0\u0026#34;\u003cbr/\u003ekotlin-android = { id = \u0026#34;org.jetbrains.kotlin.android\u0026#34;, version.ref = \u0026#34;kotlin\u0026#34; }\u003cbr/\u003ecomposeMultiplatform = { id = \u0026#34;org.jetbrains.compose\u0026#34;, version.ref = \u0026#34;compose-multiplatform\u0026#34; }\u003cbr/\u003ekotlinMultiplatform = { id = \u0026#34;org.jetbrains.kotlin.multiplatform\u0026#34;, version.ref = \u0026#34;kotlin\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"57f1\"\u003eRemove “compileOptions” and “\u003cem\u003ekotlinOptions\u003c/em\u003e” if present in all module level build.gradle.\u003c/p\u003e\u003cp id=\"4d4a\"\u003eAll all targets if you want to support your application on Web, iOS, Android and Desktop.\u003c/p\u003e\u003cul\u003e\u003cli id=\"9c9d\"\u003ewasm: Browser application\u003c/li\u003e\u003cli id=\"ca05\"\u003eandroidTarget: Android application\u003c/li\u003e\u003cli id=\"8763\"\u003eiosXXX: iOS application\u003c/li\u003e\u003cli id=\"7e38\"\u003ejvm: MacOs and Windows Desktop application running JVM\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"00c3\"\u003ekotlin {\u003cbr/\u003e    @OptIn(ExperimentalWasmDsl::class)\u003cbr/\u003e    wasmJs {\u003cbr/\u003e        browser {\u003cbr/\u003e            val projectDirPath = project.projectDir.path\u003cbr/\u003e            commonWebpackConfig {\u003cbr/\u003e                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {\u003cbr/\u003e                    static = (static ?: mutableListOf()).apply {\u003cbr/\u003e                        // Serve sources to debug inside browser\u003cbr/\u003e                        add(projectDirPath)\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cp\u003e    androidTarget {\u003cbr/\u003e        @OptIn(ExperimentalKotlinGradlePluginApi::class)\u003cbr/\u003e        compilerOptions {\u003cbr/\u003e            jvmTarget.set(JvmTarget.JVM_11)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    iosX64()\u003cbr/\u003e    iosArm64()\u003cbr/\u003e    iosSimulatorArm64()\u003c/p\u003e\u003cp\u003e    jvm(\u0026#34;desktop\u0026#34;)\u003c/p\u003e\u003cp\u003e    sourceSets {\u003cbr/\u003e        val desktopMain by getting\u003cbr/\u003e        commonMain.dependencies {\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e        androidMain.dependencies {\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e        iosMain.dependencies {\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e        desktopMain.dependencies {\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e        wasmJsMain.dependencies {\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"b8cc\"\u003e// Add this in app module\u003cbr/\u003elistOf(\u003cbr/\u003e    iosX64(),\u003cbr/\u003e    iosArm64(),\u003cbr/\u003e    iosSimulatorArm64()\u003cbr/\u003e).forEach { iosTarget -\u0026gt;\u003cbr/\u003e    iosTarget.binaries.framework {\u003cbr/\u003e        // This will \u0026#34;app\u0026#34; fromework\u003cbr/\u003e        baseName = \u0026#34;app\u0026#34;\u003cbr/\u003e        isStatic = true\u003cbr/\u003e    }\u003cbr/\u003e}\u003cbr/\u003e// Instead of this for ios target\u003cbr/\u003eiosX64()\u003cbr/\u003eiosArm64()\u003cbr/\u003eiosSimulatorArm64()\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ec83\"\u003eWith sourSets, we can define all platform specific dependencies.\u003c/p\u003e\u003cp id=\"4919\"\u003e\u003cstrong\u003ecommonMain\u003c/strong\u003e: It will have all multiplatform dependencies which is work on all declared platform. \u003cem\u003eBefore adding any dependencies here check whether that library has support on all platform you defined in gradle\u003c/em\u003e\u003cstrong\u003e.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"153a\"\u003e\u003cstrong\u003eandroidMain\u003c/strong\u003e: dependencies which are supported on Android platform.\u003c/p\u003e\u003cp id=\"5428\"\u003e\u003cstrong\u003eiosMain\u003c/strong\u003e: dependencies which are supported on iOS platform.\u003c/p\u003e\u003cp id=\"922e\"\u003e\u003cstrong\u003edesktopMain\u003c/strong\u003e: dependencies which are supported on Desktop platform.\u003c/p\u003e\u003cp id=\"b19c\"\u003e\u003cstrong\u003ewasmJsMain\u003c/strong\u003e: dependencies which are supported on Browser platform.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"e06f\"\u003eNote: Browser application are not advised to develop with Compose Multiplatform as it is alpha stage.\u003c/p\u003e\u003cp id=\"2abd\"\u003eMessage from google: “New ‘wasm’ target is Work-in-Progress and is subject to change without notice. Please report encountered issues to https://kotl.in/issue”\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"9dce\"\u003eAdd compose and module dependencies in commonMain. And sync the project. For navigation, make sure to use JetBrains navigation.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"40a1\"\u003eimplementation(project(\u0026#34;:FeatureOne\u0026#34;))\u003cbr/\u003eimplementation(project(\u0026#34;:FeatureTwo\u0026#34;))\u003cbr/\u003eimplementation(project(\u0026#34;:FeatureThree\u0026#34;))\u003cbr/\u003eimplementation(compose.materialIconsExtended)\u003cbr/\u003eimplementation(compose.ui)\u003cbr/\u003eimplementation(compose.animationGraphics)\u003cbr/\u003eimplementation(compose.material3)\u003cbr/\u003eimplementation(compose.components.resources)\u003cbr/\u003eimplementation(compose.components.uiToolingPreview)\u003cbr/\u003eimplementation(compose.runtime)\u003cbr/\u003eimplementation(compose.foundation)\u003cbr/\u003eimplementation(compose.animation)\u003cbr/\u003eimplementation(libs.navigation)\u003cp\u003e// Version Catalog\u003cbr/\u003enavigation = \u0026#34;2.8.0-alpha08\u0026#34;\u003cbr/\u003enavigation = { group = \u0026#34;org.jetbrains.androidx.navigation\u0026#34;, name = \u0026#34;navigation-compose\u0026#34;, version.ref = \u0026#34;navigation\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ce88\"\u003eNow add four directories in each module -\u0026gt; src\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9c94\"\u003ecommonMain/kotlin\u003cbr/\u003eandroidMain/kotlin\u003cbr/\u003eiosMain/kotlin\u003cbr/\u003edesktopMain/kotlin\u003cbr/\u003ewasmJsMain/kotlin\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5a06\"\u003eCopy all code of compose, viewModel or business logic written with any multiplatform library into \u003cstrong\u003ecommonMain\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"5b33\"\u003eIn our case for app module, we will move MainActivity, res/ and AndroidManifest.xml in \u003cstrong\u003eandroidMain/kotlin\u003c/strong\u003e and rest all files in \u003cstrong\u003ecommonMain/kotlin \u003c/strong\u003ein app module. if any resource/assets belongs to compose UI is present, then we will move them to commonMain/composeResources.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5dd6\"\u003eSimilarly we will move files for other modules. And then build the project and try running on Android devices.\u003c/p\u003e\u003cp id=\"05f3\"\u003eCurrent setup will only work for Android target so, we need to enable other platform target as well. So we will build other targets with the help of “\u003ca href=\"https://kmp.jetbrains.com/?_gl=1*1plq0i0*_gcl_au*MTc2MjcxMDk3OC4xNzM1Mzg4Mjg3*FPAU*MTc2MjcxMDk3OC4xNzM1Mzg4Mjg3*_ga*Nzg1MDc1MjMuMTcyNzQ1OTIyNg..*_ga_9J976DJZ68*MTczNTc5MDYxMi40OC4xLjE3MzU3OTA2ODcuNjAuMC4w\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKotlin Multiplatform Wizard\u003c/a\u003e”.\u003c/p\u003e\u003cp id=\"33f5\"\u003eUsing Kotlin Multiplatform sample, let’s create sample with all required targets. Select Android, iOS, Desktop and Web download sample.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"cf01\"\u003eTry running all targets:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0514\"\u003eOutput will be something like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"3e80\"\u003eNow let’s enable iOS target first, copy “iosApp” folder and paste it into our project.\u003c/p\u003e\u003cp id=\"cd20\"\u003eCreate MainViewController.kt in: app-\u0026gt; src/iosMain/kotlin\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"19a2\"\u003epackage com.abkhare.multiplatformmigration\u003cp\u003eimport androidx.compose.ui.window.ComposeUIViewController\u003c/p\u003e\u003cp\u003efun MainViewController() = ComposeUIViewController { AppNavigation() }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"527d\"\u003eNow open “iosApp” in Xcode.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"ca6a\"\u003eModify build script to create compose framework in Xcode. Since our root module is app module so we need to specify “app:embedAndSignAppleFrameworkForXcode”.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"7ddc\"\u003eNow point to correct framework in “ContentView.swift”.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"cb72\"\u003e\u003cstrong\u003eYou may have to resolve some errors using:\u003c/strong\u003e \u003ca href=\"https://github.com/abkhare/ComposeMultiplatformMigration/commit/97205c6d9a96a73cbdf7583cee4a6865a2ecf9bd\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://github.com/abkhare/ComposeMultiplatformMigration/commit/97205c6d9a96a73cbdf7583cee4a6865a2ecf9bd\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"a686\"\u003eAnd run the project in Xcode. And that’s it you will be able to build the application on iPhone device.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"678a\"\u003eNow to Enable “DeskTop” target, create “main.kt” in app-\u0026gt; src/desktopMain/kotlin.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1081\"\u003efun main() = application {\u003cbr/\u003e    Window(\u003cbr/\u003e        onCloseRequest = ::exitApplication,\u003cbr/\u003e        title = \u0026#34;MultiplatformSample\u0026#34;,\u003cbr/\u003e    ) {\u003cbr/\u003e        AppNavigation()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"597d\"\u003eNow run the application by play icon beside main function.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"86f6\"\u003eYou can find full working source code in below repository (branch: main)\u003c/p\u003e\u003cp id=\"83f5\"\u003eStay tuned, I will be sharing more such in-depth articles on Compose Multiplatform.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-01-02T09:43:47.495Z",
  "modifiedTime": null
}
