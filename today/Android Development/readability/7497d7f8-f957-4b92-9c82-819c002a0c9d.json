{
  "id": "7497d7f8-f957-4b92-9c82-819c002a0c9d",
  "title": "Software Development is Nonlinear System",
  "link": "https://blog.danlew.net/2024/07/23/software-development-is-nonlinear-system/",
  "description": "Let me tell you a story about when I cut months of work off of a project.Part of Rheaply’s offerings is an inventory management platform. A major problem customers run into is data entry - name \u0026 description is not enough, we need colors and manufacturers, dimensions",
  "author": "Dan Lew",
  "published": "Tue, 23 Jul 2024 13:00:43 GMT",
  "source": "https://blog.danlew.net/rss/",
  "categories": null,
  "byline": "Dan Lew",
  "length": 6872,
  "excerpt": "Let me tell you a story about when I cut months of work off of a project. Part of Rheaply’s offerings is an inventory management platform. A major problem customers run into is data entry - name \u0026 description is not enough, we need colors and manufacturers, dimensions and weights, etc. Accurately filling in the data for thousands of items is painful. One idea we had to alleviate this problem was to create a product library - pre-vetted information about common products that users could autofil",
  "siteName": "Dan Lew Codes",
  "favicon": "",
  "text": "Let me tell you a story about when I cut months of work off of a project.Part of Rheaply’s offerings is an inventory management platform. A major problem customers run into is data entry - name \u0026 description is not enough, we need colors and manufacturers, dimensions and weights, etc. Accurately filling in the data for thousands of items is painful.One idea we had to alleviate this problem was to create a product library - pre-vetted information about common products that users could autofill.When we first set out to write a product library, we thought we’d have to spin up a new, internal platform - a prospect that would take months of work. But then I had an idea: we already have an inventory management platform. What if the product library is nothing more than a special organization on our pre-existing platform?We still had to write some APIs for accessing the product library, but this idea took a multi-month project down to just a couple weeks of work.The story above illustrates an important aspect of software development: it’s an extraordinarily nonlinear practice. I didn’t save time by working hard - I saved time by finding a different route to the goal that was much, much shorter.Write Less, Think MoreWriting code faster or working longer hours is not the fastest way to get a project done because you can only linearly scale up how fast one can program. On the flip side, there’s nonlinear savings that can be had by reducing the amount of work you need to do in the first place. Thus, you should write less code rather than trying to write code faster.Here is a non-exhaustive list of ways I’ve found to drastically cut down development time:Pare down requirements - Do you really need to do everything you were asked to do? What about the parts of the feature request that really, really suck? Negotiate to do less! A lot of managers will accept a pitch like “if we skip adding push notifications for this feature, we’ll cut down dev time by 50%.”Better code design - Don’t automatically go with the first implementation that comes to mind. Sit down and think about the best way to solve a problem, or write a couple prototypes. You will come up with an implementation that’s much simpler/smaller than you initially thought of. (This seems counterintuitive because you’re spending more time upfront, but in my experience this prep work pays off dividends in the long run.)Maintainable code - Almost no code is written once and never modified again. It’s a long con, but code that’s easy to modify later will save you tons of time. (On the opposite end, I’ve seen codebases where things have gotten so hairy that it’s nearly impossible to make forward progress without tons of refactoring first.)Code generation / automation - You don’t have to write all the code - computers can do some of it for you! Instead of writing boilerplate over and over, make the computer generate it for you. Automate your processes (like building/packaging/releasing) so that you don’t need to spend time on repetitive tasks.Ask questions - No one knows everything, even you, dear reader. (Sorry.) A good question, asked early, to the right person, can unlock doors. Maybe you’re dealing with a new part of the codebase you’ve never touched before - a 15-minute rundown with a coworker can save you a day’s worth of exploration. Or perhaps you’re stuck on a problem - instead of banging your head against a wall, ask someone else to walk through it with you.Not All RosesWhen I was implementing offline mode for Trello Android, I had to come up with some way to coordinate IDs for locally generated models vs. the server’s IDs. My first few attempts were failures - which is to be expected! No one is perfect. But I spent much longer on these failed attempts than I should have. Why? I started implementing the easy part of it - rote work that took over a month. But when I moved onto the hard part of the solution, I realized my solution was infeasible. If only I’d figured that out before I spent a month on the easy part of it!Sadly, the nonlinearity of software development cuts both ways. As much as you can cut down dev time with good tactics, you can also balloon development time by creating much more work than needed. In the worst-case scenario, you can actually do negative work by writing many bugs and merging code that’s never used.Here’s another non-exhaustive list of ways to try to avoid taking up too much time:Prototype - I almost never get the code design right the first time. Writing a quick, throwaway prototype lets you get the feel for the right solution to the problem. Instead of going down the wrong path for too long (as I did above), you can swerve around roadblocks.Understand requirements - Feature requests often play a game of telephone: customers -\u003e sales -\u003e product managers -\u003e engineering managers -\u003e you. By the time requirements get to you, they may be a garbled mess, and you can end up building the wrong feature or something that’s way bigger than needed. Before jumping into a project, make sure you really understand why the feature was requested so you can match the solution to the actual problem.Find the root cause - Before I fix any bug, I try to figure out exactly why it's happening. Otherwise, you can end up hacking together a \"fix\" that doesn't actually solve the problem, or creates some new bug elsewhere. This practice is hard to embrace, especially if the servers are on fire, but accidentally adding fuel to the fire is so much worse than slowly putting it out.Stable tools - How many times has this happened to you: you login to your computer, ready to tackle a problem, only to discover that your build is broken, the artifact repository is down, or CI is failing randomly. Instead of getting any work done, you spend half the day just getting to a state where you can do any work. Spending time on stabilizing your toolchain will save all your company’s devs gobs of time down the road.Take CareHere’s a general-but-related piece of advice: take care of yourself.Exercise. Eat well. Get sleep. Hang with friends. Do hobbies. Whatever keeps you mentally charged.A happy, fresh mind comes up with great solutions. I’ve often clocked out at 5PM, frustrated with a problem I can’t solve, only to get to work the next morning and solve it in minutes.This is one of the many reasons I don’t believe in long working hours. Why would you fruitlessly work a few more hours on a bad solution when you could rest, then come back with a much more expedient solution the next morning?ConclusionThe goal of software development isn’t to write code; it’s to produce software. Don’t simply take your first solution and barrel down mindlessly on it. Focus on the software you want to create and you’ll get there faster.Do you have other ways you’ve drastically cut down on development time? Share in the comments below!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n        \u003cp\u003eLet me tell you a story about when I cut months of work off of a project.\u003c/p\u003e\u003cp\u003ePart of \u003ca href=\"https://rheaply.com/?ref=blog.danlew.net\"\u003e\u003cu\u003eRheaply’s\u003c/u\u003e\u003c/a\u003e offerings is an inventory management platform. A major problem customers run into is data entry - name \u0026amp; description is not enough, we need colors and manufacturers, dimensions and weights, etc. Accurately filling in the data for thousands of items is painful.\u003c/p\u003e\u003cp\u003eOne idea we had to alleviate this problem was to create a product library - pre-vetted information about common products that users could autofill.\u003c/p\u003e\u003cp\u003eWhen we first set out to write a product library, we thought we’d have to spin up a new, internal platform - a prospect that would take months of work. But then I had an idea: we already have an inventory management platform. \u003cem\u003eWhat if the product library is nothing more than a special organization on our pre-existing platform?\u003c/em\u003e\u003c/p\u003e\u003cp\u003eWe still had to write some APIs for accessing the product library, but this idea took a multi-month project down to just a couple weeks of work.\u003c/p\u003e\u003cp\u003eThe story above illustrates an important aspect of software development: \u003cstrong\u003eit’s an extraordinarily nonlinear practice\u003c/strong\u003e. I didn’t save time by working hard - I saved time by finding a different route to the goal that was much, much shorter.\u003c/p\u003e\u003ch2 id=\"write-less-think-more\"\u003eWrite Less, Think More\u003c/h2\u003e\u003cp\u003eWriting code faster or working longer hours is \u003cem\u003enot\u003c/em\u003e the fastest way to get a project done because you can only linearly scale up how fast one can program. On the flip side, there’s nonlinear savings that can be had by reducing the amount of work you need to do in the first place. Thus, \u003cstrong\u003eyou should write less code rather than trying to write code faster.\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eHere is a non-exhaustive list of ways I’ve found to drastically cut down development time:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePare down requirements\u003c/strong\u003e - Do you really need to \u003cem\u003edo\u003c/em\u003e everything you were asked to do? What about the parts of the feature request that really, really suck? Negotiate to do less! A lot of managers will accept a pitch like “if we skip adding push notifications for this feature, we’ll cut down dev time by 50%.”\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBetter code design\u003c/strong\u003e - Don’t automatically go with the first implementation that comes to mind. Sit down and think about the best way to solve a problem, or write a couple prototypes. You will come up with an implementation that’s much simpler/smaller than you initially thought of. (This seems counterintuitive because you’re spending more time upfront, but in my experience this prep work pays off dividends in the long run.)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMaintainable code\u003c/strong\u003e - Almost no code is written once and never modified again. It’s a long con, but code that’s easy to modify later will save you tons of time. (On the opposite end, I’ve seen codebases where things have gotten so hairy that it’s nearly impossible to make forward progress without tons of refactoring first.)\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCode generation / automation\u003c/strong\u003e - You don’t have to write \u003cstrong\u003eall\u003c/strong\u003e the code - computers can do some of it for you! Instead of writing boilerplate over and over, make the computer generate it for you. Automate your processes (like building/packaging/releasing) so that you don’t need to spend time on repetitive tasks.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAsk questions\u003c/strong\u003e - No one knows everything, even you, dear reader. (Sorry.) A good question, asked early, to the right person, can unlock doors. Maybe you’re dealing with a new part of the codebase you’ve never touched before - a 15-minute rundown with a coworker can save you a day’s worth of exploration. Or perhaps you’re stuck on a problem - instead of banging your head against a wall, ask someone else to walk through it with you.\u003c/p\u003e\u003ch2 id=\"not-all-roses\"\u003eNot All Roses\u003c/h2\u003e\u003cp\u003eWhen I was implementing offline mode for Trello Android, \u003ca href=\"https://blog.danlew.net/2017/03/09/the-two-id-problem/\"\u003e\u003cu\u003eI had to come up with some way to coordinate IDs for locally generated models vs. the server’s IDs\u003c/u\u003e\u003c/a\u003e. My first few attempts were failures - which is to be expected! No one is perfect. But I spent much longer on these failed attempts than I should have. Why? I started implementing the easy part of it - rote work that took over a month. But when I moved onto the hard part of the solution, I realized my solution was infeasible. If only I’d figured that out \u003cem\u003ebefore\u003c/em\u003e I spent a month on the easy part of it!\u003c/p\u003e\u003cp\u003eSadly, the nonlinearity of software development cuts both ways. As much as you can cut down dev time with good tactics, \u003cstrong\u003eyou can also balloon development time by creating much more work than needed\u003c/strong\u003e. In the worst-case scenario, you can actually do \u003cem\u003enegative\u003c/em\u003e work by writing many bugs and merging code that’s never used.\u003c/p\u003e\u003cp\u003eHere’s another non-exhaustive list of ways to try to avoid taking up too much time:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePrototype\u003c/strong\u003e - I almost never get the code design right the first time. Writing a quick, throwaway prototype lets you get the feel for the right solution to the problem. Instead of going down the wrong path for too long (as I did above), you can swerve around roadblocks.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUnderstand requirements\u003c/strong\u003e - Feature requests often play a game of telephone: customers -\u0026gt; sales -\u0026gt; product managers -\u0026gt; engineering managers -\u0026gt; you. By the time requirements get to you, they may be a garbled mess, and you can end up building the wrong feature or something that’s way bigger than needed. Before jumping into a project, make sure you really understand \u003cem\u003ewhy\u003c/em\u003e the feature was requested so you can match the solution to the actual problem.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFind the root cause\u003c/strong\u003e - Before I fix any bug, I try to figure out \u003cem\u003eexactly \u003c/em\u003ewhy it\u0026#39;s happening. Otherwise, you can end up hacking together a \u0026#34;fix\u0026#34; that doesn\u0026#39;t actually solve the problem, or creates some new bug elsewhere. This practice is hard to embrace, especially if the servers are on fire, but accidentally adding fuel to the fire is so much worse than slowly putting it out.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eStable tools\u003c/strong\u003e - How many times has this happened to you: you login to your computer, ready to tackle a problem, only to discover that your build is broken, the artifact repository is down, or CI is failing randomly. Instead of getting any work done, you spend half the day just getting to a state where you \u003cem\u003ecan\u003c/em\u003e do any work. Spending time on stabilizing your toolchain will save all your company’s devs gobs of time down the road.\u003c/p\u003e\u003ch2 id=\"take-care\"\u003eTake Care\u003c/h2\u003e\u003cp\u003eHere’s a general-but-related piece of advice: \u003cstrong\u003etake care of yourself\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eExercise. Eat well. Get sleep. Hang with friends. Do hobbies. Whatever keeps you mentally charged.\u003c/p\u003e\u003cp\u003eA happy, fresh mind comes up with great solutions. I’ve often clocked out at 5PM, frustrated with a problem I can’t solve, only to get to work the next morning and solve it in minutes.\u003c/p\u003e\u003cp\u003eThis is one of the many reasons I don’t believe in long working hours. Why would you fruitlessly work a few more hours on a bad solution when you could rest, then come back with a much more expedient solution the next morning?\u003c/p\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eThe goal of software development isn’t to write code; it’s to produce software. Don’t simply take your first solution and barrel down mindlessly on it. Focus on the software you want to create and you’ll get there faster.\u003c/p\u003e\u003cp\u003eDo you have other ways you’ve drastically cut down on development time? Share in the comments below!\u003c/p\u003e\n    \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-07-23T13:00:43Z",
  "modifiedTime": "2024-07-23T13:00:43Z"
}
