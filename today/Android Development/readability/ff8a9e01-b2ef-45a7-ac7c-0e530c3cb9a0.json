{
  "id": "ff8a9e01-b2ef-45a7-ac7c-0e530c3cb9a0",
  "title": "Making Airbnb’s Android app more accessible",
  "link": "https://medium.com/airbnb-engineering/making-airbnbs-android-app-more-accessible-75618172be6?source=rss----53c7c27702d5--android",
  "description": "",
  "author": "Julia Fu",
  "published": "Wed, 11 Jan 2023 19:09:48 GMT",
  "source": "https://medium.com/feed/airbnb-engineering/tagged/android",
  "categories": [
    "engineering",
    "mobile",
    "front-end-development",
    "android",
    "accessibility"
  ],
  "byline": "Julia Fu",
  "length": 8000,
  "excerpt": "At Airbnb, we have been consciously designing and building products to be equally usable by all users. Making our mobile apps and websites more accessible not only aligns with our company’s mission…",
  "siteName": "The Airbnb Tech Blog",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "By: Julia Fu, Peter ElliottAt Airbnb, we have been consciously designing and building products to be equally usable by all users. Making our mobile apps and websites more accessible not only aligns with our company’s mission of creating a world where people can belong anywhere, but also supports the civil rights of people with disabilities and complies with the law.In this article, we highlight some of the efforts we have made to make the app more accessible, for example, labeling UI elements, grouping related content, supporting large font scale, providing heading and page names. The Airbnb app is one of the most popular travel apps with millions of users and supports many features. Making such a complex app more accessible is a huge endeavor that we are continuously working on.Part I: Build for all: best practices we applyAt Airbnb, we follow industry best practices to make the Android app accessible. If you are interested, you can find all best practices we follow from the official Android documentation for platform specific guidelines and the Web Content Accessibility Guidelines as an industry standard. Here we want to highlight a few examples where we apply the best practices:Best Practice: content descriptionsEverything shall have accurate content descriptions unless they should be ignored by assistive technology. In these examples, the share button has a content description that TalkBack reads aloud. TalkBack skips the house icon.Best practice: groupingElements of a natural group can be announced together with focusable containers for better usability and accuracy. For instance, Talkback reads all listing content on the card together.Best practice: font scaleUI shall be usable when the user increases the system font scale.Default vs enlarged font scale:Scaling best practicesThe Airbnb Android app is a large app with many screens. It would be exhausting and not scalable if we needed to add accessibility code everywhere. Fortunately, our Design Language System enables us to broadly apply these best practices across product surfaces in a highly efficient way. Every screen is built with a collection of reusable UI components. When we improve the accessibility for one component, the change applies to all the pages with this component as part of the view. This has a long-lasting positive effect on our app’s accessibility improvements. Here’s an example:Take SectionHeader as an example. This UI component is used to communicate the structure on the page and group content together. We mark this component to be an accessibility heading in the component code so it is accessible in all screens that contain this component.Part II: Empower engineers with automated checksWe invested in automated accessibility testing and linting to run with every code commit, which creates a quick feedback loop for engineers and empowers them to make the app accessible at code writing time. The checks are fast, reliable, and scale well with our fast-growing features in the Android app.Automated testingWe set up Espresso-based automated testing to check for accessibility issues. Espresso is a popular testing library for Android UI with built-in accessibility checks. It supports a comprehensive set of accessibility rules and is easy to set up:If accessibility checks fail, the test outputs an error stack trace that engineers can use to debug the issue. For example:In this example, engineers can provide a content description to the image view to satisfy accessibility requirements.We also screenshot test our components with a larger font size to ensure the behavior is correct using Happo.LintingIn addition to automated testing, we also enabled linting, including Android Lint rules for accessibility and custom lint rules built with Ktlint.Here is an example of an Android accessibility lint rule:Besides the built-in Android Lint, we also use Ktlint to build custom lint rules. For instance, when a user navigates to a new screen, we provide a page name for a screen reader to announce. We use the following rule to make sure that the page name is localized.Lint rules are straightforward to set up and provide timely feedback, but linting has limitations — it can only perform static code analysis.Today, these automated checks run as part of CI (Continuous Integration) checks for every code commit. If a pull request does not pass the checks, it will be blocked from being merged into the primary code branch. We still use manual testing to cover the areas that automated checks do not cover, such as the traversal order of UI elements on a page. Automated and manual checks complement each other well.Part III: Looking into the future: Accessibility with ComposeOver the past year, we have been integrating Jetpack Compose into our app. Google’s Accessibility in Compose documentation has been a great resource to ensure our Compose components and screens remain accessible. While there are some notable things missing that existed with Views (e.g. focus order modification), Compose is still a young library and we look forward to future improvements. Here are a couple of things worth mentioning about our Compose-specific accessibility tooling:Proactively encourage content descriptions in the APIOne of our guidelines for UI components is that content descriptions exposed via a function parameter should not use a default value. This brings accessibility to the top of mind when an engineer uses the component as they need to consider what value to pass. A null value is still acceptable in cases where that UI element is not important for accessibility.Page name announcementsWhen using Fragments and Views, we use the View.setAccessibilityPaneTitle() and View.announceForAccessibility() APIs when navigating to a new screen to announce a descriptive page name to the user. These APIs do not exist in Compose but we wanted to keep the functionality since it helps to provide more context as to what the new screen displays. Our current workaround sets certain semantics on the screen’s outer composable:We use the liveRegion property so changes can be announced when the content description changes. This is useful for pages whose entire content is determined by a response from the server. In this case, TalkBack would announce “Content Loading” while the network request is pending, followed by “Content Loaded” when it completes, and finally the page description defined in the server response. One downside of this approach is that it requires the outer container to be focusable, which requires an additional navigation action to get to the content.Closing thoughtsMaking our Android app more accessible has been an impactful journey. Improving app accessibility involves following best practices, adding rigorous enforcements, continually learning from mistakes, and putting in the work. All of these are worthy efforts to make sure an app works for all users.If you are excited about building highly accessible products and the framework to support them, check out some of our related open positions:Staff Android Software Engineer, GuestSenior iOS Software Engineer, InfrastructureAcknowledgmentsIt is a huge endeavor to make a complex app like the Airbnb Android app more accessible. This work wouldn’t be possible without the enormous efforts from the digital accessibility team and the close-knit Android community at Airbnb. Every engineer has contributed to making the features they own accessible. Making the Android app more accessible is an ongoing effort and it could not succeed without all of them.****************All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.All bookings included in this blog post are intended to illustrate. Airbnb does not endorse or promote these listings or any other accommodations or experiences on the platform.",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*3kx7B-Au3UoHoMon",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca rel=\"noopener follow\" href=\"https://medium.com/@chengxiaofu?source=post_page-----75618172be6--------------------------------\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Julia Fu\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*2Ee12UYfxMo47NWLGas7Gw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://medium.com/airbnb-engineering?source=post_page-----75618172be6--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"The Airbnb Tech Blog\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*MlNQKg-sieBGW5prWoe9HQ.jpeg\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"a7f8\"\u003e\u003cstrong\u003eBy:\u003c/strong\u003e \u003ca href=\"https://www.linkedin.com/in/julia-fu-3844b712/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJulia Fu\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/peter-elliott-777125144/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePeter Elliott\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6fa9\"\u003eAt Airbnb, we have been consciously designing and building products to be equally usable by all users. Making our mobile apps and websites more accessible not only aligns with our company’s mission of creating a world where people can belong anywhere, but also supports the civil rights of people with disabilities and complies with the law.\u003c/p\u003e\u003cp id=\"5b97\"\u003eIn this article, we highlight some of the efforts we have made to make the app more accessible, for example, labeling UI elements, grouping related content, supporting large font scale, providing heading and page names. The Airbnb app is one of the most popular travel apps with millions of users and supports many features. Making such a complex app more accessible is a huge endeavor that we are continuously working on.\u003c/p\u003e\u003ch2 id=\"2c2e\"\u003ePart I: Build for all: best practices we apply\u003c/h2\u003e\u003cp id=\"a78d\"\u003eAt Airbnb, we follow industry best practices to make the Android app accessible. If you are interested, you can find all best practices we follow from the \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/principles\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eofficial Android documentation\u003c/a\u003e for platform specific guidelines and the \u003ca href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWeb Content Accessibility Guidelines\u003c/a\u003e as an industry standard. Here we want to highlight a few examples where we apply the best practices:\u003c/p\u003e\u003ch2 id=\"52be\"\u003eBest Practice: content descriptions\u003c/h2\u003e\u003cp id=\"48e0\"\u003eEverything shall have accurate content descriptions unless they should be ignored by assistive technology. In these examples, the share button has a content description that TalkBack reads aloud. TalkBack skips the house icon.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d8fd\"\u003eBest practice: grouping\u003c/h2\u003e\u003cp id=\"41c8\"\u003eElements of a natural group can be announced together with focusable containers for better usability and accuracy. For instance, Talkback reads all listing content on the card together.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"450b\"\u003eBest practice: font scale\u003c/h2\u003e\u003cp id=\"ae88\"\u003eUI shall be usable when the user increases the system font scale.\u003c/p\u003e\u003cp id=\"9f2c\"\u003eDefault vs enlarged font scale:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"1439\"\u003eScaling best practices\u003c/h2\u003e\u003cp id=\"f1da\"\u003eThe Airbnb Android app is a large app with many screens. It would be exhausting and not scalable if we needed to add accessibility code everywhere. Fortunately, our \u003ca href=\"https://airbnb.design/the-way-we-build/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDesign Language System\u003c/a\u003e enables us to broadly apply these best practices across product surfaces in a highly efficient way. Every screen is built with a collection of reusable UI components. When we improve the accessibility for one component, the change applies to all the pages with this component as part of the view. This has a long-lasting positive effect on our app’s accessibility improvements. Here’s an example:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"8ca0\"\u003eTake \u003cem\u003eSectionHeader\u003c/em\u003e as an example. This UI component is used to communicate the structure on the page and group content together. We mark this component to be an accessibility heading in the component code so it is accessible in all screens that contain this component.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"0f6e\"\u003ePart II: Empower engineers with automated checks\u003c/h2\u003e\u003cp id=\"9e07\"\u003eWe invested in automated accessibility testing and linting to run with every code commit, which creates a quick feedback loop for engineers and empowers them to make the app accessible at code writing time. The checks are fast, reliable, and scale well with our fast-growing features in the Android app.\u003c/p\u003e\u003ch2 id=\"c61b\"\u003eAutomated testing\u003c/h2\u003e\u003cp id=\"dd15\"\u003eWe set up Espresso-based automated testing to check for accessibility issues. \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#espresso\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEspresso\u003c/a\u003e is a popular testing library for Android UI with built-in accessibility checks. It supports a comprehensive set of accessibility rules and is easy to set up:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"52cf\"\u003eIf accessibility checks fail, the test outputs an error stack trace that engineers can use to debug the issue. For example:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"cf9d\"\u003eIn this example, engineers can provide a content description to the image view to satisfy accessibility requirements.\u003c/p\u003e\u003cp id=\"228d\"\u003eWe also screenshot test our components with a larger font size to ensure the behavior is correct using \u003ca rel=\"noopener\" href=\"https://medium.com/airbnb-engineering/better-android-testing-at-airbnb-a77ac9531cab\"\u003eHappo\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"c2c0\"\u003eLinting\u003c/h2\u003e\u003cp id=\"19f8\"\u003eIn addition to automated testing, we also enabled linting, including \u003ca href=\"https://developer.android.com/studio/write/lint\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Lint\u003c/a\u003e rules for accessibility and custom lint rules built with \u003ca href=\"https://github.com/pinterest/ktlint\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKtlint\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"1b3c\"\u003eHere is an example of an Android accessibility lint rule:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"77c3\"\u003eBesides the built-in Android Lint, we also use Ktlint to build custom lint rules. For instance, when a user navigates to a new screen, we provide a page name for a screen reader to announce. We use the following rule to make sure that the page name is localized.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6f17\"\u003eLint rules are straightforward to set up and provide timely feedback, but linting has limitations — it can only perform static code analysis.\u003c/p\u003e\u003cp id=\"82f2\"\u003eToday, these automated checks run as part of CI (Continuous Integration) checks for every code commit. If a pull request does not pass the checks, it will be blocked from being merged into the primary code branch. We still use manual testing to cover the areas that automated checks do not cover, such as the traversal order of UI elements on a page. Automated and manual checks complement each other well.\u003c/p\u003e\u003ch2 id=\"912e\"\u003ePart III: Looking into the future: Accessibility with Compose\u003c/h2\u003e\u003cp id=\"4dc1\"\u003eOver the past year, we have been integrating Jetpack Compose into our app. Google’s \u003ca href=\"https://developer.android.com/jetpack/compose/accessibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAccessibility in Compose documentation\u003c/a\u003e has been a great resource to ensure our Compose components and screens remain accessible. While there are some notable things missing that existed with Views (e.g. focus order modification), Compose is still a young library and we look forward to future improvements. Here are a couple of things worth mentioning about our Compose-specific accessibility tooling:\u003c/p\u003e\u003ch2 id=\"b7c2\"\u003eProactively encourage content descriptions in the API\u003c/h2\u003e\u003cp id=\"da5d\"\u003eOne of our guidelines for UI components is that content descriptions exposed via a function parameter should not use a default value. This brings accessibility to the top of mind when an engineer uses the component as they need to consider what value to pass. A null value is still acceptable in cases where that UI element is not important for accessibility.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"af9b\"\u003ePage name announcements\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"4eb3\"\u003eWhen using Fragments and Views, we use the \u003cem\u003eView.setAccessibilityPaneTitle()\u003c/em\u003e and \u003cem\u003eView.announceForAccessibility()\u003c/em\u003e APIs when navigating to a new screen to announce a descriptive page name to the user. These APIs do not exist in Compose but we wanted to keep the functionality since it helps to provide more context as to what the new screen displays. Our current workaround sets certain semantics on the screen’s outer composable:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"fdac\"\u003eWe use the \u003cem\u003eliveRegion\u003c/em\u003e property so changes can be announced when the content description changes. This is useful for pages whose entire content is determined by a response from the server. In this case, TalkBack would announce “Content Loading” while the network request is pending, followed by “Content Loaded” when it completes, and finally the page description defined in the server response. One downside of this approach is that it requires the outer container to be focusable, which requires an additional navigation action to get to the content.\u003c/p\u003e\u003ch2 id=\"8069\"\u003eClosing thoughts\u003c/h2\u003e\u003cp id=\"1363\"\u003eMaking our Android app more accessible has been an impactful journey. Improving app accessibility involves following best practices, adding rigorous enforcements, continually learning from mistakes, and putting in the work. All of these are worthy efforts to make sure an app works for all users.\u003c/p\u003e\u003cp id=\"6537\"\u003eIf you are excited about building highly accessible products and the framework to support them, check out some of our related open positions:\u003c/p\u003e\u003cp id=\"4b73\"\u003e\u003ca href=\"https://careers.airbnb.com/positions/4590099/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eStaff Android Software Engineer, Guest\u003c/a\u003e\u003c/p\u003e\u003cp id=\"8766\"\u003e\u003ca href=\"https://careers.airbnb.com/positions/4648432/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSenior iOS Software Engineer, Infrastructure\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"7e52\"\u003eAcknowledgments\u003c/h2\u003e\u003cp id=\"6bc6\"\u003eIt is a huge endeavor to make a complex app like the Airbnb Android app more accessible. This work wouldn’t be possible without the enormous efforts from the digital accessibility team and the close-knit Android community at Airbnb. Every engineer has contributed to making the features they own accessible. Making the Android app more accessible is an ongoing effort and it could not succeed without all of them.\u003c/p\u003e\u003ch2 id=\"282d\"\u003e****************\u003c/h2\u003e\u003cp id=\"c8dc\"\u003e\u003cem\u003eAll product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"f8bc\"\u003e\u003cem\u003eAll bookings included in this blog post are intended to illustrate. Airbnb does not endorse or promote these listings or any other accommodations or experiences on the platform.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2023-01-11T19:09:48.164Z",
  "modifiedTime": null
}
