{
  "id": "a809240a-8777-4bff-aacd-9751f16f337a",
  "title": "The Second Beta of Android 16",
  "link": "http://android-developers.googleblog.com/2025/02/second-beta-android16.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-02-13T10:58:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android",
    "android16",
    "Beta",
    "Featured",
    "latest"
  ],
  "byline": "",
  "length": 19711,
  "excerpt": "Android 16 Beta 2 is now available, with new features for professional camera experiences, graphical effects, performance improvements, and more.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Matthew McCullough – VP of Product Management, Android Developer Today we're releasing the second beta of Android 16, continuing our work to build a platform that enables creative expression. You can enroll any supported Pixel device to get this and future Android Beta updates over-the-air. This build adds new support for professional camera experiences, graphical effects, extends our performance framework, and continues the evolution of features related to privacy, security, and background tasks. We’re looking forward to hearing what you think, and thank you in advance for your continued help in making Android a platform that works for everyone. Media and camera updates Android 16 enhances support for professional camera users, allowing for hybrid auto exposure along with precise color temperature and tint adjustments. It's easier than ever to capture motion photos with new Intent actions, and we're continuing to improve UltraHDR images, with support for HEIC encoding and new parameters from the ISO 21496-1 draft standard. Hybrid auto-exposure Android 16 adds new hybrid auto-exposure modes to Camera2, allowing you to manually control specific aspects of exposure while letting the auto-exposure (AE) algorithm handle the rest. You can control ISO + AE, and exposure time + AE, providing greater flexibility compared to the current approach where you either have full manual control or rely entirely on auto-exposure. fun setISOPriority() { // ... (Your existing code before the snippet) ... val availablePriorityModes = mStaticInfo.characteristics.get( CameraCharacteristics.CONTROL_AE_AVAILABLE_PRIORITY_MODES ) // ... (Your existing code between the snippets) ... // Turn on AE mode to set priority mode reqBuilder.set( CaptureRequest.CONTROL_AE_MODE, CameraMetadata.CONTROL_AE_MODE_ON ) reqBuilder.set( CaptureRequest.CONTROL_AE_PRIORITY_MODE, CameraMetadata.CONTROL_AE_PRIORITY_MODE_SENSOR_SENSITIVITY_PRIORITY ) reqBuilder.set( CaptureRequest.SENSOR_SENSITIVITY, TEST_SENSITIVITY_VALUE ) val request: CaptureRequest = reqBuilder.build() // ... (Your existing code after the snippet) ... } Precise color temperature and tint adjustments Android 16 adds camera support for fine color temperature and tint adjustments to better support professional video recording applications. White balance settings are currently controlled through CONTROL_AWB_MODE, which contains options limited to a preset list, such as Incandescent, Cloudy, and Twilight. The COLOR_CORRECTION_MODE_CCT enables the use of COLOR_CORRECTION_COLOR_TEMPERATURE and COLOR_CORRECTION_COLOR_TINT for precise adjustments of white balance based on the correlated color temperature. fun setCCT() { // ... (Your existing code before this point) ... val colorTemperatureRange: Range\u003cInt\u003e = mStaticInfo.characteristics[CameraCharacteristics.COLOR_CORRECTION_COLOR_TEMPERATURE_RANGE] // Set to manual mode to enable CCT mode reqBuilder[CaptureRequest.CONTROL_AWB_MODE] = CameraMetadata.CONTROL_AWB_MODE_OFF reqBuilder[CaptureRequest.COLOR_CORRECTION_MODE] = CameraMetadata.COLOR_CORRECTION_MODE_CCT reqBuilder[CaptureRequest.COLOR_CORRECTION_COLOR_TEMPERATURE] = 5000 reqBuilder[CaptureRequest.COLOR_CORRECTION_COLOR_TINT] = 30 val request: CaptureRequest = reqBuilder.build() // ... (Your existing code after this point) ... } Motion photo capture intent actions Android 16 adds standard Intent actions — ACTION_MOTION_PHOTO_CAPTURE, and ACTION_MOTION_PHOTO_CAPTURE_SECURE — which request that the camera application capture a motion photo and return it. You must either pass an extra EXTRA_OUTPUT to control where the image will be written, or a Uri through Intent setClipData. If you don't set a ClipData, it will be copied there for you when calling Context.startActivity. UltraHDR image enhancements Android 16 continues our work to deliver dazzling image quality with UltraHDR images. It adds support for UltraHDR images in the HEIC file format. These images will get ImageFormat type HEIC_ULTRAHDR and will contain an embedded gainmap similar to the existing UltraHDR JPEG format. We're working on AVIF support for UltraHDR as well, so stay tuned. In addition, Android 16 implements additional parameters in UltraHDR from the ISO 21496-1 draft standard, including the ability to get and set the colorspace that gainmap math should be applied in, as well as support for HDR encoded base images with SDR gainmaps. Custom graphical effects with AGSL Android 16 adds RuntimeColorFilter and RuntimeXfermode, allowing you to author complex effects like Threshold, Sepia, and Hue Saturation and apply them to draw calls. Since Android 13, you've been able to use AGSL to create custom RuntimeShaders that extend Shaders. The new API mirrors this, adding an AGSL-powered RuntimeColorFilter that extends ColorFilters, and a Xfermode effect that allows you to implement AGSL-based custom compositing and blending between source and destination pixels. private val thresholdEffectString = \"\"\" uniform half threshold; half4 main(half4 c) { half luminosity = dot(c.rgb, half3(0.2126, 0.7152, 0.0722)); half bw = step(threshold, luminosity); return bw.xxx1 * c.a; }\"\"\" fun setCustomColorFilter(paint: Paint) { val filter = RuntimeColorFilter(thresholdEffectString) filter.setFloatUniform(0.5) paint.colorFilter = filter } Behavior changes With every Android release, we seek to make the platform more efficient, privacy conscious, internationalization friendly, and robust, balancing the needs of apps against hardware support, system performance, user privacy, and battery life. This can result in behavior changes that impact compatibility. Edge to edge opt-out going away Android 15 enforced edge-to-edge for apps targeting Android 15 (SDK 35), but your app could opt-out by setting R.attr#windowOptOutEdgeToEdgeEnforcement to true. Once your app targets Android 16 (Baklava), R.attr#windowOptOutEdgeToEdgeEnforcement is deprecated and disabled and your app cannot opt-out of going edge-to-edge. To be compatible with Android 16 Beta 2, ensure your app supports edge-to-edge and remove any use of R.attr#windowOptOutEdgeToEdgeEnforcement. To support edge-to-edge, see the Compose and Views guidance. Please let us know about concerns in our tracker on the feedback page. Health and fitness permissions For apps targeting Android 16 or higher, BODY_SENSORS permissions are transitioning to the granular permissions under android.permissions.health also used by Health Connect. Any API previously requiring BODY_SENSORS or BODY_SENSORS_BACKGROUND will now require the corresponding android.permissions.health permission. This affects the following data types, APIs, and foreground service types: HEART_RATE_BPM from Wear Health Services Sensor.TYPE_HEART_RATE from Android Sensor Manager heartRateAccuracy and heartRateBpm from Wear ProtoLayout FOREGROUND_SERVICE_TYPE_HEALTH where the respective android.permission.health permission is needed in place of BODY_SENSORS If your app uses these APIs, it should now request the respective granular permissions: For while-in-use monitoring of Heart Rate, SpO2, or Skin Temperature, request the granular permission under android.permissions.health, such as READ_HEART_RATE instead of BODY_SENSORS. For background sensor access, request READ_HEALTH_DATA_IN_BACKGROUND instead of BODY_SENSORS_BACKGROUND. These permissions are the same as those that guard access to reading data from Health Connect, the Android datastore for health, fitness, and wellness data. Abandoned empty jobs stop reason An abandoned job occurs when the JobParameters object associated with the job has been garbage collected, but jobFinished has not been called to signal job completion. This indicates that the job may be running and being rescheduled without the application's awareness. Applications in Android 16 that rely on JobScheduler without maintaining a strong reference to the JobParameters object will now be granted the new job stop reason STOP_REASON_TIMEOUT_ABANDONED on timeout, instead of STOP_REASON_TIMEOUT. If there are frequent occurrences of the new abandoned stop reason, the system will take mitigation steps to reduce job frequency. Please use the new stop reason to detect and reduce abandoned jobs. Note: If you're using WorkManager, you're not expected to be impacted by this change — one nice side effect of using Android Jetpack to schedule your work. Intent redirect changes Android 16 introduces default security hardening against Intent redirection attacks regardless of your app's targetSDK version. The removeLaunchSecurityProtection API allows you to opt-out of this protection if your testing reveals issues. Note: Opting out of security protections should be done with caution and only when absolutely necessary, as it can increase the risk of security vulnerabilities. val iSublevel = intent.getParcelableExtra(\"sub_intent\", Intent::class.java) iSublevel?.let { it.removeLaunchSecurityProtection() startActivity(it) } Elegant font APIs deprecated and disabled Apps targeting Android 15 (API level 35) have the elegantTextHeight TextView attribute set to true by default, replacing the compact font with one that is much more readable. You could override this by setting the elegantTextHeight attribute to false. Android 16 deprecates the elegantTextHeight attribute, and the attribute will be ignored once your app targets Android 16. The “UI fonts” controlled by these APIs are being discontinued, so you should adapt any layouts to ensure consistent and future proof text rendering in Arabic, Lao, Myanmar, Tamil, Gujarati, Kannada, Malayalam, Odia, Telugu or Thai. default elegantTextHeight behavior for apps targeting Android 14 (API level 34) and lower default elegantTextHeight behavior for apps targeting Android 15 (API level 35) and higher 16 KB page size compatibility mode Android 15 introduced support for 16KB memory pages to optimize performance of the platform. Android 16 adds a compatibility mode, allowing some apps built for 4K memory pages to run on a device configured for 16KB memory pages. If Android detects that your app has 4KB aligned memory pages, it will automatically use compatibility mode and display a notification dialog to the user. Setting the android:pageSizeCompat property in the AndroidManifest.xml to enable the backwards compatibility mode will prevent the display of the dialog when your app launches. For best performance, reliability, and stability, your app should still be 16KB aligned. Read our recent blog post about updating your apps to support 16KB memory pages for more details. Measurement system customization Users can now customize their measurement system in regional preferences within Settings. The user preference is included as part of the locale code, so you can register a BroadcastReceiver on ACTION_LOCALE_CHANGED to handle locale configuration changes when regional preferences change. Using formatters can help match the local experience. For example, \"0.5 in\" in English (United States), is \"12,7 mm\" for a user who has set their phone to English (Denmark) or who uses their phone in English (United States) with the metric system as the measurement system preference. To find these settings in Android 16 Beta 2, open the Settings app and navigate to System \u003e Languages \u0026 region. Content handling for live wallpapers In Android 16, the live wallpaper framework is gaining a new content API to address the challenges of dynamic, user-driven wallpapers. Currently, live wallpapers incorporating user-provided content require complex, service-specific implementations. Android 16 introduces WallpaperDescription and WallpaperInstance. WallpaperDescription allows you to identify distinct instances of a live wallpaper from the same service. For example, a wallpaper that has instances on both the home screen and on the lock screen may have unique content in both places. The wallpaper picker and WallpaperManager use this metadata to better present wallpapers to users, streamlining the process for you to create diverse and personalized live wallpaper experiences. Headroom APIs in ADPF The SystemHealthManager introduces the getCpuHeadroom and getGpuHeadroom APIs, designed to provide games and resource-intensive apps with estimates of available CPU and GPU resources. These methods offer a way for you to gauge how your app or game can best improve system health, particularly when used in conjunction with other Android Dynamic Performance Framework (ADPF) APIs that detect thermal throttling. By using CpuHeadroomParams and GpuHeadroomParams on supported devices, you will be able to customize the time window used to compute the headroom and select between average or minimum resource availability. This can help you reduce your CPU or GPU resource usage accordingly, leading to better user experiences and improved battery life. Key sharing API Android 16 adds APIs that support sharing access to Android Keystore keys with other apps. The new KeyStoreManager class supports granting and revoking access to keys by app uid, and includes an API for apps to access shared keys. Standardized picture and audio quality framework for TVs The new MediaQuality package in Android 16 exposes a set of standardized APIs for access to audio and picture profiles and hardware-related settings. This allows streaming apps to query profiles and apply them to media dynamically: Movies mastered with a wider dynamic range require greater color accuracy to see subtle details in shadows and adjust to ambient light, so a profile that prefers color accuracy over brightness may be appropriate. Live sporting events are often mastered with a narrow dynamic range, but are often watched in daylight, so a profile that gives preference to brightness over color accuracy can give better results. Fully interactive content wants minimal processing to reduce latency, and wants higher frame rates, which is why many TV's ship with a game profile. The API allows apps to switch between profiles and users to enjoy the benefits of tuning supported TVs to best suit their content. Accessibility Android 16 adds additional APIs to enhance UI semantics that help improve consistency for users that rely on accessibility services, such as TalkBack. Duration added to TtsSpan Android 16 extends TtsSpan with a TYPE_DURATION, consisting of ARG_HOURS, ARG_MINUTES, and ARG_SECONDS. This allows you to directly annotate time duration, ensuring accurate and consistent text-to-speech output with services like TalkBack. Support elements with multiple labels Android currently allows UI elements to derive their accessibility label from another, and now offers the ability for multiple labels to be associated, a common scenario in web content. By introducing a list-based API within AccessibilityNodeInfo, Android can directly support these multi-label relationships. As part of this change, we've deprecated AccessibilityNodeInfo setLabeledBy and getLabeledBy in favor of addLabeledBy, removeLabeledBy, and getLabeledByList. Improved support for expandable elements Android 16 adds accessibility APIs that allow you to convey the expanded or collapsed state of interactive elements, such as menus and expandable lists. By setting the expanded state using setExpandedState and dispatching TYPE_WINDOW_CONTENT_CHANGED AccessibilityEvents with a CONTENT_CHANGE_TYPE_EXPANDED content change type, you can ensure that screen readers like TalkBack announce state changes, providing a more intuitive and inclusive user experience. Indeterminate ProgressBars Android 16 adds RANGE_TYPE_INDETERMINATE, giving a way for you to expose RangeInfo for both determinate and indeterminate ProgressBar widgets, allowing services like TalkBack to more consistently provide feedback for progress indicators. Tri-state CheckBox The new AccessibilityNodeInfo getChecked and setChecked(int) methods in Android 16 now support a \"partially checked\" state in addition to \"checked\" and \"unchecked.\" This replaces the deprecated boolean isChecked and setChecked(boolean). Two Android API releases in 2025 This preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have another release with new developer APIs in Q4. The Q2 major release will be the only release in 2025 to include behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; like our non-SDK quarterly releases, it will not include any intentional app-impacting behavior changes. We'll continue to have quarterly Android releases. The Q1 and Q3 updates provide incremental updates to ensure continuous quality. We’re putting additional energy into working with our device partners to bring the Q2 release to as many devices as possible. There’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, tied to the major API level. How to get ready In addition to performing compatibility testing on this next major release, make sure that you're compiling your apps against the new SDK, and use the compatibility framework to enable targetSdkVersion-gated behavior changes as they become available for early testing. App compatibility The Android 16 Preview program runs from November 2024 until the final public release in Q2 of 2025. At key development milestones, we'll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We'll highlight critical APIs as they are ready to test in the preview program in blogs and on the Android 16 developer website. We’re targeting March of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. From that time you’ll have several months before the final release to complete your testing. Learn more by checking the release timeline details. Get started with Android 16 You can enroll any supported Pixel device to get this and future Android Beta updates over-the-air. If you don’t have a Pixel device, you can use the 64-bit system images with the Android Emulator in Android Studio. If you are currently on Android 16 Beta 1 or are already in the Android Beta program, you will be offered an over-the-air update to Beta 2. We're looking for your feedback so please report issues and submit feature requests on the feedback page. The earlier we get your feedback, the more we can include in our work on the final release. For the best development experience with Android 16, we recommend that you use the latest preview of Android Studio (Meerkat). Once you’re set up, here are some of the things you should do: Compile against the new SDK, test in CI environments, and report any issues in our tracker on the feedback page. Test your current app for compatibility, learn whether your app is affected by changes in Android 16, and install your app onto a device or emulator running Android 16 and extensively test it. We’ll update the beta system images and SDK regularly throughout the Android 16 release cycle. Once you’ve installed a beta build, you’ll automatically get future updates over-the-air for all later previews and Betas. For complete information, visit the Android 16 developer site.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTbEtmcMRsVnZNjDLfHHmaHRbWrOxiuKlPvOEKOdTQv5zdrBXiwR2seAo7nH7WHr5OBn-40Cokd-O8A39uNI8YPwNPS0KyNKmR5KfMdKWylTB2urSRAtJKSybArxjCTCi5dJghCUPgA49ZVOn3_4TLqppzii0bc5PDKdbeHzGfG0DrNeAyjbt5VSoOVYI/w1200-h630-p-k-no-nu/image1.gif",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTbEtmcMRsVnZNjDLfHHmaHRbWrOxiuKlPvOEKOdTQv5zdrBXiwR2seAo7nH7WHr5OBn-40Cokd-O8A39uNI8YPwNPS0KyNKmR5KfMdKWylTB2urSRAtJKSybArxjCTCi5dJghCUPgA49ZVOn3_4TLqppzii0bc5PDKdbeHzGfG0DrNeAyjbt5VSoOVYI/s1600/image1.gif\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003e Posted by \u003cauthor\u003eMatthew McCullough\u003c/author\u003e – VP of Product Management, Android Developer\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTbEtmcMRsVnZNjDLfHHmaHRbWrOxiuKlPvOEKOdTQv5zdrBXiwR2seAo7nH7WHr5OBn-40Cokd-O8A39uNI8YPwNPS0KyNKmR5KfMdKWylTB2urSRAtJKSybArxjCTCi5dJghCUPgA49ZVOn3_4TLqppzii0bc5PDKdbeHzGfG0DrNeAyjbt5VSoOVYI/s1600/image1.gif\"\u003e\u003cimg data-original-height=\"1024\" data-original-width=\"1024\" height=\"320\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTbEtmcMRsVnZNjDLfHHmaHRbWrOxiuKlPvOEKOdTQv5zdrBXiwR2seAo7nH7WHr5OBn-40Cokd-O8A39uNI8YPwNPS0KyNKmR5KfMdKWylTB2urSRAtJKSybArxjCTCi5dJghCUPgA49ZVOn3_4TLqppzii0bc5PDKdbeHzGfG0DrNeAyjbt5VSoOVYI/w320-h320/image1.gif\" width=\"320\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eToday we\u0026#39;re releasing the second beta of Android 16, continuing our work to build a platform that enables creative expression. You can \u003ca href=\"https://www.google.com/android/beta\" target=\"_blank\"\u003eenroll any supported Pixel device\u003c/a\u003e to get this and future Android Beta updates over-the-air.\u003c/p\u003e\n  \n\u003cp\u003eThis build adds new support for professional camera experiences, graphical effects, extends our performance framework, and continues the evolution of features related to privacy, security, and background tasks.  We’re looking forward to \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003ehearing what you think\u003c/a\u003e, and thank you in advance for your continued help in making Android a platform that works for everyone.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eMedia and camera updates\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 enhances support for professional camera users, allowing for hybrid auto exposure along with precise color temperature and tint adjustments. It\u0026#39;s easier than ever to capture motion photos with new Intent actions, and we\u0026#39;re continuing to improve UltraHDR images, with support for HEIC encoding and new parameters from the ISO 21496-1 draft standard.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eHybrid auto-exposure\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds new hybrid auto-exposure modes to \u003ca href=\"https://developer.android.com/media/camera/camera2\" target=\"_blank\"\u003eCamera2\u003c/a\u003e, allowing you to manually control specific aspects of exposure while letting the auto-exposure (AE) algorithm handle the rest. You can control \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_PRIORITY_MODE_SENSOR_SENSITIVITY_PRIORITY\" target=\"_blank\"\u003eISO + AE\u003c/a\u003e, and \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_PRIORITY_MODE_SENSOR_EXPOSURE_TIME_PRIORITY\" target=\"_blank\"\u003eexposure time + AE\u003c/a\u003e, providing greater flexibility compared to the current approach where you either have full manual control or rely entirely on auto-exposure.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetISOPriority\u003c/span\u003e() {\n    \u003cspan\u003e// ... (Your existing code before the snippet) ...\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e availablePriorityModes = mStaticInfo.characteristics.\u003cspan\u003eget\u003c/span\u003e(\n        CameraCharacteristics.CONTROL_AE_AVAILABLE_PRIORITY_MODES\n    )\n\n    \u003cspan\u003e// ... (Your existing code between the snippets) ...\u003c/span\u003e\n\n    \u003cspan\u003e// Turn on AE mode to set priority mode\u003c/span\u003e\n    reqBuilder.\u003cspan\u003eset\u003c/span\u003e(\n        CaptureRequest.CONTROL_AE_MODE,\n        CameraMetadata.CONTROL_AE_MODE_ON\n    )\n    reqBuilder.\u003cspan\u003eset\u003c/span\u003e(\n        CaptureRequest.CONTROL_AE_PRIORITY_MODE,\n        CameraMetadata.CONTROL_AE_PRIORITY_MODE_SENSOR_SENSITIVITY_PRIORITY\n    )\n    reqBuilder.\u003cspan\u003eset\u003c/span\u003e(\n        CaptureRequest.SENSOR_SENSITIVITY,\n        TEST_SENSITIVITY_VALUE\n    )\n    \u003cspan\u003eval\u003c/span\u003e request: CaptureRequest = reqBuilder.build()\n\n    \u003cspan\u003e// ... (Your existing code after the snippet) ...\u003c/span\u003e\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003ch3\u003e\u003cspan\u003ePrecise color temperature and tint adjustments\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds camera support for fine color temperature and tint adjustments to better support professional video recording applications. White balance settings are currently controlled through \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CaptureRequest#CONTROL_AWB_MODE\" target=\"_blank\"\u003e\u003cspan\u003eCONTROL_AWB_MODE\u003c/span\u003e\u003c/a\u003e, which contains options limited to a preset list, such as \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AWB_MODE_INCANDESCENT\" target=\"_blank\"\u003eIncandescent\u003c/a\u003e, \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AWB_MODE_CLOUDY_DAYLIGHT\" target=\"_blank\"\u003eCloudy\u003c/a\u003e, and \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AWB_MODE_TWILIGHT\" target=\"_blank\"\u003eTwilight\u003c/a\u003e. The \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#COLOR_CORRECTION_MODE_CCT\" target=\"_blank\"\u003eCOLOR_CORRECTION_MODE_CCT\u003c/a\u003e\u003c/span\u003e enables the use of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CaptureRequest#COLOR_CORRECTION_COLOR_TEMPERATURE\" target=\"_blank\"\u003eCOLOR_CORRECTION_COLOR_TEMPERATURE\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CaptureRequest#COLOR_CORRECTION_COLOR_TINT\" target=\"_blank\"\u003eCOLOR_CORRECTION_COLOR_TINT\u003c/a\u003e\u003c/span\u003e for precise adjustments of white balance based on the correlated color temperature.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetCCT\u003c/span\u003e() {\n    \u003cspan\u003e// ... (Your existing code before this point) ...\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e colorTemperatureRange: Range\u0026lt;Int\u0026gt; =\n        mStaticInfo.characteristics[CameraCharacteristics.COLOR_CORRECTION_COLOR_TEMPERATURE_RANGE]\n\n    \u003cspan\u003e// Set to manual mode to enable CCT mode\u003c/span\u003e\n    reqBuilder[CaptureRequest.CONTROL_AWB_MODE] = CameraMetadata.CONTROL_AWB_MODE_OFF\n    reqBuilder[CaptureRequest.COLOR_CORRECTION_MODE] = CameraMetadata.COLOR_CORRECTION_MODE_CCT\n    reqBuilder[CaptureRequest.COLOR_CORRECTION_COLOR_TEMPERATURE] = \u003cspan\u003e5000\u003c/span\u003e\n    reqBuilder[CaptureRequest.COLOR_CORRECTION_COLOR_TINT] = \u003cspan\u003e30\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e request: CaptureRequest = reqBuilder.build()\n\n    \u003cspan\u003e// ... (Your existing code after this point) ...\u003c/span\u003e\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg alt=\"Five photos of the back of a Google Pixel phone demonstrate different color temperatures and tints. The original photo is in the top left, followed by Tint -50, Tint +50, Temp 3000, and Temp 7000.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvxe-0r33vwoQlKCIdtt4ZdLF3GzBpS_xD7ADp10see5IQgBu7LCiZ_r8DCGZw5pAMqsA1GncK-vdzSSSVhjXRcl5cdhJcvcCpQBrK4rZJgJ3PYo7cnxc-ikxzj01w0t4NTBbtXfQ4mgsoQp6r0jv6q1S3ghwQ-Adfpszt_VdCZTTHJcSFAaHHHF_R9kQ/s1600/color-and-tine-adjustments-android-16.png\" width=\"100%\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch3\u003e\u003cspan\u003eMotion photo capture intent actions\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds standard Intent actions — \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/provider/MediaStore#ACTION_MOTION_PHOTO_CAPTURE\" target=\"_blank\"\u003eACTION_MOTION_PHOTO_CAPTURE\u003c/a\u003e\u003c/span\u003e, and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/provider/MediaStore#ACTION_MOTION_PHOTO_CAPTURE_SECURE\" target=\"_blank\"\u003eACTION_MOTION_PHOTO_CAPTURE_SECURE\u003c/a\u003e\u003c/span\u003e — which request that the camera application capture a motion photo and return it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Moving image of a diverse group of friends playing a game of horseshoe\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjsiV0eebKBV_Vqk4qQ3P_wQ2nhFRt-2UPLVp_wSEjddojtzHiY43JLTFgSunB-JVo4B_VUefBN4vCphOQw_cfapnUY_2bHdrASsSCSZ401IKGF3QUpMSjH85gVryoD4HK-KzKIgPV8Sb6P0rP-_Ei-f3ADOlivVfmetZq36HhC3nuyZgB3SacpdHn09Tk/s1600/image11.gif\" width=\"640\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eYou must either pass an extra \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/provider/MediaStore#EXTRA_OUTPUT\" target=\"_blank\"\u003eEXTRA_OUTPUT\u003c/a\u003e\u003c/span\u003e to control where the image will be written, or a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/net/Uri\" target=\"_blank\"\u003eUri\u003c/a\u003e\u003c/span\u003e through \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/android/content/Intent\" target=\"_blank\"\u003eIntent\u003c/a\u003e\u003c/span\u003e \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent#setClipData%28android.content.ClipData%29\" target=\"_blank\"\u003esetClipData\u003c/a\u003e\u003c/span\u003e. If you don\u0026#39;t set a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/ClipData\" target=\"_blank\"\u003eClipData\u003c/a\u003e\u003c/span\u003e, it will be copied there for you when calling \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Context#startActivity%28android.content.Intent%29\" target=\"_blank\"\u003eContext.startActivity\u003c/a\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eUltraHDR image enhancements\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjosuJiP4hGG2gPyE-YFbgky3699PSLkcEoq3Jq1IvAEDsDp79hix1zkfQXeaU7bNvOoCDvX0mDl5VIbPxIfrxZzAVpKh08gYOxaBnzpNLDlO56meKHVwuNRLl6WhPs1tiafCt-YJuYgh6e0ErGn8sQTUS-J8aspttHZFr3mi1O56CgTqlycAU5tF5ango/s1086/image9.png\"\u003e\u003cimg alt=\"A split-screen image compares Standard Dynamic Range (SDR) and High Dynamic Range (HDR) image quality side-by-side using a singular image of a detailed landscape. The HDR side is more vivid and vibrant.\" data-original-height=\"924\" data-original-width=\"1086\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjosuJiP4hGG2gPyE-YFbgky3699PSLkcEoq3Jq1IvAEDsDp79hix1zkfQXeaU7bNvOoCDvX0mDl5VIbPxIfrxZzAVpKh08gYOxaBnzpNLDlO56meKHVwuNRLl6WhPs1tiafCt-YJuYgh6e0ErGn8sQTUS-J8aspttHZFr3mi1O56CgTqlycAU5tF5ango/s320/image9.png\" width=\"320\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAndroid 16 continues our work to deliver dazzling image quality with \u003ca href=\"https://developer.android.com/media/platform/hdr-image-format\" target=\"_blank\"\u003eUltraHDR\u003c/a\u003e images. It adds support for UltraHDR images in the HEIC file format. These images will get \u003cspan\u003eImageFormat\u003c/span\u003e type \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/ImageFormat#HEIC_ULTRAHDR\" target=\"_blank\"\u003eHEIC_ULTRAHDR\u003c/a\u003e\u003c/span\u003e and will contain an embedded gainmap similar to the existing UltraHDR JPEG format. We\u0026#39;re working on AVIF support for UltraHDR as well, so stay tuned.\u003c/p\u003e\n\n\u003cp\u003eIn addition, Android 16 implements additional parameters in UltraHDR from the \u003ca href=\"https://www.iso.org/standard/86775.html\" target=\"_blank\"\u003eISO 21496-1 draft standard\u003c/a\u003e, including the ability to get and set the colorspace that gainmap math should be applied in, as well as support for HDR encoded base images with SDR gainmaps.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eCustom graphical effects with AGSL\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 adds \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/RuntimeColorFilter\" target=\"_blank\"\u003eRuntimeColorFilter\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/RuntimeXfermode\" target=\"_blank\"\u003eRuntimeXfermode\u003c/a\u003e\u003c/span\u003e, allowing you to author complex effects like Threshold, Sepia, and Hue Saturation and apply them to draw calls. Since Android 13, you\u0026#39;ve been able to use \u003ca href=\"https://developer.android.com/develop/ui/views/graphics/agsl\" target=\"_blank\"\u003eAGSL\u003c/a\u003e to create custom \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/RuntimeShader\" target=\"_blank\"\u003eRuntimeShaders\u003c/a\u003e\u003c/span\u003e that extend \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Shader\" target=\"_blank\"\u003eShaders\u003c/a\u003e\u003c/span\u003e. The new API mirrors this, adding an AGSL-powered \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/RuntimeColorFilter\" target=\"_blank\"\u003eRuntimeColorFilter\u003c/a\u003e\u003c/span\u003e that extends \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/ColorFilter\" target=\"_blank\"\u003eColorFilters\u003c/a\u003e\u003c/span\u003e, and a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Xfermode\" target=\"_blank\"\u003eXfermode\u003c/a\u003e\u003c/span\u003e effect that allows you to implement AGSL-based custom compositing and blending between source and destination pixels.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e thresholdEffectString = \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    uniform half threshold;\n    half4 \u003cspan\u003emain\u003c/span\u003e(half4 c) {\n        half luminosity = dot(c.rgb, half3(\u003cspan\u003e0.2126\u003c/span\u003e, \u003cspan\u003e0.7152\u003c/span\u003e, \u003cspan\u003e0.0722\u003c/span\u003e));\n        half bw = step(threshold, luminosity);\n        \u003cspan\u003ereturn\u003c/span\u003e bw.xxx1 * c.a;\n    }\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esetCustomColorFilter\u003c/span\u003e(paint: Paint) {\n   \u003cspan\u003eval\u003c/span\u003e filter = RuntimeColorFilter(thresholdEffectString)\n   filter.setFloatUniform(\u003cspan\u003e0.5\u003c/span\u003e)\n   paint.colorFilter = filter\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cspan\u003eBehavior changes\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWith every Android release, we seek to make the platform more efficient, privacy conscious, internationalization friendly, and robust, balancing the needs of apps against hardware support, system performance, user privacy, and battery life. This can result in behavior changes that impact compatibility.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eEdge to edge opt-out going away\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.android.com/about/versions/15/behavior-changes-15#edge-to-edge\" target=\"_blank\"\u003eAndroid 15 enforced edge-to-edge\u003c/a\u003e for apps targeting Android 15 (SDK 35), but your app could opt-out by setting \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/R.attr#windowOptOutEdgeToEdgeEnforcement\" target=\"_blank\"\u003eR.attr#windowOptOutEdgeToEdgeEnforcement\u003c/a\u003e\u003c/span\u003e to \u003cspan\u003etrue\u003c/span\u003e. Once your app targets Android 16 (Baklava), \u003cspan\u003eR.attr#windowOptOutEdgeToEdgeEnforcement\u003c/span\u003e is deprecated and disabled and your app cannot opt-out of going edge-to-edge. To be compatible with Android 16 Beta 2, ensure your app supports edge-to-edge and remove any use of \u003cspan\u003eR.attr#windowOptOutEdgeToEdgeEnforcement\u003c/span\u003e. To support edge-to-edge, see the \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/insets\" target=\"_blank\"\u003eCompose\u003c/a\u003e and \u003ca href=\"https://developer.android.com/develop/ui/views/layout/edge-to-edge\" target=\"_blank\"\u003eViews\u003c/a\u003e guidance. Please let us know about concerns in our tracker on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eHealth and fitness permissions\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor apps targeting Android 16 or higher, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/Manifest.permission#BODY_SENSORS\" target=\"_blank\"\u003eBODY_SENSORS\u003c/a\u003e\u003c/span\u003e permissions are transitioning to the granular permissions under \u003cspan\u003eandroid.permissions.health\u003c/span\u003e also used by \u003ca href=\"https://developer.android.com/health-and-fitness/guides/health-connect\" target=\"_blank\"\u003eHealth Connect\u003c/a\u003e. Any API previously requiring \u003cspan\u003eBODY_SENSORS\u003c/span\u003e or \u003cspan\u003eBODY_SENSORS_BACKGROUND\u003c/span\u003e will now require the corresponding \u003cspan\u003eandroid.permissions.health permission\u003c/span\u003e. This affects the following data types, APIs, and foreground service types:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/health/services/client/data/DataType#HEART_RATE_BPM%28%29\" target=\"_blank\"\u003eHEART_RATE_BPM\u003c/a\u003e\u003c/span\u003e from Wear Health Services\u003c/li\u003e\n\u003cli\u003e\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/Sensor#TYPE_HEART_RATE\" target=\"_blank\"\u003eSensor.TYPE_HEART_RATE\u003c/a\u003e\u003c/span\u003e from Android Sensor Manager\u003c/li\u003e\n\u003cli\u003e\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/androidx/wear/protolayout/expression/PlatformHealthSources#heartRateAccuracy%28%29\" target=\"_blank\"\u003eheartRateAccuracy\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/androidx/wear/protolayout/expression/PlatformHealthSources#heartRateBpm%28%29\" target=\"_blank\"\u003eheartRateBpm\u003c/a\u003e\u003c/span\u003e from Wear ProtoLayout\u003c/li\u003e\n\u003cli\u003e\u003cspan\u003e\u003ca href=\"https://developer.android.com/develop/background-work/services/fgs/service-types#health\" target=\"_blank\"\u003eFOREGROUND_SERVICE_TYPE_HEALTH\u003c/a\u003e\u003c/span\u003e where the respective \u003cspan\u003eandroid.permission.health\u003c/span\u003e permission is needed in place of \u003cspan\u003eBODY_SENSORS\u003c/span\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003cp\u003eIf your app uses these APIs, it should now request the respective granular permissions:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eFor while-in-use monitoring of Heart Rate, SpO2, or Skin Temperature, request the granular permission under \u003cspan\u003eandroid.permissions.health\u003c/span\u003e, such as \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/health/connect/HealthPermissions#READ_HEART_RATE\" target=\"_blank\"\u003eREAD_HEART_RATE\u003c/a\u003e\u003c/span\u003e instead of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/Manifest.permission#BODY_SENSORS\" target=\"_blank\"\u003eBODY_SENSORS\u003c/a\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003cli\u003eFor background sensor access, request \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/health/connect/HealthPermissions#READ_HEALTH_DATA_IN_BACKGROUND\" target=\"_blank\"\u003eREAD_HEALTH_DATA_IN_BACKGROUND\u003c/a\u003e\u003c/span\u003e instead of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/Manifest.permission#BODY_SENSORS_BACKGROUND\" target=\"_blank\"\u003eBODY_SENSORS_BACKGROUND\u003c/a\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eThese permissions are the same as those that guard access to reading data from Health Connect, the Android datastore for health, fitness, and wellness data.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eAbandoned empty jobs stop reason\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAn abandoned job occurs when the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/android/app/job/JobParameters\" target=\"_blank\"\u003eJobParameters\u003c/a\u003e\u003c/span\u003e object associated with the job has been garbage collected, but \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/job/JobService#jobFinished%28android.app.job.JobParameters,%20boolean%29\" target=\"_blank\"\u003ejobFinished\u003c/a\u003e\u003c/span\u003e has not been called to signal job completion. This indicates that the job may be running and being rescheduled without the application\u0026#39;s awareness.\u003c/p\u003e\n\n\u003cp\u003eApplications in Android 16 that rely on \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/job/JobScheduler\" target=\"_blank\"\u003eJobScheduler\u003c/a\u003e\u003c/span\u003e without maintaining a strong reference to the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/job/JobParameters\" target=\"_blank\"\u003eJobParameters\u003c/a\u003e\u003c/span\u003e object will now be granted the new job stop reason \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/job/JobParameters#STOP_REASON_TIMEOUT_ABANDONED\" target=\"_blank\"\u003eSTOP_REASON_TIMEOUT_ABANDONED\u003c/a\u003e\u003c/span\u003e on timeout, instead of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/job/JobParameters#STOP_REASON_TIMEOUT\" target=\"_blank\"\u003eSTOP_REASON_TIMEOUT\u003c/a\u003e\u003c/span\u003e.\n\n\u003c/p\u003e\u003cp\u003eIf there are frequent occurrences of the new abandoned stop reason, the system will take mitigation steps to reduce job frequency. Please use the new stop reason to detect and reduce abandoned jobs.\n\n\u003c/p\u003e\u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e If you\u0026#39;re using \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/androidx/work/WorkManager\" target=\"_blank\"\u003eWorkManager\u003c/a\u003e\u003c/span\u003e, you\u0026#39;re not expected to be impacted by this change — one nice side effect of using Android Jetpack to schedule your work.\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003cspan\u003eIntent redirect changes\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 introduces default security hardening against Intent redirection attacks regardless of your app\u0026#39;s targetSDK version. The \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent#removeLaunchSecurityProtection%28%29\" target=\"_blank\"\u003eremoveLaunchSecurityProtection\u003c/a\u003e\u003c/span\u003e API allows you to opt-out of this protection if your testing reveals issues.\u003c/p\u003e\n\n\u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e Opting out of security protections should be done with caution and only when absolutely necessary, as it can increase the risk of security vulnerabilities.\u003c/blockquote\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e iSublevel = intent.getParcelableExtra(\u003cspan\u003e\u0026#34;sub_intent\u0026#34;\u003c/span\u003e, Intent::class.java)\niSublevel?.let {\n    it.removeLaunchSecurityProtection()\n    startActivity(it)\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eElegant font APIs deprecated and disabled\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eApps targeting Android 15 (API level 35) have the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/R.attr#elegantTextHeight\" target=\"_blank\"\u003eelegantTextHeight\u003c/a\u003e\u003c/span\u003e \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/TextView\" target=\"_blank\"\u003eTextView\u003c/a\u003e\u003c/span\u003e attribute set to true by default, replacing the compact font with one that is much more readable. You could override this by setting the \u003cspan\u003eelegantTextHeight\u003c/span\u003e attribute to false.\u003c/p\u003e\n\n\u003cp\u003eAndroid 16 deprecates the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/R.attr#elegantTextHeight\" target=\"_blank\"\u003eelegantTextHeight\u003c/a\u003e\u003c/span\u003e attribute, and the attribute will be ignored once your app targets Android 16. The “UI fonts” controlled by these APIs are being discontinued, so you should adapt any layouts to ensure consistent and future proof text rendering in Arabic, Lao, Myanmar, Tamil, Gujarati, Kannada, Malayalam, Odia, Telugu or Thai.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Example of default eleganttextHeight behavior for apps targeting Android 14 (API level 34) and lower\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhmRbXi-s00iTanHCzKV8fnIPLzG2MPFbfFVQO3gLTi0_crDexiYpJxu03v9k_s6UrGvlV0IXw-5Gl-23ZvKgLBywBmAh2qVt1w5Wkwiq99hS20pTjnXtmmI9pL8G4ZkhTATSY4HI_tyCFBNs0K1wocVhksCzCujUa0oJVgwQ_YRhytQofiChi_6y741Nc/s1600/image10.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003edefault \u003cspan\u003eelegantTextHeight\u003c/span\u003e behavior for apps targeting Android 14 (API level 34) and lower\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Example of default elegantTextHeight behavior for apps targeting Android 15 (API level 35) and higher\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTcnbT4QQektlbZokIhZe7C-inn580cAIVIhHMxZLsVUgCkYbss7RM3xLur0d3b5FKi5VzJuNIz9JVT1wfjKFE-zfLO1x1DOp96lL-GYhlkIX_Vb7WtVh84oIBf8RHBZTUYmWK5IQmHltrdD_rSMURurGq1xdciWYk6DCu2W1TNo-2AR132SQVQtKOZeY/s1600/image5.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003edefault \u003cspan\u003eelegantTextHeight\u003c/span\u003e behavior for apps targeting Android 15 (API level 35) and higher\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\u003cbr/\u003e\n\n\u003ch3\u003e\u003cspan\u003e16 KB page size compatibility mode\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 15 introduced support for 16KB memory pages to \u003ca href=\"https://developer.android.com/guide/practices/page-sizes\" target=\"_blank\"\u003eoptimize performance\u003c/a\u003e of the platform. Android 16 adds a \u003ca href=\"https://source.android.com/docs/core/architecture/16kb-page-size/16kb-backcompat-option\" target=\"_blank\"\u003ecompatibility mode\u003c/a\u003e, allowing some apps built for 4K memory pages to run on a device configured for 16KB memory pages.\u003c/p\u003e\n\n\u003cp\u003eIf Android detects that your app has 4KB aligned memory pages, it will automatically use compatibility mode and display a notification dialog to the user. Setting the \u003cspan\u003eandroid:pageSizeCompat\u003c/span\u003e property in the \u003cspan\u003eAndroidManifest.xml\u003c/span\u003e to enable the backwards compatibility mode will prevent the display of the dialog when your app launches. For best performance, reliability, and stability, your app should still be 16KB aligned. Read our recent blog post about \u003ca href=\"https://android-developers.googleblog.com/2024/12/get-your-apps-ready-for-16-kb-page-size-devices.html\" target=\"_blank\"\u003eupdating your apps to support 16KB memory pages\u003c/a\u003e for more details.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of PageSizeCompatTestApp in Android 16\" height=\"640\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjcBheI0sklweAogiWzDrKRdrrj9kjvHuLrk7P7PLqo3Pjpcpfx8-FynBFOQqSV4mu5VfaVbtPsul9_8Gf_NEZaUfsgeN9FqXmY66oAiOCUuMxQFUBWYuZcz53mNwJopXRknH1wqkoMuc78zrYn2ito6njiROl4pnaRiH2C95uhkSmukaAc8aEjCR1gzoU/w360-h640/16-kb-compat-mode-dialog.png\" width=\"360\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch3\u003e\u003cspan\u003eMeasurement system customization\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eUsers can now customize their measurement system in regional preferences within Settings. The user preference is included as part of the locale code, so you can register a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/BroadcastReceiver\" target=\"_blank\"\u003eBroadcastReceiver\u003c/a\u003e\u003c/span\u003e on \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent#ACTION_LOCALE_CHANGED\" target=\"_blank\"\u003eACTION_LOCALE_CHANGED\u003c/a\u003e\u003c/span\u003e to handle locale configuration changes when regional preferences change.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ca href=\"https://developer.android.com/guide/topics/resources/multilingual-support#formatters\" target=\"_blank\"\u003eformatters\u003c/a\u003e can help match the local experience. For example, \u0026#34;0.5 in\u0026#34; in English (United States), is \u0026#34;12,7 mm\u0026#34; for a user who has set their phone to English (Denmark) or who uses their phone in English (United States) with the metric system as the measurement system preference.\u003c/p\u003e\n\n\u003cp\u003eTo find these settings in Android 16 Beta 2, open the Settings app and navigate to System \u0026gt; Languages \u0026amp; region.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eContent handling for live wallpapers\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn Android 16, the live wallpaper framework is gaining a new content API to address the challenges of dynamic, user-driven wallpapers. Currently, live wallpapers incorporating user-provided content require complex, service-specific implementations. Android 16 introduces \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/wallpaper/WallpaperDescription\" target=\"_blank\"\u003eWallpaperDescription\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/wallpaper/WallpaperInstance\" target=\"_blank\"\u003eWallpaperInstance\u003c/a\u003e\u003c/span\u003e. \u003cspan\u003eWallpaperDescription\u003c/span\u003e allows you to identify distinct instances of a live wallpaper from the same service. For example, a wallpaper that has instances on both the home screen and on the lock screen may have unique content in both places. The wallpaper picker and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/WallpaperManager\" target=\"_blank\"\u003eWallpaperManager\u003c/a\u003e\u003c/span\u003e use this metadata to better present wallpapers to users, streamlining the process for you to create diverse and personalized live wallpaper experiences.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eHeadroom APIs in ADPF\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe \u003cspan\u003e\u003ca href=\"https://developer.android.com/sdk/api_diff/b-beta2-incr/changes/android.os.health.SystemHealthManager\" target=\"_blank\"\u003eSystemHealthManager\u003c/a\u003e\u003c/span\u003e introduces the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/os/health/SystemHealthManager#getCpuHeadroom%28android.os.CpuHeadroomParams%29\" target=\"_blank\"\u003egetCpuHeadroom\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003egetGpuHeadroom\u003c/span\u003e APIs, designed to provide games and resource-intensive apps with estimates of available CPU and GPU resources. These methods offer a way for you to gauge how your app or game can best improve system health, particularly when used in conjunction with other \u003ca href=\"https://developer.android.com/games/optimize/adpf\" target=\"_blank\"\u003eAndroid Dynamic Performance Framework\u003c/a\u003e (ADPF) APIs that \u003ca href=\"https://developer.android.com/games/optimize/adpf/thermal\" target=\"_blank\"\u003edetect thermal throttling\u003c/a\u003e. By using \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/os/CpuHeadroomParams\" target=\"_blank\"\u003eCpuHeadroomParams\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/os/GpuHeadroomParams\" target=\"_blank\"\u003eGpuHeadroomParams\u003c/a\u003e\u003c/span\u003e on supported devices, you will be able to customize the time window used to compute the headroom and select between average or minimum resource availability. This can help you reduce your CPU or GPU resource usage accordingly, leading to better user experiences and improved battery life.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eKey sharing API\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 adds APIs that support sharing access to \u003ca href=\"https://developer.android.com/privacy-and-security/keystore\" target=\"_blank\"\u003eAndroid Keystore\u003c/a\u003e keys with other apps. The new \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/security/keystore/KeyStoreManager\" target=\"_blank\"\u003eKeyStoreManager\u003c/a\u003e\u003c/span\u003e class supports \u003ca href=\"https://developer.android.com/reference/android/security/keystore/KeyStoreManager#grantKeyAccess%28java.lang.String,%20int%29\" target=\"_blank\"\u003egranting\u003c/a\u003e and \u003ca href=\"https://developer.android.com/reference/android/security/keystore/KeyStoreManager#revokeKeyAccess%28java.lang.String,%20int%29\" target=\"_blank\"\u003erevoking\u003c/a\u003e access to keys by app \u003ca href=\"https://developer.android.com/reference/android/os/Process#myUid%28%29\" target=\"_blank\"\u003euid\u003c/a\u003e, and includes an API for apps to access shared keys.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eStandardized picture and audio quality framework for TVs\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe new \u003ca href=\"https://developer.android.com/reference/android/media/quality/package-summary\" target=\"_blank\"\u003eMediaQuality package\u003c/a\u003e in Android 16 exposes a set of standardized APIs for access to audio and picture profiles and hardware-related settings. This allows streaming apps to query profiles and apply them to media dynamically:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eMovies mastered with a wider dynamic range require greater color accuracy to see subtle details in shadows and adjust to ambient light, so a profile that prefers color accuracy over brightness may be appropriate.\u003c/li\u003e\n\u003cli\u003eLive sporting events are often mastered with a narrow dynamic range, but are often watched in daylight, so a profile that gives preference to brightness over color accuracy can give better results.\u003c/li\u003e\n\u003cli\u003eFully interactive content wants minimal processing to reduce latency, and wants higher frame rates, which is why many TV\u0026#39;s ship with a game profile.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eThe API allows apps to switch between profiles and users to enjoy the benefits of tuning supported TVs to best suit their content.\n\n\u003c/p\u003e\u003ch2\u003e\u003cspan\u003eAccessibility\u003c/span\u003e\u003c/h2\u003e\n  \n\u003cp\u003eAndroid 16 adds additional APIs to enhance UI semantics that help improve consistency for users that rely on accessibility services, such as \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#talkback\" target=\"_blank\"\u003eTalkBack\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eDuration added to TtsSpan\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 extends \u003cspan\u003eTtsSpan\u003c/span\u003e with a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/text/style/TtsSpan#TYPE_DURATION\" target=\"_blank\"\u003eTYPE_DURATION\u003c/a\u003e\u003c/span\u003e, consisting of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/text/style/TtsSpan#ARG_HOURS\" target=\"_blank\"\u003eARG_HOURS\u003c/a\u003e\u003c/span\u003e, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/text/style/TtsSpan#ARG_MINUTES\" target=\"_blank\"\u003eARG_MINUTES\u003c/a\u003e\u003c/span\u003e, and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/text/style/TtsSpan#ARG_SECONDS\" target=\"_blank\"\u003eARG_SECONDS\u003c/a\u003e\u003c/span\u003e. This allows you to directly annotate time duration, ensuring accurate and consistent text-to-speech output with services like \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#talkback\" target=\"_blank\"\u003eTalkBack\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eSupport elements with multiple labels\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid currently allows UI elements to derive their accessibility label from another, and now offers the ability for multiple labels to be associated, a common scenario in web content. By introducing a list-based API within \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo\" target=\"_blank\"\u003eAccessibilityNodeInfo\u003c/a\u003e\u003c/span\u003e, Android can directly support these multi-label relationships. As part of this change, we\u0026#39;ve deprecated \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setLabeledBy%28android.view.View%29\" target=\"_blank\"\u003eAccessibilityNodeInfo\u003c/a\u003e\u003c/span\u003e \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setLabeledBy%28android.view.View%29\" target=\"_blank\"\u003esetLabeledBy\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getLabeledBy%28%29\" target=\"_blank\"\u003egetLabeledBy\u003c/a\u003e\u003c/span\u003e in favor of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#addLabeledBy%28android.view.View%29\" target=\"_blank\"\u003eaddLabeledBy\u003c/a\u003e\u003c/span\u003e, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#removeLabeledBy%28android.view.View%29\" target=\"_blank\"\u003eremoveLabeledBy\u003c/a\u003e\u003c/span\u003e, and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getLabeledByList%28%29\" target=\"_blank\"\u003egetLabeledByList\u003c/a\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eImproved support for expandable elements\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds accessibility APIs that allow you to convey the expanded or collapsed state of interactive elements, such as menus and expandable lists. By setting the expanded state using \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setExpandedState%28int%29\" target=\"_blank\"\u003esetExpandedState\u003c/a\u003e\u003c/span\u003e and dispatching \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED\" target=\"_blank\"\u003eTYPE_WINDOW_CONTENT_CHANGED\u003c/a\u003e AccessibilityEvents\u003c/span\u003e with a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#CONTENT_CHANGE_TYPE_EXPANDED\" target=\"_blank\"\u003eCONTENT_CHANGE_TYPE_EXPANDED\u003c/a\u003e\u003c/span\u003e content change type, you can ensure that screen readers like \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#talkback\" target=\"_blank\"\u003eTalkBack\u003c/a\u003e announce state changes, providing a more intuitive and inclusive user experience.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eIndeterminate ProgressBars\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo#RANGE_TYPE_INDETERMINATE\" target=\"_blank\"\u003eRANGE_TYPE_INDETERMINATE\u003c/a\u003e\u003c/span\u003e, giving a way for you to expose \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo\" target=\"_blank\"\u003eRangeInfo\u003c/a\u003e\u003c/span\u003e for both determinate and indeterminate \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/ProgressBar\" target=\"_blank\"\u003eProgressBar\u003c/a\u003e\u003c/span\u003e widgets, allowing services like \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#talkback\" target=\"_blank\"\u003eTalkBack\u003c/a\u003e to more consistently provide feedback for progress indicators.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eTri-state CheckBox\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe new \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo\" target=\"_blank\"\u003eAccessibilityNodeInfo\u003c/a\u003e \u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#getChecked()\" target=\"_blank\"\u003egetChecked\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setChecked%28int%29\" target=\"_blank\"\u003esetChecked(int)\u003c/a\u003e\u003c/span\u003e methods in Android 16 now support a \u0026#34;partially checked\u0026#34; state in addition to \u0026#34;checked\u0026#34; and \u0026#34;unchecked.\u0026#34; This replaces the deprecated boolean \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#isChecked%28%29\" target=\"_blank\"\u003eisChecked\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setChecked%28boolean%29\" target=\"_blank\"\u003esetChecked(boolean)\u003c/a\u003e\u003c/span\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eTwo Android API releases in 2025\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have \u003ca href=\"https://android-developers.googleblog.com/2024/10/android-sdk-release-update.html\" target=\"_blank\"\u003eanother release with new developer APIs in Q4\u003c/a\u003e. The Q2 major release will be the only release in 2025 to include behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; like our non-SDK quarterly releases, it will not include any intentional app-impacting behavior changes.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"2025 SDK release timeline showing a features only update in Q1 and Q3, a major SDK release with behavior changes, APIs, and features in Q2, and a minor SDK release with APIs and features in Q4\" height=\"164\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjSeVe1-ddLYBDekoJnJP_c3Qq3BOxmM8IOvx6DbeaQCpau5VrnpHG8G0UFayJsIrVZehmY-Sf85Wt8iDvxJ5M8D0fGOl4M_ucFffyosC4AgRae6R6gN-mNrm3Jp8XYsJtQVHGqv84obbkuy4DvFbDgwdBXeuQ_JOveA2IWC1hbned7OkXJfWClTO2Szac/w640-h164/image2.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cp\u003eWe\u0026#39;ll continue to have quarterly Android releases. The Q1 and Q3 updates provide incremental updates to ensure continuous quality. We’re putting additional energy into working with our device partners to bring the Q2 release to as many devices as possible. \u003c/p\u003e\n\n\u003cp\u003eThere’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, tied to the major API level.\u003c/p\u003e\n\n\n\u003ch2\u003e\u003cspan\u003eHow to get ready\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn addition to performing compatibility testing on this next major release, make sure that you\u0026#39;re compiling your apps against the new SDK, and use the compatibility framework to enable \u003cspan\u003etargetSdkVersion\u003c/span\u003e-gated behavior changes as they become available for early testing.\u003c/p\u003e\n\n\n\u003ch2\u003e\u003cspan\u003eApp compatibility\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg alt=\"The Android 16 production timeline shows the release stages, highlighting \u0026#39;Beta Releases\u0026#39; and \u0026#39;Platform Stability\u0026#39; in blue and green, respectively, from December to the final release.\" height=\"164\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh8TY0XnQe6aG75kWFsj-UHzu3bdFe7euFD0ZpENjeeg1Lblw-VQYYAR_i4OIebbPuchS1DTPGNteYzWSDAXUMPzigpBn4uRwDuN8UyMe5aEZGMIYHA1Vz33C91iGyHofDTfqDoJ_OFK47SZLhO-ZL1gPhEV5wTmTNIl1EyJUTbFck_k1OhRcT8NUzHVpQ/s1600/image3.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cp\u003eThe Android 16 Preview program runs from November 2024 until the final public release in Q2 of 2025. At key development milestones, we\u0026#39;ll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We\u0026#39;ll highlight critical APIs as they are ready to test in the preview program in blogs and on the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer website\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe’re targeting March of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. From that time you’ll have several months before the final release to complete your testing. Learn more by checking the \u003ca href=\"https://developer.android.com/about/versions/16/overview#timeline\" target=\"_blank\"\u003erelease timeline details\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch2\u003e\u003cspan\u003eGet started with Android 16\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eYou can \u003ca href=\"https://www.google.com/android/beta\" target=\"_blank\"\u003eenroll any supported Pixel device\u003c/a\u003e to get this and future Android Beta updates over-the-air. If you don’t have a Pixel device, you can \u003ca href=\"https://developer.android.com/about/versions/16/get#on_emulator\" target=\"_blank\"\u003euse the 64-bit system images with the Android Emulator\u003c/a\u003e in Android Studio. If you are currently on Android 16 Beta 1 or are already in the Android Beta program, you will be offered an over-the-air update to Beta 2.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;re looking for your feedback so please \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003ereport issues and submit feature requests\u003c/a\u003e on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e. The earlier we get your feedback, the more we can include in our work on the final release.\u003c/p\u003e\n\n\u003cp\u003eFor the best development experience with Android 16, we recommend that you use the latest preview of \u003ca href=\"https://developer.android.com/studio/preview\" target=\"_blank\"\u003eAndroid Studio (Meerkat)\u003c/a\u003e. Once you’re set up, here are some of the things you should do:\u003c/p\u003e\n\n\u003cul\u003e\u003cul\u003e\n\n\u003cli\u003eCompile against the new SDK, test in CI environments, and report any issues in our tracker on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e.\u003c/li\u003e\n\n\u003cli\u003eTest your current app for compatibility, learn whether your app is \u003ca href=\"https://developer.android.com/about/versions/16/behavior-changes-all\" target=\"_blank\"\u003eaffected by changes in Android 16\u003c/a\u003e, and install your app onto a device or emulator running Android 16 and extensively test it.\u003c/li\u003e\n \n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eWe’ll update the \u003ca href=\"https://developer.android.com/about/versions/16/download\" target=\"_blank\"\u003ebeta system images\u003c/a\u003e and SDK regularly throughout the Android 16 release cycle. Once you’ve installed a beta build, you’ll automatically get future updates over-the-air for all later previews and Betas.\u003c/p\u003e\n\n\u003cp\u003eFor complete information, visit the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer site\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": null,
  "modifiedTime": null
}
