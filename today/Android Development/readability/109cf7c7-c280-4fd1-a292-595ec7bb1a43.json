{
  "id": "109cf7c7-c280-4fd1-a292-595ec7bb1a43",
  "title": "Executing commands from Gradle",
  "link": "https://chrynan.codes/executing-commands-from-gradle/",
  "description": "Simply invoke command line processes within Gradle Tasks",
  "author": "Christopher Keenan",
  "published": "Tue, 25 Feb 2020 22:00:00 GMT",
  "source": "https://chrynan.codes/rss/",
  "categories": [
    "gradle",
    "groovy",
    "kotlin",
    "tasks",
    "automation",
    "command line",
    "terminal",
    "adb",
    "executable"
  ],
  "byline": "Christopher Keenan",
  "length": 2795,
  "excerpt": "Simply invoke command line processes within Gradle Tasks",
  "siteName": "Chris Keenan Codes",
  "favicon": "https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/code_FILL0_wght400_GRAD0_opsz48.svg",
  "text": "Simply invoke command line processes within Gradle Tasks Feb 25, 2020 • 2 min read Recently, I setup a system to automate the process of taking screenshots of an Android application. The system consisted of instrumentation tests, Gradle tasks, and a Fastlane command. The instrumentation tests were responsible for loading the different screens and capturing the screenshots. The Gradle tasks were responsible for running these tests, toggling Demo Mode for the device, and copying over the screenshots from the device to the local machine. Finally, the Fastlane command wired everything together and reported the results back to a communication channel.Creating this automation required calling command line processes from within Gradle tasks. Specifically, I had to call ADB commands to setup Demo Mode on a device. A Gradle task calling command line processes turned out to be fairly simple to implement, but not necessarily obvious, so I figured I'd share.Gradle provides the ability to call command line processes with the Exec class. The following is an example to setup Demo Mode on device by calling the appropriate ADB commands from a Gradle task:Kotlintask(\"enterDemoMode\", Exec::class) { group = \"demoMode\" executable = \"adp\" args = listOf(\"shell\", \"settings\", \"put\", \"global\", \"sysui_demo_allowed\", \"1\") } Groovytask('enterDemoMode', type: Exec, group: 'demoMode') { executable 'adb' args 'shell', 'settings', 'put', 'global', 'sysui_demo_allowed', '1' } The Gradle task is created using the task function. In both the Kotlin and Groovy versions, the name (\"enterDemoMode\") and type ( Exec::class ) are provided, however, the Kotlin version specifies the type as a class ( Exec::class ) and the Groovy version specifies just the class name ( Exec ). The Groovy version provides the group that this task belongs to as a parameter in the function, whereas, the Kotlin version provides the group within the lambda.Both the Kotlin and Groovy versions of the tasks specify the executable and args within the lambda closure. Obviously, the executable property states the command line process that is going to be invoked. And the args provides the command line process with a list of arguments.The above tasks equates to running the following command in your terminal:adb shell settings put global sysui_demo_allowed 1 EndExecuting command line processes from within Gradle tasks is fairly straightforward and provides a powerful toolset for automation.",
  "image": "https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026q=80\u0026fm=jpg\u0026crop=entropy\u0026cs=tinysrgb\u0026w=2000\u0026fit=max\u0026ixid=eyJhcHBfaWQiOjExNzczfQ",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"site-main\"\u003e\n\u003carticle\u003e\n\n    \u003cheader\u003e\n\n        \n\n        \n\n            \u003cp\u003eSimply invoke command line processes within Gradle Tasks\u003c/p\u003e\n\n        \u003csection\u003e\n\n            \u003cul\u003e\n                \u003cli\u003e\n                    \u003ca href=\"https://chrynan.codes/author/chrynan/\" aria-label=\"Read more of Christopher Keenan\"\u003e\n                        \u003cimg src=\"https://www.gravatar.com/avatar/2179fa575001969b7a3397951ef91a8f?s=250\u0026amp;d=mm\u0026amp;r=x\" alt=\"Christopher Keenan\"/\u003e\n                    \u003c/a\u003e\n                \u003c/li\u003e\n            \u003c/ul\u003e\n\n            \u003cdiv\u003e\n                \n                \u003cp\u003e\u003ctime datetime=\"2020-02-25\"\u003eFeb 25, 2020\u003c/time\u003e\n                        \u003cspan\u003e\u003cspan\u003e•\u003c/span\u003e 2 min read\u003c/span\u003e\n                \u003c/p\u003e\n            \u003c/div\u003e\n\n        \u003c/section\u003e\n\n            \u003cfigure\u003e\n                \u003cimg srcset=\"https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=300 300w,\n                            https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=600 600w,\n                            https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=1000 1000w,\n                            https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=2000 2000w\" sizes=\"(min-width: 1400px) 1400px, 92vw\" src=\"https://images.unsplash.com/photo-1509587837663-52b8687980c5?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=2000\" alt=\"Executing commands from Gradle\"/\u003e\n            \u003c/figure\u003e\n\n    \u003c/header\u003e\n\n    \u003csection\u003e\n        \u003cp\u003eRecently, I setup a system to automate the process of taking screenshots of an Android application. The system consisted of instrumentation tests, Gradle tasks, and a Fastlane command. The instrumentation tests were responsible for loading the different screens and capturing the screenshots. The Gradle tasks were responsible for running these tests, toggling Demo Mode for the device, and copying over the screenshots from the device to the local machine. Finally, the Fastlane command wired everything together and reported the results back to a communication channel.\u003c/p\u003e\u003cp\u003eCreating this automation required calling command line processes from within Gradle tasks. Specifically, I had to call \u003ca href=\"https://developer.android.com/studio/command-line/adb?ref=chrynan.codes\"\u003eADB\u003c/a\u003e commands to setup \u003ca href=\"https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/docs/demo_mode.md?ref=chrynan.codes\"\u003eDemo Mode\u003c/a\u003e on a device. A Gradle task calling command line processes turned out to be fairly simple to implement, but not necessarily obvious, so I figured I\u0026#39;d share.\u003c/p\u003e\u003cp\u003eGradle provides the ability to call command line processes with the \u003ca href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html?ref=chrynan.codes\"\u003eExec\u003c/a\u003e class. The following is an example to setup Demo Mode on device by calling the appropriate ADB commands from a Gradle task:\u003c/p\u003e\u003ch3 id=\"kotlin\"\u003eKotlin\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003etask(\u0026#34;enterDemoMode\u0026#34;, Exec::class) {\n    group = \u0026#34;demoMode\u0026#34;\n\n    executable = \u0026#34;adp\u0026#34;\n    args = listOf(\u0026#34;shell\u0026#34;, \u0026#34;settings\u0026#34;, \u0026#34;put\u0026#34;, \u0026#34;global\u0026#34;, \u0026#34;sysui_demo_allowed\u0026#34;, \u0026#34;1\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"groovy\"\u003eGroovy\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003etask(\u0026#39;enterDemoMode\u0026#39;, type: Exec, group: \u0026#39;demoMode\u0026#39;) {\n    executable \u0026#39;adb\u0026#39;\n    args \u0026#39;shell\u0026#39;, \u0026#39;settings\u0026#39;, \u0026#39;put\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;sysui_demo_allowed\u0026#39;, \u0026#39;1\u0026#39;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ca href=\"https://docs.gradle.org/current/dsl/org.gradle.api.Task.html?ref=chrynan.codes\"\u003eGradle task\u003c/a\u003e is created using the \u003ccode\u003etask\u003c/code\u003e function. In both the Kotlin and Groovy versions, the name (\u0026#34;enterDemoMode\u0026#34;) and type ( \u003ccode\u003eExec::class\u003c/code\u003e ) are provided, however, the Kotlin version specifies the type as a class ( \u003ccode\u003eExec::class\u003c/code\u003e ) and the Groovy version specifies just the class name ( \u003ccode\u003eExec\u003c/code\u003e ). The Groovy version provides the group that this task belongs to as a parameter in the function, whereas, the Kotlin version provides the group within the lambda.\u003c/p\u003e\u003cp\u003eBoth the Kotlin and Groovy versions of the tasks specify the \u003ccode\u003eexecutable\u003c/code\u003e and \u003ccode\u003eargs\u003c/code\u003e within the lambda closure. Obviously, the \u003ccode\u003eexecutable\u003c/code\u003e property states the command line process that is going to be invoked. And the \u003ccode\u003eargs\u003c/code\u003e provides the command line process with a list of arguments.\u003c/p\u003e\u003cp\u003eThe above tasks equates to running the following command in your terminal:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eadb shell settings put global sysui_demo_allowed 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"end\"\u003eEnd\u003c/h3\u003e\u003cp\u003eExecuting command line processes from within Gradle tasks is fairly straightforward and provides a powerful toolset for automation.\u003c/p\u003e\n    \u003c/section\u003e\n\n\n\u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2020-02-25T22:00:00Z",
  "modifiedTime": "2020-02-25T22:00:00Z"
}
