{
  "id": "f1e28d57-1a28-467f-8bb9-491c537eb20c",
  "title": "Profile \u0026 Benchmark Android Builds",
  "link": "https://proandroiddev.com/profile-benchmark-android-builds-b572948c5be5?source=rss----c72404660798---4",
  "description": "",
  "author": "Nika Chapidze",
  "published": "Mon, 31 Mar 2025 15:21:58 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin",
    "optimization",
    "android",
    "gradle"
  ],
  "byline": "Nika Chapidze",
  "length": 10277,
  "excerpt": "Understanding your build performance is crucial ‚Äî not just to identify bottlenecks but also to measure the impact of your optimizations. I‚Äôll walk you through the tools and techniques to analyze your‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Profile \u0026 Benchmark Android BuildsBuild analyzing tools and different benchmark scenariosGenerated by https://openai.comIn my previous article I covered various techniques to optimize Android build times. If you haven‚Äôt read it yet, I highly recommend checking it out:Understanding your build performance is crucial ‚Äî not just to identify bottlenecks but also to measure the impact of your optimizations. I‚Äôll walk you through the tools and techniques to analyze your Gradle builds and track improvements over time.To analyze Gradle builds, we can use:Android Studio Build Analyzer ‚Äî A built-in tool to identify bottlenecks in your build process../gradlew --profile ‚Äì Generates a simple profile report to analyze task execution times../gradlew --scan ‚Äì Provides a detailed report with insights into build performance (Uploads remotely)gradle-profiler --benchmark ‚Äì Tool for benchmarking Gradle builds over multiple runs.#1 Android Studio Build Analyzer:We‚Äôve all noticed the Build Analyzer tab next to the Build window. After a successful build, it provides key insights such as total build duration, configuration time, and optimization suggestions.By clicking on ‚ÄúTasks impacting build duration‚Äù, you can dive deeper into each task‚Äôs execution time, helping you pinpoint slow or inefficient steps in your build process.#2 Gradle Profile Option (Local)The Gradle Profile option generates an HTML report that provides detailed information about task execution, configuration performance, dependency resolution, etc.To generate the report, run the following command in the terminal:./gradlew --profile assembleDebug # Or assemble[Flavor]Debug#3. Gradle Scan Option (Remote üåê)The Gradle Build Scan provides an even more detailed performance report compared to local profiling. In addition to task execution and configuration times, it also includes: Build cache usage, Network activity,Test performance, Dependency insights and many more useful things.To generate a build scan, run the following command in the terminal and accept the terms:./gradlew --scanPublishing a build scan to scans.gradle.com requires accepting the Gradle Terms of Use defined at https://gradle.com/help/legal-terms-of-use. Do you accept these terms? [yes, no] yes Gradle Terms of Use accepted. Publishing build scan... https://gradle.com/s/dtt4r5mtn655y üìå Note: This report is public by default, meaning anyone with the link can access it. However, you can delete it if needed.#4 Gradle Profiler toolThe Gradle Profiler is a powerful tool for benchmarking build performance across different scenarios(with scenarios.txt file). It helps analyze how changes impact build times, allowing you to compare:Different JVM/Gradle argumentsCode change time on specific files/modulesResource changeLayout/Composable changeComparing the performance of Different git branches‚Äî To install Gradle Profiler, you can use Homebrew (or other installation methods):brew install gradle-profiler‚Äî Once installed, you can run it with the --benchmark option along with a scenarios.txt file:gradle-profiler --benchmark \\--project-dir [root-dir] \\--output-dir [output-dir] \\--scenario-file scenarios.txtüìå Note: Gradle Profiler uses the same Gradle version as your project but may add temporary files during execution. To avoid it, I recommend using the /build directory for both --gradle-user-homeand --output-dir.scenarios.txt defines multiple benchmarking configurations in JSON-like syntax.Here are some options that I found useful:scenario_name { tasks = [\":app:assembleDebug\"] // gradle task for scenario cleanup-tasks = [\"clean\"] // Cleanup gradle task jvm-args = [\"-Xmx4g\", \"-XX:+UseParallelGC\"] // Java arguments gradle-args = [\"--max-workers=4\"] // Gradle arguments // Adds a public method to a Java or Kotlin source class. Each iteration adds a new method and removes the previously added one apply-non-abi-change-to = [\"path/your_code_file.java\"] // Changes the body of a public method in a Java or Kotlin source class apply-abi-change-to = [\"path/your_code_file.java\"] // Adds view to layout apply-android-layout-change-to = \"app/src/main/res/your_layout_file.xml\" // Adds composable apply-kotlin-composable-change-to = \"app/src/main/java/your_composable.kt\" // Changes value of string apply-android-resource-value-change-to = \"app/src/main/res/values/strings.xml\" // Adds new string apply-android-resource-change-to = \"src/main/res/values/strings.xml\" // checks out a specific commit for the build step, and a different one for the cleanup step. git-checkout = { cleanup = \"efb43a1\" #commit hash or branch name\" build = \"master‚Äù } // Reverts a given set of commits before the build and resets it afterward. git-revert = [‚Äúeaav2e4‚Äù]}You can check more options in docs.‚Äî I‚Äôve created a sample project on GitHub with multiple modules containing dummy classes. You can explore different branches to experiment with various performance scenarios:Now, let‚Äôs go through some of the scenarios. üöÄ‚Äî Testing Different Gradle \u0026 JVM Argumentsscenarios:1Ô∏è‚É£ clean_build_parallelGC_4gb ‚Äì Uses Parallel GC with 4GB of heap memory. 2Ô∏è‚É£ clean_build_G1GC_2gb_max_workers_4 ‚Äì Uses G1 GC, limits heap to 2GB, and restricts Gradle to 4 workers.clean_build_parallelGC_4gb { tasks = [\":app:assembleDebug\"] jvm-args = [\"-Xmx4g\", \"-XX:+UseParallelGC\"] cleanup-tasks = [\"clean\"]}clean_build_G1GC_2gb_max_workers_4 { tasks = [\":app:assembleDebug\"] gradle-args = [\"--max-workers=4\"] jvm-args = [\"-XX:+UseG1GC\"] cleanup-tasks = [\"clean\"]}As a result, we can see the build iterations with Historical or Sorted(clearer) view and check the difference.parallelGC_4gb vs G1GC_2gb_max_workers_4scenarios:1Ô∏è‚É£ non_parallel ‚Üí standard run2Ô∏è‚É£ parallel ‚Üí Enabling gradle parallel execution via gradle param# \u003croot-project\u003e/scenarios.txtnon_parallel { tasks = [\":app:assembleDebug\"] clear-build-cache-before = SCENARIO}parallel { tasks = [\":app:assembleDebug\"] gradle-args = [\"--parallel\"] clear-build-cache-before = SCENARIO}‚Äî Enabling Caching for Faster Buildsscenarios:1Ô∏è‚É£ with_caching ‚Äì Uses Build Cache and Configuration Cache.2Ô∏è‚É£ without_caching ‚Äì Runs a regular build without caching.To simulate real-world changes, we modify dummy files in different modules using apply-non-abi-change-to. We also clear the build cache before each scenario starts, using clear-build-cache-before = SCENARIO.# \u003croot-project\u003e/scenarios.txtwith_caching { tasks = [\":app:assembleDebug\"] gradle-args = [\"--configuration-cache\", \"--build-cache\"] apply-non-abi-change-to = [\"feature1/src/main/java/ge/chapo/feature1/DummyData.kt\", \"feature2/src/main/java/ge/chapo/feature2/DummyData.kt\", \"feature3/src/main/java/ge/chapo/feature3/DummyData.kt\", ] clear-build-cache-before = SCENARIO}without_caching { tasks = [\":app:assembleDebug\"] apply-non-abi-change-to = [\"feature1/src/main/java/ge/chapo/feature1/DummyData.kt\", \"feature2/src/main/java/ge/chapo/feature2/DummyData.kt\", \"feature3/src/main/java/ge/chapo/feature3/DummyData.kt\", ] clear-build-cache-before = SCENARIO}we can use--measure-config-time and --measure-local-build-cache options to get additional infogradle-profiler --benchmark --measure-config-time --measure-local-build-cache --project-dir ./ --output-dir ./build --scenario-file scenarios.txt --gradle-user-home=./build/gradle As a result, we can see that with Caching, it is faster. You can also check how the faster configuration phase is on task start row and compare the cache size on the local build cache size row.without caching vs with caching‚Äî Changing filesscenarios:1Ô∏è‚É£ modify_functions ‚Üí Changes function implementations (ABI \u0026 Non-ABI changes). 2Ô∏è‚É£ modify_strings ‚Üí Modifies a string resource in strings.xml. 3Ô∏è‚É£ modify_layout ‚Üí Updates a layout XML file. 4Ô∏è‚É£ modify_compose ‚Üí Alters a Jetpack Compose UI component.by default warm-ups = 6 and iterations = 10, we can change it in our scenarios# \u003croot-project\u003e/scenarios.txtmodify_functions { tasks = [\":app:assembleDebug\"] apply-abi-change-to = [\"feature1/src/main/java/ge/chapo/feature1/DummyData.kt\"] apply-non-abi-change-to = [\"feature1/src/main/java/ge/chapo/feature1/DummyData.kt\"] warm-ups = 1 iterations = 3 clear-build-cache-before = SCENARIO}modify_strings { tasks = [\":app:assembleDebug\"] apply-android-resource-change-to = [\"feature1/src/main/res/values/strings.xml\"] warm-ups = 1 iterations = 3 clear-build-cache-before = SCENARIO}modify_layout { tasks = [\":app:assembleDebug\"] apply-android-layout-change-to = [\"feature1/src/main/res/layout/some_layout.xml\"] warm-ups = 1 iterations = 3 clear-build-cache-before = SCENARIO}modify_compose { tasks = [\":app:assembleDebug\"] apply-kotlin-composable-change-to = [\"app/src/main/java/ge/chapo/gradleoptimisationsample/MainActivity.kt\"] warm-ups = 1 iterations = 3 clear-build-cache-before = SCENARIO}In the result, you can compare performance after changing different types of files:‚Äî KAPT vs KSP (Git revert)scenarios:1Ô∏è‚É£ kapt ‚Üí revert specific commit2Ô∏è‚É£ ksp ‚Üí running the current branch, which is a migration from kapt to ksp# \u003croot-project\u003e/scenarios.txtkapt { tasks = [\":app:assembleDebug\"] git-revert = [\"b1b1c7c1\"] cleanup-tasks = [\"clean\"] warm-ups = 2}ksp { tasks = [\":app:assembleDebug\"] cleanup-tasks = [\"clean\"] warm-ups = 2}KSP wins of course üí™‚Äî Disabling jetifier (Git checkout)scenarios:1Ô∏è‚É£ disable_jetifier ‚Üí checks out on ‚Äúmaster‚Äù branch where jetifier is disabled2Ô∏è‚É£ enable_jetifier ‚Üí checks out on ‚Äúscenarios/7-jetifier‚Äù where jetifier is enabled# \u003croot-project\u003e/scenarios.txtdisable_jetifier { tasks = [\":app:assembleDebug\"] git-checkout = { build = \"master\" } cleanup-tasks = [\"clean\"] warm-ups = 1}enable_jetifier { tasks = [\":app:assembleDebug\"] git-checkout = { build = \"scenarios/7-jetifier\" } cleanup-tasks = [\"clean\"] warm-ups = 1}I hope this guide was helpful and gave you new insights into Gradle build analysis. If you have any questions or experiences to share, feel free to drop a comment!Happy coding! üöÄüë®‚Äçüíª",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1024/0*9dq7MRKqJlVBjdCt",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"b266\" data-testid=\"storyTitle\"\u003eProfile \u0026amp; Benchmark Android Builds\u003c/h2\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"7ca2\"\u003eBuild analyzing tools and different benchmark scenarios\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@nikachapidze01?source=post_page---byline--b572948c5be5---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Nika Chapidze\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*NxR0QXmmULs76T9gSiQ_Aw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--b572948c5be5---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eGenerated by \u003ca href=\"https://openai.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://openai.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"f7cf\"\u003eIn my previous article I covered various techniques to optimize Android build times. If you haven‚Äôt read it yet, I highly recommend checking it out:\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"929d\"\u003e\u003cspan\u003eU\u003c/span\u003enderstanding your build performance is crucial ‚Äî not just to identify bottlenecks but also to measure the impact of your optimizations. I‚Äôll walk you through the tools and techniques to analyze your Gradle builds and track improvements over time.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d19c\"\u003eTo analyze Gradle builds, we can use:\u003c/p\u003e\u003col\u003e\u003cli id=\"ec6f\"\u003e\u003cstrong\u003eAndroid Studio Build Analyzer\u003c/strong\u003e ‚Äî A built-in tool to identify bottlenecks in your build process.\u003c/li\u003e\u003cli id=\"8f7d\"\u003e\u003ccode\u003e\u003cstrong\u003e./gradlew --profile\u003c/strong\u003e\u003c/code\u003e ‚Äì Generates a simple profile report to analyze task execution times.\u003c/li\u003e\u003cli id=\"9b1a\"\u003e\u003ccode\u003e\u003cstrong\u003e./gradlew --scan\u003c/strong\u003e\u003c/code\u003e ‚Äì Provides a detailed report with insights into build performance (Uploads remotely)\u003c/li\u003e\u003cli id=\"25dc\"\u003e\u003ccode\u003e\u003ca href=\"https://github.com/gradle/gradle-profiler\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003egradle-profiler\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e --benchmark\u003c/strong\u003e\u003c/code\u003e ‚Äì Tool for benchmarking Gradle builds over multiple runs.\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"c3ee\"\u003e#1 Android Studio Build Analyzer:\u003c/h2\u003e\u003cp id=\"b43c\"\u003eWe‚Äôve all noticed the \u003cstrong\u003eBuild Analyzer\u003c/strong\u003e tab next to the \u003cstrong\u003eBuild\u003c/strong\u003e window. After a successful build, it provides key insights such as \u003cstrong\u003etotal build duration, configuration time, and optimization suggestions\u003c/strong\u003e.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"6158\"\u003eBy clicking on \u003cstrong\u003e‚ÄúTasks impacting build duration‚Äù\u003c/strong\u003e, you can dive deeper into each task‚Äôs execution time, helping you pinpoint slow or inefficient steps in your build process.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"18ea\"\u003e#2 Gradle Profile Option (Local)\u003c/h2\u003e\u003cp id=\"14db\"\u003eThe \u003cstrong\u003eGradle Profile\u003c/strong\u003e option generates an \u003cstrong\u003eHTML report\u003c/strong\u003e that provides detailed information about task execution, configuration performance, dependency resolution, etc.\u003c/p\u003e\u003cp id=\"3a7b\"\u003eTo generate the report, run the following command in the terminal:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1e9f\"\u003e./gradlew --profile assembleDebug  # Or assemble[Flavor]Debug\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"4869\"\u003e#3. Gradle Scan Option (Remote üåê)\u003c/h2\u003e\u003cp id=\"81ee\"\u003eThe \u003cstrong\u003eGradle Build Scan\u003c/strong\u003e provides an even more \u003cstrong\u003edetailed performance report\u003c/strong\u003e compared to local profiling. In addition to task execution and configuration times, it also includes: \u003cstrong\u003eBuild cache usage, Network activity,\u003c/strong\u003e\u003cbr/\u003e\u003cstrong\u003eTest performance, Dependency insights \u003c/strong\u003eand many more useful things.\u003c/p\u003e\u003cp id=\"6e5a\"\u003eTo generate a \u003cstrong\u003ebuild scan\u003c/strong\u003e, run the following command in the terminal and accept the terms:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"da9f\"\u003e./gradlew --scan\u003cp\u003ePublishing a build scan to scans.gradle.com requires accepting the Gradle Terms of Use defined at https://gradle.com/help/legal-terms-of-use.  \u003cbr/\u003eDo you accept these terms? [yes, no] yes  \u003cbr/\u003eGradle Terms of Use accepted.  \u003cbr/\u003ePublishing build scan...  \u003cbr/\u003ehttps://gradle.com/s/dtt4r5mtn655y  \u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cblockquote\u003e\u003cp id=\"b563\"\u003eüìå \u003cstrong\u003eNote:\u003c/strong\u003e This report is \u003cstrong\u003epublic\u003c/strong\u003e by default, meaning anyone with the link can access it. However, you can delete it if needed.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"fa90\"\u003e#4 \u003ca href=\"https://github.com/gradle/gradle-profiler\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGradle Profiler\u003c/a\u003e tool\u003c/h2\u003e\u003cp id=\"fa27\"\u003eThe \u003cstrong\u003eGradle Profiler\u003c/strong\u003e is a powerful tool for \u003cstrong\u003ebenchmarking build performance across different scenarios(\u003c/strong\u003ewith \u003cstrong\u003escenarios.txt \u003c/strong\u003efile\u003cstrong\u003e)\u003c/strong\u003e. It helps analyze how changes impact build times, allowing you to compare:\u003c/p\u003e\u003cul\u003e\u003cli id=\"3371\"\u003eDifferent JVM/Gradle arguments\u003c/li\u003e\u003cli id=\"4a35\"\u003eCode change time on specific files/modules\u003c/li\u003e\u003cli id=\"445c\"\u003eResource change\u003c/li\u003e\u003cli id=\"de46\"\u003eLayout/Composable change\u003c/li\u003e\u003cli id=\"250a\"\u003eComparing the performance of Different git branches\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"d520\"\u003e‚Äî To install Gradle Profiler, you can use Homebrew (or \u003ca href=\"https://github.com/gradle/gradle-profiler?tab=readme-ov-file#installing\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eother installation methods\u003c/a\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"24b8\"\u003ebrew install gradle-profiler\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c1d2\"\u003e‚Äî Once installed, you can run it with the \u003ccode\u003e--benchmark\u003c/code\u003e option along with a \u003cstrong\u003escenarios.txt \u003c/strong\u003efile:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0e13\"\u003egradle-profiler --benchmark \\\u003cbr/\u003e--project-dir [root-dir] \\\u003cbr/\u003e--output-dir [output-dir] \\\u003cbr/\u003e--scenario-file scenarios.txt\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"a158\"\u003eüìå \u003cstrong\u003eNote:\u003c/strong\u003e Gradle Profiler uses the \u003cstrong\u003esame Gradle version\u003c/strong\u003e as your project but may add \u003cstrong\u003etemporary files\u003c/strong\u003e during execution. To avoid it, I recommend using the \u003ccode\u003e\u003cem\u003e/build\u003c/em\u003e\u003c/code\u003e directory for both \u003ccode\u003e\u003cstrong\u003e\u003cem\u003e--gradle-user-home\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003eand \u003ccode\u003e\u003cstrong\u003e\u003cem\u003e--output-dir\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b69a\"\u003e\u003ccode\u003e\u003cstrong\u003escenarios.txt\u003c/strong\u003e\u003c/code\u003e defines multiple benchmarking configurations in \u003cstrong\u003eJSON-like syntax\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"98cc\"\u003eHere are some options that I found useful:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"362c\"\u003escenario_name {\u003cbr/\u003e tasks = [\u0026#34;:app:assembleDebug\u0026#34;] // gradle task for scenario\u003cp\u003e cleanup-tasks = [\u0026#34;clean\u0026#34;] // Cleanup gradle task\u003c/p\u003e\u003cp\u003e  jvm-args = [\u0026#34;-Xmx4g\u0026#34;, \u0026#34;-XX:+UseParallelGC\u0026#34;] // Java arguments\u003c/p\u003e\u003cp\u003e gradle-args = [\u0026#34;--max-workers=4\u0026#34;] // Gradle arguments\u003c/p\u003e\u003cp\u003e  // Adds a public method to a Java or Kotlin source class. Each iteration adds a new method and removes the previously added one\u003cbr/\u003e apply-non-abi-change-to = [\u0026#34;path/your_code_file.java\u0026#34;] \u003cbr/\u003e // Changes the body of a public method in a Java or Kotlin source class\u003cbr/\u003e apply-abi-change-to = [\u0026#34;path/your_code_file.java\u0026#34;]\u003c/p\u003e\u003cp\u003e // Adds view to layout\u003cbr/\u003e apply-android-layout-change-to = \u0026#34;app/src/main/res/your_layout_file.xml\u0026#34;\u003cbr/\u003e // Adds composable\u003cbr/\u003e apply-kotlin-composable-change-to = \u0026#34;app/src/main/java/your_composable.kt\u0026#34;  \u003c/p\u003e\u003cp\u003e // Changes value of string\u003cbr/\u003e apply-android-resource-value-change-to = \u0026#34;app/src/main/res/values/strings.xml\u0026#34;\u003cbr/\u003e // Adds new string\u003cbr/\u003e apply-android-resource-change-to = \u0026#34;src/main/res/values/strings.xml\u0026#34; \u003c/p\u003e\u003cp\u003e// checks out a specific commit for the build step, and a different one for the cleanup step.\u003cbr/\u003e git-checkout = { \u003cbr/\u003e    cleanup = \u0026#34;efb43a1\u0026#34; #commit hash or branch name\u0026#34;\u003cbr/\u003e    build = \u0026#34;master‚Äù     \u003cbr/\u003e }\u003cbr/\u003e // Reverts a given set of commits before the build and resets it afterward.\u003cbr/\u003e git-revert = [‚Äúeaav2e4‚Äù]\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ca3f\"\u003e\u003cem\u003eYou can check more options in \u003c/em\u003e\u003ca href=\"https://github.com/gradle/gradle-profiler?tab=readme-ov-file#source-code-mutators\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003edocs\u003c/em\u003e\u003c/a\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"d1aa\"\u003e‚Äî I‚Äôve created a \u003cstrong\u003esample project on GitHub\u003c/strong\u003e with multiple modules containing \u003cstrong\u003edummy classes\u003c/strong\u003e. You can explore different branches to experiment with \u003cstrong\u003evarious performance scenarios\u003c/strong\u003e:\u003c/p\u003e\u003cp id=\"5c8d\"\u003eNow, let‚Äôs go through some of the scenarios. üöÄ\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"262f\"\u003e\u003cstrong\u003e‚Äî Testing Different Gradle \u0026amp; JVM Arguments\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"ab24\"\u003escenarios:\u003c/p\u003e\u003cp id=\"2182\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003eclean_build_parallelGC_4gb\u003c/strong\u003e\u003c/code\u003e ‚Äì Uses \u003cstrong\u003eParallel GC\u003c/strong\u003e with 4GB of heap memory.\u003cbr/\u003e 2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003eclean_build_G1GC_2gb_max_workers_4\u003c/strong\u003e\u003c/code\u003e ‚Äì Uses \u003cstrong\u003eG1 GC\u003c/strong\u003e, limits heap to 2GB, and restricts Gradle to 4 workers.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"027e\"\u003eclean_build_parallelGC_4gb {\u003cbr/\u003e tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e jvm-args = [\u0026#34;-Xmx4g\u0026#34;, \u0026#34;-XX:+UseParallelGC\u0026#34;]\u003cbr/\u003e cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e}\u003cbr/\u003eclean_build_G1GC_2gb_max_workers_4 {\u003cbr/\u003e tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e gradle-args = [\u0026#34;--max-workers=4\u0026#34;]\u003cbr/\u003e jvm-args = [\u0026#34;-XX:+UseG1GC\u0026#34;]\u003cbr/\u003e cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4a54\"\u003eAs a result, we can see the build iterations with Historical or Sorted(clearer) view and check the difference.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ccode\u003e\u003cstrong\u003eparallelGC_4gb vs G1GC_2gb_max_workers_4\u003c/strong\u003e\u003c/code\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"3283\"\u003escenarios:\u003c/p\u003e\u003cp id=\"6a0d\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003enon_parallel\u003c/strong\u003e\u003c/code\u003e ‚Üí standard run\u003cbr/\u003e2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003eparallel\u003c/strong\u003e\u003c/code\u003e ‚Üí Enabling gradle parallel execution via gradle param\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3c6f\"\u003e# \u0026lt;root-project\u0026gt;/scenarios.txt\u003cbr/\u003enon_parallel {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003cbr/\u003eparallel {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    gradle-args = [\u0026#34;--parallel\u0026#34;]\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"41f4\"\u003e\u003cstrong\u003e‚Äî Enabling Caching for Faster Builds\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"7d25\"\u003escenarios:\u003c/p\u003e\u003cp id=\"f793\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003ewith_caching\u003c/strong\u003e\u003c/code\u003e ‚Äì Uses \u003cstrong\u003eBuild Cache\u003c/strong\u003e and \u003cstrong\u003eConfiguration Cache\u003c/strong\u003e.\u003cbr/\u003e2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003ewithout_caching\u003c/strong\u003e\u003c/code\u003e ‚Äì Runs a \u003cstrong\u003eregular build\u003c/strong\u003e without caching.\u003c/p\u003e\u003cp id=\"5307\"\u003eTo simulate real-world changes, we modify dummy files in different modules using \u003ccode\u003e\u003cstrong\u003eapply-non-abi-change-to\u003c/strong\u003e\u003c/code\u003e. We also clear the build cache before each scenario starts, using \u003ccode\u003e\u003cstrong\u003eclear-build-cache-before = SCENARIO\u003c/strong\u003e\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"432e\"\u003e# \u0026lt;root-project\u0026gt;/scenarios.txt\u003cbr/\u003ewith_caching {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    gradle-args = [\u0026#34;--configuration-cache\u0026#34;, \u0026#34;--build-cache\u0026#34;]\u003cbr/\u003e    apply-non-abi-change-to = [\u0026#34;feature1/src/main/java/ge/chapo/feature1/DummyData.kt\u0026#34;,\u003cbr/\u003e                                   \u0026#34;feature2/src/main/java/ge/chapo/feature2/DummyData.kt\u0026#34;,\u003cbr/\u003e                                   \u0026#34;feature3/src/main/java/ge/chapo/feature3/DummyData.kt\u0026#34;,\u003cbr/\u003e                                   ]\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003cp\u003ewithout_caching {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    apply-non-abi-change-to = [\u0026#34;feature1/src/main/java/ge/chapo/feature1/DummyData.kt\u0026#34;,\u003cbr/\u003e                                       \u0026#34;feature2/src/main/java/ge/chapo/feature2/DummyData.kt\u0026#34;,\u003cbr/\u003e                                       \u0026#34;feature3/src/main/java/ge/chapo/feature3/DummyData.kt\u0026#34;,\u003cbr/\u003e                                       ]\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"132a\"\u003e\u003cem\u003ewe can use\u003c/em\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003e--measure-config-time\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e and \u003c/em\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003e--measure-local-build-cache\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e options to get additional info\u003c/em\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7970\"\u003egradle-profiler --benchmark --measure-config-time --measure-local-build-cache --project-dir ./ --output-dir ./build --scenario-file scenarios.txt --gradle-user-home=./build/gradle \u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6f05\"\u003eAs a result, we can see that with Caching, it is faster. You can also check how the faster configuration phase is on \u003cstrong\u003etask start\u003c/strong\u003e row and compare the cache size on the \u003cstrong\u003elocal build cache size \u003c/strong\u003erow.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003ewithout caching vs with caching\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"236c\"\u003e\u003cstrong\u003e‚Äî Changing files\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"1d6a\"\u003escenarios:\u003c/p\u003e\u003cp id=\"5453\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003emodify_functions\u003c/strong\u003e\u003c/code\u003e ‚Üí Changes function implementations (\u003cstrong\u003eABI \u0026amp; Non-ABI changes\u003c/strong\u003e).\u003cbr/\u003e 2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003emodify_strings\u003c/strong\u003e\u003c/code\u003e ‚Üí Modifies a string resource in \u003ccode\u003e\u003cstrong\u003estrings.xml\u003c/strong\u003e\u003c/code\u003e.\u003cbr/\u003e 3Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003emodify_layout\u003c/strong\u003e\u003c/code\u003e ‚Üí Updates a \u003cstrong\u003elayout XML\u003c/strong\u003e file.\u003cbr/\u003e 4Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003emodify_compose\u003c/strong\u003e\u003c/code\u003e ‚Üí Alters a \u003cstrong\u003eJetpack Compose UI component\u003c/strong\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"a364\"\u003eby default \u003cstrong\u003ewarm-ups = 6 \u003c/strong\u003eand \u003cstrong\u003eiterations = 10\u003c/strong\u003e, we can change it in our scenarios\u003c/p\u003e\u003c/blockquote\u003e\u003cpre\u003e\u003cspan id=\"85a8\"\u003e# \u0026lt;root-project\u0026gt;/scenarios.txt\u003cbr/\u003emodify_functions {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    apply-abi-change-to = [\u0026#34;feature1/src/main/java/ge/chapo/feature1/DummyData.kt\u0026#34;]\u003cbr/\u003e    apply-non-abi-change-to = [\u0026#34;feature1/src/main/java/ge/chapo/feature1/DummyData.kt\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e    iterations = 3\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003cp\u003emodify_strings {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    apply-android-resource-change-to = [\u0026#34;feature1/src/main/res/values/strings.xml\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e    iterations = 3\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003emodify_layout {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    apply-android-layout-change-to = [\u0026#34;feature1/src/main/res/layout/some_layout.xml\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e    iterations = 3\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003emodify_compose {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    apply-kotlin-composable-change-to = [\u0026#34;app/src/main/java/ge/chapo/gradleoptimisationsample/MainActivity.kt\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e    iterations = 3\u003cbr/\u003e    clear-build-cache-before = SCENARIO\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5808\"\u003eIn the result, you can compare performance after changing different types of files:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"e2e6\"\u003e\u003cstrong\u003e‚Äî KAPT vs KSP (Git revert)\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"f30a\"\u003escenarios:\u003c/p\u003e\u003cp id=\"0240\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003ekapt\u003c/strong\u003e\u003c/code\u003e ‚Üí revert specific commit\u003cbr/\u003e2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003eksp\u003c/strong\u003e\u003c/code\u003e ‚Üí running the current branch, which is a migration from kapt to ksp\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4be6\"\u003e# \u0026lt;root-project\u0026gt;/scenarios.txt\u003cbr/\u003ekapt {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    git-revert = [\u0026#34;b1b1c7c1\u0026#34;]\u003cbr/\u003e    cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e    warm-ups = 2\u003cbr/\u003e}\u003cp\u003eksp {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e    warm-ups = 2\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0a76\"\u003e\u003cem\u003eKSP wins of course üí™\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"b9b4\"\u003e‚Äî Disabling jetifier (Git checkout)\u003c/h2\u003e\u003cp id=\"cd9a\"\u003escenarios:\u003c/p\u003e\u003cp id=\"18a3\"\u003e1Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003edisable_jetifier\u003c/strong\u003e\u003c/code\u003e ‚Üí checks out on ‚Äúmaster‚Äù branch where jetifier is disabled\u003cbr/\u003e2Ô∏è‚É£ \u003ccode\u003e\u003cstrong\u003eenable_jetifier\u003c/strong\u003e\u003c/code\u003e ‚Üí checks out on ‚Äúscenarios/7-jetifier‚Äù where jetifier is enabled\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9115\"\u003e# \u0026lt;root-project\u0026gt;/scenarios.txt\u003cbr/\u003edisable_jetifier {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    git-checkout = {\u003cbr/\u003e        build = \u0026#34;master\u0026#34;\u003cbr/\u003e    }\u003cbr/\u003e    cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e}\u003cp\u003eenable_jetifier {\u003cbr/\u003e    tasks = [\u0026#34;:app:assembleDebug\u0026#34;]\u003cbr/\u003e    git-checkout = {\u003cbr/\u003e        build = \u0026#34;scenarios/7-jetifier\u0026#34;\u003cbr/\u003e    }\u003cbr/\u003e    cleanup-tasks = [\u0026#34;clean\u0026#34;]\u003cbr/\u003e    warm-ups = 1\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"5950\"\u003eI hope this guide was helpful and gave you new insights into Gradle build analysis. If you have any questions or experiences to share, feel free to drop a comment!\u003c/p\u003e\u003cp id=\"0b03\"\u003e\u003cstrong\u003eHappy coding! üöÄüë®‚Äçüíª\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-03-27T20:56:36.347Z",
  "modifiedTime": null
}
