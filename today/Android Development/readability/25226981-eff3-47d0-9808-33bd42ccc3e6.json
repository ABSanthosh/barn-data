{
  "id": "25226981-eff3-47d0-9808-33bd42ccc3e6",
  "title": "Adventures in Tracking Upload Progress With OkHttp and Retrofit",
  "link": "https://dev.to/zsmb13/adventures-in-tracking-upload-progress-with-okhttp-and-retrofit-1gff",
  "description": "Tracking file upload progress can have some unexpected complexities. This article tells the story of how we refined our implementation of this feature in the Stream Chat Android SDK.",
  "author": "MÃ¡rton Braun",
  "published": "Fri, 10 Dec 2021 16:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "MÃ¡rton Braun",
  "length": 16266,
  "excerpt": "This article tells the story of how Streamâ€™s Android team refined our progress tracking process...",
  "siteName": "DEV Community",
  "favicon": "https://media.dev.to/dynamic/image/width=192,height=,fit=scale-down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png",
  "text": "This article tells the story of how Streamâ€™s Android team refined our progress tracking process during file uploads in the Stream Chat Android SDK. Our original implementation to track file upload progress worked, but it had some in-code usability and UX issues that we wanted to clean up. The following account gives an up-close look into the process we had, the problems we encountered, and what we did to improve. Warning: As this is a story of mistakes we made and then corrected over time, do not use any of the initial or intermediate forms of code here in your own projects, only the final fixed version. ðŸ˜‰ Uploading Files With Retrofit First things first, let's see how you can upload a file to an API using Retrofit. Most APIs will expect a multipart form to contain the file data. You can declare a method inside a Retrofit interface like the one below to support that operation: @Multipart @POST(\"/channels/{type}/{id}/file\") fun sendFile( @Path(\"type\") channelType: String, @Path(\"id\") channelId: String, @Part file: MultipartBody.Part, ): RetrofitCall\u003cUploadFileResponse\u003e Enter fullscreen mode Exit fullscreen mode To invoke this method, you can create a Part by using the createFormData function, like so: fun sendFile(file: File) { val part = MultipartBody.Part.createFormData(\"file\", file.name, file.asRequestBody(file.getMediaType())) retrofitCdnApi .sendFile(channelType, channelId, part) .enqueue(...) } Enter fullscreen mode Exit fullscreen mode Then you just enqueue the Retrofit Call to run it, and done! That's a basic, working file upload. Counting in the Request Body Time to add progress tracking. For our initial implementation, we used this callback interface: public interface ProgressCallback { public fun onProgress(progress: Long) public fun onSuccess(file: String) public fun onError(error: ChatError) } Enter fullscreen mode Exit fullscreen mode We then created a ProgressRequestBody class, most likely based on this StackOverflow answer. This wraps a file and a callback, and implements the OkHttp RequestBody class. internal class ProgressRequestBody( private val file: File, private val callback: ProgressCallback ) : RequestBody() { override fun contentType(): MediaType = file.getMediaType() override fun contentLength(): Long = file.length() override fun writeTo(sink: BufferedSink) { val total = file.length() val buffer = ByteArray(DEFAULT_BUFFER_SIZE) var uploaded = 0L FileInputStream(file).use { fis -\u003e var read: Int val handler = Handler(Looper.getMainLooper()) while (fis.read(buffer).also { read = it } != -1) { handler.post { callback.onProgress((100 * uploaded / total)) } uploaded += read.toLong() sink.write(buffer, 0, read) } } } companion object { private const val DEFAULT_BUFFER_SIZE = 2048 } } Enter fullscreen mode Exit fullscreen mode Whenever writeTo is invoked to write this RequestBody to the network, we loop through the contents of the file manually, write the bytes, and invoke the callback, calculating the percentage of the upload completed so far. This requires a modification to our API invocation, as we now have to create a ProgressRequestBody that we then embed in our Part, which will â€” remember this â€” contain the ProgressCallback instance that was passed in. fun sendFile(file: File, callback: ProgressCallback) { val progressBody = ProgressRequestBody(file, callback) val part = MultipartBody.Part.createFormData(\"file\", file.name, progressBody) retrofitCdnApi .sendFile(channelType, channelId, part) .enqueue(RetroProgressCallback(callback)) } Enter fullscreen mode Exit fullscreen mode We also pass the callback to the enqueue call via a wrapper to adapt it to a Retrofit Callback, which will run the onFailure and onSuccess methods of our original callback as needed. internal class RetroProgressCallback( private val callback: ProgressCallback ) : Callback\u003cUploadFileResponse\u003e { override fun onFailure(call: Call\u003cUploadFileResponse\u003e, t: Throwable) { callback.onError(ChatError(cause = t)) } override fun onResponse( call: Call\u003cUploadFileResponse\u003e, response: retrofit2.Response\u003cUploadFileResponse\u003e ) { val body = response.body() if (body == null) { onFailure(call, RuntimeException(\"File response is null\")) } else { callback.onSuccess(body.file) } } } Enter fullscreen mode Exit fullscreen mode If you want to explore this implementation, you can find the old version of our code here in the GitHub history. Counting With a Custom Sink Implementation This is okay, but we can make it a lot nicer. For this change, we essentially took the implementation from Paulina Sadowska's post about the topic. The improvement is to (instead of handling a FileInputStream manually) create a custom OkHttp Sink implementation (based on the handy ForwardingSink), which will perform the counting and corresponding progress callbacks for us. We'll also make ProgressRequestBody wrap a RequestBody and delegate to it whenever it needs to behave like a RequestBody. internal class ProgressRequestBody( private val delegate: RequestBody, private val callback: ProgressCallback, ) : RequestBody() { override fun contentType(): MediaType? = delegate.contentType() override fun contentLength(): Long = delegate.contentLength() override fun writeTo(sink: BufferedSink) { val countingSink = CountingSink(sink).buffer() delegate.writeTo(countingSink) countingSink.flush() } private inner class CountingSink(delegate: Sink) : ForwardingSink(delegate) { private val handler = Handler(Looper.getMainLooper()) private val total = contentLength() private var uploaded = 0L override fun write(source: Buffer, byteCount: Long) { super.write(source, byteCount) uploaded += byteCount handler.post { callback.onProgress(uploaded, total) } } } } Enter fullscreen mode Exit fullscreen mode For this improvement, we've updated our ProgressCallback interface to take the more meaningful bytesUploaded and totalBytes values during progress updates instead of a percentage. (We also added KDoc at this point to make the interface more obvious, which you can check out in the GitHub repo.) public interface ProgressCallback { public fun onProgress(bytesUploaded: Long, totalBytes: Long) public fun onSuccess(url: String?) public fun onError(error: ChatError) } Enter fullscreen mode Exit fullscreen mode On the call site, we can now create a simple RequestBody first, and then wrap it with the ProgressRequestBody implementation: val body = file.asRequestBody(file.getMediaType()) val progressBody = ProgressRequestBody(body, callback) val part = MultipartBody.Part.createFormData(\"file\", file.name, progressBody) Enter fullscreen mode Exit fullscreen mode The Logging Problem A major problem we encountered was that we had several interceptors added to the OkHttpClient that we used for these uploads. The configuration looked something like this: baseClientBuilder() .connectTimeout(timeout, TimeUnit.MILLISECONDS) .writeTimeout(timeout, TimeUnit.MILLISECONDS) .readTimeout(timeout, TimeUnit.MILLISECONDS) .addInterceptor(ApiKeyInterceptor(...)) .addInterceptor(HeadersInterceptor(...)) .addInterceptor(TokenAuthInterceptor(...)) .addInterceptor(HttpLoggingInterceptor()) .addInterceptor( CurlInterceptor { message -\u003e logger().logI(\"CURL\", message) } ) Enter fullscreen mode Exit fullscreen mode This is natural, and lots of apps have setups like this. What's notable here is that HttpLoggingInterceptor and CurlInterceptor will both log the request and call requestBody.writeTo() internally to do that. In the case of our file upload calls, this method is what contains our progress tracking implementation. The end result is that whenever we make an upload call, we'll run the progress callback three times in a row: twice for the logging, and once when it's actually written to the network. This results in an... interesting experience for the user looking at the UI, where progress goes something like this: 0 15 45 50 100 0 25 37 57 87 100 0 20 67 100 Enter fullscreen mode Exit fullscreen mode This only happened in debug builds, as we had the logging disabled in release builds, but it was still a problem. Fixing this wasn't simple, as we wanted to keep these logging interceptors around. After some elaboration, we begrudgingly added an ugly, ugly workaround, like this: internal class ProgressRequestBody( private val delegate: RequestBody, ... ) : RequestBody() { var writeCount = 0 override fun writeTo(sink: BufferedSink) { if (writeCount \u003e= progressUpdatesToSkip) { val countingSink = CountingSink(sink).buffer() delegate.writeTo(countingSink) countingSink.flush() } else { delegate.writeTo(sink) } writeCount++ } companion object { private val progressUpdatesToSkip = 2 } } Enter fullscreen mode Exit fullscreen mode As you can see, we simply hardcoded that the first two times when the ProgressRequestBody is written, it shouldn't invoke callbacks. What made this worse is that this value wasn't actually 2 like I assumed, because as mentioned above, we only log with these interceptors in debug builds. This meant that we had to make this a var and set it dynamically. In release builds it'd be 0, and in debug builds, we'd increment it to 2. Ouch. That's bad enough, but then we also had the requirement to allow our users to set their own OkHttpClient instances for the SDK to use, where they could also add more interceptors of their own, which may or may not invoke writeTo in the request body (one or more times!). We could've somehow provided an additional API where they can increment progressUpdatesToSkip to account for this, but then they could also have interceptors that will sometimes read the body but not at other times, based on some dynamic condition... There's clearly no winning with this approach, and it's an awful rabbit hole to go down. So, to quote myself from the workaround PR linked above: A real solution would be intercepting the call with an OkHttp network interceptor, but we can't pass in individual callbacks per different Retrofit upload calls with that approach (at least not easily). So the problem was that we had no way to get the callback value from the call site that invokes the Retrofit method down to the interceptor attached to the underlying OkHttp client. Turns out, thankfully, that I was wrong about that! OkHttp Tags Enter OkHttp's tags API (many thanks to Jesse Wilson for showing me this!). With this API, the library allows you to add arbitrary tags (objects) to your requests when building them. As the docs say, you can: Use this API to attach timing, debugging, or other application data to a request so that you may read it in interceptors, event listeners, or callbacks. When building the Request, you can pass in a Class as a key and then an object of that type as the associated value: val request = Request.Builder() .post(requestBody) .tag(ProgressCallback::class.java, callback) .build() Enter fullscreen mode Exit fullscreen mode And then later you can read these values from the Request: val cb: ProgressCallback? = request.tag(ProgressCallback::class.java) Enter fullscreen mode Exit fullscreen mode One small problem is that in our file upload code we create a RequestBody manually, but not the actual Request object, as that's created under the hood by Retrofit. Thankfully, the tagging API is also exposed through Retrofit, so you can add tags to methods using the @Tag annotation on parameters. We'll use this in the next section! The last-interceptor-swaparoo The strategy then is the following: Add the ProgressCallback instance as a tag when making the Retrofit call. Create an interceptor at the end of the interceptor chain that will check each outgoing request and wrap its RequestBody into a ProgressRequestBody if the callback is present on it. First, we'll update the Retrofit interface to accept a progressCallback parameter that will be used as a tag: @Multipart @POST(\"/channels/{type}/{id}/file\") fun sendFile( @Path(\"type\") channelType: String, @Path(\"id\") channelId: String, @Part file: MultipartBody.Part, @Tag progressCallback: ProgressCallback?, ): RetrofitCall\u003cUploadFileResponse\u003e Enter fullscreen mode Exit fullscreen mode Then, we'll implement the interceptor that reads this tag and performs the wrapping of the RequestBody if needed: internal class ProgressInterceptor : Interceptor { override fun intercept(chain: Interceptor.Chain): Response { val request = chain.request() val progressCallback = request.tag(ProgressCallback::class.java) if (progressCallback != null) { return chain.proceed(wrapRequest(request, progressCallback)) } return chain.proceed(request) } private fun wrapRequest(request: Request, progressCallback: ProgressCallback): Request { return request.newBuilder() // Assume that any request tagged with a ProgressCallback is a POST // request and has a non-null body .post(ProgressRequestBody(request.body!!, progressCallback)) .build() } } Enter fullscreen mode Exit fullscreen mode Finally, we'll add this interceptor to our OkHttpClient, making sure it's the last one added. We'll add it as a network interceptor, as we want it to be as close to the actual upload as possible, and it doesn't need to be involved in requests that don't go out to the network. return baseClientBuilder() .addInterceptor(...) .addInterceptor(...) .addNetworkInterceptor(ProgressInterceptor()) Enter fullscreen mode Exit fullscreen mode This way nothing that previous interceptors do with the request will interfere with the progress reporting, as they'll still have the original RequestBody to work with, and the special progress-tracking wrapper is only added at the very last moment before it actually goes out to the network. If you want to see this last change in detail, check out the corresponding PR on GitHub. Wrap-Up So that's the implementation we ended up with for now! You can find all of this code in the Chat Android SDK's GitHub repository if you want to look at it in a real project. There is one remaining issue with this progress tracking: Whenever the body gets written, it's only written into local buffers, and what we track is how fast we're writing to that buffer. This then still needs to make it over the network, which can take some time. So the upload progress tends to get to 100% relatively quickly and then the request will remain pending for a while as the network call completes. This is as close to the socket (so to say) as we can get with these APIs. For a bit more info and references, see this GitHub discussion. If you want to learn more about how Okio (and OkHttp, Retrofit, and Moshi) work super efficiently with data, watch A Few Ok Libraries by Jake Wharton. For an introduction to Moshi, check out Say Hi to Moshi.",
  "image": "https://media.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwt8jnffbqdogyc9wpaod.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-article-id=\"923152\" id=\"article-body\"\u003e\n            \u003cp\u003eThis article tells the story of how Streamâ€™s Android team refined our progress tracking process during file uploads in the \u003ca href=\"https://github.com/GetStream/stream-chat-android/\"\u003eStream Chat Android SDK\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOur original implementation to track file upload progress worked, but it had some in-code usability and UX issues that we wanted to clean up. \u003c/p\u003e\n\n\u003cp\u003eThe following account gives an up-close look into the process we had, the problems we encountered, and what we did to improve. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e As this is a story of mistakes we made and then corrected over time, \u003cstrong\u003edo not\u003c/strong\u003e use any of the initial or intermediate forms of code here in your own projects, only the final fixed version. ðŸ˜‰\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"uploading-files-with-retrofit\" href=\"#uploading-files-with-retrofit\"\u003e\n  \u003c/a\u003e\n  Uploading Files With Retrofit\n\u003c/h2\u003e\n\n\u003cp\u003eFirst things first, let\u0026#39;s see how you can upload a file to an API using \u003ca href=\"https://square.github.io/retrofit/\"\u003eRetrofit\u003c/a\u003e. Most APIs will expect a multipart form to contain the file data. You can declare a method inside a Retrofit interface like the one below to support that operation:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Multipart\u003c/span\u003e\n\u003cspan\u003e@POST\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/channels/{type}/{id}/file\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e@Path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003echannelType\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003echannelId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Part\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMultipartBody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePart\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eRetrofitCall\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo invoke this method, you can create a \u003ccode\u003ePart\u003c/code\u003e by using the \u003ccode\u003ecreateFormData\u003c/code\u003e function, like so:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMultipartBody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePart\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateFormData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;file\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n                   \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMediaType\u003c/span\u003e\u003cspan\u003e()))\u003c/span\u003e\n    \u003cspan\u003eretrofitCdnApi\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echannelType\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003echannelId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003epart\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenqueue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThen you just \u003ccode\u003eenqueue\u003c/code\u003e the Retrofit \u003ccode\u003eCall\u003c/code\u003e to run it, and done! That\u0026#39;s a basic, working file upload.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"counting-in-the-request-body\" href=\"#counting-in-the-request-body\"\u003e\n  \u003c/a\u003e\n  Counting in the Request Body\n\u003c/h2\u003e\n\n\u003cp\u003eTime to add progress tracking. For our initial implementation, we used this callback interface:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonProgress\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprogress\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChatError\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWe then created a \u003ccode\u003eProgressRequestBody\u003c/code\u003e class, most likely based on \u003ca href=\"https://stackoverflow.com/a/33384551/4465208\"\u003ethis StackOverflow answer\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003eThis wraps a \u003ccode\u003efile\u003c/code\u003e and a \u003ccode\u003ecallback\u003c/code\u003e, and implements the OkHttp \u003ca href=\"https://square.github.io/okhttp/4.x/okhttp/okhttp3/-request-body/\"\u003e\u003ccode\u003eRequestBody\u003c/code\u003e\u003c/a\u003e class.\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einternal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequestBody\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econtentType\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e \u003cspan\u003eMediaType\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMediaType\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econtentLength\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBufferedSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003etotal\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ebuffer\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eByteArray\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eDEFAULT_BUFFER_SIZE\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003euploaded\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0L\u003c/span\u003e\n        \u003cspan\u003eFileInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003efis\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n            \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\n            \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ehandler\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eLooper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMainLooper\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n            \u003cspan\u003ewhile\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebuffer\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ealso\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eread\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eit\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003ehandler\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                    \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonProgress\u003c/span\u003e\u003cspan\u003e((\u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003euploaded\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003etotal\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n                \u003cspan\u003e}\u003c/span\u003e\n                \u003cspan\u003euploaded\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoLong\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n                \u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebuffer\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eDEFAULT_BUFFER_SIZE\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e2048\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWhenever \u003ccode\u003ewriteTo\u003c/code\u003e is invoked to write this \u003ccode\u003eRequestBody\u003c/code\u003e to the network, we loop through the contents of the file manually, write the bytes, and invoke the \u003ccode\u003ecallback\u003c/code\u003e, calculating the percentage of the upload completed so far.\u003c/p\u003e\n\n\u003cp\u003eThis requires a modification to our API invocation, as we now have to create a \u003ccode\u003eProgressRequestBody\u003c/code\u003e that we then embed in our \u003ccode\u003ePart\u003c/code\u003e, which will â€” remember this â€” contain the \u003ccode\u003eProgressCallback\u003c/code\u003e instance that was passed in.\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFile\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eprogressBody\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMultipartBody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePart\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateFormData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;file\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eprogressBody\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eretrofitCdnApi\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echannelType\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003echannelId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003epart\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenqueue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRetroProgressCallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWe also pass the callback to the \u003ccode\u003eenqueue\u003c/code\u003e call via a wrapper to adapt it to a Retrofit \u003ca href=\"https://square.github.io/retrofit/2.x/retrofit/retrofit2/Callback.html\"\u003e\u003ccode\u003eCallback\u003c/code\u003e\u003c/a\u003e, which will run the \u003ccode\u003eonFailure\u003c/code\u003e and \u003ccode\u003eonSuccess\u003c/code\u003e methods of our original callback as needed.\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einternal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eRetroProgressCallback\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCallback\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecall\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCall\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;,\u003c/span\u003e \u003cspan\u003et\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eThrowable\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eChatError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecause\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003et\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonResponse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003ecall\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCall\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;,\u003c/span\u003e\n        \u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eretrofit2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eResponse\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eresponse\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eonFailure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecall\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eRuntimeException\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;File response is null\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIf you want to explore this implementation, you can find the old version of our code \u003ca href=\"https://github.com/GetStream/stream-chat-android/tree/c592028765a7b541503c4a0976775cfd823c57f1/stream-chat-android-client/src/main/java/io/getstream/chat/android/client/api\"\u003ehere in the GitHub history\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"counting-with-a-custom-sink-implementation\" href=\"#counting-with-a-custom-sink-implementation\"\u003e\n  \u003c/a\u003e\n  Counting With a Custom Sink Implementation\n\u003c/h2\u003e\n\n\u003cp\u003eThis is okay, but we can make it a lot nicer. For this change, we essentially took the implementation from \u003ca href=\"https://medium.com/@PaulinaSadowska/display-progress-of-multipart-request-with-retrofit-and-rxjava-23a4a779e6ba\"\u003ePaulina Sadowska\u0026#39;s post about the topic\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe improvement is to (instead of handling a \u003ccode\u003eFileInputStream\u003c/code\u003e manually) create a custom OkHttp \u003ca href=\"https://square.github.io/okio/2.x/okio/okio/-sink/index.html\"\u003e\u003ccode\u003eSink\u003c/code\u003e\u003c/a\u003e implementation (based on the handy \u003ca href=\"https://square.github.io/okio/2.x/okio/okio/-forwarding-sink/index.html\"\u003e\u003ccode\u003eForwardingSink\u003c/code\u003e\u003c/a\u003e), which will perform the counting and corresponding progress callbacks for us. \u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ll also make \u003ccode\u003eProgressRequestBody\u003c/code\u003e wrap a \u003ccode\u003eRequestBody\u003c/code\u003e and delegate to it whenever it needs to behave like a \u003ccode\u003eRequestBody\u003c/code\u003e.\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einternal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequestBody\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequestBody\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econtentType\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e \u003cspan\u003eMediaType\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtentType\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003econtentLength\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtentLength\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBufferedSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecountingSink\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eCountingSink\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ebuffer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecountingSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ecountingSink\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eflush\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003einner\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCountingSink\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eForwardingSink\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ehandler\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHandler\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eLooper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMainLooper\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003etotal\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econtentLength\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003euploaded\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0L\u003c/span\u003e\n\n        \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esource\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBuffer\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ebyteCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewrite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esource\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ebyteCount\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003euploaded\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003ebyteCount\u003c/span\u003e\n\n                        \u003cspan\u003ehandler\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonProgress\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euploaded\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etotal\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eFor this improvement, we\u0026#39;ve updated our \u003ccode\u003eProgressCallback\u003c/code\u003e interface to take the more meaningful \u003ccode\u003ebytesUploaded\u003c/code\u003e and \u003ccode\u003etotalBytes\u003c/code\u003e values during progress updates instead of a percentage. \u003c/p\u003e\n\n\u003cp\u003e(We also added KDoc at this point to make the interface more obvious, which you can check out \u003ca href=\"https://github.com/GetStream/stream-chat-android/blob/main/stream-chat-android-client/src/main/java/io/getstream/chat/android/client/utils/ProgressCallback.kt\"\u003ein the GitHub repo\u003c/a\u003e.)\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003einterface\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonProgress\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebytesUploaded\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etotalBytes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLong\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonSuccess\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e?)\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eChatError\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOn the call site, we can now create a simple \u003ccode\u003eRequestBody\u003c/code\u003e first, and then wrap it with the \u003ccode\u003eProgressRequestBody\u003c/code\u003e implementation:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetMediaType\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eprogressBody\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003epart\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMultipartBody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePart\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateFormData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;file\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eprogressBody\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch2\u003e\n  \u003ca name=\"the-logging-problem\" href=\"#the-logging-problem\"\u003e\n  \u003c/a\u003e\n  The Logging Problem\n\u003c/h2\u003e\n\n\u003cp\u003eA major problem we encountered was that we had several interceptors added to the \u003ccode\u003eOkHttpClient\u003c/code\u003e that we used for these uploads. The configuration looked something like this:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ebaseClientBuilder\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econnectTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etimeout\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eTimeUnit\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMILLISECONDS\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etimeout\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eTimeUnit\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMILLISECONDS\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereadTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etimeout\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eTimeUnit\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMILLISECONDS\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eApiKeyInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.))\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHeadersInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.))\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eTokenAuthInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.))\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHttpLoggingInterceptor\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n         \u003cspan\u003eCurlInterceptor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003emessage\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n             \u003cspan\u003elogger\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003elogI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;CURL\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis is natural, and lots of apps have setups like this. What\u0026#39;s notable here is that \u003ccode\u003eHttpLoggingInterceptor\u003c/code\u003e and \u003ccode\u003eCurlInterceptor\u003c/code\u003e will both log the request and call \u003ccode\u003erequestBody.writeTo()\u003c/code\u003e internally to do that. \u003c/p\u003e\n\n\u003cp\u003eIn the case of our file upload calls, this method is what contains our progress tracking implementation.\u003c/p\u003e\n\n\u003cp\u003eThe end result is that whenever we make an upload call, we\u0026#39;ll run the progress callback three times in a row: twice for the logging, and once when it\u0026#39;s actually written to the network. \u003c/p\u003e\n\n\u003cp\u003eThis results in an... \u003cem\u003einteresting\u003c/em\u003e experience for the user looking at the UI, where progress goes something like this:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e15\u003c/span\u003e \u003cspan\u003e45\u003c/span\u003e \u003cspan\u003e50\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e25\u003c/span\u003e \u003cspan\u003e37\u003c/span\u003e \u003cspan\u003e57\u003c/span\u003e \u003cspan\u003e87\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e \u003cspan\u003e67\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThis only happened in debug builds, as we had the logging disabled in release builds, but it was still a problem.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFixing this wasn\u0026#39;t simple, as we wanted to keep these logging interceptors around. After some elaboration, \u003ca href=\"https://github.com/GetStream/stream-chat-android/pull/2342#discussion_r709018104\"\u003ewe begrudgingly added an ugly, ugly workaround\u003c/a\u003e, like this:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einternal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequestBody\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequestBody\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ewriteCount\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBufferedSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewriteCount\u003c/span\u003e \u003cspan\u003e\u0026gt;=\u003c/span\u003e \u003cspan\u003eprogressUpdatesToSkip\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecountingSink\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eCountingSink\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ebuffer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n            \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecountingSink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003ecountingSink\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eflush\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003edelegate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003ewriteCount\u003c/span\u003e\u003cspan\u003e++\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eprogressUpdatesToSkip\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAs you can see, we simply hardcoded that the first two times when the \u003ccode\u003eProgressRequestBody\u003c/code\u003e is written, it shouldn\u0026#39;t invoke callbacks.\u003c/p\u003e\n\n\u003cp\u003eWhat made this worse is that this value wasn\u0026#39;t actually \u003ccode\u003e2\u003c/code\u003e like I assumed, because as mentioned above, we only log with these interceptors in debug builds. \u003c/p\u003e\n\n\u003cp\u003eThis meant that we had to make this a \u003ccode\u003evar\u003c/code\u003e and set it dynamically. In release builds it\u0026#39;d be \u003ccode\u003e0\u003c/code\u003e, and in debug builds, we\u0026#39;d increment it to \u003ccode\u003e2\u003c/code\u003e. Ouch.\u003c/p\u003e\n\n\u003cp\u003eThat\u0026#39;s bad enough, but then we also had the requirement to allow our users to set their own \u003ccode\u003eOkHttpClient\u003c/code\u003e instances for the SDK to use, where they could also add more interceptors of their own, which may or may not invoke \u003ccode\u003ewriteTo\u003c/code\u003e in the request body (one or more times!). \u003c/p\u003e\n\n\u003cp\u003eWe could\u0026#39;ve somehow provided an additional API where they can increment \u003ccode\u003eprogressUpdatesToSkip\u003c/code\u003e to account for this, but then they could also have interceptors that will \u003cem\u003esometimes\u003c/em\u003e read the body but not at other times, based on some dynamic condition... There\u0026#39;s clearly no winning with this approach, and it\u0026#39;s an awful rabbit hole to go down.\u003c/p\u003e\n\n\u003cp\u003eSo, to quote myself from the workaround PR linked above:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA real solution would be intercepting the call with an OkHttp network interceptor, but we can\u0026#39;t pass in individual callbacks per different Retrofit upload calls with that approach (at least not easily).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo the problem was that we had no way to get the \u003ccode\u003ecallback\u003c/code\u003e value from the call site that invokes the Retrofit method down to the interceptor attached to the underlying OkHttp client.\u003c/p\u003e\n\n\u003cp\u003eTurns out, thankfully, that I was wrong about that!\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"okhttp-tags\" href=\"#okhttp-tags\"\u003e\n  \u003c/a\u003e\n  OkHttp Tags\n\u003c/h2\u003e\n\n\u003cp\u003eEnter OkHttp\u0026#39;s \u003ca href=\"https://square.github.io/okhttp/4.x/okhttp/okhttp3/-request/-builder/tag/\"\u003etags API\u003c/a\u003e (many thanks to \u003ca href=\"https://twitter.com/jessewilson\"\u003eJesse Wilson\u003c/a\u003e for showing me this!). With this API, the library allows you to add arbitrary tags (objects) to your requests when building them. \u003c/p\u003e\n\n\u003cp\u003eAs the \u003ca href=\"https://square.github.io/okhttp/4.x/okhttp/okhttp3/-request/-builder/tag/\"\u003edocs\u003c/a\u003e say, you can:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eUse this API to attach timing, debugging, or other application data to a request so that you may read it in interceptors, event listeners, or callbacks.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhen building the \u003ccode\u003eRequest\u003c/code\u003e, you can pass in a \u003ccode\u003eClass\u003c/code\u003e as a key and then an object of that type as the associated value:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003erequest\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eRequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eBuilder\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequestBody\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etag\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejava\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAnd then later you can read these values from the \u003ccode\u003eRequest\u003c/code\u003e:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecb\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etag\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejava\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOne small problem is that in our file upload code we create a \u003ccode\u003eRequestBody\u003c/code\u003e manually, but not the actual \u003ccode\u003eRequest\u003c/code\u003e object, as that\u0026#39;s created under the hood by Retrofit. \u003c/p\u003e\n\n\u003cp\u003eThankfully, the tagging API is also exposed through Retrofit, so you can add tags to methods using the \u003ca href=\"https://square.github.io/retrofit/2.x/retrofit/retrofit2/http/Tag.html\"\u003e\u003ccode\u003e@Tag\u003c/code\u003e annotation\u003c/a\u003e on parameters. We\u0026#39;ll use this in the next section!\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"the-lastinterceptorswaparoo\" href=\"#the-lastinterceptorswaparoo\"\u003e\n  \u003c/a\u003e\n  The last-interceptor-swaparoo\n\u003c/h2\u003e\n\n\u003cp\u003eThe strategy then is the following:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd the \u003ccode\u003eProgressCallback\u003c/code\u003e instance as a tag when making the Retrofit call.\u003c/li\u003e\n\u003cli\u003eCreate an interceptor \u003cem\u003eat the end of the interceptor chain\u003c/em\u003e that will check each outgoing request and wrap its \u003ccode\u003eRequestBody\u003c/code\u003e into a \u003ccode\u003eProgressRequestBody\u003c/code\u003e if the callback is present on it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFirst, we\u0026#39;ll update the Retrofit interface to accept a \u003ccode\u003eprogressCallback\u003c/code\u003e parameter that will be used as a tag:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Multipart\u003c/span\u003e\n\u003cspan\u003e@POST\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;/channels/{type}/{id}/file\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003esendFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e@Path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003echannelType\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003echannelId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Part\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMultipartBody\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePart\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e@Tag\u003c/span\u003e \u003cspan\u003eprogressCallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e?,\u003c/span\u003e\n\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eRetrofitCall\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUploadFileResponse\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThen, we\u0026#39;ll implement the interceptor that reads this tag and performs the wrapping of the \u003ccode\u003eRequestBody\u003c/code\u003e if needed:\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003einternal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProgressInterceptor\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInterceptor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eintercept\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echain\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInterceptor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eChain\u003c/span\u003e\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eResponse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003erequest\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003echain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n        \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eprogressCallback\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etag\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejava\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprogressCallback\u003c/span\u003e \u003cspan\u003e!=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003echain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproceed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewrapRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eprogressCallback\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003echain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproceed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ewrapRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRequest\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eprogressCallback\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProgressCallback\u003c/span\u003e\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eRequest\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enewBuilder\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n            \u003cspan\u003e// Assume that any request tagged with a ProgressCallback is a POST\u003c/span\u003e\n            \u003cspan\u003e// request and has a non-null body            \u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eProgressRequestBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e!!\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eprogressCallback\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eFinally, we\u0026#39;ll add this interceptor to our \u003ccode\u003eOkHttpClient\u003c/code\u003e, making sure it\u0026#39;s the last one added. \u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ll add it as a \u003ca href=\"https://square.github.io/okhttp/interceptors/#network-interceptors\"\u003enetwork interceptor\u003c/a\u003e, as we want it to be as close to the actual upload as possible, and it doesn\u0026#39;t need to be involved in requests that don\u0026#39;t go out to the network.\u003cbr/\u003e\n\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ebaseClientBuilder\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddNetworkInterceptor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eProgressInterceptor\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis way nothing that previous interceptors do with the request will interfere with the progress reporting, as they\u0026#39;ll still have the original \u003ccode\u003eRequestBody\u003c/code\u003e to work with, and the special progress-tracking wrapper is only added at the very last moment before it actually goes out to the network.\u003c/p\u003e\n\n\u003cp\u003eIf you want to see this last change in detail, check out \u003ca href=\"https://github.com/GetStream/stream-chat-android/pull/2386\"\u003ethe corresponding PR on GitHub\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"wrapup\" href=\"#wrapup\"\u003e\n  \u003c/a\u003e\n  Wrap-Up\n\u003c/h2\u003e\n\n\u003cp\u003eSo that\u0026#39;s the implementation we ended up with for now! You can find all of this code in the \u003ca href=\"https://github.com/GetStream/stream-chat-android/\"\u003eChat Android SDK\u0026#39;s GitHub repository\u003c/a\u003e if you want to look at it in a real project.\u003c/p\u003e\n\n\u003cp\u003eThere is one remaining issue with this progress tracking: Whenever the body gets written, it\u0026#39;s only written into local buffers, and what we track is how fast we\u0026#39;re writing to that buffer. This then still needs to make it over the network, which can take some time. \u003c/p\u003e\n\n\u003cp\u003eSo the upload progress tends to get to 100% relatively quickly and then the request will remain pending for a while as the network call completes. \u003c/p\u003e\n\n\u003cp\u003eThis is as close to the socket (so to say) as we can get with these APIs. For a bit more info and references, see \u003ca href=\"https://github.com/GetStream/stream-chat-android/pull/2342#discussion_r709021729\"\u003ethis GitHub discussion\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you want to learn more about how Okio (and OkHttp, Retrofit, and Moshi) work super efficiently with data, watch \u003ca href=\"https://www.youtube.com/watch?v=WvyScM_S88c\"\u003eA Few Ok Libraries by Jake Wharton\u003c/a\u003e. For an introduction to Moshi, check out \u003ca href=\"https://zsmb.co/appearances/droidcon-london-2021/\"\u003eSay Hi to Moshi\u003c/a\u003e.\u003c/p\u003e\n\n\n          \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": "2021-12-10T19:19:09Z",
  "modifiedTime": null
}
