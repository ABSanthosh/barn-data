{
  "id": "122bdc08-a616-4ce4-bfa5-5b697aa8af63",
  "title": "Get a Version Name for a Commit",
  "link": "https://publicobject.com/2024/06/24/get-a-version-name-for-a-commit/",
  "description": "In some of the projects I work on, we publish an artifact for every build on the main branch. We don’t want to give these nice semver names like 1.5.0 because that’s too much work! Instead we just wanna generate a version name based on the",
  "author": "Jesse Wilson",
  "published": "Mon, 24 Jun 2024 22:35:07 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 1551,
  "excerpt": "In some of the projects I work on, we publish an artifact for every build on the main branch. We don’t want to give these nice semver names like 1.5.0 because that’s too much work! Instead we just wanna generate a version name based on the most-recent commit that it includes. Here’s a Bash one-liner: VERSION=$(TZ=UTC0 git log -1 --date=local --pretty=\"format:%cd.%h\" --date=\"format-local:%Y%m%d.%H%M%S\") Given a Git commit like this: $ git log commit 6018f4a376148525bd357f3d7464da90123ef1d7 (H",
  "siteName": "Public Object",
  "favicon": "",
  "text": "In some of the projects I work on, we publish an artifact for every build on the main branch. We don’t want to give these nice semver names like 1.5.0 because that’s too much work! Instead we just wanna generate a version name based on the most-recent commit that it includes.Here’s a Bash one-liner:VERSION=$(TZ=UTC0 git log -1 --date=local --pretty=\"format:%cd.%h\" --date=\"format-local:%Y%m%d.%H%M%S\")Given a Git commit like this:$ git log commit 6018f4a376148525bd357f3d7464da90123ef1d7 (HEAD) Author: Jesse Wilson \u003cjesse@example.com\u003e Date: Mon Jun 24 18:11:35 2024 -0400 Do not add pineapples unless requested It’ll create version string like this:$ echo $VERSION 20240624.221135.6018f4aIt’s an 8-digit date (2024-June-24) followed by a 6-digit time (22:11:35) followed by a short hash of the commit.Here’s why this format is good:It’s human-readable. I’ve seen seconds-since-epoch timestamps for versions and find these much easier to work with: ‘That artifact is from last month; we should update it.’It uses the timestamp of the commit. We used to run date -u '+%Y%m%d.%H%M%S' but that returns the timestamp that the version was requested, not the timestamp of the commit. If our builds run out-of-order, that’s a problem.It doesn’t care about the time zone of the machine producing it. I run my Mac in America/Toronto but the version timestamp is UTC.It includes a Git hash. I’ve found it occasionally quite handy to look up the exact commit for a project dependency.If you’re generating version names from git commits, please use this!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\n\t\t\n\n\n\n\n\n\u003cmain role=\"main\"\u003e\n\t\u003carticle\u003e\n\t\t\u003csection\u003e\n\t\t\t\t\u003cp\u003eIn some of the projects I work on, we publish an artifact for every build on the main branch. We don’t want to give these nice semver names like \u003ccode\u003e1.5.0\u003c/code\u003e because that’s too much work! Instead we just wanna generate a version name based on the most-recent commit that it includes.\u003c/p\u003e\u003cp\u003eHere’s a Bash one-liner:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eVERSION=$(TZ=UTC0 git log -1 --date=local --pretty=\u0026#34;format:%cd.%h\u0026#34; --date=\u0026#34;format-local:%Y%m%d.%H%M%S\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGiven a Git commit like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ git log\ncommit 6018f4a376148525bd357f3d7464da90123ef1d7 (HEAD)\nAuthor: Jesse Wilson \u0026lt;jesse@example.com\u0026gt;\nDate:   Mon Jun 24 18:11:35 2024 -0400\n\n    Do not add pineapples unless requested\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt’ll create version string like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e$ echo $VERSION\n20240624.221135.6018f4a\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt’s an 8-digit date (2024-June-24) followed by a 6-digit time (22:11:35) followed by a short hash of the commit.\u003c/p\u003e\u003cp\u003eHere’s why this format is good:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt’s human-readable. I’ve seen seconds-since-epoch timestamps for versions and find these much easier to work with: \u003cem\u003e‘That artifact is from last month; we should update it.’\u003c/em\u003e\u003c/li\u003e\u003cli\u003eIt uses the timestamp of the commit. We used to run \u003ccode\u003edate -u \u0026#39;+%Y%m%d.%H%M%S\u0026#39;\u003c/code\u003e but that returns the timestamp that the version was requested, not the timestamp of the commit. If our builds run out-of-order, that’s a problem.\u003c/li\u003e\u003cli\u003eIt doesn’t care about the time zone of the machine producing it. I run my Mac in America/Toronto but the version timestamp is UTC.\u003c/li\u003e\u003cli\u003eIt includes a Git hash. I’ve found it occasionally quite handy to look up the exact commit for a project dependency.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIf you’re generating version names from git commits, please use this!\u003c/p\u003e\n\t\t\t\u003c/section\u003e\n\t\u003c/article\u003e\n\u003c/main\u003e\n\n\n\n\n\t\t\n\n\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-06-24T22:35:07Z",
  "modifiedTime": "2024-06-24T22:37:35Z"
}
