{
  "id": "d76534d1-cf99-4c86-91cb-a119cec0455e",
  "title": "Multi-module Lint Rules Follow Up: Suppressions ‚ò†Ô∏è",
  "link": "https://zarah.dev/2022/02/15/deprecated-suppress.html",
  "description": "It has been a hot minute since I posted about writing multi-module Lint rules so it‚Äôs time for a follow up. Today‚Äôs topic: suppressions! A quick recap of where we are:",
  "author": "Zarah Dominguez",
  "published": "2022-02-15T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "lint"
  ],
  "byline": "",
  "length": 3967,
  "excerpt": "It has been a hot minute since I posted about writing multi-module Lint rules so it‚Äôs time for a follow up. Today‚Äôs topic: suppressions! A quick recap of whe...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "It has been a hot minute since I posted about writing multi-module Lint rules so it‚Äôs time for a follow up. Today‚Äôs topic: suppressions! A quick recap of where we are: We have written a Lint rule that checks for usages of deprecated colours (including selectors) in XML files. The rule goes through all modules in the project looking for colours that are contained in any file with the _deprecated suffix in the filename. We then report usages of those colours as errors. We have also written tests for our Lint rule that cover most (all?) scenarios. Suppression Checks üõ°Ô∏è A key mechanism we employ in our Lint rule is calling getPartialResults in the afterCheckEachProject callback. We use the returned PartialResults to store: the list of deprecated colours, and the list of all colour usages in each module (If it‚Äôs a bit confusing, I highly recommend reading through the OG post and maybe things will make more sense). The KDoc for getPartialResults point out that suppressions are not checked at this point: Note that in this case, the lint infrastructure will not automatically look up the error location (since there isn‚Äôt one yet) to see if the issue has been suppressed (via annotations, lint.xml and other mechanisms), so you should do this yourself, via the various LintDriver.isSuppressed methods. This presents us with a great opportunity to improve our DeprecatedColorInXml Lint rule. We don‚Äôt even want to consider reporting a colour usage if our Lint rule is suppressed. Since we are parsing an XML file, we can use the isSuppressed() variant that takes in an XmlContext: override fun visitAttribute(context: XmlContext, attribute: Attr) { // The issue is suppressed for this attribute, skip it val isIssueSuppressed = context.driver.isSuppressed(context, ISSUE, attribute) if (isIssueSuppressed) return // ... } override fun visitElement(context: XmlContext, element: Element) { // The issue is suppressed for this element, skip it val isIssueSuppressed = context.driver.isSuppressed(context, ISSUE, element) if (isIssueSuppressed) return // ... } I assume that the suppression checks can also be done in afterCheckEachProject but why delay when we can bail out early? Tests üî¨ With these updates, suppressed Lint issues in XML files will not be reported even if they are missing from the baseline file. We can leverage our existing tests to come up with new ones. Let‚Äôs write a test for an example layout file using a deprecated colour. We provide the test with two files: one for deprecated colours and another for the layout file. When we suppress the DeprecatedColorInXml rule in a widget in the layout file, there should not be any reported issues. @Test fun testSuppressedDeprecatedColorInWidget() { lint().files( xml( \"res/values/colors_deprecated.xml\", \"\"\" \u003cresources\u003e \u003ccolor name=\"some_colour\"\u003e#d6163e\u003c/color\u003e \u003c/resources\u003e \"\"\" ).indented(), xml( \"res/layout/layout.xml\", \"\"\" \u003cView xmlns:android=\"http://schemas.android.com/apk xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\u003e \u003cTextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:textColor=\"@color/some_colour\" tools:ignore=\"DeprecatedColorInXml\" /\u003e \u003c/View\u003e \"\"\" ).indented() ) .testModes(TestMode.PARTIAL) .run() .expectClean() } For completeness, we can also add a test where the suppression is declared in the root element of the layout file and a deprecated colour is used in a widget (i.e. move tools:ignore=\"DeprecatedColorInXml\" to the View). As always, the rule updates and the new test cases are in Github.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n  \u003carticle\u003e\n    \n\n    \u003cdiv\u003e\n          \u003cp\u003eIt has been a hot minute since I posted about \u003ca href=\"https://zarah.dev/2021/10/04/multi-module-lint.html\"\u003ewriting multi-module Lint rules\u003c/a\u003e so it‚Äôs time for a follow up. Today‚Äôs topic: suppressions! A quick recap of where we are:\u003c/p\u003e\n\n\u003cp\u003eWe have \u003ca href=\"https://github.com/zmdominguez/lint-rule-samples/blob/main/lint-checks/src/main/java/dev/zarah/lint/checks/DeprecatedColorInXmlDetector.kt\"\u003ewritten a Lint rule\u003c/a\u003e that checks for usages of deprecated colours (including selectors) in XML files. The rule goes through all modules in the project looking for colours that are contained in any file with the \u003ccode\u003e_deprecated\u003c/code\u003e suffix in the filename. We then report usages of those colours as errors. We have also \u003ca href=\"https://github.com/zmdominguez/lint-rule-samples/blob/main/lint-checks/src/test/java/dev/zarah/lint/checks/DeprecatedColorInXmlDetectorTest.kt\"\u003ewritten tests\u003c/a\u003e for our Lint rule that cover most (all?) scenarios.\u003c/p\u003e\n\n\u003ch3 id=\"suppression-checks-Ô∏è\"\u003eSuppression Checks üõ°Ô∏è\u003c/h3\u003e\n\u003cp\u003eA key mechanism we employ in our Lint rule is calling \u003ca href=\"https://github.com/zmdominguez/lint-rule-samples/blob/d7a78ba8c2970121127e55df7db2959e932917ff/lint-checks/src/main/java/dev/zarah/lint/checks/DeprecatedColorInXmlDetector.kt#L109\"\u003e\u003ccode\u003egetPartialResults\u003c/code\u003e\u003c/a\u003e in the \u003ccode\u003eafterCheckEachProject\u003c/code\u003e callback. We use the returned \u003ca href=\"https://cs.android.com/android-studio/platform/tools/base/+/mirror-goog-studio-main:lint/libs/lint-api/src/main/java/com/android/tools/lint/detector/api/PartialResult.kt\"\u003e\u003ccode\u003ePartialResults\u003c/code\u003e\u003c/a\u003e to store:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ethe list of deprecated colours, and\u003c/li\u003e\n  \u003cli\u003ethe list of all colour usages\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ein each module (If it‚Äôs a bit confusing, I highly recommend reading through the \u003ca href=\"https://zarah.dev/2021/10/04/multi-module-lint.html\"\u003eOG post\u003c/a\u003e and maybe things will make more sense).\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://cs.android.com/android-studio/platform/tools/base/+/mirror-goog-studio-main:lint/libs/lint-api/src/main/java/com/android/tools/lint/detector/api/Context.kt;l=446;drc=f801809cdabf506b19c1b7d19eff16a358469370\"\u003eKDoc for \u003ccode\u003egetPartialResults\u003c/code\u003e\u003c/a\u003e point out that suppressions are not checked at this point:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNote that in this case, the lint infrastructure will not automatically look up the error location (since there isn‚Äôt one yet) to see if the issue has been suppressed (via annotations, lint.xml and other mechanisms), so you should do this yourself, via the various \u003ccode\u003eLintDriver.isSuppressed\u003c/code\u003e methods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis presents us with a great opportunity to improve our \u003ccode\u003eDeprecatedColorInXml\u003c/code\u003e Lint rule. We don‚Äôt even want to \u003cem\u003econsider\u003c/em\u003e reporting a colour usage if our Lint rule is suppressed. Since we are parsing an XML file, we can use the \u003ca href=\"https://cs.android.com/android-studio/platform/tools/base/+/mirror-goog-studio-main:lint/libs/lint-api/src/main/java/com/android/tools/lint/client/api/LintDriver.kt;l=3465;drc=6a64a0c6ff08e0a34226c91a71e775d2c2699ded\"\u003e\u003ccode\u003eisSuppressed()\u003c/code\u003e variant that takes in an \u003ccode\u003eXmlContext\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003evisitAttribute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eXmlContext\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eattribute\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAttr\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// The issue is suppressed for this attribute, skip it\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eisIssueSuppressed\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edriver\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisSuppressed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eISSUE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eattribute\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisIssueSuppressed\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e\n\n    \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003evisitElement\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eXmlContext\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eelement\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eElement\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// The issue is suppressed for this element, skip it\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eisIssueSuppressed\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edriver\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisSuppressed\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eISSUE\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eelement\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eisIssueSuppressed\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e\n\n  \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI assume that the suppression checks can also be done in \u003ccode\u003eafterCheckEachProject\u003c/code\u003e but why delay when we can bail out early?\u003c/p\u003e\n\n\u003ch3 id=\"tests-\"\u003eTests üî¨\u003c/h3\u003e\n\u003cp\u003eWith these updates, \u003ca href=\"https://developer.android.com/studio/write/lint#configuring-lint-checking-in-xml\"\u003esuppressed Lint issues in XML files\u003c/a\u003e will not be reported even if they are missing from the baseline file. We can leverage our \u003ca href=\"https://github.com/zmdominguez/lint-rule-samples/blob/d7a78ba8c2970121127e55df7db2959e932917ff/lint-checks/src/test/java/dev/zarah/lint/checks/DeprecatedColorInXmlDetectorTest.kt\"\u003eexisting tests\u003c/a\u003e to come up with new ones.\u003c/p\u003e\n\n\u003cp\u003eLet‚Äôs write a test for an example layout file using a deprecated colour. We provide the test with two files: one for deprecated colours and another for the layout file. When we suppress the \u003ccode\u003eDeprecatedColorInXml\u003c/code\u003e rule in a widget in the layout file, there should not be any reported issues.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Test\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003etestSuppressedDeprecatedColorInWidget\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elint\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003efiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003exml\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;res/values/colors_deprecated.xml\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n            \u0026lt;resources\u0026gt;\n                \u0026lt;color name=\u0026#34;some_colour\u0026#34;\u0026gt;#d6163e\u0026lt;/color\u0026gt;\n            \u0026lt;/resources\u0026gt;\n        \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eindented\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\n        \u003cspan\u003exml\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;res/layout/layout.xml\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n            \u0026lt;View xmlns:android=\u0026#34;http://schemas.android.com/apk\n                xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;\n                android:layout_width=\u0026#34;wrap_content\u0026#34;\n                android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt;\n                \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34;\n                    android:layout_height=\u0026#34;wrap_content\u0026#34;\n                    android:textColor=\u0026#34;@color/some_colour\u0026#34; \n                    tools:ignore=\u0026#34;DeprecatedColorInXml\u0026#34; /\u0026gt;\n            \u0026lt;/View\u0026gt;\n        \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eindented\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etestModes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eTestMode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePARTIAL\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexpectClean\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFor completeness, we can also add a test where the suppression is declared in the root element of the layout file and a deprecated colour is used in a widget (i.e. move \u003ccode\u003etools:ignore=\u0026#34;DeprecatedColorInXml\u0026#34;\u003c/code\u003e to the \u003ccode\u003eView\u003c/code\u003e).\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eAs always, the rule updates and the new test cases are \u003ca href=\"https://github.com/zmdominguez/lint-rule-samples/commit/83f8cfb9345cff346f395a9c8876e153fcc24ab8\"\u003ein Github\u003c/a\u003e.\u003c/p\u003e\n\n        \u003c/div\u003e\n  \u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
