{
  "id": "fab34336-893a-4081-a263-09f4dd1765c8",
  "title": "Android Nougat and rate limiting of notification updates",
  "link": "https://saket.me/android-7-nougat-rate-limiting-notifications/",
  "description": "While working on a feature for downloading images in my app, I ran into a strange issue where progress notifications were never reaching 100%. Knowing that the framework is usually not wrong, I started suspecting my own skills (as usual). To make matters worse, nobody was able to reproduce the issue in a sample project I shared with other […] The post Android Nougat and rate limiting of notification updates appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Mon, 28 Aug 2017 11:23:55 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android",
    "notifications",
    "nougat"
  ],
  "byline": "Saket Narayan",
  "length": 2629,
  "excerpt": "Nougat silently brings in a stricter rate limiting system for notifications which can cause some notification updates to fail.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "While working on a feature for downloading images in my app, I ran into a strange issue where progress notifications were never reaching 100%. Knowing that the framework is usually not wrong, I started suspecting my own skills (as usual). To make matters worse, nobody was able to reproduce the issue in a sample project I shared with other developers. It took me a baffling/embarrassing amount of time to realize that the notifications were only getting stuck on Nougat and above. And the reason nobody was able to reproduce it was because they were testing on M and lower versions. This was a huge hint. I removed my logcat filters to check if the system was printing any logs and there they were: E/NotificationService: Package enqueue rate is 10.062265. Shedding events. package=me.saket.notifications Turns out, Android has a rate-limiting system in place for notification updates to prevent apps from DDOS-ing the notification shade. Although it has existed since long, the limit was significantly reduced in Nougat from 50 updates to 10 updates every second to improve performance: Updates to progress bars are the main culprit in system performance events caused by apps spamming the notification service. Rate-limiting only updates allows us to set a lower threshold without the worry of mistakenly dropping bursts of notifications being quickly posted after a network sync. The git commits can be read here here and here. Although I had no intentions of spamming, I never thought that updating a progress bar will be so expensive for the notification shade. The shade is perhaps more complex than I can fathom. An engineer who works on notifications on Android further suggested 5 updates every second is a good rate to aim for instead of 10. RxJava to the rescue! As usual, there’s an Rx operator for that: Observable#sample(), which emits the most recently emitted item within periodic time intervals. // Avoid sampling the last \"success\" emission // before terminating the stream. boolean includeLastItem = true; streamDownloadProgress() .sample(200, TimeUnit.MILLISECONDS, includeLastItem) .subscribe(progress -\u003e { updateProgressNotification(progress, NOTIFICATION_ID); }); Small caveat The problem sadly isn’t fully solved yet. The rate limit is enforced on a per package level and not per notification ID (please feel free to correct me if this is wrong), which means that there has to be a global check in place somewhere in your app. I haven’t figured out any solution, but aiming for ~5 updates a second seems to be working for me. A sample project demonstrating this problem can be seen here on Github.",
  "image": "https://saket.me/wp-content/uploads/2017/08/notification-progress-issue-2.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\u003cp\u003eWhile working on a feature for downloading images in my app, I ran into a strange issue where progress notifications were never reaching 100%. Knowing that the framework is usually not wrong, I started suspecting my own skills (as usual). To make matters worse, nobody was able to reproduce the issue in a \u003ca href=\"https://github.com/Saketme/ProgressNotificationIssue\"\u003esample project\u003c/a\u003e I shared with other developers.\u003c/p\u003e\n\u003cp\u003eIt took me a baffling/embarrassing amount of time to realize that the notifications were only getting stuck on Nougat and above. And the reason nobody was able to reproduce it was because they were testing on M and lower versions. This was a huge hint. I removed my logcat filters to check if the system was printing any logs and there they were:\u003c/p\u003e\n\u003cpre\u003eE/NotificationService: Package enqueue rate is 10.062265. Shedding events. package=me.saket.notifications\u003c/pre\u003e\n\u003cp\u003eTurns out, Android has a rate-limiting system in place for notification updates to prevent apps from DDOS-ing the notification shade. Although it has existed since long, the limit was significantly reduced in Nougat from 50 updates to \u003cstrong\u003e10 updates every second\u003c/strong\u003e to improve performance:\u003c/p\u003e\n\u003cpre\u003eUpdates to progress bars are the main culprit in system\nperformance events caused by apps spamming the notification\nservice. Rate-limiting only updates allows us to set a lower\nthreshold without the worry of mistakenly dropping bursts of\nnotifications being quickly posted after a network sync.\u003c/pre\u003e\n\u003cp\u003eThe git commits can be read here \u003ca href=\"https://android.googlesource.com/platform/frameworks/base/+/c8673a88fed53715d2295a535535c7ce7acbe7b6%5E%21/#F0\"\u003ehere\u003c/a\u003e and \u003ca href=\"https://android.googlesource.com/platform/frameworks/base/+/a61f179c3d95e2b04b82dcc4ef824be1f6c4690a%5E%21/#F1\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAlthough I had no intentions of spamming, I never thought that updating a progress bar will be so expensive for the notification shade. The shade is perhaps more complex than I can fathom. An engineer who works on notifications on Android further suggested 5 updates every second is a good rate to aim for instead of 10.\u003c/p\u003e\n\u003ch4\u003eRxJava to the rescue!\u003c/h4\u003e\n\u003cp\u003eAs usual, \u003cem\u003ethere’s an Rx operator for that\u003c/em\u003e: \u003ca href=\"http://reactivex.io/documentation/operators/sample.html\"\u003e\u003ccode\u003eObservable#sample()\u003c/code\u003e\u003c/a\u003e, which emits the most recently emitted item within periodic time intervals.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Avoid sampling the last \u0026#34;success\u0026#34; emission \n// before terminating the stream.\nboolean includeLastItem = true;\n\nstreamDownloadProgress()\n.sample(200, TimeUnit.MILLISECONDS, includeLastItem)\n .subscribe(progress -\u0026gt; {\n   updateProgressNotification(progress, NOTIFICATION_ID);\n });\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eSmall caveat\u003c/h4\u003e\n\u003cp\u003eThe problem sadly isn’t fully solved yet. The rate limit is enforced on a per package level and not per notification ID (please feel free to correct me if this is wrong), which means that there has to be a global check in place somewhere in your app. I haven’t figured out any solution, but aiming for ~5 updates a second seems to be working for me.\u003c/p\u003e\n\u003cp\u003eA sample project demonstrating this problem can be seen \u003ca href=\"https://github.com/Saketme/ProgressNotificationIssue\"\u003ehere on Github\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2017-08-28T11:23:55Z",
  "modifiedTime": "2022-10-31T16:16:06Z"
}
