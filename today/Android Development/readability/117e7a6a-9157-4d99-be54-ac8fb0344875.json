{
  "id": "117e7a6a-9157-4d99-be54-ac8fb0344875",
  "title": "Debugging App Links in Android 12 üîó",
  "link": "https://zarah.dev/2022/02/08/android12-deeplinks.html",
  "description": "I have been working with deeplinks lately and I noticed that quite a few things have changed since I last worked with them. The most important change is quoted in the list of Android 12 behaviour changes:",
  "author": "Zarah Dominguez",
  "published": "2022-02-08T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "deeplinks"
  ],
  "byline": "",
  "length": 8206,
  "excerpt": "I have been working with deeplinks lately and I noticed that quite a few things have changed since I last worked with them. The most important change is quot...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "I have been working with deeplinks lately and I noticed that quite a few things have changed since I last worked with them. The most important change is quoted in the list of Android 12 behaviour changes: Starting in Android 12 (API level 31), a generic web intent resolves to an activity in your app only if your app is approved for the specific domain contained in that web intent. If your app isn‚Äôt approved for the domain, the web intent resolves to the user‚Äôs default browser app instead. There‚Äôs enough documentation on the Android developer site on how to go about handling this approval. But to recap: Add intent filters in the AndroidManifest file Make sure autoVerify is set to true Associate your website with your app If all goes well, clicking on a link should open the corresponding screen in the app: Deep linking into the product details screen If things do not go well, Google has provided ways to test deeplinks. There are lots of ways to figure out where things went wrong, but they are scattered in different sections. For my sanity, I have collated the steps I have found so that they are all in one place. Website Linking If your website is not verified to work with the app, auto-verification will fail. Head on over to the Statement List Generator and Tester, put in the required details, and click on ‚ÄúTest statement‚Äù. Successful linking! You can also use the Digital Assets API to confirm that the assetlinks.json file is properly hosted: https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=[YOUR_WEBSITE_URL]\u0026relation=delegate_permission/common.handle_all_urls Remember that verification should pass for all hosts declared in the AndroidManifest file on Android 11 and below, so make sure to test each of them. If any of these tests fail, review the Digital Asset Links documentation and make sure that the file is formatted properly. We found out the hard way that the value for your certificate‚Äôs sha256_cert_fingerprints in assetlinks.json SHOULD be in ALL CAPS (Thanks to Ben Trengrove for debugging that issue with me!) On the device-side of things, we can also check the status of domain verification: adb shell pm get-app-links [YOUR_PACKAGE_NAME] This will show results similar to this: com.woolworths: ID: fb789c89-1d2e-403a-be0c-a8871a8e5b76 Signatures: [41:0F:9A:43:72:FC:C0:76:BD:90:AC:C4:A0:6F:96:D5:24:CC:1E:69:2E:79:18:1F:05:0C:78:21:8C:39:27:D5] Domain verification state: woolworths.app.link: verified woolworths-alternate.app.link: verified www.woolworths.com.au: verified There are various states for domain verification. Check out the documentation for what each of those may mean. User Permissions If everything on the website side of things is setup properly, check that the user has allowed opening your app‚Äôs supported links. The easiest way to do this is to use the ADB command to check the domain verification status and add flags to show the user‚Äôs side of things: adb shell pm get-app-links --user cur [YOUR_PACKAGE_NAME] Running this command will spit out the verification status and if the user has given your app permission to open declared URLs: com.woolworths: ID: fb789c89-1d2e-403a-be0c-a8871a8e5b76 Signatures: [41:0F:9A:43:72:FC:C0:76:BD:90:AC:C4:A0:6F:96:D5:24:CC:1E:69:2E:79:18:1F:05:0C:78:21:8C:39:27:D5] Domain verification state: woolworths.app.link: verified woolworths-alternate.app.link: verified www.woolworths.com.au: verified User 0: Verification link handling allowed: true Selection state: Disabled: woolworths.app.link woolworths-alternate.app.link www.woolworths.com.au To see the status of ALL apps on the device, run the following ADB command to check all link policies: adb shell dumpsys package d // OR adb shell dumpsys package domain-preferred-apps I find the information this shows to be very interesting! Maybe that‚Äôs just me though, I‚Äôm weird like that. Note that even if auto-verification fails, the user can manually allow your app to open links. Take this output for the debug variant of our app for example: com.woolworths.debug: ID: 99e87cda-e951-4e7a-ba6a-894a31718add Signatures: [AF:35:FE:62:F8:11:02:16:8D:B4:7F:15:91:A3:9B:43:0E:9C:B0:93:F7:57:AC:99:B2:FC:19:2E:C1:A8:E3:96] Domain verification state: woolworths-alternate.test-app.link: legacy_failure www.woolworths.com.au: verified woolworths.test-app.link: legacy_failure User 0: Verification link handling allowed: true Selection state: Enabled: woolworths-alternate.test-app.link woolworths.test-app.link Disabled: www.woolworths.com.au Despite two hosts failing the verification process: woolworths-alternate.test-app.link: legacy_failure woolworths.test-app.link: legacy_failure I can go into the app‚Äôs settings and manually approve these URLs: Manual permission for supported links Resetting Verification There are also ADB commands to facilitate going through the whole validation process. First reset the app links state of the app: adb shell pm set-app-links --package [YOUR_PACKAGE_NAME] 0 all Then manually trigger re-verification: adb shell pm verify-app-links --re-verify [YOUR_PACKAGE_NAME] If you want to test out the auto-verification process but do not target Android 12 yet, it can be enabled for your app: adb shell am compat enable 175408749 [YOUR_PACKAGE_NAME] Testing Intents Finally, to ensure that we have correctly configured the Intent filters in the AndroidManifest.xml file and our app can open intended links, send an implicit Intent via ADB: adb shell am start -a android.intent.action.VIEW -c android.intent.category.BROWSABLE -d \"[URL_HERE]\" Since I‚Äôm lazy and that‚Äôs long command to remember, I added an alias for it: alias deeplink='() { adb shell am start -a android.intent.action.VIEW -c android.intent.category.BROWSABLE -d \"$1\" ;}' So I can do this: ‚ûú ~ deeplink https://www.woolworths.com.au/shop/productdetails/670560 Starting: Intent { act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=https://www.woolworths.com.au/... } Install-time Logs Back in 2017, I wrote about another way to troubleshoot autoVerify . You would need to keep an eye on Logcat for the domain verification logs. For our debug variant, these logs look like this: I/IntentFilterIntentOp: Verifying IntentFilter. verificationId:180 scheme:\"https\" hosts:\"woolworths-alternate.test-app.link www.woolworths.com.au woolworths.test-app.link\" package:\"com.woolworths.debug\". [CONTEXT service_id=244 ] I/AppLinksUtilsV1: Legacy cross-profile verification enabled [CONTEXT service_id=244 ] I/SingleHostAsyncVerifier: Verification result: checking for a statement with source # cfkq@55fed08a, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u003e true. [CONTEXT service_id=244 ] I/SingleHostAsyncVerifier: Verification result: checking for a statement with source # cfkq@5c3d4ef1, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u003e false. [CONTEXT service_id=244 ] I/SingleHostAsyncVerifier: Verification result: checking for a statement with source # cfkq@9705d4b3, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u003e false. [CONTEXT service_id=244 ] I/IntentFilterIntentOp: Verification 180 complete. Success:false. Failed hosts:woolworths-alternate.test-app.link,woolworths.test-app.link. [CONTEXT service_id=244 ] It looks like the output formatting has changed since 2017 and the individual URLs are not cleartext anymore (for example, cfkq@55fed08a). There‚Äôs really not much reason to look for these logs aside from checking that some form of auto-verification is happening. The ADB commands we‚Äôve gone through in the previous sections show the same information in a much more readable format. Unfortunately, it is difficult to ascertain the inner workings of domain verification. Hopefully the steps outlined here help narrow down possible causes for when your app links fail to cooperate. Good luck and happy (app) linking!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eI have been working with deeplinks lately and I noticed that quite a few things have changed since I last worked with them. The most important change is quoted in the list of \u003ca href=\"https://developer.android.com/about/versions/12/behavior-changes-all#web-intent-resolution\"\u003eAndroid 12 behaviour changes\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eStarting in Android 12 (API level 31), a generic web intent resolves to an activity in your app \u003cstrong\u003eonly if your app is approved for the specific domain\u003c/strong\u003e contained in that web intent. If your app isn‚Äôt approved for the domain, the web intent resolves to the user‚Äôs default browser app instead.\u003c/p\u003e\n\n  \n\u003c/blockquote\u003e\n\n\u003cp\u003eThere‚Äôs enough documentation on the Android developer site on how to go about handling this approval. But to recap:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://developer.android.com/training/app-links/deep-linking#adding-filters\"\u003eAdd intent filters in the AndroidManifest file\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#add-intent-filters\"\u003eMake sure \u003ccode\u003eautoVerify\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#web-assoc\"\u003eAssociate your website with your app\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf all goes well, clicking on a link should open the corresponding screen in the app:\u003c/p\u003e\n\u003cfigure\u003e\n    \u003ca href=\"https://imgur.com/4Kn6N5T\"\u003e\u003cimg src=\"https://imgur.com/4Kn6N5T.gif\" width=\"320\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n    \u003cfigcaption\u003eDeep linking into the product details screen\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eIf things do \u003cem\u003enot\u003c/em\u003e go well, Google has provided ways to \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#testing\"\u003etest deeplinks\u003c/a\u003e. There are lots of ways to figure out where things went wrong, but they are scattered in different sections. For my sanity, I have collated the steps I have found so that they are all in one place.\u003c/p\u003e\n\n\u003ch3 id=\"website-linking\"\u003eWebsite Linking\u003c/h3\u003e\n\u003cp\u003eIf your website is not verified to work with the app, auto-verification will fail. Head on over to the \u003ca href=\"https://developers.google.com/digital-asset-links/tools/generator\"\u003eStatement List Generator and Tester\u003c/a\u003e, put in the required details, and click on ‚ÄúTest statement‚Äù.\u003c/p\u003e\n\n\u003cfigure\u003e\n    \u003ca href=\"https://imgur.com/T9J8qI8\"\u003e\u003cimg src=\"https://i.imgur.com/T9J8qI8.png\" title=\"source: imgur.com\" width=\"450\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n    \u003cfigcaption\u003eSuccessful linking!\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eYou can also use the Digital Assets API to confirm that the \u003ccode\u003eassetlinks.json\u003c/code\u003e file is properly hosted:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ehttps://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=[YOUR_WEBSITE_URL]\u0026amp;relation=delegate_permission/common.handle_all_urls\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eRemember that verification should pass for \u003cstrong\u003eall\u003c/strong\u003e hosts declared in the \u003ccode\u003eAndroidManifest\u003c/code\u003e file on Android 11 and below, so make sure to test each of them.\u003c/p\u003e\n\n\u003cp\u003eIf any of these tests fail, review the \u003ca href=\"https://developers.google.com/digital-asset-links/v1/create-statement\"\u003eDigital Asset Links documentation\u003c/a\u003e and make sure that the file is formatted properly.\u003c/p\u003e\n\n\u003cp\u003eWe found out the hard way that the value for your certificate‚Äôs \u003ccode\u003esha256_cert_fingerprints\u003c/code\u003e in \u003ccode\u003eassetlinks.json\u003c/code\u003e \u003cstrong\u003eSHOULD\u003c/strong\u003e be in ALL CAPS\u003c/p\u003e\n\u003cp\u003e(Thanks to \u003ca href=\"https://twitter.com/bentrengrove\"\u003eBen Trengrove\u003c/a\u003e for debugging that issue with me!)\u003c/p\u003e\n\n\u003cp\u003eOn the device-side of things, we can also check the status of domain verification:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell pm get-app-links \u003cspan\u003e[\u003c/span\u003eYOUR_PACKAGE_NAME]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis will show results similar to this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e  com.woolworths:\n    ID: fb789c89-1d2e-403a-be0c-a8871a8e5b76\n    Signatures: \u003cspan\u003e[\u003c/span\u003e41:0F:9A:43:72:FC:C0:76:BD:90:AC:C4:A0:6F:96:D5:24:CC:1E:69:2E:79:18:1F:05:0C:78:21:8C:39:27:D5]\n    Domain verification state:\n      woolworths.app.link: verified\n      woolworths-alternate.app.link: verified\n      www.woolworths.com.au: verified\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThere are various states for domain verification. Check out the \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#review-results\"\u003edocumentation\u003c/a\u003e for what each of those may mean.\u003c/p\u003e\n\n\u003ch3 id=\"user-permissions\"\u003eUser Permissions\u003c/h3\u003e\n\u003cp\u003eIf everything on the website side of things is setup properly, check that the user has allowed opening your app‚Äôs supported links.\u003c/p\u003e\n\n\u003cp\u003eThe easiest way to do this is to use the ADB command to check the domain verification status and add \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#user-prompt-command-line-program\"\u003eflags to show the user‚Äôs side of things\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell pm get-app-links \u003cspan\u003e--user\u003c/span\u003e cur \u003cspan\u003e[\u003c/span\u003eYOUR_PACKAGE_NAME]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eRunning this command will spit out the verification status and if the user has given your app permission to open declared URLs:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e  com.woolworths:\n    ID: fb789c89-1d2e-403a-be0c-a8871a8e5b76\n    Signatures: \u003cspan\u003e[\u003c/span\u003e41:0F:9A:43:72:FC:C0:76:BD:90:AC:C4:A0:6F:96:D5:24:CC:1E:69:2E:79:18:1F:05:0C:78:21:8C:39:27:D5]\n    Domain verification state:\n      woolworths.app.link: verified\n      woolworths-alternate.app.link: verified\n      www.woolworths.com.au: verified\n    User 0:\n      Verification \u003cspan\u003elink \u003c/span\u003ehandling allowed: \u003cspan\u003etrue\n      \u003c/span\u003eSelection state:\n        Disabled:\n          woolworths.app.link\n          woolworths-alternate.app.link\n          www.woolworths.com.au\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo see the status of \u003cem\u003eALL\u003c/em\u003e apps on the device, run the following ADB command to \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#check-link-policies\"\u003echeck all link policies\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell dumpsys package d\n// OR\nadb shell dumpsys package domain-preferred-apps\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI find the information this shows to be very interesting! Maybe that‚Äôs just me though, I‚Äôm weird like that. \u003cimg title=\":nerd_face:\" alt=\":nerd_face:\" src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f913.png\" height=\"20\" width=\"20\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that even if auto-verification fails, the user can manually allow your app to open links. Take this output for the debug variant of our app for example:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ecom.woolworths.debug:\n  ID: 99e87cda-e951-4e7a-ba6a-894a31718add\n  Signatures: \u003cspan\u003e[\u003c/span\u003eAF:35:FE:62:F8:11:02:16:8D:B4:7F:15:91:A3:9B:43:0E:9C:B0:93:F7:57:AC:99:B2:FC:19:2E:C1:A8:E3:96]\n  Domain verification state:\n    woolworths-alternate.test-app.link: legacy_failure\n    www.woolworths.com.au: verified\n    woolworths.test-app.link: legacy_failure\n  User 0:\n    Verification \u003cspan\u003elink \u003c/span\u003ehandling allowed: \u003cspan\u003etrue\n    \u003c/span\u003eSelection state:\n      Enabled:\n        woolworths-alternate.test-app.link\n        woolworths.test-app.link\n      Disabled:\n        www.woolworths.com.au\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eDespite two hosts failing the verification process:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ewoolworths-alternate.test-app.link: legacy_failure\nwoolworths.test-app.link: legacy_failure\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI can go into the app‚Äôs settings and manually approve these URLs:\u003c/p\u003e\n\u003cfigure\u003e\n    \u003ca href=\"https://i.imgur.com/OYEKHYO\"\u003e\u003cimg src=\"https://i.imgur.com/OYEKHYO.png\" title=\"Screenshot showing links\" width=\"320\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n    \u003cfigcaption\u003eManual permission for supported links\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"resetting-verification\"\u003eResetting Verification\u003c/h3\u003e\n\u003cp\u003eThere are also ADB commands to facilitate going through the whole validation process.\u003c/p\u003e\n\n\u003cp\u003eFirst \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#reset-state\"\u003ereset the app links state\u003c/a\u003e of the app:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell pm set-app-links \u003cspan\u003e--package\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eYOUR_PACKAGE_NAME] 0 all\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThen \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#invoke-domain-verification\"\u003emanually trigger re-verification\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell pm verify-app-links \u003cspan\u003e--re-verify\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eYOUR_PACKAGE_NAME]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf you want to test out the auto-verification process but do not target Android 12 yet, it can be \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#support-updated-domain-verification\"\u003eenabled for your app\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell am compat \u003cspan\u003eenable \u003c/span\u003e175408749 \u003cspan\u003e[\u003c/span\u003eYOUR_PACKAGE_NAME]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"testing-intents\"\u003eTesting Intents\u003c/h3\u003e\n\u003cp\u003eFinally, to ensure that we have correctly configured the Intent filters in the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e file and our app can open intended links, \u003ca href=\"https://developer.android.com/training/app-links/verify-site-associations#auto-verification\"\u003esend an implicit Intent via ADB\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb shell am start \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-c\u003c/span\u003e android.intent.category.BROWSABLE \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\u0026#34;[URL_HERE]\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSince I‚Äôm lazy and that‚Äôs long command to remember, I added an alias for it:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ealias \u003c/span\u003e\u003cspan\u003edeeplink\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;() { adb shell am start -a android.intent.action.VIEW -c android.intent.category.BROWSABLE -d \u0026#34;$1\u0026#34; ;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo I can do this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://www.woolworths.com.au/shop/productdetails/670560\nStarting: Intent \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eact\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eandroid.intent.action.VIEW \u003cspan\u003ecat\u003c/span\u003e\u003cspan\u003e=[\u003c/span\u003eandroid.intent.category.BROWSABLE] \u003cspan\u003edat\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://www.woolworths.com.au/... \u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"install-time-logs\"\u003eInstall-time Logs\u003c/h3\u003e\n\u003cp\u003eBack in 2017, I \u003ca href=\"https://zarah.dev/2017/01/20/testing-autoverify.html\"\u003ewrote about another way\u003c/a\u003e to troubleshoot \u003ccode\u003eautoVerify\u003c/code\u003e . You would need to keep an eye on Logcat for the domain verification logs. For our debug variant, these logs look like this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eI/IntentFilterIntentOp: Verifying IntentFilter. verificationId:180 scheme:\u003cspan\u003e\u0026#34;https\u0026#34;\u003c/span\u003e hosts:\u003cspan\u003e\u0026#34;woolworths-alternate.test-app.link www.woolworths.com.au woolworths.test-app.link\u0026#34;\u003c/span\u003e package:\u003cspan\u003e\u0026#34;com.woolworths.debug\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eCONTEXT \u003cspan\u003eservice_id\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e244 \u003cspan\u003e]\u003c/span\u003e\nI/AppLinksUtilsV1: Legacy cross-profile verification enabled \u003cspan\u003e[\u003c/span\u003eCONTEXT \u003cspan\u003eservice_id\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e244 \u003cspan\u003e]\u003c/span\u003e\nI/SingleHostAsyncVerifier: Verification result: checking \u003cspan\u003efor \u003c/span\u003ea statement with \u003cspan\u003esource\u003c/span\u003e \u003cspan\u003e# cfkq@55fed08a, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u0026gt; true. [CONTEXT service_id=244 ]\u003c/span\u003e\nI/SingleHostAsyncVerifier: Verification result: checking \u003cspan\u003efor \u003c/span\u003ea statement with \u003cspan\u003esource\u003c/span\u003e \u003cspan\u003e# cfkq@5c3d4ef1, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u0026gt; false. [CONTEXT service_id=244 ]\u003c/span\u003e\nI/SingleHostAsyncVerifier: Verification result: checking \u003cspan\u003efor \u003c/span\u003ea statement with \u003cspan\u003esource\u003c/span\u003e \u003cspan\u003e# cfkq@9705d4b3, relation delegate_permission/common.handle_all_urls, and target # cfkq@7ce31cea --\u0026gt; false. [CONTEXT service_id=244 ]\u003c/span\u003e\nI/IntentFilterIntentOp: Verification 180 complete. Success:false. Failed hosts:woolworths-alternate.test-app.link,woolworths.test-app.link. \u003cspan\u003e[\u003c/span\u003eCONTEXT \u003cspan\u003eservice_id\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e244 \u003cspan\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIt looks like the output formatting has changed since 2017 and the individual URLs are not cleartext anymore (for example, \u003ccode\u003ecfkq@55fed08a\u003c/code\u003e). There‚Äôs really not much reason to look for these logs aside from checking that \u003cem\u003esome\u003c/em\u003e form of auto-verification is happening. The ADB commands we‚Äôve gone through in the previous sections show the same information in a much more readable format.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eUnfortunately, it is difficult to ascertain the inner workings of domain verification. Hopefully the steps outlined here help narrow down possible causes for when your app links fail to cooperate. Good luck and happy (app) linking! \u003cimg title=\":handshake:\" alt=\":handshake:\" src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f91d.png\" height=\"20\" width=\"20\"/\u003e\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
