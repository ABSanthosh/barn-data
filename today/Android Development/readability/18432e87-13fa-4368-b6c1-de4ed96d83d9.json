{
  "id": "18432e87-13fa-4368-b6c1-de4ed96d83d9",
  "title": "Running Specific Android UI Tests using TestParameterInjector via a Regex",
  "link": "https://handstandsam.com/2025/01/15/running-specific-android-ui-tests-using-testparameterinjector-via-a-regex/",
  "description": "There is documentation on the Android Developer website sharing tips to run Android UI tests via the command-line which I‚Äôve found super useful. It provides examples on how to run specific tests (instead of running them all) including running by package, class or method. This documentation is fantastic, but it doesn‚Äôt include the tests_regex argument [‚Ä¶]",
  "author": "Sam Edwards",
  "published": "Wed, 15 Jan 2025 14:49:13 +0000",
  "source": "https://handstandsam.com/feed/",
  "categories": [
    "Updates"
  ],
  "byline": "Sam Edwards Published January 15, 2025",
  "length": 5339,
  "excerpt": "There is documentation on the Android Developer website sharing tips to run Android UI tests via the command-line which I‚Äôve found super useful. It provides examples on how to run specific tests (instead of running them all) including running by package, class or method. This documentation is fantastic, but it doesn‚Äôt include the tests_regex argument that is also available in the AndroidJUnitRunner.",
  "siteName": "",
  "favicon": "",
  "text": "There is documentation on the Android Developer website sharing tips to run Android UI tests via the command-line which I‚Äôve found super useful. It provides examples on how to run specific tests (instead of running them all) including running by package, class or method. This documentation is fantastic, but it doesn‚Äôt include the tests_regex argument that is also available in the AndroidJUnitRunner. I‚Äôve recently I‚Äôve been writing a lot of Android UI Tests using TestParameterInjector to support running the same test, but with run with different parameters. I‚Äôve used the support for enum and Boolean values the most, but it also supports String, Int and others. This has been great, but it has also come with challenges in regards to how to run specific tests. Example Test Here is an example login test you might find in the src/androidTest directory which would run as an on-device Android instrumentation test. It uses a enum TestParameter of our custom enum TestAccount {SAM, HANDSTANDSAM }. It will run our single tests testLogin() and testSomethingElse() 2 times each (once for each enum value of SAM, HANDSTANDSAM) without us having to write out each one of those method explicitly. üéâ package com.handstandsam import com.google.testing.junit.testparameterinjector.TestParameter import com.google.testing.junit.testparameterinjector.TestParameterInjector import org.junit.Test import org.junit.runner.RunWith @RunWith(TestParameterInjector::class) class Test( @TestParameter private val testAccount: TestAccount ) { enum class TestAccount { SAM, HANDSTANDSAM } @Test fun testLogin() { println(\"Login with Test Account $testAccount\") } @Test fun testSomethingElse() { println(\"Something Else with Test Account $testAccount\") } } This exact code results in the following 4 executions: com.handstandsam.Test#testLogin[SAM] com.handstandsam.Test#testLogin[HANDSTANDSAM] com.handstandsam.Test#testSomethingElse[SAM] com.handstandsam.Test#testSomethingElse[HANDSTANDSAM] Challenge: Computing a fully qualified method name for tests using TestParameterInjector Normally the fully qualified method name would be com.handstandsam.Test#testLogin which you could send as an instrumentation argument to run that specific test. However in this case of a test leveraging TestParameterInjector‚Äòs custom runner, it computes the unique test names at runtime via reflection. If we try to explicitly run com.handstandsam.Test#testLogin, it‚Äôll say ‚Äúno tests found‚Äù. We can use the computed name of com.handstandsam.Test#testLogin[SAM] and the test will be found. In this simple example it‚Äôs hard to see the challenge, but when you mix multiple @TestParameters in a file and change their ordering, the computed fully qualified test names will change and could be long like test[SAM,true,BLUE] or something. This means that the only reliable way to run the tests in this class without knowing the full name is by the class itself com.handstandsam.Test but that means 4 tests will run (2*2) which is not what we are looking to do. ./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.handstandsam.Test TestParameterInjector GitHub issue Static computation of fully qualified test names is a challenge using TestParameterInjector, but to be fair the library wasn‚Äôt made specifically for Android Tests and this issue is more annoying in Android Instrumentation Tests that take longer to execute. TestParameterInjector is widely used for writing tests with Paparazzi to run the same test against multiple device and screen size permutations, but these tests run so fast that it isn‚Äôt a real problem to run them all at once. Leveraging tests_regex üéâ I‚Äôd like to be able to run all permutations of com.handstandsam.Test#testLogin which are: com.handstandsam.Test#testLogin[SAM] com.handstandsam.Test#testLogin[HANDSTANDSAM] I could list out every method specified by the class instrumentation argument: ./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.handstandsam.Test#testLogin[SAM],com.handstandsam.Test#testLogin[HANDSTANDSAM] SOLUTION ‚Äì Use tests_regex Using the tests_regex argument allows us to use syntax like ‚Ä¶testLogin\\[.+]$ which will match all test permutations for the testLogin method üòÄ. Full example command using test_regex ./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.tests_regex=\"com.handstandsam.Test#testLogin\\[.+]$\" The above command is pretty gross to write, but we‚Äôve been able to generate it out via a Custom IDE Plugin (not generally applicable, so not open sourced) it doesn‚Äôt matter how verbose it is, as long as it works! Conclusion This tests_regex instrumentation argument has been there for years, but I never knew about it, it hasn‚Äôt been blogged about and it‚Äôs not in the current Android Developers command-line documentation. Regexes are not my favorite thing to write, but are made easier to figure out using regex101.com. I can foresee other uses of the regex command outside of Parameterized Tests, especially when combined with custom IDE tooling. I hope you now know about this tests_regex argument and let me know how you‚Äôre using it on Bluesky!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n\t\t\u003cmain id=\"content\" role=\"main\"\u003e\n\n\t\t\t\n\t\t\t\t\n\u003carticle id=\"post-2159\" itemscope=\"itemscope\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"blogPost\"\u003e\n\t\t\n\t\n\t\u003cdiv itemprop=\"mainContentOfPage\"\u003e\n\t\t\n\u003cp\u003eThere is documentation on the \u003ca href=\"https://developer.android.com/studio/test/command-line\"\u003eAndroid Developer website sharing tips to run Android UI tests via the command-line\u003c/a\u003e which I‚Äôve found super useful. It provides examples on how to run specific tests (instead of running them all) including running by package, class or method. This documentation is fantastic, \u003cstrong\u003ebut it doesn‚Äôt include the \u003ca href=\"https://github.com/android/android-test/blob/8091cbdb5a3fa08b35f220a9b75cf35f9599aaf5/runner/android_junit_runner/java/androidx/test/runner/AndroidJUnitRunner.java#L138-L139\"\u003e\u003ccode\u003etests_regex\u003c/code\u003e argument\u003c/a\u003e\u003c/strong\u003e that is also available in the AndroidJUnitRunner.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM.png\"\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"983\" src=\"https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-1024x983.png\" alt=\"\" srcset=\"https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-1024x983.png 1024w, https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-300x288.png 300w, https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-768x737.png 768w, https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-1536x1474.png 1536w, https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM-700x672.png 700w, https://handstandsam.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.43.34‚ÄØAM.png 1788w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI‚Äôve recently I‚Äôve been writing a lot of Android UI Tests using \u003ca href=\"https://github.com/google/TestParameterInjector\"\u003eTestParameterInjector\u003c/a\u003e to support running the same test, but with run with different parameters. I‚Äôve used the support for \u003ccode\u003eenum\u003c/code\u003e and \u003ccode\u003eBoolean\u003c/code\u003e values the most, but it also supports \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eInt\u003c/code\u003e and others. This has been great, but it has also come with challenges in regards to how to run specific tests.\u003c/p\u003e\n\n\n\n\u003ch2\u003eExample Test\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere is an example login test you might find in the \u003ccode\u003esrc/androidTest\u003c/code\u003e directory which would run as an on-device Android instrumentation test.  It uses a \u003ccode\u003eenum\u003c/code\u003e TestParameter of our custom \u003ccode\u003eenum TestAccount\u003c/code\u003e {SAM, HANDSTANDSAM }.  It will run our single tests \u003ccode\u003etestLogin()\u003c/code\u003e and \u003ccode\u003etestSomethingElse()\u003c/code\u003e 2 times each (once for each enum value of SAM, HANDSTANDSAM) without us having to write out each one of those method explicitly. üéâ\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003epackage com.handstandsam\n\nimport com.google.testing.junit.testparameterinjector.TestParameter\nimport com.google.testing.junit.testparameterinjector.TestParameterInjector\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\n@RunWith(TestParameterInjector::class)\nclass Test(\n    @TestParameter private val testAccount: TestAccount\n) {\n  enum class TestAccount { SAM, HANDSTANDSAM }  \n\n  @Test\n  fun testLogin() {\n    println(\u0026#34;Login with Test Account $testAccount\u0026#34;)\n  }\n\n  @Test\n  fun testSomethingElse() {\n    println(\u0026#34;Something Else with Test Account $testAccount\u0026#34;)\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis exact code results in the following 4 executions:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ecom.handstandsam.Test#testLogin[SAM]\u003c/li\u003e\n\n\n\n\u003cli\u003ecom.handstandsam.Test#testLogin[HANDSTANDSAM]\u003c/li\u003e\n\n\n\n\u003cli\u003ecom.handstandsam.Test#testSomethingElse[SAM]\u003c/li\u003e\n\n\n\n\u003cli\u003ecom.handstandsam.Test#testSomethingElse[HANDSTANDSAM]\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eChallenge: Computing a fully qualified method name for tests using TestParameterInjector\u003c/h2\u003e\n\n\n\n\u003cp\u003eNormally the fully qualified method name would be \u003ccode\u003ecom.handstandsam.Test#testLogin\u003c/code\u003e which you could send as an instrumentation argument to run that specific test.  However in this case of a test leveraging \u003ccode\u003eTestParameterInjector\u003c/code\u003e‚Äòs custom runner, it computes the unique test names at runtime via reflection.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we try to explicitly run \u003ccode\u003ecom.handstandsam.Test#testLogin\u003c/code\u003e, it‚Äôll say ‚Äúno tests found‚Äù.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can use the computed name of \u003ccode\u003ecom.handstandsam.Test#testLogin[SAM]\u003c/code\u003e and the test will be found.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this simple example it‚Äôs hard to see the challenge, but when you mix multiple \u003ccode\u003e@TestParameter\u003c/code\u003es in a file and change their ordering, the computed fully qualified test names will change and could be long like \u003ccode\u003etest[SAM,true,BLUE]\u003c/code\u003e or something.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis means that the only reliable way to run the tests in this class without knowing the full name is by the class itself \u003ccode\u003ecom.handstandsam.Test\u003c/code\u003e but that means 4 tests will run (2*2) which is not what we are looking to do.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.handstandsam.Test\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003ch4\u003e\u003ca href=\"https://github.com/google/TestParameterInjector/issues/27\"\u003eTestParameterInjector GitHub issue\u003c/a\u003e\u003c/h4\u003e\n\n\n\n\u003cp\u003eStatic computation of fully qualified test names is a challenge using TestParameterInjector, but to be fair the library wasn‚Äôt made specifically for Android Tests and this issue is more annoying in Android Instrumentation Tests that take longer to execute. TestParameterInjector is widely used for writing tests with \u003ca href=\"https://github.com/cashapp/paparazzi\"\u003ePaparazzi\u003c/a\u003e to run the same test against multiple device and screen size permutations, but these tests run so fast that it isn‚Äôt a real problem to run them all at once.\u003c/p\u003e\n\n\n\n\u003ch2\u003eLeveraging tests_regex üéâ\u003c/h2\u003e\n\n\n\n\u003ch4\u003eI‚Äôd like to be able to run all permutations of \u003ccode\u003ecom.handstandsam.Test#testLogin\u003c/code\u003e which are:\u003c/h4\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ecom.handstandsam.Test#testLogin[SAM]\u003c/li\u003e\n\n\n\n\u003cli\u003ecom.handstandsam.Test#testLogin[HANDSTANDSAM]\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4\u003eI could list out every method specified by the \u003ccode\u003eclass\u003c/code\u003e instrumentation argument:\u003c/h4\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.handstandsam.Test#testLogin[SAM],com.handstandsam.Test#testLogin[HANDSTANDSAM]\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eSOLUTION ‚Äì Use tests_regex\u003c/h2\u003e\n\n\n\n\u003cp\u003eUsing the \u003ccode\u003etests_regex\u003c/code\u003e argument allows us to use syntax like ‚Ä¶\u003ccode\u003etestLogin\\[.+]$\u003c/code\u003e which will match all test permutations for the \u003ccode\u003etestLogin\u003c/code\u003e method üòÄ.\u003c/p\u003e\n\n\n\n\u003cp\u003eFull example command using \u003ccode\u003etest_regex\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e./gradlew :app:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.tests_regex=\u0026#34;com.handstandsam.Test#testLogin\\[.+]$\u0026#34;\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThe above command is pretty gross to write, but we‚Äôve been able to generate it out via a \u003ca href=\"https://plugins.jetbrains.com/docs/intellij/developing-plugins.html\"\u003eCustom IDE Plugin\u003c/a\u003e (not generally applicable, so not open sourced) it doesn‚Äôt matter how verbose it is, as long as it works!\u003c/p\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis \u003ccode\u003etests_regex\u003c/code\u003e instrumentation argument has been there for years, but I never knew about it, it hasn‚Äôt been blogged about and it‚Äôs not in the \u003ca href=\"https://developer.android.com/studio/test/command-line\"\u003ecurrent Android Developers command-line documentation\u003c/a\u003e. Regexes are not my favorite thing to write, but are made easier to figure out using \u003ca href=\"https://regex101.com/\"\u003eregex101.com\u003c/a\u003e. I can foresee other uses of the regex command outside of Parameterized Tests, especially when combined with custom IDE tooling.\u003c/p\u003e\n\n\n\n\u003cp\u003eI hope you now know about this \u003ccode\u003etests_regex\u003c/code\u003e argument and let me know how you‚Äôre using it on \u003ca href=\"https://bsky.app/profile/handstandsam.bsky.social\"\u003eBluesky\u003c/a\u003e!\u003c/p\u003e\n\n\t\t\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\u003c/article\u003e\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\u003c/main\u003e\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
