{
  "id": "705cc92c-286c-4896-9d61-830aff9e93ee",
  "title": "NetworkStateObserver",
  "link": "https://android-arsenal.com/details/1/8485",
  "description": "An Android library that helps you check the state of your network, if it is either available, lost, unavailable and also check the reach-ability of your network when your server is either down or your ISP is connected but no data subscription.",
  "author": "",
  "published": "Wed, 13 Mar 2024 09:16:15 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 10181,
  "excerpt": "Networking | NetworkStateObserver by Babajide Awodire Samuel (RhymezxCode)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "NetworkStateObserver Android Library NetworkStateObserver Android Library A library that helps you check the state of your network, if it is either available, lost, unavailable and also check the reach-ability of your network when your server is either down or your ISP is connected but no data subscription. Demo: 1. Adding NetworkStateObserver to your project Include jitpack in your root settings.gradle file. pluginManagement { repositories { ... maven { url 'https://jitpack.io' } } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { ... maven { url 'https://jitpack.io' } } } And add it's dependency to your app level build.gradle file: dependencies { implementation 'com.github.RhymezxCode:NetworkStateObserver:1.1.3' //Livedata implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0' implementation 'androidx.lifecycle:lifecycle-livedata-core-ktx:2.7.0' implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0' implementation 'android.arch.lifecycle:extensions:1.1.1' } Sync your project, and ???? boom ???? you have added NetworkStateObserver successfully. ❗ 2. Usage First initialize the builder class: val network = NetworkStateObserver.Builder() .activity(activity = this@NetworkStateObserverExample) .build() If you just want to check for connectivity, before performing a task or job(): if(CheckConnectivity.isNetworkAvailable(requireContext())){ showToast( this@NetworkStateObserverExample, \"Network restored\" ) } Use the live-data method to determine your network state, and replace the code in the lifecycleScope.launchWhenStarted { ....your code here } to do what you want: network.callNetworkConnection().observe(this) { isConnected -\u003e lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasServerConnected( context = this@NetworkStateObserverExample, serverUrl = \"https://www.your-server-url.com\" ) -\u003e lifecycleScope.launch{ showToast( \"Server url works\" ) } Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u003e lifecycleScope.launch{ showToast( \"Network restored\" ) } else -\u003e lifecycleScope.launch{ showToast( \"Network is lost or issues with server\" ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \"No Network connection\" ) } } } } } Use the flow method to determine your network state, and also retry when an exception is thrown: lifecycleScope.launch { network.callNetworkConnectionFlow() .observe() .collect { when (it) { NetworkObserver.Status.Available -\u003e { lifecycleScope.launch { when { Reachability.hasServerConnectedFlow( context = this@NetworkStateObserverExample, serverUrl = \"https://www.github.com\" ).retryWhen { cause, attempt -\u003e if (cause is IOException \u0026\u0026 attempt \u003c 3) { delay(2000) return@retryWhen true } else { return@retryWhen false } }.buffer().first() -\u003e lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \"Server url works\" ) } Reachability.hasInternetConnectedFlow( context = this@NetworkStateObserverExample ).retryWhen { cause, attempt -\u003e if (cause is IOException \u0026\u0026 attempt \u003c 3) { delay(2000) return@retryWhen true } else { return@retryWhen false } }.buffer().first() -\u003e lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \"Network restored\" ) } else -\u003e lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \"Network is lost or issues with server\" ) } } } } NetworkObserver.Status.Unavailable -\u003e { showToast( \"Network is unavailable!\" ) } NetworkObserver.Status.Losing -\u003e { showToast( \"You are losing your network!\" ) } NetworkObserver.Status.Lost -\u003e { showToast( \"Network is lost!\" ) } } } } You can check if your internet connection is stable only, if you don't have a server url: network.callNetworkConnection().observe(this) { isConnected -\u003e lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u003e lifecycleScope.launchW{ showToast( \"Network restored\" ) } else -\u003e lifecycleScope.launch{ showToast( \"Network is lost or issues with server\" ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \"No Network connection\" ) } } } } } 3. You can also inject NetworkStateObserver, and use it everywhere in your app with Hilt ???? : Create an object for the NetworkStateModule in your di package: @Module @InstallIn(ActivityComponent::class) object NetworkStateModule { @Provides fun provideNetworkStateObserver( activity: Activity ): NetworkStateObserver { return NetworkStateObserver.Builder() .activity(activity = activity) .build() } } Declare the variable in your class either a fragment or activity, it works in both: @AndroidEntryPoint class myFragment : Fragment(){ @Inject lateinit var network: NetworkStateObserver private fun callNetworkConnection() { network.callNetworkConnection().observe(this) { isConnected -\u003e lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u003e lifecycleScope.launch{ showToast( \"Network restored\" ) } else -\u003e lifecycleScope.launch{ showToast( \"Network is lost or issues with server\" ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \"No Network connection\" ) } } } } } } override fun onResume() { super.onResume() callNetworkConnection() } } Add the method in onResume() of your fragment or activity to have a great experience: override fun onResume() { super.onResume() callNetworkConnection() } ???? Please, feel free to give me a star ????, I also love sparkles ✨ ☺️",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cdiv dir=\"auto\"\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eNetworkStateObserver Android Library\u003c/h2\u003e\u003c/p\u003e \u003c/div\u003e  \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eNetworkStateObserver Android Library\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eA library that helps you check the state of your network, if it is either available, lost, unavailable and also check the reach-ability of your network when your server is either down or your ISP is connected but no data subscription.\u003c/p\u003e \u003cp dir=\"auto\"\u003eDemo:\u003c/p\u003e  \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003e1. Adding NetworkStateObserver to your project\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eInclude jitpack in your root \u003ccode\u003esettings.gradle\u003c/code\u003e file.\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"pluginManagement { repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } }\"\u003e\u003cpre\u003e\u003cspan\u003epluginManagement\u003c/span\u003e {\n    repositories {\n        \u003cspan\u003e..\u003c/span\u003e.\n        maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e }\n    }\n}\n\n\u003cspan\u003edependencyResolutionManagement\u003c/span\u003e {\n    repositoriesMode\u003cspan\u003e.\u003c/span\u003eset(\u003cspan\u003eRepositoriesMode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFAIL_ON_PROJECT_REPOS\u003c/span\u003e)\n    repositories {\n        \u003cspan\u003e..\u003c/span\u003e.\n        maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAnd add it\u0026#39;s dependency to your app level \u003ccode\u003ebuild.gradle\u003c/code\u003e file:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation \u0026#39;com.github.RhymezxCode:NetworkStateObserver:1.1.3\u0026#39; //Livedata implementation \u0026#39;androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0\u0026#39; implementation \u0026#39;androidx.lifecycle:lifecycle-livedata-core-ktx:2.7.0\u0026#39; implementation \u0026#39;androidx.lifecycle:lifecycle-runtime-ktx:2.7.0\u0026#39; implementation \u0026#39;android.arch.lifecycle:extensions:1.1.1\u0026#39; }\"\u003e\u003cpre\u003e\u003cspan\u003edependencies\u003c/span\u003e {\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ecom.github.RhymezxCode:NetworkStateObserver:1.1.3\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003eLivedata\u003c/span\u003e\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003eandroidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003eandroidx.lifecycle:lifecycle-livedata-core-ktx:2.7.0\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003eandroidx.lifecycle:lifecycle-runtime-ktx:2.7.0\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003eandroid.arch.lifecycle:extensions:1.1.1\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eSync your project, and ???? boom ???? you have added NetworkStateObserver successfully. ❗\u003c/h4\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003e2. Usage\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eFirst initialize the builder class:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"val network = NetworkStateObserver.Builder() .activity(activity = this@NetworkStateObserverExample) .build()\"\u003e\u003cpre\u003e        \u003cspan\u003eval\u003c/span\u003e network \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eNetworkStateObserver\u003c/span\u003e.\u003cspan\u003eBuilder\u003c/span\u003e()\n            .activity(activity \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample)\n            .build()\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eIf you just want to check for connectivity, before performing a task or job():\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"if(CheckConnectivity.isNetworkAvailable(requireContext())){ showToast( this@NetworkStateObserverExample, \u0026#34;Network restored\u0026#34; ) }\"\u003e\u003cpre\u003e        \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003eCheckConnectivity\u003c/span\u003e.isNetworkAvailable(requireContext())){\n                         showToast(\n                                \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork restored\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n        }\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eUse the live-data method to determine your network state, and replace the code in the lifecycleScope.launchWhenStarted { ....your code here } to do what you want:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"network.callNetworkConnection().observe(this) { isConnected -\u0026gt; lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasServerConnected( context = this@NetworkStateObserverExample, serverUrl = \u0026#34;https://www.your-server-url.com\u0026#34; ) -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Server url works\u0026#34; ) } Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Network restored\u0026#34; ) } else -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Network is lost or issues with server\u0026#34; ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \u0026#34;No Network connection\u0026#34; ) } } } } }\"\u003e\u003cpre\u003e        network.callNetworkConnection().observe(\u003cspan\u003ethis\u003c/span\u003e) { isConnected \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n            lifecycleScope.launch(\u003cspan\u003eDispatchers\u003c/span\u003e.\u003cspan\u003eIO\u003c/span\u003e) {\n                \u003cspan\u003eif\u003c/span\u003e (isConnected) {\n                    \u003cspan\u003ewhen\u003c/span\u003e {\n                        \u003cspan\u003eReachability\u003c/span\u003e.hasServerConnected(\n                            context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                            serverUrl \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://www.your-server-url.com\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        ) \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eServer url works\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eReachability\u003c/span\u003e.hasInternetConnected(\n                            context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample\n                        ) \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork restored\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is lost or issues with server\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n                    }\n                } \u003cspan\u003eelse\u003c/span\u003e {\n                    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003echeck for lost connection\u003c/span\u003e\n                    lifecycleScope.launch{\n                        showToast(\n                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNo Network connection\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        )\n                    }\n                }\n\n            }\n\n        }\n    }\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eUse the flow method to determine your network state, and also retry when an exception is thrown:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"lifecycleScope.launch { network.callNetworkConnectionFlow() .observe() .collect { when (it) { NetworkObserver.Status.Available -\u0026gt; { lifecycleScope.launch { when { Reachability.hasServerConnectedFlow( context = this@NetworkStateObserverExample, serverUrl = \u0026#34;https://www.github.com\u0026#34; ).retryWhen { cause, attempt -\u0026gt; if (cause is IOException \u0026amp;\u0026amp; attempt \u0026lt; 3) { delay(2000) return@retryWhen true } else { return@retryWhen false } }.buffer().first() -\u0026gt; lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \u0026#34;Server url works\u0026#34; ) } Reachability.hasInternetConnectedFlow( context = this@NetworkStateObserverExample ).retryWhen { cause, attempt -\u0026gt; if (cause is IOException \u0026amp;\u0026amp; attempt \u0026lt; 3) { delay(2000) return@retryWhen true } else { return@retryWhen false } }.buffer().first() -\u0026gt; lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \u0026#34;Network restored\u0026#34; ) } else -\u0026gt; lifecycleScope.launch { showToast( this@NetworkStateObserverExample, \u0026#34;Network is lost or issues with server\u0026#34; ) } } } } NetworkObserver.Status.Unavailable -\u0026gt; { showToast( \u0026#34;Network is unavailable!\u0026#34; ) } NetworkObserver.Status.Losing -\u0026gt; { showToast( \u0026#34;You are losing your network!\u0026#34; ) } NetworkObserver.Status.Lost -\u0026gt; { showToast( \u0026#34;Network is lost!\u0026#34; ) } } } }\"\u003e\u003cpre\u003e        lifecycleScope.launch {\n            network.callNetworkConnectionFlow()\n                .observe()\n                .collect {\n                    \u003cspan\u003ewhen\u003c/span\u003e (it) {\n                        \u003cspan\u003eNetworkObserver\u003c/span\u003e.\u003cspan\u003eStatus\u003c/span\u003e.\u003cspan\u003eAvailable\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n                            lifecycleScope.launch {\n                                \u003cspan\u003ewhen\u003c/span\u003e {\n                                    \u003cspan\u003eReachability\u003c/span\u003e.hasServerConnectedFlow(\n                                        context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                                        serverUrl \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://www.github.com\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                                    ).retryWhen { cause, attempt \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n                                        \u003cspan\u003eif\u003c/span\u003e (cause \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e attempt \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e) {\n                                            delay(\u003cspan\u003e2000\u003c/span\u003e)\n                                            \u003cspan\u003ereturn\u003c/span\u003e@retryWhen \u003cspan\u003etrue\u003c/span\u003e\n                                        } \u003cspan\u003eelse\u003c/span\u003e {\n                                            \u003cspan\u003ereturn\u003c/span\u003e@retryWhen \u003cspan\u003efalse\u003c/span\u003e\n                                        }\n                                    }.buffer().first() \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch {\n                                        showToast(\n                                            \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eServer url works\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                                        )\n                                    }\n\n                                    \u003cspan\u003eReachability\u003c/span\u003e.hasInternetConnectedFlow(\n                                        context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample\n                                    ).retryWhen { cause, attempt \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n                                        \u003cspan\u003eif\u003c/span\u003e (cause \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eIOException\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e attempt \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e) {\n                                            delay(\u003cspan\u003e2000\u003c/span\u003e)\n                                            \u003cspan\u003ereturn\u003c/span\u003e@retryWhen \u003cspan\u003etrue\u003c/span\u003e\n                                        } \u003cspan\u003eelse\u003c/span\u003e {\n                                            \u003cspan\u003ereturn\u003c/span\u003e@retryWhen \u003cspan\u003efalse\u003c/span\u003e\n                                        }\n                                    }.buffer().first() \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch {\n                                        showToast(\n                                            \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork restored\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                                        )\n                                    }\n\n                                    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch {\n                                        showToast(\n                                            \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample,\n                                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is lost or issues with server\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                                        )\n                                    }\n                                }\n                            }\n                        }\n\n                        \u003cspan\u003eNetworkObserver\u003c/span\u003e.\u003cspan\u003eStatus\u003c/span\u003e.\u003cspan\u003eUnavailable\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is unavailable!\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eNetworkObserver\u003c/span\u003e.\u003cspan\u003eStatus\u003c/span\u003e.\u003cspan\u003eLosing\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eYou are losing your network!\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eNetworkObserver\u003c/span\u003e.\u003cspan\u003eStatus\u003c/span\u003e.\u003cspan\u003eLost\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is lost!\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n                    }\n                }\n        }\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eYou can check if your internet connection is stable only, if you don\u0026#39;t have a server url:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"network.callNetworkConnection().observe(this) { isConnected -\u0026gt; lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u0026gt; lifecycleScope.launchW{ showToast( \u0026#34;Network restored\u0026#34; ) } else -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Network is lost or issues with server\u0026#34; ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \u0026#34;No Network connection\u0026#34; ) } } } } }\"\u003e\u003cpre\u003e        network.callNetworkConnection().observe(\u003cspan\u003ethis\u003c/span\u003e) { isConnected \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n            lifecycleScope.launch(\u003cspan\u003eDispatchers\u003c/span\u003e.\u003cspan\u003eIO\u003c/span\u003e) {\n                \u003cspan\u003eif\u003c/span\u003e (isConnected) {\n                    \u003cspan\u003ewhen\u003c/span\u003e {\n\n                        \u003cspan\u003eReachability\u003c/span\u003e.hasInternetConnected(\n                            context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample\n                        ) \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launchW{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork restored\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is lost or issues with server\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n                    }\n                } \u003cspan\u003eelse\u003c/span\u003e {\n                    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003echeck for lost connection\u003c/span\u003e\n                    lifecycleScope.launch{\n                        showToast(\n                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNo Network connection\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        )\n                    }\n                }\n\n            }\n\n        }\n    }\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003e3. You can also inject NetworkStateObserver, and use it everywhere in your app with Hilt ???? :\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eCreate an object for the NetworkStateModule in your di package:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"@Module @InstallIn(ActivityComponent::class) object NetworkStateModule { @Provides fun provideNetworkStateObserver( activity: Activity ): NetworkStateObserver { return NetworkStateObserver.Builder() .activity(activity = activity) .build() } }\"\u003e\u003cpre\u003e@Module\n@InstallIn(\u003cspan\u003eActivityComponent\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e)\n\u003cspan\u003eobject\u003c/span\u003e NetworkStateModule {\n    @Provides\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eprovideNetworkStateObserver\u003c/span\u003e(\n        \u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eActivity\u003c/span\u003e\n    ): \u003cspan\u003eNetworkStateObserver\u003c/span\u003e {\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eNetworkStateObserver\u003c/span\u003e.\u003cspan\u003eBuilder\u003c/span\u003e()\n            .activity(activity \u003cspan\u003e=\u003c/span\u003e activity)\n            .build()\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eDeclare the variable in your class either a fragment or activity, it works in both:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"@AndroidEntryPoint class myFragment : Fragment(){ @Inject lateinit var network: NetworkStateObserver private fun callNetworkConnection() { network.callNetworkConnection().observe(this) { isConnected -\u0026gt; lifecycleScope.launch(Dispatchers.IO) { if (isConnected) { when { Reachability.hasInternetConnected( context = this@NetworkStateObserverExample ) -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Network restored\u0026#34; ) } else -\u0026gt; lifecycleScope.launch{ showToast( \u0026#34;Network is lost or issues with server\u0026#34; ) } } } else { //check for lost connection lifecycleScope.launch{ showToast( \u0026#34;No Network connection\u0026#34; ) } } } } } } override fun onResume() { super.onResume() callNetworkConnection() } }\"\u003e\u003cpre\u003e@AndroidEntryPoint\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003emyFragment\u003c/span\u003e : \u003cspan\u003eFragment\u003c/span\u003e(){\n     @Inject\n     \u003cspan\u003elateinit\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e network\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eNetworkStateObserver\u003c/span\u003e\n\n     \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ecallNetworkConnection\u003c/span\u003e() {\n        network.callNetworkConnection().observe(\u003cspan\u003ethis\u003c/span\u003e) { isConnected \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n            lifecycleScope.launch(\u003cspan\u003eDispatchers\u003c/span\u003e.\u003cspan\u003eIO\u003c/span\u003e) {\n                \u003cspan\u003eif\u003c/span\u003e (isConnected) {\n                    \u003cspan\u003ewhen\u003c/span\u003e {\n                        \u003cspan\u003eReachability\u003c/span\u003e.hasInternetConnected(\n                            context \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e@NetworkStateObserverExample\n                        ) \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork restored\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n\n                        \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e lifecycleScope.launch{\n                            showToast(\n                                \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNetwork is lost or issues with server\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                            )\n                        }\n                    }\n                } \u003cspan\u003eelse\u003c/span\u003e {\n                    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003echeck for lost connection\u003c/span\u003e\n                    lifecycleScope.launch{\n                        showToast(\n                            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eNo Network connection\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n                        )\n                    }\n                }\n\n            }\n\n        }\n    }\n    }\n\n \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonResume\u003c/span\u003e() {\n        \u003cspan\u003esuper\u003c/span\u003e.onResume()\n        callNetworkConnection()\n    }\n    \n }\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAdd the method in onResume() of your fragment or activity to have a great experience:\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"override fun onResume() { super.onResume() callNetworkConnection() }\"\u003e\u003cpre\u003e    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonResume\u003c/span\u003e() {\n        \u003cspan\u003esuper\u003c/span\u003e.onResume()\n        callNetworkConnection()\n    }\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e???? Please, feel free to give me a star ????, I also love sparkles ✨ \u003cg-emoji alias=\"relaxed\"\u003e☺️\u003c/g-emoji\u003e\u003c/p\u003e  \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
