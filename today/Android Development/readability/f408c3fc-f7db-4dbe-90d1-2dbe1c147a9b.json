{
  "id": "f408c3fc-f7db-4dbe-90d1-2dbe1c147a9b",
  "title": "W/H/W In Android #1: Yes, Activity With Constructor Arguments",
  "link": "https://proandroiddev.com/w-h-w-in-android-1-yes-activity-with-constructor-arguments-73ccb7229578?source=rss----c72404660798---4",
  "description": "",
  "author": "Agam Koradiya",
  "published": "Wed, 23 Apr 2025 15:14:57 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-internals",
    "android-app-development",
    "androiddev",
    "android",
    "kotlin"
  ],
  "byline": "Agam Koradiya",
  "length": 4107,
  "excerpt": "All the time, we create a simple Activity class with an empty constructor, which normally extends AppCompatActivity. AppComponentFactory is simply a factory pattern üè≠ that is used to provide a‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Welcome to the WHY/HOW/WHAT In Android Seriesüì±Photo by Saif71.com on UnsplashAll the time, we create a simple Activity class with an empty constructor, which normally extends AppCompatActivity.Something like:class MainActivity : AppCompatActivity() { ...}ü§î But have you ever tried to add an argument in the constructor to see what happens? Let‚Äôs seeclass MainActivity(val favMovie: String) : AppCompatActivity() { ...}/** * Ohhh Shit, We got an exception and app crashed * * java.lang.RuntimeException: * Unable to instantiate activity ComponentInfo{com.example.myapplication/com.example.myapplication.MainActivity}: * java.lang.InstantiationException: java.lang.Class\u003ccom.example.myapplication.MainActivity\u003e has no zero argument constructor */ /** Below we will use this Activity */üö® WHY do we get java.lang.InstantiationException?Because the Android system üì± itself is handling the Activity creation process behind the scenes.That‚Äôs how you get all those lifecycle callbacks(onCreate, onStart, onResume, etc‚Ä¶) and other required stuff.So if we add arguments to the constructor, then the Android system won‚Äôt know what to pass as its value and BOOM üí• !!!‚ú® That‚Äôs where the magic of AppComponentFactory kicks inAppComponentFactory is simply a factory pattern üè≠ that is used to provide a custom Application, Activity, ClassLoader, Service, Receiverand Provider .üìå Basic flow to create an Activity with constructor arguments using the AppComponentFactory ABCActivity | | // startActivity(Intent(context, XYZActivity::class.java)) | // {Add Bundle to pass data} | V AppComponentFactory | | // {Use above Bundle to get data and | // pass it to constructor argument if required} | VCustom XYZActivity with constructor argumentsüßë‚Äçüíª Finally, let‚Äôs create our custom AppComponentFactory to launch the above crashed activity MainActivity(val favMovie: String):class CustomAppComponentFactory : AppComponentFactory() { override fun instantiateActivityCompat( cl: ClassLoader, className: String, intent: Intent? ): Activity { val activityClass = cl.loadClass(className) // To get the class of the activity return when (activityClass) { MainActivity::class.java -\u003e MainActivity(\"John Wick\") OtherActivity::class.java -\u003e { // Getting data from intent bundle and passing directly to constructor val favSeries = intent?.getStringExtra(\"favSeries\") ?: \"Nothing\" OtherActivity(favSeries) } else -\u003e super.instantiateActivityCompat(cl, className, intent) } } /** * Other available methods to provide custom components: * * override fun instantiateClassLoader(cl: ClassLoader, aInfo: ApplicationInfo): ClassLoader { ... } * override fun instantiateApplicationCompat(cl: ClassLoader, className: String): Application { ... } * override fun instantiateReceiverCompat(cl: ClassLoader, className: String, intent: Intent?): BroadcastReceiver { ... } * override fun instantiateServiceCompat(cl: ClassLoader, className: String, intent: Intent?): Service { ... ) * override fun instantiateProviderCompat(cl: ClassLoader, className: String): ContentProvider { ... } */}üìù Also, don‚Äôt forget to add the following lines to your AndroidManifest.xml inside the \u003capplication\u003e tag:\u003capplication android:appComponentFactory=\"com.example.myapplication.CustomAppComponentFactory\" tools:replace=\"android:appComponentFactory\" ... \u003e ...\u003c/application\u003e‚úÖ This ensures the system uses your custom factory for component instantiation insted of default one..üéâ Now you can use that favMovie argument directly in your activity. Isn‚Äôt it amazing?Version of android.app.AppComponentFactory that works with androidx libraries. This will only work on API 28+ and does not backport AppComponentFactory functionality.Thank you for reading, and happy coding :)",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*bVk3bodV-Fi_p3NN",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@agamkoradiya?source=post_page---byline--73ccb7229578---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Agam Koradiya\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*-VWm9M0qeUl3xJpd2a5R6A.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--73ccb7229578---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cpre\u003e\u003cspan id=\"c72d\"\u003eWelcome to the WHY/HOW/WHAT In Android Seriesüì±\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@saif71?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSaif71.com\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"30e8\"\u003e\u003cspan\u003eA\u003c/span\u003ell the time, we create a simple \u003ccode\u003eActivity\u003c/code\u003e class with an empty constructor, which normally extends \u003ccode\u003eAppCompatActivity\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"9322\"\u003eSomething like:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9754\"\u003eclass MainActivity : AppCompatActivity() {\u003cbr/\u003e  ...\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4e12\"\u003eü§î But have you ever tried to add an argument in the constructor to see what happens? Let‚Äôs see\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c9a2\"\u003eclass MainActivity(val favMovie: String) : AppCompatActivity() {\u003cbr/\u003e  ...\u003cbr/\u003e}\u003cp\u003e/**\u003cbr/\u003e * Ohhh Shit, We got an exception and app crashed\u003cbr/\u003e *\u003cbr/\u003e * java.lang.RuntimeException:\u003cbr/\u003e * Unable to instantiate activity ComponentInfo{com.example.myapplication/com.example.myapplication.MainActivity}:\u003cbr/\u003e * java.lang.InstantiationException: java.lang.Class\u0026lt;com.example.myapplication.MainActivity\u0026gt; has no zero argument constructor\u003cbr/\u003e */\u003c/p\u003e\u003cp\u003e                /** Below we will use this Activity */\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5cf3\"\u003eüö® WHY do we get \u003ccode\u003ejava.lang.InstantiationException\u003c/code\u003e?\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"f7a2\"\u003eBecause the Android system üì± itself is handling the Activity creation process behind the scenes.\u003c/p\u003e\u003cp id=\"fd5e\"\u003eThat‚Äôs how you get all those lifecycle callbacks(\u003ccode\u003eonCreate\u003c/code\u003e, \u003ccode\u003eonStart\u003c/code\u003e, \u003ccode\u003eonResume\u003c/code\u003e, etc‚Ä¶) and other required stuff.\u003c/p\u003e\u003cp id=\"9fa9\"\u003eSo if we add arguments to the constructor, then the Android system won‚Äôt know what to pass as its value and BOOM üí• !!!\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"3e7f\"\u003e‚ú® \u003cstrong\u003eThat‚Äôs where the magic of \u003c/strong\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/android/app/AppComponentFactory\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eAppComponentFactory\u003c/strong\u003e\u003c/a\u003e\u003c/code\u003e\u003cstrong\u003e kicks in\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"0e43\"\u003e\u003ccode\u003eAppComponentFactory\u003c/code\u003e is simply a factory pattern üè≠ that is used to provide a custom \u003ccode\u003eApplication\u003c/code\u003e, \u003ccode\u003eActivity\u003c/code\u003e, \u003ccode\u003eClassLoader\u003c/code\u003e, \u003ccode\u003eService\u003c/code\u003e, \u003ccode\u003eReceiver\u003c/code\u003eand \u003ccode\u003eProvider\u003c/code\u003e .\u003c/p\u003e\u003cp id=\"5eaf\"\u003eüìå Basic flow to create an Activity with constructor arguments using the AppComponentFactory\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c09c\"\u003e              ABCActivity\u003cbr/\u003e                  |\u003cbr/\u003e                  | // startActivity(Intent(context, XYZActivity::class.java))\u003cbr/\u003e                  | // {Add Bundle to pass data}\u003cbr/\u003e                  |\u003cbr/\u003e                  V\u003cbr/\u003e          AppComponentFactory\u003cbr/\u003e                  |\u003cbr/\u003e                  | // {Use above Bundle to get data and\u003cbr/\u003e                  | // pass it to constructor argument if required}\u003cbr/\u003e                  |\u003cbr/\u003e                  V\u003cbr/\u003eCustom XYZActivity with constructor arguments\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"05d9\"\u003eüßë‚Äçüíª Finally, let‚Äôs create our custom AppComponentFactory to launch the above crashed activity \u003ccode\u003eMainActivity(val favMovie: String)\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1c21\"\u003eclass CustomAppComponentFactory : AppComponentFactory() {\u003cp\u003e    override fun instantiateActivityCompat(\u003cbr/\u003e        cl: ClassLoader,\u003cbr/\u003e        className: String,\u003cbr/\u003e        intent: Intent?\u003cbr/\u003e    ): Activity {\u003cbr/\u003e        val activityClass = cl.loadClass(className) // To get the class of the activity\u003c/p\u003e\u003cp\u003e        return when (activityClass) {\u003cbr/\u003e            MainActivity::class.java -\u0026gt; MainActivity(\u0026#34;John Wick\u0026#34;)\u003c/p\u003e\u003cp\u003e            OtherActivity::class.java -\u0026gt; {\u003cbr/\u003e                // Getting data from intent bundle and passing directly to constructor\u003cbr/\u003e                val favSeries = intent?.getStringExtra(\u0026#34;favSeries\u0026#34;) ?: \u0026#34;Nothing\u0026#34;\u003cbr/\u003e                OtherActivity(favSeries)\u003cbr/\u003e            }\u003c/p\u003e\u003cp\u003e            else -\u0026gt; super.instantiateActivityCompat(cl, className, intent)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    /**\u003cbr/\u003e     * Other available methods to provide custom components:\u003cbr/\u003e     *\u003cbr/\u003e     * override fun instantiateClassLoader(cl: ClassLoader, aInfo: ApplicationInfo): ClassLoader { ... }\u003cbr/\u003e     * override fun instantiateApplicationCompat(cl: ClassLoader, className: String): Application { ... }\u003cbr/\u003e     * override fun instantiateReceiverCompat(cl: ClassLoader, className: String, intent: Intent?): BroadcastReceiver { ... }\u003cbr/\u003e     * override fun instantiateServiceCompat(cl: ClassLoader, className: String, intent: Intent?): Service { ... )\u003cbr/\u003e     * override fun instantiateProviderCompat(cl: ClassLoader, className: String): ContentProvider { ... }\u003cbr/\u003e     */\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6939\"\u003eüìù Also, don‚Äôt forget to add the following lines to your \u003ccode\u003eAndroidManifest.xml \u003c/code\u003einside the \u003ccode\u003e\u0026lt;application\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"da62\"\u003e\u0026lt;application\u003cbr/\u003e        android:appComponentFactory=\u0026#34;com.example.myapplication.CustomAppComponentFactory\u0026#34;\u003cbr/\u003e        tools:replace=\u0026#34;android:appComponentFactory\u0026#34;\u003cbr/\u003e        ... \u0026gt;\u003cbr/\u003e  ...\u003cbr/\u003e\u0026lt;/application\u0026gt;\u003cp\u003e‚úÖ This ensures the system uses your custom factory for component instantiation insted of default one..\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a735\"\u003eüéâ Now you can use that \u003ccode\u003efavMovie\u003c/code\u003e argument directly in your activity. Isn‚Äôt it amazing?\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"9cf8\"\u003eVersion of \u003ccode\u003eandroid.app.AppComponentFactory\u003c/code\u003e that works with androidx libraries. This will only work on \u003ccode\u003eAPI 28+\u003c/code\u003e and \u003ccode\u003edoes not backport \u003c/code\u003eAppComponentFactory functionality.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"20f7\"\u003eThank you for reading, and happy coding :)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-21T21:41:44.72Z",
  "modifiedTime": null
}
