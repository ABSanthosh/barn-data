{
  "id": "20f16963-1a29-40c8-a925-2a77ac3aa97a",
  "title": "Attestation format change for the Android FIDO2 API",
  "link": "http://android-developers.googleblog.com/2024/09/attestation-format-change-for-android-fido2-api.html",
  "description": "",
  "author": "Android Developers",
  "published": "2024-09-24T09:30:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Authentication",
    "credential manager",
    "FIDO2",
    "Identity",
    "passkeys"
  ],
  "byline": "",
  "length": 2543,
  "excerpt": "Developers must update their apps to support the new attestation statement or migrate to the passkey API to ensure compatibility and avoid disruptions",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Christiaan Brand – Group Product Manager In 2019 we introduced a FIDO2 API, adopted by many leading developers, which allows users to generate an attested, device-bound FIDO2 credential on Android devices. Since this launch, Android has generated an attestation statement based on the SafetyNet API. As the underlying SafetyNet API is being deprecated, the FIDO2 API must move to a new attestation scheme based on hardware-backed key attestation. This change will require action from developers using the FIDO2 API to ensure a smooth transition. The FIDO2 API is closely related to, but distinct from, the passkeys API and is invoked by setting the residentKey parameter to discouraged. While our goal is over time to migrate developers to the passkey API, we understand that not all developers who are currently using the FIDO2 API are ready for that move and we continue working on ways to converge these two APIs. We will update the FIDO2 API on Android to produce attestation statements based on hardware-backed key attestation. As of November 2024, developers can opt in to this attestation scheme with controls for individual requests. This should be useful for testing and incremental rollouts, while also allowing developers full control over the timing of the switch over the next 6 months. We will begin returning hardware-backed key attestation by default for all developers in early April 2025. From that point, SafetyNet certificates will no longer be granted. It is important to implement support for the new attestation statement, or move to the passkey API before the cutover date, otherwise your applications might not be able to parse the new attestation statements. For web apps, requesting hardware-backed key attestation requires Chrome 130 or higher to enroll in the WebAuthn attestationFormats origin trial. (Learn more about origin trials.) Once these conditions are met, you can specify the attestationFormats parameter in your navigator.credentials.create call with the value [\"android-key\"]. If you're using the FIDO2 Play Services API in an Android app, switching to hardware-backed key attestation requires Play Services version 22.0.0 on the device. Developers can then specify android-key as the attestation format in the PublicKeyCredentialCreationOptions. You must update your Play Services dependencies to see this new option. We will continue to evolve FIDO APIs. Please continue to provide feedback using fido-dev@fidoalliance.org to connect with the team and developer community.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_U3Am1xHEJCOfvxwHh3sU-TgtPGh7ScMYQH4PhmXyZuLsnGoT1eRhmpU5L8qq07jxICVcHcWJAmR4vjMhN8RMBA_xC3pmtgnGQ0EZk6ce7PmatwSMdYpFt3ZfuPWIf7IAMbD4ZCqJ_t4ciOJeyEUM_ASkQfMhHAuEjKpxjnkYnTK0ugRz42oPyTTv-7s/w1200-h630-p-k-no-nu/social-Blog-post-describing-migration-from-existing-Auth-APIs-to-CredMan-API.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_U3Am1xHEJCOfvxwHh3sU-TgtPGh7ScMYQH4PhmXyZuLsnGoT1eRhmpU5L8qq07jxICVcHcWJAmR4vjMhN8RMBA_xC3pmtgnGQ0EZk6ce7PmatwSMdYpFt3ZfuPWIf7IAMbD4ZCqJ_t4ciOJeyEUM_ASkQfMhHAuEjKpxjnkYnTK0ugRz42oPyTTv-7s/s1600/social-Blog-post-describing-migration-from-existing-Auth-APIs-to-CredMan-API.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Christiaan Brand – Group Product Manager\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFZAwTuEczCixWe-6SN-cKy9wx7VuFML578tLjcX-sI4TfzG0M3Y7ODYo_dOEWZzrizvLDgQit-aRGtvmixausO1waHpb_ERBvwmkX6vMMBdFqJXMTGfW43B2KyVZVigGgRcBESvFnR8UST5aAzRBM1mn7FSz-ICYUoxe44NfsxAinWDB48XOhMN_rVEg/s1600/header-Blog-post-describing-migration-from-existing-Auth-APIs-to-CredMan-API.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFZAwTuEczCixWe-6SN-cKy9wx7VuFML578tLjcX-sI4TfzG0M3Y7ODYo_dOEWZzrizvLDgQit-aRGtvmixausO1waHpb_ERBvwmkX6vMMBdFqJXMTGfW43B2KyVZVigGgRcBESvFnR8UST5aAzRBM1mn7FSz-ICYUoxe44NfsxAinWDB48XOhMN_rVEg/s1600/header-Blog-post-describing-migration-from-existing-Auth-APIs-to-CredMan-API.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://fidoalliance.org/android-now-fido2-certified-accelerating-global-migration-beyond-passwords/\" target=\"_blank\"\u003eIn 2019 we introduced\u003c/a\u003e a FIDO2 API, adopted by many leading developers, which allows users to generate an attested, device-bound \u003ca href=\"https://developers.google.com/identity/fido/android/native-apps\" target=\"_blank\"\u003eFIDO2 credential on Android devices\u003c/a\u003e.\u003c/p\u003e \n\n\u003cp\u003eSince this launch, Android has generated an attestation statement based on the \u003ca href=\"https://www.w3.org/TR/webauthn-3/#sctn-android-safetynet-attestation\" target=\"_blank\"\u003eSafetyNet API\u003c/a\u003e. As the underlying SafetyNet API is being \u003ca href=\"https://developer.android.com/privacy-and-security/safetynet/deprecation-timeline\" target=\"_blank\"\u003edeprecated\u003c/a\u003e, the FIDO2 API must move to a new attestation scheme based on hardware-backed key attestation. This change will require action from developers using the FIDO2 API to ensure a smooth transition.\u003c/p\u003e \n\n\u003cp\u003eThe FIDO2 API is closely related to, but distinct from, the \u003ca href=\"https://developer.android.com/identity/sign-in/credential-manager\" target=\"_blank\"\u003epasskeys API\u003c/a\u003e and is invoked by setting the \u003cspan\u003e\u003ca href=\"https://www.w3.org/TR/webauthn-2/#enumdef-residentkeyrequirement\" target=\"_blank\"\u003eresidentKey\u003c/a\u003e\u003c/span\u003e parameter to \u003cspan\u003e\u003ca href=\"https://www.w3.org/TR/webauthn-2/#dom-residentkeyrequirement-discouraged\" target=\"_blank\"\u003ediscouraged\u003c/a\u003e\u003c/span\u003e. While our goal is over time to \u003ca href=\"https://developer.android.com/identity/sign-in/fido2-migration\" target=\"_blank\"\u003emigrate developers to the passkey API\u003c/a\u003e, we understand that not all developers who are currently using the FIDO2 API are ready for that move and we continue working on ways to converge these two APIs.\u003c/p\u003e \n\n\u003cp\u003eWe will update the FIDO2 API on Android to produce \u003ca href=\"https://www.w3.org/TR/webauthn-3/#sctn-android-key-attestation\" target=\"_blank\"\u003eattestation statements\u003c/a\u003e based on \u003ca href=\"https://developer.android.com/privacy-and-security/security-key-attestation\" target=\"_blank\"\u003ehardware-backed key attestation\u003c/a\u003e. As of November 2024, developers can opt in to this attestation scheme with controls for individual requests. This should be useful for testing and incremental rollouts, while also allowing developers full control over the timing of the switch over the next 6 months.\u003c/p\u003e \n\n\u003cp\u003eWe will begin returning hardware-backed key attestation by default for all developers in early April 2025. From that point, SafetyNet certificates will no longer be granted. It is important to implement support for the new attestation statement, or move to the passkey API before the cutover date, otherwise your applications might not be able to parse the new attestation statements.\u003c/p\u003e \n\n\u003cp\u003eFor web apps, requesting hardware-backed key attestation requires Chrome 130 or higher to \u003ca href=\"https://developer.chrome.com/origintrials/#/view_trial/1428204031829868545\" target=\"_blank\"\u003eenroll in the WebAuthn attestationFormats origin trial\u003c/a\u003e. (\u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\" target=\"_blank\"\u003eLearn more about origin trials\u003c/a\u003e.) Once these conditions are met, you can specify the \u003cspan\u003e\u003ca href=\"https://w3c.github.io/webauthn/#dom-publickeycredentialcreationoptions-attestationformats\" target=\"_blank\"\u003eattestationFormats\u003c/a\u003e\u003c/span\u003e parameter in your \u003cspan\u003e\u003ca href=\"https://webauthn.guide/\" target=\"_blank\"\u003enavigator.credentials.create\u003c/a\u003e\u003c/span\u003e call with the value \u003cspan\u003e[\u0026#34;android-key\u0026#34;]\u003c/span\u003e.\u003c/p\u003e \n\n\u003cp\u003eIf you\u0026#39;re using the \u003ca href=\"https://developers.google.com/identity/fido/android/native-apps\" target=\"_blank\"\u003eFIDO2 Play Services API\u003c/a\u003e in an Android app, switching to hardware-backed key attestation requires Play Services version 22.0.0 on the device. Developers can then specify \u003cspan\u003eandroid-key\u003c/span\u003e as the attestation format in the \u003cspan\u003e\u003ca href=\"https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions\" target=\"_blank\"\u003ePublicKeyCredentialCreationOptions\u003c/a\u003e\u003c/span\u003e. You must update your Play Services dependencies to see this new option.\u003c/p\u003e \n\n\u003cp\u003eWe will continue to evolve FIDO APIs. Please continue to provide feedback using \u003ca href=\"mailto:fido-dev@fidoalliance.org\"\u003efido-dev@fidoalliance.org\u003c/a\u003e to connect with the team and developer community.\u003c/p\u003e  \n\u003c/div\u003e\n\u003chr/\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
