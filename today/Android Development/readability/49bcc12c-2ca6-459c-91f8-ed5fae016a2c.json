{
  "id": "49bcc12c-2ca6-459c-91f8-ed5fae016a2c",
  "title": "Flow testing with Turbine",
  "link": "https://code.cash.app/flow-testing-with-turbine",
  "description": "",
  "author": "",
  "published": "2023-06-21T00:00:00+00:00",
  "source": "https://jakewharton.com/atom.xml",
  "categories": null,
  "byline": "Jake Wharton",
  "length": 1495,
  "excerpt": "Say hello to Turbine 1.0, our library for testing kotlinx.coroutines Flow and more.",
  "siteName": "Cash App Code Blog",
  "favicon": "https://code.cash.app/assets/icon-196.png",
  "text": "Posted by Jake Wharton on June 21, 2023 Say hello to Turbine 1.0, our library for testing kotlinx.coroutines Flow and more. Turbine changes push-based Flows into pull-based suspend functions to simplify testing. mealsFlow.test { assertEquals(Meal.Breakfast, awaitItem()) assertEquals(Meal.Lunch, awaitItem()) assertEquals(Meal.Dinner, awaitItem()) awaitComplete() } Each awaitItem() or awaitComplete() call suspends until the desired event arrives. If a different event occurs or a timeout is reached the functions throw an AssertionError and fail your test. You can also wait for errors, skip items, cancel the Flow, and more. In addition to its use with Flow, standalone Turbines can be created to adapt other push-based mechanisms like callbacks for testing. class FakeLogger : Logger { val messages = Turbine\u003cString\u003e() override fun log(message: String) { messages += message } } The standalone Turbine offers the same API as the test function for pulling out values. val logger = FakeLogger() val userService = UserService(logger) assertNull(userService.get(4552)) with(logger.messages) { assertEquals(\"HTTP --\u003e /user/4552 GET\", awaitItem()) assertEquals(\"HTTP \u003c-- /user/4552 404 Not Found\", awaitItem()) } As your testing needs grow, the library can help with utilities for multiple Turbines, multiple Flows, sharing timeouts, aggregating errors, and more. This post is part of Cash App’s Summer of Kotlin Multiplatform series.",
  "image": "https://code.cash.app/assets/social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n\n  \u003cdiv\u003e\u003cp\u003e\n    Posted by\n    \u003ca href=\"https://jakewharton.com/\"\u003eJake Wharton\u003c/a\u003e\n    \n      \u003cspan\u003eon \u003c/span\u003e\u003ctime datetime=\"2023-06-21 00:00:00 +0000\"\u003eJune 21, 2023\u003c/time\u003e\n    \n  \u003c/p\u003e\u003c/div\u003e\n\n  \u003cp\u003eSay hello to \u003ca href=\"https://github.com/cashapp/turbine\"\u003eTurbine 1.0\u003c/a\u003e, our library for testing kotlinx.coroutines \u003ccode\u003eFlow\u003c/code\u003e and more.\u003c/p\u003e\n\n\u003cp\u003eTurbine changes push-based \u003ccode\u003eFlow\u003c/code\u003es into pull-based suspend functions to simplify testing.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003emealsFlow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eassertEquals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMeal\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eBreakfast\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eawaitItem\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n  \u003cspan\u003eassertEquals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMeal\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eLunch\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eawaitItem\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n  \u003cspan\u003eassertEquals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMeal\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eDinner\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eawaitItem\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n  \u003cspan\u003eawaitComplete\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eEach \u003ccode\u003eawaitItem()\u003c/code\u003e or \u003ccode\u003eawaitComplete()\u003c/code\u003e call suspends until the desired event arrives. If a different event occurs or a timeout is reached the functions throw an \u003ccode\u003eAssertionError\u003c/code\u003e and fail your test. You can also wait for errors, skip items, cancel the \u003ccode\u003eFlow\u003c/code\u003e, and more.\u003c/p\u003e\n\n\u003cp\u003eIn addition to its use with \u003ccode\u003eFlow\u003c/code\u003e, standalone \u003ccode\u003eTurbine\u003c/code\u003es can be created to adapt other push-based mechanisms like callbacks for testing.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eFakeLogger\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLogger\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003emessages\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTurbine\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e\u0026gt;()\u003c/span\u003e\n\n  \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003emessages\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003emessage\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe standalone \u003ccode\u003eTurbine\u003c/code\u003e offers the same API as the \u003ccode\u003etest\u003c/code\u003e function for pulling out values.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003elogger\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFakeLogger\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003euserService\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUserService\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elogger\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eassertNull\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euserService\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e4552\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\n\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elogger\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eassertEquals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;HTTP --\u0026gt; /user/4552 GET\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eawaitItem\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n  \u003cspan\u003eassertEquals\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;HTTP \u0026lt;-- /user/4552 404 Not Found\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eawaitItem\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs your testing needs grow, the library can help with utilities for multiple \u003ccode\u003eTurbine\u003c/code\u003es, multiple \u003ccode\u003eFlow\u003c/code\u003es, sharing timeouts, aggregating errors, and more.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eThis post is part of Cash App’s \u003ca href=\"https://code.cash.app/kotlin-multiplatform-summer\"\u003eSummer of Kotlin Multiplatform\u003c/a\u003e series.\u003c/em\u003e\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2023-06-21T00:00:00Z",
  "modifiedTime": null
}
