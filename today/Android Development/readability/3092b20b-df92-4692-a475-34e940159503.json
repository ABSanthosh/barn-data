{
  "id": "3092b20b-df92-4692-a475-34e940159503",
  "title": "Building \u0026 Deploying a simple KMP app — Part 3: Launchers",
  "link": "https://proandroiddev.com/building-deploying-a-simple-kmp-app-part-3-launchers-ff8ec2c60d06?source=rss----c72404660798---4",
  "description": "",
  "author": "Robert Munro",
  "published": "Sat, 10 May 2025 05:45:47 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin-multiplatform",
    "whatsapp",
    "launching",
    "kotlin",
    "gmail"
  ],
  "byline": "Robert Munro",
  "length": 6672,
  "excerpt": "In this series I will go through build and deployment of a simple property website in Kotlin multi-platform. The aim is to cover more of the platform dependent issues and provide an example of a…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Launching apps on different platforms.In this series I will go through build and deployment of a simple property website in Kotlin multi-platform. The aim is to cover more of the platform dependent issues and provide an example of a fully deployed app over Android, iOS, Desktop and Web.The Github repository is here: https://github.com/sentinelweb/house-shoreditchIn this series:App iconsSecretsLaunchersDependency injectionCI — DevelopCI — Release BuildsDeploymentIntroductionSince apps can vary across the many platforms that KMP supports. Getting a consistent result can take a little thought and work. We will explore launching some of the different communication apps (Email, SMS, Gmail \u0026 WhatsApp).We will also cover the in general the different ways each platform handles launching links and sending data to apps. Then cover the specifics for each type of app briefly.Common problemsProblem 1: If we launch common clients then the user doesn’t have to enter their contact data — hence streamlining the contact process.Problem 2: The biggest problem with something like launching email or SMS is that — especially for email — the user might not use the standard email client — a lot of people use the GMail website. So for web and desktop scenarios it is a good idea to have options to launch GMail as it will capture a lot more users.URL schemesIt is common for apps to define a custom URL scheme which can be used to launch that app if it is installed on the device. For example the URL:whatsapp://send?phone=$PHONE_NUMBER\u0026text=$BODYcan be used on multiple devices to launch Whatsapp — if it is installed — if the app is not installed the scheme URL will likely do nothing …So it is common practice to:Query if the app is installed before showing the option to Launch the app and fallback or hide the option if the app isn’t present.Querying \u0026 Launching by platformCommonWe use the expect/actual keywords to define a platform dependent class that can be used from common main. There is a Platform class which defines platform type and characteristics:interface Platform { val type: PlatformType val name: String val isSmsAvailable: Boolean val isEmailAvailable: Boolean val isWhatsappAvailable: Boolean val isGmailAvailable: Boolean}enum class PlatformType { Android, Ios, Web, Desktop}expect fun getPlatform(): PlatformWe also define a Launcher class which is called to launch various apps per platform. EnquiryMessageDomain is a data class providing message data (to, from , subject, message).expect class Launcher() { fun open(url: String) fun encode(text: String): String fun mail(message: EnquiryMessageDomain) fun gmail(message: EnquiryMessageDomain) fun sms(message: EnquiryMessageDomain) fun whatsapp(message: EnquiryMessageDomain) fun call(phone: String)}AndroidAndroid uses Intents to navigate between apps and so these intents can be used to launch specific apps for a purpose — or more generalized intents can be used, which can target any app that handles that task (e.g. viewing or sharing).Mostly is easier to use a URL scheme with Intent.ACTION_VIEW for launching different app (mailto://, smsto://, whatsapp://). GMail doesn’t have a URL scheme so we use the mime-type (message/rfc822).Querying app is performed by using the Android PackageManager:fun isPackageInstalled(context: Context, packageName: String): Boolean { return try { context.packageManager.getPackageInfo(packageName, 0) true } catch (e: PackageManager.NameNotFoundException) { false }}We can query for the package names for GMail (com.google.android.gm) and WhatsApp (com.whatsapp). For this to work we have to declare any package names we want to query in the AndroidManifest.xml:\u003cqueries\u003e \u003cpackage android:name=\"com.google.android.gm\"/\u003e \u003cpackage android:name=\"com.whatsapp\"/\u003e\u003c/queries\u003eLauncher Project LinkiOSOn iOS we can use the MFMailComposeViewController (Project link) for launching email and MFMessageComposeViewController (Project link) for SMS. Note that these objects need the iOS rootViewControllerWarpper: UIViewControllerWrapper, we supply this via dependency injection — this project use Koin, which is described in the Dependency injection post in this series.For Gmail and WhatsApp we can use the URL scheme links and trying to open the URL.UIApplication.sharedApplication.openURL(URL)We also have to declare the querying applications in the info.plist. This can be done in XCode IDE:Which add the following keys to the info.plist:\u003ckey\u003eLSApplicationQueriesSchemes\u003c/key\u003e \u003carray\u003e \u003cstring\u003ewhatsapp\u003c/string\u003e \u003cstring\u003egooglegmail\u003c/string\u003e \u003c/array\u003eWe can also Query if the apps are installed using the scheme prefix:UIApplication.sharedApplication.canOpenURL(NSURL(string = \"googlegmail://\"))UIApplication.sharedApplication.canOpenURL(NSURL(string = \"whatsapp://\"))Launcher Project LinkDesktopFor desktop we can use the JVM Desktop browser open functionality which works across platforms. Generally we probably don’t have SMS available in a desktop environment (MacOS does have functionality in the iMessage app).This is JVM code for opening a link:val desktop = Desktop.getDesktop()if (desktop.isSupported(Desktop.Action.BROWSE)) { try { desktop.browse(URI(url)) } catch (e: Exception) { e.printStackTrace() }} else { println(\"BROWSE action is not supported on this system.\")}So this functionality can be used to launch URLs, also Desktop.Action.MAIL can be used to launch the desktop mail app i.e.: desktop.mail(URI(“mailto://…”)).We can launch GMail with a URL of the pattern\"https://mail.google.com/mail/?view=cm\u0026fs=1\" + \"\u0026to=$TO_PLACEHOLDER\" + \"\u0026su=$SUBJECT_PLACEHOLDER\" + \"\u0026body=$BODY_PLACEHOLDER\"WhatsApp also has a click chat URL which can be used to either launch the app on web or desktop if it is installed:\"https://wa.me/$TO_PLACEHOLDER?text=$BODY_PLACEHOLDER\"Querying of apps could be done by checking the open URL with the relevant scheme but likely it would not work very reliably. So querying is skipped for desktop.Launcher Project LinkWebFrom the website the operation is similar as for desktop — we don’t have the ability to query if the app is installed. We can just use the simple code To open our scheme URLswindow.open(url, target = \"_blank\")Again since the web browser is sandboxed we can query weather certain apps are installed. We prefer launching web URLs.Launcher Project LinkConclusionWe have seen various methods for launching some of the main communications apps across all the available KMP platforms. We have abstracted these to a common class that can be used from our main app.Next: Dependency injection …",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*CtjUQ6k9uYF2UhCvkjCpjA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@rrmunro?source=post_page---byline--ff8ec2c60d06---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Robert Munro\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*ubtXZYacoDkIQ1kOdLroWg.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"2bca\"\u003eLaunching apps on different platforms.\u003c/p\u003e\u003cp id=\"048c\"\u003eIn this series I will go through build and deployment of a simple property website in Kotlin multi-platform. The aim is to cover more of the platform dependent issues and provide an example of a fully deployed app over Android, iOS, Desktop and Web.\u003c/p\u003e\u003cp id=\"c108\"\u003eThe Github repository is here: \u003ca href=\"https://github.com/sentinelweb/house-shoreditch\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://github.com/sentinelweb/house-shoreditch\u003c/a\u003e\u003c/p\u003e\u003cp id=\"14ed\"\u003eIn this series:\u003c/p\u003e\u003col\u003e\u003cli id=\"1a43\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmm-app-part-1-app-icons-8e8b739c7981\" rel=\"noopener\"\u003eApp icons\u003c/a\u003e\u003c/li\u003e\u003cli id=\"ecb7\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-2-secrets-9678deb403a4\" rel=\"noopener\"\u003eSecrets\u003c/a\u003e\u003c/li\u003e\u003cli id=\"9840\"\u003eLaunchers\u003c/li\u003e\u003cli id=\"5565\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-4-dependency-injection-b7189b15e1ba\" rel=\"noopener\"\u003eDependency injection\u003c/a\u003e\u003c/li\u003e\u003cli id=\"9b58\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-5-develop-ci-on-github-776ce5d29ca3\" rel=\"noopener\"\u003eCI — Develop\u003c/a\u003e\u003c/li\u003e\u003cli id=\"a199\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-6-release-ci-on-github-bfc8bb2783cc\" rel=\"noopener\"\u003eCI — Release Builds\u003c/a\u003e\u003c/li\u003e\u003cli id=\"08d8\"\u003e\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-7-deployment-b3e6f4d10518\" rel=\"noopener\"\u003eDeployment\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"5b95\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"700a\"\u003eSince apps can vary across the many platforms that KMP supports. Getting a consistent result can take a little thought and work. We will explore launching some of the different communication apps (Email, SMS, Gmail \u0026amp; WhatsApp).\u003c/p\u003e\u003cp id=\"7dbf\"\u003eWe will also cover the in general the different ways each platform handles launching links and sending data to apps. Then cover the specifics for each type of app briefly.\u003c/p\u003e\u003ch2 id=\"786c\"\u003eCommon problems\u003c/h2\u003e\u003cp id=\"d4dd\"\u003e\u003cstrong\u003eProblem 1\u003c/strong\u003e: If we launch common clients then the user doesn’t have to enter their contact data — hence streamlining the contact process.\u003c/p\u003e\u003cp id=\"e035\"\u003e\u003cstrong\u003eProblem 2\u003c/strong\u003e: The biggest problem with something like launching email or SMS is that — especially for email — the user might not use the standard email client — a lot of people use the GMail website. So for web and desktop scenarios it is a good idea to have options to launch GMail as it will capture a lot more users.\u003c/p\u003e\u003ch2 id=\"27bd\"\u003eURL schemes\u003c/h2\u003e\u003cp id=\"d63c\"\u003eIt is common for apps to define a custom URL scheme which can be used to launch that app if it is installed on the device. For example the URL:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6ccf\"\u003ewhatsapp://send?phone=$PHONE_NUMBER\u0026amp;text=$BODY\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0ad5\"\u003ecan be used on multiple devices to launch Whatsapp — \u003cem\u003eif it is installed — \u003c/em\u003eif the app is not installed the scheme URL will likely do nothing …\u003c/p\u003e\u003cp id=\"d797\"\u003eSo it is common practice to:\u003c/p\u003e\u003cp id=\"f317\"\u003e\u003cem\u003eQuery\u003c/em\u003e if the app is installed before showing the option to \u003cem\u003eLaunch\u003c/em\u003e the app and fallback or hide the option if the app isn’t present.\u003c/p\u003e\u003ch2 id=\"23e0\"\u003eQuerying \u0026amp; Launching by platform\u003c/h2\u003e\u003ch2 id=\"1c55\"\u003eCommon\u003c/h2\u003e\u003cp id=\"65f6\"\u003eWe use the expect/actual keywords to define a platform dependent class that can be used from common main. There is a \u003ccode\u003ePlatform\u003c/code\u003e class which defines platform type and characteristics:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b0f8\"\u003einterface Platform {\u003cbr/\u003e    val type: PlatformType\u003cbr/\u003e    val name: String\u003cbr/\u003e    val isSmsAvailable: Boolean\u003cbr/\u003e    val isEmailAvailable: Boolean\u003cbr/\u003e    val isWhatsappAvailable: Boolean\u003cbr/\u003e    val isGmailAvailable: Boolean\u003cbr/\u003e}\u003cp\u003eenum class PlatformType {\u003cbr/\u003e    Android, Ios, Web, Desktop\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003eexpect fun getPlatform(): Platform\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0cd4\"\u003eWe also define a \u003ccode\u003eLauncher\u003c/code\u003e class which is called to launch various apps per platform. \u003ccode\u003eEnquiryMessageDomain\u003c/code\u003e is a data class providing message data (to, from , subject, message).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"936e\"\u003eexpect class Launcher() {\u003cbr/\u003e    fun open(url: String)\u003cbr/\u003e    fun encode(text: String): String\u003cbr/\u003e    fun mail(message: EnquiryMessageDomain)\u003cbr/\u003e    fun gmail(message: EnquiryMessageDomain)\u003cbr/\u003e    fun sms(message: EnquiryMessageDomain)\u003cbr/\u003e    fun whatsapp(message: EnquiryMessageDomain)\u003cbr/\u003e    fun call(phone: String)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"e18e\"\u003eAndroid\u003c/h2\u003e\u003cp id=\"4f36\"\u003eAndroid uses \u003ca href=\"https://developer.android.com/guide/components/intents-filters\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIntents\u003c/a\u003e to navigate between apps and so these intents can be used to launch specific apps for a purpose — or more generalized intents can be used, which can target any app that handles that task (e.g. viewing or sharing).\u003c/p\u003e\u003cp id=\"1931\"\u003eMostly is easier to use a URL scheme with \u003ccode\u003eIntent.ACTION_VIEW\u003c/code\u003e\u003cem\u003e \u003c/em\u003efor launching different app (\u003ccode\u003emailto://\u003c/code\u003e, \u003ccode\u003esmsto://\u003c/code\u003e, \u003ccode\u003ewhatsapp://\u003c/code\u003e). GMail doesn’t have a URL scheme so we use the mime-type (\u003ccode\u003emessage/rfc822\u003c/code\u003e).\u003c/p\u003e\u003cp id=\"5122\"\u003eQuerying app is performed by using the Android \u003ccode\u003ePackageManager\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7724\"\u003efun isPackageInstalled(context: Context, packageName: String): Boolean {\u003cbr/\u003e    return try {\u003cbr/\u003e        context.packageManager.getPackageInfo(packageName, 0)\u003cbr/\u003e        true\u003cbr/\u003e    } catch (e: PackageManager.NameNotFoundException) {\u003cbr/\u003e        false\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ed75\"\u003eWe can query for the package names for GMail (\u003ccode\u003ecom.google.android.gm\u003c/code\u003e) and WhatsApp (\u003ccode\u003ecom.whatsapp\u003c/code\u003e). For this to work we have to declare any package names we want to query in the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6c96\"\u003e\u0026lt;queries\u0026gt;\u003cbr/\u003e    \u0026lt;package android:name=\u0026#34;com.google.android.gm\u0026#34;/\u0026gt;\u003cbr/\u003e    \u0026lt;package android:name=\u0026#34;com.whatsapp\u0026#34;/\u0026gt;\u003cbr/\u003e\u0026lt;/queries\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1e38\"\u003e\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/androidMain/kotlin/com/house_shoreditch/app/util/Launcher.android.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLauncher Project Link\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"b5a3\"\u003eiOS\u003c/h2\u003e\u003cp id=\"074b\"\u003eOn iOS we can use the \u003ccode\u003e\u003ca href=\"https://developer.apple.com/documentation/messageui/mfmailcomposeviewcontroller\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMFMailComposeViewController\u003c/a\u003e\u003c/code\u003e (\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/iosMain/kotlin/com/house_shoreditch/app/util/launchers/EmailLauncher.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eProject link\u003c/a\u003e) for launching email and \u003ccode\u003e\u003ca href=\"https://developer.apple.com/documentation/messageui/mfmessagecomposeviewcontroller\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMFMessageComposeViewController\u003c/a\u003e\u003c/code\u003e (\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/iosMain/kotlin/com/house_shoreditch/app/util/launchers/SMSLauncher.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eProject link\u003c/a\u003e) for SMS. Note that these objects need the iOS \u003ccode\u003erootViewControllerWarpper: UIViewControllerWrapper\u003c/code\u003e, we supply this via dependency injection — this project use Koin, which is described in the Dependency injection post in this series.\u003c/p\u003e\u003cp id=\"d326\"\u003eFor Gmail and WhatsApp we can use the URL scheme links and trying to open the URL.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7e60\"\u003eUIApplication.sharedApplication.openURL(URL)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"cb2e\"\u003eWe also have to declare the querying applications in the \u003ccode\u003einfo.plist\u003c/code\u003e. This can be done in XCode IDE:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"45f3\"\u003eWhich add the following keys to the info.plist:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a942\"\u003e\u0026lt;key\u0026gt;LSApplicationQueriesSchemes\u0026lt;/key\u0026gt;\u003cbr/\u003e \u0026lt;array\u0026gt;\u003cbr/\u003e  \u0026lt;string\u0026gt;whatsapp\u0026lt;/string\u0026gt;\u003cbr/\u003e  \u0026lt;string\u0026gt;googlegmail\u0026lt;/string\u0026gt;\u003cbr/\u003e \u0026lt;/array\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"fd40\"\u003eWe can also Query if the apps are installed using the scheme prefix:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9517\"\u003eUIApplication.sharedApplication.canOpenURL(NSURL(string = \u0026#34;googlegmail://\u0026#34;))\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"baa1\"\u003eUIApplication.sharedApplication.canOpenURL(NSURL(string = \u0026#34;whatsapp://\u0026#34;))\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"484a\"\u003e\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/iosMain/kotlin/com/house_shoreditch/app/util/Launcher.ios.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLauncher Project Link\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"745a\"\u003eDesktop\u003c/h2\u003e\u003cp id=\"f425\"\u003eFor desktop we can use the JVM \u003ccode\u003eDesktop\u003c/code\u003e browser open functionality which works across platforms. Generally we probably don’t have SMS available in a desktop environment (MacOS does have functionality in the iMessage app).\u003c/p\u003e\u003cp id=\"eda4\"\u003eThis is JVM code for opening a link:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"895e\"\u003eval desktop = Desktop.getDesktop()\u003cbr/\u003eif (desktop.isSupported(Desktop.Action.BROWSE)) {\u003cbr/\u003e    try {\u003cbr/\u003e        desktop.browse(URI(url))\u003cbr/\u003e    } catch (e: Exception) {\u003cbr/\u003e        e.printStackTrace()\u003cbr/\u003e    }\u003cbr/\u003e} else {\u003cbr/\u003e    println(\u0026#34;BROWSE action is not supported on this system.\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1915\"\u003eSo this functionality can be used to launch URLs, also \u003ccode\u003eDesktop.Action.MAIL\u003c/code\u003e can be used to launch the desktop mail app i.e.: \u003ccode\u003edesktop.mail(URI(“mailto://…”))\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"e845\"\u003eWe can launch GMail with a URL of the pattern\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2af4\"\u003e\u0026#34;https://mail.google.com/mail/?view=cm\u0026amp;fs=1\u0026#34; +\u003cbr/\u003e        \u0026#34;\u0026amp;to=$TO_PLACEHOLDER\u0026#34; +\u003cbr/\u003e        \u0026#34;\u0026amp;su=$SUBJECT_PLACEHOLDER\u0026#34; +\u003cbr/\u003e        \u0026#34;\u0026amp;body=$BODY_PLACEHOLDER\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2108\"\u003eWhatsApp also has a \u003ca href=\"https://faq.whatsapp.com/5913398998672934/?locale=en_US\u0026amp;category=5245251\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eclick chat URL\u003c/a\u003e which can be used to either launch the app on web or desktop if it is installed:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ebb9\"\u003e\u0026#34;https://wa.me/$TO_PLACEHOLDER?text=$BODY_PLACEHOLDER\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2408\"\u003eQuerying of apps could be done by checking the open URL with the relevant scheme but likely it would not work very reliably. So querying is skipped for desktop.\u003c/p\u003e\u003cp id=\"fd70\"\u003e\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/desktopMain/kotlin/com/house_shoreditch/app/util/Launcher.desktop.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLauncher Project Link\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"5593\"\u003eWeb\u003c/h2\u003e\u003cp id=\"3f41\"\u003eFrom the website the operation is similar as for desktop — we don’t have the ability to query if the app is installed. We can just use the simple code To open our scheme URLs\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"09da\"\u003ewindow.open(url, target = \u0026#34;_blank\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"79b1\"\u003eAgain since the web browser is sandboxed we can query weather certain apps are installed. We prefer launching web URLs.\u003c/p\u003e\u003cp id=\"6e85\"\u003e\u003ca href=\"https://github.com/sentinelweb/house-shoreditch/blob/main/composeApp/src/wasmJsMain/kotlin/com/house_shoreditch/app/util/Launcher.wasmJs.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLauncher Project Link\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"d051\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"0c9e\"\u003eWe have seen various methods for launching some of the main communications apps across all the available KMP platforms. We have abstracted these to a common class that can be used from our main app.\u003c/p\u003e\u003cp id=\"af21\"\u003e\u003cstrong\u003eNext\u003c/strong\u003e: D\u003ca href=\"https://medium.com/@rrmunro/building-deploying-a-simple-kmp-app-part-4-dependency-injection-b7189b15e1ba\" rel=\"noopener\"\u003eependency injection …\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-02-25T13:45:42.281Z",
  "modifiedTime": null
}
