{
  "id": "688d934a-5dd0-4d34-a327-0bd3a9725c51",
  "title": "Automate A11y Testing in Compose",
  "link": "https://proandroiddev.com/automate-a11y-testing-in-compose-34b14306d167?source=rss----c72404660798---4",
  "description": "",
  "author": "Nav Singh",
  "published": "Wed, 28 May 2025 12:22:55 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "android-app-development",
    "accessibility-testing",
    "jetpack-compose",
    "accessibility"
  ],
  "byline": "Nav Singh",
  "length": 6126,
  "excerpt": "This article will explore how the Accessibility Testing Framework (ATF) can automate accessibility-related checks for Compose-based UIs. Starting with Compose version 1.8.0 We got support for Compose‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Automate A11y Testing in ComposeThis article will explore how the Accessibility Testing Framework (ATF) can automate accessibility-related checks for Compose-based UIs.Starting with Compose version 1.8.0 We got support for Compose to perform accessibility checks in our UI tests automatically.Enabling accessibility checks is currently only supported for AndroidComposeTestRule.Required dependenciesAdd the following dependencies to the version catalog libs.versions.toml file and then add it to your module‚Äôs build.gradle file or directly add to the module‚Äôs build.gradle[versions]composeBom = \"2025.05.01\"uiTestJunit4Accessibility = \"1.9.0-alpha03\"uiTestManifest = \"1.9.0-alpha03\"[libraries]androidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4-accessibility\", version.ref = \"uiTestJunit4Accessibility\" }ui-test-manifest = { module = \"androidx.compose.ui:ui-test-manifest\", version.ref = \"uiTestManifest\" }App-level build fileandroidTestImplementation(libs.androidx.ui.test.junit4.accessibility)// Needed for createComposeRule()debugImplementation(libs.ui.test.manifest)Let‚Äôs write a UI test that includes accessibility checks ‚ôøÔ∏èComposableWe have a UI with three components:Text ‚Äî Login sample screenText ‚Äî SubmitIcon ‚Äî üß≥@Composablefun LoginScreen(modifier: Modifier = Modifier) { Column( modifier = modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(16.dp), horizontalAlignment = Alignment.CenterHorizontally ) { Text(\"Login sample screen\") SubmitCTA() // .... }}@Composablefun SubmitCTA(modifier: Modifier = Modifier) { Row( horizontalArrangement = Arrangement.Center ) { Text( \"Submit\", // Set the color intentionally - color contrast issue style = MaterialTheme.typography.labelSmall.copy( color = Color.Gray ) ) }}Compose PreviewEnable accessibility checks on the Compose test ruleclass ComposeUISampleTest { @get:Rule val composeTestRule = createComposeRule() @Before fun setUp() { // Enable accessibility checks with default configuration: composeTestRule.enableAccessibilityChecks() }// ....After enabling the checks, they will automatically run when we perform actions.class ComposeUISampleTest { @get:Rule val composeTestRule = createComposeRule() @Before fun setUp() { // Enable accessibility checks with default configuration: composeTestRule.enableAccessibilityChecks() } @Test fun testSubmitAction() { composeTestRule.setContent { LoginScreen() } // Accessibility checks run automatically when performing an action: composeTestRule.onNodeWithText(\"Submit\").performClick() }When we run the test, it fails with the following logs ‚ß∞üò®üõë Text contrast ratio check fails for Submit textcom.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityViewCheckException: There was 1 accessibility result:View with bounds: [161,190][258,232]: The item's text contrast ratio is 3.40. This ratio is based on an estimated foreground color of #888888 andan estimated background color of #FAFAFA.Consider using colors that result in a contrast ratio greater than 4.50 for small text,or 3.00 for large text.Let‚Äôs test another case ‚Äî Content descriptionComposable@Composablefun LoginScreen(modifier: Modifier = Modifier) { Column { // ... // Missing content description Icon( Icons.Outlined.Work, contentDescription = \"\" ) }}Compose PreviewTest code stays the same in this case; When we rerun the test, we see the following logsüõë Missing content description for the work icon üß≥com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityViewCheckException: There was 1 accessibility result:View with bounds: [178,274][241,337]: This item may not have a label readable by screen readers. Reported by com.google.android.apps.common.testing.accessibility.framework.checks.SpeakableTextPresentCheckEnable AccessibilityChecks with a custom validatorBy default, when we enable the checks, it uses the default validatorpublic fun ComposeTestRule.enableAccessibilityChecks( accessibilityValidator: AccessibilityValidator = AccessibilityValidator().setRunChecksFromRootView(true)) {// .....As you can see in the above code snippet, enableAccessibilityChecks take an AccessibilityValidator as a param. So if we want to customize the behavior, we can pass our custom validator.The default implementation of AccessibilityValidator throws an exception for any Error.Let's say we want to throw an exception for üõë Error and ‚ö†Ô∏è Warning. In this case, we need to provide a custom validator.Custom AccessibilityValidator implementationval accessibilityValidator = AccessibilityValidator().apply { setThrowExceptionFor(AccessibilityCheckResult.AccessibilityCheckResultType.WARNING)}And then use this validator with enableAccessibilityChecksclass ComposeUISampleTest { @get:Rule val composeTestRule = createComposeRule() @Before fun setUp() { // Enable accessibility checks with custom validator composeTestRule.enableAccessibilityChecks( accessibilityValidator = accessibilityValidator) // ...Now, if there is any accessibility related warning or error, our test will throw an exception.Perform accessibility checks manuallyWe can use tryPerformAccessibilityChecks() to perform accessibility checks manuallyclass ComposeUISampleTest { @Test fun testSubmitCTAAction() { // You can also manually run accessibility checks: composeTestRule.onRoot().tryPerformAccessibilityChecks() }Disable accessibility checksWe can use disableAccessibilityChecks() to disable the accessibility checksclass ComposeUISampleTest { @Test fun disableChecksSample() { // disabling accessibility checks.. composeTestRule.disableAccessibilityChecks() }Let‚Äôs make Android applications more accessibleReferences",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*1LVZ8-rOWO_QupBFWD4SbA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"79a7\" data-testid=\"storyTitle\"\u003eAutomate A11y Testing in Compose\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://navczydev.medium.com/?source=post_page---byline--34b14306d167---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Nav Singh\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*fgXFMgSUVAlGSdmMkx9TYw.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"7a2c\"\u003eThis article will explore how the\u003cstrong\u003e Accessibility Testing Framework (ATF)\u003c/strong\u003e can automate accessibility-related checks for Compose-based UIs.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b631\"\u003eStarting with \u003cstrong\u003eCompose \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eversion 1.8.0\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eWe got support for Compose to perform accessibility checks in our UI tests automatically.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"64f0\"\u003eEnabling accessibility checks is currently only supported for \u003ccode\u003e\u003cstrong\u003eAndroidComposeTestRule\u003c/strong\u003e\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"435f\"\u003eRequired dependencies\u003c/h2\u003e\u003cul\u003e\u003cli id=\"87b2\"\u003eAdd the following \u003cstrong\u003edependencies\u003c/strong\u003e to the version catalog \u003ccode\u003e\u003cstrong\u003elibs.versions.toml\u003c/strong\u003e\u003c/code\u003e file and then add it to your module‚Äôs \u003ccode\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/code\u003e file or directly add to the module‚Äôs \u003ccode\u003e\u003cstrong\u003ebuild.gradle\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"1be9\"\u003e[versions]\u003cp\u003ecomposeBom = \u0026#34;2025.05.01\u0026#34;\u003cbr/\u003euiTestJunit4Accessibility = \u0026#34;1.9.0-alpha03\u0026#34;\u003cbr/\u003euiTestManifest = \u0026#34;1.9.0-alpha03\u0026#34;\u003c/p\u003e\u003cp\u003e[libraries]\u003c/p\u003e\u003cp\u003eandroidx-ui-test-junit4 = { group = \u0026#34;androidx.compose.ui\u0026#34;, name = \u0026#34;ui-test-junit4-accessibility\u0026#34;, version.ref = \u0026#34;uiTestJunit4Accessibility\u0026#34; }\u003cbr/\u003eui-test-manifest = { module = \u0026#34;androidx.compose.ui:ui-test-manifest\u0026#34;, version.ref = \u0026#34;uiTestManifest\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"2857\"\u003eApp-level build file\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"ab70\"\u003eandroidTestImplementation(libs.androidx.ui.test.junit4.accessibility)\u003cp\u003e// Needed for createComposeRule()\u003cbr/\u003edebugImplementation(libs.ui.test.manifest)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"952b\"\u003eLet‚Äôs write a UI test that includes accessibility checks ‚ôøÔ∏è\u003c/h2\u003e\u003ch2 id=\"3142\"\u003e\u003cstrong\u003eComposable\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"6c43\"\u003eWe have a UI with three components:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d93a\"\u003eText ‚Äî \u003ccode\u003eLogin sample screen\u003c/code\u003e\u003c/li\u003e\u003cli id=\"91dd\"\u003eText ‚Äî \u003ccode\u003e\u003cstrong\u003eSubmit\u003c/strong\u003e\u003c/code\u003e\u003c/li\u003e\u003cli id=\"2508\"\u003eIcon ‚Äî üß≥\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"9db6\"\u003e@Composable\u003cbr/\u003efun LoginScreen(modifier: Modifier = Modifier) {\u003cbr/\u003e    Column(\u003cbr/\u003e        modifier = modifier.padding(16.dp),\u003cbr/\u003e        verticalArrangement = Arrangement.spacedBy(16.dp),\u003cbr/\u003e        horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e    ) {\u003cbr/\u003e        Text(\u0026#34;Login sample screen\u0026#34;)\u003cp\u003e                SubmitCTA()\u003cbr/\u003e        // ....\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun SubmitCTA(modifier: Modifier = Modifier) {\u003cbr/\u003e    Row(\u003cbr/\u003e        horizontalArrangement = Arrangement.Center\u003cbr/\u003e    ) {\u003cbr/\u003e        Text(\u003cbr/\u003e            \u0026#34;Submit\u0026#34;,\u003cbr/\u003e            // Set the color intentionally - color contrast issue\u003cbr/\u003e            style = MaterialTheme.typography.labelSmall.copy(\u003cbr/\u003e                color = Color.Gray\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eCompose Preview\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"ede2\"\u003eEnable \u003cstrong\u003eaccessibility checks\u003c/strong\u003e on the \u003cstrong\u003eCompose test rule\u003c/strong\u003e\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"3065\"\u003eclass ComposeUISampleTest {\u003cp\u003e    @get:Rule\u003cbr/\u003e    val composeTestRule = createComposeRule()\u003c/p\u003e\u003cp\u003e    @Before\u003cbr/\u003e    fun setUp() {\u003c/p\u003e\u003cp\u003e        // Enable accessibility checks with default configuration:\u003cbr/\u003e        composeTestRule.enableAccessibilityChecks()\u003c/p\u003e\u003cp\u003e    }\u003c/p\u003e\u003cp\u003e// ....\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"03e0\"\u003eAfter enabling the checks, they will \u003cstrong\u003eautomatically\u003c/strong\u003e \u003cstrong\u003erun\u003c/strong\u003e when we \u003cstrong\u003eperform\u003c/strong\u003e \u003ccode\u003e\u003cstrong\u003eactions\u003c/strong\u003e\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"33e8\"\u003eclass ComposeUISampleTest {\u003cp\u003e    @get:Rule\u003cbr/\u003e    val composeTestRule = createComposeRule()\u003c/p\u003e\u003cp\u003e    @Before\u003cbr/\u003e    fun setUp() {\u003c/p\u003e\u003cp\u003e        // Enable accessibility checks with default configuration:\u003cbr/\u003e        composeTestRule.enableAccessibilityChecks()\u003c/p\u003e\u003cp\u003e    }\u003c/p\u003e\u003cp\u003e    @Test\u003cbr/\u003e    fun testSubmitAction() {\u003cbr/\u003e        composeTestRule.setContent {\u003cbr/\u003e            LoginScreen()\u003cbr/\u003e        }\u003cbr/\u003e        // Accessibility checks run automatically when performing an action:\u003cbr/\u003e        composeTestRule.onNodeWithText(\u0026#34;Submit\u0026#34;).performClick()\u003cbr/\u003e    }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"94e2\"\u003e\u003cstrong\u003eWhen we run the test, it fails with the following logs ‚ß∞üò®\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6f8d\"\u003e\u003cstrong\u003eüõë Text contrast ratio\u003c/strong\u003e check fails for \u003ccode\u003e\u003cstrong\u003eSubmit\u003c/strong\u003e\u003c/code\u003e text\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9c47\"\u003ecom.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityViewCheckException: There was 1 accessibility result:\u003cp\u003eView with bounds: [161,190][258,232]: The item\u0026#39;s text contrast ratio is 3.40.\u003c/p\u003e\u003cp\u003e This ratio is based on an estimated foreground color of #888888 and\u003cbr/\u003ean estimated background color of #FAFAFA.\u003c/p\u003e\u003cp\u003eConsider using colors that result in a contrast ratio greater than 4.50 for small text,\u003cbr/\u003eor 3.00 for large text.\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"5f01\"\u003eLet‚Äôs test another case ‚Äî Content description\u003c/h2\u003e\u003ch2 id=\"6fd7\"\u003e\u003cstrong\u003eComposable\u003c/strong\u003e\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"1e5c\"\u003e@Composable\u003cbr/\u003efun LoginScreen(modifier: Modifier = Modifier) {\u003cbr/\u003e    Column {\u003cbr/\u003e        // ...  \u003cp\u003e              // Missing content description\u003cbr/\u003e        Icon(\u003cbr/\u003e            Icons.Outlined.Work,\u003cbr/\u003e            contentDescription = \u0026#34;\u0026#34;\u003cbr/\u003e        )\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eCompose Preview\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"ae62\"\u003eTest code stays the same in this case; When we \u003cstrong\u003ererun\u003c/strong\u003e the \u003cstrong\u003etest\u003c/strong\u003e, we see the following logs\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"7048\"\u003e\u003cstrong\u003eüõë Missing content description \u003c/strong\u003efor the\u003cstrong\u003e work icon üß≥\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c632\"\u003ecom.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityViewCheckException: \u003cp\u003eThere was 1 accessibility result:\u003cbr/\u003eView with bounds: [178,274][241,337]: \u003c/p\u003e\u003cp\u003eThis item may not have a label readable by screen readers. \u003c/p\u003e\u003cp\u003eReported by com.google.android.apps.common.testing.accessibility.framework.checks.SpeakableTextPresentCheck\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"6fa1\"\u003eEnable AccessibilityChecks with a custom validator\u003c/h2\u003e\u003cul\u003e\u003cli id=\"605c\"\u003eBy default, when we enable the checks, it uses the default validator\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"9553\"\u003epublic fun ComposeTestRule.enableAccessibilityChecks(\u003cbr/\u003e    accessibilityValidator: AccessibilityValidator =\u003cbr/\u003e        AccessibilityValidator().setRunChecksFromRootView(true)\u003cbr/\u003e) {\u003cp\u003e// .....\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"9cd0\"\u003eAs you can see in the above code snippet, \u003ccode\u003e\u003cstrong\u003eenableAccessibilityChecks\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003etake an \u003ccode\u003e\u003cstrong\u003eAccessibilityValidator\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eas a param. So if we want to customize the behavior, we can pass our custom validator.\u003c/li\u003e\u003cli id=\"5dcd\"\u003eThe default \u003cstrong\u003eimplementation\u003c/strong\u003e of \u003cstrong\u003eAccessibilityValidator \u003c/strong\u003ethrows an exception for any \u003cstrong\u003eError.\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"2e03\"\u003e\u003cstrong\u003eLet\u0026#39;s say we want to throw an exception for üõë \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eError\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e and ‚ö†Ô∏è \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eWarning\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e. In this case, we need to provide a custom validator.\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"fa11\"\u003eCustom AccessibilityValidator implementation\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"3de0\"\u003eval accessibilityValidator = AccessibilityValidator().apply {\u003cbr/\u003e    setThrowExceptionFor(AccessibilityCheckResult.AccessibilityCheckResultType.WARNING)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0cea\"\u003eAnd then use this validator with \u003ccode\u003e\u003cstrong\u003eenableAccessibilityChecks\u003c/strong\u003e\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9b26\"\u003eclass ComposeUISampleTest {\u003cp\u003e    @get:Rule\u003cbr/\u003e    val composeTestRule = createComposeRule()\u003c/p\u003e\u003cp\u003e    @Before\u003cbr/\u003e    fun setUp() {\u003c/p\u003e\u003cp\u003e        // Enable accessibility checks with custom validator\u003cbr/\u003e        composeTestRule.enableAccessibilityChecks(\u003cbr/\u003e                           accessibilityValidator = accessibilityValidator)\u003c/p\u003e\u003cp\u003e    // ...\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"98fd\"\u003eNow, if there is any \u003cstrong\u003eaccessibility\u003c/strong\u003e related \u003cstrong\u003ewarning\u003c/strong\u003e or \u003cstrong\u003eerror\u003c/strong\u003e, our test will throw an exception.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"dfa6\"\u003ePerform accessibility checks manually\u003c/h2\u003e\u003cul\u003e\u003cli id=\"0016\"\u003eWe can use \u003ccode\u003e\u003cstrong\u003etryPerformAccessibilityChecks()\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eto perform accessibility checks manually\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"d93e\"\u003eclass ComposeUISampleTest {\u003cp\u003e    @Test\u003cbr/\u003e    fun testSubmitCTAAction() {\u003c/p\u003e\u003cp\u003e                // You can also manually run accessibility checks:\u003cbr/\u003e        composeTestRule.onRoot().tryPerformAccessibilityChecks()\u003c/p\u003e\u003cp\u003e          }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d5a7\"\u003eDisable accessibility checks\u003c/h2\u003e\u003cul\u003e\u003cli id=\"c1d7\"\u003eWe can use \u003ccode\u003e\u003cstrong\u003edisableAccessibilityChecks()\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e \u003c/strong\u003eto disable the accessibility checks\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"da40\"\u003eclass ComposeUISampleTest {\u003cp\u003e    @Test\u003cbr/\u003e    fun disableChecksSample() {\u003c/p\u003e\u003cp\u003e        // disabling accessibility checks..\u003cbr/\u003e        composeTestRule.disableAccessibilityChecks()\u003cbr/\u003e    }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003ch2 id=\"dae5\"\u003eLet‚Äôs make Android applications more accessible\u003c/h2\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"dd0c\"\u003eReferences\u003c/h2\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-27T23:34:04.187Z",
  "modifiedTime": null
}
