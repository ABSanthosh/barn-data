{
  "id": "ccce2213-040c-4172-baff-b6913823ac4e",
  "title": "Transition to using 16 KB page sizes for Android apps and games using Android Studio",
  "link": "http://android-developers.googleblog.com/2025/07/transition-to-16-kb-page-sizes-android-apps-games-android-studio.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-07-10T14:00:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#page-sizes",
    "16 KB page size",
    "4 KB page size",
    "Android Studio",
    "Developer Tools"
  ],
  "byline": "",
  "length": 4690,
  "excerpt": "Learn about Android's upcoming move to 16KB page sizes for performance gains, with tools in Android Studio to help app developers transition.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Mayank Jain – Product Manager and Jomo Fisher – Software EngineerGet ready to upgrade your app's performance as Android embraces 16 KB memory page sizes Android’s transition to 16 KB Page size Traditionally, Android has operated with the 4 KB memory page size. However many ARM CPUs (the most common processors for Android phones) support the larger 16 KB page size, offering improved performance gains. With Android 15, the Android operating system is page-size-agnostic, allowing devices to run efficiently with either 4 KB or 16 KB page size. Starting November 1st, 2025, all new apps and app updates that use native C/C++ code targeting Android 15+ devices submitted to Google Play must support 16 KB page sizes. This is a crucial step towards ensuring your app delivers the best possible performance on the latest Android hardware. Apps without native C/C++ code or dependencies, that just use the Kotlin and Java programming languages, are already compatible, but if you're using native code, now is the time to act. This transition to larger 16 KB page sizes translates directly into a better user experience. Devices configured with 16 KB page size can see an overall performance boost of 5-10%. This means faster app launch times (up to 30% for some apps, 3.16% on average), improved battery usage (4.56% reduction in power draw), quicker camera starts (4.48-6.60% faster), and even speedier system boot-ups (around 0.8 seconds faster). While there is a marginal increase in memory use, a faster reclaim path is worth it. The native code challenge – and how Android Studio equips you If your app uses native C/C++ code from the Android NDK or relies on SDKs that do, you'll need to recompile and potentially adjust your code for 16 KB compatibility. The good news? Once your application is updated for the 16 KB page size, the same application binary can run seamlessly on both 4 KB and 16 KB devices. This table describes who needs to transition and recompile their apps We’ve created several Android Studio tools and guides that can help you prepare for migrating to using 16 KB page size. Detect compatibility issues APK Analyzer: Easily identify if your app contains native libraries by checking for .so files in the lib folder. The APK Analyzer can also visually indicate your app's 16 KB compatibility. You can then determine and update libraries as needed for 16 KB compliance. Alignment Checks: Android Studio also provides warnings if your prebuilt libraries or APKs are not 16 KB compliant. You should then use the APK Analyzer tool to review which libraries need to be updated or if any code changes are required. If you want to detect the 16 KB page size compatibility checks in your CI (continuous integration) pipeline, you can leverage scripts and command line tools. Lint in Android Studio now also highlights the native libraries which are not 16 KB aligned. Build with 16 KB alignment Tools Updates: Rebuild your native code with 16 KB alignment. Android Gradle Plugin (AGP) version 8.5.1 or higher automatically enables 16 KB alignment by default (during packaging) for uncompressed shared libraries. Similarly, Android NDK r28 and higher compile 16 KB-aligned by default. If you depend on other native SDK’s, they also need to be 16 KB aligned. You might need to reach out to the SDK developer to request a 16 KB compliant SDK. Fix code for page-size agnosticism Eliminate Hardcoded Assumptions: Identify and remove any hardcoded dependencies on PAGE_SIZE or assumptions that the page size is 4 KB (e.g., 4096). Instead, use getpagesize() or sysconf(_SC_PAGESIZE) to query the actual page size at runtime. Test in a 16 KB environment Android Emulator Support: Android Studio offers a 16 KB emulator target (for both arm64 and x86_64) directly in the Android Studio SDK Manager, allowing you to test your applications before uploading to Google Play. On-Device Testing: For compatible devices like Pixel 8 and 8 Pro onwards (starting with Android 15 QPR1), a new developer option allows you to switch between 4 KB and 16 KB page sizes for real-device testing. You can verify the page size using adb shell getconf PAGE_SIZE. Don't wait – prepare your apps today Leverage Android Studio’s powerful tools to detect issues, build compatible binaries, fix your code, and thoroughly test your app for the new 16 KB memory page sizes. By doing so, you'll ensure an improved end user experience and contribute to a more performant Android ecosystem. As always, your feedback is important to us – check known issues, report bugs, suggest improvements, and be part of our vibrant community on LinkedIn, Medium, YouTube, or X.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSiuW6RK-yJLlgCdNx3ag6e7Io6NCzfqOjpq__9r2y7faEIgvT9-jBsoQ1XWH6TyoIL3frhMbMkI6zJI-pd6TBfryXrhYjPxnsmYSZ7bw-gxyrWogUqMmhqfnKagz4AWwUGviUSnsjD1lmNvRwfc_1Y2h6cY47RBo2DZdFvIl4s-5dbXIFwKPubYya8Es/w1200-h630-p-k-no-nu/16-KB-page-size-android-studio-meta.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSiuW6RK-yJLlgCdNx3ag6e7Io6NCzfqOjpq__9r2y7faEIgvT9-jBsoQ1XWH6TyoIL3frhMbMkI6zJI-pd6TBfryXrhYjPxnsmYSZ7bw-gxyrWogUqMmhqfnKagz4AWwUGviUSnsjD1lmNvRwfc_1Y2h6cY47RBo2DZdFvIl4s-5dbXIFwKPubYya8Es/s1600/16-KB-page-size-android-studio-meta.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Mayank Jain – Product Manager and Jomo Fisher – Software Engineer\u003c/em\u003e\u003c/p\u003e\u003ch2\u003e\u003cspan\u003e\u003cb\u003eGet ready to upgrade your app\u0026#39;s performance as Android embraces 16 KB memory page sizes\u003c/b\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003ch2\u003eAndroid’s transition to 16 KB Page size\u003c/h2\u003e\n\n\u003cp\u003eTraditionally, Android has operated with the 4 KB memory page size. However many ARM CPUs (the most common processors for Android phones) support the larger 16 KB page size, offering improved performance gains. With Android 15, the Android operating system is page-size-agnostic, allowing devices to run efficiently with either 4 KB or 16 KB page size.\u003c/p\u003e\n\n\u003cp\u003eStarting \u003cb\u003e\u003ca href=\"https://android-developers.googleblog.com/2025/05/prepare-play-apps-for-devices-with-16kb-page-size.html\" target=\"_blank\"\u003eNovember 1st, 2025\u003c/a\u003e\u003c/b\u003e, all new apps and app updates that use native C/C++ code targeting Android 15+ devices submitted to Google Play must support 16 KB page sizes. This is a crucial step towards ensuring your app delivers the best possible performance on the latest Android hardware. Apps without native C/C++ code or dependencies, that just use the Kotlin and Java programming languages, are already compatible, but if you\u0026#39;re using native code, now is the time to act.\u003c/p\u003e\n\n\u003cp\u003eThis transition to larger 16 KB page sizes translates directly into a better user experience. Devices configured with 16 KB page size can see an overall performance boost of 5-10%. This means \u003cb\u003efaster app launch times\u003c/b\u003e (up to 30% for some apps, 3.16% on average), \u003cb\u003eimproved battery usage\u003c/b\u003e (4.56% reduction in power draw), \u003cb\u003equicker camera starts\u003c/b\u003e (4.48-6.60% faster), and even \u003cb\u003espeedier system boot-ups\u003c/b\u003e (around 0.8 seconds faster). While there is a marginal increase in memory use, a faster reclaim path is worth it.\u003c/p\u003e\n\n\u003ch2\u003eThe native code challenge – and how Android Studio equips you\u003c/h2\u003e\n\n\u003cp\u003eIf your app uses native C/C++ code from the \u003ca href=\"https://developer.android.com/ndk\" target=\"_blank\"\u003eAndroid NDK\u003c/a\u003e or relies on SDKs that do, you\u0026#39;ll need to recompile and potentially adjust your code for 16 KB compatibility. The good news? Once your application is updated for the 16 KB page size, the \u003cb\u003esame application binary can run seamlessly on both 4 KB and 16 KB devices\u003c/b\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis table describes who needs to transition and recompile their apps\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A table describes who needs to transition or recomplie their apps based on native codebase and device size\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinm4PJ67ZkQcGUmuzoGfvGJ_mIguN6PEqP_2vIJ5rJ5cNDJHmyxX62Lr48ohw1oep0kRPmrcP7VfwmG9CWYqdEvNbAeKa-ryFxoOTnCOOUkeEJSA6oRvCf9pjZ__kOKEJiVS2Z8mfpcXfA4qkd7nFCdPXVM2LV7CgCUkg3b9-CB5OWLzbkNcx1oWyNa7g/s16000/16-KB-support-android-studio-transition-or-recomplie-device.png\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eWe’ve created several Android Studio tools and guides that can help you prepare for migrating to using 16 KB page size.\u003c/p\u003e\n\n\u003ch2\u003eDetect compatibility issues\u003c/h2\u003e\n\n\u003cp\u003e\u003cb\u003eAPK Analyzer:\u003c/b\u003e Easily \u003ca href=\"https://developer.android.com/guide/practices/page-sizes#16-kb-impact\" target=\"_blank\"\u003eidentify\u003c/a\u003e if your app contains native libraries by checking for \u003cspan\u003e.so\u003c/span\u003e files in the \u003cspan\u003elib\u003c/span\u003e folder. The APK Analyzer can also visually indicate your app\u0026#39;s 16 KB compatibility. You can then determine and update libraries as needed for 16 KB compliance.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of the APK Analyzer in Android Studio\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhCPZQMJ8N1eVb-d1G4sB0JWCp4cDSJeq2nMaYVTFfEdkGPm1JJ1wHBShG98MImQRaO8lBsCWBRAkyIL50j3VnyU-XXCX_6G7FVzBgFATo1MaIH-b43rTIo5pi2cR80ey-8fcZz6vTjN5-fUueKPBlbNn2nEVGr3YyiTQWn6nSF3cthFHQjk0f51apBIZA/s16000/16-KB-page-size-android-studio-meta.png\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eAlignment Checks:\u003c/b\u003e Android Studio also provides warnings if your prebuilt libraries or APKs are not 16 KB compliant. You should then use the APK Analyzer tool to review which libraries need to be updated or if any code changes are required. If you want to detect the 16 KB page size compatibility checks in your CI (continuous integration) pipeline, you can \u003ca href=\"https://developer.android.com/guide/practices/page-sizes#alignment-use-script\" target=\"_blank\"\u003eleverage scripts and command line tools.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of Android 16 KB Alignment check in Android Studio\" height=\"321\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEib4h_K4AaX07jREA0UeUQznIkOsMg7SOWDM_N1yyMVUC5XXtsTbNBdWz2frUHvQ3a58Tq6LaXP-0CMCdv-tWkvnBMFSFxUrhAK_KGLEX9cbx3PE9QtlY9TI7JYgwItbGidpQ3_QsA3F4W-ToC5cWxAqOuUViqu2OUd85JoXFf4HHuKwilOv0KKslt6xz0/s1600/android-studio-16kb-alignment-check.png\" width=\"400\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eLint in Android Studio\u003c/b\u003e now also highlights the native libraries which are not 16 KB aligned.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of Lint performing a 16 KB alignment check in Android Studio\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgwj6YrfpyApn5ELuhoKL9JUpfXb3q3W2WTObTOHKnC7Gh80ZZCsEyxe_qwG29LiQKFyJzZ3XrC2qlNylGEyWWHiUSzk8ui0YMpbnLa9K-jZEkk5mZgNeb2sLSVf33Ox86mnl7JBaxwqu3IgRp0XpFCsKzZ__zfUKmKDAkXYQ1JGxvXezmgIHpyAtFQlEw/s16000/lint-android-studio-alignment-check.png\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch2\u003eBuild with 16 KB alignment\u003c/h2\u003e\n\n\u003cp\u003e\u003cb\u003eTools Updates:\u003c/b\u003e \u003ca href=\"https://developer.android.com/guide/practices/page-sizes#build\" target=\"_blank\"\u003eRebuild\u003c/a\u003e your native code with 16 KB alignment. Android Gradle Plugin (AGP) version 8.5.1 or higher automatically enables 16 KB alignment by default (during packaging) for uncompressed shared libraries. Similarly, \u003ca href=\"https://developer.android.com/ndk/downloads\" target=\"_blank\"\u003eAndroid NDK\u003c/a\u003e r28 and higher compile 16 KB-aligned by default. If you depend on other native SDK’s, they also need to be 16 KB aligned. You might need to reach out to the SDK developer to request a 16 KB compliant SDK.\u003c/p\u003e\n\n\u003ch2\u003eFix code for page-size agnosticism\u003c/h2\u003e\n\n\u003cp\u003e\u003cb\u003eEliminate Hardcoded Assumptions:\u003c/b\u003e Identify and remove any hardcoded dependencies on \u003cspan\u003e\u003ca href=\"https://developer.android.com/guide/practices/page-sizes#check-code\" target=\"_blank\"\u003ePAGE_SIZE\u003c/a\u003e\u003c/span\u003e or assumptions that the page size is 4 KB (e.g., \u003cspan\u003e4096\u003c/span\u003e). Instead, use \u003cspan\u003egetpagesize()\u003c/span\u003e or \u003cspan\u003esysconf(_SC_PAGESIZE)\u003c/span\u003e to query the actual page size at runtime.\u003c/p\u003e\n\n\u003ch2\u003eTest in a 16 KB environment\u003c/h2\u003e\n\n\u003cp\u003e\u003cb\u003eAndroid Emulator Support:\u003c/b\u003e Android Studio offers a 16 KB \u003ca href=\"https://developer.android.com/guide/practices/page-sizes#16kb-emulator\" target=\"_blank\"\u003eemulator\u003c/a\u003e target (for both arm64 and x86_64) directly in the Android Studio SDK Manager, allowing you to test your applications before uploading to Google Play.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of the 16 KB emulator in Android Studio\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidZL7Nv12SUwykE3M2SjRCVAzAc-pHlV5ptEHP4lBfGp3GpjCFXLUUwQeNvgOCkSJfcUcfvt8KmpjGDvVzVGxhyphenhyphenUK7zXyhyphenhyphenDivGD7a4wnX-rODPR8Yp0Xo_KKZU5eq8PxTvekm6Elr0BrqEUm_6RvlgmDExkwhpoE5-1mNDkdF-6PV_mw2vZEdYEeG6V0/s16000/16-KB-emulator-android-studio.png\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eOn-Device Testing:\u003c/b\u003e For compatible devices like Pixel 8 and 8 Pro onwards (starting with Android 15 QPR1), a new \u003ca href=\"https://developer.android.com/guide/practices/page-sizes#developer-option\" target=\"_blank\"\u003edeveloper option\u003c/a\u003e allows you to switch between 4 KB and 16 KB page sizes for real-device testing. You can verify the page size using \u003cspan\u003eadb shell getconf PAGE_SIZE\u003c/span\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Screenshot of the 16 KB emulator in Android Studio\" height=\"400\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKHVPUytomKmHBbw9TYBAx_PNKMFaTPJhCx1xzkaHwr4STbfH_eG4s-sx-xsGWMGxcwYi4rNpwSJqwpe-XFn-NjFCEutEZzYQ3lyzKDH0cJ5-Qmv69zxbCsV1uQepIcxC0hQDuLtscl4WYSHW_MvOJyJVmyIMXIsKVoZISfE13Dyt1VkWNZd9sTScxUys/w384-h400/on-device-testing-16-kb-page-size-pixel.png\" width=\"384\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch2\u003e\u003cspan\u003eDon\u0026#39;t wait – prepare your apps today\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eLeverage \u003ca href=\"https://developer.android.com/studio\" target=\"_blank\"\u003eAndroid Studio’s\u003c/a\u003e powerful tools to detect issues, build compatible binaries, fix your code, and thoroughly test your app for the new 16 KB memory page sizes. By doing so, you\u0026#39;ll ensure an improved end user experience and contribute to a more performant Android ecosystem.\u003c/p\u003e\n\n\u003cp\u003eAs always, your feedback is important to us – \u003ca href=\"https://developer.android.com/studio/known-issues\" target=\"_blank\"\u003echeck known issues\u003c/a\u003e, \u003ca href=\"https://developer.android.com/studio/report-bugs\" target=\"_blank\"\u003ereport bugs\u003c/a\u003e, \u003ca href=\"https://developer.android.com/studio/report-bugs\" target=\"_blank\"\u003esuggest improvements\u003c/a\u003e, and be part of our vibrant community on \u003ca href=\"https://www.linkedin.com/showcase/androiddev/posts/?feedView=all\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e, \u003ca href=\"https://medium.com/androiddevelopers\" target=\"_blank\"\u003eMedium\u003c/a\u003e, \u003ca href=\"https://www.youtube.com/c/AndroidDevelopers/videos\" target=\"_blank\"\u003eYouTube\u003c/a\u003e, or \u003ca href=\"https://twitter.com/androidstudio\" target=\"_blank\"\u003eX\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
