{
  "id": "4e6c0815-e30d-4992-ab2b-c47c3964925b",
  "title": "Band-aiding legacy networking libraries with Retrofit and OkHttp",
  "link": "https://saket.me/retrofit-band-aid/",
  "description": "When Uncommon was brought in to refactor a big legacy app last year, we found ourselves in a strange situation. Our client was maintaining a common library for handling networking — HTTP, FCM, MQTT — across all apps under their brand. This library (let’s call it SadLibrary) had an API that was badly designed and dated, but not using […] The post Band-aiding legacy networking libraries with Retrofit and OkHttp appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Mon, 30 Apr 2018 09:22:05 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android",
    "networking",
    "retrofit"
  ],
  "byline": "Saket Narayan",
  "length": 3875,
  "excerpt": "Our team was forced to work with a badly designed networking library for a client project. What happened next will blow your mind.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "When Uncommon was brought in to refactor a big legacy app last year, we found ourselves in a strange situation. Our client was maintaining a common library for handling networking — HTTP, FCM, MQTT — across all apps under their brand. This library (let’s call it SadLibrary) had an API that was badly designed and dated, but not using it was not an option — a dedicated team was working on it and their manager started showing signs of protest. Most modern Android apps use Retrofit to access REST-style APIs in an elegant and simple way. We wanted to see if we could make Retrofit work with SadLibrary and decided to give it a shot. Our initial idea was to fork Retrofit as RetroUnfit (pun count: 1) and plug-in SadLibrary instead of OkHttp. Thankfully, this spectacularly bad idea was shot down in no time. After going through Retrofit’s code, learning how Retrofit delegates calls to OkHttp and, how OkHttp further delegates them to interceptors, we realized that the correct solution was far simpler. OkHttp and the Magical Interceptors For those unaware, OkHttp uses interceptors for not only letting clients hook into calls and modify their request/response bodies, but also for finally running the call on the network. This is done inside the very last interceptor and can be seen in action here: okhttp3.RealCall#194. So to make Retrofit work with SadLibrary, all we needed to do was add an interceptor that redirects all network requests from OkHttp and forwards them to SadLibrary. Here’s an example: class MrStealYoNetworkCalls implements okhttp3.Interceptor { @Override public Response intercept(Chain chain) throws IOException { okhttp3.Request okHttpRequest = chain.request(); CustomRequest request = toCustomRequest(okHttpRequest); CustomResponse response = executeCall(request); okhttp3.Response okHttpResponse = toOkHttpResponse(response, okHttpRequest); // OkHttp never actually receives this call. return okHttpResponse; } } Using this interceptor is no different from using any other OkHttp interceptor: OkHttpClient okHttpClient = new OkHttpClient.Builder() // It's important to add this interceptor last because // any downstream interceptors won't get called. .addInterceptor(MrStealYoNetworkCalls.create()) .build(); Retrofit retrofit = new Retrofit.Builder() .client(okHttpClient) .build(); That’s all! Retrofit could now be used for making network calls without dealing with SadLibrary and its sad API! Making Retrofit work for you Using Retrofit in this manner is very similar to what Nick Butcher does in his beautiful Dribbble client, Plaid. Since Dribbble does not provide a search API, Plaid manually downloads the search page as HTML and parses it using Jsoup. But, instead of leaking this ugliness to the rest of the app, this functionality is exposed through Retrofit as if it were an actual Dribbble API. /** * Fake-API for searching dribbble */ public interface DribbbleSearchService { @GET(\"search\") Call\u003cList\u003cShot\u003e\u003e search(@Query(\"q\") String query, ...); } The response body is parsed inside a Retrofit Converter (Github link): /** * Dribbble API does not have a search endpoint * so we have to do gross things :( */ public class DribbbleSearchConverter implements Converter\u003c\u003e { @Override public List\u003cShot\u003e convert(ResponseBody searchResponse) { String html = searchResponse.string(); Document document = Jsoup.parse(html, \"https://dribbble.com\"); return parseDribbbleShots(document); } } And used like a boss (Github link): DribbbleSearchService searchApi = new Retrofit.Builder() .addConverterFactory(new DribbbleSearchConverter.Factory()) .build() .create(DribbbleSearchService.class); You can watch Jake Wharton explain this in more detail in his talk, Making Retrofit Work For You (GDG Cincinnati). Cover photo by Bryan Colosky.",
  "image": "https://saket.me/wp-content/uploads/2018/04/concrete_mesh.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\u003cp\u003eWhen Uncommon was brought in to refactor a big legacy app last year, we found ourselves in a strange situation. Our client was maintaining a common library for handling networking — HTTP, FCM, MQTT — across all apps under their brand. This library (let’s call it SadLibrary) had an API that was badly designed and dated, but not using it was not an option — a dedicated team was working on it and their manager started showing signs of protest.\u003c/p\u003e\n\u003cp\u003eMost modern Android apps use \u003ca href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"noopener noreferrer\" data-href=\"http://square.github.io/retrofit/\"\u003eRetrofit\u003c/a\u003e to access REST-style APIs in an elegant and simple way. We wanted to see if we could make Retrofit work with SadLibrary and decided to give it a shot. Our initial idea was to fork Retrofit as \u003cem\u003eRetroUnfit\u003c/em\u003e (pun count: 1) and plug-in SadLibrary instead of OkHttp. Thankfully, this spectacularly bad idea was shot down in no time. After going through Retrofit’s code, learning how Retrofit delegates calls to OkHttp and, how OkHttp further delegates them to interceptors, we realized that the correct solution was far simpler.\u003c/p\u003e\n\u003ch5\u003eOkHttp and the Magical Interceptors\u003c/h5\u003e\n\u003cp\u003eFor those unaware, OkHttp uses interceptors for not only letting clients hook into calls and modify their request/response bodies, but also for finally running the call on the network. This is done inside the very last interceptor and can be seen in action here: \u003ca href=\"https://github.com/square/okhttp/blob/878bde8fd6939b508adeb21e2911e390cfe27326/okhttp/src/main/java/okhttp3/RealCall.java#L194\" target=\"_blank\" rel=\"noopener noreferrer\" data-href=\"https://github.com/square/okhttp/blob/878bde8fd6939b508adeb21e2911e390cfe27326/okhttp/src/main/java/okhttp3/RealCall.java#L194\"\u003eokhttp3.RealCall#194\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSo to make Retrofit work with SadLibrary, all we needed to do was add an interceptor that redirects all network requests from OkHttp and forwards them to SadLibrary. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass MrStealYoNetworkCalls implements okhttp3.Interceptor {\n\n  @Override\n  public Response intercept(Chain chain) throws IOException {\n    okhttp3.Request okHttpRequest = chain.request();\n\n    CustomRequest request = toCustomRequest(okHttpRequest);\n    CustomResponse response = executeCall(request);\n    okhttp3.Response okHttpResponse = toOkHttpResponse(response, okHttpRequest);\n        \n    // OkHttp never actually receives this call.\n\n    return okHttpResponse;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing this interceptor is no different from using any other OkHttp interceptor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOkHttpClient okHttpClient = new OkHttpClient.Builder()\n  // It\u0026#39;s important to add this interceptor last because \n  // any downstream interceptors won\u0026#39;t get called.\n  .addInterceptor(MrStealYoNetworkCalls.create())\n  .build();\n\nRetrofit retrofit = new Retrofit.Builder()\n  .client(okHttpClient)\n  .build();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat’s all! Retrofit could now be used for making network calls without dealing with SadLibrary and its sad API!\u003c/p\u003e\n\u003ch5\u003eMaking Retrofit work for you\u003c/h5\u003e\n\u003cp\u003eUsing Retrofit in this manner is very similar to what Nick Butcher does in his beautiful Dribbble client, \u003ca href=\"https://github.com/nickbutcher/plaid\" target=\"_blank\" rel=\"noopener noreferrer\" data-href=\"https://github.com/nickbutcher/plaid\"\u003ePlaid\u003c/a\u003e. Since Dribbble does not provide a search API, Plaid manually downloads the search page as HTML and parses it using Jsoup. But, instead of leaking this ugliness to the rest of the app, this functionality is exposed through Retrofit as if it were an actual Dribbble API.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/**\n *  Fake-API for searching dribbble\n */\npublic interface DribbbleSearchService {\n\n  @GET(\u0026#34;search\u0026#34;)\n  Call\u0026lt;List\u0026lt;Shot\u0026gt;\u0026gt; search(@Query(\u0026#34;q\u0026#34;) String query, ...);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe response body is parsed inside a Retrofit Converter (\u003ca href=\"https://github.com/nickbutcher/plaid/blob/f82480111cdb0a1c9b8b2560670952fc1853eaaa/app/src/main/java/io/plaidapp/data/api/dribbble/DribbbleSearchConverter.java\"\u003eGithub link\u003c/a\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/**\n * Dribbble API does not have a search endpoint \n * so we have to do gross things :(\n */\npublic class DribbbleSearchConverter implements Converter\u0026lt;\u0026gt; {\n\n  @Override\n  public List\u0026lt;Shot\u0026gt; convert(ResponseBody searchResponse) {\n    String html = searchResponse.string();\n    Document document = Jsoup.parse(html, \u0026#34;https://dribbble.com\u0026#34;);\n    return parseDribbbleShots(document);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd used like a boss (\u003ca href=\"https://github.com/nickbutcher/plaid/blob/4e338a563bac0eaef3caa7374c93120256871665/app/src/main/java/io/plaidapp/data/BaseDataManager.java#L157\"\u003eGithub link\u003c/a\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDribbbleSearchService searchApi = new Retrofit.Builder()\n    .addConverterFactory(new DribbbleSearchConverter.Factory())\n    .build()\n    .create(DribbbleSearchService.class);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can watch Jake Wharton explain this in more detail in his talk, \u003ca href=\"https://youtu.be/t34AQlblSeE?t=35m50s\"\u003eMaking Retrofit Work For You (GDG Cincinnati)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCover photo by \u003ca href=\"https://unsplash.com/photos/qHajeosTxBU?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\" rel=\"nofollow\" data-href=\"https://unsplash.com/photos/qHajeosTxBU?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\"\u003eBryan Colosky\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2018-04-30T09:22:05Z",
  "modifiedTime": "2021-03-07T22:31:41Z"
}
