{
  "id": "cdf9a1c9-f7db-468b-91f5-250357fff2ee",
  "title": "Master Your KMM Workflow: Publishing to Local Maven for Faster Android Iteration",
  "link": "https://proandroiddev.com/master-your-kmm-workflow-publishing-to-local-maven-for-faster-android-iteration-de389df91159?source=rss----c72404660798---4",
  "description": "",
  "author": "Dobri Kostadinov",
  "published": "Sun, 08 Jun 2025 11:45:21 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "mobile-app-development",
    "maven",
    "kotlin-multiplatform",
    "android",
    "androiddev"
  ],
  "byline": "Dobri Kostadinov",
  "length": 6971,
  "excerpt": "You’re an Android developer, excited by the promise of Kotlin Multiplatform Mobile (KMM) to share business logic across platforms. You’ve set up your KMM project, your shared module is taking shape…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Streamline Your Kotlin Multiplatform Mobile Development with publishToMavenLocalimage source: AIIntroYou’re an Android developer, excited by the promise of Kotlin Multiplatform Mobile (KMM) to share business logic across platforms. You’ve set up your KMM project, your shared module is taking shape, and now comes the moment of truth: how do you seamlessly integrate and iterate on this shared library within your Android application during development?If you’ve found yourself wrestling with the idea of constantly publishing to a remote repository just to test a small change, you’ve hit a common and frustrating wall.This article is your guide to breaking down that wall. We’ll explore the power of Gradle’s publishToMavenLocal task and the mavenLocal() repository. This powerful duo allows you to publish your KMM shared module directly to your local Maven repository, making it instantly available for consumption by your Android app (or any other local project) without touching a remote server.By the end of this guide, you’ll have a streamlined, offline-capable development workflow that significantly speeds up your KMM integration.Why Local Maven? The BenefitsBefore we dive into the “how,” let’s solidify the “why.” Leveraging a local Maven repository for KMM development offers several compelling advantages:Blazing Fast Iteration: Instead of waiting for a CI/CD pipeline to build, test, and push your KMM library to a remote repository, you can publish locally in seconds. This allows for near-instant feedback on changes made in your shared module.Offline Development: Once your KMM library is published locally, your Android app can consume it even without an internet connection.Reduced CI/CD Load: Frequent small changes don’t necessitate triggering your precious (and sometimes costly) CI/CD pipelines.Simplified Testing: Testing changes in your KMM module directly within the context of your Android application becomes straightforward.Isolation of Experimental Changes: Want to try out a new feature or refactor without affecting others? Local publishing allows you to do this safely.Streamlined Debugging: A local dependency often makes debugging flow between your shared module and the Android app more seamless.Understanding the Local Maven RepositoryWhen we talk about a “local Maven repository,” we’re referring to a directory on your machine where Gradle (and Maven) stores published artifacts.Default locations:macOS / Linux: ~/.m2/repositoryWindows: C:\\Users\\\u003cyour-username\u003e\\.m2\\repositoryInside this directory, published libraries are organized by their Maven coordinates:groupId → artifactId → version.Example:~/.m2/repository/com/yourcompany/kmm/shared-library/1.0.0-SNAPSHOT/Setting Up Your KMM Project for Local PublishingWe’ll assume a standard KMM project structure, where your Android application (androidApp) depends on your shared KMM module (shared).The core of local publishing lies in configuring your shared/build.gradle.kts file.Apply the maven-publish PluginThis plugin is essential for enabling publishing capabilities in your Gradle module.plugins { kotlin(\"multiplatform\") id(\"com.android.library\") id(\"maven-publish\")}Define Group and VersionUse a consistent groupId and a -SNAPSHOT suffix for development versions.group = \"com.yourcompany.kmm\"version = \"1.0.0-SNAPSHOT\"Configure Android Library Publishing (If Applicable)If your shared module targets Android, tell Gradle which variant to publish:android { namespace = \"com.yourcompany.kmm.shared\" compileSdk = 34sourceSets[\"main\"].manifest.srcFile(\"src/androidMain/AndroidManifest.xml\") publishing { singleVariant(\"release\") }}Configure the publishing Block for KMMProvide metadata for your library:publishing { publications { withType\u003cMavenPublication\u003e { pom { name = \"Your KMM Shared Library\" description = \"A shared Kotlin Multiplatform library for Android and iOS.\" url = \"https://github.com/your-org/your-kmm-project\" licenses { license { name = \"The Apache Software License, Version 2.0\" url = \"http://www.apache.org/licenses/LICENSE-2.0.txt\" } } developers { developer { id = \"your_dev_id\" name = \"Your Name\" email = \"your.email@example.com\" } } scm { connection = \"scm:git:github.com/your-org/your-kmm-project.git\" developerConnection = \"scm:git:ssh://github.com/your-org/your-kmm-project.git\" url = \"https://github.com/your-org/your-kmm-project\" } } } }}Running the Publish TaskPublishing is as simple as running a Gradle task from your project root:./gradlew :shared:publishToMavenLocalIf you have multiple targets, you can also use:./gradlew :shared:publishAllPublicationsToMavenLocalConsuming the Local KMM Library in Your Android AppAdd mavenLocal() to settings.gradle.ktsThis ensures that all modules in your project can resolve dependencies from your local Maven repository:dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() mavenLocal() }}Declare the Dependency in androidApp/build.gradle.ktsNow declare your shared module as a dependency:dependencies { implementation(\"com.yourcompany.kmm:shared:1.0.0-SNAPSHOT\")}Sync GradleAfter making these changes, sync your Gradle files in Android Studio.The Development WorkflowWith everything configured, your workflow becomes simple:Make Changes in your shared module.Publish Locally:./gradlew :shared:publishToMavenLocal3. Rebuild/Rerun your Android app in Android Studio.Hot Tips for Faster DevelopmentUse -SNAPSHOT versions for development.If needed, run ./gradlew clean or use Invalidate Caches / Restart in Android Studio.Common Pitfalls and TroubleshootingmavenLocal() must be in settings.gradle.kts.Make sure groupId, artifactId, and version match exactly.Don’t forget singleVariant(\"release\") in your android block.If caching issues occur, invalidate caches.When to Use Remote RepositoriespublishToMavenLocal is great for local development, but for stable releases you should publish to:Maven CentralPrivate Artifactory / NexusGitHub PackagesConclusionIntegrating Kotlin Multiplatform Mobile into your Android development workflow shouldn’t be a source of constant friction. By mastering the publishToMavenLocal task and configuring mavenLocal(), you unlock a much more efficient and enjoyable development experience.Go ahead — give it a try in your next KMM project and experience the boost in productivity for yourself!Dobri KostadinovAndroid Consultant | TrainerEmail me | Follow me on LinkedIn | Follow me on Medium | Buy me a coffee",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*p2QJRPQN14O2c3a5iHKi6A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"6081\"\u003eStreamline Your Kotlin Multiplatform Mobile Development with \u003ccode\u003epublishToMavenLocal\u003c/code\u003e\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@dobri.kostadinov?source=post_page---byline--de389df91159---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Dobri Kostadinov\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*PDWUz7RmoqP9kmFnZzGPUg.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eimage source: AI\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"09d7\"\u003eIntro\u003c/h2\u003e\u003cp id=\"60f7\"\u003eYou’re an Android developer, excited by the promise of Kotlin Multiplatform Mobile (KMM) to share business logic across platforms. You’ve set up your KMM project, your shared module is taking shape, and now comes the moment of truth: how do you seamlessly integrate and iterate on this shared library within your Android application during development?\u003c/p\u003e\u003cp id=\"da9f\"\u003eIf you’ve found yourself wrestling with the idea of constantly publishing to a remote repository just to test a small change, you’ve hit a common and frustrating wall.\u003c/p\u003e\u003cp id=\"b522\"\u003eThis article is your guide to breaking down that wall. We’ll explore the power of Gradle’s \u003ccode\u003epublishToMavenLocal\u003c/code\u003e task and the \u003ccode\u003emavenLocal()\u003c/code\u003e repository. This powerful duo allows you to publish your KMM shared module directly to your local Maven repository, making it instantly available for consumption by your Android app (or any other local project) without touching a remote server.\u003c/p\u003e\u003cp id=\"265c\"\u003eBy the end of this guide, you’ll have a streamlined, offline-capable development workflow that significantly speeds up your KMM integration.\u003c/p\u003e\u003ch2 id=\"d7e0\"\u003eWhy Local Maven? The Benefits\u003c/h2\u003e\u003cp id=\"123f\"\u003eBefore we dive into the “how,” let’s solidify the “why.” Leveraging a local Maven repository for KMM development offers several compelling advantages:\u003c/p\u003e\u003cul\u003e\u003cli id=\"14e4\"\u003e\u003cstrong\u003eBlazing Fast Iteration:\u003c/strong\u003e Instead of waiting for a CI/CD pipeline to build, test, and push your KMM library to a remote repository, you can publish locally in seconds. This allows for near-instant feedback on changes made in your shared module.\u003c/li\u003e\u003cli id=\"5159\"\u003e\u003cstrong\u003eOffline Development:\u003c/strong\u003e Once your KMM library is published locally, your Android app can consume it even without an internet connection.\u003c/li\u003e\u003cli id=\"eeb2\"\u003e\u003cstrong\u003eReduced CI/CD Load:\u003c/strong\u003e Frequent small changes don’t necessitate triggering your precious (and sometimes costly) CI/CD pipelines.\u003c/li\u003e\u003cli id=\"a789\"\u003e\u003cstrong\u003eSimplified Testing:\u003c/strong\u003e Testing changes in your KMM module directly within the context of your Android application becomes straightforward.\u003c/li\u003e\u003cli id=\"f0d8\"\u003e\u003cstrong\u003eIsolation of Experimental Changes:\u003c/strong\u003e Want to try out a new feature or refactor without affecting others? Local publishing allows you to do this safely.\u003c/li\u003e\u003cli id=\"2360\"\u003e\u003cstrong\u003eStreamlined Debugging:\u003c/strong\u003e A local dependency often makes debugging flow between your shared module and the Android app more seamless.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"a8ec\"\u003eUnderstanding the Local Maven Repository\u003c/h2\u003e\u003cp id=\"e7f0\"\u003eWhen we talk about a “local Maven repository,” we’re referring to a directory on your machine where Gradle (and Maven) stores published artifacts.\u003c/p\u003e\u003cp id=\"ee5c\"\u003eDefault locations:\u003c/p\u003e\u003cul\u003e\u003cli id=\"a95f\"\u003emacOS / Linux: \u003ccode\u003e~/.m2/repository\u003c/code\u003e\u003c/li\u003e\u003cli id=\"f9c6\"\u003eWindows: \u003ccode\u003eC:\\Users\\\u0026lt;your-username\u0026gt;\\.m2\\repository\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8c70\"\u003eInside this directory, published libraries are organized by their Maven coordinates:\u003c/p\u003e\u003cp id=\"26be\"\u003e\u003ccode\u003egroupId\u003c/code\u003e → \u003ccode\u003eartifactId\u003c/code\u003e → \u003ccode\u003eversion\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"bdfa\"\u003eExample:\u003c/p\u003e\u003cp id=\"3075\"\u003e\u003ccode\u003e~/.m2/repository/com/yourcompany/kmm/shared-library/1.0.0-SNAPSHOT/\u003c/code\u003e\u003c/p\u003e\u003ch2 id=\"18b5\"\u003eSetting Up Your KMM Project for Local Publishing\u003c/h2\u003e\u003cp id=\"671e\"\u003eWe’ll assume a standard KMM project structure, where your Android application (\u003ccode\u003eandroidApp\u003c/code\u003e) depends on your shared KMM module (\u003ccode\u003eshared\u003c/code\u003e).\u003c/p\u003e\u003cp id=\"707c\"\u003eThe core of local publishing lies in configuring your \u003ccode\u003eshared/build.gradle.kts\u003c/code\u003e file.\u003c/p\u003e\u003ch2 id=\"129d\"\u003eApply the \u003ccode\u003emaven-publish\u003c/code\u003e Plugin\u003c/h2\u003e\u003cp id=\"4693\"\u003eThis plugin is essential for enabling publishing capabilities in your Gradle module.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2ca7\"\u003eplugins {\u003cbr/\u003e    kotlin(\u0026#34;multiplatform\u0026#34;)\u003cbr/\u003e    id(\u0026#34;com.android.library\u0026#34;)\u003cbr/\u003e    id(\u0026#34;maven-publish\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"9917\"\u003eDefine Group and Version\u003c/h2\u003e\u003cp id=\"e3e6\"\u003eUse a consistent \u003ccode\u003egroupId\u003c/code\u003e and a \u003ccode\u003e-SNAPSHOT\u003c/code\u003e suffix for development versions.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0fee\"\u003egroup = \u0026#34;com.yourcompany.kmm\u0026#34;\u003cbr/\u003eversion = \u0026#34;1.0.0-SNAPSHOT\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"7e68\"\u003eConfigure Android Library Publishing (If Applicable)\u003c/h2\u003e\u003cp id=\"962d\"\u003eIf your shared module targets Android, tell Gradle which variant to publish:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"39b7\"\u003eandroid {\u003cbr/\u003e    namespace = \u0026#34;com.yourcompany.kmm.shared\u0026#34;\u003cbr/\u003e    compileSdk = 34\u003cp\u003esourceSets[\u0026#34;main\u0026#34;].manifest.srcFile(\u0026#34;src/androidMain/AndroidManifest.xml\u0026#34;)\u003cbr/\u003e    publishing {\u003cbr/\u003e        singleVariant(\u0026#34;release\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"a2b6\"\u003eConfigure the \u003ccode\u003epublishing\u003c/code\u003e Block for KMM\u003c/h2\u003e\u003cp id=\"b57a\"\u003eProvide metadata for your library:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e658\"\u003epublishing {\u003cbr/\u003e    publications {\u003cbr/\u003e        withType\u0026lt;MavenPublication\u0026gt; {\u003cbr/\u003e            pom {\u003cbr/\u003e                name = \u0026#34;Your KMM Shared Library\u0026#34;\u003cbr/\u003e                description = \u0026#34;A shared Kotlin Multiplatform library for Android and iOS.\u0026#34;\u003cbr/\u003e                url = \u0026#34;https://github.com/your-org/your-kmm-project\u0026#34;\u003cbr/\u003e                licenses {\u003cbr/\u003e                    license {\u003cbr/\u003e                        name = \u0026#34;The Apache Software License, Version 2.0\u0026#34;\u003cbr/\u003e                        url = \u0026#34;http://www.apache.org/licenses/LICENSE-2.0.txt\u0026#34;\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e                developers {\u003cbr/\u003e                    developer {\u003cbr/\u003e                        id = \u0026#34;your_dev_id\u0026#34;\u003cbr/\u003e                        name = \u0026#34;Your Name\u0026#34;\u003cbr/\u003e                        email = \u0026#34;your.email@example.com\u0026#34;\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e                scm {\u003cbr/\u003e                    connection = \u0026#34;scm:git:github.com/your-org/your-kmm-project.git\u0026#34;\u003cbr/\u003e                    developerConnection = \u0026#34;scm:git:ssh://github.com/your-org/your-kmm-project.git\u0026#34;\u003cbr/\u003e                    url = \u0026#34;https://github.com/your-org/your-kmm-project\u0026#34;\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"800b\"\u003eRunning the Publish Task\u003c/h2\u003e\u003cp id=\"e8a9\"\u003ePublishing is as simple as running a Gradle task from your project root:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"09ef\"\u003e./gradlew :shared:publishToMavenLocal\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ef5f\"\u003eIf you have multiple targets, you can also use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7321\"\u003e./gradlew :shared:publishAllPublicationsToMavenLocal\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d4c4\"\u003eConsuming the Local KMM Library in Your Android App\u003c/h2\u003e\u003ch2 id=\"dd29\"\u003eAdd \u003ccode\u003emavenLocal()\u003c/code\u003e to \u003ccode\u003esettings.gradle.kts\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"ef8a\"\u003eThis ensures that all modules in your project can resolve dependencies from your local Maven repository:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c820\"\u003edependencyResolutionManagement {\u003cbr/\u003e    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\u003cbr/\u003e    repositories {\u003cbr/\u003e        google()\u003cbr/\u003e        mavenCentral()\u003cbr/\u003e        mavenLocal()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"4c5d\"\u003eDeclare the Dependency in \u003ccode\u003eandroidApp/build.gradle.kts\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"1471\"\u003eNow declare your shared module as a dependency:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"68a7\"\u003edependencies {\u003cbr/\u003e    implementation(\u0026#34;com.yourcompany.kmm:shared:1.0.0-SNAPSHOT\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"a42d\"\u003eSync Gradle\u003c/h2\u003e\u003cp id=\"1d98\"\u003eAfter making these changes, sync your Gradle files in Android Studio.\u003c/p\u003e\u003ch2 id=\"9715\"\u003eThe Development Workflow\u003c/h2\u003e\u003cp id=\"d3f1\"\u003eWith everything configured, your workflow becomes simple:\u003c/p\u003e\u003col\u003e\u003cli id=\"e2c9\"\u003e\u003cstrong\u003eMake Changes\u003c/strong\u003e in your shared module.\u003c/li\u003e\u003cli id=\"3c28\"\u003e\u003cstrong\u003ePublish Locally:\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"d6f2\"\u003e./gradlew :shared:publishToMavenLocal\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5d1c\"\u003e\u003cstrong\u003e3. Rebuild/Rerun\u003c/strong\u003e your Android app in Android Studio.\u003c/p\u003e\u003ch2 id=\"fcf4\"\u003eHot Tips for Faster Development\u003c/h2\u003e\u003cul\u003e\u003cli id=\"1901\"\u003eUse \u003ccode\u003e-SNAPSHOT\u003c/code\u003e versions for development.\u003c/li\u003e\u003cli id=\"bcc6\"\u003eIf needed, run \u003ccode\u003e./gradlew clean\u003c/code\u003e or use \u003cem\u003eInvalidate Caches / Restart\u003c/em\u003e in Android Studio.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"108a\"\u003eCommon Pitfalls and Troubleshooting\u003c/h2\u003e\u003cul\u003e\u003cli id=\"6381\"\u003e\u003ccode\u003emavenLocal()\u003c/code\u003e must be in \u003ccode\u003esettings.gradle.kts\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"2882\"\u003eMake sure \u003ccode\u003egroupId\u003c/code\u003e, \u003ccode\u003eartifactId\u003c/code\u003e, and \u003ccode\u003eversion\u003c/code\u003e match exactly.\u003c/li\u003e\u003cli id=\"01ed\"\u003eDon’t forget \u003ccode\u003esingleVariant(\u0026#34;release\u0026#34;)\u003c/code\u003e in your \u003ccode\u003eandroid\u003c/code\u003e block.\u003c/li\u003e\u003cli id=\"50ed\"\u003eIf caching issues occur, invalidate caches.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"cfb6\"\u003eWhen to Use Remote Repositories\u003c/h2\u003e\u003cp id=\"5fc5\"\u003e\u003ccode\u003epublishToMavenLocal\u003c/code\u003e is great for local development, but for stable releases you should publish to:\u003c/p\u003e\u003cul\u003e\u003cli id=\"2123\"\u003eMaven Central\u003c/li\u003e\u003cli id=\"8c85\"\u003ePrivate Artifactory / Nexus\u003c/li\u003e\u003cli id=\"b147\"\u003eGitHub Packages\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"7876\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"980a\"\u003eIntegrating Kotlin Multiplatform Mobile into your Android development workflow shouldn’t be a source of constant friction. By mastering the \u003ccode\u003epublishToMavenLocal\u003c/code\u003e task and configuring \u003ccode\u003emavenLocal()\u003c/code\u003e, you unlock a much more efficient and enjoyable development experience.\u003c/p\u003e\u003cp id=\"8d0b\"\u003eGo ahead — give it a try in your next KMM project and experience the boost in productivity for yourself!\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0347\"\u003e\u003cem\u003eDobri Kostadinov\u003c/em\u003e\u003cbr/\u003eAndroid Consultant | Trainer\u003cbr/\u003e\u003ca href=\"mailto:dobri.kostadinov@gmail.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEmail me\u003c/a\u003e | \u003ca href=\"https://www.linkedin.com/in/dobrikostadinov/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFollow me on LinkedIn\u003c/a\u003e | \u003ca href=\"https://medium.com/@dobri.kostadinov\" rel=\"noopener\"\u003eFollow me on Medium\u003c/a\u003e | \u003ca href=\"https://www.buymeacoffee.com/dobri.kostadinov\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy me a coffee\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-06-08T11:45:21.133Z",
  "modifiedTime": null
}
