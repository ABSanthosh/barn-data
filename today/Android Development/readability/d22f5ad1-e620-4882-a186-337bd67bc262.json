{
  "id": "d22f5ad1-e620-4882-a186-337bd67bc262",
  "title": "Avoiding fake italic and bold text on Android",
  "link": "https://saket.me/android-fake-vs-true-bold-and-italic/",
  "description": "Changing line heights in Android using LineHeightSpan has this ugly side-effect where the cursor ends up being very tall, extending till the full line height instead of just the text height. I've decided to go to extreme lengths to fix this over the next few days. For science. pic.twitter.com/2tWLvDq1rz — Saket Narayan (@Saketme) November 24, […] The post Avoiding fake italic and bold text on Android appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Wed, 18 Dec 2019 00:08:59 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android",
    "textview"
  ],
  "byline": "Saket Narayan",
  "length": 4392,
  "excerpt": "When an italic or bold font is unavailable, Android commits a typographical sin by slanting or stretching the regular font. Here's how you can avoid it.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "Changing line heights in Android using LineHeightSpan has this ugly side-effect where the cursor ends up being very tall, extending till the full line height instead of just the text height. I've decided to go to extreme lengths to fix this over the next few days. For science. pic.twitter.com/2tWLvDq1rz — Saket Narayan (@Saketme) November 24, 2019 A few hours after posting the above tweet, I noticed something was off in the screenshot. The italic “Late Show” text wasn’t really italic — it was fake italic! If you’re unaware of what that means, here’s a primer: When Android fails to find a true bold or italic font, it compensates by stretching the glyphs of the upright font for fake bold and slanting them for fake italic. This behavior is consistent with most other platforms and web browsers. Here’s a comparison of my screenshot vs what it was supposed to look like: Notice how the true italic glyphs of Work Sans look optically correct. The difference in bold is glaring: Type designers create italic and bold fonts to introduce differentiation in text. Fake glyphs reduce that differentiation, and in doing that they defeat the purpose of their designers. Worse, they also hinder legibility by slanting and smearing letters in a way they weren’t designed to be. If you have friends who are designers, they will tell you that fake fonts are a typographical sin. The fake glyphs for Work Sans used in my screenshots aren’t that bad, but here are some examples that are worse: As Nyla Smith explains, each character in a true italic or bold is designed meticulously, normally with calligraphic or cursive flourishes, with optical corrections, and even changing the letterform altogether. So how do you avoid fake glyphs? The screenshots in my tweet were taken from my markdown editor app Press that highlights markdown using spans. Emphasized text is highlighted using StyleSpan(Typeface.ITALIC). The code can be imagined somewhat along the lines of, textView.typeface = resources.getFont(R.font.work_sans_regular) textView.text = SpannableStringBuilder(\"Appearing as a guest on David Letterman's\") .italic { append(\" *Late Show* \") } // from android-ktx .append(\"in 2010\") ... At the time of rendering, StyleSpan tries to find an italic font from the font family applied on the TextView. If the font is unavailable, it fakes italic by skewing the glyphs using textPaint.textSkewX = -0.25f. In the above example, Android doesn’t find an italic font because the TextView is only given the regular font. The fix is to apply the full font family instead of just one font: // Incorrect textView.typeface = resources.getFont(R.font.work_sans_regular) // Correct val fontFamily = ResourcesCompat.getFont(context, R.font.work_sans) textView.typeface = if (Build.VERSION.SDK_INT \u003e= 28) { Typeface.create(fontFamily, weight = 400, isItalic = true) } else { // Star this: https://issuetracker.google.com/issues/145311058 Typeface.create(fontFamily, styleInt = Typeface.BOLD_ITALIC) } res/font/work_sans.xml \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cfont-family xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e \u003cfont app:font=\"@font/work_sans_regular\" app:fontStyle=\"normal\" app:fontWeight=\"400\" /\u003e \u003cfont app:font=\"@font/work_sans_italic\" app:fontStyle=\"italic\" app:fontWeight=\"400\" /\u003e \u003cfont app:font=\"@font/work_sans_bold\" app:fontStyle=\"normal\" app:fontWeight=\"700\" /\u003e \u003c/font-family\u003e When using Xml, // Incorrect \u003cTextView ... android:fontFamily=\"@font/work_sans_bold_italic\" /\u003e // Incorrect \u003cTextView ... android:fontFamily=\"@font/work_sans_regular\" android:textStyle=\"bold|italic\" /\u003e // Correct \u003cTextView ... android:fontFamily=\"@font/work_sans\" android:textStyle=\"bold|italic\" /\u003e // If you're reading this in 2030 and minSdkVersion=28 has arrived, // then textFontWeight can be used if your font has multiple strong // variants like Medium (500), Bold (700), Black (900), etc. \u003cTextView android:fontFamily=\"@font/work_sans\" android:textFontWeight=\"700\" android:textStyle=\"italic\" /\u003e If you’re using a library that uses custom spans for formatting text, make sure that they’re not taking a shortcut by rendering fake styling. Here’s an exercise for you: if you’re using a custom font in your IDE, does it have a true italic variant? Thanks to Pooja Saxena for reviewing this article.",
  "image": "https://saket.me/wp-content/uploads/2019/12/fake_italic_vs_true_italic_feature.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\u003cblockquote data-width=\"550\" data-dnt=\"true\"\u003e\n\u003cp lang=\"en\" dir=\"ltr\"\u003eChanging line heights in Android using LineHeightSpan has this ugly side-effect where the cursor ends up being very tall, extending till the full line height instead of just the text height.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ve decided to go to extreme lengths to fix this over the next few days. For science. \u003ca href=\"https://t.co/2tWLvDq1rz\"\u003epic.twitter.com/2tWLvDq1rz\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e— Saket Narayan (@Saketme) \u003ca href=\"https://twitter.com/Saketme/status/1198498763603619840?ref_src=twsrc%5Etfw\"\u003eNovember 24, 2019\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eA few hours after posting the above tweet, I noticed something was off in the \u003ca href=\"https://pbs.twimg.com/media/EKHsRPfXUAA-CDT?format=jpg\u0026amp;name=large\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003escreenshot\u003c/a\u003e. The italic “Late Show” text wasn’t really italic — it was fake italic!\u003c/p\u003e\n\u003cp\u003eIf you’re unaware of what that means, here’s a primer: When Android fails to find a true bold or italic font, it compensates by stretching the glyphs of the upright font for fake bold and slanting them for fake italic. This behavior is consistent with most other platforms and web browsers. Here’s a comparison of my screenshot vs what it was supposed to look like:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://saket.me/wp-content/uploads/2019/12/work_sans_italic_fake_vs_true.gif\"\u003e\u003cimg data-attachment-id=\"1313\" data-permalink=\"https://saket.me/android-fake-vs-true-bold-and-italic/work_sans_italic_fake_vs_true/\" data-orig-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_italic_fake_vs_true.gif\" data-orig-size=\"1188,471\" data-comments-opened=\"0\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"Work Sans italic: fake vs true\" data-image-description=\"\" data-medium-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_italic_fake_vs_true-300x119.gif\" data-large-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_italic_fake_vs_true-1024x406.gif\" decoding=\"async\" loading=\"lazy\" width=\"1188\" height=\"471\" src=\"https://saket.me/wp-content/uploads/2019/12/work_sans_italic_fake_vs_true.gif\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNotice how the true italic glyphs of \u003ca href=\"https://fonts.google.com/specimen/Work+Sans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eWork Sans\u003c/a\u003e look optically correct. The difference in bold is glaring:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://saket.me/wp-content/uploads/2019/12/work_sans_bold_fake_vs_true.gif\"\u003e\u003cimg data-attachment-id=\"1314\" data-permalink=\"https://saket.me/android-fake-vs-true-bold-and-italic/work_sans_bold_fake_vs_true/\" data-orig-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_bold_fake_vs_true.gif\" data-orig-size=\"1188,471\" data-comments-opened=\"0\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"Work Sans bold: fake vs true\" data-image-description=\"\" data-medium-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_bold_fake_vs_true-300x119.gif\" data-large-file=\"https://saket.me/wp-content/uploads/2019/12/work_sans_bold_fake_vs_true-1024x406.gif\" decoding=\"async\" loading=\"lazy\" width=\"1188\" height=\"471\" src=\"https://saket.me/wp-content/uploads/2019/12/work_sans_bold_fake_vs_true.gif\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eType designers create italic and bold fonts to introduce \u003cem\u003edifferentiation\u003c/em\u003e in text. Fake glyphs reduce that differentiation, and in doing that they defeat the purpose of their designers. Worse, they also hinder legibility by slanting and smearing letters in a way they weren’t designed to be. If you have friends who are designers, they will tell you that fake fonts are a typographical sin.\u003c/p\u003e\n\u003cp\u003eThe fake glyphs for Work Sans used in my screenshots aren’t \u003cem\u003ethat\u003c/em\u003e bad, but here are some examples that are worse:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true.png\"\u003e\u003cimg data-attachment-id=\"1310\" data-permalink=\"https://saket.me/android-fake-vs-true-bold-and-italic/alegreya_italic_fake_vs_true/\" data-orig-file=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true.png\" data-orig-size=\"1656,699\" data-comments-opened=\"0\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"Alegreya italic: fake vs true\" data-image-description=\"\" data-medium-file=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-300x127.png\" data-large-file=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-1024x432.png\" decoding=\"async\" loading=\"lazy\" width=\"1656\" height=\"699\" src=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true.png\" srcset=\"https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true.png 1656w, https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-300x127.png 300w, https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-768x324.png 768w, https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-1024x432.png 1024w, https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-1200x507.png 1200w, https://saket.me/wp-content/uploads/2019/12/alegreya_italic_fake_vs_true-600x253.png 600w\" sizes=\"(max-width: 1656px) 100vw, 1656px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true.png\"\u003e\u003cimg data-attachment-id=\"1312\" data-permalink=\"https://saket.me/android-fake-vs-true-bold-and-italic/playfair_display_bold_fake_vs_true/\" data-orig-file=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true.png\" data-orig-size=\"1656,699\" data-comments-opened=\"0\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"Playfair Display bold: fake vs true\" data-image-description=\"\" data-medium-file=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-300x127.png\" data-large-file=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-1024x432.png\" decoding=\"async\" loading=\"lazy\" width=\"1656\" height=\"699\" src=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true.png\" srcset=\"https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true.png 1656w, https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-300x127.png 300w, https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-768x324.png 768w, https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-1024x432.png 1024w, https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-1200x507.png 1200w, https://saket.me/wp-content/uploads/2019/12/playfair_display_bold_fake_vs_true-600x253.png 600w\" sizes=\"(max-width: 1656px) 100vw, 1656px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAs \u003ca href=\"https://nvision-that.com/design-from-all-angles/i-is-for-italic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eNyla Smith explains\u003c/a\u003e, each character in a true italic or bold is designed meticulously, normally with calligraphic or cursive flourishes, with optical corrections, and even changing the letterform altogether.\u003c/p\u003e\n\u003ch4\u003eSo how do you avoid fake glyphs?\u003c/h4\u003e\n\u003cp\u003eThe screenshots in my tweet were taken from my markdown editor app \u003ca href=\"https://github.com/saket/press/\"\u003ePress\u003c/a\u003e that highlights markdown using spans. Emphasized text is highlighted using \u003ccode\u003eStyleSpan(Typeface.ITALIC)\u003c/code\u003e. The code can be imagined somewhat along the lines of,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etextView.typeface = resources.getFont(R.font.work_sans_regular)\ntextView.text = SpannableStringBuilder(\u0026#34;Appearing as a guest on David Letterman\u0026#39;s\u0026#34;)\n    .italic { append(\u0026#34; *Late Show* \u0026#34;) } // from android-ktx\n    .append(\u0026#34;in 2010\u0026#34;)\n    ...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the time of rendering, \u003ccode\u003eStyleSpan\u003c/code\u003e tries to find an italic font from the font family applied on the TextView. If the font is unavailable, it fakes italic by skewing the glyphs using \u003ccode\u003etextPaint.textSkewX = -0.25f\u003c/code\u003e. In the above example, Android doesn’t find an italic font because the \u003ccode\u003eTextView\u003c/code\u003e is only given the regular font. The fix is to apply the full font family instead of just one font:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Incorrect\ntextView.typeface = resources.getFont(R.font.work_sans_regular)\n\n// Correct\nval fontFamily = ResourcesCompat.getFont(context, R.font.work_sans)\ntextView.typeface = if (Build.VERSION.SDK_INT \u0026gt;= 28) {\n  Typeface.create(fontFamily, weight = 400, isItalic = true)\n} else {\n  // Star this: https://issuetracker.google.com/issues/145311058\n  Typeface.create(fontFamily, styleInt = Typeface.BOLD_ITALIC)\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eres/font/work_sans.xml\n\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\n\u0026lt;font-family xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;\u0026gt;\n\n  \u0026lt;font\n    app:font=\u0026#34;@font/work_sans_regular\u0026#34;\n    app:fontStyle=\u0026#34;normal\u0026#34;\n    app:fontWeight=\u0026#34;400\u0026#34; /\u0026gt;\n\n  \u0026lt;font\n    app:font=\u0026#34;@font/work_sans_italic\u0026#34;\n    app:fontStyle=\u0026#34;italic\u0026#34;\n    app:fontWeight=\u0026#34;400\u0026#34; /\u0026gt;\n\n  \u0026lt;font\n    app:font=\u0026#34;@font/work_sans_bold\u0026#34;\n    app:fontStyle=\u0026#34;normal\u0026#34;\n    app:fontWeight=\u0026#34;700\u0026#34; /\u0026gt;\n\u0026lt;/font-family\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using Xml,\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Incorrect\n\u0026lt;TextView\n  ...\n  android:fontFamily=\u0026#34;@font/work_sans_bold_italic\u0026#34;\n  /\u0026gt;\n\n// Incorrect\n\u0026lt;TextView\n  ...\n  android:fontFamily=\u0026#34;@font/work_sans_regular\u0026#34;\n  android:textStyle=\u0026#34;bold|italic\u0026#34;\n  /\u0026gt;\n\n// Correct\n\u0026lt;TextView\n  ...\n  android:fontFamily=\u0026#34;@font/work_sans\u0026#34;\n  android:textStyle=\u0026#34;bold|italic\u0026#34;\n  /\u0026gt;\n\n// If you\u0026#39;re reading this in 2030 and minSdkVersion=28 has arrived,\n// then textFontWeight can be used if your font has multiple strong\n// variants like Medium (500), Bold (700), Black (900), etc.\n\u0026lt;TextView\n  android:fontFamily=\u0026#34;@font/work_sans\u0026#34;\n  android:textFontWeight=\u0026#34;700\u0026#34;\n  android:textStyle=\u0026#34;italic\u0026#34;\n  /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you’re using a library that uses custom spans for formatting text, make sure that they’re not taking a \u003ca href=\"https://github.com/noties/Markwon/blob/b844f4db6c5404fd34bc2e078a584f14eb44fa00/markwon-core/src/main/java/io/noties/markwon/core/spans/EmphasisSpan.java#L15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003eshortcut\u003c/a\u003e by rendering fake styling.\u003c/p\u003e\n\u003cp\u003eHere’s an exercise for you: if you’re using a custom font in your IDE, does it have a true italic variant?\u003c/p\u003e\n\u003cp\u003eThanks to \u003ca href=\"https://twitter.com/anexasajoop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003ePooja Saxena\u003c/a\u003e for reviewing this article.\u003c/p\u003e\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2019-12-18T00:08:59Z",
  "modifiedTime": "2019-12-19T22:53:17Z"
}
