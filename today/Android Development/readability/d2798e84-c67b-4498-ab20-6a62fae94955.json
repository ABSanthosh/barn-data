{
  "id": "d2798e84-c67b-4498-ab20-6a62fae94955",
  "title": "How to Implement a Splash Screen in Jetpack Compose with the SplashScreen API.",
  "link": "https://blog.kotlin-academy.com/how-to-implement-a-splash-screen-in-jetpack-compose-with-the-splashscreen-api-6f2767ede9d9?source=rss----e57b304801ef---4",
  "description": "IntroductionContinue reading on Kt. Academy »",
  "author": "Besong-Anong Ernest Egbenchong II",
  "published": "Tue, 06 Aug 2024 05:42:24 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "android",
    "jetpack-compose",
    "splash-screen",
    "splashscreen-api"
  ],
  "byline": "Besong-Anong Ernest Egbenchong II",
  "length": 975,
  "excerpt": "When designing for a better user experience, the load time of app resources can significantly impact user interactions. To reduce waiting time when preparing app resources, a splash screen can be…",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "Photo by Mika Baumeister on UnsplashIntroductionWhen designing for a better user experience, the load time of app resources can significantly impact user interactions.To reduce waiting time when preparing app resources, a splash screen can be helpful. Splash screens offer a unique and appealing experience to users but can be challenging to build.In this blog post, you’ll learn how to create a simple splash screen using the SplashScreen API. The API includes pre-defined animations at app launch that feature:An into-app motion at launch,A splash screen displaying an app icon, andA transition to the app itself; making it the standard choice for implementing splash screens.Additionally, the API provides an interface to control the splash screen’s visibility and is backward compatible.Implementation StepsTargeting users on Android 11 (API 30) and below:Add the SplashScreen core library in your build.gradle file.implementation(\"androidx.core:core-splashscreen:1.0.1\")",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*JSn9qX3-d0ZiQX3W",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@besonganongernest?source=post_page-----6f2767ede9d9--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Besong-Anong Ernest Egbenchong II\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*67OBoTFSsWYbQ_zAsILDZw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://blog.kotlin-academy.com/?source=post_page-----6f2767ede9d9--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Kt. Academy\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*2grDGjzH0tfX8XiaF4Izaw.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@kommumikation?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMika Baumeister\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"5c7f\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"152a\"\u003eWhen designing for a better user experience, the load time of app resources can significantly impact user interactions.\u003c/p\u003e\u003cp id=\"5be4\"\u003eTo reduce waiting time when preparing app resources, a splash screen can be helpful. Splash screens offer a unique and appealing experience to users but can be challenging to build.\u003c/p\u003e\u003cp id=\"6fe9\"\u003eIn this blog post, you’ll learn how to create a simple splash screen using the \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/core/splashscreen/SplashScreen\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSplashScreen API\u003c/a\u003e. The API includes pre-defined animations at app launch that feature:\u003c/p\u003e\u003cul\u003e\u003cli id=\"14d0\"\u003eAn into-app motion at launch,\u003c/li\u003e\u003cli id=\"0d0c\"\u003eA splash screen displaying an app icon, and\u003c/li\u003e\u003cli id=\"7557\"\u003eA transition to the app itself; making it the standard choice for implementing splash screens.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"3cfa\"\u003eAdditionally, the API provides an interface to control the splash screen’s visibility and is backward compatible.\u003c/p\u003e\u003ch2 id=\"b9e9\"\u003eImplementation Steps\u003c/h2\u003e\u003ch2 id=\"4267\"\u003eTargeting users on Android 11 (API 30) and below:\u003c/h2\u003e\u003col\u003e\u003cli id=\"785c\"\u003eAdd the SplashScreen core library in your \u003ccode\u003ebuild.gradle\u003c/code\u003e file.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"c636\"\u003eimplementation(\u0026#34;androidx.core:core-splashscreen:1.0.1\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-08-06T05:42:24.217Z",
  "modifiedTime": null
}
