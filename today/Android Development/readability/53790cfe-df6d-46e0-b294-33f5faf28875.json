{
  "id": "53790cfe-df6d-46e0-b294-33f5faf28875",
  "title": "Kotlin K2 FIR Quickstart Guide",
  "link": "https://handstandsam.com/2024/05/30/kotlin-k2-fir-quickstart-guide/",
  "description": "I wrote this Kotlin K2 FIR guide because I was not able to find any guides or examples to get started with FIR for static analysis. K2 is now finally stable in Kotlin 2.0.0 and future versions, so FIR will be the recommended way of doing static analysis. Background Starting Kotlin 1.x you could only […]",
  "author": "Sam Edwards",
  "published": "Fri, 31 May 2024 01:18:21 +0000",
  "source": "https://handstandsam.com/feed/",
  "categories": [
    "Updates"
  ],
  "byline": "Sam Edwards Published May 30, 2024",
  "length": 1862,
  "excerpt": "I wrote this Kotlin K2 FIR guide because I was not able to find any guides or examples to get started with FIR for static analysis. K2 is now finally stable in Kotlin 2.0.0 and future versions, so FIR will be the recommended way of doing static analysis.",
  "siteName": "",
  "favicon": "",
  "text": "I wrote this Kotlin K2 FIR guide because I was not able to find any guides or examples to get started with FIR for static analysis. K2 is now finally stable in Kotlin 2.0.0 and future versions, so FIR will be the recommended way of doing static analysis. Background Starting Kotlin 1.x you could only use PSI (Program Structure Interface) to create an AST (Abstract Syntax Tree) to run static analysis. Kotlin’s K2 Compiler is powered by a new Frontend Intermediate Representation (FIR). It still uses PSI to create the initial model, but transforms that into FIR which is a semantic model that is independent from any compiler backend (JVM, JS, Native, etc). Step 1 Add the Kotlin Embedded Compiler Dependency implementation(\"org.jetbrains.kotlin:kotlin-compiler-embeddable:2.0.0\") Step 2 Use the code in the Gist: https://gist.github.com/handstandsam/9a561fc78b593039d1dd500fae14b355 Yes, this is a really short post, but it’s more so here so that you’ll discover the Gist from a search and be able to get started using K2’s FIR model! Conclusion FIR is much more useful in understanding what the code is instead of the original syntax. That being said, you can still reach back into the code that the FIR model is derived from to gain more context as needed. If you are building any Static Analysis tooling, it’s HIGHLY suggested to start building it on FIR going forward. Credits This implementation is based on: https://github.com/cashapp/zipline/blob/4fa1014c833c46fd8c4b6b6add83786a2e4ea618/zipline-api-validator/src/main/kotlin/app/cash/zipline/api/validator/fir/KotlinFirLoader.kt https://github.com/cashapp/redwood/blob/afe1c9f5f95eec3cff46837a4b2749cbaf72af8b/redwood-tooling-schema/src/main/kotlin/app/cash/redwood/tooling/schema/schemaParserFir.kt https://github.com/cashapp/redwood/pull/992",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n\t\t\u003cmain id=\"content\" role=\"main\"\u003e\n\n\t\t\t\n\t\t\t\t\n\u003carticle id=\"post-2047\" itemscope=\"itemscope\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"blogPost\"\u003e\n\t\t\n\t\n\t\u003cdiv itemprop=\"mainContentOfPage\"\u003e\n\t\t\n\u003cp\u003eI wrote this Kotlin K2 FIR guide because I was not able to find any guides or examples to get started with FIR for static analysis. \u003ca href=\"https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/\"\u003eK2 is now finally stable in Kotlin 2.0.0\u003c/a\u003e and future versions, so FIR will be the recommended way of doing static analysis.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_.webp\"\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"336\" src=\"https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-1024x336.webp\" alt=\"\" srcset=\"https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-1024x336.webp 1024w, https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-300x98.webp 300w, https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-768x252.webp 768w, https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-1536x504.webp 1536w, https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_-700x230.webp 700w, https://handstandsam.com/wp-content/uploads/2024/05/DSGN-15525-Blog-Post-about-Kotlin-2.0_kotlinlang.org_.webp 2000w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eBackground\u003c/h2\u003e\n\n\n\n\u003cp\u003eStarting Kotlin 1.x you could only use PSI (Program Structure Interface) to create an AST (Abstract Syntax Tree) to run static analysis.\u003c/p\u003e\n\n\n\n\u003cp\u003eKotlin’s \u003ca href=\"https://kotlinlang.org/docs/k2-compiler-migration-guide.html\"\u003eK2 Compiler\u003c/a\u003e is powered by a new Frontend Intermediate Representation (FIR). It still uses PSI to create the initial model, but transforms that into FIR which is a semantic model that is independent from any compiler backend (JVM, JS, Native, etc).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1684\" height=\"986\" src=\"https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM.png\" alt=\"\" srcset=\"https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM.png 1684w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM-300x176.png 300w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM-1024x600.png 1024w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM-768x450.png 768w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM-1536x899.png 1536w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-9.29.48 PM-700x410.png 700w\" sizes=\"(max-width: 1684px) 100vw, 1684px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eStep 1\u003c/h2\u003e\n\n\n\n\u003cp\u003eAdd the Kotlin Embedded Compiler Dependency\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eimplementation(\u0026#34;\u003cspan\u003eorg.jetbrains.kotlin:kotlin-compiler-embeddable:2.0.0\u0026#34;)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2\u003eStep 2\u003c/h2\u003e\n\n\n\n\u003cp\u003eUse the code in the Gist: \u003ca href=\"https://gist.github.com/handstandsam/9a561fc78b593039d1dd500fae14b355\"\u003ehttps://gist.github.com/handstandsam/9a561fc78b593039d1dd500fae14b355\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eYes, this is a really short post, but it’s more so here so that you’ll discover the Gist from a search and be able to get started using K2’s FIR model!\u003c/p\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eFIR is much more useful in understanding what the code is instead of the original syntax. That being said, you can still reach back into the code that the FIR model is derived from to gain more context as needed.  If you are building any Static Analysis tooling, it’s \u003cspan\u003eHIGHLY\u003c/span\u003e suggested to start building it on FIR going forward.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCredits\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis implementation is based on:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cashapp/zipline/blob/4fa1014c833c46fd8c4b6b6add83786a2e4ea618/zipline-api-validator/src/main/kotlin/app/cash/zipline/api/validator/fir/KotlinFirLoader.kt\"\u003ehttps://github.com/cashapp/zipline/blob/4fa1014c833c46fd8c4b6b6add83786a2e4ea618/zipline-api-validator/src/main/kotlin/app/cash/zipline/api/validator/fir/KotlinFirLoader.kt\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/cashapp/redwood/blob/afe1c9f5f95eec3cff46837a4b2749cbaf72af8b/redwood-tooling-schema/src/main/kotlin/app/cash/redwood/tooling/schema/schemaParserFir.kt\"\u003ehttps://github.com/cashapp/redwood/blob/afe1c9f5f95eec3cff46837a4b2749cbaf72af8b/redwood-tooling-schema/src/main/kotlin/app/cash/redwood/tooling/schema/schemaParserFir.kt\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/cashapp/redwood/pull/992\"\u003ehttps://github.com/cashapp/redwood/pull/992\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\t\t\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\u003c/article\u003e\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\u003c/main\u003e\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
