{
  "id": "056b8886-4404-4d79-914d-3bf3c6fb5e1a",
  "title": "Sharing code between test modules",
  "link": "https://blog.danlew.net/2022/08/16/sharing-code-between-test-modules/",
  "description": "In 2015, I wrote a post about sharing code between unit tests and instrumentation tests on Android. Iain Cunningham just pointed out that the method I outlined no longer works.That’s fine for me because I haven’t used that method in years! Nowadays I use modules,",
  "author": "Dan Lew",
  "published": "Tue, 16 Aug 2022 13:00:16 GMT",
  "source": "https://blog.danlew.net/rss/",
  "categories": [
    "android"
  ],
  "byline": "Dan Lew",
  "length": 1618,
  "excerpt": "In 2015, I wrote a post about sharing code between unit tests and instrumentation tests on Android. Iain Cunningham just pointed out that the method I outlined no longer works. That’s fine for me because I haven’t used that method in years! Nowadays I use modules, which provide a far superior method of solving the problem (and is the method Google promotes now as well). Here’s how that works: 1. Start with a module called :library. 2. Create a second module named :library-shared-test and put",
  "siteName": "Dan Lew Codes",
  "favicon": "",
  "text": "In 2015, I wrote a post about sharing code between unit tests and instrumentation tests on Android. Iain Cunningham just pointed out that the method I outlined no longer works.That’s fine for me because I haven’t used that method in years! Nowadays I use modules, which provide a far superior method of solving the problem (and is the method Google promotes now as well). Here’s how that works: Start with a module called :library.Create a second module named :library-shared-test and put :library as a dependency of it.Implement your shared test utilities in :library-shared-test.Now, here’s the trick: add :library-shared-test as a dependency to your tests in :library.Even though it seems like you’re creating a circular dependency in step four, you’re not. Instead, you’re creating a dependency chain from :library -\u003e :library-shared-test -\u003e :library’s tests.I’ve put up a demonstration project here if that helps your understanding.There is one huge advantage this method has over the old one: any module can use :library-shared-test now. If :library-shared-test contains useful utilities or fakes, then anyone consuming :library can also test using those now, too.It should be fairly painless to go from the old method to the new one, and you get some bonuses along the way. Go for it!Edit: After publishing, Zac Sweers pointed out to me that there's a Gradle test fixtures plugin which basically does the same thing as outlined above, but better. It doesn't work on Kotlin Android projects yet, so the advice above is still good for now, but for non-kotlin-android projects you should probably use that instead.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"site-main\"\u003e\n\u003carticle\u003e\n\n    \u003cheader\u003e\n\n        \n\n        \n\n\n        \n\n\n    \u003c/header\u003e\n\n    \u003csection\u003e\n        \u003cp\u003eIn 2015, I wrote \u003ca href=\"https://blog.danlew.net/2015/11/02/sharing-code-between-unit-tests-and-instrumentation-tests-on-android/\"\u003ea post about sharing code between unit tests and instrumentation tests on Android\u003c/a\u003e. \u003ca href=\"https://blog.danlew.net/2015/11/02/sharing-code-between-unit-tests-and-instrumentation-tests-on-android/#comment-5949181098\"\u003eIain Cunningham\u003c/a\u003e just pointed out that the method I outlined \u003ca href=\"https://stackoverflow.com/questions/72218645/shared-srcdirs-between-test-and-androidtest-unresolved-references-after-upgrade?ref=blog.danlew.net\"\u003eno longer works\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThat’s fine for me because I haven’t used that method in years! Nowadays I use modules, which provide a far superior method of solving the problem (and is the method Google promotes now as well). Here’s how that works: \u003c/p\u003e\u003col\u003e\u003cli\u003eStart with a module called \u003ccode\u003e:library\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eCreate a second module named \u003ccode\u003e:library-shared-test\u003c/code\u003e and put \u003ccode\u003e:library\u003c/code\u003e as a dependency of it.\u003c/li\u003e\u003cli\u003eImplement your shared test utilities in \u003ccode\u003e:library-shared-test\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eNow, here’s the trick: add \u003ccode\u003e:library-shared-test\u003c/code\u003e as a dependency to your tests in \u003ccode\u003e:library\u003c/code\u003e.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eEven though it seems like you’re creating a circular dependency in step four, you’re not. Instead, you’re creating a dependency chain from \u003ccode\u003e:library\u003c/code\u003e -\u0026gt; \u003ccode\u003e:library-shared-test\u003c/code\u003e -\u0026gt; \u003ccode\u003e:library\u003c/code\u003e’s tests.\u003c/p\u003e\u003cp\u003eI’ve put up \u003ca href=\"https://github.com/dlew/android-shared-test-module-example?ref=blog.danlew.net\"\u003ea demonstration project here\u003c/a\u003e if that helps your understanding.\u003c/p\u003e\u003cp\u003eThere is one huge advantage this method has over the old one: \u003cem\u003eany\u003c/em\u003e module can use \u003ccode\u003e:library-shared-test\u003c/code\u003e now. If \u003ccode\u003e:library-shared-test\u003c/code\u003e contains useful utilities or fakes, then anyone consuming \u003ccode\u003e:library\u003c/code\u003e can also test using those now, too.\u003c/p\u003e\u003cp\u003eIt should be fairly painless to go from the old method to the new one, and you get some bonuses along the way. Go for it!\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003cem\u003eEdit: After publishing, \u003ca href=\"https://twitter.com/ZacSweers?ref=blog.danlew.net\"\u003eZac Sweers\u003c/a\u003e pointed out to me that there\u0026#39;s \u003ca href=\"https://docs.gradle.org/current/userguide/java_testing.html?ref=blog.danlew.net#sec:java_test_fixtures\"\u003ea Gradle test fixtures plugin\u003c/a\u003e which basically does the same thing as outlined above, but better. \u003ca href=\"https://youtrack.jetbrains.com/issue/KT-50667?ref=blog.danlew.net\"\u003eIt doesn\u0026#39;t work on Kotlin Android projects yet\u003c/a\u003e, so the advice above is still good for now, but for non-kotlin-android projects you should probably use that instead.\u003c/em\u003e\u003c/p\u003e\n    \u003c/section\u003e\n\n    \n    \n\n\u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2022-08-16T13:00:16Z",
  "modifiedTime": "2022-08-16T13:42:29Z"
}
