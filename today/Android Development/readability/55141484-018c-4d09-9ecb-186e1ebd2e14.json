{
  "id": "55141484-018c-4d09-9ecb-186e1ebd2e14",
  "title": "The First Beta of Android 16",
  "link": "http://android-developers.googleblog.com/2025/01/first-beta-android16.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-01-23T11:30:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android",
    "android16",
    "Beta",
    "Featured",
    "latest"
  ],
  "byline": "",
  "length": 15362,
  "excerpt": "The first beta of Android 16 is now available. Developers and early adopters can now test features like adaptive apps, Live Updates, and more.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Matthew McCullough – VP of Product Management, Android Developer The first beta of Android 16 is now available, which means it's time to open the experience up to both developers and early adopters. You can now enroll any supported Pixel device here to get this and future Android Beta updates over-the-air. This build includes support for the future of app adaptivity, Live Updates, the Advanced Professional Video format, and more. We’re looking forward to hearing what you think, and thank you in advance for your continued help in making Android a platform that works for everyone. Android adaptive apps Users expect apps to work seamlessly on all their devices, regardless of display size and form factor. To that end, Android 16 is phasing out the ability for apps to restrict screen orientation and resizability on large screens. This is similar to features OEMs have added over the last several years to large screen devices to allow users to run apps at any window size and aspect ratio. On screens larger than 600dp wide, apps that target API level 36 will have app windows that resize; you should check your apps to ensure your existing UIs scale seamlessly, working well across portrait and landscape aspect ratios. We're providing frameworks, tooling, and libraries to help. Key changes: Manifest attributes and APIs that restrict orientation and resizing will be ignored for apps — but not games — on large screens. Timeline: Android 16 (2025): Changes apply to large screens (600dp in width) for apps targeting API level 36 (developers can opt-out) Android release in 2026: Changes apply to large screens for apps targeting API level 37 (no opt-out) It's a great time to make your app adaptive! You can test these overrides without targeting using the app compatibility framework by enabling the UNIVERSAL_RESIZABLE_BY_DEFAULT flag. Learn more about changes to orientation and resizability APIs in Android 16. Live Updates Live Updates are a new class of notifications that help users monitor and quickly access important ongoing activities. The new ProgressStyle notification template provides a consistent user experience for Live Updates, helping you build for these progress-centric user journeys: rideshare, delivery, and navigation. It includes support for custom icons for the start, end, and current progress tracking, segments and points, user journey states, milestones, and more. ProgressStyle notifications are suggested only for ride sharing, food delivery, and navigation use cases. @Override protected Notification getNotification() { return new Notification.Builder(mContext, CHANNEL_ID) .setSmallIcon(R.drawable.ic_app_icon) .setContentTitle(\"Ride requested\") .setContentText(\"Looking for nearby drivers\") .setStyle( new Notification.ProgressStyle() .addProgressSegment( new Notification.ProgressStyle.Segment(100) .setColor(COLOR_ORANGE) ).setProgressIndeterminate(true) ).build(); } Camera and media updates Android 16 advances support for the playback, creation, and editing of high-quality media, a critical use case for social and productivity apps. Advanced Professional Video Android 16 introduces support for the Advanced Professional Video (APV) codec which is designed to be used for professional level high quality video recording and post production. The APV codec standard has the following features: Perceptually lossless video quality (close to raw video quality) Low complexity and high throughput intra-frame-only coding (without pixel domain prediction) to better support editing workflows Support for high bit-rate range up to a few Gbps for 2K, 4K and 8K resolution content, enabled by a lightweight entropy coding scheme Frame tiling for immersive content and for enabling parallel encoding and decoding Support for various chroma sampling formats and bit-depths Support for multiple decoding and re-encoding without severe visual quality degradation Support multi-view video and auxiliary video like depth, alpha, and preview Support for HDR10/10+ and user-defined metadata A reference implementation of APV is provided through the OpenAPV project. Android 16 will implement support for the APV 422-10 Profile that provides YUV 422 color sampling along with 10-bit encoding and for target bitrates of up to 2Gbps. Camera night mode scene detection To help your app know when to switch to and from a night mode camera session, Android 16 adds EXTENSION_NIGHT_MODE_INDICATOR. If supported, it's available in the CaptureResult within Camera2. This is the API we briefly mentioned as coming soon in the \"How Instagram enabled users to take stunning low light photos\" blogpost. That post is a practical guide on how to implement night mode together with a case study that links higher-quality, in-app, night mode photos with an increase in the number of photos shared from the in-app camera. Vertical Text Android 16 adds low-level support for rendering and measuring text vertically to provide foundational vertical writing support for library developers. This is particularly useful for languages like Japanese that commonly use vertical writing systems. A new flag, VERTICAL_TEXT_FLAG, has been added to the Paint class. When this flag is set using Paint.setFlags, Paint’s text measurement APIs will report vertical advances instead of horizontal advances, and Canvas will draw text vertically. Note: Current high level text APIs, such as Text in Jetpack Compose, TextView, Layout classes and their subclasses do not support vertical writing systems, and do not support using the VERTICAL_TEXT_FLAG. val text = \"「春は、曙。」\" Box(Modifier .padding(innerPadding) .background(Color.White) .fillMaxSize() .drawWithContent { drawIntoCanvas { canvas -\u003e val paint = Paint().apply { textSize = 64.sp.toPx() } // Draw text vertically paint.flags = paint.flags or VERTICAL_TEXT_FLAG val height = paint.measureText(text) canvas.nativeCanvas.drawText( text, 0, text.length, size.width / 2, (size.height - height) / 2, paint ) } }) {} Accessibility Android 16 adds new accessibility APIs to help you bring your app to every user. Supplemental descriptions When an accessibility service describes a ViewGroup, it combines content labels from its child views. If you provide a contentDescription for the ViewGroup, accessibility services assume you are also overriding the content of non-focusable child views. This can be problematic if you want to label things like a drop down (e.g. \"Font Family\") while preserving the current selection for accessibility (e.g. \"Roboto\"). Android 16 adds setSupplementalDescription so you can provide text that provides information about a ViewGroup without overriding information from its children. Required form fields Android 16 adds setFieldRequired to AccessibilityNodeInfo so apps can tell an accessibility service that input to a form field is required. This is an important scenario for users filling out many types of forms, even things as simple as a required terms and conditions checkbox, helping users to consistently identify and quickly navigate between required fields. Generic ranging APIs Android 16 includes the new RangingManager, which provides ways to determine the distance and angle on supported hardware between the local device and a remote device. RangingManager supports the usage of a variety of ranging technologies such as BLE channel sounding, BLE RSSI-based ranging, Ultra-Wideband, and WiFi round trip time. Behavior changes With every Android release, we seek to make the platform more efficient and robust, balancing the needs of your apps against things like system performance and battery life. This can result in behavior changes that impact compatibility. ART internal changes Code that leverages internal structures of the Android Runtime (ART) may not work correctly on devices running Android 16 along with earlier Android versions that update the ART module through Google Play system updates. These structures are changing in ways that help improve the Android Runtime's (ART's) performance. Impacted apps will need to be updated. Relying on internal structures can always lead to compatibility problems, but it's particularly important to avoid relying on code (or libraries containing code) that leverages internal ART structures, since ART changes aren't tied to the platform version the device is running on; they go out to over a billion devices through Google Play system updates. For more information, see the Android 16 changes affecting all apps and the restrictions on non-SDK interfaces. Migration or opt-out required for predictive back For apps targeting Android 16 or higher and running on an Android 16 or higher device, the predictive back system animations (back-to-home, cross-task, and cross-activity) are enabled by default. Additionally, the deprecated onBackPressed is not called and KeyEvent.KEYCODE_BACK is no longer dispatched. If your app intercepts the back event and you haven't migrated to predictive back yet, update your app to use supported back navigation APIs or temporarily opt out by setting the android:enableOnBackInvokedCallback attribute to false in the \u003capplication\u003e or \u003cactivity\u003e tag of your app’s AndroidManifest.xml file. Predictive back support for 3-button navigation Android 16 brings predictive back support to 3-button navigation for apps that have properly migrated to predictive back. Long-pressing the back button initiates a predictive back animation, giving users a preview of where the back button takes them. This behavior applies across all areas of the system that support predictive back animations, including the system animations (back-to-home, cross-task, and cross-activity). Fixed rate work scheduling optimization Prior to targeting Android 16, when scheduleAtFixedRate missed a task execution due to being outside a valid process lifecycle, all missed executions will immediately execute when app returns to a valid lifecycle. When targeting Android 16, at most one missed execution of scheduleAtFixedRate will be immediately executed when the app returns to a valid lifecycle. This behavior change is expected to improve app performance. Please test the behavior to ensure your application is not impacted. You can also test by using the app compatibility framework and enabling the STPE_SKIP_MULTIPLE_MISSED_PERIODIC_TASKS compat flag. Ordered broadcast priority scope no longer global In Android 16, broadcast delivery order using the android:priority attribute or IntentFilter#setPriority() across different processes will not be guaranteed. Broadcast priorities for ordered broadcasts will only be respected within the same application process rather than across all system processes. Additionally, broadcast priorities will be automatically confined to the range (SYSTEM_LOW_PRIORITY + 1, SYSTEM_HIGH_PRIORITY - 1). Your application may be impacted if it does either of the following: 1. Your application has declared multiple processes that have set broadcast receiver priorities for the same intent. 2. Your application process interacts with other processes and has expectations around receiving a broadcast intent in a certain order. If the processes need to coordinate with each other, they should communicate using other coordination channels. Gemini Extensions Samsung just launched new Gemini Extensions on the S25 series, demonstrating new ways Android apps can integrate with the power of Gemini. We're working to make this functionality available on even more form factors. Two Android API releases in 2025 This preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have another release with new developer APIs in Q4. The Q2 major release will be the only release in 2025 to include planned behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; it will not include any app-impacting behavior changes. We'll continue to have quarterly Android releases. The Q1 and Q3 updates, which will land in-between the Q2 and Q4 API releases, will provide incremental updates to ensure continuous quality. We’re putting additional energy into working with our device partners to bring the Q2 release to as many devices as possible. There’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, tied to the major API level. How to get ready In addition to performing compatibility testing on this next major release, make sure that you're compiling your apps against the new SDK, and use the compatibility framework to enable targetSdkVersion-gated behavior changes as they become available for early testing. App compatibility The Android 16 Preview program runs from November 2024 until the final public release in Q2 of 2025. At key development milestones, we'll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We'll highlight critical APIs as they are ready to test in the preview program in blogs and on the Android 16 developer website. We’re targeting March of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. From that time you’ll have several months before the final release to complete your testing. The release timeline details are here. Get started with Android 16 Now that we've entered the beta phase, you can enroll any supported Pixel device to get this and future Android Beta updates over-the-air. If you don’t have a Pixel device, you can use the 64-bit system images with the Android Emulator in Android Studio. If you are currently on Android 16 Developer Preview 2 or are already in the Android Beta program, you will be offered an over-the-air update to Beta 1. If you are in Android 25Q1 Beta and would like to take the final stable release of 25Q1 and exit Beta, you need to ignore the over-the-air update to 25Q2 Beta 1 and wait for the release of 25Q1. We're looking for your feedback so please report issues and submit feature requests on the feedback page. The earlier we get your feedback, the more we can include in our work on the final release. For the best development experience with Android 16, we recommend that you use the latest preview of Android Studio (Meerkat). Once you’re set up, here are some of the things you should do: Compile against the new SDK, test in CI environments, and report any issues in our tracker on the feedback page. Test your current app for compatibility, learn whether your app is affected by changes in Android 16, and install your app onto a device or emulator running Android 16 and extensively test it. We’ll update the preview/beta system images and SDK regularly throughout the Android 16 release cycle. Once you’ve installed a beta build, you’ll automatically get future updates over-the-air for all later previews and Betas. For complete information, visit the Android 16 developer site.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjImJmFDXwpMRSRUyK3OsYHltR8btqa-mzT2Q34suhjJjOAOlKO_0DwVXzqtjCz_oRM8CD6UOFOGySl8HJTI16R7eMLEPT5-moqhGzQxtAPvnfsMpiPLLY-P5xgJ34XLSsDmj09xlsoPxt3upGcWzj4WMUa9XaeSp-nA16SxU8eQ58lONjZ9cdy13ylUAU/w1200-h630-p-k-no-nu/A16DP1-Feature%20%281%29.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjImJmFDXwpMRSRUyK3OsYHltR8btqa-mzT2Q34suhjJjOAOlKO_0DwVXzqtjCz_oRM8CD6UOFOGySl8HJTI16R7eMLEPT5-moqhGzQxtAPvnfsMpiPLLY-P5xgJ34XLSsDmj09xlsoPxt3upGcWzj4WMUa9XaeSp-nA16SxU8eQ58lONjZ9cdy13ylUAU/s1600/A16DP1-Feature%20%281%29.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003e Posted by Matthew McCullough – VP of Product Management, Android Developer\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9v1k9OJQJO50aFpos2ASIgjXE7nmTVN-CW65Pczg7bo1ttpaPNkO7mvQs6RBWEVwG70qgEiO0rNL5ARmP22Z42_G1KNz0kFFCs9TxrXifEuar13GP9aQ-2ql03rl99e7rPZm5sBKxo_uLL5hNP_lBPK82h2aRG7YcaN1r2QHCqnJIK-nOedMtxJnyJCY/s1600/android_16_platlogo_512px.png\"\u003e\u003cimg data-original-height=\"1024\" data-original-width=\"1024\" height=\"200\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9v1k9OJQJO50aFpos2ASIgjXE7nmTVN-CW65Pczg7bo1ttpaPNkO7mvQs6RBWEVwG70qgEiO0rNL5ARmP22Z42_G1KNz0kFFCs9TxrXifEuar13GP9aQ-2ql03rl99e7rPZm5sBKxo_uLL5hNP_lBPK82h2aRG7YcaN1r2QHCqnJIK-nOedMtxJnyJCY/s1600/android_16_platlogo_512px.png\" width=\"200\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe first beta of Android 16 is now available, which means it\u0026#39;s time to open the experience up to both developers and early adopters. You can now \u003ca href=\"https://www.google.com/android/beta\" target=\"_blank\"\u003eenroll any supported Pixel device here\u003c/a\u003e to get this and future Android Beta updates over-the-air.\u003c/p\u003e\n\n\u003cp\u003eThis build includes support for the future of app adaptivity, Live Updates, the Advanced Professional Video format, and more. We’re looking forward to \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003ehearing what you think\u003c/a\u003e, and thank you in advance for your continued help in making Android a platform that works for everyone.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eAndroid adaptive apps\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eUsers expect apps to work seamlessly on all their devices, regardless of display size and form factor. To that end, Android 16 is \u003ca href=\"https://android-developers.googleblog.com/2025/01/orientation-and-resizability-changes-in-android-16.html\" target=\"_blank\"\u003ephasing out the ability\u003c/a\u003e for apps to restrict screen orientation and resizability on large screens. This is similar to features OEMs have added over the last several years to large screen devices to allow users to run apps at any window size and aspect ratio.\u003c/p\u003e  \n\n\u003cp\u003eOn screens larger than 600dp wide, apps that target API level 36 will have app windows that resize; you should check your apps to ensure your existing UIs scale seamlessly, working well across portrait and landscape aspect ratios. We\u0026#39;re providing \u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/adaptive\" target=\"_blank\"\u003eframeworks, tooling, and libraries\u003c/a\u003e to help.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Two hands hold a folding phone, showing the Developer News feed in both the folded and unfolded states. The unfolded view shows more news items.\" height=\"157\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKxgc_eab40yKECqgwds3zvkDle2fG1UsRtIXMDHur_3IQrZiDEhKJ_AtXsq8bCg8sYNPKJkotyCQYf9xwLb1Mzj7BHtSQBMWlYWIlS42y8BmJ5sRaRHdGqaqt6J10RuXaSvAyOU68oxuhTvfAmKgtpi9UylaLuYQ4folY4PvmBUIZ61T76XhWZw7zupc/w640-h360/image2.png\" width=\"280\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch4\u003e\u003cspan\u003eKey changes:\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.android.com/about/versions/16/behavior-changes-16#implementation-details\" target=\"_blank\"\u003eManifest attributes and APIs that restrict orientation and resizing\u003c/a\u003e will be ignored for apps — but not games — on large screens.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003ch4\u003e\u003cspan\u003eTimeline:\u003c/span\u003e\u003c/h4\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eAndroid 16 (2025):\u003c/b\u003e Changes apply to large screens (600dp in width) for apps targeting API level 36 (developers can opt-out)\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eAndroid release in 2026:\u003c/b\u003e Changes apply to large screens for apps targeting API level 37 (no opt-out)\u003c/li\u003e\n\u003cli\u003eIt\u0026#39;s a great time to make your app adaptive! You can test these overrides without targeting using the \u003ca href=\"https://developer.android.com/guide/app-compatibility/test-debug\" target=\"_blank\"\u003eapp compatibility framework\u003c/a\u003e by enabling the \u003cspan\u003e\u003ca href=\"https://developer.android.com/about/versions/16/reference/compat-framework-changes#universal_resizable_by_default\" target=\"_blank\"\u003eUNIVERSAL_RESIZABLE_BY_DEFAULT\u003c/a\u003e\u003c/span\u003e flag. Learn more about \u003ca href=\"https://android-developers.googleblog.com/2025/01/orientation-and-resizability-changes-in-android-16.html\" target=\"_blank\"\u003echanges to orientation and resizability APIs in Android 16\u003c/a\u003e.\u003c/li\u003e   \n\u003c/ul\u003e\u003c/ul\u003e\n\n\n\u003ch2\u003e\u003cspan\u003eLive Updates\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eLive Updates are a new class of notifications that help users monitor and quickly access important ongoing activities.\u003c/p\u003e\n\n\u003cp\u003eThe new \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle\" target=\"_blank\"\u003e\u003cspan\u003eProgressStyle\u003c/span\u003e\u003c/a\u003e notification template provides a consistent user experience for Live Updates, helping you build for these progress-centric user journeys: rideshare, delivery, and navigation. It includes support for custom icons for the \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle#getProgressStartIcon%28%29\" target=\"_blank\"\u003estart\u003c/a\u003e, \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle#setProgressEndIcon%28android.graphics.drawable.Icon%29\" target=\"_blank\"\u003eend\u003c/a\u003e, and \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle#setProgressTrackerIcon%28android.graphics.drawable.Icon%29\" target=\"_blank\"\u003ecurrent\u003c/a\u003e progress tracking, \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle.Segment\" target=\"_blank\"\u003esegments\u003c/a\u003e and \u003ca href=\"https://developer.android.com/reference/android/app/Notification.ProgressStyle.Point\" target=\"_blank\"\u003epoints\u003c/a\u003e, user journey states, milestones, and more.\u003c/p\u003e\n\n\u003cp\u003eProgressStyle notifications are suggested only for ride sharing, food delivery, and navigation use cases.\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003e@Override\n\u003cspan\u003eprotected\u003c/span\u003e Notification \u003cspan\u003egetNotification\u003c/span\u003e() {\n   \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e Notification.Builder(mContext, CHANNEL_ID)\n      .setSmallIcon(R.drawable.ic_app_icon)\n      .setContentTitle(\u003cspan\u003e\u0026#34;Ride requested\u0026#34;\u003c/span\u003e)\n      .setContentText(\u003cspan\u003e\u0026#34;Looking for nearby drivers\u0026#34;\u003c/span\u003e)\n      .setStyle(\n          \u003cspan\u003enew\u003c/span\u003e Notification.ProgressStyle()\n          .addProgressSegment(\n              \u003cspan\u003enew\u003c/span\u003e Notification.ProgressStyle.Segment(\u003cspan\u003e100\u003c/span\u003e)\n                  .setColor(COLOR_ORANGE)\n           ).setProgressIndeterminate(\u003cspan\u003etrue\u003c/span\u003e)\n      ).build();\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2\u003e\u003cspan\u003eCamera and media updates\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 advances support for the playback, creation, and editing of high-quality media, a critical use case for social and productivity apps.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eAdvanced Professional Video\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 introduces support for the \u003ca href=\"https://www.ietf.org/archive/id/draft-lim-apv-00.html\" target=\"_blank\"\u003eAdvanced Professional Video\u003c/a\u003e (APV) codec which is designed to be used for professional level high quality video recording and post production.\u003c/p\u003e\n\n\u003cp\u003eThe APV codec standard has the following features:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003ePerceptually lossless video quality (close to raw video quality)\u003c/li\u003e\n\u003cli\u003eLow complexity and high throughput intra-frame-only coding (without pixel domain prediction) to better support editing workflows\u003c/li\u003e\n\u003cli\u003eSupport for high bit-rate range up to a few Gbps for 2K, 4K and 8K resolution content, enabled by a lightweight entropy coding scheme\u003c/li\u003e\n\u003cli\u003eFrame tiling for immersive content and for enabling parallel encoding and decoding\u003c/li\u003e\n\u003cli\u003eSupport for various chroma sampling formats and bit-depths\u003c/li\u003e\n\u003cli\u003eSupport for multiple decoding and re-encoding without severe visual quality degradation\u003c/li\u003e\n\u003cli\u003eSupport multi-view video and auxiliary video like depth, alpha, and preview\u003c/li\u003e\n\u003cli\u003eSupport for HDR10/10+ and user-defined metadata\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eA reference implementation of APV is provided through the \u003ca href=\"https://github.com/openapv/openapv\" target=\"_blank\"\u003eOpenAPV project\u003c/a\u003e. Android 16 will \u003ca href=\"https://developer.android.com/reference/android/media/MediaFormat#MIMETYPE_VIDEO_APV\" target=\"_blank\"\u003eimplement support\u003c/a\u003e for the APV 422-10 Profile that provides YUV 422 color sampling along with 10-bit encoding and for target bitrates of up to 2Gbps.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eCamera night mode scene detection\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eTo help your app know when to switch to and from a night mode camera session, Android 16 adds \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CaptureResult#EXTENSION_NIGHT_MODE_INDICATOR\" target=\"_blank\"\u003eEXTENSION_NIGHT_MODE_INDICATOR\u003c/a\u003e\u003c/span\u003e. If supported, it\u0026#39;s available in the \u003ca href=\"https://developer.android.com/reference/android/hardware/camera2/CaptureResult\" target=\"_blank\"\u003e\u003cspan\u003eCaptureResult\u003c/span\u003e\u003c/a\u003e within Camera2.\u003c/p\u003e\n\n\u003cp\u003eThis is the API we briefly mentioned as coming soon in the \u003ca href=\"https://android-developers.googleblog.com/2024/12/instagram-on-android-low-light-photos.html\" target=\"_blank\"\u003e\u0026#34;How Instagram enabled users to take stunning low light photos\u0026#34; blogpost\u003c/a\u003e. That post is a practical guide on how to implement night mode together with a case study that links higher-quality, in-app, night mode photos with an increase in the number of photos shared from the in-app camera.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eVertical Text\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 adds low-level support for rendering and measuring text vertically to provide foundational vertical writing support for library developers. This is particularly useful for languages like Japanese that commonly use vertical writing systems. A new flag, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Paint#VERTICAL_TEXT_FLAG\" target=\"_blank\"\u003eVERTICAL_TEXT_FLAG\u003c/a\u003e\u003c/span\u003e, has been added to the \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Paint\" target=\"_blank\"\u003ePaint\u003c/a\u003e\u003c/span\u003e class. When this flag is set using \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Paint#setFlags%28int%29\" target=\"_blank\"\u003ePaint.setFlags\u003c/a\u003e\u003c/span\u003e, Paint’s text measurement APIs will report vertical advances instead of horizontal advances, and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/graphics/Canvas\" target=\"_blank\"\u003eCanvas\u003c/a\u003e\u003c/span\u003e will draw text vertically.\u003c/p\u003e\n\n\u003cblockquote\u003e\u003cb\u003eNote:\u003c/b\u003e Current high level text APIs, such as Text in Jetpack Compose, TextView, Layout classes and their subclasses do not support vertical writing systems, and do not support using the \u003cspan\u003eVERTICAL_TEXT_FLAG\u003c/span\u003e.\u003c/blockquote\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e text = \u003cspan\u003e\u0026#34;「春は、曙。」\u0026#34;\u003c/span\u003e\nBox(Modifier\n  .padding(innerPadding)\n  .background(Color.White)\n  .fillMaxSize()\n  .drawWithContent {\n     drawIntoCanvas { canvas -\u0026gt;\n       \u003cspan\u003eval\u003c/span\u003e paint = Paint().apply {\n         textSize = \u003cspan\u003e64.\u003c/span\u003esp.toPx()\n       }\n       \u003cspan\u003e// Draw text vertically\u003c/span\u003e\n       paint.flags = paint.flags or VERTICAL_TEXT_FLAG\n       \u003cspan\u003eval\u003c/span\u003e height = paint.measureText(text)\n       canvas.nativeCanvas.drawText(\n         text, \u003cspan\u003e0\u003c/span\u003e, text.length, size.width / \u003cspan\u003e2\u003c/span\u003e, (size.height - height) / \u003cspan\u003e2\u003c/span\u003e, paint\n       )\n     }\n  }) \n{}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2\u003e\u003cspan\u003eAccessibility\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eAndroid 16 adds new accessibility APIs to help you bring your app to every user.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eSupplemental descriptions\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eWhen an accessibility service describes a \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/ViewGroup\" target=\"_blank\"\u003eViewGroup\u003c/a\u003e\u003c/span\u003e, it combines content labels from its child views. If you provide a \u003cspan\u003econtentDescription\u003c/span\u003e for the \u003cspan\u003eViewGroup\u003c/span\u003e, accessibility services assume you are also overriding the content of non-focusable child views. This can be problematic if you want to label things like a drop down (e.g. \u0026#34;Font Family\u0026#34;) while preserving the current selection for accessibility (e.g. \u0026#34;Roboto\u0026#34;). Android 16 adds \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/View#setSupplementalDescription%28java.lang.CharSequence%29\" target=\"_blank\"\u003esetSupplementalDescription\u003c/a\u003e\u003c/span\u003e so you can provide text that provides information about a \u003cspan\u003eViewGroup\u003c/span\u003e without overriding information from its children.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eRequired form fields\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 adds \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setFieldRequired%28boolean%29\" target=\"_blank\"\u003esetFieldRequired\u003c/a\u003e\u003c/span\u003e to \u003cspan\u003e\u003ca href=\"https://developer.android.com/sdk/api_diff/b-beta1-incr/changes/android.view.accessibility.AccessibilityNodeInfo\" target=\"_blank\"\u003eAccessibilityNodeInfo\u003c/a\u003e\u003c/span\u003e so apps can tell an accessibility service that input to a form field is required. This is an important scenario for users filling out many types of forms, even things as simple as a required terms and conditions checkbox, helping users to consistently identify and quickly navigate between required fields.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eGeneric ranging APIs\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eAndroid 16 includes the new \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/ranging/RangingManager\" target=\"_blank\"\u003eRangingManager\u003c/a\u003e\u003c/span\u003e, which provides ways to determine the distance and angle on supported hardware between the local device and a remote device. RangingManager supports the usage of a variety of ranging technologies such as BLE channel sounding, BLE RSSI-based ranging, Ultra-Wideband, and WiFi round trip time.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eBehavior changes\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWith every Android release, we seek to make the platform more efficient and robust, balancing the needs of your apps against things like system performance and battery life. This can result in behavior changes that impact compatibility.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eART internal changes\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eCode that leverages internal structures of the Android Runtime (ART) may not work correctly on devices running Android 16 along with earlier Android versions that update the ART module through Google Play system updates. These structures are changing in ways that help improve the Android Runtime\u0026#39;s (ART\u0026#39;s) performance.\u003c/p\u003e\n\n\u003cp\u003eImpacted apps will need to be updated. Relying on internal structures can always lead to compatibility problems, but it\u0026#39;s particularly important to avoid relying on code (or libraries containing code) that leverages internal ART structures, since ART changes aren\u0026#39;t tied to the platform version the device is running on; they go out to over a \u003ca href=\"https://android-developers.googleblog.com/2023/11/the-secret-to-androids-improved-memory-latest-android-runtime-update.html\" target=\"_blank\"\u003ebillion devices through Google Play system updates\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor more information, see the \u003ca href=\"https://developer.android.com/about/versions/16/behavior-changes-all\" target=\"_blank\"\u003eAndroid 16 changes affecting all apps\u003c/a\u003e and \u003ca href=\"https://g.co/dev/appcompat\" target=\"_blank\"\u003ethe restrictions on non-SDK interfaces\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3\u003e\u003cspan\u003eMigration or opt-out required for predictive back\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor apps targeting Android 16 or higher and running on an Android 16 or higher device, the predictive back system animations (back-to-home, cross-task, and cross-activity) are enabled by default. Additionally, the deprecated \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity#onBackPressed%28%29\" target=\"_blank\"\u003eonBackPressed\u003c/a\u003e\u003c/span\u003e is not called and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/view/KeyEvent#KEYCODE_BACK\" target=\"_blank\"\u003eKeyEvent.KEYCODE_BACK\u003c/a\u003e\u003c/span\u003e is no longer dispatched.\u003c/p\u003e\n\n\u003cp\u003eIf your app intercepts the back event and you haven\u0026#39;t migrated to predictive back yet, \u003ca href=\"https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture#update-custom\" target=\"_blank\"\u003eupdate your app to use supported back navigation APIs\u003c/a\u003e or temporarily opt out by setting the \u003cspan\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/activity-element#enabledCallback\" target=\"_blank\"\u003eandroid:enableOnBackInvokedCallback\u003c/a\u003e\u003c/span\u003e attribute to \u003cspan\u003efalse\u003c/span\u003e in the \u003cspan\u003e\u0026lt;application\u0026gt;\u003c/span\u003e or \u003cspan\u003e\u0026lt;activity\u0026gt;\u003c/span\u003e tag of your app’s AndroidManifest.xml file.\u003c/p\u003e\n  \n\u003ch3\u003e\u003cspan\u003ePredictive back support for 3-button navigation\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAndroid 16 brings predictive back support to 3-button navigation for apps that have \u003ca href=\"https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture\" target=\"_blank\"\u003eproperly migrated to predictive back\u003c/a\u003e. Long-pressing the back button initiates a predictive back animation, giving users a preview of where the back button takes them.\u003c/p\u003e\n\n\u003cp\u003eThis behavior applies across all areas of the system that support predictive back animations, including the system animations (back-to-home, cross-task, and cross-activity).\u003c/p\u003e\n \n\u003ch3\u003e\u003cspan\u003eFixed rate work scheduling optimization\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003ePrior to targeting Android 16, when \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService#scheduleAtFixedRate%28java.lang.Runnable,%20long,%20long,%20java.util.concurrent.TimeUnit%29\" target=\"_blank\"\u003escheduleAtFixedRate\u003c/a\u003e\u003c/span\u003e missed a task execution due to being outside a valid \u003ca href=\"https://developer.android.com/guide/components/activities/process-lifecycle\" target=\"_blank\"\u003eprocess lifecycle\u003c/a\u003e, all missed executions will immediately execute when app returns to a valid lifecycle.\u003c/p\u003e\n\n\u003cp\u003eWhen targeting Android 16, at most one missed execution of \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService#scheduleAtFixedRate%28java.lang.Runnable,%20long,%20long,%20java.util.concurrent.TimeUnit%29\" target=\"_blank\"\u003escheduleAtFixedRate\u003c/a\u003e\u003c/span\u003e will be immediately executed when the app returns to a valid lifecycle. This behavior change is expected to improve app performance. Please test the behavior to ensure your application is not impacted. You can also test by using the \u003ca href=\"https://developer.android.com/guide/app-compatibility/test-debug\" target=\"_blank\"\u003eapp compatibility framework\u003c/a\u003e and enabling the \u003cspan\u003e\u003ca href=\"https://developer.android.com/about/versions/16/reference/compat-framework-changes#stpe_skip_multiple_missed_periodic_tasks\" target=\"_blank\"\u003eSTPE_SKIP_MULTIPLE_MISSED_PERIODIC_TASKS\u003c/a\u003e\u003c/span\u003e compat flag.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eOrdered broadcast priority scope no longer global\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn Android 16, broadcast delivery order using the \u003cspan\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/intent-filter-element#priority\" target=\"_blank\"\u003eandroid:priority\u003c/a\u003e\u003c/span\u003e attribute or \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/IntentFilter#setPriority%28int%29\" target=\"_blank\"\u003eIntentFilter#setPriority()\u003c/a\u003e\u003c/span\u003e across different processes will not be guaranteed. Broadcast priorities for ordered broadcasts will only be respected within the same application process rather than across all system processes.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, broadcast priorities will be automatically confined to the range (\u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/IntentFilter#SYSTEM_LOW_PRIORITY\" target=\"_blank\"\u003eSYSTEM_LOW_PRIORITY\u003c/a\u003e\u003c/span\u003e + 1, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/android/content/IntentFilter#SYSTEM_HIGH_PRIORITY\" target=\"_blank\"\u003eSYSTEM_HIGH_PRIORITY\u003c/a\u003e\u003c/span\u003e - 1).\u003c/p\u003e\n\n\u003cp\u003eYour application may be impacted if it does either of the following:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cp\u003e 1. Your application has declared multiple processes that have set broadcast receiver priorities for the same intent.\u003c/p\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cp\u003e 2. Your application process interacts with other processes and has expectations around receiving a broadcast intent in a certain order.\u003c/p\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eIf the processes need to coordinate with each other, they should communicate using other coordination channels.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eGemini Extensions\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://blog.google/products/gemini/new-gemini-app-updates-android/\" target=\"_blank\"\u003eSamsung just launched new Gemini Extensions\u003c/a\u003e on the S25 series, demonstrating new ways Android apps can integrate with the power of Gemini.  We\u0026#39;re working to make this functionality available on even more form factors.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003e\u003ca href=\"https://android-developers.googleblog.com/2024/10/android-sdk-release-update.html\" target=\"_blank\"\u003eTwo Android API releases in 2025\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis preview is for the next major release of Android with a planned launch in Q2 of 2025 and we plan to have another release with new developer APIs in Q4. The Q2 major release will be the only release in 2025 to include planned behavior changes that could affect apps. The Q4 minor release will pick up feature updates, optimizations, and bug fixes; it will not include any app-impacting behavior changes.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"2025 SDK release timeline showing a features only update in Q1 and Q3, a major SDK release with behavior changes, APIs, and features in Q2, and a minor SDK release with APIs and features in Q4\" height=\"71\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjSeVe1-ddLYBDekoJnJP_c3Qq3BOxmM8IOvx6DbeaQCpau5VrnpHG8G0UFayJsIrVZehmY-Sf85Wt8iDvxJ5M8D0fGOl4M_ucFffyosC4AgRae6R6gN-mNrm3Jp8XYsJtQVHGqv84obbkuy4DvFbDgwdBXeuQ_JOveA2IWC1hbned7OkXJfWClTO2Szac/w640-h164/image2.png\" width=\"280\"/\u003e\u003c/p\u003e\u003cp\u003eWe\u0026#39;ll continue to have quarterly Android releases. The Q1 and Q3 updates, which will land in-between the Q2 and Q4 API releases, will provide incremental updates to ensure continuous quality. We’re putting additional energy into working with our device partners to bring the Q2 release to as many devices as possible.\u003c/p\u003e\n\n\u003cp\u003eThere’s no change to the target API level requirements and the associated dates for apps in Google Play; our plans are for one annual requirement each year, tied to the major API level.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eHow to get ready\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn addition to performing compatibility testing on this next major release, make sure that you\u0026#39;re compiling your apps against the new SDK, and use the compatibility framework to enable \u003cspan\u003etargetSdkVersion\u003c/span\u003e-gated behavior changes as they become available for early testing.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eApp compatibility\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg alt=\"The Android 16 production timeline shows the release stages, highlighting \u0026#39;Beta Releases\u0026#39; and \u0026#39;Platform Stability\u0026#39; in blue and green, respectively, from December to the final release.\" height=\"71\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiBbIuWqc3CLlqC4HX6rYhlCxZY49JWtSbwP-hMLXp0ye65hGqDaVIO4vs1bbtP62ppppFKgikvBl0bFV3-a0Y6qzFGTLsW1cjr0-NxV110nJ_jYigMqSuQbZURg8uTRo0BdqQgkUZsRrtIvrNq2wc8bFNr3VYN2hBaTpgTppwTgv5feWz2r7xIqhyphenhyphenyEm4/s280/image2.png\" width=\"280\"/\u003e\u003c/p\u003e\u003cp\u003eThe Android 16 Preview program runs from November 2024 until the final public release in Q2 of 2025. At key development milestones, we\u0026#39;ll deliver updates for your development and testing environments. Each update includes SDK tools, system images, emulators, API reference, and API diffs. We\u0026#39;ll highlight critical APIs as they are ready to test in the preview program in blogs and on the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer website\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe’re targeting March of 2025 for our Platform Stability milestone. At this milestone, we’ll deliver final SDK/NDK APIs and also final internal APIs and app-facing system behaviors. From that time you’ll have several months before the final release to complete your testing. The release timeline details are here.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eGet started with Android 16\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow that we\u0026#39;ve entered the beta phase, you can \u003ca href=\"https://www.google.com/android/beta\" target=\"_blank\"\u003eenroll any supported Pixel device\u003c/a\u003e to get this and future Android Beta updates over-the-air. If you don’t have a Pixel device, you can \u003ca href=\"https://developer.android.com/about/versions/16/get#on_emulator\" target=\"_blank\"\u003euse the 64-bit system images with the Android Emulator\u003c/a\u003e in Android Studio.\u003c/p\u003e\n\n\u003cp\u003eIf you are currently on Android 16 Developer Preview 2 or are already in the Android Beta program, you will be offered an over-the-air update to Beta 1.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eIf you are in Android 25Q1 Beta and would like to take the final stable release of 25Q1 and exit Beta, you need to ignore the over-the-air update to 25Q2 Beta 1 and wait for the release of 25Q1.\u003c/b\u003e\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;re looking for your feedback so please \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003ereport issues and submit feature requests\u003c/a\u003e on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e. The earlier we get your feedback, the more we can include in our work on the final release.\u003c/p\u003e\n\n\u003cp\u003eFor the best development experience with Android 16, we recommend that you use the latest preview of \u003ca href=\"https://developer.android.com/studio/preview\" target=\"_blank\"\u003eAndroid Studio (Meerkat)\u003c/a\u003e. Once you’re set up, here are some of the things you should do:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eCompile against the new SDK, test in CI environments, and report any issues in our tracker on the \u003ca href=\"https://developer.android.com/about/versions/16/feedback\" target=\"_blank\"\u003efeedback page\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eTest your current app for compatibility, learn whether your app is affected by changes in Android 16, and install your app onto a device or emulator running Android 16 and extensively test it.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003cp\u003eWe’ll update the \u003ca href=\"https://developer.android.com/about/versions/16/download\" target=\"_blank\"\u003epreview/beta system images\u003c/a\u003e and SDK regularly throughout the Android 16 release cycle. Once you’ve installed a beta build, you’ll automatically get future updates over-the-air for all later previews and Betas.\u003c/p\u003e\n\n\u003cp\u003eFor complete information, visit the \u003ca href=\"https://developer.android.com/about/versions/16\" target=\"_blank\"\u003eAndroid 16 developer site\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": null,
  "modifiedTime": null
}
