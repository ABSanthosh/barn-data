{
  "id": "e0d4c368-7193-42d9-bbcd-e05585c7f137",
  "title": "Improving Comment Rendering on Android",
  "link": "https://instagram-engineering.com/improving-comment-rendering-on-android-a77d5db3d82e?source=rss----37dc2a3034f2--android",
  "description": "",
  "author": "Instagram Engineering",
  "published": "Sun, 01 May 2016 10:28:40 GMT",
  "source": "https://instagram-engineering.com/feed/tagged/android",
  "categories": [
    "android",
    "infra",
    "performance"
  ],
  "byline": "Instagram Engineering",
  "length": 5052,
  "excerpt": "Last weekend, thousands of Instagrammers from all over the world got together forWorldwide InstaMeet 11, one of Instagram’s community-organized, real-world meetups.#WWIM11 was our largest and most…",
  "siteName": "Instagram Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Last weekend, thousands of Instagrammers from all over the world got together forWorldwide InstaMeet 11, one of Instagram’s community-organized, real-world meetups.#WWIM11 was our largest and most geographically diverse InstaMeet ever — thousands of Instagrammers from Muscat to Bushwick shared over 100k photos.With over 300 million people around the world using Instagram every month, 65% of whom live outside the U.S., we’re always working to make Instagram faster and easier to use for people no matter where they are. And since our Android redesign last summer, we’ve continued to make performance improvements that allow us to scale better and faster.One of our recent improvements was addressing the challenge of rendering long, complex text on Android and how to optimize it for Instagram’s feed scrolling. We hope you can use some of what we learned to make your own apps faster!Product Requirements and Performance IssuesOn Instagram, your feed is composed of beautiful photos, videos, and text. For every photo and video, we display the full caption and the five latest comments. Since people frequently like using captions to tell the story behind their photos, they are often long, complex, and may contain links and emojis.The main issue with rendering such complex text is the performance hit it creates on scrolling. Text rendering in Android is slow. Even on a new device like the Nexus 5, the initial text drawing step for a complex caption with a dozen lines of text can take up to 50ms, and the text measuring step can take up to 30ms. All of these steps happen on the UI thread, and can cause the app to drop frames when the user is scrolling.Here are a few tips that have helped us optimize comment text rendering for the Instagram Android app.Use text.Layout, Cache text.LayoutAndroid has different widgets to display text on screen, but under the hood, they all use text.Layout to do rendering. For instance, the TextView widget will convert the String to a text.Layout object, and use canvas API to draw the text.Layout object on screen.text.Layout object is inefficient to create since it measures the text’s height in its constructor. Caching and reusing text.Layout instances can save time. The TextView widget in Android doesn’t provide a set TextLayout method on the TextView, but it’s not hard to write one yourself.Using a custom view to draw text.Layout manually also has performance advantages: TextView is a general-purpose widget which supports a lot of features. If we just needed to render static, clickable text on screen, things would be much simpler:We could avoid unnecessary conversion from SpannableStringBuilder to String. Depending on whether your text has links in it, TextView under the hood may do a copy operation on your string, which would cause a lot of allocations.We could always use StaticLayout, which is slightly faster than DynamicLayout. We could avoid all unnecessary logic in TextView: the logic to watch changes in text, the logic to properly layout the embedded drawable, the logic to draw the editor, and the logic to pop up a drop-down list.Using TextLayoutView, we can now cache and reuse the text.Layout, instead of spending 20ms every time when we call TextView#setText(CharSequence c).Warm up the Layout Cache after We Download the FeedSince we know we are going to show these comments after we download them, a simple improvement we made was warming up the cache after we download all of stories.Warm up TextLayoutCache after You Stop ScrollingAfter being able to cache the text.Layout, we get the constant measure time and binding time. But the initial drawing time is still relatively long. The 50ms drawing time results in noticeable jitters.Most of these 50ms times were taken by measuring text advances and generating text glyphs. They are all CPU operations. To improve text rendering speed, Android introduced TextLayoutCache in ICS to cache these intermediate results. It is an LRU cache and cache keys are text lines. If you hit the cache, the text drawing speed would be much faster.During our test, the cache could reduce the text drawing time from 30ms-50ms to 2ms-6ms.To get good drawing performance, we can warm up this cache before we draw the text on screen. The idea is virtually drawing this text on an off-screen canvas. This way we can warm up the TextLayoutCache on a background thread before we draw the text on screen.The size of TextLayoutCache is default to 0.5M, which is large enough to hold all comment text for a dozen photos. We decided to warm up the cache as soon as user stops scrolling, we look ahead and warm up five stories on the current scrolling direction. At anytime, we have at least five stories in cache on each direction.After applying all these optimizations, the number of dropped frames was reduced by 60% and the total number of jitters was reduced by 50%. We hope you can apply some of these learnings to your own apps to improve speed and performance. Let us know what you think — we look forward to hearing about your experiences!",
  "image": "https://miro.medium.com/v2/resize:fit:500/0*2PHSdD8lDulFwq42.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@InstagramEng?source=post_page-----a77d5db3d82e--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Instagram Engineering\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*8x_1IP3b75o5u9M4LgFBig.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://instagram-engineering.com/?source=post_page-----a77d5db3d82e--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Instagram Engineering\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*CPgwLHR6jno_tOmF0--7eg.jpeg\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"5d51\"\u003eLast weekend, thousands of Instagrammers from all over the world got together for\u003ca href=\"https://www.facebook.com/l.php?u=https%3A%2F%2Finstagram.com%2Fexplore%2Ftags%2Fwwim11%2F\u0026amp;h=YAQH2BAsU\u0026amp;s=1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWorldwide InstaMeet 11\u003c/a\u003e, one of Instagram’s community-organized, real-world meetups.\u003ca href=\"http://blog.instagram.com/post/114454091062/150323-wwim11\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e#WWIM11 was our largest and most geographically diverse\u003c/a\u003e InstaMeet ever — thousands of Instagrammers from \u003ca href=\"https://www.facebook.com/l.php?u=https%3A%2F%2Finstagram.com%2Fexplore%2Ftags%2Fwwim11muscat%2F\u0026amp;h=zAQEjdRax\u0026amp;s=1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMuscat\u003c/a\u003e to \u003ca href=\"https://www.facebook.com/l.php?u=https%3A%2F%2Finstagram.com%2Fexplore%2Ftags%2Fbushwickmeet%2F\u0026amp;h=RAQGmuTVz\u0026amp;s=1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBushwick\u003c/a\u003e shared over 100k photos.\u003c/p\u003e\u003cp id=\"299e\"\u003eWith over 300 million people around the world using Instagram every month, 65% of whom live outside the U.S., we’re always working to make Instagram faster and easier to use for people no matter where they are. And since our \u003ca href=\"http://www.facebook.com/l.php?u=http%3A%2F%2Finstagram-engineering.tumblr.com%2Fpost%2F97740520316%2Fbetterandroid\u0026amp;h=aAQGnKJd3\u0026amp;s=1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid redesign last summer\u003c/a\u003e, we’ve continued to make performance improvements that allow us to scale better and faster.\u003c/p\u003e\u003cp id=\"1e01\"\u003eOne of our recent improvements was addressing the challenge of rendering long, complex text on Android and how to optimize it for Instagram’s feed scrolling. We hope you can use some of what we learned to make your own apps faster!\u003c/p\u003e\u003ch2 id=\"035b\"\u003eProduct Requirements and Performance Issues\u003c/h2\u003e\u003cp id=\"0477\"\u003eOn Instagram, your feed is composed of beautiful photos, videos, and text. For every photo and video, we display the full caption and the five latest comments. Since people frequently like using captions to tell the story behind their photos, they are often long, complex, and may contain links and emojis.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9596\"\u003eThe main issue with rendering such complex text is the performance hit it creates on scrolling. Text rendering in Android is slow. Even on a new device like the Nexus 5, the initial text drawing step for a complex caption with a dozen lines of text can take up to 50ms, and the text measuring step can take up to 30ms. All of these steps happen on the UI thread, and can cause the app to drop frames when the user is scrolling.\u003c/p\u003e\u003cp id=\"1dab\"\u003eHere are a few tips that have helped us optimize comment text rendering for the Instagram Android app.\u003c/p\u003e\u003ch2 id=\"6919\"\u003eUse text.Layout, Cache text.Layout\u003c/h2\u003e\u003cp id=\"0f8b\"\u003eAndroid has different widgets to display text on screen, but under the hood, they all use text.Layout to do rendering. For instance, the TextView widget will convert the String to a text.Layout object, and use canvas API to draw the text.Layout object on screen.\u003c/p\u003e\u003cp id=\"a8be\"\u003etext.Layout object is inefficient to create since it measures the text’s height in its constructor. Caching and reusing text.Layout instances can save time. The TextView widget in Android doesn’t provide a set TextLayout method on the TextView, but it’s not hard to write one yourself.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6e95\"\u003eUsing a custom view to draw text.Layout manually also has performance advantages: TextView is a general-purpose widget which supports a lot of features. If we just needed to render static, clickable text on screen, things would be much simpler:\u003c/p\u003e\u003cul\u003e\u003cli id=\"dedf\"\u003eWe could avoid unnecessary conversion from SpannableStringBuilder to String. Depending on whether your text has links in it, TextView under the hood may do a copy operation on your string, which would cause a lot of allocations.\u003c/li\u003e\u003cli id=\"6f34\"\u003eWe could always use StaticLayout, which is slightly faster than DynamicLayout. We could avoid all unnecessary logic in TextView: the logic to watch changes in text, the logic to properly layout the embedded drawable, the logic to draw the editor, and the logic to pop up a drop-down list.\u003c/li\u003e\u003cli id=\"55c4\"\u003eUsing TextLayoutView, we can now cache and reuse the text.Layout, instead of spending 20ms every time when we call TextView#setText(CharSequence c).\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"cbae\"\u003eWarm up the Layout Cache after We Download the Feed\u003c/h2\u003e\u003cp id=\"537a\"\u003eSince we know we are going to show these comments after we download them, a simple improvement we made was warming up the cache after we download all of stories.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"82f2\"\u003eWarm up TextLayoutCache after You Stop Scrolling\u003c/h2\u003e\u003cp id=\"2b7e\"\u003eAfter being able to cache the text.Layout, we get the constant measure time and binding time. But the initial drawing time is still relatively long. The 50ms drawing time results in noticeable jitters.\u003c/p\u003e\u003cp id=\"b732\"\u003eMost of these 50ms times were taken by measuring text advances and generating text glyphs. They are all CPU operations. To improve text rendering speed, Android introduced TextLayoutCache in ICS to cache these intermediate results. It is an LRU cache and cache keys are text lines. If you hit the cache, the text drawing speed would be much faster.\u003c/p\u003e\u003cp id=\"2c80\"\u003eDuring our test, the cache could reduce the text drawing time from 30ms-50ms to 2ms-6ms.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6ebc\"\u003eTo get good drawing performance, we can warm up this cache before we draw the text on screen. The idea is virtually drawing this text on an off-screen canvas. This way we can warm up the TextLayoutCache on a background thread before we draw the text on screen.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"59d9\"\u003eThe size of TextLayoutCache is default to 0.5M, which is large enough to hold all comment text for a dozen photos. We decided to warm up the cache as soon as user stops scrolling, we look ahead and warm up five stories on the current scrolling direction. At anytime, we have at least five stories in cache on each direction.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"c4af\"\u003eAfter applying all these optimizations, the number of dropped frames was reduced by 60% and the total number of jitters was reduced by 50%. We hope you can apply some of these learnings to your own apps to improve speed and performance. Let us know what you think — we look forward to hearing about your experiences!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2015-03-25T10:28:00Z",
  "modifiedTime": null
}
