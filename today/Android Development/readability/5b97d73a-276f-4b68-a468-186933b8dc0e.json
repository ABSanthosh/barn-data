{
  "id": "5b97d73a-276f-4b68-a468-186933b8dc0e",
  "title": "Making ADB a little bit dynamic üì±",
  "link": "https://zarah.dev/2023/08/30/adb-deeplinks.html",
  "description": "Android has a lot of tools for developers and one that has been around for as long as I can remember is Android Debug Bridge (adb). It allows you to issue commands to an attached device, such as installing an app or starting an Activity.",
  "author": "Zarah Dominguez",
  "published": "2023-08-30T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "deeplinks",
    "adb"
  ],
  "byline": "",
  "length": 6373,
  "excerpt": "Android has a lot of tools for developers and one that has been around for as long as I can remember is Android Debug Bridge (adb). It allows you to issue co...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "Android has a lot of tools for developers and one that has been around for as long as I can remember is Android Debug Bridge (adb). It allows you to issue commands to an attached device, such as installing an app or starting an Activity. If I want to test deeplinks, for example, I can issue an adb command that simulates the system sending an Intent directed to my app: ‚ûú ~ adb shell am start -W -a android.intent.action.VIEW -d \"https://zarah.dev\" Starting: Intent { act=android.intent.action.VIEW dat=https://zarah.dev/... } Status: ok LaunchState: WARM Activity: dev.zarah.sdksample/.DetailActivity TotalTime: 165 WaitTime: 168 Complete I usually test on a real device, but sometimes I have to spin up an emulator to test on a different screen size or OS version, and sometimes I also attach my personal phone to charge. I have lost count of how many times I have tried to run an adb command and forgot that I have multiple devices attached. When the deeplink command is sent again in these circumstances: ‚ûú ~ adb shell am start -W -a android.intent.action.VIEW -d \"https://zarah.dev\" adb: more than one device/emulator One of the quirks of adb is that it tells us there is more than one device, but it doesn‚Äôt tell us what those devices are. To make the command work again, we need to include the serial number of the target device. We query for all devices via adb devices and then add the -s \u003cSERIAL_NUMBER\u003e option when running the command: ‚ûú ~ adb devices List of devices attached emulator-5554 device emulator-5556 device ‚ûú ~ adb -s emulator-5554 shell am start -W -a android.intent.action.VIEW -d \"https://zarah.dev\" Starting: Intent { act=android.intent.action.VIEW dat=https://zarah.dev/... } Status: ok LaunchState: WARM Activity: dev.zarah.sdksample/.DetailActivity TotalTime: 289 WaitTime: 306 Complete Wouldn‚Äôt it be nice if adb just straight up notifies us of the problem (multiple devices found), asks us how we want to fix the problem (which device should be the target), and then try again? After years and years of dealing with this, I finally gave in and wrote a script that just does that. üôä With a super handy deeplink alias, I can launch the script and provide it with a URI. If there‚Äôs only one device, it issues the command directly: ‚ûú ~ deeplink https://zarah.dev Starting: Intent { act=android.intent.action.VIEW dat=https://zarah.dev/... } Status: ok LaunchState: WARM Activity: dev.zarah.sdksample/.DetailActivity TotalTime: 165 WaitTime: 168 Complete But when there are multiple devices, it shows the list of devices available and asks for which one to target: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - emulator-5554 3 - emulator-5556 Select device: There is no need to faff about copying serial numbers, as entering the option should be enough. I added an actual device to the mix, and if I want to send the Intent to that device I can type in 1 and press enter: ‚ûú ~ deeplink https://zarah.dev Multiple devices found: 1 - R5CR7039LBJ 2 - emulator-5554 3 - emulator-5556 Select device: 1 Starting: Intent { act=android.intent.action.VIEW dat=https://zarah.dev/... } Status: ok LaunchState: WARM Activity: dev.zarah.sdksample/.DetailActivity TotalTime: 648 WaitTime: 667 Complete I did talk about using the deeplink alias before, but I have since updated it to run the script instead: alias deeplink='zsh /Users/zarah/scripts/deeplink.sh $1' The nuts and bolts of it üî© There is nothing truly special about how the script works, but it is doing a bunch of RegEx (which should tell you that it took me waaaaaay to long to figure out üòù). First, we call adb devices to figure out how many devices are available: all_devices=$(command adb devices) # Drop the title (\"List of devices attached\") all_devices=${all_devices#\"List of devices attached\"} Figure out how many recognised devices there are: num_matches=$(echo $all_devices | egrep -o \"([[:alnum:]-]+[[:space:]]+device$)\" | wc -l) If there‚Äôs only one device, send the command immediately; otherwise, we need to ask which device to send the command to: # If there are multiple, ask for which device to send the command to if [[ $num_matches -gt 1 ]]; then deeplink_with_multiple # Otherwise just send the ADB command else command adb shell am start -W -a android.intent.action.VIEW -d \\\"$URL\\\" fi In this case $URL is the variable that holds the input parameter (the URL passed into the script). If there are multiple devices, we do more string manipulation to present the list: # Display device serial numbers find_matches=$(echo $all_devices | egrep -io \"([[:alnum:]-]+[[:space:]]+device$)\" | awk '{print NR \" - \" $1}') printf \"Multiple devices found:\\n%s\\n\" \"$find_matches\" Notice the syntax is very similar to the alias I use for displaying the recently-checked out branches in git. Thank you 2021 Zarah for figuring that out! We then ask for the input: # Present chooser echo -n \"Select device: \" read -r selected_device Find the matching serial number chosen and issue the command: # Send the ADB command with the serial number serial_number=$(echo $find_matches | egrep \"${selected_device} - (.*)\" | awk '{print $3}') command adb -s $serial_number shell am start -W -a android.intent.action.VIEW -d \\\"$URL\\\" Do this for all the things! üí® The best thing about this script is it‚Äôs super extensible. By changing the issued adb commands in the script, I can have this convenience apply to basically any adb commands I usually use. It is especially handy for those things that require a bunch of adb commands, such as forwarding or reversing ports. A bunch of commands mean a bunch of places where -s \u003cSERIAL_NUMBER\u003e needs to be added and letting the script do it means we won‚Äôt miss adding it to any of them: adb -s $serial_number wait-for-device \u0026\u0026 adb -s $serial_number reverse tcp:9000 tcp:9000 \u0026\u0026 adb -s $serial_number reverse tcp:3000 tcp:3000 I am üí© at shell scripting (as evidenced by how much time I spent writing this tiny script), but I imagine it may be possible to make this work without having to have one version of the script for each adb command. Maybe a lookup map with the command name as the key and the adb command for a single device and the adb command for multiple devices as the values? Is that even possible? Maybe? It‚Äôd be nice. But for now, the script is available on Github.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eAndroid has a lot of tools for developers and one that has been around for as long as I can remember is \u003ca href=\"https://developer.android.com/tools/adb\"\u003eAndroid Debug Bridge\u003c/a\u003e (\u003ccode\u003eadb\u003c/code\u003e). It allows you to issue commands to an attached device, such as installing an app or starting an \u003ccode\u003eActivity\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf I want to test deeplinks, for example, I can issue an \u003ccode\u003eadb\u003c/code\u003e command that simulates the system sending an \u003ccode\u003eIntent\u003c/code\u003e directed to my app:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ adb shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\u0026#34;https://zarah.dev\u0026#34;\u003c/span\u003e\nStarting: Intent \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eact\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eandroid.intent.action.VIEW \u003cspan\u003edat\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://zarah.dev/... \u003cspan\u003e}\u003c/span\u003e\nStatus: ok\nLaunchState: WARM\nActivity: dev.zarah.sdksample/.DetailActivity\nTotalTime: 165\nWaitTime: 168\nComplete\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI usually test on a real device, but sometimes I have to spin up an emulator to test on a different screen size or OS version, and sometimes I also attach my personal phone to charge. I have lost count of how many times I have tried to run an \u003ccode\u003eadb\u003c/code\u003e command and forgot that I have multiple devices attached.\u003c/p\u003e\n\n\u003cp\u003eWhen the deeplink command is sent again in these circumstances:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ adb shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\u0026#34;https://zarah.dev\u0026#34;\u003c/span\u003e\nadb: more than one device/emulator\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOne of the quirks of \u003ccode\u003eadb\u003c/code\u003e is that it tells us there is more than one device, but it doesn‚Äôt tell us \u003cem\u003ewhat\u003c/em\u003e those devices are. To make the command work again, we need to include the serial number of the target device.\u003c/p\u003e\n\n\u003cp\u003eWe query for all devices via \u003ccode\u003eadb devices\u003c/code\u003e and then add the \u003ccode\u003e-s \u0026lt;SERIAL_NUMBER\u0026gt;\u003c/code\u003e option when running the command:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ adb devices\nList of devices attached\nemulator-5554\tdevice\nemulator-5556\tdevice\n\n‚ûú  ~ adb \u003cspan\u003e-s\u003c/span\u003e emulator-5554 shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\u0026#34;https://zarah.dev\u0026#34;\u003c/span\u003e\nStarting: Intent \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eact\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eandroid.intent.action.VIEW \u003cspan\u003edat\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://zarah.dev/... \u003cspan\u003e}\u003c/span\u003e\nStatus: ok\nLaunchState: WARM\nActivity: dev.zarah.sdksample/.DetailActivity\nTotalTime: 289\nWaitTime: 306\nComplete\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWouldn‚Äôt it be nice if \u003ccode\u003eadb\u003c/code\u003e just straight up notifies us of the problem (multiple devices found), asks us how we want to fix the problem (which device should be the target), and then try again?\u003c/p\u003e\n\n\u003cp\u003eAfter years and years of dealing with this, I finally gave in and wrote a script that just does that. üôä\u003c/p\u003e\n\n\u003cp\u003eWith a super handy \u003ccode\u003edeeplink\u003c/code\u003e alias, I can launch the script and provide it with a URI. If there‚Äôs only one device, it issues the command directly:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nStarting: Intent \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eact\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eandroid.intent.action.VIEW \u003cspan\u003edat\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://zarah.dev/... \u003cspan\u003e}\u003c/span\u003e\nStatus: ok\nLaunchState: WARM\nActivity: dev.zarah.sdksample/.DetailActivity\nTotalTime: 165\nWaitTime: 168\nComplete\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eBut when there are multiple devices, it shows the list of devices available and asks for which one to target:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nMultiple devices found:\n1 - R5CR7039LBJ\n2 - emulator-5554\n3 - emulator-5556\nSelect device: \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThere is no need to faff about copying serial numbers, as entering the option should be enough. I added an actual device to the mix, and if I want to send the \u003ccode\u003eIntent\u003c/code\u003e to that device I can type in \u003ccode\u003e1\u003c/code\u003e and press enter:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e‚ûú  ~ deeplink https://zarah.dev\nMultiple devices found:\n1 - R5CR7039LBJ\n2 - emulator-5554\n3 - emulator-5556\nSelect device: 1\nStarting: Intent \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eact\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003eandroid.intent.action.VIEW \u003cspan\u003edat\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003ehttps://zarah.dev/... \u003cspan\u003e}\u003c/span\u003e\nStatus: ok\nLaunchState: WARM\nActivity: dev.zarah.sdksample/.DetailActivity\nTotalTime: 648\nWaitTime: 667\nComplete\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI did talk about using the \u003ccode\u003edeeplink\u003c/code\u003e \u003ccode\u003ealias\u003c/code\u003e \u003ca href=\"https://zarah.dev/2022/02/08/android12-deeplinks.html\"\u003ebefore\u003c/a\u003e, but I have since updated it to run the script instead:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ealias \u003c/span\u003e\u003cspan\u003edeeplink\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;zsh /Users/zarah/scripts/deeplink.sh $1\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"the-nuts-and-bolts-of-it-\"\u003eThe nuts and bolts of it üî©\u003c/h3\u003e\n\n\u003cp\u003eThere is nothing truly special about how the script works, but it is doing a bunch of RegEx (which should tell you that it took me waaaaaay to long to figure out üòù).\u003c/p\u003e\n\n\u003cp\u003eFirst, we call \u003ccode\u003eadb devices\u003c/code\u003e to figure out how many devices are available:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eall_devices\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003ecommand \u003c/span\u003eadb devices\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# Drop the title (\u0026#34;List of devices attached\u0026#34;)\u003c/span\u003e\n\u003cspan\u003eall_devices\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eall_devices\u003c/span\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003e\u0026#34;List of devices attached\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFigure out how many recognised devices there are:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003enum_matches\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$all_devices\u003c/span\u003e | egrep \u003cspan\u003e-o\u003c/span\u003e \u003cspan\u003e\u0026#34;([[:alnum:]-]+[[:space:]]+device\u003c/span\u003e\u003cspan\u003e$)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003ewc\u003c/span\u003e \u003cspan\u003e-l\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf there‚Äôs only one device, send the command immediately; otherwise, we need to ask which device to send the command to:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# If there are multiple, ask for which device to send the command to\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003e$num_matches\u003c/span\u003e \u003cspan\u003e-gt\u003c/span\u003e 1 \u003cspan\u003e]]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ethen\n  \u003c/span\u003edeeplink_with_multiple\n\u003cspan\u003e# Otherwise just send the ADB command\u003c/span\u003e\n\u003cspan\u003eelse\n  \u003c/span\u003e\u003cspan\u003ecommand \u003c/span\u003eadb shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e$URL\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\n\u003cspan\u003efi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIn this case \u003ccode\u003e$URL\u003c/code\u003e is the variable that holds the input parameter (the URL passed into the script).\u003c/p\u003e\n\n\u003cp\u003eIf there are multiple devices, we do more string manipulation to present the list:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Display device serial numbers\u003c/span\u003e\n\u003cspan\u003efind_matches\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$all_devices\u003c/span\u003e | egrep \u003cspan\u003e-io\u003c/span\u003e \u003cspan\u003e\u0026#34;([[:alnum:]-]+[[:space:]]+device\u003c/span\u003e\u003cspan\u003e$)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003eawk\u003c/span\u003e \u003cspan\u003e\u0026#39;{print NR \u0026#34; - \u0026#34; $1}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eprintf\u003c/span\u003e \u003cspan\u003e\u0026#34;Multiple devices found:\u003c/span\u003e\u003cspan\u003e\\n\u003c/span\u003e\u003cspan\u003e%s\u003c/span\u003e\u003cspan\u003e\\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$find_matches\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNotice the syntax is very similar to the alias I use for displaying the \u003ca href=\"https://zarah.dev/2021/08/10/magic-reflog.html\"\u003erecently-checked out branches in git\u003c/a\u003e. Thank you 2021 Zarah for figuring that out!\u003c/p\u003e\n\n\u003cp\u003eWe then ask for the input:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Present chooser\u003c/span\u003e\n\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e-n\u003c/span\u003e \u003cspan\u003e\u0026#34;Select device: \u0026#34;\u003c/span\u003e\n\u003cspan\u003eread\u003c/span\u003e \u003cspan\u003e-r\u003c/span\u003e selected_device\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFind the matching serial number chosen and issue the command:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e# Send the ADB command with the serial number\u003c/span\u003e\n\u003cspan\u003eserial_number\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$find_matches\u003c/span\u003e | egrep \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eselected_device\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e - (.*)\u0026#34;\u003c/span\u003e | \u003cspan\u003eawk\u003c/span\u003e \u003cspan\u003e\u0026#39;{print $3}\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003ecommand \u003c/span\u003eadb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e$serial_number\u003c/span\u003e shell am start \u003cspan\u003e-W\u003c/span\u003e \u003cspan\u003e-a\u003c/span\u003e android.intent.action.VIEW \u003cspan\u003e-d\u003c/span\u003e \u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e$URL\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"do-this-for-all-the-things-\"\u003eDo this for all the things! üí®\u003c/h3\u003e\n\u003cp\u003eThe best thing about this script is it‚Äôs super extensible. By changing the issued \u003ccode\u003eadb\u003c/code\u003e commands in the script, I can have this convenience apply to basically any \u003ccode\u003eadb\u003c/code\u003e commands I usually use.\u003c/p\u003e\n\n\u003cp\u003eIt is especially handy for those things that require a bunch of \u003ccode\u003eadb\u003c/code\u003e commands, such as \u003ca href=\"https://developer.android.com/tools/adb#forwardports\"\u003eforwarding\u003c/a\u003e or reversing ports. A bunch of commands mean a bunch of places where \u003ccode\u003e-s \u0026lt;SERIAL_NUMBER\u0026gt;\u003c/code\u003e needs to be added and letting the script do it means we won‚Äôt miss adding it to any of them:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eadb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e$serial_number\u003c/span\u003e wait-for-device \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e adb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e$serial_number\u003c/span\u003e reverse tcp:9000 tcp:9000 \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e adb \u003cspan\u003e-s\u003c/span\u003e \u003cspan\u003e$serial_number\u003c/span\u003e reverse tcp:3000 tcp:3000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI am üí© at shell scripting (as evidenced by how much time I spent writing this tiny script), but I imagine it may be possible to make this work without having to have one version of the script for each \u003ccode\u003eadb\u003c/code\u003e command. Maybe a lookup map with the command name as the key and the \u003ccode\u003eadb\u003c/code\u003e command for a single device and the \u003ccode\u003eadb\u003c/code\u003e command for multiple devices as the values? Is that even possible? Maybe? It‚Äôd be nice.\u003c/p\u003e\n\n\u003cp\u003eBut for now, the script is \u003ca href=\"https://gist.github.com/zmdominguez/1b74a2fa6bb027870362a3ca5202a8df\"\u003eavailable on Github\u003c/a\u003e.\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
