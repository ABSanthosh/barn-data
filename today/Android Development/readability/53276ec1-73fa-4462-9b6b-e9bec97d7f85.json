{
  "id": "53276ec1-73fa-4462-9b6b-e9bec97d7f85",
  "title": "How I Work",
  "link": "https://www.zacsweers.dev/how-i-work/",
  "description": "A high level overview of my work style and how it helps improve my productivity.",
  "author": "Zac Sweers",
  "published": "Mon, 14 Jun 2021 06:36:25 GMT",
  "source": "https://www.zacsweers.dev/rss/",
  "categories": [
    "Personal Growth"
  ],
  "byline": "Zac Sweers",
  "length": 8211,
  "excerpt": "A high level overview of my work style and how it helps improve my productivity.",
  "siteName": "Zac Sweers",
  "favicon": "",
  "text": "14 Jun 2021 • 6 min read A high level overview of my work style and how it helps improve my productivity. Recently, I received this nice reply on Twitter:Seriously, how do you find the time to build so many things??— Gil Goldzweig Goldbaum (@GilLongName) April 13, 2021 There's some technique to my productivity and I'd like to try to describe it in this post. It's mostly focused around minimizing idle time and easing context switching. In turn it allows me to have high output and visibility while keeping work-life balance in harmony.What this is not: A prescriptive, \"10 tricks to improve your productivity\" guide. It works for me, it definitely won't work for everyone.Principles(in no particular order)Keep multiple clones of the main project. At any given point I'll have 3-5 branches going and it's nice to be able to put something down without soft-resetting my workspace. Sure, you can git stash or git commit -am \"WIP\", but still requires changing branches and re-syncing the IDE. Sometimes I even have multiple open at once.Minimize builds. If I can make a change without needing to build it, great! Dependency updates, simple refactorings, etc can all be committed and left to CI to build. Similarly - work in small well-isolated projects that build quickly and without much of a dependency dragnet. This is an excellent incentive to modularize.Don't wait for CI. CI will take its time and there's no real benefit to watching the console log or sitting idly while I wait. I have GitHub reminders set up with matchers for our common CI jobs so it will ping me on Slack if there's a failure. In the meantime, I'll switch to working on something else (more coding, code review, etc). If you maintain multiple clones like mentioned above, you can easily jump back in to fix small issues CI reports too without doing a whole context switch.Work on multiple things. Only 1-2 larger things, but I track a lot of small work I can pick up in idle moments. Dependency updates, small bugs/improvements, etc. I always feel like I have something I could do and as a result I don't feel limited by smaller gaps of time. This is where a lot of my OSS work happens too, as those aren't usually large scale tasks.Get it working first. Then optimize from there. Until I have a working (test) case, I have no idea if my changes work and likely to run in the wrong direction for too long. The first iteration of any solution is usually the stuff of technical interviewer nightmares. But it works!Use magic cursors, replace in path, and structural replace. I use these all the time and they are refactoring superpowers. They're also exceptionally useful for hand-processing bulk data rather than trying to script it. Low effort, high reward.Script migrations. Basic Kotlin scripting can do a lot of work in migrations for you. Not necessarily kscript even, just a simple scratch file or fun main() implementation usually suffices. It doesn't have to be precise, just enough to do most of the grunt work and let a human come through and clean up the rest. Low effort, high reward.Don't keep thoughts in ephemeral places. This includes in my head. If I'm so far down the rabbit hole in a thought that I'm worried about losing it all with an interruption, I'm too deep. I can barely remember names, why would I try to keep complex logic in there? Scribble things into comments and notes quickly and often. You know what's a super dumb but super simple way to remember a relevant line of code? I set a breakpoint on it. Not because I'm going to hit it in the debugger, but rather just because that highlight's a reminder for me later. I have to leave breadcrumbs because otherwise I will absolutely forget it.Put things down. This might feel obvious, but if I'm at a dead end on something then I'll just put it down for a bit. No reason to idle on something that's not clicking. The human mind operates on parallel tracks and even when something's on the back-burner, some part of your head'll still ponder it and come up with something later. If I'm on a time crunch and can't put it down for a few hours or a day, rubber duck debugging with a coworker for a few minutes is immensely helpful too.Leave breadcrumbs. Related to the above two, but if I'm getting pulled away from something I was in the middle of then leaving a short note or few comments allows me to switch back on to it when I return. For me, this completely mitigates just about any interruption I get throughout the day.Sleep is the best debugger. If I'm really stuck on something or not sure how to go about it, sleeping on it is the best tool.Embrace the gaps. Not everyone can context-switch easily, but I 100% believe it's a skill that can be practiced and a lot of it is down to mentality. If I react to every interaction like it's ruined my day, every interruption is going to ruin my day. If I've comments/notes/breadcrumbs, I can easily pick up where I left off.MiscWhile not principles really, these are some other relevant details of how I work:I work sort of when I feel like it. It's an extremely privileged position to be in and far from normal for work. I'm online during core hours obviously, but that's only really ~12-5pm my (NYC) time as most of my team is on the west coast. ~10hrs/week are when I feel like it, be it a few hours on the weekend or an hour after dinner.Some weeks I work way less than 40hrs. Some weeks I work way more. It's not for everyone, but right now it works well for me. If I worked a strict 9-5 right now, I would burn out. I'm equally fortunate that my team/company don't really care how I get my work done as long as I get it done. I'm still young-ish without many life responsibilities outside of work, so I'm gonna make the most of it while I can!I worked hard on working in bursts starting a few years ago. Train commutes or air travel were particularly good times with 15-45 minute gaps I could just jump into something. I wrote most of CatchUp this way. Being intentional about this makes a big difference in mindset about the limited time and I gradually reduced the minimum unit of time needed to feel productive.Meeting schedule: at the time of writing, I have 16 meetings on my calendar this upcoming week. 9-10 actually require my attendance and 4-5 of them are social. Not too heavy, not empty either.Doing small things that unblock other folks are a great way to build social capital. Whether that's doing a dependency update to pick up a fix, quick code review on the go, or answering a quick question to save them a lot of time searching. Low effort, high reward. My time is precious, but not so precious that I can't take a minute to help a coworker get ahead.I legitimately love what I do. I enjoy programming in my free time and I enjoy doing it for work. It is, in many ways, a meditative practice for me, like building legos or solving puzzles. This is, again, an extremely privileged position to be in and something that makes much of the above easier.I actually strongly dislike working from home (sorry, tech Twitter) because it makes me feel like I'm living at work. That's just me though! With us having no offices in NYC right now (let alone open ones), I spend most days working outside a local coffee shop. Working in bursts and avoiding builds locally is seriously helpful for preserving battery on the go like this. I actually work on a 13\" MacBook Pro these days (portability!), which also benefits from small/avoided builds.ClosingSome people are watchmakers, meticulously working on exactly one thing for days or weeks at a time until it's perfect. I am not a watchmaker. I'm more like a chef, preparing a number of dishes at once. Some are big, some are small, some are on the back burner, some are maybe boiling over. Sometimes all the burners are on and sometimes I'm not in the kitchen.Everyone's different, but this works well for me. I hope this is at least interesting for some and maybe even helpful for others. Please don't take it as gospel or anything resembling blanket advice though! Do what works best for you, try different things, identify what slows you down, and try to improve it.Thanks to Cli for proofreading this!",
  "image": "https://www.zacsweers.dev/content/images/size/w1200/2021/04/IMG_4692.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n  \u003cp\u003e\u003cspan\u003e14 Jun 2021\u003c/span\u003e\n    \u003ci\u003e•\u003c/i\u003e\n    \u003cspan\u003e6 min read\u003c/span\u003e\n  \u003c/p\u003e\n  \n    \u003cp\u003eA high level overview of my work style and how it helps improve my productivity.\u003c/p\u003e\n    \n    \u003cp\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/size/w1200/format/webp/2021/04/IMG_4692.jpeg\" data-src=\"/content/images/size/w1200/format/webp/2021/04/IMG_4692.jpeg\" alt=\"How I Work\"/\u003e\n\n    \u003c/p\u003e\n\u003c/div\u003e\u003cdiv\u003e\n    \u003cp\u003eRecently, I received this nice reply on Twitter:\u003c/p\u003e\u003cfigure\u003e\u003cblockquote\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eSeriously, how do you find the time to build so many things??\u003c/p\u003e— Gil Goldzweig Goldbaum (@GilLongName) \u003ca href=\"https://twitter.com/GilLongName/status/1381840648106557442?ref_src=twsrc%5Etfw\u0026amp;ref=zacsweers.dev\"\u003eApril 13, 2021\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003c/figure\u003e\u003cp\u003eThere\u0026#39;s some technique to my productivity and I\u0026#39;d like to try to describe it in this post. It\u0026#39;s mostly focused around minimizing idle time and easing context switching. In turn it allows me to have high output and visibility while keeping work-life balance in harmony.\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eWhat this is not:\u003c/strong\u003e A prescriptive, \u0026#34;10 tricks to improve your productivity\u0026#34; guide. It works for me, it definitely won\u0026#39;t work for everyone.\u003c/blockquote\u003e\u003ch2 id=\"principles\"\u003ePrinciples\u003c/h2\u003e\u003cp\u003e\u003cem\u003e(in no particular order)\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eKeep multiple clones of the main project.\u003c/strong\u003e At any given point I\u0026#39;ll have 3-5 branches going and it\u0026#39;s nice to be able to put something down without soft-resetting my workspace. Sure, you can \u003ccode\u003egit stash\u003c/code\u003e or \u003ccode\u003egit commit -am \u0026#34;WIP\u0026#34;\u003c/code\u003e, but still requires changing branches and re-syncing the IDE. Sometimes I even have multiple open at once.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMinimize builds.\u003c/strong\u003e If I can make a change without needing to build it, great! Dependency updates, simple refactorings, etc can all be committed and left to CI to build. Similarly - work in small well-isolated projects that build quickly and without much of a dependency dragnet. This is an excellent incentive to modularize.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t wait for CI.\u003c/strong\u003e CI will take its time and there\u0026#39;s no real benefit to watching the console log or sitting idly while I wait. I have GitHub reminders set up with matchers for our common CI jobs so it will ping me on Slack if there\u0026#39;s a failure. In the meantime, I\u0026#39;ll switch to working on something else (more coding, code review, etc). If you maintain multiple clones like mentioned above, you can easily jump back in to fix small issues CI reports too without doing a whole context switch.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eWork on multiple things.\u003c/strong\u003e Only 1-2 larger things, but I track a lot of small work I can pick up in idle moments. Dependency updates, small bugs/improvements, etc. I always feel like I have something I could do and as a result I don\u0026#39;t feel limited by smaller gaps of time. This is where a lot of my OSS work happens too, as those aren\u0026#39;t usually large scale tasks.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eGet it working first.\u003c/strong\u003e Then optimize from there. Until I have a working (test) case, I have no idea if my changes work and likely to run in the wrong direction for too long. The first iteration of any solution is usually the stuff of technical interviewer nightmares. But it works!\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eUse magic cursors, replace in path, and structural replace.\u003c/strong\u003e I use these \u003cem\u003eall the time\u003c/em\u003e and they are refactoring superpowers. They\u0026#39;re also exceptionally useful for hand-processing bulk data rather than trying to script it. Low effort, high reward.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eScript migrations.\u003c/strong\u003e Basic Kotlin scripting can do a lot of work in migrations for you. Not necessarily kscript even, just a simple scratch file or \u003ccode\u003efun main()\u003c/code\u003e implementation usually suffices. It doesn\u0026#39;t have to be precise, just enough to do most of the grunt work and let a human come through and clean up the rest. Low effort, high reward.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t keep thoughts in ephemeral places.\u003c/strong\u003e This includes in my head. If I\u0026#39;m so far down the \u003ca href=\"https://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/?ref=zacsweers.dev\"\u003erabbit hole\u003c/a\u003e in a thought that I\u0026#39;m worried about losing it all with an interruption, I\u0026#39;m too deep. I can barely remember names, why would I try to keep complex logic in there? Scribble things into comments and notes quickly and often. You know what\u0026#39;s a super dumb but super simple way to remember a relevant line of code? I set a breakpoint on it. Not because I\u0026#39;m going to hit it in the debugger, but rather just because that highlight\u0026#39;s a reminder for me later. I have to leave breadcrumbs because otherwise I will \u003cem\u003eabsolutely\u003c/em\u003e forget it.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ePut things down.\u003c/strong\u003e This might feel obvious, but if I\u0026#39;m at a dead end on something then I\u0026#39;ll just put it down for a bit. No reason to idle on something that\u0026#39;s not clicking. The human mind operates on parallel tracks and even when something\u0026#39;s on the back-burner, some part of your head\u0026#39;ll still ponder it and come up with something later. If I\u0026#39;m on a time crunch and can\u0026#39;t put it down for a few hours or a day, rubber duck debugging with a coworker for a few minutes is immensely helpful too.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLeave breadcrumbs.\u003c/strong\u003e Related to the above two, but if I\u0026#39;m getting pulled away from something I was in the middle of then leaving a short note or few comments allows me to switch back on to it when I return. For me, this completely mitigates just about any interruption I get throughout the day.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eSleep is the best debugger.\u003c/strong\u003e If I\u0026#39;m really stuck on something or not sure how to go about it, sleeping on it is the best tool.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eEmbrace the gaps.\u003c/strong\u003e Not everyone can context-switch easily, but I 100% believe it\u0026#39;s a skill that can be practiced and a lot of it is down to mentality. If I react to every interaction like it\u0026#39;s ruined my day, every interruption is going to ruin my day. If I\u0026#39;ve comments/notes/breadcrumbs, I can easily pick up where I left off.\u003c/p\u003e\u003ch2 id=\"misc\"\u003eMisc\u003c/h2\u003e\u003cp\u003eWhile not principles really, these are some other relevant details of how I work:\u003c/p\u003e\u003cul\u003e\u003cli\u003eI work sort of when I feel like it. It\u0026#39;s an \u003cem\u003eextremely\u003c/em\u003e privileged position to be in and far from normal for work. I\u0026#39;m online during core hours obviously, but that\u0026#39;s only really ~12-5pm my (NYC) time as most of my team is on the west coast. ~10hrs/week are when I feel like it, be it a few hours on the weekend or an hour after dinner.\u003c/li\u003e\u003cli\u003eSome weeks I work way less than 40hrs. Some weeks I work way more. It\u0026#39;s not for everyone, but right now it works well for me. If I worked a strict 9-5 right now, I would burn out. I\u0026#39;m equally fortunate that my team/company don\u0026#39;t really care how I get my work done as long as I get it done. I\u0026#39;m still young-ish without many life responsibilities outside of work, so I\u0026#39;m gonna make the most of it while I can!\u003c/li\u003e\u003cli\u003eI worked hard on working in bursts starting a few years ago. Train commutes or air travel were particularly good times with 15-45 minute gaps I could just jump into something. I wrote most of \u003ca href=\"https://github.com/ZacSweers/CatchUp?ref=zacsweers.dev\"\u003eCatchUp\u003c/a\u003e this way. Being intentional about this makes a big difference in mindset about the limited time and I gradually reduced the minimum unit of time needed to feel productive.\u003c/li\u003e\u003cli\u003eMeeting schedule: at the time of writing, I have 16 meetings on my calendar this upcoming week. 9-10 actually require my attendance and 4-5 of them are social. Not too heavy, not empty either.\u003c/li\u003e\u003cli\u003eDoing small things that unblock other folks are a great way to build social capital. Whether that\u0026#39;s doing a dependency update to pick up a fix, quick code review on the go, or answering a quick question to save them a lot of time searching. Low effort, high reward. My time is precious, but not so precious that I can\u0026#39;t take a minute to help a coworker get ahead.\u003c/li\u003e\u003cli\u003eI legitimately love what I do. I enjoy programming in my free time and I enjoy doing it for work. It is, in many ways, a meditative practice for me, like building legos or solving puzzles. This is, again, an extremely privileged position to be in and something that makes much of the above easier.\u003c/li\u003e\u003cli\u003eI actually strongly dislike working from home (sorry, tech Twitter) because it makes me feel like I\u0026#39;m living at work. That\u0026#39;s just me though! With us having no offices in NYC right now (let alone open ones), I spend most days working outside a local coffee shop. Working in bursts and avoiding builds locally is \u003cem\u003eseriously\u003c/em\u003e helpful for preserving battery on the go like this. I actually work on a 13\u0026#34; MacBook Pro these days (portability!), which also benefits from small/avoided builds.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"closing\"\u003eClosing\u003c/h2\u003e\u003cp\u003eSome people are watchmakers, meticulously working on exactly one thing for days or weeks at a time until it\u0026#39;s perfect. I am not a watchmaker. I\u0026#39;m more like a chef, preparing a number of dishes at once. Some are big, some are small, some are on the back burner, some are maybe boiling over. Sometimes all the burners are on and sometimes I\u0026#39;m not in the kitchen.\u003c/p\u003e\u003cp\u003eEveryone\u0026#39;s different, but this works well for me. I hope this is at least interesting for some and maybe even helpful for others. Please don\u0026#39;t take it as gospel or anything resembling blanket advice though! Do what works best for you, try different things, identify what slows you down, and try to improve it.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003cem\u003eThanks to Cli for proofreading this!\u003c/em\u003e\u003c/p\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2021-06-14T06:36:25Z",
  "modifiedTime": "2021-06-14T15:46:13Z"
}
