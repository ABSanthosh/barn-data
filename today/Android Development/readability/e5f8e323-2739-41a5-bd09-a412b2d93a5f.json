{
  "id": "e5f8e323-2739-41a5-bd09-a412b2d93a5f",
  "title": "Migrating from Burst to TestParameterInjector",
  "link": "https://code.cash.app/migrating-from-burst-to-testparameterinjector",
  "description": "",
  "author": "",
  "published": "2021-04-15T00:00:00+00:00",
  "source": "https://jakewharton.com/atom.xml",
  "categories": null,
  "byline": "Jake Wharton",
  "length": 2725,
  "excerpt": "Square’s Burst library burst onto the scene in 2014 stemming from general dissatisfaction with JUnit 4’s built-in parameterized runner. It enabled the use of enums to vary input to your test class, test methods, or some combination of both.",
  "siteName": "Cash App Code Blog",
  "favicon": "https://code.cash.app/assets/icon-196.png",
  "text": "Posted by Jake Wharton on April 15, 2021 Square’s Burst library burst onto the scene in 2014 stemming from general dissatisfaction with JUnit 4’s built-in parameterized runner. It enabled the use of enums to vary input to your test class, test methods, or some combination of both. enum class Soda { PEPSI, COKE } @RunWith(BurstJUnit4::class) class DrinkSodaTest( private val soda: Soda, ) { @Test fun canDrink() { // TODO... } } The canDrink test will now run twice, once for each enum value. We used this to vary the themes, device sizes, accessibility settings, and more in our unit, integration, and snapshot tests. The library’s ongoing maintenance burden is low. In fact, it hasn’t seen a release in 4 years simply because it’s very stable. This doesn’t mean it’s outdated—new tests are written with Burst to this day. At least up until yesterday. A few weeks ago Google announced the release of TestParameterInjector, a library which subsumes Burst’s approach and expands it to cover more types and offer more functionality. The Burst library is now being deprecated in favor of TestParameterInjector for JUnit 4-based projects. We have migrated our Cash App Android codebase and will be migrating others in time, including our open source projects. Thankfully the migration is straightforward. -import com.squareup.burst.BurstJUnit4 +import com.google.testing.junit.testparameterinjector.TestParameter +import com.google.testing.junit.testparameterinjector.TestParameterInjector enum class Soda { PEPSI, COKE } -@RunWith(BurstJUnit4::class) +@RunWith(TestParameterInjector::class) class DrinkSodaTest( - private val soda: Soda, + @TestParameter private val soda: Soda, ) { @Test fun canDrink() { // TODO... } } If you were using the @Burst annotation for field binding (common for Java tests), replace it with @TestParameter -@RunWith(BurstJUnit4.class) +@RunWith(TestParameterInjector.class) class DrinkSodaTest { - @Burst Soda soda; + @TestParameter Soda soda; // ... } Burst-injected test parameters also need to add @TestParameter. -@RunWith(BurstJUnit4::class) +@RunWith(TestParameterInjector::class) class DrinkSodaTest { @Test fun canDrink( - soda: Soda, + @TestParameter soda: Soda, ) { // TODO... } } Once you’ve migrated, check out TestParameterInjector’s support for more types as well as dynamically-generated data. One quick heads up for Android users: if you are switching from Burst to TestParameterInjector for your instrumentation tests (that’s the ‘androidTest’ ones) be aware that it currently only works on API 26 and newer. Follow along on this issue to track supporting earlier API levels.",
  "image": "https://code.cash.app/assets/social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n\n  \u003cdiv\u003e\u003cp\u003e\n    Posted by\n    \u003ca href=\"https://mastodon.jakewharton.com/@jw\"\u003eJake Wharton\u003c/a\u003e\n    \n      \u003cspan\u003eon \u003c/span\u003e\u003ctime datetime=\"2021-04-15 00:00:00 +0000\"\u003eApril 15, 2021\u003c/time\u003e\n    \n  \u003c/p\u003e\u003c/div\u003e\n\n  \u003cp\u003eSquare’s \u003ca href=\"https://github.com/square/burst\"\u003eBurst\u003c/a\u003e library burst onto the scene in 2014 stemming from general dissatisfaction with JUnit 4’s built-in parameterized runner. It enabled the use of enums to vary input to your test class, test methods, or some combination of both.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eenum\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSoda\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ePEPSI\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eCOKE\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e@RunWith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBurstJUnit4\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eDrinkSodaTest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003esoda\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSoda\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@Test\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ecanDrink\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// TODO...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecanDrink\u003c/code\u003e test will now run twice, once for each enum value. We used this to vary the themes, device sizes, accessibility settings, and more in our unit, integration, and snapshot tests.\u003c/p\u003e\n\n\u003cp\u003eThe library’s ongoing maintenance burden is low. In fact, it hasn’t seen a release in 4 years simply because it’s very stable. This doesn’t mean it’s outdated—new tests are written with Burst to this day.\u003c/p\u003e\n\n\u003cp\u003eAt least up until yesterday.\u003c/p\u003e\n\n\u003cp\u003eA few weeks ago Google \u003ca href=\"https://opensource.googleblog.com/2021/03/introducing-testparameterinjector.html\"\u003eannounced\u003c/a\u003e the release of \u003ca href=\"https://github.com/google/TestParameterInjector\"\u003eTestParameterInjector\u003c/a\u003e, a library which subsumes Burst’s approach and expands it to cover more types and offer more functionality. The Burst library is now being deprecated in favor of TestParameterInjector for JUnit 4-based projects.\u003c/p\u003e\n\n\u003cp\u003eWe have migrated our Cash App Android codebase and will be migrating others in time, including our open source projects. Thankfully the migration is straightforward.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e-import com.squareup.burst.BurstJUnit4\n\u003c/span\u003e\u003cspan\u003e+import com.google.testing.junit.testparameterinjector.TestParameter\n+import com.google.testing.junit.testparameterinjector.TestParameterInjector\n\u003c/span\u003e \n enum class Soda { PEPSI, COKE }\n \n\u003cspan\u003e-@RunWith(BurstJUnit4::class)\n\u003c/span\u003e\u003cspan\u003e+@RunWith(TestParameterInjector::class)\n\u003c/span\u003e class DrinkSodaTest(\n\u003cspan\u003e-  private val soda: Soda,\n\u003c/span\u003e\u003cspan\u003e+  @TestParameter private val soda: Soda,\n\u003c/span\u003e ) {\n   @Test fun canDrink() {\n     // TODO...\n   }\n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf you were using the \u003ccode\u003e@Burst\u003c/code\u003e annotation for field binding (common for Java tests), replace it with \u003ccode\u003e@TestParameter\u003c/code\u003e\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e-@RunWith(BurstJUnit4.class)\n\u003c/span\u003e\u003cspan\u003e+@RunWith(TestParameterInjector.class)\n\u003c/span\u003e class DrinkSodaTest {\n\u003cspan\u003e-  @Burst Soda soda;\n\u003c/span\u003e\u003cspan\u003e+  @TestParameter Soda soda;\n\u003c/span\u003e \n   // ...\n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eBurst-injected test parameters also need to add \u003ccode\u003e@TestParameter\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e-@RunWith(BurstJUnit4::class)\n\u003c/span\u003e\u003cspan\u003e+@RunWith(TestParameterInjector::class)\n\u003c/span\u003e class DrinkSodaTest {\n   @Test fun canDrink(\n\u003cspan\u003e-    soda: Soda,\n\u003c/span\u003e\u003cspan\u003e+    @TestParameter soda: Soda,\n\u003c/span\u003e   ) {\n     // TODO...\n   }\n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOnce you’ve migrated, check out TestParameterInjector’s support for \u003ca href=\"https://github.com/google/TestParameterInjector#supported-types\"\u003emore types\u003c/a\u003e as well as \u003ca href=\"https://github.com/google/TestParameterInjector#dynamic-parameter-generation-for-testparameter\"\u003edynamically-generated data\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne quick heads up for Android users: if you are switching from Burst to TestParameterInjector for your instrumentation tests (that’s the ‘androidTest’ ones) be aware that it currently only works on API 26 and newer. Follow along on \u003ca href=\"https://github.com/google/TestParameterInjector/issues/2\"\u003ethis issue\u003c/a\u003e to track supporting earlier API levels.\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2021-04-15T00:00:00Z",
  "modifiedTime": null
}
