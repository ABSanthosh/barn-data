{
  "id": "dc1104e1-d8ef-4813-a0a8-8a90f44b7cc6",
  "title": "Introducing Showkase: A Library to Organize, Discover, and Visualize Your Jetpack Compose Elements",
  "link": "https://medium.com/airbnb-engineering/introducing-showkase-a-library-to-organize-discover-and-visualize-your-jetpack-compose-elements-d5c34ef01095?source=rss----53c7c27702d5--android",
  "description": "",
  "author": "Vinay Gaba",
  "published": "Mon, 21 Dec 2020 21:56:15 GMT",
  "source": "https://medium.com/feed/airbnb-engineering/tagged/android",
  "categories": [
    "jetpack-compose",
    "android-libraries",
    "mobile",
    "open-source",
    "android"
  ],
  "byline": "Vinay Gaba",
  "length": 5884,
  "excerpt": "Showkase is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements. With minimal configuration it auto-generates a UI browser that organizes your design system for you.",
  "siteName": "The Airbnb Tech Blog",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Over the last few years, Android™ development has gone through significant changes in how apps are structured, the language used for development, the tooling \u0026 libraries that speed up our development, and the improvements in testing apps. What didn’t change in all these years is the Android UI toolkit.This changes with Jetpack Compose — Android’s modern toolkit for building native UI. It simplifies and accelerates UI development on Android and is a paradigm shift in Android development as we know it. The move to using declarative programming for describing UI is a welcome change and one that is prevalent across platforms with the introduction of frameworks like React for web, SwiftUI for iOS, and Flutter for cross-platform development.Declarative UI frameworks encourage the creation of reusable components that can be shared across different parts of the app. We know that reusability is a good engineering practice but what often ends up happening is a little more nuanced.What’s The Problem?As developers add new UI components, the codebase ends up with hundreds of components that are often hard to visualize.Discoverability of these components is a challenge and there is no easy way to search. As a result, your codebase often ends up with duplicate components that offer similar functionality. You might be able to use your IDE to search for a component if you used a very descriptive name. However, naming things is hard and descriptive names still do not always help us find the right component to use.The same problems extend to other aspects of your design system like colors, typography, icons, etc.In order to get around this, most mobile teams build their version of a “component browser” that lets you visualize your design system. This is often maintained manually with little-to-no tooling around it.If you have ever worked on any frontend platform, you can probably relate to some of these issues that contribute to a sub-par developer experience. As engineers, our job is to make software do this work for us.Introducing ShowkaseShowkase is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements. With minimal configuration it auto-generates a UI browser that organizes your design system for you.Showkase auto-generates a browser for your Jetpack Compose UI ElementsShowkase helps you visualize and document your design systemShowkase takes it a step further and auto-generates permutations of your components in common situations like dark mode, right-to-left layouts, scaled fonts, etc. This helps to preview your components in common scenarios without the need to do any additional work. This is helpful in detecting issues early and fixing them while you are still developing the components.Multiple permutations are auto generated for each component allowing you to preview it in different scenariosHow do I use Showkase?Setting up Showkase just requires a few simple steps-Step 1: Add the dependency to your module’s build.gradle file. If you have a multi-module setup, add this dependency to all the modules with UI elements that should be displayed inside the Showkase browser.Step 2: Add the relevant annotations for every supported UI element that should be a part of the Showkase browser.Showkase provides different annotations to mark UI elements that you’d like to see inside the Showkase UI browser.For @Composable components, use the @ShowkaseComposable annotation:Showkase provides first class support for @Preview. If you are already using the @Preview annotation that Compose provides for previewing Composable in Android Studio, you don’t need to do anything else.For color properties, you can add the @ShowkaseColor annotation to the field:Similarly, for TextStyle properties that are useful for representing typography in Jetpack Compose, you can add the @ShowkaseTypography annotation to the field:Step 3: Define an implementation of the ShowkaseRootModule interface in your root module.Step 4: Showkase is now ready to use!Showkase comes with a predefined Activity that does the necessary scaffolding for accessing the UI browser with the elements you annotated. Typically you would start this activity from the debug menu of your app but you are free to start this from any place you like! A nice helper function createShowkaseBrowserIntent is generated for you — just start the intent and you are good to go.Showkase in action demonstrating how you can visualize and search all your Jetpack Compose components in your codebase.Showkase also lets you visualize the other aspects of your design system like colors \u0026 typography.By reducing the amount of manual work needed in maintaining your design system/UI components and making it more discoverable, Showkase helps in driving adoption of the reusable components in your Android codebase.If you like what you see and are experimenting with Jetpack Compose, give Showkase a spin and let us know what you think.How can we improve Showkase further?We are thinking of ways in which we can extend Showkase. Here are some ideas that we are thinking about.Hooks for screenshot testing. Since all your components are a part of the Showkase browser, this would be a good opportunity to make this a part of your CI and detect differences in components across pull requests.Support for other UI elements that are a part of your design system (like icons, spacing, etc).Generating a web version of the Showkase browser with documentation, search, and screenshots.AcknowledgementsShowkase was inspired by a similar internal tool that was built at Airbnb by Nathanael Silverman.Many thanks to Eli Hart, Ben Schwab, Laura Kelly, Andreas Rossbacher, Gaurav Mathur, Laura Skelton, Madison Capps, Steve Flanders, Shreya Sharma, Brett Bukowski, Lauren Mackevich \u0026 David Shariff for helping with various aspects of Showkase.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*_nGzU-zeLfCXI6UuoZohHw.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"4d58\"\u003eOver the last few years, Android™ development has gone through significant changes in how apps are structured, the language used for development, the tooling \u0026amp; libraries that speed up our development, and the improvements in testing apps. What didn’t change in all these years is the Android UI toolkit.\u003c/p\u003e\u003cp id=\"50a3\"\u003eThis changes with \u003ca href=\"https://developer.android.com/jetpack/compose\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e — Android’s modern toolkit for building native UI. It simplifies and accelerates UI development on Android and is a paradigm shift in Android development as we know it. The move to using declarative programming for describing UI is a welcome change and one that is prevalent across platforms with the introduction of frameworks like \u003ca href=\"https://reactjs.org/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eReact\u003c/a\u003e for web, \u003ca href=\"https://developer.apple.com/xcode/swiftui/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSwiftUI\u003c/a\u003e for iOS, and \u003ca href=\"https://flutter.dev/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFlutter\u003c/a\u003e for cross-platform development.\u003c/p\u003e\u003cp id=\"9e3f\"\u003eDeclarative UI frameworks encourage the creation of reusable components that can be shared across different parts of the app. We know that reusability is a good engineering practice but what often ends up happening is a little more nuanced.\u003c/p\u003e\u003ch2 id=\"7ae1\"\u003eWhat’s The Problem?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"3ab2\"\u003eAs developers add new UI components, the codebase ends up with hundreds of components that are often hard to visualize.\u003c/li\u003e\u003cli id=\"f2a0\"\u003eDiscoverability of these components is a challenge and there is no easy way to search. As a result, your codebase often ends up with duplicate components that offer similar functionality. You might be able to use your IDE to search for a component if you used a very descriptive name. However, naming things is hard and descriptive names still do not always help us find the right component to use.\u003c/li\u003e\u003cli id=\"06f5\"\u003eThe same problems extend to other aspects of your design system like colors, typography, icons, etc.\u003c/li\u003e\u003cli id=\"4b68\"\u003eIn order to get around this, most mobile teams build their version of a “component browser” that lets you visualize your design system. This is often maintained manually with little-to-no tooling around it.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6fec\"\u003eIf you have ever worked on any frontend platform, you can probably relate to some of these issues that contribute to a sub-par developer experience. As engineers, our job is to make software do this work for us.\u003c/p\u003e\u003ch2 id=\"658e\"\u003eIntroducing Showkase\u003c/h2\u003e\u003cp id=\"16e2\"\u003e\u003ca href=\"https://github.com/airbnb/Showkase/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eShowkase\u003c/a\u003e is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements. With minimal configuration it auto-generates a UI browser that organizes your design system for you.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowkase auto-generates a browser for your Jetpack Compose UI Elements\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowkase helps you visualize and document your design system\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ee20\"\u003eShowkase takes it a step further and auto-generates permutations of your components in common situations like dark mode, right-to-left layouts, scaled fonts, etc. This helps to preview your components in common scenarios without the need to do any additional work. This is helpful in detecting issues early and fixing them while you are still developing the components.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eMultiple permutations are auto generated for each component allowing you to preview it in different scenarios\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"6464\"\u003eHow do I use Showkase?\u003c/h2\u003e\u003cp id=\"fb21\"\u003eSetting up Showkase just requires a few simple steps-\u003c/p\u003e\u003cp id=\"4591\"\u003e\u003cstrong\u003eStep 1: \u003c/strong\u003eAdd the dependency to your module’s \u003ccode\u003ebuild.gradle\u003c/code\u003e file. If you have a multi-module setup, add this dependency to all the modules with UI elements that should be displayed inside the Showkase browser.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0d70\"\u003e\u003cstrong\u003eStep 2: \u003c/strong\u003eAdd the relevant annotations for every supported UI element that should be a part of the Showkase browser.\u003c/p\u003e\u003cp id=\"3278\"\u003eShowkase provides different annotations to mark UI elements that you’d like to see inside the Showkase UI browser.\u003c/p\u003e\u003cp id=\"a822\"\u003eFor \u003ccode\u003e@Composable\u003c/code\u003e components, use the \u003ccode\u003e@ShowkaseComposable\u003c/code\u003e annotation:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"e776\"\u003eShowkase provides first class support for \u003ccode\u003e\u003ca href=\"https://developer.android.com/jetpack/compose/preview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e@Preview\u003c/a\u003e\u003c/code\u003e. If you are already using the \u003ccode\u003e@Preview\u003c/code\u003e annotation that Compose provides for previewing Composable in Android Studio, you don’t need to do anything else.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"af47\"\u003eFor color properties, you can add the \u003ccode\u003e@ShowkaseColor\u003c/code\u003e annotation to the field:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a761\"\u003eSimilarly, for TextStyle properties that are useful for representing typography in Jetpack Compose, you can add the \u003ccode\u003e@ShowkaseTypography\u003c/code\u003e annotation to the field:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"4a4c\"\u003e\u003cstrong\u003eStep 3: \u003c/strong\u003eDefine an implementation of the \u003ccode\u003eShowkaseRootModule\u003c/code\u003e interface in your root module.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"2811\"\u003e\u003cstrong\u003eStep 4\u003c/strong\u003e: Showkase is now ready to use!\u003c/p\u003e\u003cp id=\"dd8a\"\u003eShowkase comes with a predefined Activity that does the necessary scaffolding for accessing the UI browser with the elements you annotated. Typically you would start this activity from the debug menu of your app but you are free to start this from any place you like! A nice helper function \u003ccode\u003ecreateShowkaseBrowserIntent\u003c/code\u003e is generated for you — just start the intent and you are good to go.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowkase in action demonstrating how you can visualize and search all your Jetpack Compose components in your codebase.\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowkase also lets you visualize the other aspects of your design system like colors \u0026amp; typography.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b97e\"\u003eBy reducing the amount of manual work needed in maintaining your design system/UI components and making it more discoverable, Showkase helps in driving adoption of the reusable components in your Android codebase.\u003c/p\u003e\u003cp id=\"7f74\"\u003eIf you like what you see and are experimenting with Jetpack Compose, give \u003ca href=\"https://github.com/airbnb/Showkase\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eShowkase\u003c/a\u003e a spin and let us know what you think.\u003c/p\u003e\u003ch2 id=\"64a0\"\u003eHow can we improve Showkase further?\u003c/h2\u003e\u003cp id=\"d8a1\"\u003eWe are thinking of ways in which we can extend Showkase. Here are some ideas that we are thinking about.\u003c/p\u003e\u003cul\u003e\u003cli id=\"eac9\"\u003eHooks for screenshot testing. Since all your components are a part of the Showkase browser, this would be a good opportunity to make this a part of your CI and detect differences in components across pull requests.\u003c/li\u003e\u003cli id=\"9f5d\"\u003eSupport for other UI elements that are a part of your design system (like icons, spacing, etc).\u003c/li\u003e\u003cli id=\"32a4\"\u003eGenerating a web version of the Showkase browser with documentation, search, and screenshots.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"95c6\"\u003eAcknowledgements\u003c/h2\u003e\u003cp id=\"6b6c\"\u003eShowkase was inspired by a similar internal tool that was built at Airbnb by Nathanael Silverman.\u003c/p\u003e\u003cp id=\"40df\"\u003eMany thanks to Eli Hart, Ben Schwab, Laura Kelly, Andreas Rossbacher, Gaurav Mathur, Laura Skelton, Madison Capps, Steve Flanders, Shreya Sharma, Brett Bukowski, Lauren Mackevich \u0026amp; David Shariff for helping with various aspects of Showkase.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2020-12-21T21:56:15.91Z",
  "modifiedTime": null
}
