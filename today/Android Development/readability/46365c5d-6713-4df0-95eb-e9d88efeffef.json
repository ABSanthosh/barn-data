{
  "id": "46365c5d-6713-4df0-95eb-e9d88efeffef",
  "title": "RangeBarChart",
  "link": "https://android-arsenal.com/details/1/8476",
  "description": "⚡ Range bar chart library for Android using MPAndroidChart⚡ There were no charts in MPAndroidChart to show ranges. We were forced to show the range charts we wanted using a similarly capable candlestick chart. This library can be used when you want to create charts that can represent ranges such as weather and heart rate.",
  "author": "",
  "published": "Thu, 29 Feb 2024 02:53:46 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 4011,
  "excerpt": "Graphics | RangeBarChart by Ted Park (ParkSangGwon)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "RangeBarChart ⚡ Range bar chart library for Android using MPAndroidChart⚡ There were no charts in MPAndroidChart to show ranges. We were forced to show the range charts we wanted using a similarly capable candlestick chart. This library can be used when you want to create charts that can represent ranges such as weather and heart rate. Default Min/Max Draw Label Demo Setup Gradle repositories { google() mavenCentral() maven { url 'https://jitpack.io' } // For using MPAndroidChart } dependencies { implementation 'io.github.ParkSangGwon:range-bar-chart:x.y.z' //implementation 'io.github.ParkSangGwon:range-bar-chart:0.0.6' } If you think this library is useful, please press star button at upside. How to use The usage of this library is perfectly consistent with that of MPAndroidChart Please read official document A detailed explanation can be understood immediately by looking at the code of the sample project. RangeBarEntry min max Setup Chart private fun RangeBarChart.setup() { setScaleEnabled(false) setDrawGridBackground(false) setBackgroundColor(Color.TRANSPARENT) description.isEnabled = false xAxis.apply { position = XAxis.XAxisPosition.BOTTOM setDrawGridLines(false) } axisLeft.apply { setDrawGridLines(false) axisMinimum = -20f axisMaximum = 40f } axisRight.isEnabled = false legend.isEnabled = false data = RangeBarData(createSet()) } Create DataSet RangeBarDataSet(null, \"RangeBar\").apply { color = Color.parseColor(\"#2BDD9E\") barWidth = 0.4f isHighlightEnabled = true highLightColor = Color.CYAN minColor = Color.parseColor(\"#22BCFE\") maxColor = Color.parseColor(\"#FC351E\") setDrawValues(false) valueTextSize = 12f valueFormatter = object : ValueFormatter() { override fun getFormattedValue(value: Float): String = \"${value.toInt()}°C\" } } Add your entries private fun getWeatherEntries(): List\u003cRangeBarEntry\u003e { val values = mutableListOf\u003cRangeBarEntry\u003e() values.add(RangeBarEntry(1f, -7f, 1f)) values.add(RangeBarEntry(2f, -4f, 4f)) values.add(RangeBarEntry(3f, 2f, 11f)) values.add(RangeBarEntry(4f, 8f, 18f)) values.add(RangeBarEntry(5f, 14f, 23f)) values.add(RangeBarEntry(6f, 19f, 26f)) values.add(RangeBarEntry(7f, 23f, 28f)) values.add(RangeBarEntry(8f, 25f, 33f)) values.add(RangeBarEntry(9f, 17f, 25f)) values.add(RangeBarEntry(10f, 10f, 18f)) values.add(RangeBarEntry(11f, 3f, 11f)) values.add(RangeBarEntry(12f, -3f, 4f)) return values } private fun RangeBarChart.addData() { val data = data ?: return val rangeBarDataSet = data.getDataSetByIndex(0) ?: return val values = getWeatherEntries() rangeBarDataSet.values = values data.notifyDataChanged() notifyDataSetChanged() } Customize RangeBarDataSet variable Description barWidth Adjust board width minColor Min color int maxColor Max color int FAQ Can I use BarChart's function/variable? Yes, RangeBarChart is a class implemented by inheriting from BarChart. So you can use all the features that BarChart uses. How is it different from candlestick charts? Candle charts must specify a starting and ending point as well as a minimum and maximum. It is used for the purpose of using stock charts, not to display only the range we want. RangeBarChart only shows the minimum and maximum ranges. License Copyright 2022 Ted Park Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.```",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eRangeBarChart\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e⚡ Range bar chart library for Android using \u003ca href=\"https://github.com/PhilJay/MPAndroidChart\" rel=\"nofollow\" target=\"_blank\"\u003eMPAndroidChart\u003c/a\u003e⚡\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eThere were no charts in \u003ca href=\"https://github.com/PhilJay/MPAndroidChart\" rel=\"nofollow\" target=\"_blank\"\u003eMPAndroidChart\u003c/a\u003e to show ranges.\u003c/li\u003e \u003cli\u003eWe were forced to show the range charts we wanted using a similarly capable candlestick chart.\u003c/li\u003e \u003cli\u003eThis library can be used when you want to create charts that can represent ranges such as weather and heart rate.\u003c/li\u003e \u003c/ul\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eDefault\u003c/th\u003e \u003cth\u003eMin/Max\u003c/th\u003e \u003cth\u003eDraw Label\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ca href=\"https://github.com/ParkSangGwon/RangeBarChart/raw/master/art/range_bar.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg data-layzr=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/range_bar.png\" src=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/range_bar.png\"/\u003e\u003c/a\u003e\u003c/td\u003e \u003ctd\u003e\u003ca href=\"https://github.com/ParkSangGwon/RangeBarChart/raw/master/art/min_max.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg data-layzr=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/min_max.png\" src=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/min_max.png\"/\u003e\u003c/a\u003e\u003c/td\u003e \u003ctd\u003e\u003ca href=\"https://github.com/ParkSangGwon/RangeBarChart/raw/master/art/draw_label.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg data-layzr=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/draw_label.png\" src=\"https://raw.githubusercontent.com/ParkSangGwon/RangeBarChart/master/art/draw_label.png\"/\u003e\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003ctd\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDemo\u003c/h2\u003e\u003c/p\u003e   \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSetup\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eGradle\u003c/h3\u003e\u003c/p\u003e  \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"repositories { google() mavenCentral() maven { url \u0026#39;https://jitpack.io\u0026#39; } // For using MPAndroidChart } dependencies { implementation \u0026#39;io.github.ParkSangGwon:range-bar-chart:x.y.z\u0026#39; //implementation \u0026#39;io.github.ParkSangGwon:range-bar-chart:0.0.6\u0026#39; }\"\u003e\u003cpre\u003e\u003cspan\u003erepositories\u003c/span\u003e {\n  google()\n  mavenCentral()\n  maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e } \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e For using MPAndroidChart\u003c/span\u003e\n}\n\n\u003cspan\u003edependencies\u003c/span\u003e {\n    implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003eio.github.ParkSangGwon:range-bar-chart:x.y.z\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003eimplementation \u0026#39;io.github.ParkSangGwon:range-bar-chart:0.0.6\u0026#39;\u003c/span\u003e\n}\n\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eIf you think this library is useful, please press star button at upside. \u003cbr/\u003e \u003ca href=\"https://camo.githubusercontent.com/1aeae28bee65b6fbbd1649d90b9044595fd877cb035b47a083ab78abb1ed3f00/68747470733a2f2f7068617365722e696f2f636f6e74656e742f6e6577732f323031352f30392f31303030302d73746172732e706e67\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/p\u003e  \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eHow to use\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eThe usage of this library is perfectly consistent with that of \u003ca href=\"https://github.com/PhilJay/MPAndroidChart\" rel=\"nofollow\" target=\"_blank\"\u003eMPAndroidChart\u003c/a\u003e\u003c/li\u003e \u003cli\u003ePlease read \u003ca href=\"https://weeklycoding.com/mpandroidchart-documentation/\" rel=\"nofollow\" target=\"_blank\"\u003eofficial document\u003c/a\u003e\u003c/li\u003e \u003cli\u003eA detailed explanation can be understood immediately by looking at the code of the sample project.\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eRangeBarEntry\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003emin\u003c/li\u003e \u003cli\u003emax\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSetup Chart\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private fun RangeBarChart.setup() { setScaleEnabled(false) setDrawGridBackground(false) setBackgroundColor(Color.TRANSPARENT) description.isEnabled = false xAxis.apply { position = XAxis.XAxisPosition.BOTTOM setDrawGridLines(false) } axisLeft.apply { setDrawGridLines(false) axisMinimum = -20f axisMaximum = 40f } axisRight.isEnabled = false legend.isEnabled = false data = RangeBarData(createSet()) }\"\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e RangeBarChart.\u003cspan\u003esetup\u003c/span\u003e() {\n    setScaleEnabled(\u003cspan\u003efalse\u003c/span\u003e)\n    setDrawGridBackground(\u003cspan\u003efalse\u003c/span\u003e)\n    setBackgroundColor(\u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eTRANSPARENT\u003c/span\u003e)\n    description.isEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n    xAxis.\u003cspan\u003eapply\u003c/span\u003e {\n        position \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eXAxis\u003c/span\u003e.\u003cspan\u003eXAxisPosition\u003c/span\u003e.\u003cspan\u003eBOTTOM\u003c/span\u003e\n        setDrawGridLines(\u003cspan\u003efalse\u003c/span\u003e)\n    }\n    axisLeft.\u003cspan\u003eapply\u003c/span\u003e {\n        setDrawGridLines(\u003cspan\u003efalse\u003c/span\u003e)\n        axisMinimum \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e20f\u003c/span\u003e\n        axisMaximum \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e40f\u003c/span\u003e\n    }\n    axisRight.isEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n    legend.isEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n    data \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eRangeBarData\u003c/span\u003e(createSet())\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eCreate DataSet\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"RangeBarDataSet(null, \u0026#34;RangeBar\u0026#34;).apply { color = Color.parseColor(\u0026#34;#2BDD9E\u0026#34;) barWidth = 0.4f isHighlightEnabled = true highLightColor = Color.CYAN minColor = Color.parseColor(\u0026#34;#22BCFE\u0026#34;) maxColor = Color.parseColor(\u0026#34;#FC351E\u0026#34;) setDrawValues(false) valueTextSize = 12f valueFormatter = object : ValueFormatter() { override fun getFormattedValue(value: Float): String = \u0026#34;${value.toInt()}°C\u0026#34; } }\"\u003e\u003cpre\u003e\u003cspan\u003eRangeBarDataSet\u003c/span\u003e(\u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eRangeBar\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e).\u003cspan\u003eapply\u003c/span\u003e {\n    color \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e.parseColor(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e#2BDD9E\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    barWidth \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0.4f\u003c/span\u003e\n    isHighlightEnabled \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    highLightColor \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eCYAN\u003c/span\u003e\n    minColor \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e.parseColor(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e#22BCFE\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    maxColor \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e.parseColor(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e#FC351E\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n    setDrawValues(\u003cspan\u003efalse\u003c/span\u003e)\n    valueTextSize \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e12f\u003c/span\u003e\n    valueFormatter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eValueFormatter\u003c/span\u003e() {\n        \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetFormattedValue\u003c/span\u003e(\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFloat\u003c/span\u003e): \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e${value.toInt()}\u003c/span\u003e°C\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eAdd your entries\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private fun getWeatherEntries(): List\u0026lt;RangeBarEntry\u0026gt; { val values = mutableListOf\u0026lt;RangeBarEntry\u0026gt;() values.add(RangeBarEntry(1f, -7f, 1f)) values.add(RangeBarEntry(2f, -4f, 4f)) values.add(RangeBarEntry(3f, 2f, 11f)) values.add(RangeBarEntry(4f, 8f, 18f)) values.add(RangeBarEntry(5f, 14f, 23f)) values.add(RangeBarEntry(6f, 19f, 26f)) values.add(RangeBarEntry(7f, 23f, 28f)) values.add(RangeBarEntry(8f, 25f, 33f)) values.add(RangeBarEntry(9f, 17f, 25f)) values.add(RangeBarEntry(10f, 10f, 18f)) values.add(RangeBarEntry(11f, 3f, 11f)) values.add(RangeBarEntry(12f, -3f, 4f)) return values }\"\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003egetWeatherEntries\u003c/span\u003e(): \u003cspan\u003eList\u003c/span\u003e\u0026lt;\u003cspan\u003eRangeBarEntry\u003c/span\u003e\u0026gt; {\n    \u003cspan\u003eval\u003c/span\u003e values \u003cspan\u003e=\u003c/span\u003e mutableListOf\u0026lt;\u003cspan\u003eRangeBarEntry\u003c/span\u003e\u0026gt;()\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e1f\u003c/span\u003e, \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e7f\u003c/span\u003e, \u003cspan\u003e1f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e2f\u003c/span\u003e, \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e4f\u003c/span\u003e, \u003cspan\u003e4f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e3f\u003c/span\u003e, \u003cspan\u003e2f\u003c/span\u003e, \u003cspan\u003e11f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e4f\u003c/span\u003e, \u003cspan\u003e8f\u003c/span\u003e, \u003cspan\u003e18f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e5f\u003c/span\u003e, \u003cspan\u003e14f\u003c/span\u003e, \u003cspan\u003e23f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e6f\u003c/span\u003e, \u003cspan\u003e19f\u003c/span\u003e, \u003cspan\u003e26f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e7f\u003c/span\u003e, \u003cspan\u003e23f\u003c/span\u003e, \u003cspan\u003e28f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e8f\u003c/span\u003e, \u003cspan\u003e25f\u003c/span\u003e, \u003cspan\u003e33f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e9f\u003c/span\u003e, \u003cspan\u003e17f\u003c/span\u003e, \u003cspan\u003e25f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e10f\u003c/span\u003e, \u003cspan\u003e10f\u003c/span\u003e, \u003cspan\u003e18f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e11f\u003c/span\u003e, \u003cspan\u003e3f\u003c/span\u003e, \u003cspan\u003e11f\u003c/span\u003e))\n    values.add(\u003cspan\u003eRangeBarEntry\u003c/span\u003e(\u003cspan\u003e12f\u003c/span\u003e, \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e3f\u003c/span\u003e, \u003cspan\u003e4f\u003c/span\u003e))\n    \u003cspan\u003ereturn\u003c/span\u003e values\n}\u003c/pre\u003e\u003c/div\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private fun RangeBarChart.addData() { val data = data ?: return val rangeBarDataSet = data.getDataSetByIndex(0) ?: return val values = getWeatherEntries() rangeBarDataSet.values = values data.notifyDataChanged() notifyDataSetChanged() }\"\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e RangeBarChart.\u003cspan\u003eaddData\u003c/span\u003e() {\n    \u003cspan\u003eval\u003c/span\u003e data \u003cspan\u003e=\u003c/span\u003e data \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e rangeBarDataSet \u003cspan\u003e=\u003c/span\u003e data.getDataSetByIndex(\u003cspan\u003e0\u003c/span\u003e) \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e values \u003cspan\u003e=\u003c/span\u003e getWeatherEntries()\n    rangeBarDataSet.values \u003cspan\u003e=\u003c/span\u003e values\n    data.notifyDataChanged()\n    notifyDataSetChanged()\n}\u003c/pre\u003e\u003c/div\u003e  \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eCustomize\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eRangeBarDataSet\u003c/h3\u003e\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003evariable\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ebarWidth\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eAdjust board width\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eminColor\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eMin color int\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003emaxColor\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eMax color int\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eFAQ\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eCan I use BarChart\u0026#39;s function/variable?\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eYes, RangeBarChart is a class implemented by inheriting from BarChart.\u003c/li\u003e \u003cli\u003eSo you can use all the features that BarChart uses.\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eHow is it different from candlestick charts?\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eCandle charts must specify a starting and ending point as well as a minimum and maximum.\u003c/li\u003e \u003cli\u003eIt is used for the purpose of using stock charts, not to display only the range we want.\u003c/li\u003e \u003cli\u003eRangeBarChart only shows the minimum and maximum ranges.\u003c/li\u003e \u003c/ul\u003e  \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"Copyright 2022 Ted Park Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.```\"\u003e\u003cpre lang=\"code\"\u003e\u003ccode\u003eCopyright 2022 Ted Park\n\nLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.```\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
