{
  "id": "6018f1e0-0c6d-4185-ad6c-3eaa16b721de",
  "title": "Binary Compatibility: Simplified",
  "link": "https://proandroiddev.com/binary-compatibility-simplified-6312a7cd6867?source=rss----c72404660798---4",
  "description": "",
  "author": "Sarah Maher",
  "published": "Thu, 03 Oct 2024 17:45:55 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "sdk",
    "libraries",
    "kotlin-multiplatform",
    "kotlin",
    "android"
  ],
  "byline": "Sarah Maher",
  "length": 3473,
  "excerpt": "When I first made my earliest internal library contributions, I received a comment saying, ‘This will cause binary compatibility issues, so please address it.’ Honestly, at that time, it was the…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Photo by Pierre Bamin on UnsplashWhen I first made my earliest internal library contributions, I received a comment saying, ‘This will cause binary compatibility issues, so please address it.’ Honestly, at that time, it was the first time I’d encountered this concept, and I thought I’d make someone else’s life less miserable by explaining what binary compatibility is and how to navigate it.Backward Compatibility MattersWhen working with libraries, regardless of whether they are internal or public, you have to keep in mind that the users of the library are your clients. In some situations, if two internal libraries are using different versions of your library, removing a chunk of public APIs or altering them will result in broken clients.What Do We Mean by Binary Compatibility?You have binary compatibility when a new version of a library can replace a previously compiled version of that library. Any software that was compiled against the previous version should continue to work correctly.Avoiding Binary Compatibility IssuesYou can keep the following in mind while making any contributions to a library:Avoid adding arguments to existing API functionsHere is a simple function that we have in our library:fun createCatFood(fish:Fish): CatFoodCanLet’s say I wanted my cat food can to be based on both chicken and fish:fun createCatFood(fish:Fish, chicken:Chicken): CatFoodCanUse overloaded functions to preserve compatibilityTo avoid breaking compatibility in such cases, try adding an extra overload instead of modifying the existing one:fun createCatFood(fish:Fish): CatFoodCanfun createCatFood(fish:Fish, chicken:Chicken): CatFoodCanAvoid using Data Classes in your API (for Kotlin pals)Data classes make Kotlin engineers’ lives easier with their generated code.However, the same generated code raises concerns that may cause binary compatibility issues. Data classes generate copies and constructors that will break binary compatibility if we add or remove any of the class properties.Plugin Recommendation: You can check out Poko, which provides all the benefits of data classes but, unlike standard data classes, does not generate copy or componentN functions.Evolve APIs PragmaticallyWhat if I don’t use that extra parameter anymore? Will I have to keep it forever to avoid breaking binary compatibility? Of course not, but we prefer to handle such changes gracefully.Let’s say we have the same function from our previous examples, where the original method was not removed to maintain compatibility.fun createCatFood(fish:Fish): CatFoodCanfun createCatFood(fish:Fish, chicken:Chicken): CatFoodCanWe have to introduce the removal of this function gradually until we are sure it’s not in use and safe to remove, using the @deprecated annotation. We start with the default deprecation level: a warning, where the code still works fine, but clients can see that there is something that needs to be addressed.@Deprecated( message = \"this function gave us rooten food\", level = DeprecationLevel.WARNING)fun createCatFood(fish:Fish): CatFoodCanfun createCatFood(fish:Fish, chicken:Chicken): CatFoodCanThe second stage can involve using the error level:@Deprecated( message = \"this function gave us rooten food\", level = DeprecationLevel.ERROR)fun createCatFood(fish:Fish): CatFoodCanfun createCatFood(fish:Fish, chicken:Chicken): CatFoodCanThis gradual deprecation over a couple of minor releases will give users enough chance to adapt to the new changes.",
  "image": "https://miro.medium.com/v2/resize:fit:640/1*sIQ4vdO1JQpXwiaR9KmtPw.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@sarahmaher_01?source=post_page-----6312a7cd6867--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Sarah Maher\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*KJK3HljeBmGWpsk3mJnuZg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page-----6312a7cd6867--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@bamin\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003ePierre Bamin\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e \u003c/strong\u003eon \u003ca href=\"https://unsplash.com/photos/a-close-up-view-of-a-puzzle-piece-Lmh_-gFu8vU\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"d448\"\u003eWhen I first made my earliest internal library contributions, I received a comment saying, \u003cem\u003e‘This will cause binary compatibility issues, so please address it.’\u003c/em\u003e Honestly, at that time, it was the first time I’d encountered this concept, and I thought I’d make someone else’s life less miserable by explaining what binary compatibility is and how to navigate it.\u003c/p\u003e\u003ch2 id=\"47f4\"\u003eBackward Compatibility Matters\u003c/h2\u003e\u003cp id=\"585b\"\u003eWhen working with libraries, regardless of whether they are internal or public, you have to keep in mind that the users of the library are your clients. In some situations, if two internal libraries are using different versions of your library, removing a chunk of public APIs or altering them will result in broken clients.\u003c/p\u003e\u003ch2 id=\"501d\"\u003e\u003cstrong\u003eWhat Do We Mean by Binary Compatibility?\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"a37f\"\u003eYou have binary compatibility when a new version of a library can replace a previously compiled version of that library. Any software that was compiled against the previous version should continue to work correctly.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"05be\"\u003e\u003cstrong\u003eAvoiding Binary Compatibility Issues\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"cccb\"\u003eYou can keep the following in mind while making any contributions to a library:\u003c/p\u003e\u003ch2 id=\"5694\"\u003eAvoid adding arguments to existing API functions\u003c/h2\u003e\u003cp id=\"7645\"\u003eHere is a simple function that we have in our library:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6ceb\"\u003efun createCatFood(fish:Fish): CatFoodCan\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4127\"\u003eLet’s say I wanted my cat food can to be based on both chicken and fish:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"cf68\"\u003efun createCatFood(fish:Fish, chicken:Chicken): CatFoodCan\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"7286\"\u003eUse overloaded functions to preserve compatibility\u003c/h2\u003e\u003cp id=\"1a3b\"\u003eTo avoid breaking compatibility in such cases, try adding an extra overload instead of modifying the existing one:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8399\"\u003efun createCatFood(fish:Fish): CatFoodCan\u003cp\u003efun createCatFood(fish:Fish, chicken:Chicken): CatFoodCan\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"45eb\"\u003eAvoid using Data Classes in your API (\u003cem\u003efor Kotlin pals)\u003c/em\u003e\u003c/h2\u003e\u003cp id=\"2565\"\u003e\u003cstrong\u003eData classes\u003c/strong\u003e make Kotlin engineers’ lives easier with their generated code.\u003cbr/\u003eHowever, the same generated code raises concerns that may cause binary compatibility issues. Data classes generate copies and constructors that will break binary compatibility if we add or remove any of the class properties.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"4f9a\"\u003e\u003cstrong\u003ePlugin Recommendation:\u003c/strong\u003e You can check out \u003ca href=\"https://github.com/drewhamilton/Poko\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePoko\u003c/a\u003e, which provides all the benefits of data classes but, unlike standard data classes, does not generate copy or componentN functions.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"ddde\"\u003e\u003cstrong\u003eEvolve APIs Pragmatically\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"bfa1\"\u003eWhat if I don’t use that extra parameter anymore? Will I have to keep it forever to avoid breaking binary compatibility? Of course not, but we prefer to handle such changes gracefully.\u003c/p\u003e\u003cp id=\"9af5\"\u003eLet’s say we have the same function from our previous examples, where the original method was not removed to maintain compatibility.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9007\"\u003efun createCatFood(fish:Fish): CatFoodCan\u003cp\u003efun createCatFood(fish:Fish, chicken:Chicken): CatFoodCan\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b767\"\u003eWe have to introduce the removal of this function gradually until we are sure it’s not in use and safe to remove, using the \u003ccode\u003e@deprecated\u003c/code\u003e annotation. We start with the default deprecation level: a warning, where the code still works fine, but clients can see that there is something that needs to be addressed.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2e24\"\u003e@Deprecated(\u003cbr/\u003e  message = \u0026#34;this function gave us rooten food\u0026#34;,\u003cbr/\u003e  level = DeprecationLevel.WARNING\u003cbr/\u003e)\u003cbr/\u003efun createCatFood(fish:Fish): CatFoodCan\u003cp\u003efun createCatFood(fish:Fish, chicken:Chicken): CatFoodCan\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e391\"\u003eThe second stage can involve using the error level:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f311\"\u003e@Deprecated(\u003cbr/\u003e  message = \u0026#34;this function gave us rooten food\u0026#34;,\u003cbr/\u003e  level = DeprecationLevel.ERROR\u003cbr/\u003e)\u003cbr/\u003efun createCatFood(fish:Fish): CatFoodCan\u003cp\u003efun createCatFood(fish:Fish, chicken:Chicken): CatFoodCan\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ad01\"\u003eThis gradual deprecation over a couple of minor releases will give users enough chance to adapt to the new changes.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-09-25T13:20:03.764Z",
  "modifiedTime": null
}
