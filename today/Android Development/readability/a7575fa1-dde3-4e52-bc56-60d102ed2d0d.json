{
  "id": "a7575fa1-dde3-4e52-bc56-60d102ed2d0d",
  "title": "Jambo",
  "link": "https://android-arsenal.com/details/1/8475",
  "description": "Jambo is an open source remote logging library. For those who would like to see their logs remotely on their android device Jambo is the library for you. Jambo installs a separate debug app for intercepting all logs called with the Jambo class.",
  "author": "",
  "published": "Wed, 28 Feb 2024 04:35:41 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 3952,
  "excerpt": "Logging | Jambo by Tabasumu (tabasumu)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "Jambo Jambo is an open source remote logging library. For those who would like to see their logs remotely on their android device Jambo is the library for you. Jambo installs a separate debug app for intercepting all logs called with the Jambo class. Installation • Usage • Contributing • Credits • License Installation (Kotlin DSL • Groovy ) Kotlin DSL Install jitpack Locate your build.gradle.kts file in the root project and add : allprojects { repositories { google() mavenCentral() maven { setUrl(\"https://jitpack.io\") } // add this line } } For those with a higher gradle version, find settings.gradle.kts in the root project folder and add : dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven { setUrl(\"https://jitpack.io\") } // add this line } } Add Jambo Dependency In your app module find build.gradle.kts and add : implementation(\"com.github.tabasumu:jambo:$version\") Sync gradle and proceed use the library Groovy Install jitpack Locate your build.gradle file in the root project and add : allprojects { repositories { google() mavenCentral() maven { url \"https://jitpack.io\" } // add this line } } For those with a higher gradle version, find settings.gradle and add : dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven { url 'https://jitpack.io' } // add this line } } Add Jambo dependency In your app module find build.gradle and add : implementation 'com.github.tabasumu:jambo:$version' Usage Without Timber Initialize Jambo in the App module // Kotlin class App : Application { Jambo.Builder(this) // this is the application context .enableNotifications(true) // not required \u0026 is false by default .build() } // Java class App extends Application { new Jambo.Builder(this) // this is the application context .enableNotifications(true) // not required \u0026 is false by default .build() } Add the Application class in the AndroidManifest \u003capplication ... android:name=\".App\" ... \u003c/application\u003e Log using the Jambo class // Kotlin and Java Jambo.w(\"This is a WARN log\") Jambo.i(\"This is an INFO log\") Jambo.d(\"This is a DEBUG log\") Jambo.e(\"This is an ERROR log\") Jambo.v(\"This is a VERBOSE log\") Jambo.wtf(\"This is an ASSERT log\") With Timber // Kotlin class App : Application { ... val tree = JamboTree( application = this, // application context enableNotifications = false // enable notifications, which is false by default ) Timber.plant(tree) ... } // Java class App extends Application { ... val tree = new JamboTree( this, // application context true // enable notifications, which is false by default ); Timber.plant(tree); ... } Open the Jambo app and view your logs (search, filter, view or clear) Contributing Your contributions are especially welcome. Whether it comes in the form of code patches, ideas, discussion, bug reports, encouragement or criticism, your input is needed. Visit issues to get started. Credits Timber License Copyright 2022 Tabasumu Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "https://raw.githubusercontent.com/tabasumu/jambo/origins/images/logo.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cdiv dir=\"auto\"\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/tabasumu/jambo/raw/origins/images/logo.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"12%\" data-layzr=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/logo.png\" src=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/logo.png\"/\u003e\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eJambo \u003ca href=\"https://jitpack.io/#tabasumu/jambo\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/h2\u003e\u003c/p\u003e  \u003cp dir=\"auto\"\u003eJambo is an open source remote \u003cstrong\u003elogging library\u003c/strong\u003e. \u003cbr/\u003e For those who would like to see their logs remotely on their android device Jambo is the library for you. Jambo installs a separate debug app for intercepting all logs called with the Jambo class.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"#installation\"\u003eInstallation\u003c/a\u003e • \u003ca href=\"#user-content-usage\"\u003eUsage\u003c/a\u003e • \u003ca href=\"#user-content-contributing\"\u003eContributing\u003c/a\u003e • \u003ca href=\"#user-content-credits\"\u003eCredits\u003c/a\u003e • \u003ca href=\"#user-content-license\"\u003eLicense\u003c/a\u003e\u003c/p\u003e \u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eInstallation (\u003ca href=\"#user-content-kotlin-dsl\"\u003eKotlin DSL\u003c/a\u003e • \u003ca href=\"#user-content-groovy\"\u003eGroovy\u003c/a\u003e )\u003c/h2\u003e\u003c/p\u003e \u003cdiv dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eKotlin DSL\u003c/h3\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eInstall \u003ccode\u003ejitpack\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003eLocate your \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e file in the root project and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"allprojects { repositories { google() mavenCentral() maven { setUrl(\u0026#34;https://jitpack.io\u0026#34;) } // add this line } }\"\u003e\u003cpre\u003eallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { setUrl(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e) } \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e add this line\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eFor those with a higher gradle version, find \u003ccode\u003esettings.gradle.kts\u003c/code\u003e in the root project folder and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven { setUrl(\u0026#34;https://jitpack.io\u0026#34;) } // add this line } }\"\u003e\u003cpre\u003edependencyResolutionManagement {\n    repositoriesMode.set(\u003cspan\u003eRepositoriesMode\u003c/span\u003e.\u003cspan\u003eFAIL_ON_PROJECT_REPOS\u003c/span\u003e)\n    repositories {\n        google()\n        mavenCentral()\n        maven { setUrl(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e) } \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e add this line\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAdd Jambo Dependency\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003eIn your app module find \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"implementation(\u0026#34;com.github.tabasumu:jambo:$version\u0026#34;)\"\u003e\u003cpre\u003e  implementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.github.tabasumu:jambo:\u003cspan\u003e$version\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eSync gradle and proceed use the library\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eGroovy\u003c/h3\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eInstall \u003ccode\u003ejitpack\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003eLocate your \u003ccode\u003ebuild.gradle\u003c/code\u003e file in the root project and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"allprojects { repositories { google() mavenCentral() maven { url \u0026#34;https://jitpack.io\u0026#34; } // add this line } }\"\u003e\u003cpre\u003eallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e } \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e add this line\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eFor those with a higher gradle version, find \u003ccode\u003esettings.gradle\u003c/code\u003e and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { google() mavenCentral() maven { url \u0026#39;https://jitpack.io\u0026#39; } // add this line } }\"\u003e\u003cpre\u003edependencyResolutionManagement {\n    repositoriesMode\u003cspan\u003e.\u003c/span\u003eset(\u003cspan\u003eRepositoriesMode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eFAIL_ON_PROJECT_REPOS\u003c/span\u003e)\n    repositories {\n        google()\n        mavenCentral()\n        maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e }  \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e add this line\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAdd Jambo dependency\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003eIn your app module find \u003ccode\u003ebuild.gradle\u003c/code\u003e and add :\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"implementation \u0026#39;com.github.tabasumu:jambo:$version\u0026#39;\"\u003e\u003cpre\u003e  implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ecom.github.tabasumu:jambo:$version\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003cbr/\u003e \u003cdiv dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage\u003c/h2\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eWithout Timber\u003c/h3\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eInitialize Jambo in the App module\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Kotlin class App : Application { Jambo.Builder(this) // this is the application context .enableNotifications(true) // not required \u0026amp; is false by default .build() }\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Kotlin\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e : \u003cspan\u003eApplication\u003c/span\u003e {\n\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003eBuilder\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e) \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e this is the application context\u003c/span\u003e\n        .enableNotifications(\u003cspan\u003etrue\u003c/span\u003e) \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e not required \u0026amp; is false by default \u003c/span\u003e\n        .build()\n\n}\u003c/pre\u003e\u003c/div\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Java class App extends Application { new Jambo.Builder(this) // this is the application context .enableNotifications(true) // not required \u0026amp; is false by default .build() }\"\u003e\u003cpre\u003e\u003cspan\u003e// Java\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eApplication\u003c/span\u003e {\n\n    \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003eBuilder\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e) \u003cspan\u003e// this is the application context\u003c/span\u003e\n        .\u003cspan\u003eenableNotifications\u003c/span\u003e(\u003cspan\u003etrue\u003c/span\u003e) \u003cspan\u003e// not required \u0026amp; is false by default \u003c/span\u003e\n        .\u003cspan\u003ebuild\u003c/span\u003e()\n\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eAdd the Application class in the AndroidManifest\u003c/li\u003e \u003c/ul\u003e \u003cdiv data-snippet-clipboard-copy-content=\"\u0026lt;application ... android:name=\u0026#34;.App\u0026#34; ... \u0026lt;/application\u0026gt;\"\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;application\n        ...\n        android:name=\u0026#34;.App\u0026#34;\n        ...\n\u0026lt;/application\u0026gt;\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eLog using the Jambo class\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Kotlin and Java Jambo.w(\u0026#34;This is a WARN log\u0026#34;) Jambo.i(\u0026#34;This is an INFO log\u0026#34;) Jambo.d(\u0026#34;This is a DEBUG log\u0026#34;) Jambo.e(\u0026#34;This is an ERROR log\u0026#34;) Jambo.v(\u0026#34;This is a VERBOSE log\u0026#34;) Jambo.wtf(\u0026#34;This is an ASSERT log\u0026#34;)\"\u003e\u003cpre\u003e    \u003cspan\u003e// Kotlin and Java\u003c/span\u003e\n\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ew\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is a WARN log\u0026#34;\u003c/span\u003e)\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ei\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is an INFO log\u0026#34;\u003c/span\u003e)\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is a DEBUG log\u0026#34;\u003c/span\u003e)\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ee\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is an ERROR log\u0026#34;\u003c/span\u003e)\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ev\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is a VERBOSE log\u0026#34;\u003c/span\u003e)\n    \u003cspan\u003eJambo\u003c/span\u003e.\u003cspan\u003ewtf\u003c/span\u003e(\u003cspan\u003e\u0026#34;This is an ASSERT log\u0026#34;\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eWith Timber\u003c/h3\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Kotlin class App : Application { ... val tree = JamboTree( application = this, // application context enableNotifications = false // enable notifications, which is false by default ) Timber.plant(tree) ... }\"\u003e\u003cpre\u003e\u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e Kotlin\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e : \u003cspan\u003eApplication\u003c/span\u003e {\n    \u003cspan\u003e..\u003c/span\u003e.\n   \n    \u003cspan\u003eval\u003c/span\u003e tree \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eJamboTree\u003c/span\u003e(\n        application \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ethis\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e application context\u003c/span\u003e\n        enableNotifications \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e enable notifications, which is false by default\u003c/span\u003e\n    )\n    \u003cspan\u003eTimber\u003c/span\u003e.plant(tree)\n    \n    \u003cspan\u003e..\u003c/span\u003e.\n}\u003c/pre\u003e\u003c/div\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"// Java class App extends Application { ... val tree = new JamboTree( this, // application context true // enable notifications, which is false by default ); Timber.plant(tree); ... }\"\u003e\u003cpre\u003e\u003cspan\u003e// Java\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eApplication\u003c/span\u003e {\n    ...\n    \n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003etree\u003c/span\u003e = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eJamboTree\u003c/span\u003e(\n            \u003cspan\u003ethis\u003c/span\u003e, \u003cspan\u003e// application context\u003c/span\u003e\n            \u003cspan\u003etrue\u003c/span\u003e \u003cspan\u003e// enable notifications, which is false by default\u003c/span\u003e\n    );\n    \u003cspan\u003eTimber\u003c/span\u003e.\u003cspan\u003eplant\u003c/span\u003e(\u003cspan\u003etree\u003c/span\u003e);\n    \n    ...\n}\u003c/pre\u003e\u003c/div\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eOpen the Jambo app and view your logs (\u003ccode\u003esearch\u003c/code\u003e, \u003ccode\u003efilter\u003c/code\u003e, \u003ccode\u003eview\u003c/code\u003e or \u003ccode\u003eclear\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e \u003ca href=\"https://github.com/tabasumu/jambo/raw/origins/images/empty.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"150\" data-layzr=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/empty.png\" src=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/empty.png\"/\u003e\u003c/a\u003e \u003ca href=\"https://github.com/tabasumu/jambo/raw/origins/images/dark.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"150\" data-layzr=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/dark.png\" src=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/dark.png\"/\u003e\u003c/a\u003e \u003ca href=\"https://github.com/tabasumu/jambo/raw/origins/images/more.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"150\" data-layzr=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/more.png\" src=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/more.png\"/\u003e\u003c/a\u003e \u003ca href=\"https://github.com/tabasumu/jambo/raw/origins/images/light.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"150\" data-layzr=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/light.png\" src=\"https://raw.githubusercontent.com/tabasumu/jambo/origins/images/light.png\"/\u003e\u003c/a\u003e \u003c/p\u003e \u003cbr/\u003e \u003cdiv dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eContributing\u003c/h2\u003e\u003c/div\u003e  \u003cp dir=\"auto\"\u003eYour contributions are especially welcome. Whether it comes in the form of code patches, ideas, discussion, bug reports, encouragement or criticism, your input is needed.\u003c/p\u003e \u003cp dir=\"auto\"\u003eVisit \u003ca href=\"https://github.com/tabasumu/jambo/issues\" rel=\"nofollow\" target=\"_blank\"\u003eissues\u003c/a\u003e to get started.\u003c/p\u003e \u003cbr/\u003e \u003cdiv dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eCredits\u003c/h2\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/JakeWharton/timber\" rel=\"nofollow\" target=\"_blank\"\u003eTimber\u003c/a\u003e\u003c/p\u003e \u003cdiv dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003c/div\u003e \u003cdiv data-snippet-clipboard-copy-content=\"Copyright 2022 Tabasumu Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\"\u003e\u003cpre\u003e\u003ccode\u003eCopyright 2022 Tabasumu\n\nLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
