{
  "id": "c1da82db-a86a-406a-aa68-69b82451888e",
  "title": "SSComposeOTPPinView",
  "link": "https://android-arsenal.com/details/1/8488",
  "description": "A custom OTP view to enter a code usually used in authentication. It includes different types of OTPViews which is easy to use and configure your own view and character of OTP using all the attributes. üì≤ üî¢ ‚ú®",
  "author": "",
  "published": "Wed, 20 Mar 2024 09:43:05 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 3563,
  "excerpt": "Password Inputs | SSComposeOTPPinView by Simform Solutions (SimformSolutionsPvtLtd)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "SSComposeOTPPinView A custom view to enter a code usually used in authentication. Different types of OTPViews. Easy to use and configure your own view and character of OTP using all the attributes. Features Simple OTPView Box OTPView Underline OTPView We can manage our own OTPCount We can manage the OTP character color We can manage OTP character size We can manage the border color of OTPView as well We can enabled and disabled the visibility of OTP characters We can customize your OTP characters using attributes If we entered the incorrect length of OTP then button will not be clickable ???? Preview Simple OTPView with dot character Box OTPView with dot character Underline OTPView with dot character Simple OTPView with star character Box OTPView with star character Underline OTPView with star character How to use the library? Using Compose Just use the OtpView composable function where you need to display the view OtpView( otpText = otpValue, onOtpTextChange = { otpValue = it }, type = OTP_VIEW_TYPE_NONE, password = true, containerSize = 48.dp, passwordChar = \"‚Ä¢\", keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number), charColor = Color.White ) Next in your code create OtpView composable function like below: fun OtpView( modifier: Modifier = Modifier, otpText: String = \"\", charColor: Color = Color.Black, charBackground: Color = Color.Transparent, charSize: TextUnit = 16.sp, strokeColor: Color = Color.Black, containerSize: Dp = charSize.value.dp * 2, otpCount: Int = 4, type: Int = OTP_VIEW_TYPE_UNDERLINE, enabled: Boolean = true, password: Boolean = false, passwordChar: String = \"\", keyboardOptions: KeyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number), onOtpTextChange: (String) -\u003e Unit ) All Attributes Attribute Description charColor To change otp character color. charSize Set custom character size. containerSize To change the size of otp character container. otpCount Set the custom range of otp characters. password Show/hide the otp characters. passwordChar Set the custom character for otp password. strokecolor Set the custom color to container border. type For customization we have created three types: 1. OTP_VIEW_TYPE_NONE 2. OTP_VIEW_TYPE_UNDERLINE 3. OTP_VIEW_TYPE_BOX keyboardOptions Set the custom keyboard which you need. Official Documentations Jetpack Compose Jetpack Compose Pathways Find this samples useful? ‚ù§Ô∏è Support it by joining stargazers for this repository.‚≠ê How to Contribute???? Whether you're helping us fix bugs, improve the docs, or a feature request, we'd love to have you! ???? Check out our Contributing Guide for ideas on contributing. Bugs and Feedback For bugs, feature requests, and discussion please use GitHub Issues. Awesome Mobile Libraries Check out our other available awesome mobile libraries License Copyright 2022 Simform Solutions Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "https://raw.githubusercontent.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/main/gifs/simple_dot.gif",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eSSComposeOTPPinView\u003c/h2\u003e\u003c/p\u003e  \u003cp dir=\"auto\"\u003eA custom view to enter a code usually used in authentication. Different types of OTPViews. Easy to use and configure your own view and character of OTP using all the attributes.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eFeatures\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eSimple OTPView\u003c/li\u003e \u003cli\u003eBox OTPView\u003c/li\u003e \u003cli\u003eUnderline OTPView\u003c/li\u003e \u003cli\u003eWe can manage our own OTPCount\u003c/li\u003e \u003cli\u003eWe can manage the OTP character color\u003c/li\u003e \u003cli\u003eWe can manage OTP character size\u003c/li\u003e \u003cli\u003eWe can manage the border color of OTPView as well\u003c/li\u003e \u003cli\u003eWe can enabled and disabled the visibility of OTP characters\u003c/li\u003e \u003cli\u003eWe can customize your OTP characters using attributes\u003c/li\u003e \u003cli\u003eIf we entered the incorrect length of OTP then button will not be clickable\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003e???? Preview\u003c/h2\u003e\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eSimple OTPView with dot character\u003c/th\u003e \u003cth\u003eBox OTPView with dot character\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/simple_dot.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/box_dot.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eUnderline OTPView with dot character\u003c/th\u003e \u003cth\u003eSimple OTPView with star character\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/underline_dot.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/simple_star.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eBox OTPView with star character\u003c/th\u003e \u003cth\u003eUnderline OTPView with star character\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/box_star.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003ctd\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/raw/main/gifs/underline_star.gif\" rel=\"nofollow\" target=\"_blank\"\u003e\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eHow to use the library?\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eUsing Compose Just use the \u003ccode\u003eOtpView\u003c/code\u003e composable function where you need to display the view\u003c/li\u003e \u003c/ul\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"OtpView( otpText = otpValue, onOtpTextChange = { otpValue = it }, type = OTP_VIEW_TYPE_NONE, password = true, containerSize = 48.dp, passwordChar = \u0026#34;‚Ä¢\u0026#34;, keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number), charColor = Color.White )\"\u003e\u003cpre\u003e \u003cspan\u003eOtpView\u003c/span\u003e(\n    otpText \u003cspan\u003e=\u003c/span\u003e otpValue,\n    onOtpTextChange \u003cspan\u003e=\u003c/span\u003e {\n    otpValue \u003cspan\u003e=\u003c/span\u003e it\n    },\n    type \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eOTP_VIEW_TYPE_NONE\u003c/span\u003e,\n    password \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e,\n    containerSize \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e48\u003c/span\u003e.dp,\n    passwordChar \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e‚Ä¢\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e,\n    keyboardOptions \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eKeyboardOptions\u003c/span\u003e(keyboardType \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eKeyboardType\u003c/span\u003e.\u003cspan\u003eNumber\u003c/span\u003e),\n    charColor \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eWhite\u003c/span\u003e\n)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eNext in your code create \u003ccode\u003eOtpView\u003c/code\u003e composable function like below:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"fun OtpView( modifier: Modifier = Modifier, otpText: String = \u0026#34;\u0026#34;, charColor: Color = Color.Black, charBackground: Color = Color.Transparent, charSize: TextUnit = 16.sp, strokeColor: Color = Color.Black, containerSize: Dp = charSize.value.dp * 2, otpCount: Int = 4, type: Int = OTP_VIEW_TYPE_UNDERLINE, enabled: Boolean = true, password: Boolean = false, passwordChar: String = \u0026#34;\u0026#34;, keyboardOptions: KeyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number), onOtpTextChange: (String) -\u0026gt; Unit )\"\u003e\u003cpre\u003e\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eOtpView\u003c/span\u003e(\n    \u003cspan\u003emodifier\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eModifier\u003c/span\u003e = \u003cspan\u003eModifier\u003c/span\u003e,\n    \u003cspan\u003eotpText\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e = \u0026#34;\u0026#34;,\n    \u003cspan\u003echarColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e = \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eBlack\u003c/span\u003e,\n    \u003cspan\u003echarBackground\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e = \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eTransparent\u003c/span\u003e,\n    \u003cspan\u003echarSize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eTextUnit\u003c/span\u003e = 16.sp,\n    \u003cspan\u003estrokeColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e = \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eBlack\u003c/span\u003e,\n    \u003cspan\u003econtainerSize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDp\u003c/span\u003e = charSize.value.dp * 2,\n    \u003cspan\u003eotpCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e = 4,\n    \u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e = \u003cspan\u003eOTP_VIEW_TYPE_UNDERLINE\u003c/span\u003e,\n    \u003cspan\u003eenabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBoolean\u003c/span\u003e = true,\n    \u003cspan\u003epassword\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBoolean\u003c/span\u003e = false,\n    \u003cspan\u003epasswordChar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e = \u0026#34;\u0026#34;,\n    \u003cspan\u003ekeyboardOptions\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eKeyboardOptions\u003c/span\u003e = \u003cspan\u003eKeyboardOptions\u003c/span\u003e(keyboardType = \u003cspan\u003eKeyboardType\u003c/span\u003e.\u003cspan\u003eNumber\u003c/span\u003e),\n    \u003cspan\u003eonOtpTextChange\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e (\u003cspan\u003eString\u003c/span\u003e) \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eUnit\u003c/span\u003e\n)\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAll Attributes\u003c/h3\u003e\u003c/p\u003e \u003chr/\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eAttribute\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003echarColor\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eTo change otp character color.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003echarSize\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eSet custom character size.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003econtainerSize\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eTo change the size of otp character container.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003eotpCount\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eSet the custom range of otp characters.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eShow/hide the otp characters.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003epasswordChar\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eSet the custom character for otp password.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003estrokecolor\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eSet the custom color to container border.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003etype\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eFor customization we have created three types: \u003cbr/\u003e1. OTP_VIEW_TYPE_NONE \u003cbr/\u003e2. OTP_VIEW_TYPE_UNDERLINE \u003cbr/\u003e3. OTP_VIEW_TYPE_BOX\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003e\u003ccode\u003ekeyboardOptions\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eSet the custom keyboard which you need.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eOfficial Documentations\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003e\u003ca href=\"https://developer.android.com/jetpack/compose\" rel=\"nofollow\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.android.com/courses/pathways/compose\" rel=\"nofollow\" target=\"_blank\"\u003eJetpack Compose Pathways\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eFind this samples useful? ‚ù§Ô∏è\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eSupport it by joining \u003cstrong\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/stargazers\" rel=\"nofollow\" target=\"_blank\"\u003estargazers\u003c/a\u003e\u003c/strong\u003e for this repository.‚≠ê\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eHow to Contribute????\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWhether you\u0026#39;re helping us fix bugs, improve the docs, or a feature request, we\u0026#39;d love to have you! ???? Check out our \u003cstrong\u003e\u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/blob/main/CONTRIBUTING.md\" rel=\"nofollow\" target=\"_blank\"\u003eContributing Guide\u003c/a\u003e\u003c/strong\u003e for ideas on contributing.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eBugs and Feedback\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eFor bugs, feature requests, and discussion please use \u003ca href=\"https://github.com/SimformSolutionsPvtLtd/SSComposeOTPPinView/issues\" rel=\"nofollow\" target=\"_blank\"\u003eGitHub Issues\u003c/a\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eAwesome Mobile Libraries\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eCheck out our other available \u003ca href=\"https://github.com/SimformSolutionsPvtLtd/Awesome-Mobile-Libraries\" rel=\"nofollow\" target=\"_blank\"\u003eawesome mobile libraries\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLicense\u003c/h2\u003e\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"Copyright 2022 Simform Solutions Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\"\u003e\u003cpre\u003e\u003ccode\u003eCopyright 2022 Simform Solutions\n\n   Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
