{
  "id": "5df627fb-8a58-447f-a236-2ee738b40997",
  "title": "Android P2P Chat Web-RTC",
  "link": "https://proandroiddev.com/android-p2p-chat-web-rtc-74e54b5d4030?source=rss----c72404660798---4",
  "description": "",
  "author": "dalakoti07",
  "published": "Sat, 26 Oct 2024 20:36:48 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "compose",
    "webrtc",
    "nodejs",
    "kotlin"
  ],
  "byline": "dalakoti07",
  "length": 2700,
  "excerpt": "WebRTC is an open source project to enable realtime communication of audio, video and data in Web and native apps. So as a result we would be using webRTC to create peer to peer connection and then…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "AI generatedWhat we would be buildingWeb RTCWebRTC is an open source project to enable realtime communication of audio, video and data in Web and native apps. So as a result we would be using webRTC to create peer to peer connection and then using data channels to create a chat app.Signalling serverWebRTC uses RTCPeerConnection to communicate streaming data between browsers, but also needs a mechanism to coordinate communication and to send control messages, a process known as signaling. Signaling methods and protocols are not specified by WebRTCSTUN and TURN serversWebRTC is designed to work peer-to-peer, so users can connect by the most direct route possible. However, WebRTC is built to cope with real-world networking: client applications need to traverse NAT gateways and firewalls, and peer to peer networking needs fallbacks in case direct connection fails. As part of this process, the WebRTC APIs use STUN servers to get the IP address of your computer, and TURN servers to function as relay servers in case peer-to-peer communication fails. ( WebRTC in the real world explains in more detail.)General Flow for P2P connectionsCode for Signalling serverWe would simply create a Node Server, which would act as signalling server since it uses web socketsWhat is SDP?SDP stands for Session Description Protocol, and it plays a vital role in WebRTC (Web Real-Time Communication) for negotiating and establishing peer-to-peer connections between devices. SDP is a text-based protocol that describes the multimedia capabilities and session parameters of participants in a communication session.A brief from code and diagramAI generated imageLet’s get startedDependenciesConnection with web socketWe would be emitting SocketEvents via sharedFlowViewModel, States and ActionsRest of Implementation and gotchasRTC peer connection creationIn accordance with our code of client 1 and client 2,client 1 would create RTC peer object when it decided to call client 2but client would create RTC peer object when it receives offer from client 1, and decides to accept itThis is denoted by cold start on below diagramWebRTCManagerAll webRTC related things are delegated to this class see code in github repo, likesetting up data channelsanswer to any p2p offersetting remote session SDP to incoming SDP from socketcreating a brand new offercreate data channels, and send exposing received from peer connection’s data channel as sharedFlowHandling own’s send messageUnable to see own’s sent message in UI Activity, as a workaround emitted message in shared flow directly. You know a better solution, please do drop a comment.CodeFull code can be found hereResourcesWebrtc-infrastructureWeb rtc codelab",
  "image": "https://miro.medium.com/v2/resize:fit:1024/1*jmjgThrmB8VWsK7H4bQhwA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@dalakoti07?source=post_page-----74e54b5d4030--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"dalakoti07\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*zOMPSiOgMaQN-qsEQx4A8Q.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page-----74e54b5d4030--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eAI generated\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"7ac2\"\u003eWhat we would be building\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"b91e\"\u003eWeb RTC\u003c/h2\u003e\u003cp id=\"bf15\"\u003eWebRTC is an open source project to enable realtime communication of audio, video and data in Web and native apps. So as a result we would be using webRTC to create peer to peer connection and then using data channels to create a chat app.\u003c/p\u003e\u003ch2 id=\"1dc6\"\u003eSignalling server\u003c/h2\u003e\u003cp id=\"772f\"\u003eWebRTC uses RTCPeerConnection to communicate streaming data between browsers, but also needs a mechanism to coordinate communication and to send control messages, a process known as signaling. Signaling methods and protocols are not specified by WebRTC\u003c/p\u003e\u003ch2 id=\"23da\"\u003eSTUN and TURN servers\u003c/h2\u003e\u003cp id=\"662f\"\u003eWebRTC is designed to work peer-to-peer, so users can connect by the most direct route possible. However, WebRTC is built to cope with real-world networking: client applications need to traverse \u003ca href=\"http://en.wikipedia.org/wiki/NAT_traversal\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNAT gateways\u003c/a\u003e and firewalls, and peer to peer networking needs fallbacks in case direct connection fails. As part of this process, the WebRTC APIs use STUN servers to get the IP address of your computer, and TURN servers to function as relay servers in case peer-to-peer communication fails. ( \u003ca href=\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWebRTC in the real world\u003c/a\u003e explains in more detail.)\u003c/p\u003e\u003ch2 id=\"f7fc\"\u003eGeneral Flow for P2P connections\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"2736\"\u003eCode for Signalling server\u003c/h2\u003e\u003cp id=\"d6cd\"\u003eWe would simply create a Node Server, which would act as signalling server since it uses web sockets\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"5450\"\u003eWhat is SDP?\u003c/h2\u003e\u003cp id=\"1480\"\u003eSDP stands for Session Description Protocol, and it plays a vital role in WebRTC (Web Real-Time Communication) for negotiating and establishing peer-to-peer connections between devices. SDP is a text-based protocol that describes the multimedia capabilities and session parameters of participants in a communication session.\u003c/p\u003e\u003ch2 id=\"dfe2\"\u003eA brief from code and diagram\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eAI generated image\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"595e\"\u003eLet’s get started\u003c/h2\u003e\u003ch2 id=\"a25b\"\u003eDependencies\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"3439\"\u003eConnection with web socket\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"32ef\"\u003eWe would be emitting \u003ccode\u003eSocketEvents\u003c/code\u003e via sharedFlow\u003c/p\u003e\u003ch2 id=\"d874\"\u003eViewModel, States and Actions\u003c/h2\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"39be\"\u003eRest of Implementation and gotchas\u003c/h2\u003e\u003ch2 id=\"db19\"\u003eRTC peer connection creation\u003c/h2\u003e\u003cp id=\"4bb9\"\u003eIn accordance with our code of client 1 and client 2,\u003c/p\u003e\u003cul\u003e\u003cli id=\"521c\"\u003eclient 1 would create RTC peer object when it decided to call client 2\u003c/li\u003e\u003cli id=\"50bb\"\u003ebut client would create RTC peer object when it receives offer from client 1, and decides to accept it\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1b44\"\u003eThis is denoted by cold start on below diagram\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"1334\"\u003eWebRTCManager\u003c/h2\u003e\u003cp id=\"cca1\"\u003eAll webRTC related things are delegated to this class see code in github repo, like\u003c/p\u003e\u003cul\u003e\u003cli id=\"b26d\"\u003esetting up data channels\u003c/li\u003e\u003cli id=\"f664\"\u003eanswer to any p2p offer\u003c/li\u003e\u003cli id=\"6bc0\"\u003esetting remote session SDP to incoming SDP from socket\u003c/li\u003e\u003cli id=\"9788\"\u003ecreating a brand new offer\u003c/li\u003e\u003cli id=\"5e0d\"\u003ecreate data channels, and send exposing received from peer connection’s data channel as sharedFlow\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8334\"\u003eHandling own’s send message\u003c/h2\u003e\u003cp id=\"1929\"\u003eUnable to see own’s sent message in UI Activity, as a workaround emitted message in shared flow directly. You know a better solution, please do drop a comment.\u003c/p\u003e\u003ch2 id=\"f5d9\"\u003eCode\u003c/h2\u003e\u003cp id=\"1ba0\"\u003eFull code can be found \u003ca href=\"https://github.com/Dalakoti07/everthing-rtc/tree/main/file-transfer\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"62d2\"\u003eResources\u003c/h2\u003e\u003cp id=\"4319\"\u003e\u003ca href=\"https://web.dev/articles/webrtc-infrastructure\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWebrtc-infrastructure\u003c/a\u003e\u003c/p\u003e\u003cp id=\"e41e\"\u003e\u003ca href=\"https://codelabs.developers.google.com/codelabs/webrtc-web#5\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWeb rtc codelab\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-04-04T06:40:43.783Z",
  "modifiedTime": null
}
