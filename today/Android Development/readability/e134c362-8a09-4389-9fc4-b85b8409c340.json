{
  "id": "e134c362-8a09-4389-9fc4-b85b8409c340",
  "title": "Deep Linking API",
  "link": "https://android-arsenal.com/details/1/8477",
  "description": "A simple library for handling incoming app links.",
  "author": "",
  "published": "Fri, 01 Mar 2024 04:25:58 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 10768,
  "excerpt": "Deep Links | Deep Linking API by Just Eat Takeaway.com (justeattakeaway)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "Deep Linking API In an Android app we can define URI patterns that map URI's to activities using intent-filters. To find out more about this you should read this documentation provided by Google https://developer.android.com/training/app-links Once we have defined which URI's are handled by our application in our manifest we can then inspect the URI of incoming link Intent's and decide how to act on them. The Deep Linking API takes care of handling incoming links by mapping URI patterns to Command's. These Command's can then be used to launch an activity, show a Fragment, show some other UI or anything else you can do in the context of the Activity that handles your deep links. The approach is inspired by Martin Fowler's Front Controller pattern. Adding Dependencies Step 1. Add the JitPack repository to your build file allprojects { repositories { ... maven { url 'https://jitpack.io' } } } Step 2. Add the dependency dependencies { implementation 'com.github.justeattakeaway:android-deep-links:1.0.0' } Usage Guide We first must designate an activity that will handle incoming deep links and add the necessary intent-filters for the activity in our AndroidManifest.xml as follows. \u003cactivity android:name=\".examples.simple.ExampleDeepLinkActivity\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:launchMode=\"singleTask\"\u003e \u003cintent-filter tools:ignore=\"AppLinkUrlError\"\u003e \u003caction android:name=\"android.intent.action.VIEW\" /\u003e \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e \u003cdata android:scheme=\"https\" /\u003e \u003cdata android:host=\"simple.site.com\" /\u003e \u003c/intent-filter\u003e \u003c/activity\u003e With our intent-filter defined we can then define our routing, for the simplest approach we use deepLinkRouter extension function to do most of the setup for us. class ExampleDeepLinkActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) deepLinkRouter { schemes(\"https\") hosts(\"simple.site.com\") \"/home\" mapTo { HomeCommand() } \"/products/[a-zA-Z0-9]*\" mapTo { ProductCommand() } }.route(intent.data ?: Uri.EMPTY) } } In the example we map paths /home to a HomeCommand and also a /product/[a-zA-Z0-9]* to a ProductCommand respectively. The path part is what follows the host part of the URI such as https://simple.site.com/products/123 and in our mapping we define it as a Regex. For the ProductCommand we map it to a Regex that matches a product ID of the pattern [a-zA-Z0-9]* Commands With our mapping defined and mapped to commands we need to make our commands do something. Typically a command will just start an activity however it can do more (more on this later). The following command is for the /home path pattern. class HomeCommand : Command() { override fun execute() = navigate { context -\u003e context.startActivity(Intent(context, HomeActivity::class.java)) } } Looking at the HomeCommand example notice the block navigate { .. }. Commands should end with a navigate {} block and the block should define what should happen once the command is complete. The reason for this is commands can work with coroutines (more on this later) and sometimes a command may take longer to complete and also go through Android configuration changes. The navigate {} block will be called at a moment where its safe to do so in the android UI lifecycle and given the current Context so that it may safely perform things like intent navigation. Other than the lengthy explanation for the navigate block, a command is mostly simple and all it does is redirect to an activity, in this case HomeActivity. The next example is the ProductCommand that is mapped to the pattern /products/[a-zA-Z0-9]* class ProductCommand : Command() { private val productId by pathSegment(1) override fun execute() = navigate { context -\u003e context.startActivity( Intent(context, ProductActivity::class.java) .putExtra(\"productId\", productId) ) } } This command extracts a path segment from position 1 in the URI which is the part that matched [a-zA-Z0-9]* giving us the product ID. We achieve this using the convenient pathSegment(index) property delegate. As with pathSegment(index) we can also use queryParam(name) to get at the URI's query parameters, if that is not enough you can access a property uri which will give you the android.net.Uri. The ProductCommand concludes with navigate { } constructing an Intent for ProductActivity passing along the product ID extracted from the Uri as an intent extra. Testing your deep links To test links you can use an ADB shell command to launch your app and give it a link, the following example shows how to launch with a link that maps to HomeCommand. adb shell am start -W -a android.intent.action.VIEW -d \"https://simple.site.com/home\" com.jet.android.links In the command we specify which app to launch using the package name com.jet.android.links. You can read more about this in the official Android developer docs https://developer.android.com/training/app-links/deep-linking#testing-filters Similarly to map to ProductCommand we can use the URI pattern with the product id as follows. adb shell am start -W -a android.intent.action.VIEW -d \"https://simple.site.com/products/abcd1234\" com.jet.android.links Command Requirements Intercepting a deep link and handing it in a command is useful, we can inspect the deep link and route it into the app to an activity or other. Sometimes however we may need more information from the user that is deep-linking into the app or we may require them to satisfy a particular state such as being authenticated or being geo located. To handle these situations we can use Command Requirements, a neat way to suspend a command until the requirements are satisfied. The following example shows how to achieve this using the linking API's require() and satisfy(Any) functions. class OrderDetailsCommand : Command() { private val orderId by pathSegment(1) private var loginResult: LoginResult? = null override fun execute() { launch { loginResult = require() } navigate { context -\u003e context.startActivity( Intent(context, OrderDetailsActivity::class.java) .putExtra(\"orderId\", orderId) .putExtra(\"loginName\", loginResult!!.name) ) } } } In the above command when we hit the line loginResult = require() our command will suspend and wait for the value from require(). To make the command continue we need to tell the router/controller to satisfy(Any) the requirement. The following example shows a deep link router setup that maps an incoming deep link with the path pattern /orders/[a-zA-Z0-9]* to the OrderDertailsCommand. This will match on a deep link such as https://requirements.site.com/orders/abcd1234 class ExampleDeepLinkActivity : ComponentActivity() { private val router by lazy { deepLinkRouter { schemes(\"https\") hosts(\"requirements.site.com\") \"/home\" mapTo { HomeCommand() } \"/orders/[a-zA-Z0-9]*\" mapTo { OrderDetailsCommand() } } } private val loginForResult = registerForActivityResult(StartActivityForResult()) { val loginName = it.data!!.getStringExtra(\"loginName\")!! router.satisfy(LoginResult(name = loginName)) } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) router.onRequirement(this) { if (it == LoginResult::class.java) { startLoginActivity() } } router.route(intent.data ?: Uri.EMPTY) } private fun startLoginActivity() { loginForResult.launch(Intent(this, LoginActivity::class.java)) } } We use the Activity Result API to launch a new activity LoginActivity, the user enters their name and returns back with a Login button. When the user returns back to ExampleDeepLinkActivity we extract the loginName argument from the result Intent (the name they entered into the name field on login screen) and we then call router.satisfy(LoginResult(name = loginName)) passing in the login name. In order to launch the LoginActivity we need to tell the router what to do when a command comes across a requirement router.onRequirement(this) { if (it == LoginResult::class.java) { startLoginActivity() } } We achieve this by calling onRequirement and if we have test for the requirement for a LoginResult and if true then start the login activity using startLoginActivity() which simply launches the LoginActivity. Command Completion When a command completes, the default behaviour when using deepLinkRouter extension function to set up a router will call the commands navigate(Context) function and then call finish() on the activity. If you want to do something different you can provide your own command completion callback. router.onCommandComplete(this) { when (it) { is DeepLinkRouter.Result.Complete -\u003e { // TODO do something before navigate it.navigate(this) // TODO do something after navigate finish() } is DeepLinkRouter.Result.Cancelled -\u003e { // TODO handle command cancellation } } } Looking at the example we call onCommpandComplete(LifecycleOwner, (DeepLinkRouter.Result) -\u003e Unit) with a callback that can handle the result and then must call it.navigate(this) to execute the commands navigate function manually. You can then either finish() the activity (the usual pattern) or do something else. As well as handling command completion we can also define what happens when the command is cancelled, this will occur if the commands coroutine Job is cancelled. References Handling Android App Links https://developer.android.com/training/app-links Testing Links https://developer.android.com/training/app-links/deep-linking#testing-filters Martin Fowler's Front Controller Pattern https://martinfowler.com/eaaCatalog/frontController.html LICENSE Copyright 2022 Just Eat Takeaway Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDeep Linking API\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eIn an Android app we can define URI patterns that map URI\u0026#39;s to activities using intent-filters.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo find out more about this you should read this documentation provided by Google \u003ca href=\"https://developer.android.com/training/app-links\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://developer.android.com/training/app-links\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eOnce we have defined which URI\u0026#39;s are handled by our application in our manifest we can then inspect the URI of incoming link Intent\u0026#39;s and decide how to act on them.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe Deep Linking API takes care of handling incoming links by mapping URI patterns to \u003ccode\u003eCommand\u003c/code\u003e\u0026#39;s.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThese \u003ccode\u003eCommand\u003c/code\u003e\u0026#39;s can then be used to launch an activity, show a Fragment, show some other UI or anything else you can do in the context of the Activity that handles your deep links.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe approach is inspired by Martin Fowler\u0026#39;s Front Controller pattern.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eAdding Dependencies\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eStep 1. Add the JitPack repository to your build file\u003c/h3\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"allprojects { repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } }\"\u003e\u003cpre\u003eallprojects {\n  repositories {\n    \u003cspan\u003e..\u003c/span\u003e.\n    maven { url \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ehttps://jitpack.io\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e }\n  }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eStep 2. Add the dependency\u003c/h3\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"dependencies { implementation \u0026#39;com.github.justeattakeaway:android-deep-links:1.0.0\u0026#39; }\"\u003e\u003cpre\u003edependencies {\n  implementation \u003cspan\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003ecom.github.justeattakeaway:android-deep-links:1.0.0\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage Guide\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWe first must designate an activity that will handle incoming deep links and add the necessary intent-filters for the activity in our \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e as follows.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;activity android:name=\u0026#34;.examples.simple.ExampleDeepLinkActivity\u0026#34; android:excludeFromRecents=\u0026#34;true\u0026#34; android:exported=\u0026#34;true\u0026#34; android:launchMode=\u0026#34;singleTask\u0026#34;\u0026gt; \u0026lt;intent-filter tools:ignore=\u0026#34;AppLinkUrlError\u0026#34;\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34; /\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34; /\u0026gt; \u0026lt;data android:scheme=\u0026#34;https\u0026#34; /\u0026gt; \u0026lt;data android:host=\u0026#34;simple.site.com\u0026#34; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan\u003eactivity\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.examples.simple.ExampleDeepLinkActivity\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eexcludeFromRecents\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eexported\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003etrue\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003elaunchMode\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003esingleTask\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan\u003eintent-filter\u003c/span\u003e \u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eignore\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eAppLinkUrlError\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan\u003eaction\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid.intent.action.VIEW\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan\u003ecategory\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid.intent.category.DEFAULT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n\n        \u0026lt;\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003escheme\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan\u003edata\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ehost\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003esimple.site.com\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n    \u0026lt;/\u003cspan\u003eintent-filter\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan\u003eactivity\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eWith our intent-filter defined we can then define our routing, for the simplest approach we use \u003ccode\u003edeepLinkRouter\u003c/code\u003e extension function to do most of the setup for us.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class ExampleDeepLinkActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) deepLinkRouter { schemes(\u0026#34;https\u0026#34;) hosts(\u0026#34;simple.site.com\u0026#34;) \u0026#34;/home\u0026#34; mapTo { HomeCommand() } \u0026#34;/products/[a-zA-Z0-9]*\u0026#34; mapTo { ProductCommand() } }.route(intent.data ?: Uri.EMPTY) } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eExampleDeepLinkActivity\u003c/span\u003e : \u003cspan\u003eComponentActivity\u003c/span\u003e() {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e(\u003cspan\u003esavedInstanceState\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBundle\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e) {\n        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\n\n        deepLinkRouter {\n            schemes(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n            hosts(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003esimple.site.com\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n\n            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/home\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e mapTo { \u003cspan\u003eHomeCommand\u003c/span\u003e() }\n            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/products/[a-zA-Z0-9]*\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e mapTo { \u003cspan\u003eProductCommand\u003c/span\u003e() }\n        }.route(intent.data \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e.\u003cspan\u003eEMPTY\u003c/span\u003e)\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eIn the example we map paths \u003ccode\u003e/home\u003c/code\u003e to a \u003ccode\u003eHomeCommand\u003c/code\u003e and also a \u003ccode\u003e/product/[a-zA-Z0-9]*\u003c/code\u003e to a \u003ccode\u003eProductCommand\u003c/code\u003e respectively.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe path part is what follows the host part of the URI such as \u003ccode\u003ehttps://simple.site.com/products/123\u003c/code\u003e and in our mapping we define it as a Regex.\u003c/p\u003e \u003cp dir=\"auto\"\u003eFor the \u003ccode\u003eProductCommand\u003c/code\u003e we map it to a Regex that matches a product ID of the pattern \u003ccode\u003e[a-zA-Z0-9]*\u003c/code\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eCommands\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWith our mapping defined and mapped to commands we need to make our commands do something.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTypically a command will just start an activity however it can do more (more on this later).\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe following command is for the \u003ccode\u003e/home\u003c/code\u003e path pattern.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class HomeCommand : Command() { override fun execute() = navigate { context -\u0026gt; context.startActivity(Intent(context, HomeActivity::class.java)) } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eHomeCommand\u003c/span\u003e : \u003cspan\u003eCommand\u003c/span\u003e() {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e navigate { context \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n        context.startActivity(\u003cspan\u003eIntent\u003c/span\u003e(context, \u003cspan\u003eHomeActivity\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java))\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eLooking at the \u003ccode\u003eHomeCommand\u003c/code\u003e example notice the block \u003ccode\u003enavigate { .. }\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eCommands should end with a \u003ccode\u003enavigate {}\u003c/code\u003e block and the block should define what should happen once the command is complete. The reason for this is commands can work with coroutines (more on this later) and sometimes a command may take longer to complete and also go through Android configuration changes. The \u003ccode\u003enavigate {}\u003c/code\u003e block will be called at a moment where its safe to do so in the android UI lifecycle and given the current \u003ccode\u003eContext\u003c/code\u003e so that it may safely perform things like intent navigation.\u003c/p\u003e \u003cp dir=\"auto\"\u003eOther than the lengthy explanation for the navigate block, a command is mostly simple and all it does is redirect to an activity, in this case \u003ccode\u003eHomeActivity\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe next example is the \u003ccode\u003eProductCommand\u003c/code\u003e that is mapped to the pattern \u003ccode\u003e/products/[a-zA-Z0-9]*\u003c/code\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class ProductCommand : Command() { private val productId by pathSegment(1) override fun execute() = navigate { context -\u0026gt; context.startActivity( Intent(context, ProductActivity::class.java) .putExtra(\u0026#34;productId\u0026#34;, productId) ) } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProductCommand\u003c/span\u003e : \u003cspan\u003eCommand\u003c/span\u003e() {\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e productId by pathSegment(\u003cspan\u003e1\u003c/span\u003e)\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e() \u003cspan\u003e=\u003c/span\u003e navigate { context \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n        context.startActivity(\n            \u003cspan\u003eIntent\u003c/span\u003e(context, \u003cspan\u003eProductActivity\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java)\n                .putExtra(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eproductId\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, productId)\n        )\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eThis command extracts a path segment from position 1 in the URI which is the part that matched \u003ccode\u003e[a-zA-Z0-9]*\u003c/code\u003e giving us the product ID. We achieve this using the convenient \u003ccode\u003epathSegment(index)\u003c/code\u003e property delegate.\u003c/p\u003e \u003cp dir=\"auto\"\u003eAs with \u003ccode\u003epathSegment(index)\u003c/code\u003e we can also use \u003ccode\u003equeryParam(name)\u003c/code\u003e to get at the URI\u0026#39;s query parameters, if that is not enough you can access a property \u003ccode\u003euri\u003c/code\u003e which will give you the \u003ccode\u003eandroid.net.Uri\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe \u003ccode\u003eProductCommand\u003c/code\u003e concludes with \u003ccode\u003enavigate { }\u003c/code\u003e constructing an \u003ccode\u003eIntent\u003c/code\u003e for \u003ccode\u003eProductActivity\u003c/code\u003e passing along the product ID extracted from the Uri as an intent extra.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eTesting your deep links\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo test links you can use an ADB shell command to launch your app and give it a link, the following example shows how to launch with a link that maps to \u003ccode\u003eHomeCommand\u003c/code\u003e.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"adb shell am start -W -a android.intent.action.VIEW -d \u0026#34;https://simple.site.com/home\u0026#34; com.jet.android.links\"\u003e\u003cpre\u003eadb shell am start -W -a android.intent.action.VIEW -d \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://simple.site.com/home\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e com.jet.android.links\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eIn the command we specify which app to launch using the package name \u003ccode\u003ecom.jet.android.links\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eYou can read more about this in the official Android developer docs \u003ca href=\"https://developer.android.com/training/app-links/deep-linking#testing-filters\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://developer.android.com/training/app-links/deep-linking#testing-filters\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eSimilarly to map to \u003ccode\u003eProductCommand\u003c/code\u003e we can use the URI pattern with the product id as follows.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"adb shell am start -W -a android.intent.action.VIEW -d \u0026#34;https://simple.site.com/products/abcd1234\u0026#34; com.jet.android.links\"\u003e\u003cpre\u003eadb shell am start -W -a android.intent.action.VIEW -d \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps://simple.site.com/products/abcd1234\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e com.jet.android.links\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eCommand Requirements\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eIntercepting a deep link and handing it in a command is useful, we can inspect the deep link and route it into the app to an activity or other. Sometimes however we may need more information from the user that is deep-linking into the app or we may require them to satisfy a particular state such as being authenticated or being geo located.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo handle these situations we can use Command Requirements, a neat way to suspend a command until the requirements are satisfied.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe following example shows how to achieve this using the linking API\u0026#39;s \u003ccode\u003erequire()\u003c/code\u003e and \u003ccode\u003esatisfy(Any)\u003c/code\u003e functions.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class OrderDetailsCommand : Command() { private val orderId by pathSegment(1) private var loginResult: LoginResult? = null override fun execute() { launch { loginResult = require() } navigate { context -\u0026gt; context.startActivity( Intent(context, OrderDetailsActivity::class.java) .putExtra(\u0026#34;orderId\u0026#34;, orderId) .putExtra(\u0026#34;loginName\u0026#34;, loginResult!!.name) ) } } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eOrderDetailsCommand\u003c/span\u003e : \u003cspan\u003eCommand\u003c/span\u003e() {\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e orderId by pathSegment(\u003cspan\u003e1\u003c/span\u003e)\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e loginResult\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLoginResult\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eexecute\u003c/span\u003e() {\n        launch {\n            loginResult \u003cspan\u003e=\u003c/span\u003e require()\n        }\n\n        navigate { context \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n            context.startActivity(\n                \u003cspan\u003eIntent\u003c/span\u003e(context, \u003cspan\u003eOrderDetailsActivity\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java)\n                    .putExtra(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eorderId\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, orderId)\n                    .putExtra(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eloginName\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, loginResult\u003cspan\u003e!!\u003c/span\u003e.name)\n            )\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eIn the above command when we hit the line \u003ccode\u003eloginResult = require()\u003c/code\u003e our command will suspend and wait for the value from \u003ccode\u003erequire()\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo make the command continue we need to tell the router/controller to \u003ccode\u003esatisfy(Any)\u003c/code\u003e the requirement.\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe following example shows a deep link router setup that maps an incoming deep link with the path pattern \u003ccode\u003e/orders/[a-zA-Z0-9]*\u003c/code\u003e to the \u003ccode\u003eOrderDertailsCommand\u003c/code\u003e. This will match on a deep link such as \u003ccode\u003ehttps://requirements.site.com/orders/abcd1234\u003c/code\u003e\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class ExampleDeepLinkActivity : ComponentActivity() { private val router by lazy { deepLinkRouter { schemes(\u0026#34;https\u0026#34;) hosts(\u0026#34;requirements.site.com\u0026#34;) \u0026#34;/home\u0026#34; mapTo { HomeCommand() } \u0026#34;/orders/[a-zA-Z0-9]*\u0026#34; mapTo { OrderDetailsCommand() } } } private val loginForResult = registerForActivityResult(StartActivityForResult()) { val loginName = it.data!!.getStringExtra(\u0026#34;loginName\u0026#34;)!! router.satisfy(LoginResult(name = loginName)) } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) router.onRequirement(this) { if (it == LoginResult::class.java) { startLoginActivity() } } router.route(intent.data ?: Uri.EMPTY) } private fun startLoginActivity() { loginForResult.launch(Intent(this, LoginActivity::class.java)) } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eExampleDeepLinkActivity\u003c/span\u003e : \u003cspan\u003eComponentActivity\u003c/span\u003e() {\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e router by lazy {\n        deepLinkRouter {\n            schemes(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ehttps\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n            hosts(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003erequirements.site.com\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\n\n            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/home\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e mapTo { \u003cspan\u003eHomeCommand\u003c/span\u003e() }\n            \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e/orders/[a-zA-Z0-9]*\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e mapTo { \u003cspan\u003eOrderDetailsCommand\u003c/span\u003e() }\n        }\n    }\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e loginForResult \u003cspan\u003e=\u003c/span\u003e registerForActivityResult(\u003cspan\u003eStartActivityForResult\u003c/span\u003e()) {\n        \u003cspan\u003eval\u003c/span\u003e loginName \u003cspan\u003e=\u003c/span\u003e it.data\u003cspan\u003e!!\u003c/span\u003e.getStringExtra(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eloginName\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\u003cspan\u003e!!\u003c/span\u003e\n        router.satisfy(\u003cspan\u003eLoginResult\u003c/span\u003e(name \u003cspan\u003e=\u003c/span\u003e loginName))\n    }\n\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonCreate\u003c/span\u003e(\u003cspan\u003esavedInstanceState\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBundle\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e) {\n        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\n\n        router.onRequirement(\u003cspan\u003ethis\u003c/span\u003e) {\n            \u003cspan\u003eif\u003c/span\u003e (it \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eLoginResult\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java) {\n                startLoginActivity()\n            }\n        }\n\n        router.route(intent.data \u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUri\u003c/span\u003e.\u003cspan\u003eEMPTY\u003c/span\u003e)\n    }\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003estartLoginActivity\u003c/span\u003e() {\n        loginForResult.launch(\u003cspan\u003eIntent\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e, \u003cspan\u003eLoginActivity\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java))\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eWe use the Activity Result API to launch a new activity \u003ccode\u003eLoginActivity\u003c/code\u003e, the user enters their name and returns back with a Login button. When the user returns back to \u003ccode\u003eExampleDeepLinkActivity\u003c/code\u003e we extract the \u003ccode\u003eloginName\u003c/code\u003e argument from the result Intent (the name they entered into the name field on login screen) and we then call \u003ccode\u003erouter.satisfy(LoginResult(name = loginName))\u003c/code\u003e passing in the login name.\u003c/p\u003e \u003cp dir=\"auto\"\u003eIn order to launch the \u003ccode\u003eLoginActivity\u003c/code\u003e we need to tell the router what to do when a command comes across a requirement\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"router.onRequirement(this) { if (it == LoginResult::class.java) { startLoginActivity() } }\"\u003e\u003cpre\u003erouter.onRequirement(\u003cspan\u003ethis\u003c/span\u003e) {\n    \u003cspan\u003eif\u003c/span\u003e (it \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eLoginResult\u003c/span\u003e::\u003cspan\u003eclass\u003c/span\u003e.java) {\n        startLoginActivity()\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eWe achieve this by calling \u003ccode\u003eonRequirement\u003c/code\u003e and if we have test for the requirement for a \u003ccode\u003eLoginResult\u003c/code\u003e and if true then start the login activity using \u003ccode\u003estartLoginActivity()\u003c/code\u003e which simply launches the \u003ccode\u003eLoginActivity\u003c/code\u003e.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eCommand Completion\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eWhen a command completes, the default behaviour when using \u003ccode\u003edeepLinkRouter\u003c/code\u003e extension function to set up a router will call the commands \u003ccode\u003enavigate(Context)\u003c/code\u003e function and then call \u003ccode\u003efinish()\u003c/code\u003e on the activity.\u003c/p\u003e \u003cp dir=\"auto\"\u003eIf you want to do something different you can provide your own command completion callback.\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"router.onCommandComplete(this) { when (it) { is DeepLinkRouter.Result.Complete -\u0026gt; { // TODO do something before navigate it.navigate(this) // TODO do something after navigate finish() } is DeepLinkRouter.Result.Cancelled -\u0026gt; { // TODO handle command cancellation } } }\"\u003e\u003cpre\u003erouter.onCommandComplete(\u003cspan\u003ethis\u003c/span\u003e) {\n    \u003cspan\u003ewhen\u003c/span\u003e (it) {\n        \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eDeepLinkRouter\u003c/span\u003e.\u003cspan\u003eResult\u003c/span\u003e.\u003cspan\u003eComplete\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n            \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e TODO do something before navigate\u003c/span\u003e\n            it.navigate(\u003cspan\u003ethis\u003c/span\u003e)\n            \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e TODO do something after navigate\u003c/span\u003e\n            finish()\n        }\n        \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eDeepLinkRouter\u003c/span\u003e.\u003cspan\u003eResult\u003c/span\u003e.\u003cspan\u003eCancelled\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e {\n            \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e TODO handle command cancellation\u003c/span\u003e\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eLooking at the example we call \u003ccode\u003eonCommpandComplete(LifecycleOwner, (DeepLinkRouter.Result) -\u0026gt; Unit)\u003c/code\u003e with a callback that can handle the result and then must call \u003ccode\u003eit.navigate(this)\u003c/code\u003e to execute the commands navigate function manually. You can then either \u003ccode\u003efinish()\u003c/code\u003e the activity (the usual pattern) or do something else.\u003c/p\u003e \u003cp dir=\"auto\"\u003eAs well as handling command completion we can also define what happens when the command is cancelled, this will occur if the commands coroutine \u003ccode\u003eJob\u003c/code\u003e is cancelled.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eReferences\u003c/h2\u003e\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eHandling Android App Links \u003ca href=\"https://developer.android.com/training/app-links\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://developer.android.com/training/app-links\u003c/a\u003e\u003c/li\u003e \u003cli\u003eTesting Links \u003ca href=\"https://developer.android.com/training/app-links/deep-linking#testing-filters\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://developer.android.com/training/app-links/deep-linking#testing-filters\u003c/a\u003e\u003c/li\u003e \u003cli\u003eMartin Fowler\u0026#39;s Front Controller Pattern \u003ca href=\"https://martinfowler.com/eaaCatalog/frontController.html\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://martinfowler.com/eaaCatalog/frontController.html\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLICENSE\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eCopyright 2022 Just Eat Takeaway\u003c/p\u003e \u003cp dir=\"auto\"\u003eLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\" target=\"_blank\"\u003ehttp://www.apache.org/licenses/LICENSE-2.0\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\u003c/p\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
