{
  "id": "6057ed25-fa5c-4ab5-b246-dae8de8e9d53",
  "title": "Exploring Jetpack Compose: Aspect Ratio Modifier",
  "link": "https://joebirch.co/android/exploring-jetpack-compose-aspect-ratio-modifier/",
  "description": "In the world of Compose, there are a vast range of modifiers that are available at our disposable. As you build more and more UI with Compose, it’s likely that you’re going to discover new modifiers that you previously were not aware of. For me this week it was the aspectRatio modifier – so in... Continue reading →",
  "author": "hitherejoe",
  "published": "Sat, 03 Feb 2024 09:54:52 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose"
  ],
  "byline": "by hitherejoe",
  "length": 4301,
  "excerpt": "In the world of Compose, there are a vast range of modifiers that are available at our disposable. As you build more and more UI with Compose, it's likely that you're going to discover new modifiers that you previously were not aware of. For me this week it was the aspectRatio modifier - so in this",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In the world of Compose, there are a vast range of modifiers that are available at our disposable. As you build more and more UI with Compose, it’s likely that you’re going to discover new modifiers that you previously were not aware of. For me this week it was the aspectRatio modifier – so in this post, we’re going to take a quick dive into what this is and how we can make use of it in our projects. Looking to learn Jetpack Compose? Check out my course, Practical Jetpack Compose When it come to sizing of composables, we often turn to constraining dimensions using any of the various size modifiers (width, height, size etc) or filling the any of the available dimensions (fillMaxSize, fillMaxHeight, fillMaxWidth etc). However, these aren’t always going to satisfy our requirements as we may wish to size our composable in other ways based on the constraints of parent containers. For example, let’s imagine we have an application that allows you to select an image from the device gallery, to then be displayed as filling the available width of the screen space: Here we are using the fillMaxWidth modifier to fill the available space, and our height is automatically wrapping the available size of the content. However, this is taking up a lot of screen estate – and due to this just being a small preview of the media item, we don’t need it to take up so much space within our UI. We want to reduce the height shown, so we can try fixing the height to reduce the space it takes up. Modifier.fillMaxWidth().height(500.dp) While this looks OK here, this magic value will only work for media items of this height or greater – if we attach a media item that is shorter than this, we risk taking up more space in the screen than is actually required. We could reduce the height constraint, but then this will end up greatly reducing the height for larger media items. An alternative could be utilising the heightIn modifier to allow only a maximum available height for the image and while this works for this given example, we can’t guarantee consistency for different images that are attached in our app. To find a simple solution that will work across media dimensions, we’re going to use a fixed ratio for all media items that are displayed here. We want to continue filling the maximum width that is available, but this time we’ll want to constrain the height to match the width of the parent container so that we are constraining the dimensions to a ratio. For this, we can utilise the aspectRatio modifier, which allows us to enforce an aspect ratio when it comes to the sizing of our composable. fun Modifier.aspectRatio( ratio: Float, matchHeightConstraintsFirst: Boolean = false ) When using this modifier, we need to provide the ratio that is to be applied to the composable. This ratio will then be used to to apply the sizing constraint to the composable. When doing so, by default the current width constraints of the composable are prioritised over any widths. If you wish to override this, you can provide a true flag for the matchHeightConstraintsFirst argument which will cause the height constraints to be prioritised. Because in this example we are constraining to the width of our parent, we do not need to utilise this flag. Modifier.fillMaxWidth().aspectRatio(1f) We can see now that our image is being constrained to an aspect ratio of 1, giving us a square representation for our image. This will be consistent across any images that are being selected in our app, cropping the image to fit into the specified aspect ratio. When using this modifier, we can apply any aspect ratio that we wish to constrain our composable to. For example, i’ll apply a ratio of 1.4 to the same composable that we saw in the previous example. Modifier.fillMaxWidth().aspectRatio(1.4f) As we can see from this quick example, the aspectRatio modifier allows us to constrain our composable to a specified aspect ratio, allowing us to create greater consistency when it comes to unpredictable child sizing in the body of our composables. While I’ve provided an example use case of this, there are likely other scenarios where the aspectRatio modifier can be applied – if you’re utilising it in your apps, do share how!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn the world of Compose, there are a vast range of modifiers that are available at our disposable. As you build more and more UI with Compose, it’s likely that you’re going to discover new modifiers that you previously were not aware of. For me this week it was the \u003cstrong\u003easpectRatio\u003c/strong\u003e modifier – so in this post, we’re going to take a quick dive into what this is and how we can make use of it in our projects.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn Jetpack Compose? Check out my course, \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eWhen it come to sizing of composables, we often turn to constraining dimensions using any of the various size modifiers (width, height, size etc) or filling the any of the available dimensions (fillMaxSize, fillMaxHeight, fillMaxWidth etc). However, these aren’t always going to satisfy our requirements as we may wish to size our composable in other ways based on the constraints of parent containers.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, let’s imagine we have an application that allows you to select an image from the device gallery, to then be displayed as filling the available width of the screen space:\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-672x1024.png\" alt=\"\" width=\"504\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-672x1024.png 672w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-197x300.png 197w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-768x1171.png 768w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-1007x1536.png 1007w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-1343x2048.png 1343w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-500x762.png 500w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-150x229.png 150w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-1200x1830.png 1200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-400x610.png 400w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-800x1220.png 800w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707-200x305.png 200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_091707.png 1439w\" sizes=\"(max-width: 504px) 100vw, 504px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eHere we are using the \u003cstrong\u003efillMaxWidth\u003c/strong\u003e modifier to fill the available space, and our height is automatically wrapping the available size of the content. However, this is taking up a lot of screen estate – and due to this just being a small preview of the media item, we don’t need it to take up so much space within our UI. We want to reduce the height shown, so we can try fixing the height to reduce the space it takes up.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eModifier.fillMaxWidth().height(500.dp)\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-787x1024.png\" alt=\"\" width=\"590\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-787x1024.png 787w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-231x300.png 231w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-768x999.png 768w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-1180x1536.png 1180w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-500x651.png 500w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-150x195.png 150w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-1200x1562.png 1200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-400x521.png 400w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-800x1041.png 800w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635-200x260.png 200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_085635.png 1434w\" sizes=\"(max-width: 590px) 100vw, 590px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eWhile this looks OK here, this magic value will only work for media items of this height or greater – if we attach a media item that is shorter than this, we risk taking up more space in the screen than is actually required. We could reduce the height constraint, but then this will end up greatly reducing the height for larger media items. An alternative could be utilising the \u003cstrong\u003eheightIn\u003c/strong\u003e modifier to allow only a maximum available height for the image and while this works for this given example, we can’t guarantee consistency for different images that are attached in our app.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/02/height_in-967x1024.png\" alt=\"\" width=\"725\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/02/height_in-967x1024.png 967w, https://joebirch.co/wp-content/uploads/2024/02/height_in-283x300.png 283w, https://joebirch.co/wp-content/uploads/2024/02/height_in-768x813.png 768w, https://joebirch.co/wp-content/uploads/2024/02/height_in-500x530.png 500w, https://joebirch.co/wp-content/uploads/2024/02/height_in-150x159.png 150w, https://joebirch.co/wp-content/uploads/2024/02/height_in-1200x1271.png 1200w, https://joebirch.co/wp-content/uploads/2024/02/height_in-400x424.png 400w, https://joebirch.co/wp-content/uploads/2024/02/height_in-800x847.png 800w, https://joebirch.co/wp-content/uploads/2024/02/height_in-200x212.png 200w, https://joebirch.co/wp-content/uploads/2024/02/height_in.png 1440w\" sizes=\"(max-width: 725px) 100vw, 725px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eTo find a simple solution that will work across media dimensions, we’re going to use a fixed ratio for all media items that are displayed here. We want to continue filling the maximum width that is available, but this time we’ll want to constrain the height to match the width of the parent container so that we are constraining the dimensions to a ratio. For this, we can utilise the \u003cstrong\u003easpectRatio\u003c/strong\u003e modifier, which allows us to enforce an aspect ratio when it comes to the sizing of our composable.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003efun Modifier.aspectRatio(\n    ratio: Float,\n    matchHeightConstraintsFirst: Boolean = false\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen using this modifier, we need to provide the ratio that is to be applied to the composable. This ratio will then be used to to apply the sizing constraint to the composable. When doing so, by default the current width constraints of the composable are prioritised over any widths. If you wish to override this, you can provide a \u003cstrong\u003etrue\u003c/strong\u003e flag for the \u003cstrong\u003ematchHeightConstraintsFirst\u003c/strong\u003e argument which will cause the height constraints to be prioritised. Because in this example we are constraining to the width of our parent, we do not need to utilise this flag.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eModifier.fillMaxWidth().aspectRatio(1f)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can see now that our image is being constrained to an aspect ratio of 1, giving us a square representation for our image. This will be consistent across any images that are being selected in our app, cropping the image to fit into the specified aspect ratio.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-1014x1024.png\" alt=\"\" width=\"761\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-1014x1024.png 1014w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-297x300.png 297w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-150x151.png 150w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-768x775.png 768w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-500x505.png 500w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-1200x1212.png 1200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-400x404.png 400w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-800x808.png 800w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-200x202.png 200w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-57x57.png 57w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-72x72.png 72w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-114x114.png 114w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452-144x144.png 144w, https://joebirch.co/wp-content/uploads/2024/02/Screenshot_20240203_084452.png 1440w\" sizes=\"(max-width: 761px) 100vw, 761px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eWhen using this modifier, we can apply any aspect ratio that we wish to constrain our composable to. For example, i’ll apply a ratio of \u003cstrong\u003e1.4\u003c/strong\u003e to the same composable that we saw in the previous example.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eModifier.fillMaxWidth().aspectRatio(1.4f)\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/02/1_4-1-1024x667.png\" alt=\"\" width=\"768\" height=\"500\" srcset=\"https://joebirch.co/wp-content/uploads/2024/02/1_4-1-1024x667.png 1024w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-300x195.png 300w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-768x500.png 768w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-500x326.png 500w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-150x98.png 150w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-1200x782.png 1200w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-400x261.png 400w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-800x521.png 800w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1-200x130.png 200w, https://joebirch.co/wp-content/uploads/2024/02/1_4-1.png 1440w\" sizes=\"(max-width: 768px) 100vw, 768px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eAs we can see from this quick example, the \u003cstrong\u003easpectRatio\u003c/strong\u003e modifier allows us to constrain our composable to a specified aspect ratio, allowing us to create greater consistency when it comes to unpredictable child sizing in the body of our composables. While I’ve provided an example use case of this, there are likely other scenarios where the aspectRatio modifier can be applied – if you’re utilising it in your apps, do share how!\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e\u003c/code\u003e\u003c/pre\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-02-03T09:54:52Z",
  "modifiedTime": "2024-02-03T09:54:53Z"
}
