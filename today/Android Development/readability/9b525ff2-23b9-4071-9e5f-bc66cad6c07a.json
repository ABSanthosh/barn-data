{
  "id": "9b525ff2-23b9-4071-9e5f-bc66cad6c07a",
  "title": "Catching Up on CatchUp: 2023",
  "link": "https://www.zacsweers.dev/catching-up-on-catchup-2023/",
  "description": "CatchUp turned 7 recently. This is a little overview of where it's been and where it's going.",
  "author": "Zac Sweers",
  "published": "Mon, 10 Jul 2023 01:36:15 GMT",
  "source": "https://www.zacsweers.dev/rss/",
  "categories": [
    "Open Source",
    "CatchUp",
    "Kotlin"
  ],
  "byline": "Zac Sweers",
  "length": 10178,
  "excerpt": "CatchUp turned 7 recently. This is a little overview of where it's been and where it's going.",
  "siteName": "Zac Sweers",
  "favicon": "",
  "text": "CatchUp turned 7 recently. I started the project in the spring of 2016 and open-sourced it a little over a year later. Its development has ebbed and flowed over the years, but it still serves its primary purpose well: a playground.In its lifetime, I've used it to learn or tinker with different tools, architectures, languages, and more. In this post, I want to give a little update on what I've been doing with it recently, and ideas of where I want to go with it.State of the ProjectCatchUp in 2023 is a Kotlin Android app written fully in Circuit and Compose. It uses a number of tools and libraries under the hood including Coroutines, Datastore, Material3 (M3), Apollo, EitherNet/Retrofit/OkHttp, SqlDelight, Dagger+Anvil, and AndroidX Paging.Some of these have been in CatchUp for years, but many are new! I've been working on rewriting most of CatchUp over the past six months or so to modernize it.A gallery of screenshots from different parts of CatchUp showing Unsplash images, Designer News, Product Hunt at night, and Product Hunt at night and dynamically themed.Code DiffsAfter this rewrite, CatchUp's codebase saw a 20% reduction in Kotlin LoC and a 50% reduction in XML ðŸ˜®.Before-------------------------------------------------------------- Language files blank comment code -------------------------------------------------------------- Kotlin 267 2338 5540 16647 XML 129 503 1892 3714 Java 3 122 167 831After-------------------------------------------------------------- Language files blank comment code -------------------------------------------------------------- Kotlin 231 1654 3683 14318 XML 80 215 1156 1623 Java 1 31 26 252CircuitCircuit is a library I co-authored working at Slack and maintain. It's a multiplatform, compose-based architecture for Kotlin applications. These days at Slack I work on developer experience, so I don't get as much internal exposure to developing with Circuit as I'd like. CatchUp gives me a good outlet for that, and rewriting CatchUp's architecture from standard Android activities/fragments was a good exercise in both proving out its production-readiness as well as finding areas we could improve.CatchUp is now single-activity, fragment-less, and MainActivity only has around 40 meaningful lines of code before jumping off into Circuit for the rest of the app.Some of my favorite parts of this have been how much simpler every screen of CatchUp is now, with clear separations of concerns and easy extension. Writing new screens is dead-simple to both write and wire up. Writing presentation logic in Compose is :chefs-kiss:. The biggest win with going all in on Compose though is the ability to take (edit: mostly*) full control of config changes, allowing CatchUp to actually avoid activity recreation entirely and just reacting to live Configuration sources instead. This is a massive win for productivity, as it means I don't have to spend any time thinking about how to handle rotation.One big thing Circuit still needs is improved animation APIs, which we purposefully punted to wait for LookaheadLayout to come along more.ComposeCatchUp's UI was mostly standard Android views/xml, with a tiny bit of Compose that I'd previously dabbled with in service ordering left over from a couple years ago. Rewriting all of this UI in Compose was daunting at first, often frustrating during, and ultimately incredibly rewarding after. Compose UI is a substantial QoL improvement over the olden days of Android UI work.Compose also makes supporting different screen sizes pretty simple, and some of the new APIs Google's been writing for tablets and foldables are great. CatchUp has extremely basic support for them, but only really as far as trying to better fit content on wide screens for now.I also implemented support for M3's dynamic theme support more or less seamlessly.That's not to say it's perfect though. There are some things about Compose UI that really bug me after this experience.IDE tooling is just not good. Things like Live Edit (or before it - live literals) virtually never work in my experience. Compose previews can be extremely hit or miss. This is a long-running theme of IDE design tools seemingly only working on trivial projects, and it's disappointing to see this still happening in Compose.M3's defaults are often just ugly. This is obviously beholden personal taste, but it doesn't feel like the average app using M3 defaults would look good. M3's theme builder also isn't particularly useful as it doesn't think black and white are valid colors, and will usually just spit out things that are vaguely magenta hues.Compose UI performance in debug is terrible. In release (i.e. minified + debuggable=false), it's just fine in my experience. Why does it matter then? Because developers fix what's in front of them, which is usually a debug build. If you normalize janky apps in debug, developers won't notice \"real\" jank nearly as often and fix it. It's also annoying to use a janky app in any context.Compose and M3 animations still feel primitive and often difficult to do. There is still no shared element transitions.I'm optimistic that some of the above can be improved with time, and definitely don't consider them to be blockers of any sort.SqlDelightI migrated from ROOM to SqlDelight for a couple of reasons.Multiplatform support (more on this later)I like SqlDelight's design betterSqlDelight is wonderful. I wish it supported some of ROOM's features more easily (namely @Embedded and easier reading of bundled dbs), and I find its migration/versioning handling confusing at times, but overall I vastly prefer it. ROOM works just fine, and worked just fine for CatchUp for years.CoroutinesThis will be my spiciest take: I struggled a lot with coroutines adoption. I would consider myself fairly good at reactive frameworks and at least not terrible at concurrency, and even then it was roughy at times. Debugging them felt significantly harder than RxJava, and I often found myself feeling like it was just too fucking magic. Incredibly powerful, yes. But at times to the point of being opaque. I prefer them to RxJava (what CatchUp used before) now I think, but mostly because I like structured concurrency a lot. As the author of AutoDispose, I wish it didn't need to exist and structured concurrency is the right solution to this problem space.RxJava works really well. I actually left much of it in place initially while moving the major API surfaces to coroutines and just interop-ing as needed. The interop APIs are very good.Build ToolsCatchUp now sits on top of SGP, which is the open source Gradle plugin I wrote and maintain for Slack's internal android repo. Aside from being partial to it and the features it offers, it's been super helpful in allowing us to test out or repro things in other projects than the main android repo first.Anvil is something we adopted heavily in Slack a couple years ago and it's awesome, no notes. Here's a blog I wrote for Slack about it.One thing I built in SGP is a tool called Dependency Rake, which sits on top of Tony Robalik's excellent Dependency Analysis Gradle Plugin (DAGP) plugin. It post-processes the computed advice and then applies it to the project's build file. I've gotten this working more or less perfectly in CatchUp, so its build files are nice and exact.CatchUp chases the latest Kotlin versions pretty aggressively (I'm a member of Kotlin's EAP-champions program and use it as one of my test repos). It's at the point now where it almost compiles successfully with the upcoming K2 compiler, pending (at the time of writing) a new Dagger release.MiscDatastore is fine as a replacement for preferences. I like that it's now multiplatform too. The API is a bit awkward and tedious at times like old preferences were, but I think that's more a nature of preferences at this point. The coroutines-first API and semantics is also a nice QoL improvement for reactive prefs.AndroidX Paging is also fine, it solves a problem we all have to write customs solutions for and solves most of them well enough. There are still oddities in CatchUp where it either sticks with stale data, loads mid-page, or shows two loading indicators. I suspect I'm the bug for those, rather than the library.Some services CatchUp loads have changedProduct Hunt deprecated their v1 API and replaced it with a GraphQL v2 API. While it works, they removed a bunch of data from it and don't appear to actively be maintaining it.Reddit's informal API of just appending .json to a URL still seems to work for now, but the way they handled 3rd party apps is such an unprofessional and unethical horror show.Medium's unofficial API became even more unofficial and disappeared entirely Â¯\\_(ãƒ„)_/Â¯.Unsplash's API is nice to work with, and a fun test bed for doing things with image loading.I wrote a little summarization utility that uses ChatGPT to summarize links on long press. Not always useful, but a fun little demo.(Spoiler: they should be free)Finally, I rewrote the image viewer using Telephoto. It's a great.FutureI have some general areas I want to tinker with more in CatchUp.I'd like to start working toward multiplatform support, or at least desktop. As I use an iOS device as my primary these days, I don't use CatchUp the app much anymore otherwise. I'd like to also continue experimenting with Kotlin multiplatform, as I think it's a really promising space. Many of the tools CatchUp sits on top of now (Circuit, Compose, SqlDelight, Datastore, etc) are all multiplatform, and most of the rest are at least JVM-compatible.Improving large/foldable screen support. I bought a Pixel Fold as my test device for the next few years.Continue not publishing it on the play store ðŸ«£.*It's been pointed out that you can't escape config changes if your wallpaper changes. Good news is I'm CatchUp's only user and don't particularly care about that.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/zacsweers/catchup?ref=zacsweers.dev\"\u003eCatchUp\u003c/a\u003e turned 7 recently. I started the project in the spring of 2016 and open-sourced it a little over a year later. Its development has ebbed and flowed over the years, but it still serves its primary purpose well: a playground.\u003c/p\u003e\u003cp\u003eIn its lifetime, I\u0026#39;ve used it to learn or tinker with different tools, architectures, languages, and more. In this post, I want to give a little update on what I\u0026#39;ve been doing with it recently, and ideas of where I want to go with it.\u003c/p\u003e\u003ch2 id=\"state-of-the-project\"\u003eState of the Project\u003c/h2\u003e\u003cp\u003eCatchUp in 2023 is a Kotlin Android app written \u003cstrong\u003efully\u003c/strong\u003e in \u003ca href=\"https://github.com/slackhq/circuit?ref=zacsweers.dev\"\u003eCircuit\u003c/a\u003e and \u003ca href=\"https://developer.android.com/jetpack/compose?ref=zacsweers.dev\"\u003eCompose\u003c/a\u003e. It uses a number of tools and libraries under the hood including \u003ca href=\"https://github.com/Kotlin/kotlinx.coroutines?ref=zacsweers.dev\"\u003eCoroutines\u003c/a\u003e, \u003ca href=\"https://developer.android.com/topic/libraries/architecture/datastore?ref=zacsweers.dev\"\u003eDatastore\u003c/a\u003e, \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-material3?ref=zacsweers.dev\"\u003eMaterial3\u003c/a\u003e (M3), \u003ca href=\"https://www.apollographql.com/docs/kotlin/?ref=zacsweers.dev\"\u003eApollo\u003c/a\u003e, \u003ca href=\"https://github.com/slackhq/eithernet?ref=zacsweers.dev\"\u003eEitherNet\u003c/a\u003e/\u003ca href=\"https://github.com/square/retrofit?ref=zacsweers.dev\"\u003eRetrofit\u003c/a\u003e/\u003ca href=\"https://github.com/square/okhttp?ref=zacsweers.dev\"\u003eOkHttp\u003c/a\u003e, \u003ca href=\"https://github.com/cashapp/sqldelight?ref=zacsweers.dev\"\u003eSqlDelight\u003c/a\u003e, \u003ca href=\"https://github.com/google/dagger?ref=zacsweers.dev\"\u003eDagger\u003c/a\u003e+\u003ca href=\"https://github.com/square/anvil?ref=zacsweers.dev\"\u003eAnvil\u003c/a\u003e, and \u003ca href=\"https://developer.android.com/topic/libraries/architecture/paging/v3-overview?ref=zacsweers.dev\"\u003eAndroidX Paging\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eSome of these have been in CatchUp for years, but many are new! I\u0026#39;ve been working on rewriting most of CatchUp over the past six months or so to modernize it.\u003c/p\u003e\u003cfigure\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-205009.png\" width=\"1080\" height=\"2092\" loading=\"lazy\" alt=\"\" srcset=\"https://www.zacsweers.dev/content/images/size/w600/2023/07/Screenshot_20230709-205009.png 600w, https://www.zacsweers.dev/content/images/size/w1000/2023/07/Screenshot_20230709-205009.png 1000w, https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-205009.png 1080w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-205020.png\" width=\"1080\" height=\"2092\" loading=\"lazy\" alt=\"\" srcset=\"https://www.zacsweers.dev/content/images/size/w600/2023/07/Screenshot_20230709-205020.png 600w, https://www.zacsweers.dev/content/images/size/w1000/2023/07/Screenshot_20230709-205020.png 1000w, https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-205020.png 1080w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-210546.png\" width=\"1080\" height=\"2092\" loading=\"lazy\" alt=\"\" srcset=\"https://www.zacsweers.dev/content/images/size/w600/2023/07/Screenshot_20230709-210546.png 600w, https://www.zacsweers.dev/content/images/size/w1000/2023/07/Screenshot_20230709-210546.png 1000w, https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-210546.png 1080w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-210558.png\" width=\"1080\" height=\"2092\" loading=\"lazy\" alt=\"\" srcset=\"https://www.zacsweers.dev/content/images/size/w600/2023/07/Screenshot_20230709-210558.png 600w, https://www.zacsweers.dev/content/images/size/w1000/2023/07/Screenshot_20230709-210558.png 1000w, https://www.zacsweers.dev/content/images/2023/07/Screenshot_20230709-210558.png 1080w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigcaption\u003eA gallery of screenshots from different parts of CatchUp showing Unsplash images, Designer News, Product Hunt at night, and Product Hunt at night and dynamically themed.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"code-diffs\"\u003eCode Diffs\u003c/h3\u003e\u003cp\u003eAfter this rewrite, CatchUp\u0026#39;s codebase saw a 20% reduction in Kotlin LoC and a 50% reduction in XML ðŸ˜®.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBefore\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e--------------------------------------------------------------\nLanguage    files          blank        comment           code\n--------------------------------------------------------------\nKotlin        267           2338           5540          16647\nXML           129            503           1892           3714\nJava            3            122            167            831\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eAfter\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e--------------------------------------------------------------\nLanguage    files          blank        comment           code\n--------------------------------------------------------------\nKotlin        231           1654           3683          14318\nXML            80            215           1156           1623\nJava            1             31             26            252\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"circuit\"\u003eCircuit\u003c/h3\u003e\u003cp\u003eCircuit is a library I co-authored working at Slack and maintain. It\u0026#39;s a multiplatform, compose-based architecture for Kotlin applications. These days at Slack I work on developer experience, so I don\u0026#39;t get as much internal exposure to developing with Circuit as I\u0026#39;d like. CatchUp gives me a good outlet for that, and rewriting CatchUp\u0026#39;s architecture from standard Android activities/fragments was a good exercise in both proving out its production-readiness as well as finding areas we could improve.\u003c/p\u003e\u003cp\u003eCatchUp is now single-activity, fragment-less, and \u003ccode\u003eMainActivity\u003c/code\u003e only has around 40 meaningful lines of code before jumping off into Circuit for the rest of the app.\u003c/p\u003e\u003cp\u003eSome of my favorite parts of this have been how much simpler every screen of CatchUp is now, with clear separations of concerns and easy extension. Writing new screens is dead-simple to both write and wire up. Writing presentation logic in Compose is :chefs-kiss:. The biggest win with going all in on Compose though is the ability to take (edit: mostly*) full control of config changes, allowing CatchUp to actually avoid activity recreation \u003cem\u003eentirely\u003c/em\u003e and just reacting to live \u003ccode\u003eConfiguration\u003c/code\u003e sources instead. This is a \u003cstrong\u003emassive\u003c/strong\u003e win for productivity, as it means I don\u0026#39;t have to spend any time thinking about how to handle rotation.\u003c/p\u003e\u003cp\u003eOne big thing Circuit still needs is improved animation APIs, which we purposefully punted to wait for \u003ccode\u003eLookaheadLayout\u003c/code\u003e to come along more.\u003c/p\u003e\u003ch3 id=\"compose\"\u003eCompose\u003c/h3\u003e\u003cp\u003eCatchUp\u0026#39;s UI was mostly standard Android views/xml, with a tiny bit of Compose that I\u0026#39;d previously dabbled with in service ordering left over from a couple years ago. Rewriting all of this UI in Compose was daunting at first, often frustrating during, and ultimately incredibly rewarding after. Compose UI is a substantial QoL improvement over the olden days of Android UI work.\u003c/p\u003e\u003cp\u003eCompose also makes supporting different screen sizes pretty simple, and some of the new APIs Google\u0026#39;s been writing for tablets and foldables are great. CatchUp has extremely basic support for them, but only really as far as trying to better fit content on wide screens for now.\u003c/p\u003e\u003cp\u003eI also implemented support for M3\u0026#39;s dynamic theme support more or less seamlessly.\u003c/p\u003e\u003cp\u003eThat\u0026#39;s not to say it\u0026#39;s perfect though. There are some things about Compose UI that really bug me after this experience.\u003c/p\u003e\u003cul\u003e\u003cli\u003eIDE tooling is just not good. Things like Live Edit (or before it - live literals) virtually never work in my experience. Compose previews can be extremely hit or miss. This is a long-running theme of IDE design tools seemingly only working on trivial projects, and it\u0026#39;s disappointing to see this still happening in Compose.\u003c/li\u003e\u003cli\u003eM3\u0026#39;s defaults are often just \u003cem\u003eugly\u003c/em\u003e. This is obviously beholden personal taste, but it doesn\u0026#39;t feel like the average app using M3 defaults would look good. M3\u0026#39;s theme builder also isn\u0026#39;t particularly useful as it doesn\u0026#39;t think black and white are valid colors, and will usually just spit out things that are vaguely magenta hues.\u003c/li\u003e\u003cli\u003eCompose UI performance \u003cstrong\u003ein debug\u003c/strong\u003e is terrible. In release (i.e. minified + debuggable=false), it\u0026#39;s just fine in my experience. Why does it matter then? Because developers fix what\u0026#39;s in front of them, which is usually a \u003cstrong\u003edebug\u003c/strong\u003e build. If you normalize janky apps in debug, developers won\u0026#39;t notice \u0026#34;real\u0026#34; jank nearly as often and fix it. It\u0026#39;s also annoying to use a janky app in any context.\u003c/li\u003e\u003cli\u003eCompose and M3 animations still feel primitive and often difficult to do. There is still no shared element transitions.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI\u0026#39;m optimistic that some of the above can be improved with time, and definitely don\u0026#39;t consider them to be blockers of any sort.\u003c/p\u003e\u003ch3 id=\"sqldelight\"\u003eSqlDelight\u003c/h3\u003e\u003cp\u003eI migrated from ROOM to SqlDelight for a couple of reasons.\u003c/p\u003e\u003col\u003e\u003cli\u003eMultiplatform support (more on this later)\u003c/li\u003e\u003cli\u003eI like SqlDelight\u0026#39;s design better\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eSqlDelight is wonderful. I wish it supported some of ROOM\u0026#39;s features more easily (namely \u003ccode\u003e@Embedded\u003c/code\u003e and easier reading of bundled dbs), and I find its migration/versioning handling confusing at times, but overall I vastly prefer it. ROOM works just fine, and worked just fine for CatchUp for years.\u003c/p\u003e\u003ch3 id=\"coroutines\"\u003eCoroutines\u003c/h3\u003e\u003cp\u003eThis will be my spiciest take: I struggled a lot with coroutines adoption. I would consider myself fairly good at reactive frameworks and at least not terrible at concurrency, and even then it was roughy at times. Debugging them felt significantly harder than RxJava, and I often found myself feeling like it was just too fucking magic. Incredibly powerful, yes. But at times to the point of being opaque. I prefer them to \u003ca href=\"https://github.com/reactivex/rxjava?ref=zacsweers.dev\"\u003eRxJava\u003c/a\u003e (what CatchUp used before) now I think, but mostly because I like structured concurrency a lot. As the author of \u003ca href=\"https://github.com/uber/autodispose?ref=zacsweers.dev\"\u003eAutoDispose\u003c/a\u003e, I wish it didn\u0026#39;t need to exist and structured concurrency is the right solution to this problem space.\u003c/p\u003e\u003cp\u003eRxJava works really well. I actually left much of it in place initially while moving the major API surfaces to coroutines and just interop-ing as needed. The interop APIs are very good.\u003c/p\u003e\u003ch3 id=\"build-tools\"\u003eBuild Tools\u003c/h3\u003e\u003cp\u003eCatchUp now sits on top of \u003ca href=\"https://github.com/slackhq/slack-gradle-plugin?ref=zacsweers.dev\"\u003eSGP\u003c/a\u003e, which is the open source Gradle plugin I wrote and maintain for Slack\u0026#39;s internal android repo. Aside from being partial to it and the features it offers, it\u0026#39;s been super helpful in allowing us to test out or repro things in other projects than the main android repo first.\u003c/p\u003e\u003cp\u003eAnvil is something we adopted heavily in Slack a couple years ago and it\u0026#39;s awesome, no notes. Here\u0026#39;s a \u003ca href=\"https://slack.engineering/extending-anvil-for-fun-and-profit/?ref=zacsweers.dev\"\u003eblog\u003c/a\u003e I wrote for Slack about it.\u003c/p\u003e\u003cp\u003eOne thing I built in SGP is a tool called \u003ca href=\"https://slackhq.github.io/slack-gradle-plugin/dependency-rake/?ref=zacsweers.dev\"\u003eDependency Rake\u003c/a\u003e, which sits on top of Tony Robalik\u0026#39;s excellent \u003ca href=\"https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin?ref=zacsweers.dev\"\u003eDependency Analysis Gradle Plugin (DAGP)\u003c/a\u003e plugin. It post-processes the computed advice and then applies it to the project\u0026#39;s build file. I\u0026#39;ve gotten this working more or less perfectly in CatchUp, so its build files are nice and exact.\u003c/p\u003e\u003cp\u003eCatchUp chases the latest Kotlin versions pretty aggressively (I\u0026#39;m a member of Kotlin\u0026#39;s \u003ca href=\"https://blog.jetbrains.com/kotlin/2022/11/eap-champions/?ref=zacsweers.dev\"\u003eEAP-champions\u003c/a\u003e program and use it as one of my test repos). It\u0026#39;s at the point now where it almost compiles successfully with the upcoming K2 compiler, pending (at the time of writing) a new Dagger release.\u003c/p\u003e\u003ch3 id=\"misc\"\u003eMisc\u003c/h3\u003e\u003cp\u003eDatastore is fine as a replacement for preferences. I like that it\u0026#39;s now multiplatform too. The API is a bit awkward and tedious at times like old preferences were, but I think that\u0026#39;s more a nature of preferences at this point. The coroutines-first API and semantics is also a nice QoL improvement for reactive prefs.\u003c/p\u003e\u003cp\u003eAndroidX Paging is also fine, it solves a problem we all have to write customs solutions for and solves most of them well enough. There are still oddities in CatchUp where it either sticks with stale data, loads mid-page, or shows two loading indicators. I suspect I\u0026#39;m the bug for those, rather than the library.\u003c/p\u003e\u003cp\u003eSome services CatchUp loads have changed\u003c/p\u003e\u003cul\u003e\u003cli\u003eProduct Hunt deprecated their v1 API and replaced it with a GraphQL v2 API. While it works, they removed a bunch of data from it and don\u0026#39;t appear to actively be maintaining it.\u003c/li\u003e\u003cli\u003eReddit\u0026#39;s informal API of just appending \u003ccode\u003e.json\u003c/code\u003e to a URL still seems to work for now, but the way they handled 3rd party apps is such \u003ca href=\"https://www.reddit.com/r/apolloapp/comments/14dkqrw/i_want_to_debunk_reddits_claims_and_talk_about/?utm_source=embedv2\u0026amp;utm_medium=post_embed\u0026amp;utm_content=post_title\u0026amp;embed_host_url=https://www.theverge.com/2023/6/8/23754780/reddit-api-updates-changes-news-announcements/archives/3\"\u003ean unprofessional and unethical horror show\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eMedium\u0026#39;s unofficial API became even more unofficial and disappeared entirely Â¯\\_(ãƒ„)_/Â¯.\u003c/li\u003e\u003cli\u003eUnsplash\u0026#39;s API is nice to work with, and a fun test bed for doing things with image loading.\u003c/li\u003e\u003cli\u003eI wrote a little summarization utility that uses ChatGPT to summarize links on long press. Not always useful, but a fun little demo.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cimg src=\"https://www.zacsweers.dev/content/images/2023/07/image.png\" alt=\"A simple text screen that summarizes an article about whether buses should be free.\" loading=\"lazy\" width=\"1080\" height=\"2092\" srcset=\"https://www.zacsweers.dev/content/images/size/w600/2023/07/image.png 600w, https://www.zacsweers.dev/content/images/size/w1000/2023/07/image.png 1000w, https://www.zacsweers.dev/content/images/2023/07/image.png 1080w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003cfigcaption\u003e(Spoiler: they should be free)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFinally, I rewrote the image viewer using \u003ca href=\"https://github.com/saket/telephoto?ref=zacsweers.dev\"\u003eTelephoto\u003c/a\u003e. It\u0026#39;s a great.\u003c/p\u003e\u003ch2 id=\"future\"\u003eFuture\u003c/h2\u003e\u003cp\u003eI have some general areas I want to tinker with more in CatchUp.\u003c/p\u003e\u003cul\u003e\u003cli\u003eI\u0026#39;d like to start working toward multiplatform support, or at least desktop. As I use an iOS device as my primary these days, I don\u0026#39;t use CatchUp the app much anymore otherwise. I\u0026#39;d like to also continue experimenting with Kotlin multiplatform, as I think it\u0026#39;s a really promising space. Many of the tools CatchUp sits on top of now (Circuit, Compose, SqlDelight, Datastore, etc) are all multiplatform, and most of the rest are at least JVM-compatible.\u003c/li\u003e\u003cli\u003eImproving large/foldable screen support. I bought a Pixel Fold as my test device for the next few years.\u003c/li\u003e\u003cli\u003eContinue not publishing it on the play store ðŸ«£.\u003c/li\u003e\u003c/ul\u003e\u003chr/\u003e\u003cp\u003e*It\u0026#39;s been pointed out that you can\u0026#39;t escape config changes if your wallpaper changes. Good news is I\u0026#39;m CatchUp\u0026#39;s only user and don\u0026#39;t particularly care about that.\u003c/p\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2023-07-10T01:36:15Z",
  "modifiedTime": "2023-07-10T16:13:48Z"
}
