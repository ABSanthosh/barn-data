{
  "id": "ced4d80d-27e8-4b20-b1f7-a1e800290148",
  "title": "Your Company’s DanceService probably doesn’t Dance",
  "link": "https://publicobject.com/2023/10/25/it-doesnt-dance/",
  "description": "I work on a big product at a big company and we have lots of backend services that have big responsibilities:The messaging service sends customers their emails, SMS messages, and push notifications.The banking service manages the customers’ bank accounts.The identity verification service verifies customers’ identities.Except that",
  "author": "Jesse Wilson",
  "published": "Wed, 25 Oct 2023 11:36:04 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 3653,
  "excerpt": "I work on a big product [https://cash.app/] at a big company [https://block.xyz/] and we have lots of backend services that have big responsibilities: * The messaging service sends customers their emails, SMS messages, and push notifications. * The banking service manages the customers’ bank accounts. * The identity verification service verifies customers’ identities. Except that they don’t. Well, I suppose that from the perspective of its callers, the messaging service does indeed do t",
  "siteName": "Public Object",
  "favicon": "",
  "text": "I work on a big product at a big company and we have lots of backend services that have big responsibilities:The messaging service sends customers their emails, SMS messages, and push notifications.The banking service manages the customers’ bank accounts.The identity verification service verifies customers’ identities.Except that they don’t.Well, I suppose that from the perspective of its callers, the messaging service does indeed do the messaging:fun completePaymentSuccessfully( senderToken: CustomerToken, senderName: String, recipientToken: CustomerToken, recipientName: String, amount: Money, note: String, ) { // Notify the recipient. messagingService.sendMessage( recipientToken, \"Yo $recipientName! $senderName sent you $amount for $note.\" ) // Notify the sender. messagingService.sendMessage( senderToken, \"Yo $senderName! $recipientName got your $amount for $note!\" ) ... }But from inside the messaging service’s own codebase? It doesn’t implement messaging; it implements messaging glue:It decides which medium (email, SMS, push) to use for each message. This includes mapping abstract customer identifiers to concrete email addresses, SMS numbers, and APNS device tokens.It decides which route to use for each message. Perhaps we use two different email gateways (Amazon’s? Twilio’s?) for QoS, pricing and redundancy.It decides which language to write each message in. My sample code above is hardcoded English, but with fancy AIs is that really a problem?!It decides when to drop messages that exceed our configured limits. Limits apply per sending-service and per receiving-customer.It tracks a bunch of metrics for the benefits of the product (‘how many SMS messages did we send yesterday?’) and for its operation (‘why did delivery latency to gmail.com spike?’)When I look inside the other services, I find that they don’t generally do the thing they promise to do. Instead they each build a nice abstraction over the thing, implement a bunch of business rules, and then delegate to a real thing to do the real job.So What?Despite the fact that these services ultimately outsource their One Job, they offer a ton of value to the people who use it. As a sender of messages, I don’t want to decide between Amazon and Twilio!But it’s important to distinguish between the service’s high level pitch ‘it sends messages’ and it’s actual behavior, ‘it implements our product’s business rules for sending messages’.If you fuck this up, you may find yourself in an design meeting where some pointy-haired architect suggests merging product A’s messaging service with product B’s messaging service: ‘They both send messages! It’s wasteful to maintain both!’.Should you embark on such an effort, you might learn that product A’s messaging service makes different decisions than product B’s!My War StoryOf course I made this mistake.Product A had a service designed to broadcast a single marketing email to all of their customers. These messages weren’t urgent, but they needed wide distribution. The service’s business logic managed trickling out delivery over an hour or more.Product B needed a service to send one-off transactional emails. These messages were urgent and should transmit immediately.I did a ton of work to wedge product B’s use case into product A’s API, and it sucked. Then I did a ton of work to unwind this.Business Logic \u0026 GlueIt’s difficult work to build a service that implements all of a product’s business rules.It’s also difficult work to build a general-purpose service that’s agnostic of a company’s business rules.When you build a service, you should decide what it is!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\t\t\t\u003cp\u003eI work on a \u003ca href=\"https://cash.app/\"\u003ebig product\u003c/a\u003e at a \u003ca href=\"https://block.xyz/\"\u003ebig company\u003c/a\u003e and we have lots of backend services that have big responsibilities:\u003c/p\u003e\u003cul\u003e\u003cli\u003eThe messaging service sends customers their emails, SMS messages, and push notifications.\u003c/li\u003e\u003cli\u003eThe banking service manages the customers’ bank accounts.\u003c/li\u003e\u003cli\u003eThe identity verification service verifies customers’ identities.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eExcept that they don’t.\u003c/p\u003e\u003cp\u003eWell, I suppose that from the perspective of its callers, the messaging service does indeed do the messaging:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efun completePaymentSuccessfully(\n  senderToken: CustomerToken,\n  senderName: String,\n  recipientToken: CustomerToken,\n  recipientName: String,\n  amount: Money,\n  note: String,\n) {\n  // Notify the recipient.\n  messagingService.sendMessage(\n    recipientToken,\n    \u0026#34;Yo $recipientName! $senderName sent you $amount for $note.\u0026#34;\n  )\n\n\n  // Notify the sender.\n  messagingService.sendMessage(\n    senderToken,\n    \u0026#34;Yo $senderName! $recipientName got your $amount for $note!\u0026#34;\n  )\n\n  ...\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBut from inside the messaging service’s own codebase? It doesn’t implement \u003cem\u003emessaging\u003c/em\u003e; it implements \u003cem\u003emessaging glue\u003c/em\u003e:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIt decides which medium (email, SMS, push) to use for each message. This includes mapping abstract customer identifiers to concrete email addresses, SMS numbers, and APNS device tokens.\u003c/li\u003e\u003cli\u003eIt decides which route to use for each message. Perhaps we use two different email gateways (\u003ca href=\"https://aws.amazon.com/ses/\"\u003eAmazon’s\u003c/a\u003e? \u003ca href=\"https://sendgrid.com/\"\u003eTwilio’s\u003c/a\u003e?) for \u003ca href=\"https://en.wikipedia.org/wiki/Quality_of_service\"\u003eQoS\u003c/a\u003e, pricing and redundancy.\u003c/li\u003e\u003cli\u003eIt decides which language to write each message in. My sample code above is hardcoded English, but with fancy AIs is that really a problem?!\u003c/li\u003e\u003cli\u003eIt decides when to drop messages that exceed our configured limits. Limits apply per sending-service and per receiving-customer.\u003c/li\u003e\u003cli\u003eIt tracks a bunch of metrics for the benefits of the product (\u003cem\u003e‘how many SMS messages did we send yesterday?’\u003c/em\u003e) and for its operation (\u003cem\u003e‘why did delivery latency to gmail.com spike?’\u003c/em\u003e)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWhen I look inside the other services, I find that they don’t generally do the thing they promise to do. Instead they each build a nice abstraction over the thing, implement a bunch of business rules, and then delegate to a \u003cem\u003ereal\u003c/em\u003e thing to do the \u003cem\u003ereal\u003c/em\u003e job.\u003c/p\u003e\u003ch3 id=\"so-what\"\u003eSo What?\u003c/h3\u003e\u003cp\u003eDespite the fact that these services ultimately outsource their One Job, they offer a ton of value to the people who use it. As a sender of messages, I don’t want to decide between Amazon and Twilio!\u003c/p\u003e\u003cp\u003eBut it’s important to distinguish between the service’s high level pitch \u003cem\u003e‘it sends messages’\u003c/em\u003e and it’s actual behavior, \u003cem\u003e‘it implements our product’s business rules for sending messages’\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eIf you fuck this up, you may find yourself in an design meeting where some pointy-haired architect suggests merging product A’s messaging service with product B’s messaging service: \u003cem\u003e‘They both send messages! It’s wasteful to maintain both!’\u003c/em\u003e.\u003c/p\u003e\u003cp\u003eShould you embark on such an effort, you might learn that product A’s messaging service makes different decisions than product B’s!\u003c/p\u003e\u003ch3 id=\"my-war-story\"\u003eMy War Story\u003c/h3\u003e\u003cp\u003eOf course I made this mistake.\u003c/p\u003e\u003cp\u003eProduct A had a service designed to broadcast a single marketing email to all of their customers. These messages weren’t urgent, but they needed wide distribution. The service’s business logic managed trickling out delivery over an hour or more.\u003c/p\u003e\u003cp\u003eProduct B needed a service to send one-off transactional emails. These messages were urgent and should transmit immediately.\u003c/p\u003e\u003cp\u003eI did a ton of work to wedge product B’s use case into product A’s API, and it sucked. Then I did a ton of work to unwind this.\u003c/p\u003e\u003ch3 id=\"business-logic-glue\"\u003eBusiness Logic \u0026amp; Glue\u003c/h3\u003e\u003cp\u003eIt’s difficult work to build a service that implements all of a product’s business rules.\u003c/p\u003e\u003cp\u003eIt’s also difficult work to build a general-purpose service that’s agnostic of a company’s business rules.\u003c/p\u003e\u003cp\u003eWhen you build a service, you should decide what it is!\u003c/p\u003e\n\t\t\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2023-10-25T11:36:04Z",
  "modifiedTime": "2023-10-25T12:12:53Z"
}
