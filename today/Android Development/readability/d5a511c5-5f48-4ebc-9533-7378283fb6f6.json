{
  "id": "d5a511c5-5f48-4ebc-9533-7378283fb6f6",
  "title": "Making basicMarquee-Modifier More Accessible",
  "link": "https://proandroiddev.com/making-basicmarquee-modifier-more-accessible-8b3737307dee?source=rss----c72404660798---4",
  "description": "",
  "author": "Eevis Panula",
  "published": "Sun, 23 Feb 2025 15:17:26 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "accessibility",
    "jetpack-compose",
    "animation",
    "android-app-development",
    "android"
  ],
  "byline": "Eevis Panula",
  "length": 6344,
  "excerpt": "I have this “Remove animations”-setting turned on on my phone because different kinds of movement make me feel physically sick. When the setting is on, animations are usually removed from native…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "I have this “Remove animations”-setting turned on on my phone because different kinds of movement make me feel physically sick. When the setting is on, animations are usually removed from native Android apps.And when there are some animations, I notice them. I’ve started seeing more and more of some horizontally scrolling texts, and I have been wondering why.Then I came across this basicMarquee-modifier. And it doesn't respect the \"Remove animations\" accessibility setting. And that's bad - many users (me included) rely on that setting to not see animations. Marquee-styled animations are one of the worst triggers of my motion sickness symptoms.If you want to learn more about my symptoms and why animations can be super problematic for some, I’ve written two blog posts, one from Android and one from a web point of view:Android, Animations and Reduced MotionYou Make My Head Spin — Reducing the Motion on WebBut since bringing up solutions is often better received than bringing up problems, this blog post will demonstrate one idea on how to improve the situation for us who rely on that “Remove animations” setting.The main idea is to read the value of this setting and then use it to decide if the basicMarquee-modifier is used. In this blog post, I'm using composition locals to accomplish it.Remove Animations SettingBefore we dive into the code, a couple of words about the “Remove animations” setting. It’s a global setting, which you can find from the accessibility settings. In my Pixel phone, “Remove animations” is under the “Color and motion”-section.From a technical perspective, the setting changes the animator duration scale to 0, so, in other words, the animations end right after they start. This accessibility setting is not exposed via accessibility services the same way as, for example, screen reader availability, so we’ll need to be a bit creative. The following section explains how we can read the value of this setting.Composition Local for Remove AnimationsWe’ll want to store the value of the “Remove animations” setting and make it available for the components in the component hierarchy. Custom CompositionLocal is one tool for that. As Android documentation describes CompositionLocals:CompositionLocal is a tool for passing data down through the Composition implicitly.Let’s start by creating the custom composition local and the data type it provides:// LocalRemoveAnimations.ktdata class RemoveAnimations( val context: Context) { val enabled: Boolean}val LocalRemoveAnimations = staticCompositionLocalOf\u003cRemoveAnimations\u003e { error(\"No user found!\") }Here, we’re defining the LocalRemoveAnimations as staticCompositionLocalOf as the value is not likely to change - in fact, the app needs to be restarted to test it. Or at least I haven't found a way to observe the value; just read it synchronously.We can read the value of the animation duration scale with the following code:val animationDuration = try { Settings.Global.getFloat( context.contentResolver, Settings.Global.ANIMATOR_DURATION_SCALE, 1f )} catch (e: Settings.SettingNotFoundException) { 1f}So, we try to read the value of Settings.Global.ANIMATOR_DURATION_SCALE with a default value of 1f. If the setting is not found, Settings.SettingNotFoundException is thrown; we want to catch it and set the default value. One example of when the setting is unavailable is when the phone's Android version is older than 12.And putting them together, we get:// LocalRemoveAnimations.ktdata class RemoveAnimations( val context: Context,) { val enabled: Boolean get() = try { Settings.Global.getFloat( context.contentResolver, Settings.Global.ANIMATOR_DURATION_SCALE, 1f, ) } catch (e: Settings.SettingNotFoundException) { 1f } == 0f}Note that for the enabled-value, we add a check if the value from the try/catch-block is 0f to know if the \"Remove animations\" setting is enabled.The next step is to provide it in code:// MainActivity.ktsetContent { val context = LocalContext.current CompositionLocalProvider( LocalRemoveAnimations provides RemoveAnimations( context = context, ), ) { // App content goes here }}Finally, we can read the value of the LocalRemoveAnimations in the components inside the app:@Composablefun ComponentSomewhereInTheHierarchy() { val removeAnimations = LocalRemoveAnimations.current.enabled ....}All right, now we have everything to build the safer marquee modifier. Let’s do that in the next section.safeMarquee-ModifierNow that we have the information about the user’s “Remove animations”-setting available via LocalRemoveAnimations, we can use it to adjust the text using the basicMarquee-modifier.If the user hasn’t enabled the “Remove animations” setting, we want to show the marquee; otherwise, let the text flow on multiple lines. Let’s define a custom modifier with the composable modifier factory and call it safeMarquee:// MarqueeScreen.kt@Composablefun Modifier.safeMarquee(): Modifier { }Next, we want to read the value from LocalRemoveAnimations and, using that information, either add the basicMarquee-modifier to the modifier chain or return the current modifier chain without any additional ones. Here's the code to do so:// MarqueeScreen.kt@Composablefun Modifier.safeMarquee(): Modifier { val animationsRemoved = LocalRemoveAnimations.current.isEnabled() return if (animationsRemoved) this else this then basicMarquee()}With these code changes, we get the desired result. Here’s a video showing a preview of a Text-component with the safeMarquee-modifier:Wrapping UpIn this blog post, we’ve looked into how to make the basicMarquee modifier more accessible for users with the \"Remove animations\"-setting turned on. We checked the value of this setting, stored it as static composition local, and then used it to decide if we add the basicMarquee to the element.Do you use the “Remove animations”-setting? Or have you encountered problems with it as a user or developer?Links in the Blog PostbasicMarqueeAndroid, Animations and Reduced MotionYou Make My Head Spin — Reducing the Motion on WebCompositionLocal",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*gK-E3D0bNaUGTly3kN6ECw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@eevajonna?source=post_page---byline--8b3737307dee---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Eevis Panula\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*NhMD_9eOS1kF9_b3VomDEQ.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--8b3737307dee---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"bf78\"\u003eI have this “Remove animations”-setting turned on on my phone because different kinds of movement make me feel physically sick. When the setting is on, animations are usually removed from native Android apps.\u003c/p\u003e\u003cp id=\"39c2\"\u003eAnd when there are some animations, I notice them. I’ve started seeing more and more of some horizontally scrolling texts, and I have been wondering why.\u003c/p\u003e\u003cp id=\"490d\"\u003eThen I came across this \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#(androidx.compose.ui.Modifier).basicMarquee(kotlin.Int,androidx.compose.foundation.MarqueeAnimationMode,kotlin.Int,kotlin.Int,androidx.compose.foundation.MarqueeSpacing,androidx.compose.ui.unit.Dp)\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ebasicMarquee\u003c/a\u003e\u003c/code\u003e-modifier. And it doesn\u0026#39;t respect the \u0026#34;Remove animations\u0026#34; accessibility setting. And that\u0026#39;s bad - many users (me included) rely on that setting to not see animations. Marquee-styled animations are one of the worst triggers of my motion sickness symptoms.\u003c/p\u003e\u003cp id=\"b4cd\"\u003eIf you want to learn more about my symptoms and why animations can be super problematic for some, I’ve written two blog posts, one from Android and one from a web point of view:\u003c/p\u003e\u003cul\u003e\u003cli id=\"882e\"\u003e\u003ca href=\"https://medium.com/@eevajonna/android-animations-and-reduced-motion-a15334991fcc\" rel=\"noopener\"\u003eAndroid, Animations and Reduced Motion\u003c/a\u003e\u003c/li\u003e\u003cli id=\"ee32\"\u003e\u003ca href=\"https://dev.to/eevajonnapanula/you-make-my-head-spin-reducing-the-motion-on-web-328b\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eYou Make My Head Spin — Reducing the Motion on Web\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"1598\"\u003eBut since bringing up solutions is often better received than bringing up problems, this blog post will demonstrate one idea on how to improve the situation for us who rely on that “Remove animations” setting.\u003c/p\u003e\u003cp id=\"2d2c\"\u003eThe main idea is to read the value of this setting and then use it to decide if the \u003ccode\u003ebasicMarquee\u003c/code\u003e-modifier is used. In this blog post, I\u0026#39;m using composition locals to accomplish it.\u003c/p\u003e\u003ch2 id=\"56eb\"\u003eRemove Animations Setting\u003c/h2\u003e\u003cp id=\"dc2f\"\u003eBefore we dive into the code, a couple of words about the “Remove animations” setting. It’s a global setting, which you can find from the accessibility settings. In my Pixel phone, “Remove animations” is under the “Color and motion”-section.\u003c/p\u003e\u003cp id=\"1d7d\"\u003eFrom a technical perspective, the setting changes the animator duration scale to 0, so, in other words, the animations end right after they start. This accessibility setting is not exposed via accessibility services the same way as, for example, screen reader availability, so we’ll need to be a bit creative. The following section explains how we can read the value of this setting.\u003c/p\u003e\u003ch2 id=\"5ac4\"\u003eComposition Local for Remove Animations\u003c/h2\u003e\u003cp id=\"1689\"\u003eWe’ll want to store the value of the “Remove animations” setting and make it available for the components in the component hierarchy. Custom \u003ccode\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/compositionlocal\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompositionLocal\u003c/a\u003e\u003c/code\u003e is one tool for that. As Android documentation describes \u003ccode\u003eCompositionLocal\u003c/code\u003es:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"22ab\"\u003e\u003ccode\u003eCompositionLocal\u003c/code\u003e is a tool for passing data down through the Composition implicitly.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"7551\"\u003eLet’s start by creating the custom composition local and the data type it provides:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8f1d\"\u003e// LocalRemoveAnimations.kt\u003cp\u003edata class RemoveAnimations(\u003cbr/\u003e    val context: Context\u003cbr/\u003e) {\u003cbr/\u003e    val enabled: Boolean\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003eval LocalRemoveAnimations =\u003cbr/\u003e    staticCompositionLocalOf\u0026lt;RemoveAnimations\u0026gt; {\u003cbr/\u003e        error(\u0026#34;No user found!\u0026#34;)\u003cbr/\u003e    }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6ab8\"\u003eHere, we’re defining the \u003ccode\u003eLocalRemoveAnimations\u003c/code\u003e as \u003ccode\u003estaticCompositionLocalOf\u003c/code\u003e as the value is not likely to change - in fact, the app needs to be restarted to test it. Or at least I haven\u0026#39;t found a way to observe the value; just read it synchronously.\u003c/p\u003e\u003cp id=\"985e\"\u003eWe can read the value of the animation duration scale with the following code:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0def\"\u003eval animationDuration = try {\u003cbr/\u003e    Settings.Global.getFloat(\u003cbr/\u003e        context.contentResolver,\u003cbr/\u003e        Settings.Global.ANIMATOR_DURATION_SCALE,\u003cbr/\u003e        1f\u003cbr/\u003e    )\u003cbr/\u003e} catch (e: Settings.SettingNotFoundException) {\u003cbr/\u003e    1f\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6aeb\"\u003eSo, we try to read the value of \u003ccode\u003eSettings.Global.ANIMATOR_DURATION_SCALE\u003c/code\u003e with a default value of 1f. If the setting is not found, \u003ccode\u003eSettings.SettingNotFoundException\u003c/code\u003e is thrown; we want to catch it and set the default value. One example of when the setting is unavailable is when the phone\u0026#39;s Android version is older than 12.\u003c/p\u003e\u003cp id=\"4d11\"\u003eAnd putting them together, we get:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8350\"\u003e// LocalRemoveAnimations.kt\u003cp\u003edata class RemoveAnimations(\u003cbr/\u003e    val context: Context,\u003cbr/\u003e) {\u003cbr/\u003e    val enabled: Boolean\u003cbr/\u003e        get() =\u003cbr/\u003e            try {\u003cbr/\u003e                Settings.Global.getFloat(\u003cbr/\u003e                    context.contentResolver,\u003cbr/\u003e                    Settings.Global.ANIMATOR_DURATION_SCALE,\u003cbr/\u003e                    1f,\u003cbr/\u003e                )\u003cbr/\u003e            } catch (e: Settings.SettingNotFoundException) {\u003cbr/\u003e                1f\u003cbr/\u003e            } == 0f\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"3767\"\u003eNote that for the \u003ccode\u003eenabled\u003c/code\u003e-value, we add a check if the value from the try/catch-block is 0f to know if the \u0026#34;Remove animations\u0026#34; setting is enabled.\u003c/p\u003e\u003cp id=\"aee7\"\u003eThe next step is to provide it in code:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5fad\"\u003e// MainActivity.kt\u003cp\u003esetContent {\u003cbr/\u003e    val context = LocalContext.current\u003cbr/\u003e    CompositionLocalProvider(\u003cbr/\u003e        LocalRemoveAnimations provides\u003cbr/\u003e            RemoveAnimations(\u003cbr/\u003e                context = context,\u003cbr/\u003e            ),\u003cbr/\u003e    ) { \u003cbr/\u003e            // App content goes here\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5ef5\"\u003eFinally, we can read the value of the \u003ccode\u003eLocalRemoveAnimations\u003c/code\u003e in the components inside the app:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2fde\"\u003e@Composable\u003cbr/\u003efun ComponentSomewhereInTheHierarchy() {\u003cbr/\u003e    val removeAnimations = LocalRemoveAnimations.current.enabled\u003cbr/\u003e    ....\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"355e\"\u003eAll right, now we have everything to build the safer marquee modifier. Let’s do that in the next section.\u003c/p\u003e\u003ch2 id=\"a5c1\"\u003e\u003ccode\u003esafeMarquee\u003c/code\u003e-Modifier\u003c/h2\u003e\u003cp id=\"6085\"\u003eNow that we have the information about the user’s “Remove animations”-setting available via \u003ccode\u003eLocalRemoveAnimations\u003c/code\u003e, we can use it to adjust the text using the \u003ccode\u003ebasicMarquee\u003c/code\u003e-modifier.\u003c/p\u003e\u003cp id=\"eb25\"\u003eIf the user hasn’t enabled the “Remove animations” setting, we want to show the marquee; otherwise, let the text flow on multiple lines. Let’s define a custom modifier with the composable modifier factory and call it \u003ccode\u003esafeMarquee\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"51c0\"\u003e// MarqueeScreen.kt\u003cp\u003e@Composable\u003cbr/\u003efun Modifier.safeMarquee(): Modifier {  \u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5428\"\u003eNext, we want to read the value from \u003ccode\u003eLocalRemoveAnimations\u003c/code\u003e and, using that information, either add the \u003ccode\u003ebasicMarquee\u003c/code\u003e-modifier to the modifier chain or return the current modifier chain without any additional ones. Here\u0026#39;s the code to do so:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3553\"\u003e// MarqueeScreen.kt\u003cp\u003e@Composable\u003cbr/\u003efun Modifier.safeMarquee(): Modifier {  \u003cbr/\u003e    val animationsRemoved = LocalRemoveAnimations.current.isEnabled()\u003cbr/\u003e    return if (animationsRemoved) \u003cbr/\u003e        this \u003cbr/\u003e    else \u003cbr/\u003e        this then basicMarquee()\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9593\"\u003eWith these code changes, we get the desired result. Here’s a video showing a preview of a \u003ccode\u003eText\u003c/code\u003e-component with the \u003ccode\u003esafeMarquee\u003c/code\u003e-modifier:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"d34f\"\u003eWrapping Up\u003c/h2\u003e\u003cp id=\"64e9\"\u003eIn this blog post, we’ve looked into how to make the \u003ccode\u003ebasicMarquee\u003c/code\u003e modifier more accessible for users with the \u0026#34;Remove animations\u0026#34;-setting turned on. We checked the value of this setting, stored it as static composition local, and then used it to decide if we add the \u003ccode\u003ebasicMarquee\u003c/code\u003e to the element.\u003c/p\u003e\u003cp id=\"53ff\"\u003eDo you use the “Remove animations”-setting? Or have you encountered problems with it as a user or developer?\u003c/p\u003e\u003ch2 id=\"d0b7\"\u003eLinks in the Blog Post\u003c/h2\u003e\u003cul\u003e\u003cli id=\"34cc\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#(androidx.compose.ui.Modifier).basicMarquee(kotlin.Int,androidx.compose.foundation.MarqueeAnimationMode,kotlin.Int,kotlin.Int,androidx.compose.foundation.MarqueeSpacing,androidx.compose.ui.unit.Dp)\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ebasicMarquee\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\u003cli id=\"77db\"\u003e\u003ca href=\"https://medium.com/@eevajonna/android-animations-and-reduced-motion-a15334991fcc\" rel=\"noopener\"\u003eAndroid, Animations and Reduced Motion\u003c/a\u003e\u003c/li\u003e\u003cli id=\"9402\"\u003e\u003ca href=\"https://dev.to/eevajonnapanula/you-make-my-head-spin-reducing-the-motion-on-web-328b\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eYou Make My Head Spin — Reducing the Motion on Web\u003c/a\u003e\u003c/li\u003e\u003cli id=\"2901\"\u003e\u003ccode\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/compositionlocal\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompositionLocal\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-02-20T12:21:48.977Z",
  "modifiedTime": null
}
