{
  "id": "9a9157da-38bb-4eca-aa21-126253954609",
  "title": "Preview and test your app’s edge-to-edge UI",
  "link": "https://medium.com/androiddevelopers/preview-and-test-your-apps-edge-to-edge-ui-da645c905d78?source=rss----95b274b437c2---4",
  "description": "",
  "author": "Meghan Mehta",
  "published": "Wed, 04 Sep 2024 20:46:36 GMT",
  "source": "https://medium.com/feed/androiddevelopers",
  "categories": [
    "android-15-new-features",
    "android-15",
    "best-practices",
    "edge-to-edge"
  ],
  "byline": "Meghan Mehta",
  "length": 12147,
  "excerpt": "This blog post is part of our series: Spotlight Week on Android 15, where we provide resources — blog posts, videos, sample code, and more — all designed to help you prepare your apps and take…",
  "siteName": "Android Developers",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Starting in Android 15, once your app targets API 35, edge-to-edge will be enforced. Edge-to-edge means the status bar at the top and the gesture navigation bar at the bottom will be transparent by default, a look many users prefer.How will this affect your apps?When targeting API 35, your app’s UI might be hidden beneath system bars or display cutouts, causing layout issues. This image shows problems with the status bar, pinhole cutout, and navigation bar. To learn how to address these issues, refer to Insets handling tips for Android 15’s edge-to-edge enforcement.Let’s see how Compose Previews can help your app achieve a seamless edge-to-edge layout and provide a high quality user experience.Edge-to-edge support in Compose PreviewWe have a number of new Compose Preview features for testing edge-to-edge that are available for you to try in the latest Canary version of Android Studio Ladybug. Note that these features are still under development, and your feedback is invaluable in making them the best they can be.Here is a quick overview of what we will cover:Improvements to showSystemUITesting your UI on specific devicesTesting your UI with different types of cutoutsTesting your UI with both types of navigation barsPlease share your feedback and suggestions using the instructions here.Improvements to showSystemUIIn previous versions of Android Studio, you could view your screen level Compose Preview by using showSystemUi. However, it would show a system-generated status bar that looks different than it does on the emulator.In anticipation of the Android 15 changes, we’ve been fixing this feature so that you can see a more accurate rendering of your UI with the system UI. To see the updated Preview, you can set showSystemUi to true in code through Android Studio Ladybug Feature Drop Canary 1 or higher.@Preview(showSystemUi = true)Note: Using showSystemUi will show your app’s UI with edge-to-edge on Compose Preview even if you are targeting SDK 34 or lower. We encourage you to consider the default edge-to-edge behavior when designing your apps.Preview pickerYou can also use Compose Preview picker to access the list of new features we added for Android 15.Preview picker is currently experimental. To turn it on, goto Android Studio \u003e Settings \u003e Experimental and check the Enable @Preview picker check box.Then, you can use the Preview picker, which can be accessed by clicking the gear icon to the left of the Preview annotation.In the Display section, set showSystemUi to true.Now, you can more accurately view how your app’s status and navigation bar will look with edge-to-edge implemented through both code and the Preview picker. You may also want to see how your app looks on a specific device, like a Pixel 8 Pro. Let’s see how you can achieve that through Compose Preview.Test specific devicesYou can now specify a device you want the Preview to be displayed on. This allows you to view your screen with that device’s specific cutouts and sizing.Through the Preview picker, you can specify what device you want your Preview to be rendered on in the Device dropdown in the Hardware section.To do this manually, add a device parameter to the Preview annotation and set it to device = “id:pixel_8_pro”. Note that autocomplete will work, so if you type device = “id:pixel” then it will fill in all of the Pixel options you can test against in your Preview.@Preview(device = \"id:pixel_8_pro\", showSystemUi = true)You can now view your app as it would be displayed on a Pixel 8 Pro through your Preview.Note: Your navigation bar color may not be correct in the Preview and the status bar icons padding may also be different from a real device.Here is how the same app looks on different device types:CutoutsInstead of testing specific devices, you may want to just test that your app’s UI renders correctly with a specific type of cutout. There are multiple types of cutouts to be aware of. In the table above, you can see that the Pixel 5 and Pixel 6 have different types of cutouts.In Previews, we support testing for the following cutouts:CornerDoublePunch holeTallNote: we don’t currently support the center cutout that the Pixel uses in PreviewsHere’s how the UI of an app using edge-to-edge can go wrong because of a cutout:Among other issues, this app’s cutout overlaps the list content.This is why it is important to test how your UI reacts to different types of cutouts through your Compose Preview.In the Preview picker, under the Hardware section, find the Cutout dropdown and specify the cutout you would like to test.If you are doing this through code, note that you will first have to specify a device spec either through a specific device or a specific width and height in pixels.@Preview(showSystemUi = true, device = \"spec:parent=pixel_8\")@Preview(showSystemUi = true, device = \"spec:width=1080px,height=2340px\")Then, within the device spec, you can also add cutout and set it equal to the type of cutout you want to test.@Preview(showSystemUi = true, device = “spec:width=1080px,height=2400px,cutout=punch_hole”)Navigation barFor edge-to-edge, there are different UI standards for gesture navigation vs three button navigation.Gesture navigation:Transparent by defaultBottom offset is disabled, but you can apply insetssetNavigationBarColor is disabledThree button navigation:Opacity set to 80% by defaultBottom offset is disabled but you can apply insetsColor is the window background by defaultThe navigation bar in showSystemUi will show you the gesture navigation bar by default, but to test both types of navigation bars in your Preview, you can specify navigation using the Preview picker or through the device parameter.To specify through the Preview picker, in the Hardware section, find the Navigation dropdown and set your Preview’s navigation bar.If you are using code to test the navigation bars, you will need to specify a specific device or a specific width and height in pixels.@Preview(showSystemUi = true, device = \"spec:parent=pixel_8\")Then, you can add navigation and set it to buttons for three button navigation or gesture for gesture navigation.@Preview(showSystemUi = true, device = \"spec:parent=pixel_8,navigation=buttons\")Now that you know how to test your app’s UI edge-to-edge implementation through Compose Preview, let’s go over automated testing.Automated testing strategiesOnce you have manually tested that your screen handles edge-to-edge as expected, you should consider adding automated tests to catch future regressions.We recommend using screenshot tests to verify your edge-to-edge implementation, as they verify the placement and dimension of your insets and the content that might be drawn behind.You can use instrumented tests for the highest fidelity on emulators or physical devices. A single foldable emulator can cover most cases, and you can use Espresso Device to set the different screen orientations and foldable state:To switch between navigation modes, you can use UI Automator to pass adb commands:UiDevice.getInstance(InstrumentationRegistry.getInstrumentation()).apply { executeShellCommand( \"cmd overlay enable-exclusive \" + \"com.android.internal.systemui.navbar.gestural\", // or .threebutton )}An SDK 35 foldable emulator showing gesture and 3-button navigation, respectivelyThe system bar contains a clock and icons that change every minute, breaking screenshot tests. You can enable demo mode via adb commands to show the same system bar content every time:Demo mode enabled, showing a fixed time and iconsNote that adb commands are not synchronized, so you might need to implement a mechanism to wait or retry until each test passes. Alternatively, if you use Compose, there is a new wrapper that can help you catch most regressions:Testing insets with ComposeCompose 1.8.0-alpha01 ui-test includes a new DeviceConfigurationOverride for testing window insets, called DeviceConfigurationOverride.WindowInsets.This allows for specifying an arbitrary WindowInsetsCompat to apply to the composable under test:composeTestRule.setContent { DeviceConfigurationOverride( DeviceConfigurationOverride.WindowInsets( WindowInsetsCompat.Builder() .setInsets( WindowInsetsCompat.Type.statusBars(), DpRect( left = 0.dp, top = 64.dp, right = 0.dp, bottom = 0.dp, ).toAndroidXInsets(), ) .setInsets( WindowInsetsCompat.Type.navigationBars(), DpRect( left = 64.dp, top = 0.dp, right = 64.dp, bottom = 64.dp, ).toInsets(), ) .build(), ), ) ) { Box { content() // Your content under test DebugVisibleWindowInsets(Modifier.fillMaxSize()) // Debug overlay (optional) } }}This can then be combined with a debug overlay for showing where the insets are:@Composablefun DebugVisibleWindowInsets( modifier: Modifier = Modifier, debugColor: Color = Color.Magenta.copy(alpha = 0.5f),) { Box(modifier = modifier.fillMaxSize()) { Spacer( modifier = Modifier .align(Alignment.CenterStart) .fillMaxHeight() .windowInsetsStartWidth(WindowInsets.safeDrawing) .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Vertical)) .background(debugColor), ) Spacer( modifier = Modifier .align(Alignment.CenterEnd) .fillMaxHeight() .windowInsetsEndWidth(WindowInsets.safeDrawing) .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Vertical)) .background(debugColor), ) Spacer( modifier = Modifier .align(Alignment.TopCenter) .fillMaxWidth() .windowInsetsTopHeight(WindowInsets.safeDrawing) .background(debugColor), ) Spacer( modifier = Modifier .align(Alignment.BottomCenter) .fillMaxWidth() .windowInsetsBottomHeight(WindowInsets.safeDrawing) .background(debugColor), ) }}Putting both together, a screenshot test can visually show where the insets are, and reveal if there is content that would be obscured by the insets, like the snackbar is below:A screenshot test for the Now In Android app, identifying an issue with the snackbarFor an example of this in action, check out this Now in Android PR, which adds screenshot tests with applying insets: https://github.com/android/nowinandroid/pull/1498/QA TestingYour app might decide to create a QA team to test every screen, or at least your most important screens.There are three approaches to assist your QA team in seeing the impacts of the edge-to-edge enforcement:Distribute APKs that are targeting SDK 35 on Android 15 devices or emulators.OR, enable the ENFORCE_EDGE_TO_EDGE flag in the App Compatibility Change Developer Option on an Android 15 device without having to target SDK 35.OR, call enableEdgeToEdge on each Activity to simulate the Android 15 platform enforcement without having to target SDK 35 and without needing an Android 15 device.SummaryApps targeting API35 will be edge-to-edge by default in order to give your users a more satisfying and high quality experience. You can test your UI, including cutouts and navigation bars, using Compose Preview in the Canary version of Android Studio Ladybug, and in automating testing with the new DeviceConfigurationOverride. Please be sure to leave us any feedback using these instructions.Additional ResourcesAndroid 15 Edge to Edge Enforcement documentationHandle edge-to-edge enforcements in Android 15 CodelabEdge-to-Edge (Compose documentation)Edge-to-Edge (Views documentation)Edge-to-Edge \u0026 Insets: Compose Delightful Tips (Video)",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*cbWmzhcQsly95rHdfYZA1g.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"6af7\"\u003eStarting in Android 15, once your app targets API 35, edge-to-edge will be enforced. Edge-to-edge means the status bar at the top and the gesture navigation bar at the bottom will be transparent by default, a look many users prefer.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"63d8\"\u003eHow will this affect your apps?\u003c/h2\u003e\u003cp id=\"25d8\"\u003eWhen targeting API 35, your app’s UI might be hidden beneath system bars or display cutouts, causing layout issues. This image shows problems with the status bar, pinhole cutout, and navigation bar. To learn how to address these issues, refer to \u003ca rel=\"noopener\" href=\"https://medium.com/androiddevelopers/insets-handling-tips-for-android-15s-edge-to-edge-enforcement-872774e8839b\"\u003eInsets handling tips for Android 15’s edge-to-edge enforcement\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"bc18\"\u003eLet’s see how Compose Previews can help your app achieve a seamless edge-to-edge layout and provide a high quality user experience.\u003c/p\u003e\u003ch2 id=\"2466\"\u003eEdge-to-edge support in Compose Preview\u003c/h2\u003e\u003cp id=\"10ee\"\u003eWe have a number of new \u003ca href=\"https://developer.android.com/develop/ui/compose/tooling/previews\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Preview\u003c/a\u003e features for testing edge-to-edge that are available for you to try in the \u003ca href=\"https://developer.android.com/studio/preview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elatest Canary version\u003c/a\u003e of Android Studio Ladybug. Note that these features are still under development, and your feedback is invaluable in making them the best they can be.\u003c/p\u003e\u003cp id=\"d67b\"\u003eHere is a quick overview of what we will cover:\u003c/p\u003e\u003cul\u003e\u003cli id=\"89e1\"\u003eImprovements to \u003ccode\u003eshowSystemUI\u003c/code\u003e\u003c/li\u003e\u003cli id=\"ed4f\"\u003eTesting your UI on specific devices\u003c/li\u003e\u003cli id=\"0c41\"\u003eTesting your UI with different types of cutouts\u003c/li\u003e\u003cli id=\"8d3d\"\u003eTesting your UI with both types of navigation bars\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4821\"\u003ePlease share your feedback and suggestions using the instructions \u003ca href=\"https://developer.android.com/studio/report-bugs\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"cff9\"\u003eImprovements to showSystemUI\u003c/h2\u003e\u003cp id=\"6103\"\u003eIn previous versions of Android Studio, you could view your screen level Compose Preview by using \u003ccode\u003eshowSystemUi\u003c/code\u003e. However, it would show a system-generated status bar that looks different than it does on the emulator.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"d2f1\"\u003eIn anticipation of the Android 15 changes, we’ve been fixing this feature so that you can see a more accurate rendering of your UI with the system UI. To see the updated Preview, you can set \u003ccode\u003eshowSystemUi\u003c/code\u003e to true in code through \u003ca href=\"https://developer.android.com/studio/preview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Studio Ladybug Feature Drop Canary 1\u003c/a\u003e or higher.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f8c6\"\u003e@Preview(showSystemUi = true)\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"dde1\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Using \u003ccode\u003eshowSystemUi\u003c/code\u003e will show your app’s UI with edge-to-edge on Compose Preview even if you are targeting SDK 34 or lower. We encourage you to consider the default edge-to-edge behavior when designing your apps.\u003c/p\u003e\u003ch2 id=\"3696\"\u003ePreview picker\u003c/h2\u003e\u003cp id=\"4e87\"\u003eYou can also use Compose Preview picker to access the list of new features we added for Android 15.\u003c/p\u003e\u003cp id=\"4912\"\u003ePreview picker is currently experimental. To turn it on, goto \u003cstrong\u003eAndroid Studio \u0026gt; Settings \u0026gt; Experimental\u003c/strong\u003e and check the\u003cstrong\u003e Enable @Preview picker\u003c/strong\u003e check box.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"063d\"\u003eThen, you can use the Preview picker, which can be accessed by clicking the gear icon to the left of the Preview annotation.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"016f\"\u003eIn the Display section, set \u003cstrong\u003eshowSystemUi\u003c/strong\u003e to \u003cstrong\u003etrue\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"f28d\"\u003eNow, you can more accurately view how your app’s status and navigation bar will look with edge-to-edge implemented through both code and the Preview picker. You may also want to see how your app looks on a specific device, like a Pixel 8 Pro. Let’s see how you can achieve that through Compose Preview.\u003c/p\u003e\u003ch2 id=\"b288\"\u003eTest specific devices\u003c/h2\u003e\u003cp id=\"2630\"\u003eYou can now specify a device you want the Preview to be displayed on. This allows you to view your screen with that device’s specific cutouts and sizing.\u003c/p\u003e\u003cp id=\"f566\"\u003eThrough the Preview picker, you can specify what device you want your Preview to be rendered on in the \u003cstrong\u003eDevice\u003c/strong\u003e dropdown in the \u003cstrong\u003eHardware\u003c/strong\u003e section.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"edc9\"\u003eTo do this manually, add a device parameter to the Preview annotation and set it to \u003ccode\u003edevice = “id:pixel_8_pro”\u003c/code\u003e. Note that autocomplete will work, so if you type \u003ccode\u003edevice = “id:pixel”\u003c/code\u003e then it will fill in all of the Pixel options you can test against in your Preview.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d694\"\u003e@Preview(device = \u0026#34;id:pixel_8_pro\u0026#34;, showSystemUi = true)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"09fa\"\u003eYou can now view your app as it would be displayed on a Pixel 8 Pro through your Preview.\u003c/p\u003e\u003cp id=\"3980\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Your navigation bar color may not be correct in the Preview and the status bar icons padding may also be different from a real device.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"ae15\"\u003eHere is how the same app looks on different device types:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"e1c8\"\u003eCutouts\u003c/h2\u003e\u003cp id=\"8614\"\u003eInstead of testing specific devices, you may want to just test that your app’s UI renders correctly with a specific type of cutout. There are multiple types of cutouts to be aware of. In the table above, you can see that the Pixel 5 and Pixel 6 have different types of cutouts.\u003c/p\u003e\u003cp id=\"7cff\"\u003eIn Previews, we support testing for the following cutouts:\u003c/p\u003e\u003cul\u003e\u003cli id=\"547e\"\u003eCorner\u003c/li\u003e\u003cli id=\"f524\"\u003eDouble\u003c/li\u003e\u003cli id=\"67cc\"\u003ePunch hole\u003c/li\u003e\u003cli id=\"128c\"\u003eTall\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c785\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e we don’t currently support the center cutout that the Pixel uses in Previews\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"a264\"\u003eHere’s how the UI of an app using edge-to-edge can go wrong because of a cutout:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0d40\"\u003eAmong other issues, this app’s cutout overlaps the list content.\u003c/p\u003e\u003cp id=\"c2a3\"\u003eThis is why it is important to test how your UI reacts to different types of cutouts through your Compose Preview.\u003c/p\u003e\u003cp id=\"7d1a\"\u003eIn the Preview picker, under the \u003cstrong\u003eHardware\u003c/strong\u003e section, find the \u003cstrong\u003eCutout\u003c/strong\u003e dropdown and specify the cutout you would like to test.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"6398\"\u003eIf you are doing this through code, note that you will first have to specify a device spec either through a specific device or a specific width and height in pixels.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"27d6\"\u003e@Preview(showSystemUi = true, device = \u0026#34;spec:parent=pixel_8\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"d858\"\u003e@Preview(showSystemUi = true, device = \u0026#34;spec:width=1080px,height=2340px\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"abbc\"\u003eThen, within the device spec, you can also add cutout and set it equal to the type of cutout you want to test.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"be12\"\u003e@Preview(showSystemUi = true, device = \u003cbr/\u003e“spec:width=1080px,height=2400px,cutout=punch_hole”)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"fbd9\"\u003eNavigation bar\u003c/h2\u003e\u003cp id=\"927f\"\u003eFor edge-to-edge, there are different UI standards for gesture navigation vs three button navigation.\u003c/p\u003e\u003cp id=\"54e5\"\u003e\u003cstrong\u003eGesture navigation:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"dd6b\"\u003eTransparent by default\u003c/li\u003e\u003cli id=\"cb88\"\u003eBottom offset is disabled, but you can apply insets\u003c/li\u003e\u003cli id=\"9409\"\u003e\u003ccode\u003esetNavigationBarColor\u003c/code\u003e is disabled\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"5504\"\u003e\u003cstrong\u003eThree button navigation:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"7e9d\"\u003eOpacity set to 80% by default\u003c/li\u003e\u003cli id=\"f071\"\u003eBottom offset is disabled but you can apply insets\u003c/li\u003e\u003cli id=\"33f8\"\u003eColor is the window background by default\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"e761\"\u003eThe navigation bar in \u003ccode\u003eshowSystemUi\u003c/code\u003e will show you the gesture navigation bar by default, but to test both types of navigation bars in your Preview, you can specify navigation using the Preview picker or through the device parameter.\u003c/p\u003e\u003cp id=\"857b\"\u003eTo specify through the Preview picker, in the \u003cstrong\u003eHardware\u003c/strong\u003e section, find the \u003cstrong\u003eNavigation\u003c/strong\u003e dropdown and set your Preview’s navigation bar.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"cb86\"\u003eIf you are using code to test the navigation bars, you will need to specify a specific device or a specific width and height in pixels.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fc97\"\u003e@Preview(showSystemUi = true, device = \u0026#34;spec:parent=pixel_8\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2abf\"\u003eThen, you can add navigation and set it to buttons for three button navigation or gesture for gesture navigation.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2f19\"\u003e@Preview(showSystemUi = true, device = \u003cbr/\u003e\u0026#34;spec:parent=pixel_8,navigation=buttons\u0026#34;)\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8623\"\u003eNow that you know how to test your app’s UI edge-to-edge implementation through Compose Preview, let’s go over automated testing.\u003c/p\u003e\u003ch2 id=\"053a\"\u003eAutomated testing strategies\u003c/h2\u003e\u003cp id=\"d7bb\"\u003eOnce you have manually tested that your screen handles edge-to-edge as expected, you should consider adding automated tests to catch future regressions.\u003c/p\u003e\u003cp id=\"74d8\"\u003eWe recommend using screenshot tests to verify your edge-to-edge implementation, as they verify the placement and dimension of your insets and the content that might be drawn behind.\u003c/p\u003e\u003cp id=\"2ff4\"\u003eYou can use \u003ca href=\"https://developer.android.com/training/testing/instrumented-tests\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003einstrumented tests\u003c/a\u003e for the highest fidelity on emulators or physical devices. A single foldable emulator can cover most cases, and you can use \u003ca href=\"https://developer.android.com/studio/test/espresso-api\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEspresso Device\u003c/a\u003e to set the different screen orientations and foldable state:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"aca5\"\u003eTo switch between navigation modes, you can use UI Automator to pass \u003ccode\u003eadb\u003c/code\u003e commands:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4ee5\"\u003eUiDevice.getInstance(InstrumentationRegistry.getInstrumentation()).apply {\u003cbr/\u003e    executeShellCommand(\u003cbr/\u003e        \u0026#34;cmd overlay enable-exclusive \u0026#34; +\u003cbr/\u003e            \u0026#34;com.android.internal.systemui.navbar.gestural\u0026#34;, // or .threebutton\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cem\u003eAn SDK 35 foldable emulator showing gesture and 3-button navigation, respectively\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"65b7\"\u003eThe system bar contains a clock and icons that change every minute, breaking screenshot tests. You can enable \u003ca href=\"https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/docs/demo_mode.md\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edemo mode\u003c/a\u003e via adb commands to show the same system bar content every time:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cem\u003eDemo mode enabled, showing a fixed time and icons\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"86df\"\u003eNote that \u003ccode\u003eadb\u003c/code\u003e commands are not synchronized, so you might need to implement a mechanism to wait or retry until each test passes. Alternatively, if you use Compose, there is a new wrapper that can help you catch most regressions:\u003c/p\u003e\u003ch2 id=\"f05f\"\u003eTesting insets with Compose\u003c/h2\u003e\u003cp id=\"ef9a\"\u003eCompose 1.8.0-alpha01 ui-test includes a new \u003ccode\u003e\u003ca href=\"https://developer.android.com/training/testing/different-screens/tools#deviceconfigurationoverride\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDeviceConfigurationOverride\u003c/a\u003e\u003c/code\u003e for testing window insets, called \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/DeviceConfigurationOverride.Companion#(androidx.compose.ui.test.DeviceConfigurationOverride.Companion).WindowInsets(androidx.core.view.WindowInsetsCompat)\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDeviceConfigurationOverride.WindowInsets\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"11ec\"\u003eThis allows for specifying an arbitrary \u003ccode\u003eWindowInsetsCompat\u003c/code\u003e to apply to the composable under test:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2e17\"\u003ecomposeTestRule.setContent {\u003cbr/\u003e    DeviceConfigurationOverride(\u003cbr/\u003e        DeviceConfigurationOverride.WindowInsets(\u003cbr/\u003e            WindowInsetsCompat.Builder()\u003cbr/\u003e                .setInsets(\u003cbr/\u003e                    WindowInsetsCompat.Type.statusBars(),\u003cbr/\u003e                    DpRect(\u003cbr/\u003e                        left = 0.dp,\u003cbr/\u003e                        top = 64.dp,\u003cbr/\u003e                        right = 0.dp,\u003cbr/\u003e                        bottom = 0.dp,\u003cbr/\u003e                    ).toAndroidXInsets(),\u003cbr/\u003e                )\u003cbr/\u003e                .setInsets(\u003cbr/\u003e                    WindowInsetsCompat.Type.navigationBars(),\u003cbr/\u003e                        DpRect(\u003cbr/\u003e                            left = 64.dp,\u003cbr/\u003e                            top = 0.dp,\u003cbr/\u003e                            right = 64.dp,\u003cbr/\u003e                            bottom = 64.dp,\u003cbr/\u003e                        ).toInsets(),\u003cbr/\u003e                    )\u003cbr/\u003e                .build(),\u003cbr/\u003e            ),\u003cbr/\u003e        )\u003cbr/\u003e    ) {\u003cbr/\u003e        Box {\u003cbr/\u003e            content() // Your content under test\u003cbr/\u003e            DebugVisibleWindowInsets(Modifier.fillMaxSize()) // Debug overlay (optional)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"012a\"\u003eThis can then be combined with a debug overlay for showing where the insets are:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"75cf\"\u003e@Composable\u003cbr/\u003efun DebugVisibleWindowInsets(\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    debugColor: Color = Color.Magenta.copy(alpha = 0.5f),\u003cbr/\u003e) {\u003cbr/\u003e    Box(modifier = modifier.fillMaxSize()) {\u003cbr/\u003e        Spacer(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .align(Alignment.CenterStart)\u003cbr/\u003e                .fillMaxHeight()\u003cbr/\u003e                .windowInsetsStartWidth(WindowInsets.safeDrawing)\u003cbr/\u003e                .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Vertical))\u003cbr/\u003e                .background(debugColor),\u003cbr/\u003e        )\u003cbr/\u003e        Spacer(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .align(Alignment.CenterEnd)\u003cbr/\u003e                .fillMaxHeight()\u003cbr/\u003e                .windowInsetsEndWidth(WindowInsets.safeDrawing)\u003cbr/\u003e                .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Vertical))\u003cbr/\u003e                .background(debugColor),\u003cbr/\u003e        )\u003cbr/\u003e        Spacer(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .align(Alignment.TopCenter)\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .windowInsetsTopHeight(WindowInsets.safeDrawing)\u003cbr/\u003e                .background(debugColor),\u003cbr/\u003e        )\u003cbr/\u003e        Spacer(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .align(Alignment.BottomCenter)\u003cbr/\u003e                .fillMaxWidth()\u003cbr/\u003e                .windowInsetsBottomHeight(WindowInsets.safeDrawing)\u003cbr/\u003e                .background(debugColor),\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9e59\"\u003ePutting both together, a screenshot test can visually show where the insets are, and reveal if there is content that would be obscured by the insets, like the snackbar is below:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cem\u003eA screenshot test for the Now In Android app, identifying an issue with the snackbar\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"a4c4\"\u003eFor an example of this in action, check out this Now in Android PR, which adds screenshot tests with applying insets: \u003ca href=\"https://github.com/android/nowinandroid/pull/1498/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://github.com/android/nowinandroid/pull/1498/\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"e799\"\u003eQA Testing\u003c/h2\u003e\u003cp id=\"1e70\"\u003eYour app might decide to create a QA team to test every screen, or at least your most important screens.\u003c/p\u003e\u003cp id=\"858b\"\u003eThere are three approaches to assist your QA team in seeing the impacts of the edge-to-edge enforcement:\u003c/p\u003e\u003col\u003e\u003cli id=\"6dcc\"\u003eDistribute APKs that are targeting SDK 35 on Android 15 devices or emulators.\u003c/li\u003e\u003cli id=\"6a76\"\u003eOR, enable the \u003ccode\u003e\u003ca href=\"https://developer.android.com/about/versions/15/reference/compat-framework-changes#enforce_edge_to_edge\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eENFORCE_EDGE_TO_EDGE\u003c/a\u003e\u003c/code\u003e flag in the \u003ca href=\"https://developer.android.com/guide/app-compatibility/test-debug\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eApp Compatibility Change Developer Option\u003c/a\u003e on an Android 15 device without having to target SDK 35.\u003c/li\u003e\u003cli id=\"bfd9\"\u003eOR, call \u003ccode\u003e\u003ca href=\"https://developer.android.com/reference/androidx/activity/ComponentActivity#(androidx.activity.ComponentActivity).enableEdgeToEdge(androidx.activity.SystemBarStyle,androidx.activity.SystemBarStyle)\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eenableEdgeToEdge\u003c/a\u003e\u003c/code\u003e on each Activity to simulate the Android 15 platform enforcement without having to target SDK 35 and without needing an Android 15 device.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"c4d3\"\u003eSummary\u003c/h2\u003e\u003cp id=\"4ea8\"\u003eApps targeting API35 will be edge-to-edge by default in order to give your users a more satisfying and high quality experience. You can test your UI, including cutouts and navigation bars, using Compose Preview in the Canary version of Android Studio Ladybug, and in automating testing with the new \u003ccode\u003eDeviceConfigurationOverride\u003c/code\u003e. Please be sure to leave us any feedback using \u003ca href=\"https://developer.android.com/studio/report-bugs\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethese instructions\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"9a8c\"\u003eAdditional Resources\u003c/h2\u003e\u003cul\u003e\u003cli id=\"1974\"\u003e\u003ca href=\"https://developer.android.com/about/versions/15/behavior-changes-15#edge-to-edge\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid 15 Edge to Edge Enforcement\u003c/a\u003e documentation\u003c/li\u003e\u003cli id=\"f4d9\"\u003e\u003ca href=\"https://developer.android.com/codelabs/edge-to-edge?continue=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fimprove-user-experience%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fedge-to-edge#0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHandle edge-to-edge enforcements in Android 15 Codelab\u003c/a\u003e\u003c/li\u003e\u003cli id=\"cfdf\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/layouts/insets\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEdge-to-Edge\u003c/a\u003e (Compose documentation)\u003c/li\u003e\u003cli id=\"e269\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/views/layout/edge-to-edge\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEdge-to-Edge\u003c/a\u003e (Views documentation)\u003c/li\u003e\u003cli id=\"c9ec\"\u003e\u003ca href=\"https://www.youtube.com/watch?v=QRzepC9gHj4\u0026amp;t=2s\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEdge-to-Edge \u0026amp; Insets: Compose Delightful Tips\u003c/a\u003e (Video)\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-09-04T20:46:36.602Z",
  "modifiedTime": null
}
