{
  "id": "b9eaa181-dc07-448c-83cc-693def32c3c8",
  "title": "I Want a Fast Whitespace Fixer",
  "link": "https://publicobject.com/2024/09/30/i-want-a-fast-whitespace-fixer/",
  "description": "A couple of us are grumpy that putting robots in charge of code formatting is too slow \u0026 too clumsy. Jake Wharton reminded us that ranting isn’t as useful as participating, and challenged us to work on fixes.Lemme start with my ideal:IntelliJ, Android Studio, and a command-line",
  "author": "Jesse Wilson",
  "published": "Mon, 30 Sep 2024 03:10:54 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 1979,
  "excerpt": "A couple of us are grumpy [https://mstdn.social/@autonomousapps/113202332051085238] that putting robots in charge of code formatting is too slow \u0026 too clumsy. Jake Wharton [https://jakewharton.com] reminded us that ranting isn’t as useful as participating, and challenged us to work on fixes. Lemme start with my ideal: 1. IntelliJ, Android Studio, and a command-line thing all agree on the formatting rules. 2. I can use .editorconfig [https://editorconfig.org/] to customize some rules",
  "siteName": "Public Object",
  "favicon": "",
  "text": "A couple of us are grumpy that putting robots in charge of code formatting is too slow \u0026 too clumsy. Jake Wharton reminded us that ranting isn’t as useful as participating, and challenged us to work on fixes.Lemme start with my ideal:IntelliJ, Android Studio, and a command-line thing all agree on the formatting rules.I can use .editorconfig to customize some rules that I’m persnickety about. The IDE and command-line both honor these customizations. The default style is thoughtful.I don’t need to install any IDE plugins.The command-line thing is absurdly fast. Fast enough that I can run it in a pre-commit hook and not feel like I’m doing a build.The command-line thing can validate the style: spotlessCheck.The command-line thing can fix the style automatically: spotlessApply.The command-line thing can run on a whole repo, or just a few commits: ratchetFrom.I can mash the Reformat Code shortcut in the IDE (⌘⌥L) and it’ll fix my code.It turns out that almost everything I want is already here. IntelliJ and Android Studio are excellent and support .editorconfig. Ktlint has good enough defaults and supports .editorconfig. Spotless integrates Gradle with ktlint and Git.But there’s a bug (KTIJ-16847) in IntelliJ where it doesn’t sort aliased imports properly. This one’s super annoying because it means I’ll probably need spotlessApply before each commit. Please vote up this issue!And spotlessApply isn’t absurdly fast. It runs inside Gradle which needs to do a lot of project set up before it can launch ktlint to format my code. Here’s some unreasonable optimizations that qualify as absurdly fast:Interrogate the host hardware and use careful parallelism to saturate the CPU, file reading, and file writing.Use Kotlin/Native or a GraalVM native image to eliminate JIT startup latency.Use a sqlite DB to remember which files have already been formatted.Do something fancy with SIMD.Fast is a feature. If my formatter runs in half a second, I’ll run it all the time.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\n\t\t\n\n\n\n\n\n\u003cmain role=\"main\"\u003e\n\t\u003carticle\u003e\n\t\t\u003csection\u003e\n\t\t\t\t\u003cp\u003eA couple of us are \u003ca href=\"https://mstdn.social/@autonomousapps/113202332051085238\"\u003egrumpy\u003c/a\u003e that putting robots in charge of code formatting is too slow \u0026amp; too clumsy. \u003ca href=\"https://jakewharton.com\"\u003eJake Wharton\u003c/a\u003e reminded us that ranting isn’t as useful as participating, and challenged us to work on fixes.\u003c/p\u003e\u003cp\u003eLemme start with my ideal:\u003c/p\u003e\u003col\u003e\u003cli\u003eIntelliJ, Android Studio, and a command-line thing all agree on the formatting rules.\u003c/li\u003e\u003cli\u003eI can use \u003ca href=\"https://editorconfig.org/\"\u003e.editorconfig\u003c/a\u003e to customize some rules that I’m persnickety about. The IDE and command-line both honor these customizations. The default style is thoughtful.\u003c/li\u003e\u003cli\u003eI don’t need to install any IDE plugins.\u003c/li\u003e\u003cli\u003eThe command-line thing is absurdly fast. Fast enough that I can run it in a \u003ca href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\"\u003epre-commit hook\u003c/a\u003e and not feel like I’m doing a build.\u003c/li\u003e\u003cli\u003eThe command-line thing can validate the style: \u003ccode\u003espotlessCheck\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eThe command-line thing can fix the style automatically: \u003ccode\u003espotlessApply\u003c/code\u003e.\u003c/li\u003e\u003cli\u003eThe command-line thing can run on a whole repo, or just a few commits: \u003ca href=\"https://github.com/diffplug/spotless/tree/main/plugin-gradle#ratchet\"\u003eratchetFrom\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eI can mash the \u003cem\u003eReformat Code\u003c/em\u003e shortcut in the IDE (⌘⌥L) and it’ll fix my code.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIt turns out that almost everything I want is already here. IntelliJ and Android Studio are excellent and support \u003ccode\u003e.editorconfig\u003c/code\u003e. \u003ca href=\"https://github.com/pinterest/ktlint\"\u003eKtlint\u003c/a\u003e has good enough defaults and supports \u003ccode\u003e.editorconfig\u003c/code\u003e. \u003ca href=\"https://github.com/diffplug/spotless\"\u003eSpotless\u003c/a\u003e integrates Gradle with\u003ca href=\"https://github.com/pinterest/ktlint\"\u003e \u003c/a\u003ektlint and Git.\u003c/p\u003e\u003cp\u003eBut there’s a bug (\u003ca href=\"https://youtrack.jetbrains.com/issue/KTIJ-16847/\"\u003eKTIJ-16847\u003c/a\u003e) in IntelliJ where it doesn’t sort aliased imports properly. This one’s super annoying because it means I’ll probably need \u003ccode\u003espotlessApply\u003c/code\u003e before each commit. Please vote up this issue!\u003c/p\u003e\u003cp\u003eAnd \u003ccode\u003espotlessApply\u003c/code\u003e isn’t absurdly fast. It runs inside Gradle which needs to do a lot of project set up before it can launch ktlint to format my code. Here’s some unreasonable optimizations that qualify as absurdly fast:\u003c/p\u003e\u003cul\u003e\u003cli\u003eInterrogate the host hardware and use careful parallelism to saturate the CPU, file reading, and file writing.\u003c/li\u003e\u003cli\u003eUse Kotlin/Native or a \u003ca href=\"https://www.graalvm.org/latest/reference-manual/native-image/\"\u003eGraalVM native image\u003c/a\u003e to eliminate JIT startup latency.\u003c/li\u003e\u003cli\u003eUse a sqlite DB to remember which files have already been formatted.\u003c/li\u003e\u003cli\u003eDo something fancy with SIMD.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFast is a feature. If my formatter runs in half a second, I’ll run it all the time.\u003c/p\u003e\n\t\t\t\u003c/section\u003e\n\t\u003c/article\u003e\n\u003c/main\u003e\n\n\n\n\n\t\t\n\n\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-09-30T03:10:54Z",
  "modifiedTime": "2024-09-30T03:10:54Z"
}
