{
  "id": "70e09d5c-50a0-443e-a06c-1db875c5a108",
  "title": "Adding Localization Support in Compose Multiplatform",
  "link": "https://proandroiddev.com/adding-localization-support-in-compose-multiplatform-1792e4950c19?source=rss----c72404660798---4",
  "description": "",
  "author": "DeveloperSpace",
  "published": "Sat, 26 Apr 2025 19:40:19 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-app-development",
    "compose-multiplatform",
    "android",
    "androiddev",
    "localization"
  ],
  "byline": "DeveloperSpace",
  "length": 3572,
  "excerpt": "One of the strengths of building with Compose Multiplatform is the ability to reuse business and UI logic across Android, iOS, Desktop, and Web (experimental). But when building production-ready‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "One of the strengths of building with Compose Multiplatform is the ability to reuse business and UI logic across Android, iOS, Desktop, and Web (experimental). But when building production-ready apps, localization is essential for delivering a personalized experience to global users.In this blog post, We‚Äôll walk through a simple approach to implement language switching in a Compose Multiplatform app using a shared changeLanguage function‚Äîtailored to each platform.üìÅ Step 1: Organizing Language Resources in Compose MultiplatformUnlike traditional Android apps that use res/values-\u003clang\u003e directories, Compose Multiplatform projects should place all localization resources under the composeResources folder in commonMain.commonMain/‚îú‚îÄ‚îÄ composeResources/‚îÇ ‚îú‚îÄ‚îÄ values‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xml‚îÇ ‚îú‚îÄ‚îÄ values-hi‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xml‚îÇ ‚îú‚îÄ‚îÄ values-es‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xmlEach string.xml contains localized string resources using the same keys.Example:\u003c!-- values/string.xml --\u003e\u003cresources\u003e \u003cstring name=\"email\"\u003eEmail\u003c/string\u003e \u003cstring name=\"password\"\u003ePassword\u003c/string\u003e\u003c/resources\u003e\u003c!-- values-hi/string.xml --\u003e\u003cresources\u003e \u003cstring name=\"email\"\u003e‡§à‡§Æ‡•á‡§≤\u003c/string\u003e \u003cstring name=\"password\"\u003e‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°\u003c/string\u003e\u003c/resources\u003eAccessing Resources:The org.jetbrains.compose.resources Gradle plugin processes these files and generates a type-safe Res object (you might need to run a Gradle build like ./gradlew generateComposeResClass for it to appear). You access these resources in your Composables using functions like stringResourceüí° Example: Login Screen Using Localized Stringsimport org.jetbrains.compose.resources.stringResourceimport your.project.package.generated.resources.Res // Import the generated Res objectText( text = stringResource(Res.string.email), style = MaterialTheme.typography.titleLarge)OutlinedTextField( value = email, onValueChange = { email = it }, label = { Text(stringResource(Res.string.email)) }, modifier = Modifier.fillMaxWidth())OutlinedTextField( value = password, onValueChange = { password = it }, label = { Text(stringResource(Res.string.password)) }, modifier = Modifier.fillMaxWidth())Button(onClick = { /* login */ }) { Text(stringResource(Res.string.button_login))}‚úÖ Avoid hardcoded strings like \"Login\" or \"Enter email\"‚Äîalways use stringResource(Res.string.\u003cid\u003e) for localization support.üß© Step 2: Platform-Agnostic Expect FunctionWe begin by declaring a platform-agnostic changeLanguage function using Kotlin‚Äôs expect/actual mechanism.// commonMain/kotlin/com/yourpackage/app/LocalizationWrapper.ktexpect fun changeLanguage(language: String)ü§ñ Android ImplementationOn Android, we update the default locale using Locale.setDefault().// androidMain/kotlin/com/yourpackage/app/LocalizationWrapper.ktactual fun changeLanguage(language: String) { val locale = Locale(language) Locale.setDefault(locale)}üçè iOS ImplementationOn iOS, we use NSUserDefaults to update the AppleLanguages array. This is how iOS handles preferred languages.// iosMain/kotlin/com/yourpackage/app/LocalizationWrapper.ktactual fun changeLanguage(language: String) { NSUserDefaults.standardUserDefaults .setObject(arrayListOf(language), \"AppleLanguages\")}üñ•Ô∏è Desktop (JVM) ImplementationFor desktop, it‚Äôs as simple as updating the default locale just like Android.// desktopMain/kotlin/com/yourpackage/app/LocalizationWrapper.ktactual fun changeLanguage(language: String) { val locale = Locale.of(language) Locale.setDefault(locale)}üîç What this does:This functions updates the default locale at runtime for your Compose Multiplatform app.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*yqB9I0suO5E3t73IEN1AUg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://developerspace.medium.com/?source=post_page---byline--1792e4950c19---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"DeveloperSpace\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*luywDv13dgc2IWAiWLTIiw.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"ace4\"\u003eOne of the strengths of building with \u003cstrong\u003eCompose Multiplatform\u003c/strong\u003e is the ability to reuse business and UI logic across Android, iOS, Desktop, and Web (experimental). But when building production-ready apps, \u003cstrong\u003elocalization\u003c/strong\u003e is essential for delivering a personalized experience to global users.\u003c/p\u003e\u003cp id=\"0982\"\u003eIn this blog post, We‚Äôll walk through a simple approach to implement language switching in a Compose Multiplatform app using a \u003cstrong\u003eshared \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003echangeLanguage\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e function\u003c/strong\u003e‚Äîtailored to each platform.\u003c/p\u003e\u003ch2 id=\"13ac\"\u003eüìÅ Step 1: Organizing Language Resources in Compose Multiplatform\u003c/h2\u003e\u003cp id=\"49b2\"\u003eUnlike traditional Android apps that use \u003ccode\u003eres/values-\u0026lt;lang\u0026gt;\u003c/code\u003e directories, \u003cstrong\u003eCompose Multiplatform\u003c/strong\u003e projects should place all localization resources under the \u003ccode\u003ecomposeResources\u003c/code\u003e folder in \u003ccode\u003ecommonMain\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"77e4\"\u003ecommonMain/\u003cbr/\u003e‚îú‚îÄ‚îÄ composeResources/\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ values\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xml\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ values-hi\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xml\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ values-es\u003cbr/\u003e‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄstring.xml\u003c/p\u003e\u003cp id=\"6134\"\u003eEach \u003ccode\u003estring.xml\u003c/code\u003e contains localized string resources using the same keys.\u003cbr/\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"982c\"\u003e\u0026lt;!-- values/string.xml --\u0026gt;\u003cbr/\u003e\u0026lt;resources\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;password\u0026#34;\u0026gt;Password\u0026lt;/string\u0026gt;\u003cbr/\u003e\u0026lt;/resources\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"2e5b\"\u003e\u0026lt;!-- values-hi/string.xml --\u0026gt;\u003cbr/\u003e\u0026lt;resources\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;email\u0026#34;\u0026gt;‡§à‡§Æ‡•á‡§≤\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;string name=\u0026#34;password\u0026#34;\u0026gt;‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°\u0026lt;/string\u0026gt;\u003cbr/\u003e\u0026lt;/resources\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9c09\"\u003e\u003cstrong\u003eAccessing Resources:\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"1912\"\u003eThe \u003cem\u003eorg.jetbrains.compose.resources\u003c/em\u003e Gradle plugin processes these files and generates a type-safe Res object (you might need to run a Gradle build like \u003cstrong\u003e./gradlew generateComposeResClass\u003c/strong\u003e for it to appear). You access these resources in your Composables using functions like stringResource\u003c/p\u003e\u003ch2 id=\"3bed\"\u003eüí° Example: Login Screen Using Localized Strings\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"bd25\"\u003eimport org.jetbrains.compose.resources.stringResource\u003cbr/\u003eimport your.project.package.generated.resources.Res // Import the generated Res object\u003cp\u003eText(\u003cbr/\u003e    text = stringResource(Res.string.email),\u003cbr/\u003e    style = MaterialTheme.typography.titleLarge\u003cbr/\u003e)\u003cbr/\u003eOutlinedTextField(\u003cbr/\u003e    value = email,\u003cbr/\u003e    onValueChange = { email = it },\u003cbr/\u003e    label = { Text(stringResource(Res.string.email)) },\u003cbr/\u003e    modifier = Modifier.fillMaxWidth()\u003cbr/\u003e)\u003cbr/\u003eOutlinedTextField(\u003cbr/\u003e    value = password,\u003cbr/\u003e    onValueChange = { password = it },\u003cbr/\u003e    label = { Text(stringResource(Res.string.password)) },\u003cbr/\u003e    modifier = Modifier.fillMaxWidth()\u003cbr/\u003e)\u003cbr/\u003eButton(onClick = { /* login */ }) {\u003cbr/\u003e    Text(stringResource(Res.string.button_login))\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"285c\"\u003e‚úÖ \u003cstrong\u003eAvoid hardcoded strings\u003c/strong\u003e like \u003ccode\u003e\u0026#34;Login\u0026#34;\u003c/code\u003e or \u003ccode\u003e\u0026#34;Enter email\u0026#34;\u003c/code\u003e‚Äîalways use \u003ccode\u003estringResource(Res.string.\u0026lt;id\u0026gt;)\u003c/code\u003e for localization support.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"36a5\"\u003eüß© Step 2: Platform-Agnostic Expect Function\u003c/h2\u003e\u003cp id=\"25ad\"\u003eWe begin by declaring a platform-agnostic \u003ccode\u003echangeLanguage\u003c/code\u003e function using Kotlin‚Äôs \u003ccode\u003eexpect/actual\u003c/code\u003e mechanism.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2bbc\"\u003e// commonMain/kotlin/com/yourpackage/app/LocalizationWrapper.kt\u003cbr/\u003eexpect fun changeLanguage(language: String)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"59da\"\u003eü§ñ Android Implementation\u003c/h2\u003e\u003cp id=\"96f5\"\u003eOn Android, we update the default locale using \u003ccode\u003eLocale.setDefault()\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2468\"\u003e// androidMain/kotlin/com/yourpackage/app/LocalizationWrapper.kt\u003cbr/\u003eactual fun changeLanguage(language: String) {\u003cbr/\u003e    val locale = Locale(language)\u003cbr/\u003e    Locale.setDefault(locale)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"5907\"\u003eüçè iOS Implementation\u003c/h2\u003e\u003cp id=\"c4a7\"\u003eOn iOS, we use \u003ccode\u003eNSUserDefaults\u003c/code\u003e to update the AppleLanguages array. This is how iOS handles preferred languages.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c4bc\"\u003e// iosMain/kotlin/com/yourpackage/app/LocalizationWrapper.kt\u003cbr/\u003eactual fun changeLanguage(language: String) {\u003cbr/\u003e    NSUserDefaults.standardUserDefaults\u003cbr/\u003e        .setObject(arrayListOf(language), \u0026#34;AppleLanguages\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"2560\"\u003eüñ•Ô∏è Desktop (JVM) Implementation\u003c/h2\u003e\u003cp id=\"c19d\"\u003eFor desktop, it‚Äôs as simple as updating the default locale just like Android.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6c7c\"\u003e// desktopMain/kotlin/com/yourpackage/app/LocalizationWrapper.kt\u003cbr/\u003eactual fun changeLanguage(language: String) {\u003cbr/\u003e    val locale = Locale.of(language)\u003cbr/\u003e    Locale.setDefault(locale)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"dc25\"\u003eüîç What this does:\u003c/h2\u003e\u003cp id=\"7ae8\"\u003eThis functions updates the \u003cstrong\u003edefault locale\u003c/strong\u003e at runtime for your Compose Multiplatform app.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-26T19:40:18.941Z",
  "modifiedTime": null
}
