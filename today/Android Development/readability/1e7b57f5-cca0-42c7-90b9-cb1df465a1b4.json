{
  "id": "1e7b57f5-cca0-42c7-90b9-cb1df465a1b4",
  "title": "The state of managing state (with Compose)",
  "link": "https://code.cash.app/the-state-of-managing-state-with-compose",
  "description": "",
  "author": "",
  "published": "2021-11-11T00:00:00+00:00",
  "source": "https://jakewharton.com/atom.xml",
  "categories": null,
  "byline": "Jake Wharton",
  "length": 5671,
  "excerpt": "Five years ago the Cash App Android client started splitting our UI rendering and UI presenter responsibilities into distinct types. We had leaned into RxJava heavily in the years prior, and it became very effective in facilitating this split. I ended up giving a fun talk, “The State of Managing State with RxJava”, where I refactored then-common (anti?)patterns in RxJava to an architecture similar to where we were moving.",
  "siteName": "Cash App Code Blog",
  "favicon": "https://code.cash.app/assets/icon-196.png",
  "text": "Posted by Jake Wharton on November 11, 2021 Five years ago the Cash App Android client started splitting our UI rendering and UI presenter responsibilities into distinct types. We had leaned into RxJava heavily in the years prior, and it became very effective in facilitating this split. I ended up giving a fun talk, “The State of Managing State with RxJava”, where I refactored then-common (anti?)patterns in RxJava to an architecture similar to where we were moving. For all the gain in clean layering and improved testability, I was very dissatisfied with how opaque the code to actually manage the state objects was becoming. The business logic was becoming lost in a sea of RxJava operator combinations and nesting. We had tried a few redux-like libraries to attempt at mitigating this, and had even built our own which never saw the light of day1, but none were satisfying as a solution. Shortly thereafter I briefly left Cash App for Google, but since all good library work is built in the context of a real app I built SDK Search as my playground with a similar architecture. As kotlinx.coroutines was being built I migrated from RxJava to its Channel to unlock multiplatform support. When Flow was released I never landed its migration. The change itself was easy, but the problem was never the stream type but in how the logic which produces the state is defined. I had a picture of what I wanted but was unable to express it without drowning in library API. Back on Cash App I was still dissatisfied with Flow and coroutines in any shape as a good solution. I had been playing with Compose2 to build fancy terminal UI and multiplatform UI binding while also thinking about the role of architecture in any Compose-based project. Then earlier this year Matt Precious was building a Compose Web project and we were iterating on what a classic presenter/render split in Compose looked like. We created something good, but by virtue of depending on Compose it could only be used for Compose UI or Compose Web. Or could it? Enter Molecule The Molecule library is the idea that you can use Compose solely as a mechanism of producing state values and not as something which does rendering. First and foremost, what does it look like? @Composable fun Counter(start: Int, stop: Int): Int { val value by remember { mutableStateOf(start) } LaunchedEffect(Unit) { while (value \u003c= stop) { delay(1_000) value++ } } return value } This is a normal, state-returning composable function which could be used to bind to the text property of some Compose UI element. Molecule lets you take this shape of composable and expose it as a StateFlow\u003cInt\u003e which can be consumed anywhere. Compose synchronously recomposes when first initialized to produce the initial value, and then all subsequent values will emit in reaction to state change. val count: StateFlow\u003cInt\u003e = scope.launchMolecule { Counter(1, 10) } When it comes to presenters, we have a composable function pattern we can use with Molecule: @Composable fun SomePresenter(events: Flow\u003cEventType\u003e): ModelType { // ... } val models: StateFlow\u003cModelType\u003e = scope.launchMolecule { SomePresenter(events) } The reason this is exciting, and the reason for the history lesson above, is that Compose does enable a new way of writing our logic. The use of a compiler plugin unlocks the language in a way that otherwise could not be achieved with raw coroutine library APIs. If you aren’t familiar with Compose (but still got this far in the post), the ways in which it changes how you write code are too extensive to detail here and the official documentation is a good place to start. Now instead of chaining RxJava or Flow operators I can write plain if/else statements and for loops. Instead of using publish/filter/merge combinations for type hierarchies I can now write a plain when and gain the language’s exhaustiveness checking. All of Compose’s tools such as remember, state, derived state, effects, and more are available to use. Molecule’s sample application starts to show a bit more complexity and use of these helpers. @Composable fun CounterPresenter( events: Flow\u003cCounterEvent\u003e, randomService: RandomService, ): CounterModel { var count by remember { mutableStateOf(0) } var loading by remember { mutableStateOf(false) } LaunchedEffect(Unit) { events.collect { event -\u003e when (event) { is Change -\u003e { count += event.delta } Randomize -\u003e { loading = true launch { count = randomService.get(-20, 20) loading = false } } } } } return CounterModel(count, loading) } And finally, in Cash App our usage is class-based which allows us to normalize the presenter API and still participate in compile-time safe dependency injection. class CounterPresenter @Inject constructor( private val randomService: RandomService, ) : MoleculePresenter { @Composable override fun Present(events: Flow\u003cCounterEvent\u003e) : CounterModel { // ... } } We’ve been playing with Molecule on the side for about five months now3. It’s not ready for a 1.0 because there are some tradeoffs in how we’re using Compose and in the shape of our APIs that we’re not 100% sure are the right ones to make. As of this week the library is public and has been integrated into Cash App for more real-world testing. We invite you to experiment with the library alongside us. Is this the final form in the evolution of how we manage state? Unlikely. But it just may be our next form, and perhaps it could be yours, too! Footnotes:",
  "image": "https://code.cash.app/assets/social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n\n  \u003cdiv\u003e\u003cp\u003e\n    Posted by\n    \u003ca href=\"https://mastodon.jakewharton.com/@jw\"\u003eJake Wharton\u003c/a\u003e\n    \n      \u003cspan\u003eon \u003c/span\u003e\u003ctime datetime=\"2021-11-11 00:00:00 +0000\"\u003eNovember 11, 2021\u003c/time\u003e\n    \n  \u003c/p\u003e\u003c/div\u003e\n\n  \u003cp\u003eFive years ago the Cash App Android client started splitting our UI rendering and UI presenter responsibilities into distinct types.\nWe had leaned into RxJava heavily in the years prior, and it became very effective in facilitating this split.\nI ended up giving a fun talk, “\u003ca href=\"https://jakewharton.com/the-state-of-managing-state-with-rxjava/\"\u003eThe State of Managing State with RxJava\u003c/a\u003e”, where I refactored then-common (anti?)patterns in RxJava to an architecture similar to where we were moving.\u003c/p\u003e\n\n\u003cp\u003eFor all the gain in clean layering and improved testability, I was very dissatisfied with how opaque the code to actually manage the state objects was becoming.\nThe business logic was becoming lost in a sea of RxJava operator combinations and nesting.\nWe had tried a few redux-like libraries to attempt at mitigating this, and had even built our own which never saw the light of day\u003csup id=\"fnref:1\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:1\" rel=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e, but none were satisfying as a solution.\u003c/p\u003e\n\n\u003cp\u003eShortly thereafter I briefly left Cash App for Google, but since all good library work is built in the context of a real app I built \u003ca href=\"https://github.com/JakeWharton/SdkSearch\"\u003eSDK Search\u003c/a\u003e as my playground with a similar architecture.\nAs kotlinx.coroutines was being built I migrated from RxJava to its \u003ccode\u003eChannel\u003c/code\u003e to unlock multiplatform support.\nWhen \u003ccode\u003eFlow\u003c/code\u003e was released I never landed its migration.\nThe change itself was easy, but the problem was never the stream type but in how the logic which produces the state is defined.\nI had a picture of what I wanted but was unable to express it without drowning in library API.\u003c/p\u003e\n\n\u003cp\u003eBack on Cash App I was still dissatisfied with \u003ccode\u003eFlow\u003c/code\u003e and coroutines in any shape as a good solution.\nI had been playing with Compose\u003csup id=\"fnref:2\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:2\" rel=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e to build \u003ca href=\"https://github.com/JakeWharton/mosaic/\"\u003efancy terminal UI\u003c/a\u003e and \u003ca href=\"https://jakewharton.com/multiplatform-compose-and-gradle-module-metadata-abuse/\"\u003emultiplatform UI binding\u003c/a\u003e while also thinking about the role of architecture in any Compose-based project.\nThen earlier this year \u003ca href=\"https://twitter.com/mattprec\"\u003eMatt Precious\u003c/a\u003e was building a Compose Web project and we were iterating on what a classic presenter/render split in Compose looked like.\nWe created something good, but by virtue of depending on Compose it could only be used for Compose UI or Compose Web.\u003c/p\u003e\n\n\u003cp\u003eOr could it?\u003c/p\u003e\n\n\u003ch3 id=\"enter-molecule\"\u003eEnter Molecule\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://github.com/cashapp/molecule/\"\u003eMolecule\u003c/a\u003e library is the idea that you can use Compose solely as a mechanism of producing state values and not as something which does rendering.\u003c/p\u003e\n\n\u003cp\u003eFirst and foremost, what does it look like?\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003estop\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eInt\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e \u003cspan\u003eby\u003c/span\u003e \u003cspan\u003eremember\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003emutableStateOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003eLaunchedEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eUnit\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ewhile\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e \u003cspan\u003e\u0026lt;=\u003c/span\u003e \u003cspan\u003estop\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1_000\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e++\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis is a normal, state-returning composable function which could be used to bind to the text property of some Compose UI element.\u003c/p\u003e\n\n\u003cp\u003eMolecule lets you take this shape of composable and expose it as a \u003ccode\u003eStateFlow\u0026lt;Int\u0026gt;\u003c/code\u003e which can be consumed anywhere.\nCompose synchronously recomposes when first initialized to produce the initial value, and then all subsequent values will emit in reaction to state change.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStateFlow\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eInt\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003escope\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elaunchMolecule\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhen it comes to presenters, we have a composable function pattern we can use with Molecule:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eSomePresenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevents\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFlow\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eEventType\u003c/span\u003e\u003cspan\u003e\u0026gt;):\u003c/span\u003e \u003cspan\u003eModelType\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e// ...\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003emodels\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStateFlow\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eModelType\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003escope\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elaunchMolecule\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eSomePresenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevents\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe reason this is exciting, and the reason for the history lesson above, is that Compose \u003cem\u003edoes\u003c/em\u003e enable a new way of writing our logic. The use of a compiler plugin unlocks the language in a way that otherwise could not be achieved with raw coroutine library APIs. If you aren’t familiar with Compose (but still got this far in the post), the ways in which it changes how you write code are too extensive to detail here and \u003ca href=\"https://developer.android.com/jetpack/compose\"\u003ethe official documentation\u003c/a\u003e is a good place to start.\u003c/p\u003e\n\n\u003cp\u003eNow instead of chaining RxJava or Flow operators I can write plain \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statements and \u003ccode\u003efor\u003c/code\u003e loops.\nInstead of using \u003ccode\u003epublish\u003c/code\u003e/\u003ccode\u003efilter\u003c/code\u003e/\u003ccode\u003emerge\u003c/code\u003e combinations for type hierarchies I can now write a plain \u003ccode\u003ewhen\u003c/code\u003e and gain the language’s exhaustiveness checking.\u003c/p\u003e\n\n\u003cp\u003eAll of Compose’s tools such as \u003ccode\u003eremember\u003c/code\u003e, state, derived state, effects, and more are available to use. Molecule’s sample application starts to show a bit more complexity and use of these helpers.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eCounterPresenter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003eevents\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFlow\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eCounterEvent\u003c/span\u003e\u003cspan\u003e\u0026gt;,\u003c/span\u003e\n  \u003cspan\u003erandomService\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRandomService\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e):\u003c/span\u003e \u003cspan\u003eCounterModel\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecount\u003c/span\u003e \u003cspan\u003eby\u003c/span\u003e \u003cspan\u003eremember\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003emutableStateOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eloading\u003c/span\u003e \u003cspan\u003eby\u003c/span\u003e \u003cspan\u003eremember\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003emutableStateOf\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003eLaunchedEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eUnit\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eevents\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecollect\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eevent\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n      \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eis\u003c/span\u003e \u003cspan\u003eChange\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003ecount\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelta\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003eRandomize\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003eloading\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n          \u003cspan\u003elaunch\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ecount\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erandomService\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(-\u003c/span\u003e\u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eloading\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n          \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCounterModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eloading\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd finally, in Cash App our usage is class-based which allows us to normalize the presenter API and still participate in compile-time safe dependency injection.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCounterPresenter\u003c/span\u003e \u003cspan\u003e@Inject\u003c/span\u003e \u003cspan\u003econstructor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003erandomService\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRandomService\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMoleculePresenter\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e@Composable\u003c/span\u003e\n  \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003ePresent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eevents\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eFlow\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eCounterEvent\u003c/span\u003e\u003cspan\u003e\u0026gt;)\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCounterModel\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// ...\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003chr/\u003e\n\n\u003cp\u003eWe’ve been playing with Molecule on the side for about five months now\u003csup id=\"fnref:3\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:3\" rel=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e.\nIt’s not ready for a 1.0 because there are some tradeoffs in how we’re using Compose and in the shape of our APIs that we’re not 100% sure are the right ones to make.\nAs of this week the library is public and has been integrated into Cash App for more real-world testing.\nWe invite you to experiment with the library alongside us.\u003c/p\u003e\n\n\u003cp\u003eIs this the final form in the evolution of how we manage state?\nUnlikely.\nBut it just may be our next form, and perhaps it could be yours, too!\u003c/p\u003e\n\n\u003cp\u003eFootnotes:\u003c/p\u003e\n\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2021-11-11T00:00:00Z",
  "modifiedTime": null
}
