{
  "id": "70c3f533-3f32-4f70-a16f-197145fe44fc",
  "title": "Migrating Compose for TV from alpha to stable",
  "link": "https://medium.com/androiddevelopers/migrating-compose-for-tv-from-alpha-to-stable-b0074d6fd350?source=rss----95b274b437c2---4",
  "description": "",
  "author": "Paul Lammertsma",
  "published": "Wed, 11 Sep 2024 16:05:16 GMT",
  "source": "https://medium.com/feed/androiddevelopers",
  "categories": [
    "android-tv",
    "jetpack-compose",
    "android-development",
    "best-practices"
  ],
  "byline": "Paul Lammertsma",
  "length": 3530,
  "excerpt": "Thanks for all your feedback from using the alphas to help bring Compose for TV to the stable release! It’s terrific that you’ve been using Compose in your TV apps — then you’ve seen how Compose is…",
  "siteName": "Android Developers",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "Thanks for all your feedback from using the alphas to help bring Compose for TV to the stable release! It’s terrific that you’ve been using Compose in your TV apps — then you’ve seen how Compose is the best way to build user interfaces across all form factors in Android and how it simplifies and accelerates app development with customization and styling through a modern, declarative syntax in Kotlin.Perhaps you’ve noticed that we’ve shifted a few things around when Compose for TV graduated out of alpha. Read on to learn how to migrate your code with those changes.What changed since alpha?Compose for TV consists of two AndroidX Jetpack libraries:androidx.tv.material3 is now stable in version 1.0.0androidx.tv.foundation remains in alphaNow that Compose for TV has graduated from alpha, we’ve promoted tv-material to stable and moved the scrollable containers in tv-foundation to where they belong: in compose-foundation itself. The latest alpha version of the tv-foundation library simply marks those components as deprecated. TvImeOptions continues to reside in tv-foundation.The Compose for TV roadmapHey, I was using that API! Where’d it go?Based on developer feedback, we’ve modified various APIs, which means some things have been renamed, moved, or removed completely. While the comprehensive list is documented in the library release notes, here are the primary changes to help you migrate.APIs that have been renamedNonInteractiveSurfaceDefaults and NonInteractiveSurfaceColors have been renamed to SurfaceDefaults and SurfaceColors.StandardCardLayout and WideCardLayout have been renamed to StandardCardContainer and WideCardContainer.CardDefaults.ContainerGradient has been renamed to CardDefaults.ScrimBrush.APIs that have changedListItem parameters have been rearranged and renamed to require providing headlineContent.TvLazyRow, TvLazyColumn, TvLazyHorizontalGrid and TvLazyVerticalGridhave been removed because their functionality has been incorporated into the scrollable containers in compose-foundation version 1.7.0-beta02. The supporting classes TvLazyListState and TvGridCells together with the methods rememberTvLazyListState and rememberTvLazyGridState have also been replaced with the Compose foundation versions.You can migrate by simply removing the tv-foundation dependency; you can find everything you need in androidx.compose.foundation.lazy by simply swapping all your composables with the non-TV counterpart; for example replacing TvLazy* with Lazy* and rememberTvLazy*State with rememberLazy*State.APIs that have been removedCardContainerDefaults.ImageCard has been removed; you can use a Card and contain an image inside it as demonstrated in JetStream’s MovieCard.ListItemDefaults.ListItemShape, ListItemDefaults.FocusedDisabledBorder \u0026 ListItemDefaults.SelectedContainerColorOpacity are now private as they are not defaults for the ListItem composable.ImmersiveList has been removed due to the limitations in the variety in the data types that represent content. Instead, you can create an immersive list with just a few lines of code (a complete snippet is available in the immersive list sample):With the migration of TvLazy* to Lazy*, scrollable containers no longer support the pivotOffset parameter. If your application uses pivot offsets, You will need to define a BringIntoViewSpec object implementing the pivot offset, and pass it to Lazy* with LocalBringIntoViewSpec. See the PositionFocusedItemInLazyLayout snippet for a generic solution that allows specifying the offset ratio.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*4TfBraMwMxGVGOUlaHlO5w.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca rel=\"noopener follow\" href=\"https://medium.com/@paul-lammertsma?source=post_page-----b0074d6fd350--------------------------------\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Paul Lammertsma\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*9iTWrsHbiBBuGTPtiHgpgQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://medium.com/androiddevelopers?source=post_page-----b0074d6fd350--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Android Developers\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*4Tg6pPzer7cIarYaszIKaQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"5431\"\u003e\u003cstrong\u003eThanks for all your feedback from using the alphas to help bring Compose for TV to the stable release!\u003c/strong\u003e It’s terrific that you’ve been using Compose in your TV apps — then you’ve seen how\u003ca href=\"https://developer.android.com/develop/ui/compose/why-adopt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e Compose is the best way\u003c/a\u003e to build user interfaces across \u003cstrong\u003e\u003cem\u003eall\u003c/em\u003e\u003c/strong\u003e form factors in Android and how\u003ca href=\"https://developer.android.com/training/tv/playback/compose\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e it simplifies and accelerates app development\u003c/a\u003e with customization and styling through a modern, declarative syntax in Kotlin.\u003c/p\u003e\u003cp id=\"bd85\"\u003ePerhaps you’ve noticed that we’ve shifted a few things around when Compose for TV graduated out of alpha. Read on to learn how to migrate your code with those changes.\u003c/p\u003e\u003ch2 id=\"a045\"\u003eWhat changed since alpha?\u003c/h2\u003e\u003cp id=\"2fff\"\u003eCompose for TV consists of \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/tv\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003etwo AndroidX Jetpack libraries\u003c/a\u003e:\u003c/p\u003e\u003cul\u003e\u003cli id=\"e3d8\"\u003e\u003ccode\u003eandroidx.tv.material3\u003c/code\u003e is now stable in version 1.0.0\u003c/li\u003e\u003cli id=\"7729\"\u003e\u003ccode\u003eandroidx.tv.foundation\u003c/code\u003e remains in alpha\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"b44b\"\u003eNow that Compose for TV has graduated from alpha, we’ve promoted \u003ccode\u003etv-material\u003c/code\u003e to stable and moved the scrollable containers in \u003ccode\u003etv-foundation\u003c/code\u003e to where they belong: in \u003ccode\u003ecompose-foundation\u003c/code\u003e itself. The latest alpha version of the \u003ccode\u003etv-foundation\u003c/code\u003e library simply marks those components as deprecated. TvImeOptions continues to reside in \u003ccode\u003etv-foundation\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe Compose for TV roadmap\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"1b58\"\u003eHey, I was using that API! Where’d it go?\u003c/h2\u003e\u003cp id=\"b5c2\"\u003eBased on developer feedback, we’ve modified various APIs, which means some things have been renamed, moved, or removed completely. While the comprehensive list is documented in the \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/tv#tv-material-1.0.0-beta01\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elibrary release notes\u003c/a\u003e, here are the primary changes to help you migrate.\u003c/p\u003e\u003ch2 id=\"1361\"\u003eAPIs that have been renamed\u003c/h2\u003e\u003cul\u003e\u003cli id=\"d02e\"\u003e\u003ccode\u003eNonInteractiveSurfaceDefaults\u003c/code\u003e and \u003ccode\u003eNonInteractiveSurfaceColors\u003c/code\u003e have been renamed to \u003ccode\u003eSurfaceDefaults\u003c/code\u003e and \u003ccode\u003eSurfaceColors\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"545c\"\u003e\u003ccode\u003eStandardCardLayout\u003c/code\u003e and \u003ccode\u003eWideCardLayout\u003c/code\u003e have been renamed to \u003ccode\u003eStandardCardContainer\u003c/code\u003e and \u003ccode\u003eWideCardContainer\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"d437\"\u003e\u003ccode\u003eCardDefaults.ContainerGradient\u003c/code\u003e has been renamed to \u003ccode\u003eCardDefaults.ScrimBrush\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"2e5b\"\u003eAPIs that have changed\u003c/h2\u003e\u003cul\u003e\u003cli id=\"0931\"\u003e\u003ccode\u003eListItem\u003c/code\u003e parameters have been rearranged and renamed to require providing \u003ccode\u003eheadlineContent\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"f56c\"\u003e\u003ccode\u003eTvLazyRow\u003c/code\u003e, \u003ccode\u003eTvLazyColumn\u003c/code\u003e, \u003ccode\u003eTvLazyHorizontalGrid\u003c/code\u003e and \u003ccode\u003eTvLazyVerticalGrid\u003c/code\u003ehave been removed because their functionality has been incorporated into the scrollable containers in \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.7.0-beta02\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecompose-foundation version 1.7.0-beta02\u003c/a\u003e. \u003cbr/\u003eThe supporting classes \u003ccode\u003eTvLazyListState\u003c/code\u003e and \u003ccode\u003eTvGridCells\u003c/code\u003e together with the methods \u003ccode\u003erememberTvLazyListState\u003c/code\u003e and \u003ccode\u003erememberTvLazyGridState\u003c/code\u003e have also been replaced with the Compose foundation versions.\u003cbr/\u003eYou can migrate by simply removing the tv-foundation dependency; you can find everything you need in \u003ccode\u003eandroidx.compose.foundation.lazy\u003c/code\u003e by simply swapping all your composables with the non-TV counterpart; for example replacing \u003ccode\u003eTvLazy*\u003c/code\u003e with \u003ccode\u003eLazy*\u003c/code\u003e and \u003ccode\u003erememberTvLazy*State\u003c/code\u003e with \u003ccode\u003erememberLazy*State\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"33c0\"\u003eAPIs that have been removed\u003c/h2\u003e\u003cul\u003e\u003cli id=\"3eea\"\u003e\u003ccode\u003eCardContainerDefaults.ImageCard\u003c/code\u003e has been removed; you can use a Card and contain an image inside it as \u003ca href=\"https://github.com/android/tv-samples/blob/main/JetStreamCompose/jetstream/src/main/java/com/google/jetstream/presentation/common/MoviesRow.kt#L208\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edemonstrated in JetStream’s MovieCard\u003c/a\u003e.\u003c/li\u003e\u003cli id=\"bc27\"\u003e\u003ccode\u003eListItemDefaults.ListItemShape\u003c/code\u003e, \u003ccode\u003eListItemDefaults.FocusedDisabledBorder\u003c/code\u003e \u0026amp; \u003ccode\u003eListItemDefaults.SelectedContainerColorOpacity\u003c/code\u003e are now private as they are not defaults for the ListItem composable.\u003c/li\u003e\u003cli id=\"21bb\"\u003e\u003ccode\u003eImmersiveList\u003c/code\u003e has been removed due to the limitations in the variety in the data types that represent content. Instead, you can create an immersive list with just a few lines of code (a complete snippet is available in the \u003ca href=\"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:tv/samples/src/main/java/androidx/tv/samples/ImmersiveListSamples.kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eimmersive list sample\u003c/a\u003e):\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"71fd\"\u003eWith the migration of \u003ccode\u003eTvLazy*\u003c/code\u003e to \u003ccode\u003eLazy*\u003c/code\u003e, scrollable containers no longer support the \u003ccode\u003epivotOffset\u003c/code\u003e parameter. If your application uses pivot offsets, You will need to define a \u003ccode\u003eBringIntoViewSpec\u003c/code\u003e object implementing the pivot offset, and pass it to Lazy* with \u003ccode\u003eLocalBringIntoViewSpec\u003c/code\u003e. \u003cbr/\u003eSee the \u003ccode\u003e\u003ca href=\"https://gist.github.com/pflammertsma/83b30c893555fa23e006408b8b3dce75#file-positionfocusediteminlazylayout-kt\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePositionFocusedItemInLazyLayout\u003c/a\u003e\u003c/code\u003e snippet for a generic solution that allows specifying the offset ratio.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-09-11T16:05:16.444Z",
  "modifiedTime": null
}
