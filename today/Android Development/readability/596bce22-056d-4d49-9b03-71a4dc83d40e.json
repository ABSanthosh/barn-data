{
  "id": "596bce22-056d-4d49-9b03-71a4dc83d40e",
  "title": "Migrating from the ClickableText composable to LinkAnnotation",
  "link": "https://joebirch.co/android/migrating-from-the-clickabletext-composable-to-linkannotation/",
  "description": "As of Compose Foundation 1.7.0-alpha07, the ClickableText composable has been marked as deprecated, with plans for it to be removed come 1.8.0. ClickableText is often used to handle URLs within text – while the composable handles the click event, we are still required to manually provide styling attributes via annotated strings. To replace ClickableText, we... Continue reading →",
  "author": "hitherejoe",
  "published": "Fri, 19 Apr 2024 05:42:27 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose",
    "Android App Development",
    "Android Apps",
    "Android Development",
    "AndroidDev",
    "App Development",
    "jetpack compose",
    "Mobile App Development"
  ],
  "byline": "by hitherejoe",
  "length": 3178,
  "excerpt": "As of Compose Foundation 1.7.0-alpha07, the ClickableText composable has been marked as deprecated, with plans for it to be removed come 1.8.0. ClickableText is often used to handle URLs within text - while the composable handles the click event, we are still required to manually provide styling att",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "Joe Birch Speaker, Educator and GDE for Android Posts Latest Android Kotlin Multiplatform iOS Sponsorship Courses \u0026 Books Services Content Writing Jetpack Compose Consulting Android Consulting Jetpack Compose Workshop Speaking timeline Appears In As of Compose Foundation 1.7.0-alpha07, the ClickableText composable has been marked as deprecated, with plans for it to be removed come 1.8.0. ClickableText is often used to handle URLs within text – while the composable handles the click event, we are still required to manually provide styling attributes via annotated strings. To replace ClickableText, we instead need to utilise the LinkAnnotation class inside of the buildAnnotatedString function, allowing us to add the styling and functionality of links to text content – this functionality will also handle URL click events for us. In this post, let’s take a quick look at how we can migrate. For current clickable text implementations, we’re going to see something like this in our applications: ClickableText( text = AnnotatedString(\"Open Link\"), onClick = { offset -\u003e // handle click } ) When migrating to the use of buildAnnotatedString, we will see our implementation transform to something like the following: Text(buildAnnotatedString { append(\"View my \") withLink(LinkAnnotation.Url(url = \"https://joebirch.co\")) { append(\"website\") } }) Here we can see several steps: We use the buildAnnotatedString function to create a builder for our string We use append to add some initial text that is not to behave as a link We use the withLink function to push a LinkAnnotation onto our string, using the provided URL Within the body of the withLink function, we use append to push the string content that should be displayed for our link It’s likely we’ve already used the buildAnnotatedString at some point in our projects already – its the addition of the withLink and LinkAnnotation here that power this with link functionality. By default, our link will be displayed in our text as an underlined component: If we wish to change the styling of our linked text, we can pass a SpanStyle reference alongside the url. This allows us to control properties such as the color that is to be used for link. Text(buildAnnotatedString { append(\"View my \") withLink( LinkAnnotation.Url( url = \"https://joebirch.co\", style = SpanStyle(color = MaterialTheme.colorScheme.primary) ) ) { append(\"website\") } }) As we can see, migrating from ClickableText to LinkAnnotation is very little effort, allowing us to adopt a simpler and familiar API for highlighting links within our text. It’s advisable that you begin migrating once 1.7.0 hits stable, that way you are not blocked by any removals when it comes to future compose versions.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e \n        \u003cheader role=\"banner\"\u003e\n\t\t\t\u003cdiv\u003e\n\t\t\t    \u003chgroup\u003e\n\t\t\t\t\t\u003ch2\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003ca href=\"https://joebirch.co/\" rel=\"home\"\u003eJoe Birch\u003c/a\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/h2\u003e\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\u003ch2\u003e\n\t\t\t\t\t\tSpeaker, Educator and GDE for Android\t\t\t\t\t\u003c/h2\u003e\n\t\t\t\t\t\n\t\t\t    \u003c/hgroup\u003e\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t    \u003cnav id=\"site-navigation\" role=\"navigation\"\u003e\n\t\t\t\t\t\u003cul id=\"nav\"\u003e\u003cli id=\"menu-item-2914\"\u003e\u003ca href=\"https://joebirch.co/\"\u003ePosts\u003c/a\u003e\n\u003cul\u003e\n\t\u003cli id=\"menu-item-437\"\u003e\u003ca href=\"https://joebirch.co/\"\u003eLatest\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-2915\"\u003e\u003ca href=\"https://joebirch.co/category/android/\"\u003eAndroid\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-2920\"\u003e\u003ca href=\"https://joebirch.co/tag/kotlinmultiplatform/\"\u003eKotlin Multiplatform\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-2917\"\u003e\u003ca href=\"https://joebirch.co/category/ios/\"\u003eiOS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli id=\"menu-item-3880\"\u003e\u003ca href=\"https://joebirch.co/sponser/\"\u003eSponsorship\u003c/a\u003e\u003c/li\u003e\n\u003cli id=\"menu-item-3933\"\u003e\u003ca href=\"https://joebirch.co/course-books/\"\u003eCourses \u0026amp; Books\u003c/a\u003e\u003c/li\u003e\n\u003cli id=\"menu-item-4367\"\u003e\u003ca href=\"https://joebirch.co/services/\"\u003eServices\u003c/a\u003e\n\u003cul\u003e\n\t\u003cli id=\"menu-item-4605\"\u003e\u003ca href=\"https://joebirch.co/services/content-writing/\"\u003eContent Writing\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-4372\"\u003e\u003ca href=\"https://joebirch.co/services/jetpack-compose-consulting/\"\u003eJetpack Compose Consulting\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-4429\"\u003e\u003ca href=\"https://joebirch.co/services/android-consulting/\"\u003eAndroid Consulting\u003c/a\u003e\u003c/li\u003e\n\t\u003cli id=\"menu-item-4368\"\u003e\u003ca href=\"https://joebirch.co/services/jetpack-compose-workshop/\"\u003eJetpack Compose Workshop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli id=\"menu-item-1466\"\u003e\u003ca href=\"https://joebirch.co/speaking-timeline/\"\u003eSpeaking timeline\u003c/a\u003e\u003c/li\u003e\n\u003cli id=\"menu-item-3669\"\u003e\u003ca href=\"https://joebirch.co/appears-in/\"\u003eAppears In\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\t\t\t    \u003c/nav\u003e\n\t\t\t    \n\t\t\t\u003c/div\u003e\n\t\t\t\n        \u003c/header\u003e\n        \n\t\t\n\t\t\t\t\n        \u003cdiv id=\"main\" role=\"main\"\u003e\n\t\t\t\t\t\t\t\t\t\t\u003carticle id=\"post-4515\"\u003e\n\t\t\t\t\t\t\t\t\u003cheader\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\u003c/header\u003e\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eAs of Compose Foundation \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.7.0-alpha07\"\u003e1.7.0-alpha07\u003c/a\u003e, the \u003cstrong\u003eClickableText\u003c/strong\u003e composable has been marked as deprecated, with plans for it to be removed come 1.8.0. ClickableText is often used to handle URLs within text – while the composable handles the click event, we are still required to manually provide styling attributes via annotated strings.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo replace ClickableText, we instead need to utilise the \u003cstrong\u003eLinkAnnotation\u003c/strong\u003e class inside of the \u003cstrong\u003ebuildAnnotatedString\u003c/strong\u003e function, allowing us to add the styling and functionality of links to text content – this functionality will also handle URL click events for us. In this post, let’s take a quick look at how we can migrate.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eFor current clickable text implementations, we’re going to see something like this in our applications:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eClickableText(\n    text = AnnotatedString(\u0026#34;Open Link\u0026#34;),\n    onClick = { offset -\u0026gt;\n        // handle click\n    }\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen migrating to the use of \u003cstrong\u003ebuildAnnotatedString\u003c/strong\u003e, we will see our implementation transform to something like the following:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eText(buildAnnotatedString {\n    append(\u0026#34;View my \u0026#34;)\n    withLink(LinkAnnotation.Url(url = \u0026#34;https://joebirch.co\u0026#34;)) {\n        append(\u0026#34;website\u0026#34;)\n    }\n})\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere we can see several steps:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eWe use the \u003cstrong\u003ebuildAnnotatedString\u003c/strong\u003e function to create a builder for our string\u003c/li\u003e\n\n\n\n\u003cli\u003eWe use \u003cstrong\u003eappend\u003c/strong\u003e to add some initial text that is not to behave as a link\u003c/li\u003e\n\n\n\n\u003cli\u003eWe use the \u003cstrong\u003ewithLink\u003c/strong\u003e function to push a \u003cstrong\u003eLinkAnnotation\u003c/strong\u003e onto our string, using the provided URL\u003c/li\u003e\n\n\n\n\u003cli\u003eWithin the body of the \u003cstrong\u003ewithLink\u003c/strong\u003e function, we use append to push the string content that should be displayed for our link\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eIt’s likely we’ve already used the \u003cstrong\u003ebuildAnnotatedString\u003c/strong\u003e at some point in our projects already – its the addition of the \u003cstrong\u003ewithLink\u003c/strong\u003e and \u003cstrong\u003eLinkAnnotation\u003c/strong\u003e here that power this with link functionality.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy default, our link will be displayed in our text as an underlined component:\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"670\" height=\"266\" src=\"https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01.png 670w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01-300x119.png 300w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01-500x199.png 500w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01-150x60.png 150w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01-400x159.png 400w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.42.01-200x79.png 200w\" sizes=\"(max-width: 670px) 100vw, 670px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIf we wish to change the styling of our linked text, we can pass a \u003cstrong\u003eSpanStyle\u003c/strong\u003e reference alongside the \u003cstrong\u003eurl\u003c/strong\u003e. This allows us to control properties such as the color that is to be used for link.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eText(buildAnnotatedString {\n    append(\u0026#34;View my \u0026#34;)\n    withLink(\n        LinkAnnotation.Url(\n            url = \u0026#34;https://joebirch.co\u0026#34;,\n            style = SpanStyle(color = MaterialTheme.colorScheme.primary)\n        )\n    ) {\n        append(\u0026#34;website\u0026#34;)\n    }\n})\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"627\" height=\"248\" src=\"https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1.png\" alt=\"\" srcset=\"https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1.png 627w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1-300x119.png 300w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1-500x198.png 500w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1-150x59.png 150w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1-400x158.png 400w, https://joebirch.co/wp-content/uploads/2024/04/Screenshot-2024-04-18-at-21.41.25-1-200x79.png 200w\" sizes=\"(max-width: 627px) 100vw, 627px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eAs we can see, migrating from \u003cstrong\u003eClickableText\u003c/strong\u003e to \u003cstrong\u003eLinkAnnotation\u003c/strong\u003e is very little effort, allowing us to adopt a simpler and familiar API for highlighting links within our text. It’s advisable that you begin migrating once \u003cstrong\u003e1.7.0\u003c/strong\u003e hits stable, that way you are not blocked by any removals when it comes to future compose versions.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/article\u003e\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\u003cnav\u003e\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\u003c/nav\u003e\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\t\n\t\t\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-04-19T05:42:27Z",
  "modifiedTime": "2024-04-19T05:47:59Z"
}
