{
  "id": "87a06f62-30a9-42d8-bb94-beaab9729823",
  "title": "JsonBroadcaster",
  "link": "https://android-arsenal.com/details/1/8481",
  "description": "Update the UI state of your Android and iOS apps at runtime.",
  "author": "",
  "published": "Sat, 09 Mar 2024 03:30:00 +0300",
  "source": "https://feeds.feedburner.com/Android_Arsenal",
  "categories": null,
  "byline": "Vladislav Bauer",
  "length": 9569,
  "excerpt": "Push/Pull Notifications | JsonBroadcaster by Guilherme Delgado (GuilhE)",
  "siteName": "Android Arsenal",
  "favicon": "https://android-arsenal.com/favicon.png",
  "text": "JsonBroadcaster Update the UI state of your Android and iOS apps at runtime. Motivation Updating the UI State at runtime is a very useful tool for rapid prototyping and validation purposes. It also adds the benefit that it can be used by the whole testing team, be it developers, designers, quality assurance, etc. demo.mov How does it work Android Android Debug Bridge (ABD) is used to send a broadcast signal to the desired application with a json payload as an extra. adb shell am broadcast -p [package] -a [action] -e [extra key] [extra value] On the application side there's a BroadcastReceiver listening for theses payloads. Upon successful deserialization, a fresh state will be emitted, consequently triggering a UI update. Availability: all simulators and/or physical devices (even with wifi debug) connected. iOS Apple's Xcode developer tools provides a command-line tool for interacting with the iOS Simulator. This tool allows you to simulate the process of sending push notifications to a device: xcrun simctl push [UDID] [bundle id] [path to .apns] On the application side there's a NotificationBroadcaster actively monitoring incoming notifications. These notifications are then relayed to internal observers within the application. Upon successful deserialization, a fresh state will be emitted, consequently triggering a UI update. Availability: all booted simulators. Installation Android Add the library dependency: implementation(\"com.github.guilhe:json-broadcast-handler:${LATEST_VERSION}'\") iOS Swift Package Manager The Swift implementations are available via the Swift Package Manager. In Xcode go to File \u003e Add Packages... and provide the URL https://github.com/GuilhE/JsonBroadcaster.git; Use the commit hash from the latest tag JsonBroadcasterHandler-x. CocoaPods If you use CocoaPods add the following to your Podfile: pod 'JsonBroadcasterHandler', :git =\u003e 'https://github.com/GuilhE/JsonBroadcaster.git', :tag =\u003e 'JsonBroadcasterHandler-x' Usage: developers Android Your UiState classes must be annotated with kotlinx.serialization.Serializable (dependency): @Serializable data class UiState(val memberA: String, val memberB: String) Create a BroadcastUiModelHost implementation to listen for state updates, as shown bellow: private val host = object : BroadcastUiModelHost\u003cUiState\u003e(coroutineScope, UiState.serializer()) { override fun updateState(new: UiState) { //... } } Add it where it fits best in your project, examples: If you are using androidx.lifecycle.ViewModel you can do the following: class MatchViewModel : ViewModel() { private val _uiState = MutableStateFlow(MatchUiState(home = Team(\"PRT\", \"????????\"), away = Team(\"BRA\", \"????????\"))) val uiState: StateFlow\u003cMatchUiState\u003e = _uiState private val host = object : BroadcastUiModelHost\u003cMatchUiState\u003e(viewModelScope, MatchUiState.serializer()) { override fun updateState(new: MatchUiState) { _uiState.update { new } } } } But actually you don't need a ViewModel, you can simply use a @Composable for instance: @Composable fun MatchScreen() { var uiState: MatchUiState by remember { mutableStateOf(MatchUiState(home = Team(\"PRT\", \"????????\"), away = Team(\"BRA\", \"????????\"))) } LaunchedEffect(Unit) { val host = object : BroadcastUiModelHost\u003cMatchUiState\u003e(this, MatchUiState.serializer()) { override fun updateState(new: MatchUiState) { uiState = new } } } Match(uiState) } And the beauty of it is that you may choose whatever suits you best: ViewModel, @Composable, Activity, Fragment, etc... To disable it, for instance in release builds, override the receiver declaration in the AndroidManifest by adding a manifestPlaceholders property in the build.gradle: android { buildTypes { getByName(\"release\") { manifestPlaceholders[\"enableJsonBroadcastReceiver\"] = false } getByName(\"debug\") { manifestPlaceholders[\"enableJsonBroadcastReceiver\"] = true } } } \u003creceiver android:name=\"com.broadcast.handler.JsonBroadcasterReceiver\" android:exported=\"${enableJsonBroadcastReceiver}\" tools:replace=\"android:exported\"\u003e \u003cintent-filter\u003e \u003caction android:name=\"JsonBroadcaster.extra\" /\u003e \u003c/intent-filter\u003e \u003c/receiver\u003e iOS Your UiState classes must implement the Codable protocol: struct UiState: Codable { let memberA: String let memberB: String } Create a BroadcastUIModelHost instance inside a class to listen for state updates, as shown bellow: private var uiModelHost: BroadcastUIModelHost\u003cUiState\u003e! init() { uiModelHost = BroadcastUIModelHost(initState) { [weak self] newState in //... } } Add it where it fits best in your project, example: If you are using an ObservableObject you can do the following: import SwiftUI import JsonBroadcasterHandler class MatchViewModel: ObservableObject { private var uiModelHost: BroadcastUIModelHost\u003cMatchUiState\u003e! @Published var state: MatchUiState = MatchUiState(home: Team(country:\"PRT\", flag:\"????????\"), away: Team(country:\"BRA\", flag:\"????????\")) init() { uiModelHost = BroadcastUIModelHost(state) { [weak self] newState in self?.state = newState } } } And the beauty of it is that you may choose whatever suits you best, SwiftUI or UIKit: struct MatchScreen: View { @StateObject private var viewModel = MatchViewModel() var body: some View { ZStack { } .onReceive(viewModel.$state) { new in //... } } class MatchScreen: UIViewController { private var viewModel: MatchViewModel! private var cancellables = Set\u003cAnyCancellable\u003e() override func viewDidLoad() { super.viewDidLoad() viewModel = MatchViewModel() viewModel.$state .receive(on: DispatchQueue.main) .sink { [weak self] state in self?.updateUI(with: state) } .store(in: \u0026cancellables) } private func updateUI(with state: MatchUiState) { //... } } Inside your AppDelegate register for RemoteNotifications and forward them with the NotificationBroadcaster: import UIKit import JsonBroadcasterHandler class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool { UNUserNotificationCenter.current().delegate = self application.registerForRemoteNotifications() return true } func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -\u003e Void) { NotificationBroadcaster.broadcast(notification) } } tip: You may create a compiler custom flags, DEBUG_MODE, to encapsulate the NotificationBroadcaster: func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -\u003e Void) { #if DEBUG_MODE NotificationBroadcaster.broadcast(notification) #endif } Usage: testing team Android Google's Android SDK must be installed in order to use command line tools; Ask for an installed version of the app (wifi debug or cable connected); Use the desktopApp GUI. iOS Apple's XCode must be installed in order to use command line tools; Open XCode and run a simulator with the app; Use the desktopApp GUI. Desktop app Although we can use the terminal to send commands, it's not practical. The desktopApp provides a simple user interface to help us with that task. To run it you can either: Clone this project and type ./gradlew :desktopApp:run in the terminal. Download a .dmg (only MacOS) and install it. Get it here. note: due to security reasons, since this app is not from an Identified Developer, MacOS will block its execution. To by pass it you'll need to click in \"Open Anyway\" in System Settings under Security. It's only needed once: (This wont happen with the first approach) Playgrounds Use the following payload to get you started: { \"home\":{ \"country\":\"PRT\", \"flag\":\"????????\" }, \"away\":{ \"country\":\"BRA\", \"flag\":\"????????\" }, \"homeGoals\":0, \"awayGoals\":0, \"started\": false, \"running\": false, \"finished\": false } Android Inside the sample module you'll find a playground app ready for you to test it. To run it you can either: Clone this project and type ./gradlew :androidApp:installDebug in the terminal. Download the sample .apk and install it. Get it here. The applicationId is com.jsonbroadcaster.matchday iOS Inside the sample-ios folder you'll find a playground app ready for you to test it. To run it: Open it in Xcode and run standard configuration. Import JsonBroadcaster using your method of choice. LICENSE Copyright (c) 2022-present GuilhE Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "image": "https://raw.githubusercontent.com/GuilhE/JsonBroadcaster/main/desktopApp/src/jvmMain/resources/icon.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"description\"\u003e\u003carticle\u003e\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/GuilhE/JsonBroadcaster/raw/main/desktopApp/src/jvmMain/resources/icon.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg width=\"100\" data-layzr=\"https://raw.githubusercontent.com/GuilhE/JsonBroadcaster/main/desktopApp/src/jvmMain/resources/icon.png\" src=\"https://raw.githubusercontent.com/GuilhE/JsonBroadcaster/main/desktopApp/src/jvmMain/resources/icon.png\"/\u003e\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eJsonBroadcaster\u003c/h2\u003e\u003c/p\u003e  \u003cp dir=\"auto\"\u003eUpdate the UI state of your Android and iOS apps at runtime.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eMotivation\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eUpdating the UI State at runtime is a very useful tool for rapid prototyping and validation purposes. It also adds the benefit that it can be used by the whole testing team, be it developers, designers, quality assurance, etc.\u003c/p\u003e \u003cdetails open=\"\"\u003e \u003csummary\u003e \u003c/summary\u003e\u003csummary\u003e \u003cspan aria-label=\"Video description demo.mov\"\u003edemo.mov\u003c/span\u003e \u003cspan\u003e\u003c/span\u003e \u003c/summary\u003e \u003cvideo src=\"https://private-user-images.githubusercontent.com/2677139/261808420-10cf81ed-0895-4f68-899d-412e28a43481.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk5NDQ1MzMsIm5iZiI6MTcwOTk0NDIzMywicGF0aCI6Ii8yNjc3MTM5LzI2MTgwODQyMC0xMGNmODFlZC0wODk1LTRmNjgtODk5ZC00MTJlMjhhNDM0ODEubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDMwOSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAzMDlUMDAzMDMzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YTkyNmQ0NTBhNDAyYTViZDMzNDg4NGMzMDRjMThjOWEwMDQ2NWI0YzgxM2FmYTYwMzY2ODUzZTU2ZGIxMzJjOCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.KSkXnFZxrMUF_6ZbpKNO16hiAdZmuCO8jXhwaGHrHhc\" controls=\"controls\" muted=\"muted\"\u003e \u003c/video\u003e \u003c/details\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eHow does it work\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAndroid\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eAndroid Debug Bridge (\u003ca href=\"https://developer.android.com/studio/command-line/adb\" rel=\"nofollow\" target=\"_blank\"\u003eABD\u003c/a\u003e) is used to send a broadcast signal to the desired application with a \u003ccode\u003ejson\u003c/code\u003e payload as an extra.\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"adb shell am broadcast -p [package] -a [action] -e [extra key] [extra value]\"\u003e\u003cpre\u003e\u003ccode\u003eadb shell am broadcast -p [package] -a [action] -e [extra key] [extra value]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eOn the application side there\u0026#39;s a \u003ccode\u003eBroadcastReceiver\u003c/code\u003e listening for theses payloads. Upon successful deserialization, a fresh state will be emitted, consequently triggering a UI update.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e: all simulators and/or physical devices (even with wifi debug) connected.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eiOS\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eApple\u0026#39;s Xcode developer tools provides a command-line tool for interacting with the iOS Simulator.\u003cbr/\u003e This tool allows you to simulate the process of sending push notifications to a device:\u003c/p\u003e \u003cdiv data-snippet-clipboard-copy-content=\"xcrun simctl push [UDID] [bundle id] [path to .apns]\"\u003e\u003cpre\u003e\u003ccode\u003excrun simctl push [UDID] [bundle id] [path to .apns] \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eOn the application side there\u0026#39;s a \u003ccode\u003eNotificationBroadcaster\u003c/code\u003e actively monitoring incoming notifications. These notifications are then relayed to internal observers within the application. Upon successful deserialization, a fresh state will be emitted, consequently triggering a UI update.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e: all booted simulators.\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eInstallation\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAndroid\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eAdd the library dependency:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"implementation(\u0026#34;com.github.guilhe:json-broadcast-handler:${LATEST_VERSION}\u0026#39;\u0026#34;)\"\u003e\u003cpre\u003eimplementation(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.github.guilhe:json-broadcast-handler:\u003cspan\u003e${\u003cspan\u003eLATEST_VERSION\u003c/span\u003e}\u003c/span\u003e\u0026#39;\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e  \u003cdiv dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eiOS\u003c/h3\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eSwift Package Manager\u003c/h4\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eThe Swift implementations are available via the Swift Package Manager.\u003c/p\u003e \u003col dir=\"auto\"\u003e \u003cli\u003eIn Xcode go to \u003ccode\u003eFile\u003c/code\u003e \u0026gt; \u003ccode\u003eAdd Packages...\u003c/code\u003e and provide the URL \u003ca href=\"https://github.com/GuilhE/JsonBroadcaster.git\" rel=\"nofollow\" target=\"_blank\"\u003ehttps://github.com/GuilhE/JsonBroadcaster.git\u003c/a\u003e;\u003c/li\u003e \u003cli\u003eUse the commit hash from the latest tag \u003ccode\u003eJsonBroadcasterHandler-x\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e \u003cp dir=\"auto\"\u003e\u003ch4 dir=\"auto\"\u003eCocoaPods\u003c/h4\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eIf you use CocoaPods add the following to your \u003ccode\u003ePodfile\u003c/code\u003e:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"pod \u0026#39;JsonBroadcasterHandler\u0026#39;, :git =\u0026gt; \u0026#39;https://github.com/GuilhE/JsonBroadcaster.git\u0026#39;, :tag =\u0026gt; \u0026#39;JsonBroadcasterHandler-x\u0026#39;\"\u003e\u003cpre\u003e\u003cspan\u003epod\u003c/span\u003e \u003cspan\u003e\u0026#39;JsonBroadcasterHandler\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:git\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#39;https://github.com/GuilhE/JsonBroadcaster.git\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:tag\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026#39;JsonBroadcasterHandler-x\u0026#39;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage: developers\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAndroid\u003c/h3\u003e\u003c/p\u003e \u003col dir=\"auto\"\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eYour \u003ccode\u003eUiState\u003c/code\u003e classes must be annotated with \u003ccode\u003ekotlinx.serialization.Serializable\u003c/code\u003e (\u003ca href=\"https://github.com/Kotlin/kotlinx.serialization\" rel=\"nofollow\" target=\"_blank\"\u003edependency\u003c/a\u003e):\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"@Serializable data class UiState(val memberA: String, val memberB: String)\"\u003e\u003cpre\u003e@Serializable\n\u003cspan\u003edata class\u003c/span\u003e \u003cspan\u003eUiState\u003c/span\u003e(\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ememberA\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e, \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ememberB\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eCreate a \u003ccode\u003eBroadcastUiModelHost\u003c/code\u003e implementation to listen for state updates, as shown bellow:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private val host = object : BroadcastUiModelHost\u0026lt;UiState\u0026gt;(coroutineScope, UiState.serializer()) { override fun updateState(new: UiState) { //... } }\"\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e host \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBroadcastUiModelHost\u003c/span\u003e\u0026lt;\u003cspan\u003eUiState\u003c/span\u003e\u0026gt;(coroutineScope, \u003cspan\u003eUiState\u003c/span\u003e.serializer()) {\n    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateState\u003c/span\u003e(\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUiState\u003c/span\u003e) {\n        \u003cspan\u003e\u003cspan\u003e//\u003c/span\u003e...\u003c/span\u003e\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eAdd it where it fits best in your project, examples:\u003c/p\u003e \u003cp dir=\"auto\"\u003eIf you are using \u003ccode\u003eandroidx.lifecycle.ViewModel\u003c/code\u003e you can do the following:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class MatchViewModel : ViewModel() { private val _uiState = MutableStateFlow(MatchUiState(home = Team(\u0026#34;PRT\u0026#34;, \u0026#34;????????\u0026#34;), away = Team(\u0026#34;BRA\u0026#34;, \u0026#34;????????\u0026#34;))) val uiState: StateFlow\u0026lt;MatchUiState\u0026gt; = _uiState private val host = object : BroadcastUiModelHost\u0026lt;MatchUiState\u0026gt;(viewModelScope, MatchUiState.serializer()) { override fun updateState(new: MatchUiState) { _uiState.update { new } } } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMatchViewModel\u003c/span\u003e : \u003cspan\u003eViewModel\u003c/span\u003e() {\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003e_uiState\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMutableStateFlow\u003c/span\u003e(\u003cspan\u003eMatchUiState\u003c/span\u003e(home \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ePRT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e), away \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eBRA\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e)))\n    \u003cspan\u003eval\u003c/span\u003e uiState\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eStateFlow\u003c/span\u003e\u0026lt;\u003cspan\u003eMatchUiState\u003c/span\u003e\u0026gt; \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e_uiState\u003c/span\u003e\n\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e host \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBroadcastUiModelHost\u003c/span\u003e\u0026lt;\u003cspan\u003eMatchUiState\u003c/span\u003e\u0026gt;(viewModelScope, \u003cspan\u003eMatchUiState\u003c/span\u003e.serializer()) {\n        \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateState\u003c/span\u003e(\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e) {\n            \u003cspan\u003e_uiState\u003c/span\u003e.update { new }\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eBut actually you don\u0026#39;t need a \u003ccode\u003eViewModel\u003c/code\u003e, you can simply use a \u003ccode\u003e@Composable\u003c/code\u003e for instance:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"@Composable fun MatchScreen() { var uiState: MatchUiState by remember { mutableStateOf(MatchUiState(home = Team(\u0026#34;PRT\u0026#34;, \u0026#34;????????\u0026#34;), away = Team(\u0026#34;BRA\u0026#34;, \u0026#34;????????\u0026#34;))) } LaunchedEffect(Unit) { val host = object : BroadcastUiModelHost\u0026lt;MatchUiState\u0026gt;(this, MatchUiState.serializer()) { override fun updateState(new: MatchUiState) { uiState = new } } } Match(uiState) }\"\u003e\u003cpre\u003e@Composable\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eMatchScreen\u003c/span\u003e() {\n    \u003cspan\u003evar\u003c/span\u003e uiState\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e by remember { mutableStateOf(\u003cspan\u003eMatchUiState\u003c/span\u003e(home \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ePRT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e), away \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eBRA\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e, \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e))) }\n    \u003cspan\u003eLaunchedEffect\u003c/span\u003e(\u003cspan\u003eUnit\u003c/span\u003e) {\n        \u003cspan\u003eval\u003c/span\u003e host \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBroadcastUiModelHost\u003c/span\u003e\u0026lt;\u003cspan\u003eMatchUiState\u003c/span\u003e\u0026gt;(\u003cspan\u003ethis\u003c/span\u003e, \u003cspan\u003eMatchUiState\u003c/span\u003e.serializer()) {\n            \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eupdateState\u003c/span\u003e(\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e) {\n                uiState \u003cspan\u003e=\u003c/span\u003e new\n            }\n        }\n    }\n    \u003cspan\u003eMatch\u003c/span\u003e(uiState)\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eAnd the beauty of it is that you may choose whatever suits you best: \u003ccode\u003eViewModel\u003c/code\u003e, \u003ccode\u003e@Composable\u003c/code\u003e, \u003ccode\u003eActivity\u003c/code\u003e, \u003ccode\u003eFragment\u003c/code\u003e, etc...\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eTo disable it, for instance in release builds, override the \u003ccode\u003ereceiver\u003c/code\u003e declaration in the \u003ccode\u003eAndroidManifest\u003c/code\u003e by adding a \u003ccode\u003emanifestPlaceholders\u003c/code\u003e property in the \u003ccode\u003ebuild.gradle\u003c/code\u003e:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"android { buildTypes { getByName(\u0026#34;release\u0026#34;) { manifestPlaceholders[\u0026#34;enableJsonBroadcastReceiver\u0026#34;] = false } getByName(\u0026#34;debug\u0026#34;) { manifestPlaceholders[\u0026#34;enableJsonBroadcastReceiver\u0026#34;] = true } } }\"\u003e\u003cpre\u003eandroid {\n    buildTypes {\n        getByName(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003erelease\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e) {\n            manifestPlaceholders[\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eenableJsonBroadcastReceiver\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e] \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n        }\n\n        getByName(\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003edebug\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e) {\n            manifestPlaceholders[\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eenableJsonBroadcastReceiver\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e] \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n        }\n    }\n}\u003c/pre\u003e\u003c/div\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;receiver android:name=\u0026#34;com.broadcast.handler.JsonBroadcasterReceiver\u0026#34; android:exported=\u0026#34;${enableJsonBroadcastReceiver}\u0026#34; tools:replace=\u0026#34;android:exported\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;JsonBroadcaster.extra\u0026#34; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan\u003ereceiver\u003c/span\u003e\n    \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ecom.broadcast.handler.JsonBroadcasterReceiver\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eexported\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e${enableJsonBroadcastReceiver}\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eandroid:exported\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan\u003eintent-filter\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan\u003eaction\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e=\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eJsonBroadcaster.extra\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n    \u0026lt;/\u003cspan\u003eintent-filter\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan\u003ereceiver\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003c/ol\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eiOS\u003c/h3\u003e\u003c/p\u003e \u003col dir=\"auto\"\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eYour \u003ccode\u003eUiState\u003c/code\u003e classes must implement the \u003ccode\u003eCodable\u003c/code\u003e protocol:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"struct UiState: Codable { let memberA: String let memberB: String }\"\u003e\u003cpre\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eUiState\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCodable\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ememberA\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ememberB\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eCreate a \u003ccode\u003eBroadcastUIModelHost\u003c/code\u003e instance inside a \u003ccode\u003eclass\u003c/code\u003e to listen for state updates, as shown bellow:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"private var uiModelHost: BroadcastUIModelHost\u0026lt;UiState\u0026gt;! init() { uiModelHost = BroadcastUIModelHost(initState) { [weak self] newState in //... } }\"\u003e\u003cpre\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003euiModelHost\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBroadcastUIModelHost\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUiState\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     uiModelHost \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eBroadcastUIModelHost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003einitState\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eweak self\u003cspan\u003e]\u003c/span\u003e newState \u003cspan\u003ein\u003c/span\u003e\n         \u003cspan\u003e//...\u003c/span\u003e\n     \u003cspan\u003e}\u003c/span\u003e        \n \u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eAdd it where it fits best in your project, example:\u003c/p\u003e \u003cp dir=\"auto\"\u003eIf you are using an \u003ccode\u003eObservableObject\u003c/code\u003e you can do the following:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"import SwiftUI import JsonBroadcasterHandler class MatchViewModel: ObservableObject { private var uiModelHost: BroadcastUIModelHost\u0026lt;MatchUiState\u0026gt;! @Published var state: MatchUiState = MatchUiState(home: Team(country:\u0026#34;PRT\u0026#34;, flag:\u0026#34;????????\u0026#34;), away: Team(country:\u0026#34;BRA\u0026#34;, flag:\u0026#34;????????\u0026#34;)) init() { uiModelHost = BroadcastUIModelHost(state) { [weak self] newState in self?.state = newState } } }\"\u003e\u003cpre\u003e\u003cspan\u003eimport\u003c/span\u003e SwiftUI\n\u003cspan\u003eimport\u003c/span\u003e JsonBroadcasterHandler\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMatchViewModel\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eObservableObject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003euiModelHost\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBroadcastUIModelHost\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eMatchUiState\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n   \u003cspan\u003e@\u003cspan\u003ePublished\u003c/span\u003e\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003estate\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehome\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePRT\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e flag\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e????????\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e away\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eTeam\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ecountry\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBRA\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e flag\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e????????\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n \n   \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     uiModelHost \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eBroadcastUIModelHost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003estate\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eweak self\u003cspan\u003e]\u003c/span\u003e newState \u003cspan\u003ein\u003c/span\u003e\n         \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e?\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estate \u003cspan\u003e=\u003c/span\u003e newState\n     \u003cspan\u003e}\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003eAnd the beauty of it is that you may choose whatever suits you best, \u003ccode\u003eSwiftUI\u003c/code\u003e or \u003ccode\u003eUIKit\u003c/code\u003e:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"struct MatchScreen: View { @StateObject private var viewModel = MatchViewModel() var body: some View { ZStack { } .onReceive(viewModel.$state) { new in //... } }\"\u003e\u003cpre\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eMatchScreen\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e@\u003cspan\u003eStateObject\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMatchViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \n\n   \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ebody\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     \u003cspan\u003eZStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n     \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonReceive\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewModel\u003cspan\u003e.\u003c/span\u003e$state\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e new \u003cspan\u003ein\u003c/span\u003e\n         \u003cspan\u003e//...\u003c/span\u003e\n     \u003cspan\u003e}\u003c/span\u003e\n \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"class MatchScreen: UIViewController { private var viewModel: MatchViewModel! private var cancellables = Set\u0026lt;AnyCancellable\u0026gt;() override func viewDidLoad() { super.viewDidLoad() viewModel = MatchViewModel() viewModel.$state .receive(on: DispatchQueue.main) .sink { [weak self] state in self?.updateUI(with: state) } .store(in: \u0026amp;cancellables) } private func updateUI(with state: MatchUiState) { //... } }\"\u003e\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eMatchScreen\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUIViewController\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchViewModel\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\n   \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ecancellables\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eAnyCancellable\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n   \u003cspan\u003e\u003cspan\u003eoverride\u003c/span\u003e\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e viewDidLoad\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     super\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eviewDidLoad\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n     viewModel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eMatchViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n     viewModel\u003cspan\u003e.\u003c/span\u003e$state\n         \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereceive\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eon\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDispatchQueue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003emain\u003cspan\u003e)\u003c/span\u003e\n         \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esink\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003eweak self\u003cspan\u003e]\u003c/span\u003e state \u003cspan\u003ein\u003c/span\u003e\n             \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e?\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eupdateUI\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ewith\u003cspan\u003e:\u003c/span\u003e state\u003cspan\u003e)\u003c/span\u003e\n         \u003cspan\u003e}\u003c/span\u003e\n         \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estore\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ein\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026amp;\u003c/span\u003ecancellables\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n   \n   \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e updateUI\u003cspan\u003e(\u003c/span\u003ewith state\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eMatchUiState\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n     \u003cspan\u003e//...\u003c/span\u003e\n   \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp dir=\"auto\"\u003eInside your \u003ccode\u003eAppDelegate\u003c/code\u003e register for \u003ccode\u003eRemoteNotifications\u003c/code\u003e and forward them with the \u003ccode\u003eNotificationBroadcaster\u003c/code\u003e:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"import UIKit import JsonBroadcasterHandler class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u0026gt; Bool { UNUserNotificationCenter.current().delegate = self application.registerForRemoteNotifications() return true } func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -\u0026gt; Void) { NotificationBroadcaster.broadcast(notification) } }\"\u003e\u003cpre\u003e\u003cspan\u003eimport\u003c/span\u003e UIKit\n\u003cspan\u003eimport\u003c/span\u003e JsonBroadcasterHandler\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAppDelegate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUIResponder\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eUIApplicationDelegate\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eUNUserNotificationCenterDelegate\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e application\u003cspan\u003e(\u003c/span\u003e_ application\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUIApplication\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e didFinishLaunchingWithOptions launchOptions\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eUIApplication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eLaunchOptionsKey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAny\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e?\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eUNUserNotificationCenter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edelegate \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\n        application\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eregisterForRemoteNotifications\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e userNotificationCenter\u003cspan\u003e(\u003c/span\u003e_ center\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUNUserNotificationCenter\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e willPresent notification\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUNNotification\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e withCompletionHandler completionHandler\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e@escaping\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eUNNotificationPresentationOptions\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eNotificationBroadcaster\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebroadcast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enotification\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e   \u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003etip\u003c/strong\u003e: You may create a compiler custom flags, DEBUG_MODE, to encapsulate the \u003ccode\u003eNotificationBroadcaster\u003c/code\u003e:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -\u0026gt; Void) { #if DEBUG_MODE NotificationBroadcaster.broadcast(notification) #endif }\"\u003e\u003cpre\u003e\u003cspan\u003efunc\u003c/span\u003e userNotificationCenter\u003cspan\u003e(\u003c/span\u003e_ center\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUNUserNotificationCenter\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e willPresent notification\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUNNotification\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e withCompletionHandler completionHandler\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e@escaping\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eUNNotificationPresentationOptions\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n   \u003cspan\u003e#if DEBUG_MODE\u003c/span\u003e\n      \u003cspan\u003eNotificationBroadcaster\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebroadcast\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enotification\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e#endif\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e \u003c/li\u003e \u003c/ol\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eUsage: testing team\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAndroid\u003c/h3\u003e\u003c/p\u003e \u003col dir=\"auto\"\u003e \u003cli\u003eGoogle\u0026#39;s Android SDK must be installed in order to use command line tools;\u003c/li\u003e \u003cli\u003eAsk for an installed version of the app (wifi debug or cable connected);\u003c/li\u003e \u003cli\u003eUse the \u003cstrong\u003edesktopApp\u003c/strong\u003e GUI.\u003c/li\u003e \u003c/ol\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eiOS\u003c/h3\u003e\u003c/p\u003e \u003col dir=\"auto\"\u003e \u003cli\u003eApple\u0026#39;s XCode must be installed in order to use command line tools;\u003c/li\u003e \u003cli\u003eOpen XCode and run a simulator with the app;\u003c/li\u003e \u003cli\u003eUse the \u003cstrong\u003edesktopApp\u003c/strong\u003e GUI.\u003c/li\u003e \u003c/ol\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eDesktop app\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eAlthough we can use the terminal to send commands, it\u0026#39;s not practical. The \u003cstrong\u003edesktopApp\u003c/strong\u003e provides a simple user interface to help us with that task.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo run it you can either:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eClone this project and type \u003ccode\u003e./gradlew :desktopApp:run\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003eDownload a \u003ccode\u003e.dmg\u003c/code\u003e (only MacOS) and install it. Get it \u003ca href=\"https://github.com/GuilhE/JsonBroadcaster/blob/main/artifacts/JsonBroadcaster.dmg\" rel=\"nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003cstrong\u003enote:\u003c/strong\u003e due to security reasons, since this app is not from an Identified Developer, MacOS will block its execution. To by pass it you\u0026#39;ll need to click in \u0026#34;Open Anyway\u0026#34; in System Settings under Security. It\u0026#39;s only needed once:\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/GuilhE/JsonBroadcaster/raw/main/media/security.png\" rel=\"nofollow\" target=\"_blank\"\u003e\u003cimg data-layzr=\"https://raw.githubusercontent.com/GuilhE/JsonBroadcaster/main/media/security.png\" src=\"https://raw.githubusercontent.com/GuilhE/JsonBroadcaster/main/media/security.png\"/\u003e\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e(This wont happen with the first approach)\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003ePlaygrounds\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eUse the following payload to get you started:\u003c/p\u003e \u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"{ \u0026#34;home\u0026#34;:{ \u0026#34;country\u0026#34;:\u0026#34;PRT\u0026#34;, \u0026#34;flag\u0026#34;:\u0026#34;????????\u0026#34; }, \u0026#34;away\u0026#34;:{ \u0026#34;country\u0026#34;:\u0026#34;BRA\u0026#34;, \u0026#34;flag\u0026#34;:\u0026#34;????????\u0026#34; }, \u0026#34;homeGoals\u0026#34;:0, \u0026#34;awayGoals\u0026#34;:0, \u0026#34;started\u0026#34;: false, \u0026#34;running\u0026#34;: false, \u0026#34;finished\u0026#34;: false }\"\u003e\u003cpre\u003e{\n   \u003cspan\u003e\u0026#34;home\u0026#34;\u003c/span\u003e:{\n      \u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e:\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ePRT\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e:\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n   },\n   \u003cspan\u003e\u0026#34;away\u0026#34;\u003c/span\u003e:{\n      \u003cspan\u003e\u0026#34;country\u0026#34;\u003c/span\u003e:\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eBRA\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e,\n      \u003cspan\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e:\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e????????\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n   },\n   \u003cspan\u003e\u0026#34;homeGoals\u0026#34;\u003c/span\u003e:\u003cspan\u003e0\u003c/span\u003e,\n   \u003cspan\u003e\u0026#34;awayGoals\u0026#34;\u003c/span\u003e:\u003cspan\u003e0\u003c/span\u003e,\n   \u003cspan\u003e\u0026#34;started\u0026#34;\u003c/span\u003e: \u003cspan\u003efalse\u003c/span\u003e,\n   \u003cspan\u003e\u0026#34;running\u0026#34;\u003c/span\u003e: \u003cspan\u003efalse\u003c/span\u003e,\n   \u003cspan\u003e\u0026#34;finished\u0026#34;\u003c/span\u003e: \u003cspan\u003efalse\u003c/span\u003e\n}\u003c/pre\u003e\u003c/div\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eAndroid\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eInside the \u003cstrong\u003esample\u003c/strong\u003e module you\u0026#39;ll find a playground app ready for you to test it.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo run it you can either:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eClone this project and type \u003ccode\u003e./gradlew :androidApp:installDebug\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003eDownload the sample \u003ccode\u003e.apk\u003c/code\u003e and install it. Get it \u003ca href=\"https://github.com/GuilhE/JsonBroadcaster/blob/main/artifacts/matchday.apk\" rel=\"nofollow\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003eThe \u003ccode\u003eapplicationId\u003c/code\u003e is \u003cem\u003ecom.jsonbroadcaster.matchday\u003c/em\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eiOS\u003c/h3\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eInside the \u003cstrong\u003esample-ios\u003c/strong\u003e folder you\u0026#39;ll find a playground app ready for you to test it.\u003c/p\u003e \u003cp dir=\"auto\"\u003eTo run it:\u003c/p\u003e \u003cul dir=\"auto\"\u003e \u003cli\u003eOpen it in Xcode and run standard configuration.\u003c/li\u003e \u003cli\u003eImport \u003ccode\u003eJsonBroadcaster\u003c/code\u003e using your \u003ca href=\"#user-content-ios-1\"\u003emethod\u003c/a\u003e of choice.\u003c/li\u003e \u003c/ul\u003e \u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eLICENSE\u003c/h2\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eCopyright (c) 2022-present GuilhE\u003c/p\u003e \u003cp dir=\"auto\"\u003eLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at\u003c/p\u003e \u003cp dir=\"auto\"\u003e\u003ca href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\" target=\"_blank\"\u003ehttp://www.apache.org/licenses/LICENSE-2.0\u003c/a\u003e\u003c/p\u003e \u003cp dir=\"auto\"\u003eUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\u003c/p\u003e \u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
