{
  "id": "8a691103-e198-4baf-bac0-ee0fd7499bdd",
  "title": "Media3 1.6.0 — what’s new?",
  "link": "http://android-developers.googleblog.com/2025/03/media3-1-6-0-is-now-available.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-03-27T09:30:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#exoplayer",
    "#featured",
    "#Media",
    "#transformer",
    "ExoPlayer",
    "Featured",
    "media3",
    "MediaSession",
    "transformer"
  ],
  "byline": "",
  "length": 4765,
  "excerpt": "Media3 1.6.0 is now available, with bug fixes, performance improvements, and new features like Compose UI support, decoder pre-warming, and more.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Andrew Lewis – Software Engineer This article is cross-published on Medium Media3 1.6.0 is now available! This release includes a host of bug fixes, performance improvements and new features. Read on to find out more, and as always please check out the full release notes for a comprehensive overview of changes in this release. Playback, MediaSession and UI ExoPlayer now supports HLS interstitials for ad insertion in HLS streams. To play these ads using ExoPlayer's built-in playlist support, pass an HlsInterstitialsAdsLoader.AdsMediaSourceFactory as the media source factory when creating the player. For more information see the official documentation. This release also includes experimental support for 'pre-warming' decoders. Without pre-warming, transitions from one playlist item to the next may not be seamless in some cases, for example, we may need to switch codecs, or decode some video frames to reach the start position of the new media item. With pre-warming enabled, a secondary video renderer can start decoding the new media item earlier, giving near-seamless transitions. You can try this feature out by enabling it on the DefaultRenderersFactory. We're actively working on further improvements to the way we interact with decoders, including adding a 'fast seeking mode' so stay tuned for updates in this area. Media3 1.6.0 introduces a new media3-ui-compose module that contains functionality for building Compose UIs for playback. You can find a reference implementation in the Media3 Compose demo and learn more in Getting started with Compose-based UI. At this point we're providing a first set of foundational state classes that link to the Player, in addition to some basic composable building blocks. You can use these to build your own customized UI widgets. We plan to publish default Material-themed composables in a later release. Some other improvements in this release include: moving system calls off the application's main thread to the background (which should reduce ANRs), a new decoder module wrapping libmpegh (for bundling object-based audio decoding in your app), and a fix for the Cast extension for apps targeting API 34+. There are also fixes across MPEG-TS and WebVTT extraction, DRM, downloading/caching, MediaSession and more. Media extraction and frame retrieval The new MediaExtractorCompat is a drop-in replacement for the framework MediaExtractor but implemented using Media3's extractors. If you're using the Android framework MediaExtractor, consider migrating to get consistent behavior across devices and reduce crashes. We've also added experimental support for retrieving video frames in a new class ExperimentalFrameExtractor, which can act as a replacement for the MediaMetadataRetriever getFrameAtTime methods. There are a few benefits over the framework implementation: HDR input is supported (by default tonemapping down to SDR, but with the option to produce HLG bitmaps from Android 14 onwards), Media3 effects can be applied (including Presentation to scale the output to a desired size) and it runs faster on some devices due to moving color space conversion to the GPU. Here's an example of using the new API: val bitmap = withContext(Dispatchers.IO) { val configuration = ExperimentalFrameExtractor.Configuration .Builder() .setExtractHdrFrames(true) .build() val frameExtractor = ExperimentalFrameExtractor( context, configuration, ) frameExtractor.setMediaItem(mediaItem, /*effects*/ listOf()) val frame = frameExtractor.getFrame(timestamps).await() frameExtractor.release() frame.bitmap } Editing, transcoding and export Media3 1.6.0 includes performance, stability and functional improvements in Transformer. Highlights include: support for transcoding/transmuxing Dolby Vision streams on devices that support this format and a new MediaProjectionAssetLoader for recording from the screen, which you can try out in the Transformer demo app. Check out Common media processing operations with Jetpack Media3 Transformer for some code snippets showing how to process media with Transformer, and tips to reduce latency. This release also includes a new Kotlin-based demo app showcasing Media3's video effects framework. You can select from a variety of video effects and preview them via ExoPlayer.setVideoEffects. Animation showing contrast adjustment and a confetti effect in the new demo app Get started with Media3 1.6.0 Please get in touch via the Media3 issue Tracker if you run into any bugs, or if you have questions or feature requests. We look forward to hearing from you!",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3xfaeSVwhItxPTRdI2vEUu6t8ZSJWKMYB6xWkb9inI8ab1GltWuCExl29Z8SAQ1Fo2A4moEQLykBdkjIZ_IqikrD-QrmkwWKCOaKALh5fMiV5SRRUM7JRmjavEZ64horigEBxNK5RtW_NI88_LjbqTa69Os3a-ADQbrNp7R5e78dXmkc7rsYyx3cRYdo/w1200-h630-p-k-no-nu/AndroidSpotlight_Camera\u0026Media_Blog_Media3%201.5.0_Card%20%281%29.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3xfaeSVwhItxPTRdI2vEUu6t8ZSJWKMYB6xWkb9inI8ab1GltWuCExl29Z8SAQ1Fo2A4moEQLykBdkjIZ_IqikrD-QrmkwWKCOaKALh5fMiV5SRRUM7JRmjavEZ64horigEBxNK5RtW_NI88_LjbqTa69Os3a-ADQbrNp7R5e78dXmkc7rsYyx3cRYdo/s1600/AndroidSpotlight_Camera\u0026amp;Media_Blog_Media3%201.5.0_Card%20%281%29.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Andrew Lewis – Software Engineer\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh1PmhSCIphw3wGW7dJ9Yr7LLgG_6rqNwklO04UO6iZAsh6HjosgOn_SovJ8sEJvNYdeU08nMgnHQ3_L8F3pNU0Z72viRxqg8Ir0ceP-XVx45lkfImCbLnKywl7lho5CWJt0hBqt5dehuzLLpkrmkHdpTXRCzokmV4m3lswrsxAHWRHCstygUnK5PKCrO4/s1600/AndroidSpotlight_Camera\u0026amp;Media_Blog_Media3%201.5.0_Banner.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh1PmhSCIphw3wGW7dJ9Yr7LLgG_6rqNwklO04UO6iZAsh6HjosgOn_SovJ8sEJvNYdeU08nMgnHQ3_L8F3pNU0Z72viRxqg8Ir0ceP-XVx45lkfImCbLnKywl7lho5CWJt0hBqt5dehuzLLpkrmkHdpTXRCzokmV4m3lswrsxAHWRHCstygUnK5PKCrO4/s1600/AndroidSpotlight_Camera\u0026amp;Media_Blog_Media3%201.5.0_Banner.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eThis article is cross-published on \u003ca href=\"https://medium.com/google-exoplayer/media3-1-6-0-whats-new-bbeee70dc999\" target=\"_blank\"\u003eMedium\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\n\u003ch2\u003eMedia3 1.6.0 is now available!\u003c/h2\u003e\n\n\u003cp\u003eThis release includes a host of bug fixes, performance improvements and new features. Read on to find out more, and as always please check out the \u003ca href=\"https://github.com/androidx/media/blob/1.6.0/RELEASENOTES.md\" target=\"_blank\"\u003efull release notes\u003c/a\u003e for a comprehensive overview of changes in this release.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2\u003e\u003cspan\u003ePlayback, MediaSession and UI\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eExoPlayer now supports \u003ca href=\"https://developer.apple.com/streaming/GettingStartedWithHLSInterstitials.pdf\" target=\"_blank\"\u003eHLS interstitials\u003c/a\u003e for ad insertion in HLS streams. To play these ads using ExoPlayer\u0026#39;s built-in playlist support, pass an \u003cspan\u003eHlsInterstitialsAdsLoader.AdsMediaSourceFactory\u003c/span\u003e as the media source factory when creating the player. For more information see the official \u003ca href=\"https://developer.android.com/media/media3/exoplayer/hls#interstitials\" target=\"_blank\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis release also includes experimental support for \u0026#39;pre-warming\u0026#39; decoders. Without pre-warming, transitions from one playlist item to the next may not be seamless in some cases, for example, we may need to switch codecs, or decode some video frames to reach the start position of the new media item. With pre-warming enabled, a secondary video renderer can start decoding the new media item earlier, giving near-seamless transitions. You can try this feature out by \u003ca href=\"https://github.com/androidx/media/blob/1.6.0/libraries/exoplayer/src/main/java/androidx/media3/exoplayer/DefaultRenderersFactory.java#L277\" target=\"_blank\"\u003eenabling it\u003c/a\u003e on the \u003cspan\u003eDefaultRenderersFactory\u003c/span\u003e. We\u0026#39;re actively working on further improvements to the way we interact with decoders, including adding a \u0026#39;fast seeking mode\u0026#39; so stay tuned for updates in this area.\u003c/p\u003e\n\n\u003cp\u003eMedia3 1.6.0 introduces a new \u003cspan\u003emedia3-ui-compose\u003c/span\u003e module that contains functionality for building Compose UIs for playback. You can find a reference implementation in the \u003ca href=\"https://github.com/androidx/media/tree/release/demos/compose\" target=\"_blank\"\u003eMedia3 Compose demo\u003c/a\u003e and learn more in \u003ca href=\"https://developer.android.com/media/media3/ui/compose\" target=\"_blank\"\u003eGetting started with Compose-based UI\u003c/a\u003e. At this point we\u0026#39;re providing a first set of foundational state classes that link to the Player, in addition to some basic composable building blocks. You can use these to build your own customized UI widgets. We plan to publish default Material-themed composables in a later release.\u003c/p\u003e\n\n\u003cp\u003eSome other improvements in this release include: moving system calls off the application\u0026#39;s main thread to the background (which should reduce \u003ca href=\"https://developer.android.com/topic/performance/vitals/anr\" target=\"_blank\"\u003eANRs\u003c/a\u003e), a new decoder module wrapping \u003cspan\u003elibmpegh\u003c/span\u003e (for bundling object-based audio decoding in your app), and a fix for the Cast extension for apps targeting API 34+. There are also fixes across MPEG-TS and WebVTT extraction, DRM, downloading/caching, MediaSession \u003ca href=\"https://github.com/androidx/media/blob/1.6.0/RELEASENOTES.md\" target=\"_blank\"\u003eand more\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eMedia extraction and frame retrieval\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe new \u003cspan\u003eMediaExtractorCompat\u003c/span\u003e is a drop-in replacement for the framework \u003cspan\u003eMediaExtractor\u003c/span\u003e but implemented using Media3\u0026#39;s extractors. If you\u0026#39;re using the Android framework \u003cspan\u003eMediaExtractor\u003c/span\u003e, consider migrating to get consistent behavior across devices and reduce crashes.\u003c/p\u003e\n  \n\u003cp\u003eWe\u0026#39;ve also added experimental support for retrieving video frames in a new class \u003cspan\u003e\u003ca href=\"https://github.com/androidx/media/blob/1.6.0/libraries/transformer/src/main/java/androidx/media3/transformer/ExperimentalFrameExtractor.java\" target=\"_blank\"\u003eExperimentalFrameExtractor\u003c/a\u003e\u003c/span\u003e, which can act as a replacement for the \u003cspan\u003eMediaMetadataRetriever \u003ca href=\"https://developer.android.com/reference/android/media/MediaMetadataRetriever#getFrameAtTime%28%29\" target=\"_blank\"\u003egetFrameAtTime\u003c/a\u003e\u003c/span\u003e methods. There are a few benefits over the framework implementation: HDR input is supported (by default tonemapping down to SDR, but with the option to produce HLG bitmaps from Android 14 onwards), Media3 effects can be applied (including \u003cspan\u003ePresentation\u003c/span\u003e to scale the output to a desired size) and it runs faster on some devices due to moving color space conversion to the GPU. Here\u0026#39;s an example of using the new API:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e bitmap =\n    withContext(Dispatchers.IO) {\n        \u003cspan\u003eval\u003c/span\u003e configuration =\n            ExperimentalFrameExtractor.Configuration\n                .Builder()\n                .setExtractHdrFrames(\u003cspan\u003etrue\u003c/span\u003e)\n                .build()\n        \u003cspan\u003eval\u003c/span\u003e frameExtractor =\n            ExperimentalFrameExtractor(\n                context,\n                configuration,\n            )\n\n        frameExtractor.setMediaItem(mediaItem, \u003cspan\u003e/*effects*/\u003c/span\u003e listOf())\n\n        \u003cspan\u003eval\u003c/span\u003e frame = frameExtractor.getFrame(timestamps).await()\n        frameExtractor.release()\n        frame.bitmap\n    }\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2\u003e\u003cspan\u003eEditing, transcoding and export\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eMedia3 1.6.0 includes performance, stability and functional improvements in Transformer. Highlights include: support for transcoding/transmuxing Dolby Vision streams on devices that support this format and a new \u003cspan\u003eMediaProjectionAssetLoader\u003c/span\u003e for recording from the screen, which you can try out in the Transformer demo app.\u003c/p\u003e\n\n\n\u003cp\u003eCheck out \u003ca href=\"https://android-developers.googleblog.com/2025/03/media-processing-performance-jetpack-media3-transformer.html\" target=\"_blank\"\u003eCommon media processing operations with Jetpack Media3 Transformer\u003c/a\u003e for some code snippets showing how to process media with Transformer, and tips to reduce latency.\u003c/p\u003e\n\n\u003cp\u003eThis release also includes a new Kotlin-based demo app showcasing Media3\u0026#39;s video effects framework. You can select from a variety of video effects and preview them via \u003cspan\u003eExoPlayer.setVideoEffects\u003c/span\u003e.\u003c/p\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"Media3 video effect animation\" height=\"640\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnVJK91dK-NBUjFUJquXahjh82nOwM6dYhksYgbXRTAfhFuJgBnkshGG3ItPLvHLQjf7JE1JU9SbQSX8umcAfSJ8v-ifAQirSED0K18PRWc1OUjH4YI8Hly9Hso7qv-tCJhol_hAmbSpPhQDMkey2OhcmnC7BWAiVxmQhJcWjGOLx6MsG0tTd9-yuNS44/w295-h640/Media3-video-effect.gif\" width=\"295\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eAnimation showing contrast adjustment and a confetti effect in the new demo app\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\u003cbr/\u003e\n\n\u003ch2\u003e\u003cspan\u003eGet started with Media3 1.6.0\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003ePlease get in touch via the \u003ca href=\"https://github.com/androidx/media/issues\" target=\"_blank\"\u003eMedia3 issue Tracker\u003c/a\u003e if you run into any bugs, or if you have questions or feature requests. We look forward to hearing from you!\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
