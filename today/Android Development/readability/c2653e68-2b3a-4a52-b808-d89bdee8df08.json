{
  "id": "c2653e68-2b3a-4a52-b808-d89bdee8df08",
  "title": "Article 4: Animations in Jetpack Compose From State to Smooth Transitions",
  "link": "https://proandroiddev.com/article-4-animations-in-jetpack-compose-from-state-to-smooth-transitions-eb5a5076fd25?source=rss----c72404660798---4",
  "description": "",
  "author": "Selen Demir",
  "published": "Thu, 12 Jun 2025 20:17:16 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-development",
    "jetpack-compose",
    "animation",
    "androiddev",
    "android"
  ],
  "byline": "Selen Demir",
  "length": 8213,
  "excerpt": "Before we dive into specific animation examples, it‚Äôs worth getting familiar with the powerful and beginner-friendly animate*AsState APIs ‚Äî the foundation of most state-based animations in Jetpack‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Image creadet with ChatGpt‚ÄúJetpack Compose makes animations not only possible, but delightful ‚Äî using state-driven, declarative APIs that feel natural and clean.‚ÄùUnderstanding animate*AsState in Jetpack ComposeBefore we dive into specific animation examples, it‚Äôs worth getting familiar with the powerful and beginner-friendly animate*AsState APIs ‚Äî the foundation of most state-based animations in Jetpack Compose.What is animate*AsState?Jetpack Compose‚Äôs animate*AsState functions help you animate values when state changes. Instead of instantly jumping from one value to another, Compose animates the change smoothly.There are several built-in versions:animateDpAsState() ‚Äì for sizes and dimensionsanimateFloatAsState() ‚Äì for rotation, alpha, progress, etc.animateColorAsState() ‚Äì for animating color changesanimateIntAsState(), animateOffsetAsState(), etc.They all share the same structure.Why it‚Äôs great:Simple and declarative: Just swap state, and the animation happens.Reusable: Works inside any layout or modifier (like size(), rotate(), or padding()).Powerful: Supports different animation specs (tween, spring, keyframes, etc.)Now that we understand the magic behind animate*AsState, let‚Äôs explore how to use it in real-world UI animations like size transitions, visibility toggles, and interactive rotations. üëáIn this article, we‚Äôll explore how to create smooth size transitions using one of the simplest but most powerful tools in Jetpack Compose: animateDpAsState,animateFloatAsState and AnimatedVisibility.We‚Äôll walk through the example line by line, explain the key concepts like remember, MutableState, and tween, and show how Compose handles animation with minimal effort.1. Growing and Shrinking a Box@Composablefun SizeAnimationExample() { var isGrow by remember { mutableStateOf(false) } val boxSize by animateDpAsState( targetValue = if (isGrow) 200.dp else 100.dp, animationSpec = tween(durationMillis = 1000), label = \"\" ) Column( modifier = Modifier .fillMaxSize() .padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally ) { Button(onClick = { isGrow = !isGrow }) { Text(if (isGrow) \"Shrink Box\" else \"Grow Box\") } Spacer(modifier = Modifier.height(16.dp)) Box( modifier = Modifier .size(boxSize) .background(Color.Red) ) }}Think of it like a switchThis animation works like a light switch:When isGrow is false, the box is small (100.dp).When you click the button and flip isGrow to true, the box smoothly grows to 200.dp.So what‚Äôs actually happening under the hood? Let‚Äôs break it down line by lineLine 1: var isGrow by remember { mutableStateOf(false) }var isGrow: This is a mutable Boolean state.remember: Ensures that the value is retained across recompositions.mutableStateOf(false): Creates observable state initialized as false.When isGrow changes, Compose automatically triggers a recomposition ‚Äî redrawing any Composables that depend on it.Line 2: val boxSize by animateDpAsState(...)This line is where the animation happens.animateDpAsState: Animates a Dp value over time when its target changes.targetValue: If isGrow is true ‚Üí animate to 200.dp, otherwise ‚Üí 100.dp.tween(durationMillis = 1000): Defines a 1-second smooth animation.boxSize becomes a smoothly animated value between those two endpoints.As isGrow changes, boxSize changes gradually ‚Äî and because it's used inside Modifier.size(), the box resizes smoothly.How the UI respondsLet‚Äôs walk through the flow:On launch, isGrow = false ‚Üí box starts at 100.dp.You click the button ‚Üí isGrow = true.animateDpAsState animates from 100.dp to 200.dp.The Box modifier updates with the new animated size in real time.Click again ‚Üí animation reverses.The result is a polished, native-feeling transition ‚Äî with no manual animation code, handlers, or frame calculations.Fading Elements In and Out with AnimatedVisibilityJetpack Compose offers a very expressive way to show or hide content smoothly using the AnimatedVisibility composable.What is AnimatedVisibility?Think of it like a magic container: When a Boolean value (e.g., isVisible) changes, it handles both the appearance and disappearance of its content with animation.2. Fade a Box In and Out@Composablefun VisibilityAnimationTest() { var isVisible by remember { mutableStateOf(true) } Column( modifier = Modifier .fillMaxSize() .padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally ) { Button(onClick = { isVisible = !isVisible }) { Text(if (isVisible) \"Hide\" else \"Show\") } Spacer(modifier = Modifier.height(16.dp)) AnimatedVisibility( visible = isVisible, enter = fadeIn(animationSpec = tween(durationMillis = 1000)), exit = fadeOut(animationSpec = tween(durationMillis = 1000)) ) { Box( modifier = Modifier .size(100.dp) .background(Color.Blue) ) } }}How It Works1. visible = isVisibleThis controls whether the content should be visible.isVisible is a MutableState value that determines the visibility.When this value changes, the UI recomposes and the proper animation is triggered.2. enter = fadeIn(...)Defines how the content should appear.fadeIn() is a built-in transition that starts at full transparency and fades to visible.tween(durationMillis = 1000) makes the fade-in last for 1 second.When isVisible becomes true, the content fades in.3. exit = fadeOut(...)Defines how the content should disappear.fadeOut() gradually fades the content out until it's fully transparent.It also uses tween(durationMillis = 1000) to last 1 second.When isVisible becomes false, the content fades out.TL;DR ‚Äî In Simple TermsAnimatedVisibility = \"Show/Hide with animation\"isVisible = \"The switch that controls visibility\"fadeIn() = \"Smooth entry\", and fadeOut() = \"Smooth exit\"tween(1000) = \"Take 1 second to animate\"Full LifecycleInitial state: isVisible = true ‚Üí content is shown.You click the button ‚Üí isVisible = false.AnimatedVisibility detects the change:Triggers the exit animation (fadeOut)Fades the content out over 1 secondClick again ‚Üí isVisible = true:Triggers enter animation (fadeIn)Content fades back inAll of this happens automatically ‚Äî no manual animation logic required.Pro TipYou‚Äôre not limited to just fading. You can combine or replace transitions with:slideInVertically(), slideOutHorizontally()expandVertically(), shrinkOut()scaleIn(), scaleOut()3. Animating Rotation with animateFloatAsStateSometimes you want to add a little motion to your interactions like rolling a dice or refreshing content. Here‚Äôs how you can do that with animateFloatAsState:Setupvar isRolling by remember { mutableStateOf(false) }val rotationAngle by animateFloatAsState( targetValue = if (isRolling) 360f else 0f, animationSpec = tween(durationMillis = 500), finishedListener = { isRolling = false })Usage in a ButtonIconButton( onClick = { if (!isRolling) { isRolling = true viewModel.fetchZenQuote() } }, modifier = Modifier.rotate(rotationAngle),) { Icon( imageVector = Icons.Default.Casino, contentDescription = \"New quote\", tint = Color.White, )}How It WorksisRolling starts as false.When the user taps the button, it flips isRolling to true.animateFloatAsState detects the change and animates rotationAngle from 0f ‚Üí 360f.Once the spin completes, finishedListener resets isRolling to false.This creates a clean, polished 360¬∞ spin effect every time the button is pressed. It‚Äôs perfect for dice rolls, card shuffles, or random content refreshes.Why This Works So Well in ComposeJetpack Compose animations are:Declarative ‚Äî Just describe the end state.State-driven ‚Äî Powered by remember and MutableState.Composable ‚Äî Plug into any layout or modifier easily.You don‚Äôt manage time or frames and Compose handles that internally. All you do is update state, and the animation system figures out how to transition the UI.Follow me for more Android and Tech content!Let‚Äôs connect on Linkedin!",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*7Hf0qLy-jXTT4Vmcwjhahw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://selendemir.medium.com/?source=post_page---byline--eb5a5076fd25---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Selen Demir\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*iI2Nou0HqKE19XA5UP7Qsw.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eImage creadet with ChatGpt\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"23fd\"\u003e‚ÄúJetpack Compose makes animations not only possible, but delightful ‚Äî using state-driven, declarative APIs that feel natural and clean.‚Äù\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"4229\"\u003eUnderstanding \u003ccode\u003eanimate*AsState\u003c/code\u003e in Jetpack Compose\u003c/h2\u003e\u003cp id=\"f03f\"\u003eBefore we dive into specific animation examples, it‚Äôs worth getting familiar with the powerful and beginner-friendly \u003ccode\u003e\u003cstrong\u003eanimate*AsState\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e APIs\u003c/strong\u003e ‚Äî the foundation of most state-based animations in Jetpack Compose.\u003c/p\u003e\u003ch2 id=\"8da7\"\u003eWhat is \u003ccode\u003eanimate*AsState\u003c/code\u003e?\u003c/h2\u003e\u003cp id=\"569d\"\u003eJetpack Compose‚Äôs \u003ccode\u003eanimate*AsState\u003c/code\u003e functions help you \u003cstrong\u003eanimate values when state changes\u003c/strong\u003e. Instead of instantly jumping from one value to another, Compose animates the change smoothly.\u003c/p\u003e\u003cp id=\"8ae4\"\u003eThere are several built-in versions:\u003c/p\u003e\u003cul\u003e\u003cli id=\"6517\"\u003e\u003ccode\u003eanimateDpAsState()\u003c/code\u003e ‚Äì for sizes and dimensions\u003c/li\u003e\u003cli id=\"d6ab\"\u003e\u003ccode\u003eanimateFloatAsState()\u003c/code\u003e ‚Äì for rotation, alpha, progress, etc.\u003c/li\u003e\u003cli id=\"aa2e\"\u003e\u003ccode\u003eanimateColorAsState()\u003c/code\u003e ‚Äì for animating color changes\u003c/li\u003e\u003cli id=\"aa20\"\u003e\u003ccode\u003eanimateIntAsState()\u003c/code\u003e, \u003ccode\u003eanimateOffsetAsState()\u003c/code\u003e, etc.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"352c\"\u003eThey all share the same structure.\u003c/p\u003e\u003ch2 id=\"0b36\"\u003eWhy it‚Äôs great:\u003c/h2\u003e\u003cul\u003e\u003cli id=\"e20b\"\u003eSimple and declarative: Just swap state, and the animation happens.\u003c/li\u003e\u003cli id=\"9583\"\u003eReusable: Works inside any layout or modifier (like \u003ccode\u003esize()\u003c/code\u003e, \u003ccode\u003erotate()\u003c/code\u003e, or \u003ccode\u003epadding()\u003c/code\u003e).\u003c/li\u003e\u003cli id=\"c6b8\"\u003ePowerful: Supports different animation specs (\u003ccode\u003etween\u003c/code\u003e, \u003ccode\u003espring\u003c/code\u003e, \u003ccode\u003ekeyframes\u003c/code\u003e, etc.)\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"1899\"\u003eNow that we understand the magic behind \u003ccode\u003eanimate*AsState\u003c/code\u003e, let‚Äôs explore how to use it in real-world UI animations like size transitions, visibility toggles, and interactive rotations. üëá\u003c/p\u003e\u003cp id=\"6a10\"\u003eIn this article, we‚Äôll explore how to create \u003cstrong\u003esmooth size transitions\u003c/strong\u003e using one of the simplest but most powerful tools in Jetpack Compose: \u003ccode\u003eanimateDpAsState,animateFloatAsState and \u003c/code\u003eAnimatedVisibility.\u003c/p\u003e\u003cp id=\"3205\"\u003eWe‚Äôll walk through the example line by line, explain the key concepts like \u003ccode\u003eremember\u003c/code\u003e, \u003ccode\u003eMutableState\u003c/code\u003e, and \u003ccode\u003etween\u003c/code\u003e, and show how Compose handles animation with minimal effort.\u003c/p\u003e\u003ch2 id=\"c2df\"\u003e1. Growing and Shrinking a Box\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"efe7\"\u003e@Composable\u003cbr/\u003efun SizeAnimationExample() {\u003cbr/\u003e    var isGrow by remember { mutableStateOf(false) }\u003cbr/\u003e    val boxSize by animateDpAsState(\u003cbr/\u003e        targetValue = if (isGrow) 200.dp else 100.dp,\u003cbr/\u003e        animationSpec = tween(durationMillis = 1000),\u003cbr/\u003e        label = \u0026#34;\u0026#34;\u003cbr/\u003e    )\u003cp\u003e    Column(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .padding(16.dp),\u003cbr/\u003e        horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e    ) {\u003cbr/\u003e        Button(onClick = { isGrow = !isGrow }) {\u003cbr/\u003e            Text(if (isGrow) \u0026#34;Shrink Box\u0026#34; else \u0026#34;Grow Box\u0026#34;)\u003cbr/\u003e        }\u003c/p\u003e\u003cp\u003e        Spacer(modifier = Modifier.height(16.dp))\u003c/p\u003e\u003cp\u003e        Box(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .size(boxSize)\u003cbr/\u003e                .background(Color.Red)\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"aab1\"\u003eThink of it like a switch\u003c/h2\u003e\u003cp id=\"91df\"\u003eThis animation works like a \u003cstrong\u003elight switch\u003c/strong\u003e:\u003c/p\u003e\u003cul\u003e\u003cli id=\"c89c\"\u003eWhen \u003ccode\u003eisGrow\u003c/code\u003e is \u003cstrong\u003efalse\u003c/strong\u003e, the box is small (100.dp).\u003c/li\u003e\u003cli id=\"9264\"\u003eWhen you click the button and flip \u003ccode\u003eisGrow\u003c/code\u003e to \u003cstrong\u003etrue\u003c/strong\u003e, the box smoothly grows to 200.dp.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"5347\"\u003eSo what‚Äôs actually happening under the hood? Let‚Äôs break it down line by line\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"4335\"\u003eLine 1: \u003ccode\u003evar isGrow by remember { mutableStateOf(false) }\u003c/code\u003e\u003c/h2\u003e\u003cul\u003e\u003cli id=\"f811\"\u003e\u003ccode\u003evar isGrow\u003c/code\u003e: This is a \u003cstrong\u003emutable Boolean state\u003c/strong\u003e.\u003c/li\u003e\u003cli id=\"2958\"\u003e\u003ccode\u003eremember\u003c/code\u003e: Ensures that the value is retained across recompositions.\u003c/li\u003e\u003cli id=\"895f\"\u003e\u003ccode\u003emutableStateOf(false)\u003c/code\u003e: Creates observable state initialized as \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"a491\"\u003e\u003cem\u003eWhen \u003c/em\u003e\u003ccode\u003e\u003cem\u003eisGrow\u003c/em\u003e\u003c/code\u003e\u003cem\u003e changes, Compose \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eautomatically triggers a recomposition\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e ‚Äî redrawing any Composables that depend on it.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"7809\"\u003eLine 2: \u003ccode\u003eval boxSize by animateDpAsState(...)\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"336d\"\u003eThis line is where the animation happens.\u003c/p\u003e\u003cul\u003e\u003cli id=\"745c\"\u003e\u003ccode\u003eanimateDpAsState\u003c/code\u003e: Animates a \u003ccode\u003eDp\u003c/code\u003e value over time when its target changes.\u003c/li\u003e\u003cli id=\"e839\"\u003e\u003ccode\u003etargetValue\u003c/code\u003e: If \u003ccode\u003eisGrow\u003c/code\u003e is true ‚Üí animate to \u003ccode\u003e200.dp\u003c/code\u003e, otherwise ‚Üí \u003ccode\u003e100.dp\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"ef99\"\u003e\u003ccode\u003etween(durationMillis = 1000)\u003c/code\u003e: Defines a \u003cstrong\u003e1-second\u003c/strong\u003e smooth animation.\u003c/li\u003e\u003cli id=\"137d\"\u003e\u003ccode\u003eboxSize\u003c/code\u003e becomes a smoothly animated value between those two endpoints.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"9009\"\u003e\u003cem\u003eAs \u003c/em\u003e\u003ccode\u003e\u003cem\u003eisGrow\u003c/em\u003e\u003c/code\u003e\u003cem\u003e changes, \u003c/em\u003e\u003ccode\u003e\u003cem\u003eboxSize\u003c/em\u003e\u003c/code\u003e\u003cem\u003e changes gradually ‚Äî and because it\u0026#39;s used inside \u003c/em\u003e\u003ccode\u003e\u003cem\u003eModifier.size()\u003c/em\u003e\u003c/code\u003e\u003cem\u003e, the box resizes smoothly.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"1d03\"\u003eHow the UI responds\u003c/h2\u003e\u003cp id=\"448c\"\u003eLet‚Äôs walk through the flow:\u003c/p\u003e\u003col\u003e\u003cli id=\"4b7e\"\u003eOn launch, \u003ccode\u003eisGrow = false\u003c/code\u003e ‚Üí box starts at \u003ccode\u003e100.dp\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"2ee8\"\u003eYou click the button ‚Üí \u003ccode\u003eisGrow = true\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"b7c3\"\u003e\u003ccode\u003eanimateDpAsState\u003c/code\u003e animates from \u003ccode\u003e100.dp\u003c/code\u003e to \u003ccode\u003e200.dp\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"c3ba\"\u003eThe \u003ccode\u003eBox\u003c/code\u003e modifier updates with the new animated size in real time.\u003c/li\u003e\u003cli id=\"7227\"\u003eClick again ‚Üí animation reverses.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"b6aa\"\u003e\u003cem\u003eThe result is a polished, native-feeling transition ‚Äî with \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eno manual animation code\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e, handlers, or frame calculations.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"6bab\"\u003eFading Elements In and Out with \u003ccode\u003eAnimatedVisibility\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"0465\"\u003eJetpack Compose offers a very expressive way to show or hide content smoothly using the \u003ccode\u003eAnimatedVisibility\u003c/code\u003e composable.\u003c/p\u003e\u003ch2 id=\"58fb\"\u003eWhat is \u003ccode\u003eAnimatedVisibility\u003c/code\u003e?\u003c/h2\u003e\u003cp id=\"adf8\"\u003eThink of it like a magic container:\u003cbr/\u003e When a \u003cstrong\u003eBoolean value\u003c/strong\u003e (e.g., \u003ccode\u003eisVisible\u003c/code\u003e) changes, it handles both the \u003cstrong\u003eappearance and disappearance\u003c/strong\u003e of its content \u003cstrong\u003ewith animation\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"d6cd\"\u003e2. Fade a Box In and Out\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"9629\"\u003e@Composable\u003cbr/\u003efun VisibilityAnimationTest() {\u003cbr/\u003e    var isVisible by remember { mutableStateOf(true) }\u003cp\u003e    Column(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .padding(16.dp),\u003cbr/\u003e        horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e    ) {\u003cbr/\u003e        Button(onClick = { isVisible = !isVisible }) {\u003cbr/\u003e            Text(if (isVisible) \u0026#34;Hide\u0026#34; else \u0026#34;Show\u0026#34;)\u003cbr/\u003e        }\u003c/p\u003e\u003cp\u003e        Spacer(modifier = Modifier.height(16.dp))\u003c/p\u003e\u003cp\u003e        AnimatedVisibility(\u003cbr/\u003e            visible = isVisible,\u003cbr/\u003e            enter = fadeIn(animationSpec = tween(durationMillis = 1000)),\u003cbr/\u003e            exit = fadeOut(animationSpec = tween(durationMillis = 1000))\u003cbr/\u003e        ) {\u003cbr/\u003e            Box(\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .size(100.dp)\u003cbr/\u003e                    .background(Color.Blue)\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"e776\"\u003eHow It Works\u003c/h2\u003e\u003ch2 id=\"d1b8\"\u003e1. \u003ccode\u003evisible = isVisible\u003c/code\u003e\u003c/h2\u003e\u003cul\u003e\u003cli id=\"c728\"\u003eThis controls \u003cstrong\u003ewhether the content should be visible\u003c/strong\u003e.\u003c/li\u003e\u003cli id=\"855b\"\u003e\u003ccode\u003eisVisible\u003c/code\u003e is a \u003ccode\u003eMutableState\u003c/code\u003e value that determines the visibility.\u003c/li\u003e\u003cli id=\"da7b\"\u003eWhen this value changes, the UI \u003cstrong\u003erecomposes\u003c/strong\u003e and the proper animation is triggered.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"98c4\"\u003e2. \u003ccode\u003eenter = fadeIn(...)\u003c/code\u003e\u003c/h2\u003e\u003cul\u003e\u003cli id=\"fec7\"\u003eDefines how the content should \u003cstrong\u003eappear\u003c/strong\u003e.\u003c/li\u003e\u003cli id=\"dbd4\"\u003e\u003ccode\u003efadeIn()\u003c/code\u003e is a built-in transition that starts at full transparency and fades to visible.\u003c/li\u003e\u003cli id=\"e65b\"\u003e\u003ccode\u003etween(durationMillis = 1000)\u003c/code\u003e makes the fade-in last for \u003cstrong\u003e1 second\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a682\"\u003e\u003cem\u003eWhen \u003c/em\u003e\u003ccode\u003e\u003cem\u003eisVisible\u003c/em\u003e\u003c/code\u003e\u003cem\u003e becomes \u003c/em\u003e\u003ccode\u003e\u003cem\u003etrue\u003c/em\u003e\u003c/code\u003e\u003cem\u003e, the content fades in.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"a7a0\"\u003e3. \u003ccode\u003eexit = fadeOut(...)\u003c/code\u003e\u003c/h2\u003e\u003cul\u003e\u003cli id=\"ec10\"\u003eDefines how the content should \u003cstrong\u003edisappear\u003c/strong\u003e.\u003c/li\u003e\u003cli id=\"d4c7\"\u003e\u003ccode\u003efadeOut()\u003c/code\u003e gradually fades the content out until it\u0026#39;s fully transparent.\u003c/li\u003e\u003cli id=\"7cfe\"\u003eIt also uses \u003ccode\u003etween(durationMillis = 1000)\u003c/code\u003e to last 1 second.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a166\"\u003e\u003cem\u003eWhen \u003c/em\u003e\u003ccode\u003e\u003cem\u003eisVisible\u003c/em\u003e\u003c/code\u003e\u003cem\u003e becomes \u003c/em\u003e\u003ccode\u003e\u003cem\u003efalse\u003c/em\u003e\u003c/code\u003e\u003cem\u003e, the content fades out.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"422e\"\u003eTL;DR ‚Äî In Simple Terms\u003c/h2\u003e\u003cul\u003e\u003cli id=\"ea17\"\u003e\u003ccode\u003eAnimatedVisibility\u003c/code\u003e = \u003cstrong\u003e\u0026#34;Show/Hide with animation\u0026#34;\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"81fe\"\u003e\u003ccode\u003eisVisible\u003c/code\u003e = \u003cstrong\u003e\u0026#34;The switch that controls visibility\u0026#34;\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"3732\"\u003e\u003ccode\u003efadeIn()\u003c/code\u003e = \u003cstrong\u003e\u0026#34;Smooth entry\u0026#34;\u003c/strong\u003e, and \u003ccode\u003efadeOut()\u003c/code\u003e = \u003cstrong\u003e\u0026#34;Smooth exit\u0026#34;\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"f282\"\u003e\u003ccode\u003etween(1000)\u003c/code\u003e = \u003cstrong\u003e\u0026#34;Take 1 second to animate\u0026#34;\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"3b43\"\u003eFull Lifecycle\u003c/h2\u003e\u003col\u003e\u003cli id=\"38f9\"\u003e\u003cstrong\u003eInitial state\u003c/strong\u003e: \u003ccode\u003eisVisible = true\u003c/code\u003e ‚Üí content is shown.\u003c/li\u003e\u003cli id=\"9a4e\"\u003eYou click the button ‚Üí \u003ccode\u003eisVisible = false\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"b26b\"\u003e\u003ccode\u003eAnimatedVisibility\u003c/code\u003e detects the change:\u003c/li\u003e\u003cli id=\"90dd\"\u003eTriggers the \u003cstrong\u003eexit\u003c/strong\u003e animation (\u003ccode\u003efadeOut\u003c/code\u003e)\u003c/li\u003e\u003cli id=\"6f86\"\u003eFades the content out over 1 second\u003c/li\u003e\u003cli id=\"40aa\"\u003eClick again ‚Üí \u003ccode\u003eisVisible = true\u003c/code\u003e:\u003c/li\u003e\u003cli id=\"9fd4\"\u003eTriggers \u003cstrong\u003eenter\u003c/strong\u003e animation (\u003ccode\u003efadeIn\u003c/code\u003e)\u003c/li\u003e\u003cli id=\"7e13\"\u003eContent fades back in\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"9746\"\u003eAll of this happens \u003cstrong\u003eautomatically\u003c/strong\u003e ‚Äî no manual animation logic required.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"ea41\"\u003ePro Tip\u003c/h2\u003e\u003cp id=\"ff36\"\u003eYou‚Äôre not limited to just fading. You can combine or replace transitions with:\u003c/p\u003e\u003cul\u003e\u003cli id=\"3cca\"\u003e\u003ccode\u003eslideInVertically()\u003c/code\u003e, \u003ccode\u003eslideOutHorizontally()\u003c/code\u003e\u003c/li\u003e\u003cli id=\"312e\"\u003e\u003ccode\u003eexpandVertically()\u003c/code\u003e, \u003ccode\u003eshrinkOut()\u003c/code\u003e\u003c/li\u003e\u003cli id=\"4900\"\u003e\u003ccode\u003escaleIn()\u003c/code\u003e, \u003ccode\u003escaleOut()\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"82b6\"\u003e3. Animating Rotation with \u003ccode\u003eanimateFloatAsState\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"5e3d\"\u003eSometimes you want to add a little motion to your interactions like rolling a dice or refreshing content. Here‚Äôs how you can do that with \u003ccode\u003eanimateFloatAsState\u003c/code\u003e:\u003c/p\u003e\u003cp id=\"740a\"\u003e\u003cstrong\u003eSetup\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a7e0\"\u003evar isRolling by remember { mutableStateOf(false) }\u003cp\u003eval rotationAngle by animateFloatAsState(\u003cbr/\u003e    targetValue = if (isRolling) 360f else 0f,\u003cbr/\u003e    animationSpec = tween(durationMillis = 500),\u003cbr/\u003e    finishedListener = {\u003cbr/\u003e        isRolling = false\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"89fe\"\u003eUsage in a Button\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9415\"\u003eIconButton(\u003cbr/\u003e    onClick = {\u003cbr/\u003e        if (!isRolling) {\u003cbr/\u003e            isRolling = true\u003cbr/\u003e            viewModel.fetchZenQuote()\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    modifier = Modifier.rotate(rotationAngle),\u003cbr/\u003e) {\u003cbr/\u003e    Icon(\u003cbr/\u003e        imageVector = Icons.Default.Casino,\u003cbr/\u003e        contentDescription = \u0026#34;New quote\u0026#34;,\u003cbr/\u003e        tint = Color.White,\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d94e\"\u003eHow It Works\u003c/h2\u003e\u003cul\u003e\u003cli id=\"896b\"\u003e\u003ccode\u003eisRolling\u003c/code\u003e starts as \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"9e2c\"\u003eWhen the user taps the button, it flips \u003ccode\u003eisRolling\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"68ca\"\u003e\u003ccode\u003eanimateFloatAsState\u003c/code\u003e detects the change and animates \u003ccode\u003erotationAngle\u003c/code\u003e from \u003ccode\u003e0f\u003c/code\u003e ‚Üí \u003ccode\u003e360f\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"9f16\"\u003eOnce the spin completes, \u003ccode\u003efinishedListener\u003c/code\u003e resets \u003ccode\u003eisRolling\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a0f2\"\u003eThis creates a \u003cstrong\u003eclean, polished 360¬∞ spin effect\u003c/strong\u003e every time the button is pressed. It‚Äôs perfect for dice rolls, card shuffles, or random content refreshes.\u003c/p\u003e\u003ch2 id=\"9a9d\"\u003eWhy This Works So Well in Compose\u003c/h2\u003e\u003cp id=\"3a44\"\u003eJetpack Compose animations are:\u003c/p\u003e\u003cul\u003e\u003cli id=\"bc5a\"\u003e\u003cstrong\u003eDeclarative\u003c/strong\u003e ‚Äî Just describe the end state.\u003c/li\u003e\u003cli id=\"b565\"\u003e\u003cstrong\u003eState-driven\u003c/strong\u003e ‚Äî Powered by \u003ccode\u003eremember\u003c/code\u003e and \u003ccode\u003eMutableState\u003c/code\u003e.\u003c/li\u003e\u003cli id=\"ce54\"\u003e\u003cstrong\u003eComposable\u003c/strong\u003e ‚Äî Plug into any layout or modifier easily.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"7d7b\"\u003eYou don‚Äôt manage time or frames and Compose handles that internally. All you do is update state, and the animation system figures out how to transition the UI.\u003c/p\u003e\u003cp id=\"82b3\"\u003eFollow me for more Android and Tech content!\u003c/p\u003e\u003cp id=\"0dbc\"\u003eLet‚Äôs connect on \u003ca href=\"https://www.linkedin.com/in/selen-demir/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedin\u003c/a\u003e!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-06-11T12:45:16.489Z",
  "modifiedTime": null
}
