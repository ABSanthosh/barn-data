{
  "id": "524b1b2c-2bee-4a2f-af55-58d50100248c",
  "title": "Android Weekly Issue #669",
  "link": "https://androidweekly.net/issues/issue-669/rss.xml",
  "description": "Articles \u0026 Tutorials Sponsored The hidden cost of mobile releases [report] Wasted time, delayed fixes, developer frustration. Mobile teams pay more than they realize for outdated release processes. Runway’s new report shares the real ROI of mobile release management — and what it can unlock for your org. Download the report. Introducing Metro Zac Sweers introduces Metro, a compile-time dependency injection framework inspired by Dagger, Anvil, and Kotlin-Inject, aiming to unify their best features into a cohesive solution implemented as a compiler plugin. Routines to Coroutines: How Kotlin Revolutionized Asynchronous Programming Ninad Bhase explains how Kotlin’s coroutines enhance asynchronous programming by introducing suspendable functions and non-blocking operations, enabling concurrent execution that overcomes the blocking limitations of traditional subroutines. Sponsored Advertise to more than 80k Android developers! We reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product! Generics in Kotlin Anthony provides an overview of generics in Kotlin, explaining their role in creating flexible and type-safe code, and delving into concepts such as type parameters, variance (including invariant, covariant, and contravariant types), and best practices for their use. Profile \u0026 Benchmark Android Builds Nika Chapidze outlines methods for analyzing and benchmarking Android build performance using tools like Android Studio’s Build Analyzer, Gradle’s profiling and scanning options, and the Gradle Profiler, providing insights into build durations and task execution times. Finding unnecessary Component Dependencies with Dagger SPI Danil Perevalov discusses utilizing Dagger’s SPI to identify and remove unused component dependencies in Android projects, thereby enhancing build efficiency and reducing unnecessary module interdependencies. Write Testable Time-Dependent Coroutine Code in Kotlin Omar Sahl explains how to write testable, time-dependent coroutine code in Kotlin by replacing System.currentTimeMillis() with a TestCoroutineScheduler-based time source, facilitating more reliable and controlled testing environments. Does Gemini Create Accessible Android Apps? Eevis Panula evaluates the accessibility of Android apps generated by Gemini, noting that the first version had issues like redundant content descriptions and non-scrollable screens, while the second version showed significant improvements, though some problems persisted. Custom Animations and Transitions in Jetpack Compose Ignacio Carrión explores creating custom animations and transitions in Jetpack Compose, discussing animation APIs, custom transitions, and performance optimization techniques. Understanding Dispatchers: Main and Main.immediate Shreyas Patil explains how Dispatchers.Main.immediate runs coroutines instantly on the main thread if possible, unlike Dispatchers.Main which always enqueues them. Libraries \u0026 Code Metro Metro is a compile-time dependency injection framework that draws heavy inspiration from Dagger, Anvil, and Kotlin-Inject. News Sponsored KotlinConf 2025, May 21–23, Copenhagen KotlinConf 2025, happening May 21–23, is the must-attend event for Kotlin developers, featuring hands-on workshops and 100+ talks on Multiplatform, Compose, coroutines, Ktor, Spring, functional programming, and more. Learn from experts at JetBrains, Google, AWS, and beyond—don’t miss this chance to level up your Kotlin skills and connect with the global community! Amper Update April 2025 – IDE and CLI Feature Drop! Amper 0.6.0 is out, with improvements to both the IDE and CLI experience. Read on for all of the details. Videos \u0026 Podcasts My Tech Stack I've Used To Build Apps 2025 Daniel Atitienei talks about what tech stack to use for building native mobile applications in 2025. Android 16 Features, Android Studio Meerkat, New APIs \u0026 More Philipp Lackner summarizes the most relevant news for Android \u0026 Kotlin developers, so you don't need to look it up yourself. No more Manual Koin Initialization - New Context Binding is Awesome! No more Manual Koin Initialization - New Context Binding is Awesome! Anatomy of the SDK Runtime Learn how the SDK Runtime enhances Android app and SDK security and privacy by isolating third party code. This video covers the architecture, communication, permissions, and new distribution model, with more details in the video series. Cloud Functions streaming, new Genkit features, and some App Hosting updates! Join Rosário Fernandes in the March 2025 edition of Firebase Release Notes. Watch along and learn about new features in Cloud Functions, server-side remote config for Python updates, Genkit updates, and more! Android Devs Live Stream - 2-Apr-2025 Jov Mit continues this Android development live stream with: automated end-to-end testing, design patterns: Bulder, Factory, Adapter, Facade, managing 3rd party library code \u0026 reusability, and more. Using Platform-Specific APIs in KMP Apps Learn the art and science of using the expect/actual mechanism to create great KMP applications. Enhancing app performance in Android Christopher Cartland is joined by Nam Nguyen, Software Engineer on Google Maps, and Carmen Jackson, Software Engineer on Android, to discuss how they optimize Android apps for performance. Validating RSS feeds (but what does “valid” even mean?) with Marco Gomiero Code with the Italians and explore the gray area of RSS feed validation with Marco Gomiero. Spoiler: it’s all chaos!",
  "author": "",
  "published": "Sun, 06 Apr 2025 11:21:58 +0000",
  "source": "https://androidweekly.net/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2873,
  "excerpt": "",
  "siteName": "",
  "favicon": "",
  "text": "Wasted time, delayed fixes, developer frustration. Mobile teams pay more than they realize for outdated release processes. Runway’s new report shares the real ROI of mobile release management — and what it can unlock for your org. Download the report. Zac Sweers introduces Metro, a compile-time dependency injection framework inspired by Dagger, Anvil, and Kotlin-Inject, aiming to unify their best features into a cohesive solution implemented as a compiler plugin. We reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product! Anthony provides an overview of generics in Kotlin, explaining their role in creating flexible and type-safe code, and delving into concepts such as type parameters, variance (including invariant, covariant, and contravariant types), and best practices for their use. Nika Chapidze outlines methods for analyzing and benchmarking Android build performance using tools like Android Studio’s Build Analyzer, Gradle’s profiling and scanning options, and the Gradle Profiler, providing insights into build durations and task execution times. Omar Sahl explains how to write testable, time-dependent coroutine code in Kotlin by replacing System.currentTimeMillis() with a TestCoroutineScheduler-based time source, facilitating more reliable and controlled testing environments. Eevis Panula evaluates the accessibility of Android apps generated by Gemini, noting that the first version had issues like redundant content descriptions and non-scrollable screens, while the second version showed significant improvements, though some problems persisted. Metro is a compile-time dependency injection framework that draws heavy inspiration from Dagger, Anvil, and Kotlin-Inject. KotlinConf 2025, happening May 21–23, is the must-attend event for Kotlin developers, featuring hands-on workshops and 100+ talks on Multiplatform, Compose, coroutines, Ktor, Spring, functional programming, and more. Learn from experts at JetBrains, Google, AWS, and beyond—don’t miss this chance to level up your Kotlin skills and connect with the global community! Learn how the SDK Runtime enhances Android app and SDK security and privacy by isolating third party code. This video covers the architecture, communication, permissions, and new distribution model, with more details in the video series. Jov Mit continues this Android development live stream with: automated end-to-end testing, design patterns: Bulder, Factory, Adapter, Facade, managing 3rd party library code \u0026 reusability, and more. Christopher Cartland is joined by Nam Nguyen, Software Engineer on Google Maps, and Carmen Jackson, Software Engineer on Android, to discuss how they optimize Android apps for performance. ]]\u003e",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.runway.team/whitepapers/mobile-release-management-roi?utm_source=newsletter\u0026amp;utm_medium=android-weekly\u0026amp;utm_campaign=apr-6-25\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/67f262/a23c93bc0e0c006f7a/square_ROI_COVER_-_square__3_.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eWasted time, delayed fixes, developer frustration. Mobile teams pay more than they realize for outdated release processes. Runway’s new report shares the real ROI of mobile release management — and what it can unlock for your org. Download the report.\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eZac Sweers introduces Metro, a compile-time dependency injection framework inspired by Dagger, Anvil, and Kotlin-Inject, aiming to unify their best features into a cohesive solution implemented as a compiler plugin.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://androidweekly.net/jobs/new\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/67f262/d43c93bc0e0c006f89/square_aw.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eWe reach out to more than 80k Android developers around the world, every week, through our email newsletter and social media channels. Advertise your Android development related service or product!\n\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003eAnthony provides an overview of generics in Kotlin, explaining their role in creating flexible and type-safe code, and delving into concepts such as type parameters, variance (including invariant, covariant, and contravariant types), and best practices for their use.\n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eNika Chapidze outlines methods for analyzing and benchmarking Android build performance using tools like Android Studio’s Build Analyzer, Gradle’s profiling and scanning options, and the Gradle Profiler, providing insights into build durations and task execution times.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eOmar Sahl explains how to write testable, time-dependent coroutine code in Kotlin by replacing System.currentTimeMillis() with a TestCoroutineScheduler-based time source, facilitating more reliable and controlled testing environments.\n\u003c/p\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cp\u003eEevis Panula evaluates the accessibility of Android apps generated by Gemini, noting that the first version had issues like redundant content descriptions and non-scrollable screens, while the second version showed significant improvements, though some problems persisted.  \n\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eMetro is a compile-time dependency injection framework that draws heavy inspiration from Dagger, Anvil, and Kotlin-Inject.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://jb.gg/tf37vx\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/67f1bc/623c93bc0e0c005aae/square_Bildschirmfoto_2025-04-06_um_13.20.32.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eKotlinConf 2025, happening May 21–23, is the must-attend event for Kotlin developers, featuring hands-on workshops and 100+ talks on Multiplatform, Compose, coroutines, Ktor, Spring, functional programming, and more. Learn from experts at JetBrains, Google, AWS, and beyond—don’t miss this chance to level up your Kotlin skills and connect with the global community!\n\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=IdxEbfLv65k\" target=\"_blank\"\u003e\n\u003cimg alt=\"\" width=\"90\" src=\"https://androidweekly.net/system/images/67f1aa/de3c93bc0e0c0058e0/square_Bildschirmfoto_2025-04-06_um_13.21.12.png\"/\u003e\n\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"\" width=\"5\" height=\"1\" src=\"https://imgssl.constantcontact.com/letters/images/1101116784221/S.gif\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eLearn how the SDK Runtime enhances Android app and SDK security and privacy by isolating third party code. This video covers the architecture, communication, permissions, and new distribution model, with more details in the video series.\n\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eJov Mit continues this Android development live stream with: automated end-to-end testing, design patterns: Bulder, Factory, Adapter, Facade, managing 3rd party library code \u0026amp; reusability, and more.\n\u003c/p\u003e\u003c/div\u003e\n\n\u003cdiv\u003e\u003cp\u003eChristopher Cartland is joined by Nam Nguyen, Software Engineer on Google Maps, and Carmen Jackson, Software Engineer on Android, to discuss how they optimize Android apps for performance.\n\u003c/p\u003e\u003c/div\u003e\n\n]]\u0026gt;\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
