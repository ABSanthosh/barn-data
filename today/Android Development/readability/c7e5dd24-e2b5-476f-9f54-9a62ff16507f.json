{
  "id": "c7e5dd24-e2b5-476f-9f54-9a62ff16507f",
  "title": "Fetch and Render GitHub Markdown without CORS",
  "link": "https://handstandsam.com/2024/05/02/fetch-and-render-github-markdown-without-cors/",
  "description": "I wanted to embed the contents of my GitHub project on another website, but the path to get there wasn’t straightforward. Here are the roadblocks I hit, and how I got around them. Skip to the end if you just want the final solution. Idea 1: Render in an iframe I’d love to just create […]",
  "author": "Sam Edwards",
  "published": "Thu, 02 May 2024 16:55:50 +0000",
  "source": "https://handstandsam.com/feed/",
  "categories": [
    "Web",
    "JavaScript"
  ],
  "byline": "Sam Edwards Published May 2, 2024",
  "length": 5115,
  "excerpt": "I wanted to embed the contents of my GitHub project on another website, but the path to get there wasn’t straightforward. Here are the roadblocks I hit, and how I got around them.",
  "siteName": "",
  "favicon": "",
  "text": "I wanted to embed the contents of my GitHub project on another website, but the path to get there wasn’t straightforward. Here are the roadblocks I hit, and how I got around them. Skip to the end if you just want the final solution. Idea 1: Render in an iframe I’d love to just create an iframe to show everything in my GitHub project on another website. An iframe seemed like a beautiful solution, but…. \u003ciframe src=\"https://github.com/handstandsam/ShoppingApp\"\u003e\u003c/iframe\u003e Roadblock: GitHub blocks iframes for its content. Idea 2: Fetch the HTML, and Render it Manually I thought I could just scrape the content from the website for my GitHub project and then render it on my site. However, I couldn’t pull arbitrary content from another web host due to CORS. Note: If I had a server I could do this because I wouldn’t have CORS issues, but I was trying to do this completely in a frontend web page without a server. Roadblock: CORS Browser Security Policies Idea 3: Use the GitHub API to fetch the README File GitHub has an awesome API that we can use to access the contents of a repository! I can’t use it to get the rendering of the entire project page, but I can access individual files like my README.md. https://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md This allows me to pull down the contents of the file. The problem is that I can’t do that just in the frontend browser itself due to CORS. Are you sensing a theme? Doing things in a browser is hard, but it helps make us safer on the web, so I can’t argue with that. Roadblock: CORS Browser Security Policies Idea 4: Use JSONP with the GitHub API JSONP (JSON with Padding) is a workaround for CORS. You basically load an arbitrary bit of JavaScript from a 3rd party site, and have it call an arbitrary function that you know the name of. Well, GitHub has support for JSONP! We will load JavaScript into our page from https://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md?callback=myCallback and when the loading is done, it will invoke myCallback(results) assuming that the remote server has support for JSONP. This exposes us to so many security vulnerabilities so PLEASE only do this with trusted sites. They could arbitrarily execute code within the context of your website and you wouldn’t know. Note: JSONP uses the same functionality of loading in 3rd party javascript to do things like Analytics tracking, or fancy animations with JS libraries like BootStrap JS. It’s just programatically creating a \u003cscript\u003e tag. Roadblock: The response to the API contains Base64 encoded content. Idea 5: Decode Base64 File Contents and Show README I was able to define my callback for the GitHub API and then render the text into a pre (preformatted text) element. I did this by Base64 Decoding the GitHub API response’s “content” field, and then programmatically creating a pre element and setting its textContent. function myCallback(response) { // Decode the Base64 Encoded Content let decodedContent = atob(response.data.content); // Create a \"pre\" HTML tag and render the content let pre = document.createElement(\"pre\"); pre.textContent = decodedContent; document.getElementsByTagName('body')[0].append(pre); } Roadblock: The contents weren’t formatted, just plain markdown. Idea 6: Use a JS Library to Render the Markdown There is a JavaScript library for everything. In this case I found markedjs/marked. I just give it a string of Markdown, and it’ll give me back the rendered HTML. \u003cscript src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"\u003e\u003c/script\u003e function githubMarkdownCallback(response) { // Decode the Base64 Encoded Content let rawMarkdown = atob(response.data.content); // Use the markedjs library to transform markdown -\u003e html let markdownHtml = marked.parse(rawMarkdown) // Add the new div to the body of the html page let div = document.createElement(\"div\"); div.innerHTML = markdownHtml; document.getElementsByTagName('body')[0].append(div); } FINAL SOLUTION! Fetch my project’s README.md contents from GitHub’s public API using JSONP and use markedjs to render the Markdown into HTML. \u003cscript src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e function myCallback(response) { // Decode the Base64 Encoded Content let rawMarkdown = atob(response.data.content); // Use the markedjs library to transform markdown -\u003e html let markdownHtml = marked.parse(rawMarkdown) // Add the new div to the body of the html page let div = document.createElement(\"div\"); div.innerHTML = markdownHtml; document.getElementsByTagName('body')[0].append(div); } let script = document.createElement('script'); script.src = 'https://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md?callback=myCallback'; document.getElementsByTagName('head')[0].appendChild(script); \u003c/script\u003e Related Content by TagJavaScript",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n\t\t\u003cmain id=\"content\" role=\"main\"\u003e\n\n\t\t\t\n\t\t\t\t\n\u003carticle id=\"post-2021\" itemscope=\"itemscope\" itemtype=\"http://schema.org/BlogPosting\" itemprop=\"blogPost\"\u003e\n\t\t\n\t\n\t\u003cdiv itemprop=\"mainContentOfPage\"\u003e\n\t\t\n\u003cp\u003eI wanted to embed the contents of \u003ca href=\"https://github.com/handstandsam/ShoppingApp\" data-type=\"link\" data-id=\"https://github.com/handstandsam/ShoppingApp\"\u003emy GitHub project\u003c/a\u003e on another website, but the path to get there wasn’t straightforward. Here are the roadblocks I hit, and how I got around them.\u003c/p\u003e\n\n\n\n\u003cp\u003eSkip to the end if you just want the final solution.\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 1: Render in an iframe\u003c/h2\u003e\n\n\n\n\u003cp\u003eI’d love to just create an iframe to show everything in \u003ca href=\"https://github.com/handstandsam/ShoppingApp\" data-type=\"link\" data-id=\"https://github.com/handstandsam/ShoppingApp\"\u003emy GitHub project\u003c/a\u003e on another website. An iframe seemed like a beautiful solution, but….\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"markup\"\u003e\u0026lt;iframe src=\u0026#34;https://github.com/handstandsam/ShoppingApp\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-02-at-1.00.16 PM.png\"\u003e\u003cimg decoding=\"async\" width=\"300\" height=\"157\" src=\"https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-02-at-1.00.16 PM-300x157.png\" alt=\"\" srcset=\"https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-02-at-1.00.16 PM-300x157.png 300w, https://handstandsam.com/wp-content/uploads/2024/05/Screenshot-2024-05-02-at-1.00.16 PM.png 580w\" sizes=\"(max-width: 300px) 100vw, 300px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRoadblock\u003c/strong\u003e: GitHub blocks iframes for its content.\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 2: Fetch the HTML, and Render it Manually\u003c/h2\u003e\n\n\n\n\u003cp\u003eI thought I could just scrape the content from the website for \u003ca href=\"https://github.com/handstandsam/ShoppingApp\" data-type=\"link\" data-id=\"https://github.com/handstandsam/ShoppingApp\"\u003emy GitHub project\u003c/a\u003e and then render it on my site. However, I couldn’t pull arbitrary content from another web host due to \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eNote: If I had a server I could do this because I wouldn’t have \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e issues, but I was trying to do this completely in a frontend web page without a server.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRoadblock\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e Browser Security Policies\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 3: Use the GitHub API to fetch the README File\u003c/h2\u003e\n\n\n\n\u003cp\u003eGitHub has an \u003ca href=\"https://docs.github.com/en/rest/repos/contents\" data-type=\"link\" data-id=\"https://docs.github.com/en/rest/repos/contents\"\u003eawesome API that we can use to access the contents of a repository\u003c/a\u003e! I can’t use it to get the rendering of the entire project page, but I can access individual files like my \u003ca href=\"https://github.com/handstandsam/ShoppingApp/blob/main/README.md\" data-type=\"link\" data-id=\"https://github.com/handstandsam/ShoppingApp/blob/main/README.md\"\u003eREADME.md\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre title=\"\"\u003e\u003ccode lang=\"kotlin\"\u003ehttps://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis allows me to pull down the contents of the file. The problem is that I can’t do that just in the frontend browser itself due to \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eAre you sensing a theme? Doing things in a browser is hard, but it helps make us safer on the web, so I can’t argue with that.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRoadblock\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e Browser Security Policies\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 4: Use JSONP with the GitHub API\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JSONP\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/JSONP\"\u003eJSONP\u003c/a\u003e (JSON with Padding) is a workaround for CORS.  You basically load an arbitrary bit of JavaScript from a 3rd party site, and have it call an arbitrary function that you know the name of.\u003c/p\u003e\n\n\n\n\u003cp\u003eWell, \u003ca href=\"https://docs.github.com/en/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests\" data-type=\"link\" data-id=\"https://docs.github.com/en/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests\"\u003eGitHub has support for JSONP\u003c/a\u003e! We will load JavaScript into our page from \u003ca href=\"https://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md?callback=myCallback\"\u003ehttps://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md?callback=myCallback\u003c/a\u003e and when the loading is done, it will invoke \u003ccode\u003emyCallback(results)\u003c/code\u003e assuming that the remote server has support for JSONP.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis exposes us to so many security vulnerabilities so \u003cstrong\u003e\u003cspan\u003ePLEASE\u003c/span\u003e\u003c/strong\u003e only do this with trusted sites.  They could arbitrarily execute code within the context of your website and you wouldn’t know.\u003c/p\u003e\n\n\n\n\u003cp\u003eNote: JSONP uses the same functionality of loading in 3rd party javascript to do things like Analytics tracking, or fancy animations with JS libraries like \u003ca href=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/\" data-type=\"link\" data-id=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/\"\u003eBootStrap JS\u003c/a\u003e. It’s just programatically creating a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRoadblock\u003c/strong\u003e: The response to the API contains Base64 encoded content.\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 5: Decode Base64 File Contents and Show README\u003c/h2\u003e\n\n\n\n\u003cp\u003eI was able to define my callback for the GitHub API and then render the text into a \u003ccode\u003epre\u003c/code\u003e (preformatted text) element. I did this by Base64 Decoding the GitHub API response’s “content” field, and then programmatically creating a \u003ccode\u003epre\u003c/code\u003e element and setting its \u003ccode\u003etextContent\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"javascript\"\u003efunction myCallback(response) {\n    // Decode the Base64 Encoded Content\n    let decodedContent = atob(response.data.content);\n\n    // Create a \u0026#34;pre\u0026#34; HTML tag and render the content\n    let pre = document.createElement(\u0026#34;pre\u0026#34;);\n    pre.textContent = decodedContent;\n    document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].append(pre);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRoadblock\u003c/strong\u003e: The contents weren’t formatted, just plain markdown.\u003c/p\u003e\n\n\n\n\u003ch2\u003eIdea 6: Use a JS Library to Render the Markdown\u003c/h2\u003e\n\n\n\n\u003cp\u003eThere is a JavaScript library for everything.  In this case I found \u003ca href=\"https://github.com/markedjs/marked\" data-type=\"link\" data-id=\"https://github.com/markedjs/marked\"\u003emarkedjs/marked\u003c/a\u003e.  I just give it a string of Markdown, and it’ll give me back the rendered HTML.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/marked/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"javascript\"\u003efunction githubMarkdownCallback(response) {\n    // Decode the Base64 Encoded Content\n    let rawMarkdown = atob(response.data.content);\n\n    // Use the markedjs library to transform markdown -\u0026gt; html\n    let markdownHtml = marked.parse(rawMarkdown)\n\n    // Add the new div to the body of the html page\n    let div = document.createElement(\u0026#34;div\u0026#34;);\n    div.innerHTML = markdownHtml;\n    document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].append(div);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2\u003eFINAL SOLUTION!\u003c/h2\u003e\n\n\n\n\u003cp\u003eFetch my project’s \u003ca href=\"https://github.com/handstandsam/ShoppingApp/blob/main/README.md\" data-type=\"link\" data-id=\"https://github.com/handstandsam/ShoppingApp/blob/main/README.md\"\u003eREADME.md\u003c/a\u003e contents from GitHub’s public API using \u003ca href=\"https://docs.github.com/en/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests\" data-type=\"link\" data-id=\"https://docs.github.com/en/rest/using-the-rest-api/using-cors-and-jsonp-to-make-cross-origin-requests\"\u003eJSONP\u003c/a\u003e and use \u003ca href=\"https://github.com/markedjs/marked\" data-type=\"link\" data-id=\"https://github.com/markedjs/marked\"\u003emarkedjs\u003c/a\u003e to render the Markdown into HTML.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"markup\"\u003e\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/marked/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;\nfunction myCallback(response) {\n    // Decode the Base64 Encoded Content\n    let rawMarkdown = atob(response.data.content);\n\n    // Use the markedjs library to transform markdown -\u0026gt; html\n    let markdownHtml = marked.parse(rawMarkdown)\n\n    // Add the new div to the body of the html page\n    let div = document.createElement(\u0026#34;div\u0026#34;);\n    div.innerHTML = markdownHtml;\n    document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].append(div);\n}\n\nlet script = document.createElement(\u0026#39;script\u0026#39;);\nscript.src = \u0026#39;https://api.github.com/repos/handstandsam/ShoppingApp/contents/README.md?callback=myCallback\u0026#39;;\ndocument.getElementsByTagName(\u0026#39;head\u0026#39;)[0].appendChild(script);\n\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\t\t\n\t\t\t\t\t\t\t\t\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\u003c/article\u003e\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\u003cdiv id=\"taglist\"\u003e\u003cul\u003e\u003cli\u003eRelated Content by Tag\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://handstandsam.com/tag/javascript/\" rel=\"tag\"\u003eJavaScript\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\n\t\t\t\n\t\t\u003c/main\u003e\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
