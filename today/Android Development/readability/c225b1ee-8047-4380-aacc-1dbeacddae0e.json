{
  "id": "c225b1ee-8047-4380-aacc-1dbeacddae0e",
  "title": "249 - Java and the JDK: Powering the Android Landscape with Michael Bailey",
  "link": "https://fragmentedpodcast.com/",
  "description": "In this episode of our podcast, we explore the diverse landscape of Java versions within the Android ecosystem. Our guest is Michael Bailey, a seasoned Java expert who has been a frequent presence on our show since the early days of our podcast. We kick off with a solid foundation, discussing the differences between JDK and JRE, as well as the distinctions between the available Java JDKs. We also guide listeners through Android Studio settings, exploring how to select a suitable JDK, its utilization, and how it relates to JAVA_VERSION on one's home path/terminal.As we dig deeper, we start to unpack some of the crucial Android app settings. From compileOptions to sourceCompatibility/targetCompatibility, we shed light on why these versions are important. We also demystify the compileSdk vs minSdk vs targetSdk, and how they interconnect. Drawing from Kaushiks's recent experience in building a new app, we provide real-life examples that can better clarify these topics for our listeners.We conclude the episode by providing some valuable resources for further understanding and exploration. This episode is designed to be a comprehensive guide to understanding and navigating the intricacies of Java versions in Android development.LinksMichaely Fragmented Episode 9 (Google IO Special)Fragmented Episode 10 (core java)Fragmented Episode 78 (testing strategies)OpenJDK on GitHubFooJayCompile Options ReferenceSDK extensions@Yogurtearl explanationJpackageFind Michael Online@yogurtearl on TwitterDonn's Git CourseNeed to learn Git? Donn has the course for you. In this FREE course you'll learn everything you need to know in order to start working with Git everyday. Watch it here.AndroidJobs.IOJob postings are FREE on AndroidJobs.IO üéâSign up to get notified of new jobs on a weekly basis as well.AndroidJobs.IOSoftware FreelancingFreelance Tactics BookDonn's Freelancing Content on YouTubeContact@fragmentedcast on Twitter or our YouTube channelDonn@donnfelkerdonnfelkerDonn's YouTubeDonn's WebsiteKaushikkau.sh (has links to all my networks)twitter.kau.shmastodon.kau.shyoutube.kau.sh (on YouTube)Disclaimer: Many of the links we share to products are affiliate links. They help support the production of Fragmented. Thank you for your support.",
  "author": "Kaushik Gopal",
  "published": "Mon, 10 Jul 2023 10:45:00 +0000",
  "source": "https://feeds.simplecast.com/LpAGSLnY",
  "categories": null,
  "byline": "",
  "length": 9644,
  "excerpt": "The #1 Android Developer Podcast capturing the zeitgest of #androiddev hosted by Kaushik Gopal",
  "siteName": "",
  "favicon": "https://fragmentedpodcast.com/images/favicon.png",
  "text": "We capture the zeitgeist of Android development. Kaushik \u0026 Donn are your hosts and speak to leading experts, learning how they navigate the landscape of Android development. 15 minutes, every two weeks. Recent episodes Download directly We‚Äôre back from the hiatus with our SemiQuicentennial episode! With the momentous 250 comes some big announcements and a shift in the way we do things. Listen to find out the details! Download directly In this episode of our podcast, we explore the diverse landscape of Java versions within the Android ecosystem. Our guest is Michael Bailey, a seasoned Java expert who has been a frequent presence on our show since the early days of our podcast. We kick off with a solid foundation, discussing the differences between JDK and JRE, as well as the distinctions between the available Java JDKs. We also guide listeners through Android Studio settings, exploring how to select a suitable JDK, its utilization, and how it relates to JAVA_VERSION on one‚Äôs home path/terminal. As we dig deeper, we start to unpack some of the crucial Android app settings. From compileOptions to sourceCompatibility/targetCompatibility, we shed light on why these versions are important. We also demystify the compileSdk vs minSdk vs targetSdk, and how they interconnect. Drawing from Kaushiks‚Äôs recent experience in building a new app, we provide real-life examples that can better clarify these topics for our listeners. We conclude the episode by providing some valuable resources for further understanding and exploration. This episode is designed to be a comprehensive guide to understanding and navigating the intricacies of Java versions in Android development. Download directly In this edition of Fragmented, we‚Äôre thrilled to host Ishan Khanna, a software engineer at Tinder who possesses great enthusiasm for feature flags and A/B testing. Donn discusses why he invited Ishan on the show, highlighting Ishan‚Äôs passion for feature flagging and A/B testing. The conversation kicks off with an insightful story from Ishan about feature flagging at Booking.com, leading to a discussion on the difference between A/B Testing and Feature Flags, when and why to introduce feature flagging, and how to measure its effectiveness. The show also focuses on the benefits and risks of feature flagging, along with ways to manage potential complexities in the codebase. We then delve deeper into the topic of feature flagging, covering how to get started, what to look for in a tool, and the role of testing. Discussion points include the best practices for rollout percentages, considerations for multi-platform implementation, and the specifics of targeting in feature flagging. The conversation wraps up with an exploration of available tools for those looking to introduce feature flagging or A/B testing frameworks into their operations, examining when it might be necessary to build a bespoke solution. The episode offers a wealth of resources for listeners, including links to an array of feature flagging and A/B testing tools, such as Firebase Remote Config, Optimizely, and LaunchDarkly. For more insight into the topics discussed, Ishan recommends his Droidcon Berlin talk on ‚ÄòCustomer Driven Development‚Äô and Stuart Frisby‚Äôs talk on A/B Testing. To reach out to Ishan, listeners can contact him via Twitter, LinkedIn, or his website. Download directly In this episode, we talk to, Siggi Jonsson. Siggi helps guide us through the complex and often confusing world of Android app modularization. Our conversation will begin by shedding light on the importance of modularization, what triggers the need for breaking projects into multiple modules, and how modularization relates to team size, feature teams, and code ownership. This discussion is aimed at demystifying how and why developers often choose to modularize their applications. As we move forward, we‚Äôll dive into more advanced aspects of modularization, such as the challenges of scaling and the potential missteps in over-modularization. Drawing on real-world experiences, we‚Äôll examine the red flags that signal a need for revising your modularization strategy. This part of our discussion will also highlight some specific tools and techniques that can help manage and visualize your project‚Äôs modularization, and Siggi will share his own experiences and insights into how these tools have assisted in his modularization strategy. In the final part of the episode, we‚Äôll touch on the benefits and strategies of proper modularization. Siggi will share practical advice on how to tackle big projects, fix issues with modularization, and make a smooth transition from monolithic to modular structures. We‚Äôll also talk about some tools that can be handy in this process. Before closing, Siggi will offer his top tips for developers embarking on their modularization journey and share some valuable resources to help them. Siggi will also provide updates on his latest work and how listeners can reach out to him. Download directly In this podcast episode, we have the pleasure to host Fred Porci√∫ncula, a Google Developer Expert (GDE) known for his work with Kotlin Inject and his invaluable contributions to the Android development community. Fred offers his expertise on Dependency Injection (DI), Kotlin Multiplatform (KMP), and how they intersect. We kick off the conversation by discussing Dependency Injection (DI), its importance, and the options available to developers, including Dagger, Hilt, Anvil, Koin, and Kotlin-Inject. Fred explains the use and impact of DI in the Kotlin Multiplatform (KMP) world, considering Dagger‚Äôs current lack of KMP support and debating whether one should use separate DI tools for Android apps and KMP components. Delving further into Kotlin-Inject, we explore its features, usage, and how it differentiates itself from other DI solutions. Topics discussed include its unique handling of Scopes, its support of constructor injection, and its utility in building dependency graphs. Furthermore, we examine the timeless debate of Dependency Injection versus Service Locator. Toward the end of the episode, Fred presents his thoughts on the advantages and disadvantages of exclusively using Kotlin-Inject throughout an application. We also tackle the concept of ‚ÄúVanilla Injection‚Äù ‚Äì refraining from using DI libraries at all. For further learning, we recommend resources like Fred‚Äôs insightful article on transitioning from Dagger/Hilt to Kotlin-Inject, a Dagger issue discussing KSP support, and a Kotlin-Inject discussion on Anvil-like features. Links to these resources, among others, are provided below. Don‚Äôt miss out on this engaging and informative episode with Fred Porci√∫ncula! Download directly In this episode, Donn and Kaushik talk to an old friend of the show, Colin White, about Treehouse, a combination of the Redwood and Zipline libraries. Colin is a Staff Engineer at Cash App (Block). Redwood is a multiplatform Compose library that allows you to target multiple UI toolkits on various native platforms. Ultimately this allows you to share presentation logic. Zipline is a multiplatform JavaScript engine for Android, iOS, and the JVM, which uses Kotlin for calls in/out of the JavaScript land. This allows you to update the application logic of your apps without the traditional song and dance of the app store approval and release process. Treehouse is the combination of both libraries, Redwood and Zipline. Listen in to learn more ‚Ä¶ Download directly In this episode, Donn and Kaushik announce that they are steering the podcast back into Android waters. In other words, the Fragmented Podcast is returning to its roots ‚Ä¶ we‚Äôre back to being a 100% Android Development focused show. Download directly In this episode, Donn and Kaushik talk to long-time friend Dan Lew about his recent career switch from Android developer to TypeScript/Node.js/Progressive Web App Developer (and more). It‚Äôs an interesting discussion that covers ‚Ä¶ Why Dan decided to leave the Android world The challenges he faced when he moved from one tech stack to another How to prepare for a big change like this (mentally, financially, etc.) How to create the life you want live vi by identifying what‚Äôs important to you and much more ‚Ä¶ Download directly In this episode, Donn and Kaushik talk about one of the age old bike shedding topics ‚Äì code formatting, and how you can solve it with automation and tools. Code formatting can turn into an endless debate amongst peers and teams, and what Kaushik and Donn have found is that this can be delegated to a tool and automated. Freeing you and your team of having to worry about proper indentation, bracket placement, etc. By relying on a well defined tool and some automation you can clean your code up, make it much more uniform and easier maintain. We talk about ktfmt, a Kotlin code formatter that was released by Facebook. We dive into ktlint, detekt and more. We also dive into spotless which can help you by integrating ktfmt into your gradle build pipeline. All Episodes ‚Üí",
  "image": "http://fragmentedpodcast.com//images/avatar.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \u003cp\u003e\u003cimg src=\"https://fragmentedpodcast.com/images/avatar.webp\" alt=\"Fragmented - #1 Android developer podcast\"/\u003e\n\n    \u003cimg src=\"https://fragmentedpodcast.com/images/banner.webp\" alt=\"Fragmented - #1 Android developer podcast\"/\u003e\u003c/p\u003e\u003carticle\u003e\n        \u003cp\u003e\n            We capture the zeitgeist of Android development.\n        \u003c/p\u003e\n        \u003cp\u003e\n            \u003ca href=\"https://fragmentedpodcast.com/about\"\u003eKaushik \u0026amp; Donn\u003c/a\u003e are your hosts and speak to leading experts, learning how\n            they navigate the landscape of Android development.\n        \u003c/p\u003e\n\n        \u003cp\u003e\n            15 minutes, every two weeks.\n        \u003c/p\u003e\n    \u003c/article\u003e\n\n\n\n\u003csection\u003e\n        \u003cp\u003eRecent episodes\u003c/p\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/6334f44e-ba1e-4176-9996-003c36525191/audio/f46e45eb-01df-43f4-a444-4222bbcbeb95/default_tc.mp3?nocache\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eWe‚Äôre back from the hiatus with our SemiQuicentennial episode! With the momentous 250 comes some big announcements and a shift in the way we do things.\u003c/p\u003e\n\u003cp\u003eListen to find out the details!\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/c763ebae-3eb3-47f4-aa35-f4c4d0a2a30f/audio/0e9f5ec5-9869-46f9-a3b1-765bf29ff246/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode of our podcast, we explore the diverse landscape of Java versions within the Android ecosystem. Our guest is Michael Bailey, a seasoned Java expert who has been a frequent presence on our show since the early days of our podcast. We kick off with a solid foundation, discussing the differences between JDK and JRE, as well as the distinctions between the available Java JDKs. We also guide listeners through Android Studio settings, exploring how to select a suitable JDK, its utilization, and how it relates to JAVA_VERSION on one‚Äôs home path/terminal.\u003c/p\u003e\n\u003cp\u003eAs we dig deeper, we start to unpack some of the crucial Android app settings. From compileOptions to sourceCompatibility/targetCompatibility, we shed light on why these versions are important. We also demystify the compileSdk vs minSdk vs targetSdk, and how they interconnect. Drawing from Kaushiks‚Äôs recent experience in building a new app, we provide real-life examples that can better clarify these topics for our listeners.\u003c/p\u003e\n\u003cp\u003eWe conclude the episode by providing some valuable resources for further understanding and exploration. This episode is designed to be a comprehensive guide to understanding and navigating the intricacies of Java versions in Android development.\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/f27a36f8-4b2c-45a5-b35f-12ec055a9579/audio/04a9e235-0e68-4f53-b312-5cdde4af09dc/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this edition of Fragmented, we‚Äôre thrilled to host Ishan Khanna, a software engineer at Tinder who possesses great enthusiasm for feature flags and A/B testing. Donn discusses why he invited Ishan on the show, highlighting Ishan‚Äôs passion for feature flagging and A/B testing. The conversation kicks off with an insightful story from Ishan about feature flagging at Booking.com, leading to a discussion on the difference between A/B Testing and Feature Flags, when and why to introduce feature flagging, and how to measure its effectiveness. The show also focuses on the benefits and risks of feature flagging, along with ways to manage potential complexities in the codebase.\u003c/p\u003e\n\u003cp\u003eWe then delve deeper into the topic of feature flagging, covering how to get started, what to look for in a tool, and the role of testing. Discussion points include the best practices for rollout percentages, considerations for multi-platform implementation, and the specifics of targeting in feature flagging. The conversation wraps up with an exploration of available tools for those looking to introduce feature flagging or A/B testing frameworks into their operations, examining when it might be necessary to build a bespoke solution.\u003c/p\u003e\n\u003cp\u003eThe episode offers a wealth of resources for listeners, including links to an array of feature flagging and A/B testing tools, such as Firebase Remote Config, Optimizely, and LaunchDarkly. For more insight into the topics discussed, Ishan recommends his Droidcon Berlin talk on ‚ÄòCustomer Driven Development‚Äô and Stuart Frisby‚Äôs talk on A/B Testing. To reach out to Ishan, listeners can contact him via Twitter, LinkedIn, or his website.\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/826d28dd-aad2-4f86-99ff-ac1957ed7b66/audio/cbb50aab-67b4-4730-b6cf-da9e26509a13/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode, we talk to, Siggi Jonsson. Siggi helps guide us through the complex and often confusing world of Android app modularization. Our conversation will begin by shedding light on the importance of modularization, what triggers the need for breaking projects into multiple modules, and how modularization relates to team size, feature teams, and code ownership. This discussion is aimed at demystifying how and why developers often choose to modularize their applications.\u003c/p\u003e\n\u003cp\u003eAs we move forward, we‚Äôll dive into more advanced aspects of modularization, such as the challenges of scaling and the potential missteps in over-modularization. Drawing on real-world experiences, we‚Äôll examine the red flags that signal a need for revising your modularization strategy. This part of our discussion will also highlight some specific tools and techniques that can help manage and visualize your project‚Äôs modularization, and Siggi will share his own experiences and insights into how these tools have assisted in his modularization strategy.\u003c/p\u003e\n\u003cp\u003eIn the final part of the episode, we‚Äôll touch on the benefits and strategies of proper modularization. Siggi will share practical advice on how to tackle big projects, fix issues with modularization, and make a smooth transition from monolithic to modular structures. We‚Äôll also talk about some tools that can be handy in this process. Before closing, Siggi will offer his top tips for developers embarking on their modularization journey and share some valuable resources to help them. Siggi will also provide updates on his latest work and how listeners can reach out to him.\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/7c168db3-00e0-47ce-ae1c-1b7afc19f7d3/audio/29e0f235-5960-4554-a3c7-e1c41f854675/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this podcast episode, we have the pleasure to host Fred Porci√∫ncula, a Google Developer Expert (GDE) known for his work with Kotlin Inject and his invaluable contributions to the Android development community. Fred offers his expertise on Dependency Injection (DI), Kotlin Multiplatform (KMP), and how they intersect.\u003c/p\u003e\n\u003cp\u003eWe kick off the conversation by discussing Dependency Injection (DI), its importance, and the options available to developers, including Dagger, Hilt, Anvil, Koin, and Kotlin-Inject. Fred explains the use and impact of DI in the Kotlin Multiplatform (KMP) world, considering Dagger‚Äôs current lack of KMP support and debating whether one should use separate DI tools for Android apps and KMP components.\u003c/p\u003e\n\u003cp\u003eDelving further into Kotlin-Inject, we explore its features, usage, and how it differentiates itself from other DI solutions. Topics discussed include its unique handling of Scopes, its support of constructor injection, and its utility in building dependency graphs. Furthermore, we examine the timeless debate of Dependency Injection versus Service Locator.\u003c/p\u003e\n\u003cp\u003eToward the end of the episode, Fred presents his thoughts on the advantages and disadvantages of exclusively using Kotlin-Inject throughout an application. We also tackle the concept of ‚ÄúVanilla Injection‚Äù ‚Äì refraining from using DI libraries at all.\u003c/p\u003e\n\u003cp\u003eFor further learning, we recommend resources like Fred‚Äôs insightful article on transitioning from Dagger/Hilt to Kotlin-Inject, a Dagger issue discussing KSP support, and a Kotlin-Inject discussion on Anvil-like features. Links to these resources, among others, are provided below. Don‚Äôt miss out on this engaging and informative episode with Fred Porci√∫ncula!\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/349bd9af-af59-4d52-9549-73b633192262/audio/4dccbcdc-2138-4e33-8673-d33f2ac4b5a0/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode, Donn and Kaushik talk to an old friend of the show, Colin White, about Treehouse, a combination of the Redwood and Zipline libraries.\u003c/p\u003e\n\u003cp\u003eColin is a Staff Engineer at Cash App (Block).\u003c/p\u003e\n\u003cp\u003eRedwood is a multiplatform Compose library that allows you to target multiple UI toolkits on various native platforms. Ultimately this allows you to share presentation logic.\u003c/p\u003e\n\u003cp\u003eZipline is a multiplatform JavaScript engine for Android, iOS, and the JVM, which uses Kotlin for calls in/out of the JavaScript land. This allows you to update the application logic of your apps without the traditional song and dance of the app store approval and release process.\u003c/p\u003e\n\u003cp\u003eTreehouse is the combination of both libraries, Redwood and Zipline. Listen in to learn more ‚Ä¶\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/bc0a1eb9-a4bc-43a1-9e63-d9499346c775/audio/cf89cb1a-5747-4cce-ba77-759691a52083/default_tc.mp3?nocache\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode, Donn and Kaushik announce that they are steering the podcast back into Android waters. In other words, the Fragmented Podcast is returning to its roots ‚Ä¶ we‚Äôre back to being a 100% Android Development focused show.\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/476bb5e5-6029-4c91-bd1b-7317d48e2ca2/audio/e317db83-2238-46f1-8617-f8fad0bd6a92/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode, Donn and Kaushik talk to long-time friend Dan Lew about his recent career switch from Android developer to TypeScript/Node.js/Progressive Web App Developer (and more).\u003c/p\u003e\n\u003cp\u003eIt‚Äôs an interesting discussion that covers ‚Ä¶\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhy Dan decided to leave the Android world\u003c/li\u003e\n\u003cli\u003eThe challenges he faced when he moved from one tech stack to another\u003c/li\u003e\n\u003cli\u003eHow to prepare for a big change like this (mentally, financially, etc.)\u003c/li\u003e\n\u003cli\u003eHow to create the life you want live vi by identifying what‚Äôs important to you\u003c/li\u003e\n\u003cli\u003eand much more ‚Ä¶\u003c/li\u003e\n\u003c/ul\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n        \u003cdiv\u003e\n\n    \n\n    \u003carticle\u003e\n        \n\u003cp\u003e\n    \u003ca href=\"https://cdn.simplecast.com/audio/20f35050-e836-44cd-8f7f-fd13e8cb2e44/episodes/f7e8b5bc-8872-49e2-94f6-cf354591449b/audio/98e95abc-7a69-4687-8847-af97139422ba/default_tc.mp3?aid=rss_feed\u0026amp;feed=LpAGSLnY\"\u003eDownload directly\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this episode, Donn and Kaushik talk about one of the age old bike shedding topics ‚Äì code formatting, and how you can solve it with automation and tools.\u003c/p\u003e\n\u003cp\u003eCode formatting can turn into an endless debate amongst peers and teams, and what Kaushik and Donn have found is that this can be delegated to a tool and automated. Freeing you and your team of having to worry about proper indentation, bracket placement, etc. By relying on a well defined tool and some automation you can clean your code up, make it much more uniform and easier maintain.\u003c/p\u003e\n\u003cp\u003eWe talk about ktfmt, a Kotlin code formatter that was released by Facebook. We dive into ktlint, detekt and more. We also dive into spotless which can help you by integrating ktfmt into your gradle build pipeline.\u003c/p\u003e\n    \u003c/article\u003e\n\n\n\u003c/div\u003e\n        \n    \u003c/section\u003e\u003cp\u003e\u003ca href=\"https://fragmentedpodcast.com/episodes\"\u003e\n        All Episodes ‚Üí\n    \u003c/a\u003e\n\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
