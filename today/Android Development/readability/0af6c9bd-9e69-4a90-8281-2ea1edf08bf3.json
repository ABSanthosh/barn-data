{
  "id": "0af6c9bd-9e69-4a90-8281-2ea1edf08bf3",
  "title": "Jetpack Compose: First Impressions and Learning Resources",
  "link": "https://getstream.io/blog/jetpack-compose-impressions-resources/",
  "description": "Jetpack Compose is finally in beta. Here are my first impressions using its beta, and some recommended resources for getting started with it.",
  "author": "MÃ¡rton Braun",
  "published": "Fri, 05 Mar 2021 19:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "MÃ¡rton B.",
  "length": 8102,
  "excerpt": "As you most certainly already know, Jetpack Compose is the hot new thing for Android UI development. Its promise is to save us by making allâ€¦",
  "siteName": "Stream",
  "favicon": "https://getstream.io/icon.png",
  "text": "Androidâ€™s current UI toolkit is over 10 years old nowâ€¦ Do stop me if youâ€™ve heard this before ðŸ˜‰As you most certainly already know, Jetpack Compose is the hot new thing for Android UI development. Its promise is to save us by making all the pain points of the old View system and XML layouts go away. Stream now provides a Jetpack Compose Chat SDK. Check out the Compose Chat Messaging Tutorial and give it a try today! After many many preview versions, it got to beta status about a week ago. Here's what it's like to use Compose at the moment, and some of the best places to learn more about it. The good First of all, Compose is exciting. It makes a lot of basic UI work really simple, and you get to write it all in Kotlin, making use of all the language's powerful features! The APIs have great discoverability in Android Studio, since all of it is just Kotlin code that you can access via code completion. This makes it truly easy to get started. Kotlin's type safety also works wonders in Compose. No passing in dp values instead of pixels, or mixing up vertical and horizontal alignment options. Everything is strongly typed, and the compiler safeguards you from making many, many mistakes. The declarative style and state management of Compose are great as well. Writing down what you want to appear based on state is not only clear and explicit, but also a blessing after the problematic state management of the View system. Given how much effort is going into developing and marketing Compose, it's almost certainly the future of Android UI development. That being said, the XML system will probably never fully go away. Just like the Java to Kotlin shift, it will take a couple years until the new standard really kicks in, and we'll occasionally still find ourselves interacting with code from the before times. So... Get on board soon, just don't expect all of the old system to disappear overnight. I'd certainly still suggest learning the old XML-based system to anyone starting Android Development today - unless they're somehow very certain that they'll never work on an existing project. Jetpack Compose comes with some cool Android Studio tooling as well. Flutter users will probably already be familiar with the handy Surround with shortcuts that let you wrap pieces of code in a new widget, and the same makes an appearance in Studio now. Select some code, invoke Surround with (Ctrl+Alt+J on Windows, âŒ¥âŒ˜J on macOS), and then hit R for a Row, C for a Column, or W for an arbitrary widget. Another quick tip: creating a new Composable will immediately add a parameter list and a body to it, and then place your cursor inside its parameter list, to let you immediately add modifiers and other parameters. If you don't want to add any parameters, you can hit Tab to quickly skip to defining its content. The bad Now, let's see the bad part, continuing with the tooling theme. To run Compose, you'll have to run the latest Canary version of Android Studio. This version has... Some issues. From my personal experience of a few days: IDE Previews (which would be a really nice feature for Compose) sometimes don't load at all, or don't update as changes are made (even after rebuilding). Re-running either the full app or just deploying a @Preview to a device was faster than using the IDE preview feature 100% of the time. The debugger never connected to either an emulator or a physical device when running Compose apps. Still didn't manage to solve this, though I heard others had more success. Logcat doesn't show app names when running apps, making it difficult to filter the logs for the current app. When running the emulator in a tool window inside the IDE, the emulator tab occasionally doesn't appear in the preview version of Studio. I had times when I used the emulator tab inside another project in a stable Android Studio instead... I eventually gave in and reverted to using an emulator in a separate window. Sometimes Studio just froze up entirely, and its process had to be killed and restarted. This happened about once a day or so. I heard some similar anecdotal stories from others, including excessive resource usage when using Compose compared to other projects. These were occasionally fixable by restarting, invalidating caches, restarting adb, and similar \"usual\" debugging practices. Another pain point of using Jetpack Compose can be that looking up how to do things is a bit hit-and-miss for the time being. For example, when you land on StackOverflow questions about it, you'll often find answers that say \"this is how to do it in dev11\", or \"here's the new API for this in alpha3\", but then none of those APIs will be present in the current beta version. Of course, on one hand it's nice that Compose went through a lot of iteration and they weren't afraid to change and evolve APIs - that's what the preview versions are for. On the other, it makes for a somewhat unpleasant experience for developers trying to build things on the latest Compose version. Thankfully this situation will naturally improve over time, but we'll have to wait a bit to get enough new, up-to-date answers in. The resources Since StackOverflow won't be your best friend for learning Compose yet, where else can you go? First, there's Google's official resources, which are a decent start: Their best resource by far is the written documentation pages - get started with them here. These include a lot of helpful explanation and snippets for designing things in Compose, and also touch on more advanced topics like navigation, architecture, and interop with existing code. There's a lot of video content about Compose as well, under the #AndroidShow branding. I'll recommend skipping most of this, especially the livestream and Q\u0026A parts - they're not really developer-focused, and contain a lot of hype and marketing. What contains a lot of value, however, are their screencasts about Compose features (which are also included in sections of the written docs). You can find these in this YouTube playlist. If you're new to Compose, the Beta overview video is also worth watching. For more longer-form introductory content, these videos from last year are all really helpful: Jetpack Compose, Thinking in Compose, Compose by example, and Compose for existing apps. For hands-on practice, take a look at Google's Compose Pathway that includes videos, articles, and code labs. This goes into significant detail in some parts - feel free to skip the things you're not interested in learning deeply immediately, otherwise it'll take a long time to get through it. I also found that some of the codelabs here were outdated (not using beta1 APIs yet), so be prepared to fiddle a bit with the code snippets provided, or to debug dependencies. Again, this is something that will be improved soon. If you prefer reading, RayWenderlich team's Jetpack Compose book has really solid, professional content in it, providing a complete tour for you to get started with: A nice exploration of the basic UI building blocks of Compose, as well as multiple example apps. (This, again, is slightly outdated, as its samples use alpha10. Fingers crossed that it gets a revision soon.) For even more long-form video explanations, guidance, and demos, Exploring Jetpack Compose and Advanced Jetpack Compose by Filip BabiÄ‡ are both excellent. To find quick snippets for how to perform basic things, the Compose Academy site can come in handy. Finally, exploring Compose on your own is also a great way to learn about it. All of the APIs you use are just Kotlin code, so exploring through code completion, and jumping into the underlying implementation in Android Studio to read the source are super easy. The in-code documentation for most Compose APIs also tends to be excellent. Conclusion Are you excited and ready for Jetpack Compose? We know that we are, and you can look forward to more Compose content from us soon, including in our Android Chat SDK. Tweet at us @getstream_io and tell us what you think about Compose, and what you found to be the most useful way to learn about it!",
  "image": "https://stream-blog-v2.imgix.net/blog/wp-content/uploads/1f31663d4492b374353af0c51acc267b/pexels-cottonbro-4709838.jpg?auto=compress%2Cformat\u0026ixlib=php-3.3.0",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003eAndroidâ€™s current UI toolkit is over 10 years old nowâ€¦ Do stop me if youâ€™ve heard this before ðŸ˜‰\u003c/p\u003e\u003carticle\u003e\u003cp\u003eAs you most certainly already know, Jetpack Compose is the hot new thing for Android UI development. Its promise is to save us by making all the pain points of the old View system and XML layouts go away.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStream now provides a \u003ca href=\"https://getstream.io/chat/sdk/compose/\"\u003eJetpack Compose Chat SDK\u003c/a\u003e. Check out the \u003ca href=\"https://getstream.io/tutorials/android-chat/\"\u003eCompose Chat Messaging Tutorial\u003c/a\u003e and give it a try today!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAfter many many preview versions, it got to beta status about a week ago. Here\u0026#39;s what it\u0026#39;s like to use Compose at the moment, and some of the best places to learn more about it.\u003c/p\u003e\n\u003ch2 id=\"the-good\"\u003eThe good\u003c/h2\u003e\n\u003cp\u003eFirst of all, Compose is \u003cem\u003eexciting\u003c/em\u003e. It makes a lot of basic UI work really simple, and you get to write it all in Kotlin, making use of all the language\u0026#39;s powerful features! The APIs have great discoverability in Android Studio, since all of it is just Kotlin code that you can access via code completion. This makes it truly easy to get started.\u003c/p\u003e\n\u003cp\u003eKotlin\u0026#39;s type safety also works wonders in Compose. No passing in \u003ccode\u003edp\u003c/code\u003e values instead of pixels, or mixing up vertical and horizontal alignment options. Everything is strongly typed, and the compiler safeguards you from making many, many mistakes.\u003c/p\u003e\n\u003cp\u003eThe declarative style and state management of Compose are great as well. Writing down what you want to appear based on state is not only clear and explicit, but also a blessing after the problematic state management of the View system.\u003c/p\u003e\n\u003cp\u003eGiven how much effort is going into developing and marketing Compose, it\u0026#39;s almost certainly the future of Android UI development. That being said, the XML system will probably never fully go away. Just like the Java to Kotlin shift, it will take a couple years until the new standard really kicks in, and we\u0026#39;ll occasionally still find ourselves interacting with code from the \u003cem\u003ebefore times\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSo... Get on board soon, just don\u0026#39;t expect all of the old system to disappear overnight. I\u0026#39;d certainly still suggest learning the old XML-based system to anyone starting Android Development today - unless they\u0026#39;re somehow \u003cem\u003every\u003c/em\u003e certain that they\u0026#39;ll never work on an existing project.\u003c/p\u003e\n\u003cp\u003eJetpack Compose comes with some cool Android Studio tooling as well. Flutter users will probably already be familiar with the handy \u003cem\u003eSurround with\u003c/em\u003e shortcuts that let you wrap pieces of code in a new widget, and the same makes an appearance in Studio now.\u003c/p\u003e\n\u003cp\u003eSelect some code, invoke \u003cem\u003eSurround with\u003c/em\u003e (\u003ckbd\u003eCtrl+Alt+J\u003c/kbd\u003e on Windows, \u003ckbd\u003eâŒ¥âŒ˜J\u003c/kbd\u003e on macOS), and then hit \u003ckbd\u003eR\u003c/kbd\u003e for a \u003ccode\u003eRow\u003c/code\u003e, \u003ckbd\u003eC\u003c/kbd\u003e for a \u003ccode\u003eColumn\u003c/code\u003e, or \u003ckbd\u003eW\u003c/kbd\u003e for an arbitrary widget.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c4a02271f1e719e42d6c322fe0bffbee/compose_wrap.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c4a02271f1e719e42d6c322fe0bffbee/compose_wrap.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c4a02271f1e719e42d6c322fe0bffbee/compose_wrap.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c4a02271f1e719e42d6c322fe0bffbee/compose_wrap.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The Surround With popup with options\" loading=\"lazy\" width=\"700\" height=\"303\"/\u003e\n\u003cp\u003eAnother quick tip: creating a new Composable will immediately add a parameter list and a body to it, and then place your cursor inside its parameter list, to let you immediately add modifiers and other parameters.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d16b6cc630ea2094358ea93b2a3f053d/compose_column_edit.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d16b6cc630ea2094358ea93b2a3f053d/compose_column_edit.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d16b6cc630ea2094358ea93b2a3f053d/compose_column_edit.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d16b6cc630ea2094358ea93b2a3f053d/compose_column_edit.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Creating a new Column\" loading=\"lazy\" width=\"700\" height=\"94\"/\u003e\n\u003cp\u003eIf you don\u0026#39;t want to add any parameters, you can hit \u003ccode\u003eTab\u003c/code\u003e to quickly skip to defining its content.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/702689241e2f5f44919a1bd38e2c6558/compose_column_done.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/702689241e2f5f44919a1bd38e2c6558/compose_column_done.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/702689241e2f5f44919a1bd38e2c6558/compose_column_done.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/702689241e2f5f44919a1bd38e2c6558/compose_column_done.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Creating a new Column after skipping to its body\" loading=\"lazy\" width=\"700\" height=\"78\"/\u003e\n\u003ch2 id=\"the-bad\"\u003eThe bad\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026#39;s see the bad part, continuing with the tooling theme. To run Compose, you\u0026#39;ll have to run the latest Canary version of Android Studio. This version has... Some issues.\u003c/p\u003e\n\u003cp\u003eFrom my personal experience of a few days:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIDE Previews (which would be a really nice feature for Compose) sometimes don\u0026#39;t load at all, or don\u0026#39;t update as changes are made (even after rebuilding). Re-running either the full app or just deploying a \u003ccode\u003e@Preview\u003c/code\u003e to a device was faster than using the IDE preview feature 100% of the time.\u003c/li\u003e\n\u003cli\u003eThe debugger never connected to either an emulator or a physical device when running Compose apps. Still didn\u0026#39;t manage to solve this, though I heard others had more success.\u003c/li\u003e\n\u003cli\u003eLogcat doesn\u0026#39;t show app names when running apps, making it difficult to filter the logs for the current app.\u003c/li\u003e\n\u003cli\u003eWhen running the emulator in a tool window inside the IDE, the emulator tab occasionally doesn\u0026#39;t appear in the preview version of Studio. I had times when I used the emulator tab inside another project in a stable Android Studio instead... I eventually gave in and reverted to using an emulator in a separate window.\u003c/li\u003e\n\u003cli\u003eSometimes Studio just froze up entirely, and its process had to be killed and restarted. This happened about once a day or so.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI heard some similar anecdotal stories from others, including excessive resource usage when using Compose compared to other projects. These were occasionally fixable by restarting, invalidating caches, restarting adb, and similar \u0026#34;usual\u0026#34; debugging practices.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eAnother pain point of using Jetpack Compose can be that looking up how to do things is a bit hit-and-miss for the time being. For example, when you land on StackOverflow questions about it, you\u0026#39;ll often find answers that say \u0026#34;this is how to do it in dev11\u0026#34;, or \u0026#34;here\u0026#39;s the new API for this in alpha3\u0026#34;, but then none of those APIs will be present in the current beta version.\u003c/p\u003e\n\u003cp\u003eOf course, on one hand it\u0026#39;s nice that Compose went through a lot of iteration and they weren\u0026#39;t afraid to change and evolve APIs - that\u0026#39;s what the preview versions are for. \u003c/p\u003e\n\u003cp\u003eOn the other, it makes for a somewhat unpleasant experience for developers trying to build things on the latest Compose version. Thankfully this situation will naturally improve over time, but we\u0026#39;ll have to wait a bit to get enough new, up-to-date answers in.\u003c/p\u003e\n\u003ch2 id=\"the-resources\"\u003eThe resources\u003c/h2\u003e\n\u003cp\u003eSince StackOverflow won\u0026#39;t be your best friend for learning Compose yet, where else can you go?\u003c/p\u003e\n\u003cp\u003eFirst, there\u0026#39;s Google\u0026#39;s official resources, which are a decent start:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTheir best resource by far is the written documentation pages - \u003ca href=\"https://developer.android.com/jetpack/compose/documentation\" target=\"_blank\"\u003eget started with them here\u003c/a\u003e. These include a lot of helpful explanation and snippets for designing things in Compose, and also touch on more advanced topics like navigation, architecture, and interop with existing code.\u003c/li\u003e\n\u003cli\u003eThere\u0026#39;s a lot of video content about Compose as well, under the #AndroidShow branding. I\u0026#39;ll recommend skipping most of this, especially the livestream and Q\u0026amp;A parts - they\u0026#39;re not really developer-focused, and contain a lot of hype and marketing.\u003cbr/\u003e\nWhat contains a lot of value, however, are their screencasts about Compose features (which are also included in sections of the written docs). You can find these \u003ca href=\"https://www.youtube.com/playlist?list=PLWz5rJ2EKKc8fZY3smX9CPx9Y_O80ycAd\" target=\"_blank\"\u003ein this YouTube playlist\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eIf you\u0026#39;re new to Compose, the \u003ca href=\"https://www.youtube.com/watch?v=Ef1xKWjA9E8\" target=\"_blank\"\u003eBeta overview video\u003c/a\u003e is also worth watching. For more longer-form introductory content, these videos from last year are all really helpful:  \u003ca href=\"https://www.youtube.com/watch?v=U5BwfqBpiWU\u0026amp;\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e, \u003ca href=\"https://www.youtube.com/watch?v=SMOhl9RK0BA\" target=\"_blank\"\u003eThinking in Compose\u003c/a\u003e, \u003ca href=\"https://www.youtube.com/watch?v=DDd6IOlH3io\" target=\"_blank\"\u003eCompose by example\u003c/a\u003e, and \u003ca href=\"https://www.youtube.com/watch?v=PjQdFmiDgwk\" target=\"_blank\"\u003eCompose for existing apps\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eFor hands-on practice, take a look at Google\u0026#39;s \u003ca href=\"https://developer.android.com/courses/pathways/compose\" target=\"_blank\"\u003eCompose Pathway\u003c/a\u003e that includes videos, articles, and code labs. This goes into significant detail in some parts - feel free to skip the things you\u0026#39;re not interested in learning deeply immediately, otherwise it\u0026#39;ll take a long time to get through it.\n\u003cul\u003e\n\u003cli\u003eI also found that some of the codelabs here were outdated (not using beta1 APIs yet), so be prepared to fiddle a bit with the code snippets provided, or to debug dependencies. Again, this is something that will be improved soon.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you prefer reading, \u003ca href=\"https://www.raywenderlich.com/books/jetpack-compose-by-tutorials/v1.0\" target=\"_blank\"\u003eRayWenderlich team\u0026#39;s Jetpack Compose book\u003c/a\u003e has really solid, professional content in it, providing a complete tour for you to get started with: A nice exploration of the basic UI building blocks of Compose, as well as multiple example apps. (This, again, is slightly outdated, as its samples use alpha10. Fingers crossed that it gets a revision soon.)\u003c/p\u003e\n\u003cp\u003eFor even more long-form video explanations, guidance, and demos, \u003ca href=\"https://www.youtube.com/watch?v=2n2mtNfg25s\" target=\"_blank\"\u003eExploring Jetpack Compose\u003c/a\u003e and \u003ca href=\"https://www.youtube.com/watch?v=eL3G1Basx1o\" target=\"_blank\"\u003eAdvanced Jetpack Compose\u003c/a\u003e by Filip BabiÄ‡ are both excellent.\u003c/p\u003e\n\u003cp\u003eTo find quick snippets for how to perform basic things, the \u003ca href=\"https://compose.academy/\" target=\"_blank\"\u003eCompose Academy site\u003c/a\u003e can come in handy.\u003c/p\u003e\n\u003cp\u003eFinally, exploring Compose on your own is also a great way to learn about it. All of the APIs you use are just Kotlin code, so exploring through code completion, and jumping into the underlying implementation in Android Studio to read the source are super easy. The in-code documentation for most Compose APIs also tends to be excellent. \u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAre you excited and ready for Jetpack Compose? We know that we are, and you can look forward to more Compose content from us soon, including in our \u003ca href=\"https://getstream.io/chat/sdk/android/\"\u003eAndroid Chat SDK\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTweet at us \u003ca href=\"https://twitter.com/getstream_io\" target=\"_blank\"\u003e@getstream_io\u003c/a\u003e and tell us what you think about Compose, and what you found to be the most useful way to learn about it!\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2021-03-05T11:06:32Z",
  "modifiedTime": null
}
