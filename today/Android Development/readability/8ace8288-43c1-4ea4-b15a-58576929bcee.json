{
  "id": "8ace8288-43c1-4ea4-b15a-58576929bcee",
  "title": "Understanding ViewModel Scoping in Jetpack Compose",
  "link": "https://proandroiddev.com/understanding-viewmodel-scoping-in-jetpack-compose-7c838d84c376?source=rss----c72404660798---4",
  "description": "",
  "author": "Sahil Thakar",
  "published": "Wed, 19 Mar 2025 07:16:13 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "mobile-app-development",
    "kotlin",
    "ios",
    "java"
  ],
  "byline": "Sahil Thakar",
  "length": 3979,
  "excerpt": "Many people have misconceptions about the scope of the ViewModel. In this short article, I‚Äôll clear them up and explain ViewModel scoping in a simple way. üß© There are two distinct places where the‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "üìù Let‚Äôs Dive Into the Code!Let‚Äôs look at the code first and then break it down for a clear understanding. This will be super easy! üòÉNote: This is just an example of ViewModel‚Äôs scope. ‚ö†Ô∏è Logging inside a composable is not a best practice. üö´@AndroidEntryPointclass MainActivity : ComponentActivity() { private val viewmodel: MainViewModel by viewModels() override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) enableEdgeToEdge() setContent { Scaffold { paddingValues -\u003e Box( modifier = Modifier .padding(paddingValues) .fillMaxSize(), ) { NavDemo(viewmodel) } } } }}@Composablefun NavDemo(navDemo: MainViewModel = hiltViewModel()) { Log.e(\"NavDemo-Viewmodel\", navDemo.hashCode().toString()) val navController = rememberNavController() NavHost(navController = navController, startDestination = \"main\") { composable(\"main\") { MainScreen(onItemClick = { navController.navigate(\"details\") }) } composable(\"details\") { DetailsScreen(onBack = { navController.popBackStack() }) } }}@Composablefun MainScreen(viewModel: MainViewModel = hiltViewModel(), onItemClick: () -\u003e Unit) { Log.e(\"MainScreen-Viewmodel\", viewModel.hashCode().toString()) Column( modifier = Modifier .fillMaxSize() .padding(16.dp) ) { Text( text = \"Main Screen\", style = MaterialTheme.typography.headlineMedium, modifier = Modifier.padding(bottom = 16.dp) ) Box( modifier = Modifier .size(100.dp) .background(Color.Blue, shape = RoundedCornerShape(8.dp)) .clickable { onItemClick() } ) PlayerA() PlayerB() }}@Composablefun PlayerA(viewModel: MainViewModel = hiltViewModel()) { Log.e(\"PlayerA-Viewmodel\", viewModel.hashCode().toString()) Text(text = \"text\", fontSize = 12.sp, color = Color.Magenta)}@Composablefun PlayerB(viewModel: MainViewModel = hiltViewModel()) { Log.e(\"PlayerB-Viewmodel\", viewModel.hashCode().toString()) Text(text = \"text\", fontSize = 12.sp, color = Color.Magenta)}@Composablefun DetailsScreen(viewModel: MainViewModel = hiltViewModel(), onBack: () -\u003e Unit) { Log.e(\"DetailsScreen-Viewmodel\", viewModel.hashCode().toString()) Column( modifier = Modifier .fillMaxSize() .padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally ) { Text( text = \"Details Screen\", style = MaterialTheme.typography.headlineMedium, modifier = Modifier.padding(bottom = 16.dp) ) Box( modifier = Modifier .size(200.dp) // Different size for transition effect .background(Color.Blue, shape = RoundedCornerShape(8.dp)) ) Spacer(modifier = Modifier.height(16.dp)) Button(onClick = onBack) { Text(\"Go Back\") } }}Output:-üßê Explanation:-If you look closely, you‚Äôll notice that three different instances of MainViewModel have been created. üîÑüëÄü§î Why Three Instances?From the logs, you can see three distinct hashCode() values:üîπ Instance A: Created using by viewModels() in MainActivity, scoped to the Activity. üîπ Instance B: Created using hiltViewModel() in MainScreen, PlayerA, and PlayerB, scoped to the \"main\" destination. üîπ Instance C: Created using hiltViewModel() in DetailsScreen, scoped to the \"details\" destination.üîç The Reason ‚Äî Scoping Mismatch‚úÖ by viewModels() ‚Üí Scopes the ViewModel to the Activity. ‚úÖ hiltViewModel() in a NavHost ‚Üí Scopes the ViewModel to navigation destinations (NavBackStackEntry). ‚úÖ Each navigation destination gets its own ViewModel instance unless explicitly shared. üîÑWhat if you want the same instance of ViewModel across the app?",
  "image": "https://miro.medium.com/v2/resize:fit:1200/0*9ywEVB2yluZV-JyY.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"f8f8\"\u003eüìù Let‚Äôs Dive Into the Code!\u003c/h2\u003e\u003cp id=\"655f\"\u003eLet‚Äôs look at the code first and then break it down for a clear understanding. This will be super easy! üòÉ\u003c/p\u003e\u003cp id=\"f840\"\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This is just an example of ViewModel‚Äôs scope. ‚ö†Ô∏è Logging inside a composable is \u003cstrong\u003enot\u003c/strong\u003e a best practice. üö´\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"883b\"\u003e@AndroidEntryPoint\u003cbr/\u003eclass MainActivity : ComponentActivity() {\u003cp\u003e    private val viewmodel: MainViewModel by viewModels()\u003c/p\u003e\u003cp\u003e    override fun onCreate(savedInstanceState: Bundle?) {\u003c/p\u003e\u003cp\u003e        super.onCreate(savedInstanceState)\u003cbr/\u003e        enableEdgeToEdge()\u003cbr/\u003e        setContent {\u003c/p\u003e\u003cp\u003e            Scaffold { paddingValues -\u0026gt;\u003c/p\u003e\u003cp\u003e                Box(\u003cbr/\u003e                    modifier = Modifier\u003cbr/\u003e                        .padding(paddingValues)\u003cbr/\u003e                        .fillMaxSize(),\u003cbr/\u003e                ) {\u003cbr/\u003e                    NavDemo(viewmodel)\u003cbr/\u003e                }\u003c/p\u003e\u003cp\u003e            }\u003c/p\u003e\u003cp\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun NavDemo(navDemo: MainViewModel = hiltViewModel()) {\u003cbr/\u003e    Log.e(\u0026#34;NavDemo-Viewmodel\u0026#34;, navDemo.hashCode().toString())\u003cbr/\u003e    val navController = rememberNavController()\u003c/p\u003e\u003cp\u003e    NavHost(navController = navController, startDestination = \u0026#34;main\u0026#34;) {\u003cbr/\u003e        composable(\u0026#34;main\u0026#34;) {\u003cbr/\u003e            MainScreen(onItemClick = { navController.navigate(\u0026#34;details\u0026#34;) })\u003cbr/\u003e        }\u003cbr/\u003e        composable(\u0026#34;details\u0026#34;) {\u003cbr/\u003e            DetailsScreen(onBack = { navController.popBackStack() })\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun MainScreen(viewModel: MainViewModel = hiltViewModel(), onItemClick: () -\u0026gt; Unit) {\u003cbr/\u003e    Log.e(\u0026#34;MainScreen-Viewmodel\u0026#34;, viewModel.hashCode().toString())\u003cbr/\u003e    Column(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .padding(16.dp)\u003cbr/\u003e    ) {\u003cbr/\u003e        Text(\u003cbr/\u003e            text = \u0026#34;Main Screen\u0026#34;,\u003cbr/\u003e            style = MaterialTheme.typography.headlineMedium,\u003cbr/\u003e            modifier = Modifier.padding(bottom = 16.dp)\u003cbr/\u003e        )\u003c/p\u003e\u003cp\u003e        Box(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .size(100.dp)\u003cbr/\u003e                .background(Color.Blue, shape = RoundedCornerShape(8.dp))\u003cbr/\u003e                .clickable { onItemClick() }\u003cbr/\u003e        )\u003c/p\u003e\u003cp\u003e        PlayerA()\u003c/p\u003e\u003cp\u003e        PlayerB()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun PlayerA(viewModel: MainViewModel = hiltViewModel()) {\u003cbr/\u003e    Log.e(\u0026#34;PlayerA-Viewmodel\u0026#34;, viewModel.hashCode().toString())\u003cbr/\u003e    Text(text = \u0026#34;text\u0026#34;, fontSize = 12.sp, color = Color.Magenta)\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun PlayerB(viewModel: MainViewModel = hiltViewModel()) {\u003cbr/\u003e    Log.e(\u0026#34;PlayerB-Viewmodel\u0026#34;, viewModel.hashCode().toString())\u003cbr/\u003e    Text(text = \u0026#34;text\u0026#34;, fontSize = 12.sp, color = Color.Magenta)\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003efun DetailsScreen(viewModel: MainViewModel = hiltViewModel(), onBack: () -\u0026gt; Unit) {\u003cbr/\u003e    Log.e(\u0026#34;DetailsScreen-Viewmodel\u0026#34;, viewModel.hashCode().toString())\u003cbr/\u003e    Column(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .padding(16.dp),\u003cbr/\u003e        horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e    ) {\u003cbr/\u003e        Text(\u003cbr/\u003e            text = \u0026#34;Details Screen\u0026#34;,\u003cbr/\u003e            style = MaterialTheme.typography.headlineMedium,\u003cbr/\u003e            modifier = Modifier.padding(bottom = 16.dp)\u003cbr/\u003e        )\u003c/p\u003e\u003cp\u003e        Box(\u003cbr/\u003e            modifier = Modifier\u003cbr/\u003e                .size(200.dp) // Different size for transition effect\u003cbr/\u003e                .background(Color.Blue, shape = RoundedCornerShape(8.dp))\u003cbr/\u003e        )\u003c/p\u003e\u003cp\u003e        Spacer(modifier = Modifier.height(16.dp))\u003c/p\u003e\u003cp\u003e        Button(onClick = onBack) {\u003cbr/\u003e            Text(\u0026#34;Go Back\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"8885\"\u003eOutput:-\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"2146\"\u003eüßê Explanation:-\u003c/p\u003e\u003cp id=\"1e24\"\u003eIf you look closely, you‚Äôll notice that \u003cstrong\u003ethree different instances\u003c/strong\u003e of \u003ccode\u003eMainViewModel\u003c/code\u003e have been created. üîÑüëÄ\u003c/p\u003e\u003ch2 id=\"41ba\"\u003eü§î Why Three Instances?\u003c/h2\u003e\u003cp id=\"2c56\"\u003eFrom the logs, you can see \u003cstrong\u003ethree distinct\u003c/strong\u003e \u003ccode\u003ehashCode()\u003c/code\u003e values:\u003c/p\u003e\u003cp id=\"e1b1\"\u003eüîπ \u003cstrong\u003eInstance A:\u003c/strong\u003e Created using \u003ccode\u003eby viewModels()\u003c/code\u003e in \u003ccode\u003eMainActivity\u003c/code\u003e, scoped to the \u003cstrong\u003eActivity\u003c/strong\u003e.\u003cbr/\u003e üîπ \u003cstrong\u003eInstance B:\u003c/strong\u003e Created using \u003ccode\u003ehiltViewModel()\u003c/code\u003e in \u003ccode\u003eMainScreen\u003c/code\u003e, \u003ccode\u003ePlayerA\u003c/code\u003e, and \u003ccode\u003ePlayerB\u003c/code\u003e, scoped to the \u003cstrong\u003e\u0026#34;main\u0026#34; destination\u003c/strong\u003e.\u003cbr/\u003e üîπ \u003cstrong\u003eInstance C:\u003c/strong\u003e Created using \u003ccode\u003ehiltViewModel()\u003c/code\u003e in \u003ccode\u003eDetailsScreen\u003c/code\u003e, scoped to the \u003cstrong\u003e\u0026#34;details\u0026#34; destination\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"242a\"\u003eüîç The Reason ‚Äî Scoping Mismatch\u003c/h2\u003e\u003cp id=\"f1d0\"\u003e‚úÖ \u003ccode\u003eby viewModels()\u003c/code\u003e ‚Üí Scopes the ViewModel to the \u003cstrong\u003eActivity\u003c/strong\u003e.\u003cbr/\u003e ‚úÖ \u003ccode\u003ehiltViewModel()\u003c/code\u003e in a \u003ccode\u003eNavHost\u003c/code\u003e ‚Üí Scopes the ViewModel to \u003cstrong\u003enavigation destinations\u003c/strong\u003e (\u003ccode\u003eNavBackStackEntry\u003c/code\u003e).\u003cbr/\u003e ‚úÖ Each \u003cstrong\u003enavigation destination\u003c/strong\u003e gets its own ViewModel instance unless explicitly shared. üîÑWhat if you want the same instance of ViewModel across the app?\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-03-15T18:19:31.661Z",
  "modifiedTime": null
}
