{
  "id": "0a232067-dd2e-463c-849f-0b4a7c7962fe",
  "title": "Honor and Internal Visibility",
  "link": "https://publicobject.com/2024/01/30/internal-visibility/",
  "description": "I don’t do many crimes. I don’t even do crimes that I could do without getting caught! Every single time my dog poops on the sidewalk, I pick it up. Even if nobody’s watching! I have honor.With that disclaimer out of the way, here’s instructions",
  "author": "Jesse Wilson",
  "published": "Tue, 30 Jan 2024 04:40:26 GMT",
  "source": "https://publicobject.com/rss/",
  "categories": null,
  "byline": "Jesse Wilson",
  "length": 2057,
  "excerpt": "I don’t do many crimes. I don’t even do crimes that I could do without getting caught! Every single time my dog poops on the sidewalk, I pick it up. Even if nobody’s watching! I have honor. With that disclaimer out of the way, here’s instructions on how to do an excellent crime... First, find a Kotlin API that you want to use, but can’t because it’s marked internal and you’re in a different module. Next, add this to the top of your file: @file:Suppress( \"CANNOT_OVERRIDE_INVISIBLE_MEMBER\",",
  "siteName": "Public Object",
  "favicon": "",
  "text": "I don’t do many crimes. I don’t even do crimes that I could do without getting caught! Every single time my dog poops on the sidewalk, I pick it up. Even if nobody’s watching! I have honor.With that disclaimer out of the way, here’s instructions on how to do an excellent crime...First, find a Kotlin API that you want to use, but can’t because it’s marked internal and you’re in a different module.Next, add this to the top of your file:@file:Suppress( \"CANNOT_OVERRIDE_INVISIBLE_MEMBER\", \"INVISIBLE_MEMBER\", \"INVISIBLE_REFERENCE\", )Finally, use the internal API! You’ve bribed the compiler.Pragmatic HacksUsing non-public APIs is dangerous and fragile. It’s occasionally also a good trade-off! I’ve done hacks like these a few times with mixed results:Moshi’s ClassFactory uses sun.misc.Unsafe to construct types without invoking their constructors. I’ve grown to dislike this behavior.OkHttp’s Platform reflectively accesses the private TrustManager from a SSLSocketFactory to fix a vulnerability in certificate pinning. This hack is carefully constrainted to JDK8, and the OkHttp function that relies on it has been deprecated since 2016.Redwood’s prepareEnvironment() uses the above internal trick to configure a global uncaught exception handler. There’s no public API for that so I asked for one.I don’t like needing to hack around access controls, but at least two of these crimes are righteous.Sharing with FriendsI’m asking for trouble when I use somebody else’s non-public API. Upgrading dependencies is riskier. Using different versions in tests vs. runtime is riskier. The reward needs to be substantial to justify these hazards!But sometimes I just wanna access my stuff from a different module that I also own. In one of Zipline’s tests, I’m using the zipline-cryptography module’s internals from the zipline module’s tests.Allowing my test code to hack around internal lets me reduce the visibility of my production code. I don’t need to publish public APIs to the world!HonorDon’t use the hack above. But if you must, do it honorably.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\n\t\t\n\n\n\n\n\n\u003cmain role=\"main\"\u003e\n\t\u003carticle\u003e\n\t\t\u003csection\u003e\n\t\t\t\t\u003cp\u003eI don’t do many crimes. I don’t even do crimes that I could do without getting caught! Every single time my dog poops on the sidewalk, I pick it up. Even if nobody’s watching! I have honor.\u003c/p\u003e\u003cp\u003eWith that disclaimer out of the way, here’s instructions on how to do an excellent crime...\u003c/p\u003e\u003cp\u003eFirst, find a Kotlin API that you want to use, but can’t because it’s marked \u003ccode\u003einternal\u003c/code\u003e and you’re in a different module.\u003c/p\u003e\u003cp\u003eNext, add this to the top of your file:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e@file:Suppress(\n  \u0026#34;CANNOT_OVERRIDE_INVISIBLE_MEMBER\u0026#34;,\n  \u0026#34;INVISIBLE_MEMBER\u0026#34;,\n  \u0026#34;INVISIBLE_REFERENCE\u0026#34;,\n)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, use the internal API! You’ve bribed the compiler.\u003c/p\u003e\u003ch3 id=\"pragmatic-hacks\"\u003ePragmatic Hacks\u003c/h3\u003e\u003cp\u003eUsing non-public APIs is dangerous and fragile. It’s occasionally also a good trade-off! I’ve done hacks like these a few times with mixed results:\u003c/p\u003e\u003cul\u003e\u003cli\u003eMoshi’s \u003ccode\u003eClassFactory\u003c/code\u003e \u003ca href=\"https://github.com/square/moshi/blob/7e1e2fe68314c1f116d619d2a3cfc8dfb8544456/moshi/src/main/java/com/squareup/moshi/ClassFactory.kt#L30\"\u003euses sun.misc.Unsafe\u003c/a\u003e to construct types without invoking their constructors. I’ve grown to dislike this behavior.\u003c/li\u003e\u003cli\u003eOkHttp’s \u003ccode\u003ePlatform\u003c/code\u003e \u003ca href=\"https://github.com/square/okhttp/blob/95d3adb122474a1f5a02e6f58a3f04a924f08a2a/okhttp/src/main/kotlin/okhttp3/internal/platform/Platform.kt#L93\"\u003ereflectively accesses\u003c/a\u003e the private \u003ccode\u003eTrustManager\u003c/code\u003e from a \u003ccode\u003eSSLSocketFactory\u003c/code\u003e to fix a vulnerability in certificate pinning. This hack is carefully constrainted to JDK8, and the OkHttp function that relies on it has been deprecated since 2016.\u003c/li\u003e\u003cli\u003eRedwood’s \u003ca href=\"https://github.com/cashapp/redwood/blob/db6bf96d4cc70b8855d7bddeabfa0c09f38fd512/redwood-treehouse-guest/src/jsMain/kotlin/app/cash/redwood/treehouse/PrepareEnvironmentJs.kt#L30\"\u003eprepareEnvironment()\u003c/a\u003e uses the above internal trick to configure a global uncaught exception handler. There’s no public API for that \u003ca href=\"https://github.com/Kotlin/kotlinx.coroutines/issues/3978\"\u003eso I asked for one\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI don’t like needing to hack around access controls, but at least two of these crimes are righteous.\u003c/p\u003e\u003ch3 id=\"sharing-with-friends\"\u003eSharing with Friends\u003c/h3\u003e\u003cp\u003eI’m asking for trouble when I use somebody else’s non-public API. Upgrading dependencies is riskier. Using different versions in tests vs. runtime is riskier. The reward needs to be substantial to justify these hazards!\u003c/p\u003e\u003cp\u003eBut sometimes I just wanna access my stuff from a different module that I also own. In one of \u003ca href=\"https://github.com/cashapp/zipline/blob/71a51c4e497c82be9a0bf062918308810e3878a4/zipline/src/hostTest/kotlin/app/cash/zipline/ZiplineCryptographyTest.kt#L22\"\u003eZipline’s tests\u003c/a\u003e, I’m using the \u003ccode\u003ezipline-cryptography\u003c/code\u003e module’s internals from the \u003ccode\u003ezipline\u003c/code\u003e module’s tests.\u003c/p\u003e\u003cp\u003eAllowing my test code to hack around \u003ccode\u003einternal\u003c/code\u003e lets me reduce the visibility of my production code. I don’t need to publish public APIs to the world!\u003c/p\u003e\u003ch3 id=\"honor\"\u003eHonor\u003c/h3\u003e\u003cp\u003eDon’t use the hack above. But if you must, do it honorably.\u003c/p\u003e\n\t\t\t\u003c/section\u003e\n\t\u003c/article\u003e\n\u003c/main\u003e\n\n\n\n\n\t\t\n\n\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-01-30T04:40:26Z",
  "modifiedTime": "2024-01-30T04:40:26Z"
}
