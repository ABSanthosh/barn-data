{
  "id": "cfba64cc-5d78-401a-a506-5a7b26d87ef2",
  "title": "Publishing Android libraries to MavenCentral in 2021",
  "link": "https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/",
  "description": "MavenCentral is the place to be for Android libraries, but publishing there is no easy task. With JCenter going away soon, this problem is more timely than ever. Here's the step-by-step guide on how to do it.",
  "author": "Márton Braun",
  "published": "Thu, 04 Feb 2021 16:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "Márton B.",
  "length": 29698,
  "excerpt": "Introduction This is an updated version of an article published two years ago on blog.autsoft.hu. This new version supports non-Android libr…",
  "siteName": "Stream",
  "favicon": "https://getstream.io/icon.png",
  "text": "Introduction This is an updated version of an article published two years ago on blog.autsoft.hu. This new version supports non-Android libraries, uses command line GPG handling instead of a specific Windows GUI app, includes new best practices, and uses GitHub Actions for its CI integration. Update, April 2021: addressed new Sonatype infra, moved to using AGP Maven Publish plugin integration for release components, and to using the new gradle-nexus/publish-plugin. Update, July 2021: fixed keyserver being used (thanks Chetan Gupta), moved to using in-memory GPG keys for signing (thanks Arkadii Ivanov). Update, July 2021: use JDK11 in GitHub Actions configuration to support new AGP versions. Creating a great library is hard work. Coming up with the idea, implementing it, making sure you have a nice, stable public API that you control carefully and maintain… That’s already lots to do. After all that, you need to make your library available to the public. Technically, you could distribute the .aar file any way you want, but the norm is publishing it to a publicly available Maven repository. It’s a good idea to use one of the well-established repositories that people are already likely to have in their projects, to make getting started with your library as easy as possible. The simplest choice would be JitPack, which might not give you much in terms of customization or control, but is very easy to get started with. All you have to do is publish your project on GitHub, and JitPack should be able to build and distribute it immediately. If you’re new to libraries, this is a great choice for getting your code out there. The next step up is Jcenter… Which no longer accepts new packages and will stop serving them in February 2022. Using it had its issues anyway. Finally, the fanciest place you can be in is The Central Repository via Sonatype OSSRH (OSS Repository Hosting), which I’ll refer to as simply MavenCentral from here on. This is the place to be if you’re a Maven dependency. Artifacts on MavenCentral are well trusted, and their integrity can be verified, as they are all required to be signed by the author. The publication process, however, and especially automating it, can be quite a headache. It’s easy to get stuck at many of the various steps no matter what tutorials you’re following, especially if they’re out of date, and this can get demotivating very quickly. It’s not uncommon to give up and just use Bintray/Jcenter instead – which is not an option anymore. So, if you feel up for a bit of a challenge, and want to do things the right way, here’s how you can get a library into MavenCentral, in 2021. Overview Here's a quick overview of the steps we'll go through: Registering a Jira account with Sonatype, and verifying your ownership of the group ID you want to publish your artifact with Generating a GPG key pair for signing your artifacts, publishing your public key, and exporting your private key Setting up Gradle tasks that can sign upload your artifacts to a staging repository Manually going through the process of checking your artifacts in the staging repo and releasing them via the Sonatype web UI Automating the close \u0026 release flow with a Gradle plugin Configuring CI workflows with GitHub Actions to automate all of the above A lot of ground to cover - let’s go! Prerequisites We’ll be using the following tools for this tutorial. You are free to use alternatives, but these are our favourites, and they work well for us. The command line gpg tool GPG Suite for macOS or Gpg4win for Windows are great choices, which also come with helpful GUIs. Many alternatives for different platforms are available here. GitHub as the public host of the library’s repository GitHub Actions as the continuous integration solution For this article, we’ll assume that you already have your library developed, and have uploaded it to a public GitHub repository. We’ll use our very own Android Chat SDK in our examples. This SDK is made up of multiple artifacts, but for simplification, we’ll just talk about publishing the low-level networking client, which lives in the stream-chat-android-client module of the GitHub repository. Shameless plug: if you need a chat solution in your Android app, check out our documentation and our Android In-App Messaging tutorial. Registering a Sonatype account First things first, you’ll need an account in the Sonatype Jira. Head over there and hit Sign up. Registration is straightforward, it just requires a username, an email, and a password. After you’ve logged in, you’ll need to open an issue, asking for access to the group ID that you’ll want to publish your project under. For us, based on our domain name (getstream.io), our group ID is io.getstream. If you own a domain, it’s best to choose the reversed version of that as your group ID. Otherwise, you’ll have to stick with having a GitHub-based group ID (see Choosing your Coordinates for more details). After choosing a language and an avatar, you’ll end up on this landing page - click on Create an issue: Select Community Support - Open Source Project Repository Hosting and then New Project: On the next page, fill out the following fields: Summary: Create repository for your.group.id.here Description: An optional, quick summary of what your project is. Group Id: Your group ID, as described a few sections earlier. Project URL: If your project has a webpage, the URL of that page. This can also be just the GitHub repository. SCM url: Your source control URL, i.e. the GitHub repository link. Username(s): If you want additional users (on top of the one you’re using for this process) to have deploy access for your group ID, you can list them here. Already Synced to Central: If you’re just getting started, this should be No. Soon after opening it, your issue will get a comment telling you to verify that you own the domain corresponding to your group ID: To comply with this, add the required TXT record to your domain - how to do this will depend on where your domain is registered, but it should be a fairly simple task. @ TXT 1800 OSSRH-12345 Make sure to replace the ticket number above with your actual number. When done, don’t forget to leave a comment on the issue so that Sonatype knows to check the record. You’ll eventually get a response telling you that you now have deploy rights - congrats! Generating a GPG key pair As we eluded to earlier, artifacts published on MavenCentral have to be signed by their publishers. You’ll need a GPG key for this. MavenCentral also has its own documentation for Working with PGP Signatures which you can reference if you get stuck along the way. This part requires access to the gpg command. There are several ways to install this via package managers, and there are many distributions available for different platforms on gnupg.org. GPG Suite is an easy-to-use distribution for macOS, and you can use Gpg4win if you’re on Windows. Both of these come with GUI tools that make managing keys easier. We'll stick to the command line here, but note that the old article shows how to use the Kleopatra GUI (included in Gpg4win) on Windows for generating and managing keys. To generate a new key, run the following command: gpg --full-gen-key You’ll be prompted to enter a few details: Kind of key: Accept the default value, which is (1) RSA and RSA. Key size: 4096. Expiration: You can input 0 to generate a key that never expires. You can also create a key that has an expiry date and then renew it periodically, if you prefer to do so. Real name, email: Should be obvious. Comment: Freeform text, can be left empty. After entering these details, you’ll be prompted to enter a passphrase to secure your key with. Here’s the full flow you'll go through, with a bit of truncation: Please select what kind of key you want: (1) RSA and RSA (default) ... Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (3072) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire ... Key is valid for? (0) 0 Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: Marton Braun Email address: marton@getstream.io Comment: Example key for tutorial You selected this USER-ID: \"Marton Braun (Example key for tutorial) \u003cmarton@getstream.io\u003e\" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O gpg: key 36271B955BEF072A marked as ultimately trusted gpg: revocation certificate stored as '.../gnupg/openpgp-revocs.d\\7A5D73CFEDDDBC915986998A36271B955BEF072A.rev' public and secret key created and signed. pub rsa4096 2021-02-03 [SC] 7A5D73CFEDDDBC915986998A36271B955BEF072A uid Marton Braun (Example key for tutorial) \u003cmarton@getstream.io\u003e sub rsa4096 2021-02-03 [E] You can always check the keys you have on your system by running gpg --list-keys: gpg: checking the trustdb .../gnupg/pubring.kbx ----------------------------------------------- pub rsa4096 2021-02-03 [SC] 7A5D73CFEDDDBC915986998A36271B955BEF072A uid [ultimate] Marton Braun (Example key for tutorial) \u003cmarton@getstream.io\u003e sub rsa4096 2021-02-03 [E] Your key’s ID is the last eight digits of its fingerprint (the long hexadecimal string above). In this case, this is 5BEF072A - take note of this, as you’ll use this later. You’ve generated a pair of keys - a private and a public key. You’ll keep the private one hidden and use it to sign your artifacts. The public key has to be uploaded to the server so that anyone can check that it belongs to you, which you can do by running the following (use your own key ID!): gpg --keyserver keyserver.ubuntu.com --send-keys 5BEF072A See Distributing Your Public Key for the list of supported keyservers. Your private key will need to be referenced by your project when it signs the artifacts. You can get a base 64 export of it with the following: gpg --export-secret-keys 5BEF072A | base64 Enter your passphrase that you’ve set earlier when prompted. You can either copy-paste this key from the terminal output later on, or save it to a file temporarily. Setting up publication in your project That’s a lot of work without touching your project, but the time has come to do that now. In the next few steps, you will: Add Gradle scripts that set up the publication plugin required to push artifacts to a repository. Configure the properties of the library you’re releasing. Grab the necessary authentication details along with the private key you’ve just exported. Root project Gradle configuration To easily automate publishing later, you'll use the gradle-nexus/publish-plugin tool. This has to be added in your project level (root) build.gradle file as a dependency. You can do this either with a plugins block: plugins { id(\"io.github.gradle-nexus.publish-plugin\") version \"1.1.0\" } Or with the classic buildscript dependency syntax, and then applying it in your project: buildscript { dependencies { classpath 'io.github.gradle-nexus:publish-plugin:1.1.0' } } apply plugin: 'io.github.gradle-nexus.publish-plugin' Check the releases page of the plugin to get the latest version. Next, create a new file called publish-root.gradle in a new scripts folder inside your project. This will contain global configuration you need for publishing, grabbing input values for your scripts, and defining the MavenCentral repository. Note that here we’ll go through the contents of these scripts part by part, with explanations. You can always find the complete, up-to-date files we use in production in the Stream Chat repository. In this file, you'll grab some configuration parameters. Using the script below, you’ll first set all the variables to a dummy empty string. This will let the project sync and build without the publication values set up, which would otherwise be an issue for your contributors. // Create variables with empty default values ext[\"signing.keyId\"] = '' ext[\"signing.password\"] = '' ext[\"signing.key\"] = '' ext[\"ossrhUsername\"] = '' ext[\"ossrhPassword\"] = '' ext[\"sonatypeStagingProfileId\"] = '' The first three variables will be used to sign the artifacts after they’re built: signing.keyId: the ID of the GPG key pair, the last eight characters of its fingerprint signing.password: the passphrase of the key pair signing.key: the base64 encoded private key you exported earlier osshrUsername and ossrhPassword: are your account details for MavenCentral, which you’ve chosen at the Jira registration step. We’ll get back to where sonatypeStagingProfileId comes from later on. Next, you’ll try to fetch the values of the variables from a local.properties file in the root of the project if it exists, otherwise you’ll look for them in the environment variables. The former lets you easily input these values locally on your machine, while the latter will help with setting up CI. File secretPropsFile = project.rootProject.file('local.properties') if (secretPropsFile.exists()) { // Read local.properties file first if it exists Properties p = new Properties() new FileInputStream(secretPropsFile).withCloseable { is -\u003e p.load(is) } p.each { name, value -\u003e ext[name] = value } } else { // Use system environment variables ext[\"ossrhUsername\"] = System.getenv('OSSRH_USERNAME') ext[\"ossrhPassword\"] = System.getenv('OSSRH_PASSWORD') ext[\"sonatypeStagingProfileId\"] = System.getenv('SONATYPE_STAGING_PROFILE_ID') ext[\"signing.keyId\"] = System.getenv('SIGNING_KEY_ID') ext[\"signing.password\"] = System.getenv('SIGNING_PASSWORD') ext[\"signing.key\"] = System.getenv('SIGNING_KEY') } Make sure that you’ve set these variables either in the aforementioned local.properties file or in your environment variables. If you want to use the property file, the syntax for it should look something like this (replace all the data here with your own!): signing.keyId=5BEF072A signing.password=signingPass123 signing.key=bm90IGEgcmVhbCBrZXksIHdoYXQgd2VyZSB5b3UgZXhwZWN0aW5n ossrhUsername=yourSonatypeUser ossrhPassword=yourSonatypePassword The last piece of code to add to this file will define the MavenCentral (Sonatype) repository where publishing should upload the artifacts. This relies on parameters fetched above to authenticate: // Set up Sonatype repository nexusPublishing { repositories { sonatype { stagingProfileId = sonatypeStagingProfileId username = ossrhUsername password = ossrhPassword } } } Important: If you're on the new Sonatype infrastructure (happens if you've registered after 2021-02-24 or requested it specifically), you have to add explicit URLs pointing to s01.oss.sonatype.org in this config block next to the existing parameters, like so: nexusPublishing { repositories { sonatype { /* Existing params here... */ nexusUrl.set(uri(\"https://s01.oss.sonatype.org/service/local/\")) snapshotRepositoryUrl.set(uri(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\")) } } } As the last step, apply this script in your root build.gradle file like so: apply from: \"${rootDir}/scripts/publish-root.gradle\" This completes the configuration needed in the root project. This gist contains the code blocks detailed above in a single snippet. The final, up-to-date script we use for publishing our SDK can be found in the Stream Chat repository. Per-module Gradle setup With the repository defined and parameters fetched, it's time to create a script that will define the artifacts in each module you want to publish. Create a new file called publish-module.gradle in the scripts folder. As its name suggests, this will be applied to each module that you want to publish an artifact from. In this file, first you’ll apply two plugins for publishing and signing. apply plugin: 'maven-publish' apply plugin: 'signing' Our publishing file also applies the Dokka plugin in this block, which you have to configure separately, if you want to use it. Then you declare the sources artifact for the library. This is really important - it will make sure that the source files are packaged along with the executable, compiled code, so that your users can easily jump to the definitions that they’re calling into within their IDE. task androidSourcesJar(type: Jar) { archiveClassifier.set('sources') if (project.plugins.findPlugin(\"com.android.library\")) { // For Android libraries from android.sourceSets.main.java.srcDirs from android.sourceSets.main.kotlin.srcDirs } else { // For pure Kotlin libraries, in case you have them from sourceSets.main.java.srcDirs from sourceSets.main.kotlin.srcDirs } } artifacts { archives androidSourcesJar } Once again, our real publishing file also adds an additional javadocJar task which ships Dokka-generated documentation - again, you can skip this if you want to. You’ll set two properties on the Gradle project itself here, the group ID and the version of the artifact. You’ll see where these uppercase values come from later on, when you apply this publication script in the module level build.gradle files. group = PUBLISH_GROUP_ID version = PUBLISH_VERSION Here comes the complicated part, providing all the metadata for the library you’re releasing. See the inline comments for the play-by-play explanation. afterEvaluate { publishing { publications { release(MavenPublication) { // The coordinates of the library, being set from variables that // we'll set up later groupId PUBLISH_GROUP_ID artifactId PUBLISH_ARTIFACT_ID version PUBLISH_VERSION // Two artifacts, the `aar` (or `jar`) and the sources if (project.plugins.findPlugin(\"com.android.library\")) { from components.release } else { from components.java } artifact androidSourcesJar artifact javadocJar // Mostly self-explanatory metadata pom { name = PUBLISH_ARTIFACT_ID description = 'Stream Chat official Android SDK' url = 'https://github.com/getstream/stream-chat-android' licenses { license { name = 'Stream License' url = 'https://github.com/GetStream/stream-chat-android/blob/main/LICENSE' } } developers { developer { id = 'zsmb13' name = 'Márton Braun' email = 'marton@getstream.io' } // Add all other devs here... } // Version control info - if you're using GitHub, follow the // format as seen here scm { connection = 'scm:git:github.com/getstream/stream-chat-android.git' developerConnection = 'scm:git:ssh://github.com/getstream/stream-chat-android.git' url = 'https://github.com/getstream/stream-chat-android/tree/main' } } } } } } Finally, this piece of code grabs signing related values from the root project, and then tells the signing plugin to sign the artifacts you’ve defined above as a publication. signing { useInMemoryPgpKeys( rootProject.ext[\"signing.keyId\"], rootProject.ext[\"signing.key\"], rootProject.ext[\"signing.password\"], ) sign publishing.publications } That’s the publish-module.gradle script all built up, ready to use. This gist contains the code blocks shown above in a single snippet. The final, up-to-date script we use for publishing our SDK can be found in the Stream Chat repository. Time to include this script in a module! Head to the build.gradle file of your library module - in our case, this is the stream-chat-android-client module - and add the following code: ext { PUBLISH_GROUP_ID = 'io.getstream' PUBLISH_VERSION = '4.5.2' PUBLISH_ARTIFACT_ID = 'stream-chat-android-client' } apply from: \"${rootProject.projectDir}/scripts/publish-module.gradle\" Here you finally see the group ID, artifact ID, and version being set, so that the publication script can make use of them. Then, the script itself is applied. This is all the code you need to add per-module if you are publishing your library in multiple artifacts, everything else is done by the common script. One last configuration step: you'll need to set the sonatypeStagingProfileId variable in your project. This value is an ID that Sonatype assigns to you, which the plugin uses to make sure all the artifacts end up in the right place during the upload. Go to https://oss.sonatype.org/ and log in. In the menu on the left, select Staging profiles, select your profile, and then look for the ID in the URL. Either set this value in your local.properties file, or set the corresponding environment variable. Your first release With all of that set up, you’re now ready to publish the first version of your library! For each repository you have defined in the publishing script, a Gradle task will be created to publish to that repository. In our example, our first module to publish is stream-chat-android-client, and we’ve named the repository sonatype. Therefore, we need to execute the following command to start publication (replace the module name with your own here): gradlew stream-chat-android-client:publishReleasePublicationToSonatypeRepository This will create a so-called staging repository for your library, and upload your artifacts (aar and sources) to that repository. At this point, you can check that all the artifacts you wanted to upload have made it, before hitting the release button. Now, go to the Sonatype site, and in the menu on the left, select Staging repositories. Find your repository (might be the only one in the list, might have to scroll around a bit for it), which has your group ID in its name. If you select it and look at the Content tab, you’ll see the files that have been uploaded. If everything looks good, and you’re done uploading files to the repository, you have to Close it. With the repository selected, hit the Close button in the toolbar on top. Confirm your action in the dialog (you don’t need to provide a description here). This will take just a few moments, you can follow along with it happening in the Activity tab. With the repository closed, you now have two final options available to you. Drop will throw away the repository, and cancel the publication process. Use this if something went wrong during the upload or you’ve changed your mind. Release, on the other hand, will publish the contents of your staging repository to MavenCentral. Again, you get a confirmation dialog, and you can choose Automatically Drop so that the staging repository is cleaned up after the release completes. The time this process takes can vary a bit. If you get lucky, your artifact will show up on MavenCentral in 10-15 minutes, but it could also take an hour or more in other cases. You can check whether your artifact is available by going to https://repo1.maven.org/maven2/ and browsing for it. For example, for our client, we can keep refreshing the following page to see if the new version is there: https://repo1.maven.org/maven2/io/getstream/stream-chat-android-client/. If you see the package via those links, Gradle will also be able to pull it if mavenCentral() is added as a repository and you add your library as a dependency. Search indexing is a separate, even longer process, so it can take about two hours for your artifact to show up on search.maven.org. If this was your first release, you should at this point go back and comment on your original Jira issue, to let them know that your repository setup and publication is working. Automating Sonatype actions That was quite the adventure! To make things smoother for subsequent releases, you can automate the entire release flow with the publishing plugin that you already have configured in the project. This, in theory, would mean that you don’t have to revisit the Sonatype UI ever again. In practice, you’ll do that more often than you’d like when the plugin (really, the Sonatype API it calls) breaks or misbehaves, so it's worth being familiar with. The plugin provides a Gradle task that you can use to close and then release your staging repository with one simple call: gradlew closeAndReleaseSonatypeStagingRepository At this point, you can upload and publish your library by just invoking these two Gradle tasks in sequence - pretty convenient! As a final step, let’s hook this into a CI pipeline. Continuous integration Since the library is hosted on GitHub anyway, we use GitHub Actions for running the publication Gradle tasks automatically. Whatever CI solution you’re using, setting up publication with it will consist of two main steps: Getting your secret variables in place. Invoking the two Gradle tasks. Your secret variables - for the list of these, look at the publishing script again - can simply go into Repository secrets (Add each of these by going to Settings -\u003e Secrets within your GitHub repository): Now, let’s create the GitHub Actions workflow that will put all of this together. The configuration for this will go in the .github/workflows/publish.yml file of the repository. This publish workflow will run every time a new release is created in the repository (you can also change the triggers to run when a tag is created, for example). Again, see the inline comments for some explanation of what each step does. If you’re new to GitHub Actions, check out their introductory documentation first. name: Publish on: release: # We'll run this workflow when a new GitHub release is created types: [released] jobs: publish: name: Release build and publish runs-on: ubuntu-latest steps: - name: Check out code uses: actions/checkout@v2 - name: Set up JDK 11 uses: actions/setup-java@v2 with: distribution: adopt java-version: 11 # Builds the release artifacts of the library - name: Release build run: ./gradlew :stream-chat-android-client:assembleRelease # Generates other artifacts (javadocJar is optional) - name: Source jar and dokka run: ./gradlew androidSourcesJar javadocJar # Runs upload, and then closes \u0026 releases the repository - name: Publish to MavenCentral run: ./gradlew publishReleasePublicationToSonatypeRepository --max-workers 1 closeAndReleaseSonatypeStagingRepository env: OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }} OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }} SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }} SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }} SIGNING_KEY: ${{ secrets.SIGNING_KEY }} SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }} MavenCentral uploads tend to be… Flaky, to put it nicely. Here are some recommendations to have fewer issues with them: Perform all your Gradle upload tasks in a single job, on a single machine. The --max-workers 1 option used above guarantees that the upload task runs on a single thread, even if parallel builds are otherwise configured. It’s also a good idea to put the upload task (all of them, if you’re uploading multiple modules’ worth of artifacts) in a different Gradle invocation than the assemble \u0026 signing tasks, as you see it done above, so that they run closely together. If a long time passes between your upload calls, or if they originate from different CI machines, you might see problems such as multiple staging repositories being created for you on Sonatype with your files scattered all over them. Even if you do everything described above right, you might still get random upload errors, or timeouts either during the upload or while the plugin is trying to close and release the repository. At this point, being able to look at the staging repository on the Sonatype UI and manually closing/dropping/releasing repositories will come in handy to fix things up. If your staging repository seems okay (has correct contents), and it just failed to close, you can close and release it yourself. If it looks messed up somehow, or you ended up with multiple staging repositories, it’s best to drop them all and then run the upload workflow again. Reminder: our up-to-date publishing workflow is always available in our GitHub repository. Conclusion Well, that was quite a journey. We hope that this detailed guide helped you get up and running with MavenCentral publication. You can follow us on Twitter @getstream_io for more great technical content - please tweet at us if you've successfully set up publishing following these steps! You can also reach the author @zsmb13 if you have any questions. If you're looking for a Kotlin-first, powerful Chat SDK to use in your Android app, check out our Android documentation and our Android Chat tutorial. If you're interested in library development, you'll find these articles helpful as well: Maintaining Compatibility in Kotlin Libraries Mastering API Visibility in Kotlin",
  "image": "https://stream-blog-v2.imgix.net/blog/wp-content/uploads/072ce00b22e7e4847d4a2c92b5550573/pexels-pixabay-256559.jpg?auto=compress%2Cformat\u0026ixlib=php-3.3.0",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is an updated version of an article published two years ago on \u003ca href=\"https://blog.autsoft.hu/publishing-an-android-library-to-mavencentral-in-2019/\" target=\"_blank\"\u003eblog.autsoft.hu\u003c/a\u003e. This new version supports non-Android libraries, uses command line GPG handling instead of a specific Windows GUI app, includes new best practices, and uses GitHub Actions for its CI integration.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate, April 2021: addressed \u003ca href=\"https://central.sonatype.org/news/20210223_new-users-on-s01/\" target=\"_blank\"\u003enew Sonatype infra\u003c/a\u003e, moved to using \u003ca href=\"https://developer.android.com/studio/build/maven-publish-plugin\" target=\"_blank\"\u003eAGP Maven Publish plugin integration\u003c/a\u003e for release components, and to using the new \u003ca href=\"https://github.com/gradle-nexus/publish-plugin/\" target=\"_blank\"\u003egradle-nexus/publish-plugin\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate, July 2021: fixed keyserver being used (\u003ca href=\"https://twitter.com/Ch8n2/status/1412782176702058496\" target=\"_blank\"\u003ethanks Chetan Gupta\u003c/a\u003e), moved to using in-memory GPG keys for signing (\u003ca href=\"https://twitter.com/arkann1985/status/1412751173698965510\" target=\"_blank\"\u003ethanks Arkadii Ivanov\u003c/a\u003e).\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate, July 2021: use JDK11 in GitHub Actions configuration to support new AGP versions.\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eCreating a great library is hard work. Coming up with the idea, implementing it, making sure you have a nice, stable public API that you \u003ca href=\"https://zsmb.co/mastering-api-visibility-in-kotlin/\" target=\"_blank\"\u003econtrol carefully\u003c/a\u003e and \u003ca href=\"https://zsmb.co/maintaining-compatibility-in-kotlin-libraries/\" target=\"_blank\"\u003emaintain\u003c/a\u003e… That’s already lots to do.\u003c/p\u003e\n\u003cp\u003eAfter all that, you need to make your library available to the public. Technically, you could distribute the \u003ccode\u003e.aar\u003c/code\u003e file any way you want, but the norm is publishing it to a publicly available Maven repository. It’s a good idea to use one of the well-established repositories that people are already likely to have in their projects, to make getting started with your library as easy as possible.\u003c/p\u003e\n\u003cp\u003eThe simplest choice would be \u003cstrong\u003eJitPack\u003c/strong\u003e, which might not give you much in terms of customization or control, but is very easy to \u003ca href=\"https://jitpack.io/\" target=\"_blank\"\u003eget started\u003c/a\u003e with. All you have to do is publish your project on GitHub, and JitPack should be able to build and distribute it immediately. If you’re new to libraries, this is a great choice for getting your code out there.\u003c/p\u003e\n\u003cp\u003eThe next step up is \u003cstrong\u003eJcenter\u003c/strong\u003e… \u003ca href=\"https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/\" target=\"_blank\"\u003eWhich no longer accepts new packages and will stop serving them in February 2022\u003c/a\u003e. Using it \u003ca href=\"https://blog.autsoft.hu/a-confusing-dependency/\" target=\"_blank\"\u003ehad its issues\u003c/a\u003e anyway.\u003c/p\u003e\n\u003cp\u003eFinally, the fanciest place you can be in is The Central Repository via Sonatype OSSRH (OSS Repository Hosting), which I’ll refer to as simply \u003cstrong\u003eMavenCentral\u003c/strong\u003e from here on. This is \u003cem\u003ethe\u003c/em\u003e place to be if you’re a Maven dependency. Artifacts on MavenCentral are well trusted, and their integrity can be verified, as they are all required to be signed by the author.\u003c/p\u003e\n\u003cp\u003eThe publication process, however, and especially automating it, can be quite a headache. It’s easy to get stuck at many of the various steps no matter what tutorials you’re following, especially if they’re out of date, and this can get demotivating very quickly. It’s not uncommon to \u003ca href=\"https://issues.sonatype.org/browse/OSSRH-38347?focusedCommentId=505686\u0026amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-505686\" target=\"_blank\"\u003egive up and just use Bintray/Jcenter instead\u003c/a\u003e – which is not an option anymore.\u003c/p\u003e\n\u003cp\u003eSo, if you feel up for a bit of a challenge, and want to do things the right way, here’s how you can get a library into MavenCentral, in 2021.\u003c/p\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eHere\u0026#39;s a quick overview of the steps we\u0026#39;ll go through:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRegistering a Jira account with Sonatype, and verifying your ownership of the group ID you want to publish your artifact with\u003c/li\u003e\n\u003cli\u003eGenerating a GPG key pair for signing your artifacts, publishing your public key, and exporting your private key\u003c/li\u003e\n\u003cli\u003eSetting up Gradle tasks that can sign upload your artifacts to a staging repository\u003c/li\u003e\n\u003cli\u003eManually going through the process of checking your artifacts in the staging repo and releasing them via the Sonatype web UI\u003c/li\u003e\n\u003cli\u003eAutomating the close \u0026amp; release flow with a Gradle plugin\u003c/li\u003e\n\u003cli\u003eConfiguring CI workflows with GitHub Actions to automate all of the above\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eA lot of ground to cover - let’s go!\u003c/p\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eWe’ll be using the following tools for this tutorial. You are free to use alternatives, but these are our favourites, and they work well for us.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe command line \u003ccode\u003egpg\u003c/code\u003e tool\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gpgtools.org/\" target=\"_blank\"\u003eGPG Suite\u003c/a\u003e for macOS or \u003ca href=\"https://www.gpg4win.org/download.html\" target=\"_blank\"\u003eGpg4win\u003c/a\u003e for Windows are great choices, which also come with helpful GUIs. Many alternatives for different platforms are available \u003ca href=\"https://gnupg.org/download/\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGitHub as the public host of the library’s repository\u003c/li\u003e\n\u003cli\u003eGitHub Actions as the continuous integration solution\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor this article, we’ll assume that you already have your library developed, and have uploaded it to a public GitHub repository.\u003c/p\u003e\n\u003cp\u003eWe’ll use \u003ca href=\"https://github.com/GetStream/stream-chat-android\" target=\"_blank\"\u003eour very own Android Chat SDK\u003c/a\u003e in our examples. This \u003ca href=\"https://getstream.io/chat/sdk/android/\"\u003eSDK\u003c/a\u003e is made up of multiple artifacts, but for simplification, we’ll just talk about publishing the low-level networking client, which lives in the \u003ccode\u003estream-chat-android-client\u003c/code\u003e module of the GitHub repository.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eShameless plug: if you need a chat solution in your Android app, check out \u003ca href=\"https://getstream.io/chat/docs/android/?language=kotlin\" target=\"_blank\"\u003eour documentation\u003c/a\u003e and our \u003ca href=\"https://getstream.io/tutorials/android-chat/\"\u003eAndroid In-App Messaging\u003c/a\u003e tutorial.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"registering-a-sonatype-account\"\u003eRegistering a Sonatype account\u003c/h2\u003e\n\u003cp\u003eFirst things first, you’ll need an account in the \u003ca href=\"https://issues.sonatype.org/secure/Dashboard.jspa\" target=\"_blank\"\u003eSonatype Jira\u003c/a\u003e. Head over there and hit \u003cem\u003eSign up\u003c/em\u003e. Registration is straightforward, it just requires a username, an email, and a password.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/31610f3c24e1c31421726336dedaeb25/register-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/31610f3c24e1c31421726336dedaeb25/register-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/31610f3c24e1c31421726336dedaeb25/register-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/31610f3c24e1c31421726336dedaeb25/register-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The login page to Sonatype Jira\" loading=\"lazy\" width=\"600\" height=\"226\"/\u003e\n\u003cp\u003eAfter you’ve logged in, you’ll need to open an issue, asking for access to the group ID that you’ll want to publish your project under. For us, based on our domain name (\u003ccode\u003egetstream.io\u003c/code\u003e), our group ID is \u003ccode\u003eio.getstream\u003c/code\u003e. If you own a domain, it’s best to choose the reversed version of that as your group ID. Otherwise, you’ll have to stick with having a GitHub-based group ID (see \u003ca href=\"https://central.sonatype.org/pages/choosing-your-coordinates.html\" target=\"_blank\"\u003eChoosing your Coordinates\u003c/a\u003e for more details).\u003c/p\u003e\n\u003cp\u003eAfter choosing a language and an avatar, you’ll end up on this landing page - click on \u003cem\u003eCreate an issue\u003c/em\u003e:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/594fdc1fc36fe3347162ed25a511edf1/mavencentral_landingpage.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/594fdc1fc36fe3347162ed25a511edf1/mavencentral_landingpage.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/594fdc1fc36fe3347162ed25a511edf1/mavencentral_landingpage.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/594fdc1fc36fe3347162ed25a511edf1/mavencentral_landingpage.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Sonatype Jira landing page\" loading=\"lazy\" width=\"806\" height=\"404\"/\u003e\n\u003cp\u003eSelect \u003cem\u003eCommunity Support - Open Source Project Repository Hosting\u003c/em\u003e and then \u003cem\u003eNew Project\u003c/em\u003e:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/8b8c7239806f8024ddb2f4875b559562/mavencentral_createissue.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/8b8c7239806f8024ddb2f4875b559562/mavencentral_createissue.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/8b8c7239806f8024ddb2f4875b559562/mavencentral_createissue.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/8b8c7239806f8024ddb2f4875b559562/mavencentral_createissue.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Creating a new issue in Jira\" loading=\"lazy\" width=\"824\" height=\"260\"/\u003e\n\u003cp\u003eOn the next page, fill out the following fields:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e \u003cem\u003eCreate repository for your.group.id.here\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e An optional, quick summary of what your project is.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGroup Id:\u003c/strong\u003e Your group ID, as described a few sections earlier.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProject URL:\u003c/strong\u003e If your project has a webpage, the URL of that page. This can also be just the GitHub repository.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSCM url:\u003c/strong\u003e Your source control URL, i.e. the GitHub repository link.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsername(s):\u003c/strong\u003e If you want additional users (on top of the one you’re using for this process) to have deploy access for your group ID, you can list them here.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAlready Synced to Central:\u003c/strong\u003e If you’re just getting started, this should be \u003cem\u003eNo\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/64febd924248159431d158aef3cd25ae/mavencentral_createissuedetail.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/64febd924248159431d158aef3cd25ae/mavencentral_createissuedetail.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/64febd924248159431d158aef3cd25ae/mavencentral_createissuedetail.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/64febd924248159431d158aef3cd25ae/mavencentral_createissuedetail.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The filled out issue details page for a new repository\" loading=\"lazy\" width=\"816\" height=\"1043\"/\u003e\n\u003cp\u003eSoon after opening it, your issue will get a comment telling you to verify that you own the domain corresponding to your group ID:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/da8ea3aa9e7861342114d89a78f7e7ef/please_verify_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/da8ea3aa9e7861342114d89a78f7e7ef/please_verify_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/da8ea3aa9e7861342114d89a78f7e7ef/please_verify_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/da8ea3aa9e7861342114d89a78f7e7ef/please_verify_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Comment requesting domain verification\" loading=\"lazy\" width=\"600\" height=\"226\"/\u003e\n\u003cp\u003eTo comply with this, add the required TXT record to your domain - how to do this will depend on where your domain is registered, but it should be a fairly simple task.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@    TXT    1800    OSSRH-12345\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eMake sure to replace the ticket number above with your actual number.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhen done, don’t forget to leave a comment on the issue so that Sonatype knows to check the record. You’ll eventually get a response telling you that you now have deploy rights - congrats!\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/6b5a127702130d046d4dfc95708be4cf/dns_ok_repo_ok_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/6b5a127702130d046d4dfc95708be4cf/dns_ok_repo_ok_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/6b5a127702130d046d4dfc95708be4cf/dns_ok_repo_ok_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/6b5a127702130d046d4dfc95708be4cf/dns_ok_repo_ok_2-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The Sonatype comment confirming domain verification\" loading=\"lazy\" width=\"600\" height=\"364\"/\u003e\n\u003ch2 id=\"generating-a-gpg-key-pair\"\u003eGenerating a GPG key pair\u003c/h2\u003e\n\u003cp\u003eAs we eluded to earlier, artifacts published on MavenCentral have to be signed by their publishers. You’ll need a GPG key for this.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eMavenCentral also has its own documentation for \u003ca href=\"https://central.sonatype.org/pages/working-with-pgp-signatures.html\" target=\"_blank\"\u003eWorking with PGP Signatures\u003c/a\u003e which you can reference if you get stuck along the way.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis part requires access to the \u003ccode\u003egpg\u003c/code\u003e command. There are several ways to install this via package managers, and there are many distributions available for different platforms on \u003ca href=\"https://gnupg.org/download/\" target=\"_blank\"\u003egnupg.org\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gpgtools.org/\" target=\"_blank\"\u003eGPG Suite\u003c/a\u003e is an easy-to-use distribution for macOS, and you can use \u003ca href=\"https://www.gpg4win.org/download.html\" target=\"_blank\"\u003eGpg4win\u003c/a\u003e if you’re on Windows. Both of these come with GUI tools that make managing keys easier.\u003c/p\u003e\n\u003cp\u003eWe\u0026#39;ll stick to the command line here, but note that the \u003ca href=\"https://blog.autsoft.hu/publishing-an-android-library-to-mavencentral-in-2019/#creatingagpgkeypair\" target=\"_blank\"\u003eold article\u003c/a\u003e shows how to use the Kleopatra GUI (included in Gpg4win) on Windows for generating and managing keys.\u003c/p\u003e\n\u003cp\u003eTo generate a new key, run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egpg --full-gen-key\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou’ll be prompted to enter a few details:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKind of key:\u003c/strong\u003e Accept the default value, which is \u003ccode\u003e(1) RSA and RSA\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKey size:\u003c/strong\u003e \u003ccode\u003e4096\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpiration:\u003c/strong\u003e You can input \u003ccode\u003e0\u003c/code\u003e to generate a key that never expires. You can also create a key that has an expiry date and then \u003ca href=\"https://central.sonatype.org/pages/working-with-pgp-signatures.html#dealing-with-expired-keys\" target=\"_blank\"\u003erenew it\u003c/a\u003e periodically, if you prefer to do so.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReal name, email:\u003c/strong\u003e Should be obvious.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComment:\u003c/strong\u003e Freeform text, can be left empty.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter entering these details, you’ll be prompted to enter a passphrase to secure your key with.\u003c/p\u003e\n\u003cp\u003eHere’s the full flow you\u0026#39;ll go through, with a bit of truncation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   ...\nYour selection? 1\n\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\n\nPlease specify how long the key should be valid.\n         0 = key does not expire\n         ...\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Marton Braun\nEmail address: marton@getstream.io\nComment: Example key for tutorial\nYou selected this USER-ID:\n    \u0026#34;Marton Braun (Example key for tutorial) \u0026lt;marton@getstream.io\u0026gt;\u0026#34;\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n\ngpg: key 36271B955BEF072A marked as ultimately trusted\ngpg: revocation certificate stored as \u0026#39;.../gnupg/openpgp-revocs.d\\7A5D73CFEDDDBC915986998A36271B955BEF072A.rev\u0026#39;\npublic and secret key created and signed.\n\npub   rsa4096 2021-02-03 [SC]\n      7A5D73CFEDDDBC915986998A36271B955BEF072A\nuid                      Marton Braun (Example key for tutorial) \u0026lt;marton@getstream.io\u0026gt;\nsub   rsa4096 2021-02-03 [E]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can always check the keys you have on your system by running \u003ccode\u003egpg --list-keys\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egpg: checking the trustdb\n.../gnupg/pubring.kbx\n-----------------------------------------------\npub   rsa4096 2021-02-03 [SC]\n      7A5D73CFEDDDBC915986998A36271B955BEF072A\nuid           [ultimate] Marton Braun (Example key for tutorial) \u0026lt;marton@getstream.io\u0026gt;\nsub   rsa4096 2021-02-03 [E]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour key’s ID is the last eight digits of its fingerprint (the long hexadecimal string above). In this case, this is \u003ccode\u003e5BEF072A\u003c/code\u003e - take note of this, as you’ll use this later.\u003c/p\u003e\n\u003cp\u003eYou’ve generated a pair of keys - a \u003cem\u003eprivate\u003c/em\u003e and a \u003cem\u003epublic\u003c/em\u003e key. You’ll keep the \u003cem\u003eprivate\u003c/em\u003e one hidden and use it to sign your artifacts. The public key has to be uploaded to the server so that anyone can check that it belongs to you, which you can do by running the following (\u003cem\u003euse your own key ID!\u003c/em\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egpg --keyserver keyserver.ubuntu.com --send-keys 5BEF072A\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eSee \u003ca href=\"https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key\" target=\"_blank\"\u003eDistributing Your Public Key\u003c/a\u003e for the list of supported keyservers.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eYour private key will need to be referenced by your project when it signs the artifacts. You can get a base 64 export of it with the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egpg --export-secret-keys 5BEF072A | base64\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnter your passphrase that you’ve set earlier when prompted. You can either copy-paste this key from the terminal output later on, or save it to a file temporarily.\u003c/p\u003e\n\u003ch2 id=\"setting-up-publication-in-your-project\"\u003eSetting up publication in your project\u003c/h2\u003e\n\u003cp\u003eThat’s a lot of work without touching your project, but the time has come to do that now. In the next few steps, you will:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAdd Gradle scripts that set up the publication plugin required to push artifacts to a repository.\u003c/li\u003e\n\u003cli\u003eConfigure the properties of the library you’re releasing.\u003c/li\u003e\n\u003cli\u003eGrab the necessary authentication details along with the private key you’ve just exported.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"root-project-gradle-configuration\"\u003eRoot project Gradle configuration\u003c/h3\u003e\n\u003cp\u003eTo easily automate publishing later, you\u0026#39;ll use the \u003ca href=\"https://github.com/gradle-nexus/publish-plugin/\" target=\"_blank\"\u003egradle-nexus/publish-plugin\u003c/a\u003e tool. This has to be added in your project level (root) \u003ccode\u003ebuild.gradle\u003c/code\u003e file as a dependency.\u003c/p\u003e\n\u003cp\u003eYou can do this \u003cem\u003eeither\u003c/em\u003e with a \u003ccode\u003eplugins\u003c/code\u003e block:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eplugins \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;io.github.gradle-nexus.publish-plugin\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e version \u003cspan\u003e\u003cspan\u003e\u0026#34;1.1.0\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eOr\u003c/em\u003e with the classic buildscript dependency syntax, and then applying it in your project:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ebuildscript \u003cspan\u003e{\u003c/span\u003e\n    dependencies \u003cspan\u003e{\u003c/span\u003e\n        classpath \u003cspan\u003e\u0026#39;io.github.gradle-nexus:publish-plugin:1.1.0\u0026#39;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\napply plugin\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;io.github.gradle-nexus.publish-plugin\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCheck the \u003ca href=\"https://github.com/gradle-nexus/publish-plugin/releases\" target=\"_blank\"\u003ereleases page\u003c/a\u003e of the plugin to get the latest version.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNext, create a new file called \u003ccode\u003epublish-root.gradle\u003c/code\u003e in a new \u003ccode\u003escripts\u003c/code\u003e folder inside your project. This will contain global configuration you need for publishing, grabbing input values for your scripts, and defining the MavenCentral repository.\u003c/p\u003e\n\u003cp\u003eNote that here we’ll go through the contents of these scripts part by part, with explanations. \u003cstrong\u003eYou can always find the complete, up-to-date files we use in production \u003ca href=\"https://github.com/GetStream/stream-chat-android/blob/develop/scripts/\" target=\"_blank\"\u003ein the Stream Chat repository\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this file, you\u0026#39;ll grab some configuration parameters. Using the script below, you’ll first set all the variables to a dummy empty string. This will let the project sync and build without the publication values set up, which would otherwise be an issue for your contributors.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Create variables with empty default values\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.keyId\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.password\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.key\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;ossrhUsername\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;ossrhPassword\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\next\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;sonatypeStagingProfileId\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first three variables will be used to sign the artifacts after they’re built:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esigning.keyId\u003c/code\u003e: the ID of the GPG key pair, the last eight characters of its fingerprint\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esigning.password\u003c/code\u003e: the passphrase of the key pair\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esigning.key\u003c/code\u003e: the base64 encoded private key you exported earlier\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eosshrUsername\u003c/code\u003e and \u003ccode\u003eossrhPassword\u003c/code\u003e: are your account details for MavenCentral, which you’ve chosen at the Jira registration step. We’ll get back to where \u003ccode\u003esonatypeStagingProfileId\u003c/code\u003e comes from later on.\u003c/p\u003e\n\u003cp\u003eNext, you’ll try to fetch the values of the variables from a \u003ccode\u003elocal.properties\u003c/code\u003e file in the root of the project if it exists, otherwise you’ll look for them in the environment variables. The former lets you easily input these values locally on your machine, while the latter will help with setting up CI.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eFile secretPropsFile \u003cspan\u003e=\u003c/span\u003e project\u003cspan\u003e.\u003c/span\u003erootProject\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;local.properties\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003esecretPropsFile\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexists\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Read local.properties file first if it exists\u003c/span\u003e\n    Properties p \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eProperties\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileInputStream\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003esecretPropsFile\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ewithCloseable \u003cspan\u003e{\u003c/span\u003e is \u003cspan\u003e-\u0026gt;\u003c/span\u003e p\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eload\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eis\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    p\u003cspan\u003e.\u003c/span\u003eeach \u003cspan\u003e{\u003c/span\u003e name\u003cspan\u003e,\u003c/span\u003e value \u003cspan\u003e-\u0026gt;\u003c/span\u003e ext\u003cspan\u003e[\u003c/span\u003ename\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e value \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Use system environment variables\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;ossrhUsername\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;OSSRH_USERNAME\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;ossrhPassword\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;OSSRH_PASSWORD\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;sonatypeStagingProfileId\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;SONATYPE_STAGING_PROFILE_ID\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.keyId\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;SIGNING_KEY_ID\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.password\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;SIGNING_PASSWORD\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    ext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.key\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e System\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetenv\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;SIGNING_KEY\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMake sure that you’ve set these variables either in the aforementioned \u003ccode\u003elocal.properties\u003c/code\u003e file or in your environment variables. If you want to use the property file, the syntax for it should look something like this (\u003cem\u003ereplace all the data here with your own!\u003c/em\u003e):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esigning.keyId=5BEF072A\nsigning.password=signingPass123\nsigning.key=bm90IGEgcmVhbCBrZXksIHdoYXQgd2VyZSB5b3UgZXhwZWN0aW5n\nossrhUsername=yourSonatypeUser\nossrhPassword=yourSonatypePassword\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe last piece of code to add to this file will define the MavenCentral (Sonatype) repository where publishing should upload the artifacts. This relies on parameters fetched above to authenticate:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Set up Sonatype repository\u003c/span\u003e\nnexusPublishing \u003cspan\u003e{\u003c/span\u003e\n    repositories \u003cspan\u003e{\u003c/span\u003e\n        sonatype \u003cspan\u003e{\u003c/span\u003e\n            stagingProfileId \u003cspan\u003e=\u003c/span\u003e sonatypeStagingProfileId\n            username \u003cspan\u003e=\u003c/span\u003e ossrhUsername\n            password \u003cspan\u003e=\u003c/span\u003e ossrhPassword\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e If you\u0026#39;re on the new Sonatype infrastructure (happens if you\u0026#39;ve registered after 2021-02-24 or requested it specifically), you have to add explicit URLs pointing to \u003ccode\u003es01.oss.sonatype.org\u003c/code\u003e in this config block next to the existing parameters, like so:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003enexusPublishing \u003cspan\u003e{\u003c/span\u003e\n    repositories \u003cspan\u003e{\u003c/span\u003e\n        sonatype \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003e/* Existing params here... */\u003c/span\u003e\n            nexusUrl\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euri\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;https://s01.oss.sonatype.org/service/local/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            snapshotRepositoryUrl\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euri\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;https://s01.oss.sonatype.org/content/repositories/snapshots/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs the last step, apply this script in your root \u003ccode\u003ebuild.gradle\u003c/code\u003e file like so:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eapply from\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003erootDir\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/scripts/publish-root.gradle\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis completes the configuration needed in the root project. \u003ca href=\"https://gist.github.com/zsmb13/56ed98c8fe916de441f2a9d8e060cd4a\" target=\"_blank\"\u003eThis gist\u003c/a\u003e contains the code blocks detailed above in a single snippet. The final, up-to-date script we use for publishing our SDK can be found \u003cstrong\u003e\u003ca href=\"https://github.com/GetStream/stream-chat-android/blob/develop/scripts/publish-root.gradle\" target=\"_blank\"\u003ein the Stream Chat repository\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3 id=\"per-module-gradle-setup\"\u003ePer-module Gradle setup\u003c/h3\u003e\n\u003cp\u003eWith the repository defined and parameters fetched, it\u0026#39;s time to create a script that will define the artifacts in each module you want to publish. Create a new file called \u003ccode\u003epublish-module.gradle\u003c/code\u003e in the \u003ccode\u003escripts\u003c/code\u003e folder. As its name suggests, this will be applied to each \u003cem\u003emodule\u003c/em\u003e that you want to publish an artifact from.\u003c/p\u003e\n\u003cp\u003eIn this file, first you’ll apply two plugins for publishing and signing.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eapply plugin\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;maven-publish\u0026#39;\u003c/span\u003e\napply plugin\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;signing\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eOur publishing file also applies the \u003ca href=\"https://github.com/Kotlin/dokka\" target=\"_blank\"\u003eDokka plugin\u003c/a\u003e in this block, which you have to configure separately, if you want to use it.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThen you declare the sources artifact for the library. This is really important - it will make sure that the source files are packaged along with the executable, compiled code, so that your users can easily jump to the definitions that they’re calling into within their IDE.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003etask \u003cspan\u003eandroidSourcesJar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etype\u003cspan\u003e:\u003c/span\u003e Jar\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    archiveClassifier\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;sources\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eproject\u003cspan\u003e.\u003c/span\u003eplugins\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efindPlugin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;com.android.library\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// For Android libraries\u003c/span\u003e\n        from android\u003cspan\u003e.\u003c/span\u003esourceSets\u003cspan\u003e.\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003ejava\u003cspan\u003e.\u003c/span\u003esrcDirs\n        from android\u003cspan\u003e.\u003c/span\u003esourceSets\u003cspan\u003e.\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003ekotlin\u003cspan\u003e.\u003c/span\u003esrcDirs\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// For pure Kotlin libraries, in case you have them\u003c/span\u003e\n        from sourceSets\u003cspan\u003e.\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003ejava\u003cspan\u003e.\u003c/span\u003esrcDirs\n        from sourceSets\u003cspan\u003e.\u003c/span\u003emain\u003cspan\u003e.\u003c/span\u003ekotlin\u003cspan\u003e.\u003c/span\u003esrcDirs\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\nartifacts \u003cspan\u003e{\u003c/span\u003e\n    archives androidSourcesJar\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eOnce again, our real publishing file also adds an additional \u003ccode\u003ejavadocJar\u003c/code\u003e task which ships Dokka-generated documentation - again, you can skip this if you want to.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eYou’ll set two properties on the Gradle project itself here, the group ID and the version of the artifact. You’ll see where these uppercase values come from later on, when you apply this publication script in the module level \u003ccode\u003ebuild.gradle\u003c/code\u003e files.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003egroup \u003cspan\u003e=\u003c/span\u003e PUBLISH_GROUP_ID\nversion \u003cspan\u003e=\u003c/span\u003e PUBLISH_VERSION\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere comes the complicated part, providing all the metadata for the library you’re releasing. See the inline comments for the play-by-play explanation.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eafterEvaluate \u003cspan\u003e{\u003c/span\u003e\n    publishing \u003cspan\u003e{\u003c/span\u003e\n        publications \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003erelease\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eMavenPublication\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003e// The coordinates of the library, being set from variables that\u003c/span\u003e\n                \u003cspan\u003e// we\u0026#39;ll set up later\u003c/span\u003e\n                groupId PUBLISH_GROUP_ID\n                artifactId PUBLISH_ARTIFACT_ID\n                version PUBLISH_VERSION\n\n                \u003cspan\u003e// Two artifacts, the `aar` (or `jar`) and the sources\u003c/span\u003e\n                \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eproject\u003cspan\u003e.\u003c/span\u003eplugins\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efindPlugin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;com.android.library\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                    from components\u003cspan\u003e.\u003c/span\u003erelease\n                \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                    from components\u003cspan\u003e.\u003c/span\u003ejava\n                \u003cspan\u003e}\u003c/span\u003e\n\n                artifact androidSourcesJar\n                artifact javadocJar\n\n                \u003cspan\u003e// Mostly self-explanatory metadata\u003c/span\u003e\n                pom \u003cspan\u003e{\u003c/span\u003e\n                    name \u003cspan\u003e=\u003c/span\u003e PUBLISH_ARTIFACT_ID\n                    description \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;Stream Chat official Android SDK\u0026#39;\u003c/span\u003e\n                    url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://github.com/getstream/stream-chat-android\u0026#39;\u003c/span\u003e\n                    licenses \u003cspan\u003e{\u003c/span\u003e\n                        license \u003cspan\u003e{\u003c/span\u003e\n                            name \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;Stream License\u0026#39;\u003c/span\u003e\n                            url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://github.com/GetStream/stream-chat-android/blob/main/LICENSE\u0026#39;\u003c/span\u003e\n                        \u003cspan\u003e}\u003c/span\u003e\n                    \u003cspan\u003e}\u003c/span\u003e\n                    developers \u003cspan\u003e{\u003c/span\u003e\n                        developer \u003cspan\u003e{\u003c/span\u003e\n                          id \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;zsmb13\u0026#39;\u003c/span\u003e\n                          name \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;Márton Braun\u0026#39;\u003c/span\u003e\n                          email \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;marton@getstream.io\u0026#39;\u003c/span\u003e\n                        \u003cspan\u003e}\u003c/span\u003e\n                        \u003cspan\u003e// Add all other devs here...\u003c/span\u003e\n                    \u003cspan\u003e}\u003c/span\u003e\n\n                    \u003cspan\u003e// Version control info - if you\u0026#39;re using GitHub, follow the \u003c/span\u003e\n                    \u003cspan\u003e// format as seen here\u003c/span\u003e\n                    scm \u003cspan\u003e{\u003c/span\u003e\n                        connection \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;scm:git:github.com/getstream/stream-chat-android.git\u0026#39;\u003c/span\u003e\n                        developerConnection \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;scm:git:ssh://github.com/getstream/stream-chat-android.git\u0026#39;\u003c/span\u003e\n                        url \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;https://github.com/getstream/stream-chat-android/tree/main\u0026#39;\u003c/span\u003e\n                    \u003cspan\u003e}\u003c/span\u003e\n                \u003cspan\u003e}\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, this piece of code grabs signing related values from the root project, and then tells the signing plugin to sign the artifacts you’ve defined above as a publication.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003esigning \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003euseInMemoryPgpKeys\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            rootProject\u003cspan\u003e.\u003c/span\u003eext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.keyId\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            rootProject\u003cspan\u003e.\u003c/span\u003eext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.key\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            rootProject\u003cspan\u003e.\u003c/span\u003eext\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;signing.password\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n    sign publishing\u003cspan\u003e.\u003c/span\u003epublications\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat’s the \u003ccode\u003epublish-module.gradle\u003c/code\u003e script all built up, ready to use. \u003ca href=\"https://gist.github.com/zsmb13/56ed98c8fe916de441f2a9d8e060cd4a\" target=\"_blank\"\u003eThis gist\u003c/a\u003e contains the code blocks shown above in a single snippet. The final, up-to-date script we use for publishing our SDK can be found \u003cstrong\u003e\u003ca href=\"https://github.com/GetStream/stream-chat-android/blob/develop/scripts/publish-module.gradle\" target=\"_blank\"\u003ein the Stream Chat repository\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eTime to include this script in a module! Head to the \u003ccode\u003ebuild.gradle\u003c/code\u003e file of your library module - in our case, this is the \u003ccode\u003estream-chat-android-client\u003c/code\u003e module - and add the following code:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eext \u003cspan\u003e{\u003c/span\u003e\n    PUBLISH_GROUP_ID \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;io.getstream\u0026#39;\u003c/span\u003e\n    PUBLISH_VERSION \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;4.5.2\u0026#39;\u003c/span\u003e\n    PUBLISH_ARTIFACT_ID \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;stream-chat-android-client\u0026#39;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\napply from\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003erootProject\u003cspan\u003e.\u003c/span\u003eprojectDir\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e/scripts/publish-module.gradle\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere you finally see the group ID, artifact ID, and version being set, so that the publication script can make use of them. Then, the script itself is applied. This is all the code you need to add per-module if you are publishing your library in multiple artifacts, everything else is done by the common script.\u003c/p\u003e\n\u003cp\u003eOne last configuration step: you\u0026#39;ll need to set the \u003ccode\u003esonatypeStagingProfileId\u003c/code\u003e variable in your project. This value is an ID that Sonatype assigns to you, which the plugin uses to make sure all the artifacts end up in the right place during the upload.\u003c/p\u003e\n\u003cp\u003eGo to \u003ca href=\"https://oss.sonatype.org/\" target=\"_blank\"\u003ehttps://oss.sonatype.org/\u003c/a\u003e and log in. In the menu on the left, select \u003cem\u003eStaging profiles\u003c/em\u003e, select your profile, and then look for the ID in the URL.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/a0f26acf858a96b45d22649e41e2cc76/mavencentral_sonatype_staging_profile.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/a0f26acf858a96b45d22649e41e2cc76/mavencentral_sonatype_staging_profile.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/a0f26acf858a96b45d22649e41e2cc76/mavencentral_sonatype_staging_profile.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/a0f26acf858a96b45d22649e41e2cc76/mavencentral_sonatype_staging_profile.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The Sonatype staging profiles screen and the staging profile ID shown in the URL\" loading=\"lazy\" width=\"750\" height=\"228\"/\u003e\n\u003cp\u003eEither set this value in your \u003ccode\u003elocal.properties\u003c/code\u003e file, or set the corresponding environment variable.\u003c/p\u003e\n\u003ch2 id=\"your-first-release\"\u003eYour first release\u003c/h2\u003e\n\u003cp\u003eWith all of that set up, you’re now ready to publish the first version of your library!\u003c/p\u003e\n\u003cp\u003eFor each repository you have defined in the publishing script, a Gradle task will be created to publish to that repository. In our example, our first module to publish is \u003ccode\u003estream-chat-android-client\u003c/code\u003e, and we’ve named the repository \u003ccode\u003esonatype\u003c/code\u003e. Therefore, we need to execute the following command to start publication (replace the module name with your own here):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egradlew stream-chat-android-client:publishReleasePublicationToSonatypeRepository\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a so-called staging repository for your library, and upload your artifacts (\u003ccode\u003eaar\u003c/code\u003e and sources) to that repository. At this point, you can check that all the artifacts you wanted to upload have made it, before hitting the release button.\u003c/p\u003e\n\u003cp\u003eNow, go to the Sonatype site, and in the menu on the left, select \u003cem\u003eStaging repositories\u003c/em\u003e.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b55b970b1ebce50461f6695e550bc4a1/sonatype_menu-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b55b970b1ebce50461f6695e550bc4a1/sonatype_menu-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b55b970b1ebce50461f6695e550bc4a1/sonatype_menu-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b55b970b1ebce50461f6695e550bc4a1/sonatype_menu-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The Sonatype menu\" loading=\"lazy\" width=\"600\" height=\"310\"/\u003e\n\u003cp\u003eFind your repository (might be the only one in the list, might have to scroll around a bit for it), which has your group ID in its name. If you select it and look at the \u003cem\u003eContent\u003c/em\u003e tab, you’ll see the files that have been uploaded.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/4560911f396255a4b14561b391556f06/mavencentral_sonatype_staging_repo_crop.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/4560911f396255a4b14561b391556f06/mavencentral_sonatype_staging_repo_crop.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/4560911f396255a4b14561b391556f06/mavencentral_sonatype_staging_repo_crop.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/4560911f396255a4b14561b391556f06/mavencentral_sonatype_staging_repo_crop.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The contents of the staging repository\" loading=\"lazy\" width=\"643\" height=\"688\"/\u003e\n\u003cp\u003eIf everything looks good, and you’re done uploading files to the repository, you have to \u003cem\u003eClose\u003c/em\u003e it. With the repository selected, hit the \u003cem\u003eClose\u003c/em\u003e button in the toolbar on top. Confirm your action in the dialog (you don’t need to provide a description here).\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63fd2379ff6b24641996e0a203ab707b/sonatype_close-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63fd2379ff6b24641996e0a203ab707b/sonatype_close-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63fd2379ff6b24641996e0a203ab707b/sonatype_close-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63fd2379ff6b24641996e0a203ab707b/sonatype_close-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Closing a staging repository\" loading=\"lazy\" width=\"600\" height=\"243\"/\u003e\n\u003cp\u003eThis will take just a few moments, you can follow along with it happening in the \u003cem\u003eActivity\u003c/em\u003e tab.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63573fbabc52f7d47d3e742598a31ab8/mavencentral_sonatype_closed_success.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63573fbabc52f7d47d3e742598a31ab8/mavencentral_sonatype_closed_success.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63573fbabc52f7d47d3e742598a31ab8/mavencentral_sonatype_closed_success.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/63573fbabc52f7d47d3e742598a31ab8/mavencentral_sonatype_closed_success.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Repository Activity tab showing successful close operation\" loading=\"lazy\" width=\"641\" height=\"571\"/\u003e\n\u003cp\u003eWith the repository closed, you now have two final options available to you. \u003cem\u003eDrop\u003c/em\u003e will throw away the repository, and cancel the publication process. Use this if something went wrong during the upload or you’ve changed your mind.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRelease\u003c/em\u003e, on the other hand, will publish the contents of your staging repository to MavenCentral. Again, you get a confirmation dialog, and you can choose \u003cem\u003eAutomatically Drop\u003c/em\u003e so that the staging repository is cleaned up after the release completes.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b6ff214c3dfdd924dd2a85cb1a96a5fe/sonatype_release-0-00-00-00.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b6ff214c3dfdd924dd2a85cb1a96a5fe/sonatype_release-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b6ff214c3dfdd924dd2a85cb1a96a5fe/sonatype_release-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b6ff214c3dfdd924dd2a85cb1a96a5fe/sonatype_release-0-00-00-00.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Release dialog for the staging repository\" loading=\"lazy\" width=\"600\" height=\"301\"/\u003e\n\u003cp\u003eThe time this process takes can vary a bit. If you get lucky, your artifact will show up on MavenCentral in 10-15 minutes, but it could also take an hour or more in other cases. You can check whether your artifact is available by going to \u003ca href=\"https://repo1.maven.org/maven2/\" target=\"_blank\"\u003ehttps://repo1.maven.org/maven2/\u003c/a\u003e and browsing for it.\u003c/p\u003e\n\u003cp\u003eFor example, for our client, we can keep refreshing the following page to see if the new version is there: \u003ca href=\"https://repo1.maven.org/maven2/io/getstream/stream-chat-android-client/\" target=\"_blank\"\u003ehttps://repo1.maven.org/maven2/io/getstream/stream-chat-android-client/\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you see the package via those links, Gradle will also be able to pull it if \u003ccode\u003emavenCentral()\u003c/code\u003e is added as a repository and you add your library as a dependency.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSearch indexing is a separate, even longer process, so it can take about two hours for your artifact to show up on \u003ca href=\"https://search.maven.org/\" target=\"_blank\"\u003esearch.maven.org\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf this was your first release, you should at this point go back and comment on your original Jira issue, to let them know that your repository setup and publication is working.\u003c/p\u003e\n\u003ch2 id=\"automating-sonatype-actions\"\u003eAutomating Sonatype actions\u003c/h2\u003e\n\u003cp\u003eThat was quite the adventure! To make things smoother for subsequent releases, you can automate the entire release flow with the publishing plugin that you already have configured in the project.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThis, in theory, would mean that you don’t have to revisit the Sonatype UI ever again. In practice, you’ll do that more often than you’d like when the plugin (really, the Sonatype API it calls) breaks or misbehaves, so it\u0026#39;s worth being familiar with.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe plugin provides a Gradle task that you can use to close and then release your staging repository with one simple call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egradlew closeAndReleaseSonatypeStagingRepository\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, you can upload and publish your library by just invoking these two Gradle tasks in sequence - pretty convenient! As a final step, let’s hook this into a CI pipeline.\u003c/p\u003e\n\u003ch2 id=\"continuous-integration\"\u003eContinuous integration\u003c/h2\u003e\n\u003cp\u003eSince the library is hosted on GitHub anyway, we use GitHub Actions for running the publication Gradle tasks automatically. Whatever CI solution you’re using, setting up publication with it will consist of two main steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGetting your secret variables in place.\u003c/li\u003e\n\u003cli\u003eInvoking the two Gradle tasks.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYour secret variables - for the list of these, look at the publishing script again - can simply go into Repository secrets (Add each of these by going to \u003cem\u003eSettings -\u0026gt; Secrets\u003c/em\u003e within your GitHub repository):\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f185dcc78c75a4a4b50ef664544227a3/mavencentral_github_secrets.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f185dcc78c75a4a4b50ef664544227a3/mavencentral_github_secrets.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f185dcc78c75a4a4b50ef664544227a3/mavencentral_github_secrets.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f185dcc78c75a4a4b50ef664544227a3/mavencentral_github_secrets.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"GitHub secrets screen\" loading=\"lazy\" width=\"907\" height=\"436\"/\u003e\n\u003cp\u003eNow, let’s create the GitHub Actions workflow that will put all of this together. The configuration for this will go in the \u003ccode\u003e.github/workflows/publish.yml\u003c/code\u003e file of the repository. This publish workflow will run every time a new \u003ca href=\"https://github.com/GetStream/stream-chat-android/releases\" target=\"_blank\"\u003erelease\u003c/a\u003e is created in the repository (you can also change the triggers to run when a tag is created, for example). Again, see the inline comments for some explanation of what each step does.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIf you’re new to GitHub Actions, check out their \u003ca href=\"https://docs.github.com/en/actions\" target=\"_blank\"\u003eintroductory documentation\u003c/a\u003e first.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Publish\n\n\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003erelease\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003e# We\u0026#39;ll run this workflow when a new GitHub release is created\u003c/span\u003e\n    \u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003ereleased\u003cspan\u003e]\u003c/span\u003e\n\n\u003cspan\u003ejobs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n  \u003cspan\u003epublish\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Release build and publish\n    \u003cspan\u003eruns-on\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ubuntu\u003cspan\u003e-\u003c/span\u003elatest\n    \u003cspan\u003esteps\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Check out code\n        \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e actions/checkout@v2\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Set up JDK 11\n        \u003cspan\u003euses\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e actions/setup\u003cspan\u003e-\u003c/span\u003ejava@v2\n        \u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n          \u003cspan\u003edistribution\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e adopt\n          \u003cspan\u003ejava-version\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e11\u003c/span\u003e\n\n        \u003cspan\u003e# Builds the release artifacts of the library\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Release build\n        \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ./gradlew \u003cspan\u003e:\u003c/span\u003estream\u003cspan\u003e-\u003c/span\u003echat\u003cspan\u003e-\u003c/span\u003eandroid\u003cspan\u003e-\u003c/span\u003eclient\u003cspan\u003e:\u003c/span\u003eassembleRelease\n\n        \u003cspan\u003e# Generates other artifacts (javadocJar is optional)\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Source jar and dokka\n        \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ./gradlew androidSourcesJar javadocJar\n\n        \u003cspan\u003e# Runs upload, and then closes \u0026amp; releases the repository\u003c/span\u003e\n      \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Publish to MavenCentral\n        \u003cspan\u003erun\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e ./gradlew publishReleasePublicationToSonatypeRepository \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003emax\u003cspan\u003e-\u003c/span\u003eworkers 1 closeAndReleaseSonatypeStagingRepository\n        \u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n          \u003cspan\u003eOSSRH_USERNAME\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.OSSRH_USERNAME \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eOSSRH_PASSWORD\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.OSSRH_PASSWORD \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eSIGNING_KEY_ID\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.SIGNING_KEY_ID \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eSIGNING_PASSWORD\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.SIGNING_PASSWORD \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eSIGNING_KEY\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.SIGNING_KEY \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n          \u003cspan\u003eSONATYPE_STAGING_PROFILE_ID\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e $\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e secrets.SONATYPE_STAGING_PROFILE_ID \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMavenCentral uploads tend to be… Flaky, to put it nicely. Here are some recommendations to have fewer issues with them:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePerform all your Gradle upload tasks in a single job, on a single machine.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e--max-workers 1\u003c/code\u003e option used above guarantees that the upload task runs on a single thread, even if parallel builds are otherwise configured.\u003c/li\u003e\n\u003cli\u003eIt’s also a good idea to put the upload task (all of them, if you’re uploading multiple modules’ worth of artifacts) in a different Gradle invocation than the assemble \u0026amp; signing tasks, as you see it done above, so that they run closely together.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf a long time passes between your upload calls, or if they originate from different CI machines, you might see problems such as multiple staging repositories being created for you on Sonatype with your files scattered all over them.\u003c/p\u003e\n\u003cp\u003eEven if you do everything described above right, you might still get random upload errors, or timeouts either during the upload or while the plugin is trying to close and release the repository. At this point, being able to look at the staging repository on the Sonatype UI and manually closing/dropping/releasing repositories will come in handy to fix things up.\u003c/p\u003e\n\u003cp\u003eIf your staging repository seems okay (has correct contents), and it just failed to close, you can close and release it yourself. If it looks messed up somehow, or you ended up with multiple staging repositories, it’s best to drop them all and then run the upload workflow again.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eReminder: our up-to-date publishing workflow is always available \u003ca href=\"https://github.com/GetStream/stream-chat-android/blob/master/.github/workflows/publish.yml\" target=\"_blank\"\u003ein our GitHub repository\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWell, that was quite a journey. We hope that this detailed guide helped you get up and running with MavenCentral publication. You can follow us on Twitter \u003ca href=\"https://twitter.com/getstream_io\" target=\"_blank\"\u003e@getstream_io\u003c/a\u003e for more great technical content - \u003cstrong\u003eplease tweet at us if you\u0026#39;ve successfully set up publishing following these steps!\u003c/strong\u003e You can also reach the author \u003ca href=\"https://twitter.com/zsmb13\" target=\"_blank\"\u003e@zsmb13\u003c/a\u003e if you have any questions.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you\u0026#39;re looking for a Kotlin-first, powerful \u003ca href=\"https://getstream.io/chat/sdk/android/\"\u003eChat SDK\u003c/a\u003e to use in your Android app, check out \u003ca href=\"https://getstream.io/chat/docs/android/?language=kotlin\" target=\"_blank\"\u003eour Android documentation\u003c/a\u003e and our \u003ca href=\"https://getstream.io/tutorials/android-chat/\"\u003eAndroid Chat tutorial\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you\u0026#39;re interested in library development, you\u0026#39;ll find these articles helpful as well:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zsmb.co/maintaining-compatibility-in-kotlin-libraries/\" target=\"_blank\"\u003eMaintaining Compatibility in Kotlin Libraries\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zsmb.co/mastering-api-visibility-in-kotlin/\" target=\"_blank\"\u003eMastering API Visibility in Kotlin\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "31 min read",
  "publishedTime": "2021-02-04T06:02:11Z",
  "modifiedTime": null
}
