{
  "id": "8943c72b-8c55-4365-859b-f473d470572d",
  "title": "Publishing KMP Libraries in Kotlin 1.4.0",
  "link": "https://chrynan.codes/publishing-kmp-libraries-in-kotlin-1-4-0/",
  "description": "An explanation on how to publish Kotlin 1.4.0 Multi-platform Libraries to Bintray",
  "author": "Christopher Keenan",
  "published": "Wed, 09 Sep 2020 20:00:00 GMT",
  "source": "https://chrynan.codes/rss/",
  "categories": [
    "kmp",
    "kotlin",
    "kotlin-library",
    "kotlin multi-platform",
    "kotlin multiplatform",
    "kotlin-multiplatform",
    "publishing",
    "library",
    "gradle",
    "bintray"
  ],
  "byline": "Christopher Keenan",
  "length": 5788,
  "excerpt": "An explanation on how to publish Kotlin 1.4.0 Multi-platform Libraries to Bintray",
  "siteName": "Chris Keenan Codes",
  "favicon": "https://cdn.getmidnight.com/26ffcef53c44522efbfe7fef964a4058/2023/02/code_FILL0_wght400_GRAD0_opsz48.svg",
  "text": "An explanation on how to publish Kotlin 1.4.0 Multi-platform Libraries to Bintray With the release of Kotlin 1.4.0, comes a new approach to authoring and using Kotlin Multi-platform (KMP) Libraries. For instance, a library User is now only required to declare a dependency in the common source set for a Kotlin Multi-platform Library and all of the platform implementations will automatically be added.But library Authors need to take care when upgrading to Kotlin 1.4.0 to make sure their library artifacts get uploaded correctly to their artifact repository. This Migration Guide does a good job explaining the steps required to upgrade to Kotlin 1.4.0, including how to publish KMP libraries. But I ran into some issues publishing the Gradle Module Metadata to Bintray. In this article we'll look at the issue and solution.Publishing a library requires an artifact repository. A popular artifact repository, and the one I use, is JFrog's Bintray which has a Gradle Plugin to help with publishing artifacts. Unfortunately, the Bintray Gradle Plugin doesn't natively support the new KMP Library Structure. Specifically, it doesn't upload the necessary Gradle Module Metadata. Without this metadata the library can't be properly resolved.TL;DRThis article shows how to include the Gradle Metadata files of a Kotlin Multi-platform Library in the artifacts uploaded to Bintray for distribution.The IssueWhen building a Kotlin Multi-platform (KMP) Project, a module.json file is created for every target which contains information about the library, targets, and artifacts. These files are created in the Gradle Project's build directory in the publications and each target's folder ( build -\u003e publications -\u003e target -\u003e module.json ).These files are necessary to resolve a KMP 1.4.0 dependency. But the Bintray Plugin doesn't automatically upload them. The SolutionSince the necessary Gradle Module Metadata files aren't automatically included in the upload to Bintray, we have to manually include them into the artifacts list. The Kotlin 1.4.0 Migration Guide also highlights this issue and points to this solution, but I ran into some unexpected issues with that solution so I adapted it slightly to get it to work. The other thing to note is that the name of the metadata file is expected to have a .module suffix (ex: com.chrynan.colors-core.module), so we have to change that as well.In the root Project's build.gradle file, I have a subprojects block where I apply and setup the Bintray plugin for each Gradle Sub-project. In that block, I add a doFirst closure to the bintrayUpload plugin where we add the .module file to the artifacts that are uploaded.bintrayUpload.doFirst { publications = publishing.publications.collect { publication -\u003e File moduleFile = new File(project.buildDir, \"publications/${publication.name}/module.json\") if (moduleFile.exists()) { publication.artifact(new FileBasedMavenArtifact(moduleFile) { protected String getDefaultExtension() { return \"module\" } }) } publication.name } } In the above code, I assign the publications to equal all the publications publications = publishing.publications.collect { publication -\u003e publication.name }. That is what is different from the proposed solution from the Kotlin Migration Guide. For some reason, without doing this, the publications weren't correctly uploaded. Then in the collect closure of the above code, I check for a module.json file. If one is present, I add it to the artifacts to be uploaded and change the extension to be .module. The entire block looks like this:subprojects { apply plugin: \"maven-publish\" apply plugin: \"com.jfrog.bintray\" bintray { user = project.findProperty(\"BINTRAY_USER\") ?: System.getenv(\"BINTRAY_USER\") key = project.findProperty(\"BINTRAY_KEY\") ?: System.getenv(\"BINTRAY_KEY\") pkg { repo = LibraryConstants.bintrayRepo name = LibraryConstants.repoName licenses = [LibraryConstants.license] vcsUrl = LibraryConstants.vcsUrl version { name = LibraryConstants.versionName desc = LibraryConstants.versionDescription released = new Date() vcsTag = LibraryConstants.versionName } } } bintrayUpload.doFirst { publications = publishing.publications.collect { publication -\u003e File moduleFile = new File(project.buildDir, \"publications/${publication.name}/module.json\") if (moduleFile.exists()) { publication.artifact(new FileBasedMavenArtifact(moduleFile) { protected String getDefaultExtension() { return \"module\" } }) } publication.name } } bintrayUpload.dependsOn publishToMavenLocal } The ConclusionWith the above approach and the information from the Kotlin 1.4.0 Migration Guide, a Kotlin Multi-platform Library can be published to Bintray. The publication includes all the necessary artifacts (jars, poms, and modules) for each source set, so that the library can be used by Kotlin 1.4.0, as well as, older Kotlin versions and non-multiplatform projects. For a full reference on how to publish a KMP library, check out my library: colors.Update September 13th, 2020This article was featured in Android Weekly Issue 431!",
  "image": "https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026q=80\u0026fm=jpg\u0026crop=entropy\u0026cs=tinysrgb\u0026w=2000\u0026fit=max\u0026ixid=eyJhcHBfaWQiOjExNzczfQ",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n        \n\n        \n\n            \u003cp\u003eAn explanation on how to publish Kotlin 1.4.0 Multi-platform Libraries to Bintray\u003c/p\u003e\n\n        \u003csection\u003e\n\n            \u003cul\u003e\n                \u003cli\u003e\n                    \u003ca href=\"https://chrynan.codes/author/chrynan/\" aria-label=\"Read more of Christopher Keenan\"\u003e\n                        \u003cimg src=\"https://www.gravatar.com/avatar/2179fa575001969b7a3397951ef91a8f?s=250\u0026amp;d=mm\u0026amp;r=x\" alt=\"Christopher Keenan\"/\u003e\n                    \u003c/a\u003e\n                \u003c/li\u003e\n            \u003c/ul\u003e\n\n            \n\n        \u003c/section\u003e\n\n            \u003cfigure\u003e\n                \u003cimg srcset=\"https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=300 300w,\n                            https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=600 600w,\n                            https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=1000 1000w,\n                            https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=2000 2000w\" sizes=\"(min-width: 1400px) 1400px, 92vw\" src=\"https://images.unsplash.com/photo-1502780402662-acc01c084a25?ixlib=rb-1.2.1\u0026amp;q=80\u0026amp;fm=jpg\u0026amp;crop=entropy\u0026amp;cs=tinysrgb\u0026amp;fit=max\u0026amp;ixid=eyJhcHBfaWQiOjExNzczfQ\u0026amp;w=2000\" alt=\"Publishing KMP Libraries in Kotlin 1.4.0\"/\u003e\n            \u003c/figure\u003e\n\n    \u003c/div\u003e\u003csection\u003e\n        \u003cp\u003eWith the \u003ca href=\"https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/?ref=chrynan.codes\"\u003erelease of Kotlin 1.4.0\u003c/a\u003e, comes a new approach to authoring and using Kotlin Multi-platform (KMP) Libraries. For instance, a library User is now only required to declare a dependency in the \u003ccode\u003ecommon\u003c/code\u003e source set for a Kotlin Multi-platform Library and all of the platform implementations will automatically be added.\u003c/p\u003e\u003cp\u003eBut library Authors need to take care when upgrading to Kotlin 1.4.0 to make sure their library artifacts get uploaded correctly to their artifact repository. This \u003ca href=\"https://kotlinlang.org/docs/reference/migrating-multiplatform-project-to-14.html?ref=chrynan.codes\"\u003eMigration Guide\u003c/a\u003e does a good job explaining the steps required to upgrade to Kotlin 1.4.0, including how to publish KMP libraries. But I ran into some issues publishing the Gradle Module Metadata to Bintray. In this article we\u0026#39;ll look at the issue and solution.\u003c/p\u003e\u003cp\u003ePublishing a library requires an artifact repository. A popular artifact repository, and the one I use, is \u003ca href=\"https://bintray.com/?ref=chrynan.codes\"\u003eJFrog\u0026#39;s Bintray\u003c/a\u003e which has a \u003ca href=\"https://github.com/bintray/gradle-bintray-plugin?ref=chrynan.codes\"\u003eGradle Plugin\u003c/a\u003e to help with publishing artifacts. Unfortunately, the Bintray Gradle Plugin doesn\u0026#39;t natively support the new KMP Library Structure. Specifically, it doesn\u0026#39;t upload the necessary Gradle Module Metadata. Without this metadata the library can\u0026#39;t be properly resolved.\u003c/p\u003e\u003ch3 id=\"tl-dr\"\u003eTL;DR\u003c/h3\u003e\u003cp\u003eThis article shows how to include the Gradle Metadata files of a Kotlin Multi-platform Library in the artifacts uploaded to Bintray for distribution.\u003c/p\u003e\u003ch3 id=\"the-issue\"\u003eThe Issue\u003c/h3\u003e\u003cp\u003eWhen building a Kotlin Multi-platform (KMP) Project, a \u003ccode\u003emodule.json\u003c/code\u003e file is created for every target which contains information about the library, targets, and artifacts. These files are created in the Gradle Project\u0026#39;s build directory in the \u003ccode\u003epublications\u003c/code\u003e and each target\u0026#39;s folder ( \u003ccode\u003ebuild\u003c/code\u003e -\u0026gt; \u003ccode\u003epublications\u003c/code\u003e -\u0026gt; \u003ccode\u003etarget\u003c/code\u003e -\u0026gt; \u003ccode\u003emodule.json\u003c/code\u003e ).\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://chrynan.codes/content/images/2020/09/Screen-Shot-2020-09-09-at-12.44.41-PM.png\" alt=\"\" loading=\"lazy\" width=\"616\" height=\"560\"/\u003e\u003c/figure\u003e\u003cp\u003eThese files are necessary to resolve a KMP 1.4.0 dependency. But the Bintray Plugin doesn\u0026#39;t automatically upload them. \u003c/p\u003e\u003ch3 id=\"the-solution\"\u003eThe Solution\u003c/h3\u003e\u003cp\u003eSince the necessary Gradle Module Metadata files aren\u0026#39;t automatically included in the upload to Bintray, we have to manually include them into the artifacts list. The \u003ca href=\"https://kotlinlang.org/docs/reference/migrating-multiplatform-project-to-14.html?ref=chrynan.codes\"\u003eKotlin 1.4.0 Migration Guide\u003c/a\u003e also highlights this issue and points to this \u003ca href=\"https://github.com/bintray/gradle-bintray-plugin/issues/229?ref=chrynan.codes#issuecomment-473123891\"\u003esolution\u003c/a\u003e, but I ran into some unexpected issues with that solution so I adapted it slightly to get it to work. The other thing to note is that the name of the metadata file is expected to have a \u003ccode\u003e.module\u003c/code\u003e suffix (ex: \u003ccode\u003ecom.chrynan.colors-core.module\u003c/code\u003e), so we have to change that as well.\u003c/p\u003e\u003cp\u003eIn the root Project\u0026#39;s \u003ccode\u003ebuild.gradle\u003c/code\u003e file, I have a \u003ccode\u003esubprojects\u003c/code\u003e block where I apply and setup the Bintray plugin for each Gradle Sub-project. In that block, I add a \u003ccode\u003edoFirst\u003c/code\u003e closure to the \u003ccode\u003ebintrayUpload\u003c/code\u003e plugin where we add the \u003ccode\u003e.module\u003c/code\u003e file to the artifacts that are uploaded.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ebintrayUpload.doFirst {\n        publications = publishing.publications.collect { publication -\u0026gt;\n            File moduleFile = new File(project.buildDir, \u0026#34;publications/${publication.name}/module.json\u0026#34;)\n\n            if (moduleFile.exists()) {\n                publication.artifact(new FileBasedMavenArtifact(moduleFile) {\n                    protected String getDefaultExtension() {\n                        return \u0026#34;module\u0026#34;\n                    }\n                })\n            }\n\n            publication.name\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, I assign the \u003ccode\u003epublications\u003c/code\u003e to equal all the publications \u003ccode\u003epublications = publishing.publications.collect { publication -\u0026gt; publication.name }\u003c/code\u003e. That is what is different from the proposed solution from the \u003ca href=\"https://kotlinlang.org/docs/reference/migrating-multiplatform-project-to-14.html?ref=chrynan.codes\"\u003eKotlin Migration Guide\u003c/a\u003e. For some reason, without doing this, the publications weren\u0026#39;t correctly uploaded. \u003c/p\u003e\u003cp\u003eThen in the \u003ccode\u003ecollect\u003c/code\u003e closure of the above code, I check for a \u003ccode\u003emodule.json\u003c/code\u003e file. If one is present, I add it to the artifacts to be uploaded and change the extension to be \u003ccode\u003e.module\u003c/code\u003e. The entire block looks like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003esubprojects {\n    apply plugin: \u0026#34;maven-publish\u0026#34;\n    apply plugin: \u0026#34;com.jfrog.bintray\u0026#34;\n\n    bintray {\n        user = project.findProperty(\u0026#34;BINTRAY_USER\u0026#34;) ?: System.getenv(\u0026#34;BINTRAY_USER\u0026#34;)\n        key = project.findProperty(\u0026#34;BINTRAY_KEY\u0026#34;) ?: System.getenv(\u0026#34;BINTRAY_KEY\u0026#34;)\n        \n        pkg {\n            repo = LibraryConstants.bintrayRepo\n            name = LibraryConstants.repoName\n            licenses = [LibraryConstants.license]\n            vcsUrl = LibraryConstants.vcsUrl\n            version {\n                name = LibraryConstants.versionName\n                desc = LibraryConstants.versionDescription\n                released = new Date()\n                vcsTag = LibraryConstants.versionName\n            }\n        }\n    }\n\n    bintrayUpload.doFirst {\n        publications = publishing.publications.collect { publication -\u0026gt;\n            File moduleFile = new File(project.buildDir, \u0026#34;publications/${publication.name}/module.json\u0026#34;)\n\n            if (moduleFile.exists()) {\n                publication.artifact(new FileBasedMavenArtifact(moduleFile) {\n                    protected String getDefaultExtension() {\n                        return \u0026#34;module\u0026#34;\n                    }\n                })\n            }\n\n            publication.name\n        }\n    }\n\n    bintrayUpload.dependsOn publishToMavenLocal\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"the-conclusion\"\u003eThe Conclusion\u003c/h3\u003e\u003cp\u003eWith the above approach and the information from the \u003ca href=\"https://kotlinlang.org/docs/reference/migrating-multiplatform-project-to-14.html?ref=chrynan.codes\"\u003eKotlin 1.4.0 Migration Guide\u003c/a\u003e, a Kotlin Multi-platform Library can be published to Bintray. The publication includes all the necessary artifacts (jars, poms, and modules) for each source set, so that the library can be used by Kotlin 1.4.0, as well as, older Kotlin versions and non-multiplatform projects. For a full reference on how to publish a KMP library, check out my library: \u003ca href=\"https://github.com/chRyNaN/colors?ref=chrynan.codes\"\u003ecolors\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"update-september-13th-2020\"\u003eUpdate September 13th, 2020\u003c/h3\u003e\u003cp\u003eThis article was featured in Android Weekly Issue \u003ca href=\"https://androidweekly.net/issues/issue-431?ref=chrynan.codes\"\u003e431\u003c/a\u003e!\u003c/p\u003e\u003ca title=\"Android Weekly Issue 431\" href=\"https://androidweekly.net/issues/issue-431?ref=chrynan.codes\"\u003e\u003cimg alt=\"Badge\" src=\"https://androidweekly.net/issues/issue-431/badge\" height=\"20px\"/\u003e\u003c/a\u003e\n    \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2020-09-09T20:00:00Z",
  "modifiedTime": "2020-09-13T21:31:56Z"
}
