{
  "id": "41407760-1e87-4890-956b-52219449853c",
  "title": "Clean Chat Example App with Jetpack Compose",
  "link": "https://getstream.io/blog/jetpack-compose-clean-chat-example/",
  "description": "Jetpack Compose makes it easy to build beautiful UI. Check out this Chat UI sample, and learn some exciting bits of Compose along the way!",
  "author": "Márton Braun",
  "published": "Tue, 08 Jun 2021 18:00:00 +0000",
  "source": "https://zsmb.co/index.xml",
  "categories": null,
  "byline": "Márton B.",
  "length": 8317,
  "excerpt": "Stream now provides a Jetpack Compose Chat SDK. Check out the Compose Chat Messaging Tutorial and give it a try today! We’ve recently publis…",
  "siteName": "Stream",
  "favicon": "https://getstream.io/icon.png",
  "text": "Jetpack Compose makes it easy to build beautiful UI. Check out this Chat UI sample, and learn some exciting bits of Compose along the way! Stream now provides a Jetpack Compose Chat SDK. Check out the Compose Chat Messaging Tutorial and give it a try today! We've recently published a Jetpack Compose design sample on Twitter, recreating the Contacts \u0026 Messages design by Mickael Guillaume on Dribbble. The source code for this sample is available on GitHub. In this article, we'll review some of the solutions within the sample to learn more about Jetpack Compose! Simple color management Starting simple, we'll take a look at the color management of the sample. Since it doesn't support dark mode, and doesn't need a large palette, it doesn't make use of the color systems provided by MaterialTheme. Instead, it groups all colors used in a simple object: object AppColors { val bgLight = Color.White val bgDark = Color(0xFF1A1A1A) val bgMedium = Color(0xFF323232) val textLight = Color.White val textDark = Color(0xFF393E46) val textMedium = Color(0xFF929599) val onlineIndicator = Color(0xFF19D42B) } These are really straightforward to use, for example, here's the implementation of the small green circles that are used as online indicators: Box( Modifier .size(12.dp) .clip(CircleShape) .background(AppColors.onlineIndicator) ) Custom fonts To attempt to match the font in the sample, we used the free Metropolis font. Adding a custom font in a Compose app is simple: add the resources, create a font family, and then apply it in the theme. Add the resources to the res/font folder. Here, we've added five different variants of the Metropolis font. Be careful to use names that the Android resource system can handle (avoid spaces and capital letters). Create a FontFamily and configure it in the theme. These resources can be wrapped in Font objects, specifying the weight and style that each font file corresponds to. Then, they can all be added to a FontFamily like so: private val Metropolis = FontFamily( Font(R.font.metropolis_light, FontWeight.Light), Font(R.font.metropolis_regular, FontWeight.Normal), Font(R.font.metropolis_regular_italic, FontWeight.Normal, FontStyle.Italic), Font(R.font.metropolis_medium, FontWeight.Medium), Font(R.font.metropolis_bold, FontWeight.Bold) ) This font family is part of the Typography options in the theme: private val Typography = Typography( body1 = TextStyle( fontFamily = Metropolis, // Using our own custom font family here fontWeight = FontWeight.Normal, fontSize = 16.sp ) ) Which will be contained by the app theme, like so: @Composable fun CleanChatTheme( content: @Composable () -\u003e Unit ) { MaterialTheme( typography = Typography, content = content, ) } Set font weights as needed. Having CleanChatTheme applied at the root of the Compose tree, the font family will automatically be applied to Text elements in the app. To get a specific variant of the font, such as bold, specify the weight when creating a Text: Text( user.name, fontWeight = FontWeight.Bold, color = AppColors.textDark, ) The @ReadOnlyComposable annotation Sometimes you need access to the composable environment in a function, but won't emit any UI inside it. In these cases, @ReadOnlyComposable can be used to tell the compiler about this to perform certain optimizations. Take the following function: it transforms a User into a String that describes their last active status (currently online or seen X time ago). To do this, it uses the stringResource composable function. @Composable @ReadOnlyComposable private fun lastActiveStatus(user: User): String { return when { user.isOnline -\u003e stringResource(R.string.user_online) else -\u003e stringResource( R.string.user_last_activity, DateUtils.getRelativeTimeSpanString(user.lastOnline.time) ) } } As you'd expect, composables marked with @ReadOnlyComposable can only call other composables that are also marked with @ReadOnlyComposable. For example, trying to create a Text inside this function would result in an error. Of course, this means that the stringResource function being used above is also marked as a @ReadOnlyComposable. The @Preview annotation @Preview is a core part of Jetpack Compose tooling, and it can be used to preview small composable snippets, such as: @Preview @Composable fun UserRowPreview() { UserRow(user = randomUser()) } Notably, the annotation comes with a large array of parameters that you can use to customize the previews. For example, the previews don't show a background by default, so whatever your IDE's theme is will serve as the background, which often makes for a bad experience if the composable you're previewing doesn't create its own background. Adding the showBackground = true parameter to the annotation means the difference between these two looks: There are many options available on this annotation to set the size and locale, show the system UI, create groups of previews, and so on. For a deeper exploration of the available options, check out this article by Joe Birch. List spacing Getting spacing around lists right has been a difficult task with the old View system. Should you add padding or margins? How will content get cut off, where and how will the overscroll animation be displayed? Another frequent task is adding space between the list elements, for this you'd implement your own RecyclerView.ItemDecoration class, where you'd then write pixel values into an outRect based on various parameters. Compose makes this all a lot easier. There are two main parameters you can use to configure spacing on a LazyList: contentPadding and verticalArrangement. As opposed to regular padding (using Modifier.padding) which would add padding outside the composable and cut off the contents of the list, content padding is added inside the composable, meaning that content will be able to scroll into this padded area. Here's the same LazyRow with regular padding and content padding, when scrolled to the left: LazyRow( contentPadding = PaddingValues(horizontal = 24.dp, vertical = 0.dp), ) { items(users) { user -\u003e FavoriteUser(user) } } The PaddingValues objects has various different constructor functions: you can specify the same padding on all sides, horizontal and vertical padding separately, or individual values for all sides! The verticalArrangement and horizontalArrangement parameters (on LazyColumn and LazyRow, respectively) can be used to easily add spacing between the elements of the list, by using Arrangement.spacedBy: LazyRow( contentPadding = PaddingValues(horizontal = 24.dp, vertical = 0.dp), horizontalArrangement = Arrangement.spacedBy(16.dp), ) { items(users) { user -\u003e FavoriteUser(user) } } This makes the following change to the list: Local Composable functions Kotlin offers local functions to create short, simple functions that will only be used within another function (and shouldn't even be exposed to others within the same file, like private functions would be). This works with @Composable functions as well - credit goes to Gabor Varadi for this idea. Here's an example of creating a very small, simple composable to be used inside another: @Composable fun UserRow(user: User) { @Composable fun OnlineIndicator() { Box( Modifier .size(12.dp) .clip(CircleShape) .background(AppColors.onlineIndicator) ) } Row { ... if (user.isOnline) { OnlineIndicator() } } } Conclusion That's a wrap for now! Hope you discovered some useful new features of Jetpack Compose along the way. Remember, you can find the full source code of the sample on GitHub, if you wanna play around with the code yourself. Curious about Compose? Check out our previous article where you can learn how to build a real, functional Android Chat app with Jetpack Compose. To add a real messaging feature to your app, check out Stream's Chat SDK for Android. It's easy to get started with the in-app messaging tutorial, and you can find more details on the GitHub page of the Android SDK.",
  "image": "https://stream-blog-v2.imgix.net/blog/wp-content/uploads/54b4686133d6b784ad3973a1919eb871/clean_chat_2400x1350px.png?auto=compress%2Cformat\u0026ixlib=php-3.3.0",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003eJetpack Compose makes it easy to build beautiful UI. Check out this Chat UI sample, and learn some exciting bits of Compose along the way!\u003c/p\u003e\u003carticle\u003e\u003cblockquote\u003e\n\u003cp\u003eStream now provides a \u003ca href=\"https://getstream.io/chat/sdk/compose/\"\u003eJetpack Compose Chat SDK\u003c/a\u003e. Check out the \u003ca href=\"https://getstream.io/tutorials/android-chat/\"\u003eCompose Chat Messaging Tutorial\u003c/a\u003e and give it a try today!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe\u0026#39;ve recently published a \u003ca href=\"https://twitter.com/getstream_io/status/1392477211018637318\" target=\"_blank\"\u003eJetpack Compose design sample on Twitter\u003c/a\u003e, recreating the \u003ca href=\"https://dribbble.com/shots/14115486-Contacts-Messages/\" target=\"_blank\"\u003eContacts \u0026amp; Messages design\u003c/a\u003e by \u003ca href=\"https://dribbble.com/mickaeldll\" target=\"_blank\"\u003eMickael Guillaume on Dribbble\u003c/a\u003e.\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c28dee2a9a05fd441df0ffb85334d52e/app-screens.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c28dee2a9a05fd441df0ffb85334d52e/app-screens.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c28dee2a9a05fd441df0ffb85334d52e/app-screens.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/c28dee2a9a05fd441df0ffb85334d52e/app-screens.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The final chat design built in Jetpack Compose\" loading=\"lazy\" width=\"1500\" height=\"1560\"/\u003e\n\u003cp\u003eThe source code for this sample \u003ca href=\"https://github.com/zsmb13/CleanChatCompose\" target=\"_blank\"\u003eis available on GitHub\u003c/a\u003e. In this article, we\u0026#39;ll review some of the solutions within the sample to learn more about \u003ca href=\"https://developer.android.com/jetpack/compose\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e!\u003c/p\u003e\n\u003ch2 id=\"simple-color-management\"\u003eSimple color management\u003c/h2\u003e\n\u003cp\u003eStarting simple, we\u0026#39;ll take a look at the color management of the sample. Since it doesn\u0026#39;t support dark mode, and doesn\u0026#39;t need a large palette, it doesn\u0026#39;t make use of the color systems provided by \u003ccode\u003eMaterialTheme\u003c/code\u003e. Instead, it groups all colors used in a simple \u003ccode\u003eobject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eobject\u003c/span\u003e AppColors \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e bgLight \u003cspan\u003e=\u003c/span\u003e Color\u003cspan\u003e.\u003c/span\u003eWhite\n    \u003cspan\u003eval\u003c/span\u003e bgDark \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0xFF1A1A1A\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e bgMedium \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0xFF323232\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e textLight \u003cspan\u003e=\u003c/span\u003e Color\u003cspan\u003e.\u003c/span\u003eWhite\n    \u003cspan\u003eval\u003c/span\u003e textDark \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0xFF393E46\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e textMedium \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0xFF929599\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003eval\u003c/span\u003e onlineIndicator \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0xFF19D42B\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese are really straightforward to use, for example, here\u0026#39;s the implementation of the small green circles that are used as online indicators:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eBox\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    Modifier\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclip\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eCircleShape\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAppColors\u003cspan\u003e.\u003c/span\u003eonlineIndicator\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"custom-fonts\"\u003eCustom fonts\u003c/h2\u003e\n\u003cp\u003eTo attempt to match the font in the sample, we used the free \u003ca href=\"https://www.1001fonts.com/metropolis-font.html\" target=\"_blank\"\u003eMetropolis font\u003c/a\u003e. Adding a custom font in a Compose app is simple: add the resources, create a font family, and then apply it in the theme.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdd the resources to the \u003ccode\u003eres/font\u003c/code\u003e folder.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHere, we\u0026#39;ve added five different variants of the Metropolis font. Be careful to use names that the Android resource system can handle (avoid spaces and capital letters).\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/30574c041ef981d4e50a38133d193cb5/font-resources.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/30574c041ef981d4e50a38133d193cb5/font-resources.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/30574c041ef981d4e50a38133d193cb5/font-resources.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/30574c041ef981d4e50a38133d193cb5/font-resources.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"The font resource folder\" loading=\"lazy\" width=\"270\" height=\"194\"/\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a \u003ccode\u003eFontFamily\u003c/code\u003e and configure it in the theme.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThese resources can be wrapped in \u003ccode\u003eFont\u003c/code\u003e objects, specifying the weight and style that each font file corresponds to. Then, they can all be added to a \u003ccode\u003eFontFamily\u003c/code\u003e like so:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e Metropolis \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eFontFamily\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003eFont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003efont\u003cspan\u003e.\u003c/span\u003emetropolis_light\u003cspan\u003e,\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eLight\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eFont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003efont\u003cspan\u003e.\u003c/span\u003emetropolis_regular\u003cspan\u003e,\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eNormal\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eFont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003efont\u003cspan\u003e.\u003c/span\u003emetropolis_regular_italic\u003cspan\u003e,\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eNormal\u003cspan\u003e,\u003c/span\u003e FontStyle\u003cspan\u003e.\u003c/span\u003eItalic\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eFont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003efont\u003cspan\u003e.\u003c/span\u003emetropolis_medium\u003cspan\u003e,\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eMedium\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eFont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003efont\u003cspan\u003e.\u003c/span\u003emetropolis_bold\u003cspan\u003e,\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eBold\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis font family is part of the \u003ccode\u003eTypography\u003c/code\u003e options in the theme:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eval\u003c/span\u003e Typography \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTypography\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    body1 \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTextStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        fontFamily \u003cspan\u003e=\u003c/span\u003e Metropolis\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e// Using our own custom font family here\u003c/span\u003e\n        fontWeight \u003cspan\u003e=\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eNormal\u003cspan\u003e,\u003c/span\u003e\n        fontSize \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esp\n    \u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhich will be contained by the app theme, like so:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eCleanChatTheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    content\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e@Composable\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e Unit\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eMaterialTheme\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        typography \u003cspan\u003e=\u003c/span\u003e Typography\u003cspan\u003e,\u003c/span\u003e\n        content \u003cspan\u003e=\u003c/span\u003e content\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eSet font weights as needed.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHaving \u003ccode\u003eCleanChatTheme\u003c/code\u003e applied at the root of the Compose tree, the font family will automatically be applied to \u003ccode\u003eText\u003c/code\u003e elements in the app.\u003c/p\u003e\n\u003cp\u003eTo get a specific variant of the font, such as \u003cstrong\u003ebold\u003c/strong\u003e, specify the weight when creating a \u003ccode\u003eText\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    user\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e\n    fontWeight \u003cspan\u003e=\u003c/span\u003e FontWeight\u003cspan\u003e.\u003c/span\u003eBold\u003cspan\u003e,\u003c/span\u003e\n    color \u003cspan\u003e=\u003c/span\u003e AppColors\u003cspan\u003e.\u003c/span\u003etextDark\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"the-readonlycomposable-annotation\"\u003eThe @ReadOnlyComposable annotation\u003c/h2\u003e\n\u003cp\u003eSometimes you need access to the composable environment in a function, but won\u0026#39;t emit any UI inside it. In these cases, \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/runtime/ReadOnlyComposable\"\u003e\u003ccode\u003e@ReadOnlyComposable\u003c/code\u003e\u003c/a\u003e can be used to tell the compiler about this to perform certain optimizations.\u003c/p\u003e\n\u003cp\u003eTake the following function: it transforms a \u003ccode\u003eUser\u003c/code\u003e into a \u003ccode\u003eString\u003c/code\u003e that describes their last active status (currently online or seen X time ago). To do this, it uses the \u003ccode\u003estringResource\u003c/code\u003e composable function.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003e@ReadOnlyComposable\u003c/span\u003e\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003elastActiveStatus\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e:\u003c/span\u003e User\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e String \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        user\u003cspan\u003e.\u003c/span\u003eisOnline \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003estringResource\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eR\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003euser_online\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003estringResource\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            R\u003cspan\u003e.\u003c/span\u003estring\u003cspan\u003e.\u003c/span\u003euser_last_activity\u003cspan\u003e,\u003c/span\u003e\n            DateUtils\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetRelativeTimeSpanString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003elastOnline\u003cspan\u003e.\u003c/span\u003etime\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you\u0026#39;d expect, composables marked with \u003ccode\u003e@ReadOnlyComposable\u003c/code\u003e can only call other composables that are also marked with \u003ccode\u003e@ReadOnlyComposable\u003c/code\u003e. For example, trying to create a \u003ccode\u003eText\u003c/code\u003e inside this function would result in an error.\u003c/p\u003e\n\u003cp\u003eOf course, this means that the \u003ccode\u003estringResource\u003c/code\u003e function being used above is also marked as a \u003ccode\u003e@ReadOnlyComposable\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-preview-annotation\"\u003eThe @Preview annotation\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e@Preview\u003c/code\u003e is a core part of Jetpack Compose tooling, and it can be used to preview small composable snippets, such as:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Preview\u003c/span\u003e\n\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eUserRowPreview\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eUserRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erandomUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotably, the annotation comes with a large array of parameters that you can use to customize the previews.\u003c/p\u003e\n\u003cp\u003eFor example, the previews don\u0026#39;t show a background by default, so whatever your IDE\u0026#39;s theme is will serve as the background, which often makes for a bad experience if the composable you\u0026#39;re previewing doesn\u0026#39;t create its own background.\u003c/p\u003e\n\u003cp\u003eAdding the \u003ccode\u003eshowBackground = true\u003c/code\u003e parameter to the annotation means the difference between these two looks:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d730d42dce2be7f42da89c9d45c3ffa1/preview-backgrounds.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d730d42dce2be7f42da89c9d45c3ffa1/preview-backgrounds.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d730d42dce2be7f42da89c9d45c3ffa1/preview-backgrounds.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d730d42dce2be7f42da89c9d45c3ffa1/preview-backgrounds.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Jetpack Compose preview backgrounds in Android Studio\" loading=\"lazy\" width=\"433\" height=\"371\"/\u003e\n\u003cp\u003eThere are many options available on this annotation to set the size and locale, show the system UI, create groups of previews, and so on. For a deeper exploration of the available options, \u003ca href=\"https://joebirch.co/android/exploring-jetpack-compose-preview-annotation/\" target=\"_blank\"\u003echeck out this article\u003c/a\u003e by Joe Birch.\u003c/p\u003e\n\u003ch2 id=\"list-spacing\"\u003eList spacing\u003c/h2\u003e\n\u003cp\u003eGetting spacing around lists right has been a difficult task with the old View system. Should you add padding or margins? How will content get cut off, where and how will the overscroll animation be displayed?\u003c/p\u003e\n\u003cp\u003eAnother frequent task is adding space between the list elements, for this you\u0026#39;d implement your own \u003ccode\u003eRecyclerView.ItemDecoration\u003c/code\u003e class, where you\u0026#39;d then write pixel values into an \u003ccode\u003eoutRect\u003c/code\u003e based on various parameters.\u003c/p\u003e\n\u003cp\u003eCompose makes this all a lot easier. There are two main parameters you can use to configure spacing on a \u003ccode\u003eLazyList\u003c/code\u003e: \u003ccode\u003econtentPadding\u003c/code\u003e and \u003ccode\u003everticalArrangement\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs opposed to regular padding (using \u003ccode\u003eModifier.padding\u003c/code\u003e) which would add padding outside the composable and cut off the contents of the list, \u003cem\u003econtent padding\u003c/em\u003e is added inside the composable, meaning that content will be able to scroll into this padded area.\u003c/p\u003e\n\u003cp\u003eHere\u0026#39;s the same \u003ccode\u003eLazyRow\u003c/code\u003e with regular padding and content padding, when scrolled to the left:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3d0df576b73582c4057350d59ac208cf/content-padding.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3d0df576b73582c4057350d59ac208cf/content-padding.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3d0df576b73582c4057350d59ac208cf/content-padding.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3d0df576b73582c4057350d59ac208cf/content-padding.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Applying content padding to a LazyList\" loading=\"lazy\"/\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eLazyRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    contentPadding \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ePaddingValues\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehorizontal \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e,\u003c/span\u003e vertical \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eitems\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eusers\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e user \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n        \u003cspan\u003eFavoriteUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003ePaddingValues\u003c/code\u003e objects has various different constructor functions: you can specify the same padding on all sides, horizontal and vertical padding separately, or individual values for all sides!\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003everticalArrangement\u003c/code\u003e and \u003ccode\u003ehorizontalArrangement\u003c/code\u003e parameters (on \u003ccode\u003eLazyColumn\u003c/code\u003e and \u003ccode\u003eLazyRow\u003c/code\u003e, respectively) can be used to easily add spacing between the elements of the list, by using \u003ccode\u003eArrangement.spacedBy\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eLazyRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    contentPadding \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ePaddingValues\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ehorizontal \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e,\u003c/span\u003e vertical \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    horizontalArrangement \u003cspan\u003e=\u003c/span\u003e Arrangement\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003espacedBy\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eitems\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eusers\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e user \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n        \u003cspan\u003eFavoriteUser\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis makes the following change to the list:\u003c/p\u003e\n\u003cimg src=\"https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3034250a237252e4493ba1e1d2444e48/spaced-list.png?auto=format\u0026amp;auto=compress\" srcset=\"\n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3034250a237252e4493ba1e1d2444e48/spaced-list.png?auto=format\u0026amp;auto=compress\u0026amp;w=400\u0026amp;fit=max 400w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3034250a237252e4493ba1e1d2444e48/spaced-list.png?auto=format\u0026amp;auto=compress\u0026amp;w=800\u0026amp;fit=max 800w, \n      https://stream-blog-v2.imgix.net/blog/wp-content/uploads/3034250a237252e4493ba1e1d2444e48/spaced-list.png?auto=format\u0026amp;auto=compress\u0026amp;w=1600\u0026amp;fit=max 1600w\n    \" sizes=\"(max-width: 1023px) 100vw, 800px\" alt=\"Spaced list items\" loading=\"lazy\" width=\"588\" height=\"133\"/\u003e\n\u003ch2 id=\"local-composable-functions\"\u003eLocal Composable functions\u003c/h2\u003e\n\u003cp\u003eKotlin offers local functions to create short, simple functions that will only be used within another function (and shouldn\u0026#39;t even be exposed to others within the same file, like \u003ccode\u003eprivate\u003c/code\u003e functions would be). \u003c/p\u003e\n\u003cp\u003eThis works with \u003ccode\u003e@Composable\u003c/code\u003e functions as well - credit goes to \u003ca href=\"https://twitter.com/Zhuinden\" target=\"_blank\"\u003eGabor Varadi\u003c/a\u003e for this idea. Here\u0026#39;s an example of creating a very small, simple composable to be used inside another:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@Composable\u003c/span\u003e\n\u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eUserRow\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e:\u003c/span\u003e User\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e@Composable\u003c/span\u003e\n    \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eOnlineIndicator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eBox\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n            Modifier\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003edp\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclip\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eCircleShape\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eAppColors\u003cspan\u003e.\u003c/span\u003eonlineIndicator\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    Row \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e..\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003euser\u003cspan\u003e.\u003c/span\u003eisOnline\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eOnlineIndicator\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThat\u0026#39;s a wrap for now! Hope you discovered some useful new features of Jetpack Compose along the way. Remember, you can find the \u003ca href=\"https://github.com/zsmb13/CleanChatCompose\" target=\"_blank\"\u003efull source code of the sample on GitHub\u003c/a\u003e, if you wanna play around with the code yourself.\u003c/p\u003e\n\u003cp\u003eCurious about Compose? Check out our previous article where you can learn how to \u003ca href=\"https://getstream.io/blog/android-jetpack-compose-chat-example/\"\u003ebuild a real, functional Android Chat app with Jetpack Compose\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo add a real messaging feature to your app, check out \u003ca href=\"https://getstream.io/chat/sdk/android/\"\u003eStream\u0026#39;s Chat SDK for Android\u003c/a\u003e. It\u0026#39;s easy to get started with the \u003ca href=\"https://getstream.io/tutorials/android-chat/\"\u003ein-app messaging tutorial\u003c/a\u003e, and you can find more details on \u003ca href=\"https://github.com/GetStream/stream-chat-android\" target=\"_blank\"\u003ethe GitHub page of the Android SDK\u003c/a\u003e.\u003c/p\u003e\n\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2021-06-07T10:52:47Z",
  "modifiedTime": null
}
