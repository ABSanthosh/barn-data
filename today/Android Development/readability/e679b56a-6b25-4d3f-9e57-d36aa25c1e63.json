{
  "id": "e679b56a-6b25-4d3f-9e57-d36aa25c1e63",
  "title": "Tips for Android Nougat’s bundled notifications",
  "link": "https://saket.me/nougat-bundled-notifications/",
  "description": "I’ve been working on implementing bundled notifications in my app, which is by far one of my favourite features about Android 7.0 Nougat. While the official guide is good enough for understanding how they work, I’ve constantly found myself running into behaviours that were not easy to find in the documentation. This post is an attempt to summarise […] The post Tips for Android Nougat’s bundled notifications appeared first on Saket Narayan.",
  "author": "Saket Narayan",
  "published": "Wed, 31 May 2017 14:00:50 +0000",
  "source": "https://saket.me/feed/",
  "categories": [
    "Android",
    "notifications"
  ],
  "byline": "Saket Narayan",
  "length": 4538,
  "excerpt": "A brief guide for understanding bundled notifications on Nougat and avoiding some of its gotchas that are not clearly documented.",
  "siteName": "Saket Narayan",
  "favicon": "",
  "text": "I’ve been working on implementing bundled notifications in my app, which is by far one of my favourite features about Android 7.0 Nougat. While the official guide is good enough for understanding how they work, I’ve constantly found myself running into behaviours that were not easy to find in the documentation. This post is an attempt to summarise those findings. Implementing bundled notifications is slightly difficult because ensuring that they work-as-intended across multiple Android versions can involve a fair amount of cognitive overhead. To start with, we require two things for creating a bundle: - One summary notification - N bundled child notifications On Nougat and above, Android will display the summary notification when collapsed and the child notifications when expanded. On older versions however, Android will only show the summary notification. This essentially means that we also need to correctly choose a style (BigTextStyle, InboxStyle, etc.) for the summary notification’s style depending on the number of items to show. So the list of things required actually looks like this: - One summary notification - BigTextStyle, for 1 item (e.g., message) - InboxStyle, for N items - N bundled child notifications Summary Notification One interesting behavior of the summary notification is that it gets ignored on Nougat. Android picks up some of its properties like the color, timestamp, icon, etc. and generates its own summary notification with a style that looks and behaves similar to InboxStyle. new Notification.Builder(context) .setContentTitle() // Ignored .setContentText() // Ignored .setSmallIcon(R.drawable.new_mail) // Picked .setLargeIcon() // Picked .setStyle(new InboxStyle()) // Ignored .build(); On versions before Nougat, the summary notification is displayed without any modifications. Managing State If your notifications are actionable, you will also want to update their state upon user interaction. For example, when a message notification is marked as “read”, you might want to dismiss the notification before updating the message’s state in the database. Or a more complex example would be “direct reply” where Android requires the notification to be reset for dismissing the reply field once the reply has been sent. Another important thing here to keep in mind is that the notifications are only bundled “visually” and Android treats them as separate notifications functionality wise. What this means is that, Each notification in the bundle can have its own tone and vibration. So if you accidentally end up setting a tone to each one of them, Android will play all the tones… at the same time. A bundle is not replaceable. When a new bundle is posted with the same group key, Android will replace the summary, but the new child notifications will get merged with the previously visible child notifications instead of replacing them entirely. The summary notification can exist even when all the bundled notifications are dismissed. Problem #1 can be solved easily by only setting the tone and vibration only on the summary notification. However, problem #2 and #3 will require some effort which will vary depending upon the use-case. Here’s a simple example: 1. Get all “unread” messages from DB. 2. Display bundled notifications if we have unreads. Otherwise, dismiss any stale notification. 3. When a notification is marked as read: a) Dismiss it using NotificationManager#cancel(notifId). b) Mark it as read in DB. 4. To ensure that the summary notification is not the only remaining notification, goto step #1 again. Visual Changes This “diff” illustration from Android Developer’s blog can be referred to for understanding the visual changes done in Nougat. Gotchas Notification color Starting from Nougat, Android applies a darker tint to the color passed to Notification.Builder#setColor() to increase contrast and legibility. This behaviour is intentional so you should not try to balance this by supplying a lighter color. Notification ID To be able to correctly update notifications (for e.g., dismissing direct reply field), make sure to use stable IDs for them. That is, your logic for generating notification IDs should be pure. Not doing so will result in duplicate notifications. Cancelling summary notification Cancelling a summary notification also cancels all its child notifications. Dan Lew has written a detailed blog post to workaround this problem. Photo credits: Material.io",
  "image": "https://saket.me/wp-content/uploads/2017/05/Android-Nougat-bundled-notifications.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\t\u003cp\u003eI’ve been working on implementing bundled notifications in my app, which is by far one of my favourite features about Android 7.0 Nougat. While the \u003ca href=\"https://developer.android.com/guide/topics/ui/notifiers/notifications.html\"\u003eofficial guide\u003c/a\u003e is good enough for understanding how they work, I’ve constantly found myself running into behaviours that were not easy to find in the documentation. This post is an attempt to summarise those findings.\u003c/p\u003e\n\u003cp\u003eImplementing bundled notifications is slightly difficult because ensuring that they work-as-intended across multiple Android versions can involve a fair amount of cognitive overhead. To start with, we require two things for creating a bundle:\u003c/p\u003e\n\u003cpre\u003e- One summary notification\n- N bundled child notifications\n\u003c/pre\u003e\n\u003cp\u003eOn Nougat and above, Android will display the summary notification when collapsed and the child notifications when expanded. On older versions however, Android will only show the summary notification. This essentially means that we also need to correctly choose a style (\u003ccode\u003eBigTextStyle\u003c/code\u003e, \u003ccode\u003eInboxStyle\u003c/code\u003e, etc.) for the summary notification’s style depending on the number of items to show. So the list of things required actually looks like this:\u003c/p\u003e\n\u003cpre\u003e- One summary notification\n  - BigTextStyle, for 1 item (e.g., message)\n  - InboxStyle, for N items\n- N bundled child notifications\n\u003c/pre\u003e\n\u003ch4\u003eSummary Notification\u003c/h4\u003e\n\u003cp\u003eOne interesting behavior of the summary notification is that it gets ignored on Nougat. Android picks up some of its properties like the color, timestamp, icon, etc. and generates its own summary notification with a style that looks and behaves similar to \u003ccode\u003eInboxStyle.\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew Notification.Builder(context)\n  .setContentTitle()                 // Ignored\n  .setContentText()                  // Ignored\n  .setSmallIcon(R.drawable.new_mail) // Picked\n  .setLargeIcon()                    // Picked\n  .setStyle(new InboxStyle())        // Ignored\n  .build();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn versions before Nougat, the summary notification is displayed without any modifications.\u003c/p\u003e\n\u003ch4\u003eManaging State\u003c/h4\u003e\n\u003cp\u003eIf your notifications are actionable, you will also want to update their state upon user interaction. For example, when a message notification is marked as “read”, you might want to dismiss the notification before updating the message’s state in the database. Or a more complex example would be “direct reply” where Android requires the notification to be reset for dismissing the reply field once the reply has been sent.\u003c/p\u003e\n\u003cp\u003eAnother important thing here to keep in mind is that the notifications are only bundled “visually” and Android treats them as separate notifications functionality wise. What this means is that,\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEach notification in the bundle can have its own tone and vibration. So if you accidentally end up setting a tone to each one of them, Android will play all the tones… at the same time.\u003c/li\u003e\n\u003cli\u003eA bundle is not replaceable. When a new bundle is posted with the same group key, Android will replace the summary, but the new child notifications will get merged with the previously visible child notifications instead of replacing them entirely.\u003c/li\u003e\n\u003cli\u003eThe summary notification can exist even when all the bundled notifications are dismissed.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eProblem #1 can be solved easily by only setting the tone and vibration only on the summary notification. However, problem #2 and #3 will require some effort which will vary depending upon the use-case.\u003c/p\u003e\n\u003cp\u003eHere’s a simple example:\u003c/p\u003e\n\u003cpre\u003e1. Get all “unread” messages from DB.\n2. Display bundled notifications if we have unreads. Otherwise, dismiss any stale notification.\n3. When a notification is marked as read: \n   a) Dismiss it using NotificationManager#cancel(notifId).\n   b) Mark it as read in DB.\n4. To ensure that the summary notification is not the only remaining notification, goto step #1 again.\u003c/pre\u003e\n\u003ch4\u003eVisual Changes\u003c/h4\u003e\n\u003cp\u003e\u003cimg data-attachment-id=\"208\" data-permalink=\"https://saket.me/nougat-bundled-notifications/nougat-notification-changes/\" data-orig-file=\"https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes.png\" data-orig-size=\"640,293\" data-comments-opened=\"0\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"Nougat notification changes\" data-image-description=\"\" data-medium-file=\"https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes-300x137.png\" data-large-file=\"https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes.png\" decoding=\"async\" loading=\"lazy\" src=\"https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes.png\" alt=\"Re-ordering of visual elements done in notifications on Nougat\" width=\"640\" height=\"293\" srcset=\"https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes.png 640w, https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes-300x137.png 300w, https://saket.me/wp-content/uploads/2017/05/Nougat-notification-changes-425x195.png 425w\" sizes=\"(max-width: 640px) 100vw, 640px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis “diff” illustration from Android Developer’s \u003ca href=\"https://android-developers.googleblog.com/2016/06/notifications-in-android-n.html\"\u003eblog\u003c/a\u003e can be referred to for understanding the visual changes done in Nougat.\u003c/p\u003e\n\u003ch4\u003eGotchas\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eNotification color\u003cbr/\u003e\n\u003c/strong\u003eStarting from Nougat, Android applies a darker tint to the color passed to \u003ca href=\"https://developer.android.com/reference/android/app/Notification.Builder.html#setColor(int)\"\u003e\u003ccode\u003eNotification.Builder#setColor()\u003c/code\u003e\u003c/a\u003e to increase contrast and legibility. This behaviour is intentional so you should not try to balance this by supplying a lighter color.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNotification ID\u003cbr/\u003e\n\u003c/strong\u003eTo be able to correctly update notifications (for e.g., dismissing direct reply field), make sure to use stable IDs for them. That is, your logic for generating notification IDs should be \u003ca href=\"https://stackoverflow.com/a/40277670/2511884\"\u003epure\u003c/a\u003e. Not doing so will result in duplicate notifications.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCancelling summary notification\u003cbr/\u003e\n\u003c/strong\u003eCancelling a summary notification also cancels all its child notifications. Dan Lew has written a \u003ca href=\"https://blog.danlew.net/2017/02/07/correctly-handling-bundled-android-notifications/\"\u003edetailed blog post\u003c/a\u003e to workaround this problem.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ePhoto credits: \u003ca href=\"https://material.io/guidelines/patterns/notifications.html#notifications-behavior\"\u003eMaterial.io\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2017-05-31T14:00:50Z",
  "modifiedTime": "2023-10-15T06:07:34Z"
}
