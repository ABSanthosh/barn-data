{
  "id": "0d5064ee-9217-4e79-a2c6-3d8deb3ec4dc",
  "title": "Scientists Establish the Best Algorithm for Traversing a Map",
  "link": "https://www.wired.com/story/scientists-establish-the-best-algorithm-for-traversing-a-map/",
  "description": "Dijkstra’s algorithm was long thought to be the most efficient way to find a graph’s best routes. Researchers have now proven that it’s “universally optimal.”",
  "author": "Ben Brubaker",
  "published": "Sun, 17 Nov 2024 12:00:00 +0000",
  "source": "https://www.wired.com/feed/category/science/latest/rss",
  "categories": [
    "Science",
    "Science / Physics and Math",
    "Route Master"
  ],
  "byline": "Ben Brubaker",
  "length": 11963,
  "excerpt": "Dijkstra’s algorithm was long thought to be the most efficient way to find a graph’s best routes. Researchers have now proven that it’s “universally optimal.”",
  "siteName": "WIRED",
  "favicon": "",
  "text": "If you buy something using links in our stories, we may earn a commission. This helps support our journalism. Learn more. Please also consider subscribing to WIREDThe original version of this story appeared in Quanta Magazine.If you’ve been making the same commute for a long time, you’ve probably settled on what seems like the best route. But “best” is a slippery concept. Perhaps one day there’s an accident or road closure, and your fastest route becomes the slowest.Scenarios like this are also a challenge for researchers who develop algorithms, the step-by-step procedures that computers use to solve problems. Many different algorithms can solve any given problem, and the question of which is best can be frustratingly ambiguous.For example, imagine an algorithm that’s designed to find the fastest route between two points. There are lots of possible ways to design such an algorithm so that it doesn’t fail. A successful algorithm will always return the fastest route, whether you use it in London or Los Angeles, and whether it’s rush hour or the middle of the night.But those algorithms aren’t all the same. The time each one takes to find the right answer will vary depending on where and when it’s used, and cases that are hard for one algorithm may be easy for another. Ideally, you’d want an algorithm that always runs faster than the others.For most problems, it’s simply not possible to find such a unicorn. But a new proof shows that for the quintessential path-finding problem, one algorithm is close to ideal: Assuming worst-case traffic patterns, it’s the best approach on every possible street grid. What’s more, the algorithm is nearly 70 years old and a staple of the undergraduate computer science curriculum. The new work will be presented with a best-paper award at the 2024 Symposium on Foundations of Computer Science next week.“It’s amazing,” said Tim Roughgarden, a computer scientist at Columbia University. “I can’t imagine a more compelling research paper about a problem we teach students in undergrad algorithms.”Heaps and BoundsThe story of this iconic path-finding algorithm began with a detour. In 1956, the 26-year-old Dutch computer scientist Edsger Dijkstra wanted to write a program that would show off the capabilities of a brand-new computer called the ARMAC. While shopping with his fiancée in Amsterdam, he stopped in at a café for a break. That’s when he hit on the idea for the algorithm that now bears his name. He didn’t have writing materials on hand, so over the course of 20 minutes he worked out the details in his head.Edsger Dijkstra, seen here in 2002, developed a classic algorithm for rapidly finding the shortest paths through a network. Photograph: Hamilton RichardsIn an interview toward the end of his life, Dijkstra credited his algorithm’s enduring appeal in part to its unusual origin story. “Without pencil and paper you are almost forced to avoid all avoidable complexities,” he said.Dijkstra’s algorithm doesn’t just tell you the fastest route to one destination. Instead, it gives you an ordered list of travel times from your current location to every other point that you might want to visit—a solution to what researchers call the single-source shortest-paths problem. The algorithm works in an abstracted road map called a graph: a network of interconnected points (called vertices) in which the links between vertices are labeled with numbers (called weights). These weights might represent the time required to traverse each road in a network, and they can change depending on traffic patterns. The larger a weight, the longer it takes to traverse that path.To get a sense of Dijkstra’s algorithm, imagine yourself wandering through a graph, writing down the travel time from your starting point to each new vertex on a piece of scratch paper. Whenever you have a choice about which direction to explore next, head toward the closest vertex you haven’t visited yet. If you discover a faster route to any vertex, jot down the new time and cross out the old one. When you’re sure that you’ve found the fastest path, move the travel time from your notes to a separate, more presentable list.Courtesy of Mark Belan/Quanta Magazine“It’s a great algorithm,” said Erik Demaine, a computer scientist at the Massachusetts Institute of Technology. “It’s very fast, simple, and easy to implement.”To put this procedure into practice, you’d need to decide on a system for organizing your notes—a data structure, in the lingo of computer science. That may sound like a minor technical detail, but time spent searching through your notes whenever you need to edit or remove an entry can have a big effect on the overall runtime of the algorithm.Dijkstra’s paper used a simple data structure that left room for improvement. In the following decades, researchers developed better ones, affectionately dubbed “heaps,” in which certain items are easier to find than others. They take advantage of the fact that Dijkstra’s algorithm only ever needs to remove the entry for the closest remaining vertex. “A heap is basically a data structure that allows you to do this very quickly,” said Václav Rozhoň, a researcher at the Institute for Computer Science, Artificial Intelligence and Technology (INSAIT) in Sofia, Bulgaria.In 1984, two computer scientists developed a clever heap design that enabled Dijkstra’s algorithm to reach a theoretical limit, or “lower bound,” on the time required to solve the single-source shortest-paths problem. In one specific sense, this version of Dijkstra’s algorithm is the best possible. That was the last word on the standard version of the problem for nearly 40 years. Things only changed when a few researchers took a closer look at what it means to be “best.”Best BehaviorResearchers typically compare algorithms by studying how they fare in worst-case scenarios. Imagine the world’s most confusing street grid, then add some especially perplexing traffic patterns. If you insist on finding the fastest routes in these extreme circumstances, the 1984 version of Dijkstra’s algorithm is provably unbeatable.But hopefully, your city doesn’t have the world’s worst street grid. And so you may ask: Is there an algorithm that’s unbeatable on every road network? The first step to answering this question is to make the conservative assumption that each network has worst-case traffic patterns. Then you want your algorithm to find the fastest paths through any possible graph layout, assuming the worst possible weights. Researchers call this condition “universal optimality.” If you had a universally optimal algorithm for the simpler problem of just getting from one point on a graph to another, it could help you beat rush hour traffic in every city in the world.“This sounds too good to be true,” said Bernhard Haeupler, a computer scientist affiliated with INSAIT and the Swiss Federal Institute of Technology Zurich (ETH Zurich).Haeupler became fascinated with the promise of universal optimality while writing a grant proposal in the mid-2010s. Many researchers find that part of the job tedious, but Haeupler saw it as an opportunity. “It allows you to throw your skepticism out and just dream big,” he said.Those dreams came to fruition in 2021, when Haeupler and two graduate students proved that it was possible to build universally optimal algorithms for several important graph problems. He didn’t think to ask whether the same condition was achievable for the classic single-source shortest-paths problem. That would have to wait until a different graduate student dared to dream big.The Shortest Path to VictoryIn early 2023, Rozhoň was at the tail end of his graduate program at ETH Zurich. He had just finished a paper about going beyond worst-case analysis in a different context, and he was brainstorming new ideas to pursue with his coauthor Jakub Tětek, then a graduate student at the University of Copenhagen. Rozhoň suggested they try to devise a universally optimal algorithm for the single-source shortest-paths problem.“I said, ‘No, but that’s not possible; that just cannot be done,’” Tětek recalled. But Rozhoň convinced him to give it a try. In the spring, the team grew to three with the addition of Richard Hladík, a graduate student at ETH Zurich whom Rozhoň and Tětek had met when all three were high schoolers in the Czech Republic.The trio tinkered with many different aspects of Dijkstra’s algorithm and the heap that it used, and they managed to kludge together a universally optimal variant. But the resulting algorithm was complicated, and they couldn’t pinpoint what conditions were actually necessary for universal optimality. In a field that thrives on comprehensive and rigorous proofs, this wasn’t enough.The three students would turn from mathematical networks to social ones. Rozhoň had begun discussing the problem with Haeupler while both were visiting colleagues in New York. From there, Haeupler flew to Panama for a holiday, but he wasn’t quite ready to set the problem aside.“It really was vacation,” he said. “But then also, thinking doesn’t stop.”From left: Bernhard Haeupler, Václav Rozhoň (top), Jakub Tětek (bottom), Robert Tarjan, and Richard Hladík proved that a version of Dijkstra’s algorithm is the best approach for every network layout. Photograph from left: INSAIT Sofia, Václav Rozhoň (top), Ivan Domes (bottom), INSAIT Sofia and INSAIT SofiaDuring a Zoom call a few days into Haeupler’s trip, the team of four settled on a new approach. They decided to focus mainly on the choice of data structure. Soon, they began to suspect that that would be enough—they could just leave the rest of Dijkstra’s algorithm intact. Within a month, they’d proved it.The key ingredient turned out to be a special property of some data structures that lets them quickly access recently added items. Heaps with this property were first constructed more than 20 years ago, but in all the years that followed, nobody made full use of it. The four researchers proved that they only needed to construct a data structure with this new property and all the other features of the 1984 heap. All they needed to do now was design it.The last person to join the team was Robert Tarjan, a computer scientist at Princeton University who was one of the inventors of that special 1984 heap. Tarjan had won the Turing Award, considered the highest honor in the field, and had also been a mentor to Haeupler in the late 2000s. When Tarjan visited Zurich in May, Haeupler invited him over for fondue—his specialty—and mentioned the new shortest-paths project. Tarjan was immediately in.The five researchers set to work developing a heap data structure with all the properties they needed. They started with an unwieldy design and improved it bit by bit until they were finally satisfied. “Every time we looked at it, we were able to simplify a little bit,” Rozhoň said. “I was actually surprised how simple it was in the end.”Some variants of Dijkstra’s algorithm have seen real-world use in software like Google Maps. The new result probably won’t have such practical applications, for which there are many considerations beyond theoretical optimality guarantees. But it may change how researchers study optimality, prompting them to look beyond the usual worst-case analysis. Often, algorithms only achieve stronger guarantees at the cost of added complexity. The new result suggests that simple algorithms with these stronger guarantees might be more widespread than researchers previously thought—the team has already identified two other examples.“The general concept is very compelling,” Tarjan said. “It remains to be seen how far one can take this.”Original story reprinted with permission from Quanta Magazine, an editorially independent publication of the Simons Foundation whose mission is to enhance public understanding of science by covering research developments and trends in mathematics and the physical and life sciences.",
  "image": "https://media.wired.com/photos/67354692ae5ed065ed871d82/191:100/w_1280,c_limit/GettyImages-1013942164.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you buy something using links in our stories, we may earn a commission. This helps support our journalism. \u003ca href=\"https://www.wired.com/2015/11/affiliate-link-policy/\"\u003eLearn more\u003c/a\u003e. Please also consider \u003ca href=\"https://subscribe.wired.com/subscribe/splits/wired/WIR_SELF?source=HCL_WIR_EDIT_HARDCODED_0_COMMERCE_AFFILIATE_ZZ\"\u003esubscribing to WIRED\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv data-testid=\"ArticlePageChunks\"\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003eThe original version\u003c/span\u003e of\u003c/em\u003e \u003ca href=\"https://www.quantamagazine.org/computer-scientists-establish-the-best-way-to-traverse-a-graph-20241025/\"\u003e\u003cem\u003ethis story\u003c/em\u003e\u003c/a\u003e \u003cem\u003eappeared in\u003c/em\u003e \u003ca href=\"https://www.quantamagazine.org\"\u003eQuanta Magazine\u003c/a\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eIf you’ve been making the same commute for a long time, you’ve probably settled on what seems like the best route. But “best” is a slippery concept. Perhaps one day there’s an accident or road closure, and your fastest route becomes the slowest.\u003c/p\u003e\u003cp\u003eScenarios like this are also a challenge for researchers who develop algorithms, the step-by-step procedures that computers use to solve problems. Many different algorithms can solve any given problem, and the question of which is best can be frustratingly ambiguous.\u003c/p\u003e\u003cp\u003eFor example, imagine an algorithm that’s designed to find the fastest route between two points. There are lots of possible ways to design such an algorithm so that it doesn’t fail. A successful algorithm will always return the fastest route, whether you use it in London or Los Angeles, and whether it’s rush hour or the middle of the night.\u003c/p\u003e\u003cp\u003eBut those algorithms aren’t all the same. The time each one takes to find the right answer will vary depending on where and when it’s used, and cases that are hard for one algorithm may be easy for another. Ideally, you’d want an algorithm that always runs faster than the others.\u003c/p\u003e\u003cp\u003eFor most problems, it’s simply not possible to find such a unicorn. But a new \u003ca data-offer-url=\"http://arxiv.org/abs/2311.11793\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;http://arxiv.org/abs/2311.11793\u0026#34;}\" href=\"http://arxiv.org/abs/2311.11793\" rel=\"nofollow noopener\" target=\"_blank\"\u003eproof\u003c/a\u003e shows that for the quintessential path-finding problem, one algorithm is close to ideal: Assuming worst-case traffic patterns, it’s the best approach on every possible street grid. What’s more, the algorithm is nearly 70 years old and a staple of the undergraduate computer science curriculum. The new work will be presented with a best-paper award at the 2024 Symposium on Foundations of Computer Science next week.\u003c/p\u003e\u003cp\u003e“It’s amazing,” said \u003ca href=\"https://www.engineering.columbia.edu/faculty-staff/directory/tim-roughgarden\" target=\"_blank\"\u003eTim Roughgarden\u003c/a\u003e, a computer scientist at Columbia University. “I can’t imagine a more compelling research paper about a problem we teach students in undergrad algorithms.”\u003c/p\u003e\u003ch2\u003eHeaps and Bounds\u003c/h2\u003e\u003cp\u003eThe story of this iconic path-finding algorithm began with a detour. In 1956, the 26-year-old Dutch computer scientist Edsger Dijkstra wanted to write a program that would show off the capabilities of a brand-new computer called the ARMAC. While shopping with his fiancée in Amsterdam, he stopped in at a café for a break. That’s when he hit on the idea for the \u003ca data-offer-url=\"https://link.springer.com/article/10.1007/BF01386390\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://link.springer.com/article/10.1007/BF01386390\u0026#34;}\" href=\"https://link.springer.com/article/10.1007/BF01386390\" rel=\"nofollow noopener\" target=\"_blank\"\u003ealgorithm\u003c/a\u003e that now bears his name. He didn’t have writing materials on hand, so over the course of 20 minutes he worked out the details in his head.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003cspan\u003e\u003cinline-embed type=\"callout\" meta=\"%7B%22type%22%3A%22callout%22%2C%22name%22%3A%22inset-right%22%2C%22body%22%3A%22%3Cp%3EEdsger%20Dijkstra%2C%20seen%20here%20in%202002%2C%20developed%20a%20classic%20algorithm%20for%20rapidly%20finding%20the%20shortest%20paths%20through%20a%20network.%3C%2Fp%3E%5Cn%22%2C%22attrs%22%3A%7B%7D%7D\" ref=\"\"\u003e\u003cp\u003eEdsger Dijkstra, seen here in 2002, developed a classic algorithm for rapidly finding the shortest paths through a network.\u003c/p\u003e\n\u003c/inline-embed\u003e\u003c/span\u003e\u003cspan\u003ePhotograph: Hamilton Richards\u003c/span\u003e\u003c/p\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003eIn an \u003ca data-offer-url=\"https://dl.acm.org/doi/10.1145/1787234.1787249\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://dl.acm.org/doi/10.1145/1787234.1787249\u0026#34;}\" href=\"https://dl.acm.org/doi/10.1145/1787234.1787249\" rel=\"nofollow noopener\" target=\"_blank\"\u003einterview\u003c/a\u003e toward the end of his life, Dijkstra credited his algorithm’s enduring appeal in part to its unusual origin story. “Without pencil and paper you are almost forced to avoid all avoidable complexities,” he said.\u003c/p\u003e\u003cp\u003eDijkstra’s algorithm doesn’t just tell you the fastest route to one destination. Instead, it gives you an ordered list of travel times from your current location to every other point that you might want to visit—a solution to what researchers call the single-source shortest-paths problem. The algorithm works in an abstracted road map called a graph: a network of interconnected points (called vertices) in which the links between vertices are labeled with numbers (called weights). These weights might represent the time required to traverse each road in a network, and they can change depending on traffic patterns. The larger a weight, the longer it takes to traverse that path.\u003c/p\u003e\u003cp\u003eTo get a sense of Dijkstra’s algorithm, imagine yourself wandering through a graph, writing down the travel time from your starting point to each new vertex on a piece of scratch paper. Whenever you have a choice about which direction to explore next, head toward the closest vertex you haven’t visited yet. If you discover a faster route to any vertex, jot down the new time and cross out the old one. When you’re sure that you’ve found the fastest path, move the travel time from your notes to a separate, more presentable list.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003cspan\u003eCourtesy of Mark Belan/Quanta Magazine\u003c/span\u003e\u003c/p\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003e“It’s a great algorithm,” said \u003ca href=\"https://www.csail.mit.edu/person/erik-demaine\" target=\"_blank\"\u003eErik Demaine\u003c/a\u003e, a computer scientist at the Massachusetts Institute of Technology. “It’s very fast, simple, and easy to implement.”\u003c/p\u003e\u003cp\u003eTo put this procedure into practice, you’d need to decide on a system for organizing your notes—a data structure, in the lingo of computer science. That may sound like a minor technical detail, but time spent searching through your notes whenever you need to edit or remove an entry can have a big effect on the overall runtime of the algorithm.\u003c/p\u003e\u003cp\u003eDijkstra’s paper used a simple data structure that left room for improvement. In the following decades, researchers developed better ones, affectionately dubbed “heaps,” in which certain items are easier to find than others. They take advantage of the fact that Dijkstra’s algorithm only ever needs to remove the entry for the closest remaining vertex. “A heap is basically a data structure that allows you to do this very quickly,” said \u003ca data-offer-url=\"https://insait.ai/dr-vaclav-rozhon/\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://insait.ai/dr-vaclav-rozhon/\u0026#34;}\" href=\"https://insait.ai/dr-vaclav-rozhon/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eVáclav Rozhoň\u003c/a\u003e, a researcher at the Institute for Computer Science, Artificial Intelligence and Technology (INSAIT) in Sofia, Bulgaria.\u003c/p\u003e\u003cp\u003eIn 1984, two computer scientists developed a \u003ca data-offer-url=\"https://ieeexplore.ieee.org/document/715934\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://ieeexplore.ieee.org/document/715934\u0026#34;}\" href=\"https://ieeexplore.ieee.org/document/715934\" rel=\"nofollow noopener\" target=\"_blank\"\u003eclever heap design\u003c/a\u003e that enabled Dijkstra’s algorithm to reach a theoretical limit, or “lower bound,” on the time required to solve the single-source shortest-paths problem. In one specific sense, this version of Dijkstra’s algorithm is the best possible. That was the last word on the standard version of the problem for nearly 40 years. Things only changed when a few researchers took a closer look at what it means to be “best.”\u003c/p\u003e\u003ch2\u003eBest Behavior\u003c/h2\u003e\u003cp\u003eResearchers typically compare algorithms by studying how they fare in worst-case scenarios. Imagine the world’s most confusing street grid, then add some especially perplexing traffic patterns. If you insist on finding the fastest routes in these extreme circumstances, the 1984 version of Dijkstra’s algorithm is provably unbeatable.\u003c/p\u003e\u003cp\u003eBut hopefully, your city doesn’t have the world’s worst street grid. And so you may ask: Is there an algorithm that’s unbeatable on every road network? The first step to answering this question is to make the conservative assumption that each network has worst-case traffic patterns. Then you want your algorithm to find the fastest paths through any possible graph layout, assuming the worst possible weights. Researchers call this condition “universal optimality.” If you had a universally optimal algorithm for the simpler problem of just getting from one point on a graph to another, it could help you beat rush hour traffic in every city in the world.\u003c/p\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003e“This sounds too good to be true,” said \u003ca data-offer-url=\"https://insait.ai/prof-bernhard-haeupler/\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://insait.ai/prof-bernhard-haeupler/\u0026#34;}\" href=\"https://insait.ai/prof-bernhard-haeupler/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eBernhard Haeupler\u003c/a\u003e, a computer scientist affiliated with INSAIT and the Swiss Federal Institute of Technology Zurich (ETH Zurich).\u003c/p\u003e\u003cp\u003eHaeupler became fascinated with the promise of universal optimality while writing a grant proposal in the mid-2010s. Many researchers find that part of the job tedious, but Haeupler saw it as an opportunity. “It allows you to throw your skepticism out and just dream big,” he said.\u003c/p\u003e\u003cp\u003eThose dreams came to fruition in 2021, when Haeupler and two graduate students \u003ca data-offer-url=\"http://arxiv.org/abs/2104.03932\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;http://arxiv.org/abs/2104.03932\u0026#34;}\" href=\"http://arxiv.org/abs/2104.03932\" rel=\"nofollow noopener\" target=\"_blank\"\u003eproved\u003c/a\u003e that it was possible to build universally optimal algorithms for several important graph problems. He didn’t think to ask whether the same condition was achievable for the classic single-source shortest-paths problem. That would have to wait until a different graduate student dared to dream big.\u003c/p\u003e\u003ch2\u003eThe Shortest Path to Victory\u003c/h2\u003e\u003cp\u003eIn early 2023, Rozhoň was at the tail end of his graduate program at ETH Zurich. He had just finished a \u003ca data-offer-url=\"https://arxiv.org/abs/2410.14643\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://arxiv.org/abs/2410.14643\u0026#34;}\" href=\"https://arxiv.org/abs/2410.14643\" rel=\"nofollow noopener\" target=\"_blank\"\u003epaper\u003c/a\u003e about going beyond worst-case analysis in a different context, and he was brainstorming new ideas to pursue with his coauthor \u003ca data-offer-url=\"https://insait.ai/dr-jakub-tetek/\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://insait.ai/dr-jakub-tetek/\u0026#34;}\" href=\"https://insait.ai/dr-jakub-tetek/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eJakub Tětek\u003c/a\u003e, then a graduate student at the University of Copenhagen. Rozhoň suggested they try to devise a universally optimal algorithm for the single-source shortest-paths problem.\u003c/p\u003e\u003cp\u003e“I said, ‘No, but that’s not possible; that just cannot be done,’” Tětek recalled. But Rozhoň convinced him to give it a try. In the spring, the team grew to three with the addition of \u003ca data-offer-url=\"https://rihl.uralyx.cz/\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://rihl.uralyx.cz/\u0026#34;}\" href=\"https://rihl.uralyx.cz/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRichard Hladík\u003c/a\u003e, a graduate student at ETH Zurich whom Rozhoň and Tětek had met when all three were high schoolers in the Czech Republic.\u003c/p\u003e\u003cp\u003eThe trio tinkered with many different aspects of Dijkstra’s algorithm and the heap that it used, and they managed to kludge together a universally optimal variant. But the resulting algorithm was complicated, and they couldn’t pinpoint what conditions were actually necessary for universal optimality. In a field that thrives on comprehensive and rigorous proofs, this wasn’t enough.\u003c/p\u003e\u003cp\u003eThe three students would turn from mathematical networks to social ones. Rozhoň had begun discussing the problem with Haeupler while both were visiting colleagues in New York. From there, Haeupler flew to Panama for a holiday, but he wasn’t quite ready to set the problem aside.\u003c/p\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003e“It really was vacation,” he said. “But then also, thinking doesn’t stop.”\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003cspan\u003e\u003cp\u003eFrom left: Bernhard Haeupler, Václav Rozhoň (top), Jakub Tětek (bottom), Robert Tarjan, and Richard Hladík proved that a version of Dijkstra’s algorithm is the best approach for every network layout.\u003c/p\u003e\n\u003c/span\u003e\u003cspan\u003ePhotograph from left: INSAIT Sofia, Václav Rozhoň (top), Ivan Domes (bottom), INSAIT Sofia and INSAIT Sofia\u003c/span\u003e\u003c/p\u003e\u003c/figure\u003e\u003cp\u003eDuring a Zoom call a few days into Haeupler’s trip, the team of four settled on a new approach. They decided to focus mainly on the choice of data structure. Soon, they began to suspect that that would be enough—they could just leave the rest of Dijkstra’s algorithm intact. Within a month, they’d proved it.\u003c/p\u003e\u003cp\u003eThe key ingredient turned out to be a special property of some data structures that lets them quickly access recently added items. Heaps with this property were \u003ca data-offer-url=\"https://link.springer.com/chapter/10.1007/3-540-44985-X_5\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://link.springer.com/chapter/10.1007/3-540-44985-X_5\u0026#34;}\" href=\"https://link.springer.com/chapter/10.1007/3-540-44985-X_5\" rel=\"nofollow noopener\" target=\"_blank\"\u003efirst constructed\u003c/a\u003e more than 20 years ago, but in all the years that followed, nobody made full use of it. The four researchers proved that they only needed to construct a data structure with this new property and all the other features of the 1984 heap. All they needed to do now was design it.\u003c/p\u003e\u003cp\u003eThe last person to join the team was \u003ca href=\"https://www.cs.princeton.edu/people/profile/ret\" target=\"_blank\"\u003eRobert Tarjan\u003c/a\u003e, a computer scientist at Princeton University who was one of the inventors of that special 1984 heap. Tarjan had won the Turing Award, considered the highest honor in the field, and had also been a mentor to Haeupler in the late 2000s. When Tarjan visited Zurich in May, Haeupler invited him over for fondue—his specialty—and mentioned the new shortest-paths project. Tarjan was immediately in.\u003c/p\u003e\u003c/div\u003e\u003cdiv data-journey-hook=\"client-content\" data-testid=\"BodyWrapper\"\u003e\u003cp\u003eThe five researchers set to work developing a heap data structure with all the properties they needed. They started with an unwieldy design and improved it bit by bit until they were finally satisfied. “Every time we looked at it, we were able to simplify a little bit,” Rozhoň said. “I was actually surprised how simple it was in the end.”\u003c/p\u003e\u003cp\u003eSome variants of Dijkstra’s algorithm have seen real-world use in software like Google Maps. The new result probably won’t have such practical applications, for which there are many considerations beyond theoretical optimality guarantees. But it may change how researchers study optimality, prompting them to look beyond the usual worst-case analysis. Often, algorithms only achieve stronger guarantees at the cost of added complexity. The new result suggests that simple algorithms with these stronger guarantees might be more widespread than researchers previously thought—the team has already identified \u003ca data-offer-url=\"https://arxiv.org/abs/2404.04552\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://arxiv.org/abs/2404.04552\u0026#34;}\" href=\"https://arxiv.org/abs/2404.04552\" rel=\"nofollow noopener\" target=\"_blank\"\u003etwo\u003c/a\u003e \u003ca data-offer-url=\"https://arxiv.org/abs/2410.14638\" data-event-click=\"{\u0026#34;element\u0026#34;:\u0026#34;ExternalLink\u0026#34;,\u0026#34;outgoingURL\u0026#34;:\u0026#34;https://arxiv.org/abs/2410.14638\u0026#34;}\" href=\"https://arxiv.org/abs/2410.14638\" rel=\"nofollow noopener\" target=\"_blank\"\u003eother\u003c/a\u003e examples.\u003c/p\u003e\u003cp\u003e“The general concept is very compelling,” Tarjan said. “It remains to be seen how far one can take this.”\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca href=\"https://www.quantamagazine.org/computer-scientists-establish-the-best-way-to-traverse-a-graph-20241025/\"\u003e\u003cem\u003eOriginal story\u003c/em\u003e\u003c/a\u003e \u003cem\u003ereprinted with permission from\u003c/em\u003e \u003ca href=\"https://www.quantamagazine.org\"\u003eQuanta Magazine\u003c/a\u003e, \u003cem\u003ean editorially independent publication of the\u003c/em\u003e \u003ca href=\"https://www.simonsfoundation.org\"\u003e\u003cem\u003eSimons Foundation\u003c/em\u003e\u003c/a\u003e \u003cem\u003ewhose mission is to enhance public understanding of science by covering research developments and trends in mathematics and the physical and life sciences.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-11-17T07:00:00-05:00",
  "modifiedTime": "2024-11-17T12:00:00Z"
}
