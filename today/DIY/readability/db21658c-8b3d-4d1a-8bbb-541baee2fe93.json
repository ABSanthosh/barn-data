{
  "id": "db21658c-8b3d-4d1a-8bbb-541baee2fe93",
  "title": "Add WebUSB Support To Firefox With a Special USB Device",
  "link": "https://hackaday.com/2025/03/15/add-webusb-support-to-firefox-with-a-special-usb-device/",
  "description": "The WebUSB standard is certainly controversial. Many consider it a security risk, and, to date,  only Chromium-based browsers support it. But there is a workaround that is, ironically, supposed to …read more",
  "author": "Maya Posch",
  "published": "Sat, 15 Mar 2025 23:00:55 +0000",
  "source": "https://hackaday.com/blog/feed/",
  "categories": [
    "computer hacks",
    "Security Hacks",
    "firefox",
    "U2F",
    "WebUSB"
  ],
  "byline": "",
  "length": 1954,
  "excerpt": "The WebUSB standard is certainly controversial. Many consider it a security risk, and, to date, only Chromium-based browsers support it. But there is a workaround that is, ironically, supposed to …",
  "siteName": "Hackaday",
  "favicon": "https://hackaday.com/wp-content/themes/hackaday-2/img/hackaday-logo_1024x1024.png?v=3",
  "text": "Skip to content RP2040-based Pico board acting as U2F dongle with Firefox. (Credit: ArcaneNibble, GitHub) The WebUSB standard is certainly controversial. Many consider it a security risk, and, to date,  only Chromium-based browsers support it. But there is a workaround that is, ironically, supposed to increase security. The adjacent Universal 2nd Factor (U2F) standard also adds (limited) USB support to browsers. Sure, this is meant solely to support U2F USB dongles for two-factor authentication purposes, but as [ArcaneNibble] demonstrates using U2F-compatible firmware on a Raspberry Pi RP2040, by hijacking the U2F payload, this API can be used to provide WebUSB-like functionality. The provided demo involves flashing an RP2040 (e.g., Pico board) with the u2f-hax.u2f firmware and loading the index.html page from localhost or a similar secure context. After this, the buttons on the browser page can be used to toggle an LED on the Pico board on or off. You can also read an input back from the RP2040. This feat is made possible by the opaque nature of the U2F key handle, which means that anything can be put in this blob. This makes it a snap to pass data from the U2F dongle to the host. For the inverse, things get a bit trickier. Here the ECDSA signature is manipulated inside the ASN.1 that is returned to the dongle. Since Firefox performs no signature validation (and Chrome only does a range check), this works. The MCU also auto-confirms user presence by having the key handle start with oxfeedface, so the device works without user interaction. However, you do seem to get an annoying popup that immediately goes away. Of course, this only works if you create a special USB device for this purpose. That means your normal USB devices are still secure. While we know it could be a security risk, you can do some cool things with WebUSB. We’ve seen a few projects that use it.",
  "image": "https://hackaday.com/wp-content/uploads/2021/11/firefox-egl-featured.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n    \n\n    \u003cp\u003e\u003ca href=\"#content\"\u003eSkip to content\u003c/a\u003e\u003c/p\u003e\n\n    \u003cdiv id=\"content\"\u003e\n        \u003cmain id=\"main\" role=\"main\"\u003e\n\n        \n            \n\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"post-767576\"\u003e\n    \n\n    \u003cdiv itemprop=\"articleBody\"\u003e\n        \u003cfigure id=\"attachment_767680\" aria-describedby=\"caption-attachment-767680\"\u003e\u003ca href=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg\"\u003e\u003cimg decoding=\"async\" data-attachment-id=\"767680\" data-permalink=\"https://hackaday.com/2025/03/15/add-webusb-support-to-firefox-with-a-special-usb-device/u2f_webusb_firefox/\" data-orig-file=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg\" data-orig-size=\"792,792\" data-comments-opened=\"1\" data-image-meta=\"{\u0026#34;aperture\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;credit\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;camera\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;caption\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;created_timestamp\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;copyright\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;focal_length\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;iso\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;shutter_speed\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;title\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;orientation\u0026#34;:\u0026#34;0\u0026#34;}\" data-image-title=\"u2f_webusb_firefox\" data-image-description=\"\" data-image-caption=\"\u0026lt;p\u0026gt;RP2040-based Pico board acting as U2F dongle with Firefox. (Credit: ArcaneNibble, GitHub)\u0026lt;/p\u0026gt;\n\" data-medium-file=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?w=400\" data-large-file=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?w=625\" src=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?w=400\" alt=\"RP2040-based Pico board acting as U2F dongle with Firefox. (Credit: ArcaneNibble, GitHub)\" width=\"400\" height=\"400\" srcset=\"https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg 792w, https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?resize=250,250 250w, https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?resize=400,400 400w, https://hackaday.com/wp-content/uploads/2025/03/u2f_webusb_firefox.jpg?resize=625,625 625w\" sizes=\"(max-width: 400px) 100vw, 400px\"/\u003e\u003c/a\u003e\u003cfigcaption id=\"caption-attachment-767680\"\u003eRP2040-based Pico board acting as U2F dongle with Firefox. (Credit: ArcaneNibble, GitHub)\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cp\u003eThe WebUSB standard is certainly controversial. Many consider it a security risk, and, to date,  only Chromium-based browsers support it. But there is a workaround that is, ironically, supposed to increase security. The adjacent Universal 2nd Factor (U2F) standard also adds (limited) USB support to browsers. Sure, this is meant solely to support U2F USB dongles for two-factor authentication purposes, but as [ArcaneNibble] \u003ca href=\"https://github.com/ArcaneNibble/i-cant-believe-its-not-webusb\" target=\"_blank\"\u003edemonstrates using U2F-compatible firmware\u003c/a\u003e on a Raspberry Pi RP2040, by hijacking the \u003ca href=\"https://en.wikipedia.org/wiki/Universal_2nd_Factor\" target=\"_blank\"\u003eU2F\u003c/a\u003e payload, this API can be used to provide WebUSB-like functionality.\u003c/p\u003e\n\n\u003cp\u003eThe provided demo involves flashing an RP2040 (e.g., Pico board) with the \u003ccode\u003eu2f-hax.u2f\u003c/code\u003e firmware and loading the \u003ccode\u003eindex.html\u003c/code\u003e page from localhost or a similar secure context. After this, the buttons on the browser page can be used to toggle an LED on the Pico board on or off. You can also read an input back from the RP2040.\u003c/p\u003e\n\u003cp\u003eThis feat is made possible by the opaque nature of the U2F key handle, which means that anything can be put in this blob. This makes it a snap to pass data from the U2F dongle to the host. For the inverse, things get a bit trickier. Here the ECDSA signature is manipulated inside the ASN.1 that is returned to the dongle. Since Firefox performs no signature validation (and Chrome only does a range check), this works. The MCU also auto-confirms user presence by having the key handle start with \u003ccode\u003eoxfeedface\u003c/code\u003e, so the device works without user interaction. However, you do seem to get an annoying popup that immediately goes away.\u003c/p\u003e\n\u003cp\u003eOf course, this only works if you create a special USB device for this purpose. That means your normal USB devices are still secure. While we know it could be a security risk, you can do some cool things with \u003ca href=\"https://hackaday.com/2020/07/31/campzone-2020-badge-literally-speaks-to-us/\"\u003eWebUSB\u003c/a\u003e. We’ve seen \u003ca href=\"https://hackaday.com/2020/01/01/hacking-an-arduino-nfc-reader-with-webusb/\"\u003ea few\u003c/a\u003e projects that use it.\u003c/p\u003e\n\t            \u003c/div\u003e\n    \u003cul\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhackaday.com%2F2025%2F03%2F15%2Fadd-webusb-support-to-firefox-with-a-special-usb-device%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_face.png\"/\u003e \u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                        \u003ca href=\"https://twitter.com/intent/tweet?text=Add%20WebUSB%20Support%20To%20Firefox%20With%20A%20Special%20USB%20Device%20via%20@hackaday\u0026amp;url=https://hackaday.com/2025/03/15/add-webusb-support-to-firefox-with-a-special-usb-device/\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_twitter.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.linkedin.com/shareArticle?url=https%3A%2F%2Fhackaday.com%2F2025%2F03%2F15%2Fadd-webusb-support-to-firefox-with-a-special-usb-device%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_in.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                \u003ca href=\"mailto:?subject=Add+WebUSB+Support+To+Firefox+With+A+Special+USB+Device | Hackaday\u0026amp;body=https%3A%2F%2Fhackaday.com%2F2025%2F03%2F15%2Fadd-webusb-support-to-firefox-with-a-special-usb-device%2F\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_mail1.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\u003c/ul\u003e\n    \n\u003c/article\u003e\n\n            \t\n\t\n            \n\n            \n\n\n        \n        \n\n        \n        \n\n        \n        \u003c/main\u003e\n    \u003c/div\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-15T23:00:55Z",
  "modifiedTime": "2025-03-15T13:54:18Z"
}
