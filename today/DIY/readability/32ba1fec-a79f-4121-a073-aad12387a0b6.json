{
  "id": "32ba1fec-a79f-4121-a073-aad12387a0b6",
  "title": "milliForth-6502, a Forth for the 6502 CPU",
  "link": "https://hackaday.com/2025/04/20/milliforth-6502-a-forth-for-the-6502-cpu/",
  "description": "Forth is popular on small computers because it is simple to implement, yet quite powerful. But what happens when you really need to shrink it? Well, if your target is …read more",
  "author": "John Elliot V",
  "published": "Sun, 20 Apr 2025 20:00:12 +0000",
  "source": "https://hackaday.com/blog/feed/",
  "categories": [
    "Misc Hacks",
    "Retrocomputing",
    "Software Hacks",
    "6502",
    "forth",
    "milliForth",
    "sectorforth"
  ],
  "byline": "",
  "length": 1295,
  "excerpt": "Forth is popular on small computers because it is simple to implement, yet quite powerful. But what happens when you really need to shrink it? Well, if your target is the 6502, there’s milliF…",
  "siteName": "Hackaday",
  "favicon": "https://hackaday.com/wp-content/themes/hackaday-2/img/hackaday-logo_1024x1024.png?v=3",
  "text": "Skip to content Forth is popular on small computers because it is simple to implement, yet quite powerful. But what happens when you really need to shrink it? Well, if your target is the 6502, there’s milliForth-6502. This is a port of milliForth, which is a fork of sectorforth. The sectorforth project set the standard, implementing a Forth so small it could fit in a 512-byte boot sector. The milliForth project took sectorforth and made it even smaller, weighing in at only 336 bytes. However, both milliForth and sectorforth are for the x86 architecture. With milliForth-6502, [Alvaro G. S. Barcellos] wanted to see how small he could make a 6502 implementation. So how big is the milliForth-6502 binary? Our tests indicate: 1,110 bytes. It won’t quite fit in a boot sector, but it’s pretty small! Most of the code for milliForth-6502 is assembly code in sector-6502.s. This code is compiled using tools from the cc65 project. To run the code lib6502 is used for 6502 emulation. Emulation is all well and good as far as it goes, especially for development and testing, but we’d love to see this code running on a real 6502. Even better would be a 6502 built from scratch! If you get this code running we’d love to hear how it went!",
  "image": "https://hackaday.com/wp-content/uploads/2023/11/milli.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page\"\u003e\n    \n\n    \u003cp\u003e\u003ca href=\"#content\"\u003eSkip to content\u003c/a\u003e\u003c/p\u003e\n\n    \u003cdiv id=\"content\"\u003e\n        \u003cmain id=\"main\" role=\"main\"\u003e\n\n        \n            \n\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"post-772405\"\u003e\n    \n\n    \u003cdiv itemprop=\"articleBody\"\u003e\n        \u003cp\u003eForth is popular on small computers because it is simple to implement, yet quite powerful. But what happens when you really need to shrink it? Well, if your target is the 6502, there’s \u003ca href=\"https://github.com/agsb/milliForth-6502\" target=\"_blank\"\u003emilliForth-6502\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a port of \u003ca href=\"https://hackaday.com/2023/11/06/tiny-forth-could-be-the-smallest/\"\u003emilliForth\u003c/a\u003e, which is a fork of sectorforth. The sectorforth project set the standard, implementing a Forth so small it could fit in a 512-byte boot sector. The milliForth project took sectorforth and made it even smaller, weighing in at only 336 bytes. However, both milliForth and sectorforth are for the x86 architecture. With milliForth-6502, [Alvaro G. S. Barcellos] wanted to see how small he could make a 6502 implementation.\u003c/p\u003e\n\n\u003cp\u003eSo how big is the milliForth-6502 binary? Our tests indicate: 1,110 bytes. It won’t quite fit in a boot sector, but it’s pretty small!\u003c/p\u003e\n\u003cp\u003eMost of the code for milliForth-6502 is assembly code in \u003ca href=\"https://github.com/agsb/milliForth-6502/blob/main/sector-6502.s\" target=\"_blank\"\u003esector-6502.s\u003c/a\u003e. This code is compiled using tools from the \u003ca href=\"https://github.com/cc65/cc65\" target=\"_blank\"\u003ecc65\u003c/a\u003e project. To run the code \u003ca href=\"https://github.com/ShonFrazier/lib6502\" target=\"_blank\"\u003elib6502\u003c/a\u003e is used for 6502 emulation.\u003c/p\u003e\n\u003cp\u003eEmulation is all well and good as far as it goes, especially for development and testing, but we’d love to see this code running on a real 6502. Even better would be a \u003ca href=\"https://hackaday.com/2019/09/19/riding-the-nostalgia-train-with-a-6502-from-the-ground-up/\"\u003e6502 built from scratch\u003c/a\u003e! If you get this code running we’d love to \u003ca href=\"https://hackaday.com/submit-a-tip/\"\u003ehear how it went\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003e\u003ciframe title=\"GitHub - agsb/milliForth-6502: The smallest Forth real programming language for 6502. Based in mi...\" width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/6P4tEYLEhU8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\t            \u003c/div\u003e\n    \u003cul\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F20%2Fmilliforth-6502-a-forth-for-the-6502-cpu%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_face.png\"/\u003e \u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                        \u003ca href=\"https://twitter.com/intent/tweet?text=MilliForth-6502,%20A%20Forth%20For%20The%206502%20CPU%20via%20@hackaday\u0026amp;url=https://hackaday.com/2025/04/20/milliforth-6502-a-forth-for-the-6502-cpu/\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_twitter.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n    \t\t\t\t\u003ca href=\"https://www.linkedin.com/shareArticle?url=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F20%2Fmilliforth-6502-a-forth-for-the-6502-cpu%2F\" target=\"_blank\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_in.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\t\t\u003cli\u003e\n                \u003ca href=\"mailto:?subject=MilliForth-6502%2C+A+Forth+For+The+6502+CPU | Hackaday\u0026amp;body=https%3A%2F%2Fhackaday.com%2F2025%2F04%2F20%2Fmilliforth-6502-a-forth-for-the-6502-cpu%2F\"\u003e\n    \t\t\t\t\t\u003ci\u003e\u003cimg src=\"https://hackaday.com/wp-content/themes/hackaday-2/img/share_mail1.png\"/\u003e\u003c/i\u003e\n    \t\t\t\t\t\t\t\t\t\u003c/a\u003e\n    \t\t\t\u003c/li\u003e\n    \t\t\t\u003c/ul\u003e\n    \n\u003c/article\u003e\n\n            \t\n\t\n            \n\n            \n\n\n        \n        \n\n        \n        \n\n        \n        \u003c/main\u003e\n    \u003c/div\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-04-20T20:00:12Z",
  "modifiedTime": "2025-04-20T05:35:00Z"
}
