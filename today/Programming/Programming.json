[
  {
    "id": "78ebdfeb-6318-4a3d-8e44-bf778d7644f7",
    "title": "When SQL Meets Lambda Expressions",
    "link": "https://blog.jooq.org/when-sql-meets-lambda-expressions/",
    "description": "ARRAY types are a part of the ISO/IEC 9075 SQL standard. The standard specifies how to: But it is very unopinionated when it comes to function support. The ISO/IEC 9075-2:2023(E) 6.47 specifies concatenation of arrays, whereas the 6.48 section lists a not extremely useful TRIM_ARRAY function, exclusively (using which … Continue reading When SQL Meets Lambda Expressions →",
    "author": "lukaseder",
    "published": "Thu, 27 Mar 2025 13:04:44 +0000",
    "image": "",
    "source": "https://blog.jooq.org/feed",
    "categories": [
      "sql",
      "array",
      "array types",
      "clickhouse",
      "databricks",
      "duckdb",
      "Snowflake",
      "Trino"
    ]
  },
  {
    "id": "13dc37c2-f14c-4ba1-a092-8c113da86ea4",
    "title": "Think About SQL MERGE in Terms of a RIGHT JOIN",
    "link": "https://blog.jooq.org/think-about-sql-merge-in-terms-of-a-right-join/",
    "description": "RIGHT JOIN is an esoteric feature in the SQL language, and hardly ever seen in the real world, because almost every RIGHT JOIN can just be expressed as an equivalent LEFT JOIN. The following two statements are equivalent: It’s not unreasonable to expect these two statements to produce the same execution plan on most RDBMS, … Continue reading Think About SQL MERGE in Terms of a RIGHT JOIN →",
    "author": "lukaseder",
    "published": "Thu, 13 Mar 2025 14:45:53 +0000",
    "image": "",
    "source": "https://blog.jooq.org/feed",
    "categories": [
      "sql",
      "databricks",
      "firebird",
      "MERGE",
      "outer join",
      "PostgreSQL",
      "RIGHT JOIN",
      "SQL Server",
      "WHEN MATCHED",
      "WHEN NOT MATCHED",
      "WHEN NOT MATCHED BY SOURCE"
    ]
  },
  {
    "id": "64c85688-2f3a-4280-8362-843507abaad3",
    "title": "Let a thousand programming publications bloom.",
    "link": "https://medium.com/better-programming/let-a-thousand-programming-publications-bloom-bf37baef8f27?source=rss----d0b105d10f0a---4",
    "description": "",
    "author": "Tony Stubblebine",
    "published": "Fri, 10 Nov 2023 18:18:10 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/1*tKikPWjE4MZ5WgdfZuyvEg.png",
    "source": "https://medium.com/feed/better-programming",
    "categories": null
  },
  {
    "id": "abaf1f01-1024-467e-be59-799e41af77e8",
    "title": "Calling AWS Bedrock from code",
    "link": "https://medium.com/better-programming/calling-aws-bedrock-from-code-3f456a51ff99?source=rss----d0b105d10f0a---4",
    "description": "Using Python in a Jupyter notebookContinue reading on Better Programming »",
    "author": "Thomas Reid",
    "published": "Fri, 10 Nov 2023 17:35:02 GMT",
    "image": "https://cdn-images-1.medium.com/max/600/1*iltZoO6rmWj_AnfNpJ1m-A.png",
    "source": "https://medium.com/feed/better-programming",
    "categories": [
      "bedrock",
      "python",
      "llm",
      "boto3",
      "ai"
    ]
  },
  {
    "id": "d35ae6bc-da3f-42d1-ad07-ac71b6ed8d4b",
    "title": "Static as a Server",
    "link": "https://overreacted.io/static-as-a-server/",
    "description": "You wouldn't download a site.",
    "author": "",
    "published": "Thu, 08 May 2025 00:00:00 GMT",
    "image": "",
    "source": "https://overreacted.io/rss.xml",
    "categories": null
  },
  {
    "id": "532403d8-eb3d-4c8f-b1ea-91f1fa46e467",
    "title": "RSC for Astro Developers",
    "link": "https://overreacted.io/rsc-for-astro-developers/",
    "description": "Islands, but make it fractal.",
    "author": "",
    "published": "Tue, 06 May 2025 00:00:00 GMT",
    "image": "",
    "source": "https://overreacted.io/rss.xml",
    "categories": null
  },
  {
    "id": "463bf6cd-3716-46ab-95c9-8f0a41e1820b",
    "title": "Behind the Scenes - A Glimpse into Tax Calculations",
    "link": "https://www.etsy.com/codeascraft/behind-the-scenes---a-glimpse-to-tax-calculations?utm_source=OpenGraph\u0026utm_medium=PageTools\u0026utm_campaign=Share",
    "description": "In the past, sellers were responsible for managing and fulfilling their own tax obligations. However, more and more jurisdictions are now requiring marketplaces such as Etsy to collect the tax from buyers and remit the tax to the relevant authorities. Etsy now plays an active role in collecting tax from buyers and remitting it all over the world. In this post, I will walk you through our tax calculation infrastructure and how we adapted to the ongoing increase in traffic and business needs over the years. The tax calculation workflow We determine tax whenever a buyer adds an item to their Etsy shopping cart. The tax determination is based on buyer and seller location and product category, and a set of tax rules and mappings. To handle the details of these calculations we partner with Vertex, and issue a call to their tax engine via the Quotation Request API to get the right amount to show in our buyer's cart. Vertex ensures accurate and efficient tax management and continuously updates the tax rules and rates for jurisdictions around the world. The two main API calls we use are Quotation Request and DistributeTaxRequest SOAP calls. When the buyer proceeds to payment, an order is created, and we call back to Vertex with a DistributeTaxRequest sending the order information and tax details. We sync information with Vertex through the order fulfillment lifecycle. To keep things up to date in case an order is canceled or a refund needs to be issued later on, we inform the details of the cancellation and refunds to the tax engine via DistributeTaxRequest. This ensures that when Vertex generates tax reports for us they will be based on a complete record of all the relevant transactions. Etsy collects the tax from the buyers and remits that tax to the taxing authority, when required. Generate tax details for reporting and audit purpose Vertex comes with a variety of report formats out of the box, and gives us tools to define our own. When Etsy calls the Distribute Tax API, Vertex saves the information we pass to it as raw metadata in its tax journal database. A daily cron job in Vertex then moves this data to the transaction detail table, populating it with tax info. When reports and audit data are generated, we download these reports and import to Etsy’s bigdata and the workflow completes. Mapping the Etsy taxonomy to tax categories Etsy maintains product categories to help our buyers find exactly the items they're looking for. To determine whether transactions are taxed or exempt it's not enough to know item prices and buyer locations: we have to map our product categories to Vertex's rule drivers. That was an effort involving not just engineering but also our tax and analytics teams, and with the wide range of Etsy taxonomy categories it was no small task. Handling increased API traffic Coping with the continuous increase in traffic and maintaining the best checkout experience without delays has been a challenge all the time. Out of the different upgrades we did, the most important ones were to switch to multiple instances for vertex calls and shadowing. Multiple Instance upgrade In our initial integration, we were using the same vertex instance for Quotation and Distribute calls. And the same instance was responsible for generating the reports. This report generation started to affect our checkout experience. Reports are generally used by our tax team and they run them on a regular basis. But on top of that, we also run daily reports to feed the data captured by Vertex back into our own system for analytics purposes. We solved this by routing the quotation calls to one instance and then distributing them to the other. This helped in maintaining a clear separation of functionalities, and avoided interference between the two processes. We had to align the configurations between the instances as well. Splitting up the quotation and distribution calls opened up the door to horizontal scaling, now we can add as many instances of each type and load balance the requests between instances. Eg: When a request type lists multiple instances, we load balance between the instances by using the cart_id for quotations and receipt_ids for distributes I.e. cart_id % quotation_instance_count Shadow logging Shadow logging the requests helped us to simulate the stress on Vertex and monitor the checkout experience. We used this technique multiple times in the past. Whenever we had situations like, for example, adding five hundred thousand more listings whose taxes would be passed through the Vertex engine, we were concerned that the increase in traffic might impact buyer experience. To ensure it wouldn't, we tested for a period of time by slowly ramping shadow requests to Vertex: \"Shadow requests\" are test requests that we send to Vertex from orders, but without applying the calculated tax details to buyers' carts. This will simulate the load on vertex and we can monitor the cart checkout experience. Once we have done shadowing and seen how well Vertex handled the increased traffic, we are confident that releasing the features ensures it would not have any performance implications. Conclusion Given the volume of increasing traffic and the data involved, we will have to keep improving our design to support those. We've also had to address analytics, reporting, configuration sync and many more in designing the system, but we'll leave that story for next time.",
    "author": "Nancy Arnold",
    "published": "Sat, 29 Mar 2025 06:03:23 -0400",
    "image": "https://i.etsystatic.com/inv/b7e136/5660475277/inv_fullxfull.5660475277_6aqobaes.jpg?version=0",
    "source": "https://codeascraft.com/feed/atom/",
    "categories": null
  },
  {
    "id": "c93d1ac7-d934-4657-8b67-0a5693a18716",
    "title": "Adopting Jetpack Compose for Etsy’s Android App",
    "link": "https://www.etsy.com/codeascraft/adopting-jetpack-compose-for-etsy39s-android-app?utm_source=OpenGraph\u0026utm_medium=PageTools\u0026utm_campaign=Share",
    "description": "One of our Guiding Principles at Etsy is that we “commit to our craft.” This means that we have a culture of learning, in which we’re constantly looking for opportunities to improve and learn, adopt industry best practices, and share our findings with our colleagues and our community. As part of that process, Etsy recently adopted Jetpack Compose – Android's modern toolkit for defining native UIs – as our preferred means of building our Android app. The process of adoption consisted of a gradual expansion in the size and complexity of features built using Compose, eventually culminating in a full rewrite of one of the primary screens in the app. The results of that rewrite gave us the confidence to recommend Compose as the primary tool for our Android engineers to build UIs going forward. Adoption Our engineers are always investigating the latest industry trends and technologies, but in this case a more structured approach was warranted due to the central nature of UI toolkits in the development process. Several engineers on the Android team were assigned to study the existing Compose documentation and examples we had used in prior builds and then create a short curriculum based on what they learned. Over several months, the team held multiple information sessions with the entire Android group, showing how to use Compose to build simple versions of some of our real app screens. Part of our in-house curriculum for learning Jetpack Compose via small modules. Each module built upon the previous module to build more complex versions of various features in our real app. Next, our Design Systems team started creating Compose versions of our internal UI toolkit components, with the goal of having a complete Compose implementation of our design system before major adoption. Compose is designed for interoperability with our existing toolkit, XML Views, providing an uncomplicated migration path that enables us to start using these new toolkit components in our existing XML Views with minimal disruption. This was our first chance to validate that the performance of Compose would be as good as or better than our existing toolkit components. This also gave the wider Android community at Etsy a chance to start using Compose in their day-to-day work and get comfortable with the new patterns Compose introduced. A partial list of the design system components our team was able to make available in Compose. Our Design Systems team also made heavy use of one of Compose’s most powerful features: Previews. Compose Previews allow a developer to visualize Composables in as many configurations as they want using arbitrary test data, all without having to run the app on a device. Every time the team made a change to a Design Systems Composable, they could validate the effect in a wide range of scenarios. After a few months of building and adopting toolkit components in Compose, our team felt it was time for a more significant challenge: rebuilding an entire screen. To prevent inadvertently causing a disruption for buyers or sellers on Etsy, we chose a heavily used screen only available in our backend for development builds. This step exposed us to a much wider scope of concerns: navigation, system UI, data fetching using coroutines from our API, and the orchestration of multiple Compose components interacting with each other. Using Kotlin Flows, we worked out how to structure our business and UI logic around a unidirectional data flow, a key unlock for future integration of Compose with Macramé – our standard architecture for use across all screens in the Etsy app. With a full internal screen under our belts, it was time to put Compose in front of real users. A few complex bottom sheets were the next pieces of our app to get the Compose treatment. For the first time, we exposed a major part of our UI, now fully written in Compose, to buyers and sellers on Etsy. We also paired a simple version of our Macramé architecture with these bottom sheets to prove that the two were compatible. A bottom sheet fully using Compose hosted inside of a screen built using Views. After successfully rolling out bottom sheets using Compose, we saw an opportunity to adopt Compose on a larger scale in the Shop screen. The existing Shop screen code was confusing to follow and very difficult to run experiments on – limiting our ability to help sellers improve their virtual storefronts. Compose and Macramé held the promise of addressing all these concerns. The Shop screen, fully built using Compose. In just around three months, our small team completed the rebuild. Our first order of business was to run an A/B experiment on the Shop screen to compare old vs. new. The results gave Compose even better marks than we had hoped for. Initial screen rendering time improved by 5%, and subjective interactions with the Shop screen, like taps and scrolls, were quicker and more fluid. User analytics showed the new screen improved conversion rate, add to cart actions, checkout starts, shop favoriting, listing views, and more – meaning these changes made a tangible, positive impact for our sellers. For the engineers tasked with coding the Shop screen, the results were just as impressive. An internal survey of engineers who had worked with the Shop screen before the rewrite showed a significant improvement in overall developer satisfaction. Building features required fewer lines of code, our respondents told us, and thanks to the Macramé architecture, testing was much easier and enabled us to greatly increase test coverage of business logic. Similar to what we learned during the development of our Design System components, Compose Previews were called out as a superpower for covering edge cases, and engineers said they were excited to work in a codebase that now featured a modern toolkit. Learnings We've learned quite a lot about Compose on our path to adopting it: Because of the unidirectional data flow of our Macramé architecture and stateless components built with Compose, state is decoupled from the UI and business logic is isolated and testable. The combination of Macramé and Compose has become the standard way we build features for our app. Colocation of layout and display logic allows for much easier manipulation of spacing, margins, and padding when working with complex display logic. Dynamic spacing is extremely difficult to do with XML layouts alone, and requires code in separate files to keep it all in sync. Creating previews of all possible Compose states using mock data has eliminated a large source of rework, bugs, and bad experiences for our buyers. Our team found it easier to build lazy-style lists in Compose compared to managing all the pieces involved with using RecyclerView, especially horizontal lazy lists. Interoperability between Compose and Views in both directions enabled a gradual adoption of Compose. Animation of Composables can be triggered automatically by data changes–no writing extra code to start and stop the animations properly. While no individual tool is perfect, we’re excited about the opportunities and efficiencies Compose has unlocked for our teams. As with any new technology, there's a learning curve, and some bumps along the way. One issue we found was in a 3rd party library we use. While the library has support for Compose, at the time of the Shop screen conversion, that support was still in alpha stage. After extensive testing, we decided to move forward using the alpha version, but an incompatibility could have necessitated us finding an alternative solution. Another learning is that LazyRows and LazyColumns, while similar in some respects to RecyclerView, come with their own specific way of handling keys and item reuse. This new lazy list paradigm has occasionally tripped us up and resulted in some unexpected behavior. Conclusion We’re thrilled with our team’s progress and outcomes in adopting this new toolkit. We’ve now fully rewritten several key UI screens, including Listing, Favorites, Search, and Cart using Compose, with more to come. Compose has given us a set of tools that lets us be more productive when delivering new features to our buyers, and its gradual rollout in our codebase is a tangible example of the Etsy team's commitment to our craft.",
    "author": "John Kalmi",
    "published": "Tue, 28 Jan 2025 10:25:11 -0500",
    "image": "https://i.etsystatic.com/inv/b7961f/6581128905/inv_fullxfull.6581128905_lyn8t9v6.jpg?version=0",
    "source": "https://codeascraft.com/feed/atom/",
    "categories": null
  },
  {
    "id": "6fe38545-86a7-4429-ae41-1d5038378be4",
    "title": "The Road Not Taken is Guaranteed Minimum Income",
    "link": "https://blog.codinghorror.com/the-road-not-taken-is-guaranteed-minimum-income/",
    "description": "The dream is incomplete until we share it with our fellow Americans.",
    "author": "Jeff Atwood",
    "published": "Thu, 20 Mar 2025 23:33:13 GMT",
    "image": "https://blog.codinghorror.com/content/images/2025/03/IMG_7003-1.jpg",
    "source": "https://feeds.feedburner.com/codinghorror",
    "categories": [
      "technology trends",
      "society",
      "activism",
      "charitable giving",
      "nonprofit organizations",
      "guaranteed minimum income",
      "stay gold"
    ]
  },
  {
    "id": "4d3c5f6f-f28b-4791-91be-904327231e1e",
    "title": "Let's Talk About The American Dream",
    "link": "https://blog.codinghorror.com/lets-talk-about-the-american-dream/",
    "description": "A few months ago I wrote about what it means to stay gold — to hold on to the best parts of ourselves, our communities, and the American Dream itself. But staying gold isn’t passive. It takes work. It takes action. It takes hard conversations that ask",
    "author": "Jeff Atwood",
    "published": "Thu, 06 Mar 2025 01:27:31 GMT",
    "image": "https://blog.codinghorror.com/content/images/2025/03/rebuildingamericandream25-page_v.2.jpg",
    "source": "https://feeds.feedburner.com/codinghorror",
    "categories": null
  },
  {
    "id": "824ae844-68e1-459b-a032-7f9e589e0e1d",
    "title": "FLOSS Weekly: FLOSS Weekly Continues at Hackaday - Hackaday is the new home of FLOSS Weekly",
    "link": "https://twit.tv/shows/floss-weekly/episodes/761b",
    "description": "FLOSS Weekly continues with Jonathan Bennett at its new home at Hackaday. Host: Jonathan Bennett Visit hackaday.com/floss or search your favorite podcatcher to subscribe.",
    "author": "TWiT",
    "published": "Thu, 11 Jan 2024 00:00:00 PST",
    "image": "https://pdst.fm/e/pscrb.fm/rss/p/cdn.twit.tv/audio/floss/floss_761b/floss_761b.mp3",
    "source": "https://feeds.twit.tv/floss.xml",
    "categories": [
      "News",
      "Technology",
      "Open Source",
      "Software",
      "Open Source Software"
    ]
  },
  {
    "id": "1f98ddb8-02bc-4aef-9747-880100e294f2",
    "title": "FLOSS Weekly 761: We Won! - The Victories of Free Software and Open Source",
    "link": "https://twit.tv/shows/floss-weekly/episodes/761",
    "description": "Doc Searls, Katherine Druckman, Dan Lynch, Simon Phipps, and Leo Laporte gather to celebrate the final victory of free software and open source—and the final FLOSS Weekly as well. Hosts: Doc Searls, Katherine Druckman, Dan Lynch, and Simon Phipps Guest: Leo Laporte Download or subscribe to this show at https://twit.tv/shows/floss-weekly Think your open source project should be on FLOSS Weekly? Email floss@twit.tv. Thanks to Lullabot's Jeff Robbins, web designer and musician, for our theme music. Get episodes ad-free with Club TWiT at https://twit.tv/clubtwit Sponsors: bitwarden.com/twit kolide.com/floss",
    "author": "TWiT",
    "published": "Wed, 13 Dec 2023 13:30:00 PST",
    "image": "https://pdst.fm/e/pscrb.fm/rss/p/cdn.twit.tv/libsyn/floss_761/3ccb17e9-1a70-473d-8703-0abed61f2d01/R1_floss0761.mp3",
    "source": "https://feeds.twit.tv/floss.xml",
    "categories": [
      "News",
      "Technology",
      "Open Source",
      "Software",
      "TWiT",
      " FLOSS Weekly",
      " Doc Searls",
      " Shawn Powers",
      " Leo Laporte",
      " Jonathan Bennett",
      " dan lynch",
      " simon phipps",
      " Katherine Druckman",
      " FLOSS",
      " open source",
      " open source podcast",
      " free libre open source",
      " open source victories",
      " Open Source Software",
      " eu open source"
    ]
  },
  {
    "id": "c885a74f-b28e-46a9-a719-d042cb063906",
    "title": "Take Back Your Time - Volatility, Pliability, and Agency and Your Obligations.mp3",
    "link": "http://www.developertea.com",
    "description": "This episode provides tactical ways to own your time, reduce meeting load and obligations, and regain agency, especially when feeling burnt out. You'll learn how to use a simple two-part model focusing on Pliability and Volatility to evaluate your tasks and meetings and make intentional choices about how you spend your time.Learn how owning your time is a critical first step in combating burnout, tiredness, and feeling worn out, helping you evaluate whether you feel agency over your time.Understand the principle that not all time is equal, whether it's sacred personal time or different times of day at work, and why you shouldn't treat it equally.Discover a simple two-part model using the characteristics of Pliability and Volatility to evaluate your obligations, such as meetings and tasks.Learn the definition of Pliability – how easily an obligation can be moved, changed, or cancelled, representing its flexibility.Understand the definition of Volatility – the risk, downsides, and potential compound negative effects associated with changing or not attending an obligation.Evaluate your tasks and meetings using their Pliability and Volatility scores to identify obligations that can likely be moved, made smaller, or cancelled with minimal downside, particularly those with low volatility and high pliability.Explore why our perception of the criticality of our obligations is often inflated, and how the actual ramifications of changing them are usually much smaller than what we expect.Learn how applying this model can help you consolidate obligations, create longer blocks of focus time (especially useful for engineers), and ultimately regain ownership and agency over your schedule.📮 Ask a QuestionIf you enjoyed this episode and would like me to discuss a question that you have on the show, drop it over at: developertea.com.📮 Join the DiscordIf you want to be a part of a supportive community of engineers (non-engineers welcome!) working to improve their lives and careers, join us on the Developer Tea Discord community by visiting https://developertea.com/discord today!🧡 Leave a ReviewIf you're enjoying the show and want to support the content head over to iTunes and leave a review! It helps other developers discover the show and keep us focused on what matters to you. You can also find this episode and all past episodes on developertea.com.",
    "author": "Jonathan Cutrell",
    "published": "Thu, 1 May 2025 07:00:00 +0000",
    "image": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/c44db111-b60d-436e-ab63-38c7c3402406/episodes/0b99a3ee-dc59-4119-aebf-7283b3eb8a58/audio/2e872a03-3fd0-4ed6-b44e-6a934b868e7b/default_tc.mp3?aid=rss_feed\u0026feed=dLRotFGk",
    "source": "https://feeds.simplecast.com/dLRotFGk",
    "categories": null
  },
  {
    "id": "54dab886-c9f5-4a99-8461-bb9a44306396",
    "title": "Iteration or Target State Planning",
    "link": "http://www.developertea.com",
    "description": "This episode explores the dichotomy between iterative planning and target state planning in software development, discussing the benefits and drawbacks of each approach and providing decision factors to help you choose the most appropriate method for your situation.Understand the core difference between iterative planning, which emphasises agility and responding to change with short planning horizons, and target state planning, which involves laying out a more defined long-term direction.Discover that while iterative planning is often considered the \"right way\" for software development, target state planning can be valuable for setting a general direction, which can be updated as you learn.Learn why addressing problems atomically in an iterative fashion can be valid, but that evaluating multiple potential improvements together with a target state in mind can lead to better coordination, efficiency, and consistency.Explore the decision factors that might lead you to favour iterative planning, such as high uncertainty, learning-focused work (discovery, prototypes), and fast feedback loops.Understand the decision factors that might lead you to favour target state planning, such as clarity on the problem, working in production with high coupling, regulatory/safety risks, slow feedback loops, high cost of mistakes, broad scope of impact, and high coordination costs.Learn why choosing a planning method by default is a warning sign, and that considering the usefulness of upfront planning without being limited by dogma is important.Understand that upfront planning (target state) can enable adaptation as you learn, and that negative perceptions of it often stem from costly, incorrect plans that were difficult to change.Discover that the choice between iterative and target state planning is a spectrum rather than a pure dichotomy, and that a target state doesn't necessarily need to be a long-term plan.🙏 Today's Episode is Brought To you by: Wix Studio Devs, if you think website builders mean limited control—think again. With Wix Studio’s developer-first ecosystem you can spend less time on tedious tasks and more on the functionalities that matters most:● Develop online in a VS Code-based IDE or locally via GitHub. ● Extend and replace a suite of powerful business solutions ● And ship faster with Wix Studio’s AI code assistant All of that, wrapped up in auto-maintained infrastructure for total peace of mind. Work in a developer-first ecosystem. Go to wixstudio.com📮 Ask a QuestionIf you enjoyed this episode and would like me to discuss a question that you have on the show, drop it over at: developertea.com.📮 Join the DiscordIf you want to be a part of a supportive community of engineers (non-engineers welcome!) working to improve their lives and careers, join us on the Developer Tea Discord community by visiting https://developertea.com/discord today!🧡 Leave a ReviewIf you're enjoying the show and want to support the content head over to iTunes and leave a review! It helps other developers discover the show and keep us focused on what matters to you.",
    "author": "Jonathan Cutrell",
    "published": "Thu, 24 Apr 2025 07:00:00 +0000",
    "image": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/c44db111-b60d-436e-ab63-38c7c3402406/episodes/481e9930-8c3c-47b6-aa0d-2c6cd94f6267/audio/d1a86a81-a2fc-4cbd-a212-2f6ce79fc9b2/default_tc.mp3?aid=rss_feed\u0026feed=dLRotFGk",
    "source": "https://feeds.simplecast.com/dLRotFGk",
    "categories": null
  },
  {
    "id": "ab560e62-acb7-4b44-ba9f-32773c78165b",
    "title": "Agentic AI guides and resources",
    "link": "https://about.gitlab.com/blog/2025/05/07/agentic-ai-guides-and-resources",
    "description": "",
    "author": "GitLab",
    "published": "2025-05-07T00:00:00.000Z",
    "image": "",
    "source": "https://about.gitlab.com/atom.xml",
    "categories": null
  },
  {
    "id": "8ebf1fe8-9a2a-437e-8a6d-73ab78f8b815",
    "title": "Automate tedious coding tasks with GitLab Duo Workflow",
    "link": "https://about.gitlab.com/blog/2025/05/06/automate-tedious-coding-tasks-with-gitlab-duo-workflow",
    "description": "",
    "author": "Jeff Park",
    "published": "2025-05-06T00:00:00.000Z",
    "image": "",
    "source": "https://about.gitlab.com/atom.xml",
    "categories": null
  },
  {
    "id": "c571949c-2dc4-44d3-8d46-b110167b6a25",
    "title": "Online Learning and Economics",
    "link": "https://www.youtube.com/watch?v=VSSZ86hcxF4",
    "description": "",
    "author": "Google TechTalks",
    "published": "2025-04-15T15:13:36+00:00",
    "image": "",
    "source": "https://www.youtube.com/feeds/videos.xml?user=GoogleTechTalks",
    "categories": null
  },
  {
    "id": "4efb741a-77cb-4dcd-93fd-6db0b7685b11",
    "title": "Go Meetup April 2025 - i18n Go Experiment",
    "link": "https://www.youtube.com/watch?v=ZFXKzRag84c",
    "description": "",
    "author": "Google TechTalks",
    "published": "2025-04-15T05:49:59+00:00",
    "image": "",
    "source": "https://www.youtube.com/feeds/videos.xml?user=GoogleTechTalks",
    "categories": null
  },
  {
    "id": "192006f6-ebcf-4b3a-ba69-bcd85b6b1646",
    "title": "Gemini 2.5 Models now support implicit caching",
    "link": "https://developers.googleblog.com/en/gemini-2-5-models-now-support-implicit-caching/",
    "description": "The rollout of implicit caching in the Gemini API expands on the existing explicit caching API, providing an \"always on\" caching system which offers automatic cost savings to developers using Gemini 2.5 models and continued availability of the explicit caching API for guaranteed savings.",
    "author": "",
    "published": "",
    "image": "",
    "source": "http://feeds.feedburner.com/GDBcode",
    "categories": null
  },
  {
    "id": "b862eba0-1595-4904-b50e-db1b58ec2c30",
    "title": "Create and edit images with Gemini 2.0 in preview",
    "link": "https://developers.googleblog.com/en/generate-images-gemini-2-0-flash-preview/",
    "description": "Gemini 2.0 Flash's image generation capabilities, now available in preview in Google AI Studio and Vertex AI, feature higher rate limits, enhanced visual quality, more precise text rendering, and more, allowing developers to create applications for product recontextualization, collaborative image editing, and dynamic SKU generation.",
    "author": "",
    "published": "",
    "image": "",
    "source": "http://feeds.feedburner.com/GDBcode",
    "categories": null
  },
  {
    "id": "8c5880c3-f4ea-4ee4-9f35-f30479e32791",
    "title": "S27:E8 - Learning AI (Matt Eland)",
    "link": "https://www.codenewbie.org/podcast/learning-ai",
    "description": "Meet Matt Eland, AI Specialist at Leading EDJE. Matt shares what sparked his passion for AI years ago, why he’s made the decision to go back to school for his master's degree and how he aims to continue spreading his expertise with the community. Show Links Partner with Dev \u0026 CodeNewbie! (sponsor) Matt on Data Science Central Ohio .NET Developer Group Matt's Twitter Matt's GitHub Matt's LinkedIn",
    "author": "CodeNewbie",
    "published": "Wed, 22 May 2024 03:00:00 -0400",
    "image": "https://dts.podtrac.com/redirect.mp3/traffic.megaphone.fm/FOR8835558149.mp3?updated=1716333932",
    "source": "http://feeds.codenewbie.org/cnpodcast.xml",
    "categories": [
      "Podcast"
    ]
  },
  {
    "id": "bf008790-5057-4f94-90f0-81d06b6a3a66",
    "title": "S27:E7 - Tech and Art (Chris Immel)",
    "link": "https://www.codenewbie.org/podcast/tech-and-art",
    "description": "Meet Chris Immel, AI Engineer and Digital Artist at Luminifera Projects. Chris shares how he works to create a symbiosis between software development and art and why he remains optimistic when it comes to the AI revolution. Show Links Partner with Dev \u0026 CodeNewbie! (sponsor) Chris' Instagram Chris' Website Chris' GitHub Chris' LinkedIn",
    "author": "CodeNewbie",
    "published": "Wed, 15 May 2024 03:00:00 -0400",
    "image": "https://dts.podtrac.com/redirect.mp3/traffic.megaphone.fm/FOR3677516133.mp3?updated=1715705940",
    "source": "http://feeds.codenewbie.org/cnpodcast.xml",
    "categories": [
      "Podcast"
    ]
  },
  {
    "id": "b0a62ce1-16b8-4a04-93f8-89d67300e28d",
    "title": "Remove Paywalls from Search Results",
    "link": "https://medium.com/hackernoon/remove-paywalls-from-search-results-9b2a78053bec?source=rss----3a8144eabfe3---4",
    "description": "",
    "author": "#BlackLivesMatter",
    "published": "Fri, 14 May 2021 13:35:18 GMT",
    "image": "https://cdn-images-1.medium.com/max/784/1*kQx2xxgd7mjP6uTnYYjdgQ.png",
    "source": "https://medium.com/feed/hackernoon",
    "categories": [
      "chrome-extension",
      "paywall",
      "search-results",
      "remove-paywall",
      "google"
    ]
  },
  {
    "id": "7aa24032-adb7-4c6d-8bd0-cee4ba18819f",
    "title": "NBA Bubbleball and NBA Revenue [Podcast with Washington Post]",
    "link": "https://medium.com/hackernoon/nba-bubbleball-and-nba-revenue-podcast-with-washington-post-75c03541f064?source=rss----3a8144eabfe3---4",
    "description": "",
    "author": "ArtMap Inc.",
    "published": "Mon, 15 Feb 2021 20:13:06 GMT",
    "image": "https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=75c03541f064",
    "source": "https://medium.com/feed/hackernoon",
    "categories": [
      "nba-revenue",
      "nba-bubble",
      "nba",
      "podcast",
      "nba-revenue-podcast"
    ]
  },
  {
    "id": "67f18e68-e8c9-4f39-bb8e-18e9a70b92aa",
    "title": "Is Vibe Coding Real? with James Montemagno",
    "link": "https://www.hanselminutes.com",
    "description": "Vibe Coding has folks talking and \"vibing entire applications.\" But is it valid? Should one use AI agents to create apps that go directly into production, or is it just appropriate for prototyping? Scott talks to James Montemagno who recently vibed a 17,000 line application and only wrote 20 bespoke lines himself. Is this the future of programming or did James get lucky? Scott takes the sceptical view in this spicy episode.",
    "author": "Scott Hanselman",
    "published": "Thu, 8 May 2025 21:00:00 +0000",
    "image": "https://r.zen.ai/r/cdn.simplecast.com/audio/24832310-78fe-4898-91be-6db33696c4ba/episodes/324a851c-9baf-46a8-897b-321998013eb9/audio/d097616e-ba4e-4d6f-ae26-b5b4e4633448/default_tc.mp3?aid=rss_feed\u0026feed=gvtxUiIf",
    "source": "https://feeds.simplecast.com/gvtxUiIf",
    "categories": null
  },
  {
    "id": "71b567de-2b01-4701-86d9-7dd46769fa46",
    "title": "Making SNES ROMS with C# and Matthew Shapiro's DotnetSnes",
    "link": "https://www.hanselminutes.com",
    "description": "What if you could craft Super Nintendo ROMs using the power of C#? In this episode, Scott Hanselman dives into the world of retro game development with Matthew Shapiro, the creator of DotnetSnes—a tool that enables developers to build SNES games with modern .NET technology. They explore how the project works, the challenges of programming for classic hardware, and what this means for indie game developers and hobbyists alike. Whether you’re a nostalgic gamer or a coding enthusiast, this conversation is packed with insights that bridge the old-school and the cutting-edge.https://github.com/KallDrexx/DotnetSneshttps://www.linkedin.com/feed/update/urn:li:activity:7320970127917649920/",
    "author": "Scott Hanselman",
    "published": "Thu, 1 May 2025 21:00:00 +0000",
    "image": "https://r.zen.ai/r/cdn.simplecast.com/audio/24832310-78fe-4898-91be-6db33696c4ba/episodes/391ed343-8c24-4609-8e4e-7ab0258c2905/audio/e5943be3-8543-4441-a10a-8b0bd4e072cb/default_tc.mp3?aid=rss_feed\u0026feed=gvtxUiIf",
    "source": "https://feeds.simplecast.com/gvtxUiIf",
    "categories": null
  },
  {
    "id": "00a44319-41f9-438a-8ac8-485611a1dcc0",
    "title": "Accelerating GPU indexes in Faiss with NVIDIA cuVS",
    "link": "https://engineering.fb.com/2025/05/08/data-infrastructure/accelerating-gpu-indexes-in-faiss-with-nvidia-cuvs/",
    "description": "Meta and NVIDIA collaborated to accelerate vector search on GPUs by integrating NVIDIA cuVS into Faiss v1.10, Meta’s open source library for similarity search. This new implementation of cuVS will be more performant than classic GPU-accelerated search in some areas. For inverted file (IVF) indexing, NVIDIA cuVS outperforms classical GPU-accelerated IVF build times by up [...] Read More... The post Accelerating GPU indexes in Faiss with NVIDIA cuVS appeared first on Engineering at Meta.",
    "author": "",
    "published": "Thu, 08 May 2025 17:00:22 +0000",
    "image": "",
    "source": "https://engineering.fb.com/feed/",
    "categories": [
      "AI Research",
      "Data Infrastructure",
      "ML Applications",
      "Open Source"
    ]
  },
  {
    "id": "692843f1-fc65-4f78-b7e3-598795d30034",
    "title": "Enhancing the Python ecosystem with type checking and free threading",
    "link": "https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/",
    "description": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.  We’ll look at two key efforts in Python’s packaging ecosystem to make packages faster and easier to use: 🚀 Unlock performance wins for developers through free-threaded Python – [...] Read More... The post Enhancing the Python ecosystem with type checking and free threading appeared first on Engineering at Meta.",
    "author": "",
    "published": "Mon, 05 May 2025 16:00:05 +0000",
    "image": "https://s.w.org/images/core/emoji/15.1.0/72x72/1f680.png",
    "source": "https://engineering.fb.com/feed/",
    "categories": [
      "DevInfra"
    ]
  },
  {
    "id": "439c4d5c-c032-41e1-ae6e-f83130f8d4a4",
    "title": "Presentation: Stream All the Things — Patterns of Effective Data Stream Processing",
    "link": "https://www.infoq.com/presentations/streaming-patterns/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
    "description": "Adi Polak discusses patterns for effective data stream processing, highlighting common pitfalls and the complexities of balancing data infrastructure. Learn about exactly-once semantics, the challenges of join operations in streaming (including the \"Puppies shelter\" concept), and crucial error handling strategies. By Adi Polak",
    "author": "Adi Polak",
    "published": "Thu, 08 May 2025 14:05:00 GMT",
    "image": "https://res.infoq.com/presentations/streaming-patterns/en/mediumimage/adi-polak-medium-1745994508036.jpg",
    "source": "https://feed.infoq.com",
    "categories": [
      "QCon San Francisco 2024",
      "Patterns and Practices",
      "Transcripts",
      "Streaming",
      "AI, ML \u0026 Data Engineering",
      "presentation"
    ]
  },
  {
    "id": "73d28b46-eabe-4e53-a828-ab89705adbe7",
    "title": "Using Social Drivers to Improve Software Engineering Team Performance",
    "link": "https://www.infoq.com/news/2025/05/software-engineering-performance/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
    "description": "According to Lizzie Matusov, technical drivers like velocity offer an incomplete view of team performance. Social drivers—trust, autonomy, purpose, and psychological safety—provide a fuller picture and reveal important areas of opportunity for improvement. She spoke about the social drivers behind high-performing engineering teams at QCon San Francisco. By Ben Linders",
    "author": "Ben Linders",
    "published": "Thu, 08 May 2025 11:03:00 GMT",
    "image": "https://res.infoq.com/news/2025/05/software-engineering-performance/en/headerimage/software-engineering-performance-header-1746524708486.jpg",
    "source": "https://feed.infoq.com",
    "categories": [
      "Collaboration",
      "QCon San Francisco 2024",
      "Software Engineering",
      "Psychological Safety",
      "Metrics",
      "Social Skills",
      "QCon Software Development Conference",
      "Trust",
      "Culture \u0026 Methods",
      "news"
    ]
  },
  {
    "id": "55ed2eba-593a-4582-a802-336892a896f0",
    "title": "The Instagram Engineering Blog has a new location",
    "link": "https://instagram-engineering.com/the-instagram-engineering-blog-has-a-new-location-85de9ab8d90f?source=rss----37dc2a3034f2---4",
    "description": "",
    "author": "Ryan Peterman",
    "published": "Tue, 12 Jul 2022 17:00:22 GMT",
    "image": "https://medium.com/_/stat?event=post.clientViewed\u0026referrerSource=full_rss\u0026postId=85de9ab8d90f",
    "source": "https://instagram-engineering.com/feed/",
    "categories": [
      "software-engineering",
      "instagram",
      "computer-science",
      "engineering"
    ]
  },
  {
    "id": "04f4cc84-9fe2-4e64-aa58-13cc6e3543e7",
    "title": "Five things I learned about working on content quality at Instagram",
    "link": "https://instagram-engineering.com/five-things-i-learned-about-working-on-content-quality-at-instagram-5031b1342bea?source=rss----37dc2a3034f2---4",
    "description": "",
    "author": "Brunno Attorre",
    "published": "Sat, 25 Jan 2020 01:13:36 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/1*M_vyOynSyXIXtH4V8kVMGg.png",
    "source": "https://instagram-engineering.com/feed/",
    "categories": [
      "data",
      "machine-learning",
      "instagram"
    ]
  },
  {
    "id": "da7feb37-8a86-4aaa-9e0e-31e02dc3180e",
    "title": "Present and Future of Kotlin for Web",
    "link": "https://blog.jetbrains.com/kotlin/2025/05/present-and-future-kotlin-for-web/",
    "description": "TL;DR: We remain committed to empowering Kotlin developers with robust and seamless support in Kotlin Multiplatform for web development. To achieve this, we are working on several key areas: Kotlin Multiplatform (KMP) aims to help developers share code across different platforms, significantly reducing development time and effort. The web plays a crucial role in this […]",
    "author": "Artem Kobzar",
    "published": "Thu, 08 May 2025 16:03:32 +0000",
    "image": "",
    "source": "https://blog.jetbrains.com/feed",
    "categories": [
      "multiplatform",
      "kotlin-js",
      "kotlin-wasm"
    ]
  },
  {
    "id": "8b6df0a5-2d64-45bb-bde7-20c760ea9677",
    "title": "ReSharper and Rider 2025.1.2 – Bug Fixes Have Landed!",
    "link": "https://blog.jetbrains.com/dotnet/2025/05/08/resharper-rider-2025-1-2-bug-fix/",
    "description": "A second set of bug fixes for the 2025.1 versions of ReSharper and Rider has just been released.  Let’s take a look at what’s been improved. ReSharper  ReSharper 2025.1.2 comes with the following fixes: dotTrace Timeline viewer now correctly locates and lists functions when searching by type name. [DTRC-31451] For the full list of resolved […]",
    "author": "Sasha Ivanova",
    "published": "Thu, 08 May 2025 16:01:52 +0000",
    "image": "",
    "source": "https://blog.jetbrains.com/feed",
    "categories": [
      "net-tools",
      "bugfix",
      "news",
      "releases",
      "resharper",
      "rider",
      "dottrace"
    ]
  },
  {
    "id": "3be4e30f-2b90-41a3-89ac-7a319de7a1a4",
    "title": "Celebrating Five Years of Backstage: From Open Source Project to Enterprise Business",
    "link": "https://engineering.atspotify.com/2025/04/celebrating-five-years-of-backstage/",
    "description": "Did you know that we sell Spotify’s developer productivity tools [...] The post Celebrating Five Years of Backstage: From Open Source Project to Enterprise Business appeared first on Spotify Engineering.",
    "author": "Spotify Engineering",
    "published": "Wed, 23 Apr 2025 14:23:12 +0000",
    "image": "",
    "source": "https://labs.spotify.com/feed/",
    "categories": [
      "Backstage",
      "Developer Experience",
      "Developer Tools",
      "Open Source",
      "Platform",
      "engineering culture",
      "engineering leadership"
    ]
  },
  {
    "id": "e3712260-5b07-4ed8-b218-b588e6c11e61",
    "title": "A Behind-the-Scenes Look at How We Release the Spotify App (Part 1)",
    "link": "https://engineering.atspotify.com/2025/04/how-we-release-the-spotify-app-part-1/",
    "description": "Developing and releasing mobile apps at scale is a big [...] The post A Behind-the-Scenes Look at How We Release the Spotify App (Part 1) appeared first on Spotify Engineering.",
    "author": "Spotify Engineering",
    "published": "Thu, 17 Apr 2025 13:47:54 +0000",
    "image": "",
    "source": "https://labs.spotify.com/feed/",
    "categories": [
      "Developer Experience",
      "Developer Tools",
      "Mobile",
      "developer experience",
      "engineering culture"
    ]
  },
  {
    "id": "35292f26-ddb1-4ebb-8ad4-f39a71bd1766",
    "title": "Function calling using LLMs",
    "link": "https://martinfowler.com/articles/function-call-LLM.html",
    "description": "",
    "author": "",
    "published": "2025-05-06T09:02:00-04:00",
    "image": "",
    "source": "https://martinfowler.com/feed.atom",
    "categories": null
  },
  {
    "id": "7453510b-2037-4734-ba74-12667c1a5bea",
    "title": "Building TMT Mirror Visualization with LLM",
    "link": "https://martinfowler.com/articles/exploring-gen-ai/15-building-tmt-mirror-visualization.html",
    "description": "",
    "author": "",
    "published": "2025-04-30T09:54:00-04:00",
    "image": "",
    "source": "https://martinfowler.com/feed.atom",
    "categories": null
  },
  {
    "id": "549da330-ce86-4f57-add6-2acc22c03ee1",
    "title": "How We're Preventing Breaking Changes in GraphQL APIs at Buffer — and Why It's Essential for Our Customers",
    "link": "https://buffer.com/resources/how-were-preventing-breaking-changes-in-graphql-apis-at-buffer-and-why-its-essential-for-our-customers/",
    "description": "As part of our commitment to transparency and building in public, Buffer engineer Joe Birch shares how we’re doing this for our own GraphQL API via the use of GitHub Actions.",
    "author": "Joe Birch",
    "published": "Fri, 12 Jul 2024 11:28:34 GMT",
    "image": "https://buffer.com/resources/content/images/2024/07/Changes-in-GraphQL-APIs.png",
    "source": "https://buffer.com/resources/overflow/rss/",
    "categories": [
      "Overflow",
      "Open"
    ]
  },
  {
    "id": "ec1e5c14-94b3-4bcd-a526-574aed265105",
    "title": "Highlighting Text Input with Jetpack Compose",
    "link": "https://buffer.com/resources/highlighting-text-input-with-jetpack-compose/",
    "description": "We recently launched a new feature at Buffer, called Ideas. With Ideas, you can store all your best ideas, tweak them until they’re ready, and drop them straight into your Buffer queue. Now that Ideas has launched in our web and mobile apps, we have some time to",
    "author": "Joe Birch",
    "published": "Tue, 13 Dec 2022 18:32:36 GMT",
    "image": "https://buffer.com/resources/content/images/2022/12/aaron-burden-Hzi7U2SZ2GE-unsplash.jpg",
    "source": "https://buffer.com/resources/overflow/rss/",
    "categories": [
      "Overflow"
    ]
  },
  {
    "id": "36a5767f-8e36-448b-a1fa-9f147780ac4f",
    "title": "Measuring Dialogue Intelligibility for Netflix Content",
    "link": "https://netflixtechblog.com/measuring-dialogue-intelligibility-for-netflix-content-58c13d2a6f6e?source=rss----2615bd06b42e---4",
    "description": "",
    "author": "Netflix Technology Blog",
    "published": "Thu, 08 May 2025 00:40:17 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/0*WSViFfuvT8pcZshi",
    "source": "https://netflixtechblog.com/feed",
    "categories": [
      "intelligibility",
      "dialogue"
    ]
  },
  {
    "id": "8c63b40b-8962-4ede-bf95-bab00448eddc",
    "title": "How Netflix Accurately Attributes eBPF Flow Logs",
    "link": "https://netflixtechblog.com/how-netflix-accurately-attributes-ebpf-flow-logs-afe6d644a3bc?source=rss----2615bd06b42e---4",
    "description": "",
    "author": "Netflix Technology Blog",
    "published": "Tue, 08 Apr 2025 17:50:58 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/0*QIn-JibEFM2CLans",
    "source": "https://netflixtechblog.com/feed",
    "categories": [
      "ebpf",
      "networking",
      "observability",
      "linux",
      "containers"
    ]
  },
  {
    "id": "4ee74e79-1b6d-4804-977e-66fe05177b91",
    "title": "The Insane Innovation of TI Calculator Hobbyists",
    "link": "https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/",
    "description": "Table of Contents The platform Programming model Software projects Phoenix Grayscale on the TI-84 Plus Game Boy emulator for the TI-84 Plus Shells TI-84+ USB mass storage driver KnightOS The Axe Parser project Unity: Native code on the TI-81 Operating system hacks Signing keys arTIfice Whence from here? Further reading In the mid-to-late 2000s, you either knew, or were, that kid in grade school. You know. The one who could put games on your graphing calculator. You may be surprised to learn that some of these people didn’t exist totally in a vaccuum. There was in fact a thriving scene of hackers who had bent these calculators to their will, writing games, math software, and more generally hacking on the platform just for the sake of it. True to my interests, it’s all deeply embedded, pushing the limits of platforms that were obsolete when they were released. I’ll take you through some of the highlights of Texas Instruments calculator hacking done over the past two and a half decades, along with an explanation of why these projects are so technically impressive. This is xkcd #768. There are also 768 bytes in the RAM buffer used to hold TI display bitmaps. This is not a coincidence because nothing is ever a coincidence with xkcd. (source) Note Wow, it’s been a while since I’ve written anything. In the space of a year I’ve gotten a new job, bought a house, moved. Life comes at you fast. Thanks to everyone who has emailed to check on me—and I apologize for not being super responsive over email. I do plan to continue the articles I’ve started! The platform Throughout the 90s and 2000s, TI released a succession of z80-based graphing calculators. You might have heard of the z80—it was an improved version of the Intel 8080 developed by Zilog. Yeah. It’s old.1 They were quite nice 45 years ago when they were released! All TI calculators generally had similar low-end specs: z80 processor usually clocked at 8 or 10MHz—and note that the z80 can only retire one instruction every 4 cycles. 96x64 black and white LCD (a few models had a larger screen but this was by far the most common. The latest models finally have higher resolution color screens.) A link port which (ab)used the 2.5mm headphone jack connector Generally, 32KB of RAM, and on the 83+ and later, anywhere from 100KB to 2MB of flash storage (“archive”) TI’s operating system “TI-OS” (they call it “EOS” but nobody else does). TI-OS has: Arithmetic and graphing engine TI-BASIC scripting language On the models with flash, support for launching large “apps” stored exclusively in flash Needless to say, this is the very definition of a constrained environment. The most popular graphing calculators were of course the TI-83/84 Plus, which every American student for the past decade and a half has probably seen. I will use “TI-84 Plus” throughout here because it’s very likely the model you’re familiar with; however, it was more often referred to as the TI-83 Plus because they were basically identical. The 84 Plus had USB and a redesigned case, but the system was the same. Programming model The z80 assembly2 programming environment was pretty spartan: there was no supervisor or memory protection, so if you had a bug you were probably going to crash the calculator (the dreaded “RAM Cleared” message). The z80 is an 8-bit machine, with 16-bit pointers, so although archive was technically memory mapped, it wouldn’t all fit—it was actually paged in to a 16KB “window”: This diagram is heavily simplified, but you’ll notice the lack of any horsepower at all. There were several guides for learning assembly, but the best was by Sean McLaughlin, Learn TI-83 Plus Assembly in 28 Days. TI provided a very good SDK documentation about subroutines provided by TI-OS (and official support for Asm() programs), and with that you pretty much had free rein over the system. Software projects Those who followed calculator hacking news will surely recognize the individuals I’m calling out here, either by their name or, more likely, by their handle. For my own part, I was almost entirely a lurker, largely due to the influence of my parents who were not keen on talking to people online. (Remember, high school.) I was, however, a pretty good self-taught calculator programmer—more on that in a later article… Note A fair number of these links are starting to rot because development happened 20 years ago. Please do email me with corrections if you find a newly dead link. And of course massive kudos to the Internet Archive for preserving it all! Phoenix Easily the most famous3 graphing calculator game is Phoenix by Patrick Davidson. It’s a top-down space shoot-em-up similar to the arcade game Galaxian. The reason it is famous is not because it is fun—although it is—nor because it’s well implemented—although it is. Rather, this game is famous because it is one of the oldest, and Patrick and others have ported it to nearly every single z80 calculator ever released. Grayscale on the TI-84 Plus The first thing I remember being really wowed by was an RPG game called Desolate by Patrick Prendergast (tr1p1ea), which boasted four level grayscale. On top of that the game was not just a tech demo; it had a fully featured storyline and pretty good sprite art.4 Most emulators were able to detect that the application was doing grayscale and produce a clean rendering of it How was this possible on a device with only a black and white screen? The answer was that if you flickered pixels on and off fast enough, they would appear gray. Naïve attempts at this led to horrible jittery messes and found it difficult to get over 3 colors (black, white, gray). In contrast, Durk Kingma’s grayscale library that Desolate used achieved really nice 4-gray art by careful timing and by dithering the flickered pixels so that not all were on or off at once. Graphics consumed the majority of the compute budget for the game—but such is life for most video games! Game Boy emulator for the TI-84 Plus TI wasn’t the only company using z80 processors. The original Game Boy used them too! A natural question arises: maybe, possibly, could you run a Game Boy game on a calculator in some sort of hypervisor? Brendan Fletcher (calc84maniac) put a ton of engineering into TI-Boy SE, which does exactly that! A Game Boy cartridge is fairly large—Pokémon Red’s ROM is 1MB—so TI-Boy solves this by packing the ROM into a “shell” flash app using a PC program. Of course, you had to bring your own Game Boy cartridge ROM. The next problem is that many Game Boy cartridges have more RAM (up to 128KiB) than the TI-84 Plus (32KiB). (The Game Boy had only 8KiB built in, but cartridges could supply extra.) Here we’d seem to be stuck: how can you possibly emulate extra RAM? Xavier Andréani (critor) observed that TI calculators did in fact have extra RAM because the ASIC containing the z80 had more RAM than was exposed by default. TI-Boy reverse engineered the special commands to the hardware to bank-switch these into address space! The result is impressive: TI-Boy playing Legend of Zelda (via ticalc.org) Shells On calculators released before the TI-83 Plus, there was no official way to launch assembly language programs. These calculators had to be hacked using various techniques. The solution for end users was a shell - a launcher program that handled the annoying bits of transferring control from the OS. Many shells also provided additional routines a program could call. On the TI-82, the Ash shell accomplished this by sending a specially-crafted memory backup to the calculator. When the calculator next handled a keypress, the memory image redirected the CPU into the setup code. In a sense, this technique is one of the oldest exploits for any TI calculator. The shell that you are most likely to remember is MirageOS for the 84+. MirageOS was a popular tag-along with games shared peer-to-peer with a link cable, because the games needed it to run. It was also a flash app, so it persisted through RAM clears. I remember not being entirely clear on why its splash screen was so elaborate when I first encountered it, but now I appreciate the artwork! Shells got more elaborate over time, culminating in Doors CS by Christopher Mitchell (KermMartian), which had icons for assembly programs, a cursor-based UI, and a bunch of routines for programs to use. TI-84+ USB mass storage driver The 84+ had a really wacky USB port: it was an On-the-Go port, very obscure when it was released. This technically meant that the 84+ could act as a USB host. Dan Englender’s Usb8x supplied the missing driver code, allowing you to use a mouse (of questionable utility), keyboard, or more importantly, a flash drive. The calculator’s boot code provided low-level USB routines for get/send, but the impressive part is the upper USB stack including the mass storage and FAT16 driver “msd8x”—all, of course, in z80 assembly! Usb8x enabled, among other things, a hilarious demo: Michael Vincent may be one of the only people to have ever watched The Matrix on his calculator. (via ticalc.org) KnightOS Drew DeVault (SirCmpwn) was working on a promising project replacing TI-OS entirely with a from-scratch Unix-inspired, multitasking system called KnightOS. The cool part about this system is that it drew a lot from the multitasking paradigms we take for granted on a Mac or Linux box, but did it all with barely any help from the hardware. Programs were relocatable, there was preemptive multitasking, and there were loadable libraries that worked exactly like shared objects do in Unix. There was also a “real” filesystem with directories, flash wear leveling, and a protocol to connect to a computer. (It even has its own USB PID—0xCA1C.) Of course, the whole thing was all carefully implemented in z80 assembly, and kernel and library routines documented the contents of each register. It’s not vaporware; there’s autogenerated builds you can download and install on your calculator, and the source is on GitHub. Unfortunately its broad scope prevented it from achieving a stable release, but the bones are there and they are cool. I actually contributed a little to this project: I remember just having learned about synchronization primitives (mutexes and condition variables) and I easily knew enough about the z80 to be able to implement them for KnightOS. The Axe Parser project As you might imagine, there are two problems with writing assembly programs. First, you generally need a PC to do it properly, and most budding programmers were in school for most of their day. Second, and more importantly, z80 assembly is pretty arcane if you’re coming from BASIC. With the Axe Parser5, Kevin Horowitz (Quigibo) attempted to solve these problems by creating a new programming language that compiled into native code on the calculator. Axe is an app that reads a “TI-BASIC program” written with the built-in editor, but Axe redefined the grammar and semantics to provide a language that was very well suited to writing games. It’s quite an elegant solution: using the built-in editor means Axe didn’t have to ship an editor for its language. Rather, Axe is a compiler—it spends its engineering budget on producing better assembly code, with pages and pages of forum threads devoted to optimization. And further, Axe is extensible with new primitives provided as “Axioms”—plugins that further manipulate the grammar of the language. Here’s a hello world program in Axe. The Str1 token has been co-opted into a 16-bit pointer variable—this compiles on-calculator to an assembly program called HELLO! :.HELLO :\"Hello World\"→Str1 :Disp Str1 Unity: Native code on the TI-81 The TI-81 was an absolute potato of a calculator. Not only did it lack archive memory, it also lacked a link port, and lacked the Asm() command, meaning you were stuck with TI-BASIC. Stuck, that is, until Ben Moody (floppusmaximus) released Unity, a loader that exploited a buffer overflow in the primitive TI-OS, then installed itself to help load other assembly programs. With no link port, how did you get Unity or other assembly programs on the calculator? You typed them in, by hand! The installation instructions are reminiscent of typing in BASIC programs out of BYTE magazine: I suspect Randy Compton, who originally discovered the OS bug, did so by dumping the ROM with physical disassembly. z80 assembly is extremely amenable to reverse engineering because it’s hand-written. Operating system hacks While most projects ran on TI-OS, some ran up against TI-OS in order to make the hardware do things that TI preferred they didn’t do. There were scruples. Most people wanted to avoid the ire of Texas Instruments because (a) even the threat of lawyers tends to have a chilling effect on high school students and (b) people generally wanted to avoid besmirching the community’s image. And so there were certain things that were mostly considered off-limits, namely programs that were designed to help cheat on tests. Signing keys Really all anyone wanted to do was run their own code on their own hardware. TI had a crude but effective cryptographic signature check for apps and operating systems, which used the Rabin cryptosystem. They had released the signing key for TI-83 Plus apps as part of the SDK. However, the other keys that allowed signing OS images for the 83+, 84+, and apps and operating systems for the TI-89, were still secret. Using math against calculator enthusiasts—what did TI expect to happen?! Ben Moody realized that the state of the art in 2009 was enough to directly crack the ten year old 512-bit keys. His post (enigmatically titled “Fun Number Theory Facts”) revealed that he had found the prime factors of the public key for the 83+ operating system. Initially flabbergasted, the community threw together a BOINC cluster which cracked all the remaining keys in a few weeks without breaking a sweat. Texas Instruments threw a tantrum, lobbing legal threats that were, frankly, 100% bullshit abuses of the DMCA. The Electronic Frontier Foundation intervened on the hobbyists' behalf, explaining to TI that there is nothing illegal about knowing the prime factors of certain integers. The whole thing earned its own Wikipedia article. Today, you can easily find these keys on any enthusiast site, including right here. arTIfice Fairly recently (late 2020), TI decided what everyone really needed was a cold shower, and announced they’d be disabling all this assembly business with a software update for the TI-84+ CE (the newest color calculator), dubiously claiming that this would improve exam security, etc, etc.6 To quote Lionel Debroux: This slam shuts [sic] a golden age of over two decades (!) of native code being officially supported on at least one actively maintained TI graphing calculator. […] Like all true calculator enthusiasts, we have hard feelings about the matter. The community had always been nice to TI - nothing really damaging for TI’s business was ever released over 20+ years! - but a moral barrier has probably been broken today… As an olive branch they offered Python bindings; everyone immediately pointed out that Python is wicked slow in embedded environments and absolutely cannot replicate what native code can do.7 If you’ve read this far, you’ll note this isn’t the first time TI has been a little tone-deaf toward enthusiasts. Enter arTIfice8 - a proper jailbreak for these calculators. You simply install the CabriJr geometry app, and open a special data file with it, and suddenly you’re presented with a menu allowing you to run whatever you like. What’s cool about this is that it’s a jailbreak, not just a sweet hack that uses the hardware. Just like you may be familiar with jailbreaking an iPhone or Xbox, starting from within the sandbox and getting out, this abuses bugs in the wildly complicated CabriJr geometry app (signed and blessed to run by TI) to reenable arbitrary code execution and literally pop a shell or install hooks into the OS.9 The arTIfice exploit is just 927 bytes, and it packs a simple UI and loader in behind the shellcode. Being this small, the underlying exploit is probably the lowest hanging fruit of plenty of zero-days in this and other TI software. So yeah, now exams are secure, or something. Whence from here? For every project I listed, there were ten others that I didn’t. (And if I missed yours, I mean no disrespect!) The breadth and depth of tinkering is staggering: I haven’t even touched the scene for the ARM-based Nspire. There are always challengers to Texas Instruments' entrenchment in high schools; Casio in particular has made some attractive devices. There has been a modest amount of scene releases for Casio calculators as well. The startup Numworks makes calculators based on a very capable STM32F429 microcontroller. Until recently, the Numworks had an open-source operating system and I had half-hoped that it might spark a renaissance of handheld calculators. The hardware is available and pretty nice, but they’ve closed the source code license, so I don’t think it will see any grassroots adoption by the calculator scene. But no matter the platform, the steady stream of bored nerds in high school cannot be quenched, and they will have the support of smart engineers with free time. In the true hacker spirit, I suspect people will continue to push the boundaries of whatever hardware they find in their hands. Further reading Casual readers may wish to browse ticalc.org’s news (which goes back to 1997) for the most interesting news, or spelunk in their massive archives. Or, dive into the phpBB rabbit holes of the community’s forums, some dead and some still thriving! ticalc.org: one part forum, one part news source, three parts massive archive of nearly all software released for any TI calculator Cemetech: fairly formal, moderate amount of chatter but with pretty good signal to noise ratio and with very knowledgeable people. Still very active. Omnimaga: less formal, lots of projects, with a sprawling offtopic section and very elaborate forum signatures. Datamath: a large “online museum” with hardware teardowns, reverse engineering, and documentation of nearly every calculator ever released. TI-Planet: a French forum that was linked a lot, with a large downloads section and active community; unfortunately I don’t know much about it firsthand because I don’t speak French. calc.org (Wayback link): also used to be called Dimension-TI. A now-defunct forum and download host. Unfortunately it was before my time and I don’t know much about it. Oh, and other calculator nerds: keep me honest. Corrections welcome by comment or email. A popular hobbyist project is to build your own homebrew z80 computer, precisely because it is so simple that you can understand the foundations of the system. My favorite is probably Jim MacAurthur’s beautiful minimal z80 in a laser cut case with a hand crank to single-step instructions! ↩︎ The z80 generally made life pretty difficult for people who attempted to make a good C compiler for it. I believe I have the only remaining copy of HITECH-C for DOS, which was actually a decent C compiler. As I said, more on that in a later article. ↩︎ Your fame results may vary. Seemed this way to me, anyway. ↩︎ It’s good enough to have garnered at least a few fan ports to ZX Spectrum and some old Soviet computers. ↩︎ Wow, the Axe user manual takes me back—it was my first exposure to xkcd! ↩︎ Feels like they got advice from the Playstation Linux team. ↩︎ As far as I can tell, they are likely using MicroPython—implementing a Python from scratch would be a huge task—but I can’t find any MIT license disclosure. ↩︎ Holy moly does this page cause my CPU fans to spin… ↩︎ I’ll point out that all these hooks were already possible and remain supported by the OS itself; it’s how apps like Inequalz (which graphs inequalities) work - they hook the graph equation screens and the drawing routines, using official APIs. ↩︎",
    "author": "George Hilliard",
    "published": "Wed, 06 Oct 2021 08:42:00 -0500",
    "image": "https://www.thirtythreeforty.net/posts/2021/10/ti-calculator-innovation/1996.png",
    "source": "https://www.thirtythreeforty.net/posts/index.xml",
    "categories": null
  },
  {
    "id": "4bc274c0-1e87-4716-8ae3-a67ccedf2ef2",
    "title": "Hacking Reolink cameras for fun and profit",
    "link": "https://www.thirtythreeforty.net/posts/2020/05/hacking-reolink-cameras-for-fun-and-profit/",
    "description": "Table of Contents Sniffing traffic Dissecting traffic with Wireshark Inspecting the firmware Why doesn’t this camera support RTSP? Pwning the camera Low hanging fruit first Getting root Reversing the protocol Static analysis with Ghidra Strings: a bounty of information The Charlie Scrambler Dynamic analysis with gdb Feeding the watchdog Charlie strikes again A brief history of the Baichuan protocol Neolink: a new client Getting the video data Wrap it in maroon and white, er, RTSP Testing it with Blue Iris Future work Way back in late 2019, I dissected a Reolink B800 IP camera to demonstrate the various parts of an embedded Linux system. It’s fairly nice hardware, actually—it has a 4K video sensor, a microphone, power over Ethernet, and is nominally waterproof. And yes, it runs Linux. It came in a “kit” of six cameras and an NVR (a dedicated recording box that also powers the cameras). Unfortunately, the NVR is pretty anemic: it’s clearly an existing model with slight changes to support 4K cameras, and it struggles to support more than one viewer at a time. However, I bought these cameras because I believed they supported open standards such as ONVIF, so I’d just swap the NVR for a copy of Blue Iris running on my server. At the time, the Reolink support page clearly indicated that all of their non-battery-powered cameras supported RTSP. After the system was installed, it became apparent that the cameras did not in fact support RTSP—the only port open on them was port 9000. Then, barely outside my return window, Reolink updated their support page to say that the cameras would only work with their 8-channel NVR or proprietary viewer apps. This was, in the immortal words of Bill and Ted, bogus. Heinous. Most non-triumphant. Bogus enough that I decided to pwn the camera, reverse engineer the protocol, and write my own software to get the video stream. The end result is a new piece of open-source software called Neolink, which allows Blue Iris, Shinobi, or other NVR software to receive video from unmodified Reolink cameras. Here’s how I did it. Sniffing traffic As a first step, I fired up Wireshark and captured traffic between the camera and its official Reolink PC client1. The only thing that jumped out to me was the appearance of a sync word at the beginning of each packet, 0xf0debc0a. (In little endian, this is 0x0abcdef0.) On a lark, I Googled this, and actually found a project on GitHub from 2015 which was attempting to retrieve data from Swann cameras! A quick look at the code told me that although they share the sync word and packet header, the protocols for my camera and these older cameras were very different. The payload appeared to be encrypted in my captures. Furthermore, the code wouldn’t even run due to some questionable pointer juggling. Time to extract what I could—the header layout was correct—and move on. Dissecting traffic with Wireshark Always, always spend time developing debug or analysis tools. In my experience, such tools immediately pay back your time investment by a factor of 4 or more. With what I knew, I was able to write a “Baichuan” protocol dissector for Wireshark using Mika’s awesome tutorial. This was easy and fun: Wireshark lets you write dissectors in Lua (disclaimer: your definition of fun may vary). Now Wireshark could show me the payload lengths and message IDs. Not much, but it was a start. Inspecting the firmware In order to figure out whatever encryption and/or obfuscation the protocol was using, I planned to reverse engineer the firmware. I felt pretty confident that the underlying video was using a well-known protocol (especially since the camera seemed to have dedicated video encoding hardware). So “all” I’d have to do is reverse engineer the rest of the protocol. Easy peasy, right? Why doesn’t this camera support RTSP? As a quick aside, it’s natural to wonder why this camera doesn’t support RTSP and/or ONVIF. After all, plenty of other Reolink cameras do. Because I’d like to give them the benefit of the doubt, I’ll propose the possibility that Reolink ran out of storage on this camera and had to axe some features. After all, a 16MB flash chip would cost a whole 20 cents extra. This is just a cost-saving measure and definitely not vendor lock-in, hmmm? Pwning the camera Right, onward. With the protocol not immediately accessible, it was time to crack this camera open. My previous disassembly of the camera has already indicated that it uses SPI NOR flash—bog standard for a small Linux system like this. I was wanting to try out a really neat little SOIC socket I had discovered and ordered on Taobao a little while back. I desoldered the flash and soldered on a socket instead. The camera was now pwned, permanently—there was nothing I could do to brick it (I could always just reflash it with flashrom) and there was nothing Reolink could do to stop me from running my own code on it (since I had control of the first instruction executed, if need be2). With the flash now conveniently socketed, I dumped it and used binwalk to inspect the layout. Here’s the flash layout—the nice round byte offsets that engineers tend to pick.3 Bootloader, Linux uImage, squashfs rootfs, and JFFS2 persistent partition. DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 67266 0x106C2 eCos RTOS string reference 1769472 0x1B0000 uImage header 3604480 0x370000 Squashfs filesystem, little endian 7798784 0x770000 JFFS2 filesystem, little endian This also lines up nicely with this visualization of the flash image, made by a neat little tool called BinVis. binwalk also conveniently offers to unpack the filesystems it finds. Low hanging fruit first My first order of business was to find the actual camera binary. It was pretty easy to find; it’s sitting in its own directory at /mnt/app/dvr. The dvr binary also had an accompanying dvr.xml, which looked like a configuration file. A little grepping later, and… sure enough, here were the magic words ONVIF and RTSP! # .... push_server=\"pushx.reolink.com\" push_server_port=\"9501\" support_3gnet=\"0\" support_intelligence=\"0\" support_smartsearch=\"0\" support_onvif=\"0\" support_rtsp=\"0\" support_bc=\"1\" support_3dnr_config_interface=\"1\" default_3dnr_config=\"1\" # .... I suspected these were simply feature flags dictating to the software which features to enable. What if I just changed these zeros to ones? Rebuilding the rootfs wasn’t quite as easy as extracting it, but I cobbled together a command through trial and error. I wanted to get the squashfs format exactly the same as the one reported by binwalk, so that I could be sure that the stock kernel would mount it. Since I was mostly flying blind without a UART console, I didn’t want any trouble. $ mksquashfs new-squashfs-root/ new-squashfs.img -comp xz -b 262144 -all-root -noappend $ dd if=new-squashfs.img of=pwned.bin bs=1 seek=$((0x370000)) conv=notrunc $ flashrom -p ft2232_spi:type=2232H,port=A -w pwned.bin Alas, it was not to be this easy. The camera exhibited a remarkable lack of behavioral reform: no new ports opened, nothing. For comparison, I downloaded and unpacked a firmware update for a different Reolink camera that did support RTSP. The dvr binary for that camera was nearly 8 megabytes, while my victim’s was only a little over 3. Clearly, the engineers compiled out the unneeded bits. Getting root Fine. If Reolink has compiled the extra functionality out, then the least the camera could do is give me a shell. While I was here, I decided I’d make some, ahem, extra modifications. A quick Google did not yield prebuilt binaries of the tools I was looking for. Instead, I checked out a fresh copy of Buildroot and quickly set it up for a baseline MIPS configuration with static linking, then asked for copies of gdbserver, busybox with all the fixin’s, and strace: $ make qemu_mips32r2el_malta_defconfig $ make menuconfig # (with appropriate edits made) $ make busybox gdb strace Thirty minutes later, I had my tools. In the rootfs tree that binwalk had extracted, there’s the usual assortment of startup scripts in /etc/init.d. With my tricked-out Busybox copied to /bin, and a symlink created named telnetd, I added an extra line to one of the startup scripts: # Get a shell /bin/telnetd -l /bin/sh Fingers crossed, I reinstalled the flash and powered the camera. $ telnet 192.168.1.187 Trying 192.168.1.187... Connected to 192.168.1.187. Escape character is '^]'. /mnt/app # Mwahahaha. Reversing the protocol What to do with my newfound power? I planned to start with a static analysis of the firmware, first reverse engineering the encryption scheme. If I got stuck, I could interrogate the camera binary as it executed. Once I could undo the encryption, I’d be able to see what the actual protocol was like. Static analysis with Ghidra The traditional hobbyist tool for static analysis, IDA free edition, is no good here, because my binary is for MIPS, which the free IDA refuses to disassemble. Instead, the tool of choice is Ghidra, an astoundingly good open-source reverse engineering suite released by the NSA. Now, normally saying “I ran a binary the NSA gave me” will get you laughed out of the room. But Ghidra has been open source for a while now, so I feel reasonably safe installing it from the Arch Linux repository. If this website looks like it’s made by a government agency, it’s because it is. Ghidra is awesome. Seriously, this is a piece of software you’d have to pay $10000 for, and it should be your go-to for reverse engineering work. In addition to the disassembler and analyzer, Ghidra also includes a decompiler, which prints pseudo-C code instead of leaving you digging through MIPS assembly. It also re-analyzes in realtime as you annotate function arguments with type information and names. These features easily cut my time spent reverse engineering in half. So, armed with Ghidra and a false sense of confidence stemming from never having done any reverse engineering before, I went spelunking in the Baichuan binaries. Strings: a bounty of information There’s a reason most reverse engineers start by examining the strings in an unknown binary—it’s a technique that works. In my case, checking for strings in the desktop client and the firmware’s server yielded debug print statements, function names (which Ghidra automatically annotated), and a couple other oddball strings that I’ll talk about in a minute. Both codebases were clearly built around a shared proprietary “BCSDK” library. Searching for crypt yielded a couple of candidate functions that purported to perform encryption: Well, no RSA here, or anything resembling “real” encryption, except AES. (And I could find any AES keys embedded in the app in short order.) But what’s this string stuck nonchalantly in the middle of the others? That’s not a function name. I hit find-references and read the code that uses it. The Charlie Scrambler Ghidra took me to this gem of a function: Technically, this is the decryption function; there’s another one that works in reverse. It only takes a second to understand what’s going on here: the “encryption” scheme is simply: XOR the data with the string Charlie is the designer of P2P!!, then mix up the bytes. This isn’t encryption. This is just a scrambler. Bravo, Charlie, your “design” is permanently encoded in this protocol for all time. Don’t roll your own crypto, kids. Unfortunately, the Charlie Scrambler is only called from UDP functions (see the cross-reference at the bottom of the Ghidra window). This meant it wasn’t my pigeon; my camera uses TCP. At this point I had no idea which of the other “encryption” functions were the right one for my camera, so it was time to bring out my next weapon. Dynamic analysis with gdb With my shell access waiting, my next move was to attach a debugger and control the dvr program remotely from my workstation using my cross-compiled gdbserver and strace tools. My Busybox included an FTP server and a TCP wrapper: $ /bin/busybox tcpsvd -vE 0.0.0.0 21 ftpd / -w -A tcpsvd: listening on 0.0.0.0:21 With this setup I could push whatever tools I wanted to the camera filesystem, even though I hadn’t packed them into the firmware. I went through this process manually about twice before it became really tedious. This is the kind of thing it’s possible to automate with expect, a Tcl (!) program that pretends to be a console user. I scripted these interactions, which reduced the connect, tool push, and gdb setup to a simple: $ ./start-debug.exp An added benefit of this setup is that I could stick whatever gdb commands I wanted to run at startup at the end of the script, instead of writing a dedicated GDB script. These dynamic printf commands simply print in the GDB console when the camera hits a breakpoint, helpful for knowing which functions are being called without halting the camera: send_gdb \"dprintf *0x478908, \\\"_Nets_Without_Password_Login_V20\\\\n\\\"\" send_gdb \"dprintf *0x4780ac, \\\"FUN_004780ac\\\\n\\\"\" send_gdb \"dprintf *0x6310f0, \\\"Md5_string_encrypt\\\\n\\\"\" Feeding the watchdog After attaching and halting the dvr daemon, the camera promptly crashed and reset. After some quick investigation, the camera had a watchdog enabled at /dev/watchdog—a very common setup for embedded devices. I was doing open heart surgery on this software—I didn’t need some two-bit peripheral wandering by and hitting it with an AED! Busybox ships with a watchdog minder, so I simply fired it up: $ watchdog /dev/watchdog Problem solved. Charlie strikes again After my breakpoint was hit, I knew which encryption function I was dealing with: Nets_XmlEncryption. This was immediately good news, because after figuring out the encryption, I was likely dealing with nice ordinary XML, not some crazy half-baked bag of C structs. I took a look at the decompiled function in question in Ghidra, annotating as I went. Sure did look familiar… No engineering lessons had been learned during the redesign, and the influence of Charlie was alive and well! Here is the Charlie Scrambler back in force, but without the mixing step, and with a shorter key. Fine, whatever. Implementing the Scrambler in my Wireshark dissector didn’t take very long—although I was briefly baffled by a header of varying length depending on the message type. Once implemented, I was greeted with this glorious sight: Again, I highly recommend writing plugins for Wireshark. You can do it in Lua (or C if you’re that hardcore), and it only takes a couple hours to have a really nice debug tool. A brief history of the Baichuan protocol I won’t bore you with the gory details, but I’ll summarize my findings. The Baichuan protocol has had several iterations over the years. The very oldest seem to be UDP-based, using a proprietary SDK called TUTK, illicit copies of which can conveniently be found on GitHub. This is no longer used; it’s not even present in the camera code. The next variant is indeed a plaintext “bag of structs”, which consists of a header and a body specified by a message ID in the header. This “legacy variant” is briefly used on the B800 so that both clients can negotiate an upgrade to the “modern variant,” which is the scrambled XML-based scheme you see above. On top of this, modern messages can optionally have a payload. A certain XML message switches the entire message ID into “binary mode,” which supplies a raw data stream in subsequent messages. When the client sends a video-start command, the camera replies with a binary stream containing raw H.265 video. On top of that, the payload can also be more encrypted XML, separate from the main XML for some reason. On the whole, it’s really quite a pain to parse. Neolink: a new client Once my Wireshark dissector was humming along, it was time to write a new client. I wanted my software to be fast, high-level, and correct, since it would be part of a security system setup. That’s right: I rewrote Reolink’s software in Rust. Well, not exactly. Neolink is a new client completely from scratch. It speaks the same Baichuan protocol as the camera, and it extracts the video and forwards it to another real NVR client like Blue Iris over RTSP. The parsing code is somewhat hairy4, but other than that, it’s straightforward. Getting the video data Here’s all the client is capable of right now. It’s pretty easy to read if you want to look at the source. Send a legacy login message to get the camera to “upgrade” to modern messages. Note: this uses plain MD5 encryption for your password, another, um, interesting design choice. Use a password that isn’t in a rainbow table! Send a modern login message to actually authenticate to the camera. Send a start video request: let start_video = Bc::new_from_xml( BcMeta { msg_id: MSG_ID_VIDEO, client_idx: 0, encrypted: true, class: 0x6414, }, BcXml { preview: Some(Preview { version: xml_ver(), channel_id: 0, handle: 0, stream_type: \"mainStream\".to_string(), }), ..Default::default() }); sub_video.send(start_video)?; Spit out the binary data when it’s received: loop { let msg = sub_video.rx.recv_timeout(self.rx_timeout)?; if let BcBody::ModernMsg(ModernMsg { binary: Some(binary), .. }) = msg.body { data_out.write_all(binary.as_slice())?; } } Wrap it in maroon and white, er, RTSP5 For this part of the program I reached for Gstreamer, which ships with an RTSP server. Gstreamer is… complex. However, their examples are fantastic; they even provided a sample RTSP server in Rust! The general approach for feeding Gstreamer data from an arbitrary part of your program is to use a block called an appsrc. This lets you get a callback whenever Gstreamer wants data, or alternatively just push data whenever you have some and let Gstreamer handle scheduling it. The latter approach is the one I went with here, since the camera doesn’t wait for a signal to send video data. I wrapped everything in a Gstreamer pipeline: appsrc name=baichuan is-live=true emit-signals=false max-bytes=0 ! h265parse ! rtph265pay name=pay0 Testing it with Blue Iris The moment of truth arrived… could Blue Iris connect to my RTSP server and actually display the video? You bet. I present… me! In glorious 4K! Future work I’ve been soak-testing Neolink for a while now and I think it’s pretty stable. Going forward I’m packaging it up as a real Windows service (not a command line program) to run alongside Blue Iris on my server. Go look at it and download it for yourself! I’m also interested in getting Neolink working with other “NVR only” Reolink cameras, of which there are quite a few. So far I haven’t purchased any other hardware, so if you have one of these cameras, please get in touch so we can test it. It might Just Work out of the box. Port scan your cameras! If they have port 9000 available, chances are good that they speak the Baichuan protocol. This project was a “just right” intro to reverse engineering. Low-security systems like these let you teach yourself the principles without actively trying to thwart reverse engineering. I taught myself a lot, and I hope it provides a lot of value for folks who own these cameras. Finally, some shameless self-promotion: embedded Linux systems are actually pretty approachable! If you’d like to learn how to do this kind of thing, you might be interested in my Mastering Embedded Linux series, designed to help you become an expert in hacking low-cost embedded Linux systems just like this camera. If you enjoyed this, you can subscribe to my blog updates, or leave a comment below. Thanks for reading! The Reolink support forums always claim that their pages were “updated 8 hours ago.” This is obvious nonsense. They do update fairly frequently, but not constantly. ↩︎ This is exactly the point of secure boot schemes, where the immutable boot ROM validates code against immutable encryption keys, preventing tampering. Needless to say, this camera does not implement such niceties. ↩︎ binwalk also turns up a bunch of false positives, which are easy to ignore because they don’t have nice round offsets. ↩︎ Seriously, having packet decode be stateful is just ridiculous. ↩︎ Yes, I’m a proud Mississippi State University bulldog. You too can attend and become a computer engineer! ↩︎",
    "author": "George Hilliard",
    "published": "Sat, 16 May 2020 17:40:00 -0500",
    "image": "https://www.thirtythreeforty.net/posts/2020/05/hacking-reolink-cameras-for-fun-and-profit/b800.jpg",
    "source": "https://www.thirtythreeforty.net/posts/index.xml",
    "categories": null
  },
  {
    "id": "8539bd83-b437-4a69-9648-855b3c4bb3f9",
    "title": "Progress on the Block Protocol",
    "link": "https://www.joelonsoftware.com/2022/12/19/progress-on-the-block-protocol/",
    "description": "Since the 1990s, the web has been a publishing place for human-readable documents. Documents published on the web are in HTML. HTML has a little bit of… Read more \"Progress on the Block Protocol\"",
    "author": "Joel Spolsky",
    "published": "Mon, 19 Dec 2022 13:01:40 +0000",
    "image": "https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2022/12/IMG_0203.webp?resize=730%2C730\u0026ssl=1",
    "source": "https://www.joelonsoftware.com/feed/",
    "categories": [
      "News"
    ]
  },
  {
    "id": "36e2cac7-c77e-4b54-86d0-4fd57e85b94c",
    "title": "Making the web better. With blocks!",
    "link": "https://www.joelonsoftware.com/2022/01/27/making-the-web-better-with-blocks/",
    "description": "You’ve probably seen web editors based on the idea of blocks. I’m typing this in WordPress, which has a little + button that brings up a long… Read more \"Making the web better. With blocks!\"",
    "author": "Joel Spolsky",
    "published": "Thu, 27 Jan 2022 17:14:00 +0000",
    "image": "https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2022/01/wordpressblocks.png?resize=260%2C573\u0026ssl=1",
    "source": "https://www.joelonsoftware.com/feed/",
    "categories": [
      "News"
    ]
  },
  {
    "id": "18229893-2181-4adf-956e-ea3c182c2990",
    "title": "Grand Theft Auto III on the Dreamcast with Falco Girgis and Stef Kornilios Mitsis Poiitidis",
    "link": "https://softwareengineeringdaily.com/2025/05/08/grand-theft-auto-iii-on-the-dreamcast-with-falco-girgis-and-stef-kornilios-mitsis-poiitidis/?utm_source=rss\u0026utm_medium=rss\u0026utm_campaign=grand-theft-auto-iii-on-the-dreamcast-with-falco-girgis-and-stef-kornilios-mitsis-poiitidis",
    "description": "Grand Theft Auto III is a 2001 an open-world action-adventure game developed by Rockstar Games and it had a profound impact on both gaming and popular culture. Its success cemented video games as a dominant form of entertainment and storytelling, and paved the way for future blockbuster franchises. The game was also a technological milestone The post Grand Theft Auto III on the Dreamcast with Falco Girgis and Stef Kornilios Mitsis Poiitidis appeared first on Software Engineering Daily.",
    "author": "SEDaily",
    "published": "Thu, 08 May 2025 09:00:29 +0000",
    "image": "https://traffic.megaphone.fm/SED2943187439.mp3",
    "source": "https://softwareengineeringdaily.com/category/podcast/feed",
    "categories": [
      "All Content",
      "Exclusive Content",
      "Hosts",
      "Podcast",
      "Dreamcast",
      "Falco Girgis",
      "GTA3",
      "PlayStation",
      "Rockstar Games",
      "Stef Kornilios Mitsis Poiitidis"
    ]
  },
  {
    "id": "ac3e03f9-b5b8-4442-92b0-85ccedbd47c5",
    "title": "Polypane with Kilian Valkhof",
    "link": "https://softwareengineeringdaily.com/2025/05/06/polypane-with-kilian-valkhof/?utm_source=rss\u0026utm_medium=rss\u0026utm_campaign=polypane-with-kilian-valkhof",
    "description": "Polypane is a specialized web development browser that simplifies creating and testing modern websites. A key feature is that it provides multiple screen sizes at once, with synchronized scrolling and interactions, so developers can test different layouts and breakpoints simultaneously. Polypane also focuses on accessibility tools, real-time previews, and debugging features. Kilian Valkhof is the The post Polypane with Kilian Valkhof appeared first on Software Engineering Daily.",
    "author": "SEDaily",
    "published": "Tue, 06 May 2025 09:00:38 +0000",
    "image": "https://traffic.megaphone.fm/SED4120945539.mp3",
    "source": "https://softwareengineeringdaily.com/category/podcast/feed",
    "categories": [
      "All Content",
      "Exclusive Content",
      "Hosts",
      "Josh Goldberg",
      "Podcast",
      "debugging features",
      "Kilian Valkhof",
      "Polypane",
      "specialized web development browser"
    ]
  },
  {
    "id": "d4a6d2ce-8756-4eee-ad4e-b0f023e0b565",
    "title": "180: Reinforcement Learning",
    "link": "https://www.programmingthrowdown.com/episodes/180-reinforcement-learning/",
    "description": "Intro topic: GrillsNews/Links:You can’t call yourself a senior until you’ve worked on a legacy projecthttps://www.infobip.com/developers/blog/seniors-working-on-a-legacy-projectRecraft might be the most powerful AI image platform I’ve ever used — here’s whyhttps://www.tomsguide.com/ai/ai-image-video/recraft-might-be-the-most-powerful-ai-image-platform-ive-ever-used-heres-whyNASA has a list of 10 rules for software developmenthttps://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htmAMD Radeon RX 9070 XT performance estimates leaked: 42% to 66% faster than Radeon RX 7900 GREhttps://www.tomshardware.com/tech-industry/amd-estimates-of-radeon-rx-9070-xt-performance-leaked-42-percent-66-percent-faster-than-radeon-rx-7900-gre Book of the ShowPatrick: The Player of Games (Ian M Banks)https://a.co/d/1ZpUhGl (non-affiliate)Jason: Basic Roleplaying Universal Game Enginehttps://amzn.to/3ES4p5iPatreon Plug https://www.patreon.com/programmingthrowdown?ty=hTool of the ShowPatrick: Pokemon Sword and ShieldJason: Features and Labels ( https://fal.ai )Topic: Reinforcement LearningThree types of AISupervised LearningUnsupervised LearningReinforcement LearningOnline vs Offline RLOptimization algorithmsValue optimizationSARSAQ-LearningPolicy optimizationPolicy GradientsActor-CriticProximal Policy OptimizationValue vs Policy OptimizationValue optimization is more intuitive (Value loss)Policy optimization is less intuitive at first (policy gradients)Converting values to policies in deep learning is difficultImitation LearningSupervised policy learningOften used to bootstrap reinforcement learningPolicy EvaluationPropensity scoring versus model-basedChallenges to training RL modelTwo optimization loopsCollecting feedback vs updating the modelDifficult optimization targetPolicy evaluationRLHF \u0026  GRPO ★ Support this podcast on Patreon ★",
    "author": "Patrick Wheeler and Jason Gauci",
    "published": "Mon, 17 Mar 2025 10:00:00 -0500",
    "image": "https://pdst.fm/e/media.transistor.fm/3d34f87a/27367524.mp3",
    "source": "http://feeds.feedburner.com/ProgrammingThrowdown",
    "categories": [
      "Reinforcement Learning"
    ]
  },
  {
    "id": "d8387381-111c-4c84-9bae-7be9be230d6f",
    "title": "179: Project Planning",
    "link": "https://www.programmingthrowdown.com/episodes/179-project-planning/",
    "description": "Intro topic: Lego event space \u0026 retail store: https://www.instagram.com/bambeecave News/Links:StackOverflow Question Count Going Down https://gist.github.com/hopeseekr/f522e380e35745bd5bdc3269a9f0b132DeepSeek claims its ‘reasoning’ model beats OpenAI’s o1 on certain benchmarkshttps://techcrunch.com/2025/01/20/deepseek-claims-its-reasoning-model-beats-openais-o1-on-certain-benchmarks/ Computer Science Papers Every Developer Should Readhttps://newsletter.techworld-with-milan.com/p/computer-science-papers-every-developerNvidia Cosmos - an AI platform to change the future of robots and cars - wins Best of CES 2025https://www.zdnet.com/article/nvidia-signs-largest-car-maker-toyota-to-use-its-self-driving-tech/ Book of the ShowPatrick: Alice’s Adventures in a differentiable wonderlandhttps://www.sscardapane.it/alice-book/Jason: A Beautiful Day in the Neighborhood (Hulu/Netflix/etc)Patreon Plug https://www.patreon.com/programmingthrowdown?ty=hTool of the ShowPatrick: Digseumhttps://store.steampowered.com/app/3361470/Digseum/Jason: Sqlitedict - Python dictionaries saved to diskTopic: Project Planning and ManagementWhy?Gathering feedbackIdentifying risksDeciding future headcountDocumenting / discovering dependenciesCritical pathScheduleReduce the bullwhip effectHow it worksSMART goalsspecific, measurable, achievable, relevant, and time-boundMT is most importantGantt ChartsScrumAgileKanbanToolsWhiteboard (the generic IRL one)Post it notesJIRAAsanaOpenProjectDealing with uncertaintyBufferingIssues with recursive paddingProject planning Post-Mortems ★ Support this podcast on Patreon ★",
    "author": "Patrick Wheeler and Jason Gauci",
    "published": "Mon, 03 Feb 2025 10:00:00 -0600",
    "image": "https://pdst.fm/e/media.transistor.fm/699249ac/19bbc2fd.mp3",
    "source": "http://feeds.feedburner.com/ProgrammingThrowdown",
    "categories": [
      "Programming Throwdown",
      " Programming Languages",
      "C",
      "C",
      "Java",
      "Python",
      "Objective C"
    ]
  },
  {
    "id": "328b3436-012f-448b-8de6-ffd24cfa2b99",
    "title": "You’ll Rebuild Everything Every Four Years Anyway",
    "link": "https://engineering.prezi.com/youll-rebuild-everything-every-four-years-anyway-b31ab0dcc17e?source=rss----911e72786e31---4",
    "description": "",
    "author": "Attila Vágó",
    "published": "Fri, 04 Apr 2025 03:12:34 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/1*4gf5UDs9E97yw0c2E44Cag.jpeg",
    "source": "https://engineering.prezi.com/feed",
    "categories": [
      "software-engineering",
      "software-development",
      "prezi",
      "software-architecture",
      "web-development"
    ]
  },
  {
    "id": "69a67e9a-bae9-45ef-98f7-7f517b6dbe3b",
    "title": "How using Availability Zones can eat up your budget — our journey from Prometheus to…",
    "link": "https://engineering.prezi.com/how-using-availability-zones-can-eat-up-your-budget-our-journey-from-prometheus-to-be8a816f7efe?source=rss----911e72786e31---4",
    "description": "",
    "author": "Grzegorz Skołyszewski",
    "published": "Mon, 09 Dec 2024 16:31:05 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/1*tGT2rOPOAoGAiRKAbgc1rg.png",
    "source": "https://engineering.prezi.com/feed",
    "categories": [
      "monitoring",
      "prometheus",
      "victoriametrics",
      "grafana",
      "kubernetes"
    ]
  },
  {
    "id": "dde63dff-20ff-4e77-8248-280f9f463588",
    "title": "It's not cheating if you write the video game solver yourself",
    "link": "https://robertheaton.com/cocoon/",
    "description": "My wife and two little boys sometimes go on trips to see friends or family for whom my presence isn’t strictly required. While my wife books the flights I make a show of weighing up my options and asking if it’s really OK if I don’t come. Eventually I’m persuaded that it truly would be the best thing for all of us for me to have five to seven days to myself with no nappies and all Nintendo. My wife hits the “Pay Now” button and when the confirmation email comes through I call my secretary and tell him to clear my calendar. When no one answers I remember that I have neither a secretary nor all that much going on, so instead I find a prestige TV series, a selection of local takeaway menus, and a short but immersive video game. This time I messaged my buddies and asked them what I should play. Steve gushed about a game called Cocoon; Morris said that he’d played it a year ago and it was “alright.” Sold. One month later there were hugs, kisses, wave goodbye to taxi, shut the door, where’s the HDMI cable, how did it get under the sink, do I have a Nintendo Account, what’s my password, whatever I’ll make a new one, right let’s do this, estimated download time 45 minutes, start on tax returns, am I relaxed yet? Eventually I was able to boot up Cocoon. I learned that I was going to play as a little bee guy who has to solve artsy puzzles in a lonely, abstract world for no adequately explained reason. Bee guy makes his way through the world using four glowing orbs. He can pick orbs up, carry them around, and put them back down on switches in order to open doors and unfold bridges - standard orb stuff. However, bee guy soon learns that the orbs also contain other worlds, which he can jump in and out of to help with his puzzles. If he jumps inside one orb-world whilst carrying another one then he can put orb-worlds inside each other. He can even - towards the end - put a world inside itself. Conundrums ensue. By the end of Day 1 of my vacation I was having about three-quarters as much fun as I’d hoped. Cocoon’s atmosphere was absorbing and its puzzles made me smile; I only wish there had been a little bit of a story and not just a fuzzy metaphor for entropy and decay. Still, I kept going, trekking through crumbling ruins and overbearing symbolism. By the end of Day 2 I was 51% through the game. I started the next puzzle and got completely stuck. I was surely just tired, I thought, so I watched an episode of The Sopranos and went to bed. The next morning I got up at 6am, made some coffee, and went into my office to crack on. But I was still stuck. I spent an hour filling a bin bag with toys that I didn’t like, since no one was around to stop me. I tried again. Still stuck. Then I realised. I didn’t know how to solve the puzzle, but I did know how to write a computer program to solve it for me. That would probably be even more fun, and I could argue that it didn’t actually count as cheating. I didn’t want the solution to reveal itself to me before I’d had a chance to systematically hunt it down, so I dived across the room to turn off the console. I wanted to have a shower but I was worried that if I did then inspiration might strike and I might figure out the answer myself. So I ran upstairs to my office, hit my Pomodoro timer, scrolled Twitter to warm up my brain, took a break, made a JIRA board, Slacked my wife a status update, no reply, she must be out of signal. Finally I fired up my preferred assistive professional tool. Time to have a real vacation. How I wrote a Cocoon solver In order to write a Cocoon solver, I needed to: Model the game’s logic using a Finite State Machine Use this model to work out the sequence of actions that would get me from a puzzle’s start to its end 1. Model the game’s logic Cocoon’s mechanics are simple but elegant. In the first level you find an orange orb sitting on a stand. You pick it up, obviously, and start to carry it around. You come to a gate with an orb-stand next to it. You put the orb down on the stand and the gate opens. You pick it up again and continue through the gate. Eventually you come to a small reflecting pool with a special-looking orb-stand in the middle. There’s no obvious path forward, so you put your orange orb down on the stand. You stand next to it and press A, because that’s the only button in the game that does anything. You watch yourself dive into the orb, and land in another world. You’re now inside the orange orb. You start to walk, You find a new, green orb, which you use to keep solving puzzles and opening doors and moving forwards through the orange orb-world. Throughout the course of the game you find a total of four orbs, and the final puzzles require you to lug them all around and dive in and out of them in just the right order to get across the next bridge. An example: in one puzzle you need to bring your red orb to the top of a vine so that you can use it to reveal a magic walkway to get to the next area. However, you can only climb up vines while holding your green orb, and you can only hold one orb at a time. This means that you can’t carry the red orb up the vine. The solution is therefore to pick up the red orb, dive inside the green orb, drop the red orb, jump out, use the green orb to climb the vine, dive back inside the green orb, retrieve the red orb, and jump back out. In order for my solver to analyse Cocoon, it would need to be able to programatically manipulate a copy of it. My solver would need to know how the world was laid out, what actions were allowed, and whether it had finished solving its puzzle yet. The easiest way to do this wasn’t to have the solver interact with the real game, but to instead write a new, stripped-back copy of it that contained all its logic but none of the graphics. This was made easier by the fact that each of the puzzles that I got stuck on could be represented as a finite state machine. A finite state machine is a system that can be in exactly one of a finite number of states at any given time. The system is able to transition between some pairs of states using a set of known rules. Most games with a large 3-D world can’t be modelled as a FSM because they have too many possible states and too many possible transitions. The player can be in a near-infinite number of slightly different locations; so can their enemies. The player might have a huge number of items they could be carrying and past actions they could have taken, each of which could affect the world in some important way. Some parts of the game may depend on timing and agility, which are hard to represent in a FSM. In most game levels there’s too much going on for a simple model like an FSM. However, Cocoon’s is a simple world. There are no enemies. The only items you can carry are 4 orbs. And whilst its 3-D landscape is lovely to look at, it masks a simple topology that can be modelled as a small graph - a collection of nodes (important locations like orbs and switches) and edges (pathways that connect nodes that are immediately accessible from each other). Beyond these characteristics, the exact layout of the world rarely matters. This means that a “state” in Cocoon is easy to define and manage. A state is defined by the combination of: The node you’re nearest Which orb you’re holding Where the other orbs are (possibly a few other things, depending on the exact puzzle) Transitions between states are similarly constrained. Players can transition between game states via only a small set of actions, such as: Walking to an adjacent node Picking up or putting down an orb Jumping in or out of an orb This means that it’s relatively simple to write a program that: Defines the layout of a puzzle world Defines the state that the game is currently in Is able to transition between states Knows how to identify a goal state Once I’d written this program, I had a representation of the game that I could programmatically manipulate. I could tell my game to do things like “take such-and-such an action” or “tell me all the possible next actions that can be taken from the current state.” This meant that I could use my simplified game to analyse and solve the real one. 2. Work out how to get from the start to the goal state To solve a puzzle I needed to find a sequence of actions that would take me from the puzzle’s start state to its goal state (for example, opening a door). This was a job for an algorithm called Breadth-First Search (BFS). BFS starts at an initial state in an FSM and simultaneously takes a step to every new state that can be reached from it. For example, suppose that a puzzle starts with bee guy holding the green orb, next to a door and to a corridor to another section. My solver takes steps both through the door and down the corridor, and begins keeping track of each path. From each of these new states, it takes another step to each further state that can be reached from them. It keeps stepping and tracking the expanding number of paths that it’s exploring, until one of its paths reaches a goal state (for example, a state in which a particular orb is on a particular stand, which opens a bridge to the next area). At this point the solver stops, and returns the path that led to the goal state. Because the solver takes a single step down every possible path at once, the first path to the goal state that it finds is guaranteed to be the shortest one possible. I can then input the sequence of actions that my solver returned into the real game (for example: pick up red orb, walk to orb holder, put down red orb, etc), and move on to the next level, without having to do any thinking whatsoever. Here’s my code. How hard are these puzzles really? My solver stops as soon as it has reached the goal state. However, I was also interested in fully mapping out every possible sequence of actions one could take inside a puzzle. I wanted to see how big and hard the puzzles actually are. To do this I wrote a script that explores every possible state and transition. It keeps stepping through states transitions, even after one of its paths has reached a goal state. It only stops when none of the paths it’s exploring have any available actions that lead to a new state that it hasn’t seen before. This script generates a new graph, in which each node is a state and each edge is a transition. The graph shows every single sequence of actions that you can take inside the puzzle. For example, here’s the puzzle that I found hardest, represented as a graph of states and transitions: Drawing a fully-expanded FSM graph like this shows how small and simple Cocoon’s puzzles really are once you write them down. That path on the right, between the green and red nodes, requires you to put one orb inside another orb, then inside another orb, and then shuffle them around just-so. This is a counter-intuitive strategy and hard to find if you’re playing the game like a normal person. However, writing everything down makes it obvious. Writing everything down makes all actions visible and strips away all of the misleading heuristics that make humans focus on some strategies and completely miss others. It reduces a puzzle to “find a path from the green dot to one of the red dots,” as you saw above, which can be solved by a moderately gifted two year-old. To be very facetious, Cocoon is a fluffy layer of graphics and game mechanics on top of an unbelievably simple maze. This isn’t meant as a knock on the game. Cocoon is a tidy mind-bender that wasn’t designed to withstand exhaustive search. If you write a program to solve your Cocoon puzzles for you then you’re only cheating yourself. Or at least, you would be if writing such a program wasn’t so much fun. Life lessons Real life isn’t a finite state machine though. All my solver really proves is that small, low-dimensional problems can easily be solved using exhaustive search. By contrast, the world has an infinite number of states. It’s hard to be sure which properties are important, and the allowed transitions between states are terribly defined. No problem of any importance can be reduced to a tiny graph, which means that even the most determined two year-old won’t be able to help with any of the big challenges in your life. However, you don’t need to fully explore all possible solutions in order to benefit from systematic search. As I’d feared, the process of writing my solver forced me to consider the game with so much rigour that I’d solved all 3 challenges that I used it for before I’d finished programming them in. When I came to encode every location and transition on the map in my program I was forced to pay attention to each of them individually for at least a few seconds, even the ones that the game had tricked me into ignoring. This helped me see that some of the nodes and actions that I’d thought were irrelevant were actually the key to the whole thing. That evening I talked to my family on the phone. I showed them all the diagrams I’d created and all the fun I’d had. They showed me pictures of them inside St. Peter’s Basilica. My son asked if I’d beaten my game. I explained that I’d transcended it by creating a mathematical representation of its entire possibility space. He asked if that meant “no.” Here’s the code to my solver, but you should really just play the game properly.",
    "author": "",
    "published": "Tue, 11 Mar 2025 00:00:00 +0000",
    "image": "/images/cocoon-screenshot.jpg",
    "source": "https://robertheaton.com/feed.xml",
    "categories": null
  },
  {
    "id": "8e1fd7f3-3d87-4a1f-bdc8-299657f93d1f",
    "title": "Come and work with me on Anthropic's Frontier Red Team",
    "link": "https://robertheaton.com/anthropic/",
    "description": "I work at Anthropic on the Frontier Red Team. Our mission is to find out whether AI models possess critical, advanced capabilities, and to help the world to prepare. We’re hiring AI researchers and engineers in the US and UK, and if that describes you then we’d love to talk. We explore questions like: can models design bioweapons, or accelerate vaccine research? Can they orchestrate massive cyberattacks, or defend our critical infrastructure? Can they self-improve, or build a business, or fly drones? Even if they can’t do these things right now, when might they be able to? We’re a technical research team embedded inside both Anthropic’s policy and research organizations. We work with frontier models; top experts in every domain that we cover; and key national security and policy actors. This Wall Street Journal article explains a bit more. Below are the people we need to help us go faster. If any of them sound like you then please get in touch: People to build and run evaluations We need people to design and run the evaluations for Anthropic’s Responsible Scaling Policy (RSP). These people: Work with internal domain leads and external domain experts to design and build cutting edge evaluations across cybersecurity, biosecurity, AI R and D, and more Build sandbox environments to safely run these evaluations Build automated analysis frameworks to make sense of all the results Build agentic frameworks to squeeze the best possible performance from models I think this is a great job for anyone, and the best job in the world for generalist engineers who are also interested in AI. You get to spend half your time building bulletproof systems for novel technical problems, and the other half thinking earnestly about how many tokens it might take for an AI model to build a GPU cluster to copy itself onto. If you work in computer infrastructure anywhere else then I’m convinced that you would have more fun working here instead. Read more and apply: RSP Evaluations - Research Engineer, San Francisco / Seattle ; Research Engineer, London People to conduct deep research into critical domains We believe that the most important capabilities that models are likely to develop are in autonomy, biosecurity, and cybersecurity. We have small sub-teams that lead research into each of these domains. People on these teams: Carry out threat modeling. What would it even mean for a model to be dangerous in this domain? How could it cause catastrophic harm? What capabilities would it need? Design evaluations that test for these capabilities Run large-scale experiments on these evaluations; understand what capabilities current models have and don’t have; predict when these capabilities might emerge Build safe demonstrations of dangerous capabilities to show to experts and stakeholders The people on these teams get to work on projects from reinforcement learning to understanding the biggest threats and opportunities facing society. Never a dull moment. Read more and apply: Autonomy - Research Scientist, US Remote-Friendly; Research Scientist, London Biosecurity - Research Engineer, San Francisco; Research Scientist, San Francisco Cyber - Research Scientist, San Francisco / Seattle Logistics This is the best and weirdest job I’ve ever had. The team is full of brilliant people who care a lot about their jobs and each other. Most of the team is on the West Coast of the US, with some on the East Coast and a couple in London. I work from London and my schedule is great, even with two kids. I go into the London office once or twice a week and to SF a couple of times a year. Apply now If you’d like to work with us then apply using the links above and below. There’s no specific deadline and we’ll keep looking until we find the right people, but we have a lot of work to do and need people to help us do it as soon as possible. Those links again: RSP Evaluations - Research Engineer, San Francisco / Seattle ; Research Engineer, London Autonomy - Research Scientist, US Remote-Friendly; Research Scientist, London Biosecurity - Research Engineer, San Francisco; Research Scientist, San Francisco Cyber - Research Scientist, San Francisco / Seattle",
    "author": "",
    "published": "Mon, 03 Feb 2025 00:00:00 +0000",
    "image": "",
    "source": "https://robertheaton.com/feed.xml",
    "categories": null
  },
  {
    "id": "f0bae76f-0e72-42d6-b099-f3615ce31e88",
    "title": "Webcam randomly pausing in OBS, Discord, and websites - LSVCam and TikTok Studio",
    "link": "http://feeds.hanselman.com/~/905963465/0/scotthanselman~Webcam-randomly-pausing-in-OBS-Discord-and-websites-LSVCam-and-TikTok-Studio",
    "description": "I use my webcam constantly for streaming and I'm pretty familiar with all the internals and how the camera model on Windows works. I also use OBS extensively, so I regularly use the OBS virtual camera and flow everything through Open Broadcasting Studio. For my podcast, I use Zencastr which is a web-based app that talks to the webcam via the browser APIs. For YouTubes, I'll use Riverside or StreamYard, also webapps. I've done this reliably for the last several years without any trouble. Yesterday, I started seeing the most weird thing and it was absolutely perplexing and almost destroyed the day. I started seeing regular pauses in my webcam stream but only in two instances. The webcam would pause for 10-15 seconds every 90 or so seconds when access the Webcam in a browser I would see a long pause/hang in OBS when double clicking on my Video Source (Webcam) to view its properties Micah initially said USB but my usb bus and hubs have worked reliably for years. Thought something might have changed in my El Gato capture device, but that has also been rock solid for 1/2 a decade. Then I started exploring virtual cameras and looked in the windows camera dialog under settings for a list of all virtual cameras. Interestingly, virtual cameras don't get listed under Cameras in Settings in Windows: From what I can tell, there's no user interface to list out all of your cameras - virtual or otherwise - in windows. Here's a quick PowerShell script you can run to list out anything 'connected' that also includes the string \"cam\" in your local devicesGet-CimInstance -Namespace root\\cimv2 -ClassName Win32_PnPEntity | Where-Object { $_.Name -match 'Cam' } | Select-Object Name, Manufacturer, PNPDeviceID and my outputName Manufacturer PNPDeviceID---- ------------ -----------Cam Link 4K Microsoft USB\\VID_0FD9\u0026PID_0066\u0026MI_00\\7\u00263768531A\u00260\u00260000Digital Audio Interface (2- Cam Link 4K) Microsoft SWD\\MMDEVAPI\\{0.0.1.00000000}.{AF1690B6-CA2A-4AD3-AAFD-8DDEBB83DD4A}Logitech StreamCam WinUSB Logitech USB\\VID_046D\u0026PID_0893\u0026MI_04\\7\u0026E36D0CF\u00260\u00260004Logitech StreamCam (Generic USB Audio) USB\\VID_046D\u0026PID_0893\u0026MI_02\\7\u0026E36D0CF\u00260\u00260002Logitech StreamCam Logitech USB\\VID_046D\u0026PID_0893\u0026MI_00\\7\u0026E36D0CF\u00260\u00260000Remote Desktop Camera Bus Microsoft UMB\\UMB\\1\u0026841921D\u00260\u0026RDCAMERA_BUSCam Link 4K (Generic USB Audio) USB\\VID_0FD9\u0026PID_0066\u0026MI_03\\7\u00263768531A\u00260\u00260003Windows Virtual Camera Device Microsoft SWD\\VCAMDEVAPI\\B486E21F1D4BC97087EA831093E840AD2177E046699EFBF62B27304F5CCAEF57 However, when I list out my cameras using JavaScript enumerateDevices() like this// Put variables in global scope to make them available to the browser console.async function listWebcams() { try { const devices = await navigator.mediaDevices.enumerateDevices(); const webcams = devices.filter(device =\u003e device.kind === 'videoinput'); if (webcams.length \u003e 0) { console.log(\"Connected webcams:\"); webcams.forEach((webcam, index) =\u003e { console.log(`${index + 1}. ${webcam.label || `Camera ${index + 1}`}`); }); } else { console.log(\"No webcams found.\"); } } catch (error) { console.error(\"Error accessing media devices:\", error); }}listWebcams(); I would get:Connected webcams: test.html:11 1. Logitech StreamCam (046d:0893) test.html:11 2. OBS Virtual Camera (Windows Virtual Camera) test.html:11 3. Cam Link 4K (0fd9:0066) test.html:11 4. LSVCam test.html:11 5. OBS Virtual Camera So, what, what's LSVCam? And depending on how I'd call it I'd get the pause and getUserMedia error: NotReadableError NotReadableError: Could not start video source Some apps could see this LSVCam and others couldn't. OBS really dislikes it, browsers really dislike it and it seemed to HANG on enumeration of cameras. Why can parts of Windows see this camera and others can't? I don't know. Do you? Regardless, it turns that it appears once in my registry, here (this is a dump of the key, you just care about the Registry PATH)Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\CLSID\\{860BB310-5D01-11d0-BD3B-00A0C911CE86}\\Instance\\LSVCam]\"FriendlyName\"=\"LSVCam\"\"CLSID\"=\"{BA80C4AD-8AED-4A61-B434-481D46216E45}\"\"FilterData\"=hex:02,00,00,00,00,00,20,00,01,00,00,00,00,00,00,00,30,70,69,33,\\ 08,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,00,00,30,74,79,33,00,\\ 00,00,00,38,00,00,00,48,00,00,00,76,69,64,73,00,00,10,00,80,00,00,aa,00,38,\\ 9b,71,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 If you want to get rid of it, delete HKEY_CLASSES_ROOT\\CLSID\\{860BB310-5D01-11d0-BD3B-00A0C911CE86}\\Instance\\LSVCam WARNING: DO NOT delete the \\Instance, just the LSVCam and below. I am a random person on the internet and you got here by googling, so if you mess up your machine by going into RegEdit.exe, I'm sorry to this man, but it's above me now. Where did LSVCam.dll come from, you may ask? TikTok Live Studio, baby. Live Studio Video/Virtual Cam, I am guessing.Directory of C:\\Program Files\\TikTok LIVE Studio\\0.67.2\\resources\\app\\electron\\sdk\\lib\\MediaSDK_V109/18/2024 09:20 PM 218,984 LSVCam.dll 1 File(s) 218,984 bytes This is a regression that started recently for me, so it's my opinion that they are installing a virtual camera for their game streaming feature but they are doing it poorly. It's either not completely installed, or hangs on enumeration, but the result is you'll see hangs on camera enumeration in your apps, especually browser apps that poll for cameras changes or check on a timer. Nothing bad will happen if you delete the registry key BUT it'll show back up when you run TikTok Studio again. I still stream to TikTok, I just delete this key each time until someone on the TikTok Studio development team sees this blog post. Hope this helps!© 2025 Scott Hanselman. All rights reserved.",
    "author": "Scott Hanselman",
    "published": "Wed, 09 Oct 2024 19:32:28 GMT",
    "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/730f6664b802_E062/image_thumb.png",
    "source": "http://feeds.hanselman.com/ScottHanselman",
    "categories": [
      "Bugs"
    ]
  },
  {
    "id": "1b6d5ce7-136d-4782-9fdf-2c78bc9987b3",
    "title": "Open Sourcing DOS 4",
    "link": "http://feeds.hanselman.com/~/882544025/0/scotthanselman~Open-Sourcing-DOS",
    "description": "See the canonical version of this blog post at the Microsoft Open Source Blog! Ten years ago, Microsoft released the source for MS-DOS 1.25 and 2.0 to the Computer History Museum, and then later republished them for reference purposes. This code holds an important place in history and is a fascinating read of an operating system that was written entirely in 8086 assembly code nearly 45 years ago. Today, in partnership with IBM and in the spirit of open innovation, we're releasing the source code to MS-DOS 4.00 under the MIT license. There's a somewhat complex and fascinating history behind the 4.0 versions of DOS, as Microsoft partnered with IBM for portions of the code but also created a branch of DOS called Multitasking DOS that did not see a wide release. https://github.com/microsoft/MS-DOS A young English researcher named Connor \"Starfrost\" Hyde recently corresponded with former Microsoft Chief Technical Officer Ray Ozzie about some of the software in his collection. Amongst the floppies, Ray found unreleased beta binaries of DOS 4.0 that he was sent while he was at Lotus. Starfrost reached out to the Microsoft Open Source Programs Office (OSPO) to explore releasing DOS 4 source, as he is working on documenting the relationship between DOS 4, MT-DOS, and what would eventually become OS/2. Some later versions of these Multitasking DOS binaries can be found around the internet, but these new Ozzie beta binaries appear to be much earlier, unreleased, and also include the ibmbio.com source.  Scott Hanselman, with the help of internet archivist and enthusiast Jeff Sponaugle, has imaged these original disks and carefully scanned the original printed documents from this \"Ozzie Drop\". Microsoft, along with our friends at IBM, think this is a fascinating piece of operating system history worth sharing.  Jeff Wilcox and OSPO went to the Microsoft Archives, and while they were unable to find the full source code for MT-DOS, they did find MS DOS 4.00, which we're releasing today, alongside these additional beta binaries, PDFs of the documentation, and disk images. We will continue to explore the archives and may update this release if more is discovered.  Thank you to Ray Ozzie, Starfrost, Jeff Sponaugle, Larry Osterman, our friends at the IBM OSPO, as well as the makers of such digital archeology software including, but not limited to Greaseweazle, Fluxengine, Aaru Data Preservation Suite, and the HxC Floppy Emulator. Above all, thank you to the original authors of this code, some of whom still work at Microsoft and IBM today! If you'd like to run this software yourself and explore, we have successfully run it directly on an original IBM PC XT, a newer Pentium, and within the open source PCem and 86box emulators.  © 2025 Scott Hanselman. All rights reserved.",
    "author": "Scott Hanselman",
    "published": "Thu, 25 Apr 2024 16:46:13 GMT",
    "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Open-Sourcing-DOS-4_E712/clip_image002_5b6e1c02-95d8-4ee1-87af-ca53a8b0bd56.png",
    "source": "http://feeds.hanselman.com/ScottHanselman",
    "categories": [
      "Open Source"
    ]
  },
  {
    "id": "b4320a24-d9a2-459a-9a0b-0ad005307b0e",
    "title": "Testimony before the North Dakota Senate Industry, Business and Labor Committee",
    "link": "https://signalvnoise.com/svn3/testimony-before-the-north-dakota-senate-industry-business-and-labor-committee/",
    "description": "Chairman Klein and members of the Senate Industry, Business and Labor Committee- My name is David Heinemeier Hansson, and I’m the CTO and co-founder of Basecamp, a small internet company from Chicago that sells project-management software and email services. I first testified on the topic of big tech monopolies at the House Antitrust Subcommittee’s field… keep reading",
    "author": "DHH",
    "published": "Tue, 09 Feb 2021 18:04:30 +0000",
    "image": "",
    "source": "https://signalvnoise.com/posts.rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "91f704b3-4a7b-4b36-bf49-be86dca82e76",
    "title": "Reiterating our Use Restrictions Policy",
    "link": "https://signalvnoise.com/svn3/reiterating-our-use-restrictions-policy/",
    "description": "The attack on the US Capitol, and subsequent threats of violence surrounding the inauguration of the new US administration, has moved us to reflect and reacquaint ourselves with the reality that however good the maker’s intentions, technology can amplify the ability to cause great harm. This includes us and our products at Basecamp. Therefore, we… keep reading",
    "author": "Jason Fried",
    "published": "Mon, 18 Jan 2021 17:11:00 +0000",
    "image": "",
    "source": "https://signalvnoise.com/posts.rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "03858f46-9325-430e-800d-8888862ad71a",
    "title": "",
    "link": "http://scripting.com/2025/05/08.html#a135411",
    "description": "New feature: How to handle an empty site list.",
    "author": "",
    "published": "Thu, 08 May 2025 13:54:11 GMT",
    "image": "",
    "source": "http://scripting.com/rss.xml",
    "categories": null
  },
  {
    "id": "b2cc008a-f1c9-4ef6-ae0f-7ebf50a9e11a",
    "title": "",
    "link": "http://scripting.com/2025/05/08.html#a201858",
    "description": "Changes coming to Bookmarks in next WordLand release. I cut it back to work exactly like bookmarks in Drummer. I have to do a bit more work before it's ready to release, probably tomorrow.",
    "author": "",
    "published": "Thu, 08 May 2025 20:18:58 GMT",
    "image": "",
    "source": "http://scripting.com/rss.xml",
    "categories": null
  },
  {
    "id": "14543c56-242c-497a-a165-7d770a53f576",
    "title": "8 Best Keyboards for Programming in India 2025",
    "link": "https://www.thecrazyprogrammer.com/2025/03/best-keyboards-for-programming-in-india.html",
    "description": "For a lot of programmers, finding a decent keyboard will significantly boost their workflow environment. Here, in this article, you’ll find a list of best keyboards for programming and a strait-laced comparison between them. The programmers typically spend their days’ planning, writing, and checking code in their machine. The keyboard is, therefore, one of the … 8 Best Keyboards for Programming in India 2025 Read More » The post 8 Best Keyboards for Programming in India 2025 appeared first on The Crazy Programmer.",
    "author": "Chirag Manghnani",
    "published": "Sat, 01 Mar 2025 18:16:00 +0000",
    "image": "http://thecrazyprogrammer.com/wp-content/uploads/2020/09/Redgear-Blaze.jpg",
    "source": "https://www.thecrazyprogrammer.com/category/programming/feed",
    "categories": [
      "Programming"
    ]
  },
  {
    "id": "c721cce6-cd27-4faa-9129-6f28428e8149",
    "title": "Top 5 Best Coding Apps in 2025",
    "link": "https://www.thecrazyprogrammer.com/2025/02/best-coding-apps.html",
    "description": "We humans may be a little cunning and mischievous (nervous laugh!) but we surely are focused on various things. And when we are focused on something, we give it full priority to we matter it completely. Right? One of such things on which we are fully focused is learning. Our brain is a powerhouse which … Top 5 Best Coding Apps in 2025 Read More » The post Top 5 Best Coding Apps in 2025 appeared first on The Crazy Programmer.",
    "author": "Neeraj Mishra",
    "published": "Thu, 13 Feb 2025 10:47:00 +0000",
    "image": "http://thecrazyprogrammer.com/wp-content/uploads/2020/06/SoloLearn.png",
    "source": "https://www.thecrazyprogrammer.com/category/programming/feed",
    "categories": [
      "Programming"
    ]
  },
  {
    "id": "6c970b06-14f7-4786-a9fe-6987e2a5324f",
    "title": "SE Radio 667: Ashley Peacock on Cloudflare",
    "link": "http://se-radio.net/se-radio-667-ashley-peacock-on-cloudflare",
    "description": "Ashley Peacock, the author of Serverless Apps on Cloudflare, speaks with host Jeremy Jung about content delivery networks (CDNs). Along the way, they examine dependency injection with bindings, local development, serverless, cold starts, the V8 runtime, AWS Lambda vs Cloudflare workers, WebAssembly limitations, and core services such as R2, D1, KV, and Pages. Ashley suggests why most users use an external database and discusses eventually consistent data stores, S3-to-R2 migration strategies, queues and workflows, inter-service communication, durable objects, and describes some example projects. Brought to you by IEEE Computer Society and IEEE Software magazine.",
    "author": "SE-Radio Team",
    "published": "Wed, 07 May 2025 00:09:00 +0000",
    "image": "https://traffic.libsyn.com/secure/seradio/667-ashley-peacock-cloudflare.mp3?dest-id=23379",
    "source": "http://feeds.feedburner.com/se-radio",
    "categories": [
      "CDN",
      "Cloudflare",
      "Serverless",
      "content delivery network"
    ]
  },
  {
    "id": "2dc37f7f-e11f-4e8b-a57d-3fd58e7443a1",
    "title": "SE Radio 666: Eran Yahav on the Tabnine AI Coding Assistant",
    "link": "http://se-radio.net/se-radio-666-eran-yahav-on-the-tabnine-ai-coding-assistant",
    "description": "Eran Yahav, Professor of Computer Science at Technion, Israel, and CTO of Tabnine, speaks with host Gregory M. Kapfhammer about the Tabnine AI coding assistant. They discuss how the design and implementation allows software engineers to use code completion and perform tasks such as automated code review while still maintaining developer privacy. Eran and Gregory also explore how research in the field of natural language processing (NLP) and large language models (LLMs) has informed the features in Tabnine. Brought to you by IEEE Computer Society and IEEE Software magazine.",
    "author": "SE-Radio Team",
    "published": "Tue, 29 Apr 2025 21:58:00 +0000",
    "image": "https://traffic.libsyn.com/secure/seradio/666-eran-yahav-tabnine-coding-assistant.mp3?dest-id=23379",
    "source": "http://feeds.feedburner.com/se-radio",
    "categories": [
      "artificial intelligence",
      "coding assistant"
    ]
  },
  {
    "id": "a39984f1-d541-4c1e-9689-1eb1d8dc5ad6",
    "title": "Moving beyond velocity: Measuring real business impact",
    "link": "https://stackoverflow.blog/podcast/",
    "description": "In this episode of Leaders of Code, Dan Lines, cofounder and COO of LinearB; Ben Matthews, Senior Director of Engineering at Stack Overflow; and host Ben Popper talk about why velocity should be a diagnostic tool, not the primary goal of engineering teams. They also touch on the need for cross-disciplinary collaboration to align engineering with business objectives. They also discuss:AI's potential to automate repetitive tasks, allowing engineers to focus on more complex work.The challenges of scaling organizations and the importance of centralized developer experience teams to improve productivity.How non-technical staff can contribute to engineering tasks through the democratization of technology, enabling more innovation.Episode notes:Connect with Dan Lines on LinkedIn.If you're looking to improve productivity for your engineering organization, check out LinearB.",
    "author": "Ben Popper, Dan Lines, Ben Mathews",
    "published": "Thu, 8 May 2025 04:20:00 +0000",
    "image": "https://pdrl.fm/c28362/injector.simplecastaudio.com/6fa1d34c-502b-4abf-bd82-483804006e0b/episodes/5a726646-a372-4f0d-8ad2-9d4e093f4034/audio/128/default.mp3?aid=rss_feed\u0026awCollectionId=6fa1d34c-502b-4abf-bd82-483804006e0b\u0026awEpisodeId=5a726646-a372-4f0d-8ad2-9d4e093f4034\u0026feed=XA_851k3",
    "source": "https://feeds.simplecast.com/XA_851k3",
    "categories": [
      "metrics",
      " linearb",
      " engineering leadership",
      " velocity",
      " development velocity",
      " engineering"
    ]
  },
  {
    "id": "64ddb639-b922-48c0-9871-c9d34e19ea8f",
    "title": "Mastering microservices with a former Uber and Netflix architect",
    "link": "https://stackoverflow.blog/podcast/",
    "description": "Orkes is a developer-first enterprise workflow orchestration platform. Explore the developer edition or dive into the docs.Before cofounding Orkes, Jeu was an architect at Uber and Netflix. Find him on LinkedIn.Shoutout to Stack Overflow user Alex Stiff, whose answer to Bash - Sort a list of strings earned them a Lifeboat badge.",
    "author": "Ryan Donovan, Jeu George",
    "published": "Tue, 6 May 2025 04:20:00 +0000",
    "image": "https://pdrl.fm/c28362/injector.simplecastaudio.com/6fa1d34c-502b-4abf-bd82-483804006e0b/episodes/62c42d37-f32b-4eed-b614-aa0beb2a0386/audio/128/default.mp3?aid=rss_feed\u0026awCollectionId=6fa1d34c-502b-4abf-bd82-483804006e0b\u0026awEpisodeId=62c42d37-f32b-4eed-b614-aa0beb2a0386\u0026feed=XA_851k3",
    "source": "https://feeds.simplecast.com/XA_851k3",
    "categories": [
      "architecture",
      " netflix",
      " uber",
      " microservices",
      " agentic ai",
      " conductor",
      " open source",
      " microservices orchestration",
      " orchestration",
      " software engineering",
      " platform engineering",
      " cloud computing",
      " workflow orchestration",
      " ai agents",
      " reliability",
      " software development"
    ]
  },
  {
    "id": "14b47963-fcdc-4da8-884c-82d9653008e8",
    "title": "Best practices for third-party data acquisition: powering AI context",
    "link": "https://stackoverflow.blog/2025/05/08/best-practices-third-party-data-acquisition-powering-ai-context/",
    "description": "This post explores crucial lessons learned in the trenches of data licensing, drawing insights from Stack Overflow and the growing importance of socially responsible data practices in a changing internet landscape.",
    "author": "Ellen Brandenberger, David Gibson",
    "published": "Thu, 08 May 2025 14:00:00 GMT",
    "image": "",
    "source": "https://stackoverflow.blog/feed/",
    "categories": [
      "business",
      "data"
    ]
  },
  {
    "id": "a092280b-4631-42ef-90d5-b1d3b267dae2",
    "title": "A new look for what’s next",
    "link": "https://stackoverflow.blog/2025/05/08/a-new-look-for-whats-next/",
    "description": "The world has changed a lot since Stack Overflow started. It's time for our brand to change with it.",
    "author": "Prashanth Chandrasekar, David Longworth",
    "published": "Thu, 08 May 2025 13:59:00 GMT",
    "image": "",
    "source": "https://stackoverflow.blog/feed/",
    "categories": [
      "company",
      "brand",
      "se-all",
      "se-stackoverflow"
    ]
  },
  {
    "id": "2fa08717-6f85-4f0c-a5bc-5ebe5b7505c3",
    "title": "OTP Authentication in Laravel \u0026 Vue.js for Secure Transactions",
    "link": "https://stackabuse.com/otp-authentication-in-laravel-vue-js-for-secure-transactions/",
    "description": "Introduction In today’s digital world, security is paramount, especially when dealing with sensitive data like user authentication and financial transactions. One of the most effective ways to enhance security is by implementing One-Time Password (OTP) authentication. This article explores how to implement OTP authentication in a Laravel backend with",
    "author": "Ojekudo Oghenemaro Emmanuel",
    "published": "Sun, 20 Apr 2025 08:04:07 GMT",
    "image": "",
    "source": "https://stackabuse.com/rss/",
    "categories": [
      "javascript",
      "security",
      "vue"
    ]
  },
  {
    "id": "fb3d2f14-f646-43b6-9038-aa3f5c2ec564",
    "title": "How to Perform MS SQL Server Restore with RECOVERY and NORECOVERY Options",
    "link": "https://stackabuse.com/how-to-perform-ms-sql-server-restore-with-recovery-and-norecovery-options/",
    "description": "Introduction Backing up the database in MS SQL Server is vital to safeguard and recover the data in case of scenarios, like hardware failure, server failure, database corruption, etc. MS SQL Server provides different types of backups, such as differential, transactional, and full backup. A full backup allows you to",
    "author": "Guest Contributor",
    "published": "Wed, 19 Mar 2025 06:52:59 GMT",
    "image": "https://s3.stackabuse.com/media/articles/how-to-perform-ms-sql-server-restore-with-recovery-and-norecovery-options-1.png",
    "source": "https://stackabuse.com/rss/",
    "categories": [
      "sql",
      "database"
    ]
  },
  {
    "id": "b87e5e75-d2f6-4c96-8ff7-890a5fd4fb1e",
    "title": "How Airbnb Measures Listing Lifetime Value",
    "link": "https://medium.com/airbnb-engineering/how-airbnb-measures-listing-lifetime-value-a603bf05142c?source=rss----53c7c27702d5---4",
    "description": "",
    "author": "Carlos Sanchez Martinez",
    "published": "Wed, 26 Mar 2025 15:46:46 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/0*JSoY6CDkTMQEFXgP",
    "source": "https://medium.com/feed/airbnb-engineering",
    "categories": [
      "engineering",
      "data-science",
      "ai",
      "lifetime-value",
      "machine-learning"
    ]
  },
  {
    "id": "9e5536f6-caf2-4704-936f-b6a77011071f",
    "title": "Embedding-Based Retrieval for Airbnb Search",
    "link": "https://medium.com/airbnb-engineering/embedding-based-retrieval-for-airbnb-search-aabebfc85839?source=rss----53c7c27702d5---4",
    "description": "",
    "author": "Huiji Gao",
    "published": "Wed, 19 Mar 2025 17:02:45 GMT",
    "image": "https://cdn-images-1.medium.com/max/1024/0*dhEL1kHnOpCWnqJa",
    "source": "https://medium.com/feed/airbnb-engineering",
    "categories": [
      "engineering",
      "machine-learning",
      "embedding",
      "ai",
      "retrieval-system"
    ]
  },
  {
    "id": "b2066637-a960-4e53-a5f2-bdd98322ea38",
    "title": "📣 Action required: Upcoming Update to SoundCloud API id fields",
    "link": "https://developers.soundcloud.com/blog/urn-num-to-string",
    "description": "To all developers using SoundCloud’s public API — we’re introducing an important change that will affect how you reference resources like…",
    "author": "",
    "published": "Tue, 29 Apr 2025 00:00:00 GMT",
    "image": "",
    "source": "https://developers.soundcloud.com/blog/blog.rss",
    "categories": null
  },
  {
    "id": "a8374e70-1000-4508-8ed6-7d20e225cd9f",
    "title": "New artist name field on our API",
    "link": "https://developers.soundcloud.com/blog/api-artist-metadata",
    "description": "A while ago we made an improvement to how track and artist information is displayed on SoundCloud, making it clearer and easier to…",
    "author": "",
    "published": "Thu, 03 Apr 2025 00:00:00 GMT",
    "image": "/blog/static/67fb1b1c7ecb70113354cc23c4ddeed6/8ff1e/creepin.png",
    "source": "https://developers.soundcloud.com/blog/blog.rss",
    "categories": null
  },
  {
    "id": "8272cdcf-c6ed-42c2-bc56-8694c680c500",
    "title": "Dos and don’ts when sunsetting open source projects",
    "link": "https://github.blog/open-source/maintainers/dos-and-donts-when-sunsetting-open-source-projects/",
    "description": "Three maintainers share their tips for gracefully sunsetting open source projects. The post Dos and don’ts when sunsetting open source projects appeared first on The GitHub Blog.",
    "author": "Klint Finley",
    "published": "Tue, 06 May 2025 16:00:00 +0000",
    "image": "",
    "source": "https://github.blog/feed/",
    "categories": [
      "Maintainers",
      "Open Source",
      "community",
      "open source"
    ]
  },
  {
    "id": "ac427a50-fea7-40da-af10-61df727f6419",
    "title": "Welcome to Maintainer Month: Events, exclusive discounts, and a new security challenge",
    "link": "https://github.blog/open-source/maintainers/welcome-to-maintainer-month-events-exclusive-discounts-and-a-new-security-challenge/",
    "description": "This May marks the fifth annual Maintainer Month, and there are lots of treats in store: new badges, special discounts, events with experts, and more. The post Welcome to Maintainer Month: Events, exclusive discounts, and a new security challenge appeared first on The GitHub Blog.",
    "author": "Kara Sowles",
    "published": "Mon, 05 May 2025 17:30:54 +0000",
    "image": "",
    "source": "https://github.blog/feed/",
    "categories": [
      "Maintainers",
      "Open Source",
      "Security"
    ]
  },
  {
    "id": "2349e70a-d2a3-4f43-a914-dc402a30b020",
    "title": "More Pro Apps for Non-Pros - WWDC Keynote Recap with Kathy Campbell",
    "link": "https://share.transistor.fm/s/88e9d51b",
    "description": "Follow Kathy Campbell@mrssoupCheck out the Productivity in Tech YouTube Channelhttps://www.youtube.com/c/kjaymillerFollow Jay@kjaymillerMore Episodes and Things at https://podcast.productivityintech.com.Want to Support the Show?While you can't support the show directly you can support all the things Jay is up to by sponsoring him on GitHub!https://github.com/sponsors/kjaymiller/",
    "author": "Jay Miller",
    "published": "Tue, 08 Jun 2021 16:55:08 -0700",
    "image": "https://media.transistor.fm/88e9d51b/25d5dd7b.mp3",
    "source": "https://feeds.transistor.fm/productivity-in-tech-podcast",
    "categories": [
      "Productivity",
      " Technology"
    ]
  },
  {
    "id": "a7e75838-7b33-4fa7-90cd-6758056150c4",
    "title": "The Queen of Apple Automation: Rosemary Orchard",
    "link": "https://share.transistor.fm/s/f6991b0b",
    "description": "Markers---00:00:00 - Rosemary Orchard00:04:54 - iOS Today00:06:50 - Nested Folders00:10:10 - Automator and Automating00:17:40 - Automating as a Developer00:31:38 - Closing00:34:24 - AftershowLinks iOS TodayNested FoldersAutomators.fmThe Podcast AnswermanBunches of Automation - AutomatorszapierIntegromatStreamDeckBunchFollow Rose- @Rosemaryorchard- WebsiteFollow Jayhttps://www.youtube.com/c/kjaymiller@kjaymillerMore Episodes and Things at https://podcast.productivityintech.com.Want to Support the Show?Support all the things Jay is up to by sponsoring him on GitHub!https://github.com/sponsors/kjaymiller/",
    "author": "Jay Miller",
    "published": "Tue, 01 Jun 2021 20:21:14 -0700",
    "image": "https://media.transistor.fm/f6991b0b/03be8858.mp3",
    "source": "https://feeds.transistor.fm/productivity-in-tech-podcast",
    "categories": [
      "Productivity",
      " Technology"
    ]
  },
  {
    "id": "094ba21b-62c9-4863-9bc3-62ff3dba2c36",
    "title": "Episode 159 - JetBrains Space",
    "link": "https://cynical.dev/159",
    "description": "In this episode we talk about JetBrains Space, with Valerie Andrianova.   Contacting Valerie Andrianova Website: https://www.jetbrains.com/ Twitter: https://twitter.com/va_leriya LinkedIn: https://www.linkedin.com/in/valerie-andrianova-1172031a/ Blog: https://blog.jetbrains.com/author/valerie-andrianova/ Episode Editing by - RJJ Software Ltd (https://rjj-software.co.uk/ )",
    "author": "",
    "published": "Mon, 28 Jun 2021 07:00:00 +0000",
    "image": "https://archive.org/download/CynicalDeveloper/episode-159.mp3",
    "source": "https://cynicaldeveloper.com/feed/podcast",
    "categories": null
  },
  {
    "id": "6eb94a19-da93-4cd8-9120-839822dd074e",
    "title": "Episode 158 - Code Reviews",
    "link": "https://cynical.dev/158",
    "description": "In this episode we talk about Code Reviews with Jordan Ambra   Contacting Jordan Ambra   Website: https://www.serenity.software Twitter: https://twitter.com/jordanambra LinkedIn: https://www.linkedin.com/in/jordanambra/   Episode Editing by - RJJ Software Ltd (https://rjj-software.co.uk/)",
    "author": "",
    "published": "Mon, 14 Jun 2021 07:00:00 +0000",
    "image": "https://archive.org/download/CynicalDeveloper/episode-158.mp3",
    "source": "https://cynicaldeveloper.com/feed/podcast",
    "categories": null
  },
  {
    "id": "9481bb7d-d4e4-45a8-bfbe-0f5a48e8870a",
    "title": "Microsoft Build: Responsible AI (Sarah Bird)",
    "link": "https://thewomenintechshow.com/2023/08/01/microsoft-build-responsible-ai-sarah-bird/",
    "description": "Sarah Bird, Engineering Lead at Microsoft talked about what responsible AI is and its main components and best practices. Sarah also explained what generative AI is and example metrics to evaluate systems that use it. At the end we talked about existing tools that can assist in developing AI systems.",
    "author": "edaena",
    "published": "Tue, 01 Aug 2023 15:18:20 +0000",
    "image": "http://media.blubrry.com/thewomenintechshow/wintshow.files.wordpress.com/2023/08/5-sarah-bird.mp3",
    "source": "https://thewomenintechshow.com/category/podcast/feed/",
    "categories": [
      "Microsoft",
      "podcast",
      "Artificial Intelligence",
      "Generative AI",
      "Microsoft Build",
      "Program Manager",
      "Software Development"
    ]
  },
  {
    "id": "e9ea2ed1-440f-4be2-bca3-2ba08e266aab",
    "title": "Microsoft Build: Application Security with Redis Cache (Shruti Pathak)",
    "link": "https://thewomenintechshow.com/2023/07/24/microsoft-build-application-security-with-redis-cache-shruti-pathak/",
    "description": "Shruti Pathak, Senior Product Manager at Microsoft, talked about optimizing web applications by using Redis cache and things to consider to make it secure. Shruti also explained what in-memory databases are and how they improve performance. At the end we also talked about the program manager and her experience transitioning from a software development role.",
    "author": "edaena",
    "published": "Tue, 25 Jul 2023 01:42:17 +0000",
    "image": "http://media.blubrry.com/thewomenintechshow/wintshow.files.wordpress.com/2023/07/4_shruti_pathak.mp3",
    "source": "https://thewomenintechshow.com/category/podcast/feed/",
    "categories": [
      "Microsoft",
      "podcast",
      "Microsoft Build",
      "Program Manager",
      "Software Development"
    ]
  },
  {
    "id": "e4a2e137-a141-41ef-90c8-5cb05069cef6",
    "title": "Deeper Dive into NX with Juri Strumpflohner",
    "link": "https://6figuredev.com/podcast/deeper-dive-into-nx-with-juri-strumpflohner/",
    "description": "Episode 250 Juri has been working as a software developer and architect for 10+ years, with technologies like Java, .Net, Node.js on the desktop, mobile as well as web. Lately he has mostly been focusing on frontend web development with JavaScript, on writing technical articles, and teaching.   Links https://juristr.com/ https://github.com/juristr https://twitter.com/juristr https://www.linkedin.com/in/juristr/ https://www.youtube.com/c/JuriStrumpflohner […] The post Deeper Dive into NX with Juri Strumpflohner appeared first on The 6 Figure Developer.",
    "author": "John Callaway",
    "published": "Mon, 15 Aug 2022 13:11:40 +0000",
    "image": "https://media.blubrry.com/6figuredev/content.blubrry.com/6figuredev/6_Figure_Developer-250-Juri_Strumpflohner.mp3",
    "source": "http://6figuredev.com/feed/rss/",
    "categories": [
      "Podcast",
      ".net",
      "dotnet",
      "Juri Strumpflohner",
      "lerna",
      "nx"
    ]
  },
  {
    "id": "73092350-215e-41b4-ac2a-9f7d661a3bc4",
    "title": "4 Essential AWS Solutions with Chris Judd",
    "link": "https://6figuredev.com/podcast/4-essential-aws-solutions-with-chris-judd/",
    "description": "Episode 249 Chris is CTO and partner at Manifest Solutions, Author, Java User Group leader, Java Champion, Trusted Technical Advisor, and Talent Developer.   Links https://javajudd.net/ https://twitter.com/javajudd https://www.juddsolutions.com/ https://www.linkedin.com/in/christophermjudd/   Resources https://aws.amazon.com/ https://aws.amazon.com/cdk/ https://aws.amazon.com/lambda/ https://aws.amazon.com/step-functions/ https://aws.amazon.com/ecs/ https://aws.amazon.com/eks/ https://www.terraform.io/ https://docs.aws.amazon.com/ https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html   “Tempting Time” by Animals As Leaders used with permissions – All Rights Reserved […] The post 4 Essential AWS Solutions with Chris Judd appeared first on The 6 Figure Developer.",
    "author": "John Callaway",
    "published": "Mon, 01 Aug 2022 13:11:00 +0000",
    "image": "https://media.blubrry.com/6figuredev/content.blubrry.com/6figuredev/6_Figure_Developer-249-Chris_Judd.mp3",
    "source": "http://6figuredev.com/feed/rss/",
    "categories": [
      "Podcast",
      "aws",
      "chris judd",
      "java"
    ]
  },
  {
    "id": "15d2fa4e-8138-4fb8-b314-c2a3cd2f8285",
    "title": "Optimizing Our E2E Pipeline",
    "link": "https://slack.engineering/speedup-e2e-testing/",
    "description": "In the world of DevOps and Developer Experience (DevXP), speed and efficiency can make a big difference on an engineer’s day-to-day tasks. Today, we’ll dive into how Slack’s DevXP team took some existing tools and used them to optimize an end-to-end (E2E) testing pipeline. This lowered build times and reduced redundant processes, saving both time… The post Optimizing Our E2E Pipeline appeared first on Engineering at Slack.",
    "author": "Dan Carton",
    "published": "Mon, 14 Apr 2025 09:00:30 +0000",
    "image": "https://slack.engineering/wp-content/uploads/sites/7/2025/04/image4.png?w=640",
    "source": "https://slack.engineering/feed",
    "categories": [
      "Uncategorized",
      "ci-cd",
      "developer-experience",
      "developer-productivity",
      "devops",
      "frontend",
      "testing"
    ]
  },
  {
    "id": "aa04eb02-c58d-4bb2-8b66-52550abdfc4e",
    "title": "How we built enterprise search to be secure and private",
    "link": "https://slack.engineering/how-we-built-enterprise-search-to-be-secure-and-private/",
    "description": "Many don’t know that “Slack” is in fact a backronym—it stands for “Searchable Log of all Communication and Knowledge”. And these days, it’s not just a searchable log: with Slack AI, Slack is now an intelligent log, leveraging the latest in generative AI to securely surface powerful, time-saving insights. We built Slack AI from the… The post How we built enterprise search to be secure and private appeared first on Engineering at Slack.",
    "author": "Ian Hoffman",
    "published": "Fri, 07 Mar 2025 01:14:37 +0000",
    "image": "https://slack.engineering/wp-content/uploads/sites/7/2025/03/enterprisesearch.png?w=640",
    "source": "https://slack.engineering/feed",
    "categories": [
      "Uncategorized"
    ]
  }
]
