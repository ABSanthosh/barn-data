{
  "id": "8fd2c552-fb7c-4ec0-af0d-e62e7c023063",
  "title": "CI/CD Security Best Practices",
  "link": "https://blog.jetbrains.com/teamcity/2025/04/ci-cd-security-best-practices/",
  "description": "Software development moves fast – really fast. It can also involve multiple teams working from different locations around the world. However, while speed and collaboration can be great for developers and businesses, they can also create security challenges.  With more entry points and less time to catch potential threats, each commit, build, and deployment is […]",
  "author": "Olga Bedrina",
  "published": "Tue, 22 Apr 2025 12:57:38 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "best-practices",
    "how-tos",
    "security",
    "how-to"
  ],
  "byline": "Olga Bedrina",
  "length": 10207,
  "excerpt": "This post covers the key best practices for CI/CD security to help you protect your pipeline, automate defenses, securely manage secrets, and monitor for threats.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Powerful CI/CD for DevOps-centric teams Best Practices How-To's SecurityCI/CD Security Best Practices Software development moves fast – really fast. It can also involve multiple teams working from different locations around the world. However, while speed and collaboration can be great for developers and businesses, they can also create security challenges.  With more entry points and less time to catch potential threats, each commit, build, and deployment is another opportunity for something to go wrong. Whether that’s a security breach, malicious attack, or accidental exposure, the impact can ripple through your chain and burden every application. That’s where CI/CD security comes in. Learn what securing your CI/CD pipeline means for your team, the main risks you need to be aware of, and the practical steps to safeguard your flow. What is CI/CD security, and why is it important? CI/CD security is a set of practices and controls that protects the entire software delivery process. It prioritizes keeping your code safe from the very start, is built in rather than a separate phase, and is integral to DevSecOps. Your CI/CD pipeline has access to tons of sensitive information, including codebases, credentials, and production environments. If compromised, attackers could inject malicious code, steal data, or even gain access to your systems (as they did in the SolarWinds attack). Aside from these catastrophic breaches, proper CI/CD security helps prevent mistakes, which could expose sensitive data or introduce vulnerabilities. Malicious employee or contractor behavior shouldn’t be overlooked here, either – 20% of businesses cited this as a cause of their data breaches. CI/CD security is both a shield and a safety net in one. With development automation, changes can go from a laptop to production in minutes, and CI/CD security needs to ensure it doesn’t slow down the process. Acceleration is great for business agility, but giving attackers a fast track to your systems is hazardous. In fact, less than 10% of companies in 2022 had implemented hack monitoring in their software development lifecycle.  However, get CI/CD security right, and you can have both speed and reliability. CI/CD pipeline security threats Your CI/CD pipeline has several potential weak points, including:  Source-code repositories: Where your application code and configuration files live, the starting point of your pipeline. Build servers: The systems that compile your code, run tests, and package your applications. They handle sensitive operations and often have elevated privileges. Artifact storage: Where your compiled applications, container images, and packages are stored before deployment.  Deployment environments: The staging and production systems where your applications run (including cloud platforms and traditional servers). These components face threats from various angles, such as:  Supply chain attacks: Harmful code can sneak in through compromised third-party tools, libraries, or dependencies used in your application. Stolen passwords and secrets: Attackers may find exposed credentials in pipeline configurations or scripts. These threats can take a long time to identify and contain – 292 days, according to one report.  Configuration mistakes: Small errors in setup can enable attackers to bypass security or gain more access than they should have. Insider threats: Developers with pipeline access might accidentally or intentionally introduce vulnerabilities. Server breaches: Attackers can get access to the computers that run your build and deployment process. The interconnected nature of CI/CD means that compromising just one part can affect everything in the system. Tips for securing your CI/CD pipeline The most effective CI/CD security involves building multiple layers of protection throughout your pipeline. Rather than implementing a single tool or simply following a checklist, you should set up security checkpoints at every stage. Employ CI/CD access controls Protect your pipeline by implementing strict access controls and applying the principle of least privilege.  Use role-based access control (RBAC) to ensure team members only have the access they absolutely need for their specific roles. To prevent unauthorized code changes, set up mandatory code reviews, enable branch protection rules, and use signed commits. Remember to regularly audit these permissions and remove access when team members leave. Manage secrets effectively Never, ever hardcode credentials into your pipeline configurations or code. Instead, use dedicated secrets management tools (such as HashiCorp Vault) to securely store and manage sensitive information. Rotate these credentials regularly (ideally automatically) and ensure secrets are encrypted both in transit and at rest. It’s also best to use temporary credentials where possible. Integrated security testing Make security testing a natural part of your pipeline by putting multiple testing layers in place. Certain tools can help you catch vulnerabilities before they reach production: Static Application Security Testing (SAST) analyzes your source code for security vulnerabilities. Dynamic Application Security Testing (DAST) tests running applications. Interactive Application Security Testing (IAST) is used for runtime analysis. Software Composition Analysis (SCA) checks third-party dependencies. Configure these tests to run automatically with each build and block deployments if any security issues are found. Secure the development and deployment environment Ensure your build environments are as secure as your production systems – they’re just as important, if not more.  Harden your build servers by removing unnecessary services, keeping systems patched, and using minimal base images. Implement network segmentation to isolate build environments from each other and other systems. If you can, consider using temporary infrastructure. This method allows you to create fresh environments for each build and destroy them afterward. Automate security scans Set up automated security scanning throughout your pipeline. Use container scanners to check for vulnerabilities in container images, dependency checkers to identify known vulnerabilities in libraries, and registry scanners to ensure the security of stored artifacts.  Establish vulnerability thresholds (what level is considered suspicious or a threat) and automatically stop deployments that don’t meet your security standards. Schedule regular scans of your artifacts to ensure you’re aware of new or emerging vulnerabilities. Monitor and alert Implement comprehensive monitoring for your CI/CD pipeline. Track all activities and watch for unusual patterns like builds at odd hours, unexpected configuration changes, strange resource usage, and deployment events. Use detailed logging and set up alerts, making sure your team knows how to respond if something suspicious is found. Security information and event management (SIEM) are great CI/CD security tools – they correlate security events and enable real-time threat detection and response. Perform regular security audits and assessments Regularly test your CI/CD pipeline security using different methods: Penetration testing identifies potential vulnerabilities before attackers do. Red team exercises simulate ‘real’ attacks, while blue team exercises let you practice your incident response. Purple team exercises are used to improve both your offensive and defensive capabilities. Check your compliance with your local security standards and regulations, and update your controls based on the results of your assessments. How TeamCity can help Security in your CI/CD pipeline is a must for protecting your software supply chain. While the threats are real, with the right tools and practices, you can build and deploy software securely without slowing down your team or minimizing their efforts. TeamCity makes this easier with security features that grow with your needs. TeamCity On-PremisesTeamCity Cloud🖥️ Installed and fully managed by your team☁️ Hosted and managed by JetBrains🔐 Full control over infrastructure and network🔒 Zero-maintenance, secure-by-default CI/CD environment🗝️ SSH key management🗝️ SSH key management🔄 Custom secrets management integrations (e.g., HashiCorp Vault, AWS KMS)🔄 Custom secrets management integrations (e.g., HashiCorp Vault, AWS KMS)📦 Artifact storage and access managed internally📦 Secure artifact storage with access control🔍 Customizable logging and monitoring tools📜 Built-in user audit logs and integrated monitoring🔧 Highly customizable for specific compliance needs✅ Compliant with industry standards and suitable for regulated industries👥 Ideal for teams with strict infrastructure or data residency policies🏢 Great for teams who want secure CI/CD without infrastructure management Deliver secure software without compromising on speed or performance. Try TeamCity for free now. Subscribe to TeamCity Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/ci-cd-security-best-practices-social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/teamcity/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/TeamCity-2.svg\" alt=\"Teamcity logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003ePowerful CI/CD for DevOps-centric teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/teamcity/category/best-practices/\"\u003eBest Practices\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/teamcity/category/how-tos/\"\u003eHow-To\u0026#39;s\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/teamcity/category/security/\"\u003eSecurity\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCI/CD Security Best Practices\u003c/h2\u003e                    \n                    \n\u003cp\u003eSoftware development moves fast – really fast. It can also involve multiple teams working from different locations around the world. However, while speed and collaboration can be great for developers and businesses, they can also create security challenges. \u003c/p\u003e\n\n\n\n\u003cp\u003eWith more entry points and less time to catch potential threats, each commit, build, and \u003ca href=\"https://www.jetbrains.com/teamcity/ci-cd-guide/continuous-deployment/\" target=\"_blank\" rel=\"noopener\"\u003edeployment\u003c/a\u003e is another opportunity for something to go wrong. Whether that’s a security breach, malicious attack, or accidental exposure, the impact can ripple through your chain and burden every application.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat’s where CI/CD security comes in. Learn what securing your \u003ca href=\"https://www.jetbrains.com/teamcity/ci-cd-guide/ci-cd-pipeline/\" target=\"_blank\" rel=\"noopener\"\u003eCI/CD pipeline\u003c/a\u003e means for your team, the main risks you need to be aware of, and the practical steps to safeguard your flow.\u003c/p\u003e\n\n\n\n\u003ch2\u003eWhat is CI/CD security, and why is it important?\u003c/h2\u003e\n\n\n\n\u003cp\u003eCI/CD security is a set of \u003ca href=\"https://www.jetbrains.com/teamcity/ci-cd-guide/ci-cd-best-practices/\" target=\"_blank\" rel=\"noopener\"\u003epractices\u003c/a\u003e and controls that protects the entire software delivery process. It prioritizes keeping your code safe from the very start, is built in rather than a separate phase, and is integral to \u003ca href=\"https://www.jetbrains.com/teamcity/ci-cd-guide/what-is-devsecops/\" target=\"_blank\" rel=\"noopener\"\u003eDevSecOps\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eYour CI/CD pipeline has access to tons of sensitive information, including codebases, credentials, and production environments. If compromised, attackers could inject malicious code, steal data, or even gain access to your systems (as they did in the \u003ca href=\"https://www.techtarget.com/whatis/feature/SolarWinds-hack-explained-Everything-you-need-to-know\" target=\"_blank\" rel=\"noopener\"\u003eSolarWinds attack\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003cp\u003eAside from these catastrophic breaches, proper CI/CD security helps prevent mistakes, which could expose sensitive data or introduce vulnerabilities. Malicious employee or contractor behavior shouldn’t be overlooked here, either – \u003ca href=\"https://www.statista.com/statistics/1387393/loss-sensitive-information-organizations-cause-worldwide/\" target=\"_blank\" rel=\"noopener\"\u003e20% of businesses\u003c/a\u003e cited this as a cause of their data breaches. CI/CD security is both a shield and a safety net in one.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/ci-cd-security-20-percent.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWith development automation, changes can go from a laptop to production in minutes, and CI/CD security needs to ensure it doesn’t slow down the process. Acceleration is great for business agility, but giving attackers a fast track to your systems is hazardous. In fact, less than \u003ca href=\"https://www.reversinglabs.com/hubfs/Documents/2022-RL-Flying-Blind-Software-Firms-Struggle-To-Detect-Supply-Chain-Hacks.pdf\" target=\"_blank\" rel=\"noopener\"\u003e10% of companies\u003c/a\u003e in 2022 had implemented hack monitoring in their software development lifecycle. \u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, get CI/CD security right, and you can have both speed and reliability.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCI/CD pipeline security threats\u003c/h2\u003e\n\n\n\n\u003cp\u003eYour CI/CD pipeline has several potential weak points, including: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSource-code repositories\u003c/strong\u003e: Where your application code and configuration files live, the starting point of your pipeline.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBuild servers\u003c/strong\u003e: The systems that compile your code, run tests, and package your applications. They handle sensitive operations and often have elevated privileges.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/teamcity/tutorials/general/working-with-artifacts/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eArtifact\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e storage\u003c/strong\u003e: Where your compiled applications, container images, and packages are stored before deployment. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDeployment environments\u003c/strong\u003e: The staging and production systems where your applications run (including cloud platforms and traditional servers).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThese components face threats from various angles, such as: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSupply chain attacks\u003c/strong\u003e: Harmful code can sneak in through compromised third-party tools, libraries, or dependencies used in your application.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStolen passwords and secrets\u003c/strong\u003e: Attackers may find exposed credentials in pipeline configurations or scripts. These threats can take a long time to identify and contain – 292 days, according to \u003ca href=\"https://www.ibm.com/reports/data-breach\" target=\"_blank\" rel=\"noopener\"\u003eone report\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConfiguration mistakes\u003c/strong\u003e: Small errors in setup can enable attackers to bypass security or gain more access than they should have.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInsider threats\u003c/strong\u003e: Developers with pipeline access might accidentally or intentionally introduce vulnerabilities.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eServer breaches\u003c/strong\u003e: Attackers can get access to the computers that run your build and deployment process.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe interconnected nature of \u003ca href=\"https://www.jetbrains.com/teamcity/ci-cd-guide/\" target=\"_blank\" rel=\"noopener\"\u003eCI/CD\u003c/a\u003e means that compromising just one part can affect everything in the system.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2715\" height=\"1902\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/CICD-pipeline-security-threats.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eTips for securing your CI/CD pipeline\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe most effective CI/CD security involves building multiple layers of protection throughout your pipeline. Rather than implementing a single tool or simply following a checklist, you should set up security checkpoints at every stage.\u003c/p\u003e\n\n\n\n\u003ch3\u003eEmploy CI/CD access controls\u003c/h3\u003e\n\n\n\n\u003cp\u003eProtect your pipeline by implementing strict access controls and applying the principle of least privilege. \u003c/p\u003e\n\n\n\n\u003cp\u003eUse role-based access control (RBAC) to ensure team members only have the access they absolutely need for their specific roles. To prevent unauthorized code changes, set up mandatory code reviews, enable branch protection rules, and use signed commits.\u003c/p\u003e\n\n\n\n\u003cp\u003eRemember to regularly audit these permissions and remove access when team members leave.\u003c/p\u003e\n\n\n\n\u003ch3\u003eManage secrets effectively\u003c/h3\u003e\n\n\n\n\u003cp\u003eNever, ever hardcode credentials into your pipeline configurations or code. Instead, use dedicated secrets management tools (such as HashiCorp Vault) to securely store and manage sensitive information.\u003c/p\u003e\n\n\n\n\u003cp\u003eRotate these credentials regularly (ideally automatically) and ensure secrets are encrypted both in transit and at rest. It’s also best to use temporary credentials where possible.\u003c/p\u003e\n\n\n\n\u003ch3\u003eIntegrated security testing\u003c/h3\u003e\n\n\n\n\u003cp\u003eMake security testing a natural part of your pipeline by putting multiple testing layers in place.\u003c/p\u003e\n\n\n\n\u003cp\u003eCertain tools can help you catch vulnerabilities before they reach production:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://blog.jetbrains.com/teamcity/2025/03/what-is-sast/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/teamcity/2025/03/what-is-sast/\"\u003eStatic Application Security Testing (SAST)\u003c/a\u003e\u003c/strong\u003e analyzes your source code for security vulnerabilities.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/teamcity/2025/02/what-is-dast/\"\u003e\u003cstrong\u003eDynamic Application Security Testing (DAST)\u003c/strong\u003e\u003c/a\u003e tests running applications.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eInteractive Application Security Testing (IAST)\u003c/strong\u003e is used for runtime analysis.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSoftware Composition Analysis (SCA)\u003c/strong\u003e checks third-party dependencies.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eConfigure these tests to run automatically with each build and block deployments if any security issues are found.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2412\" height=\"1602\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Securing-CI_CD-Pipeline-Strategies-and-Tools.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eSecure the development and deployment environment\u003c/h3\u003e\n\n\n\n\u003cp\u003eEnsure your build environments are as secure as your production systems – they’re just as important, if not more. \u003c/p\u003e\n\n\n\n\u003cp\u003eHarden your build servers by removing unnecessary services, keeping systems patched, and using minimal base images. Implement network segmentation to isolate build environments from each other and other systems.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you can, consider using temporary infrastructure. This method allows you to create fresh environments for each build and destroy them afterward.\u003c/p\u003e\n\n\n\n\u003ch3\u003eAutomate security scans\u003c/h3\u003e\n\n\n\n\u003cp\u003eSet up automated security scanning throughout your pipeline. Use container scanners to check for vulnerabilities in container images, dependency checkers to identify known vulnerabilities in libraries, and registry scanners to ensure the security of stored artifacts. \u003c/p\u003e\n\n\n\n\u003cp\u003eEstablish vulnerability thresholds (what level is considered suspicious or a threat) and automatically stop deployments that don’t meet your security standards. Schedule regular scans of your artifacts to ensure you’re aware of new or emerging vulnerabilities.\u003c/p\u003e\n\n\n\n\u003ch3\u003eMonitor and alert\u003c/h3\u003e\n\n\n\n\u003cp\u003eImplement comprehensive monitoring for your CI/CD pipeline. Track all activities and watch for unusual patterns like builds at odd hours, unexpected configuration changes, strange resource usage, and deployment events.\u003c/p\u003e\n\n\n\n\u003cp\u003eUse detailed logging and set up alerts, making sure your team knows how to respond if something suspicious is found. Security information and event management (SIEM) are great CI/CD security tools – they correlate security events and enable real-time threat detection and response.\u003c/p\u003e\n\n\n\n\u003ch3\u003ePerform regular security audits and assessments\u003c/h3\u003e\n\n\n\n\u003cp\u003eRegularly test your CI/CD pipeline security using different methods:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePenetration testing\u003c/strong\u003e identifies potential vulnerabilities before attackers do.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eRed team exercises\u003c/strong\u003e simulate ‘real’ attacks, while \u003cstrong\u003eblue team exercises\u003c/strong\u003e let you practice your incident response.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ePurple team exercises\u003c/strong\u003e are used to improve both your offensive and defensive capabilities.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eCheck your compliance with your local security standards and regulations, and update your controls based on the results of your assessments.\u003c/p\u003e\n\n\n\n\u003ch2\u003eHow TeamCity can help\u003c/h2\u003e\n\n\n\n\u003cp\u003eSecurity in your CI/CD pipeline is a must for protecting your software supply chain. While the threats are real, with the right tools and practices, you can build and deploy software securely without slowing down your team or minimizing their efforts.\u003c/p\u003e\n\n\n\n\u003cp\u003eTeamCity makes this easier with \u003ca href=\"https://www.jetbrains.com/teamcity/features/security/\" target=\"_blank\" rel=\"noopener\"\u003esecurity features\u003c/a\u003e that grow with your needs.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eTeamCity On-Premises\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eTeamCity Cloud\u003c/strong\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🖥️ Installed and fully managed by your team\u003c/td\u003e\u003ctd\u003e☁️ Hosted and managed by JetBrains\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🔐 Full control over infrastructure and network\u003c/td\u003e\u003ctd\u003e🔒 Zero-maintenance, secure-by-default CI/CD environment\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🗝️ SSH key management\u003c/td\u003e\u003ctd\u003e🗝️ SSH key management\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🔄 Custom secrets management integrations (e.g., HashiCorp Vault, AWS KMS)\u003c/td\u003e\u003ctd\u003e🔄 Custom secrets management integrations (e.g., HashiCorp Vault, AWS KMS)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e📦 Artifact storage and access managed internally\u003c/td\u003e\u003ctd\u003e📦 Secure artifact storage with access control\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🔍 Customizable logging and monitoring tools\u003c/td\u003e\u003ctd\u003e📜 Built-in user audit logs and integrated monitoring\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e🔧 Highly customizable for specific compliance needs\u003c/td\u003e\u003ctd\u003e✅ Compliant with industry standards and suitable for regulated industries\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e👥 Ideal for teams with strict infrastructure or data residency policies\u003c/td\u003e\u003ctd\u003e🏢 Great for teams who want secure CI/CD without infrastructure management\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eDeliver secure software without compromising on speed or performance. \u003ca href=\"https://www.jetbrains.com/teamcity/download/\" target=\"_blank\" rel=\"noopener\"\u003eTry TeamCity for free now\u003c/a\u003e.\u003c/p\u003e\n\n\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to TeamCity Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
