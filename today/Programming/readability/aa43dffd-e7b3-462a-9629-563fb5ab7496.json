{
  "id": "aa43dffd-e7b3-462a-9629-563fb5ab7496",
  "title": "Automating role-based access control (RBAC) at scale",
  "link": "https://about.gitlab.com/blog/automating-role-based-access-control-rbac-at-scale/",
  "description": "",
  "author": "James Wormwell",
  "published": "2025-06-18T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "James Wormwell, Paul Meresanu, Kees Valkhof",
  "length": 11614,
  "excerpt": "This guide details setting up GitLab + Keycloak + OIDC for RBAC, covering planning, Docker configuration, and automated access governance for DevSecOps.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/images/ico/favicon-192x192.png",
  "text": "Security starts with structure. Building a scalable and secure development platform begins with getting the fundamentals right — especially role-based access control (RBAC). To help our customers scale effectively, we developed the RBAC Accelerator — a modular, outcome-driven enablement program that supports large organizations in defining, enforcing, and scaling access policies across GitLab. This foundation enables broader transformation. For example, the Secure SDLC Accelerator, built on top of the RBAC Accelerator, empowers customers to integrate compliance, security, and DevSecOps best practices into their workflows. GitLab customer Lely, a major Dutch manufacturer of agricultural machines and robots, used this approach to migrate to GitLab Dedicated. Lely automated user provisioning via Azure AD using OpenID Connect (OIDC), enforced least-privilege policies, and created a scalable, reusable access model to support their future development initiatives. In this guide, we’ll take you through a hands-on implementation example of GitLab + Keycloak + OIDC, covering everything from running the setup in a Docker environment to automating role mapping, designing a scalable group hierarchy, and aligning GitLab access controls with organizational structure and compliance goals. This is a local demo setup intended for proof-of-concept purposes only. Whether you’re just starting out or optimizing at scale, this modular foundation ensures you’re not just securing access — you’re enabling everything that comes next. Getting started with access control planning Before implementing any tooling, it’s essential to understand your access landscape. Consider: What GitLab resources need protection (projects, groups, environments)? Who are your personas (Developers, Maintainers, Guests, etc.)? What organizational units (departments, cost centers) should govern access? How does your IdP structure (Keycloak) define users and roles? Use this stage to draft your: Access control matrix GitLab group hierarchy (team- or product-based) Least privilege policy assumptions Sample group hierarchy graph TD Root[\"Root (Root Group)\"] FirmwareTeam[\"Firmware-Team\"] FirmwareDevelopers[\"Developers (GitLab Developer Role)\"] FirmwareMaintainers[\"Maintainers (GitLab Maintainer Role)\"] FirmwareReporters[\"Reporters (GitLab Reporter Role)\"] HardwareTeam[\"Hardware-Team\"] HardwareDevelopers[\"Developers\"] SoftwareTeam[\"Software-Team\"] SoftwareDevelopers[\"Developers\"] SoftwareMaintainers[\"Maintainers\"] SoftwareReporters[\"Reporters\"] Enterprise --\u003e FirmwareTeam Enterprise --\u003e HardwareTeam Enterprise --\u003e SoftwareTeam FirmwareTeam --\u003e FirmwareDevelopers FirmwareTeam --\u003e FirmwareMaintainers FirmwareTeam --\u003e FirmwareReporters HardwareTeam --\u003e HardwareDevelopers SoftwareTeam --\u003e SoftwareDevelopers SoftwareTeam --\u003e SoftwareMaintainers SoftwareTeam --\u003e SoftwareReporters Demo system setup: GitLab + Keycloak in a local Docker environment Prerequisites Docker, Docker Compose, OpenSSL GitLab Version 17.7.3 and Keycloak Version 23.0.7 container images Self-signed certificates .env configuration The demo setup is using the following GitLab and Keycloak versions, ports and secrets. GitLab configuration GITLAB_VERSION=17.7.3-ee.0 GITLAB_EXTERNAL_URL=http://localhost:8081 GITLAB_SSH_PORT=8222 Keycloak configuration KEYCLOAK_VERSION=latest KEYCLOAK_ADMIN=\u003cyour-admin-username\u003e KEYCLOAK_ADMIN_PASSWORD=\u003cyour-admin-password\u003e KEYCLOAK_HTTPS_PORT=8443 KEYCLOAK_CLIENT_SECRET=\u003cyour-client-secret\u003e # Get this from Keycloak after setup Generate SSL certificates To establish trust between GitLab and Keycloak, especially in a self-hosted Docker environment, we’ll need to generate self-signed SSL certificates. These certificates will enable encrypted HTTPS communication and ensure GitLab can securely talk to Keycloak during the OIDC authentication process. For production environments, we recommend using certificates from a trusted Certificate Authority (CA), but for local testing and development, self-signed certificates are sufficient. Follow these step-by-step instructions: Create a folder for the certificates. mkdir -p certs Generate a self-signed certificate with OpenSSL. openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\ -keyout certs/tls.key \\ -out certs/tls.crt \\ -subj \"/CN=keycloak\" \\ -addext \"subjectAltName=DNS:keycloak,DNS:localhost\" Create a PKCS12 keystore for Keycloak. openssl pkcs12 -export \\ -in certs/tls.crt \\ -inkey certs/tls.key \\ -out certs/keystore.p12 \\ -name keycloak \\ -password pass:password Start the service using Docker compose Now that we have our certificates, we can stand up our local GitLab + Keycloak environment using Docker Compose: version: '3.8' services: gitlab: image: gitlab/gitlab-ee:${GITLAB_VERSION} container_name: gitlab restart: unless-stopped environment: GITLAB_OMNIBUS_CONFIG: | external_url '${GITLAB_EXTERNAL_URL:-http://localhost:8081}' gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT:-8222} gitlab_rails['display_initial_root_password'] = true # OAuth Configuration gitlab_rails['omniauth_enabled'] = true gitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect'] gitlab_rails['omniauth_block_auto_created_users'] = false gitlab_rails['omniauth_providers'] = [ { 'name' =\u003e 'openid_connect', 'label' =\u003e 'Keycloak', 'args' =\u003e { 'name' =\u003e 'openid_connect', 'scope' =\u003e ['openid', 'profile', 'email'], 'response_type' =\u003e 'code', 'issuer' =\u003e 'https://localhost:8443/realms/GitLab', 'client_auth_method' =\u003e 'query', 'discovery' =\u003e false, 'uid_field' =\u003e 'preferred_username', 'pkce' =\u003e true, 'client_options' =\u003e { 'identifier' =\u003e 'gitlab', 'secret' =\u003e '${KEYCLOAK_CLIENT_SECRET}', 'redirect_uri' =\u003e '${GITLAB_EXTERNAL_URL:-http://localhost:8081}/users/auth/openid_connect/callback', 'authorization_endpoint' =\u003e 'https://localhost:8443/realms/GitLab/protocol/openid-connect/auth', 'token_endpoint' =\u003e 'https://keycloak:8443/realms/GitLab/protocol/openid-connect/token', 'userinfo_endpoint' =\u003e 'https://keycloak:8443/realms/GitLab/protocol/openid-connect/userinfo', 'jwks_uri' =\u003e 'https://keycloak:8443/realms/GitLab/protocol/openid-connect/certs' } } } ] volumes: - gl-config:/etc/gitlab - gl-data:/var/opt/gitlab - ./certs/tls.crt:/etc/gitlab/trusted-certs/keycloak.crt ports: - '${GITLAB_EXTERNAL_PORT:-8081}:8081' - '${GITLAB_SSH_PORT:-8222}:22' shm_size: '256m' keycloak: image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION} container_name: keycloak-server restart: unless-stopped command: [ \"start-dev\", \"--import-realm\", \"--https-port=${KEYCLOAK_HTTPS_PORT}\", \"--https-key-store-file=/etc/x509/https/keystore.p12\", \"--https-key-store-password=password\" ] volumes: - ./data:/opt/keycloak/data/import - ./certs:/etc/x509/https environment: KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN} KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD} ports: - \"${KEYCLOAK_HTTPS_PORT}:8443\" volumes: gl-config: gl-data: Run the docker-compose up -d command and your GitLab + Keycloak environment will be up in minutes. docker-compose up -d Keycloak realm configuration Your Keycloak realm is automatically configured on startup as it's defined in the docker-compose file. The realm configuration will include: Pre-configured GitLab client Default client secret You can access Keycloak admin console at https://localhost:8443 with: Username: admin Password: from your .env file To verify the setup: Log into Keycloak admin console Select the GitLab realm Check Clients \u003e gitlab Verify the client configuration matches your environment. To showcase the automated RBAC mechanism, you will need to follow these steps: Map realm roles to GitLab roles Create group structure with mapping roles, matching the Group, Sub-group, Project pattern in GitLab. Before provisioning your first users to the user groups, it’s recommended to log into your GitLab instance to retrieve your instance root password: Access GitLab at http://localhost:8081. Get the root password: docker exec gitlab grep 'Password:' `/etc/gitlab/initial_root_password` Log in as root with the retrieved password. Putting it all together To demonstrate the power of this integrated RBAC model, start by walking through a real-world user journey — from identity to access. Begin in Keycloak by showcasing a user assigned to specific realm roles (e.g., developer, maintainer) and groups (e.g., /engineering/platform). These roles have been mapped to GitLab access levels via OIDC claims, while group affiliations align with GitLab’s structured hierarchy of root groups, sub-groups, and projects. Upon login through GitLab’s SSO Keycloak endpoint, the user is automatically provisioned into the correct group and assigned the appropriate role — with no manual intervention. Within GitLab, you can see that the user can interact with the assigned project: For example, a developer might push code and open a merge request, but not merge to protected branches — validating the least-privilege model. Finally, you can showcase access across multiple teams or products that are managed centrally in Keycloak, yet enforced precisely in GitLab through group sync and permissions inheritance. This demo illustrates not just role assignment, but how GitLab and Keycloak together deliver real-time, automated access governance at scale — ready for secure, compliant, enterprise-grade software development. Why GitLab? GitLab’s comprehensive, intelligent DevSecOps platform is the ideal foundation for secure, scalable access management. With native OIDC support, granular role enforcement, SCIM-based user provisioning, and built-in audit logging, GitLab allows organizations to centralize control without compromising agility. Its flexible group hierarchy mirrors enterprise structure, making it easy to manage access across teams. Integrating with identity providers like Keycloak automates onboarding, ensures least-privilege access, and creates a seamless identity-to-permission pipeline that supports regulatory and security goals. As a core component of GitLab’s security capabilities, RBAC ties directly into CI/CD, policy enforcement, and vulnerability management workflows. Summary RBAC is just the beginning. With GitLab and Keycloak, you’re not just securing access — you’re enabling structured, automated governance that scales. As you expand into policy enforcement, Secure SDLC, and DevSecOps automation, this foundation becomes a launchpad for sustainable, enterprise-grade software delivery. Get started with RBAC in GitLab today with a free, 60-day trial of GitLab Ultimate. Sign up today!",
  "image": "https://about.gitlab.com/images/open-graph/open-graph-gitlab.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-d90b052d=\"\" data-v-3f3ac235=\"\" data-v-b7392a61=\"\"\u003e\u003cp\u003eSecurity starts with structure. Building a scalable and secure development platform begins with getting the fundamentals right — especially role-based access control (RBAC).\u003c/p\u003e\n\u003cp\u003eTo help our customers scale effectively, we developed the RBAC Accelerator — a modular, outcome-driven enablement program that supports large organizations in defining, enforcing, and scaling access policies across GitLab.\u003c/p\u003e\n\u003cp\u003eThis foundation enables broader transformation. For example, the Secure SDLC Accelerator, built on top of the RBAC Accelerator, empowers customers to integrate compliance, security, and DevSecOps best practices into their workflows.\u003c/p\u003e\n\u003cp\u003eGitLab customer \u003ca href=\"https://www.lelyna.com/us/\"\u003eLely\u003c/a\u003e, a major Dutch manufacturer of agricultural machines and robots, used this approach to migrate to GitLab Dedicated. Lely automated user provisioning via Azure AD using OpenID Connect (OIDC), enforced \u003ca href=\"https://about.gitlab.com/blog/the-ultimate-guide-to-least-privilege-access-with-gitlab/\"\u003eleast-privilege policies\u003c/a\u003e, and created a scalable, reusable access model to support their future development initiatives.\u003c/p\u003e\n\u003cp\u003eIn this guide, we’ll take you through a hands-on implementation example of GitLab + \u003ca href=\"https://www.keycloak.org/\"\u003eKeycloak\u003c/a\u003e + OIDC, covering everything from running the setup in a Docker environment to automating role mapping, designing a scalable group hierarchy, and aligning GitLab access controls with organizational structure and compliance goals.\u003c/p\u003e\n\u003cp\u003eThis is a local demo setup intended for proof-of-concept purposes only.\u003c/p\u003e\n\u003cp\u003eWhether you’re just starting out or optimizing at scale, this modular foundation ensures you’re not just securing access — you’re enabling everything that comes next.\u003c/p\u003e\n\u003ch2 id=\"getting-started-with-access-control-planning\" tabindex=\"-1\"\u003e\u003ca href=\"#getting-started-with-access-control-planning\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Getting started with access control planning\u003c/h2\u003e\n\u003cp\u003eBefore implementing any tooling, it’s essential to understand your access landscape.\u003c/p\u003e\n\u003cp\u003eConsider:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat GitLab resources need protection (projects, groups, environments)?\u003c/li\u003e\n\u003cli\u003eWho are your personas (Developers, Maintainers, Guests, etc.)?\u003c/li\u003e\n\u003cli\u003eWhat organizational units (departments, cost centers) should govern access?\u003c/li\u003e\n\u003cli\u003eHow does your IdP structure (Keycloak) define users and roles?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUse this stage to draft your:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAccess control matrix\u003c/li\u003e\n\u003cli\u003eGitLab group hierarchy (team- or product-based)\u003c/li\u003e\n\u003cli\u003eLeast privilege policy assumptions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSample group hierarchy\u003c/p\u003e\n\u003cp\u003egraph TD\n    Root[\u0026#34;Root (Root Group)\u0026#34;]\n    FirmwareTeam[\u0026#34;Firmware-Team\u0026#34;]\n    FirmwareDevelopers[\u0026#34;Developers (GitLab Developer Role)\u0026#34;]\n    FirmwareMaintainers[\u0026#34;Maintainers (GitLab Maintainer Role)\u0026#34;]\n    FirmwareReporters[\u0026#34;Reporters (GitLab Reporter Role)\u0026#34;]\n    HardwareTeam[\u0026#34;Hardware-Team\u0026#34;]\n    HardwareDevelopers[\u0026#34;Developers\u0026#34;]\n    SoftwareTeam[\u0026#34;Software-Team\u0026#34;]\n    SoftwareDevelopers[\u0026#34;Developers\u0026#34;]\n    SoftwareMaintainers[\u0026#34;Maintainers\u0026#34;]\n    SoftwareReporters[\u0026#34;Reporters\u0026#34;]\n    \n    Enterprise --\u0026gt; FirmwareTeam\n    Enterprise --\u0026gt; HardwareTeam\n    Enterprise --\u0026gt; SoftwareTeam\n    \n    FirmwareTeam --\u0026gt; FirmwareDevelopers\n    FirmwareTeam --\u0026gt; FirmwareMaintainers\n    FirmwareTeam --\u0026gt; FirmwareReporters\n    \n    HardwareTeam --\u0026gt; HardwareDevelopers\n    \n    SoftwareTeam --\u0026gt; SoftwareDevelopers\n    SoftwareTeam --\u0026gt; SoftwareMaintainers\n    SoftwareTeam --\u0026gt; SoftwareReporters\n\u003c/p\u003e\u003ch2 id=\"demo-system-setup-gitlab-%2B-keycloak-in-a-local-docker-environment\" tabindex=\"-1\"\u003e\u003ca href=\"#demo-system-setup-gitlab-%2B-keycloak-in-a-local-docker-environment\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Demo system setup: GitLab + Keycloak in a local Docker environment\u003c/h2\u003e\n\u003ch3 id=\"prerequisites\" tabindex=\"-1\"\u003e\u003ca href=\"#prerequisites\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Prerequisites\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDocker, Docker Compose, OpenSSL\u003c/li\u003e\n\u003cli\u003eGitLab Version 17.7.3 and Keycloak Version 23.0.7 container images\u003c/li\u003e\n\u003cli\u003eSelf-signed certificates\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"env-configuration\" tabindex=\"-1\"\u003e\u003ca href=\"#env-configuration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e .env configuration\u003c/h3\u003e\n\u003cp\u003eThe demo setup is using the following GitLab and Keycloak versions, ports and secrets.\u003c/p\u003e\n\u003ch4 id=\"gitlab-configuration\" tabindex=\"-1\"\u003e\u003ca href=\"#gitlab-configuration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e GitLab configuration\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eGITLAB_VERSION=17.7.3-ee.0\nGITLAB_EXTERNAL_URL=http://localhost:8081\nGITLAB_SSH_PORT=8222\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"keycloak-configuration\" tabindex=\"-1\"\u003e\u003ca href=\"#keycloak-configuration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Keycloak configuration\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eKEYCLOAK_VERSION=latest\nKEYCLOAK_ADMIN=\u0026lt;your-admin-username\u0026gt;\nKEYCLOAK_ADMIN_PASSWORD=\u0026lt;your-admin-password\u0026gt;\nKEYCLOAK_HTTPS_PORT=8443\nKEYCLOAK_CLIENT_SECRET=\u0026lt;your-client-secret\u0026gt;  # Get this from Keycloak after setup\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"generate-ssl-certificates\" tabindex=\"-1\"\u003e\u003ca href=\"#generate-ssl-certificates\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Generate SSL certificates\u003c/h2\u003e\n\u003cp\u003eTo establish trust between GitLab and Keycloak, especially in a self-hosted Docker environment, we’ll need to generate self-signed SSL certificates. These certificates will enable encrypted HTTPS communication and ensure GitLab can securely talk to Keycloak during the OIDC authentication process.\u003c/p\u003e\n\u003cp\u003eFor production environments, we recommend using certificates from a trusted Certificate Authority (CA), but for local testing and development, self-signed certificates are sufficient.\u003c/p\u003e\n\u003cp\u003eFollow these step-by-step instructions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a folder for the certificates.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003e mkdir -p certs\u003c/code\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eGenerate a self-signed certificate with OpenSSL.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eopenssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout certs/tls.key \\\n  -out certs/tls.crt \\\n  -subj \u0026#34;/CN=keycloak\u0026#34; \\\n  -addext \u0026#34;subjectAltName=DNS:keycloak,DNS:localhost\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eCreate a PKCS12 keystore for Keycloak.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eopenssl pkcs12 -export \\\n  -in certs/tls.crt \\\n  -inkey certs/tls.key \\\n  -out certs/keystore.p12 \\\n  -name keycloak \\\n  -password pass:password\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"start-the-service-using-docker-compose\" tabindex=\"-1\"\u003e\u003ca href=\"#start-the-service-using-docker-compose\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Start the service using Docker compose\u003c/h2\u003e\n\u003cp\u003eNow that we have our certificates, we can stand up our local GitLab + Keycloak environment using Docker Compose:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eversion: \u0026#39;3.8\u0026#39;\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:${GITLAB_VERSION}\n    container_name: gitlab\n    restart: unless-stopped\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url \u0026#39;${GITLAB_EXTERNAL_URL:-http://localhost:8081}\u0026#39;\n        gitlab_rails[\u0026#39;gitlab_shell_ssh_port\u0026#39;] = ${GITLAB_SSH_PORT:-8222}\n        gitlab_rails[\u0026#39;display_initial_root_password\u0026#39;] = true\n\n        # OAuth Configuration\n        gitlab_rails[\u0026#39;omniauth_enabled\u0026#39;] = true\n        gitlab_rails[\u0026#39;omniauth_allow_single_sign_on\u0026#39;] = [\u0026#39;openid_connect\u0026#39;]\n        gitlab_rails[\u0026#39;omniauth_block_auto_created_users\u0026#39;] = false\n        gitlab_rails[\u0026#39;omniauth_providers\u0026#39;] = [\n            {\n                \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;openid_connect\u0026#39;,\n                \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Keycloak\u0026#39;,\n                \u0026#39;args\u0026#39; =\u0026gt; {\n                    \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;openid_connect\u0026#39;,\n                    \u0026#39;scope\u0026#39; =\u0026gt; [\u0026#39;openid\u0026#39;, \u0026#39;profile\u0026#39;, \u0026#39;email\u0026#39;],\n                    \u0026#39;response_type\u0026#39; =\u0026gt; \u0026#39;code\u0026#39;,\n                    \u0026#39;issuer\u0026#39; =\u0026gt; \u0026#39;https://localhost:8443/realms/GitLab\u0026#39;,\n                    \u0026#39;client_auth_method\u0026#39; =\u0026gt; \u0026#39;query\u0026#39;,\n                    \u0026#39;discovery\u0026#39; =\u0026gt; false,\n                    \u0026#39;uid_field\u0026#39; =\u0026gt; \u0026#39;preferred_username\u0026#39;,\n                    \u0026#39;pkce\u0026#39; =\u0026gt; true,\n                    \u0026#39;client_options\u0026#39; =\u0026gt; {\n                        \u0026#39;identifier\u0026#39; =\u0026gt; \u0026#39;gitlab\u0026#39;,\n                        \u0026#39;secret\u0026#39; =\u0026gt; \u0026#39;${KEYCLOAK_CLIENT_SECRET}\u0026#39;,\n                        \u0026#39;redirect_uri\u0026#39; =\u0026gt; \u0026#39;${GITLAB_EXTERNAL_URL:-http://localhost:8081}/users/auth/openid_connect/callback\u0026#39;,\n                        \u0026#39;authorization_endpoint\u0026#39; =\u0026gt; \u0026#39;https://localhost:8443/realms/GitLab/protocol/openid-connect/auth\u0026#39;,\n                        \u0026#39;token_endpoint\u0026#39; =\u0026gt; \u0026#39;https://keycloak:8443/realms/GitLab/protocol/openid-connect/token\u0026#39;,\n                        \u0026#39;userinfo_endpoint\u0026#39; =\u0026gt; \u0026#39;https://keycloak:8443/realms/GitLab/protocol/openid-connect/userinfo\u0026#39;,\n                        \u0026#39;jwks_uri\u0026#39; =\u0026gt; \u0026#39;https://keycloak:8443/realms/GitLab/protocol/openid-connect/certs\u0026#39;\n                    }\n                }\n            }\n        ]\n    volumes:\n      - gl-config:/etc/gitlab\n      - gl-data:/var/opt/gitlab\n      - ./certs/tls.crt:/etc/gitlab/trusted-certs/keycloak.crt\n    ports:\n      - \u0026#39;${GITLAB_EXTERNAL_PORT:-8081}:8081\u0026#39;\n      - \u0026#39;${GITLAB_SSH_PORT:-8222}:22\u0026#39;\n    shm_size: \u0026#39;256m\u0026#39;\n\n  keycloak:\n    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}\n    container_name: keycloak-server\n    restart: unless-stopped\n    command: [\n      \u0026#34;start-dev\u0026#34;,\n      \u0026#34;--import-realm\u0026#34;,\n      \u0026#34;--https-port=${KEYCLOAK_HTTPS_PORT}\u0026#34;,\n      \u0026#34;--https-key-store-file=/etc/x509/https/keystore.p12\u0026#34;,\n      \u0026#34;--https-key-store-password=password\u0026#34;\n    ]\n    volumes:\n      - ./data:/opt/keycloak/data/import\n      - ./certs:/etc/x509/https\n    environment:\n      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}\n      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}\n    ports:\n      - \u0026#34;${KEYCLOAK_HTTPS_PORT}:8443\u0026#34;\n\nvolumes:\n  gl-config:\n  gl-data:\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the \u003ccode\u003edocker-compose up -d\u003c/code\u003e command and your GitLab + Keycloak environment will be up in minutes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker-compose up -d\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"keycloak-realm-configuration\" tabindex=\"-1\"\u003e\u003ca href=\"#keycloak-realm-configuration\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Keycloak realm configuration\u003c/h2\u003e\n\u003cp\u003eYour Keycloak realm is automatically configured on startup as it\u0026#39;s defined in the \u003ccode\u003edocker-compose\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eThe realm configuration will include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePre-configured GitLab client\u003c/li\u003e\n\u003cli\u003eDefault client secret\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can access Keycloak admin console at \u003ccode\u003ehttps://localhost:8443\u003c/code\u003e with:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsername: admin\u003c/li\u003e\n\u003cli\u003ePassword: from your \u003ccode\u003e.env\u003c/code\u003e file\u003c/li\u003e\n\u003cli\u003eTo verify the setup:\n\u003cul\u003e\n\u003cli\u003eLog into Keycloak admin console\u003c/li\u003e\n\u003cli\u003eSelect the \u003cstrong\u003eGitLab\u003c/strong\u003e realm\u003c/li\u003e\n\u003cli\u003eCheck \u003cstrong\u003eClients \u0026gt; gitlab\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eVerify the client configuration matches your environment.\u003c/p\u003e\n\u003cp\u003eTo showcase the automated RBAC mechanism, you will need to follow these steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMap realm roles to GitLab roles\u003c/li\u003e\n\u003cli\u003eCreate group structure with mapping roles, matching the Group, Sub-group, Project pattern in GitLab.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBefore provisioning your first users to the user groups, it’s recommended to log into your GitLab instance to retrieve your instance root password:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAccess GitLab at \u003ccode\u003ehttp://localhost:8081\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGet the root password:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec gitlab grep \u0026#39;Password:\u0026#39; `/etc/gitlab/initial_root_password`\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eLog in as root with the retrieved password.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"putting-it-all-together\" tabindex=\"-1\"\u003e\u003ca href=\"#putting-it-all-together\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Putting it all together\u003c/h2\u003e\n\u003cp\u003eTo demonstrate the power of this integrated RBAC model, start by walking through a real-world user journey — from identity to access.\u003c/p\u003e\n\u003cp\u003eBegin in Keycloak by showcasing a user assigned to specific realm roles (e.g., developer, maintainer) and groups (e.g., /engineering/platform). These roles have been mapped to GitLab access levels via OIDC claims, while group affiliations align with GitLab’s structured hierarchy of root groups, sub-groups, and projects.\u003c/p\u003e\n\u003cp\u003eUpon login through GitLab’s SSO Keycloak endpoint, the user is automatically provisioned into the correct group and assigned the appropriate role — with no manual intervention.\u003c/p\u003e\n\u003cp\u003eWithin GitLab, you can see that the  user can interact with the assigned project: For example, a developer might push code and open a merge request, but not merge to protected branches — validating the least-privilege model.\u003c/p\u003e\n\u003cp\u003eFinally, you can showcase access across multiple teams or products that are managed centrally in Keycloak, yet enforced precisely in GitLab through group sync and permissions inheritance. This demo illustrates not just role assignment, but how GitLab and Keycloak together deliver real-time, automated access governance at scale — ready for secure, compliant, enterprise-grade software development.\u003c/p\u003e\n\u003ch2 id=\"why-gitlab\" tabindex=\"-1\"\u003e\u003ca href=\"#why-gitlab\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Why GitLab?\u003c/h2\u003e\n\u003cp\u003eGitLab’s comprehensive, intelligent DevSecOps platform is the ideal foundation for secure, scalable access management. With native OIDC support, granular role enforcement, SCIM-based user provisioning, and built-in audit logging, GitLab allows organizations to centralize control without compromising agility. Its flexible group hierarchy mirrors enterprise structure, making it easy to manage access across teams.\u003c/p\u003e\n\u003cp\u003eIntegrating with identity providers like Keycloak automates onboarding, ensures least-privilege access, and creates a seamless identity-to-permission pipeline that supports regulatory and security goals. As a core component of GitLab’s security capabilities, RBAC ties directly into CI/CD, policy enforcement, and vulnerability management workflows.\u003c/p\u003e\n\u003ch2 id=\"summary\" tabindex=\"-1\"\u003e\u003ca href=\"#summary\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Summary\u003c/h2\u003e\n\u003cp\u003eRBAC is just the beginning. With GitLab and Keycloak, you’re not just securing access — you’re enabling structured, automated governance that scales. As you expand into policy enforcement, Secure SDLC, and DevSecOps automation, this foundation becomes a launchpad for sustainable, enterprise-grade software delivery.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGet started with RBAC in GitLab today with a free, 60-day trial of GitLab Ultimate. \u003ca href=\"https://about.gitlab.com/free-trial/\"\u003eSign up today\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-06-18T00:00:00Z",
  "modifiedTime": null
}
