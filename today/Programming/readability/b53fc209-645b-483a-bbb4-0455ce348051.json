{
  "id": "b53fc209-645b-483a-bbb4-0455ce348051",
  "title": "Writing Resilient Components",
  "link": "https://overreacted.io/writing-resilient-components/",
  "description": "Four principles to set you on the right path.",
  "author": "",
  "published": "Sat, 16 Mar 2019 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 31646,
  "excerpt": "Four principles to set you on the right path.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "When people start learning React, they often ask for a style guide. While it‚Äôs a good idea to have some consistent rules applied across a project, a lot of them are arbitrary ‚Äî and so React doesn‚Äôt have a strong opinion about them. You can use different type systems, prefer function declarations or arrow functions, sort your props in alphabetical order or in an order you find pleasing. This flexibility allows integrating React into projects with existing conventions. But it also invites endless debates. There are important design principles that every component should strive to follow. But I don‚Äôt think style guides capture those principles well. We‚Äôll talk about style guides first, and then look at the principles that really are useful. Don‚Äôt Get Distracted by Imaginary Problems Before we talk about component design principles, I want to say a few words about style guides. This isn‚Äôt a popular opinion but someone needs to say it! In the JavaScript community, there are a few strict opinionated style guides enforced by a linter. My personal observation is that they tend to create more friction than they‚Äôre worth. I can‚Äôt count how many times somebody showed me some absolutely valid code and said ‚ÄúReact complains about this‚Äù, but it was their lint config complaining! This leads to three issues: People get used to seeing the linter as an overzealous noisy gatekeeper rather than a helpful tool. Useful warnings are drowned out by a sea of style nits. As a result, people don‚Äôt scan the linter messages while debugging, and miss helpful tips. Additionally, people who are less used to writing JavaScript (for example, designers) have a harder time working with the code. People don‚Äôt learn to differentiate between valid and invalid uses of a certain pattern. For example, there is a popular rule that forbids calling setState inside componentDidMount. But if it was always ‚Äúbad‚Äù, React simply wouldn‚Äôt allow it! There is a legitimate use case for it, and that is to measure the DOM node layout ‚Äî e.g. to position a tooltip. I‚Äôve seen people ‚Äúwork around‚Äù this rule by adding a setTimeout which completely misses the point. Eventually, people adopt the ‚Äúenforcer mindset‚Äù and get opinionated about things that don‚Äôt bring a meaningful difference but are easy to scan for in the code. ‚ÄúYou used a function declaration, but our project uses arrow functions.‚Äù Whenever I have a strong feeling about enforcing a rule like this, looking deeper reveals that I invested emotional effort into this rule ‚Äî and struggle to let it go. It lulls me into a false sense of accomplishment without improving my code. Am I saying that we should stop linting? Not at all! With a good config, a linter is a great tool to catch bugs before they happen. It‚Äôs focusing on the style too much that turns it into a distraction. Marie Kondo Your Lint Config Here‚Äôs what I suggest you to do on Monday. Gather your team for half an hour, go through every lint rule enabled in your project‚Äôs config, and ask yourself: ‚ÄúHas this rule ever helped us catch a bug?‚Äù If not, turn it off. (You can also start from a clean slate with eslint-config-react-app which has no styling rules.) At the very least, your team should have a process for removing rules that cause friction. Don‚Äôt assume that whatever you or something somebody else added to your lint config a year ago is a ‚Äúbest practice‚Äù. Question it and look for answers. Don‚Äôt let anyone tell you you‚Äôre not smart enough to pick your lint rules. But what about formatting? Use Prettier and forget about the ‚Äústyle nits‚Äù. You don‚Äôt need a tool to shout at you for putting an extra space if another tool can fix it for you. Use the linter to find bugs, not enforcing the a e s t h e t i c s. Of course, there are aspects of the coding style that aren‚Äôt directly related to formatting but can still be annoying when inconsistent across the project. However, many of them are too subtle to catch with a lint rule anyway. This is why it‚Äôs important to build trust between the team members, and to share useful learnings in the form of a wiki page or a short design guide. Not everything is worth automating! The insights gained from actually reading the rationale in such a guide can be more valuable than following the ‚Äúrules‚Äù. But if following a strict style guide is a distraction, what‚Äôs actually important? That‚Äôs the topic of this post. Writing Resilient Components No amount of indentation or sorting imports alphabetically can fix a broken design. So instead of focusing on how some code looks, I will focus on how it works. There‚Äôs a few component design principles that I find very helpful: Don‚Äôt stop the data flow Always be ready to render No component is a singleton Keep the local state isolated Even if you don‚Äôt use React, you‚Äôll likely discover the same principles by trial and error for any UI component model with unidirectional data flow. Principle 1: Don‚Äôt Stop the Data Flow Don‚Äôt Stop the Data Flow in Rendering When somebody uses your component, they expect that they can pass different props to it over time, and that the component will reflect those changes: // isOk might be driven by state and can change at any time \u003cButton color={isOk ? 'blue' : 'red'} /\u003e In general, this is how React works by default. If you use a color prop inside a Button component, you‚Äôll see the value provided from above for that render: function Button({ color, children }) { return ( // ‚úÖ `color` is always fresh! \u003cbutton className={'Button-' + color}\u003e {children} \u003c/button\u003e ); } However, a common mistake when learning React is to copy props into state: class Button extends React.Component { state = { color: this.props.color }; render() { const { color } = this.state; // üî¥ `color` is stale! return ( \u003cbutton className={'Button-' + color}\u003e {this.props.children} \u003c/button\u003e ); } } This might seem more intuitive at first if you used classes outside of React. However, by copying a prop into state you‚Äôre ignoring all updates to it. // üî¥ No longer works for updates with the above implementation \u003cButton color={isOk ? 'blue' : 'red'} /\u003e In the rare case that this behavior is intentional, make sure to call that prop initialColor or defaultColor to clarify that changes to it are ignored. But usually you‚Äôll want to read the props directly in your component and avoid copying props (or anything computed from the props) into state: function Button({ color, children }) { return ( // ‚úÖ `color` is always fresh! \u003cbutton className={'Button-' + color}\u003e {children} \u003c/button\u003e ); } Computed values are another reason people sometimes attempt to copy props into state. For example, imagine that we determined the button text color based on an expensive computation with background color as an argument: class Button extends React.Component { state = { textColor: slowlyCalculateTextColor(this.props.color) }; render() { return ( \u003cbutton className={ 'Button-' + this.props.color + ' Button-text-' + this.state.textColor // üî¥ Stale on `color` prop updates }\u003e {this.props.children} \u003c/button\u003e ); } } This component is buggy because it doesn‚Äôt recalculate this.state.textColor on the color prop change. The easiest fix would be to move the textColor calculation into the render method, and make this a PureComponent: class Button extends React.PureComponent { render() { const textColor = slowlyCalculateTextColor(this.props.color); return ( \u003cbutton className={ 'Button-' + this.props.color + ' Button-text-' + textColor // ‚úÖ Always fresh }\u003e {this.props.children} \u003c/button\u003e ); } } Problem solved! Now if props change, we‚Äôll recalculate textColor, but we avoid the expensive computation on the same props. However, we might want to optimize it further. What if it‚Äôs the children prop that changed? It seems unfortunate to recalculate the textColor in that case. Our second attempt might be to invoke the calculation in componentDidUpdate: class Button extends React.Component { state = { textColor: slowlyCalculateTextColor(this.props.color) }; componentDidUpdate(prevProps) { if (prevProps.color !== this.props.color) { // üòî Extra re-render for every update this.setState({ textColor: slowlyCalculateTextColor(this.props.color), }); } } render() { return ( \u003cbutton className={ 'Button-' + this.props.color + ' Button-text-' + this.state.textColor // ‚úÖ Fresh on final render }\u003e {this.props.children} \u003c/button\u003e ); } } However, this would mean our component does a second re-render after every change. That‚Äôs not ideal either if we‚Äôre trying to optimize it. You could use the legacy componentWillReceiveProps lifecycle for this. However, people often put side effects there too. That, in turn, often causes problems for the upcoming Concurrent Rendering features like Time Slicing and Suspense. And the ‚Äúsafer‚Äù getDerivedStateFromProps method is clunky. Let‚Äôs step back for a second. Effectively, we want memoization. We have some inputs, and we don‚Äôt want to recalculate the output unless the inputs change. With a class, you could use a helper for memoization. However, Hooks take this a step further, giving you a built-in way to memoize expensive computations: function Button({ color, children }) { const textColor = useMemo( () =\u003e slowlyCalculateTextColor(color), [color] // ‚úÖ Don‚Äôt recalculate until `color` changes ); return ( \u003cbutton className={'Button-' + color + ' Button-text-' + textColor}\u003e {children} \u003c/button\u003e ); } That‚Äôs all the code you need! In a class component, you can use a helper like memoize-one for that. In a function component, useMemo Hook gives you similar functionality. Now we see that even optimizing expensive computations isn‚Äôt a good reason to copy props into state. Our rendering result should respect changes to props. Don‚Äôt Stop the Data Flow in Side Effects So far, we‚Äôve talked about how to keep the rendering result consistent with prop changes. Avoiding copying props into state is a part of that. However, it is important that side effects (e.g. data fetching) are also a part of the data flow. Consider this React component: class SearchResults extends React.Component { state = { data: null }; componentDidMount() { this.fetchResults(); } fetchResults() { const url = this.getFetchUrl(); // Do the fetching... } getFetchUrl() { return 'http://myapi/results?query' + this.props.query; } render() { // ... } } A lot of React components are like this ‚Äî but if we look a bit closer, we‚Äôll notice a bug. The fetchResults method uses the query prop for data fetching: getFetchUrl() { return 'http://myapi/results?query' + this.props.query; } But what if the query prop changes? In our component, nothing will happen. This means our component‚Äôs side effects don‚Äôt respect changes to its props. This is a very common source of bugs in React applications. In order to fix our component, we need to: Look at componentDidMount and every method called from it. In our example, that‚Äôs fetchResults and getFetchUrl. Write down all props and state used by those methods. In our example, that‚Äôs this.props.query. Make sure that whenever those props change, we re-run the side effect. We can do this by adding the componentDidUpdate method. class SearchResults extends React.Component { state = { data: null }; componentDidMount() { this.fetchResults(); } componentDidUpdate(prevProps) { if (prevProps.query !== this.props.query) { // ‚úÖ Refetch on change this.fetchResults(); } } fetchResults() { const url = this.getFetchUrl(); // Do the fetching... } getFetchUrl() { return 'http://myapi/results?query' + this.props.query; // ‚úÖ Updates are handled } render() { // ... } } Now our code respects all changes to props, even for side effects. However, it‚Äôs challenging to remember not to break it again. For example, we might add currentPage to the local state, and use it in getFetchUrl: class SearchResults extends React.Component { state = { data: null, currentPage: 0, }; componentDidMount() { this.fetchResults(); } componentDidUpdate(prevProps) { if (prevProps.query !== this.props.query) { this.fetchResults(); } } fetchResults() { const url = this.getFetchUrl(); // Do the fetching... } getFetchUrl() { return ( 'http://myapi/results?query' + this.props.query + '\u0026page=' + this.state.currentPage // üî¥ Updates are ignored ); } render() { // ... } } Alas, our code is again buggy because our side effect doesn‚Äôt respect changes to currentPage. Props and state are a part of the React data flow. Both rendering and side effects should reflect changes in that data flow, not ignore them! To fix our code, we can repeat the steps above: Look at componentDidMount and every method called from it. In our example, that‚Äôs fetchResults and getFetchUrl. Write down all props and state used by those methods. In our example, that‚Äôs this.props.query and this.state.currentPage. Make sure that whenever those props change, we re-run the side effect. We can do this by changing the componentDidUpdate method. Let‚Äôs fix our component to handle updates to the currentPage state: class SearchResults extends React.Component { state = { data: null, currentPage: 0, }; componentDidMount() { this.fetchResults(); } componentDidUpdate(prevProps, prevState) { if ( prevState.currentPage !== this.state.currentPage || // ‚úÖ Refetch on change prevProps.query !== this.props.query ) { this.fetchResults(); } } fetchResults() { const url = this.getFetchUrl(); // Do the fetching... } getFetchUrl() { return ( 'http://myapi/results?query' + this.props.query + '\u0026page=' + this.state.currentPage // ‚úÖ Updates are handled ); } render() { // ... } } Wouldn‚Äôt it be nice if we could somehow automatically catch these mistakes? Isn‚Äôt that something a linter could help us with? Unfortunately, automatically checking a class component for consistency is too difficult. Any method can call any other method. Statically analyzing calls from componentDidMount and componentDidUpdate is fraught with false positives. However, one could design an API that can be statically analyzed for consistency. The React useEffect Hook is an example of such API: function SearchResults({ query }) { const [data, setData] = useState(null); const [currentPage, setCurrentPage] = useState(0); useEffect(() =\u003e { function fetchResults() { const url = getFetchUrl(); // Do the fetching... } function getFetchUrl() { return ( 'http://myapi/results?query' + query + '\u0026page=' + currentPage ); } fetchResults(); }, [currentPage, query]); // ‚úÖ Refetch on change // ... } We put the logic inside of the effect, and that makes it easier to see which values from the React data flow it depends on. These values are called ‚Äúdependencies‚Äù, and in our example they are [currentPage, query]. Note how this array of ‚Äúeffect dependencies‚Äù isn‚Äôt really a new concept. In a class, we had to search for these ‚Äúdependencies‚Äù through all the method calls. The useEffect API just makes the same concept explicit. This, in turn, lets us validate them automatically: (This is a demo of the new recommended exhaustive-deps lint rule which is a part of eslint-plugin-react-hooks. It will soon be included in Create React App.) Note that it is important to respect all prop and state updates for effects regardless of whether you‚Äôre writing component as a class or a function. With the class API, you have to think about consistency yourself, and verify that changes to every relevant prop or state are handled by componentDidUpdate. Otherwise, your component is not resilient to prop and state changes. This is not even a React-specific problem. It applies to any UI library that lets you handle ‚Äúcreation‚Äù and ‚Äúupdates‚Äù separately. The useEffect API flips the default by encouraging consistency. This might feel unfamiliar at first, but as a result your component becomes more resilient to changes in the logic. And since the ‚Äúdependencies‚Äù are now explicit, we can verify the effect is consistent using a lint rule. We‚Äôre using a linter to catch bugs! Don‚Äôt Stop the Data Flow in Optimizations There‚Äôs one more case where you might accidentally ignore changes to props. This mistake can occur when you‚Äôre manually optimizing your components. Note that optimization approaches that use shallow equality like PureComponent and React.memo with the default comparison are safe. However, if you try to ‚Äúoptimize‚Äù a component by writing your own comparison, you may mistakenly forget to compare function props: class Button extends React.Component { shouldComponentUpdate(prevProps) { // üî¥ Doesn't compare this.props.onClick return this.props.color !== prevProps.color; } render() { const onClick = this.props.onClick; // üî¥ Doesn't reflect updates const textColor = slowlyCalculateTextColor(this.props.color); return ( \u003cbutton onClick={onClick} className={'Button-' + this.props.color + ' Button-text-' + textColor}\u003e {this.props.children} \u003c/button\u003e ); } } It is easy to miss this mistake at first because with classes, you‚Äôd usually pass a method down, and so it would have the same identity anyway: class MyForm extends React.Component { handleClick = () =\u003e { // ‚úÖ Always the same function // Do something } render() { return ( \u003c\u003e \u003ch1\u003eHello!\u003c/h1\u003e \u003cButton color='green' onClick={this.handleClick}\u003e Press me \u003c/Button\u003e \u003c/\u003e ) } } So our optimization doesn‚Äôt break immediately. However, it will keep ‚Äúseeing‚Äù the old onClick value if it changes over time but other props don‚Äôt: class MyForm extends React.Component { state = { isEnabled: true }; handleClick = () =\u003e { this.setState({ isEnabled: false }); // Do something } render() { return ( \u003c\u003e \u003ch1\u003eHello!\u003c/h1\u003e \u003cButton color='green' onClick={ // üî¥ Button ignores updates to the onClick prop this.state.isEnabled ? this.handleClick : null }\u003e Press me \u003c/Button\u003e \u003c/\u003e ) } } In this example, clicking the button should disable it ‚Äî but this doesn‚Äôt happen because the Button component ignores any updates to the onClick prop. This could get even more confusing if the function identity itself depends on something that could change over time, like draft.content in this example: drafts.map(draft =\u003e \u003cButton color='blue' key={draft.id} onClick={ // üî¥ Button ignores updates to the onClick prop this.handlePublish.bind(this, draft.content) }\u003e Publish \u003c/Button\u003e ) While draft.content could change over time, our Button component ignored change to the onClick prop so it continues to see the ‚Äúfirst version‚Äù of the onClick bound method with the original draft.content. So how do we avoid this problem? I recommend to avoid manually implementing shouldComponentUpdate and to avoid specifying a custom comparison to React.memo(). The default shallow comparison in React.memo will respect changing function identity: function Button({ onClick, color, children }) { const textColor = slowlyCalculateTextColor(color); return ( \u003cbutton onClick={onClick} className={'Button-' + color + ' Button-text-' + textColor}\u003e {children} \u003c/button\u003e ); } export default React.memo(Button); // ‚úÖ Uses shallow comparison In a class, PureComponent has the same behavior. This ensures that passing a different function as a prop will always work. If you insist on a custom comparison, make sure that you don‚Äôt skip functions: shouldComponentUpdate(prevProps) { // ‚úÖ Compares this.props.onClick return ( this.props.color !== prevProps.color || this.props.onClick !== prevProps.onClick ); } As I mentioned earlier, it‚Äôs easy to miss this problem in a class component because method identities are often stable (but not always ‚Äî and that‚Äôs where the bugs become difficult to debug). With Hooks, the situation is a bit different: Functions are different on every render so you discover this problem right away. With useCallback and useContext, you can avoid passing functions deep down altogether. This lets you optimize rendering without worrying about functions. To sum up this section, don‚Äôt stop the data flow! Whenever you use props and state, consider what should happen if they change. In most cases, a component shouldn‚Äôt treat the initial render and updates differently. That makes it resilient to changes in the logic. With classes, it‚Äôs easy to forget about updates when using props and state inside the lifecycle methods. Hooks nudge you to do the right thing ‚Äî but it takes some mental adjustment if you‚Äôre not used to already doing it. Principle 2: Always Be Ready to Render React components let you write rendering code without worrying too much about time. You describe how the UI should look at any given moment, and React makes it happen. Take advantage of that model! Don‚Äôt try to introduce unnecessary timing assumptions into your component behavior. Your component should be ready to re-render at any time. How can one violate this principle? React doesn‚Äôt make it very easy ‚Äî but you can do it by using the legacy componentWillReceiveProps lifecycle method: class TextInput extends React.Component { state = { value: '' }; // üî¥ Resets local state on every parent render componentWillReceiveProps(nextProps) { this.setState({ value: nextProps.value }); } handleChange = (e) =\u003e { this.setState({ value: e.target.value }); }; render() { return ( \u003cinput value={this.state.value} onChange={this.handleChange} /\u003e ); } } In this example, we keep value in the local state, but we also receive value from props. Whenever we ‚Äúreceive new props‚Äù, we reset the value in state. The problem with this pattern is that it entirely relies on accidental timing. Maybe today this component‚Äôs parent updates rarely, and so our TextInput only ‚Äúreceives props‚Äù when something important happens, like saving a form. But tomorrow you might add some animation to the parent of TextInput. If its parent re-renders more often, it will keep ‚Äúblowing away‚Äù the child state! You can read more about this problem in ‚ÄúYou Probably Don‚Äôt Need Derived State‚Äù. So how can we fix this? First of all, we need to fix our mental model. We need to stop thinking of ‚Äúreceiving props‚Äù as something different from just ‚Äúrendering‚Äù. A re-render caused by a parent shouldn‚Äôt behave differently from a re-render caused by our own local state change. Components should be resilient to rendering less or more often because otherwise they‚Äôre too coupled to their particular parents. (This demo shows how re-rendering can break fragile components.) While there are a few different solutions for when you truly want to derive state from props, usually you should use either a fully controlled component: // Option 1: Fully controlled component. function TextInput({ value, onChange }) { return ( \u003cinput value={value} onChange={onChange} /\u003e ); } Or you can use an uncontrolled component with a key to reset it: // Option 2: Fully uncontrolled component. function TextInput() { const [value, setValue] = useState(''); return ( \u003cinput value={value} onChange={e =\u003e setValue(e.target.value)} /\u003e ); } // We can reset its internal state later by changing the key: \u003cTextInput key={formId} /\u003e The takeaway from this section is that your component shouldn‚Äôt break just because it or its parent re-renders more often. The React API design makes it easy if you avoid the legacy componentWillReceiveProps lifecycle method. To stress-test your component, you can temporarily add this code to its parent: componentDidMount() { // Don't forget to remove this immediately! setInterval(() =\u003e this.forceUpdate(), 100); } Don‚Äôt leave this code in ‚Äî it‚Äôs just a quick way to check what happens when a parent re-renders more often than you expected. It shouldn‚Äôt break the child! You might be thinking: ‚ÄúI‚Äôll keep resetting state when the props change, but will prevent unnecessary re-renders with PureComponent‚Äù. This code should work, right? // ü§î Should prevent unnecessary re-renders... right? class TextInput extends React.PureComponent { state = { value: '' }; // üî¥ Resets local state on every parent render componentWillReceiveProps(nextProps) { this.setState({ value: nextProps.value }); } handleChange = (e) =\u003e { this.setState({ value: e.target.value }); }; render() { return ( \u003cinput value={this.state.value} onChange={this.handleChange} /\u003e ); } } At first, it might seem like this component solves the problem of¬†‚Äúblowing away‚Äù the state on parent re-render. After all, if the props are the same, we just skip the update ‚Äî and so componentWillReceiveProps doesn‚Äôt get called. However, this gives us a false sense of security. This component is still not resilient to actual prop changes. For example, if we added another often-changing prop, like an animated style, we would still ‚Äúlose‚Äù the internal state: \u003cTextInput style={{opacity: someValueFromState}} value={ // üî¥ componentWillReceiveProps in TextInput // resets to this value on every animation tick. value } /\u003e So this approach is still flawed. We can see that various optimizations like PureComponent, shouldComponentUpdate, and React.memo shouldn‚Äôt be used for controlling behavior. Only use them to improve performance where it helps. If removing an optimization breaks a component, it was too fragile to begin with. The solution here is the same as we described earlier. Don‚Äôt treat ‚Äúreceiving props‚Äù as a special event. Avoid ‚Äúsyncing‚Äù props and state. In most cases, every value should either be fully controlled (through props), or fully uncontrolled (in local state). Avoid derived state when you can. And always be ready to render! Principle 3: No Component Is a Singleton Sometimes we assume a certain component is only ever displayed once. Such as a navigation bar. This might be true for some time. However, this assumption often causes design problems that only surface much later. For example, maybe you need to implement an animation between two Page components on a route change ‚Äî the previous Page and the next Page. Both of them need to be mounted during the animation. However, you might discover that each of those components assumes it‚Äôs the only Page on the screen. It‚Äôs easy to check for these problems. Just for fun, try to render your app twice: ReactDOM.render( \u003c\u003e \u003cMyApp /\u003e \u003cMyApp /\u003e \u003c/\u003e, document.getElementById('root') ); Click around. (You might need to tweak some CSS for this experiment.) Does your app still behave as expected? Or do you see strange crashes and errors? It‚Äôs a good idea to do this stress test on complex components once in a while, and ensure that multiple copies of them don‚Äôt conflict with one another. An example of a problematic pattern I‚Äôve written myself a few times is performing global state ‚Äúcleanup‚Äù in componentWillUnmount: componentWillUnmount() { // Resets something in Redux store this.props.resetForm(); } Of course, if there are two such components on the page, unmounting one of them can break the other one. Resetting ‚Äúglobal‚Äù state on mount is no better: componentDidMount() { // Resets something in Redux store this.props.resetForm(); } In that case mounting a second form will break the first one. These patterns are good indicators of where our components are fragile. Showing or hiding a tree shouldn‚Äôt break components outside of that tree. Whether you plan to render this component twice or not, solving these issues pays off in the longer term. It leads you to a more resilient design. Principle 4: Keep the Local State Isolated Consider a social media Post component. It has a list of Comment threads (that can be expanded) and a NewComment input. React components may have local state. But what state is truly local? Is the post content itself local state or not? What about the list of comments? Or the record of which comment threads are expanded? Or the value of the comment input? If you‚Äôre used to putting everything into a ‚Äústate manager‚Äù, answering this question can be challenging. So here‚Äôs a simple way to decide. If you‚Äôre not sure whether some state is local, ask yourself: ‚ÄúIf this component was rendered twice, should this interaction reflect in the other copy?‚Äù Whenever the answer is ‚Äúno‚Äù, you found some local state. For example, imagine we rendered the same Post twice. Let‚Äôs look at different things inside of it that can change. Post content. We‚Äôd want editing the post in one tree to update it in another tree. Therefore, it probably should not be the local state of a Post component. (Instead, the post content could live in some cache like Apollo, Relay, or Redux.) List of comments. This is similar to post content. We‚Äôd want adding a new comment in one tree to be reflected in the other tree too. So ideally we would use some kind of a cache for it, and it should not be a local state of our Post. Which comments are expanded. It would be weird if expanding a comment in one tree would also expand it in another tree. In this case we‚Äôre interacting with a particular Comment UI representation rather than an abstract ‚Äúcomment entity‚Äù. Therefore, an ‚Äúexpanded‚Äù flag should be a local state of the Comment. The value of new comment input. It would be odd if typing a comment in one input would also update an input in another tree. Unless inputs are clearly grouped together, usually people expect them to be independent. So the input value should be a local state of the NewComment component. I don‚Äôt suggest a dogmatic interpretation of these rules. Of course, in a simpler app you might want to use local state for everything, including those ‚Äúcaches‚Äù. I‚Äôm only talking about the ideal user experience from the first principles. Avoid making truly local state global. This plays into our topic of ‚Äúresilience‚Äù: there‚Äôs fewer surprising synchronization happening between components. As a bonus, this also fixes a large class of performance issues. ‚ÄúOver-rendering‚Äù is much less of an issue when your state is in the right place. Recap Let‚Äôs recap these principles one more time: Don‚Äôt stop the data flow. Props and state can change, and components should handle those changes whenever they happen. Always be ready to render. A component shouldn‚Äôt break because it‚Äôs rendered more or less often. No component is a singleton. Even if a component is rendered just once, your design will improve if rendering twice doesn‚Äôt break it. Keep the local state isolated. Think about which state is local to a particular UI representation ‚Äî and don‚Äôt hoist that state higher than necessary. These principles help you write components that are optimized for change. It‚Äôs easy to add, change them, and delete them. And most importantly, once our components are resilient, we can come back to the pressing dilemma of whether or not props should be sorted by alphabet.Discuss on ùïè¬†¬†¬∑¬†¬†Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWhen people start learning React, they often ask for a style guide. While it‚Äôs a good idea to have some consistent rules applied across a project, a lot of them are arbitrary ‚Äî and so React doesn‚Äôt have a strong opinion about them.\u003c/p\u003e\n\u003cp\u003eYou can use different type systems, prefer function declarations or arrow functions, sort your props in alphabetical order or in an order you find pleasing.\u003c/p\u003e\n\u003cp\u003eThis flexibility allows \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/add-react-to-a-website.html\"\u003eintegrating React\u003c/a\u003e into projects with existing conventions. But it also invites endless debates.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThere \u003cem\u003eare\u003c/em\u003e important design principles that every component should strive to follow. But I don‚Äôt think style guides capture those principles well. We‚Äôll talk about style guides first, and then \u003ca target=\"_blank\" href=\"#writing-resilient-components\"\u003elook at the principles that really \u003cem\u003eare\u003c/em\u003e useful\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eDon‚Äôt Get Distracted by Imaginary Problems\u003c/h2\u003e\n\u003cp\u003eBefore we talk about component design principles, I want to say a few words about style guides. This isn‚Äôt a popular opinion but someone needs to say it!\u003c/p\u003e\n\u003cp\u003eIn the JavaScript community, there are a few strict opinionated style guides enforced by a linter. My personal observation is that they tend to create more friction than they‚Äôre worth. I can‚Äôt count how many times somebody showed me some absolutely valid code and said ‚ÄúReact complains about this‚Äù, but it was their lint config complaining! This leads to three issues:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePeople get used to seeing the linter as an \u003cstrong\u003eoverzealous noisy gatekeeper\u003c/strong\u003e rather than a helpful tool. Useful warnings are drowned out by a sea of style nits. As a result, people don‚Äôt scan the linter messages while debugging, and miss helpful tips. Additionally, people who are less used to writing JavaScript (for example, designers) have a harder time working with the code.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePeople don‚Äôt learn to \u003cstrong\u003edifferentiate between valid and invalid uses\u003c/strong\u003e of a certain pattern. For example, there is a popular rule that forbids calling \u003ccode\u003esetState\u003c/code\u003e inside \u003ccode\u003ecomponentDidMount\u003c/code\u003e. But if it was always ‚Äúbad‚Äù, React simply wouldn‚Äôt allow it! There is a legitimate use case for it, and that is to measure the DOM node layout ‚Äî e.g. to position a tooltip. I‚Äôve seen people ‚Äúwork around‚Äù this rule by adding a \u003ccode\u003esetTimeout\u003c/code\u003e which completely misses the point.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEventually, people adopt the ‚Äúenforcer mindset‚Äù and get opinionated about things that \u003cstrong\u003edon‚Äôt bring a meaningful difference\u003c/strong\u003e but are easy to scan for in the code. ‚ÄúYou used a function declaration, but \u003cem\u003eour\u003c/em\u003e project uses arrow functions.‚Äù Whenever I have a strong feeling about enforcing a rule like this, looking deeper reveals that I invested emotional effort into this rule ‚Äî and struggle to let it go. It lulls me into a false sense of accomplishment without improving my code.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAm I saying that we should stop linting? Not at all!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWith a good config, a linter is a great tool to catch bugs before they happen.\u003c/strong\u003e It‚Äôs focusing on the \u003cem\u003estyle\u003c/em\u003e too much that turns it into a distraction.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eMarie Kondo Your Lint Config\u003c/h2\u003e\n\u003cp\u003eHere‚Äôs what I suggest you to do on Monday. Gather your team for half an hour, go through every lint rule enabled in your project‚Äôs config, and ask yourself: \u003cem\u003e‚ÄúHas this rule ever helped us catch a bug?‚Äù\u003c/em\u003e If not, \u003cem\u003eturn it off.\u003c/em\u003e (You can also start from a clean slate with \u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/eslint-config-react-app\"\u003e\u003ccode\u003eeslint-config-react-app\u003c/code\u003e\u003c/a\u003e which has no styling rules.)\u003c/p\u003e\n\u003cp\u003eAt the very least, your team should have a process for removing rules that cause friction. Don‚Äôt assume that whatever you or something somebody else added to your lint config a year ago is a ‚Äúbest practice‚Äù. Question it and look for answers. Don‚Äôt let anyone tell you you‚Äôre not smart enough to pick your lint rules.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut what about formatting?\u003c/strong\u003e Use \u003ca target=\"_blank\" href=\"https://prettier.io/\"\u003ePrettier\u003c/a\u003e and forget about the ‚Äústyle nits‚Äù. You don‚Äôt need a tool to shout at you for putting an extra space if another tool can fix it for you. Use the linter to find \u003cem\u003ebugs\u003c/em\u003e, not enforcing the \u003cem\u003ea e s t h e t i c s\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eOf course, there are aspects of the coding style that aren‚Äôt directly related to formatting but can still be annoying when inconsistent across the project.\u003c/p\u003e\n\u003cp\u003eHowever, many of them are too subtle to catch with a lint rule anyway. This is why it‚Äôs important to \u003cstrong\u003ebuild trust\u003c/strong\u003e between the team members, and to share useful learnings in the form of a wiki page or a short design guide.\u003c/p\u003e\n\u003cp\u003eNot everything is worth automating! The insights gained from \u003cem\u003eactually reading\u003c/em\u003e the rationale in such a guide can be more valuable than following the ‚Äúrules‚Äù.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut if following a strict style guide is a distraction, what‚Äôs actually important?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThat‚Äôs the topic of this post.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eWriting Resilient Components\u003c/h2\u003e\n\u003cp\u003eNo amount of indentation or sorting imports alphabetically can fix a broken design. So instead of focusing on how some code \u003cem\u003elooks\u003c/em\u003e, I will focus on how it \u003cem\u003eworks\u003c/em\u003e. There‚Äôs a few component design principles that I find very helpful:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-1-dont-stop-the-data-flow\"\u003eDon‚Äôt stop the data flow\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-2-always-be-ready-to-render\"\u003eAlways be ready to render\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-3-no-component-is-a-singleton\"\u003eNo component is a singleton\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-4-keep-the-local-state-isolated\"\u003eKeep the local state isolated\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEven if you don‚Äôt use React, you‚Äôll likely discover the same principles by trial and error for any UI component model with unidirectional data flow.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003ePrinciple 1: Don‚Äôt Stop the Data Flow\u003c/h2\u003e\n\u003ch3\u003eDon‚Äôt Stop the Data Flow in Rendering\u003c/h3\u003e\n\u003cp\u003eWhen somebody uses your component, they expect that they can pass different props to it over time, and that the component will reflect those changes:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// isOk might be driven by state and can change at any time\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e color={\u003c/span\u003e\u003cspan\u003eisOk\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn general, this is how React works by default. If you use a \u003ccode\u003ecolor\u003c/code\u003e prop inside a \u003ccode\u003eButton\u003c/code\u003e component, you‚Äôll see the value provided from above for that render:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ color\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ‚úÖ `color` is always fresh!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, a common mistake when learning React is to copy props into state:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    color\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst { \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// üî¥ `color` is stale!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis might seem more intuitive at first if you used classes outside of React. \u003cstrong\u003eHowever, by copying a prop into state you‚Äôre ignoring all updates to it.\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// üî¥ No longer works for updates with the above implementation\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e color={\u003c/span\u003e\u003cspan\u003eisOk\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the rare case that this behavior \u003cem\u003eis\u003c/em\u003e intentional, make sure to call that prop \u003ccode\u003einitialColor\u003c/code\u003e or \u003ccode\u003edefaultColor\u003c/code\u003e to clarify that changes to it are ignored.\u003c/p\u003e\n\u003cp\u003eBut usually you‚Äôll want to \u003cstrong\u003eread the props directly in your component\u003c/strong\u003e and avoid copying props (or anything computed from the props) into state:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ color\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ‚úÖ `color` is always fresh!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003chr/\u003e\n\u003cp\u003eComputed values are another reason people sometimes attempt to copy props into state. For example, imagine that we determined the \u003cem\u003ebutton text\u003c/em\u003e color based on an expensive computation with background \u003ccode\u003ecolor\u003c/code\u003e as an argument:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    textColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// üî¥ Stale on `color` prop updates\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis component is buggy because it doesn‚Äôt recalculate \u003ccode\u003ethis.state.textColor\u003c/code\u003e on the \u003ccode\u003ecolor\u003c/code\u003e prop change. The easiest fix would be to move the \u003ccode\u003etextColor\u003c/code\u003e calculation into the \u003ccode\u003erender\u003c/code\u003e method, and make this a \u003ccode\u003ePureComponent\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePureComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Always fresh\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eProblem solved! Now if props change, we‚Äôll recalculate \u003ccode\u003etextColor\u003c/code\u003e, but we avoid the expensive computation on the same props.\u003c/p\u003e\n\u003cp\u003eHowever, we might want to optimize it further. What if it‚Äôs the \u003ccode\u003echildren\u003c/code\u003e prop that changed? It seems unfortunate to recalculate the \u003ccode\u003etextColor\u003c/code\u003e in that case. Our second attempt might be to invoke the calculation in \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    textColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// üòî Extra re-render for every update\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        textColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Fresh on final render\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, this would mean our component does a second re-render after every change. That‚Äôs not ideal either if we‚Äôre trying to optimize it.\u003c/p\u003e\n\u003cp\u003eYou could use the legacy \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e lifecycle for this. However, people often put side effects there too. That, in turn, often causes problems for the upcoming Concurrent Rendering \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\"\u003efeatures like Time Slicing and Suspense\u003c/a\u003e. And the ‚Äúsafer‚Äù \u003ccode\u003egetDerivedStateFromProps\u003c/code\u003e method is clunky.\u003c/p\u003e\n\u003cp\u003eLet‚Äôs step back for a second. Effectively, we want \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Memoization\"\u003e\u003cem\u003ememoization\u003c/em\u003e\u003c/a\u003e. We have some inputs, and we don‚Äôt want to recalculate the output unless the inputs change.\u003c/p\u003e\n\u003cp\u003eWith a class, you could use a \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization\"\u003ehelper\u003c/a\u003e for memoization. However, Hooks take this a step further, giving you a built-in way to memoize expensive computations:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ color\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseMemo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Don‚Äôt recalculate until `color` changes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat‚Äôs all the code you need!\u003c/p\u003e\n\u003cp\u003eIn a class component, you can use a helper like \u003ca target=\"_blank\" href=\"https://github.com/alexreardon/memoize-one\"\u003e\u003ccode\u003ememoize-one\u003c/code\u003e\u003c/a\u003e for that. In a function component, \u003ccode\u003euseMemo\u003c/code\u003e Hook gives you similar functionality.\u003c/p\u003e\n\u003cp\u003eNow we see that \u003cstrong\u003eeven optimizing expensive computations isn‚Äôt a good reason to copy props into state.\u003c/strong\u003e Our rendering result should respect changes to props.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3\u003eDon‚Äôt Stop the Data Flow in Side Effects\u003c/h3\u003e\n\u003cp\u003eSo far, we‚Äôve talked about how to keep the rendering result consistent with prop changes. Avoiding copying props into state is a part of that. However, it is important that \u003cstrong\u003eside effects (e.g. data fetching) are also a part of the data flow\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eConsider this React component:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eSearchResults\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    data\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do the fetching...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA lot of React components are like this ‚Äî but if we look a bit closer, we‚Äôll notice a bug. The \u003ccode\u003efetchResults\u003c/code\u003e method uses the \u003ccode\u003equery\u003c/code\u003e prop for data fetching:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what if the \u003ccode\u003equery\u003c/code\u003e prop changes? In our component, nothing will happen. \u003cstrong\u003eThis means our component‚Äôs side effects don‚Äôt respect changes to its props.\u003c/strong\u003e This is a very common source of bugs in React applications.\u003c/p\u003e\n\u003cp\u003eIn order to fix our component, we need to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLook at \u003ccode\u003ecomponentDidMount\u003c/code\u003e and every method called from it.\n\u003cul\u003e\n\u003cli\u003eIn our example, that‚Äôs \u003ccode\u003efetchResults\u003c/code\u003e and \u003ccode\u003egetFetchUrl\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite down all props and state used by those methods.\n\u003cul\u003e\n\u003cli\u003eIn our example, that‚Äôs \u003ccode\u003ethis.props.query\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMake sure that whenever those props change, we re-run the side effect.\n\u003cul\u003e\n\u003cli\u003eWe can do this by adding the \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eSearchResults\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    data\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Refetch on change\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do the fetching...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Updates are handled\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow our code respects all changes to props, even for side effects.\u003c/p\u003e\n\u003cp\u003eHowever, it‚Äôs challenging to remember not to break it again. For example, we might add \u003ccode\u003ecurrentPage\u003c/code\u003e to the local state, and use it in \u003ccode\u003egetFetchUrl\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eSearchResults\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    data\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    currentPage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do the fetching...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026amp;page=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentPage \u003c/span\u003e\u003cspan\u003e// üî¥ Updates are ignored\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlas, our code is again buggy because our side effect doesn‚Äôt respect changes to \u003ccode\u003ecurrentPage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eProps and state are a part of the React data flow. Both rendering and side effects should reflect changes in that data flow, not ignore them!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eTo fix our code, we can repeat the steps above:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLook at \u003ccode\u003ecomponentDidMount\u003c/code\u003e and every method called from it.\n\u003cul\u003e\n\u003cli\u003eIn our example, that‚Äôs \u003ccode\u003efetchResults\u003c/code\u003e and \u003ccode\u003egetFetchUrl\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWrite down all props and state used by those methods.\n\u003cul\u003e\n\u003cli\u003eIn our example, that‚Äôs \u003ccode\u003ethis.props.query\u003c/code\u003e \u003cstrong\u003eand \u003ccode\u003ethis.state.currentPage\u003c/code\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMake sure that whenever those props change, we re-run the side effect.\n\u003cul\u003e\n\u003cli\u003eWe can do this by changing the \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet‚Äôs fix our component to handle updates to the \u003ccode\u003ecurrentPage\u003c/code\u003e state:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eSearchResults\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    data\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    currentPage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e prevState\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eprevState\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentPage \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentPage \u003c/span\u003e\u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Refetch on change\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do the fetching...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equery \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026amp;page=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrentPage \u003c/span\u003e\u003cspan\u003e// ‚úÖ Updates are handled\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eWouldn‚Äôt it be nice if we could somehow automatically catch these mistakes?\u003c/strong\u003e Isn‚Äôt that something a linter could help us with?\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eUnfortunately, automatically checking a class component for consistency is too difficult. Any method can call any other method. Statically analyzing calls from \u003ccode\u003ecomponentDidMount\u003c/code\u003e and \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e is fraught with false positives.\u003c/p\u003e\n\u003cp\u003eHowever, one \u003cem\u003ecould\u003c/em\u003e design an API that \u003cem\u003ecan\u003c/em\u003e be statically analyzed for consistency. The \u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003eReact \u003ccode\u003euseEffect\u003c/code\u003e Hook\u003c/a\u003e is an example of such API:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eSearchResults\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ query }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetData\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecurrentPage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCurrentPage\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// Do the fetching...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetFetchUrl\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttp://myapi/results?query\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e query \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026amp;page=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e currentPage\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efetchResults\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecurrentPage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e query\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Refetch on change\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe put the logic \u003cem\u003einside\u003c/em\u003e of the effect, and that makes it easier to see \u003cem\u003ewhich values from the React data flow\u003c/em\u003e it depends on. These values are called ‚Äúdependencies‚Äù, and in our example they are \u003ccode\u003e[currentPage, query]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote how this array of ‚Äúeffect dependencies‚Äù isn‚Äôt really a new concept. In a class, we had to search for these ‚Äúdependencies‚Äù through all the method calls. The \u003ccode\u003euseEffect\u003c/code\u003e API just makes the same concept explicit.\u003c/p\u003e\n\u003cp\u003eThis, in turn, lets us validate them automatically:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/writing-resilient-components/useeffect.gif\" alt=\"Demo of exhaustive-deps lint rule\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(This is a demo of the new recommended \u003ccode\u003eexhaustive-deps\u003c/code\u003e lint rule which is a part of \u003ccode\u003eeslint-plugin-react-hooks\u003c/code\u003e. It will soon be included in Create React App.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote that it is important to respect all prop and state updates for effects regardless of whether you‚Äôre writing component as a  class or a function.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWith the class API, you have to think about consistency yourself, and verify that changes to every relevant prop or state are handled by \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. Otherwise, your component is not resilient to prop and state changes. This is not even a React-specific problem. It applies to any UI library that lets you handle ‚Äúcreation‚Äù and ‚Äúupdates‚Äù separately.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe \u003ccode\u003euseEffect\u003c/code\u003e API flips the default by encouraging consistency.\u003c/strong\u003e This \u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\u003emight feel unfamiliar at first\u003c/a\u003e, but as a result your component becomes more resilient to changes in the logic. And since the ‚Äúdependencies‚Äù are now explicit, we can \u003cem\u003everify\u003c/em\u003e the effect is consistent using a lint rule. We‚Äôre using a linter to catch bugs!\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3\u003eDon‚Äôt Stop the Data Flow in Optimizations\u003c/h3\u003e\n\u003cp\u003eThere‚Äôs one more case where you might accidentally ignore changes to props. This mistake can occur when you‚Äôre manually optimizing your components.\u003c/p\u003e\n\u003cp\u003eNote that optimization approaches that use shallow equality like \u003ccode\u003ePureComponent\u003c/code\u003e and \u003ccode\u003eReact.memo\u003c/code\u003e with the default comparison are safe.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHowever, if you try to ‚Äúoptimize‚Äù a component by writing your own comparison, you may mistakenly forget to compare function props:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshouldComponentUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// üî¥ Doesn\u0026#39;t compare this.props.onClick \u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// üî¥ Doesn\u0026#39;t reflect updates\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onClick={\u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is easy to miss this mistake at first because with classes, you‚Äôd usually pass a \u003cem\u003emethod\u003c/em\u003e down, and so it would have the same identity anyway:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMyForm\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Always the same function\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do something\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e color=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003egreen\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo our optimization doesn‚Äôt break \u003cem\u003eimmediately\u003c/em\u003e. However, it will keep ‚Äúseeing‚Äù the old \u003ccode\u003eonClick\u003c/code\u003e value if it changes over time but other props don‚Äôt:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMyForm\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isEnabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e isEnabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Do something\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e color=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003egreen\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e// üî¥ Button ignores updates to the onClick prop\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisEnabled\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        }\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this example, clicking the button should disable it ‚Äî but this doesn‚Äôt happen because the \u003ccode\u003eButton\u003c/code\u003e component ignores any updates to the \u003ccode\u003eonClick\u003c/code\u003e prop.\u003c/p\u003e\n\u003cp\u003eThis could get even more confusing if the function identity itself depends on something that could change over time, like \u003ccode\u003edraft.content\u003c/code\u003e in this example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edrafts\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edraft \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      color=\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      key={\u003c/span\u003e\u003cspan\u003edraft\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      onClick={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e// üî¥ Button ignores updates to the onClick prop\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandlePublish\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003edraft\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Publish\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile \u003ccode\u003edraft.content\u003c/code\u003e could change over time, our \u003ccode\u003eButton\u003c/code\u003e component ignored change to the \u003ccode\u003eonClick\u003c/code\u003e prop so it continues to see the ‚Äúfirst version‚Äù of the \u003ccode\u003eonClick\u003c/code\u003e bound method with the original \u003ccode\u003edraft.content\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSo how do we avoid this problem?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI recommend to avoid manually implementing \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e and to avoid specifying a custom comparison to \u003ccode\u003eReact.memo()\u003c/code\u003e. The default shallow comparison in \u003ccode\u003eReact.memo\u003c/code\u003e will respect changing function identity:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ onClick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e color\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslowlyCalculateTextColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      onClick={\u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      className={\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eButton-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e Button-text-\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003etextColor\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ememo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ‚úÖ Uses shallow comparison\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn a class, \u003ccode\u003ePureComponent\u003c/code\u003e has the same behavior.\u003c/p\u003e\n\u003cp\u003eThis ensures that passing a different function as a prop will always work.\u003c/p\u003e\n\u003cp\u003eIf you insist on a custom comparison, \u003cstrong\u003emake sure that you don‚Äôt skip functions:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshouldComponentUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ‚úÖ Compares this.props.onClick \u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e||\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonClick \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs I mentioned earlier, it‚Äôs easy to miss this problem in a class component because method identities are often stable (but not always ‚Äî and that‚Äôs where the bugs become difficult to debug). With Hooks, the situation is a bit different:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFunctions are different \u003cem\u003eon every render\u003c/em\u003e so you discover this problem \u003ca target=\"_blank\" href=\"https://github.com/facebook/react/issues/14972#issuecomment-468280039\"\u003eright away\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eWith \u003ccode\u003euseCallback\u003c/code\u003e and \u003ccode\u003euseContext\u003c/code\u003e, you can \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\"\u003eavoid passing functions deep down altogether\u003c/a\u003e. This lets you optimize rendering without worrying about functions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr/\u003e\n\u003cp\u003eTo sum up this section, \u003cstrong\u003edon‚Äôt stop the data flow!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhenever you use props and state, consider what should happen if they change. In most cases, a component shouldn‚Äôt treat the initial render and updates differently. That makes it resilient to changes in the logic.\u003c/p\u003e\n\u003cp\u003eWith classes, it‚Äôs easy to forget about updates when using props and state inside the lifecycle methods. Hooks nudge you to do the right thing ‚Äî but it takes some mental adjustment if you‚Äôre not used to already doing it.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003ePrinciple 2: Always Be Ready to Render\u003c/h2\u003e\n\u003cp\u003eReact components let you write rendering code without worrying too much about time. You describe how the UI \u003cem\u003eshould\u003c/em\u003e look at any given moment, and React makes it happen. Take advantage of that model!\u003c/p\u003e\n\u003cp\u003eDon‚Äôt try to introduce unnecessary timing assumptions into your component behavior. \u003cstrong\u003eYour component should be ready to re-render at any time.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHow can one violate this principle? React doesn‚Äôt make it very easy ‚Äî but you can do it by using the legacy \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e lifecycle method:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// üî¥ Resets local state on every parent render\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentWillReceiveProps\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enextProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enextProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleChange\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleChange\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this example, we keep \u003ccode\u003evalue\u003c/code\u003e in the local state, but we \u003cem\u003ealso\u003c/em\u003e receive \u003ccode\u003evalue\u003c/code\u003e from props. Whenever we ‚Äúreceive new props‚Äù, we reset the \u003ccode\u003evalue\u003c/code\u003e in state.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem with this pattern is that it entirely relies on accidental timing.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMaybe today this component‚Äôs parent updates rarely, and so our \u003ccode\u003eTextInput\u003c/code\u003e only ‚Äúreceives props‚Äù when something important happens, like saving a form.\u003c/p\u003e\n\u003cp\u003eBut tomorrow you might add some animation to the parent of \u003ccode\u003eTextInput\u003c/code\u003e. If its parent re-renders more often, it will keep \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/m3w9zn1z8x\"\u003e‚Äúblowing away‚Äù\u003c/a\u003e the child state! You can read more about this problem in \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\"\u003e‚ÄúYou Probably Don‚Äôt Need Derived State‚Äù\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSo how can we fix this?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFirst of all, we need to fix our mental model. We need to stop thinking of ‚Äúreceiving props‚Äù as something different from just ‚Äúrendering‚Äù. A re-render caused by a parent shouldn‚Äôt behave differently from a re-render caused by our own local state change. \u003cstrong\u003eComponents should be resilient to rendering less or more often because otherwise they‚Äôre too coupled to their particular parents.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/m3w9zn1z8x\"\u003eThis demo\u003c/a\u003e shows how re-rendering can break fragile components.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWhile there are a few \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#preferred-solutions\"\u003edifferent\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\"\u003esolutions\u003c/a\u003e for when you \u003cem\u003etruly\u003c/em\u003e want to derive state from props, usually you should use either a fully controlled component:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Option 1: Fully controlled component.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ value\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e onChange }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      value={\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      onChange={\u003c/span\u003e\u003cspan\u003eonChange\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr you can use an uncontrolled component with a key to reset it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Option 2: Fully uncontrolled component.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetValue\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      value={\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      onChange={\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// We can reset its internal state later by changing the key:\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003eformId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe takeaway from this section is that your component shouldn‚Äôt break just because it or its parent re-renders more often. The React API design makes it easy if you avoid the legacy \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e lifecycle method.\u003c/p\u003e\n\u003cp\u003eTo stress-test your component, you can temporarily add this code to its parent:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Don\u0026#39;t forget to remove this immediately!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforceUpdate\u003c/span\u003e\u003cspan\u003e(),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDon‚Äôt leave this code in\u003c/strong\u003e ‚Äî it‚Äôs just a quick way to check what happens when a parent re-renders more often than you expected. It shouldn‚Äôt break the child!\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eYou might be thinking: ‚ÄúI‚Äôll keep resetting state when the props change, but will prevent unnecessary re-renders with \u003ccode\u003ePureComponent\u003c/code\u003e‚Äù.\u003c/p\u003e\n\u003cp\u003eThis code should work, right?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// ü§î Should prevent unnecessary re-renders... right?\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePureComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// üî¥ Resets local state on every parent render\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentWillReceiveProps\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enextProps\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enextProps\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleChange\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e value\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        value={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        onChange={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleChange\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt first, it might seem like this component solves the problem of¬†‚Äúblowing away‚Äù the state on parent re-render. After all, if the props are the same, we just skip the update ‚Äî and so \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e doesn‚Äôt get called.\u003c/p\u003e\n\u003cp\u003eHowever, this gives us a false sense of security. \u003cstrong\u003eThis component is still not resilient to \u003cem\u003eactual\u003c/em\u003e prop changes.\u003c/strong\u003e For example, if we added \u003cem\u003eanother\u003c/em\u003e often-changing prop, like an animated \u003ccode\u003estyle\u003c/code\u003e, we would still ‚Äúlose‚Äù the internal state:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTextInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  style={{\u003c/span\u003e\u003cspan\u003eopacity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e someValueFromState\u003c/span\u003e\u003cspan\u003e}}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  value={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// üî¥ componentWillReceiveProps in TextInput\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// resets to this value on every animation tick.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo this approach is still flawed. We can see that various optimizations like \u003ccode\u003ePureComponent\u003c/code\u003e, \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, and \u003ccode\u003eReact.memo\u003c/code\u003e shouldn‚Äôt be used for controlling \u003cem\u003ebehavior\u003c/em\u003e. Only use them to improve \u003cem\u003eperformance\u003c/em\u003e where it helps. If removing an optimization \u003cem\u003ebreaks\u003c/em\u003e a component, it was too fragile to begin with.\u003c/p\u003e\n\u003cp\u003eThe solution here is the same as we described earlier. Don‚Äôt treat ‚Äúreceiving props‚Äù as a special event. Avoid ‚Äúsyncing‚Äù props and state. In most cases, every value should either be fully controlled (through props), or fully uncontrolled (in local state). Avoid derived state \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#preferred-solutions\"\u003ewhen you can\u003c/a\u003e. \u003cstrong\u003eAnd always be ready to render!\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003ePrinciple 3: No Component Is a Singleton\u003c/h2\u003e\n\u003cp\u003eSometimes we assume a certain component is only ever displayed once. Such as a navigation bar. This might be true for some time. However, this assumption often causes design problems that only surface much later.\u003c/p\u003e\n\u003cp\u003eFor example, maybe you need to implement an animation \u003cem\u003ebetween\u003c/em\u003e two \u003ccode\u003ePage\u003c/code\u003e components on a route change ‚Äî the previous \u003ccode\u003ePage\u003c/code\u003e and the next \u003ccode\u003ePage\u003c/code\u003e. Both of them need to be mounted during the animation. However, you might discover that each of those components assumes it‚Äôs the only \u003ccode\u003ePage\u003c/code\u003e on the screen.\u003c/p\u003e\n\u003cp\u003eIt‚Äôs easy to check for these problems. Just for fun, try to render your app twice:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eReactDOM\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eMyApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eMyApp\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eroot\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClick around. (You might need to tweak some CSS for this experiment.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDoes your app still behave as expected?\u003c/strong\u003e Or do you see strange crashes and errors? It‚Äôs a good idea to do this stress test on complex components once in a while, and ensure that multiple copies of them don‚Äôt conflict with one another.\u003c/p\u003e\n\u003cp\u003eAn example of a problematic pattern I‚Äôve written myself a few times is performing global state ‚Äúcleanup‚Äù in \u003ccode\u003ecomponentWillUnmount\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ecomponentWillUnmount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Resets something in Redux store\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eresetForm\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, if there are two such components on the page, unmounting one of them can break the other one. Resetting ‚Äúglobal‚Äù state on \u003cem\u003emount\u003c/em\u003e is no better:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Resets something in Redux store\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eresetForm\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn that case \u003cem\u003emounting\u003c/em\u003e a second form will break the first one.\u003c/p\u003e\n\u003cp\u003eThese patterns are good indicators of where our components are fragile. \u003cstrong\u003e\u003cem\u003eShowing\u003c/em\u003e or \u003cem\u003ehiding\u003c/em\u003e a tree shouldn‚Äôt break components outside of that tree.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhether you plan to render this component twice or not, solving these issues pays off in the longer term. It leads you to a more resilient design.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003ePrinciple 4: Keep the Local State Isolated\u003c/h2\u003e\n\u003cp\u003eConsider a social media \u003ccode\u003ePost\u003c/code\u003e component. It has a list of \u003ccode\u003eComment\u003c/code\u003e threads (that can be expanded) and a \u003ccode\u003eNewComment\u003c/code\u003e input.\u003c/p\u003e\n\u003cp\u003eReact components may have local state. But what state is truly local? Is the post content itself local state or not? What about the list of comments? Or the record of which comment threads are expanded? Or the value of the comment input?\u003c/p\u003e\n\u003cp\u003eIf you‚Äôre used to putting everything into a ‚Äústate manager‚Äù, answering this question can be challenging. So here‚Äôs a simple way to decide.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIf you‚Äôre not sure whether some state is local, ask yourself: ‚ÄúIf this component was rendered twice, should this interaction reflect in the other copy?‚Äù Whenever the answer is ‚Äúno‚Äù, you found some local state.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor example, imagine we rendered the same \u003ccode\u003ePost\u003c/code\u003e twice. Let‚Äôs look at different things inside of it that can change.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003ePost content.\u003c/em\u003e We‚Äôd want editing the post in one tree to update it in another tree. Therefore, it probably \u003cstrong\u003eshould not\u003c/strong\u003e be the local state of a \u003ccode\u003ePost\u003c/code\u003e component. (Instead, the post content could live in some cache like Apollo, Relay, or Redux.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eList of comments.\u003c/em\u003e This is similar to post content. We‚Äôd want adding a new comment in one tree to be reflected in the other tree too. So ideally we would use some kind of a cache for it, and it \u003cstrong\u003eshould not\u003c/strong\u003e be a local state of our \u003ccode\u003ePost\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eWhich comments are expanded.\u003c/em\u003e It would be weird if expanding a comment in one tree would also expand it in another tree. In this case we‚Äôre interacting with a particular \u003ccode\u003eComment\u003c/code\u003e \u003cem\u003eUI representation\u003c/em\u003e rather than an abstract ‚Äúcomment entity‚Äù. Therefore, an ‚Äúexpanded‚Äù flag \u003cstrong\u003eshould\u003c/strong\u003e be a local state of the \u003ccode\u003eComment\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eThe value of new comment input.\u003c/em\u003e It would be odd if typing a comment in one input would also update an input in another tree. Unless inputs are clearly grouped together, usually people expect them to be independent. So the input value \u003cstrong\u003eshould\u003c/strong\u003e be a local state of the \u003ccode\u003eNewComment\u003c/code\u003e component.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI don‚Äôt suggest a dogmatic interpretation of these rules. Of course, in a simpler app you might want to use local state for everything, including those ‚Äúcaches‚Äù. I‚Äôm only talking about the ideal user experience \u003ca href=\"https://overreacted.io/the-elements-of-ui-engineering/\"\u003efrom the first principles\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAvoid making truly local state global.\u003c/strong\u003e This plays into our topic of ‚Äúresilience‚Äù: there‚Äôs fewer surprising synchronization happening between components. As a bonus, this \u003cem\u003ealso\u003c/em\u003e fixes a large class of performance issues. ‚ÄúOver-rendering‚Äù is much less of an issue when your state is in the right place.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eRecap\u003c/h2\u003e\n\u003cp\u003eLet‚Äôs recap these principles one more time:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-1-dont-stop-the-data-flow\"\u003eDon‚Äôt stop the data flow.\u003c/a\u003e\u003c/strong\u003e Props and state can change, and components should handle those changes whenever they happen.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-2-always-be-ready-to-render\"\u003eAlways be ready to render.\u003c/a\u003e\u003c/strong\u003e A component shouldn‚Äôt break because it‚Äôs rendered more or less often.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-3-no-component-is-a-singleton\"\u003eNo component is a singleton.\u003c/a\u003e\u003c/strong\u003e Even if a component is rendered just once, your design will improve if rendering twice doesn‚Äôt break it.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca target=\"_blank\" href=\"#principle-4-keep-the-local-state-isolated\"\u003eKeep the local state isolated.\u003c/a\u003e\u003c/strong\u003e Think about which state is local to a particular UI representation ‚Äî and don‚Äôt hoist that state higher than necessary.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eThese principles help you write components that are \u003ca href=\"https://overreacted.io/optimized-for-change/\"\u003eoptimized for change\u003c/a\u003e. It‚Äôs easy to add, change them, and delete them.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAnd most importantly, once our components are resilient, we can come back to the pressing dilemma of whether or not props should be sorted by alphabet.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fwriting-resilient-components%2F\"\u003eDiscuss on ùïè\u003c/a\u003e¬†¬†¬∑¬†¬†\u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/writing-resilient-components/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "33 min read",
  "publishedTime": null,
  "modifiedTime": null
}
