{
  "id": "7883547e-7916-4fa0-941e-fdf3455e1a19",
  "title": "Implementing Dark Mode in iOS 13",
  "link": "https://instagram-engineering.com/instagram-darkmode-58802b43c0f2?source=rss----37dc2a3034f2---4",
  "description": "",
  "author": "Tim Johnsen",
  "published": "Tue, 08 Oct 2019 16:30:51 GMT",
  "source": "https://instagram-engineering.com/feed/",
  "categories": [
    "engineering",
    "dark-mode",
    "instagram",
    "ios",
    "ios-13"
  ],
  "byline": "Tim Johnsen",
  "length": 9487,
  "excerpt": "One of the most exciting announcements at WWDC this year was the introduction of platform-wide dark mode in iOS 13. During WWDC a group of enthusiastic iOS engineers and designers from Instagram’s…",
  "siteName": "Instagram Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "One of the most exciting announcements at WWDC this year was the introduction of platform-wide dark mode in iOS 13. During WWDC a group of enthusiastic iOS engineers and designers from Instagram’s design systems team banded together to begin plotting out what it would take to adopt dark mode in our app. This week’s update to Instagram includes full support for iOS dark mode. This took months of work and collaboration between numerous design and engineering teams in the company. As such, we wanted to take some time to share how we approached adopting dark mode and some of the obstacles we encountered along the way.API PhilosophyApple did an excellent job shaping how dark mode works in iOS 13. Most of the heavy lifting is done on your behalf by UIKit. Because of this, one of the key principles we had when building out dark mode support in our app was that we should “stand on the shoulders of giants” and try to stick with Apple’s APIs as much as possible. This is beneficial for several reasons.Ease of use — UIKit does most of the work in selecting appropriate colors and transitioning between light mode and dark mode. If we wrote our own APIs we’d have to handle this ourselves.Maintainability — Apple maintains the APIs so we don’t have to. Any wrappers we have can ultimately be switched over to just use UIKit APIs as soon as our minimum supported OS version is iOS 13.Familiarity — Newcomers to Instagram’s iOS codebase who are familiar with how UIKit does dark mode will feel right at home.That being said, we didn’t use UIKit’s APIs alone since most developers in the company and our build systems are all still using Xcode 10, and introducing iOS 13 APIs would cause build breakages. We went with the approach of writing thin wrappers around UIKit APIs that are compatible with Xcode 10 and iOS 12.Another principle we followed was to introduce as few APIs as possible, and only when needed. The key reason for this was to reduce complexity for product teams adopting dark mode: it’s harder to misunderstand or misuse APIs if there are fewer of them. We started off with just wrappers around dynamic colors and a semantic color palette that our design systems team created, then introduced additional APIs over time as the need grew within the company. To increase awareness and ensure steady adoption, whenever we introduced a new API we announced it in an internal dark mode working group and documented it in an internal wiki page for the project.Primitives and ConceptsApple defines some handy dark mode primitives and concepts, and since we decided to build on top of their APIs we embraced these as well. Covering them at a high level, we have.Dynamic colors — Colors that change in response to light mode/dark mode changes. Also can change in response to “elevation” and accessibility settings.Dynamic images — Similar to dynamic colors, these are images that change in response to light mode/dark mode changes.Semantic colors — Named dynamic colors that serve a specific purpose. For example “destructive button color” or “link text color”.Elevation level — Things presented modally in dark mode change colors very slightly to demonstrate that they’re a layer on top of the underlying UI. This concept largely hasn’t existed in light mode because dark dimming layers are sufficient to differentiate modal layers presented on top of others.Building UIKit WrappersOne of the key APIs iOS 13 introduces for dark mode support is UIColor’s +colorWithDynamicProvider: method, which generates colors that automatically adapt to dark mode. This was the very first API we sought to wrap for use within Instagram and is still one of our most used dark mode APIs. We’ll walk through implementing it as a case study in building a backwards-compatible wrapper. The first step in building such an API is defining a macro that allows us to conditionally compile out code for people that are still using stable versions of Xcode. This is what ours looks like:Next we declare a wrapper function. Our wrapper for dynamic colors looks like this:Within this function we use our macro to ensure that developers using older versions of Xcode can still compile. We also introduce a runtime check so that the app continues to function normally on older versions of iOS. If both checks pass we simply call into the iOS 13 +colorWithDynamicProvider: API, otherwise we fall back to the light mode variant.You may notice that we’re passing an IGTraitCollection into IGColorWithDynamicProvider's block instead of a UITraitCollection. We introduced IGTraitCollection as a struct that contain's UITraitCollection's userInterfaceStyle and userInterfaceLevel values as isLight and isElevated respectively since those properties are only available when linked with newer iOS versions. More on that later. Now that we have IGColorWithDynamicProvider we can use it everywhere in the app where we need to use dynamic colors. Developers can use this freely without worrying about build failures or run time crashes regardless of what version of Xcode they or their peers are using. Instagram has historically had a semantic color palette that was introduced in our 2016 redesign, and we collaborated with our design systems team to update all the colors in it to support dark mode using IGColorWithDynamicProvider. Here’s an example of one of these colors.Once we had this pattern defined for wrapping UIKit’s API we continued to add more as they were needed. The set we ended up with is:IGColorWithDynamicProvider as shown hereIGImageWithDynamicProvider for creating “dynamic images“ that automatically adapt to dark mode.IGActivityIndicator functions for creating activity indicators with styles that work in light mode, dark mode, and older versions of iOS.IGSetOverrideUserInterfaceStyle for forcing views or view controllers into particular interface styles.IGSetOverrideElevationLevel for forcing view controllers into particular elevation levels.Small side note: We discovered towards the end of our dark mode adoption that our implementation of dynamic colors had equality implications because a new instance of UIColor was returned each time and the only thing that was comparable about each was the block passed in. In order to resolve this we modified our API slightly to create single instances of each of semantic colors so that they were comparable. Doing something like dispatch_once-ing your semantic colors or using asset catalog-based colors and +colorNamed: will produce comparable colors if your app is sensitive to color equality.Fake Dark ModeOne tricky thing when adopting technologies in iOS betas is getting adequate test coverage. Convincing people using the internal build of Instagram to install iOS 13 on their devices isn’t a great idea because it’s unstable and challenging to help set up, and even if we were to get people testing on iOS 13 the builds we distribute internally were still largely being linked against the iOS 12 SDK so the changes wouldn’t show up anyway.I briefly touched on our IGTraitCollection wrapper for UITraitCollection that came in handy in the course of building out dark mode. One clever testing trick this IGTraitCollection wrapper afforded us is something we’ve come to call “fake dark mode” — which is an internal setting that overrides IGTraitCollection to become dark even in iOS 12! Nate Stedman, one of our iOS engineers in New York, came up with this setting when we were first working on dark mode.Our internal menu’s “fake dark mode” option, and fake dark mode running in a build linked against the iOS 12 SDK.Our API for generating IGTraitCollections from UITraitCollections came to look like this.Where _IGIsDarkModeDebugEnabled is backed by an NSUserDefaults flag for fake dark mode. There are of course some limitations with faking out dark mode in iOS 12, most notablyuserInterfaceLevel isn’t available in iOS 12, so “elevated“ dynamic colors never appear in fake dark mode.Forcing particular styles via our -setOverrideInterfaceStyle: wrapper has no effect in fake dark mode.UIKit components that use their default colors don’t adapt to fake dark mode in iOS 12 since they have no knowledge of dark mode.With this addition to our dark mode wrappers we were able to get much broader test coverage than we otherwise would have.ConclusionDark mode has been a highly requested featured of ours for quite a while.A recent public Q\u0026A with Adam Mosseri, head of InstagramWe had been a little reluctant in introducing dark mode in the past because it would’ve been a tremendous undertaking, but the excellent tools that Apple provides and their emphasis on dark mode in iOS 13 finally made it possible for us! Of course the actual implementation still wasn’t easy, we’ve been working on this since WWDC and it demanded ample design and engineering deep dives into every part of the app (and admittedly, we have probably missed some). This journey has been worth it, on top of the benefits dark mode provides such as eye strain reduction and battery savings, it makes our app look right at home on iOS 13!A huge thank you to Jeremy Lawrence, Nate Stedman, Cameron Roth, Ryan Olson, Garrett Olinger, Paula Guzman, Héctor Ramos, Aaron Pang, and numerous others who contributed to our efforts to adopt dark mode. Dark mode is also available in Instagram for Android.If you want to learn more about this work or are interested joining one of our engineering teams, please visit our careers page, follow us on Facebook or on Twitter.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*d8-4IYqquJ0yGIKZ3bjzWg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"fb96\"\u003eOne of the most exciting announcements at WWDC this year was the introduction of platform-wide dark mode in iOS 13. During WWDC a group of enthusiastic iOS engineers and designers from Instagram’s design systems team banded together to begin plotting out what it would take to adopt dark mode in our app. This week’s update to Instagram includes full support for iOS dark mode. This took months of work and collaboration between numerous design and engineering teams in the company. As such, we wanted to take some time to share how we approached adopting dark mode and some of the obstacles we encountered along the way.\u003c/p\u003e\u003ch2 id=\"ab3f\"\u003eAPI Philosophy\u003c/h2\u003e\u003cp id=\"3c15\"\u003eApple did an excellent job shaping how dark mode works in iOS 13. Most of the heavy lifting is done on your behalf by UIKit. Because of this, one of the key principles we had when building out dark mode support in our app was that we should “stand on the shoulders of giants” and try to stick with Apple’s APIs as much as possible. This is beneficial for several reasons.\u003c/p\u003e\u003cul\u003e\u003cli id=\"50a6\"\u003e\u003cstrong\u003eEase of use\u003c/strong\u003e — UIKit does most of the work in selecting appropriate colors and transitioning between light mode and dark mode. If we wrote our own APIs we’d have to handle this ourselves.\u003c/li\u003e\u003cli id=\"7f0f\"\u003e\u003cstrong\u003eMaintainability\u003c/strong\u003e — Apple maintains the APIs so we don’t have to. Any wrappers we have can ultimately be switched over to just use UIKit APIs as soon as our minimum supported OS version is iOS 13.\u003c/li\u003e\u003cli id=\"e02e\"\u003e\u003cstrong\u003eFamiliarity\u003c/strong\u003e — Newcomers to Instagram’s iOS codebase who are familiar with how UIKit does dark mode will feel right at home.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0c65\"\u003eThat being said, we didn’t use UIKit’s APIs alone since most developers in the company and our build systems are all still using Xcode 10, and introducing iOS 13 APIs would cause build breakages. We went with the approach of writing thin wrappers around UIKit APIs that are compatible with Xcode 10 and iOS 12.\u003c/p\u003e\u003cp id=\"e8ff\"\u003eAnother principle we followed was to introduce as few APIs as possible, and only when needed. The key reason for this was to reduce complexity for product teams adopting dark mode: it’s harder to misunderstand or misuse APIs if there are fewer of them. We started off with just wrappers around dynamic colors and a semantic color palette that our design systems team created, then introduced additional APIs over time as the need grew within the company. To increase awareness and ensure steady adoption, whenever we introduced a new API we announced it in an internal dark mode working group and documented it in an internal wiki page for the project.\u003c/p\u003e\u003ch2 id=\"2858\"\u003ePrimitives and Concepts\u003c/h2\u003e\u003cp id=\"decd\"\u003eApple defines some handy dark mode primitives and concepts, and since we decided to build on top of their APIs we embraced these as well. Covering them at a high level, we have.\u003c/p\u003e\u003cul\u003e\u003cli id=\"3a49\"\u003e\u003cstrong\u003eDynamic colors \u003c/strong\u003e— Colors that change in response to light mode/dark mode changes. Also can change in response to “elevation” and accessibility settings.\u003c/li\u003e\u003cli id=\"acca\"\u003e\u003cstrong\u003eDynamic images\u003c/strong\u003e — Similar to dynamic colors, these are images that change in response to light mode/dark mode changes.\u003c/li\u003e\u003cli id=\"2477\"\u003e\u003cstrong\u003eSemantic colors\u003c/strong\u003e — Named dynamic colors that serve a specific purpose. For example “destructive button color” or “link text color”.\u003c/li\u003e\u003cli id=\"0a41\"\u003e\u003cstrong\u003eElevation level\u003c/strong\u003e — Things presented modally in dark mode change colors very slightly to demonstrate that they’re a layer on top of the underlying UI. This concept largely hasn’t existed in light mode because dark dimming layers are sufficient to differentiate modal layers presented on top of others.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"e0e1\"\u003eBuilding UIKit Wrappers\u003c/h2\u003e\u003cdiv id=\"3829\"\u003e\u003cp\u003eOne of the key APIs iOS 13 introduces for dark mode support is \u003ccode\u003eUIColor\u003c/code\u003e’s \u003ccode\u003e\u003ca href=\"https://developer.apple.com/documentation/uikit/uicolor/3238040-colorwithdynamicprovider\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e+colorWithDynamicProvider:\u003c/a\u003e\u003c/code\u003e method, which generates colors that automatically adapt to dark mode. This was the very first API we sought to wrap for use within Instagram and is still one of our most used dark mode APIs. We’ll walk through implementing it as a case study in building a backwards-compatible wrapper.\u003c/p\u003e\u003cp\u003e  The first step in building such an API is defining a macro that allows us to conditionally compile out code for people that are still using stable versions of Xcode. This is what ours looks like:\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9a24\"\u003eNext we declare a wrapper function. Our wrapper for dynamic colors looks like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"b996\"\u003eWithin this function we use our macro to ensure that developers using older versions of Xcode can still compile. We also introduce a runtime check so that the app continues to function normally on older versions of iOS. If both checks pass we simply call into the iOS 13 \u003ccode\u003e+colorWithDynamicProvider:\u003c/code\u003e API, otherwise we fall back to the light mode variant.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv id=\"1277\"\u003e\u003cp\u003eYou may notice that we’re passing an \u003ccode\u003eIGTraitCollection\u003c/code\u003e into \u003ccode\u003eIGColorWithDynamicProvider\u003c/code\u003e\u0026#39;s block instead of a \u003ccode\u003eUITraitCollection\u003c/code\u003e. We introduced \u003ccode\u003eIGTraitCollection\u003c/code\u003e as a struct that contain\u0026#39;s \u003ccode\u003eUITraitCollection\u003c/code\u003e\u0026#39;s \u003ccode\u003euserInterfaceStyle\u003c/code\u003e and \u003ccode\u003euserInterfaceLevel\u003c/code\u003e values as \u003ccode\u003eisLight\u003c/code\u003e and \u003ccode\u003eisElevated\u003c/code\u003e respectively since those properties are only available when linked with newer iOS versions. More on that later.\u003c/p\u003e\u003cp\u003e  Now that we have \u003ccode\u003eIGColorWithDynamicProvider\u003c/code\u003e we can use it everywhere in the app where we need to use dynamic colors. Developers can use this freely without worrying about build failures or run time crashes regardless of what version of Xcode they or their peers are using. Instagram has historically had a semantic color palette that was introduced in \u003ca href=\"https://techcrunch.com/2016/05/11/instagrams-big-redesign-goes-live-with-a-colorful-new-icon-black-and-white-app-and-more/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eour 2016 redesign\u003c/a\u003e, and we collaborated with our design systems team to update all the colors in it to support dark mode using \u003ccode\u003eIGColorWithDynamicProvider\u003c/code\u003e. Here’s an example of one of these colors.\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0f10\"\u003eOnce we had this pattern defined for wrapping UIKit’s API we continued to add more as they were needed. The set we ended up with is:\u003c/p\u003e\u003cul\u003e\u003cli id=\"ff98\"\u003e\u003ccode\u003eIGColorWithDynamicProvider\u003c/code\u003e as shown here\u003c/li\u003e\u003cli id=\"9c94\"\u003e\u003ccode\u003eIGImageWithDynamicProvider\u003c/code\u003e for creating “dynamic images“ that automatically adapt to dark mode.\u003c/li\u003e\u003cli id=\"b3a1\"\u003e\u003ccode\u003eIGActivityIndicator\u003c/code\u003e functions for creating activity indicators with styles that work in light mode, dark mode, and older versions of iOS.\u003c/li\u003e\u003cli id=\"d3a9\"\u003e\u003ccode\u003eIGSetOverrideUserInterfaceStyle\u003c/code\u003e for forcing views or view controllers into particular interface styles.\u003c/li\u003e\u003cli id=\"f34e\"\u003e\u003ccode\u003eIGSetOverrideElevationLevel\u003c/code\u003e for forcing view controllers into particular elevation levels.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4c89\"\u003e\u003cem\u003eSmall side note: We discovered towards the end of our dark mode adoption that our implementation of dynamic colors had equality implications because a new instance of \u003c/em\u003e\u003ccode\u003e\u003cem\u003eUIColor\u003c/em\u003e\u003c/code\u003e\u003cem\u003e was returned each time and the only thing that was comparable about each was the block passed in. In order to resolve this we modified our API slightly to create single instances of each of semantic colors so that they were comparable. Doing something like \u003c/em\u003e\u003ccode\u003e\u003cem\u003edispatch_once\u003c/em\u003e\u003c/code\u003e\u003cem\u003e-ing your semantic colors or using asset catalog-based colors and \u003c/em\u003e\u003ccode\u003e\u003cem\u003e+colorNamed:\u003c/em\u003e\u003c/code\u003e\u003cem\u003e will produce comparable colors if your app is sensitive to color equality.\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"68be\"\u003eFake Dark Mode\u003c/h2\u003e\u003cp id=\"c66d\"\u003eOne tricky thing when adopting technologies in iOS betas is getting adequate test coverage. Convincing people using the internal build of Instagram to install iOS 13 on their devices isn’t a great idea because it’s unstable and challenging to help set up, and even if we were to get people testing on iOS 13 the builds we distribute internally were still largely being linked against the iOS 12 SDK so the changes wouldn’t show up anyway.\u003c/p\u003e\u003cp id=\"8f52\"\u003eI briefly touched on our \u003ccode\u003eIGTraitCollection\u003c/code\u003e wrapper for \u003ccode\u003eUITraitCollection\u003c/code\u003e that came in handy in the course of building out dark mode. One clever testing trick this \u003ccode\u003eIGTraitCollection\u003c/code\u003e wrapper afforded us is something we’ve come to call “fake dark mode” — which is an internal setting that overrides \u003ccode\u003eIGTraitCollection\u003c/code\u003e to become dark even in iOS 12! Nate Stedman, one of our iOS engineers in New York, came up with this setting when we were first working on dark mode.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cem\u003eOur internal menu’s “fake dark mode” option, and fake dark mode running in a build linked against the iOS 12 SDK.\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"85c1\"\u003eOur API for generating \u003ccode\u003eIGTraitCollections\u003c/code\u003e from \u003ccode\u003eUITraitCollections\u003c/code\u003e came to look like this.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0a31\"\u003eWhere \u003ccode\u003e_IGIsDarkModeDebugEnabled\u003c/code\u003e is backed by an \u003ccode\u003eNSUserDefaults\u003c/code\u003e flag for fake dark mode. There are of course some limitations with faking out dark mode in iOS 12, most notably\u003c/p\u003e\u003cul\u003e\u003cli id=\"42bf\"\u003e\u003ccode\u003euserInterfaceLevel\u003c/code\u003e isn’t available in iOS 12, so “elevated“ dynamic colors never appear in fake dark mode.\u003c/li\u003e\u003cli id=\"daa4\"\u003eForcing particular styles via our \u003ccode\u003e-setOverrideInterfaceStyle:\u003c/code\u003e wrapper has no effect in fake dark mode.\u003c/li\u003e\u003cli id=\"5d4e\"\u003eUIKit components that use their default colors don’t adapt to fake dark mode in iOS 12 since they have no knowledge of dark mode.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"3355\"\u003eWith this addition to our dark mode wrappers we were able to get much broader test coverage than we otherwise would have.\u003c/p\u003e\u003ch2 id=\"a34f\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"2c3f\"\u003eDark mode has been a highly requested featured of ours for quite a while.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA recent public Q\u0026amp;A with Adam Mosseri, head of Instagram\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"015f\"\u003eWe had been a little reluctant in introducing dark mode in the past because it would’ve been a tremendous undertaking, but the excellent tools that Apple provides and their emphasis on dark mode in iOS 13 finally made it possible for us! Of course the actual implementation still wasn’t easy, we’ve been working on this since WWDC and it demanded ample design and engineering deep dives into every part of the app (and admittedly, we have probably missed some). This journey has been worth it, on top of the benefits dark mode provides such as eye strain reduction and battery savings, it makes our app look right at home on iOS 13!\u003c/p\u003e\u003cp id=\"a923\"\u003e\u003cem\u003eA huge thank you to Jeremy Lawrence, Nate Stedman, Cameron Roth, Ryan Olson, Garrett Olinger, Paula Guzman, Héctor Ramos, Aaron Pang, and numerous others who contributed to our efforts to adopt dark mode. Dark mode is also available in Instagram for Android.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"457f\"\u003e\u003cem\u003eIf you want to learn more about this work or are interested joining one of our engineering teams, please visit our \u003c/em\u003e\u003ca href=\"https://www.facebook.com/careers/jobs/?q=instagram\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003ecareers page\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, follow us \u003c/em\u003e\u003ca href=\"https://www.facebook.com/instagramengineering/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eon Facebook\u003c/em\u003e\u003c/a\u003e\u003cem\u003e or \u003c/em\u003e\u003ca href=\"https://twitter.com/instagrameng\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eon Twitter\u003c/em\u003e\u003c/a\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2019-10-08T16:30:51.827Z",
  "modifiedTime": null
}
