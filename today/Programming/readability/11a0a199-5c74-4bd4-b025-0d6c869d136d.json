{
  "id": "11a0a199-5c74-4bd4-b025-0d6c869d136d",
  "title": "Introducing GitLab Advanced Vulnerability Tracking",
  "link": "https://about.gitlab.com/blog/2025/01/21/introducing-gitlab-advanced-vulnerability-tracking",
  "description": "",
  "author": "Julian Thome",
  "published": "2025-01-21T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Julian Thome",
  "length": 2299,
  "excerpt": "Learn how this security feature improves the efficiency of vulnerability management by reducing futile auditing time (includes data from a new study).",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "DevSecOps streamlines software development by allowing teams to ship features quickly and providing short feedback cycles for customers. These short feedback cycles can be used to monitor the impact of a feature from the time it is shipped and to inform developers and product managers about the success or failure of a given deployment. GitLab, as an agnostic DevSecOps platform, can act as an integration point for different CI/CD tools that often contribute to user-facing functionality. For example, the vulnerability report, which displays all detected vulnerabilities, is visible as a single functionality, but the data in the report may come from a number of different tools in various pipelines. In a heterogeneous Static Application Security Testing (SAST) setup we find two potential sources of vulnerability deduplication: Code volatility refers to the reintroduction of vulnerabilities in a constantly changing code base. Double reporting refers to duplication introduced by multiple tools that are reporting the same vulnerability. GitLab addresses these two sources of duplication by means of the Advanced Vulnerability Tracking feature, which identifies and deduplicates vulnerabilities in a constantly changing code base. Advanced Vulnerability Tracking leverages contextual information provided by generated syntax-trees to scope vulnerabilities and generates location fingerprints for vulnerabilities that are less fragile across code changes in comparison to other tracking methods. In a recent study, we demonstrated that our vulnerability tracking approach was 30% more effective than traditional, line-based vulnerability tracking where \u003cfile, line number\u003e are used to fingerprint vulnerabilities. This means that advanced vulnerability tracking reduces the manual effort of auditing vulnerabilities by 30%. In addition, our study suggested that the positive effect of our vulnerability tracking method increases over time. The preprint of our study \"A scalable, effective and simple Vulnerability Tracking approach for heterogeneous SAST setups based on Scope+Offset\" will be presented at the 47th International Conference on Software Engineering (Software Engineering in Practice Track) 2025. Lucas Charles, Jason Leasure, and Hua Yan contributed to this article and study.",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/5cPjtwSLGWDGUiKT91hBHz/c1d96eaa15bb2335a8ce914a02a29da3/AdobeStock_941867776.jpeg?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eDevSecOps streamlines software development by allowing teams to ship features quickly and providing short feedback cycles for customers. These short feedback cycles can be used to monitor the impact of a feature from the time it is shipped and to inform developers and product managers about the success or failure of a given deployment.\u003c/p\u003e\n\u003cp\u003eGitLab, as an agnostic DevSecOps platform, can act as an integration point for different \u003ca href=\"https://about.gitlab.com/topics/ci-cd/\"\u003eCI/CD\u003c/a\u003e tools that often contribute to user-facing functionality. For example, the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerability_report/\"\u003evulnerability report\u003c/a\u003e, which displays all detected vulnerabilities, is visible as a single functionality, but the data in the report may come from a number of different tools in various pipelines.\u003c/p\u003e\n\u003cp\u003eIn a heterogeneous Static Application Security Testing (\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/\"\u003eSAST\u003c/a\u003e) setup we find two potential sources of vulnerability deduplication:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCode volatility refers to the reintroduction of vulnerabilities in a constantly changing code base.\u003c/li\u003e\n\u003cli\u003eDouble reporting refers to duplication introduced by multiple tools that are reporting the same vulnerability.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGitLab addresses these two sources of duplication by means of the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/#advanced-vulnerability-tracking\"\u003eAdvanced Vulnerability Tracking\u003c/a\u003e feature, which identifies and deduplicates vulnerabilities in a constantly changing code base.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/#advanced-vulnerability-tracking\"\u003eAdvanced Vulnerability Tracking\u003c/a\u003e leverages contextual information provided by generated syntax-trees to scope vulnerabilities and generates location fingerprints for vulnerabilities that are less fragile across code changes in comparison to other tracking methods.\u003c/p\u003e\n\u003cp\u003eIn a recent study, we demonstrated that our vulnerability tracking approach was 30% more effective than traditional, line-based vulnerability tracking where \u003ccode\u003e\u0026lt;file, line number\u0026gt;\u003c/code\u003e are used to fingerprint vulnerabilities. This means that advanced vulnerability tracking reduces the manual effort of auditing vulnerabilities by 30%. In addition, our study suggested that the positive effect of our vulnerability tracking method increases over time.\u003c/p\u003e\n\u003cp\u003eThe preprint of our study \u0026#34;\u003ca href=\"https://about.gitlab.com/resources/downloads/icse25-preprint.pdf\"\u003eA scalable, effective and simple Vulnerability Tracking approach for heterogeneous SAST setups based on Scope+Offset\u003c/a\u003e\u0026#34; will be presented at the \u003ca href=\"https://conf.researchr.org/home/icse-2025\"\u003e47th International Conference on Software Engineering (Software Engineering in Practice Track) 2025\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003ca href=\"https://gitlab.com/theoretick\"\u003eLucas Charles\u003c/a\u003e, \u003ca href=\"https://gitlab.com/jleasure\"\u003eJason Leasure\u003c/a\u003e, and \u003ca href=\"https://gitlab.com/hyan3\"\u003eHua Yan\u003c/a\u003e contributed to this article and study.\u003c/em\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-21T00:00:00Z",
  "modifiedTime": null
}
