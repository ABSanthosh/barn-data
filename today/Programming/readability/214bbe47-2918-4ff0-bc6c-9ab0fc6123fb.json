{
  "id": "214bbe47-2918-4ff0-bc6c-9ab0fc6123fb",
  "title": "Unlocking bonus worlds with Gemini for the Google I/O puzzle",
  "link": "https://developers.googleblog.com/en/unlocking-bonus-worlds-with-gemini-for-the-google-io-puzzle/",
  "description": "The Google I/O 2025 puzzle used the Gemini API to generate dynamic riddles for bonus worlds, enhancing player engagement and scalability. Here's what our developers learned on using the Gemini API effectively, including creativity, design, and implementation strategies.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Jay Chang",
  "length": 8766,
  "excerpt": "The Google I/O 2025 puzzle used the Gemini API to generate dynamic riddles for bonus worlds, enhancing player engagement and scalability. Here's what our developers learned on using the Gemini API effectively, including creativity, design, and implementation strategies.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "Jay Chang Senior Product Marketing Manager Developer Activations Cracking the codeThis year’s Google I/O puzzle challenges players to manipulate light and color through prisms to unlock sectors of the game world. Beyond the core game loop, a new dimension was added to the gameplay–bonus worlds hidden behind riddles generated with the Gemini API. This blog will review how we built it! Sorry, your browser doesn't support playback for this video The Gemini integration: A creative and scalable solutionHidden tiles are dynamically placed on the map as Gemini models generate unique riddles for players to solve and find them. The goal? To create higher engagement by incentivizing players to explore new dimensions of the puzzle built with AI.Rather than manually hardcoding 100s of possible secret tile locations and corresponding riddles, we used AI to help us scale the feature in a way that was challenging and unique. Sorry, your browser doesn't support playback for this video Our solution: Dynamic riddle generationTo leverage Gemini's strengths, we devised a solution that combined algorithmic precision with AI-powered creativity. A backend algorithm placed hidden tiles on the map and generated a prompt for the Gemini API based on the game rules describing the location with three simple instructions. This ensured that every riddle had a logical solution within the game's framework. We used Gemini to transform the algorithmically generated answer into a clever riddle.Algorithmic prompt generationBased on the game's rules we programmatically determined a \"secret location\" on the game board that was used as the prompt for Gemini. This ensured that the answer to each riddle was always valid and solvable. // Finds a new hiding spot for the Gemini token and generates a clue string getHiddenLocation() { const geminiCluePositions = GameWorld.getCluePositions() // Returns positions that are designated as a \"Clue\" tile. We tag important tiles when designing a level. These are generally tiles that are not movable by the player. // We get all the tiles positions in the level, a position is a simple XY coordinate const secretLocations = GameWorld.getAllTilePositions() // we remove tiles that are not adjacent to a clue position... .filter((tileA) =\u003e geminiCluePositions.some((tileB) =\u003e GameWorld.isNextTo(tileA, tileB))) // we remove invalid positions, such as tiles that are not empty .filter(({gridX, gridY}) =\u003e GameWorld.isValidGeminiPosition(gridX, gridY)) // we randomly choose a hiding spot const randomPosition = secretLocations[Math.floor(Math.random() * secretLocations.length)] const randomTile = Gameworld.getTileByPosition(randomPosition) // now that we have a hiding spot, we generate a clue string const riddleClues = GameWorld.generateGeminiRiddleClues(tilePosition) return { position: randomPosition, clues: riddleClues, } } The output of the algorithm was simple text like:1. Directly below a wall.2. Exactly 2 tiles away from a rainbow node.3. In the first sector.Gemini riddle creationWith a consistent structure for the prompt to be generated, we then turned to the Gemini API to create a riddle that cryptically described the secret tile’s location. By prompting Gemini with the necessary context and constraints, we were able to create engaging and challenging riddles that were consistently formatted in a way our front end application could display them to users. // Build a prompt based on the tile position. We always output 3 rules in this order: // Clue 1. The type of one adjacent tile to the secret location // Clue 2. The sector which contains the secret location // Clue 3. The closest color node to the secret location, and exactly how many tiles away it is. generateGeminiRiddleClues(tilePosition) { const adjacentTiles = GameWorld.getAdjacentTiles(tilePosition) // Get the left, right, top and bottom neighboring tiles const locationSector = GameWorld.getTileSector(tilePosition) // get the \"sector\" of the tile. Levels are divided in sectors or 'chunks' by the level designer. const nodeTiles = GameWorld.getAllNodeTiles() // get every 'Node' tile in the level // clue 1 const randomAdjacentTile = adjacentTiles[Math.floor(Math.random() * adjacentTiles.length)] const direction = GameWorld.getDirection(randomAdjacentTile, tilePosition) const randomTileType = randomAdjacentTile.type const firstClue = `Directly ${direction} a ${randomTileType} tile` // e.g. \"Directly above a wall tile\" // clue 2 const secondClue = `In sector ${locationSector}` // e.g. \"In sector 3\" // clue 3 const closestNode = nodeTiles.reduce((closest, node) =\u003e { const distance = GameWorld.getDistance(node.position, tilePosition) if (distance \u003c closest.distance) { return {node, distance} } return closest }, {node: null, distance: Infinity}) const thirdClue = Exactly ${distance} tiles away from a ${closestNode.node.color} node` const clues = `1. ${firstClue}. 2. ${secondClue}. 3. ${thirdClue}.` return clues } The resulting riddle was then:I stand directly below a wall so high,Two tiles from a rainbow node, I lie.Within the first sector, my place you'll see,Solve this and claim the token's victory.Why riddles?Riddles are inherently cryptic and fun, plus a degree of ambiguity is expected. This allowed us to embrace the occasional \"red herring\" or unexpected turn of phrase that might arise from AI generated output. Furthermore, riddles engage players' reasoning skills, encouraging them to think creatively and apply their knowledge of the game's rules, analyzing the layout of the board as they search for the hidden tile.Ensuring consistency in LLM generated output with System InstructionsWorking with AI comes with its own set of challenges. One of the most significant is the tendency for AI to \"hallucinate\" or deviate from provided rules. We mitigated this risk by programmatically generating a prompt, providing examples and a defined JSON output in the System Instructions for the prompt: **Important Instructions:** - Respond **only** with the JSON object in the exact format specified. - Do **not** include any explanations, code blocks, or additional text. - Do **not** enclose the JSON in triple backticks or any markdown formatting. - Ensure all strings in the JSON are properly escaped. - Escape special characters like newlines (`\\\\n`), tabs (`\\\\t`), and quotation marks (`\\\\\"`) within strings. - Do not use single quotes; use double quotes for all JSON keys and string values. - Ensure the JSON is valid and parsable. We also leaned into the human capacity for reasoning. Players are adept at interpreting and deciphering cryptic clues. By creating riddles that required logical deduction, we empowered players to overcome any potential inconsistencies in AI output. Ultimately, it was about finding the right balance between AI-generated content and human ingenuity.Build with the Gemini API in your apps todayThis year marked a milestone: the first Google I/O puzzle featuring the Gemini API. For our design and engineering teams, it was more than just integration—it was a thoughtful exploration into a new era of collaborative creation with AI. We weren't just building a feature; we were pioneering a new approach to interactive experiences. As you consider bringing the Gemini API into your own projects, remember these three key lessons in determining your approach:Creativity: Leverage AI in your products for dynamic content generation, scalability, and automation in ways you haven’t been able to before.Design: Test writing effective prompts and create prototypes in Google AI Studio to test your results with different Gemini models and capabilities.Implementation: Write detailed System Instructions to define output format with examples of your desired model response to make your output more structured and consistent in a way your application can interpret.AI is changing how users interact with our apps and games, opening doors to new and exciting user experiences.Join us online for Google I/O May 20-21, for this year’s exciting announcements streaming live from Shoreline Amphitheatre in Mountain View. We encourage you to experiment with Gemini and explore its potential to create more helpful and fun experiences for your users; the possibilities are endless.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/IO-2025-puzzle-how-its-made.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \u003csection\u003e\n      \n        \n          \u003cp\u003e\u003ca href=\"https://developers.googleblog.com/en/search/?author=Jay+Chang\"\u003eJay Chang\u003c/a\u003e\n            \n              \u003cspan\u003eSenior Product Marketing Manager\u003c/span\u003e\n            \n            \n              \u003cspan\u003eDeveloper Activations\u003c/span\u003e\n            \n          \u003c/p\u003e\n        \n\n      \n      \u003c/section\u003e\n\n    \n    \u003cdiv\u003e\n         \u003cdiv\u003e\n    \u003ch2 data-block-key=\"3712d\"\u003e\u003cb\u003eCracking the code\u003c/b\u003e\u003c/h2\u003e\u003cp data-block-key=\"fv91r\"\u003e\u003cbr/\u003eThis year’s \u003ca href=\"https://io.google/2025/puzzle/?utm_source=blogpost\u0026amp;utm_medium=pr\u0026amp;utm_campaign=puzzle\u0026amp;utm_content=\"\u003eGoogle I/O puzzle\u003c/a\u003e challenges players to manipulate light and color through prisms to unlock sectors of the game world. Beyond the core game loop, a new dimension was added to the gameplay–bonus worlds hidden behind riddles generated with the Gemini API. This blog will review how we built it!\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \n        \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/wagtailvideo-4o5dhj0z_thumb.jpg\"\u003e\n\u003csource src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/IO25-puzzle-how-we-made-it.mp4\" type=\"video/mp4\"/\u003e\n\u003cp\u003eSorry, your browser doesn\u0026#39;t support playback for this video\u003c/p\u003e\n\n\u003c/video\u003e\n    \n    \n\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"3712d\"\u003eThe Gemini integration: A creative and scalable solution\u003c/h2\u003e\u003cp data-block-key=\"6qsjj\"\u003eHidden tiles are dynamically placed on the map as Gemini models generate unique riddles for players to solve and find them. The goal? To create higher engagement by incentivizing players to explore new dimensions of the puzzle built with AI.\u003c/p\u003e\u003cp data-block-key=\"eidcc\"\u003eRather than manually hardcoding 100s of possible secret tile locations and corresponding riddles, we used AI to help us scale the feature in a way that was challenging and unique.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \n        \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/wagtailvideo-gohm4ffa_thumb.jpg\"\u003e\n\u003csource src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/IO25-puzzle-how-we-made-it-2.mp4\" type=\"video/mp4\"/\u003e\n\u003cp\u003eSorry, your browser doesn\u0026#39;t support playback for this video\u003c/p\u003e\n\n\u003c/video\u003e\n    \n    \n\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"3712d\"\u003eOur solution: Dynamic riddle generation\u003c/h2\u003e\u003cp data-block-key=\"8ti1h\"\u003eTo leverage Gemini\u0026#39;s strengths, we devised a solution that combined algorithmic precision with AI-powered creativity. A backend algorithm placed hidden tiles on the map and generated a prompt for the Gemini API based on the game rules describing the location with three simple instructions. This ensured that every riddle had a logical solution within the game\u0026#39;s framework. We used Gemini to transform the algorithmically generated answer into a clever riddle.\u003c/p\u003e\u003ch3 data-block-key=\"e7pjl\"\u003e\u003cb\u003e\u003cbr/\u003eAlgorithmic prompt generation\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"1kqmt\"\u003eBased on the game\u0026#39;s rules we programmatically determined a \u0026#34;secret location\u0026#34; on the game board that was used as the prompt for Gemini. This ensured that the answer to each riddle was always valid and solvable.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e// Finds a new hiding spot for the Gemini token and generates a clue string\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetHiddenLocation\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egeminiCluePositions\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetCluePositions\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Returns positions that are designated as a \u0026#34;Clue\u0026#34; tile. We tag important tiles when designing a level. These are generally tiles that are not movable by the player.\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// We get all the tiles positions in the level, a position is a simple XY coordinate\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esecretLocations\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAllTilePositions\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// we remove tiles that are not adjacent to a clue position...\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e((\u003c/span\u003e\u003cspan\u003etileA\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egeminiCluePositions\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esome\u003c/span\u003e\u003cspan\u003e((\u003c/span\u003e\u003cspan\u003etileB\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisNextTo\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etileA\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etileB\u003c/span\u003e\u003cspan\u003e)))\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// we remove invalid positions, such as tiles that are not empty\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(({\u003c/span\u003e\u003cspan\u003egridX\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egridY\u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisValidGeminiPosition\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egridX\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egridY\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// we randomly choose a hiding spot\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomPosition\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esecretLocations\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eMath\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efloor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMath\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erandom\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esecretLocations\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e)]\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomTile\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameworld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetTileByPosition\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erandomPosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// now that we have a hiding spot, we generate a clue string\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eriddleClues\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egenerateGeminiRiddleClues\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomPosition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eclues\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eriddleClues\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cdiv data-block-key=\"3712d\"\u003e\u003cp\u003eThe output of the algorithm was simple text like:\u003c/p\u003e\u003cp\u003e1. Directly below a wall.\u003c/p\u003e\u003c/div\u003e\u003cp data-block-key=\"1b7fm\"\u003e2. Exactly 2 tiles away from a rainbow node.\u003c/p\u003e\u003cp data-block-key=\"dme11\"\u003e3. In the first sector.\u003c/p\u003e\u003ch3 data-block-key=\"5rrr0\"\u003e\u003cb\u003e\u003cbr/\u003eGemini riddle creation\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"6gmoa\"\u003eWith a consistent structure for the prompt to be generated, we then turned to the Gemini API to create a riddle that cryptically described the secret tile’s location. By prompting Gemini with the necessary context and constraints, we were able to create engaging and challenging riddles that were consistently formatted in a way our front end application could display them to users.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e// Build a prompt based on the tile position. We always output 3 rules in this order:\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Clue 1. The type of one adjacent tile to the secret location\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Clue 2. The sector which contains the secret location\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Clue 3. The closest color node to the secret location, and exactly how many tiles away it is.\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egenerateGeminiRiddleClues\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadjacentTiles\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAdjacentTiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Get the left, right, top and bottom neighboring tiles\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003elocationSector\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetTileSector\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// get the \u0026#34;sector\u0026#34; of the tile. Levels are divided in sectors or \u0026#39;chunks\u0026#39; by the level designer.\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enodeTiles\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAllNodeTiles\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// get every \u0026#39;Node\u0026#39; tile in the level\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// clue 1\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomAdjacentTile\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadjacentTiles\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eMath\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efloor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMath\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erandom\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadjacentTiles\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e)]\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edirection\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetDirection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erandomAdjacentTile\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomTileType\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erandomAdjacentTile\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efirstClue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`Directly \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003edirection\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003erandomTileType\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e tile`\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// e.g. \u0026#34;Directly above a wall tile\u0026#34;\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// clue 2\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esecondClue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`In sector \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003elocationSector\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// e.g. \u0026#34;In sector 3\u0026#34;\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// clue 3\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclosestNode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enodeTiles\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereduce\u003c/span\u003e\u003cspan\u003e((\u003c/span\u003e\u003cspan\u003eclosest\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGameWorld\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetDistance\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etilePosition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclosest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclosest\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eInfinity\u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\n\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethirdClue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eExactly\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003edistance\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etiles\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eaway\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eclosestNode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enode\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\n\n\u003cspan\u003e    const clues = `\u003c/span\u003e\u003cspan\u003e1.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003efirstClue\u003c/span\u003e\u003cspan\u003e}.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003esecondClue\u003c/span\u003e\u003cspan\u003e}.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ethirdClue\u003c/span\u003e\u003cspan\u003e}.\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\n\n\u003cspan\u003e    return clues\u003c/span\u003e\n\u003cspan\u003e  }\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"3712d\"\u003eThe resulting riddle was then:\u003c/p\u003e\u003cp data-block-key=\"ejj06\"\u003e\u003ci\u003eI stand directly below a wall so high,\u003c/i\u003e\u003c/p\u003e\u003cp data-block-key=\"769f1\"\u003e\u003ci\u003eTwo tiles from a rainbow node, I lie.\u003c/i\u003e\u003c/p\u003e\u003cp data-block-key=\"1k12i\"\u003e\u003ci\u003eWithin the first sector, my place you\u0026#39;ll see,\u003c/i\u003e\u003c/p\u003e\u003cp data-block-key=\"73vvu\"\u003e\u003ci\u003eSolve this and claim the token\u0026#39;s victory.\u003c/i\u003e\u003c/p\u003e\u003ch3 data-block-key=\"5l0g\"\u003e\u003cb\u003e\u003cbr/\u003eWhy riddles?\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"3e01o\"\u003eRiddles are inherently cryptic and fun, plus a degree of ambiguity is expected. This allowed us to embrace the occasional \u0026#34;red herring\u0026#34; or unexpected turn of phrase that might arise from AI generated output. Furthermore, riddles engage players\u0026#39; reasoning skills, encouraging them to think creatively and apply their knowledge of the game\u0026#39;s rules, analyzing the layout of the board as they search for the hidden tile.\u003c/p\u003e\u003ch3 data-block-key=\"9dafn\"\u003e\u003cb\u003e\u003cbr/\u003eEnsuring consistency in LLM generated output with System Instructions\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"c0eeb\"\u003eWorking with AI comes with its own set of challenges. One of the most significant is the tendency for AI to \u0026#34;hallucinate\u0026#34; or deviate from provided rules. We mitigated this risk by programmatically generating a prompt, providing examples and a defined JSON output in the System Instructions for the prompt:\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e**Important Instructions:**\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eRespond \u003cspan\u003e**only**\u003c/span\u003e with the JSON object in the exact format specified.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eDo \u003cspan\u003e**not**\u003c/span\u003e include any explanations, code blocks, or additional text.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eDo \u003cspan\u003e**not**\u003c/span\u003e enclose the JSON in triple backticks or any markdown formatting.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eEnsure all strings in the JSON are properly escaped.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eEscape special characters like newlines (\u003cspan\u003e`\\\\n`\u003c/span\u003e), tabs (\u003cspan\u003e`\\\\t`\u003c/span\u003e), and quotation marks (\u003cspan\u003e`\\\\\u0026#34;`\u003c/span\u003e) within strings.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eDo not use single quotes; use double quotes for all JSON keys and string values.\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eEnsure the JSON is valid and parsable.\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"3712d\"\u003eWe also leaned into the human capacity for reasoning. Players are adept at interpreting and deciphering cryptic clues. By creating riddles that required logical deduction, we empowered players to overcome any potential inconsistencies in AI output. Ultimately, it was about finding the right balance between AI-generated content and human ingenuity.\u003c/p\u003e\u003ch2 data-block-key=\"bttp0\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eBuild with the Gemini API in your apps today\u003c/h2\u003e\u003cp data-block-key=\"1l5jj\"\u003eThis year marked a milestone: the first Google I/O puzzle featuring the Gemini API. For our design and engineering teams, it was more than just integration—it was a thoughtful exploration into a new era of collaborative creation with AI. We weren\u0026#39;t just building a feature; we were pioneering a new approach to interactive experiences. As you consider bringing the Gemini API into your own projects, remember these three key lessons in determining your approach:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"5d8vg\"\u003e\u003cb\u003eCreativity:\u003c/b\u003e Leverage AI in your products for dynamic content generation, scalability, and automation in ways you haven’t been able to before.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"cpvsf\"\u003e\u003cb\u003eDesign:\u003c/b\u003e Test writing effective prompts and create prototypes in \u003ca href=\"https://aistudio.google.com/\"\u003eGoogle AI Studio\u003c/a\u003e to test your results with different Gemini models and capabilities.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"fko1a\"\u003e\u003cb\u003eImplementation:\u003c/b\u003e Write detailed System Instructions to define output format with examples of your desired model response to make your output more structured and consistent in a way your application can interpret.\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"349jt\"\u003e\u003cbr/\u003eAI is changing how users interact with our apps and games, opening doors to new and exciting user experiences.\u003c/p\u003e\u003cp data-block-key=\"dup1s\"\u003e\u003cb\u003eJoin us online for\u003c/b\u003e \u003ca href=\"https://io.google/2025/register/?utm_source=blogpost\u0026amp;utm_medium=pr\u0026amp;utm_campaign=puzzle\u0026amp;utm_content=\"\u003e\u003cb\u003eGoogle I/O\u003c/b\u003e\u003c/a\u003e\u003cb\u003e May 20-21\u003c/b\u003e, for this year’s exciting announcements streaming live from Shoreline Amphitheatre in Mountain View. We encourage you to experiment with Gemini and explore its potential to create more helpful and fun experiences for your users; the possibilities are endless.\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-03-13T00:00:00Z",
  "modifiedTime": null
}
