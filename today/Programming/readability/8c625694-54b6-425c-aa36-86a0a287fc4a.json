{
  "id": "8c625694-54b6-425c-aa36-86a0a287fc4a",
  "title": "Text Blocks in Java: Perfect for Multiline Strings",
  "link": "https://blog.jetbrains.com/idea/2025/06/text-blocks-in-java-perfect-for-multiline-strings/",
  "description": "You’ve likely used String variables to store values that span multiple lines, such as LLM prompts, JSON, HTML, XML, code snippets, and other such values. Some of these, such as a JSON value, include double quotes as part of the data. Imagine the inconvenience of using backslashes (\\) to escape those quotes, indenting lines using […]",
  "author": "Irina Mariasova",
  "published": "Tue, 10 Jun 2025 11:28:36 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "tutorials",
    "java",
    "textblocks"
  ],
  "byline": "Mala Gupta",
  "length": 22686,
  "excerpt": "Sick of backslashes, quotes, and line breaks cluttering your code? Meet Text Blocks in Java 15 – the easy way to write clean, readable multiline strings like JSON, HTML, and SQL. No escapes. No mess. Just smooth strings.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the IDE for Professional Development in Java and Kotlin TutorialsText Blocks in Java: Perfect for Multiline Strings You’ve likely used String variables to store values that span multiple lines, such as LLM prompts, JSON, HTML, XML, code snippets, and other such values. Some of these, such as a JSON value, include double quotes as part of the data. Imagine the inconvenience of using backslashes (\\) to escape those quotes, indenting lines using newlines, tabs, or spaces, and adding a concatenation operator at the end of each line. Coding such string values is a nightmare. The resulting string is not just hard to write, but also hard to read. Language-specific errors, like a missing comma in a JSON value, can easily creep in. Don’t worry, there’s already a solution. Java 15 introduced Text Blocks, multiline strings that make it easier to define data that spans multiple lines. Text Blocks remove the need for concatenation operators or escape sequences when working with HTML, XML, JSON, or SQL queries stored as strings. The values are easier to read, and it’s simpler to spot issues like missing spaces in SQL queries or a missing comma in a JSON value. Let’s understand the benefits of using Text Blocks with an example. An example – what are the existing pain points Imagine you need to store the following JSON text in your Java code: {     \"name\": \"Sonam Wangchuk\"     \"movement\": \"#ILiveSimply\",     \"result\": \"Let planet simply live\" } This JSON value can be stored as a multi line String value (without using a TextBlock) as follows: String myJson = \"{\\n\" +                 \"    \\\"name\\\": \\\"Sonam Wangchuk\\\"\\n\" +                 \"    \\\"movement\\\": \\\"#ILiveSimply\\\",\\n\" +                 \"    \\\"result\\\": \\\"Let planet simply live\\\"\\n\" +                 \"}\"; Writing the preceding code manually can be a nightmare. Escape characters and concatenation operators make it hard to write and read. To include double quotes within a string, you must escape them using a backslash (since ” is also a string delimiter). To preserve the formatting of the JSON object, you need to add whitespace such as new lines, tabs, or spaces. With all that formatting overhead, you probably missed that the JSON above is missing a comma at the end of the first line. This missing comma can cause a parsing error later if you try to convert the string into a JSON object. Let’s see how Text Blocks can help. Using Text Blocks TextBlocks are multiline Strings (their type is java.lang.String). By using Text Blocks, you can store the previous String value, as follows: String myJson = \"\"\"                 {                     \"name\": \"Sonam Wangchuk\"                     \"movement\": \"#ILiveSimply\",                     \"result\": \"Let planet simply live\"                 }\"\"\"; Text Blocks are simple to create, read, and edit. They eliminate the need for concatenation operators and (most) escape sequences when working with String values that span more than one line, as shown below: The next section covers the syntax details of text blocks. If you’re already familiar with them, feel free to skip ahead. Syntax of TextBlocks Here are a couple of syntax rules to follow when you are working with Text Blocks. Opening and closing delimiter – \"\"\" Unlike the single double quotes (\") used for regular String values, Text Blocks use three double quotes (\"\"\") as their opening and closing delimiters. The opening delimiter can be followed by zero or more whitespaces, but it must be followed by a line terminator. A Text Block value begins after this line terminator. If a Text Block doesn’t include a newline character immediately after the opening \"\"\", IntelliJ IDEA can detect this and prompt you to correct it: Incidental white spaces What rules does the compiler follow to include or exclude leading and trailing whitespace in a Text Block? Before we answer this question, let’s first understand what whitespaces are. When we talk about a whitespace in Java Text Blocks, it can refer to different types of characters, such as: A space – The standard space character we use to separate words Tabs – The popular Tab characters, that is, ('\\t'). Wars have been fought over whether to use tabs or space to indent code :) Line breaks – Newline characters ('\\n' on Unix/Linux/macOS, or '\\r\\n' on Windows) Carriage returns – ('\\r') First, let’s talk about how the leading white spaces are handled in a Text Block. Leading spaces Why do you need leading spaces? You would usually add tabs or spaces to values, such as a JSON, to align them vertically in your code. In Text Blocks, the leftmost non-whitespace character on any of the lines or the leftmost closing delimiter defines where meaningful white space begins. IntelliJ IDEA helps you view this position – using a vertical line – a feature that I absolutely love about Text Block’s support in IntelliJ IDEA. Here’s how the vertical bar in IntelliJ IDEA lets you visualize the starting position of your Text Block values: Just in case you can’t view the vertical green line shown in the preceding image, use Shift+Shift, Find ‘Show indent guides’, and enable it in IntelliJ IDEA. The following image shows another way to understand which leading spaces are included in your text blocks – blue rectangles represent the spaces that are not part of your textblock and the light green rectangles represent the leading spaces that are included in your text block:   If you move the closing triple quotes to the left, the white spaces included in the textblock changes, as shown in the following image: Trailing white spaces By default, the trailing white spaces are removed in Text Block values. IntelliJ IDEA can detect when you add trailing white spaces in your textblocks. It would highlight those spaces (to ensure you didn’t add them by mistake).  When you click Alt + Enter, it could prompt you to either ‘Escape trailing whitespace characters’, or ‘Remove trailing whitespace characters’. If you choose the former option, IntelliJ IDEA will add \\s at the end (\\s represents a single space), as shown in the following gif: Where would you use a trailing white space? Imagine you are using a method from a library that reads the first 40 characters of a line to extract two values from it, and store it in a Map, as follows: public Map\u003cString, String\u003e parseFixedWidthData(String fixedWidthData) {     Map\u003cString, String\u003e result = new HashMap\u003c\u003e();     String[] lines = fixedWidthData.split(\"\\n\");     for (String line : lines) {         String field1 = line.substring(0, 19).trim();         String field2 = line.substring(20, 39).trim();         result.put(field1, field2);     }     return result; } If you are using a textblock to pass value to the method parseFixedWidthData, you should define it as follows, escaping the trailing whitespaces, so the the preceding method doesn’t throw an IndexOutOfBounds exception: String fixedWidthData = \"\"\"                         CUSTOMER_NAME       JOHN DOE           \\s                         ACCOUNT_NUMBER      12345678-9879      \\s                         AGE                      45            \\s\"\"\"; Continuation char – \\ When you place your text on a new line in a text block, a new line char is added to your String value. Imagine using a textblock to store a store long URL so that it is easy to read, as follows: String apiUrl = \"\"\" https://www.alamy.com/stock-photo-abstract-geometric-pattern-hipster-fashion-design-print-hexagonal-175905258.html? imageid=0DF26DE9-AC7B-4C78-8770-E1AC9EC8783A \u0026p=379271 \u0026pn=1 \u0026searchId=8cf93ae4926578c6f55e3756c4010a71\u0026searchtype=0\"\"\"; However, if you use the preceding text block to connect to a URL and retrieve a response, the code will throw an exception. Inclusion of \\n in the URL makes it an invalid URL. To address it, you can use the continuation character, that is, \\ at the end of a line in your text block (so that the resulting string doesn’t include a new line character): String apiUrl = \"\"\" https://www.alamy.com/stock-photo-abstract-geometric-pattern-hipster-fashion-design-print-hexagonal-175905258.html?\\ imageid=0DF26DE9-AC7B-4C78-8770-E1AC9EC8783A\\ \u0026p=379271\\ \u0026pn=1\\ \u0026searchId=8cf93ae4926578c6f55e3756c4010a71\u0026searchtype=0\"\"\"; More about TextBlocks With the syntax rules under your belt, let’s learn more about Text blocks. Not a String variation Java isn’t adding a variation of type String with Text Blocks. They are compiled to regular String instances (java.lang.String). You can think of Textblocks as syntactic sugar that allows you to write Strings without using the concatenating operators and escape sequences. If you decompile a class that defines a text block, you’ll see that they are compiled to regular strings with single pair of double quotes as the delimiter, as shown in the following gif (the top bar mentions that you are viewing a Decompiled .class file): Call any String method on a text block Since there is just one java.lang.String type (not a variation for Text blocks), it means that you can call all String methods on text blocks: Convert a text block to a regular string Imagine you are migrating your codebase to a development environment that doesn’t support Textblocks (Java 14 or earlier versions). In such case, you can invoke Context Actions to convert a Text Block to a regular String literal: Language Injections in Textblocks Injecting a language into Text Blocks in IntelliJ IDEA enables syntax highlighting and real-time error detection, helping to catch issues such as unclosed JSON values or HTML tags, missing or mismatched quotes in attributes, inconsistent indentation, and unescaped special characters. You also get IntelliJ IDEA’s support like code completion, and value validation.  The following gif shows how you can inject JSON as a language in a text block (language injection in IntelliJ IDEA applies to regular strings too): As you can see, the language injection option enables you to choose from multiple options (including JSON). Practical examples – where to use Text Blocks Apart from using Textblocks to store JSON data (as shown in the preceding sections), you can think of using Text Blocks to store values that usually span multiple lines such as XML, HTML data, or code snippets written in other programming languages. This section highlights the practical examples where you can use text blocks. 1. ASCII Art You can use textblock to store and output ASCII art, such as the following: String textblock = \"\"\" ╔═══════════════════════════════════════════════════════════════════════════════════════╗ ║ ║ ║ ████████╗███████╗██╗ ██╗████████╗ ██████╗ ██╗ ██████╗ ██████╗██╗ ██╗ ║ ║ ╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝ ██╔══██╗██║ ██╔═══██╗██╔════╝██║ ██╔╝ ║ ║ ██║ █████╗ ╚███╔╝ ██║ ██████╔╝██║ ██║ ██║██║ █████╔╝ ║ ║ ██║ ██╔══╝ ██╔██╗ ██║ ██╔══██╗██║ ██║ ██║██║ ██╔═██╗ ║ ║ ██║ ███████╗██╔╝ ██╗ ██║ ██████╔╝███████╗╚██████╔╝╚██████╗██║ ██╗ ║ ║ ╚═╝ ╚══════╝╚═╝ ╚═╝ ╚═╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝╚═╝ ╚═╝ ║ ║ ║ ╠═══════════════════════════════════════════════════════════════════════════════════════╣\"\"\"; 2. Logging data Imagine while working with an online shopping application, you need to log a message with order details, if the quantity for a product in an order is 0 or negative. It is common to create a String that includes literals, such as, ‘Invalid order’, and order details that can be accessed using variables like orderId, etc. Here’s a sample code to accomplish this (focus on the concatenated String): public void processOrder(int orderId, String product, int qty, LocalDate orderDate) {    if (qty \u003c= 0) {        String errorMessage = \"Invalid order quantity:\" + qty +                               \"for product\" + product + \",order ID\" + orderId;        logger.error(errorMessage);        return;    }    //.. Remaining code } The code seems harmless. However, I’ve often missed adding spaces before and after the literal text values in similar code, generating a log message similar to the following that is hard to read: Invalid order quantity: -5for productWidget,order ID12345 A safer bet would be to use textblocks for this logging message that can help you spot the missing spaces. Even if you miss adding spaces, the new line characters can space out the log messages: public void processOrder(int orderId, String product, int qty, LocalDate orderDate) {         if (qty \u003c= 0) {             String errorMessage = (\"\"\"                                    Invalid order quantity:%d                                    for product %s,                                     order ID %d\"\"\").formatted(qty, product, orderId);             logger.info(errorMessage);             System.out.println(errorMessage);             return;         }         //.. Remaining code     } 3. XML or HTML data Here’s an example of a Text Block storing a HTML value: String html = \"\"\"         \u003cHTML\u003e            \u003cBODY\u003e                \u003cP\u003eStop generating 6 million tons of plastic waste\u003c/P\u003e                \u003cUL\u003e                    \u003cLI\u003eKeep a spoon, fork, knife in your bag.\u003c/LI\u003e                     \u003cLI\u003eAvoid using single use plastic cutlery.\u003c/LI\u003e                \u003c/UL\u003e            \u003c/BODY\u003e         \u003c/HTML\u003e         \"\"\"; 4. Complex JSON data In the beginning of this blog post, I covered how text blocks can help eliminate the clutter. The clutter increases manifolds, when you start working with more complex JSON objects, as follows: String json = \"{\\n\" +               \"  \\\"cod\\\": \\\"200\\\",\\n\" +               \"  \\\"city\\\": {\\n\" +               \"    \\\"id\\\": 524901,,,,\\n\" +               \"    \\\"name\\\": \\\"GreatCity\\\",\\n\" +               \"    \\\"country\\\": \\\"AwesomeCountry\\\",\\n\" +               \"    \\\"coord\\\": {\\n\" +               \"      \\\"lat\\\": 55.7522,\\n\" +               \"      \\\"lon\\\": 37.6156\\n\" +               \"    }\\n\" +               \"  }\\n\" +               \"}\"; With textblocks, the cognitive load reduces, as you can see in the following code snippet: String json = \"\"\"               {                 \"cod\": \"200\",                 \"city\": {                   \"id\": 524901,,,,                   \"name\": \"GreatCity\",                   \"country\": \"AwesomeCountry\",                   \"coord\": {                     \"lat\": 55.7522,                     \"lon\": 37.6156                   }                 }               }\"\"\"; Perhaps you can inject language in the preceding text block and determine the syntax errors with the JSON value. 5. Multiline String values Here’s just a long line of String, stored using Text Blocks:  String aLongString = \"\"\"                      I'm a long String value, which can't fit on a                       Single line.                       \"Hey!\", would you prefer a cup of coffee?                      \"Yes, please\".                      \"\"\"; Text Blocks take off the visual clutter from multiline strings which existed in the form of concatenation operators and escape sequences.  6. SQL Queries Imagine using the following code to store a SQL query: String query =    \"SELECT name, age\" +   \"FROM EMP\" +    \"WHERE name = \\'John\\'\" +   \"AND age \u003e 20\"; The preceding code represents an invalid query. Due to missing spaces at the end of each line, this query will be interpreted as the following: SELECT name, ageFROM EMPWHERE name = 'John'AND age \u003e 20 You can address these issues by using text blocks: String query = \"\"\"   SELECT name, age   FROM EMP   WHERE name = 'John'     AND age \u003e 20   \"\"\"; 7. Email templates – multiline string values with literal and variable values When concatenating string literals with variable values, it is easy to miss adding a single space in string literal, right before or after a variable value. It could result in poorly formatted output, or output that is not-so-readable. It could also result in displaying output you didn’t expect due to those missing spaces. Consider the following code that uses a combination of string literals and variable values to send a text to a customer: String username = \"Alice\"; String topic = \"Java Records\"; String previousContext = \"We were discussing immutable data classes.\"; String email = \"Hi\" + username + \",\\n\\n\" + \"Let's continue our discussion about \" + topic + \".\\n\" + \"For context, \" + previousContext + \"\\n\\n\" + \"Can you tell me more about what specific aspects of\" + topic + \"you're interested in?\"; You could use TextBlock and formatted(), so that the variable substitution is cleaner: String email = \"\"\" Hi %s, Let's continue our discussion about %s. For context, %s Can you tell me more about what specific aspects of %s you're interested in? \"\"\".formatted(username, topic, previousContext, topic); 8. Creating simple bills  You can create simple bills (such as the following) to print using textblocks: -------------------------------------------------------------------------------------- Your Neighbourhood Art Supplies Store -------------------------------------------------------------------------------------- Date: 2023-10-20 Invoice Number: 12345 Customer Details Name: John Smith Address: 123 Main Street City: Smallville Phone: 555-123-4567 -------------------------------------------------------------------------------------- S.No. Item Name Quantity Unit Price($) Total($) -------------------------------------------------------------------------------------- 1 Acrylic Paint Set 1 20.00 20.00 2 Watercolor Brushes 5 15.00 75.00 3 Sketchbook 12 10.00 120.00 4 Oil Paints Set 1 25.00 25.00 5 Canvas Panels (5-pack) 6 12.00 72.00 -------------------------------------------------------------------------------------- Subtotal: $82.0 Sales Tax (6%): $4.92 Total Amount: $86.92; -------------------------------------------------------------------------------------- Thank you for shopping with us! -------------------------------------------------------------------------------------- Code Migrations – using text blocks instead of a regular string The release of Java 25, the next LTS version, is around the corner. If you plan to migrate your existing codebases using JDK version 14 or earlier to a newer version, you can start using Text Blocks in your code. To migrate all eligible multiline String values currently stored across multiple lines using concatenation operators to Text Blocks, you can proceed in two ways. The first approach is to run the inspection “Text blocks can be used” on your entire project or selected directories. In the Problems view window that opens, you can apply these changes individually or in a batch. To demonstrate this feature, I forked an open-source project from GitHub, JSON-java, and ran the inspection “Text blocks can be used,” as shown in the following GIF: The second approach is to create a new profile in Settings, say, ‘Migrate to 24’, and add all the migration inspections to this profile. Then, you can execute the ‘Inspect Code…’ command and run this inspection profile on your codebase. Use the Problems view window to accept multiple changes at once or review them individually. Summary Text blocks in Java are syntactic sugar to make it easy for you to create string values that span multiple lines, without needing to use concatenation operators or escape sequences. This makes it easier to read and write such values, reducing cognitive load for us developers. Since the values are clutter-free, you can also spot syntax errors in these multiline values, such as a missing quote or comma. By injecting a language or a reference into these text blocks, IntelliJ IDEA can help you further by highlighting these errors and even suggesting how to fix them. Text blocks start and end with three double quotes. By default, trailing whitespaces are ignored in text blocks. To include—or in other words, escape—the trailing whitespaces, use \\s. To join two lines, add a backslash (\\) at the end of the first line. Text blocks are quite useful when you’re working with data that usually spans multiple lines, such as JSON, SQL queries, HTML, XML, and others. You could use text blocks to output beautiful line art, format log messages, or even generate simple bills for your neighbourhood stores. The release of Java 25 is around the corner. If you’re still working with an older version of the JDK, such as 8 or 11, I recommend moving to a newer version so you can benefit from newer features like text blocks. Happy coding! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/06/IJ-social-BlogSocialShare-1280x720-2x.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the IDE for Professional Development in Java and Kotlin\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eText Blocks in Java: Perfect for Multiline Strings\u003c/h2\u003e                    \n                    \n\u003cp\u003eYou’ve likely used String variables to store values that span multiple lines, such as LLM prompts, JSON, HTML, XML, code snippets, and other such values.\u003c/p\u003e\n\n\n\n\u003cp\u003eSome of these, such as a JSON value, include double quotes as part of the data. Imagine the inconvenience of using backslashes (\u003cem\u003e\\\u003c/em\u003e) to escape those quotes, indenting lines using newlines, tabs, or spaces, and adding a concatenation operator at the end of each line. Coding such string values is a nightmare. The resulting string is not just hard to write, but also hard to read. Language-specific errors, like a missing comma in a JSON value, can easily creep in.\u003c/p\u003e\n\n\n\n\u003cp\u003eDon’t worry, there’s already a solution. Java 15 introduced Text Blocks, multiline strings that make it easier to define data that spans multiple lines. Text Blocks remove the need for concatenation operators or escape sequences when working with HTML, XML, JSON, or SQL queries stored as strings. The values are easier to read, and it’s simpler to spot issues like missing spaces in SQL queries or a missing comma in a JSON value.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s understand the benefits of using Text Blocks with an example.\u003c/p\u003e\n\n\n\n\u003ch2\u003eAn example – what are the existing pain points\u003c/h2\u003e\n\n\n\n\u003cp\u003eImagine you need to store the following JSON text in your Java code:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e{\n    \u0026#34;name\u0026#34;: \u0026#34;Sonam Wangchuk\u0026#34;\n    \u0026#34;movement\u0026#34;: \u0026#34;#ILiveSimply\u0026#34;,\n    \u0026#34;result\u0026#34;: \u0026#34;Let planet simply live\u0026#34;\n}\u003c/pre\u003e\n\n\n\u003cp\u003eThis JSON value can be stored as a multi line String value (without using a TextBlock) as follows:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString myJson = \u0026#34;{\\n\u0026#34; +\n                \u0026#34;    \\\u0026#34;name\\\u0026#34;: \\\u0026#34;Sonam Wangchuk\\\u0026#34;\\n\u0026#34; +\n                \u0026#34;    \\\u0026#34;movement\\\u0026#34;: \\\u0026#34;#ILiveSimply\\\u0026#34;,\\n\u0026#34; +\n                \u0026#34;    \\\u0026#34;result\\\u0026#34;: \\\u0026#34;Let planet simply live\\\u0026#34;\\n\u0026#34; +\n                \u0026#34;}\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eWriting the preceding code manually can be a nightmare. Escape characters and concatenation operators make it hard to write and read. To include double quotes within a string, you must escape them using a backslash (since ” is also a string delimiter). To preserve the formatting of the JSON object, you need to add whitespace such as new lines, tabs, or spaces.\u003c/p\u003e\n\n\n\u003cp\u003eWith all that formatting overhead, you probably missed that the JSON above is missing a comma at the end of the first line. This missing comma can cause a parsing error later if you try to convert the string into a JSON object.\u003c/p\u003e\n\n\n\u003cp\u003eLet’s see how Text Blocks can help.\u003c/p\u003e\n\n\n\u003ch3\u003eUsing Text Blocks\u003c/h3\u003e\n\n\n\u003cp\u003eTextBlocks are multiline Strings (their type is \u003ccode\u003ejava.lang.String\u003c/code\u003e). By using Text Blocks, you can store the previous String value, as follows:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString myJson = \u0026#34;\u0026#34;\u0026#34;\n                {\n                    \u0026#34;name\u0026#34;: \u0026#34;Sonam Wangchuk\u0026#34;\n                    \u0026#34;movement\u0026#34;: \u0026#34;#ILiveSimply\u0026#34;,\n                    \u0026#34;result\u0026#34;: \u0026#34;Let planet simply live\u0026#34;\n                }\u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eText Blocks are simple to create, read, and edit. They eliminate the need for concatenation operators and (most) escape sequences when working with String values that span more than one line, as shown below:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeONcUSwmLJ_zljoc2YF51JzDUxmDaH3ucj2esIPSQG2DBUHv6vlYSIW_OAxAwTWQLU0lvW97QUwP1KbhrRkCfOjKURnhmGEmjTihxeAv9Jsn0pX2fPYNaO8rkKOu8DSzliLZKe7Q?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003cp\u003eThe next section covers the syntax details of text blocks. If you’re already familiar with them, feel free to skip ahead.\u003c/p\u003e\n\n\n\u003ch2\u003eSyntax of TextBlocks\u003c/h2\u003e\n\n\n\u003cp\u003eHere are a couple of syntax rules to follow when you are working with Text Blocks.\u003c/p\u003e\n\n\n\u003ch3\u003eOpening and closing delimiter – \u003ccode\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eUnlike the single double quotes (\u003ccode\u003e\u0026#34;\u003c/code\u003e) used for regular String values, Text Blocks use three double quotes (\u003ccode\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/code\u003e) as their opening and closing delimiters. The opening delimiter can be followed by zero or more whitespaces, but it must be followed by a line terminator. A Text Block value begins after this line terminator.\u003c/p\u003e\n\n\n\u003cp\u003eIf a Text Block doesn’t include a newline character immediately after the opening \u003ccode\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/code\u003e, IntelliJ IDEA can detect this and prompt you to correct it:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe_h4gjUfurAr9uAlX_UjPYkkgAv0BMbbODf_dJKFDsa_KJPlaV-TK7V4UFeVt9SKWE_nkxaSE2WX899uQs8AKPimXbngIr6NUNrQV_B-0g37KC_2uho6G4iGGk7xfM9Prk9jpI1A?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eIncidental white spaces\u003c/h3\u003e\n\n\n\u003cp\u003eWhat rules does the compiler follow to include or exclude leading and trailing whitespace in a Text Block? Before we answer this question, let’s first understand what whitespaces are. When we talk about a whitespace in Java Text Blocks, it can refer to different types of characters, such as:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA space – The standard space character we use to separate words\u003c/li\u003e\n\u003cli\u003eTabs – The popular Tab characters, that is, (\u003ccode\u003e\u0026#39;\\t\u0026#39;\u003c/code\u003e). Wars have been fought over whether to use tabs or space to indent code :)\u003c/li\u003e\n\u003cli\u003eLine breaks – Newline characters (\u003ccode\u003e\u0026#39;\\n\u0026#39;\u003c/code\u003e on Unix/Linux/macOS, or \u003ccode\u003e\u0026#39;\\r\\n\u0026#39;\u003c/code\u003e on Windows)\u003c/li\u003e\n\u003cli\u003eCarriage returns – (\u003ccode\u003e\u0026#39;\\r\u0026#39;\u003c/code\u003e)\u003c/li\u003e\n\n\u003cp\u003eFirst, let’s talk about how the leading white spaces are handled in a Text Block.\u003c/p\u003e\n\n\n\u003ch4\u003eLeading spaces\u003c/h4\u003e\n\n\n\u003cp\u003eWhy do you need leading spaces? You would usually add tabs or spaces to values, such as a JSON, to align them vertically in your code. In Text Blocks, the leftmost non-whitespace character on any of the lines or the leftmost closing delimiter defines where meaningful white space begins. IntelliJ IDEA helps you view this position – using a vertical line – a feature that I absolutely love about Text Block’s support in IntelliJ IDEA.\u003c/p\u003e\n\n\n\u003cp\u003eHere’s how the vertical bar in IntelliJ IDEA lets you visualize the starting position of your Text Block values:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcVyNYPTiF7Ek0YBzgMkd6tJX1ATb44c37JCdlcmh7tkVBloQzKkO0twnU5pKX97LrFkvuuKHrCkJ9_mJ30evxV3RSaFsG_ewo-lUgrxa0lIYjsEn2MTm3GwGROeQ8bhrD_-EhFEw?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003cp\u003eJust in case you can’t view the vertical green line shown in the preceding image, use Shift+Shift, Find ‘Show indent guides’, and enable it in IntelliJ IDEA.\u003c/p\u003e\n\n\n\u003cp\u003eThe following image shows another way to understand which leading spaces are included in your text blocks – blue rectangles represent the spaces that are not part of your textblock and the light green rectangles represent the leading spaces that are included in your text block:  \u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfv0T_BcQy9JC-DtKdPyjV4mysmMphTShQiFzkZF1F2zCydGx9oaBo2_zAxljK10WZFU7jIEF4kTl6curBljr9A46leBfqyKobA3PJJYOso48wlsj787EqBETcLRhSZjCeZe32M0A?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003cp\u003eIf you move the closing triple quotes to the left, the white spaces included in the textblock changes, as shown in the following image:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe6_9QTRXCtg_u7-BgzhqsjQTbLItA5QiXljnT8Cvth73HE7_N8IB0-YikqD6_5e6_DlYrVDmyqwu3zDcBJ4kw0v3q_ts1CSc34q1_92kLwyaeRW9ClSrFwB2UjTcmiSI86JZI8?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch4\u003eTrailing white spaces\u003c/h4\u003e\n\n\n\u003cp\u003eBy default, the trailing white spaces are removed in Text Block values. IntelliJ IDEA can detect when you add trailing white spaces in your textblocks. It would highlight those spaces (to ensure you didn’t add them by mistake). \u003c/p\u003e\n\n\n\u003cp\u003eWhen you click Alt + Enter, it could prompt you to either ‘Escape trailing whitespace characters’, or ‘Remove trailing whitespace characters’. If you choose the former option, IntelliJ IDEA will add \\s at the end (\\s represents a single space), as shown in the following gif:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdTwdws6DaERyJL0-_49b2sOPKuivk1F_uD4MQ9dIBSR8amyYAUAyDmKywmxbWpWRKVkMx_9I5krok09otAYpwsPpMnzdtbG7uI-EiM_LGT41NwJdzS45PXTzH37vXis-E16ncGMA?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch4\u003eWhere would you use a trailing white space?\u003c/h4\u003e\n\n\n\u003cp\u003eImagine you are using a method from a library that reads the first 40 characters of a line to extract two values from it, and store it in a \u003ccode\u003eMap\u003c/code\u003e, as follows:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003epublic Map\u0026lt;String, String\u0026gt; parseFixedWidthData(String fixedWidthData) {\n    Map\u0026lt;String, String\u0026gt; result = new HashMap\u0026lt;\u0026gt;();\n    String[] lines = fixedWidthData.split(\u0026#34;\\n\u0026#34;);\n    for (String line : lines) {\n        String field1 = line.substring(0, 19).trim();\n        String field2 = line.substring(20, 39).trim();\n        result.put(field1, field2);\n    }\n    return result;\n}\u003c/pre\u003e\n\n\n\u003cp\u003eIf you are using a textblock to pass value to the method \u003ccode\u003eparseFixedWidthData\u003c/code\u003e, you should define it as follows, escaping the trailing whitespaces, so the the preceding method doesn’t throw an \u003ccode\u003eIndexOutOfBounds\u003c/code\u003e exception:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString fixedWidthData = \u0026#34;\u0026#34;\u0026#34;\n                        CUSTOMER_NAME       JOHN DOE           \\s\n                        ACCOUNT_NUMBER      12345678-9879      \\s\n                        AGE                      45            \\s\u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003ch3\u003eContinuation char – \\\u003c/h3\u003e\n\n\n\u003cp\u003eWhen you place your text on a new line in a text block, a new line char is added to your String value. Imagine using a textblock to store a store long URL so that it is easy to read, as follows:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString apiUrl = \u0026#34;\u0026#34;\u0026#34;\n        https://www.alamy.com/stock-photo-abstract-geometric-pattern-hipster-fashion-design-print-hexagonal-175905258.html?\n        imageid=0DF26DE9-AC7B-4C78-8770-E1AC9EC8783A\n        \u0026amp;p=379271\n        \u0026amp;pn=1\n        \u0026amp;searchId=8cf93ae4926578c6f55e3756c4010a71\u0026amp;searchtype=0\u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eHowever, if you use the preceding text block to connect to a URL and retrieve a response, the code will throw an exception. Inclusion of \\n in the URL makes it an invalid URL. To address it, you can use the continuation character, that is, \u003ccode\u003e\\\u003c/code\u003e at the end of a line in your text block (so that the resulting string doesn’t include a new line character):\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString apiUrl = \u0026#34;\u0026#34;\u0026#34;\n        https://www.alamy.com/stock-photo-abstract-geometric-pattern-hipster-fashion-design-print-hexagonal-175905258.html?\\\n        imageid=0DF26DE9-AC7B-4C78-8770-E1AC9EC8783A\\\n        \u0026amp;p=379271\\\n        \u0026amp;pn=1\\\n        \u0026amp;searchId=8cf93ae4926578c6f55e3756c4010a71\u0026amp;searchtype=0\u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003ch2\u003eMore about TextBlocks\u003c/h2\u003e\n\n\n\u003cp\u003eWith the syntax rules under your belt, let’s learn more about Text blocks.\u003c/p\u003e\n\n\n\u003ch3\u003eNot a String variation\u003c/h3\u003e\n\n\n\u003cp\u003eJava isn’t adding a variation of type String with Text Blocks. They are compiled to regular String instances (\u003ccode\u003ejava.lang.String\u003c/code\u003e). You can think of Textblocks as syntactic sugar that allows you to write Strings without using the concatenating operators and escape sequences. If you decompile a class that defines a text block, you’ll see that they are compiled to regular strings with single pair of double quotes as the delimiter, as shown in the following gif (the top bar mentions that you are viewing a Decompiled .class file):\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXckYGQI_JdzU4VNNVDHZX4ff-_kLTla3wru6qXP7mnP0MbroBtLqKW-FBW-8mnBkzL337H8BROKrGWHkQTKHbEr8qS7KCMZlADkjhugktBvNh-8qmp3nUIQlr-g_19LF0zQMpedQw?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eCall any String method on a text block\u003c/h3\u003e\n\n\n\u003cp\u003eSince there is just one java.lang.String type (not a variation for Text blocks), it means that you can call all String methods on text blocks:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcKjL6b0NZWKI4b9ItQU9yTvr5uKjXl2XlDRK-xoLrFYCW4Mk6_6LDPFyrhJ8io6aJues3MGdGhEL5PQ3wTpzJoXglDHzccHLQO4xNwf-FZOV-r-KN5tgMWhXJYL7zb0XFcw-dB9A?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eConvert a text block to a regular string\u003c/h3\u003e\n\n\n\u003cp\u003eImagine you are migrating your codebase to a development environment that doesn’t support Textblocks (Java 14 or earlier versions). In such case, you can invoke Context Actions to convert a Text Block to a regular String literal:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcMppKvmv5kYe5QXZ4spK4f1RPKIYP3wkWitjitrb4snX2ZYns514mAKtLwcIyfKG3HF8TgDEezFTtWcKIbyZ_ooAI7L5zfSQAHFaM5YaRlGybBqF72lI4WfeKhUr6yW9oCmX_COw?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3\u003eLanguage Injections in Textblocks\u003c/h3\u003e\n\n\n\u003cp\u003eInjecting a language into Text Blocks in IntelliJ IDEA enables syntax highlighting and real-time error detection, helping to catch issues such as unclosed JSON values or HTML tags, missing or mismatched quotes in attributes, inconsistent indentation, and unescaped special characters. You also get IntelliJ IDEA’s support like code completion, and value validation. \u003c/p\u003e\n\n\n\u003cp\u003eThe following gif shows how you can inject JSON as a language in a text block (language injection in IntelliJ IDEA applies to regular strings too):\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfFUSz4-i7YQZd9fVNW8n7-iFihnAqeP_UvxpiPFjS8QBpYMJ5_010gJglwuYVZQ6iDF1OGk9STxrzzqQGPnD4LtdZTWENZVMHBDei0Qcisvx6rxKSocTamGq6zEXImjLQhbR2W5w?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003cp\u003eAs you can see, the language injection option enables you to choose from multiple options (including JSON).\u003c/p\u003e\n\n\n\u003ch2\u003ePractical examples – where to use Text Blocks\u003c/h2\u003e\n\n\n\u003cp\u003eApart from using Textblocks to store JSON data (as shown in the preceding sections), you can think of using Text Blocks to store values that usually span multiple lines such as XML, HTML data, or code snippets written in other programming languages. This section highlights the practical examples where you can use text blocks.\u003c/p\u003e\n\n\n\u003ch3\u003e1. ASCII Art\u003c/h3\u003e\n\n\n\u003cp\u003eYou can use textblock to store and output ASCII art, such as the following:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString textblock = \u0026#34;\u0026#34;\u0026#34;\n        ╔═══════════════════════════════════════════════════════════════════════════════════════╗\n        ║                                                                                       ║\n        ║    ████████╗███████╗██╗  ██╗████████╗    ██████╗ ██╗      ██████╗  ██████╗██╗  ██╗    ║\n        ║    ╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝    ██╔══██╗██║     ██╔═══██╗██╔════╝██║ ██╔╝    ║\n        ║       ██║   █████╗   ╚███╔╝    ██║       ██████╔╝██║     ██║   ██║██║     █████╔╝     ║\n        ║       ██║   ██╔══╝   ██╔██╗    ██║       ██╔══██╗██║     ██║   ██║██║     ██╔═██╗     ║\n        ║       ██║   ███████╗██╔╝ ██╗   ██║       ██████╔╝███████╗╚██████╔╝╚██████╗██║  ██╗    ║\n        ║       ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝       ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝    ║\n        ║                                                                                       ║\n        ╠═══════════════════════════════════════════════════════════════════════════════════════╣\u0026#34;\u0026#34;\u0026#34;;\n\u003c/pre\u003e\n\n\n\n\n\u003ch3\u003e2. Logging data\u003c/h3\u003e\n\n\n\u003cp\u003eImagine while working with an online shopping application, you need to log a message with order details, if the quantity for a product in an order is 0 or negative. It is common to create a String that includes literals, such as, ‘Invalid order’, and order details that can be accessed using variables like orderId, etc. Here’s a sample code to accomplish this (focus on the concatenated String):\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003epublic void processOrder(int orderId, String product, int qty, LocalDate orderDate) {\n   if (qty \u0026lt;= 0) {\n       String errorMessage = \u0026#34;Invalid order quantity:\u0026#34; + qty + \n                             \u0026#34;for product\u0026#34; + product + \u0026#34;,order ID\u0026#34; + orderId;\n       logger.error(errorMessage);\n       return;\n   }\n   //.. Remaining code\n}\u003c/pre\u003e\n\n\n\u003cp\u003eThe code seems harmless. However, I’ve often missed adding spaces before and after the literal text values in similar code, generating a log message similar to the following that is hard to read:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eInvalid order quantity: -5for productWidget,order ID12345\u003c/pre\u003e\n\n\n\u003cp\u003eA safer bet would be to use textblocks for this logging message that can help you spot the missing spaces. Even if you miss adding spaces, the new line characters can space out the log messages:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003epublic void processOrder(int orderId, String product, int qty, LocalDate orderDate) {\n        if (qty \u0026lt;= 0) {\n            String errorMessage = (\u0026#34;\u0026#34;\u0026#34;\n                                   Invalid order quantity:%d\n                                   for product %s, \n                                   order ID %d\u0026#34;\u0026#34;\u0026#34;).formatted(qty, product, orderId);\n            logger.info(errorMessage);\n            System.out.println(errorMessage);\n            return;\n        }\n        //.. Remaining code\n    }\u003c/pre\u003e\n\n\n\u003ch3\u003e3. XML or HTML data\u003c/h3\u003e\n\n\n\u003cp\u003eHere’s an example of a Text Block storing a HTML value:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString html = \u0026#34;\u0026#34;\u0026#34;\n        \u0026lt;HTML\u0026gt;\n           \u0026lt;BODY\u0026gt;\n               \u0026lt;P\u0026gt;Stop generating 6 million tons of plastic waste\u0026lt;/P\u0026gt;\n               \u0026lt;UL\u0026gt;\n                   \u0026lt;LI\u0026gt;Keep a spoon, fork, knife in your bag.\u0026lt;/LI\u0026gt; \n                   \u0026lt;LI\u0026gt;Avoid using single use plastic cutlery.\u0026lt;/LI\u0026gt;\n               \u0026lt;/UL\u0026gt;\n           \u0026lt;/BODY\u0026gt;\n        \u0026lt;/HTML\u0026gt;\n        \u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003ch3\u003e4. Complex JSON data\u003c/h3\u003e\n\n\n\u003cp\u003eIn the beginning of this blog post, I covered how text blocks can help eliminate the clutter. The clutter increases manifolds, when you start working with more complex JSON objects, as follows:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString json = \u0026#34;{\\n\u0026#34; +\n              \u0026#34;  \\\u0026#34;cod\\\u0026#34;: \\\u0026#34;200\\\u0026#34;,\\n\u0026#34; +\n              \u0026#34;  \\\u0026#34;city\\\u0026#34;: {\\n\u0026#34; +\n              \u0026#34;    \\\u0026#34;id\\\u0026#34;: 524901,,,,\\n\u0026#34; +\n              \u0026#34;    \\\u0026#34;name\\\u0026#34;: \\\u0026#34;GreatCity\\\u0026#34;,\\n\u0026#34; +\n              \u0026#34;    \\\u0026#34;country\\\u0026#34;: \\\u0026#34;AwesomeCountry\\\u0026#34;,\\n\u0026#34; +\n              \u0026#34;    \\\u0026#34;coord\\\u0026#34;: {\\n\u0026#34; +\n              \u0026#34;      \\\u0026#34;lat\\\u0026#34;: 55.7522,\\n\u0026#34; +\n              \u0026#34;      \\\u0026#34;lon\\\u0026#34;: 37.6156\\n\u0026#34; +\n              \u0026#34;    }\\n\u0026#34; +\n              \u0026#34;  }\\n\u0026#34; +\n              \u0026#34;}\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eWith textblocks, the cognitive load reduces, as you can see in the following code snippet:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString json = \u0026#34;\u0026#34;\u0026#34;\n              {\n                \u0026#34;cod\u0026#34;: \u0026#34;200\u0026#34;,\n                \u0026#34;city\u0026#34;: {\n                  \u0026#34;id\u0026#34;: 524901,,,,\n                  \u0026#34;name\u0026#34;: \u0026#34;GreatCity\u0026#34;,\n                  \u0026#34;country\u0026#34;: \u0026#34;AwesomeCountry\u0026#34;,\n                  \u0026#34;coord\u0026#34;: {\n                    \u0026#34;lat\u0026#34;: 55.7522,\n                    \u0026#34;lon\u0026#34;: 37.6156\n                  }\n                }\n              }\u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003ePerhaps you can inject language in the preceding text block and determine the syntax errors with the JSON value.\u003c/p\u003e\n\n\n\u003ch3\u003e5. Multiline String values\u003c/h3\u003e\n\n\n\u003cp\u003eHere’s just a long line of String, stored using Text Blocks: \u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString aLongString = \u0026#34;\u0026#34;\u0026#34;\n                     I\u0026#39;m a long String value, which can\u0026#39;t fit on a \n                     Single line. \n                     \u0026#34;Hey!\u0026#34;, would you prefer a cup of coffee?\n                     \u0026#34;Yes, please\u0026#34;.\n                     \u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eText Blocks take off the visual clutter from multiline strings which existed in the form of concatenation operators and escape sequences. \u003c/p\u003e\n\n\n\u003ch3\u003e6. SQL Queries\u003c/h3\u003e\n\n\n\u003cp\u003eImagine using the following code to store a SQL query:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString query = \n  \u0026#34;SELECT name, age\u0026#34; +\n  \u0026#34;FROM EMP\u0026#34; + \n  \u0026#34;WHERE name = \\\u0026#39;John\\\u0026#39;\u0026#34; +\n  \u0026#34;AND age \u0026gt; 20\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eThe preceding code represents an invalid query. Due to missing spaces at the end of each line, this query will be interpreted as the following:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eSELECT name, ageFROM EMPWHERE name = \u0026#39;John\u0026#39;AND age \u0026gt; 20\nYou can address these issues by using text blocks:\nString query = \u0026#34;\u0026#34;\u0026#34;\n  SELECT name, age\n  FROM EMP\n  WHERE name = \u0026#39;John\u0026#39;\n    AND age \u0026gt; 20\n  \u0026#34;\u0026#34;\u0026#34;;\u003c/pre\u003e\n\n\n\u003ch3\u003e7. Email templates – multiline string values with literal and variable values\u003c/h3\u003e\n\n\n\u003cp\u003eWhen concatenating string literals with variable values, it is easy to miss adding a single space in string literal, right before or after a variable value. It could result in poorly formatted output, or output that is not-so-readable. It could also result in displaying output you didn’t expect due to those missing spaces. Consider the following code that uses a combination of string literals and variable values to send a text to a customer:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString username = \u0026#34;Alice\u0026#34;;\n    String topic = \u0026#34;Java Records\u0026#34;;\n    String previousContext = \u0026#34;We were discussing immutable data classes.\u0026#34;;\n        \n    String email = \u0026#34;Hi\u0026#34; + username + \u0026#34;,\\n\\n\u0026#34; +\n            \u0026#34;Let\u0026#39;s continue our discussion about \u0026#34; + topic + \u0026#34;.\\n\u0026#34; +\n            \u0026#34;For context, \u0026#34; + previousContext + \u0026#34;\\n\\n\u0026#34; +\n            \u0026#34;Can you tell me more about what specific aspects of\u0026#34; + topic + \u0026#34;you\u0026#39;re interested in?\u0026#34;;\u003c/pre\u003e\n\n\n\u003cp\u003eYou could use TextBlock and formatted(), so that the variable substitution is cleaner:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eString email = \u0026#34;\u0026#34;\u0026#34;\n                Hi %s,\n                \n                Let\u0026#39;s continue our discussion about %s.\n                For context, %s\n                \n                Can you tell me more about what specific aspects of %s you\u0026#39;re interested in?\n                \u0026#34;\u0026#34;\u0026#34;.formatted(username, topic, previousContext, topic);\n\u003c/pre\u003e\n\n\n\n\n\n\u003ch3\u003e8. Creating simple bills \u003c/h3\u003e\n\n\n\u003cp\u003eYou can create simple bills (such as the following) to print using textblocks:\u003c/p\u003e\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e--------------------------------------------------------------------------------------\n                            Your Neighbourhood Art Supplies Store\n--------------------------------------------------------------------------------------\nDate:               2023-10-20                               Invoice Number:     12345                 \nCustomer Details\nName:               John Smith            \nAddress:            123 Main Street       \nCity:               Smallville            \nPhone:              555-123-4567          \n--------------------------------------------------------------------------------------\nS.No.           Item Name                  Quantity        Unit Price($)      Total($)\n--------------------------------------------------------------------------------------\n1        Acrylic Paint Set                       1             20.00             20.00\n2        Watercolor Brushes                      5             15.00             75.00\n3        Sketchbook                             12             10.00            120.00\n4        Oil Paints Set                          1             25.00             25.00\n5        Canvas Panels (5-pack)                  6             12.00             72.00\n--------------------------------------------------------------------------------------\nSubtotal:       $82.0\nSales Tax (6%): $4.92\nTotal Amount:   $86.92;\n--------------------------------------------------------------------------------------\n                            Thank you for shopping with us!\n--------------------------------------------------------------------------------------\n\u003c/pre\u003e\n\n\n\u003ch2\u003eCode Migrations – using text blocks instead of a regular string\u003c/h2\u003e\n\n\n\u003cp\u003eThe release of Java 25, the next LTS version, is around the corner. If you plan to migrate your existing codebases using JDK version 14 or earlier to a newer version, you can start using Text Blocks in your code.\u003c/p\u003e\n\n\n\u003cp\u003eTo migrate all eligible multiline String values currently stored across multiple lines using concatenation operators to Text Blocks, you can proceed in two ways. The first approach is to run the inspection “Text blocks can be used” on your entire project or selected directories. In the Problems view window that opens, you can apply these changes individually or in a batch.\u003c/p\u003e\n\n\n\u003cp\u003eTo demonstrate this feature, I forked an open-source project from GitHub, JSON-java, and ran the inspection “Text blocks can be used,” as shown in the following GIF:\u003c/p\u003e\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeBuooc4MvMaIRLP1J65AVBvE7mxIxMs9_8qS6co0yX9j-ZbshDJDCdPmOCMxB0ZOfYc-tC-Vo9JpArCKNG2iaHtiCS-uHTV5c2IGWsv1tUSRzlyxw_DaTrEe6W93Bq8bTLE66X?key=yW1ZQqJF1sHWdQbTY4ukfpAU\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\u003cp\u003eThe second approach is to create a new profile in Settings, say, ‘Migrate to 24’, and add all the migration inspections to this profile. Then, you can execute the ‘Inspect Code…’ command and run this inspection profile on your codebase. Use the Problems view window to accept multiple changes at once or review them individually.\u003c/p\u003e\n\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\n\u003cp\u003eText blocks in Java are syntactic sugar to make it easy for you to create string values that span multiple lines, without needing to use concatenation operators or escape sequences. This makes it easier to read and write such values, reducing cognitive load for us developers. Since the values are clutter-free, you can also spot syntax errors in these multiline values, such as a missing quote or comma. By injecting a language or a reference into these text blocks, IntelliJ IDEA can help you further by highlighting these errors and even suggesting how to fix them.\u003c/p\u003e\n\n\n\u003cp\u003eText blocks start and end with three double quotes. By default, trailing whitespaces are ignored in text blocks. To include—or in other words, escape—the trailing whitespaces, use \u003ccode\u003e\\s\u003c/code\u003e. To join two lines, add a backslash (\u003ccode\u003e\\\u003c/code\u003e) at the end of the first line.\u003c/p\u003e\n\n\n\u003cp\u003eText blocks are quite useful when you’re working with data that usually spans multiple lines, such as JSON, SQL queries, HTML, XML, and others. You could use text blocks to output beautiful line art, format log messages, or even generate simple bills for your neighbourhood stores.\u003c/p\u003e\n\n\n\u003cp\u003eThe release of Java 25 is around the corner. If you’re still working with an older version of the JDK, such as 8 or 11, I recommend moving to a newer version so you can benefit from newer features like text blocks.\u003c/p\u003e\n\n\n\u003cp\u003eHappy coding!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/ol\u003e\u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "24 min read",
  "publishedTime": null,
  "modifiedTime": null
}
