{
  "id": "79ca7f5e-ba1a-4e06-870d-a68f288bcccb",
  "title": "3.18.0 Release with Support for more Diagnostics, SQL/JSON, Oracle Associative Arrays, Multi dimensional Arrays, R2DBC 1.0",
  "link": "https://blog.jooq.org/3-18-0-release-with-support-for-more-diagnostics-sql-json-oracle-associative-arrays-multi-dimensional-arrays-r2dbc-1-0/",
  "description": "DiagnosticsListener improvements A lot of additional diagnostics have been added, including the automated detection of pattern replacements, helping you lint your SQL queries irrespective of whether you’re using jOOQ to write your SQL, or if you’re using it as a JDBC / R2DBC proxy for an existing application. A lot of these diagnostics are available … Continue reading 3.18.0 Release with Support for more Diagnostics, SQL/JSON, Oracle Associative Arrays, Multi dimensional Arrays, R2DBC 1.0 →",
  "author": "lukaseder",
  "published": "Wed, 08 Mar 2023 16:34:56 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "Uncategorized"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 3101,
  "excerpt": "DiagnosticsListener improvements A lot of additional diagnostics have been added, including the automated detection of pattern replacements, helping you lint your SQL queries irrespective of whethe…",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "DiagnosticsListener improvements A lot of additional diagnostics have been added, including the automated detection of pattern replacements, helping you lint your SQL queries irrespective of whether you’re using jOOQ to write your SQL, or if you’re using it as a JDBC / R2DBC proxy for an existing application. A lot of these diagnostics are available as ordinary pattern transformations, which we’ve started adding in jOOQ 3.17. Some new patterns include: CASE WHEN a = b THEN 1 END to CASE a WHEN b THEN 1 END CASE WHEN x IS NULL THEN y ELSE x END to NVL(x, y) CASE WHEN x = y THEN NULL ELSE x END to NULLIF(x, y) (SELECT COUNT(*) FROM t) \u003e 0 to EXISTS(SELECT 1 FROM t) And much more See these sections for more details: Diagnostics Diagnostics connection Diagnostics logging Pattern transformations More SQL/JSON support SQL/JSON is one of the most promising recent additions to the SQL language, and we’re always keen on improving jOOQ’s support for these features. In this release, we’ve added support for a variety of useful, vendor specific SQL/JSON extensions, including: JSON_KEYS (from MySQL) JSON_SET (from MySQL) JSON_INSERT (from MySQL) JSON_REPLACE (from MySQL) JSON_REMOVE (from MySQL) Accessors -\u003e and -\u003e\u003e (from PostgreSQL) More information on new JSON function support can be found here More QOM implementation The Query Object Model (QOM) API, which was introduced in jOOQ 3.16, has been enhanced with more statement, function, expression support, allowing for more complete SQL transformation and traversal. This is specifically interesting for pattern replacements, diagnostics, and custom SQL transformations. The QOM API is still in an experimental state. While we don’t expect any fundamental changes anymore, there can still be source incompatibilities between minor releases. For more details about the model API, click here Oracle associative array support When using stored procedures in Oracle, users are likely going to make heavy use of Oracle PL/SQL package types. We’ve supported PL/SQL RECORD types and PL/SQL TABLE types for a while, both of which had limited ojdbc support in the past. Associative array support can still be a challenge with ojdbc, but with jOOQ and its code generator, most associative arrays can be bound and fetched very easily. PostgreSQL Multi dimensional array types An often requested feature from our PostgreSQL integration is multi dimensional array support. This version of jOOQ will support those types in code generation (where possible) and at runtime via multi dimensional Java arrays. Kotlin specific improvements jOOQ is also the best way to write SQL in kotlin. We’re always looking out for new convenience via the jOOQ-kotlin extension module, for example: ResultQuery Collectors JSON access More nullability support in generated code For more details, see this section of the manual R2DBC 1.0 support This jOOQ version upgrades its R2DBC dependency to 1.0.0.RELEASE. The full release notes can be found here.",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12001\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003ch3\u003eDiagnosticsListener improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eA lot of additional diagnostics have been added, including the automated detection of pattern replacements, helping you lint your SQL queries irrespective of whether you’re using jOOQ to write your SQL, or if you’re using it as a JDBC / R2DBC proxy for an existing application.\u003c/p\u003e\n\n\n\n\u003cp\u003eA lot of these diagnostics are available as ordinary pattern transformations, which we’ve started adding in jOOQ 3.17. Some new patterns include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCASE WHEN a = b THEN 1 END\u003c/code\u003e to \u003ccode\u003eCASE a WHEN b THEN 1 END\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eCASE WHEN x IS NULL THEN y ELSE x END\u003c/code\u003e to \u003ccode\u003eNVL(x, y)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eCASE WHEN x = y THEN NULL ELSE x END\u003c/code\u003e to \u003ccode\u003eNULLIF(x, y)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e(SELECT COUNT(*) FROM t) \u0026gt; 0\u003c/code\u003e to \u003ccode\u003eEXISTS(SELECT 1 FROM t)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eAnd much more\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSee these sections for more details:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-execution/diagnostics/\" data-type=\"URL\" data-id=\"https://www.jooq.org/doc/3.18/manual/sql-execution/diagnostics/\"\u003eDiagnostics\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/dsl-context/custom-settings/settings-diagnostics-connection/\"\u003eDiagnostics connection\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/dsl-context/custom-settings/settings-diagnostics-logging/\"\u003eDiagnostics logging\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/queryparts/sql-transformation/transform-patterns/\"\u003ePattern transformations\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eMore SQL/JSON support\u003c/h3\u003e\n\n\n\n\u003cp\u003eSQL/JSON is one of the most promising recent additions to the SQL language, and we’re always keen on improving jOOQ’s support for these features. In this release, we’ve added support for a variety of useful, vendor specific SQL/JSON extensions, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eJSON_KEYS (from MySQL)\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON_SET (from MySQL)\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON_INSERT (from MySQL)\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON_REPLACE (from MySQL)\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON_REMOVE (from MySQL)\u003c/li\u003e\n\n\n\n\u003cli\u003eAccessors -\u0026gt; and -\u0026gt;\u0026gt; (from PostgreSQL)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/column-expressions/json-functions/\"\u003eMore information on new JSON function support can be found here\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003eMore QOM implementation\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe Query Object Model (QOM) API, which was introduced in jOOQ 3.16, has been enhanced with more statement, function, expression support, allowing for more complete SQL transformation and traversal. This is specifically interesting for pattern replacements, diagnostics, and custom SQL transformations.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe QOM API is still in an experimental state. While we don’t expect any fundamental changes anymore, there can still be source incompatibilities between minor releases.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/model-api/\"\u003eFor more details about the model API, click here\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003eOracle associative array support\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhen using stored procedures in Oracle, users are likely going to make heavy use of Oracle PL/SQL package types. We’ve supported PL/SQL RECORD types and PL/SQL TABLE types for a while, both of which had limited ojdbc support in the past. Associative array support can still be a challenge with ojdbc, but with jOOQ and its code generator, most associative arrays can be bound and fetched very easily.\u003c/p\u003e\n\n\n\n\u003ch3\u003ePostgreSQL Multi dimensional array types\u003c/h3\u003e\n\n\n\n\u003cp\u003eAn often requested feature from our PostgreSQL integration is multi dimensional array support. This version of jOOQ will support those types in code generation (where possible) and at runtime via multi dimensional Java arrays.\u003c/p\u003e\n\n\n\n\u003ch3\u003eKotlin specific improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003ejOOQ is also the best way to write SQL in kotlin. We’re always looking out for new convenience via the jOOQ-kotlin extension module, for example:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eResultQuery Collectors\u003c/li\u003e\n\n\n\n\u003cli\u003eJSON access\u003c/li\u003e\n\n\n\n\u003cli\u003eMore nullability support in generated code\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jooq.org/doc/3.18/manual/sql-building/kotlin-sql-building/\"\u003eFor more details, see this section of the manual\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003eR2DBC 1.0 support\u003c/h3\u003e\n\n\n\n\u003cp\u003eThis jOOQ version upgrades its R2DBC dependency to 1.0.0.RELEASE.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://groups.google.com/g/jooq-user/c/s76rWaWXZ2Y\" data-type=\"URL\" data-id=\"https://groups.google.com/g/jooq-user/c/s76rWaWXZ2Y\"\u003eThe full release notes can be found here.\u003c/a\u003e\u003c/p\u003e\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2023-03-08T16:34:56Z",
  "modifiedTime": "2023-03-08T16:34:56Z"
}
