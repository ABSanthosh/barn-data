{
  "id": "5c04a83e-341b-45e5-bbaf-61fe10229c67",
  "title": "Google’s “What’s New in Web UI” Talk: Less Custom Component JavaScript, More Web Standards",
  "link": "https://www.infoq.com/news/2025/06/new-web-ui-standard-2025/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Una Kravets recently presented in a talk recent developments in Web UI supported by the Chrome team. Some common UI patterns that currently require a significant amount of JavaScript may soon be implemented in a declarative manner with new features of HTML and CSS, with less custom JavaScript, and with built-in accessibility. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Sun, 08 Jun 2025 01:12:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "JavaScript",
    "Web Development",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 4053,
  "excerpt": "Una Kravets recently presented in a talk recent developments in Web UI supported by the Chrome team. Some common UI patterns that currently require a significant amount of JavaScript may soon be imple",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250605075448/apple-touch-icon.png",
  "text": "Una Kravets recently presented in a talk recent developments in Web UI supported by the Chrome team. Some common UI patterns that currently require a significant amount of JavaScript may soon be implemented in a declarative manner with new features of HTML and CSS, with less custom JavaScript, and with built-in accessibility. The talk focuses on three particularly tricky UI patterns: customizable select menus, carousels, and hover cards. All three UI patterns are commonly found in design systems, with many lines of JavaScript to implement custom styling, presentation, layout, interaction, or accessibility patterns. With browser vendors evolving web standards to incorporate those patterns away from userland into the browsers themselves, developers may have less work to do in the future and simply rely on the platform. Less custom JavaScript also benefits users in the shape of increased performance. The proposed declarative APIs have already shipped in at least one stable browser engine. The first pattern discussed is the customizable select menu. The native \u003cselect\u003e element’s internal structure has been historically difficult to style consistently across browsers: A common frustration for developers who try to work with the browser’s built-in form controls (\u003cselect\u003e and various \u003cinput\u003e types) is that they cannot customize the appearance of these controls to fit their site’s design or user experience. In a survey of web developers about form controls and components, the top reason that devs rewrite their own versions of these controls is the inability to sufficiently customize the appearance of the native controls. The building blocks for a customizable select are the Popover API and Anchor Positioning. The Popover API handles the floating list of options, ensuring it appears above other UI elements, is easy to dismiss, and manages focus. Popover has reached baseline status and is now available in all browsers. Command invokers (command and commandfor attributes) provide a declarative HTML solution similar to popovertarget for connecting button clicks to actions (e.g., opening a dialog), reducing the need for boilerplate JavaScript. Anchor Positioning is a CSS API that lets developers position elements relative to other elements, known as anchors. This API simplifies complex layout requirements for many interface features like menus and submenus, tooltips, selects, labels, cards, settings dialogs, and many more. Anchor Positioning is part of Interop 2025, meaning that it should land in all browsers by the end of the year. The improved select element anatomy showcases two parts, a button, and a popover anchored to that button, all with corresponding selectors for targeting and styling: Styles can be applied to the popover through the selector ::picker(select). An example of custom styling is as follows: /* enter custom mode */ select, ::picker(select) { appearance: base-select; } /* style the button */ ::select-fallback-button { background: gold; font-family: fantasy; font-size: 1.2rem; } /* style the picker dropdown */ ::picker(select) { border-radius: 1rem; } /* style the options */ option { font-family: monospace; padding: 0.5rem 1rem 0.5rem 0; font-size: 1.2rem; } /* style selected option in the dropdown */ option:checked { background: powderblue; } /* style the option on hover or focus */ option:hover, option:focus-visible { background-color: pink; } /* style the active option indicator */ option::before { content: ''; font-size: 80%; margin: 0.5rem; } /* etc. */ body { padding: 2rem; } Developers are encouraged to review the full talk for additional technical details, demos, and explanations. The talk additionally explains how recent features from the CSS Overflow 5 specification, namely scroll buttons and scroll markers, enable scroll-driven animations (e.g., carousels) purely in CSS. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/06/new-web-ui-standard-2025/en/headerimage/generatedHeaderImage-1749341893629.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/unakravets\"\u003eUna Kravets\u003c/a\u003e recently \u003ca href=\"https://www.youtube.com/watch?v=VTCIStB6y8s\"\u003epresented in a talk recent developments in Web UI\u003c/a\u003e supported by the Chrome team. Some common UI patterns that currently require a significant amount of JavaScript may soon be implemented in a declarative manner with new features of HTML and CSS, with less custom JavaScript, and with built-in accessibility.\u003c/p\u003e\n\u003cp\u003eThe talk focuses on three particularly tricky UI patterns: customizable select menus, carousels, and hover cards. All three UI patterns are commonly found in design systems, with many lines of JavaScript to implement custom styling, presentation, layout, interaction, or accessibility patterns. With browser vendors evolving web standards to incorporate those patterns away from userland into the browsers themselves, developers may have less work to do in the future and simply rely on the platform. Less custom JavaScript also benefits users in the shape of increased performance. The proposed declarative APIs have already shipped in at least one stable browser engine.\u003c/p\u003e\n\u003cp\u003eThe first pattern discussed is the customizable select menu. The native \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element’s internal structure has been \u003ca href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/ControlUICustomization/explainer.md#introduction\"\u003ehistorically difficult to style consistently across browsers\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA common frustration for developers who try to work with the browser’s built-in form controls (\u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e and various \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e types) is that they cannot customize the appearance of these controls to fit their site’s design or user experience. In a survey of \u003ca href=\"http://gwhitworth.com/surveys/controls-components\"\u003eweb developers about form controls and components\u003c/a\u003e, the top reason that devs rewrite their own versions of these controls is the inability to sufficiently customize the appearance of the native controls.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe building blocks for a customizable select are the \u003ca href=\"https://developer.chrome.com/blog/introducing-popover-api\"\u003ePopover API\u003c/a\u003e and \u003ca href=\"https://developer.chrome.com/docs/css-ui/anchor-positioning-api\"\u003eAnchor Positioning\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe Popover API handles the floating list of options, ensuring it appears above other UI elements, is easy to dismiss, and manages focus. Popover \u003ca href=\"https://web.dev/blog/interop-2024-wrapup\"\u003ehas reached baseline status\u003c/a\u003e and is now available in all browsers.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Invoker_Commands_API\"\u003eCommand invokers\u003c/a\u003e (\u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003ecommandfor\u003c/code\u003e attributes) provide a declarative HTML solution similar to \u003ccode\u003epopovertarget\u003c/code\u003e for connecting button clicks to actions (e.g., opening a dialog), reducing the need for boilerplate JavaScript.\u003c/p\u003e\n\u003cp\u003eAnchor Positioning is a CSS API that lets developers position elements relative to other elements, known as anchors. This API simplifies complex layout requirements for many interface features like menus and submenus, tooltips, selects, labels, cards, settings dialogs, and many more. \u003ca href=\"https://www.infoq.com/news/2025/04/interop-2025-key-features/\"\u003eAnchor Positioning is part of Interop 2025\u003c/a\u003e, meaning that it should land in all browsers by the end of the year.\u003c/p\u003e\n\u003cp\u003eThe improved \u003ccode\u003eselect\u003c/code\u003e element anatomy \u003ca href=\"https://developer.chrome.com/blog/rfc-customizable-select\"\u003eshowcases two parts, a button, and a popover anchored to that button\u003c/a\u003e, all with corresponding selectors for targeting and styling:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://developer.chrome.com/static/blog/rfc-customizable-select/image/select-parts.png\" alt=\"\" rel=\"share\"/\u003e\u003c/p\u003e\n\u003cp\u003eStyles can be applied to the popover through the selector \u003ccode\u003e::picker(select)\u003c/code\u003e. An example of custom styling is as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e/* enter custom mode */\u003c/span\u003e\n\u003cspan\u003eselect,\n\u003cspan\u003e::picker\u003c/span\u003e(select) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eappearance\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e base-select\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style the button */\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e::select-fallback-button\u003c/span\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e gold\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efont-family\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e fantasy\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efont-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1.2\u003c/span\u003erem\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style the picker dropdown */\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e::picker\u003c/span\u003e(select) \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eborder-radius\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003erem\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style the options */\u003c/span\u003e\n\u003cspan\u003eoption \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003efont-family\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e monospace\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0.5\u003c/span\u003erem \u003cspan\u003e1\u003c/span\u003erem \u003cspan\u003e0.5\u003c/span\u003erem \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efont-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1.2\u003c/span\u003erem\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style selected option in the dropdown */\u003c/span\u003e\n\u003cspan\u003eoption\u003cspan\u003e:checked\u003c/span\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e powderblue\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style the option on hover or focus */\u003c/span\u003e\n\u003cspan\u003eoption\u003cspan\u003e:hover\u003c/span\u003e,\noption\u003cspan\u003e:focus-visible\u003c/span\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003ebackground-color\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e pink\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* style the active option indicator */\u003c/span\u003e\n\u003cspan\u003eoption\u003cspan\u003e::before\u003c/span\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003efont-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e80%\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003emargin\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0.5\u003c/span\u003erem\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* etc. */\u003c/span\u003e\n\u003cspan\u003ebody \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003erem\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDevelopers are encouraged to \u003ca href=\"https://www.youtube.com/watch?v=VTCIStB6y8s\"\u003ereview the full talk\u003c/a\u003e for additional technical details, demos, and explanations. The talk additionally explains how recent features from the \u003ca href=\"https://drafts.csswg.org/css-overflow-5/\"\u003eCSS Overflow 5 specification\u003c/a\u003e, namely scroll buttons and scroll markers, enable scroll-driven animations (e.g., carousels) \u003ca href=\"https://developer.chrome.com/blog/carousels-with-css?hl=en\"\u003epurely in CSS\u003c/a\u003e.\u003c/p\u003e\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-06-08T00:00:00Z",
  "modifiedTime": null
}
