{
  "id": "98c2206d-b330-4d59-80ed-81dba3c6cf9e",
  "title": "From idea to PR: A guide to GitHub Copilot’s agentic workflows",
  "link": "https://github.blog/ai-and-ml/github-copilot/from-idea-to-pr-a-guide-to-github-copilots-agentic-workflows/",
  "description": "A practical guide to GitHub Copilot’s agentic coding agent, chat modes, and remote MCP server so you turn issues into tested PRs with clear steps (and no hype). The post From idea to PR: A guide to GitHub Copilot’s agentic workflows appeared first on The GitHub Blog.",
  "author": "Chris Reddington",
  "published": "Tue, 01 Jul 2025 18:57:22 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "agentic AI",
    "generative AI"
  ],
  "byline": "Chris Reddington",
  "length": 14206,
  "excerpt": "A practical guide to GitHub Copilot’s agentic coding agent, chat modes, and remote MCP server so you turn issues into tested PRs with clear steps.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "I got into software to ship ideas, not to chase down hard-coded strings after a late-breaking feature request. Unfortunately, many of our day-to-day tasks as developers involve branches working on boilerplate code, refactoring, and the “pre-work” to get to the fun stuff: shipping new features. So I turned to Copilot’s agentic workflows to help speed along some of that grunt work. In my latest Rubber Duck Thursdays live stream, I put that theory to the test in a project where I wanted to localize an application that used: Tech stack: a Next.js web app and a matching SwiftUI iOS app living in two separate GitHub repos. Environment: spun up rapidly in Codespaces (on-demand dev environment) and Xcode 16 for the mobile portion. Task: an issue built from a couple of paragraphs to “Add English, French, and Spanish localization.” Copilot tools: coding agent (to turn that issue into a PR), a custom planning chat mode (to try out the new preview capabilities in VS Code), and the new remote GitHub MCP server (so we can avoid managing those dependencies in our dev environment). By the end of my stream, that idea became a GitHub issue, which turned into a fully tested, review-ready PR while I fielded chat questions, and learned about the preview custom chat mode features in VS Code. Let’s dive in. Why I use agentic workflows Even seasoned developers and teams still burn hours on jobs like: Turning vague requests into well-scoped issues Hunting down every file in a cross-cutting refactor Writing the same unit-test scaffolding again and again Copilot’s ability to create issues, along with its coding agent, custom chat modes in VS Code, and the new remote MCP backend fold those chores into one tight loop—issue to PR—while you stay firmly in the driver’s seat. You still review, tweak, and decide when to merge, but you skip the drudgery. Key capabilities covered in this livestream  CapabilityWhat it doesWhy it mattersHow to enable and use itCoding agentTurns any GitHub Issue you assign to Copilot into a PR, and works on that task asynchronously.Allows you to offload the boilerplate work while you focus on reviews and edge case logic.Learn how to enable Copilot coding agent. Create issues with CopilotConverts a natural-language prompt into a well-structured Issue with title, body, acceptance criteria, and file hints.Saves PM/eng refining and sets team members, or Copilot coding agent, up with the context they need to work effectively.Navigate to github.com/copilot and write a prompt to create an issue. Learn more about using Copilot to create issues.Custom chat modes (in preview in VS Code)Lets you script repeatable AI workflows (e.g., Planning, Refactor, Test-Writer) that appear alongside the default Ask / Edit / Agent chat modes.Allows you to package instructions and relevant tools for easier use, helping your team follow similar conventions.Add a .chatmode.md file to your repo; available in preview in VS Code release 1.101. Learn more about custom chat modes in VS Code.Remote GitHub MCP ServerAllows AI tools to access live GitHub context and tools, like issues, pull requests and code files. With the remote GitHub MCP server, you don’t need to install it locally, and can even authenticate with OAuth 2.0.Provides a smooth experience to accessing the GitHub MCP server, reducing the management overhead of a local server.Update your MCP configuration with the example shown in the remote GitHub MCP Server documentation. Copilot agent modeCopilot agent mode is a real‑time collaborator that sits in your editor, works with you, and edits files based on your needs. Unlike the coding agent, Copilot agent mode works synchronously with you.Think of agent mode as the senior dev pair programming with you. It has access to several tools (like reading/writing code, running commands in the terminal, executing tools on MCP servers), and works alongside you.Copilot agent mode is available in several IDEs including VS Code, Visual Studio, JetBrains (public preview), Eclipse (public preview) and Xcode (public preview). What you need to achieve a similar outcome A GitHub repo you can push to A Copilot subscription with coding agent enabled. (Did you know it’s now available for all paid tiers of GitHub Copilot including Copilot Business and Copilot Pro?) VS Code 1.101+ with the latest Copilot extension. Either: GitHub Remote MCP server (update your MCP configuration), or a local GitHub MCP server. Walk-through: localizing a Next.js app Here’s the exact flow I demoed on the most recent Rubber Duck Thursdays stream. 1. Capture the request as a GitHub Issue Go to the immersive view of Copilot Chat. At the bottom of the page, in the “Ask Copilot” box, describe what you want. For example, below is the prompt that I used.  Create a GitHub Issue that brings i11n capability to the application. We must support English, French and Spanish. The user must be able to change their language in their profile page. When they change the language, it must apply immediately across the site. Please include an overview/problem statement in the issue, a set of acceptance criteria, and pointers on which files need updating/creating. Copilot drafts that into an issue, which includes a title, acceptance criteria, and a loose action plan. From there, you can assign that issue to Copilot, and let it cook in the background.  2. Let the coding agent turn the issue into a PR Shortly after assignment, the coding agent: Creates a branch Starts a new session. If you have a copilot-setup-steps.yml configured, then a development environment will be configured before Copilot gets to work. Reviews the task at hand, explores the current state of the codebase, and forms a plan to complete the task. If you have any custom instructions configured, then the coding agent will also use those as context. For example, we specify that npm run lint and npm run test should pass before committing. Once complete, it opens a draft PR for your review. While that runs, you can keep coding, use it as an opportunity to learn (like we learned about custom chat modes) or grab a coffee. 3. Review the PR like you normally would Whether it’s a colleague, collaborator, or Copilot writing the code, you still need a reviewer. So it’s important to make sure you look the code over carefully, just like you would any other pull request. Start by reviewing the body of the pull request, which Copilot will have helpfully kept up to date. Then, review the code changes in the files changed tab, understanding what has changed and why. I also like to take a look at the coding agent session to understand the approach Copilot took to solving the problem. Once you are comfortable, you may want to try the code out manually in a GitHub Codespace. Or, you may want to run any existing CI checks through your GitHub Actions workflows. But again, make sure you have carefully reviewed the code before executing it. All being well, you will have green check marks being returned from your CI.  However, there’s always a possibility that you encounter failures, or spot some changes in your manual testing. For example, I spotted some hard-coded strings that the agent hadn’t addressed. Once again, we approach this just like we would any other pull request. We can post our feedback in a comment. For example, here’s the comment I used: That’s a great start. However, there are a lot of pages which are hardcoded in English still. For example, the flight search/bookings page, the check reservation page. Can you implement the localization on those pages, please? Copilot will react to the comment once again, and get to work in another session.  Level up your workflows with custom chat modes If you’re using VS Code as your daily driver with GitHub Copilot, then you’re probably used to the ask, edit and agent chat modes. But in the VS Code 1.101 release, the team has added custom chat modes in preview. This allows you to package instructions and relevant tools for easier use. For example, I built upon the VS Code team’s “Plan” chat mode example: Open the command palette in Visual Studio Code Type Configure Chat Modes Select Create new custom chat mode file. You’ll be asked to save it either in the workspace (to allow collaborating with others), or in the local user data folder (for your use). We opted for the workspace option. Enter the name. This is the name that will appear in the chat mode selection box, so pay attention to any capitalization. You should see a new file has been created with the extension .chatmode.md. This is where you can configure the instructions, and the available tools for your new custom chat mode. Below is the example that we used in the livestream, slightly modified from the VS Code team’s docs example. We’ve added the create_issue tool to the list of allowed tools, adjusted our expectations of what’s included in the issue and added an instruction about creating the issue with the `create_issue` tool once revisions are complete and approved by the user. --- description: Generate an implementation plan for new features or refactoring existing code. tools: ['codebase', 'fetch', 'findTestFiles', 'githubRepo', 'search', 'usages', 'github', 'create_issue'] --- # Planning mode instructions You are in planning mode. Your task is to generate an implementation plan for a new feature or for refactoring existing code. Don't make any code edits, just generate a plan. The plan consists of a Markdown document that describes the implementation plan, including the following sections: * Overview: A brief description of the feature or refactoring task. * Requirements: A list of requirements for the feature or refactoring task. * Implementation Steps: A detailed list of steps to implement the feature or refactoring task. * Testing: A list of tests that need to be implemented to verify the feature or refactoring task. Once the plan is complete, ask the user if they would like to create a GitHub issue for this implementation plan. If they respond affirmatively, proceed to create the issue using the `create_issue` tool. When the file is available in your teammate’s local repositories (so they’ve pulled the changes locally), VS Code surfaces the mode in the chat dropdown, allowing you to configure chat modes that are consistent and convenient across your team. Remote MCP: removing the local setup You may be used to running MCP locally through npm packages or as docker containers. However, remote MCP servers allow you to reduce the management overhead of running these tools locally. There may be other benefits too. For example, the remote GitHub MCP Servers allows you to authenticate using OAuth 2.0 instead of Personal Access Tokens. To use the GitHub Remote MCP Server in VS Code, you’ll need to update the MCP configuration. You can find the instructions on how to do that in the GitHub MCP Server repository. Going mobile: Copilot agent mode in Xcode While we didn’t show it in depth, I quickly walked through one of my previous agent mode sessions in Xcode. It showed how I gave a similar prompt to Copilot, asking to add internationalization to the app, which we were able to see in the main navigation bar of the app running in the simulator. We need to implement internationalization in the app. Please make the following changes: 1. The user can select from suported languages (English, Spanish, French) from a dropdown in their profile. 2. The main tab view should support internationalization. No other parts of the app should be changed for now. 3. When the user changes the language, it should update the rendered text instantly. Dos and don’ts ✅ Do❌ Don’tKeep issues tightly scopedAsk the agent to “re-architect the app”Provide acceptance criteriaAssume the agent knows your intentCarefully review the changes madeExecute code or merge a PR without a reviewIterate with Copilot. How often do you get something right on the first shot?Expect perfection first time Try it yourself Enable Copilot coding agent and assign work to Copilot in the background. Configure custom chat modes in VS Code Release 1.101. Configure the Remote GitHub MCP server to reduce local management efforts. Use Copilot agent mode in VS Code, Visual Studio, JetBrains (public preview), Eclipse (public preview) and Xcode (public preview). Next steps Watch the full replay of the stream for a step-by-step walkthrough. Dive into the Copilot coding agent and MCP docs for more details. Tell me what you automate first—let us know on social by tagging @github with what you’ve been working on! Join us for the next episode of Rubber Duck Thursdays. Agentic workflows within GitHub Copilot aren’t magic; they’re tools. When a single click can help reduce technical debt (or knock out any other repetitive task you dread), why not let Copilot handle the boilerplate while you tackle the more challenging, fun, and creative problems? Written by Chris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2025 Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco. Register now \u003e",
  "image": "https://github.blog/wp-content/uploads/2025/05/github-generic-wallpaper-rubber-duck-invertocat.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eI got into software to ship ideas, not to chase down hard-coded strings after a late-breaking feature request. Unfortunately, many of our day-to-day tasks as developers involve branches working on boilerplate code, refactoring, and the “pre-work” to get to the fun stuff: shipping new features.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo I turned to Copilot’s agentic workflows to help speed along some of that grunt work. In my latest \u003cstrong\u003eRubber Duck Thursdays\u003c/strong\u003e live stream, I put that theory to the test in a project where I wanted to localize an application that used:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTech stack:\u003c/strong\u003e a \u003cstrong\u003eNext.js\u003c/strong\u003e web app and a matching \u003cstrong\u003eSwiftUI\u003c/strong\u003e iOS app living in two separate GitHub repos.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEnvironment:\u003c/strong\u003e spun up rapidly in \u003cstrong\u003eCodespaces\u003c/strong\u003e (on-demand dev environment) and \u003cstrong\u003eXcode 16\u003c/strong\u003e for the mobile portion.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTask:\u003c/strong\u003e an issue built from a couple of paragraphs to “Add English, French, and Spanish localization.”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCopilot tools:\u003c/strong\u003e \u003ca href=\"https://docs.github.com/en/copilot/concepts/about-assigning-tasks-to-copilot\"\u003e\u003cstrong\u003ecoding agent\u003c/strong\u003e\u003c/a\u003e (to turn that issue into a PR), a \u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-modes#_chat-mode-file-example\"\u003ecustom \u003cstrong\u003eplanning chat mode\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e \u003c/strong\u003e(to try out the new preview capabilities in VS Code), and the new \u003cstrong\u003eremote \u003c/strong\u003e\u003ca href=\"https://github.com/github/github-mcp-server?tab=readme-ov-file#usage-with-vs-code\"\u003e\u003cstrong\u003eGitHub MCP server\u003c/strong\u003e\u003c/a\u003e (so we can avoid managing those dependencies in our dev environment).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBy the end of my stream, that idea became a GitHub issue, which turned into a fully tested, review-ready PR while I fielded chat questions, and learned about the preview custom chat mode features in VS Code.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s dive in.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Rubber Duck Thursdays - Let\u0026#39;s build\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/UXAbtYbxD_w?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-why-i-use-agentic-workflows\"\u003eWhy I use agentic workflows\u003c/h2\u003e\n\n\n\n\u003cp\u003eEven seasoned developers and teams still burn hours on jobs like:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eTurning vague requests into well-scoped issues\u003c/li\u003e\n\n\n\n\u003cli\u003eHunting down every file in a cross-cutting refactor\u003c/li\u003e\n\n\n\n\u003cli\u003eWriting the same unit-test scaffolding again and again\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eCopilot’s ability to create issues, along with its coding agent, custom chat modes in VS Code, and the new remote MCP backend fold those chores into one tight loop—issue to PR—while you stay firmly in the driver’s seat. You still review, tweak, and decide when to merge, but you skip the drudgery.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-key-capabilities-covered-in-this-livestream-nbsp\"\u003eKey capabilities covered in this livestream \u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cstrong\u003eCapability\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eWhat it does\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eWhy it matters\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003eHow to enable and use it\u003c/strong\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eCoding agent\u003c/td\u003e\u003ctd\u003eTurns any GitHub Issue you assign to Copilot into a PR, and works on that task asynchronously.\u003c/td\u003e\u003ctd\u003eAllows you to offload the boilerplate work while you focus on reviews and edge case logic.\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/enabling-copilot-coding-agent\"\u003eLearn how to enable Copilot coding agent\u003c/a\u003e. \u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eCreate issues with Copilot\u003c/td\u003e\u003ctd\u003eConverts a natural-language prompt into a well-structured Issue with title, body, acceptance criteria, and file hints.\u003c/td\u003e\u003ctd\u003eSaves PM/eng refining and sets team members, or Copilot coding agent, up with the context they need to work effectively.\u003c/td\u003e\u003ctd\u003eNavigate to \u003ca href=\"http://github.com/copilot\"\u003egithub.com/copilot\u003c/a\u003e and write a prompt to create an issue. \u003ca href=\"https://docs.github.com/en/copilot/how-tos/github-flow/using-github-copilot-to-create-issues\"\u003eLearn more about using Copilot to create issues.\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eCustom chat modes (in preview in VS Code)\u003c/td\u003e\u003ctd\u003eLets you script repeatable AI workflows (e.g., \u003cem\u003ePlanning\u003c/em\u003e, \u003cem\u003eRefactor\u003c/em\u003e, \u003cem\u003eTest-Writer\u003c/em\u003e) that appear alongside the default \u003cem\u003eAsk\u003c/em\u003e / \u003cem\u003eEdit\u003c/em\u003e / \u003cem\u003eAgent\u003c/em\u003e chat modes.\u003c/td\u003e\u003ctd\u003eAllows you to package instructions and relevant tools for easier use, helping your team follow similar conventions.\u003c/td\u003e\u003ctd\u003eAdd a \u003ccode\u003e.chatmode.md\u003c/code\u003e file to your repo; available in preview in VS Code release 1.101. \u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-modes#_custom-chat-modes\"\u003eLearn more about custom chat modes in VS Code\u003c/a\u003e.\u003cbr/\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eRemote GitHub MCP Server\u003c/td\u003e\u003ctd\u003eAllows AI tools to access live GitHub context and tools, like issues, pull requests and code files. With the remote GitHub MCP server, you don’t need to install it locally, and can even authenticate with OAuth 2.0.\u003c/td\u003e\u003ctd\u003eProvides a smooth experience to accessing the GitHub MCP server, reducing the management overhead of a local server.\u003c/td\u003e\u003ctd\u003eUpdate your MCP configuration with \u003ca href=\"https://github.com/github/github-mcp-server?tab=readme-ov-file#usage-with-vs-code\"\u003ethe example shown in the remote GitHub MCP Server documentation\u003c/a\u003e. \u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eCopilot agent mode\u003c/td\u003e\u003ctd\u003eCopilot agent mode is a real‑time collaborator that sits in your editor, works with you, and edits files based on your needs. Unlike the coding agent, Copilot agent mode works synchronously with you.\u003c/td\u003e\u003ctd\u003eThink of agent mode as the senior dev pair programming with you. It has access to several tools (like reading/writing code, running commands in the terminal, executing tools on MCP servers), and works alongside you.\u003c/td\u003e\u003ctd\u003eCopilot agent mode is available in several IDEs including \u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode\"\u003eVS Code\u003c/a\u003e, \u003ca href=\"https://learn.microsoft.com/en-us/visualstudio/ide/copilot-agent-mode?view=vs-2022\"\u003eVisual Studio\u003c/a\u003e, \u003ca href=\"https://plugins.jetbrains.com/plugin/17718-github-copilot\"\u003eJetBrains\u003c/a\u003e (public preview), \u003ca href=\"https://marketplace.eclipse.org/content/github-copilot\"\u003eEclipse\u003c/a\u003e (public preview) and \u003ca href=\"https://github.com/github/copilotforXcode/\"\u003eXcode\u003c/a\u003e (public preview).\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-what-you-need-to-achieve-a-similar-outcome\"\u003eWhat you need to achieve a similar outcome\u003c/h2\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eA GitHub repo you can push to\u003c/li\u003e\n\n\n\n\u003cli\u003eA Copilot subscription with \u003cstrong\u003ecoding agent\u003c/strong\u003e enabled. (Did you know it’s now available for all paid tiers of GitHub Copilot including \u003ca href=\"https://github.blog/changelog/2025-06-24-github-copilot-coding-agent-is-now-available-for-copilot-business-users/\"\u003eCopilot Business\u003c/a\u003e and \u003ca href=\"https://github.blog/changelog/2025-06-25-github-copilot-coding-agent-is-available-for-copilot-pro-users-in-public-preview/\"\u003eCopilot Pro\u003c/a\u003e?)\u003c/li\u003e\n\n\n\n\u003cli\u003eVS Code 1.101+ with the latest Copilot extension.\u003c/li\u003e\n\n\n\n\u003cli\u003eEither: \u003cstrong\u003eGitHub Remote MCP server\u003c/strong\u003e (update your MCP configuration), or a local GitHub MCP server.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch2 id=\"h-walk-through-localizing-a-next-js-app\"\u003eWalk-through: localizing a Next.js app\u003c/h2\u003e\n\n\n\n\u003cp\u003eHere’s the exact flow I demoed on the most recent \u003cem\u003eRubber Duck Thursdays\u003c/em\u003e stream.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"h-1-capture-the-request-as-a-github-issue\"\u003e1. Capture the request as a GitHub Issue\u003c/h3\u003e\n\n\n\n\u003cp\u003eGo to the \u003ca href=\"https://github.com/copilot\"\u003eimmersive view of Copilot Chat\u003c/a\u003e. At the bottom of the page, in the “Ask Copilot” box, describe what you want. For example, below is the prompt that I used. \u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate a GitHub Issue that brings i11n capability to the application. We must support English, French and Spanish.\n\nThe user must be able to change their language in their profile page. When they change the language, it must apply immediately across the site.\n\nPlease include an overview/problem statement in the issue, a set of acceptance criteria, and pointers on which files need updating/creating.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot drafts that into an issue, which includes a title, acceptance criteria, and a loose action plan. From there, you can assign that issue to Copilot, and let it cook in the background. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Create an Issue with GitHub Copilot\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/QtVr1SjLYzA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"h-2-let-the-coding-agent-turn-the-issue-into-a-pr\"\u003e2. Let the coding agent turn the issue into a PR\u003c/h3\u003e\n\n\n\n\u003cp\u003eShortly after assignment, the coding agent:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eCreates a branch\u003c/li\u003e\n\n\n\n\u003cli\u003eStarts a new session. If you \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent\"\u003ehave a copilot-setup-steps.yml configured\u003c/a\u003e, then a development environment will be configured before Copilot gets to work.\u003c/li\u003e\n\n\n\n\u003cli\u003eReviews the task at hand, explores the current state of the codebase, and forms a plan to complete the task.\u003c/li\u003e\n\n\n\n\u003cli\u003eIf you have \u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#adding-custom-instructions-to-your-repository\"\u003eany custom instructions configured\u003c/a\u003e, then the coding agent will also use those as context. For example, we specify that npm run lint and npm run test should pass before committing.\u003c/li\u003e\n\n\n\n\u003cli\u003eOnce complete, it opens a draft PR for your review.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eWhile that runs, you can keep coding, use it as an opportunity to learn (like we learned about custom chat modes) or grab a coffee.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"h-3-review-the-pr-like-you-normally-would\"\u003e3. Review the PR like you normally would\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhether it’s a colleague, collaborator, or Copilot writing the code, you still need a reviewer. So it’s important to make sure you look the code over carefully, just like you would any other pull request.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eStart by reviewing the body of the pull request, which Copilot will have helpfully kept up to date.\u003c/li\u003e\n\n\n\n\u003cli\u003eThen, review the code changes in the files changed tab, understanding what has changed and why. I also like to take a look at the coding agent session to understand the approach Copilot took to solving the problem.\u003c/li\u003e\n\n\n\n\u003cli\u003eOnce you are comfortable, you may want to try the code out manually in a GitHub Codespace. Or, you may want to run any existing CI checks through your GitHub Actions workflows. But again, make sure you have carefully reviewed the code before executing it.\u003c/li\u003e\n\n\n\n\u003cli\u003eAll being well, you will have green check marks being returned from your CI. \u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eHowever, there’s always a possibility that you encounter failures, or spot some changes in your manual testing. For example, I spotted some hard-coded strings that the agent hadn’t addressed. Once again, we approach this just like we would any other pull request. We can post our feedback in a comment. For example, here’s the comment I used:\u003c/p\u003e\n\n\n\n\u003cp\u003eThat’s a great start. However, there are a lot of pages which are hardcoded in English still. For example, the flight search/bookings page, the check reservation page. Can you implement the localization on those pages, please?\u003c/p\u003e\n\n\n\n\u003cp\u003eCopilot will react to the comment once again, and get to work in another session. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-level-up-your-workflows-with-custom-chat-modes\"\u003eLevel up your workflows with custom chat modes\u003c/h2\u003e\n\n\n\n\u003cp\u003eIf you’re using VS Code as your daily driver with GitHub Copilot, then you’re probably used to the \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/copilot-ask-edit-and-agent-modes-what-they-do-and-when-to-use-them/\"\u003eask, edit and agent chat modes\u003c/a\u003e. But in the \u003ca href=\"https://code.visualstudio.com/updates/v1_101\"\u003eVS Code 1.101 release\u003c/a\u003e, the team has added custom chat modes in preview. This allows you to package instructions and relevant tools for easier use. For example, I built upon \u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-modes#_chat-mode-file-example\"\u003ethe VS Code team’s “Plan” chat mode example\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen the command palette in Visual Studio Code\u003c/li\u003e\n\n\n\n\u003cli\u003eType \u003cstrong\u003eConfigure Chat Modes\u003c/strong\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eSelect \u003cstrong\u003eCreate new custom chat mode file\u003c/strong\u003e.\u003cstrong\u003e \u003c/strong\u003eYou’ll be asked to save it either in the workspace (to allow collaborating with others), or in the local user data folder (for your use). We opted for the workspace option.\u003c/li\u003e\n\n\n\n\u003cli\u003eEnter the name. This is the name that will appear in the chat mode selection box, so pay attention to any capitalization.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou should see a new file has been created with the extension \u003ccode\u003e.chatmode.md\u003c/code\u003e. This is where you can configure the instructions, and the available tools for your new custom chat mode.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"GitHub Copilot Chat in VS Code\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/v5Wqs7s5scg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBelow is the example that we used in the livestream, slightly modified from the VS Code team’s docs example. We’ve added the create_issue tool to the list of allowed tools, adjusted our expectations of what’s included in the issue and added an instruction about creating the issue with the `create_issue` tool once revisions are complete and approved by the user.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e---\n\ndescription: Generate an implementation plan for new features or refactoring existing code.\n\ntools: [\u0026#39;codebase\u0026#39;, \u0026#39;fetch\u0026#39;, \u0026#39;findTestFiles\u0026#39;, \u0026#39;githubRepo\u0026#39;, \u0026#39;search\u0026#39;, \u0026#39;usages\u0026#39;, \u0026#39;github\u0026#39;, \u0026#39;create_issue\u0026#39;]\n\n---\n\n# Planning mode instructions\n\nYou are in planning mode. Your task is to generate an implementation plan for a new feature or for refactoring existing code.\n\nDon\u0026#39;t make any code edits, just generate a plan.\n\nThe plan consists of a Markdown document that describes the implementation plan, including the following sections:\n\n* Overview: A brief description of the feature or refactoring task.\n\n* Requirements: A list of requirements for the feature or refactoring task.\n\n* Implementation Steps: A detailed list of steps to implement the feature or refactoring task.\n\n* Testing: A list of tests that need to be implemented to verify the feature or refactoring task.\n\nOnce the plan is complete, ask the user if they would like to create a GitHub issue for this implementation plan. If they respond affirmatively, proceed to create the issue using the `create_issue` tool.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen the file is available in your teammate’s local repositories (so they’ve pulled the changes locally), VS Code surfaces the mode in the chat dropdown, allowing you to configure chat modes that are consistent and convenient across your team.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-remote-mcp-removing-the-local-setup\"\u003eRemote MCP: removing the local setup\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou may be used to running MCP locally through npm packages or as docker containers. However, remote MCP servers allow you to reduce the management overhead of running these tools locally. There may be other benefits too. For example, the remote GitHub MCP Servers allows you to authenticate using OAuth 2.0 instead of Personal Access Tokens.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use the GitHub Remote MCP Server in VS Code, you’ll need to update the MCP configuration. You can find the instructions on how to do that \u003ca href=\"https://github.com/github/github-mcp-server?tab=readme-ov-file#remote-github-mcp-server\"\u003ein the GitHub MCP Server repository\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"GitHub Remote MCP Server\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/IZ0UICnVQwU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-going-mobile-copilot-agent-mode-in-xcode\"\u003eGoing mobile: Copilot agent mode in Xcode\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile we didn’t show it in depth, I quickly walked through one of my previous agent mode sessions in Xcode. It showed how I gave a similar prompt to Copilot, asking to add internationalization to the app, which we were able to see in the main navigation bar of the app running in the simulator.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eWe need to implement internationalization in the app. Please make the following changes:\n\n1. The user can select from suported languages (English, Spanish, French) from a dropdown in their profile.\n\n2. The main tab view should support internationalization. No other parts of the app should be changed for now.\n\n3. When the user changes the language, it should update the rendered text instantly.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"h-dos-and-don-ts\"\u003eDos and don’ts\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cstrong\u003e✅ Do\u003c/strong\u003e\u003c/th\u003e\u003cth\u003e\u003cstrong\u003e❌ Don’t\u003c/strong\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eKeep issues tightly scoped\u003c/td\u003e\u003ctd\u003eAsk the agent to “re-architect the app”\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eProvide acceptance criteria\u003c/td\u003e\u003ctd\u003eAssume the agent knows your intent\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eCarefully review the changes made\u003c/td\u003e\u003ctd\u003eExecute code or merge a PR without a review\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eIterate with Copilot. How often do you get something right on the first shot?\u003c/td\u003e\u003ctd\u003eExpect perfection first time\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-try-it-yourself\"\u003eTry it yourself\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/enabling-copilot-coding-agent\"\u003eEnable Copilot coding agent\u003c/a\u003e and assign work to Copilot in the background.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-modes#_custom-chat-modes\"\u003eConfigure custom chat modes\u003c/a\u003e in VS Code Release 1.101.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/github/github-mcp-server?tab=readme-ov-file#remote-github-mcp-server\"\u003eConfigure the Remote GitHub MCP server\u003c/a\u003e to reduce local management efforts.\u003c/li\u003e\n\n\n\n\u003cli\u003eUse Copilot agent mode in \u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode\"\u003eVS Code\u003c/a\u003e, \u003ca href=\"https://learn.microsoft.com/en-us/visualstudio/ide/copilot-agent-mode?view=vs-2022\"\u003eVisual Studio\u003c/a\u003e, \u003ca href=\"https://plugins.jetbrains.com/plugin/17718-github-copilot\"\u003eJetBrains\u003c/a\u003e (public preview), \u003ca href=\"https://marketplace.eclipse.org/content/github-copilot\"\u003eEclipse\u003c/a\u003e (public preview) and \u003ca href=\"https://github.com/github/copilotforXcode/\"\u003eXcode\u003c/a\u003e (public preview).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-next-steps\"\u003eNext steps\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=UXAbtYbxD_w\"\u003e\u003cstrong\u003eWatch the full replay\u003c/strong\u003e of the stream\u003c/a\u003e for a step-by-step walkthrough.\u003c/li\u003e\n\n\n\n\u003cli\u003eDive into the Copilot coding agent and MCP docs for more details.\u003c/li\u003e\n\n\n\n\u003cli\u003eTell me what you automate first—let us know on social by tagging \u003ccode\u003e@github\u003c/code\u003e with what you’ve been working on!\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://gh.io/rubberduckthursdays\"\u003eJoin us for the next episode of Rubber Duck Thursdays\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAgentic workflows within GitHub Copilot aren’t magic; they’re tools. When a single click can help reduce technical debt (or knock out any other repetitive task you dread), why not let Copilot handle the boilerplate while you tackle the more challenging, fun, and creative problems?\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" alt=\"Chris Reddington\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eChris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2025\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2025\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eLast chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Register now \u0026gt;; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=module\" target=\"_blank\" aria-label=\"Register now \u0026gt;\"\u003e\n\t\t\t\t\tRegister now \u0026gt;\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-07-01T18:57:22Z",
  "modifiedTime": "2025-07-01T18:57:23Z"
}
