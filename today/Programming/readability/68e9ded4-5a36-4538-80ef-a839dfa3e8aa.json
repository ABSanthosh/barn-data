{
  "id": "68e9ded4-5a36-4538-80ef-a839dfa3e8aa",
  "title": "K2 Mode in IntelliJ IDEA 2025.1: Current State and FAQ",
  "link": "https://blog.jetbrains.com/idea/2025/04/k2-mode-in-intellij-idea-2025-1-current-state-and-faq/",
  "description": "Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE.  While this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s […]",
  "author": "Teodor Irkhin",
  "published": "Tue, 15 Apr 2025 14:07:29 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "releases",
    "k2-mode"
  ],
  "byline": "Teodor Irkhin",
  "length": 7144,
  "excerpt": "Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the IDE for Professional Development in Java and Kotlin News ReleasesK2 Mode in IntelliJ IDEA 2025.1: Current State and FAQ Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE.  While this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s important to know that K2 mode is still a work in progress. Some limitations remain, and we’re working hard to address them. In this blog post, we’ll give you an overview of the current state of K2 mode, share our future plans, and answer the most common questions to help you understand what this change means and how it may affect your work. How can I submit feedback or report issues? We’re putting this section right at the start because your feedback is especially important to us. K2 mode is still evolving, and we rely on your real-world experience to help us catch corner cases, rough edges, and scenarios where things don’t work as smoothly as they should. Every report and comment helps us improve our users’ K2 mode experience. There are several ways you can share your feedback: YouTrack: Create a KTIJ ticket to report an issue or a bug. The most efficient way to get the problem fixed Slack: #intellij channel in Kotlin Slack to ask your questions Email: k2-mode-feedback@jetbrains.com to provide more general feedback. Please provide as many details as possible about your specific case so we can help you effectively. What is K2 mode, and why is it necessary? K2 mode is the result of a long-term effort to modernize Kotlin support in IntelliJ IDEA. For years, the IDE relied on the old Kotlin compiler’s internals, which made it harder to improve performance and maintain stability as the language evolved. K2 mode introduces a faster, more scalable rebuilt analysis engine. It also includes the Kotlin Analysis API, which provides a clear and stable way to access code information without depending on compiler internals. K2 mode serves as a new foundation for Kotlin support in IntelliJ IDEA, making it possible to support future Kotlin language features and evolve faster, improve the stability and reliability of code analysis, and further boost the speed of Kotlin code analysis.  For more extensive information and technical details, check out this detailed blog post! Are there any K2 mode-only features? Yes, some features are only available when using K2 mode. This includes all the newest Kotlin language features, which are powered by the K2 compiler, such as: Guard conditions in when with a subject Non-local break and continue Multi-dollar string interpolation Context parameters (Beta) And other new language features Further language features will also be supported only in K2 mode. Some IDE features will also perform better or behave more reliably in K2 mode, and the newest IDE features are also planned to come to K2 mode only. How does K2 mode affect performance? K2 mode is built to improve indexing speed, code analysis, and overall IDE stability. Many users already notice faster and smoother Kotlin support, even though the current performance improvement is far from reaching its potential.  However, depending on your project size and structure, you might still encounter performance issues in specific scenarios. We’re continuously optimizing and tuning K2 mode to address them. We see, though, that autocompletion in some cases is not as fast as we would like it to be. We’ll focus on improving this during the next few months. Does K2 mode work in Android Studio? K2 mode is already available to use in Android Studio. Later this year, it will be enabled by default in Android Studio, enhancing your development experience with improved performance and compatibility. Which features are not supported yet? While K2 mode brings many improvements, some features and integrations are still missing or incomplete. For example: Some of the less frequently used inspections, quick-fixes, or intentions (those that are used less by less than 1% of users), might currently be missing. Please let us know if there is a feature you find really helpful that isn’t accessible yet – we’ll do our best to make it available as soon as possible! Occasional code analysis and highlighting issues. Reduced completion speed when working with some specific projects. We plan to address these issues in upcoming releases.  Will all IntelliJ IDEA plugins work in K2 mode? If the IDE plugin hasn’t used the Kotlin Plugin API, then it is compatible with K2 mode. Almost every single popular plugin that needs to support K2 mode already supports it.However, if you have non-public plugins that use the Kotlin Plugin API but don’t work with K2 mode – please check the detailed migration guide. Will K1 mode still be supported? You can still use K1 mode, but new Kotlin language features and the newest IDE features will be supported only in K2 mode. As this is the new standard, further code analysis optimizations will also target K2 mode. Therefore, we encourage you to use K2 mode for your development. How to verify that K2 mode is enabled To ensure that K2 mode is enabled, go to Preferences/Settings | Languages \u0026 Frameworks | Kotlin and check that the Enable K2 mode checkbox is ticked. What’s next for K2 mode? The release of K2 mode as the default in IntelliJ IDEA 2025.1 is an important milestone, but it’s far from the end of the journey.  Our work on K2 mode will continue with a commitment to refine and improve this new architecture, address remaining limitations, and ensure a stable and reliable experience for all developers. Please send us your feedback to help us identify areas where we can improve your experience with K2 mode. Feel free to share your thoughts and ideas with us – whether it’s on Slack, YouTrack, or by email. Happy developing! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/ij-social_share_blog_1280x720_en-3.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the IDE for Professional Development in Java and Kotlin\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eK2 Mode in IntelliJ IDEA 2025.1: Current State and FAQ\u003c/h2\u003e                    \n                    \n\u003cp\u003eStarting with IntelliJ IDEA 2025.1, \u003cstrong\u003eK2 mode\u003c/strong\u003e, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE. \u003c/p\u003e\n\n\n\n\u003cp\u003eWhile this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s important to know that K2 mode is still a work in progress. Some limitations remain, and we’re working hard to address them.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this blog post, we’ll give you an overview of the current state of K2 mode, share our future plans, and answer the most common questions to help you understand what this change means and how it may affect your work.\u003c/p\u003e\n\n\n\n\u003ch2\u003eHow can I submit feedback or report issues?\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe’re putting this section right at the start because your feedback is especially important to us. K2 mode is still evolving, and we rely on your real-world experience to help us catch corner cases, rough edges, and scenarios where things don’t work as smoothly as they should. Every report and comment helps us improve our users’ K2 mode experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere are several ways you can share your feedback:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eYouTrack\u003c/strong\u003e: Create a \u003ca href=\"https://youtrack.jetbrains.com/newIssue?draftId=25-6414130\" target=\"_blank\" rel=\"noopener\"\u003eKTIJ ticket\u003c/a\u003e to report an issue or a bug. The most efficient way to get the problem fixed\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSlack\u003c/strong\u003e: \u003ca href=\"https://kotlinlang.slack.com/archives/C0B8H786P\" target=\"_blank\" rel=\"noopener\"\u003e#intellij\u003c/a\u003e channel in Kotlin Slack to ask your questions\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEmail\u003c/strong\u003e: \u003ca href=\"mailto:k2-mode-feedback@jetbrains.com\"\u003ek2-mode-feedback@jetbrains.com\u003c/a\u003e to provide more general feedback.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003ePlease provide as many details as possible about your specific case so we can help you effectively.\u003c/p\u003e\n\n\n\n\u003ch2\u003eWhat is K2 mode, and why is it necessary?\u003c/h2\u003e\n\n\n\n\u003cp\u003eK2 mode is the result of a long-term effort to modernize Kotlin support in IntelliJ IDEA. For years, the IDE relied on the old Kotlin compiler’s internals, which made it harder to improve performance and maintain stability as the language evolved.\u003c/p\u003e\n\n\n\n\u003cp\u003eK2 mode introduces a faster, more scalable rebuilt analysis engine. It also includes the Kotlin Analysis API, which provides a clear and stable way to access code information without depending on compiler internals.\u003c/p\u003e\n\n\n\n\u003cp\u003eK2 mode serves as a new foundation for Kotlin support in IntelliJ IDEA, making it possible to support future Kotlin language features and evolve faster, improve the stability and reliability of code analysis, and further boost the speed of Kotlin code analysis. \u003c/p\u003e\n\n\n\n\u003cp\u003eFor more extensive information and technical details, check out this detailed\u003ca href=\"https://blog.jetbrains.com/idea/2025/04/the-story-behind-k2-mode-and-how-it-works/\"\u003e blog post!\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1700\" height=\"776\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Graphics-1-K2-Mode-Black-Background.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eAre there any K2 mode-only features?\u003c/h3\u003e\n\n\n\n\u003cp\u003eYes, some features are only available when using K2 mode. This includes all the newest Kotlin language features, which are powered by the K2 compiler, such as:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kotlinlang.org/docs/whatsnew21.html#guard-conditions-in-when-with-a-subject\" target=\"_blank\" rel=\"noopener\"\u003eGuard conditions in when with a subject\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://kotlinlang.org/docs/whatsnew21.html#non-local-break-and-continue\" target=\"_blank\" rel=\"noopener\"\u003eNon-local break and continue\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://kotlinlang.org/docs/whatsnew21.html#multi-dollar-string-interpolation\" target=\"_blank\" rel=\"noopener\"\u003eMulti-dollar string interpolation\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/KT-10468\" target=\"_blank\" rel=\"noopener\"\u003eContext parameters\u003c/a\u003e (Beta)\u003c/li\u003e\n\n\n\n\u003cli\u003eAnd \u003ca href=\"https://youtrack.jetbrains.com/issue/KT-54620/Language-Evolution\" target=\"_blank\" rel=\"noopener\"\u003eother new language features\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFurther language features will also be supported only in K2 mode.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdjv-Gl1r87LrJ_72FlcAokpEo0So_mAaoDjFP3-WHAEL_OH2MoKDpJSJo0sXvZHIXZwf6yWRAmS0XYFtpujlh9dmuvIuF0KTupoF0MF-NbbxPBLXvdgvIHEeWRrq3-leL_mD3C5Q?key=tmBvIeYJjG-KYsakIpIXmKjQ\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSome IDE features will also perform better or behave more reliably in K2 mode, and the newest IDE features are also planned to come to K2 mode only.\u003c/p\u003e\n\n\n\n\u003ch3\u003eHow does K2 mode affect performance?\u003c/h3\u003e\n\n\n\n\u003cp\u003eK2 mode is built to improve indexing speed, code analysis, and overall IDE stability. Many users already notice faster and smoother Kotlin support, even though the current performance improvement is far from reaching its potential. \u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, depending on your project size and structure, you might still encounter performance issues in specific scenarios. We’re continuously optimizing and tuning K2 mode to address them. We see, though, that autocompletion in some cases is not as fast as we would like it to be. We’ll focus on improving this during the next few months.\u003c/p\u003e\n\n\n\n\u003ch3\u003eDoes K2 mode work in Android Studio?\u003c/h3\u003e\n\n\n\n\u003cp\u003eK2 mode is already available to use in Android Studio. Later this year, it will be enabled by default in Android Studio, enhancing your development experience with improved performance and compatibility.\u003c/p\u003e\n\n\n\n\u003ch3\u003eWhich features are not supported yet?\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhile K2 mode brings many improvements, some features and integrations are still missing or incomplete. For example:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSome of the less frequently used inspections, quick-fixes, or intentions (those that are used less by less than 1% of users), might currently be missing. Please let us know if there is a feature you find really helpful that isn’t accessible yet – we’ll do our best to make it available as soon as possible!\u003c/li\u003e\n\n\n\n\u003cli\u003eOccasional code analysis and highlighting issues.\u003c/li\u003e\n\n\n\n\u003cli\u003eReduced completion speed when working with some specific projects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe plan to address these issues in upcoming releases. \u003c/p\u003e\n\n\n\n\u003ch3\u003eWill all IntelliJ IDEA plugins work in K2 mode?\u003c/h3\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eIf the IDE plugin hasn’t used the Kotlin Plugin API, then it is compatible with K2 mode. Almost every single popular plugin that needs to support K2 mode already supports it.\u003c/p\u003e\u003cp\u003eHowever, if you have non-public plugins that use the Kotlin Plugin API but don’t work with K2 mode – please check the detailed \u003ca href=\"https://kotlin.github.io/analysis-api/migrating-from-k1.html\" target=\"_blank\" rel=\"noopener\"\u003emigration guide\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003ch3\u003eWill K1 mode still be supported?\u003c/h3\u003e\n\n\n\n\u003cp\u003eYou can still use K1 mode, but new Kotlin language features and the newest IDE features will be supported only in K2 mode. As this is the new standard, further code analysis optimizations will also target K2 mode. Therefore, we encourage you to use K2 mode for your development.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"how-to-enable-k2-mode\"\u003eHow to verify that K2 mode is enabled\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo ensure that K2 mode is enabled, go to \u003cem\u003ePreferences/Settings | Languages \u0026amp; Frameworks | Kotlin\u003c/em\u003e and check that the \u003cem\u003eEnable K2 mode\u003c/em\u003e checkbox is ticked.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1030\" height=\"218\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/k2-mode-enable.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhat’s next for K2 mode?\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe release of K2 mode as \u003cstrong\u003ethe default\u003c/strong\u003e in IntelliJ IDEA 2025.1 is an important milestone, but it’s far from the end of the journey. \u003c/p\u003e\n\n\n\n\u003cp\u003eOur work on K2 mode will continue with a commitment to refine and improve this new architecture, address remaining limitations, and ensure a stable and reliable experience for all developers. Please send us your feedback to help us identify areas where we can improve your experience with K2 mode.\u003c/p\u003e\n\n\n\n\u003cp\u003eFeel free to share your thoughts and ideas with us – whether it’s on \u003ca href=\"https://kotlinlang.slack.com/archives/C0B8H786P\" target=\"_blank\" rel=\"noopener\"\u003eSlack\u003c/a\u003e, \u003ca href=\"https://youtrack.jetbrains.com/newIssue?draftId=25-6414130\" target=\"_blank\" rel=\"noopener\"\u003eYouTrack\u003c/a\u003e, or by \u003ca href=\"mailto:k2-mode-feedback@jetbrains.com\"\u003eemail\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eHappy developing!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
