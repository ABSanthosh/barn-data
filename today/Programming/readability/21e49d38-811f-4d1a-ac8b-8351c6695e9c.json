{
  "id": "21e49d38-811f-4d1a-ac8b-8351c6695e9c",
  "title": "GitHub for Beginners: Building a React App with GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-building-a-react-app-with-github-copilot/",
  "description": "Follow along and build a frontend client using React and Copilot Chat. The post GitHub for Beginners: Building a React App with GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 12 May 2025 13:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "GitHub for beginners",
    "React"
  ],
  "byline": "Kedasha Kerr",
  "length": 14407,
  "excerpt": "Follow along and build a frontend client using React and Copilot Chat.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of GitHub Copilot. This is our sixth episode, and we’ve  covered quite a lot of ground. You can check out all our previous episodes on our blog or as videos. Today we’re going to use GitHub Copilot to help us build a frontend project using React. In the previous episode, we created a backend API for the travel itinerary builder, Planventure. We’ll continue that work and create a React client that leverages our API to interact with Planventure. To see a full description of what we’ll be building, go to this repository and switch to the client-start branch to get started. What you’ll need Before we get started, here’s what you’ll need:  A code editor like VS Code The latest version of Node.js  A package manager like npm Access to GitHub Copilot — sign up for free!  Alternatively, you can use a GitHub Codespace to build in the cloud—you’ll still need Copilot access if you’re using a codespace. You can click the Open in GitHub Codespaces button in the repo. What we’re building We’re creating a frontend app that connects to the backend API we created in the previous episode. We’ll be using the React library, so it’s recommended that you’re familiar with using React to build client side applications. More specifically, we’ll be using: React with Vite for the client. Material UI as the component library. Our goal is to build a working frontend app that has the following features: Authenticate users Add protected routes Add trips and itinerary information Edit existing itineraries Let’s get started! Step 1: Initial setup Before we get started, we need to create the appropriate working environment. Clone the Planventure repository by opening your terminal in your code editor and running the following command. git clone https://github.com/github-samples/planventure Navigate to the planventure-client directory and switch to the client-start branch. cd planventure-client git switch client-start Install necessary dependencies. npm install Start the server. npm run dev Open a browser to http://localhost:5173 to verify the app is running. Become familiar with the code by examining the existing files. Note that some basic components have already been installed and configured. Open Copilot Chat and send it the following prompt to get a basic summary of the existing code: @workspace Tell me about the configuration setup in the react app. Now that the initial setup is complete, take a look at the GitHub issue to read detailed information about what we need to build. Step 2: Create login and registration forms The first thing we need to add is authentication. We’ll do this by building login and registration forms. But first, we need to create an AuthLayout component to use for all authenticated routes. Open Copilot Chat and use the model selector to select the Claude Sonnet 3.5 model. Send Copilot the following prompt. @workspace Create AuthLayout component with navigation and centered content. Hover over the proposed solution, click …, and then select Insert into New File. Review the added code and save the file. You should always review the code provided by Copilot so that you understand what it is doing and make sure it addresses your prompt. Now that we’ve created the AuthLayout component, it’s time to build a login form to implement it. Send the following prompt to Copilot Chat. @workspace Build a LoginForm component with email/password fields and validation. Create a new folder named auth under the src/components folder. Navigate back to Copilot Chat, hover over the proposed solution, click …, and then select Insert into New File. Review the added code and save the file in the auth folder. Return to Copilot Chat and choose Edits from the dropdown. Use the Add Files button to add the following files if they are not already listed in the working set: AuthLayout.jsx LoginForm.jsx Routes.jsx Send Copilot Edits the following prompt. Create a new loginPage. Update route and authLayout as needed. Review and accept all the changes from Copilot Edits. Don’t forget to save your files. Send the following prompt to Copilot Edits to update the Home component. Update the navbar to use the new loginpage and add a get started button to the home page that routes to the login page. Review the code and make any necessary changes. Then save all of the updated files.  Navigate back to the browser page and refresh it to see the latest changes.  Commit your changes to the repository. You can use Copilot to automatically generate a commit message by clicking the sparkle button in the top-right corner of the commit message box. Now we have a Get started button on the UI and the login page. Next we need to create a sign up page so that new users can register. Open up Copilot Chat and send it the following prompt. @workspace Create SignupForm component matching the login form style and a new SignUpPage. Be sure to update routing. Hover over the proposed solution to add a SignupForm component in the auth folder, click …, and then select Insert into New File. Hover over the proposed solution to add a SignupPage component in the pages folder, click …, and then select Insert into New File. For each file that has proposed changes: Open the relevant file in your editor. Hover over the proposed changes to the file, and click the Apply in editor button. Review and accept the changes. Save the file. Refresh your browser and test the new pages. Commit your changes. For the final piece to this part of the puzzle, we need to update the AuthContext.jsx file. Open the AuthContext.jsx file in your editor. It’s located in the context folder. Open Copilot Chat and send it the following prompt. Setup authentication context and token management #file:ProtectedRoute.jsx For each file that has proposed changes: Open the relevant file in your editor. Hover over the proposed changes to the file, and click the Apply in editor button. Review and accept the changes. Save the file. Commit your changes. Step 3: Use the API for authentication Now that we have the necessary forms, it’s time to make requests to the backend server so users can register and log in. To do this, we’re going to need to edit three files at once. Luckily, Copilot Chat supports editing multiple files at the same time! Send Copilot Chat the following prompt. @workspace Setup api service functions for login and register routes. Update login and signup forms to use api service. #file:SignupForm.jsx For each file that has proposed changes: Open the relevant file in your editor. Hover over the proposed changes to the file, and click the Apply in editor button. Review and accept the changes. Save the file. Create a new terminal window and cd into the planventure-api directory, then start the server by running the following command: flask run --debug Refresh your browser and try logging into the app . If you run into an error, attempt to debug it with GitHub Copilot. Review the video version of this episode to see some examples of possible things you might need to debug. Try signing up a new user and debug any errors that come up. Now that we’ve verified that we can log in and create new users, we want to add the ability to log out into the navigation bar. Send Copilot Chat the following prompt. @workspace update navbar to include the logout function For each file that has proposed changes: Open the relevant file in your editor. Hover over the proposed changes to the file, and click the Apply in editor button. Review and accept the changes. Save the file. Head back to the browser, refresh it, and test the Logout button. Note that you need to be logged in to see the Logout button. Commit all of these changes to your repository. Congratulations! You’ve now successfully added user authentication! To ensure that users have easy access to common functionality, we want to create a dashboard with sidebar navigation. Click the Copilot button at the top of the window and select Open Copilot Edits. Use the Add Files button to add the following files if they are not already listed in the working set: App.jsx AuthContent.jsx AuthLayout.jsx LoginForm.jsx Navbar.jsx SignupForm.jsx Send Copilot Edits the following prompt. Build a dashboard layout component with sidebar navigation. Review and accept the suggested code changes, then save the files. Refresh your browser to see the new dashboard. Now that we have a layout, we need to create a TripCard and TripList component to showcase the user’s trips. Send the following prompt to Copilot Edits to create the necessary components. Create TripCard and TripList components for displaying trips with loading states. Review and accept the suggested code changes. Send the following prompt to add a dashboard component displaying the user’s trips. Create a dashboard component that displays the trips that users are routed to on login. Review and accept the suggested code changes. Users should receive a welcome message if they don’t have any trips. They also should get a message if there are any errors when they login. To add these elements, send the following prompt: Update the dashboard coponent to show a welcome message to users if they have no trips. If there is an error receiving trips, display the image with a message that's quirky and apologetic. Review and accept the suggested code changes. Now let’s fetch our user trips from the API. Send the following prompt to Copilot Edits: Update to fetch trips from the flask api. Review and accept the suggested code changes, then save the files. Return to your browser and refresh the page. Test the new functionality by logging in. You should see your trips, a welcome message, or a fun and quirky error message. Try to test all three possibilities. Once you’ve verified these changes are working (after debugging any errors that crop up), commit your changes to the repository. Once we have this piece working, we’re almost there! Step 5: Enable trip management Now we need to add the ability for users to manage their trips. In order to do this, we’ll need to start by creating a new form that allows users to add their trips and save them to the dashboard. Then we’ll need to make a POST request to the /trips/new route. Open up your terminal and install the necessary dependencies. npm install dayjs @mui/x-date-pickers Open up Copilot Edits and send it the following prompt. Create NewTripForm with destination and date inputs. Use the dayjs library. Review and accept the suggested code changes, then save the files.  Navigate back to your browser and refresh the page.  Click the ADD NEW TRIP button and test the form.  Commit your changes. Next up, we want to add the ability for users to manage their itineraries.  Send Copilot Edits the following prompt.  Create ItineraryDay and TimeSlot components for managing daily activities with editing capabilities. Review and accept the suggested code changes, then save the files. Send the following prompt to Copilot to encourage users to provide itineraries for their trips. If the user doesn't have an itinerary for their trip, prompt them to add an itinerary. Also include a default itinerary template. Review and accept the suggested code changes, then save the files. Return to your browser and refresh the page. Click VIEW DETAILS for a trip, then click the ITINERARY tab. You should see a prompt encouraging you to create an itinerary for this trip. Try adding an itinerary, and verify that the app provides a default template. Navigate back to Copilot Edits and send the following prompt to give users the ability to edit their trips. Allow users to edit their trip details. Review and accept the suggested code changes, then save the files. Return to your browser and refresh the page. Try editing a trip and verify that you can change the details. Commit your changes. As a finishing touch, let’s add the ability for users to add additional information about where they’ll be staying and how they’ll be traveling. Send the following prompt to Copilot Edits. Allow users to add their accommodations and transportation details to the Overview page. Review and accept the suggested code changes, then save the files. Return to your browser, refresh the page, and test this new functionality. Don’t forget to commit your changes! Your next steps Impressive! You’ve now built a fully functional MVP of the application in a short time, thanks to GitHub Copilot. This is the power of an AI tool that just works. Don’t forget that you can use GitHub Copilot for free! If you have any questions, pop them in the GitHub Community thread, and we’ll be sure to respond. Join us for the next part in this series, where we’ll build a full app using this API we created.  Happy coding!  Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev. Related posts Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of \u003ca href=\"https://www.youtube.com/watch?v=n0NlxUyA7FI\u0026amp;list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\u0026amp;index=6\"\u003eGitHub Copilot\u003c/a\u003e. This is our sixth episode, and we’ve  covered quite a lot of ground. You can check out all our previous episodes on \u003ca href=\"https://github.blog/tag/github-for-beginners/\"\u003eour blog\u003c/a\u003e or \u003ca href=\"https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\"\u003eas videos\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday we’re going to use GitHub Copilot to help us build a frontend project using \u003ca href=\"https://react.dev/\"\u003eReact\u003c/a\u003e. In the \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/github-for-beginners-building-a-rest-api-with-copilot/\"\u003eprevious episode\u003c/a\u003e, we created a backend API for the travel itinerary builder, Planventure. We’ll continue that work and create a React client that leverages our API to interact with Planventure. To see a full description of what we’ll be building, go to \u003ca href=\"http://gh.io/planventure\"\u003ethis repository\u003c/a\u003e and switch to the client-start branch to get started.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Building a React app with GitHub Copilot: A beginner\u0026#39;s frontend guide\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/Nw4y5XQyugc?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"what-youll-need\"\u003eWhat you’ll need\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore we get started, here’s what you’ll need: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA code editor like \u003ca href=\"https://code.visualstudio.com/\"\u003eVS Code\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eThe latest version of \u003ca href=\"https://github.com/nodejs\"\u003eNode.js\u003c/a\u003e \u003c/li\u003e\n\n\n\n\u003cli\u003eA package manager like \u003ca href=\"https://www.npmjs.com/\"\u003enpm\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eAccess to \u003ca href=\"http://gh.io/gfb-copilot\"\u003eGitHub Copilot\u003c/a\u003e — sign up for free! \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAlternatively, you can use a \u003ca href=\"https://github.com/features/codespaces\"\u003eGitHub Codespace\u003c/a\u003e to build in the cloud—you’ll still need Copilot access if you’re using a codespace. You can click the \u003cstrong\u003eOpen in GitHub Codespaces\u003c/strong\u003e button in the repo.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1078\" height=\"275\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/planventure-client.png?resize=1078%2C275\" alt=\"A screenshot showing the location of the \u0026#34;Open in Github Codespaces\u0026#34; button below the \u0026#34;Planventure Client\u0026#34; heading.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/planventure-client.png?w=1078 1078w, https://github.blog/wp-content/uploads/2025/05/planventure-client.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/planventure-client.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/planventure-client.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"h-what-we-re-building\"\u003eWhat we’re building\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe’re creating a frontend app that connects to the backend API we created in the previous episode. We’ll be using the React library, so it’s recommended that you’re familiar with using React to build client side applications. More specifically, we’ll be using:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eReact with Vite for the client.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/mui\"\u003eMaterial UI\u003c/a\u003e as the component library.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOur goal is to build a working frontend app that has the following features:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAuthenticate users\u003c/li\u003e\n\n\n\n\u003cli\u003eAdd protected routes\u003c/li\u003e\n\n\n\n\u003cli\u003eAdd trips and itinerary information\u003c/li\u003e\n\n\n\n\u003cli\u003eEdit existing itineraries\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLet’s get started!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"step-1-initial-setup\"\u003eStep 1: Initial setup\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore we get started, we need to create the appropriate working environment.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eClone the \u003ca href=\"http://gh.io/planventure\"\u003ePlanventure repository\u003c/a\u003e by opening your terminal in your code editor and running the following command.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/github-samples/planventure\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eNavigate to the \u003cem\u003eplanventure-client\u003c/em\u003e directory and switch to the \u003ccode\u003eclient-start\u003c/code\u003e branch.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003ecd planventure-client\ngit switch client-start\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"3\"\u003e\n\u003cli\u003eInstall necessary dependencies.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003enpm install\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eStart the server.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003enpm run dev\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"5\"\u003e\n\u003cli\u003eOpen a browser to \u003ca href=\"http://localhost:5173\"\u003ehttp://localhost:5173\u003c/a\u003e to verify the app is running.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1876\" height=\"1046\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/home_screen.png?resize=1876%2C1046\" alt=\"A screenshot of the Planventure homescreen.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/home_screen.png?w=1876 1876w, https://github.blog/wp-content/uploads/2025/05/home_screen.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/home_screen.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/home_screen.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/home_screen.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"6\"\u003e\n\u003cli\u003eBecome familiar with the code by examining the existing files. Note that some basic components have already been installed and configured. Open Copilot Chat and send it the following prompt to get a basic summary of the existing code:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace Tell me about the configuration setup in the react app.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow that the initial setup is complete, take a look at the \u003ca href=\"https://github.com/github-samples/planventure/issues/6\"\u003eGitHub issue\u003c/a\u003e to read detailed information about what we need to build.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"step-2-create-login-and-registration-forms\"\u003eStep 2: Create login and registration forms\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe first thing we need to add is authentication. We’ll do this by building login and registration forms. But first, we need to create an AuthLayout component to use for all authenticated routes.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen Copilot Chat and use the model selector to select the \u003cstrong\u003eClaude Sonnet 3.5\u003c/strong\u003e model.\u003c/li\u003e\n\n\n\n\u003cli\u003eSend Copilot the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace Create AuthLayout component with navigation and centered content.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"3\"\u003e\n\u003cli\u003eHover over the proposed solution, click \u003cstrong\u003e…\u003c/strong\u003e, and then select \u003cstrong\u003eInsert into New File\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview the added code and save the file. You should always review the code provided by Copilot so that you understand what it is doing and make sure it addresses your prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-12.38.20 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/auth_layour_changes.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow that we’ve created the AuthLayout component, it’s time to build a login form to implement it.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend the following prompt to Copilot Chat.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace Build a LoginForm component with email/password fields and validation.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eCreate a new folder named \u003cem\u003eauth\u003c/em\u003e under the \u003cem\u003esrc/components\u003c/em\u003e folder.\u003c/li\u003e\n\n\n\n\u003cli\u003eNavigate back to Copilot Chat, hover over the proposed solution, click \u003cstrong\u003e…\u003c/strong\u003e, and then select \u003cstrong\u003eInsert into New File\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview the added code and save the file in the \u003cem\u003eauth\u003c/em\u003e folder.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1880\" height=\"1046\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/auth_folder.png?resize=1880%2C1046\" alt=\"A screenshot showing the location of the \u0026#34;auth\u0026#34; folder.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/auth_folder.png?w=1880 1880w, https://github.blog/wp-content/uploads/2025/05/auth_folder.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/auth_folder.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/auth_folder.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/auth_folder.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"5\"\u003e\n\u003cli\u003eReturn to Copilot Chat and choose Edits from the dropdown.\u003c/li\u003e\n\n\n\n\u003cli\u003eUse the \u003cstrong\u003eAdd Files\u003c/strong\u003e button to add the following files if they are not already listed in the working set:\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eAuthLayout.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eLoginForm.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eRoutes.jsx\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eSend Copilot Edits the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate a new loginPage. Update route and authLayout as needed.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"578\" height=\"210\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/edits_dropdown-1.png?resize=578%2C210\" alt=\"A screenshot showing the drop-down menu to select ask, edit, or agent mode in Copilot.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/edits_dropdown-1.png?w=578 578w, https://github.blog/wp-content/uploads/2025/05/edits_dropdown-1.png?w=300 300w\" sizes=\"auto, (max-width: 578px) 100vw, 578px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"8\"\u003e\n\u003cli\u003eReview and accept all the changes from Copilot Edits. Don’t forget to save your files.\u003c/li\u003e\n\n\n\n\u003cli\u003eSend the following prompt to Copilot Edits to update the Home component.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eUpdate the navbar to use the new loginpage and add a get started button to the home page that routes to the login page.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"10\"\u003e\n\u003cli\u003eReview the code and make any necessary changes. Then save all of the updated files. \u003c/li\u003e\n\n\n\n\u003cli\u003eNavigate back to the browser page and refresh it to see the latest changes. \u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1880\" height=\"1046\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/login_page.png?resize=1880%2C1046\" alt=\"A screenshot showing the Planventure login page.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/login_page.png?w=1880 1880w, https://github.blog/wp-content/uploads/2025/05/login_page.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/login_page.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/login_page.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/login_page.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"12\"\u003e\n\u003cli\u003eCommit your changes to the repository. You can use Copilot to automatically generate a commit message by clicking the sparkle button in the top-right corner of the commit message box.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1880\" height=\"1046\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/commit_message.png?resize=1880%2C1046\" alt=\"A screenshot showing a commit message generated by GitHub Copilot.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/commit_message.png?w=1880 1880w, https://github.blog/wp-content/uploads/2025/05/commit_message.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/commit_message.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/commit_message.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/commit_message.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow we have a \u003cstrong\u003eGet started\u003c/strong\u003e button on the UI and the login page. Next we need to create a sign up page so that new users can register.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen up Copilot Chat and send it the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace Create SignupForm component matching the login form style and a new SignUpPage. Be sure to update routing.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eHover over the proposed solution to add a SignupForm component in the \u003cem\u003eauth\u003c/em\u003e folder, click \u003cstrong\u003e…\u003c/strong\u003e, and then select \u003cstrong\u003eInsert into New File\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eHover over the proposed solution to add a SignupPage component in the \u003cem\u003epages\u003c/em\u003e folder, click \u003cstrong\u003e…\u003c/strong\u003e, and then select \u003cstrong\u003eInsert into New File\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eFor each file that has proposed changes:\n\u003col\u003e\n\u003cli\u003eOpen the relevant file in your editor.\u003c/li\u003e\n\n\n\n\u003cli\u003eHover over the proposed changes to the file, and click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview and accept the changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave the file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eRefresh your browser and test the new pages.\u003c/li\u003e\n\n\n\n\u003cli\u003eCommit your changes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-1.46.12 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/signupform_saving.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor the final piece to this part of the puzzle, we need to update the \u003cem\u003eAuthContext.jsx\u003c/em\u003e file.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003cem\u003eAuthContext.jsx\u003c/em\u003e file in your editor. It’s located in the \u003cem\u003econtext\u003c/em\u003e folder.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpen Copilot Chat and send it the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eSetup authentication context and token management #file:ProtectedRoute.jsx\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eFor each file that has proposed changes:\n\u003col\u003e\n\u003cli\u003eOpen the relevant file in your editor.\u003c/li\u003e\n\n\n\n\u003cli\u003eHover over the proposed changes to the file, and click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview and accept the changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave the file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eCommit your changes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch2 id=\"step-3-use-the-api-for-authentication\"\u003eStep 3: Use the API for authentication\u003c/h2\u003e\n\n\n\n\u003cp\u003eNow that we have the necessary forms, it’s time to make requests to the backend server so users can register and log in. To do this, we’re going to need to edit three files at once. Luckily, Copilot Chat supports editing multiple files at the same time!\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend Copilot Chat the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace Setup api service functions for login and register routes. Update login and signup forms to use api service. #file:SignupForm.jsx\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eFor each file that has proposed changes:\n\u003col\u003e\n\u003cli\u003eOpen the relevant file in your editor.\u003c/li\u003e\n\n\n\n\u003cli\u003eHover over the proposed changes to the file, and click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview and accept the changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave the file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eCreate a new terminal window and cd into the planventure-api directory, then start the server by running the following command:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eflask run --debug\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-1.50.18 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/login_debugging.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eRefresh your browser and try logging into the app . If you run into an error, attempt to debug it with GitHub Copilot. Review the video version of this episode to see some examples of possible things you might need to debug.\u003c/li\u003e\n\n\n\n\u003cli\u003eTry signing up a new user and debug any errors that come up.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eNow that we’ve verified that we can log in and create new users, we want to add the ability to log out into the navigation bar.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend Copilot Chat the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e@workspace update navbar to include the logout function\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eFor each file that has proposed changes:\n\u003col\u003e\n\u003cli\u003eOpen the relevant file in your editor.\u003c/li\u003e\n\n\n\n\u003cli\u003eHover over the proposed changes to the file, and click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview and accept the changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave the file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eHead back to the browser, refresh it, and test the \u003cstrong\u003eLogout\u003c/strong\u003e button. Note that you need to be logged in to see the \u003cstrong\u003eLogout\u003c/strong\u003e button.\u003c/li\u003e\n\n\n\n\u003cli\u003eCommit all of these changes to your repository.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eCongratulations! You’ve now successfully added user authentication!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eTo ensure that users have easy access to common functionality, we want to create a dashboard with sidebar navigation.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eClick the Copilot button at the top of the window and select \u003cstrong\u003eOpen Copilot Edits\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eUse the \u003cstrong\u003eAdd Files\u003c/strong\u003e button to add the following files if they are not already listed in the working set:\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eApp.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eAuthContent.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eAuthLayout.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eLoginForm.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eNavbar.jsx\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eSignupForm.jsx\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eSend Copilot Edits the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eBuild a dashboard layout component with sidebar navigation.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-1.54.42 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/dashboard_layout.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eRefresh your browser to see the new dashboard.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eNow that we have a layout, we need to create a TripCard and TripList component to showcase the user’s trips.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend the following prompt to Copilot Edits to create the necessary components.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate TripCard and TripList components for displaying trips with loading states.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eReview and accept the suggested code changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eSend the following prompt to add a dashboard component displaying the user’s trips.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate a dashboard component that displays the trips that users are routed to on login.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eReview and accept the suggested code changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eUsers should receive a welcome message if they don’t have any trips. They also should get a message if there are any errors when they login. To add these elements, send the following prompt:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eUpdate the dashboard coponent to show a welcome message to users if they have no trips. If there is an error receiving trips, display the image with a message that\u0026#39;s quirky and apologetic.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"6\"\u003e\n\u003cli\u003eReview and accept the suggested code changes.\u003c/li\u003e\n\n\n\n\u003cli\u003eNow let’s fetch our user trips from the API. Send the following prompt to Copilot Edits:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eUpdate to fetch trips from the flask api.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"8\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eReturn to your browser and refresh the page.\u003c/li\u003e\n\n\n\n\u003cli\u003eTest the new functionality by logging in. You should see your trips, a welcome message, or a fun and quirky error message. Try to test all three possibilities.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-2.03.42 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/trip_flow.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"11\"\u003e\n\u003cli\u003eOnce you’ve verified these changes are working (after debugging any errors that crop up), commit your changes to the repository.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eOnce we have this piece working, we’re almost there!\u003c/p\u003e\n\n\n\n\u003ch2 id=\"step-5-enable-trip-management\"\u003eStep 5: Enable trip management\u003c/h2\u003e\n\n\n\n\u003cp\u003eNow we need to add the ability for users to manage their trips. In order to do this, we’ll need to start by creating a new form that allows users to add their trips and save them to the dashboard. Then we’ll need to make a POST request to the \u003ccode\u003e/trips/new\u003c/code\u003e route.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen up your terminal and install the necessary dependencies.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003enpm install dayjs @mui/x-date-pickers\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eOpen up Copilot Edits and send it the following prompt.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate NewTripForm with destination and date inputs. Use the dayjs library.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"3\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files. \u003c/li\u003e\n\n\n\n\u003cli\u003eNavigate back to your browser and refresh the page. \u003c/li\u003e\n\n\n\n\u003cli\u003eClick the \u003cstrong\u003eADD NEW TRIP\u003c/strong\u003e button and test the form. \u003c/li\u003e\n\n\n\n\u003cli\u003eCommit your changes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-4.50.59 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/add_new_trips.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNext up, we want to add the ability for users to manage their itineraries. \u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend Copilot Edits the following prompt. \u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate ItineraryDay and TimeSlot components for managing daily activities with editing capabilities.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eSend the following prompt to Copilot to encourage users to provide itineraries for their trips.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eIf the user doesn\u0026#39;t have an itinerary for their trip, prompt them to add an itinerary. Also include a default itinerary template.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eReturn to your browser and refresh the page.\u003c/li\u003e\n\n\n\n\u003cli\u003eClick \u003cstrong\u003eVIEW DETAILS\u003c/strong\u003e for a trip, then click the \u003cstrong\u003eITINERARY \u003c/strong\u003etab. You should see a prompt encouraging you to create an itinerary for this trip. Try adding an itinerary, and verify that the app provides a default template.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-09-at-2.09.32 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/itinerary_template.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"7\"\u003e\n\u003cli\u003eNavigate back to Copilot Edits and send the following prompt to give users the ability to edit their trips.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eAllow users to edit their trip details.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"8\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eReturn to your browser and refresh the page.\u003c/li\u003e\n\n\n\n\u003cli\u003eTry editing a trip and verify that you can change the details.\u003c/li\u003e\n\n\n\n\u003cli\u003eCommit your changes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAs a finishing touch, let’s add the ability for users to add additional information about where they’ll be staying and how they’ll be traveling.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSend the following prompt to Copilot Edits.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eAllow users to add their accommodations and transportation details to the Overview page.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eReview and accept the suggested code changes, then save the files.\u003c/li\u003e\n\n\n\n\u003cli\u003eReturn to your browser, refresh the page, and test this new functionality.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1880\" height=\"1046\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/accomodations.png?resize=1880%2C1046\" alt=\"A screenshot of the Accommodations and Transportation page on Planventure.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/accomodations.png?w=1880 1880w, https://github.blog/wp-content/uploads/2025/05/accomodations.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/accomodations.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/accomodations.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/accomodations.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eDon’t forget to commit your changes!\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch2 id=\"your-next-steps\"\u003eYour next steps\u003c/h2\u003e\n\n\n\n\u003cp\u003eImpressive! You’ve now built a fully functional MVP of the application in a short time, thanks to GitHub Copilot. This is the power of an AI tool that just works.\u003c/p\u003e\n\n\n\n\u003cp\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e! If you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e, and we’ll be sure to respond. Join us for the next part in this series, where we’ll build a full app using this API we created. \u003c/p\u003e\n\n\n\n\u003cp\u003eHappy coding! \u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-05-12T13:00:00Z",
  "modifiedTime": "2025-05-12T16:47:42Z"
}
