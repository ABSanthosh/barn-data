{
  "id": "a25a1935-5f2f-499e-a23d-6faafc4abe98",
  "title": "Static Analyser PHPStan Releases Version 2.0",
  "link": "https://www.infoq.com/news/2024/12/phpstan-v2-release/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "PHPStan, a static analysis tool for PHP recently released its version 2.0. This release launches new features and improvements related to enhancing code analysis, performance, and user experience. By Aditya Kulkarni",
  "author": "Aditya Kulkarni",
  "published": "Thu, 05 Dec 2024 17:30:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "PHP",
    "Static Analysis",
    "DevOps",
    "news"
  ],
  "byline": "Aditya Kulkarni",
  "length": 3563,
  "excerpt": "PHPStan, a static analysis tool for PHP recently released its version 2.0. This release launches new features and improvements related to enhancing code analysis, performance, and user experience.",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241205201138/apple-touch-icon.png",
  "text": "PHPStan, a static analysis tool for PHP recently released its version 2.0. This release launches new features and improvements related to enhancing code analysis, performance, and user experience. Ondřej Mirtes, Founder \u0026 Developer at PHPStan, discussed the release in a blog post. PHPStan 2.0 introduces a new analysis level, Level 10, which is an increment to the existing Level 9. The Level 9 focused on identifying unsafe uses of the mixed type, while Level 10 detects implicitly-typed mixed values that might get missed through previous checks. The level 10 is beneficial for developers aimed at achieving maximum code safety by eliminating ambiguities associated with the mixed type. The new version also improves PHP's array handling by introducing a dedicated list type. By definition, a list in PHPStan is an array with sequential integer keys starting from zero, without gaps. This feature enables developers to specify clear data structures in their PHPDocs, facilitating better code documentation and analysis. Another important improvements in PHPStan 2.0 is its reduced memory consumption. This further leads to faster performance. Earlier version of PHPStan's had high memory usage which caused it to be terminated by continuous integration (CI) runners. The new version fixes this by virtue of efficient memory management. This involves cleaning up reference cycles in abstract syntax tree (AST) nodes. As a result, memory consumption is reduced by approximately 50-70% on large projects, thereby speeding up the analysis process. Ondřej also engaged with the PHPStan enthusiasts on Reddit. As of this writing, the post has 234 upvotes and 34 comments. One of the Reddit users welcomed the reduced memory usage feature and commented, The reduced memory usage is huge. PHPStan is a very memory hungry beast Ondřej responded to multiple queries on the posts, providing guidance and promoting best practices. One of the threads discussed making the property read only and the other discussed excluding whole files. PHPStan 2.0 also introduces validation for inline @var PHPDoc tags against the native types of assigned expressions. This feature helps identify discrepancies and potential errors in type declarations that could lead to runtime issues. By ensuring that the declared types in @var tags align with actual code behavior, PHPStan promotes more accurate and reliable documentation practices. The concept of pure functions—those that always return the same output for the same input without side effects—is now enforced in PHPStan 2.0. The tool identifies impure points within the pure functions and reports them as errors. This enforcement helps in maintaining clean, predictable codebases and assists in identifying dead code that can be safely removed. PHPStan has simplified its caching mechanism to reduce disk space usage without compromising performance. Eliminating the unnecessary cache files related to variadic function checks, the tool now frees up significant disk space. It relies on result caching for efficient analysis. With ongoing support from PHPStan Pro and GitHub Sponsors, PHPStan plans to continue enhancing the tool's capabilities. One of the immediate goals post-2.0 release is to add support for PHP 8.4 by the end of 2024. The team is committed to cultivating an active community of contributors and expanding PHPStan's ecosystem of extensions. About the Author Aditya Kulkarni",
  "image": "https://res.infoq.com/news/2024/12/phpstan-v2-release/en/headerimage/generatedHeaderImage-1733381931239.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003ePHPStan, a static analysis tool for PHP recently released its version 2.0. This release launches new features and improvements related to enhancing code analysis, performance, and user experience.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/ondrejmirtes/\"\u003eOndřej Mirtes\u003c/a\u003e, Founder \u0026amp; Developer at PHPStan, discussed the release \u003ca href=\"https://phpstan.org/blog/phpstan-2-0-released-level-10-elephpants\"\u003ein a blog post\u003c/a\u003e. PHPStan 2.0 introduces a new analysis level, Level 10, which is an increment to the existing Level 9. The Level 9 focused on identifying unsafe uses of the \u003ccode\u003emixed\u003c/code\u003e type, while Level 10 detects implicitly-typed \u003ccode\u003emixed\u003c/code\u003e values that might get missed through previous checks. The level 10 is beneficial for developers aimed at achieving maximum code safety by eliminating ambiguities associated with the \u003ccode\u003emixed\u003c/code\u003e type.\u003c/p\u003e\n\n\u003cp\u003eThe new version also improves PHP\u0026#39;s array handling by introducing a dedicated list type. By definition, a list in PHPStan is an array with sequential integer keys starting from zero, without gaps. This feature enables developers to specify clear data structures in their PHPDocs, facilitating better code documentation and analysis.\u003c/p\u003e\n\n\u003cp\u003eAnother important improvements in PHPStan 2.0 is its reduced memory consumption. This further leads to faster performance. Earlier version of PHPStan\u0026#39;s had high memory usage which caused it to be terminated by continuous integration (CI) runners. The new version fixes this by virtue of efficient memory management. This involves cleaning up reference cycles in abstract syntax tree (\u003ca href=\"https://phpstan.org/developing-extensions/abstract-syntax-tree\"\u003eAST\u003c/a\u003e) nodes. As a result, memory consumption is reduced by approximately 50-70% on large projects, thereby speeding up the analysis process.\u003c/p\u003e\n\n\u003cp\u003eOndřej also engaged with the \u003ca href=\"https://www.reddit.com/r/PHP/comments/1gomtxx/phpstan_20_released_with_level_10_and_elephpants/\"\u003ePHPStan enthusiasts on Reddit\u003c/a\u003e. As of this writing, the post has 234 upvotes and 34 comments. One of the Reddit users welcomed the \u003ca href=\"https://www.reddit.com/r/PHP/comments/1gomtxx/comment/lwjzyjw/?utm_source=share\u0026amp;utm_medium=web3x\u0026amp;utm_name=web3xcss\u0026amp;utm_term=1\u0026amp;utm_content=share_button\"\u003ereduced memory usage feature\u003c/a\u003e and commented,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe reduced memory usage is huge. PHPStan is a very memory hungry beast\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOndřej responded to multiple queries on the posts, providing guidance and promoting best practices. One of the threads discussed making the \u003ca href=\"https://www.reddit.com/r/PHP/comments/1gomtxx/comment/lwlkl6d/?utm_source=share\u0026amp;utm_medium=web3x\u0026amp;utm_name=web3xcss\u0026amp;utm_term=1\u0026amp;utm_content=share_button\"\u003eproperty read only\u003c/a\u003e and the other discussed \u003ca href=\"https://www.reddit.com/r/PHP/comments/1gomtxx/comment/lwlk2gl/?utm_source=share\u0026amp;utm_medium=web3x\u0026amp;utm_name=web3xcss\u0026amp;utm_term=1\u0026amp;utm_content=share_button\"\u003eexcluding whole files\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003ePHPStan 2.0 also introduces validation for inline \u003ccode\u003e@var\u003c/code\u003e PHPDoc tags against the native types of assigned expressions. This feature helps identify discrepancies and potential errors in type declarations that could lead to runtime issues. By ensuring that the declared types in \u003ccode\u003e@var\u003c/code\u003e tags align with actual code behavior, PHPStan promotes more accurate and reliable documentation practices.\u003c/p\u003e\n\n\u003cp\u003eThe concept of pure functions—those that always return the same output for the same input without side effects—is now enforced in PHPStan 2.0. The tool identifies impure points within the pure functions and reports them as errors. This enforcement helps in maintaining clean, predictable codebases and assists in identifying dead code that can be safely removed.\u003c/p\u003e\n\n\u003cp\u003ePHPStan has simplified its caching mechanism to reduce disk space usage without compromising performance. Eliminating the unnecessary cache files related to variadic function checks, the tool now frees up significant disk space. It relies on \u003ca href=\"https://phpstan.org/user-guide/result-cache\"\u003eresult caching\u003c/a\u003e for efficient analysis.\u003c/p\u003e\n\n\u003cp\u003eWith ongoing support from \u003ca href=\"https://phpstan.org/blog/introducing-phpstan-pro\"\u003ePHPStan Pro\u003c/a\u003e and \u003ca href=\"https://phpstan.org/sponsor\"\u003eGitHub Sponsors\u003c/a\u003e, PHPStan plans to continue enhancing the tool\u0026#39;s capabilities. One of the immediate goals post-2.0 release is to add support for PHP 8.4 by the end of 2024.\u003c/p\u003e\n\n\u003cp\u003eThe team is committed to cultivating an \u003ca href=\"https://github.com/phpstan/phpstan-src/graphs/contributors?from=11.+11.+2023\"\u003eactive community of contributors\u003c/a\u003e and expanding PHPStan\u0026#39;s \u003ca href=\"https://phpstan.org/user-guide/extension-library\"\u003eecosystem of extensions\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Aditya-Kulkarni\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAditya Kulkarni\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-12-05T00:00:00Z",
  "modifiedTime": null
}
