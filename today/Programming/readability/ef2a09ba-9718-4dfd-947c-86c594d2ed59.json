{
  "id": "ef2a09ba-9718-4dfd-947c-86c594d2ed59",
  "title": "jOOQ’s R2DBC LoggingConnection to log all SQL statements",
  "link": "https://blog.jooq.org/jooqs-r2dbc-loggingconnection-to-log-all-sql-statements/",
  "description": "jOOQ already has a LoggingConnection (see also the manual), which acts as a JDBC proxy Connection to log all SQL statements that are executed by any JDBC client (including Hibernate, MyBatis, JdbcTemplate, native JDBC, etc.). Starting from jOOQ 3.18.0, 3.17.7, and 3.16.13, a LoggingConnection is now also available for R2DBC clients to log all reactive … Continue reading jOOQ’s R2DBC LoggingConnection to log all SQL statements →",
  "author": "lukaseder",
  "published": "Tue, 17 Jan 2023 10:12:05 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "jooq-in-use",
    "jooq",
    "logging",
    "R2DBC"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 2404,
  "excerpt": "This article describes how to use jOOQ's LoggingConnection, or write your own, to log all SQL statements executed by R2DBC.",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "jOOQ already has a LoggingConnection (see also the manual), which acts as a JDBC proxy Connection to log all SQL statements that are executed by any JDBC client (including Hibernate, MyBatis, JdbcTemplate, native JDBC, etc.). Starting from jOOQ 3.18.0, 3.17.7, and 3.16.13, a LoggingConnection is now also available for R2DBC clients to log all reactive queries. While some R2DBC drivers already do their own DEBUG logging, some of them don’t, so this utility will be very useful to jOOQ users or anyone else working with R2DBC. If you don’t want to add the jOOQ dependency, you can simply use the LoggingConnection code available from github. To give you an idea of what it does: // The jOOQ DefaultConnection just delegates all calls // to a delegate Connection public class LoggingConnection extends DefaultConnection { // Use your own logger, alternatively private static final JooqLogger log = JooqLogger.getLogger(LoggingConnection.class); public LoggingConnection(Connection delegate) { super(delegate); } @Override public Publisher\u003cVoid\u003e close() { return s -\u003e { if (log.isDebugEnabled()) log.debug(\"Connection::close\"); getDelegate().close().subscribe(s); }; } @Override public Statement createStatement(String sql) { if (log.isDebugEnabled()) log.debug(\"Connection::createStatement\", sql); return new LoggingStatement(getDelegate().createStatement(sql)); } // [...] } And the same thing is done with a wrapper for Statement or Batch: // The jOOQ DefaultStatement just delegates all calls // to a delegate Statement public class LoggingStatement extends DefaultStatement { // Use your own logger, alternatively private static final JooqLogger log = JooqLogger.getLogger(LoggingStatement.class); public LoggingStatement(Statement delegate) { super(delegate); } @Override public Statement add() { if (log.isDebugEnabled()) log.debug(\"Statement::add\"); getDelegate().add(); return this; } @Override public Publisher\u003c? extends Result\u003e execute() { return s -\u003e { if (log.isDebugEnabled()) log.debug(\"Statement::execute\"); getDelegate().execute().subscribe(s); }; } } That’s it!",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-11771\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003cp\u003ejOOQ already has a \u003ccode\u003e\u003ca rel=\"noreferrer noopener\" href=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/tools/jdbc/LoggingConnection.html\" data-type=\"URL\" data-id=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/tools/jdbc/LoggingConnection.html\" target=\"_blank\"\u003eLoggingConnection\u003c/a\u003e\u003c/code\u003e (\u003ca rel=\"noreferrer noopener\" href=\"https://www.jooq.org/doc/latest/manual/sql-execution/logging-connection/\" data-type=\"URL\" data-id=\"https://www.jooq.org/doc/latest/manual/sql-execution/logging-connection/\" target=\"_blank\"\u003esee also the manual\u003c/a\u003e), which acts as a JDBC proxy \u003ccode\u003eConnection\u003c/code\u003e to log all SQL statements that are executed by any JDBC client (including Hibernate, MyBatis, JdbcTemplate, native JDBC, etc.).\u003c/p\u003e\n\n\n\n\u003cp\u003eStarting from jOOQ 3.18.0, 3.17.7, and 3.16.13, a \u003ccode\u003e\u003ca rel=\"noreferrer noopener\" href=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/tools/r2dbc/LoggingConnection.html\" data-type=\"URL\" data-id=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/tools/r2dbc/LoggingConnection.html\" target=\"_blank\"\u003eLoggingConnection\u003c/a\u003e\u003c/code\u003e is now also available for \u003ca rel=\"noreferrer noopener\" href=\"https://r2dbc.io/\" data-type=\"URL\" data-id=\"https://r2dbc.io/\" target=\"_blank\"\u003eR2DBC\u003c/a\u003e clients to log all reactive queries. While some R2DBC drivers already do their own \u003ccode\u003eDEBUG\u003c/code\u003e logging, some of them don’t, so this utility will be very useful to jOOQ users or anyone else working with R2DBC.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you don’t want to add the jOOQ dependency, you can simply use the \u003ca rel=\"noreferrer noopener\" href=\"https://github.com/jOOQ/jOOQ/blob/main/jOOQ/src/main/java/org/jooq/tools/r2dbc/LoggingConnection.java\" data-type=\"URL\" data-id=\"https://github.com/jOOQ/jOOQ/blob/main/jOOQ/src/main/java/org/jooq/tools/r2dbc/LoggingConnection.java\" target=\"_blank\"\u003e\u003ccode\u003eLoggingConnection\u003c/code\u003e code available from github\u003c/a\u003e. To give you an idea of what it does:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003e// The jOOQ DefaultConnection just delegates all calls \n// to a delegate Connection\npublic class LoggingConnection extends DefaultConnection {\n\n    // Use your own logger, alternatively\n    private static final JooqLogger log = \n        JooqLogger.getLogger(LoggingConnection.class);\n\n    public LoggingConnection(Connection delegate) {\n        super(delegate);\n    }\n\n    @Override\n    public Publisher\u0026lt;Void\u0026gt; close() {\n        return s -\u0026gt; {\n            if (log.isDebugEnabled())\n                log.debug(\u0026#34;Connection::close\u0026#34;);\n\n            getDelegate().close().subscribe(s);\n        };\n    }\n\n    @Override\n    public Statement createStatement(String sql) {\n        if (log.isDebugEnabled())\n            log.debug(\u0026#34;Connection::createStatement\u0026#34;, sql);\n\n        return new LoggingStatement(getDelegate().createStatement(sql));\n    }\n\n    // [...]\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAnd the same thing is done with a wrapper for \u003ccode\u003eStatement\u003c/code\u003e or \u003ccode\u003eBatch\u003c/code\u003e:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003e// The jOOQ DefaultStatement just delegates all calls \n// to a delegate Statement\npublic class LoggingStatement extends DefaultStatement {\n\n    // Use your own logger, alternatively\n    private static final JooqLogger log = \n        JooqLogger.getLogger(LoggingStatement.class);\n\n    public LoggingStatement(Statement delegate) {\n        super(delegate);\n    }\n\n    @Override\n    public Statement add() {\n        if (log.isDebugEnabled())\n            log.debug(\u0026#34;Statement::add\u0026#34;);\n\n        getDelegate().add();\n        return this;\n    }\n\n    @Override\n    public Publisher\u0026lt;? extends Result\u0026gt; execute() {\n        return s -\u0026gt; {\n            if (log.isDebugEnabled())\n                log.debug(\u0026#34;Statement::execute\u0026#34;);\n\n            getDelegate().execute().subscribe(s);\n        };\n    }\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThat’s it!\u003c/p\u003e\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2023-01-17T10:12:05Z",
  "modifiedTime": "2023-01-17T10:13:08Z"
}
