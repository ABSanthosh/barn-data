{
  "id": "ea4fd2f2-1a8c-4c86-9bdc-7daae5a977bc",
  "title": "Accelerate learning with GitLab Duo Agent Platform",
  "link": "https://about.gitlab.com/blog/accelerate-learning-with-gitlab-duo-agent-platform/",
  "description": "",
  "author": "Halil Coban",
  "published": "2025-07-07T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Halil Coban",
  "length": 10787,
  "excerpt": "Learn how agentic AI helped generate comprehensive gRPC documentation in minutes, not hours.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/images/ico/favicon-192x192.png",
  "text": "At GitLab, we continue to expand our AI capabilities so I often find myself learning and working in new codebases. Whether I'm debugging issues, implementing new features, or onboarding to different projects, understanding system architecture quickly is crucial. But let's be honest — manually tracing through complex communication flows, especially gRPC connections, can eat up hours of productive development time. This is exactly the type of tedious, yet necessary, work GitLab Duo Agent Platform is designed to handle. Instead of replacing developers, it amplifies our capabilities by automating routine tasks so we can focus on creative problem solving and strategic technical work. Let me show you how I used Duo Agent Platform to generate comprehensive documentation for a Golang project's gRPC communication flow — and how it transformed hours of code analysis into a few minutes of guided interaction. You can follow along with this video: The challenge: Understanding gRPC communication flows I was working with a project called \"Duo Workflow Executor\" that communicates with a gRPC server. Rather than spending my afternoon manually tracing through the codebase to understand the communication patterns, I decided to let Duo Agent Platform handle the heavy lifting. My goal was simple: generate a clear diagram showing how the gRPC communication works, including what payloads are received, what actions are executed, and what responses are sent back. Working in VS Code with the GitLab Workflow extension installed, I opened the project and crafted a specific prompt for Duo Agent Platform: \"Can you prepare a mermaid diagram that shows the gRPC connection between duo-workflow-service and this project. It should show what this project receives in gRPC payload, and what actions it executes based on the payload, and what it sends back. Study internal/services/runner/runner.go, especially the Run method, and write the mermaid output to a grpc.md file.\" Duo Agent Platform didn't just blindly execute my request — it began intelligently gathering context to create a comprehensive execution plan. The platform automatically: Searched through relevant Go files in the project Read the specific file I mentioned (runner.go) Identified additional files that would provide necessary context Analyzed the codebase structure to understand the gRPC implementation This contextual awareness is what sets agentic AI tools with great context apart from simple code generation tools. Instead of working in isolation, Duo Agent Platform understands the relationships between different components of your project. Collaborative refinement Rather than making assumptions, Duo Agent Platform is designed to keep a human in the loop at critical moments in task execution to deliver better results. In this scenario, the platform paused to ask clarifying questions about the level of detail I wanted. Agent: \"Should I include error handling details in the diagram?\" Me: \"Don't focus on error handling. Include all actions. Focus on gRPC payload.\" This back-and-forth refinement is crucial. The agent isn't just executing commands — it's working with me to ensure the deliverable meets my specific requirements. Execution and results With the clarified requirements, Duo Agent Platform finalized its execution plan and requested confirmation before proceeding. I could have modified the approach at this stage, but the plan was perfectly aligned with what I needed. The agent then executed each task in sequence, providing real-time progress updates. Within minutes, it had: Analyzed all relevant files across the project Created comprehensive documentation with a detailed mermaid diagram Saved everything to the requested grpc.md file Included valuable context about outgoing payloads and connection management The resulting documentation wasn't just a basic diagram — it was thorough, accurate, and immediately useful for understanding the system architecture. Reviewing the output Here's the actual mermaid diagram that Duo Agent Platform created, showing the complete gRPC communication flow: sequenceDiagram participant DWS as duo-workflow-service participant DWE as duo-workflow-executor participant Runner as ExecutionRunner participant ActionExecutor as Action Executor participant FileSystem as File System/Commands Note over DWS, DWE: gRPC Bidirectional Streaming (ExecuteWorkflow) %% Connection Establishment DWE-\u003e\u003eDWS: gRPC Connection with Headers Note over DWE, DWS: Headers: authorization (Bearer token)x-gitlab-authentication-type: oidcx-gitlab-realm, x-gitlab-global-user-idx-gitlab-oauth-token, x-gitlab-base-urlx-gitlab-instance-id, x-request-idx-gitlab-namespace-id, x-gitlab-project-id %% Workflow Start Request DWE-\u003e\u003eDWS: ClientEvent{StartWorkflowRequest} Note over DWE, DWS: StartWorkflowRequest:- ClientVersion- WorkflowDefinition- Goal- WorkflowID- WorkflowMetadata- ClientCapabilities[] %% Action Processing Loop loop Action Processing DWS-\u003e\u003eDWE: Action Message Note over DWS, DWE: Action Types:- Action_RunCommand {program, flags[], arguments[]}- Action_RunGitCommand {command, arguments[], repositoryUrl}- Action_RunReadFile {filepath}- Action_RunWriteFile {filepath, contents}- Action_RunEditFile {filepath, oldString, newString}- Action_RunHTTPRequest {method, path, body}- Action_ListDirectory {directory}- Action_FindFiles {namePattern}- Action_Grep {searchDirectory, pattern, caseInsensitive}- Action_NewCheckpoint {}- Action_RunMCPTool {} DWE-\u003e\u003eRunner: Receive Action Runner-\u003e\u003eRunner: processWorkflowActions() Runner-\u003e\u003eActionExecutor: executeAction(ctx, action) alt Action_RunCommand ActionExecutor-\u003e\u003eFileSystem: Execute Shell Command Note over ActionExecutor, FileSystem: Executes: program + flags + argumentsin basePath directory FileSystem--\u003e\u003eActionExecutor: Command Output + Exit Code else Action_RunReadFile ActionExecutor-\u003e\u003eFileSystem: Read File Note over ActionExecutor, FileSystem: Check gitignore rulesRead file contents FileSystem--\u003e\u003eActionExecutor: File Contents else Action_RunWriteFile ActionExecutor-\u003e\u003eFileSystem: Write File Note over ActionExecutor, FileSystem: Check gitignore rulesCreate/overwrite file FileSystem--\u003e\u003eActionExecutor: Success/Error Message else Action_RunEditFile ActionExecutor-\u003e\u003eFileSystem: Edit File Note over ActionExecutor, FileSystem: Read → Replace oldString with newString → WriteCheck gitignore rules FileSystem--\u003e\u003eActionExecutor: Edit Result Message else Action_RunGitCommand ActionExecutor-\u003e\u003eFileSystem: Execute Git Command Note over ActionExecutor, FileSystem: Git operations with authenticationUses provided git config FileSystem--\u003e\u003eActionExecutor: Git Command Output else Action_RunHTTPRequest ActionExecutor-\u003e\u003eDWS: HTTP Request to GitLab API Note over ActionExecutor, DWS: Method: GET/POST/PUT/DELETEPath: API endpointBody: Request payloadHeaders: Authorization DWS--\u003e\u003eActionExecutor: HTTP Response else Action_ListDirectory ActionExecutor-\u003e\u003eFileSystem: List Directory Contents Note over ActionExecutor, FileSystem: Respect gitignore rules FileSystem--\u003e\u003eActionExecutor: Directory Listing else Action_FindFiles ActionExecutor-\u003e\u003eFileSystem: Find Files by Pattern Note over ActionExecutor, FileSystem: Recursive search with name patternRespect gitignore rules FileSystem--\u003e\u003eActionExecutor: File Paths List else Action_Grep ActionExecutor-\u003e\u003eFileSystem: Search Text Pattern Note over ActionExecutor, FileSystem: Recursive text searchCase sensitive/insensitive option FileSystem--\u003e\u003eActionExecutor: Search Results else Action_NewCheckpoint/Action_RunMCPTool ActionExecutor-\u003e\u003eActionExecutor: No-op Action Note over ActionExecutor: Returns empty success result end ActionExecutor--\u003e\u003eRunner: Action Result (string) alt Result Size Check Runner-\u003e\u003eRunner: Check if result \u003e 4MB Note over Runner: If result exceeds MaxMessageSize (4MB)Replace with error message about size limit end Runner-\u003e\u003eDWE: ActionResponse DWE-\u003e\u003eDWS: ClientEvent{ActionResponse} Note over DWE, DWS: ActionResponse:- RequestID (matches Action.RequestID)- Response (execution result string) end %% Workflow Completion DWE-\u003e\u003eDWS: CloseSend() Note over DWE, DWS: Signal end of workflow execution %% Analytics and Cleanup Runner-\u003e\u003eRunner: Send Analytics Event (Finish) DWE-\u003e\u003eDWE: Token Revocation (if enabled) DWE-\u003e\u003eDWS: Close gRPC Connection This diagram reveals several important architectural insights that would have taken considerable time to extract manually: Bidirectional communication: The workflow executor both initiates requests and responds to service actions. Rich payload structure: Each action type has specific parameters and expected responses. Multiple integration points: The executor interacts with local filesystem, Git repositories, and GitLab APIs. Comprehensive action set: Nine different action types handle everything from file operations to HTTP requests. Proper lifecycle management: Clear connection establishment and teardown patterns. What impressed me most was how the agent automatically included the detailed payload structures for each action type. This level of detail transforms the diagram from a high-level overview into actionable documentation that other developers can immediately use. Looking ahead This demonstration represents just one use case for GitLab Duo Agent Platform. The same contextual understanding and collaborative approach that made documentation generation seamless can be applied to: Code reviews: Agents can analyze merge requests with full project context Testing: Generate comprehensive test suites based on actual usage patterns Debugging: Trace issues across multiple services and components Security scanning: Identify vulnerabilities with understanding of your specific architecture CI/CD optimization: Improve pipeline performance based on historical data GitLab Duo Agent Platform will enter public beta soon so join the wait list today. Stay tuned to the GitLab Blog and social channels for additional updates. GitLab Duo Agent Platform is evolving rapidly with specialized agents, custom workflows, and community-driven extensions on the roadmap. Learn more Agentic AI guides and resources GitLab Duo Agent Platform: What’s next for intelligent DevSecOps What is agentic AI? From vibe coding to agentic AI: A roadmap for technical leaders",
  "image": "https://about.gitlab.com/images/open-graph/open-graph-gitlab.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-c4ab8db4=\"\" data-v-69df7a1a=\"\" data-v-b7392a61=\"\"\u003e\u003cp\u003eAt GitLab, we continue to expand our AI capabilities so I often find myself learning and working in new codebases. Whether I\u0026#39;m debugging issues, implementing new features, or onboarding to different projects, understanding system architecture quickly is crucial. But let\u0026#39;s be honest — manually tracing through complex communication flows, especially gRPC connections, can eat up hours of productive development time.\u003c/p\u003e\n\u003cp\u003eThis is exactly the type of tedious, yet necessary, work \u003ca href=\"https://about.gitlab.com/blog/gitlab-duo-agent-platform-what-is-next-for-intelligent-devsecops/\"\u003eGitLab Duo Agent Platform\u003c/a\u003e is designed to handle. Instead of replacing developers, it amplifies our capabilities by automating routine tasks so we can focus on creative problem solving and strategic technical work.\u003c/p\u003e\n\u003cp\u003eLet me show you how I used \u003ca href=\"https://about.gitlab.com/gitlab-duo/agent-platform/\"\u003eDuo Agent Platform\u003c/a\u003e to generate comprehensive documentation for a Golang project\u0026#39;s gRPC communication flow — and how it transformed hours of code analysis into a few minutes of guided interaction.\u003c/p\u003e\n\u003cp\u003eYou can follow along with this video:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1098569263?badge=0\u0026amp;autopause=0\u0026amp;player_id=0\u0026amp;app_id=58479\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share\" title=\"AI Agent Generates Complete gRPC Documentation in Minutes | GitLab Duo Agent Platform Demo\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003ch2 id=\"the-challenge-understanding-grpc-communication-flows\" tabindex=\"-1\"\u003eThe challenge: Understanding gRPC communication flows \u003ca href=\"#the-challenge-understanding-grpc-communication-flows\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI was working with a project called \u0026#34;Duo Workflow Executor\u0026#34; that communicates with a gRPC server. Rather than spending my afternoon manually tracing through the codebase to understand the communication patterns, I decided to let Duo Agent Platform handle the heavy lifting.\u003c/p\u003e\n\u003cp\u003eMy goal was simple: generate a clear diagram showing how the gRPC communication works, including what payloads are received, what actions are executed, and what responses are sent back.\u003c/p\u003e\n\u003cp\u003eWorking in VS Code with the GitLab Workflow extension installed, I opened the project and crafted a specific prompt for Duo Agent Platform:\u003c/p\u003e\n\u003cp\u003e\u0026#34;Can you prepare a mermaid diagram that shows the gRPC connection between duo-workflow-service and this project. It should show what this project receives in gRPC payload, and what actions it executes based on the payload, and what it sends back. Study internal/services/runner/runner.go, especially the Run method, and write the mermaid output to a grpc.md file.\u0026#34;\u003c/p\u003e\n\u003cp\u003eDuo Agent Platform didn\u0026#39;t just blindly execute my request — it began intelligently gathering context to create a comprehensive execution plan. The platform automatically:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSearched through relevant Go files in the project\u003c/li\u003e\n\u003cli\u003eRead the specific file I mentioned (runner.go)\u003c/li\u003e\n\u003cli\u003eIdentified additional files that would provide necessary context\u003c/li\u003e\n\u003cli\u003eAnalyzed the codebase structure to understand the gRPC implementation\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis contextual awareness is what sets agentic AI tools with great context apart from simple code generation tools. Instead of working in isolation, Duo Agent Platform understands the relationships between different components of your project.\u003c/p\u003e\n\u003ch2 id=\"collaborative-refinement\" tabindex=\"-1\"\u003eCollaborative refinement \u003ca href=\"#collaborative-refinement\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRather than making assumptions, Duo Agent Platform is designed to keep a human in the loop at critical moments in task execution to deliver better results. In this scenario, the platform paused to ask clarifying questions about the level of detail I wanted.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAgent:\u003c/strong\u003e \u0026#34;Should I include error handling details in the diagram?\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMe:\u003c/strong\u003e \u0026#34;Don\u0026#39;t focus on error handling. Include all actions. Focus on gRPC payload.\u0026#34;\u003c/p\u003e\n\u003cp\u003eThis back-and-forth refinement is crucial. The agent isn\u0026#39;t just executing commands — it\u0026#39;s working with me to ensure the deliverable meets my specific requirements.\u003c/p\u003e\n\u003ch2 id=\"execution-and-results\" tabindex=\"-1\"\u003eExecution and results \u003ca href=\"#execution-and-results\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWith the clarified requirements, Duo Agent Platform finalized its execution plan and requested confirmation before proceeding. I could have modified the approach at this stage, but the plan was perfectly aligned with what I needed.\u003c/p\u003e\n\u003cp\u003eThe agent then executed each task in sequence, providing real-time progress updates. Within minutes, it had:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAnalyzed all relevant files across the project\u003c/li\u003e\n\u003cli\u003eCreated comprehensive documentation with a detailed mermaid diagram\u003c/li\u003e\n\u003cli\u003eSaved everything to the requested grpc.md file\u003c/li\u003e\n\u003cli\u003eIncluded valuable context about outgoing payloads and connection management\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe resulting documentation wasn\u0026#39;t just a basic diagram — it was thorough, accurate, and immediately useful for understanding the system architecture.\u003c/p\u003e\n\u003ch2 id=\"reviewing-the-output\" tabindex=\"-1\"\u003eReviewing the output \u003ca href=\"#reviewing-the-output\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHere\u0026#39;s the actual mermaid diagram that Duo Agent Platform created, showing the complete gRPC communication flow:\u003c/p\u003e\n\u003cp\u003esequenceDiagram\nparticipant DWS as duo-workflow-service\nparticipant DWE as duo-workflow-executor\nparticipant Runner as ExecutionRunner\nparticipant ActionExecutor as Action Executor\nparticipant FileSystem as File System/Commands\n\n\nNote over DWS, DWE: gRPC Bidirectional Streaming (ExecuteWorkflow)\n\n%% Connection Establishment\nDWE-\u0026gt;\u0026gt;DWS: gRPC Connection with Headers\nNote over DWE, DWS: Headers: authorization (Bearer token)\u003cbr/\u003ex-gitlab-authentication-type: oidc\u003cbr/\u003ex-gitlab-realm, x-gitlab-global-user-id\u003cbr/\u003ex-gitlab-oauth-token, x-gitlab-base-url\u003cbr/\u003ex-gitlab-instance-id, x-request-id\u003cbr/\u003ex-gitlab-namespace-id, x-gitlab-project-id\n\n\n%% Workflow Start Request\nDWE-\u0026gt;\u0026gt;DWS: ClientEvent{StartWorkflowRequest}\nNote over DWE, DWS: StartWorkflowRequest:\u003cbr/\u003e- ClientVersion\u003cbr/\u003e- WorkflowDefinition\u003cbr/\u003e- Goal\u003cbr/\u003e- WorkflowID\u003cbr/\u003e- WorkflowMetadata\u003cbr/\u003e- ClientCapabilities[]\n\n\n%% Action Processing Loop\nloop Action Processing\n    DWS-\u0026gt;\u0026gt;DWE: Action Message\n    Note over DWS, DWE: Action Types:\u003cbr/\u003e- Action_RunCommand {program, flags[], arguments[]}\u003cbr/\u003e- Action_RunGitCommand {command, arguments[], repositoryUrl}\u003cbr/\u003e- Action_RunReadFile {filepath}\u003cbr/\u003e- Action_RunWriteFile {filepath, contents}\u003cbr/\u003e- Action_RunEditFile {filepath, oldString, newString}\u003cbr/\u003e- Action_RunHTTPRequest {method, path, body}\u003cbr/\u003e- Action_ListDirectory {directory}\u003cbr/\u003e- Action_FindFiles {namePattern}\u003cbr/\u003e- Action_Grep {searchDirectory, pattern, caseInsensitive}\u003cbr/\u003e- Action_NewCheckpoint {}\u003cbr/\u003e- Action_RunMCPTool {}\n\n\n    DWE-\u0026gt;\u0026gt;Runner: Receive Action\n    Runner-\u0026gt;\u0026gt;Runner: processWorkflowActions()\n    Runner-\u0026gt;\u0026gt;ActionExecutor: executeAction(ctx, action)\n    \n    alt Action_RunCommand\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Execute Shell Command\n        Note over ActionExecutor, FileSystem: Executes: program + flags + arguments\u003cbr/\u003ein basePath directory\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Command Output + Exit Code\n    \n    else Action_RunReadFile\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Read File\n        Note over ActionExecutor, FileSystem: Check gitignore rules\u003cbr/\u003eRead file contents\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: File Contents\n    \n    else Action_RunWriteFile\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Write File\n        Note over ActionExecutor, FileSystem: Check gitignore rules\u003cbr/\u003eCreate/overwrite file\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Success/Error Message\n    \n    else Action_RunEditFile\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Edit File\n        Note over ActionExecutor, FileSystem: Read → Replace oldString with newString → Write\u003cbr/\u003eCheck gitignore rules\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Edit Result Message\n    \n    else Action_RunGitCommand\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Execute Git Command \n        Note over ActionExecutor, FileSystem: Git operations with authentication\u003cbr/\u003eUses provided git config\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Git Command Output\n    \n    else Action_RunHTTPRequest\n        ActionExecutor-\u0026gt;\u0026gt;DWS: HTTP Request to GitLab API\n        Note over ActionExecutor, DWS: Method: GET/POST/PUT/DELETE\u003cbr/\u003ePath: API endpoint\u003cbr/\u003eBody: Request payload\u003cbr/\u003eHeaders: Authorization\n        DWS--\u0026gt;\u0026gt;ActionExecutor: HTTP Response\n    \n    else Action_ListDirectory\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: List Directory Contents\n        Note over ActionExecutor, FileSystem: Respect gitignore rules\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Directory Listing\n    \n    else Action_FindFiles\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Find Files by Pattern\n        Note over ActionExecutor, FileSystem: Recursive search with name pattern\u003cbr/\u003eRespect gitignore rules\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: File Paths List\n    \n    else Action_Grep\n        ActionExecutor-\u0026gt;\u0026gt;FileSystem: Search Text Pattern\n        Note over ActionExecutor, FileSystem: Recursive text search\u003cbr/\u003eCase sensitive/insensitive option\n        FileSystem--\u0026gt;\u0026gt;ActionExecutor: Search Results\n    \n    else Action_NewCheckpoint/Action_RunMCPTool\n        ActionExecutor-\u0026gt;\u0026gt;ActionExecutor: No-op Action\n        Note over ActionExecutor: Returns empty success result\n    end\n\n\n    ActionExecutor--\u0026gt;\u0026gt;Runner: Action Result (string)\n    \n    alt Result Size Check\n        Runner-\u0026gt;\u0026gt;Runner: Check if result \u0026gt; 4MB\n        Note over Runner: If result exceeds MaxMessageSize (4MB)\u003cbr/\u003eReplace with error message about size limit\n    end\n\n\n    Runner-\u0026gt;\u0026gt;DWE: ActionResponse\n    DWE-\u0026gt;\u0026gt;DWS: ClientEvent{ActionResponse}\n    Note over DWE, DWS: ActionResponse:\u003cbr/\u003e- RequestID (matches Action.RequestID)\u003cbr/\u003e- Response (execution result string)\nend\n\n\n%% Workflow Completion\nDWE-\u0026gt;\u0026gt;DWS: CloseSend()\nNote over DWE, DWS: Signal end of workflow execution\n\n\n%% Analytics and Cleanup\nRunner-\u0026gt;\u0026gt;Runner: Send Analytics Event (Finish)\nDWE-\u0026gt;\u0026gt;DWE: Token Revocation (if enabled)\nDWE-\u0026gt;\u0026gt;DWS: Close gRPC Connection\n\u003c/p\u003e\u003cp\u003eThis diagram reveals several important architectural insights that would have taken considerable time to extract manually:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBidirectional communication:\u003c/strong\u003e The workflow executor both initiates requests and responds to service actions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRich payload structure:\u003c/strong\u003e Each action type has specific parameters and expected responses.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple integration points:\u003c/strong\u003e The executor interacts with local filesystem, Git repositories, and GitLab APIs.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComprehensive action set:\u003c/strong\u003e Nine different action types handle everything from file operations to HTTP requests.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProper lifecycle management:\u003c/strong\u003e Clear connection establishment and teardown patterns.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhat impressed me most was how the agent automatically included the detailed payload structures for each action type. This level of detail transforms the diagram from a high-level overview into actionable documentation that other developers can immediately use.\u003c/p\u003e\n\u003ch2 id=\"looking-ahead\" tabindex=\"-1\"\u003eLooking ahead \u003ca href=\"#looking-ahead\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis demonstration represents just one use case for GitLab Duo Agent Platform. The same contextual understanding and collaborative approach that made documentation generation seamless can be applied to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCode reviews:\u003c/strong\u003e Agents can analyze merge requests with full project context\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTesting:\u003c/strong\u003e Generate comprehensive test suites based on actual usage patterns\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDebugging:\u003c/strong\u003e Trace issues across multiple services and components\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity scanning:\u003c/strong\u003e Identify vulnerabilities with understanding of your specific architecture\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCI/CD optimization:\u003c/strong\u003e Improve pipeline performance based on historical data\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGitLab Duo Agent Platform will enter public beta soon so \u003ca href=\"https://about.gitlab.com/gitlab-duo/agent-platform/\"\u003ejoin the wait list today\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eStay tuned to the \u003ca href=\"https://about.gitlab.com/blog/\"\u003eGitLab Blog\u003c/a\u003e and social channels for additional updates. GitLab Duo Agent Platform is evolving rapidly with specialized agents, custom workflows, and community-driven extensions on the roadmap.\u003c/p\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/agentic-ai-guides-and-resources/\"\u003eAgentic AI guides and resources\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/gitlab-duo-agent-platform-what-is-next-for-intelligent-devsecops/\"\u003eGitLab Duo Agent Platform: What’s next for intelligent DevSecOps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/topics/agentic-ai/\"\u003eWhat is agentic AI?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/the-source/ai/from-vibe-coding-to-agentic-ai-a-roadmap-for-technical-leaders/\"\u003eFrom vibe coding to agentic AI: A roadmap for technical leaders\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-07-07T00:00:00Z",
  "modifiedTime": null
}
