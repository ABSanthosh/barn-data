{
  "id": "86e2dffc-ac49-4b8e-b61e-9eeff7994821",
  "title": "Automating cybersecurity threat detections with GitLab CI/CD",
  "link": "https://about.gitlab.com/blog/2025/01/29/automating-cybersecurity-threat-detections-with-gitlab-ci-cd",
  "description": "",
  "author": "Mitra Jozenazemian",
  "published": "2025-01-29T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Mitra Jozenazemian",
  "length": 9278,
  "excerpt": "Discover how GUARD automates cybersecurity threat detections through the use of GitLab CI/CD and how it ensures high-quality detections.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "This blog post is the second post in a series about GitLab Universal Automated Response and Detection (GUARD). Writing and deploying security threat detections in an organization’s security information event management platform (SIEM) is a critical component of a successful cybersecurity program. Moving from manual detection engineering to a fully automated process by implementing Detections as Code (DaC) ensures detection consistency, quality, auditing, and automated testing. At GitLab, we’ve embedded DaC capabilities into GUARD, our fully automated detection and response framework. The problem: Source control and automated tests The Signals Engineering and SIRT team at GitLab share the responsibility to create, update, and decommission threat detections in our SIEM. Maintaining a single source of truth for detections is critical to ensure detection consistency and quality standards are met. Our teams made the conscious decision to abstract the detection creation process from our SIEM, improving our issue tracking, consistency, roll-back process, and metrics. Additionally, conducting pre-commit detection tests outside of our SIEM ensured that newly created detections didn’t introduce overly false positive heavy alerts, which would require tuning or disablement while the alert was fixed. The Solution: Leverage GitLab CI/CD for detection testing and validation To address these challenges, we developed an efficient workflow using GitLab CI/CD, resulting in a streamlined and secure SIEM detection deployment process. Key components of the GUARD DaC pipeline 1. Detections stored in JSON format in a GitLab project GitLab uses the JSON format for our threat detections. The template includes essential information such as SIEM query logic, detection title, and description along with runbook page link, MITRE tactic and technique related to the detection, and other necessary details. 2. Initiating merge requests When a GitLab team member intends to create a new threat detection, update an existing one, or delete a current detection, they initiate the process by submitting a merge request (MR) in the DaC project containing the detection JSON template. Creating the MR automatically triggers a CI/CD pipeline. 3. Automated validation with CI/CD jobs Each MR contains a number of automated checks via GitLab CI/CD: Query format validation queries SIEM API to ensure detection query is valid JSON Detection fields validation validates all required fields are present, and are in the correct format New detections and detection modification trigger a number of SIEM API calls to ensure the detection does not have any errors and that no issues will be introduced into our production detection rules Detection deletion MRs trigger the pipeline to issue a SIEM API query to ensure the detection to be deleted is still active and can be deleted 4. Peer review and approval When a detection MR job completes successfully, a peer review is required to review and confirm the MR meets required quality and content standards before the detection MR can be merged. Merge request approval rules are used to trigger the peer review process. 5. Merge and final deployment After the MR is approved, it is merged into the main branch. As part of the CI/CD pipeline, an automated job executes a SIEM API command in order to perform two tasks: Create the new detection or update/delete the existing detection if needed. Extract the MITRE ATT\u0026CK tactic and technique information related to the alert from the JSON files and transmit these details to a lookup table within the SIEM. This lookup table plays an important role in mapping our alerts to MITRE tactics and techniques, helping us improve our threat analysis and identify gaps in our detection capabilities in alignment with the MITRE framework. Note: The necessary credentials for these actions are securely stored in CI/CD variables to ensure the process remains confidential and secure. Below is a template GitLab CI/CD gitlab-ci.yml configuration file for a DaC pipeline: # --------------------------------------------------------------------------- # # GitLab CI/CD Pipeline for SIEM Detection Management # --------------------------------------------------------------------------- # image: python:3.12 # --------------------------------------------------------------------------- # # Global Configuration # --------------------------------------------------------------------------- # before_script: - apt-get update \u0026\u0026 apt-get install -y jq - pip install --upgrade pip - pip install -r requirements.txt # --------------------------------------------------------------------------- # stages: - fetch - test - process - upload # --------------------------------------------------------------------------- # # Fetch Stage # --------------------------------------------------------------------------- # fetch_changed_files: stage: fetch Script: - echo \"Fetching changed files...\" - git branch - git fetch origin $CI_DEFAULT_BRANCH:$CI_DEFAULT_BRANCH --depth 2000 - | if [[ \"$CI_COMMIT_BRANCH\" == \"$CI_DEFAULT_BRANCH\" ]]; then git diff --name-status HEAD^1...HEAD \u003e changed-files-temp.txt else git fetch origin $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH --depth 2000 git diff --name-status ${CI_DEFAULT_BRANCH}...${CI_COMMIT_SHA} \u003e changed-files-temp.txt fi - grep -E '\\.json$' changed-files-temp.txt \u003e changed-files.txt || true - flake8 . - pytest artifacts: paths: - changed-files.txt expose_as: 'changed_files' # --------------------------------------------------------------------------- # # Test Stage # --------------------------------------------------------------------------- # flake8: stage: test script: - echo \"Running Flake8 for linting...\" - flake8 . pytest: stage: test script: - echo \"Running Pytest for unit tests...\" - pytest artifacts: when: always reports: junit: report.xml # --------------------------------------------------------------------------- # # Process Stage # --------------------------------------------------------------------------- # process_files: stage: process script: - echo \"Processing changed files...\" - git clone --depth 2000 --branch $CI_DEFAULT_BRANCH $CI_REPOSITORY_URL - mkdir -p modified_rules delete_file new_file - python3 move-files.py -x changed-files.txt - python3 check-alerts-format.py artifacts: paths: - modified_rules - delete_file - new_file # --------------------------------------------------------------------------- # # Upload Stage # --------------------------------------------------------------------------- # update_rules: stage: upload script: - echo \"Uploading updated rules and lookup tables...\" - git fetch origin $CI_DEFAULT_BRANCH:$CI_DEFAULT_BRANCH --depth 2000 - git clone --depth 2000 --branch $CI_DEFAULT_BRANCH $CI_REPOSITORY_URL - python3 update-rules.py - python3 update-exceptions.py - python3 create_ttps_layers.py rules: - if: $CI_COMMIT_BRANCH == \"main\" \u0026\u0026 $CI_PIPELINE_SOURCE != \"schedule\" changes: - detections/**/* - exceptions/**/* The diagram below illustrates the workflow of the CI/CD process described above. graph TD; fetch[Fetch Stage: Identify Changed Files] --\u003e test[Test Stage: Run Linting and Tests]; test --\u003e process[Process Stage: Categorize Files]; process --\u003e upload[Upload Stage: Update Rules and Lookup Tables]; fetch --\u003e fetch_details[Details: Filter JSON files, Output 'changed-files.txt']; test --\u003e test_details[Details: Run Flake8 for linting, Pytest for testing]; process --\u003e process_details[Details: Categorize into 'modified', 'new', 'deleted', Prepare for upload]; upload --\u003e upload_details[Details: Update repo, Update detections in SIEM and SIEM lookup table];Benefits and outcomes Automating our detections lifecycle through a DaC CI/CD-powered workflow introduces numerous benefits to our threat detection deployment process: Automation: Automating the creation and validation of SIEM detections reduces manual errors and saves time. Enhanced security: The CI-driven workflow enforces a \"least privilege\" policy, ensuring consistency, peer reviews, and quality standards for creating, updating, or deleting threat detections. Efficiency: The standardized JSON detection format and automated creation expedite the deployment process. Collaboration: The MR and review process fosters collaboration and knowledge sharing among GitLab team members. Version control: Treating threat detection as code abstracts the detections from the SIEM platform they are ultimately stored in. This abstraction provides a historical record of changes, facilitates collaboration, and enables rollbacks to previous configurations if issues arise. Get started with DaC Using GitLab CI/CD and a \"least privilege\" policy has made our SIEM detection and alert management easier and more secure. Automation has improved efficiency and reduced risks, providing a helpful example for others wanting to improve their security and compliance. You can try this tutorial by signing up for a free 60-day trial of GitLab Ultimate.",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/4f71Yb62V1ldQdMVHBdH3x/53c307ab387c2407ecdf8762eabb2140/AdobeStock_1023776629.jpeg?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003e\u003cem\u003eThis blog post is the second post in a series about \u003ca href=\"https://about.gitlab.com/blog/2024/11/26/unveiling-the-guard-framework-to-automate-security-detections-at-gitlab/\"\u003eGitLab Universal Automated Response and Detection (GUARD)\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWriting and deploying security threat detections in an organization’s security information event management platform (SIEM) is a critical component of a successful cybersecurity program. Moving from manual detection engineering to a fully automated process by implementing Detections as Code (DaC) ensures detection consistency, quality, auditing, and automated testing. At GitLab, we’ve embedded DaC capabilities into GUARD, our fully automated detection and response framework.\u003c/p\u003e\n\u003ch2 id=\"the-problem-source-control-and-automated-tests\" tabindex=\"-1\"\u003eThe problem: Source control and automated tests \u003ca href=\"#the-problem-source-control-and-automated-tests\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://handbook.gitlab.com/handbook/security/security-operations/signals-engineering/\"\u003eSignals Engineering\u003c/a\u003e and \u003ca href=\"https://handbook.gitlab.com/handbook/security/security-operations/sirt/\"\u003eSIRT\u003c/a\u003e team at GitLab share the responsibility to create, update, and decommission threat detections in our SIEM. Maintaining a single source of truth for detections is critical to ensure detection consistency and quality standards are met. Our teams made the conscious decision to abstract the detection creation process from our SIEM, improving our issue tracking, consistency, roll-back process, and metrics. Additionally, conducting pre-commit detection tests outside of our SIEM ensured that newly created detections didn’t introduce overly false positive heavy alerts, which would require tuning or disablement while the alert was fixed.\u003c/p\u003e\n\u003ch2 id=\"the-solution-leverage-gitlab-cicd-for-detection-testing-and-validation\" tabindex=\"-1\"\u003eThe Solution: Leverage GitLab CI/CD for detection testing and validation \u003ca href=\"#the-solution-leverage-gitlab-cicd-for-detection-testing-and-validation\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo address these challenges, we developed an efficient workflow using GitLab \u003ca href=\"https://about.gitlab.com/topics/ci-cd/\"\u003eCI/CD\u003c/a\u003e, resulting in a streamlined and secure SIEM detection deployment process.\u003c/p\u003e\n\u003ch3 id=\"key-components-of-the-guard-dac-pipeline\" tabindex=\"-1\"\u003eKey components of the GUARD DaC pipeline \u003ca href=\"#key-components-of-the-guard-dac-pipeline\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e1. Detections stored in JSON format in a GitLab project\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eGitLab uses the JSON format for our threat detections. The template includes essential information such as SIEM query logic, detection title, and description along with runbook page link, MITRE tactic and technique related to the detection, and other necessary details.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Initiating merge requests\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen a GitLab team member intends to create a new threat detection, update an existing one, or delete a current detection, they initiate the process by submitting a merge request (MR) in the DaC project containing the detection JSON template. Creating the MR automatically triggers a CI/CD pipeline.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3. Automated validation with CI/CD jobs\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eEach MR contains a number of automated checks via GitLab CI/CD:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eQuery format validation queries SIEM API to ensure detection query is valid\u003c/li\u003e\n\u003cli\u003eJSON Detection fields validation validates all required fields are present, and are in the correct format\u003c/li\u003e\n\u003cli\u003eNew detections and detection modification trigger a number of SIEM API calls to ensure the detection does not have any errors and that no issues will be introduced into our production detection rules\u003c/li\u003e\n\u003cli\u003eDetection deletion MRs trigger the pipeline to issue a SIEM API query to ensure the detection to be deleted is still active and can be deleted\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e4. Peer review and approval\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen a detection MR job completes successfully, a peer review is required to review and confirm the MR meets required quality and content standards before the detection MR can be merged. \u003ca href=\"https://docs.gitlab.com/ee/user/project/merge_requests/approvals/rules.html\"\u003eMerge request approval rules\u003c/a\u003e are used to trigger the peer review process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e5. Merge and final deployment\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAfter the MR is approved, it is merged into the main branch. As part of the CI/CD pipeline, an automated job executes a SIEM API command in order to perform two tasks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate the new detection or update/delete the existing detection if needed.\u003c/li\u003e\n\u003cli\u003eExtract the MITRE ATT\u0026amp;CK tactic and technique information related to the alert from the JSON files and transmit these details to a lookup table within the SIEM. This lookup table plays an important role in mapping our alerts to MITRE tactics and techniques, helping us improve our threat analysis and identify gaps in our detection capabilities in alignment with the MITRE framework.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The necessary credentials for these actions are securely stored in \u003ca href=\"https://docs.gitlab.com/ee/ci/variables/\"\u003eCI/CD variables\u003c/a\u003e to ensure the process remains confidential and secure.\u003c/p\u003e\n\u003cp\u003eBelow is a template GitLab CI/CD \u003ccode\u003egitlab-ci.yml\u003c/code\u003e configuration file for a DaC pipeline:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n# --------------------------------------------------------------------------- #\n# GitLab CI/CD Pipeline for SIEM Detection Management\n# --------------------------------------------------------------------------- #\n\nimage: python:3.12\n\n# --------------------------------------------------------------------------- #\n# Global Configuration\n# --------------------------------------------------------------------------- #\n\nbefore_script:\n  - apt-get update \u0026amp;\u0026amp; apt-get install -y jq\n  - pip install --upgrade pip\n  - pip install -r requirements.txt\n\n# --------------------------------------------------------------------------- #\n\nstages:\n  - fetch\n  - test\n  - process\n  - upload\n\n# --------------------------------------------------------------------------- #\n# Fetch Stage\n# --------------------------------------------------------------------------- #\n\nfetch_changed_files:\n  stage: fetch\n  Script:\n    - echo \u0026#34;Fetching changed files...\u0026#34;\n    - git branch\n    - git fetch origin $CI_DEFAULT_BRANCH:$CI_DEFAULT_BRANCH --depth 2000\n    - |\n      if [[ \u0026#34;$CI_COMMIT_BRANCH\u0026#34; == \u0026#34;$CI_DEFAULT_BRANCH\u0026#34; ]]; then\n        git diff --name-status HEAD^1...HEAD \u0026gt; changed-files-temp.txt\n      else\n        git fetch origin $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH --depth 2000\n        git diff --name-status ${CI_DEFAULT_BRANCH}...${CI_COMMIT_SHA} \u0026gt; changed-files-temp.txt\n      fi\n    - grep -E \u0026#39;\\.json$\u0026#39; changed-files-temp.txt \u0026gt; changed-files.txt || true\n    - flake8 .\n    - pytest\n  artifacts:\n    paths:\n      - changed-files.txt\n    expose_as: \u0026#39;changed_files\u0026#39;\n\n# --------------------------------------------------------------------------- #\n# Test Stage\n# --------------------------------------------------------------------------- #\n\nflake8:\n  stage: test\n  script:\n    - echo \u0026#34;Running Flake8 for linting...\u0026#34;\n    - flake8 .\n\npytest:\n  stage: test\n  script:\n    - echo \u0026#34;Running Pytest for unit tests...\u0026#34;\n    - pytest\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\n# --------------------------------------------------------------------------- #\n# Process Stage\n# --------------------------------------------------------------------------- #\n\nprocess_files:\n  stage: process\n  script:\n    - echo \u0026#34;Processing changed files...\u0026#34;\n    - git clone --depth 2000 --branch $CI_DEFAULT_BRANCH $CI_REPOSITORY_URL\n    - mkdir -p modified_rules delete_file new_file\n    - python3 move-files.py -x changed-files.txt\n    - python3 check-alerts-format.py\n  artifacts:\n    paths:\n      - modified_rules\n      - delete_file\n      - new_file\n# --------------------------------------------------------------------------- #\n# Upload Stage\n# --------------------------------------------------------------------------- #\n\nupdate_rules:\n  stage: upload\n  script:\n    - echo \u0026#34;Uploading updated rules and lookup tables...\u0026#34;\n    - git fetch origin $CI_DEFAULT_BRANCH:$CI_DEFAULT_BRANCH --depth 2000\n    - git clone --depth 2000 --branch $CI_DEFAULT_BRANCH $CI_REPOSITORY_URL \n    - python3 update-rules.py\n    - python3 update-exceptions.py\n    - python3 create_ttps_layers.py\n  rules:\n    - if: $CI_COMMIT_BRANCH == \u0026#34;main\u0026#34; \u0026amp;\u0026amp; $CI_PIPELINE_SOURCE != \u0026#34;schedule\u0026#34;\n      changes:\n        - detections/**/*\n        - exceptions/**/*\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe diagram below illustrates the workflow of the CI/CD process described above.\u003c/p\u003e\n\u003cp\u003egraph TD;\n    fetch[Fetch Stage: Identify Changed Files] --\u0026gt; test[Test Stage: Run Linting and Tests];\n    test --\u0026gt; process[Process Stage: Categorize Files];\n    process --\u0026gt; upload[Upload Stage: Update Rules and Lookup Tables];\n    fetch --\u0026gt; fetch_details[Details: Filter JSON files, Output \u0026#39;changed-files.txt\u0026#39;];\n    test --\u0026gt; test_details[Details: Run Flake8 for linting, Pytest for testing];\n    process --\u0026gt; process_details[Details: Categorize into \u0026#39;modified\u0026#39;, \u0026#39;new\u0026#39;, \u0026#39;deleted\u0026#39;, Prepare for upload];\n    upload --\u0026gt; upload_details[Details: Update repo, Update detections in SIEM and SIEM lookup table];\u003c/p\u003e\u003ch2 id=\"benefits-and-outcomes\" tabindex=\"-1\"\u003eBenefits and outcomes \u003ca href=\"#benefits-and-outcomes\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAutomating our detections lifecycle through a DaC CI/CD-powered workflow introduces numerous benefits to our threat detection deployment process:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAutomation: Automating the creation and validation of SIEM detections reduces manual errors and saves time.\u003c/li\u003e\n\u003cli\u003eEnhanced security: The CI-driven workflow enforces a \u0026#34;least privilege\u0026#34; policy, ensuring consistency, peer reviews, and quality standards for creating, updating, or deleting threat detections.\u003c/li\u003e\n\u003cli\u003eEfficiency: The standardized JSON detection format and automated creation expedite the deployment process.\u003c/li\u003e\n\u003cli\u003eCollaboration: The MR and review process fosters collaboration and knowledge sharing among GitLab team members.\u003c/li\u003e\n\u003cli\u003eVersion control: Treating threat detection as code abstracts the detections from the SIEM platform they are ultimately stored in. This abstraction provides a historical record of changes, facilitates collaboration, and enables rollbacks to previous configurations if issues arise.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"get-started-with-dac\" tabindex=\"-1\"\u003eGet started with DaC \u003ca href=\"#get-started-with-dac\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUsing GitLab CI/CD and a \u0026#34;least privilege\u0026#34; policy has made our SIEM detection and alert management easier and more secure. Automation has improved efficiency and reduced risks, providing a helpful example for others wanting to improve their security and compliance. You can try this tutorial by signing up for a \u003ca href=\"https://about.gitlab.com/free-trial/\"\u003efree 60-day trial of GitLab Ultimate\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-01-29T00:00:00Z",
  "modifiedTime": null
}
