{
  "id": "40991aaf-6515-4060-baa2-a8f53661d1d6",
  "title": "Migrating our component library to the Material Button",
  "link": "https://buffer.com/resources/migrating-our-component-library-to-the-material-button/",
  "description": "How we converted our Button styling to a Material Button component. This post is an overview on migrating our component library.",
  "author": "Joe Birch",
  "published": "Fri, 14 Feb 2020 15:52:40 GMT",
  "source": "https://buffer.com/resources/overflow/rss/",
  "categories": [
    "Overflow"
  ],
  "byline": "Joe Birch",
  "length": 4033,
  "excerpt": "How we converted our Button styling to a Material Button component. This post is an overview on migrating our component library.",
  "siteName": "Buffer: All-you-need social media toolkit for small businesses",
  "favicon": "https://buffer.com/static/icons/apple-touch-icon.png",
  "text": "Header Photo by Pearse O’Halloran on UnsplashFor our Android clients we have a small component library which is used to shared common visual elements across the different Android applications that we work on. We recently updated our applications to the Material Components library, meaning that our component library itself needed to go through the same transition.Within this component library we have a custom button component – the button is styled to suit the design system at buffer and having this as a custom component allows us to easily toggle between the different custom attributes that it provides. The button comes in three different states:In order to achieve these states there was actually quite a bit of code – each button has it’s own selector state for both the text color and background, meaning that we ended up with something like this in our resources:When it comes to these buttons and their corresponding files, each text selector defines the text color states for each button type:We then have a similar selector but for the background of each button type. Finally, each of these button states then has a shape drawable to create the rounded corner background for the button.Whilst this works… a) there’s a lot of code here for something that in appearance doesn’t look so complex and b) this isn’t quite going to work when we migrate to use the MaterialButton component.When it comes to the MaterialButton component, the way we style the button can become a little different. Where we previously had all of the different background selectors that defined not only the background color but the shape, we can now achieve this in a centralised style.To begin with, this means that we can begin by changing our background selector so that some simple color references are used. If we want to do this in XML, then we can do this the following way:This selector works the same way as the previous, however now we’re not dealing with the different shapes within our xml file – meaning that we end up with a lot less files to represent how our button looks:For each of these color / background selectors we can then set them within our custom MaterialButton component. We set these depending on the custom attribute passed:setTextColor(ContextCompat.getColorStateList(context,         R.color.selector_light_button_text)) backgroundTintList = ContextCompat.getColorStateList(context,         R.color.selector_light_button_background)So that’s the text color and background color sorted, but what about the styling of the button? We previously had all of those different background selectors so that we could modify the shape, however, the styling for the MaterialButton allows us to achieve this directly through the Widget.MaterialComponents.Button style.To make use of this we’re going to create our own style, RoundedButtonStyle, and define some properties for the shapeAppearance attribute:You’ll notice here that for each corner we are defining a cornerFamily attribute, this defines how the corner of the button is rendered – currently this can be either cut or rounded. We won’t get too much into this here, but rounded gives us the same rounded corner effect that we previously had in place – just with much less code. We then use the cornerSize attribute to define the radius used for the rounded corner.Once we set the style for our button, our button has the intended look and feel, now with the consistency of the rest of our application with the use of the material component library.In this post we’ve taken a quick look at how we can take our existing Button styling and convert it to a Material Button component. Now with this in place, we have greater consistency throughout our app when it comes to buttons ? Have you worked with something similar recently or looking to make the jump to material components also? Feel free to reach out in the comments below if so ?Try Buffer for free140,000+ small businesses like yours use Buffer to build their brand on social media every monthGet started now",
  "image": "https://buffer.com/resources/content/images/wp-content/uploads/2020/02/pearse-o-halloran-mrbDuwF9gqk-unsplash.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eHeader Photo by \u003ca href=\"https://unsplash.com/@pearseoh?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\"\u003ePearse O’Halloran\u003c/a\u003e on \u003ca href=\"https://unsplash.com/s/photos/button?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\"\u003eUnsplash\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFor our Android clients we have a \u003ca href=\"https://github.com/bufferapp/android-components\"\u003esmall component library\u003c/a\u003e which is used to shared common visual elements across the different Android applications that we work on. We recently updated our applications to the Material Components library, meaning that our component library itself needed to go through the same transition.\u003c/p\u003e\u003cp\u003eWithin this component library we have a custom button component – the button is styled to suit the design system at buffer and having this as a custom component allows us to easily toggle between the different custom attributes that it provides. The button comes in three different states:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/buttons-1024x699.png\" alt=\"\" loading=\"lazy\" width=\"1024\" height=\"699\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/buttons-1024x699.png 600w, https://buffer.com/resources/content/images/size/w1000/wp-content/uploads/2020/02/buttons-1024x699.png 1000w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/buttons-1024x699.png 1024w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eIn order to achieve these states there was actually quite a bit of code – each button has it’s own selector state for both the text color and background, meaning that we ended up with something like this in our resources:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.46.48.png\" alt=\"\" loading=\"lazy\" width=\"769\" height=\"722\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.46.48.png 600w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.46.48.png 769w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eWhen it comes to these buttons and their corresponding files, each text selector defines the text color states for each button type:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.47.27-1024x176.png\" alt=\"\" loading=\"lazy\" width=\"1024\" height=\"176\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.47.27-1024x176.png 600w, https://buffer.com/resources/content/images/size/w1000/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.47.27-1024x176.png 1000w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.47.27-1024x176.png 1024w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eWe then have a similar selector but for the \u003ca href=\"https://github.com/bufferapp/android-components/blob/aa27cf48c3273c925e8b5efff0711120ab9f9591/app/src/main/res/drawable/button_bfr_round_light.xml\"\u003ebackground of each button type\u003c/a\u003e. Finally, each of these button states then has a shape drawable to create the rounded corner background for the button.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.49.03.png\" alt=\"\" loading=\"lazy\" width=\"955\" height=\"235\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.49.03.png 600w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.49.03.png 955w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eWhilst this works… \u003cstrong\u003ea)\u003c/strong\u003e there’s a lot of code here for something that in appearance doesn’t look so complex and \u003cstrong\u003eb)\u003c/strong\u003e this isn’t quite going to work when we migrate to use the MaterialButton component.\u003c/p\u003e\u003chr/\u003e\u003cp\u003eWhen it comes to the MaterialButton component, the way we style the button can become a little different. Where we previously had all of the different background selectors that defined not only the background color but the shape, we can now achieve this in a centralised style.\u003c/p\u003e\u003cp\u003eTo begin with, this means that we can begin by changing our background selector so that some simple color references are used. If we want to do this in XML, then we can do this \u003ca href=\"https://github.com/bufferapp/android-components/blob/master/app/src/main/res/color/selector_light_button_background.xml\"\u003ethe following way\u003c/a\u003e:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.03.png\" alt=\"\" loading=\"lazy\" width=\"1012\" height=\"554\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.03.png 600w, https://buffer.com/resources/content/images/size/w1000/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.03.png 1000w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.03.png 1012w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eThis selector works the same way as the previous, however now we’re not dealing with the different shapes within our xml file – meaning that we end up with a lot less files to represent how our button looks:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.49.29.png\" alt=\"\" loading=\"lazy\" width=\"719\" height=\"308\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.49.29.png 600w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-13-at-05.49.29.png 719w\"/\u003e\u003c/figure\u003e\u003cp\u003eFor each of these color / background selectors we can then set them within our custom MaterialButton component. We set these depending on the \u003ca href=\"https://github.com/bufferapp/android-components/blob/master/app/src/main/java/org/buffer/android/components/RoundedButton.kt#L22\"\u003ecustom attribute passed\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003esetTextColor(ContextCompat.getColorStateList(context,\n        R.color.selector_light_button_text))\nbackgroundTintList = ContextCompat.getColorStateList(context,\n        R.color.selector_light_button_background)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo that’s the text color and background color sorted, but what about the styling of the button? We previously had all of those different background selectors so that we could modify the shape, however, the styling for the MaterialButton allows us to achieve this directly through the \u003cstrong\u003eWidget.MaterialComponents.Button\u003c/strong\u003e style.\u003c/p\u003e\u003cp\u003eTo make use of this we’re going to \u003ca href=\"https://github.com/bufferapp/android-components/blob/master/app/src/main/res/values/styles.xml\"\u003ecreate our own style\u003c/a\u003e, \u003cstrong\u003eRoundedButtonStyle\u003c/strong\u003e, and define some properties for the \u003cstrong\u003eshapeAppearance\u003c/strong\u003e attribute:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.55-1024x451.png\" alt=\"\" loading=\"lazy\" width=\"1024\" height=\"451\" srcset=\"https://buffer.com/resources/content/images/size/w600/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.55-1024x451.png 600w, https://buffer.com/resources/content/images/size/w1000/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.55-1024x451.png 1000w, https://buffer.com/resources/content/images/wp-content/uploads/2020/02/Screenshot-2020-02-14-at-15.51.55-1024x451.png 1024w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eYou’ll notice here that for each corner we are defining a cornerFamily attribute, this defines how the corner of the button is rendered – currently this can be either \u003cstrong\u003ecut\u003c/strong\u003e or \u003cstrong\u003erounded\u003c/strong\u003e. We won’t get too much into this here, but rounded gives us the same rounded corner effect that we previously had in place – just with much less code. We then use the \u003cstrong\u003ecornerSize\u003c/strong\u003e attribute to define the radius used for the rounded corner.\u003c/p\u003e\u003cp\u003eOnce we set the style for our button, our button has the intended look and feel, now with the consistency of the rest of our application with the use of the material component library.\u003c/p\u003e\u003chr/\u003e\u003cp\u003eIn this post we’ve taken a quick look at how we can take our existing Button styling and convert it to a Material Button component. Now with this in place, we have greater consistency throughout our app when it comes to buttons ? Have you worked with something similar recently or looking to make the jump to material components also? Feel free to reach out in the comments below if so ?\u003c/p\u003e\u003c/div\u003e\u003cdiv id=\"midpost-cta\"\u003e\u003ch3\u003eTry Buffer for free\u003c/h3\u003e\u003cp\u003e140,000+ small businesses like yours use Buffer to build their brand on social media every month\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://login.buffer.com/signup?product=buffer\u0026amp;plan=free\u0026amp;cycle=year\u0026amp;cta=bufferBlogLibrary-post-midCTA-signup-1\" role=\"button\"\u003eGet started now\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
