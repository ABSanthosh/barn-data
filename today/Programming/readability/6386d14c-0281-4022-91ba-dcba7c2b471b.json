{
  "id": "6386d14c-0281-4022-91ba-dcba7c2b471b",
  "title": "How to use GitHub Copilot: What it can do and real-world examples",
  "link": "https://github.blog/developer-skills/github/what-can-github-copilot-do-examples/",
  "description": "How Copilot can generate unit tests, refactor code, create documentation, perform multi-file edits, and much more. The post How to use GitHub Copilot: What it can do and real-world examples appeared first on The GitHub Blog.",
  "author": "Dylan Birtolo",
  "published": "Wed, 08 Jan 2025 17:00:53 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Developer skills",
    "GitHub",
    "GitHub Copilot",
    "GitHub Copilot Chat",
    "GitHub Copilot Free"
  ],
  "byline": "Dylan Birtolo",
  "length": 13000,
  "excerpt": "How Copilot can generate unit tests, refactor code, create documentation, perform multi-file edits, and much more.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Since the free version of GitHub Copilot launched last month, you‚Äôve asked lots of questions, like ‚ÄúIs it free for everyone?‚Äù (Yes!), ‚ÄúCan Copilot make changes to multiple files?‚Äù (Yes again!), ‚ÄúWhat‚Äôs the name of Copilot‚Äôs mascot?‚Äù (It doesn‚Äôt have a name‚Ä¶yet.), and most of all: ‚ÄúWhat can GitHub Copilot actually do?‚Äù The short answer is a lot. The longer answer covers a bunch of different use cases, workflows, coding languages, and much more, so it‚Äôs a good thing we have some space to talk about it! We‚Äôll update this list as GitHub Copilot continues to evolve and we add new, awesome features like we‚Äôve been doing since we first launched it a few years ago. Ready? Let‚Äôs go. What is GitHub Copilot? GitHub Copilot is a generative AI tool that functions as a coding assistant to help you write code faster and so much more. One of the main advantages of Copilot is it draws context from your coding environment, open tabs, and your GitHub projects (including your pull requests, issues, discussions, and codebase). For example, you can ask Copilot Chat to provide a summary of code in a given repository or explain how pieces of code in your app work. In either case, it will provide an answer with the contextual knowledge of your project. You can also ask Copilot to help document, debug, and refactor code‚Äîall without the need to context switch or copy over large sections of code to another application. GitHub Copilot is available for anyone to use with GitHub Copilot Free. If you want more advanced Copilot capabilities, we offer Pro, Business, and Enterprise tiers, too. With these options, you can pick the solution that works best for you. For your reference, we‚Äôve included a section on the different access tiers. How are developers using GitHub Copilot? As GitHub Copilot capabilities continue to grow, developers are using it in a number of ways including: Getting code completion suggestions while they type in the IDE Asking Copilot Chat to explain how a section of code works Generating tests and helping to fix code that fails a given test Migrating code to a different language Refactoring existing code Explaining code you‚Äôre working with Using Copilot Extensions to work with other applications and tools in your tech stack (you can even build a custom one) Generating documentation to describe a set of changes in a pull request What GitHub Copilot can do (and how to use it) So, how can GitHub Copilot help you in your projects? Let‚Äôs jump in. What‚Äôs new in GitHub Copilot This is a living document, so we‚Äôll update this section with the latest and greatest from Copilot as it continues to evolve. Choose the AI model that powers GitHub Copilot With GitHub Copilot, you can choose the model you want to work with. In Copilot Free you have access to Anthropic‚Äôs Claude 3.5 Sonnet and OpenAI‚Äôs GPT-4o models. And if you use one of the Copilot paid tiers, you‚Äôll have more models to choose from to customize your experience. In-line code completion When coding, GitHub Copilot can offer coding suggestions directly in your coding environment. It can both provide code to complete what you‚Äôre currently working on or respond to natural language prompts to generate code. Developers often use this for generating boilerplate code and common coding snippets‚Äîsuch as the getter and setter functions of variables. But Copilot isn‚Äôt limited to simple and repetitive code completion. Using Copilot Chat, you can tell it what you want it to do by describing the task in plain language or the /new slash command, it will then provide some code suggestions to help you get started. üí° Pro tip: Getting the most out of this feature requires you to craft good prompts.You can learn more about effective prompting with GitHub Copilot in our documentation on prompt engineering. https://github.blog/wp-content/uploads/2025/01/2024-12-10-CopilotUI-Completion-H-Captioned.mp4#t=0.001 Generate unit tests Writing unit tests requires knowing the limits, edge cases, and what might cause failures in your code. Since Copilot knows about your project on GitHub and what you‚Äôre working on in your IDE, it can create unit tests to help you. To do this, select a given block of code. Then either right-click and use the context menu or the /tests slash command. Copilot will then analyze your code and try to provide suggestions for valid inputs, edge cases, and invalid inputs. For additional guidance on using GitHub Copilot to create unit tests, check out this blog about creating unit tests and take a look at this docs page of sample prompts. Explain and document existing code You can tap into GitHub Copilot‚Äôs knowledge of coding patterns to ask it to help explain how a block of code works. This is particularly useful if you‚Äôre onboarding to a new project, especially if it‚Äôs in a language you don‚Äôt have a lot of experience in. To use this feature, select some code and use either the context menu or the /explain slash command. Copilot will then explain what the code is doing‚Äîand then generate documentation on it with another prompt. This isn‚Äôt just useful for onboarding or making sure you understand a piece of code. You can also use this as a building block for other tasks such as helping to translate code from one language to another. For some sample prompts, check out our docs on explaining legacy code and on explaining complex logic. https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_ExplainingComplexLogic_1920x1080_Captions.mp4#t=0.001 Upgrading a framework you‚Äôre working with If you‚Äôre tasked with upgrading a codebase to a new version of a framework, it‚Äôs not as easy as recompiling the project in the new version. That often results in several errors that you need to track down and resolve. GitHub Copilot can help you here. You can just ask why your code is producing errors. From there, you can have Copilot provide suggestions on how to fix your code to make it compliant with the new version of the framework. Then ask Copilot for suggestions on how to update the code to fit in a new framework. Explain a codebase (or a repository on GitHub) Trying to understand a new codebase? Ask Copilot what a repository does or to summarize key components and it will provide a summary. To get started, click the Copilot icon in the top-right corner of your screen and ask a question. You can also prompt Copilot to debug your workflows with GitHub Actions. If you want to focus Copilot‚Äôs attention, you can highlight individual files or folders in a repository, too. üí° Pro tip: Use Copilot as a chat assistant directly on github.com with a full, natural-language interface. Translate code to a new language Let‚Äôs say you need to migrate legacy software from COBOL to a more modern coding language. GitHub Copilot can help you with this, even if you don‚Äôt have a lot of experience with the source language. First, ask it to explain what some code is doing, and then use that explanation to create code in the destination language that performs the same functionality. You can also ask it to provide suggestions on how to write the code in the destination language. Our documentation on explaining legacy code includes a sample prompt and walks through the first portion of this scenario. Generate documentation Closely tied to the idea of explaining how code works, you can ask GitHub Copilot to generate documentation for sections of code or entire projects. This can be incredibly useful, and a huge time saver. In Copilot Free, you can also ask it to provide a summary of given code blocks within your IDE by using the slash command /docs. In the paid versions, you can also generate documentation from issues and pull requests. One real-world example of this involves legacy COBOL-based applications. You can ask Copilot to help provide the missing docs for a given project. (Visit documenting legacy code to get started). Debugging code We‚Äôve all been there‚Äîyou have a section of code that‚Äôs spitting out an error and you aren‚Äôt sure how to fix it. Sometimes you try to implement a fix, and then you get more errors (classic ü§¶). To get help from GitHub Copilot, highlight the code in question and either right-click and select ‚ÄúCopilot‚Äù or use the /fix slash command in Copilot Chat. You can also ask Copilot Chat why something isn‚Äôt working to start a conversation about what the problem might be. Copilot works by analyzing your code and drawing upon its training data. It also looks at the context of your larger project to identify patterns that might be causing the problem. To learn more, you can find a sample prompt and tutorial on how to debug invalid JSON in our docs. https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_DebuggingInvalidJSON_1920x1080_Captions.mp4#t=0.001 Refactoring code Want to make your code cleaner? Perform better? Same. This is a place where GitHub Copilot can help‚Äîand I‚Äôm speaking from experience. Just highlight a specific code block (or point Copilot at a specific file with the chat variable command #file) and ask Copilot for suggestions to improve your code. Copilot will then search for specific patterns and ways to refactor your code. For example, it might recommend breaking up a long method with multiple tasks or avoiding nested logic checks to improve readability or performance. You can quickly review and accept suggestions to refactor your code‚Äîall right in your IDE. Check out our documentation on using GitHub Copilot for refactoring your code for some guidance on how to take advantage of this functionality. For some sample prompts, see these pages on improving code readability and optimizing performance. Multi-file editing with Copilot Edits Copilot Edits provide the functionality for you to edit multiple files at once. This means you don‚Äôt need to manually open each file and insert the changes‚Äîwhich is a huge time saver. It also helps reduce the possibility of making mistakes when making manual changes. You can access this feature through the Copilot Chat menu. https://github.blog/wp-content/uploads/2025/01/copilot-multi-edit-burn-in.mp4#t=0.001 Once you select Open Copilot Edits, prompt Copilot with the changes you want to make. It will then determine which files in your working set need to be updated based on your prompt and provide a description of the changes it recommends for each file. You can then review the changes and individually accept or reject them. üí° Pro tip: Right now, this feature is only available in VS Code. Learn more about multi-file editing in our documentation on Copilot Edits \u003e Customize GitHub Copilot to meet your needs When using GitHub Copilot, you can create a file that will provide custom instructions that will be included in all Copilot queries. This lets you reuse some of the same context without needing to manually enter it in each prompt. When creating prompts, offering more details helps Copilot provide more relevant responses (e.g. related to the tools you use or how your team works). Including some of the same information in each prompt once you learn what works can be very helpful. By placing these persistent details in a file, you can tailor the way GitHub Copilot works to deliver higher quality responses. For more information, see our documentation on adding custom instructions for Copilot. üí° Pro tip: Right now, this is only available with Copilot Chat through VS Code and Visual Studio. Breaking down the different GitHub Copilot tiers from free to enterprise Currently, everyone has access to the GitHub Copilot Free tier. You can start using GitHub Copilot Free in VS Code by authorizing the extension or through github.com by clicking the Copilot icon in the top right-hand side of the interface. For more information, see this video about how to set up GitHub Copilot Free. We also offer additional tiers with more capabilities via Pro, Business, and Enterprise with more advanced capabilities, depending on your needs. Find out which Copilot tier works best for you \u003e Additional resources to explore We hope this answers your questions about Copilot‚Äôs capabilities and inspires you to give it a try in your next project. Here‚Äôs a recap of the resources we shared throughout this article:. GitHub Copilot plans: This page offers an overview of GitHub Copilot GitHub Copilot docs: The main docs page for GitHub Copilot Setting up GitHub Copilot: Detailed instructions on how to go through the necessary setup steps to start using GitHub Copilot GitHub Copilot Chat Cookbook prompts: Example prompts showcasing how to handle specific scenarios using GitHub Copilot Chat Written by Dylan Birtolo is a senior content writer at GitHub, where he works on sharing all the good things that GitHub has to offer. He's been a technical writer for almost 20 years, a large portion of which was working on various teams across Microsoft. In his off time, he works with animals, plays a lot of games, and professionally jousts.",
  "image": "https://github.blog/wp-content/uploads/2024/09/copilot-header-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eSince the \u003ca href=\"https://github.com/features/copilot?utm_source=whatcancopilotdo\u0026amp;utm_medium=blog\u0026amp;utm_campaign=copilot_free_jan_\u0026amp;utm_content=topgraf\"\u003efree version of GitHub Copilot\u003c/a\u003e launched last month, you‚Äôve asked lots of questions, like ‚ÄúIs it free for everyone?‚Äù (Yes!), ‚ÄúCan Copilot make changes to multiple files?‚Äù (Yes again!), ‚ÄúWhat‚Äôs the name of Copilot‚Äôs mascot?‚Äù (It doesn‚Äôt have a name‚Ä¶yet.), and most of all: ‚ÄúWhat can GitHub Copilot \u003cem\u003eactually\u003c/em\u003e do?‚Äù\u003c/p\u003e\n\u003cp\u003eThe short answer is a lot. The longer answer covers a bunch of different use cases, workflows, coding languages, and much more, so it‚Äôs a good thing we have some space to talk about it!\u003c/p\u003e\n\u003cp\u003eWe‚Äôll update this list as GitHub Copilot continues to evolve and we add new, awesome features like we‚Äôve been doing since we first launched it a few years ago.\u003c/p\u003e\n\u003cp\u003eReady? Let‚Äôs go.\u003c/p\u003e\n\n\u003ch2 id=\"what-is-github-copilot\" id=\"what-is-github-copilot\"\u003eWhat is GitHub Copilot?\u003ca href=\"#what-is-github-copilot\" aria-label=\"What is GitHub Copilot?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Copilot is a generative AI tool that functions as a coding assistant to help you write code faster and so much more.\u003c/p\u003e\n\u003cp\u003eOne of the main advantages of Copilot is it draws context from your coding environment, open tabs, and your GitHub projects (including your pull requests, issues, discussions, and codebase). For example, you can ask Copilot Chat to provide a summary of code in a given repository or explain how pieces of code in your app work. In either case, it will provide an answer with the contextual knowledge of your project. You can also ask Copilot to help document, debug, and refactor code‚Äîall without the need to context switch or copy over large sections of code to another application.\u003c/p\u003e\n\u003cp\u003eGitHub Copilot is available for anyone to use with GitHub Copilot Free. If you want more advanced Copilot capabilities, we offer Pro, Business, and Enterprise tiers, too. With these options, you can pick the solution that works best for you. For your reference, we‚Äôve included a \u003ca href=\"#breaking-down-the-different-github-copilot-tiers-from-free-to-enterprise\"\u003esection on the different access tiers\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"how-are-developers-using-github-copilot\" id=\"how-are-developers-using-github-copilot\"\u003eHow are developers using GitHub Copilot?\u003ca href=\"#how-are-developers-using-github-copilot\" aria-label=\"How are developers using GitHub Copilot?\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAs GitHub Copilot capabilities continue to grow, developers are using it in a number of ways including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGetting code completion suggestions while they type in the IDE\u003c/li\u003e\n\u003cli\u003eAsking Copilot Chat to explain how a section of code works\u003c/li\u003e\n\u003cli\u003eGenerating tests and helping to fix code that fails a given test\u003c/li\u003e\n\u003cli\u003eMigrating code to a different language\u003c/li\u003e\n\u003cli\u003eRefactoring existing code\u003c/li\u003e\n\u003cli\u003eExplaining code you‚Äôre working with\u003c/li\u003e\n\u003cli\u003eUsing Copilot Extensions to work with other applications and tools in your tech stack (you can even build a custom one)\u003c/li\u003e\n\u003cli\u003eGenerating documentation to describe a set of changes in a pull request\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"what-github-copilot-can-do-and-how-to-use-it\" id=\"what-github-copilot-can-do-and-how-to-use-it\"\u003eWhat GitHub Copilot can do (and how to use it)\u003ca href=\"#what-github-copilot-can-do-and-how-to-use-it\" aria-label=\"What GitHub Copilot can do (and how to use it)\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSo, how can GitHub Copilot help you in your projects? Let‚Äôs jump in.\u003c/p\u003e\n\u003ch3 id=\"whats-new-in-github-copilot\" id=\"whats-new-in-github-copilot\"\u003eWhat‚Äôs new in GitHub Copilot\u003ca href=\"#whats-new-in-github-copilot\" aria-label=\"What‚Äôs new in GitHub Copilot\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis is a living document, so we‚Äôll update this section with the latest and greatest from Copilot as it continues to evolve.\u003c/p\u003e\n\u003ch3 id=\"choose-the-ai-model-that-powers-github-copilot\" id=\"choose-the-ai-model-that-powers-github-copilot\"\u003eChoose the AI model that powers GitHub Copilot\u003ca href=\"#choose-the-ai-model-that-powers-github-copilot\" aria-label=\"Choose the AI model that powers GitHub Copilot\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWith GitHub Copilot, you can choose the model you want to work with. In Copilot Free you have access to Anthropic‚Äôs Claude 3.5 Sonnet and OpenAI‚Äôs GPT-4o models. And if you use one of the Copilot paid tiers, you‚Äôll have more models to choose from to customize your experience.\u003c/p\u003e\n\u003ch3 id=\"in-line-code-completion\" id=\"in-line-code-completion\"\u003eIn-line code completion\u003ca href=\"#in-line-code-completion\" aria-label=\"In-line code completion\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhen coding, GitHub Copilot can offer coding suggestions directly in your coding environment. It can both provide code to complete what you‚Äôre currently working on or respond to natural language prompts to generate code. Developers often use this for generating boilerplate code and common coding snippets‚Äîsuch as the getter and setter functions of variables.\u003c/p\u003e\n\u003cp\u003eBut Copilot isn‚Äôt limited to simple and repetitive code completion. Using Copilot Chat, you can tell it what you want it to do by describing the task in plain language or the \u003ccode\u003e/new\u003c/code\u003e slash command, it will then provide some code suggestions to help you get started.\u003c/p\u003e\n\u003cp\u003eüí° \u003cstrong\u003ePro tip:\u003c/strong\u003e Getting the most out of this feature requires you to craft good prompts.You can learn more about effective prompting with GitHub Copilot in \u003ca href=\"https://docs.github.com/copilot/using-github-copilot/prompt-engineering-for-github-copilot\"\u003eour documentation on prompt engineering\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\n\u003cvideo id=\"video-81844-1\" width=\"2560\" height=\"1440\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/01/2024-12-10-CopilotUI-Completion-H-Captioned.mp4#t=0.001?_=1\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/01/2024-12-10-CopilotUI-Completion-H-Captioned.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/01/2024-12-10-CopilotUI-Completion-H-Captioned.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch3 id=\"generate-unit-tests\" id=\"generate-unit-tests\"\u003eGenerate unit tests\u003ca href=\"#generate-unit-tests\" aria-label=\"Generate unit tests\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWriting unit tests requires knowing the limits, edge cases, and what might cause failures in your code. Since Copilot knows about your project on GitHub and what you‚Äôre working on in your IDE, it can create unit tests to help you.\u003c/p\u003e\n\u003cp\u003eTo do this, select a given block of code. Then either right-click and use the context menu or the \u003ccode\u003e/tests\u003c/code\u003e slash command. Copilot will then analyze your code and try to provide suggestions for valid inputs, edge cases, and invalid inputs.\u003c/p\u003e\n\u003cp\u003eFor additional guidance on using GitHub Copilot to create unit tests, check out this \u003ca href=\"https://github.blog/ai-and-ml/how-to-generate-unit-tests-with-github-copilot-tips-and-examples/\"\u003eblog about creating unit tests\u003c/a\u003e and take a look at \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/testing-code/generate-unit-tests\"\u003ethis docs page of sample prompts\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/smdBqEu7fx4?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003ch3 id=\"explain-and-document-existing-code\" id=\"explain-and-document-existing-code\"\u003eExplain and document existing code\u003ca href=\"#explain-and-document-existing-code\" aria-label=\"Explain and document existing code\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYou can tap into GitHub Copilot‚Äôs knowledge of coding patterns to ask it to help explain how a block of code works. This is particularly useful if you‚Äôre onboarding to a new project, especially if it‚Äôs in a language you don‚Äôt have a lot of experience in.\u003c/p\u003e\n\u003cp\u003eTo use this feature, select some code and use either the context menu or the \u003ccode\u003e/explain\u003c/code\u003e slash command. Copilot will then explain what the code is doing‚Äîand then generate documentation on it with another prompt.\u003c/p\u003e\n\u003cp\u003eThis isn‚Äôt just useful for onboarding or making sure you understand a piece of code. You can also use this as a building block for other tasks such as helping to translate code from one language to another.\u003c/p\u003e\n\u003cp\u003eFor some sample prompts, check out our docs on \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/documenting-code/explaining-legacy-code\"\u003eexplaining legacy code\u003c/a\u003e and on \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/documenting-code/explaining-complex-algorithms-or-logic\"\u003eexplaining complex logic\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-81844-2\" width=\"1920\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_ExplainingComplexLogic_1920x1080_Captions.mp4#t=0.001?_=2\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_ExplainingComplexLogic_1920x1080_Captions.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_ExplainingComplexLogic_1920x1080_Captions.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch3 id=\"upgrading-a-framework-youre-working-with\" id=\"upgrading-a-framework-youre-working-with\"\u003eUpgrading a framework you‚Äôre working with\u003ca href=\"#upgrading-a-framework-youre-working-with\" aria-label=\"Upgrading a framework you‚Äôre working with\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIf you‚Äôre tasked with upgrading a codebase to a new version of a framework, it‚Äôs not as easy as recompiling the project in the new version. That often results in several errors that you need to track down and resolve. GitHub Copilot can help you here.\u003c/p\u003e\n\u003cp\u003eYou can just ask why your code is producing errors. From there, you can  have Copilot provide suggestions on how to fix your code to make it compliant with the new version of the framework. Then ask Copilot for suggestions on how to update the code to fit in a new framework.\u003c/p\u003e\n\n\u003ch3 id=\"explain-a-codebase-or-a-repository-on-github\" id=\"explain-a-codebase-or-a-repository-on-github\"\u003eExplain a codebase (or a repository on GitHub)\u003ca href=\"#explain-a-codebase-or-a-repository-on-github\" aria-label=\"Explain a codebase (or a repository on GitHub)\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTrying to understand a new codebase? Ask Copilot what a repository does or to summarize key components and it will provide a summary. To get started, click the Copilot icon in the top-right corner of your screen and ask a question. You can also prompt Copilot to debug your workflows with GitHub Actions. If you want to focus Copilot‚Äôs attention, you can highlight individual files or folders in a repository, too.\u003c/p\u003e\n\u003cp\u003eüí° \u003cstrong\u003ePro tip\u003c/strong\u003e: \u003ca href=\"https://github.com/copilot/\"\u003eUse Copilot as a chat assistant directly on github.com\u003c/a\u003e with a full, natural-language interface.\u003c/p\u003e\n\u003ch3 id=\"translate-code-to-a-new-language\" id=\"translate-code-to-a-new-language\"\u003eTranslate code to a new language\u003ca href=\"#translate-code-to-a-new-language\" aria-label=\"Translate code to a new language\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet‚Äôs say you need to migrate legacy software from COBOL to a more modern coding language. GitHub Copilot can help you with this, even if you don‚Äôt have a lot of experience with the source language.\u003c/p\u003e\n\u003cp\u003eFirst, ask it to explain what some code is doing, and then use that explanation to create code in the destination language that performs the same functionality. You can also ask it to provide suggestions on how to write the code in the destination language.\u003c/p\u003e\n\u003cp\u003eOur documentation on \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/documenting-code/explaining-legacy-code\"\u003eexplaining legacy code includes a sample prompt\u003c/a\u003e and walks through the first portion of this scenario.\u003c/p\u003e\n\n\u003ch3 id=\"generate-documentation\" id=\"generate-documentation\"\u003eGenerate documentation\u003ca href=\"#generate-documentation\" aria-label=\"Generate documentation\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eClosely tied to the idea of explaining how code works, you can ask GitHub Copilot to generate documentation for sections of code or entire projects. This can be incredibly useful, and a huge time saver.\u003c/p\u003e\n\u003cp\u003eIn Copilot Free, you can also ask it to provide a summary of given code blocks within your IDE by using the slash command \u003ccode\u003e/docs\u003c/code\u003e. In the paid versions, you can also generate documentation from issues and pull requests.\u003c/p\u003e\n\u003cp\u003eOne real-world example of this involves legacy COBOL-based applications. You can ask Copilot to help provide the missing docs for a given project. (Visit \u003ca href=\"https://docs.github.com/en/copilot/example-prompts-for-github-copilot-chat/documenting-code/documenting-legacy-code\"\u003edocumenting legacy code\u003c/a\u003e to get started).\u003c/p\u003e\n\u003ch3 id=\"debugging-code\" id=\"debugging-code\"\u003eDebugging code\u003ca href=\"#debugging-code\" aria-label=\"Debugging code\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe‚Äôve all been there‚Äîyou have a section of code that‚Äôs spitting out an error and you aren‚Äôt sure how to fix it. Sometimes you try to implement a fix, and then you get more errors (classic ü§¶).\u003c/p\u003e\n\u003cp\u003eTo get help from GitHub Copilot, highlight the code in question and either right-click and select ‚ÄúCopilot‚Äù or use the \u003ccode\u003e/fix\u003c/code\u003e slash command in Copilot Chat. You can also ask Copilot Chat why something isn‚Äôt working to start a conversation about what the problem might be.\u003c/p\u003e\n\u003cp\u003eCopilot works by analyzing your code and drawing upon its training data. It also looks at the context of your larger project to identify patterns that might be causing the problem.\u003c/p\u003e\n\u003cp\u003eTo learn more, you can find \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/debugging-errors/debugging-invalid-json\"\u003ea sample prompt and tutorial on how to debug invalid JSON in our docs\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-81844-3\" width=\"1920\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_DebuggingInvalidJSON_1920x1080_Captions.mp4#t=0.001?_=3\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_DebuggingInvalidJSON_1920x1080_Captions.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/01/CopilotChatCookbook_DebuggingInvalidJSON_1920x1080_Captions.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\n\u003ch3 id=\"refactoring-code\" id=\"refactoring-code\"\u003eRefactoring code\u003ca href=\"#refactoring-code\" aria-label=\"Refactoring code\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWant to make your code cleaner? Perform better? Same. This is a place where GitHub Copilot can help‚Äîand I‚Äôm speaking from experience. Just highlight a specific code block (or point Copilot at a specific file with the chat variable command #file) and ask Copilot for suggestions to improve your code.\u003c/p\u003e\n\u003cp\u003eCopilot will then search for specific patterns and ways to refactor your code. For example, it might recommend breaking up a long method with multiple tasks or avoiding nested logic checks to improve readability or performance. You can quickly review and accept suggestions to refactor your code‚Äîall right in your IDE.\u003c/p\u003e\n\u003cp\u003eCheck out our documentation on \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/refactoring-code\"\u003eusing GitHub Copilot for refactoring your code\u003c/a\u003e for some guidance on how to take advantage of this functionality. For some sample prompts, see these pages on \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/refactoring-code/improving-code-readability-and-maintainability\"\u003eimproving code readability\u003c/a\u003e and \u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat/refactoring-code/refactoring-for-performance-optimization\"\u003eoptimizing performance\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"multi-file-editing-with-copilot-edits\" id=\"multi-file-editing-with-copilot-edits\"\u003eMulti-file editing with Copilot Edits\u003ca href=\"#multi-file-editing-with-copilot-edits\" aria-label=\"Multi-file editing with Copilot Edits\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eCopilot Edits provide the functionality for you to edit multiple files at once. This means you don‚Äôt need to manually open each file and insert the changes‚Äîwhich is a huge time saver. It also helps reduce the possibility of making mistakes when making manual changes.\u003c/p\u003e\n\u003cp\u003eYou can access this feature through the Copilot Chat menu.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-81844-4\" width=\"1920\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/01/copilot-multi-edit-burn-in.mp4#t=0.001?_=4\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/01/copilot-multi-edit-burn-in.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/01/copilot-multi-edit-burn-in.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eOnce you select \u003cstrong\u003eOpen Copilot Edits\u003c/strong\u003e, prompt Copilot with the changes you want to make. It will then determine which files in your working set need to be updated based on your prompt and provide a description of the changes it recommends for each file. You can then review the changes and individually accept or reject them.\u003c/p\u003e\n\u003cp\u003eüí° \u003cstrong\u003ePro tip:\u003c/strong\u003e Right now, this feature is only available in VS Code.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://code.visualstudio.com/docs/copilot/copilot-edits\"\u003eLearn more about multi-file editing in our documentation on Copilot Edits \u0026gt;\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"customize-github-copilot-to-meet-your-needs\" id=\"customize-github-copilot-to-meet-your-needs\"\u003eCustomize GitHub Copilot to meet your needs\u003ca href=\"#customize-github-copilot-to-meet-your-needs\" aria-label=\"Customize GitHub Copilot to meet your needs\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhen using GitHub Copilot, you can create a file that will provide custom instructions that will be included in all Copilot queries. This lets you reuse some of the same context without needing to manually enter it in each prompt.\u003c/p\u003e\n\u003cp\u003eWhen creating prompts, offering more details helps Copilot provide more relevant responses (e.g. related to the tools you use or how your team works). Including some of the same information in each prompt once you learn what works can be very helpful. By placing these persistent details in a file, you can tailor the way GitHub Copilot works to deliver higher quality responses.\u003c/p\u003e\n\u003cp\u003eFor more information, see our \u003ca href=\"https://docs.github.com/copilot/customizing-copilot/adding-custom-instructions-for-github-copilot\"\u003edocumentation on adding custom instructions for Copilot\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eüí° \u003cstrong\u003ePro tip:\u003c/strong\u003e Right now, this is only available with Copilot Chat through VS Code and Visual Studio.\u003c/p\u003e\n\u003ch2 id=\"breaking-down-the-different-github-copilot-tiers-from-free-to-enterprise\" id=\"breaking-down-the-different-github-copilot-tiers-from-free-to-enterprise\"\u003eBreaking down the different GitHub Copilot tiers from free to enterprise\u003ca href=\"#breaking-down-the-different-github-copilot-tiers-from-free-to-enterprise\" aria-label=\"Breaking down the different GitHub Copilot tiers from free to enterprise\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCurrently, everyone has access  to the GitHub Copilot Free tier. You can start using GitHub Copilot Free in VS Code by authorizing the extension or through github.com by clicking the Copilot icon in the top right-hand side of the interface.\u003c/p\u003e\n\u003cp\u003eFor more information, see this video about how to set up GitHub Copilot Free.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/dMbOh114Vd4?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003cp\u003eWe also offer additional tiers with more capabilities via Pro, Business, and Enterprise with more advanced capabilities, depending on your needs.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/features/copilot/plans?cft=copilot_li.features_copilot\u0026amp;utm_source=blog\u0026amp;utm_campaign=copilot_plans\"\u003eFind out which Copilot tier works best for you \u0026gt;\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"additional-resources-to-explore\" id=\"additional-resources-to-explore\"\u003eAdditional resources to explore\u003ca href=\"#additional-resources-to-explore\" aria-label=\"Additional resources to explore\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe hope this answers your questions about Copilot‚Äôs capabilities and inspires you to give it a try in your next project. Here‚Äôs a recap of the resources we shared throughout this article:.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/features/copilot/plans?cft=copilot_li.features_copilot?utm_source=whatcancopilotdo\u0026amp;utm_medium=blog\u0026amp;utm_campaign=copilot_free_jan_\u0026amp;utm_content=bottom\"\u003eGitHub Copilot plans\u003c/a\u003e: This page offers an overview of GitHub Copilot\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot\"\u003eGitHub Copilot docs\u003c/a\u003e: The main docs page for GitHub Copilot\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/setting-up-github-copilot/setting-up-github-copilot-for-yourself\"\u003eSetting up GitHub Copilot\u003c/a\u003e: Detailed instructions on how to go through the necessary setup steps to start using GitHub Copilot\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/example-prompts-for-github-copilot-chat\"\u003eGitHub Copilot Chat Cookbook prompts\u003c/a\u003e: Example prompts showcasing how to handle specific scenarios using GitHub Copilot Chat\u003c/li\u003e\n\u003c/ul\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/39363041?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/39363041?v=4\u0026amp;s=200\" alt=\"Dylan Birtolo\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eDylan Birtolo is a senior content writer at GitHub, where he works on sharing all the good things that GitHub has to offer. He\u0026#39;s been a technical writer for almost 20 years, a large portion of which was working on various teams across Microsoft. In his off time, he works with animals, plays a lot of games, and professionally jousts.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-01-08T17:00:53Z",
  "modifiedTime": "2025-01-09T15:33:16Z"
}
