{
  "id": "fcebc776-38c5-4c23-a1ed-0a6150fc9c49",
  "title": "Hacker, Hack Thyself",
  "link": "https://blog.codinghorror.com/hacker-hack-thyself/",
  "description": "We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the Discourse project; we endeavor to build open source software that is secure and safe for communities by default, even if",
  "author": "Jeff Atwood",
  "published": "Fri, 02 Jun 2017 08:11:16 GMT",
  "source": "https://feeds.feedburner.com/codinghorror",
  "categories": null,
  "byline": "Jeff Atwood",
  "length": 12460,
  "excerpt": "We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the Discourse [https://discourse.org] project; we endeavor to build open source software that is secure and safe for communities by default, even if there are thousands, or millions, of them out there. However, we also value portability, the ability to get your data into and out of Discourse at will. This is why Discourse, unlike othe",
  "siteName": "Coding Horror",
  "favicon": "https://blog.codinghorror.com/content/images/size/w256h256/2020/06/3cffc4b347c3587f19fe222caaac69f63b9a5e73.png",
  "text": "02 Jun 2017 We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the Discourse project; we endeavor to build open source software that is secure and safe for communities by default, even if there are thousands, or millions, of them out there. However, we also value portability, the ability to get your data into and out of Discourse at will. This is why Discourse, unlike other forum software, defaults to a Creative Commons license. As a basic user on any Discourse you can easily export and download all your posts right from your user page. As a site owner, you can easily back up and restore your entire site database from the admin panel, right in your web browser. Automated weekly backups are set up for you out of the box, too. I'm not the world's foremost expert on backups for nothing, man! Over the years, we've learned that balancing security and data portability can be tricky. You bet your sweet ASCII a full database download is what hackers start working toward the minute they gain any kind of foothold in your system. It's the ultimate prize. To mitigate this threat, we've slowly tightened restrictions around Discourse backups in various ways: Administrators have a minimum password length of 15 characters. Both backup creation and backup download administrator actions are formally logged. Backup download tokens are single use and emailed to the address of the administrator, to confirm that user has full control over the email address. The name of the security game is defense in depth, so all these hardening steps help … but we still need to assume that Internet Bad Guys will somehow get a copy of your database. And then what? Well, what's in the database? Identity cookies Cookies are, of course, how the browser can tell who you are. Cookies are usually stored as hashes, rather than the actual cookie value, so having the hash doesn't let you impersonate the target user. Furthermore, most modern web frameworks rapidly cycle cookies, so they are only valid for a brief 10 to 15 minute window anyway. Email addresses Although users have reason to be concerned about their emails being exposed, very few people treat their email address as anything particularly precious these days. All posts and topic content Let's assume for the sake of argument that this is a fully public site and nobody was posting anything particularly sensitive there. So we're not worried, at least for now, about trade secrets or other privileged information being revealed, since they were all public posts anyway. If we were, that's a whole other blog post I can write at a later date. Password hashes What's left is the password hashes. And that's … a serious problem indeed. Now that the attacker has your database, they can crack your password hashes with large scale offline attacks, using the full resources of any cloud they can afford. And once they've cracked a particular password hash, they can log in as that user … forever. Or at least until that user changes their password. ⚠️ That's why, if you know (or even suspect!) your database was exposed, the very first thing you should do is reset everyone's password. But what if you don't know? Should you preemptively reset everyone's password every 30 days, like the world's worst bigco IT departments? That's downright user hostile, and leads to serious pathologies of its own. The reality is that you probably won't know when your database has been exposed, at least not until it's too late to do anything about it. So it's crucial to slow the attackers down, to give yourself time to deal with it and respond. Thus, the only real protection you can offer your users is just how resistant to attack your stored password hashes are. There are two factors that go into password hash strength: The hashing algorithm. As slow as possible, and ideally designed to be especially slow on GPUs for reasons that will become painfully obvious about 5 paragraphs from now. The work factor or number of iterations. Set this as high as possible, without opening yourself up to a possible denial of service attack. I've seen guidance that said you should set the overall work factor high enough that hashing a password takes at least 8ms on the target platform. It turns out Sam Saffron, one of my Discourse co-founders, made a good call back in 2013 when he selected the NIST recommendation of PBKDF2-HMAC-SHA256 and 64k iterations. We measured, and that indeed takes roughly 8ms using our existing Ruby login code on our current (fairly high end, Skylake 4.0 Ghz) servers. But that was 4 years ago. Exactly how secure are our password hashes in the database today? Or 4 years from now, or 10 years from now? We're building open source software for the long haul, and we need to be sure we are making reasonable decisions that protect everyone. So in the spirit of designing for evil, it's time to put on our Darth Helmet and play the bad guy – let's crack our own hashes! We're gonna use the biggest, baddest single GPU out there at the moment, the GTX 1080 Ti. As a point of reference, for PBKDF2-HMAC-SHA256 the 1080 achieves 1180 kH/s, whereas the 1080 Ti achieves 1640 kH/s. In a single video card generation the attack hash rate has increased nearly 40 percent. Ponder that. First, a tiny hello world test to see if things are working. I downloaded hashcat. I logged into our demo at try.discourse.org and created a new account with the password 0234567890; I checked the database, and this generated the following values in the hash and salt database columns for that new user: hash 93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw= salt ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA= Hashcat requires the following input file format: one line per hash, with the hash type, number of iterations, salt and hash (base64 encoded) separated by colons: type iter salt hash sha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw= Let's hashcat it up and see if it works: ./h64 -a 3 -m 10900 .\\one-hash.txt 0234567?d?d?d Note that this is an intentionally tiny amount of work, it's only guessing three digits. And sure enough, we cracked it fast! See the password there on the end? We got it. sha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=:0234567890 Now that we know it works, let's get down to business. But we'll start easy. How long does it take to brute force attack the easiest possible Discourse password, 8 numbers – that's \"only\" 108 combinations, a little over one hundred million. Hash.Type........: PBKDF2-HMAC-SHA256 Time.Estimated...: Fri Jun 02 00:15:37 2017 (1 hour, 0 mins) Guess.Mask.......: ?d?d?d?d?d?d?d?d [8] Even with a top of the line GPU that's … OK, I guess. Remember this is just one hash we're testing against, so you'd need one hour per row (user) in the table. And I have more bad news for you: Discourse hasn't allowed 8 character passwords for quite some time now. How long does it take if we try longer numeric passwords? ?d?d?d?d?d?d?d?d?d [9] Fri Jun 02 10:34:42 2017 (11 hours, 18 mins) ?d?d?d?d?d?d?d?d?d?d [10] Tue Jun 06 17:25:19 2017 (4 days, 18 hours) ?d?d?d?d?d?d?d?d?d?d?d [11] Mon Jul 17 23:26:06 2017 (46 days, 0 hours) ?d?d?d?d?d?d?d?d?d?d?d?d [12] Tue Jul 31 23:58:30 2018 (1 year, 60 days) But all digit passwords are easy mode, for babies! How about some real passwords that use at least lowercase letters, or lowercase + uppercase + digits? Guess.Mask.......: ?l?l?l?l?l?l?l?l [8] Time.Estimated...: Mon Sep 04 10:06:00 2017 (94 days, 10 hours) Guess.Mask.......: ?1?1?1?1?1?1?1?1 [8] (-1 = ?l?u?d) Time.Estimated...: Sun Aug 02 09:29:48 2020 (3 years, 61 days) A brute force try-every-single-letter-and-number attack is not looking so hot for us at this point, even with a high end GPU. But what if we divided the number by eight … by putting eight video cards in a single machine? That's well within the reach of a small business budget or a wealthy individual. Unfortunately, dividing 38 months by 8 isn't such a dramatic reduction in the time to attack. Instead, let's talk about nation state attacks where they have the budget to throw thousands of these GPUs at the problem (1.1 days), maybe even tens of thousands (2.7 hours), then … yes. Even allowing for 10 character password minimums, you are in serious trouble at that point. If we want Discourse to be nation state attack resistant, clearly we'll need to do better. Hashcat has a handy benchmark mode, and here's a sorted list of the strongest (slowest) hashes that Hashcat knows about benchmarked on a rig with 8 Nvidia GTX 1080 GPUs. Of the things I recognize on that list, bcrypt, scrypt and PBKDF2-HMAC-SHA512 stand out. My quick hashcat results gave me some confidence that we weren't doing anything terribly wrong with the Discourse password hashes stored in the database. But I wanted to be completely sure, so I hired someone with a background in security and penetration testing to, under a signed NDA, try cracking the password hashes of two live and very popular Discourse sites we currently host. I was provided two sets of password hashes from two different Discourse communities, containing 5,909 and 6,088 hashes respectively. Both used the PBKDF2-HMAC-SHA256 algorithm with a work factor of 64k. Using hashcat, my Nvidia GTX 1080 Ti GPU generated these hashes at a rate of ~27,000/sec. Common to all discourse communities are various password requirements: All users must have a minimum password length of 10 characters. All administrators must have a minimum password length of 15 characters. Users cannot use any password matching a blacklist of the 10,000 most commonly used passwords. Users can choose to create a username and password or use various third party authentication mechanisms (Google, Facebook, Twitter, etc). If this option is selected, a secure random 32 character password is autogenerated. It is not possible to know whether any given password is human entered, or autogenerated. Using common password lists and masks, I cracked 39 of the 11,997 hashes in about three weeks, 25 from the ████████ community and 14 from the ████████ community. This is a security researcher who commonly runs these kinds of audits, so all of the attacks used wordlists, along with known effective patterns and masks derived from the researcher's previous password cracking experience, instead of raw brute force. That recovered the following passwords (and one duplicate): 007007bond 123password 1qaz2wsx3e A3eilm2s2y Alexander12 alexander18 belladonna2 Charlie123 Chocolate1 christopher8 Elizabeth1 Enterprise01 Freedom123 greengrass123 hellothere01 I123456789 Iamawesome khristopher l1ghthouse l3tm3innow Neversaynever password1235 pittsburgh1 Playstation2 Playstation3 Qwerty1234 Qwertyuiop1 qwertyuiop1234567890 Spartan117 springfield0 Starcraft2 strawberry1 Summertime Testing123 testing1234 thecakeisalie02 Thirteen13 Welcome123 If we multiply this effort by 8, and double the amount of time allowed, it's conceivable that a very motivated attacker, or one with a sophisticated set of wordlists and masks, could eventually recover 39 × 16 = 624 passwords, or about five percent of the total users. That's reasonable, but higher than I would like. We absolutely plan to add a hash type table in future versions of Discourse, so we can switch to an even more secure (read: much slower) password hashing scheme in the next year or two. bcrypt $2*$, Blowfish (Unix) 20273 H/s scrypt 886.5 kH/s PBKDF2-HMAC-SHA512 542.6 kH/s PBKDF2-HMAC-SHA256 1646.7 kH/s After this exercise, I now have a much deeper understanding of our worst case security scenario, a database compromise combined with a professional offline password hashing attack. I can also more confidently recommend and stand behind our engineering work in making Discourse secure for everyone. So if, like me, you're not entirely sure you are doing things securely, it's time to put those assumptions to the test. Don't wait around for hackers to attack you — hacker, hack thyself! [advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you find your next job.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n        \n        \n\u003cmain role=\"main\"\u003e\n\n    \u003carticle\u003e\n\n\n            \u003cspan\u003e\u003ctime datetime=\"2017-06-02\"\u003e02 Jun 2017\u003c/time\u003e \u003c/span\u003e\n\n            \n\n            \u003csection\u003e\n                \u003cp\u003eWe\u0026#39;ve read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the \u003ca href=\"https://discourse.org/?ref=blog.codinghorror.com\"\u003eDiscourse\u003c/a\u003e project; we endeavor to build open source software that is secure and safe for communities by default, even if there are thousands, or millions, of them out there.\u003c/p\u003e\n\u003cp\u003eHowever, we also value \u003cem\u003eportability\u003c/em\u003e, the ability to get your data into and out of Discourse at will. This is why Discourse, unlike other forum software, defaults to a Creative Commons license. As a basic user on any Discourse you can easily export and download all your posts right from your user page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-download-all.png\" alt=\"Discourse Download All Posts\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs a site owner, you can easily back up and restore your entire site database from the admin panel, right in your web browser. Automated weekly backups are set up for you out of the box, too. I\u0026#39;m not \u003ca href=\"https://blog.codinghorror.com/international-backup-awareness-day/\"\u003ethe world\u0026#39;s foremost expert on backups\u003c/a\u003e for nothing, man!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-backups.png\" alt=\"Discourse database backup download\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eOver the years, we\u0026#39;ve learned that balancing security and data portability can be tricky.  You bet your sweet ASCII a \u003cstrong\u003efull database download\u003c/strong\u003e is what hackers start working toward the minute they gain any kind of foothold in your system. It\u0026#39;s the ultimate prize.\u003c/p\u003e\n\u003cp\u003eTo mitigate this threat, we\u0026#39;ve slowly tightened restrictions around Discourse backups in various ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAdministrators have a minimum password length of 15 characters.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBoth backup creation and backup download administrator actions are formally logged.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBackup download tokens are single use and emailed to the address of the administrator, to confirm that user has full control over the email address.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe name of the security game is defense in depth, so all these hardening steps help … but we still need to \u003cstrong\u003eassume that Internet Bad Guys will somehow get a copy of your database\u003c/strong\u003e. And then what? Well, what\u0026#39;s in the database?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIdentity cookies\u003c/p\u003e\n\u003cp\u003eCookies are, of course, how the browser can tell who you are. Cookies are usually stored as hashes, rather than the actual cookie value, so having the hash doesn\u0026#39;t let you impersonate the target user. Furthermore, most modern web frameworks rapidly cycle cookies, so they are only valid for a brief 10 to 15 minute window anyway.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEmail addresses\u003c/p\u003e\n\u003cp\u003eAlthough users have reason to be concerned about their emails being exposed, very few people treat their email address as anything particularly precious these days.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAll posts and topic content\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s assume for the sake of argument that this is a fully public site and nobody was posting anything particularly sensitive there. So we\u0026#39;re not worried, at least for now, about trade secrets or other privileged information being revealed, since they were all public posts anyway. If we were, that\u0026#39;s a whole other blog post I can write at a later date.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePassword hashes\u003c/p\u003e\n\u003cp\u003eWhat\u0026#39;s left is \u003cstrong\u003ethe password hashes\u003c/strong\u003e. And that\u0026#39;s … \u003ca href=\"https://blog.codinghorror.com/speed-hashing/\"\u003ea serious problem indeed\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow that the attacker has your database, they can crack your password hashes with \u003ca href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\"\u003elarge scale offline attacks\u003c/a\u003e, using the full resources of any cloud they can afford. And once they\u0026#39;ve cracked a particular password hash, \u003cstrong\u003ethey can log in as that user … forever\u003c/strong\u003e. Or at least until that user changes their password.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e⚠️ That\u0026#39;s why, if you know (or even suspect!) your database was exposed, the very first thing you should do is reset everyone\u0026#39;s password.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-db-password-hashes.png\" alt=\"Discourse database password hashes\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eBut what if you \u003cem\u003edon\u0026#39;t\u003c/em\u003e know? Should you preemptively reset everyone\u0026#39;s password every 30 days, like the world\u0026#39;s worst bigco IT departments? That\u0026#39;s downright user hostile, and leads to serious pathologies of its own. The reality is that you probably \u003cem\u003ewon\u0026#39;t\u003c/em\u003e know when your database has been exposed, at least not until it\u0026#39;s too late to do anything about it. So it\u0026#39;s crucial to slow the attackers down, to give yourself time to deal with it and respond.\u003c/p\u003e\n\u003cp\u003eThus, the only real protection you can offer your users is just how resistant to attack your stored password hashes are. There are two factors that go into password hash strength:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eThe hashing algorithm\u003c/strong\u003e. As slow as possible, and ideally designed to be \u003cem\u003eespecially\u003c/em\u003e slow on GPUs for reasons that will become painfully obvious about 5 paragraphs from now.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eThe work factor\u003c/strong\u003e or \u003cstrong\u003enumber of iterations\u003c/strong\u003e. Set this as high as possible, without opening yourself up to a possible denial of service attack.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI\u0026#39;ve seen guidance that said you should set the overall work factor high enough that hashing a password takes at least 8ms on the target platform. It turns out \u003ca href=\"https://samsaffron.com/?ref=blog.codinghorror.com\"\u003eSam Saffron\u003c/a\u003e, one of my Discourse co-founders, made a good call back in 2013 when he selected the NIST recommendation of \u003cstrong\u003ePBKDF2-HMAC-SHA256\u003c/strong\u003e and \u003cstrong\u003e64k iterations\u003c/strong\u003e. We measured, and that indeed takes roughly 8ms using our existing Ruby login code on our current (fairly high end, Skylake 4.0 Ghz) servers.\u003c/p\u003e\n\u003cp\u003eBut that was 4 years ago. Exactly how secure are our password hashes in the database today? Or 4 years from now, or 10 years from now? We\u0026#39;re building open source software for the long haul, and we need to be sure we are making reasonable decisions that protect everyone. So in the spirit of \u003ca href=\"https://blog.codinghorror.com/designing-for-evil/\"\u003edesigning for evil\u003c/a\u003e, it\u0026#39;s time to put on our Darth Helmet and play the bad guy – \u003cstrong\u003elet\u0026#39;s crack our own hashes!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/dark-helmet.jpg\" alt=\"\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe\u0026#39;re gonna use the biggest, baddest single GPU out there at the moment, \u003ca href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40?ref=blog.codinghorror.com#gistcomment-2060753\"\u003ethe GTX 1080 Ti\u003c/a\u003e. As a point of reference, for PBKDF2-HMAC-SHA256 the 1080 achieves 1180 kH/s, whereas the 1080 Ti achieves 1640 kH/s. In a \u003cem\u003esingle\u003c/em\u003e video card generation the attack hash rate has increased nearly 40 percent. Ponder that.\u003c/p\u003e\n\u003cp\u003eFirst, a tiny hello world test to see if things are working. I downloaded \u003ca href=\"https://hashcat.net/hashcat/?ref=blog.codinghorror.com\"\u003ehashcat\u003c/a\u003e. I logged into our demo at try.discourse.org and created a new account with the password \u003ccode\u003e0234567890\u003c/code\u003e; I checked the database, and this generated the following values in the hash and salt database columns for that new user:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehash\u003cbr/\u003e\n\u003ccode\u003e93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=\u003c/code\u003e\u003cbr/\u003e\nsalt\u003cbr/\u003e\n\u003ccode\u003eZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHashcat requires the following input file format: one line per hash, with the hash type, number of iterations, salt and hash (base64 encoded) separated by colons:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etype   iter  salt                                         hash\nsha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0026#39;s hashcat it up and see if it works:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e./h64 -a 3 -m 10900 .\\one-hash.txt 0234567?d?d?d\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNote that this is an intentionally tiny amount of work, it\u0026#39;s only guessing three digits. And sure enough, we cracked it fast! See the password there on the end? We got it.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=:0234567890\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNow that we know it works, let\u0026#39;s get down to business. But we\u0026#39;ll start easy. How long does it take to brute force attack \u003cstrong\u003ethe easiest possible Discourse password, 8 numbers\u003c/strong\u003e – that\u0026#39;s \u0026#34;only\u0026#34; 10\u003csup\u003e8\u003c/sup\u003e combinations, a little over one hundred million.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHash.Type........: PBKDF2-HMAC-SHA256\nTime.Estimated...: Fri Jun 02 00:15:37 2017 (1 hour, 0 mins)\nGuess.Mask.......: ?d?d?d?d?d?d?d?d [8]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEven with a top of the line GPU that\u0026#39;s … OK, I guess. Remember this is just one hash we\u0026#39;re testing against, so you\u0026#39;d need one hour per row (user) in the table. And I have more bad news for you: Discourse hasn\u0026#39;t allowed 8 character passwords for \u003ca href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\"\u003equite some time now\u003c/a\u003e. How long does it take if we try longer numeric passwords?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e?d?d?d?d?d?d?d?d?d [9]\nFri Jun 02 10:34:42 2017 (11 hours, 18 mins)\n\n?d?d?d?d?d?d?d?d?d?d [10]\nTue Jun 06 17:25:19 2017 (4 days, 18 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d [11]\nMon Jul 17 23:26:06 2017 (46 days, 0 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d?d [12]\nTue Jul 31 23:58:30 2018 (1 year, 60 days)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut all digit passwords are easy mode, for babies! How about some \u003cem\u003ereal\u003c/em\u003e passwords that use at least lowercase letters, or lowercase + uppercase + digits?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGuess.Mask.......: ?l?l?l?l?l?l?l?l [8]\nTime.Estimated...: Mon Sep 04 10:06:00 2017 (94 days, 10 hours)\n\nGuess.Mask.......: ?1?1?1?1?1?1?1?1 [8] (-1 = ?l?u?d)\nTime.Estimated...: Sun Aug 02 09:29:48 2020 (3 years, 61 days)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA brute force try-every-single-letter-and-number attack is not looking so hot for us at this point, even with a high end GPU. But what if we divided the number by \u003cstrong\u003eeight\u003c/strong\u003e … \u003ca href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40?ref=blog.codinghorror.com\"\u003eby putting eight video cards in a single machine?\u003c/a\u003e That\u0026#39;s well within the reach of a small business budget or a wealthy individual. Unfortunately, dividing 38 months by 8 isn\u0026#39;t such a dramatic reduction in the time to attack. Instead, let\u0026#39;s talk about nation state attacks where they have the budget to throw \u003cem\u003ethousands\u003c/em\u003e of these GPUs at the problem (1.1 days), maybe even \u003cem\u003etens of thousands\u003c/em\u003e (2.7 hours), then … yes. Even allowing for 10 character password minimums, you are in serious trouble at that point.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/8-gpu-cracking-rig.jpg\" alt=\"\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf we want Discourse to be nation state attack resistant, clearly we\u0026#39;ll need to do better. Hashcat has a handy benchmark mode, and \u003ca href=\"https://docs.google.com/spreadsheets/d/1iwoMR5TBYAZ5eiSphkIQfIEfbrVvWW_tKwS4L1cYlaI/pubhtml?gid=0\u0026amp;single=true\u0026amp;ref=blog.codinghorror.com\"\u003ehere\u0026#39;s a sorted list of the strongest (slowest) hashes that Hashcat knows about\u003c/a\u003e benchmarked on a rig with 8 Nvidia GTX 1080 GPUs. Of the things I recognize on that list, \u003cstrong\u003ebcrypt\u003c/strong\u003e, \u003cstrong\u003escrypt\u003c/strong\u003e and \u003cstrong\u003ePBKDF2-HMAC-SHA512\u003c/strong\u003e stand out.\u003c/p\u003e\n\u003cp\u003eMy quick hashcat results gave me some confidence that we weren\u0026#39;t doing anything terribly wrong with the Discourse password hashes stored in the database. But I wanted to be \u003cem\u003ecompletely sure\u003c/em\u003e, so I hired someone with a background in security and penetration testing to, under a signed NDA, try cracking the password hashes of two live and very popular Discourse sites \u003ca href=\"https://discourse.org/customers?ref=blog.codinghorror.com\"\u003ewe currently host\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI was provided two sets of password hashes from two different Discourse communities, containing 5,909 and 6,088 hashes respectively. Both used the PBKDF2-HMAC-SHA256 algorithm with a work factor of 64k. Using hashcat, my Nvidia GTX 1080 Ti GPU generated these hashes at a rate of ~27,000/sec.\u003c/p\u003e\n\u003cp\u003eCommon to all discourse communities are various password requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAll users must have a minimum password length of 10 characters.\u003c/li\u003e\n\u003cli\u003eAll administrators must have a minimum password length of 15 characters.\u003c/li\u003e\n\u003cli\u003eUsers cannot use any password matching a blacklist of the 10,000 most commonly used passwords.\u003c/li\u003e\n\u003cli\u003eUsers can choose to create a username and password or use various third party authentication mechanisms (Google, Facebook, Twitter, etc). If this option is selected, a secure random 32 character password is autogenerated. It is not possible to know whether any given password is human entered, or autogenerated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing common password lists and masks, I cracked 39 of the 11,997 hashes in about three weeks, 25 from the ████████ community and 14 from the ████████ community.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis is a security researcher who commonly runs these kinds of audits, so all of the attacks used \u003cstrong\u003ewordlists\u003c/strong\u003e, along with known effective patterns and \u003ca href=\"https://hashcat.net/wiki/doku.php?id=mask_attack\u0026amp;ref=blog.codinghorror.com\"\u003emasks\u003c/a\u003e derived from the researcher\u0026#39;s previous password cracking experience, instead of raw brute force. That recovered the following passwords (and one duplicate):\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\n\u003ccode\u003e007007bond\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e123password\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1qaz2wsx3e\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eA3eilm2s2y\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eAlexander12\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ealexander18\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ebelladonna2\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eCharlie123\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eChocolate1\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003echristopher8\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eElizabeth1\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eEnterprise01\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eFreedom123\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003egreengrass123\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ehellothere01\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eI123456789\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eIamawesome\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ekhristopher\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003el1ghthouse\u003c/code\u003e\u003cbr/\u003e\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003el3tm3innow\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eNeversaynever\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003epassword1235\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003epittsburgh1\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ePlaystation2\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ePlaystation3\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eQwerty1234\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eQwertyuiop1\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eqwertyuiop1234567890\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eSpartan117\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003espringfield0\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eStarcraft2\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003estrawberry1\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eSummertime\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eTesting123\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003etesting1234\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ethecakeisalie02\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eThirteen13\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eWelcome123\u003c/code\u003e\u003cbr/\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eIf we multiply this effort by 8, and double the amount of time allowed, it\u0026#39;s conceivable that a \u003cem\u003every\u003c/em\u003e motivated attacker, or \u003ca href=\"https://arstechnica.com/security/2013/10/how-the-bible-and-youtube-are-fueling-the-next-frontier-of-password-cracking/?ref=blog.codinghorror.com\"\u003eone with a sophisticated set of wordlists and masks\u003c/a\u003e, could eventually recover 39 × 16 = 624 passwords, or about \u003cstrong\u003efive percent\u003c/strong\u003e of the total users. That\u0026#39;s reasonable, but higher than I would like. We absolutely plan to add a hash type table in future versions of Discourse, so we can switch to an even more secure (read: \u003ca href=\"http://www.pxdojo.net/2015/08/what-i-learned-from-cracking-4000.html?ref=blog.codinghorror.com\"\u003emuch slower\u003c/a\u003e) password hashing scheme in the next year or two.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebcrypt $2*$, Blowfish (Unix)\n  20273 H/s\n\nscrypt\n  886.5 kH/s\n\nPBKDF2-HMAC-SHA512\n  542.6 kH/s \n\nPBKDF2-HMAC-SHA256\n 1646.7 kH/s \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter this exercise, I now have a much deeper understanding of our worst case security scenario, a database compromise combined with a professional offline password hashing attack. I can also more confidently recommend and stand behind our engineering work in making Discourse secure for everyone. So if, like me, you\u0026#39;re not entirely sure you are doing things securely, it\u0026#39;s time to put those assumptions to the test. Don\u0026#39;t wait around for hackers to attack you — \u003cstrong\u003ehacker, hack thyself!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e[advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you \u003ca href=\"http://careers.stackoverflow.com/?ref=blog.codinghorror.com\" rel=\"nofollow\"\u003efind your next job\u003c/a\u003e.\u003c/p\u003e  \n            \u003c/section\u003e\n\n            \n\n            \n\n\n    \u003c/article\u003e\n\n    \n\n    \n\n\u003c/main\u003e\n\n\n\n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2017-06-02T08:11:16Z",
  "modifiedTime": "2017-08-07T23:38:51Z"
}
