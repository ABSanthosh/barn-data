{
  "id": "819b1a45-e24f-49fa-b56b-7a432a89d3e9",
  "title": "Secure and publish Python packages: A guide to CI integration",
  "link": "https://about.gitlab.com/blog/2025/01/21/secure-and-publish-python-packages-a-guide-to-ci-integration",
  "description": "",
  "author": "Tim Rizzi",
  "published": "2025-01-21T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Tim Rizzi",
  "length": 14024,
  "excerpt": "Learn how to implement a secure CI/CD pipeline across five stages with the GitLab DevSecOps platform.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Supply chain security is a critical concern in software development. Organizations need to verify the authenticity and integrity of their software packages. This guide will show you how to implement a secure CI/CD pipeline for Python packages using GitLab CI, incorporating package signing and attestation using Sigstore's Cosign. You'll learn: Why sign and attest your Python packages? Pipeline overview Complete pipeline implementation: Setting up the environment Environment configuration Configuration breakdown The 6 stages Building Signing Verification Publishing Publishing signatures Consumer verification Why sign and attest your Python packages? Here are four reasons to sign and attest your Python packages: Supply chain security: Package signing ensures that the code hasn't been tampered with between build and deployment, protecting against supply chain attacks. Compliance requirements: Many organizations, especially in regulated industries, require cryptographic signatures and provenance information for all deployed software. Traceability: Attestations provide a verifiable record of build conditions, including who built the package and under what circumstances. Trust verification: Consumers of your package can cryptographically verify its authenticity before installation. Pipeline overview Ensuring your code's integrity and authenticity is necessary. Imagine a pipeline that doesn't just compile your code but creates a cryptographically verifiable narrative of how, when, and by whom your package was created. Each stage acts as a guardian, checking and documenting the package's provenance. Here are six stages of a GitLab pipeline that ensure your package is secure and trustworthy: Build: Creates a clean, standard package that can be easily shared and installed. Signing: Adds a digital signature that proves the package hasn't been tampered with since it was created. Verification: Double-checks that the signature is valid and the package meets all our security requirements. Publishing: Uploads the verified package to GitLab's package registry, making it available for others to use. Publishing Signatures: Makes signatures available for verification. Consumer Verification: Simulates how end users can verify package authenticity. Complete pipeline implementation: Setting up the environment Before we build our package, we need to set up a consistent and secure build environment. This configuration ensures every package is created with the same tools, settings, and security checks. Environment configuration Our pipeline requires specific tools and settings to work correctly. Primary configurations: Python 3.10 for consistent builds Cosign 2.2.3 for package signing GitLab package registry integration Hardcoded package version for reproducibility Note about versioning: We've chosen to use a hardcoded version (\"1.0.0\") in this example rather than deriving it from git tags or commits. This approach ensures complete reproducibility and makes the pipeline behavior more predictable. In a production environment, you might want to use semantic versioning based on git tags or another versioning strategy that fits your release process. Tool requirements: Basic utilities: curl, wget Cosign for cryptographic signing Python packaging tools: build, twine, setuptools, wheel Configuration breakdown variables: PYTHON_VERSION: '3.10' PACKAGE_NAME: ${CI_PROJECT_NAME} PACKAGE_VERSION: \"1.0.0\" FULCIO_URL: 'https://fulcio.sigstore.dev' REKOR_URL: 'https://rekor.sigstore.dev' CERTIFICATE_IDENTITY: 'https://gitlab.com/${CI_PROJECT_PATH}//.gitlab-ci.yml@refs/heads/${CI_DEFAULT_BRANCH}' CERTIFICATE_OIDC_ISSUER: 'https://gitlab.com' PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.pip-cache\" COSIGN_YES: \"true\" GENERIC_PACKAGE_BASE_URL: \"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}\" We use caching to speed up subsequent builds: cache: paths: - ${PIP_CACHE_DIR} Building: Crafting the package Every software journey begins with creation. In our pipeline, the build stage is where raw code transforms into a distributable package, ready to travel across different Python environments. The build process creates two standardized formats: a wheel package (.whl) for quick, efficient installation a source distribution (.tar.gz) that carries the complete code Here's the build stage implementation: build: extends: .python-job stage: build script: - git init - git config --global init.defaultBranch main - git config --global user.email \"[email protected]\" - git config --global user.name \"CI\" - git add . - git commit -m \"Initial commit\" - export NORMALIZED_NAME=$(echo \"${CI_PROJECT_NAME}\" | tr '-' '_') - sed -i \"s/name = \\\".*\\\"/name = \\\"${NORMALIZED_NAME}\\\"/\" pyproject.toml - sed -i \"s|\\\"Homepage\\\" = \\\".*\\\"|\\\"Homepage\\\" = \\\"https://gitlab.com/${CI_PROJECT_PATH}\\\"|\" pyproject.toml - python -m build artifacts: paths: - dist/ - pyproject.toml Let's break down what this build stage does: Initializes a Git repository (git init) and configures it with basic settings Normalizes the package name by converting hyphens to underscores, which is required for Python packaging Updates the package metadata in pyproject.toml to match our project settings Builds both wheel and source distribution packages using python -m build Preserves the built packages and configuration as artifacts for subsequent stages Signing: The digital notarization If attestation is the package's biography, signing is its cryptographic seal of authenticity. This is where we transform our package from a mere collection of files into a verified, tamper-evident artifact. The signing stage uses Cosign to apply a digital signature as an unbreakable seal. This isn't just a stamp — it's a complex cryptographic handshake that proves the package's integrity and origin. sign: extends: .python+cosign-job stage: sign id_tokens: SIGSTORE_ID_TOKEN: aud: sigstore script: - | for file in dist/*.whl dist/*.tar.gz; do if [ -f \"$file\" ]; then filename=$(basename \"$file\") cosign sign-blob --yes \\ --fulcio-url=${FULCIO_URL} \\ --rekor-url=${REKOR_URL} \\ --oidc-issuer $CI_SERVER_URL \\ --identity-token $SIGSTORE_ID_TOKEN \\ --output-signature \"dist/${filename}.sig\" \\ --output-certificate \"dist/${filename}.crt\" \\ \"$file\" fi done artifacts: paths: - dist/ This signing stage performs several crucial operations: Obtains an OIDC token from GitLab for authentication with Sigstore services Processes each built package (both wheel and source distribution) Uses Cosign to create a cryptographic signature (.sig) for each package Generates a certificate (.crt) that proves the signature's authenticity Stores both signatures and certificates alongside the packages as artifacts Verification: The security checkpoint Verification is our final quality control gate. It's not just a check — it's a security interrogation where every aspect of the package is scrutinized. verify: extends: .python+cosign-job stage: verify script: - | failed=0 for file in dist/*.whl dist/*.tar.gz; do if [ -f \"$file\" ]; then filename=$(basename \"$file\") if ! cosign verify-blob \\ --signature \"dist/${filename}.sig\" \\ --certificate \"dist/${filename}.crt\" \\ --certificate-identity \"${CERTIFICATE_IDENTITY}\" \\ --certificate-oidc-issuer \"${CERTIFICATE_OIDC_ISSUER}\" \\ \"$file\"; then failed=1 fi fi done if [ $failed -eq 1 ]; then exit 1 fi The verification stage implements several security checks: Examines each package file in the dist directory Uses Cosign to verify the signature matches the package content Confirms the certificate's identity matches our expected GitLab pipeline identity Validates our trusted OIDC provider issued the certificate Fails the entire pipeline if any verification check fails, ensuring only verified packages proceed Publishing: The controlled release Publishing is where we make our verified packages available through GitLab's package registry. It's a carefully choreographed release that ensures only verified, authenticated packages reach their destination. publish: extends: .python-job stage: publish script: - | cat \u003c\u003c EOF \u003e ~/.pypirc [distutils] index-servers = gitlab [gitlab] repository = ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi username = gitlab-ci-token password = ${CI_JOB_TOKEN} EOF TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token \\ twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi \\ dist/*.whl dist/*.tar.gz The publishing stage handles several important tasks: Creates a .pypirc configuration file with GitLab package registry credentials Uses the GitLab CI job token for secure authentication Uploads both wheel and source distribution packages to the GitLab PyPI registry Makes the packages available for installation via pip Publishing signatures: Making verification possible After publishing the packages, we must make their signatures and certificates available for verification. We store these in GitLab's generic package registry, making them easily accessible to users who want to verify package authenticity. publish_signatures: extends: .python+cosign-job stage: publish_signatures script: - | for file in dist/*.whl dist/*.tar.gz; do if [ -f \"$file\" ]; then filename=$(basename \"$file\") curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" \\ --fail \\ --upload-file \"dist/${filename}.sig\" \\ \"${GENERIC_PACKAGE_BASE_URL}/${filename}.sig\" curl --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" \\ --fail \\ --upload-file \"dist/${filename}.crt\" \\ \"${GENERIC_PACKAGE_BASE_URL}/${filename}.crt\" fi done The signature publishing stage performs these key operations: Processes each built package to find its corresponding signature files Uses the GitLab API to upload the signature (.sig) file to the generic package registry Uploads the corresponding certificate (.crt) file Makes these verification artifacts available for downstream package consumers Uses the same version and package name to maintain the connection between packages and signatures Consumer verification: Testing the user experience The final stage simulates how end users will verify your package's authenticity. This stage acts as a final check and a practical example of the verification process. consumer_verification: extends: .python+cosign-job stage: consumer_verification script: - | git init git config --global init.defaultBranch main mkdir -p pkg signatures pip download --index-url \"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple\" \\ \"${NORMALIZED_NAME}==${PACKAGE_VERSION}\" --no-deps -d ./pkg pip download --no-binary :all: \\ --index-url \"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple\" \\ \"${NORMALIZED_NAME}==${PACKAGE_VERSION}\" --no-deps -d ./pkg failed=0 for file in pkg/*.whl pkg/*.tar.gz; do if [ -f \"$file\" ]; then filename=$(basename \"$file\") sig_url=\"${GENERIC_PACKAGE_BASE_URL}/${filename}.sig\" cert_url=\"${GENERIC_PACKAGE_BASE_URL}/${filename}.crt\" curl --fail --silent --show-error \\ --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" \\ --output \"signatures/${filename}.sig\" \\ \"$sig_url\" curl --fail --silent --show-error \\ --header \"JOB-TOKEN: ${CI_JOB_TOKEN}\" \\ --output \"signatures/${filename}.crt\" \\ \"$cert_url\" if ! cosign verify-blob \\ --signature \"signatures/${filename}.sig\" \\ --certificate \"signatures/${filename}.crt\" \\ --certificate-identity \"${CERTIFICATE_IDENTITY}\" \\ --certificate-oidc-issuer \"${CERTIFICATE_OIDC_ISSUER}\" \\ \"$file\"; then failed=1 fi fi done if [ $failed -eq 1 ]; then exit 1 fi This consumer verification stage simulates the end-user experience by: Creating a clean environment to test package installation Downloading the published packages from the GitLab PyPI registry Retrieving the corresponding signatures and certificates from the generic package registry Performing the same verification steps that end users would perform Ensuring the entire process works from a consumer's perspective Failing the pipeline if any verification step fails, providing an early warning of any issues Summary This comprehensive pipeline provides a secure and reliable way to build, sign, and publish Python packages to GitLab's package registry. By following these practices and implementing the suggested security measures, you can ensure your packages are appropriately verified and safely distributed to your users. The pipeline combines modern security practices with efficient automation to create a robust software supply chain. Using Sigstore's Cosign for signing and attestation, along with GitLab's built-in security features, you can provide users with trustworthy cryptographically verified packages. Get started on your security journey today with a free 60-day trial of GitLab Ultimate. Learn more Documentation: Use Sigstore for keyless signing and verification Streamline security with keyless signing and verification in GitLab Annotate container images with build provenance using Cosign in GitLab CI/CD",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/6gTk7M1DNx0tFuovupVFB1/34420865874ada19d36cb0b2401c2e2c/AdobeStock_1097303277.jpeg?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eSupply chain security is a critical concern in software development. Organizations need to verify the authenticity and integrity of their software packages. This guide will show you how to implement a secure CI/CD pipeline for Python packages using GitLab CI, incorporating package signing and attestation using Sigstore\u0026#39;s Cosign.\u003c/p\u003e\n\u003cp\u003eYou\u0026#39;ll learn:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#why-sign-and-attest-your-python-packages%3F\"\u003eWhy sign and attest your Python packages?\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#pipeline-overview\"\u003ePipeline overview\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#complete-pipeline-implementation-setting-up-the-environment\"\u003eComplete pipeline implementation: Setting up the environment\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#environment-configuration\"\u003eEnvironment configuration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration-breakdown\"\u003eConfiguration breakdown\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe 6 stages\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#building-crafting-the-package\"\u003eBuilding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#signing-the-digital-notarization\"\u003eSigning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verification-the-security-checkpoint\"\u003eVerification\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#publishing-the-controlled-release\"\u003ePublishing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#publishing-signatures-making-verification-possible\"\u003ePublishing signatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#consumer-verification-testing-the-user-experience\"\u003eConsumer verification\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"why-sign-and-attest-your-python-packages%3F\" tabindex=\"-1\"\u003eWhy sign and attest your Python packages? \u003ca href=\"#why-sign-and-attest-your-python-packages%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHere are four reasons to sign and attest your Python packages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSupply chain security:\u003c/strong\u003e Package signing ensures that the code hasn\u0026#39;t been tampered with between build and deployment, protecting against supply chain attacks.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCompliance requirements:\u003c/strong\u003e Many organizations, especially in regulated industries, require cryptographic signatures and provenance information for all deployed software.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTraceability:\u003c/strong\u003e Attestations provide a verifiable record of build conditions, including who built the package and under what circumstances.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTrust verification:\u003c/strong\u003e Consumers of your package can cryptographically verify its authenticity before installation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pipeline-overview\" tabindex=\"-1\"\u003ePipeline overview \u003ca href=\"#pipeline-overview\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEnsuring your code\u0026#39;s integrity and authenticity is necessary. Imagine a pipeline that doesn\u0026#39;t just compile your code but creates a cryptographically verifiable narrative of how, when, and by whom your package was created. Each stage acts as a guardian, checking and documenting the package\u0026#39;s provenance.\u003c/p\u003e\n\u003cp\u003eHere are six stages of a GitLab pipeline that ensure your package is secure and trustworthy:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBuild: Creates a clean, standard package that can be easily shared and installed.\u003c/li\u003e\n\u003cli\u003eSigning: Adds a digital signature that proves the package hasn\u0026#39;t been tampered with since it was created.\u003c/li\u003e\n\u003cli\u003eVerification: Double-checks that the signature is valid and the package meets all our security requirements.\u003c/li\u003e\n\u003cli\u003ePublishing: Uploads the verified package to GitLab\u0026#39;s package registry, making it available for others to use.\u003c/li\u003e\n\u003cli\u003ePublishing Signatures: Makes signatures available for verification.\u003c/li\u003e\n\u003cli\u003eConsumer Verification: Simulates how end users can verify package authenticity.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"complete-pipeline-implementation-setting-up-the-environment\" tabindex=\"-1\"\u003eComplete pipeline implementation: Setting up the environment \u003ca href=\"#complete-pipeline-implementation-setting-up-the-environment\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore we build our package, we need to set up a consistent and secure build environment. This configuration ensures every package is created with the same tools, settings, and security checks.\u003c/p\u003e\n\u003ch3 id=\"environment-configuration\" tabindex=\"-1\"\u003eEnvironment configuration \u003ca href=\"#environment-configuration\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOur pipeline requires specific tools and settings to work correctly.\u003c/p\u003e\n\u003cp\u003ePrimary configurations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython 3.10 for consistent builds\u003c/li\u003e\n\u003cli\u003eCosign 2.2.3 for package signing\u003c/li\u003e\n\u003cli\u003eGitLab package registry integration\u003c/li\u003e\n\u003cli\u003eHardcoded package version for reproducibility\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote about versioning:\u003c/strong\u003e We\u0026#39;ve chosen to use a hardcoded version (\u003ccode\u003e\u0026#34;1.0.0\u0026#34;\u003c/code\u003e) in this example rather than deriving it from git tags or commits. This approach ensures complete reproducibility and makes the pipeline behavior more predictable. In a production environment, you might want to use semantic versioning based on git tags or another versioning strategy that fits your release process.\u003c/p\u003e\n\u003cp\u003eTool requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBasic utilities: \u003ccode\u003ecurl\u003c/code\u003e, \u003ccode\u003ewget\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCosign for cryptographic signing\u003c/li\u003e\n\u003cli\u003ePython packaging tools: \u003ccode\u003ebuild\u003c/code\u003e, \u003ccode\u003etwine\u003c/code\u003e, \u003ccode\u003esetuptools\u003c/code\u003e, \u003ccode\u003ewheel\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"configuration-breakdown\" tabindex=\"-1\"\u003eConfiguration breakdown \u003ca href=\"#configuration-breakdown\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003evariables:\n  PYTHON_VERSION: \u0026#39;3.10\u0026#39;\n  PACKAGE_NAME: ${CI_PROJECT_NAME}\n  PACKAGE_VERSION: \u0026#34;1.0.0\u0026#34;\n  FULCIO_URL: \u0026#39;https://fulcio.sigstore.dev\u0026#39;\n  REKOR_URL: \u0026#39;https://rekor.sigstore.dev\u0026#39;\n  CERTIFICATE_IDENTITY: \u0026#39;https://gitlab.com/${CI_PROJECT_PATH}//.gitlab-ci.yml@refs/heads/${CI_DEFAULT_BRANCH}\u0026#39;\n  CERTIFICATE_OIDC_ISSUER: \u0026#39;https://gitlab.com\u0026#39;\n  PIP_CACHE_DIR: \u0026#34;$CI_PROJECT_DIR/.pip-cache\u0026#34;\n  COSIGN_YES: \u0026#34;true\u0026#34;\n  GENERIC_PACKAGE_BASE_URL: \u0026#34;${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use caching to speed up subsequent builds:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecache:\n  paths:\n    - ${PIP_CACHE_DIR}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"building-crafting-the-package\" tabindex=\"-1\"\u003eBuilding: Crafting the package \u003ca href=\"#building-crafting-the-package\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEvery software journey begins with creation. In our pipeline, the build stage is where raw code transforms into a distributable package, ready to travel across different Python environments.\u003c/p\u003e\n\u003cp\u003eThe build process creates two standardized formats:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea wheel package (.whl) for quick, efficient installation\u003c/li\u003e\n\u003cli\u003ea source distribution (.tar.gz) that carries the complete code\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere\u0026#39;s the build stage implementation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebuild:\n  extends: .python-job\n  stage: build\n  script:\n    - git init\n    - git config --global init.defaultBranch main\n    - git config --global user.email \u0026#34;\u003ca href=\"https://about.gitlab.com/cdn-cgi/l/email-protection\" data-cfemail=\"82e1ebc2e7fae3eff2eee7ace1edef\"\u003e[email protected]\u003c/a\u003e\u0026#34;\n    - git config --global user.name \u0026#34;CI\u0026#34;\n    - git add .\n    - git commit -m \u0026#34;Initial commit\u0026#34;\n    - export NORMALIZED_NAME=$(echo \u0026#34;${CI_PROJECT_NAME}\u0026#34; | tr \u0026#39;-\u0026#39; \u0026#39;_\u0026#39;)\n    - sed -i \u0026#34;s/name = \\\u0026#34;.*\\\u0026#34;/name = \\\u0026#34;${NORMALIZED_NAME}\\\u0026#34;/\u0026#34; pyproject.toml\n    - sed -i \u0026#34;s|\\\u0026#34;Homepage\\\u0026#34; = \\\u0026#34;.*\\\u0026#34;|\\\u0026#34;Homepage\\\u0026#34; = \\\u0026#34;https://gitlab.com/${CI_PROJECT_PATH}\\\u0026#34;|\u0026#34; pyproject.toml\n    - python -m build\n  artifacts:\n    paths:\n      - dist/\n      - pyproject.toml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0026#39;s break down what this build stage does:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInitializes a Git repository (\u003ccode\u003egit init\u003c/code\u003e) and configures it with basic settings\u003c/li\u003e\n\u003cli\u003eNormalizes the package name by converting hyphens to underscores, which is required for Python packaging\u003c/li\u003e\n\u003cli\u003eUpdates the package metadata in \u003ccode\u003epyproject.toml\u003c/code\u003e to match our project settings\u003c/li\u003e\n\u003cli\u003eBuilds both wheel and source distribution packages using \u003ccode\u003epython -m build\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePreserves the built packages and configuration as artifacts for subsequent stages\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"signing-the-digital-notarization\" tabindex=\"-1\"\u003eSigning: The digital notarization \u003ca href=\"#signing-the-digital-notarization\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIf attestation is the package\u0026#39;s biography, signing is its cryptographic seal of authenticity. This is where we transform our package from a mere collection of files into a verified, tamper-evident artifact.\u003c/p\u003e\n\u003cp\u003eThe signing stage uses Cosign to apply a digital signature as an unbreakable seal. This isn\u0026#39;t just a stamp — it\u0026#39;s a complex cryptographic handshake that proves the package\u0026#39;s integrity and origin.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esign:\n  extends: .python+cosign-job\n  stage: sign\n  id_tokens:\n    SIGSTORE_ID_TOKEN:\n      aud: sigstore\n  script:\n    - |\n      for file in dist/*.whl dist/*.tar.gz; do\n        if [ -f \u0026#34;$file\u0026#34; ]; then\n          filename=$(basename \u0026#34;$file\u0026#34;)\n          cosign sign-blob --yes \\\n            --fulcio-url=${FULCIO_URL} \\\n            --rekor-url=${REKOR_URL} \\\n            --oidc-issuer $CI_SERVER_URL \\\n            --identity-token $SIGSTORE_ID_TOKEN \\\n            --output-signature \u0026#34;dist/${filename}.sig\u0026#34; \\\n            --output-certificate \u0026#34;dist/${filename}.crt\u0026#34; \\\n            \u0026#34;$file\u0026#34;\n        fi\n      done\n  artifacts:\n    paths:\n      - dist/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis signing stage performs several crucial operations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eObtains an OIDC token from GitLab for authentication with Sigstore services\u003c/li\u003e\n\u003cli\u003eProcesses each built package (both wheel and source distribution)\u003c/li\u003e\n\u003cli\u003eUses Cosign to create a cryptographic signature (\u003ccode\u003e.sig\u003c/code\u003e) for each package\u003c/li\u003e\n\u003cli\u003eGenerates a certificate (\u003ccode\u003e.crt\u003c/code\u003e) that proves the signature\u0026#39;s authenticity\u003c/li\u003e\n\u003cli\u003eStores both signatures and certificates alongside the packages as artifacts\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"verification-the-security-checkpoint\" tabindex=\"-1\"\u003eVerification: The security checkpoint \u003ca href=\"#verification-the-security-checkpoint\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eVerification is our final quality control gate. It\u0026#39;s not just a check — it\u0026#39;s a security interrogation where every aspect of the package is scrutinized.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003everify:\n  extends: .python+cosign-job\n  stage: verify\n  script:\n    - |\n      failed=0\n      for file in dist/*.whl dist/*.tar.gz; do\n        if [ -f \u0026#34;$file\u0026#34; ]; then\n          filename=$(basename \u0026#34;$file\u0026#34;)\n          if ! cosign verify-blob \\\n            --signature \u0026#34;dist/${filename}.sig\u0026#34; \\\n            --certificate \u0026#34;dist/${filename}.crt\u0026#34; \\\n            --certificate-identity \u0026#34;${CERTIFICATE_IDENTITY}\u0026#34; \\\n            --certificate-oidc-issuer \u0026#34;${CERTIFICATE_OIDC_ISSUER}\u0026#34; \\\n            \u0026#34;$file\u0026#34;; then\n            failed=1\n          fi\n        fi\n      done\n      if [ $failed -eq 1 ]; then\n        exit 1\n      fi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe verification stage implements several security checks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eExamines each package file in the \u003ccode\u003edist\u003c/code\u003e directory\u003c/li\u003e\n\u003cli\u003eUses Cosign to verify the signature matches the package content\u003c/li\u003e\n\u003cli\u003eConfirms the certificate\u0026#39;s identity matches our expected GitLab pipeline identity\u003c/li\u003e\n\u003cli\u003eValidates our trusted OIDC provider issued the certificate\u003c/li\u003e\n\u003cli\u003eFails the entire pipeline if any verification check fails, ensuring only verified packages proceed\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"publishing-the-controlled-release\" tabindex=\"-1\"\u003ePublishing: The controlled release \u003ca href=\"#publishing-the-controlled-release\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePublishing is where we make our verified packages available through GitLab\u0026#39;s package registry. It\u0026#39;s a carefully choreographed release that ensures only verified, authenticated packages reach their destination.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublish:\n  extends: .python-job\n  stage: publish\n  script:\n    - |\n      cat \u0026lt;\u0026lt; EOF \u0026gt; ~/.pypirc\n      [distutils]\n      index-servers = gitlab\n      [gitlab]\n      repository = ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi\n      username = gitlab-ci-token\n      password = ${CI_JOB_TOKEN}\n      EOF\n      TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token \\\n        twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi \\\n        dist/*.whl dist/*.tar.gz\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe publishing stage handles several important tasks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreates a \u003ccode\u003e.pypirc\u003c/code\u003e configuration file with GitLab package registry credentials\u003c/li\u003e\n\u003cli\u003eUses the GitLab CI job token for secure authentication\u003c/li\u003e\n\u003cli\u003eUploads both wheel and source distribution packages to the GitLab PyPI registry\u003c/li\u003e\n\u003cli\u003eMakes the packages available for installation via pip\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"publishing-signatures-making-verification-possible\" tabindex=\"-1\"\u003ePublishing signatures: Making verification possible \u003ca href=\"#publishing-signatures-making-verification-possible\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAfter publishing the packages, we must make their signatures and certificates available for verification. We store these in GitLab\u0026#39;s generic package registry, making them easily accessible to users who want to verify package authenticity.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublish_signatures:\n  extends: .python+cosign-job\n  stage: publish_signatures\n  script:\n    - |\n      for file in dist/*.whl dist/*.tar.gz; do\n        if [ -f \u0026#34;$file\u0026#34; ]; then\n          filename=$(basename \u0026#34;$file\u0026#34;)\n          curl --header \u0026#34;JOB-TOKEN: ${CI_JOB_TOKEN}\u0026#34; \\\n               --fail \\\n               --upload-file \u0026#34;dist/${filename}.sig\u0026#34; \\\n               \u0026#34;${GENERIC_PACKAGE_BASE_URL}/${filename}.sig\u0026#34;\n\n          curl --header \u0026#34;JOB-TOKEN: ${CI_JOB_TOKEN}\u0026#34; \\\n               --fail \\\n               --upload-file \u0026#34;dist/${filename}.crt\u0026#34; \\\n               \u0026#34;${GENERIC_PACKAGE_BASE_URL}/${filename}.crt\u0026#34;\n        fi\n      done\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe signature publishing stage performs these key operations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eProcesses each built package to find its corresponding signature files\u003c/li\u003e\n\u003cli\u003eUses the GitLab API to upload the signature (\u003ccode\u003e.sig\u003c/code\u003e) file to the generic package registry\u003c/li\u003e\n\u003cli\u003eUploads the corresponding certificate (\u003ccode\u003e.crt\u003c/code\u003e) file\u003c/li\u003e\n\u003cli\u003eMakes these verification artifacts available for downstream package consumers\u003c/li\u003e\n\u003cli\u003eUses the same version and package name to maintain the connection between packages and signatures\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"consumer-verification-testing-the-user-experience\" tabindex=\"-1\"\u003eConsumer verification: Testing the user experience \u003ca href=\"#consumer-verification-testing-the-user-experience\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe final stage simulates how end users will verify your package\u0026#39;s authenticity. This stage acts as a final check and a practical example of the verification process.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econsumer_verification:\n  extends: .python+cosign-job\n  stage: consumer_verification\n  script:\n    - |\n      git init\n      git config --global init.defaultBranch main\n      mkdir -p pkg signatures\n\n      pip download --index-url \u0026#34;https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple\u0026#34; \\\n          \u0026#34;${NORMALIZED_NAME}==${PACKAGE_VERSION}\u0026#34; --no-deps -d ./pkg\n\n      pip download --no-binary :all: \\\n          --index-url \u0026#34;https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple\u0026#34; \\\n          \u0026#34;${NORMALIZED_NAME}==${PACKAGE_VERSION}\u0026#34; --no-deps -d ./pkg\n\n      failed=0\n      for file in pkg/*.whl pkg/*.tar.gz; do\n        if [ -f \u0026#34;$file\u0026#34; ]; then\n          filename=$(basename \u0026#34;$file\u0026#34;)\n          sig_url=\u0026#34;${GENERIC_PACKAGE_BASE_URL}/${filename}.sig\u0026#34;\n          cert_url=\u0026#34;${GENERIC_PACKAGE_BASE_URL}/${filename}.crt\u0026#34;\n\n          curl --fail --silent --show-error \\\n               --header \u0026#34;JOB-TOKEN: ${CI_JOB_TOKEN}\u0026#34; \\\n               --output \u0026#34;signatures/${filename}.sig\u0026#34; \\\n               \u0026#34;$sig_url\u0026#34;\n\n          curl --fail --silent --show-error \\\n               --header \u0026#34;JOB-TOKEN: ${CI_JOB_TOKEN}\u0026#34; \\\n               --output \u0026#34;signatures/${filename}.crt\u0026#34; \\\n               \u0026#34;$cert_url\u0026#34;\n\n          if ! cosign verify-blob \\\n            --signature \u0026#34;signatures/${filename}.sig\u0026#34; \\\n            --certificate \u0026#34;signatures/${filename}.crt\u0026#34; \\\n            --certificate-identity \u0026#34;${CERTIFICATE_IDENTITY}\u0026#34; \\\n            --certificate-oidc-issuer \u0026#34;${CERTIFICATE_OIDC_ISSUER}\u0026#34; \\\n            \u0026#34;$file\u0026#34;; then\n            failed=1\n          fi\n        fi\n      done\n\n      if [ $failed -eq 1 ]; then\n        exit 1\n      fi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis consumer verification stage simulates the end-user experience by:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreating a clean environment to test package installation\u003c/li\u003e\n\u003cli\u003eDownloading the published packages from the GitLab PyPI registry\u003c/li\u003e\n\u003cli\u003eRetrieving the corresponding signatures and certificates from the generic package registry\u003c/li\u003e\n\u003cli\u003ePerforming the same verification steps that end users would perform\u003c/li\u003e\n\u003cli\u003eEnsuring the entire process works from a consumer\u0026#39;s perspective\u003c/li\u003e\n\u003cli\u003eFailing the pipeline if any verification step fails, providing an early warning of any issues\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"summary\" tabindex=\"-1\"\u003eSummary \u003ca href=\"#summary\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis comprehensive pipeline provides a secure and reliable way to build, sign, and publish Python packages to GitLab\u0026#39;s package registry. By following these practices and implementing the suggested security measures, you can ensure your packages are appropriately verified and safely distributed to your users.\u003c/p\u003e\n\u003cp\u003eThe pipeline combines modern security practices with efficient automation to create a robust software supply chain. Using Sigstore\u0026#39;s Cosign for signing and attestation, along with GitLab\u0026#39;s built-in security features, you can provide users with trustworthy cryptographically verified packages.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch4 id=\"get-started-on-your-security-journey-today-with-a-free-60-day-trial-of-gitlab-ultimate.\" tabindex=\"-1\"\u003eGet started on your security journey today with a \u003ca href=\"https://gitlab.com/-/trials/new?glm_content=default-saas-trial\u0026amp;glm_source=about.gitlab.com\"\u003efree 60-day trial of GitLab Ultimate\u003c/a\u003e. \u003ca href=\"#get-started-on-your-security-journey-today-with-a-free-60-day-trial-of-gitlab-ultimate.\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/signing_examples.html\"\u003eDocumentation: Use Sigstore for keyless signing and verification\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2023/09/13/keyless-signing-with-cosign/\"\u003eStreamline security with keyless signing and verification in GitLab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/09/04/annotate-container-images-with-build-provenance-using-cosign-in-gitlab-ci-cd/\"\u003eAnnotate container images with build provenance using Cosign in GitLab CI/CD\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-01-21T00:00:00Z",
  "modifiedTime": null
}
