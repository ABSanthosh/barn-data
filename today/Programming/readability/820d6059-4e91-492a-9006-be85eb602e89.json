{
  "id": "820d6059-4e91-492a-9006-be85eb602e89",
  "title": "JSX Over The Wire",
  "link": "https://overreacted.io/jsx-over-the-wire/",
  "description": "Turning your API inside-out.",
  "author": "",
  "published": "Wed, 16 Apr 2025 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 83303,
  "excerpt": "Turning your API inside-out.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "Suppose you have an API route that returns some data as JSON: app.get('/api/likes/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const json = { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes, }; res.json(json); }); You also have a React component that needs that data: function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { let buttonText = 'Like'; if (totalLikeCount \u003e 0) { // e.g. \"Liked by You, Alice, and 13 others\" buttonText = formatLikeText(totalLikeCount, isLikedByUser, friendLikes); } return ( \u003cbutton className={isLikedByUser ? 'liked' : ''}\u003e {buttonText} \u003c/button\u003e ); } How do you get that data into that component? You could pass it from a parent component using some data fetching library: function PostLikeButton({ postId }) { const [json, isLoading] = useData(`/api/likes/${postId}`); // ... return ( \u003cLikeButton totalLikeCount={json.totalLikeCount} isLikedByUser={json.isLikedByUser} friendLikes={json.friendLikes} /\u003e ); } That’s one way of thinking about it. But have another look at your API: app.get('/api/likes/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const json = { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes, }; res.json(json); }); Do these lines remind you of anything? Props. You’re passing props. You just didn’t specify where to. But you already know their final destination—LikeButton. Why not just fill that in? app.get('/api/likes/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const json = ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes} /\u003e ); res.json(json); }); Now the “parent component” of LikeButton is the API itself. Wait, what? Weird, I know. We’re going to worry about whether it’s a good idea later. But for now, notice how this inverts the relationship between components and the API. This is sometimes known as the Hollywood Principle: “Don’t call me, I’ll call you.” Your components don’t call your API. Instead, your API returns your components. Why would you ever want to do that? Part 1: JSON as Components Part 2: Components as JSON Part 3: JSX Over The Wire Part 1: JSON as Components Model, View, ViewModel There is a fundamental tension between how we want to store information and how we want to display it. We generally want to store more things than we display. For example, consider a Like button on a Post. When we store Likes for a given Post, we might want to represent them as a table of Like rows like this: type Like = { createdAt: string, // Timestamp likedById: number, // User ID postId: number // Post ID }; Let’s call this kind of data a “Model”. It represents the raw shape of the data. So our Likes database table might contain data of that shape: [{ createdAt: '2025-04-13T02:04:41.668Z', likedById: 123, postId: 1001 }, { createdAt: '2025-04-13T02:04:42.668Z', likedById: 456, postId: 1001 }, { createdAt: '2025-04-13T02:04:43.668Z', likedById: 789, postId: 1002 }, /* ... */] However, what we want to display to the user is different. What we want to display is the number of Likes for that Post, whether the user has already liked it, and the names of their friends who also liked it. For example, the Like button could appear pressed in (which means that you already liked this post) and say “You, Alice, and 13 others liked this.” Or “Alice, Bob, and 12 others liked this.” type LikeButtonProps = { totalLikeCount: number, isLikedByUser: boolean, friendLikes: string[] } Let’s call this kind of data a “ViewModel”. type ViewModel = LikeButtonProps; A ViewModel represents data in a way that is directly consumable by the UI (i.e the view). It is often significantly different from the raw Model. In our example: ViewModel’s totalLikeCount is aggregated from individual Like models. ViewModel’s isLikedByUser is personalized and depends on the user. ViewModel’s friendLikes is both aggregated and personalized. To calculate it, you’d have to takes the Likes for this post, filter them down to likes from friends, and get the first few friends’ names (which are likely stored in a different table). Clearly, Models will need to turn into ViewModels at some point. The question is where and when this happens in the code, and how that code evolves over time. REST and JSON API The most common way to solve this problem is to expose some kind of a JSON API that the client can hit to assemble the ViewModel. There are different ways to design such an API, but the most common way is what’s usually known as REST. The typical way to approach REST (let’s say we’ve never read this article) is to pick some “Resources”—such as a Post, or a Like—and provide JSON API endpoints that list, create, update, and delete such Resources. Naturally, REST does not specify anything about how you should shape these Resources so there’s a lot of flexibility. Often, you might start by returning the shape of the Model: // GET /api/post/123 { title: 'My Post', content: 'Hello world...', authorId: 123, createdAt: '2025-04-13T02:04:40.668Z' } So far so good. But how would you incorporate Likes into this? Maybe totalLikeCount and isLikedByUser could be a part of the Post Resource: // GET /api/post/123 { title: 'My Post', content: 'Hello world...', authorId: 123, createdAt: '2025-04-13T02:04:40.668Z', totalLikeCount: 13, isLikedByUser: true } Now, should friendLikes also go there? We need this information on the client. // GET /api/post/123 { title: 'My Post', authorId: 123, content: 'Hello world...', createdAt: '2025-04-13T02:04:40.668Z', totalLikeCount: 13, isLikedByUser: true, friendLikes: ['Alice', 'Bob'] } Or are we starting to abuse the notion of a Post by adding too much stuff to it? Okay, how about this, maybe we could offer a separate endpoint for a Post’s Likes: // GET /api/post/123/likes { totalCount: 13, likes: [{ createdAt: '2025-04-13T02:04:41.668Z', likedById: 123, }, { createdAt: '2025-04-13T02:04:42.668Z', likedById: 768, }, /* ... */] } So a Post’s Like becomes its own “Resource”. That’s nice in theory but we’re going to need to know the likers’ names, and we don’t want to make a request for each Like. So we need to “expand” the users here: // GET /api/post/123/likes { totalCount: 13, likes: [{ createdAt: '2025-04-13T02:04:41.668Z', likedBy: { id: 123, firstName: 'Alice', lastName: 'Lovelace' } }, { createdAt: '2025-04-13T02:04:42.668Z', likedBy: { id: 768, firstName: 'Bob', lastName: 'Babbage' } }] } We also “forgot” which of these Likes are from friends. Should we solve this by having a separate /api/post/123/friend-likes endpoint? Or should we order by friends first and include isFriend into the likes array items so we can disambiguate friends from other likes? Or should we add ?filter=friends? Or should we include the friend likes directly into the Post to avoid two API calls? // GET /api/post/123 { title: 'My Post', authorId: 123, content: 'Hello world...', createdAt: '2025-04-13T02:04:40.668Z', totalLikeCount: 13, isLikedByUser: true, friendLikes: [{ createdAt: '2025-04-13T02:04:41.668Z', likedBy: { id: 123, firstName: 'Alice', lastName: 'Lovelace' } }, { createdAt: '2025-04-13T02:04:42.668Z', likedBy: { id: 768, firstName: 'Bob', lastName: 'Babbage' } }] } This seems useful but what if /api/post/123 gets called from other screens that don’t need this information—and you’d rather not slow them down? Maybe there could be an opt-in like /api/post/123?expand=friendLikes? Anyway, the point I’m trying to make here is not that it’s impossible to design a good REST API. The vast majority of apps I’ve seen works this way so it’s at the very least doable. But anyone who designed one and then worked on it for more than a few months knows the drill. Evolving REST endpoints is a pain in the ass. It usually goes like this: Initially, you have to decide how to structure the JSON output. None of the options are clearly better than the rest; mostly you’re just guessing how the app will evolve. The initial decisions tend to settle down after a few back-and-forth iterations… until the next UI redesign which causes ViewModels to have slightly different shapes. The already existing REST endpoints don’t quite cover the new needs. It’s possible to add new REST API endpoints, but at some point you’re not really “supposed to” add more because you already defined all the possible Resources. For example, if /posts/123 exists, you likely won’t add another “get post” API. Now you’re running into issues with calculating and sending either not enough or too much data. You either aggressively “expand” fields in the existing Resources or come up with an elaborate set of conventions for doing it on-demand. Some ViewModels are only needed by a subset of screens but they’re always included in the response because that’s easier than making them configurable. Some screens resort to cobbling their ViewModels together from multiple API calls because no single response contains all the necessary information anymore. Then the design and the functionality of your product changes again. Repeat. There’s clearly some fundamental tension here, but what is causing it? First, note how the shape of the ViewModels is determined by the UI. It’s not a reflection of some platonic idea of a Like; rather, it’s dictated by the design. We want to show “You, Ann, and 13 others liked this”, therefore we need these fields: type LikeButtonProps = { totalLikeCount: number, isLikedByUser: boolean, friendLikes: string[] } If this screen’s design or functionality changes (for example, if you want to show the avatars of your friends who liked the post), the ViewModel will change as well: type LikeButtonProps = { totalLikeCount: number, isLikedByUser: boolean, friendLikes: { firstName: string avatar: string }[] } But here’s the rub. REST (or, rather, how REST is broadly used) encourages you to think in terms of Resources rather than Models or ViewModels. At first, your Resources start out as mirroring Models. But a single Model rarely has enough data for a screen, so you develop ad-hoc conventions for nesting Models in a Resource. However, including all the relevant Models (e.g. all Likes of a Post) is often impossible or impractical, so you start adding ViewModel-ish fields like friendLikes to your Resources. But putting ViewModels in Resources also doesn’t work very well. ViewModels are not abstract concepts like “a post”; each ViewModel describes a specific piece of UI. As a result, the shape of your “Post” Resource grows to encompass the needs of every screen displaying a post. But those needs also change over time, so the “Post” Resource’s shape is at best a compromise between what different screens need now, and at worst a fossilized record of everything they’ve ever needed in the past. Let me put this more bluntly: REST Resources don’t have a firm grounding in the reality. Their shapes are not sufficiently constrained—we’re making up concepts mostly out of thin air. Unlike Models, they’re not grounded in the reality of how the data is stored. And unlike ViewModels, they’re not grounded in the reality of how the data is presented. Unfortunately, nudging them in either direction only makes things worse. If you keep REST Resources close to the Models, you’ll hurt the user experience. Now things that could be fetched in a single request would require a couple or, god forbid, N calls. This is especially noticeable in products from companies where the backend team “hands off” a REST API to the frontend team and takes no feedback. The API may look simple and elegant but it is completely impractical to consume. On the other hand, if you nudge REST Resources to stay closer to the ViewModels, you’re hurting maintainability. ViewModels are fickle! Most ViewModels are going to change the next time the corresponding piece of UI is redesigned. But changing the shape of REST Resources is hard—the same Resources are being fetched by many screens. As a result, their shape gradually drifts away from the needs of the current ViewModels, and becomes difficult to evolve. There’s a reason the backend teams often resist adding UI-specific fields to the response: they’ll likely get stale! This doesn’t necessarily mean that REST itself, as it’s broadly understood, is broken. It can be very nice to use when the Resources are well-defined and their fields are well-chosen. But this often goes against the client’s needs, which is to get all the data for a particular screen. There’s something missing in the middle. We need a translation layer. API for ViewModels There is a way to resolve this tension. You have some latitude with how exactly you could approach it but the main idea is that your client should be able to request all data for a specific screen at once. It’s such a simple idea! Instead of requesting “canonical” REST Resources from the client such as: GET /data/post/123 # Get Post Resource GET /data/post/123/likes # Get Post Likes Resource you request a ViewModel for a specific screen (i.e. a route): GET /screens/post-details/123 # Get ViewModel for the PostDetails screen This data would include everything that screen needs. The difference is subtle but profound. You’re no longer trying to define a universal canonical shape of a Post. Rather, you send whatever data the PostDetails screen needs in order to display its components today. If the PostDetails screen gets deleted, this endpoint gets deleted too. If a different screen wants to display some related information (for example, a PostLikedBy popup), it will gets its own route: GET /screens/post-details/123 # Get ViewModel for the PostDetails screen GET /screens/post-liked-by/123 # Get ViewModel for the PostLikedBy screen Okay, but how does this help? This avoids the trap of “ungrounded” abstraction. The ViewModel interface for every screen precisely specifies the shape of the server response. If you need to change it or fine-tune it, you can do that without affecting any other screens. For example, a PostDetails screen ViewModel might look like this: type PostDetailsViewModel = { postTitle: string, postContent: string, postAuthor: { name: string, avatar: string, id: number }, friendLikes: { totalLikeCount: number, isLikedByUser: boolean, friendLikes: string[] } }; So that’s what the server would return for /screens/post-details/123. Later, if you want to display avatars of friend likes, you’d just add it to that ViewModel: type PostDetailsViewModel = { postTitle: string, postContent: string, postAuthor: { name: string, avatar: string, id: number }, friendLikes: { totalLikeCount: number, isLikedByUser: boolean, friendLikes: { firstName: string avatar: string }[] } } Note that you’d only have to update that screen’s endpoint. You’re no longer forced to balance what one screen needs with what another screen needs. There are no questions like “which Resource does this field belong to?”, or whether it should be “expanded”. If some screen needs more data than others, you can just include more data in that screen’s response—it doesn’t have to be generic or configurable. The shape of the server response is exactly determined by each screen’s needs. This does solve the stated problems with REST. It also introduces a few novel questions: There’s going to be a lot more endpoints than with REST Resources—an endpoint per screen. How will these endpoints be structured and kept maintainable? How do you reuse code between the endpoints? Presumably there would be a lot of duplicated data access and other business logic between those endpoints. How do you convince the backend team to pivot from their REST APIs to this? The last question is probably the first we need to resolve. The backend team will likely have very warranted reservations about this approach. At the very least, if this approach proves terrible, it would be good to have a way to migrate back. Luckily, there’s no need to throw anything away. Backend For Frontend Instead or replacing your existing REST API, you can add a new layer in front of it: // You're adding new screen-specific endpoints... app.get('/screen/post-details/:postId', async (req, res) =\u003e { const [post, friendLikes] = await Promise.all([ // ...which call your existing REST API here fetch(`/api/post/${postId}`).then(r =\u003e r.json()), fetch(`/api/post/${postId}/friend-likes`).then(r =\u003e r.json()), ]); const viewModel = { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; res.json(viewModel); }); This is not a new idea. Such a layer is often called BFF, or Backend for Frontend. In this case, the job of the BFF is to adapt your REST API to returning ViewModels. If some screen needs more data, a BFF lets you serve more data to it without changing your entire data model. It keeps screen-specific changes scoped. Crucially, it lets you deliver all the data any screen needs in a single roundtrip. The BFF doesn’t have to be written in the same language as your REST API. For reasons we’ll get into later, it’s advantageous to write BFF in the same language as your frontend code. You can think of it as a piece of the frontend that happens to run on the server. It’s like the frontend’s “ambassador” to the server. It “adapts” the REST responses into the shape that each screen of the frontend UI actually wants. Although you can get some of the benefits of BFF with client-only per-route loaders like clientLoader in React Router, there’s a lot you unlock by actually deploying this layer on the server close to where the REST endpoints are deployed. For example, even if you do have to make several REST API requests serially one after another to load all the necessary data for a screen, the latency between the BFF and your REST API would be much lower than when making multiple serial requests from the client. If your REST API responses are fast on the internal network, you can cut down literal seconds of what used to be client/sever waterfalls without actually parallelizing the (sometimes inevitable) serial calls. A BFF also lets you apply data transformations before sending data to the client, which can significantly improve performance on low-end client devices. You can even go as far as to cache or persist some computations on the disk, even between different users, since you have access to the disk—and to server caches like Redis. In that sense, a BFF lets a frontend team have their very own little slice of the server. Importantly, a BFF gives you a way to experiment with alternatives to your REST APIs without affecting the client application. For example, if your REST API has no other consumers, you can turn it into an internal microservice and avoid exposing it to the world. Moreover, you could turn it into a data access layer rather than an HTTP service, and simply import that data access layer in-process from your BFF: import { getPost, getFriendLikes } from '@your-company/data-layer'; app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ // Reads from an ORM and applies business logic. getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const viewModel = { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; res.json(viewModel); }); (Of course, this part only works if you can write lower-level backend logic in JS.) This can help you avoid problems like loading the same information many times from the database (no fetch calls means database reads can be batched). It also lets you “drop down” the abstraction level when needed—for example, to run a fine-tuned stored database procedure that isn’t neatly exposed over the REST API. There’s a lot to like about the BFF pattern. It solves quite a few problems but it also raises new questions. For example, how do you organize its code? If each screen is essentially its own API method, how do you avoid duplication of code? And how do you keep your BFF synchronized with data requirements of the front-end side? Let’s try to make some progress on answering those. Composable BFF Suppose you’re adding a new PostList screen. It’s going to render an array of \u003cPostDetails\u003e components, each of which needs the same data as before: type PostDetailsViewModel = { postTitle: string, postContent: string, postAuthor: { name: string, avatar: string, id: number }, friendLikes: { totalLikeCount: number, isLikedByUser: boolean, friendLikes: string[] } }; So the ViewModel for PostList contains an array of PostDetailsViewModel: type PostListViewModel = { posts: PostDetailsViewModel[] }; How would you load the data for PostList? Your first inclination may be to make a series of requests from the client to the existing /screen/post-details/:postId endpoint which already knows how to prepare a ViewModel for a single post. We just need to call it for every post. But wait, this defeats the entire purpose of the BFF! Making many requests for a single screen is inefficient and is precisely the kind of compromise that we’ve been trying to avoid. Instead, we’ll add a new BFF endpoint for the new screen. The new endpoint might initially look like this: import { getPost, getFriendLikes, getRecentPostIds } from '@your-company/data-layer'; app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const viewModel = { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; res.json(viewModel); }); app.get('/screen/post-list', async (req, res) =\u003e { // Grab the recent post IDs const postIds = await getRecentPostIds(); const viewModel = { // For each post ID, load the data in parallel posts: await Promise.all(postIds.map(async postId =\u003e { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const postDetailsViewModel = { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; return postDetailsViewModel; })) }; res.json(viewModel); }); However, note that there’s significant code duplication between the endpoints: import { getPost, getFriendLikes, getRecentPostIds } from '@your-company/data-layer'; app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const viewModel = { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; res.json(viewModel); }); app.get('/screen/post-list', async (req, res) =\u003e { const postIds = await getRecentPostIds(); const viewModel = { posts: await Promise.all(postIds.map(async postId =\u003e { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); const postDetailsViewModel = { postTitle: post.title, postAuthor: post.author, postContent: parseMarkdown(post.content), postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; return postDetailsViewModel; })) }; res.json(viewModel); }); It’s almost like there is a notion of “PostDetails ViewModel” begging to be extracted. This should not be surprising—both screens render the same \u003cPostDetails\u003e component, so they need similar code to load the data for it. Let’s extract a PostDetailsViewModel function: import { getPost, getFriendLikes, getRecentPostIds } from '@your-company/data-layer'; async function PostDetailsViewModel({ postId }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; } app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const viewModel = await PostDetailsViewModel({ postId }); res.json(viewModel); }); app.get('/screen/post-list', async (req, res) =\u003e { const postIds = await getRecentPostIds(); const viewModel = { posts: await Promise.all(postIds.map(postId =\u003e PostDetailsViewModel({ postId }) )) }; res.json(viewModel); }); This makes our BFF endpoints significantly simpler. In fact, we can go a bit further. Look at this part of PostDetailsViewModel: async function PostDetailsViewModel({ postId }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes: { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) } }; } We know that the purpose of the postLikes field is to eventually become props for the LikeButton component—i.e. this field is LikeButton’s ViewModel: function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { // ... } So let’s extract the logic preparing these props into LikeButtonViewModel: import { getPost, getFriendLikes, getRecentPostIds } from '@your-company/data-layer'; async function LikeButtonViewModel({ postId }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e l.firstName) }; } async function PostDetailsViewModel({ postId }) { const [post, postLikes] = await Promise.all([ getPost(postId), // It's fine to getPost() here again. Our data layer deduplicates calls via an in-memory cache. LikeButtonViewModel({ postId }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content), postAuthor: post.author, postLikes }; } Now we have a tree of functions that load data as JSON—our ViewModels. Depending on your background, this might remind you of a few other things. It might remind you of composing Redux reducers out of smaller reducers. It might also remind you of composing GraphQL fragments out of smaller fragments. Or it might remind you of composing React components from other React components. Although the code style is a little verbose now, there is something oddly satisfying in breaking apart a screen’s ViewModel into smaller ViewModels. It feels similar to writing a React component tree, except that we’re decomposing a backend API. It’s like the data has its own shape but it roughly lines up with your React component tree. Let’s see what happens when the UI needs to evolve. Evolving a ViewModel Suppose the UI design changes, and we want to display friends’ avatars too: type LikeButtonProps = { totalLikeCount: number, isLikedByUser: boolean, friendLikes: { firstName: string avatar: string }[] } Assuming we use TypeScript, we’ll immediately get a type error in the ViewModel: async function LikeButtonViewModel( { postId } : { postId: number } ) : LikeButtonProps { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, // 🔴 Type 'string[]' is not assignable to type '{ firstName: string; avatar: string; }[]'. friendLikes: friendLikes.likes.map(l =\u003e l.firstName) }; } Let’s fix it: async function LikeButtonViewModel( { postId } : { postId: number } ) : LikeButtonProps { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: l.avatar, })) }; } Now the BFF response for every screen that includes a LikeButton ViewModel will use the new friendLikes format, which is exactly what the LikeButton React component wants. There are no further changes to make—it just works. We know that it works because LikeButtonViewModel is the only place generating props for a LikeButton, no matter which screen we’re requesting from the BFF. (For now assume that this is true; we’re still yet to decide how exactly to tie them.) I’d like to call attention to the previous fact because this is quite profound. When was the last time you could clearly trace the correspondence between a deeply nested piece of server code generating a fragment of data, and a deeply nested piece of the client code consuming that data? We’re clearly onto something. ViewModel Parameters You might have noticed that ViewModel functions can take parameters. Importantly, these parameters can be specified by the “parent” ViewModel functions and plumbed down—so the client doesn’t need to be aware of them. For example, suppose you wanted to make the Post List page only display the first paragraph of every post’s content. Let’s add a parameter to its ViewModel: async function PostDetailsViewModel({ postId, truncateContent }) { const [post, postLikes] = await Promise.all([ getPost(postId), LikeButtonViewModel({ postId }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined }), postAuthor: post.author, postLikes }; } app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const viewModel = await PostDetailsViewModel({ postId, truncateContent: false }); res.json(viewModel); }); app.get('/screen/post-list', async (req, res) =\u003e { const postIds = await getRecentPostIds(); const viewModel = { posts: await Promise.all(postIds.map(postId =\u003e PostDetailsViewModel({ postId, truncateContent: true }) )) }; res.json(viewModel); }); The JSON response for the post-details endpoint still includes the entire posts, but the post-list JSON endpoint will now only serve their abridged summaries. This is a view model concern, and now we have a natural place to express it in code. Plumbing ViewModel Parameters Next, suppose you wanted to include avatars only on the Details screen. Let’s edit LikeButtonViewModel to take and respect an includeAvatars parameter: async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, })) }; } Now you can plumb it down all the way from the BFF endpoints: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const [post, postLikes] = await Promise.all([ getPost(postId), LikeButtonViewModel({ postId, includeAvatars }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined }), postAuthor: post.author, postLikes }; } app.get('/screen/post-details/:postId', async (req, res) =\u003e { const postId = req.params.postId; const viewModel = await PostDetailsViewModel({ postId, truncateContent: false, includeAvatars: true }); res.json(viewModel); }); app.get('/screen/post-list', async (req, res) =\u003e { const postIds = await getRecentPostIds(); const viewModel = { posts: await Promise.all(postIds.map(postId =\u003e PostDetailsViewModel({ postId, truncateContent: true, includeAvatars: false }) )) }; res.json(viewModel); }); Again, the client doesn’t pass ad-hoc parameters like ?includeAvatars=true to the server to ensure that the avatars are included in the JSON response. Instead, the post-list BFF endpoint itself knows a Post List shouldn’t include avatars, so it can pass includeAvatars: false to PostDetailsViewModel, which plumbs it down to LikeButtonViewModel. The client code doesn’t need to be aware of the server logic at all—all it cares about is that it gets the props that it wants. For the case when we do show avatars of friends, we might want to show five rather than two. We can make that change directly in LikeButtonViewModel: async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, })) }; } Since the LikeButtonViewModel function exists solely to generate the LikeButton props, adding more presentational logic here feels natural. It’s a view model, right? If another view wanted to show a different number of avatars, it could do that. Unlike with REST, there is no canonical notion of a “post”—so any UI can specify exactly the data it needs, from a screen all the way down to a button. Our ViewModels evolve in the exact lockstep with the needs of the client. Composing ViewModels Something interesting is taking shape. We’ve started to split our BFF endpoints into units of reusable logic, and we’ve found that these units let us encapsulate data loading in a similar way as we’ve been encapsulating the user interface. If you squint at ViewModels, you might even see some parallels to components. And yet the end result of the ViewModel tree is not a UI tree—it’s just JSON. // GET /screen/post-list { /* Begin screen/post-list ViewModel */ posts: [{ /* Begin PostDetailsViewModel */ postTitle: \"JSX Over The Wire\", postAuthor: \"Dan\", postContent: \"Suppose you have an API route that returns some data as JSON.\", postLikes: { /* Begin LikeButtonViewModel */ totalLikeCount: 8, isLikedByUser: false, friendLikes: [{ firstName: \"Alice\" }, { firstName: \"Bob\" }] /* End LikeButtonViewModel */ } /* End PostDetailsViewModel */ }, { /* Begin PostDetailsViewModel */ postTitle: \"React for Two Computers\", postAuthor: \"Dan\", postContent: \"I’ve been trying to write this post at least a dozen times.\", postLikes: { /* Begin LikeButtonViewModel */ totalLikeCount: 13, isLikedByUser: true, friendLikes: [{ firstName: \"Bob\" }] /* End LikeButtonViewModel */ } /* End PostDetailsViewModel */ }] } But what should we do with that JSON? In the end, somehow we want the props generated by LikeButtonViewModel to end up in the LikeButton component. Likewise, somehow we want the props generated by PostDetailsViewModel to get to the PostDetails component. We don’t want to generate a huge ViewModel tree of JSON just to manually plumb every piece of it down exactly to the component that needs that ViewModel’s data. We’re building two parallel hierarchies in the two worlds. But these worlds are not connected yet. Something is missing. Recap: JSON as Components For any UI, the data begins its life as Models and ends its life as ViewModels. The transformation between Models and ViewModels has to happen somewhere. The shape of ViewModels is fully dictated by the design of our user interface. This means that they will evolve over time together with our designs. Also, different screens need different ViewModels aggregated from the same underlying Models. Modeling data from the server as REST Resources creates a tension. If REST Resources are close to raw Models, it may require multiple roundtrips and complex ad-hoc conventions to obtain the necessary ViewModels for a screen. If REST Resources are close to ViewModels, they get too coupled to the initial screens they were designed to represent, and don’t evolve together with the needs of the client. We can resolve this tension by creating another layer—a Backend For Frontend (BFF). The job of the BFF is to translate the needs of the client (“give me data for this screen”) to REST calls on the backend. A BFF can also evolve beyond being a facade for REST, and instead load data directly using an in-process data layer. Since the BFF’s job is to return all the data needed for each screen as a piece of JSON, it is natural to split up the data loading logic into reusable units. A screen’s ViewModel can be decomposed into a tree of ViewModels, corresponding to the pieces of server data that different components will want to receive on the client. These individual ViewModels can then be recombined and composed together. These ViewModel functions can pass information to each other. This lets us customize the JSON we’re sending depending on the screen. Unlike with REST, we’re no longer trying to design canonical shapes like a “a post object” used throughout all responses. At any point, we can diverge and serve different ViewModels for the same information to different screens—whatever they want. These ViewModels are view models. They can—should?—have presentation logic. We’re beginning to realize that ViewModels form a very similar structure to React components. ViewModels are like components, but for generating JSON. However, we still haven’t figured out how to actually pass the JSON they’re generating on the server to the components that need it on the client. It’s also annoying to deal with two parallel hierarchies. We’re onto something, but we’re missing something. What are we missing? Part 2: Components as JSON HTML, SSI, and CGI JSON, MVVM, BFF, what the hell was that?! What an incredibly overengineered way to make a website. These React complexity peddlers are so out of touch. If only they knew the history. Back in my days, we’d just write a bit of HTML and call it a day. My index.html homepage would look like this: \u003chtml\u003e \u003cbody\u003e \u003ch1\u003eWelcome to my blog!\u003c/h1\u003e \u003ch2\u003eLatest posts\u003c/h2\u003e \u003ch3\u003e \u003ca href=\"/jsx-over-the-wire.html\"\u003e JSX Over The Wire \u003c/a\u003e \u003c/h3\u003e \u003cp\u003e Suppose you have an API route that returns some data as JSON. [...] \u003c/p\u003e \u003ch3\u003e \u003ca href=\"/react-for-two-computers.html\"\u003e React for Two Computers \u003c/a\u003e \u003c/h3\u003e \u003cp\u003e I’ve been trying to write this post at least a dozen times. [...] \u003c/p\u003e ... \u003c/body\u003e \u003c/html\u003e Then my jsx-over-the-wire.html post details page would look like this: \u003chtml\u003e \u003cbody\u003e \u003ch1\u003eJSX Over The Wire\u003c/h1\u003e \u003cp\u003e Suppose you have an API route that returns some data as JSON. \u003c/p\u003e ... \u003c/body\u003e \u003c/html\u003e I’d put these files on a box with Apache and that would be it! Now suppose I wanted to add a footer to all my pages. That couldn’t be easier. First, let me create a file called includes/footer.html with my footer: \u003cmarquee\u003e \u003ca href=\"/\"\u003eoverreacted\u003c/a\u003e \u003c/marquee\u003e Now I can include my footer on any page with Server-Side Includes (SSI): \u003chtml\u003e \u003cbody\u003e \u003ch1\u003eWelcome to my blog!\u003c/h1\u003e \u003ch2\u003eLatest posts\u003c/h2\u003e ... \u003c!--#include virtual=\"/includes/footer.html\" --\u003e \u003c/body\u003e \u003c/html\u003e In fact, I don’t want to copy and paste the first paragraph of each blog post into my index.html file so I might use SSI together with CGI to generate my index page: \u003chtml\u003e \u003cbody\u003e \u003ch1\u003eWelcome to my blog!\u003c/h1\u003e \u003ch2\u003eLatest posts\u003c/h2\u003e \u003c!--#include virtual=\"/cgi-bin/post-details.cgi?jsx-over-the-wire\u0026truncateContent=true\" --\u003e \u003c!--#include virtual=\"/cgi-bin/post-details.cgi?react-for-two-computers\u0026truncateContent=true\" --\u003e \u003c!--#include virtual=\"/includes/footer.html\" --\u003e \u003c/body\u003e \u003c/html\u003e Likewise, the details page will delegate to the same post-details.cgi script: \u003chtml\u003e \u003cbody\u003e \u003c!--#include virtual=\"/cgi-bin/post-details.cgi?jsx-over-the-wire\u0026truncateContent=false\" --\u003e \u003c!--#include virtual=\"/includes/footer.html\" --\u003e \u003c/body\u003e \u003c/html\u003e Finally, the post-details.cgi script might talk to the database: #!/bin/sh echo \"Content-type: text/html\" echo \"\" POST_ID=\"$(echo \"$QUERY_STRING\" | cut -d'\u0026' -f1 | tr -cd '[:alnum:]._-')\" TRUNCATE=\"$(echo \"$QUERY_STRING\" | grep -c \"truncateContent=true\")\" TITLE=$(mysql -u admin -p'password' -D blog --skip-column-names -e \\ \"SELECT title FROM posts WHERE url='$POST_ID'\") CONTENT=$(mysql -u admin -p'password' -D blog --skip-column-names -e \\ \"SELECT content FROM posts WHERE url='$POST_ID'\") if [ \"$TRUNCATE\" = \"1\" ]; then FIRST_PARAGRAPH=\"$(printf \"%s\" \"$CONTENT\" | sed '/^$/q')\" echo \"\u003ch3\u003e\u003ca href=\\\"/$POST_ID.html\\\"\u003e$TITLE\u003c/a\u003e\u003c/h3\u003e\" echo \"\u003cp\u003e$FIRST_PARAGRAPH [...]\u003c/p\u003e\" else echo \"\u003ch1\u003e$TITLE\u003c/h1\u003e\" echo \"\u003cp\u003e\" echo \"$CONTENT\" echo \"\u003c/p\u003e\" fi We’re in the nineties, okay? So far everything is very simple, even if a bit tedious to write. What we have here is a server that returns all the data necessary for any given screen in one roundtrip. (Hmm…) Of course, different screens may need the same data, and we don’t want to duplicate the logic. Luckily, we can reuse dynamic includes such as post-details.cgi. We can even pass parameters to them like truncateContent. The most annoying thing about this code is that working in Bash is really not for the faint-hearted (i.e. not for me). Let’s see if we can improve on that part. PHP and XHP We could translate this entire example to old school PHP, which gives us better control flow, function calls, variables, and so on. However, I want to skip ahead. No, not to the modern PHP MVC frameworks. I want to skip ahead to XHP. You see, the problem with the early PHP programs was that they relied on string manipulation of HTML. In that sense the PHP version doesn’t improve by much: if ($truncate) { $splitContent = explode(\"\\n\\n\", $content); $firstParagraph = $splitContent[0]; echo \"\u003ch3\u003e\u003ca href=\\\"/$postId.php\\\"\u003e$title\u003c/a\u003e\u003c/h3\u003e\"; echo \"\u003cp\u003e$firstParagraph [...]\u003c/p\u003e\"; } else { echo \"\u003ch1\u003e$title\u003c/h1\u003e\"; echo \"\u003cp\u003e$content\u003c/p\u003e\"; } Manipulating HTML as strings leads to code that’s tangled, insecure, and difficult to maintain. Most people in the web development community took that as a signal to embrace Rails-style MVC where all the HTML was safely moved out of the code into separate files called templates (and all the data fetching moved to controllers). However, that’s not what happened at Facebook. At Facebook, they had a different idea. The problem with PHP, said Facebook engineers, was not the manipulation of markup per se. What was bad is unprincipled manipulation of markup, i.e. treating markup as a plain string. Markup has a certain shape to it—stuff contained in other stuff. What we need is a way to build and manipulate that markup without accidentally destroying its contents or interpolating unsafe content into it: if ($truncate) { $splitContent = explode(\"\\n\\n\", $content); $firstParagraph = $splitContent[0]; echo \u003cx:frag\u003e \u003ch3\u003e\u003ca href={\"/{$postId}.php\"}\u003e{$title}\u003c/a\u003e\u003c/h3\u003e \u003cp\u003e{$firstParagraph} [...]\u003c/p\u003e \u003c/x:frag\u003e; } else { echo \u003cx:frag\u003e \u003ch1\u003e{$title}\u003c/h1\u003e \u003cp\u003e{$content}\u003c/p\u003e \u003c/x:frag\u003e; } These tags are not strings of HTML! They’re objects than can be turned into HTML. Now that we’ve moved markup into our code in a maintainable way, we can create our own abstractions. For example, we can define our own \u003cui:post-details\u003e: class :ui:post-details extends :x:element { protected function render(): XHPRoot { if ($this-\u003e:truncateContent) { $splitContent = explode(\"\\n\\n\", $this-\u003e:content); $firstParagraph = $splitContent[0]; return \u003cx:frag\u003e \u003ch3\u003e\u003ca href={\"/{$postId}.php\"}\u003e{$this-\u003e:title}\u003c/a\u003e\u003c/h3\u003e \u003cp\u003e{$firstParagraph} [...]\u003c/p\u003e \u003c/x:frag\u003e; } else { return \u003cx:frag\u003e \u003ch1\u003e{$this-\u003e:title}\u003c/h1\u003e \u003cp\u003e{$this-\u003e:content}\u003c/p\u003e \u003c/x:frag\u003e; } } } And then we can render it to the page: echo \u003cui:post-details postId=\"jsx-over-the-wire\" truncateContent={true} title=\"JSX Over The Wire\" content=\"Suppose you have an API route that returns some data...\" /\u003e; In fact, we can build an entire web application this way. Tags render other tags, which render other tags, and so on. By eschewing the Rails-style MVC model, we’ve accidentally discovered a much older principle: function composition. One downside of XHP is that it isn’t very well-suited to client interactivity. Since XHP executes on a server that emits HTML, the most that you can do relatively seamlessly is to replace parts of an existing markup with the newly generated HTML markup from the server by updating innerHTML of some DOM node. Replacing innerHTML wasn’t working out particularly well—especially for the highly interative Ads product—which made an engineer (who was not me, by the way) wonder whether it’s possible to run an XHP-style “tags render other tags” paradigm directly on the client computer without losing state between the re-renders. As you might gave guessed, this led to the invention of JSX and React. Who cares about React though? We’re here to shill XHP. Async XHP Earlier, \u003cui:post-details\u003e got title and content from the calling code: echo \u003cui:post-details postId=\"jsx-over-the-wire\" truncateContent={true} title=\"JSX Over The Wire\" content=\"Suppose you have an API route that returns some data...\" /\u003e; It was not reading title or content on its own—after all, reading them from a database is (ideally) an asynchronous operation, while XHP tags are synchronous. Were. At some point, engineers at Facebook realized that XHP tags would be a lot more powerful if they could load their own data. Async XHP tags were born: class :ui:post-details extends :x:element { use XHPAsync; protected async function asyncRender(): Awaitable\u003cXHPRoot\u003e { $post = await loadPost($this-\u003e:postId); $title = $post-\u003etitle; $content = $post-\u003econtent; // ... } } Now the \u003cui:post-details\u003e can load its own data based on postId alone: class :ui:post-list extends :x:element { protected function render(): XHPRoot { return \u003cx:frag\u003e \u003cui:post-details postId=\"jsx-over-the-wire\" truncateContent={true} /\u003e \u003cui:post-details postId=\"react-for-two-computers\" truncateContent={true} /\u003e ... \u003c/x:frag\u003e; } } This approach lets you write the entire UI as asynchronous tags rendering other asynchronous tags—until the final HTML is generated. It’s a powerful way to think about UI and data. It lets you write self-contained components that load their own data, and then plug those components anywhere in the tree with a one-liner. And since XHP tags run on the server, the entire screen is resolved in a single roundtrip. \u003cui:post-list /\u003e // An entire page of HTML I need to emphasize this again. Async XHP allowed self-contained components that load their own data — but! — displaying a screen took a single client/server roundtrip. There aren’t many UI frameworks that satisfy both of these points. If you’re making a similar framework, there’s a few details you should think about: You want the siblings to be resolved in parallel. For example, the two \u003cui:post-details\u003e above should loadPost around the same time. Async XHP did this. You also need some way to unblock the rest of the page if a particular branch of the tree is taking too long. Facebook had a BigPipe “pagelet” system that flushes the tree “in parts” with explicitly designed loading states acting as the seams. Ideally, you want a data access layer that’s able to batch reads and share an in-memory cache across different parts of the request. This ensures that even if tags deeper in the tree start “fetching” later than their parents, you’re utilizing both CPU and IO well—there are always some tags to render while waiting for the DB. Overall, async XHP was an incredibly productive mental model to work with—as long as your app was not very interactive. Unfortunately, for highly interactive apps, emitting HTML is not enough. You need to be able to navigate, handle mutations, and refresh content without losing the client-side state. Since XHP targeted HTML, it was a poor fit for rich interfaces, and React gradually took over. Still, as interfaces were being converted to React, there was a noticeable loss in conceptual simplicity. The UI and the data that it needs—two things that are so naturally described together—were being pulled apart into separate codebases. GraphQL with Relay were somewhat bridging that gap and contributed some very important innovations, but using them never felt as direct as writing async XHP. Native Templates XHP had an unlikely comeback at Facebook. The mental model it offered was so productive that people didn’t just want to write web interfaces with it. They also wanted to make native apps with it. Think about it. This piece of XHP is an object: \u003cx:frag\u003e \u003ch1\u003e{$this-\u003e:title}\u003c/h1\u003e \u003cp\u003e{$this-\u003e:content}\u003c/p\u003e \u003c/x:frag\u003e Yes, it can be turned into a piece of HTML: \u003ch1\u003eJSX Over The Wire\u003c/h1\u003e \u003cp\u003eSuppose you have an API route that returns some data as JSON\u003c/p\u003e But it could also be turned into another representation, such as JSON: { type: 'x:frag', props: { children: [{ type: 'h1', props: { children: 'JSX Over The Wire' } }, { type: 'p', props: { children: 'Suppose you have an API route that returns some data as JSON' } }] } } There’s nothing that actually constrains you to the primitives available in HTML. For example, \u003cui:post-details\u003e could have been emitting iOS views instead: \u003cx:frag\u003e \u003cios:UITextView\u003e{$this-\u003e:title}\u003c/ios:UITextView\u003e \u003cios:UITextView\u003e{$this-\u003e:content}\u003c/ios:UITextView\u003e \u003c/x:frag\u003e These tags could be transported as JSON over the network to a native iOS app that would read that JSON and construct a native iOS view hierarchy from these tags. { type: 'x:frag', props: { children: [{ type: 'ios:UITextView', props: { children: 'JSX Over The Wire' } }, { type: 'ios:UITextView', props: { children: 'Suppose you have an API route that returns some data as JSON' } }] } } Meanwhile, on the server, you can define your own tags that render those tags: class :ui:post-list extends :x:element { protected function render(): XHPRoot { return \u003cx:frag\u003e \u003cui:post-details postId=\"jsx-over-the-wire\" truncateContent={true} /\u003e \u003cui:post-details postId=\"react-for-two-computers\" truncateContent={true} /\u003e ... \u003c/x:frag\u003e } } In other words, you’d have a server endpoint that returns the entire data that any particular screen needs in a single roundtrip. Where the “data” is the native UI. \u003cui:post-list /\u003e // A screen of iOS components You might think this wouldn’t work because a native app can’t rely on a backend in the critical path. However, that’s a misunderstanding of the approach. All you need to ensure is that you request more UI in the same situations as when you would make an API call, and not more often. You’ll also want to have a fallback UI (like a spinner) available instantly just like when making an API call. In fact, you can even bundle the JSON for some of the initial screens directly within your app’s binary. In practice, system components like ios:UITextView are a bit too low-level to be good primitives for this kind of format. You really want to have a good “palette” of highly interactive primitives since you want some interactions to “skip the server” and be entirely local. For example, you might implement an ios:ColorPicker primitive in the native code so that it follows your finger’s movement, but persist the chosen color using a call to the API that will serve you the next screen as JSON. Also, if you made the primitives platform-agnostic (which Facebook did), you could use the same server codebase to assemble screens for both iOS and Android: \u003cnt:flexbox flex-direction=\"column\"\u003e \u003cnt:text font-size={24} font-weight={FontWeight::BOLD}\u003e {$this-\u003e:title} \u003c/nt:text\u003e \u003cnt:text font-size={18}\u003e {$this-\u003e:content} \u003c/nt:text\u003e \u003c/nt:flexbox\u003e Okay, returning an entire screen as JSON, has anyone done this before? SDUI This is not a novel idea. This is not even a controversial idea. You’ve heard of HTML, right? This is like HTML, but with your design system. Imagine an API endpoint that returns some UI as JSON. Let’s use the JSX syntax: app.get('/app/profile/:personId', async (req, res) =\u003e { const [person, featureFlags] = await Promise.all([ findPerson(req.params.personId), getFeatureFlags(req.user.id) ]); const json = ( \u003cPage title={`${person.firstName}'s Profile`}\u003e \u003cHeader\u003e \u003cAvatar src={person.avatarUrl} /\u003e {person.isPremium \u0026\u0026 \u003cPremiumBadge /\u003e} \u003c/Header\u003e \u003cLayout columns={featureFlags.includes('TWO_COL_LAYOUT') ? 2 : 1}\u003e \u003cPanel title=\"User Info\"\u003e \u003cUserDetails user={person} /\u003e {req.user.id === person.id \u0026\u0026 \u003cEditButton /\u003e} \u003c/Panel\u003e \u003cPanel title=\"Activity\"\u003e \u003cActivityFeed userId={person.id} limit={3} /\u003e \u003c/Panel\u003e \u003c/Layout\u003e \u003c/Page\u003e ); res.json(json); } But since you’re essentially coding an API endpoint, you can do anything your API can do—check the feature flags, run server-only logic, read from the data layer. Again, this is not a new idea. In fact, it’s how many of the top native apps are built. Instagram does this, Airbnb does this, Uber does this, Reddit does this, etc. These companies use in-house frameworks that implement this pattern. Many web developers are completely unaware of this pattern which is ironic because the pattern is incredibly “webby”. In the native sphere, the pattern is known as “SDUI”—“server driven UI”. This sounds fancy but essentially it’s just JSON endpoints that return UI trees: // /app/profile/123 { type: \"Page\", props: { title: \"Jae's Profile\", children: [{ type: \"Header\", props: { children: [{ type: \"Avatar\", props: { src: \"https://example.com/avatar.jpg\" } }, { type: \"PremiumBadge\", props: {}, }] } }, { type: \"Layout\", props: { columns: 2, children: [ // ... ] } }] } } Then, on the native side, you have some concrete implementations of those primitives—Page, Header, Avatar, PremiumBadge, Layout, and so on. Ultimately, this feels like passing props from the server to the client. So if we ever find ourselves in a situation where we have a bunch of data prepared on the server, and we need to find a good way to pass pieces of that data to a bunch of functions declared on the client, a format like this might turn out to be handy. Let’s keep that in mind. Recap: Components as JSON From the beginning of time, making web apps involved responding to request for a specific screen with all the data needed for that screen. (HTML is data, too.) From the beginning of time, people looked for ways to make the generation of that “data” dynamic, to split it into reusable logic, and to pass parameters to that logic. In the early days of the web, it was common to compose HTML by string manipulation. Unfortunately, it was easy to mess up and led to many issues. This led many in the web community to banish markup to templates. But at Facebook, XHP proposed another approach: markup that produces objects. It turns out that making markup a first-class coding primitive naturally leads to tags “returning” other tags—instead of MVC, we got functional composition. XHP evolved into Async XHP, which allowed to keep the logic for rendering some UI close to the logic for loading the data it needs. This was extremely powerful. Unfortunately, producing HTML as the primary output format is a dead end for interactive applications. You can’t “refresh” HTML in-place without blowing away the state, and state is important. However, nothing actually constraints us to HTML. If tags are objects, they can be sent as JSON. Many of the most successful native apps are built this paradigm. (And if you need HTML, you can always turn JSON into HTML later on.) Returning a tag of client primitives as a JSON tree is a nice way to represent “passing props” to the client. Part 3: JSX Over The Wire What We’re Building So far, we’ve explored two separate lines of thought: Directly calling REST APIs from the client layer ignores the realities of how user interfaces evolve. We can solve this by adding a new backend layer that assembles the data on the server according to what each screen needs. This layer can be split into functions that each specify how to load data for a particular part of the screen. Then these functions can be composed together. However, we’re not sure how to actually tie those functions to the components whose props they are preparing. We can also start from plain HTML and “server includes”. If we avoid early MVC-ification and instead explore treating markup as objects, we’ll eventually invent the concept of asynchronous tags that load their own data and return more tags. This approach is very powerful because it lets us build self-contained components without causing multiple client/server roundtrips for fetching a single screen. Emitting HTML as the only target format is a dead end, but as proven by many top native applications using this approach, emitting JSON retains all the benefits. All you need is a set of client-side primitives that can be composed from the server. It turns out that these are two different ways to talk about the same thing. Ultimately, all we want is a system with these five properties: Dan’s Async UI Framework Checklist Our system lets us split a user interface into rich, interactive components. Components should have a direct connection with the logic that specifies how their server data is computed. If a component receives some information from the server, you should be a single Ctrl+Click or “Find All References” away from every place on the server where that particular component’s props are being calculated. It should be straightforward to change which data is received by which component. There should be a way to make pieces of UI truly self-contained—including their server data dependencies and corresponding server logic. You should be able to nest a piece of UI inside another piece of UI without worrying what data it needs. A navigation to a new screen should be possible to complete in one client/server roundtrip. Even if you have hundreds of components that each want to load some data, from the client’s perspective, a screen should arrive as a single response. In fact, we’d like our system to stand in the way of creating client/server waterfalls. We’d like our system to fully support rich interactivity. This means that, even if some parts of it run on the server, it is unacceptable to require full-page refreshes on navigation or after a mutation. In fact, the system should support in-place refreshing of server data directly within an interactive tree. A component should be able to “receive new props” from the server without losing any client state. Do you know any such systems? (Try scoring the frameworks you know.) If not, let’s invent one right now. ViewModels, Revisited Let’s get back to the last version of LikeButtonViewModel from earlier: async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return { totalLikeCount: post.totalLikeCount, isLikedByUser: post.isLikedByUser, friendLikes: friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, })) }; } This function is a slice of the backend that prepares the props for the LikeButton: { totalLikeCount: 8, isLikedByUser: false, friendLikes: [{ firstName: 'Alice', avatar: 'https://example.com/alice.jpg' }, { firstName: 'Bob', avatar: 'https://example.com/bob.jpg' }] } Eventually we were hoping that the LikeButton will receive these props: function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { // ... } However, we haven’t come up with any mechanism to connect the two sides yet. Who’s gonna pass the JSON returned by the LikeButtonViewModel to the LikeButton component? How do we tie the ViewModels to their components? What if we took a page out of SDUI and expressed that by returning a tag: async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, }))} /\u003e ); } As we know from earlier, we can represent this JSX as a tree of JSON. In fact, it’s almost like the original JSON, but now it specifies the receiving component: { type: \"LikeButton\", props: { totalLikeCount: 8, isLikedByUser: false, friendLikes: [{ firstName: 'Alice', avatar: 'https://example.com/alice.jpg' }, { firstName: 'Bob', avatar: 'https://example.com/bob.jpg' }] } } Then React on the client would know to pass these props to the LikeButton: function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { // ... } And so we’ve finally stitched the ViewModel and its component together! We’ve tied the code generating the props with the code consuming those props. Now our ViewModel and our component are a Ctrl+Click away from each other. Since JSX expressions are typechecked, we also get full typechecking for free. Have a look at the complete picture: async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, }))} /\u003e ); } function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { let buttonText = 'Like'; if (totalLikeCount \u003e 0) { // e.g. \"Liked by You, Alice, and 13 others\" buttonText = formatLikeText(totalLikeCount, isLikedByUser, friendLikes); } return ( \u003cbutton className={isLikedByUser ? 'liked' : ''}\u003e {buttonText} \u003c/button\u003e ); } Our ViewModel is just like an Async XHP tag, passing some information to our own \u003cLikeButton\u003e primitive that lives on client (just like in SDUI). Together, they represent a self-contained piece of UI that knows how to load its own data. Let’s do this again with another ViewModel. Let’s Do This Again Now let’s revisit the PostDetailsViewModel from this section: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const [post, postLikes] = await Promise.all([ getPost(postId), LikeButtonViewModel({ postId, includeAvatars }), ]); return { postTitle: post.title, postContent: parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined }), postAuthor: post.author, postLikes }; } We’ve never explicitly written it down, but suppose that there was a matching PostDetails component that can take that JSON and actually render the post: function PostDetails({ postTitle, postContent, postAuthor, postLikes, }) { // ... } Let’s connect them together. First, let’s change PostDetailsViewModel to return a PostDetails tag: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const [post, postLikes] = await Promise.all([ getPost(postId), LikeButtonViewModel({ postId, includeAvatars }), ]); return ( \u003cPostDetails postTitle={post.title} postContent={parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined })} postAuthor={post.author} postLikes={postLikes} /\u003e ); } Now the JSON it returns will be wrapped into a PostDetails JSX element: { type: \"PostDetails\", props: { postTitle: \"JSX Over The Wire\", postAuthor: \"Dan\", postContent: \"Suppose you have an API route that returns some data as JSON.\", postLikes: { type: \"LikeButton\", props: { totalLikeCount: 8, isLikedByUser: false, friendLikes: [{ firstName: \"Alice\" }, { firstName: \"Bob\" }] } } } } On the client, React will take these props and pass them to PostDetails: function PostDetails({ postTitle, postContent, postAuthor, postLikes, }) { return ( \u003carticle\u003e \u003ch1\u003e{postTitle}\u003c/h1\u003e \u003cdiv dangerouslySetInnerHTML={{ __html: postContent }} /\u003e \u003cp\u003eby {postAuthor.name}\u003c/p\u003e \u003csection\u003e {postLikes} \u003c/section\u003e \u003c/article\u003e ); } And that connects the ViewModel with its component! Composing ViewModels, Revisited Notice how postLikes in the last example is rendered directly into UI: \u003csection\u003e {postLikes} \u003c/section\u003e We can do this because it’s the \u003cLikeButton\u003e with its props already preconfigured by LikeButtonViewModel. It was right here in the JSON: { type: \"PostDetails\", props: { // ... postLikes: { type: \"LikeButton\", props: { totalLikeCount: 8, // ... } } } } You might recall that we obtained it by calling LikeButtonViewModel: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const [post, postLikes] = await Promise.all([ getPost(postId), LikeButtonViewModel({ postId, includeAvatars }), ]); // ... However, having ViewModels manually call other ViewModels inside Promise.all quickly gets very tedious. So we’ll adopt a new convention. Let’s assume that a ViewModel can embed another ViewModel by returning a JSX tag. This will let us clean up the code quite a bit: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const post = await getPost(postId); return ( \u003cPostDetails postTitle={post.title} postContent={parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined })} postAuthor={post.author} postLikes={ \u003cLikeButtonViewModel postId={postId} includeAvatars={includeAvatars} /\u003e }} /\u003e ); } After this change, calling PostDetailsViewModel will return “unfinished” JSON: { type: \"PostDetails\", // ✅ This is a component on the client props: { postTitle: \"JSX Over The Wire\", // ... postLikes: { type: LikeButtonViewModel, // 🟡 We haven't run this ViewModel yet props: { postId: \"jsx-over-the-wire\", includeAvatars: false, } } } } The code responsible for sending JSON to the client will see that it’s a ViewModel (so it still needs to run!), and will call LikeButtonViewModel to get more JSON: { type: \"PostDetails\", // ✅ This is a component on the client props: { postTitle: \"JSX Over The Wire\", // ... postLikes: { type: \"LikeButton\", // ✅ This is a component on the client props: { totalLikeCount: 8, // ... } } } } ViewModels will get recursively unfolded as they each contribute their part of the JSON. This might remind you of how XHP tags can recursively render other XHP tags. The final JSON will be turned on the client into a React component tree. \u003cPostDetails postTitle=\"JSX Over The Wire\" // ... postLikes={ \u003cLikeButton totalLikeCount={8} // ... /\u003e } /\u003e The Data Always Flows Down To make the JSX look slightly nicer, we can also rename postLikes to children. This will let us nest LikeButtonViewModel as a JSX child of PostDetails. Here’s the entire code so far. Notice how the data flows down: async function PostDetailsViewModel({ postId, truncateContent, includeAvatars }) { const post = await getPost(postId); return ( \u003cPostDetails postTitle={post.title} postContent={parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined })} postAuthor={post.author} \u003e \u003cLikeButtonViewModel postId={postId} includeAvatars={includeAvatars} /\u003e \u003c/PostDetails\u003e ); } async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, }))} /\u003e ); All of the server logic above will execute while generating the JSON. This includes both getPost, parseMarkdown, and getFriendLikes. The response will contain the data for the entire screen, satisfying one of our key requirements: { type: \"PostDetails\", // ✅ This is a component on the client props: { postTitle: \"JSX Over The Wire\", // ... children: { type: \"LikeButton\", // ✅ This is a component on the client props: { totalLikeCount: 8, // ... } } } } From the client’s perspective, everything will appear precomputed: function PostDetails({ postTitle, postContent, postAuthor, children, }) { return ( \u003carticle\u003e \u003ch1\u003e{postTitle}\u003c/h1\u003e \u003cdiv dangerouslySetInnerHTML={{ __html: postContent }} /\u003e \u003cp\u003eby {postAuthor.name}\u003c/p\u003e \u003csection\u003e {children} \u003c/section\u003e \u003c/article\u003e ); } function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { // ... } In particular, by the time PostDetails runs, the children it receives will be the \u003cLikeButton\u003e tag itself with predefined props. The ViewModels configure the props for the client. This is why on the client, all the props are “already there”. Spend some time with the code above and make sure it sinks in. Yes, this is weird. It is also glorious. What we found is a way to compose tags across client-server boundaries where the server parts can be freely wrapped in the client parts, the client parts can be freely wrapped in the server parts, and not only do they just work—we’re also performing the data loading for all of the server parts in a single roundtrip. In fact, this approach satisfies every point on my checklist. Now let’s tidy it up and clean up some loose ends. A Router ViewModel As we refactor our ViewModels to use JSX (for the JSX-sceptical readers—the point here isn’t just the syntax, although the syntax is nice—but lazy evaluation), we might realize that we don’t actually need separate Express routes for every screen. Instead, we might want to do something like this: app.get('/*', async (req, res) =\u003e { const url = req.url; const json = await toJSON(\u003cRouterViewModel url={url} /\u003e); // Evaluate JSX res.json(json); }); Then we’d have a Router ViewModel that matches screens to routes: function RouterViewModel({ url }) { let route; if (matchRoute(url, '/screen/post-details/:postId')) { const { postId } = parseRoute(url, '/screen/post-details/:postId'); route = \u003cPostDetailsRouteViewModel postId={postId} /\u003e; } else if (matchRoute(url, '/screen/post-list')) { route = \u003cPostListRouteViewModel /\u003e; } return route; } And then each route would also be a ViewModel: function PostDetailsRouteViewModel({ postId }) { return \u003cPostDetailsViewModel postId={postId} /\u003e } async function PostListRouteViewModel() { const postIds = await getRecentPostIds(); return ( \u003c\u003e {postIds.map(postId =\u003e \u003cPostDetailsViewModel key={postId} postId={postId} /\u003e )} \u003c/\u003e ); } On the server, it’s ViewModels all the way down. This might seem superfluous at this point. But moving the routing logic into the ViewModel world would let RouterViewModel wrap its output into a client-side \u003cRouter\u003e that could re-request the JSON when you navigate to another screen. function RouterViewModel({ url }) { let route; if (matchRoute(url, '/screen/post-details/:postId')) { const { postId } = parseRoute(url, '/screen/post-details/:postId'); route = \u003cPostDetailsRouteViewModel postId={postId} /\u003e; } else if (matchRoute(url, '/screen/post-list')) { route = \u003cPostListRouteViewModel /\u003e; } return ( \u003cRouter\u003e {route} \u003c/Router\u003e ); } function Router({ children }) { const [tree, setTree] = useState(children); // ... maybe add some logic here later ... return tree; } This could also let us—if we wanted to—implement a more granular router that can split the path into segments, prepare the ViewModels for each segment in parallel when it receives a request, and even re-request individual segments on navigation. This way, we would no longer have to re-request the entire page whenever we need to go to another screen. Of course, we wouldn’t want to implement this kind of logic within the app. Ideally, a framework would do this. Server and Client Components We can drop the pretense now—we’re describing React Server Components: Our “ViewModels” are Server Components. Our “Components” are Client Components. There are good reasons to call both of them Components. Although in the first part of this post, Server Components began their journey as ViewModels, their lineage can be equally convincingly traced back to Async XHP tags. Since they no longer have to return JSON objects, and because in practice you’ll often import the same components from both “sides”, it makes sense to say Components. (In fact, in my incomplete example, all Client Components could be moved to the Server.) In this post, we haven’t discussed the actual mechanism “connecting” the module systems of Server and Client worlds. This will be a topic for another post, but in short, when you import something from a module with 'use client', you don’t get the real thing—you just get a reference which describes how to load it. import { LikeButton } from './LikeButton'; console.log(LikeButton); // \"src/LikeButton.js#LikeButton\" async function LikeButtonViewModel({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, }))} /\u003e ); 'use client'; export function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { let buttonText = 'Like'; if (totalLikeCount \u003e 0) { // e.g. \"Liked by You, Alice, and 13 others\" buttonText = formatLikeText(totalLikeCount, isLikedByUser, friendLikes); } return ( \u003cbutton className={isLikedByUser ? 'liked' : ''}\u003e {buttonText} \u003c/button\u003e ); } So the generated JSON will contain an instruction for loading the LikeButton: { type: \"src/LikeButton.js#LikeButton\", // ✅ This is a Client Component props: { totalLikeCount: 8, // ... } } React will read that instruction and load it as a \u003cscript\u003e tag (or read it from the bundler cache). The format is bundler-specific, which explains why React Server Components requires a bundler integration. (Parcel just released theirs which isn’t tied to a framework, so it’s perfect if you want to play with how RSC works.) It’s important that React Server Components emit JSON rather than HTML: Server tree can be refetched in-place without losing state. (React will just do its “virtual DOM” thing, i.e. apply the new props to the already existing components.) You can target other platforms than web. (Here’s a cool demo.) You can still turn that JSON into HTML by executing all the Client Components within it! That’s not required by RSC, but it is definitely doable. That’s why “Client” components may run on the “server”—to output HTML, you’d run both “sides”. To conclude this post, I’ll say the following. I know that React Server Components have not been everyone’s cup of tea. It twists your brain but I think it twists it in a good way. I’ll be posting more about why I’m excited about RSC and will try to distill some of these explanations into shorter posts. But in the meantime, I hope that this post provided some historical background on the motivation behind RSC, what it can do, as well as how you could arrive at RSC through your own thinking. (By the way, if you enjoy more philosophical and whimsical longreads, check out my last post which arrives at RSC from the first principles without any history.) Recap: JSX Over The Wire React Server Components solve the problems outlined in the first part by using techniques outlined in the second part. In particular, they let you “componentize” the UI-specific parts of your API and ensure they evolve together with your UI. This means that there is a direct connection between your components and the server code that prepares their props. You can always “Find All References” to find from where on the server the data is flowing into each of your components. Because React Server Components emit JSON, they don’t “blow away” the state of the page on refetches. Your components can receive fresh props from the server. React Server Components emit JSON, but that JSON can also be (optionally) turned to HTML for first render. It’s easy to make HTML out of JSON, but not the inverse. React Server Components let you create self-contained pieces of UI that take care of preparing their own server data. However, all this preparation occurs within a single roundtrip. Although your code is modular, their execution is coalesced. RSC is mindbending, I won’t lie. Sometimes you have to think inside-out. But personally, I think RSC is awesome. The tooling is still evolving but I’m excited for its future. I hope to see more technologies thoughtfully blending the boundaries. Final Code, Slightly Edited While this isn’t a runnable application (I bet you could get there with Next or Parcel) and might contain mistakes, here’s the complete code example. I’ve done a few renames to drop the “ViewModel” terminology so it looks more idiomatic. import { PostDetails, LikeButton } from './client'; export function PostDetailsRoute({ postId }) { return \u003cPost postId={postId} /\u003e } export async function PostListRoute() { const postIds = await getRecentPostIds(); return ( \u003c\u003e {postIds.map(postId =\u003e \u003cPost key={postId} postId={postId} /\u003e )} \u003c/\u003e ); } async function Post({ postId, truncateContent, includeAvatars }) { const post = await getPost(postId); return ( \u003cPostLayout postTitle={post.title} postContent={parseMarkdown(post.content, { maxParagraphs: truncateContent ? 1 : undefined })} postAuthor={post.author} \u003e \u003cPostLikeButton postId={postId} includeAvatars={includeAvatars} /\u003e \u003c/PostLayout\u003e ); } async function PostLikeButton({ postId, includeAvatars }) { const [post, friendLikes] = await Promise.all([ getPost(postId), getFriendLikes(postId, { limit: includeAvatars ? 5 : 2 }), ]); return ( \u003cLikeButton totalLikeCount={post.totalLikeCount} isLikedByUser={post.isLikedByUser} friendLikes={friendLikes.likes.map(l =\u003e ({ firstName: l.firstName, avatar: includeAvatars ? l.avatar : null, }))} /\u003e ); 'use client'; export function PostLayout({ postTitle, postContent, postAuthor, children, }) { return ( \u003carticle\u003e \u003ch1\u003e{postTitle}\u003c/h1\u003e \u003cdiv dangerouslySetInnerHTML={{ __html: postContent }} /\u003e \u003cp\u003eby {postAuthor.name}\u003c/p\u003e \u003csection\u003e {children} \u003c/section\u003e \u003c/article\u003e ); } export function LikeButton({ totalLikeCount, isLikedByUser, friendLikes }) { let buttonText = 'Like'; if (totalLikeCount \u003e 0) { buttonText = formatLikeText(totalLikeCount, isLikedByUser, friendLikes); } return ( \u003cbutton className={isLikedByUser ? 'liked' : ''}\u003e {buttonText} \u003c/button\u003e ); } Happy stitching!",
  "image": "https://overreacted.io/jsx-over-the-wire/opengraph-image?5b0b970dfd19bb8c",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eSuppose you have an API route that returns some data as JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/likes/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou also have a React component that needs that data:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// e.g. \u0026#34;Liked by You, Alice, and 13 others\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    buttonText \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eformatLikeText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow do you get that data into that component?\u003c/p\u003e\n\u003cp\u003eYou could pass it from a parent component using some data fetching library:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eisLoading\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e`/api/likes/\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount={\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser={\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes={\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat’s one way of thinking about it.\u003c/p\u003e\n\u003cp\u003eBut have another look at your API:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/likes/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDo these lines remind you of anything?\u003c/p\u003e\n\u003cp\u003eProps. \u003cem\u003eYou’re passing props.\u003c/em\u003e You just didn’t specify \u003cem\u003ewhere to\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBut you already know their final destination—\u003ccode\u003eLikeButton\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhy not just fill that in?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/api/likes/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the “parent component” of \u003ccode\u003eLikeButton\u003c/code\u003e is the \u003cem\u003eAPI itself\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWait, what?\u003c/p\u003e\n\u003cp\u003eWeird, I know. We’re going to worry about whether it’s a good idea later. But for now, notice how this inverts the relationship between components and the API. This is sometimes known as the Hollywood Principle: “Don’t call me, I’ll call you.”\u003c/p\u003e\n\u003cp\u003eYour components don’t call your API.\u003c/p\u003e\n\u003cp\u003eInstead, your API \u003cem\u003ereturns\u003c/em\u003e your components.\u003c/p\u003e\n\u003cp\u003eWhy would you ever want to do that?\u003c/p\u003e\n\u003chr/\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#part-1-json-as-components\"\u003ePart 1: JSON as Components\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#part-2-components-as-json\"\u003ePart 2: Components as JSON\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#part-3-jsx-over-the-wire\"\u003ePart 3: JSX Over The Wire\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003ch2 id=\"part-1-json-as-components\"\u003e\u003ca target=\"_self\" href=\"#part-1-json-as-components\"\u003ePart 1: JSON as Components\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"model-view-viewmodel\"\u003e\u003ca target=\"_self\" href=\"#model-view-viewmodel\"\u003eModel, View, ViewModel\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThere is a fundamental tension between how we want to \u003cem\u003estore\u003c/em\u003e information and how we want to \u003cem\u003edisplay\u003c/em\u003e it. We generally want to store more things than we display.\u003c/p\u003e\n\u003cp\u003eFor example, consider a Like button on a Post. When we store Likes for a given Post, we might want to represent them as a table of \u003ccode\u003eLike\u003c/code\u003e rows like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e Like \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Timestamp\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// User ID\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e     \u003c/span\u003e\u003cspan\u003e// Post ID\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s call this kind of data a “Model”. It represents the raw shape of the data.\u003c/p\u003e\n\n\u003cp\u003eSo our Likes database table might contain data of that shape:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:41.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1001\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:42.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e456\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1001\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:43.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e789\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1002\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, what we want to \u003cem\u003edisplay\u003c/em\u003e to the user is different.\u003c/p\u003e\n\u003cp\u003eWhat we want to display is the \u003cem\u003enumber of Likes\u003c/em\u003e for that Post, whether the \u003cem\u003euser has already liked it\u003c/em\u003e, and the names of \u003cem\u003etheir friends who also liked it\u003c/em\u003e. For example, the Like button could appear pressed in (which means that you already liked this post) and say “You, Alice, and 13 others liked this.” Or “Alice, Bob, and 12 others liked this.”\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e LikeButtonProps \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s call this kind of data a “ViewModel”.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e ViewModel \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonProps\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA ViewModel represents data in a way that is directly consumable by the UI (i.e the \u003cem\u003eview\u003c/em\u003e). It is often significantly different from the raw Model. In our example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eViewModel’s \u003ccode\u003etotalLikeCount\u003c/code\u003e is aggregated from individual \u003ccode\u003eLike\u003c/code\u003e models.\u003c/li\u003e\n\u003cli\u003eViewModel’s \u003ccode\u003eisLikedByUser\u003c/code\u003e is personalized and depends on the user.\u003c/li\u003e\n\u003cli\u003eViewModel’s \u003ccode\u003efriendLikes\u003c/code\u003e is both aggregated and personalized. To calculate it, you’d have to takes the Likes for this post, filter them down to likes from friends, and get the first few friends’ names (which are likely stored in a different table).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClearly, Models will need to turn into ViewModels at some point. The question is \u003cem\u003ewhere\u003c/em\u003e and \u003cem\u003ewhen\u003c/em\u003e this happens in the code, and how that code evolves over time.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"rest-and-json-api\"\u003e\u003ca target=\"_self\" href=\"#rest-and-json-api\"\u003eREST and JSON API\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe most common way to solve this problem is to expose some kind of a JSON API that the client can hit to assemble the ViewModel. There are different ways to design such an API, but the most common way is what’s usually known as REST.\u003c/p\u003e\n\u003cp\u003eThe typical way to approach REST (\u003ca target=\"_blank\" href=\"https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/\"\u003elet’s say we’ve never read this article\u003c/a\u003e) is to pick some “Resources”—such as a Post, or a Like—and provide JSON API endpoints that list, create, update, and delete such Resources. Naturally, REST does not specify anything about how you should \u003cem\u003eshape\u003c/em\u003e these Resources so there’s a lot of flexibility.\u003c/p\u003e\n\u003cp\u003eOften, you might start by returning the shape of the Model:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  title: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eMy Post\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello world...\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  authorId: \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:40.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo far so good. But how would you incorporate Likes into this? Maybe \u003ccode\u003etotalLikeCount\u003c/code\u003e and \u003ccode\u003eisLikedByUser\u003c/code\u003e could be a part of the Post Resource:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  title: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eMy Post\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello world...\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  authorId: \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:40.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  totalLikeCount: \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  isLikedByUser: \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, should \u003ccode\u003efriendLikes\u003c/code\u003e also go there? We need this information on the client.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  title: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eMy Post\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  authorId: \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello world...\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:40.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount: \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser: \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr are we starting to abuse the notion of a Post by adding too much stuff to it? Okay, how about this, maybe we could offer a separate endpoint for a Post’s Likes:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123/likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalCount: \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:41.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:42.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    likedById\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e768\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo a Post’s Like becomes its own “Resource”.\u003c/p\u003e\n\u003cp\u003eThat’s nice in theory but we’re going to need to know the likers’ names, and we don’t want to make a request for each Like. So we need to “expand” the users here:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123/likes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalCount: \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  likes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:41.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    likedBy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      lastName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLovelace\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:42.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    likedBy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e768\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      lastName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBabbage\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe also “forgot” which of these Likes are from friends. Should we solve this by having a separate \u003ccode\u003e/api/post/123/friend-likes\u003c/code\u003e endpoint? Or should we order by friends first and include \u003ccode\u003eisFriend\u003c/code\u003e into the \u003ccode\u003elikes\u003c/code\u003e array items so we can disambiguate friends from other likes? Or should we add \u003ccode\u003e?filter=friends\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eOr should we include the friend likes directly into the Post to avoid two API calls?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /api/post/123\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  title: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eMy Post\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  authorId: \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHello world...\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  createdAt: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:40.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount: \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser: \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:41.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    likedBy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e123\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      lastName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLovelace\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    createdAt\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e2025-04-13T02:04:42.668Z\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    likedBy\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e768\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      lastName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBabbage\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis seems useful but what if \u003ccode\u003e/api/post/123\u003c/code\u003e gets called from other screens that don’t need this information—and you’d rather not slow them down? Maybe there could be an opt-in like \u003ccode\u003e/api/post/123?expand=friendLikes\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eAnyway, the point I’m trying to make here is not that it’s \u003cem\u003eimpossible\u003c/em\u003e to design a good REST API. The vast majority of apps I’ve seen works this way so it’s at the very least doable. But anyone who designed one and then worked on it for more than a few months knows the drill. \u003cem\u003eEvolving REST endpoints is a pain in the ass.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIt usually goes like this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInitially, you have to decide how to structure the JSON output. None of the options are \u003cem\u003eclearly better\u003c/em\u003e than the rest; mostly you’re just guessing how the app will evolve.\u003c/li\u003e\n\u003cli\u003eThe initial decisions tend to settle down after a few back-and-forth iterations… until the next UI redesign which causes ViewModels to have slightly different shapes. The already existing REST endpoints don’t quite cover the new needs.\u003c/li\u003e\n\u003cli\u003eIt’s possible to add new REST API endpoints, but at some point you’re not really “supposed to” add more because you already defined all the possible Resources. For example, if \u003ccode\u003e/posts/123\u003c/code\u003e exists, you likely won’t add another “get post” API.\u003c/li\u003e\n\u003cli\u003eNow you’re running into issues with calculating and sending either \u003cem\u003enot enough\u003c/em\u003e or \u003cem\u003etoo much\u003c/em\u003e data. You either aggressively “expand” fields in the existing Resources or come up with an elaborate set of conventions for doing it on-demand.\u003c/li\u003e\n\u003cli\u003eSome ViewModels are only needed by a subset of screens but they’re always included in the response because that’s easier than making them configurable.\u003c/li\u003e\n\u003cli\u003eSome screens resort to cobbling their ViewModels together from multiple API calls because no single response contains all the necessary information anymore.\u003c/li\u003e\n\u003cli\u003eThen the design and the functionality of your product changes again. \u003cem\u003eRepeat.\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere’s clearly some fundamental tension here, but what is causing it?\u003c/p\u003e\n\u003cp\u003eFirst, note how the shape of the ViewModels is determined by the UI. It’s not a reflection of some platonic idea of a Like; rather, it’s dictated by the design. We want to show “You, Ann, and 13 others liked this”, \u003cem\u003etherefore\u003c/em\u003e we need these fields:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e LikeButtonProps \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf this screen’s design or functionality changes (for example, if you want to show the avatars of your friends who liked the post), the ViewModel will change as well:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e LikeButtonProps \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut here’s the rub.\u003c/p\u003e\n\u003cp\u003eREST (or, rather, how REST is broadly used) encourages you to think in terms of Resources rather than Models \u003cem\u003eor\u003c/em\u003e ViewModels. At first, your Resources start out as mirroring Models. But a single Model rarely has enough data for a screen, so you develop ad-hoc conventions for nesting Models in a Resource. However, including \u003cem\u003eall\u003c/em\u003e the relevant Models (e.g. all Likes of a Post) is often impossible or impractical, so you start adding ViewModel-ish fields like \u003ccode\u003efriendLikes\u003c/code\u003e to your Resources.\u003c/p\u003e\n\u003cp\u003eBut putting ViewModels in Resources also doesn’t work very well. ViewModels are not abstract concepts like “a post”; each ViewModel describes a \u003cem\u003especific piece of UI\u003c/em\u003e. As a result, the shape of your “Post” Resource grows to encompass the needs of every screen displaying a post. But those needs also \u003cem\u003echange over time,\u003c/em\u003e so the “Post” Resource’s shape is at best a compromise between what different screens need now, and at worst a fossilized record of everything they’ve ever needed in the past.\u003c/p\u003e\n\u003cp\u003eLet me put this more bluntly:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eREST Resources don’t have a firm grounding in the reality.\u003c/strong\u003e Their shapes are not sufficiently constrained—we’re making up concepts mostly out of thin air. Unlike Models, they’re not grounded in the reality of how the data is stored. And unlike ViewModels, they’re not grounded in the reality of how the data is presented. Unfortunately, nudging them in either direction only makes things worse.\u003c/p\u003e\n\u003cp\u003eIf you keep REST Resources close to the Models, you’ll hurt the user experience. Now things that could be fetched in a single request would require a couple or, god forbid, N calls. This is especially noticeable in products from companies where the backend team “hands off” a REST API to the frontend team and takes no feedback. The API may look simple and elegant but it is completely impractical to consume.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if you nudge REST Resources to stay closer to the ViewModels, you’re hurting maintainability. ViewModels are fickle! Most ViewModels are going to change the next time the corresponding piece of UI is redesigned. But changing the shape of REST Resources is hard—the same Resources are being fetched by many screens. As a result, their shape gradually drifts away from the needs of the current ViewModels, and becomes difficult to evolve. There’s a reason the backend teams often resist adding UI-specific fields to the response: they’ll likely get stale!\u003c/p\u003e\n\u003cp\u003eThis doesn’t necessarily mean that REST itself, as it’s broadly understood, is broken. It can be very nice to use when the Resources are well-defined and their fields are well-chosen. But this often goes against the client’s needs, which is to get all the data \u003cem\u003efor a particular screen\u003c/em\u003e. There’s something missing in the middle.\u003c/p\u003e\n\u003cp\u003eWe need a translation layer.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"api-for-viewmodels\"\u003e\u003ca target=\"_self\" href=\"#api-for-viewmodels\"\u003eAPI for ViewModels\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThere is a way to resolve this tension.\u003c/p\u003e\n\u003cp\u003eYou have some latitude with how exactly you could approach it but the main idea is that your client should be able to request \u003cem\u003eall data for a specific screen at once\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIt’s such a simple idea!\u003c/p\u003e\n\u003cp\u003eInstead of requesting “canonical” REST Resources from the client such as:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"bash\" data-theme=\"default\"\u003e\u003ccode data-language=\"bash\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eGET\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/data/post/123\u003c/span\u003e\u003cspan\u003e       \u003c/span\u003e\u003cspan\u003e# Get Post Resource\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eGET\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/data/post/123/likes\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e# Get Post Likes Resource\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eyou request a ViewModel for \u003cem\u003ea specific screen\u003c/em\u003e (i.e. a route):\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"bash\" data-theme=\"default\"\u003e\u003ccode data-language=\"bash\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eGET\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/screens/post-details/123\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e# Get ViewModel for the PostDetails screen\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis data would include \u003cem\u003eeverything\u003c/em\u003e that screen needs.\u003c/p\u003e\n\u003cp\u003eThe difference is subtle but profound. You’re no longer trying to define a universal canonical shape of a \u003cem\u003ePost\u003c/em\u003e. Rather, you send whatever data the \u003cem\u003ePostDetails screen\u003c/em\u003e needs in order to display its components \u003cem\u003etoday\u003c/em\u003e. If the PostDetails screen gets deleted, this endpoint gets deleted too. If a different screen wants to display some related information (for example, a PostLikedBy popup), it will gets its own route:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"bash\" data-theme=\"default\"\u003e\u003ccode data-language=\"bash\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eGET\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/screens/post-details/123\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e# Get ViewModel for the PostDetails screen\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eGET\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/screens/post-liked-by/123\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e# Get ViewModel for the PostLikedBy screen\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOkay, but how does this help?\u003c/p\u003e\n\u003cp\u003eThis avoids the trap of “ungrounded” abstraction. The ViewModel interface for every screen precisely specifies the shape of the server response. If you need to change it or fine-tune it, you can do that without affecting any other screens.\u003c/p\u003e\n\u003cp\u003eFor example, a \u003ccode\u003ePostDetails\u003c/code\u003e screen ViewModel might look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e PostDetailsViewModel \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo that’s what the server would return for \u003ccode\u003e/screens/post-details/123\u003c/code\u003e. Later, if you want to display avatars of friend likes, you’d just add it to \u003cem\u003ethat\u003c/em\u003e ViewModel:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e PostDetailsViewModel \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that you’d only have to update \u003cem\u003ethat screen’s endpoint\u003c/em\u003e. You’re no longer forced to balance what one screen needs with what another screen needs. There are no questions like “which Resource does this field belong to?”, or whether it should be “expanded”. If some screen needs more data than others, you can just include more data in \u003cem\u003ethat\u003c/em\u003e screen’s response—it doesn’t have to be generic or configurable. \u003cstrong\u003eThe shape of the server response is exactly determined by each screen’s needs.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis \u003cem\u003edoes\u003c/em\u003e solve the stated problems with REST.\u003c/p\u003e\n\u003cp\u003eIt also introduces a few novel questions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThere’s going to be \u003cem\u003ea lot\u003c/em\u003e more endpoints than with REST Resources—an endpoint per screen. How will these endpoints be structured and kept maintainable?\u003c/li\u003e\n\u003cli\u003eHow do you reuse code between the endpoints? Presumably there would be a lot of duplicated data access and other business logic between those endpoints.\u003c/li\u003e\n\u003cli\u003eHow do you convince the backend team to pivot from their REST APIs to this?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe last question is probably the first we need to resolve. The backend team will likely have very warranted reservations about this approach. At the very least, if this approach proves terrible, it would be good to have a way to migrate back.\u003c/p\u003e\n\u003cp\u003eLuckily, there’s no need to throw anything away.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"backend-for-frontend\"\u003e\u003ca target=\"_self\" href=\"#backend-for-frontend\"\u003eBackend For Frontend\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eInstead or \u003cem\u003ereplacing\u003c/em\u003e your existing REST API, you can add a new \u003cem\u003elayer\u003c/em\u003e in front of it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// You\u0026#39;re adding new screen-specific endpoints...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...which call your existing REST API here\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e`/api/post/\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003er \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003er\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e()),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e`/api/post/\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/friend-likes`\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003er \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003er\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e()),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is not a new idea. Such a layer is often called BFF, or \u003cem\u003eBackend for Frontend.\u003c/em\u003e In this case, the job of the BFF is to adapt your REST API to returning ViewModels.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIf some screen needs more data, a BFF lets you serve more data to it without changing your entire data model. It keeps screen-specific changes scoped. Crucially, it lets you deliver all the data any screen needs in a single roundtrip.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe BFF doesn’t have to be written in the same language as your REST API. For reasons we’ll get into later, it’s advantageous to write BFF in the same language as your frontend code. You can think of it as \u003cem\u003ea piece of the frontend that happens to run on the server\u003c/em\u003e. It’s like the frontend’s “ambassador” to the server. It “adapts” the REST responses into the shape that each screen of the frontend UI actually wants.\u003c/p\u003e\n\u003cp\u003eAlthough you can get some of the benefits of BFF with client-only per-route loaders like \u003ca target=\"_blank\" href=\"https://reactrouter.com/start/framework/data-loading#client-data-loading\"\u003e\u003ccode\u003eclientLoader\u003c/code\u003e in React Router\u003c/a\u003e, there’s a lot you unlock by actually deploying this layer on the server close to where the REST endpoints are deployed.\u003c/p\u003e\n\u003cp\u003eFor example, even if you \u003cem\u003edo\u003c/em\u003e have to make several REST API requests serially one after another to load all the necessary data for a screen, the latency between the BFF and your REST API would be much lower than when making multiple serial requests from the client. If your REST API responses are fast on the internal network, you can cut down literal seconds of what used to be client/sever waterfalls without actually parallelizing the (sometimes inevitable) serial calls.\u003c/p\u003e\n\u003cp\u003eA BFF also lets you apply data transformations \u003cem\u003ebefore\u003c/em\u003e sending data to the client, which can significantly improve performance on low-end client devices. You can even go as far as to cache or persist some computations on the disk, even \u003cem\u003ebetween\u003c/em\u003e different users, since you have access to the disk—and to server caches like Redis. In that sense, a BFF lets a frontend team have \u003cem\u003etheir very own little slice of the server\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eImportantly, a BFF gives you a way to experiment with alternatives to your REST APIs without affecting the client application. For example, if your REST API has no other consumers, you can turn it into an internal microservice and avoid exposing it to the world. Moreover, you could turn it into a \u003cem\u003edata access layer\u003c/em\u003e rather than an HTTP service, and simply \u003cem\u003eimport\u003c/em\u003e that data access layer in-process from your BFF:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e getPost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getFriendLikes \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e@your-company/data-layer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Reads from an ORM and applies business logic.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Of course, this part only works if you can write lower-level backend logic in JS.)\u003c/p\u003e\n\u003cp\u003eThis can help you avoid problems like loading the same information many times from the database (no \u003ccode\u003efetch\u003c/code\u003e calls means database reads can be batched). It also lets you “drop down” the abstraction level when needed—for example, to run a fine-tuned stored database procedure that isn’t neatly exposed over the REST API.\u003c/p\u003e\n\u003cp\u003eThere’s a lot to like about the BFF pattern. It solves quite a few problems but it also raises new questions. For example, how do you organize its code? If each screen is essentially its own API method, how do you avoid duplication of code? And how do you keep your BFF synchronized with data requirements of the front-end side?\u003c/p\u003e\n\u003cp\u003eLet’s try to make some progress on answering those.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"composable-bff\"\u003e\u003ca target=\"_self\" href=\"#composable-bff\"\u003eComposable BFF\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose you’re adding a new \u003ccode\u003ePostList\u003c/code\u003e screen. It’s going to render \u003cem\u003ean array\u003c/em\u003e of \u003ccode\u003e\u0026lt;PostDetails\u0026gt;\u003c/code\u003e components, each of which needs the same data as before:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e PostDetailsViewModel \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    id\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo the ViewModel for \u003ccode\u003ePostList\u003c/code\u003e contains an array of \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e PostListViewModel \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  posts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow would you load the data for \u003ccode\u003ePostList\u003c/code\u003e?\u003c/p\u003e\n\u003cp\u003eYour first inclination may be to make a series of requests from the client to the existing \u003ccode\u003e/screen/post-details/:postId\u003c/code\u003e endpoint which already knows how to prepare a ViewModel for a single post. We just need to call it for every post.\u003c/p\u003e\n\u003cp\u003eBut wait, this defeats the entire purpose of the BFF! Making many requests for a single screen is inefficient and is precisely the kind of compromise that we’ve been trying to avoid. \u003cstrong\u003eInstead, we’ll add a new BFF endpoint for the new screen.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe new endpoint might initially look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e getPost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getFriendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getRecentPostIds \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e@your-company/data-layer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Grab the recent post IDs\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// For each post ID, load the data in parallel\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eposts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostDetailsViewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e postDetailsViewModel\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, note that there’s significant code duplication between the endpoints:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e getPost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getFriendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getRecentPostIds \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e@your-company/data-layer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eposts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostDetailsViewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e postDetailsViewModel\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s almost like there is a notion of “\u003ccode\u003ePostDetails\u003c/code\u003e ViewModel” begging to be extracted. This should not be surprising—both screens render the same \u003ccode\u003e\u0026lt;PostDetails\u0026gt;\u003c/code\u003e component, so they need similar code to load the data for it.\u003c/p\u003e\n\u003chr/\u003e\n\n\u003cp\u003eLet’s extract a \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e getPost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getFriendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getRecentPostIds \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e@your-company/data-layer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eposts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis makes our BFF endpoints significantly simpler.\u003c/p\u003e\n\u003cp\u003eIn fact, we can go a bit further. Look at this part of \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe know that the purpose of the \u003ccode\u003epostLikes\u003c/code\u003e field is to eventually become props for the \u003ccode\u003eLikeButton\u003c/code\u003e component—i.e. this field is \u003ccode\u003eLikeButton\u003c/code\u003e’s ViewModel:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo let’s extract the logic preparing these props into \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e getPost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getFriendLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e getRecentPostIds \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e@your-company/data-layer\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// It\u0026#39;s fine to getPost() here again. Our data layer deduplicates calls via an in-memory cache.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we have a tree of functions that load data as JSON—our ViewModels.\u003c/p\u003e\n\u003cp\u003eDepending on your background, this might remind you of a few other things. It might remind you of composing Redux reducers out of smaller reducers. It might also remind you of composing GraphQL fragments out of smaller fragments. Or it might remind you of composing React components from other React components.\u003c/p\u003e\n\u003cp\u003eAlthough the code style is a little verbose now, there is something oddly satisfying in breaking apart a screen’s ViewModel into smaller ViewModels. It feels similar to writing a React component tree, except that we’re decomposing a backend API. It’s like \u003cem\u003ethe data has its own shape but it roughly lines up with your React component tree\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eLet’s see what happens when the UI needs to evolve.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"evolving-a-viewmodel\"\u003e\u003ca target=\"_self\" href=\"#evolving-a-viewmodel\"\u003eEvolving a ViewModel\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose the UI design changes, and we want to display friends’ avatars too:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e LikeButtonProps \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}[]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAssuming we use TypeScript, we’ll immediately get a type error in the ViewModel:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  { postId } \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonProps\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// 🔴 Type \u0026#39;string[]\u0026#39; is not assignable to type \u0026#39;{ firstName: string; avatar: string; }[]\u0026#39;.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s fix it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  { postId } \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enumber\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonProps\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the BFF response for every screen that includes a \u003ccode\u003eLikeButton\u003c/code\u003e ViewModel will use the new \u003ccode\u003efriendLikes\u003c/code\u003e format, which is exactly what the \u003ccode\u003eLikeButton\u003c/code\u003e React component wants. There are no further changes to make—\u003cem\u003eit just works\u003c/em\u003e. We \u003cem\u003eknow\u003c/em\u003e that it works because \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e is the only place generating props for a \u003ccode\u003eLikeButton\u003c/code\u003e, no matter which screen we’re requesting from the BFF. (For now assume that this is true; we’re still yet to decide how exactly to tie them.)\u003c/p\u003e\n\u003cp\u003eI’d like to call attention to the previous fact because this is quite profound.\u003c/p\u003e\n\u003cp\u003eWhen was the last time you could clearly trace the correspondence between a deeply nested piece of server code generating a fragment of data, and a deeply nested piece of the client code consuming that data? We’re clearly onto \u003cem\u003esomething\u003c/em\u003e.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"viewmodel-parameters\"\u003e\u003ca target=\"_self\" href=\"#viewmodel-parameters\"\u003eViewModel Parameters\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYou might have noticed that ViewModel functions can take parameters. Importantly, these parameters can be specified by the “parent” ViewModel functions and plumbed down—so the client doesn’t need to be aware of them.\u003c/p\u003e\n\u003cp\u003eFor example, suppose you wanted to make the Post List page only display the first paragraph of every post’s content. Let’s add a parameter to its ViewModel:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      maxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eposts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        truncateContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe JSON response for the \u003ccode\u003epost-details\u003c/code\u003e endpoint still includes the entire posts, but the \u003ccode\u003epost-list\u003c/code\u003e JSON endpoint will now only serve their abridged summaries. This is a \u003cem\u003eview model\u003c/em\u003e concern, and now we have a natural place to express it in code.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"plumbing-viewmodel-parameters\"\u003e\u003ca target=\"_self\" href=\"#plumbing-viewmodel-parameters\"\u003ePlumbing ViewModel Parameters\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNext, suppose you wanted to include avatars only on the Details screen. Let’s edit \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e to take and respect an \u003ccode\u003eincludeAvatars\u003c/code\u003e parameter:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow you can plumb it down all the way from the BFF endpoints:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      maxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eincludeAvatars\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eposts\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        truncateContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        includeAvatars\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eviewModel\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAgain, the client doesn’t pass ad-hoc parameters like \u003ccode\u003e?includeAvatars=true\u003c/code\u003e to the server to ensure that the avatars are included in the JSON response. Instead, the \u003ccode\u003epost-list\u003c/code\u003e BFF endpoint itself \u003cem\u003eknows\u003c/em\u003e a Post List shouldn’t include avatars, so it can pass \u003ccode\u003eincludeAvatars: false\u003c/code\u003e to \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e, which plumbs it down to \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e. The client code doesn’t need to be aware of the server logic at all—all it cares about is that it gets the props that it wants.\u003c/p\u003e\n\u003cp\u003eFor the case when we \u003cem\u003edo\u003c/em\u003e show avatars of friends, we might want to show five rather than two. We can make that change directly in \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince the \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e function exists solely to generate the \u003ccode\u003eLikeButton\u003c/code\u003e props, adding more presentational logic here feels natural. It’s a \u003cem\u003eview\u003c/em\u003e model, right? If another view \u003cem\u003ewanted\u003c/em\u003e to show a different number of avatars, it could do that. Unlike with REST, there is no canonical notion of a “post”—so any UI can specify \u003cem\u003eexactly\u003c/em\u003e the data it needs, from a screen all the way down to a button.\u003c/p\u003e\n\u003cp\u003eOur ViewModels evolve in the exact lockstep with the needs of the client.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"composing-viewmodels\"\u003e\u003ca target=\"_self\" href=\"#composing-viewmodels\"\u003eComposing ViewModels\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSomething interesting is taking shape. We’ve started to split our BFF endpoints into units of reusable logic, and we’ve found that these units let us encapsulate \u003cem\u003edata loading\u003c/em\u003e in a similar way as we’ve been encapsulating the \u003cem\u003euser interface\u003c/em\u003e. If you squint at ViewModels, you might even see some parallels to components.\u003c/p\u003e\n\u003cp\u003eAnd yet the end result of the ViewModel tree is not a UI tree—it’s just JSON.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// GET /screen/post-list\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e/* Begin screen/post-list ViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  posts: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e/* Begin PostDetailsViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data as JSON.\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e/* Begin LikeButtonViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e/* End LikeButtonViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e/* End PostDetailsViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e/* Begin PostDetailsViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eReact for Two Computers\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eI’ve been trying to write this post at least a dozen times.\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e/* Begin LikeButtonViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e/* End LikeButtonViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e/* End PostDetailsViewModel */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what should we \u003cem\u003edo\u003c/em\u003e with that JSON?\u003c/p\u003e\n\u003cp\u003eIn the end, \u003cem\u003esomehow\u003c/em\u003e we want the props generated by \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e to end up in the \u003ccode\u003eLikeButton\u003c/code\u003e component. Likewise, \u003cem\u003esomehow\u003c/em\u003e we want the props generated by \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e to get to the \u003ccode\u003ePostDetails\u003c/code\u003e component. We don’t want to generate a huge ViewModel tree of JSON just to manually plumb every piece of it down exactly to the component that needs that ViewModel’s data.\u003c/p\u003e\n\u003cp\u003eWe’re building two parallel hierarchies in the two worlds.\u003c/p\u003e\n\u003cp\u003eBut these worlds are not connected yet.\u003c/p\u003e\n\u003cp\u003eSomething is missing.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"recap-json-as-components\"\u003e\u003ca target=\"_self\" href=\"#recap-json-as-components\"\u003eRecap: JSON as Components\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFor any UI, the data begins its life as Models and ends its life as ViewModels. The transformation between Models and ViewModels has to happen somewhere.\u003c/li\u003e\n\u003cli\u003eThe shape of ViewModels is fully dictated by the design of our user interface. This means that they will evolve over time together with our designs. Also, different screens need different ViewModels aggregated from the same underlying Models.\u003c/li\u003e\n\u003cli\u003eModeling data from the server as REST Resources creates a tension. If REST Resources are close to raw Models, it may require multiple roundtrips and complex ad-hoc conventions to obtain the necessary ViewModels for a screen. If REST Resources are close to ViewModels, they get too coupled to the initial screens they were designed to represent, and don’t evolve together with the needs of the client.\u003c/li\u003e\n\u003cli\u003eWe can resolve this tension by creating another layer—a \u003cem\u003eBackend For Frontend\u003c/em\u003e (BFF). The job of the BFF is to translate the needs of the client (“give me data for this screen”) to REST calls on the backend. A BFF can also evolve beyond being a facade for REST, and instead load data directly using an in-process data layer.\u003c/li\u003e\n\u003cli\u003eSince the BFF’s job is to return all the data needed for each screen as a piece of JSON, it is natural to split up the data loading logic into reusable units. A screen’s ViewModel can be decomposed into a tree of ViewModels, corresponding to the pieces of server data that different components will want to receive on the client. These individual ViewModels can then be recombined and composed together.\u003c/li\u003e\n\u003cli\u003eThese ViewModel functions can pass information to each other. This lets us customize the JSON we’re sending depending on the screen. Unlike with REST, we’re no longer trying to design canonical shapes like a “a post object” used throughout all responses. At any point, we can diverge and serve different ViewModels for the same information to different screens—whatever \u003cem\u003ethey\u003c/em\u003e want. These ViewModels are \u003cem\u003eview\u003c/em\u003e models. They can—should?—have presentation logic.\u003c/li\u003e\n\u003cli\u003eWe’re beginning to realize that ViewModels form a very similar structure to React components. \u003cem\u003eViewModels are like components, but for generating JSON\u003c/em\u003e. However, we still haven’t figured out how to actually \u003cem\u003epass\u003c/em\u003e the JSON they’re generating on the server to the components that need it on the client. It’s also annoying to deal with two parallel hierarchies. We’re onto something, but we’re missing something.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhat are we missing?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"part-2-components-as-json\"\u003e\u003ca target=\"_self\" href=\"#part-2-components-as-json\"\u003ePart 2: Components as JSON\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"html-ssi-and-cgi\"\u003e\u003ca target=\"_self\" href=\"#html-ssi-and-cgi\"\u003eHTML, SSI, and CGI\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eJSON, MVVM, BFF, what the hell was that?!\u003c/p\u003e\n\u003cp\u003eWhat an incredibly overengineered way to make a website. These React complexity peddlers are \u003cem\u003eso\u003c/em\u003e out of touch. If only they knew the \u003cem\u003ehistory\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBack in \u003cem\u003emy\u003c/em\u003e days, we’d just write a bit of HTML and call it a day.\u003c/p\u003e\n\u003cp\u003eMy \u003ccode\u003eindex.html\u003c/code\u003e homepage would look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eLatest posts\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e href=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/jsx-over-the-wire.html\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        JSX Over The Wire\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Suppose you have an API route that returns some data as JSON. [...]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e href=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/react-for-two-computers.html\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        React for Two Computers\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      I’ve been trying to write this post at least a dozen times. [...]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen my \u003ccode\u003ejsx-over-the-wire.html\u003c/code\u003e post details page would look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      Suppose you have an API route that returns some data as JSON.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI’d put these files on a box with Apache and that would be it!\u003c/p\u003e\n\u003cp\u003eNow suppose I wanted to add a footer to all my pages. That couldn’t be easier. First, let me create a file called \u003ccode\u003eincludes/footer.html\u003c/code\u003e with my footer:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003emarquee\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e href=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eoverreacted\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003emarquee\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I can include my footer on any page with \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Server_Side_Includes\"\u003eServer-Side Includes  (SSI)\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eLatest posts\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/includes/footer.html\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, I don’t want to copy and paste the first paragraph of each blog post into my \u003ccode\u003eindex.html\u003c/code\u003e file so I might use SSI together with \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Common_Gateway_Interface\"\u003eCGI\u003c/a\u003e to \u003cem\u003egenerate\u003c/em\u003e my index page:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eLatest posts\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh2\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/cgi-bin/post-details.cgi?jsx-over-the-wire\u0026amp;truncateContent=true\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/cgi-bin/post-details.cgi?react-for-two-computers\u0026amp;truncateContent=true\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/includes/footer.html\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLikewise, the details page will delegate to the same \u003ccode\u003epost-details.cgi\u003c/code\u003e script:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/cgi-bin/post-details.cgi?jsx-over-the-wire\u0026amp;truncateContent=false\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;!--#include virtual=\u0026#34;/includes/footer.html\u0026#34; --\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, the \u003ccode\u003epost-details.cgi\u003c/code\u003e script might talk to the database:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"bash\" data-theme=\"default\"\u003e\u003ccode data-language=\"bash\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e#!/bin/sh\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eContent-type: text/html\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ePOST_ID\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$QUERY_STRING\u003c/span\u003e\u003cspan\u003e\u0026#34; | \u003c/span\u003e\u003cspan\u003ecut\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-d\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e\u0026#39; \u003c/span\u003e\u003cspan\u003e-f1\u003c/span\u003e\u003cspan\u003e | \u003c/span\u003e\u003cspan\u003etr\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-cd\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e[:alnum:]._-\u003c/span\u003e\u003cspan\u003e\u0026#39;)\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eTRUNCATE\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;$(\u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$QUERY_STRING\u003c/span\u003e\u003cspan\u003e\u0026#34; | \u003c/span\u003e\u003cspan\u003egrep\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-c\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003etruncateContent=true\u003c/span\u003e\u003cspan\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eTITLE\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003emysql\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-u\u003c/span\u003e\u003cspan\u003e admin \u003c/span\u003e\u003cspan\u003e-p\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003epassword\u003c/span\u003e\u003cspan\u003e\u0026#39; \u003c/span\u003e\u003cspan\u003e-D\u003c/span\u003e\u003cspan\u003e blog \u003c/span\u003e\u003cspan\u003e--skip-column-names\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026#34;\u003c/span\u003e\u003cspan\u003eSELECT title FROM posts WHERE url=\u0026#39;\u003c/span\u003e\u003cspan\u003e$POST_ID\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026#34;)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eCONTENT\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$(\u003c/span\u003e\u003cspan\u003emysql\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-u\u003c/span\u003e\u003cspan\u003e admin \u003c/span\u003e\u003cspan\u003e-p\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003epassword\u003c/span\u003e\u003cspan\u003e\u0026#39; \u003c/span\u003e\u003cspan\u003e-D\u003c/span\u003e\u003cspan\u003e blog \u003c/span\u003e\u003cspan\u003e--skip-column-names\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026#34;\u003c/span\u003e\u003cspan\u003eSELECT content FROM posts WHERE url=\u0026#39;\u003c/span\u003e\u003cspan\u003e$POST_ID\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e\u0026#34;)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e [ \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$TRUNCATE\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e ]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethen\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  FIRST_PARAGRAPH\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;$(\u003c/span\u003e\u003cspan\u003eprintf\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e%s\u003c/span\u003e\u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan\u003e$CONTENT\u003c/span\u003e\u003cspan\u003e\u0026#34; | \u003c/span\u003e\u003cspan\u003esed\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e/^$/q\u003c/span\u003e\u003cspan\u003e\u0026#39;)\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;h3\u0026gt;\u0026lt;a href=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e$POST_ID\u003c/span\u003e\u003cspan\u003e.html\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e$TITLE\u003c/span\u003e\u003cspan\u003e\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;p\u0026gt;\u003c/span\u003e\u003cspan\u003e$FIRST_PARAGRAPH\u003c/span\u003e\u003cspan\u003e [...]\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eelse\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e\u003cspan\u003e$TITLE\u003c/span\u003e\u003cspan\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;p\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$CONTENT\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efi\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe’re in the \u003cem\u003enineties\u003c/em\u003e, okay?\u003c/p\u003e\n\u003cp\u003eSo far everything is very simple, even if a bit tedious to write. What we have here is a server that returns \u003cem\u003eall the data necessary for any given screen in one roundtrip\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(Hmm…)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOf course, different screens may need the same data, and we don’t want to duplicate the logic. Luckily, we can \u003cem\u003ereuse dynamic includes\u003c/em\u003e such as \u003ccode\u003epost-details.cgi\u003c/code\u003e. We can \u003cem\u003eeven pass parameters\u003c/em\u003e to them like \u003ccode\u003etruncateContent\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe most annoying thing about this code is that working in Bash is really not for the faint-hearted (i.e. not for me). Let’s see if we can improve on that part.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"php-and-xhp\"\u003e\u003ca target=\"_self\" href=\"#php-and-xhp\"\u003ePHP and XHP\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe could translate this entire example to old school PHP, which gives us better control flow, function calls, variables, and so on. However, I want to skip ahead.\u003c/p\u003e\n\u003cp\u003eNo, not to the modern PHP MVC frameworks.\u003c/p\u003e\n\u003cp\u003eI want to skip ahead to \u003ca target=\"_blank\" href=\"https://codebeforethehorse.tumblr.com/post/3096387855/an-introduction-to-xhp\"\u003eXHP\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou see, the problem with the early PHP programs was that they relied on string manipulation of HTML. In that sense the PHP version doesn’t improve by much:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003e$truncate\u003c/span\u003e\u003cspan\u003e) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eexplode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\n\\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;h3\u0026gt;\u0026lt;a href=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e$postId\u003c/span\u003e\u003cspan\u003e.php\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e$title\u003c/span\u003e\u003cspan\u003e\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;p\u0026gt;\u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e [...]\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e} \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;h1\u0026gt;\u003c/span\u003e\u003cspan\u003e$title\u003c/span\u003e\u003cspan\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026lt;p\u0026gt;\u003c/span\u003e\u003cspan\u003e$content\u003c/span\u003e\u003cspan\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eManipulating HTML as strings leads to code that’s tangled, insecure, and difficult to maintain. Most people in the web development community took that as a signal to embrace \u003ca target=\"_blank\" href=\"https://guides.rubyonrails.org/layouts_and_rendering.html\"\u003eRails-style MVC\u003c/a\u003e where all the HTML was safely moved out of the code into separate files called \u003cem\u003etemplates\u003c/em\u003e (and all the data fetching moved to \u003cem\u003econtrollers\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eHowever, that’s not what happened at Facebook.\u003c/p\u003e\n\u003cp\u003eAt Facebook, they had a different idea.\u003c/p\u003e\n\u003cp\u003eThe problem with PHP, said Facebook engineers, was not the manipulation of markup \u003cem\u003eper se\u003c/em\u003e. What was bad is \u003cem\u003eunprincipled\u003c/em\u003e manipulation of markup, i.e. treating markup as a plain string. Markup has a certain \u003cem\u003eshape\u003c/em\u003e to it—stuff contained in other stuff. What we need is a way to build and manipulate that markup without accidentally destroying its contents or interpolating unsafe content into it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003e$truncate\u003c/span\u003e\u003cspan\u003e) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eexplode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\n\\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehref\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/{\u003c/span\u003e\u003cspan\u003e$postId\u003c/span\u003e\u003cspan\u003e}.php\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$title\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e} \u003c/span\u003e\u003cspan\u003e[...]\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e} \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eecho\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$title\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$content\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese tags are not strings of HTML! They’re \u003cem\u003eobjects\u003c/em\u003e than can be \u003cem\u003eturned\u003c/em\u003e into HTML.\u003c/p\u003e\n\u003cp\u003eNow that we’ve moved markup \u003cem\u003einto\u003c/em\u003e our code in a maintainable way, we can create our own abstractions. For example, we can define our own \u003ccode\u003e\u0026lt;ui:post-details\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eelement\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eXHPRoot\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e) {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eexplode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\n\\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$splitContent\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehref\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/{\u003c/span\u003e\u003cspan\u003e$postId\u003c/span\u003e\u003cspan\u003e}.php\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan\u003eh3\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$firstParagraph\u003c/span\u003e\u003cspan\u003e} \u003c/span\u003e\u003cspan\u003e[...]\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    } \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then we can render it to the page:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eecho\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ejsx-over-the-wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{true}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data...\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e/\u0026gt;;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, we can build an entire web application this way. Tags render other tags, which render other tags, and so on. By eschewing the Rails-style MVC model, we’ve accidentally discovered a much older principle: function composition.\u003c/p\u003e\n\u003cp\u003eOne downside of XHP is that it isn’t very well-suited to client interactivity. Since XHP executes on a server that emits HTML, the most that you can do relatively seamlessly is to replace \u003cem\u003eparts\u003c/em\u003e of an existing markup with the newly generated HTML markup from the server by updating \u003ccode\u003einnerHTML\u003c/code\u003e of some DOM node.\u003c/p\u003e\n\u003cp\u003eReplacing \u003ccode\u003einnerHTML\u003c/code\u003e wasn’t working out particularly well—especially for the highly interative Ads product—which made an engineer (who was not me, by the way) wonder whether it’s possible to run an XHP-style “tags render other tags” paradigm directly on the client computer without losing state between the re-renders. As you might gave guessed, this led to the \u003ca target=\"_blank\" href=\"https://legacy.reactjs.org/blog/2016/09/28/our-first-50000-stars.html#archeology\"\u003einvention of JSX and React.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWho cares about React though?\u003c/p\u003e\n\u003cp\u003eWe’re here to shill XHP.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"async-xhp\"\u003e\u003ca target=\"_self\" href=\"#async-xhp\"\u003eAsync XHP\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEarlier, \u003ccode\u003e\u0026lt;ui:post-details\u0026gt;\u003c/code\u003e got \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e from the calling code:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eecho\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ejsx-over-the-wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{true}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data...\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e/\u0026gt;;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt was not reading \u003ccode\u003etitle\u003c/code\u003e or \u003ccode\u003econtent\u003c/code\u003e on its own—after all, reading them from a database is (ideally) an \u003cem\u003easynchronous\u003c/em\u003e operation, while XHP tags are synchronous.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWere.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAt some point, engineers at Facebook realized that XHP tags would be a lot more powerful if they could load their own data. \u003ca target=\"_blank\" href=\"https://hhvm.github.io/xhp-lib/2015/06/01/new-features-in-depth.html#asynchronous-xhp-rendering\"\u003eAsync XHP tags\u003c/a\u003e were born:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eelement\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eXHPAsync\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easyncRender\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e): Awaitable\u0026lt;XHPRoot\u0026gt; {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e$post\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eloadPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;:\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e$title\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$post\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e$content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e$post\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the \u003ccode\u003e\u0026lt;ui:post-details\u0026gt;\u003c/code\u003e can \u003cem\u003eload its own data\u003c/em\u003e based on \u003ccode\u003epostId\u003c/code\u003e alone:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003elist\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eelement\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eXHPRoot\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ejsx-over-the-wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{true}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003edetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ereact-for-two-computers\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003etruncateContent\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{true}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis approach lets you write the entire UI as \u003cem\u003easynchronous\u003c/em\u003e tags rendering other \u003cem\u003easynchronous\u003c/em\u003e tags—until the final HTML is generated. It’s a powerful way to think about UI and data. It lets you write self-contained components that load their own data, and then plug those components anywhere in the tree with a one-liner. And since XHP tags run on the server, the entire screen is resolved \u003cem\u003ein a single roundtrip\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003elist\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// An entire page of HTML\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eI need to emphasize this again. Async XHP allowed \u003cem\u003eself-contained components that load their own data\u003c/em\u003e — but! — \u003cem\u003edisplaying a screen took a single client/server roundtrip.\u003c/em\u003e There aren’t many UI frameworks that satisfy both of these points.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf you’re making a similar framework, there’s a few details you should think about:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eYou want the siblings to be resolved in parallel. For example, the two \u003ccode\u003e\u0026lt;ui:post-details\u0026gt;\u003c/code\u003e above should \u003ccode\u003eloadPost\u003c/code\u003e around the same time. Async XHP did this.\u003c/li\u003e\n\u003cli\u003eYou also need some way to \u003cem\u003eunblock\u003c/em\u003e the rest of the page if a particular branch of the tree is taking too long. Facebook had a \u003ca target=\"_blank\" href=\"https://engineering.fb.com/2010/06/04/web/bigpipe-pipelining-web-pages-for-high-performance/\"\u003eBigPipe  “pagelet”\u003c/a\u003e system that flushes the tree “in parts” with explicitly designed loading states acting as the seams.\u003c/li\u003e\n\u003cli\u003eIdeally, you want a data access layer that’s able to batch reads and share an in-memory cache across different parts of the request. This ensures that even if tags deeper in the tree start “fetching” later than their parents, you’re utilizing both CPU and IO well—there are always some tags to render while waiting for the DB.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOverall, async XHP was an incredibly productive mental model to work with—as long as your app was not very interactive. Unfortunately, for highly interactive apps, emitting HTML is not enough. You \u003cem\u003eneed\u003c/em\u003e to be able to navigate, handle mutations, and refresh content without losing the client-side state. Since XHP targeted HTML, it was a poor fit for rich interfaces, and React gradually took over.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStill, as interfaces were being converted to React, there was a noticeable loss in conceptual simplicity. The UI and the \u003cem\u003edata that it needs\u003c/em\u003e—two things that are so naturally described together—were being pulled apart into separate codebases.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eGraphQL with \u003ca target=\"_blank\" href=\"https://relay.dev/\"\u003eRelay\u003c/a\u003e were somewhat bridging that gap and contributed some very important innovations, but using them never felt \u003cem\u003eas direct\u003c/em\u003e as writing async XHP.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"native-templates\"\u003e\u003ca target=\"_self\" href=\"#native-templates\"\u003eNative Templates\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eXHP had an unlikely comeback at Facebook.\u003c/p\u003e\n\u003cp\u003eThe mental model it offered was so productive that people didn’t just want to write web interfaces with it. They also wanted to make \u003cem\u003enative apps\u003c/em\u003e with it.\u003c/p\u003e\n\u003cp\u003eThink about it.\u003c/p\u003e\n\u003cp\u003eThis piece of XHP is an \u003cem\u003eobject:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:title\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:content\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYes, it \u003cem\u003ecan\u003c/em\u003e be turned into a piece of HTML:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data as JSON\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut it could also be turned into another representation, such as JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ex:frag\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data as JSON\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere’s nothing that \u003cem\u003eactually\u003c/em\u003e constrains you to the primitives available in HTML. For example, \u003ccode\u003e\u0026lt;ui:post-details\u0026gt;\u003c/code\u003e could have been emitting \u003ca target=\"_blank\" href=\"https://developer.apple.com/documentation/uikit/uitextview\"\u003eiOS views\u003c/a\u003e instead:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eios\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eUITextView\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:title\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eios\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eUITextView\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eios\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eUITextView\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:content\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eios\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eUITextView\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese tags could be transported as JSON over the network to a native iOS app that would read that JSON and construct a native iOS view hierarchy from these tags.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ex:frag\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eios:UITextView\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eios:UITextView\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data as JSON\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMeanwhile, on the server, you can define your own tags that render those tags:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e :\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003elist\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e :x:element \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eprotected\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eXHPRoot\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui:post-details\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          postId=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ejsx-over-the-wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          truncateContent={\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui:post-details\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          postId=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ereact-for-two-computers\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          truncateContent={\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003efrag\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn other words, you’d have a server endpoint that returns \u003cem\u003ethe entire data that any particular screen needs in a single roundtrip\u003c/em\u003e. Where the “data” is the native UI.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"php\" data-theme=\"default\"\u003e\u003ccode data-language=\"php\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eui\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003elist\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// A screen of iOS components\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou might think this wouldn’t work because a native app can’t rely on a backend in the critical path. However, that’s a misunderstanding of the approach. All you need to ensure is that you \u003cem\u003erequest more UI\u003c/em\u003e in the same situations as \u003cem\u003ewhen you would make an API call,\u003c/em\u003e and not more often. You’ll also want to have a fallback UI (like a spinner) available instantly \u003cem\u003ejust like when making an API call.\u003c/em\u003e In fact, you can even bundle the JSON for some of the initial screens directly within your app’s binary.\u003c/p\u003e\n\u003cp\u003eIn practice, system components like \u003ccode\u003eios:UITextView\u003c/code\u003e are a bit too low-level to be good primitives for this kind of format. You really want to have a good “palette” of highly interactive primitives since you want \u003cem\u003esome\u003c/em\u003e interactions to “skip the server” and be entirely local. For example, you might implement an \u003ccode\u003eios:ColorPicker\u003c/code\u003e primitive in the native code so that it follows your finger’s movement, but \u003cem\u003epersist\u003c/em\u003e the chosen color using a call to the API that will serve you the next screen as JSON.\u003c/p\u003e\n\u003cp\u003eAlso, if you made the primitives platform-agnostic (which Facebook did), you could use the same server codebase to assemble screens for both iOS and Android:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ent:flexbox\u003c/span\u003e\u003cspan\u003e flex-direction=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ecolumn\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ent:text\u003c/span\u003e\u003cspan\u003e font-size={\u003c/span\u003e\u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e} font-weight={\u003c/span\u003e\u003cspan\u003eFontWeight\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBOLD\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:title\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ent:text\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ent:text\u003c/span\u003e\u003cspan\u003e font-size={\u003c/span\u003e\u003cspan\u003e18\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e$this\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e:content\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ent:text\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ent:flexbox\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOkay, returning an entire screen as JSON, has anyone done this before?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"sdui\"\u003e\u003ca target=\"_self\" href=\"#sdui\"\u003eSDUI\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis is not a novel idea.\u003c/p\u003e\n\u003cp\u003eThis is not even a controversial idea.\u003c/p\u003e\n\u003cp\u003eYou’ve heard of HTML, right? This is like HTML, but with \u003cem\u003eyour\u003c/em\u003e design system. Imagine an API endpoint that returns some UI as JSON. Let’s use the JSX syntax:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/app/profile/:personId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efeatureFlags\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efindPerson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epersonId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFeatureFlags\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePage\u003c/span\u003e\u003cspan\u003e title={\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#39;s Profile`\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eHeader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eAvatar\u003c/span\u003e\u003cspan\u003e src={\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatarUrl\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPremium \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePremiumBadge\u003c/span\u003e\u003cspan\u003e /\u0026gt;}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eHeader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLayout\u003c/span\u003e\u003cspan\u003e columns={\u003c/span\u003e\u003cspan\u003efeatureFlags\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eincludes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eTWO_COL_LAYOUT\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e) ? \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePanel\u003c/span\u003e\u003cspan\u003e title=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eUser Info\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eUserDetails\u003c/span\u003e\u003cspan\u003e user={\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eEditButton\u003c/span\u003e\u003cspan\u003e /\u0026gt;}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ePanel\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePanel\u003c/span\u003e\u003cspan\u003e title=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eActivity\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eActivityFeed\u003c/span\u003e\u003cspan\u003e userId={\u003c/span\u003e\u003cspan\u003eperson\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e} limit={\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ePanel\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ePage\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut since you’re essentially coding an API endpoint, you can do anything \u003cem\u003eyour API\u003c/em\u003e can do—check the feature flags, run server-only logic, read from the data layer.\u003c/p\u003e\n\u003cp\u003eAgain, this is not a new idea.\u003c/p\u003e\n\u003cp\u003eIn fact, it’s how many of the top native apps are built. \u003ca target=\"_blank\" href=\"https://github.com/novitae/igbloks/tree/main/KNOWLEDGES\"\u003eInstagram does this\u003c/a\u003e, \u003ca target=\"_blank\" href=\"https://medium.com/airbnb-engineering/a-deep-dive-into-airbnbs-server-driven-ui-system-842244c5f5\"\u003eAirbnb does this\u003c/a\u003e, \u003ca target=\"_blank\" href=\"https://www.reddit.com/r/androiddev/comments/1046xel/comment/j35yr8c/\"\u003eUber does this\u003c/a\u003e, \u003ca target=\"_blank\" href=\"https://www.infoq.com/news/2023/09/reddit-feed-server-driven-ui/\"\u003eReddit does this\u003c/a\u003e, etc. These companies use in-house frameworks that implement this pattern. Many web developers are completely unaware of this pattern which is ironic because the pattern is incredibly “webby”.\u003c/p\u003e\n\u003cp\u003eIn the native sphere, the pattern is known as “SDUI”—\u003cem\u003e“server driven UI”\u003c/em\u003e. This sounds fancy but essentially it’s just JSON endpoints that return UI trees:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// /app/profile/123\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePage\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    title: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJae\u0026#39;s Profile\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHeader\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eAvatar\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e            src\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ehttps://example.com/avatar.jpg\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePremiumBadge\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLayout\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        columns\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        children\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen, on the native side, you have some concrete implementations of those primitives—\u003ccode\u003ePage\u003c/code\u003e, \u003ccode\u003eHeader\u003c/code\u003e, \u003ccode\u003eAvatar\u003c/code\u003e, \u003ccode\u003ePremiumBadge\u003c/code\u003e, \u003ccode\u003eLayout\u003c/code\u003e, and so on.\u003c/p\u003e\n\u003cp\u003eUltimately, this feels like \u003cem\u003epassing props\u003c/em\u003e from the server to the client.\u003c/p\u003e\n\u003cp\u003eSo if we ever find ourselves in a situation where we have a bunch of data prepared on the server, and we need to find a good way to pass pieces of that data to a bunch of functions declared on the client, a format like this might turn out to be handy.\u003c/p\u003e\n\u003cp\u003eLet’s keep that in mind.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"recap-components-as-json\"\u003e\u003ca target=\"_self\" href=\"#recap-components-as-json\"\u003eRecap: Components as JSON\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFrom the beginning of time, making web apps involved responding to request for a specific screen with all the data needed for that screen. (HTML is data, too.)\u003c/li\u003e\n\u003cli\u003eFrom the beginning of time, people looked for ways to make the generation of that “data” dynamic, to split it into reusable logic, and to pass parameters to that logic.\u003c/li\u003e\n\u003cli\u003eIn the early days of the web, it was common to compose HTML by string manipulation. Unfortunately, it was easy to mess up and led to many issues.\u003c/li\u003e\n\u003cli\u003eThis led many in the web community to banish markup to templates. But at Facebook, XHP proposed another approach: markup that produces objects.\u003c/li\u003e\n\u003cli\u003eIt turns out that making markup a first-class coding primitive naturally leads to tags “returning” other tags—instead of MVC, we got functional composition.\u003c/li\u003e\n\u003cli\u003eXHP evolved into Async XHP, which allowed to keep the logic for rendering some UI close to the logic for loading the data it needs. This was extremely powerful.\u003c/li\u003e\n\u003cli\u003eUnfortunately, producing HTML as the primary output format is a dead end for interactive applications. You can’t “refresh” HTML in-place without blowing away the state, and state is important.\u003c/li\u003e\n\u003cli\u003eHowever, nothing actually constraints us to HTML. If tags are objects, they can be sent as JSON. Many of the most successful \u003cem\u003enative\u003c/em\u003e apps are built this paradigm. (And if you need HTML, you can always turn JSON \u003cem\u003einto\u003c/em\u003e HTML later on.)\u003c/li\u003e\n\u003cli\u003eReturning a tag of client primitives as a JSON tree is a nice way to represent “passing props” to the client.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003ch2 id=\"part-3-jsx-over-the-wire\"\u003e\u003ca target=\"_self\" href=\"#part-3-jsx-over-the-wire\"\u003ePart 3: JSX Over The Wire\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"what-were-building\"\u003e\u003ca target=\"_self\" href=\"#what-were-building\"\u003eWhat We’re Building\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSo far, we’ve explored two separate lines of thought:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDirectly calling REST APIs from the client layer \u003ca href=\"#rest-and-json-api\"\u003eignores the realities\u003c/a\u003e of how user interfaces evolve. We can solve this by \u003ca href=\"#api-for-viewmodels\"\u003eadding a new backend layer\u003c/a\u003e that assembles the data on the server according to what each screen \u003cem\u003eneeds\u003c/em\u003e. This layer \u003ca href=\"#extracting-a-viewmodel\"\u003ecan be split into functions\u003c/a\u003e that each specify how to load data for a particular \u003cem\u003epart\u003c/em\u003e of the screen. Then these functions can be \u003ca href=\"#composing-viewmodels\"\u003ecomposed together\u003c/a\u003e. However, we’re not sure how to actually \u003cem\u003etie\u003c/em\u003e those functions to the components whose props they are preparing.\u003c/li\u003e\n\u003cli\u003eWe can also \u003ca href=\"#html-ssi-and-cgi\"\u003estart from plain HTML\u003c/a\u003e and “server includes”. If we avoid early MVC-ification and instead explore treating markup as objects, we’ll \u003ca href=\"#php-and-xhp\"\u003eeventually invent\u003c/a\u003e the concept of \u003ca href=\"#async-xhp\"\u003easynchronous tags\u003c/a\u003e that load their own data and return more tags. This approach is very powerful because it lets us build self-contained components without causing multiple client/server roundtrips for fetching a single screen. Emitting HTML \u003cem\u003eas the only target format\u003c/em\u003e is a dead end, but as proven by many top native applications using this approach, \u003ca href=\"#native-templates\"\u003eemitting JSON\u003c/a\u003e retains all the benefits. All you need is a \u003ca href=\"#sdui\"\u003eset of client-side primitives\u003c/a\u003e that can be composed from the server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt turns out that these are two different ways to talk about the same thing. Ultimately, all we want is a system with these five properties:\u003c/p\u003e\n\u003ch4 id=\"dans-async-ui-framework-checklist\"\u003e\u003ca target=\"_self\" href=\"#dans-async-ui-framework-checklist\"\u003eDan’s Async UI Framework Checklist\u003c/a\u003e\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eOur system lets us split a user interface into rich, interactive components.\u003c/li\u003e\n\u003cli\u003eComponents should have a \u003cem\u003edirect connection\u003c/em\u003e with the logic that specifies how \u003cem\u003etheir\u003c/em\u003e server data is computed. If a component receives some information from the server, you should be a single Ctrl+Click or “Find All References” away from every place on the server where \u003cem\u003ethat particular component’s\u003c/em\u003e props are being calculated. It should be straightforward to change which data is received by which component.\u003c/li\u003e\n\u003cli\u003eThere should be a way to make pieces of UI truly self-contained—including their server data dependencies and corresponding server logic. You should be able to nest a piece of UI inside another piece of UI without worrying what data it needs.\u003c/li\u003e\n\u003cli\u003eA navigation to a new screen should be possible to complete in one client/server roundtrip. Even if you have hundreds of components that each want to load some data, from the client’s perspective, a screen should arrive as a single response. In fact, we’d like our system to \u003cem\u003estand in the way\u003c/em\u003e of creating client/server waterfalls.\u003c/li\u003e\n\u003cli\u003eWe’d like our system to fully support rich interactivity. This means that, even if some parts of it run on the server, it is \u003cem\u003eunacceptable\u003c/em\u003e to require full-page refreshes on navigation or after a mutation. In fact, the system should support in-place refreshing of server data directly within an interactive tree. A component should be able to “receive new props” from the server without losing any client state.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDo you know any such systems? (Try scoring the frameworks you know.)\u003c/p\u003e\n\u003cp\u003eIf not, let’s invent one right now.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"viewmodels-revisited\"\u003e\u003ca target=\"_self\" href=\"#viewmodels-revisited\"\u003eViewModels, Revisited\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet’s get back to \u003ca href=\"#plumbing-viewmodel-parameters\"\u003ethe last version\u003c/a\u003e of \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e from earlier:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    totalLikeCount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    isLikedByUser\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}))\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function is a \u003cem\u003eslice of the backend\u003c/em\u003e that prepares the props for the \u003ccode\u003eLikeButton\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser: \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://example.com/alice.jpg\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://example.com/bob.jpg\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEventually we were hoping that the \u003ccode\u003eLikeButton\u003c/code\u003e will receive these props:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, we haven’t come up with any mechanism to connect the two sides yet. Who’s gonna pass the JSON returned by the \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e to the \u003ccode\u003eLikeButton\u003c/code\u003e component? How do we tie the ViewModels to their components?\u003c/p\u003e\n\u003cp\u003eWhat if we took a page out of \u003ca href=\"#sdui\"\u003eSDUI\u003c/a\u003e and expressed that by returning a \u003cem\u003etag\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e ({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs \u003ca href=\"#sdui\"\u003ewe know\u003c/a\u003e from earlier, we can represent this JSX as a tree of JSON. In fact, it’s almost like the original JSON, but now it specifies the receiving component:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser: \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://example.com/alice.jpg\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      avatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ehttps://example.com/bob.jpg\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen React on the client would \u003cem\u003eknow\u003c/em\u003e to pass these props to the \u003ccode\u003eLikeButton\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd so we’ve finally stitched the ViewModel and its component together!\u003c/p\u003e\n\u003cp\u003eWe’ve tied the code \u003cem\u003egenerating\u003c/em\u003e the props with the code \u003cem\u003econsuming\u003c/em\u003e those props. Now our ViewModel and our component are a Ctrl+Click away from each other. Since JSX expressions are typechecked, we also get full typechecking for free.\u003c/p\u003e\n\u003cp\u003eHave a look at the complete picture:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e ({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      }))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// e.g. \u0026#34;Liked by You, Alice, and 13 others\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    buttonText \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eformatLikeText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur ViewModel is just like an \u003ca href=\"#async-xhp\"\u003eAsync XHP\u003c/a\u003e tag, passing some information to our own \u003ccode\u003e\u0026lt;LikeButton\u0026gt;\u003c/code\u003e primitive that lives on client (just like in \u003ca href=\"#sdui\"\u003eSDUI\u003c/a\u003e). Together, they represent a self-contained piece of UI that knows how to load its own data.\u003c/p\u003e\n\u003cp\u003eLet’s do this again with another ViewModel.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"lets-do-this-again\"\u003e\u003ca target=\"_self\" href=\"#lets-do-this-again\"\u003eLet’s Do This Again\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNow let’s revisit the \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e from \u003ca href=\"#composing-viewmodels\"\u003ethis section\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      maxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe’ve never explicitly written it down, but suppose that there was a matching \u003ccode\u003ePostDetails\u003c/code\u003e component that can take that JSON and actually render the post:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s connect them together.\u003c/p\u003e\n\u003cp\u003eFirst, let’s change \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e to return a \u003ccode\u003ePostDetails\u003c/code\u003e \u003cem\u003etag:\u003c/em\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postTitle={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postContent={\u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emaxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postAuthor={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postLikes={\u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the JSON it returns will be wrapped into a \u003ccode\u003ePostDetails\u003c/code\u003e JSX element:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postAuthor: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postContent: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eSuppose you have an API route that returns some data as JSON.\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        isLikedByUser: \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        friendLikes: \u003c/span\u003e\u003cspan\u003e[{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eAlice\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          firstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eBob\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOn the client, React will take these props and pass them to \u003ccode\u003ePostDetails\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postLikes\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e dangerouslySetInnerHTML={{ \u003c/span\u003e\u003cspan\u003e__html\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e postContent \u003c/span\u003e\u003cspan\u003e}} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eby \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd that connects the ViewModel with its component!\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"composing-viewmodels-revisited\"\u003e\u003ca target=\"_self\" href=\"#composing-viewmodels-revisited\"\u003eComposing ViewModels, Revisited\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNotice how \u003ccode\u003epostLikes\u003c/code\u003e in the last example is rendered directly into UI:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can do this because it’s the \u003ccode\u003e\u0026lt;LikeButton\u0026gt;\u003c/code\u003e with its props already preconfigured by \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e. It was right here in the JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postLikes: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou might recall that we obtained it by calling \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epostLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, having ViewModels manually call other ViewModels inside \u003ccode\u003ePromise.all\u003c/code\u003e quickly gets very tedious. So we’ll adopt a new convention. Let’s assume that a ViewModel can embed \u003cem\u003eanother\u003c/em\u003e ViewModel by returning a JSX tag.\u003c/p\u003e\n\u003cp\u003eThis will let us clean up the code quite a bit:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postTitle={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postContent={\u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emaxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postAuthor={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postLikes={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          includeAvatars={\u003c/span\u003e\u003cspan\u003eincludeAvatars\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      }\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this change, calling \u003ccode\u003ePostDetailsViewModel\u003c/code\u003e will return “unfinished” JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a component on the client\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postLikes: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      type: LikeButtonViewModel\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// 🟡 We haven\u0026#39;t run this ViewModel yet\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        postId: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ejsx-over-the-wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        includeAvatars: \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe code responsible for sending JSON to the client will see that it’s a ViewModel (so it still needs to run!), and will call \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e to get more JSON:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a component on the client\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    postLikes: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a component on the client\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eViewModels will get recursively unfolded as they each contribute their part of the JSON. This might remind you of how \u003ca href=\"#php-and-xhp\"\u003eXHP tags can recursively render other XHP tags\u003c/a\u003e. The final JSON will be turned on the client into a React component tree.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postLikes={\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      totalLikeCount={\u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003chr/\u003e\n\u003ch3 id=\"the-data-always-flows-down\"\u003e\u003ca target=\"_self\" href=\"#the-data-always-flows-down\"\u003eThe Data Always Flows Down\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo make the JSX look slightly nicer, we can also rename \u003ccode\u003epostLikes\u003c/code\u003e to \u003ccode\u003echildren\u003c/code\u003e. This will let us nest \u003ccode\u003eLikeButtonViewModel\u003c/code\u003e as a JSX child of \u003ccode\u003ePostDetails\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere’s the entire code so far. Notice how the data flows down:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postTitle={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postContent={\u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emaxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postAuthor={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        includeAvatars={\u003c/span\u003e\u003cspan\u003eincludeAvatars\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e ({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    }))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAll of the server logic above will execute while generating the JSON. This includes both \u003ccode\u003egetPost\u003c/code\u003e, \u003ccode\u003eparseMarkdown\u003c/code\u003e, and \u003ccode\u003egetFriendLikes\u003c/code\u003e. The response will contain the data \u003cem\u003efor the entire screen\u003c/em\u003e, satisfying one of our \u003ca href=\"#dans-async-ui-framework-checklist\"\u003ekey requirements\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a component on the client\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    postTitle: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eJSX Over The Wire\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    children: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a component on the client\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFrom the client’s perspective, everything will appear precomputed:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  children\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e dangerouslySetInnerHTML={{ \u003c/span\u003e\u003cspan\u003e__html\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e postContent \u003c/span\u003e\u003cspan\u003e}} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eby \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e friendLikes }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn particular, by the time \u003ccode\u003ePostDetails\u003c/code\u003e runs, the \u003ccode\u003echildren\u003c/code\u003e it receives will be the \u003ccode\u003e\u0026lt;LikeButton\u0026gt;\u003c/code\u003e tag itself with predefined props. The ViewModels configure the props for the client. \u003cstrong\u003eThis is why on the client, all the props are “already there”.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSpend some time with the code above and make sure it sinks in.\u003c/p\u003e\n\u003cp\u003eYes, this \u003cem\u003eis\u003c/em\u003e weird.\u003c/p\u003e\n\u003cp\u003eIt is also glorious.\u003c/p\u003e\n\u003cp\u003eWhat we found is a way to compose tags across client-server boundaries where the server parts can be freely wrapped in the client parts, the client parts can be freely wrapped in the server parts, and not only do they \u003cem\u003ejust work\u003c/em\u003e—we’re also performing the data loading for all of the server parts in \u003cem\u003ea single roundtrip.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIn fact, this approach satisfies every point on \u003ca href=\"#dans-async-ui-framework-checklist\"\u003emy checklist.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNow let’s tidy it up and clean up some loose ends.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"a-router-viewmodel\"\u003e\u003ca target=\"_self\" href=\"#a-router-viewmodel\"\u003eA Router ViewModel\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAs we refactor our ViewModels to use JSX (for the JSX-sceptical readers—the point here isn’t just the syntax, although the syntax is nice—but \u003ca href=\"https://overreacted.io/react-as-a-ui-runtime/#lazy-evaluation\"\u003elazy evaluation\u003c/a\u003e), we might realize that we don’t actually need separate Express routes for every screen.\u003c/p\u003e\n\u003cp\u003eInstead, we might want to do something like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eapp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/*\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereq\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e res\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e req\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003etoJSON\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eRouterViewModel\u003c/span\u003e\u003cspan\u003e url={\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e} /\u0026gt;);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Evaluate JSX\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eres\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen we’d have a Router ViewModel that matches screens to routes:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRouterViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ url }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ematchRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    route \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetailsRouteViewModel\u003c/span\u003e\u003cspan\u003e postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ematchRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    route \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostListRouteViewModel\u003c/span\u003e\u003cspan\u003e /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e route\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then each route would also be a ViewModel:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsRouteViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostListRouteViewModel\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetailsViewModel\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOn the server, it’s ViewModels all the way down.\u003c/p\u003e\n\u003cp\u003eThis might seem superfluous at this point. But moving the routing logic \u003cem\u003einto\u003c/em\u003e the ViewModel world would let \u003ccode\u003eRouterViewModel\u003c/code\u003e wrap its output into a client-side \u003ccode\u003e\u0026lt;Router\u0026gt;\u003c/code\u003e that could re-request the JSON when you navigate to another screen.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRouterViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ url }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ematchRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst { \u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eparseRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-details/:postId\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    route \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostDetailsRouteViewModel\u003c/span\u003e\u003cspan\u003e postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ematchRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e/screen/post-list\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    route \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostListRouteViewModel\u003c/span\u003e\u003cspan\u003e /\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eRouter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eroute\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eRouter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRouter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003etree\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetTree\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ... maybe add some logic here later ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e tree\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis could also let us—if we wanted to—implement a more granular router that can split the path into segments, prepare the ViewModels for each segment in parallel when it receives a request, and even re-request individual segments on navigation. This way, we would no longer have to re-request the entire page whenever we need to go to another screen. Of course, we wouldn’t want to implement this kind of logic \u003cem\u003ewithin\u003c/em\u003e the app. Ideally, a framework would do this.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"server-and-client-components\"\u003e\u003ca target=\"_self\" href=\"#server-and-client-components\"\u003eServer and Client Components\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe can drop the pretense now—we’re describing React Server Components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOur “ViewModels” are Server Components.\u003c/li\u003e\n\u003cli\u003eOur “Components” are Client Components.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are good reasons to call both of them Components. Although in the first part of this post, Server Components \u003ca href=\"#composable-bff\"\u003ebegan their journey as ViewModels\u003c/a\u003e, their lineage can be equally convincingly traced back to \u003ca href=\"#async-xhp\"\u003eAsync XHP tags\u003c/a\u003e. Since they no longer have to return JSON objects, and because in practice you’ll often import the same components from both “sides”, it makes sense to say Components. (In fact, in my incomplete example, all Client Components could be moved to the Server.)\u003c/p\u003e\n\u003cp\u003eIn this post, we haven’t discussed the actual mechanism “connecting” the module systems of Server and Client worlds. This will be a topic for another post, but in short, when you \u003ccode\u003eimport\u003c/code\u003e something from a module with \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e, you don’t get the real thing—you just get a \u003cem\u003ereference\u003c/em\u003e which describes \u003cem\u003ehow to load\u003c/em\u003e it.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e LikeButton \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./LikeButton\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e// \u0026#34;src/LikeButton.js#LikeButton\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButtonViewModel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e ({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// e.g. \u0026#34;Liked by You, Alice, and 13 others\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    buttonText \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eformatLikeText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo the generated JSON will contain an instruction for loading the \u003ccode\u003eLikeButton\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  type: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003esrc/LikeButton.js#LikeButton\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// ✅ This is a Client Component\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  props: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount: \u003c/span\u003e\u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eReact will read that instruction and load it as a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag (or read it from the bundler cache). The format is bundler-specific, which explains why React Server Components requires a bundler integration. (\u003ca target=\"_blank\" href=\"https://parceljs.org/recipes/rsc/\"\u003eParcel just released theirs\u003c/a\u003e which isn’t tied to a framework, so it’s perfect if you want to play with how RSC works.)\u003c/p\u003e\n\u003cp\u003eIt’s important that React Server Components emit JSON rather than HTML:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eServer tree can be refetched in-place without losing state. (React will just do its “virtual DOM” thing, i.e. apply the new props to the already existing components.)\u003c/li\u003e\n\u003cli\u003eYou can target other platforms than web. (Here’s a \u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=djhEgxQf3Kw\"\u003ecool demo\u003c/a\u003e.)\u003c/li\u003e\n\u003cli\u003eYou can still turn that JSON into HTML by executing all the Client Components within it! That’s not \u003cem\u003erequired\u003c/em\u003e by RSC, but it is definitely doable. That’s why “Client” components may run on the “server”—to output HTML, you’d run both “sides”.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo conclude this post, I’ll say the following. I know that React Server Components have not been everyone’s cup of tea. It twists your brain but I think it twists it in a good way. I’ll be posting more about why I’m excited about RSC and will try to distill some of these explanations into shorter posts. But in the meantime, I hope that this post provided some historical background on the \u003cem\u003emotivation\u003c/em\u003e behind RSC, \u003ca href=\"#dans-async-ui-framework-checklist\"\u003ewhat it can do\u003c/a\u003e, as well as how you could arrive at RSC through your own thinking.\u003c/p\u003e\n\u003cp\u003e(By the way, if you enjoy more philosophical and whimsical longreads, check out my \u003ca href=\"https://overreacted.io/react-for-two-computers/\"\u003elast post\u003c/a\u003e which arrives at RSC from the first principles without any history.)\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"recap-jsx-over-the-wire\"\u003e\u003ca target=\"_self\" href=\"#recap-jsx-over-the-wire\"\u003eRecap: JSX Over The Wire\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eReact Server Components solve the \u003ca href=\"#recap-json-as-components\"\u003eproblems outlined in the first part\u003c/a\u003e by using \u003ca href=\"#recap-components-as-json\"\u003etechniques outlined in the second part\u003c/a\u003e. In particular, they let you “componentize” the UI-specific parts of your API and ensure they evolve together with your UI.\u003c/li\u003e\n\u003cli\u003eThis means that there is a direct connection between your components and the server code that prepares their props. You can always “Find All References” to find from where on the server the data is flowing into each of your components.\u003c/li\u003e\n\u003cli\u003eBecause React Server Components emit JSON, they don’t “blow away” the state of the page on refetches. Your components can receive fresh props from the server.\u003c/li\u003e\n\u003cli\u003eReact Server Components emit JSON, but that JSON can \u003cem\u003ealso\u003c/em\u003e be (optionally) turned to HTML for first render. It’s easy to make HTML out of JSON, but not the inverse.\u003c/li\u003e\n\u003cli\u003eReact Server Components let you create self-contained pieces of UI that take care of preparing their own server data. However, all this preparation occurs within a single roundtrip. Although your code is modular, their execution is coalesced.\u003c/li\u003e\n\u003cli\u003eRSC is mindbending, I won’t lie. Sometimes you have to think inside-out. But personally, I think RSC is awesome. The tooling is still evolving but I’m excited for its future. I hope to see more technologies thoughtfully blending the boundaries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003ch3 id=\"final-code-slightly-edited\"\u003e\u003ca target=\"_self\" href=\"#final-code-slightly-edited\"\u003eFinal Code, Slightly Edited\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhile this isn’t a \u003cem\u003erunnable\u003c/em\u003e application (I bet \u003cem\u003eyou\u003c/em\u003e could get there with \u003ca target=\"_blank\" href=\"https://nextjs.org/\"\u003eNext\u003c/a\u003e or \u003ca target=\"_blank\" href=\"https://parceljs.org/recipes/rsc/\"\u003eParcel\u003c/a\u003e) and might contain mistakes, here’s the complete code example. I’ve done a few renames to drop the “ViewModel” terminology so it looks more idiomatic.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e PostDetails\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e LikeButton \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostDetailsRoute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ postId }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostListRoute\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetRecentPostIds\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostIds\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  truncateContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostLayout\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postTitle={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postContent={\u003c/span\u003e\u003cspan\u003eparseMarkdown\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e, {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emaxParagraphs\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e truncateContent \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eundefined\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e})}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      postAuthor={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthor\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        postId={\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        includeAvatars={\u003c/span\u003e\u003cspan\u003eincludeAvatars\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ePostLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  includeAvatars\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ePromise\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eall\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetPost\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003egetFriendLikes\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epostId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e limit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    totalLikeCount={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    isLikedByUser={\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    friendLikes={\u003c/span\u003e\u003cspan\u003efriendLikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elikes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e ({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efirstName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eavatar\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e includeAvatars \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003el\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eavatar \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    }))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostLayout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postTitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postContent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  postAuthor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  children\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003epostTitle\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e dangerouslySetInnerHTML={{ \u003c/span\u003e\u003cspan\u003e__html\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e postContent \u003c/span\u003e\u003cspan\u003e}} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eby \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003epostAuthor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  totalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  friendLikes\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eLike\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    buttonText \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eformatLikeText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etotalLikeCount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e isLikedByUser\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e friendLikes\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e className={\u003c/span\u003e\u003cspan\u003eisLikedByUser\u003c/span\u003e\u003cspan\u003e ? \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eliked\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e : \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ebuttonText\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHappy stitching!\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "86 min read",
  "publishedTime": null,
  "modifiedTime": null
}
