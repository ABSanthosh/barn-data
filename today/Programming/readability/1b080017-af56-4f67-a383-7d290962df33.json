{
  "id": "1b080017-af56-4f67-a383-7d290962df33",
  "title": "GitHub for Beginners: Building a REST API with Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-building-a-rest-api-with-copilot/",
  "description": "See how you can use GitHub Copilot to build an API. The post GitHub for Beginners: Building a REST API with Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 28 Apr 2025 13:00:42 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "GitHub for beginners",
    "REST API"
  ],
  "byline": "Kedasha Kerr",
  "length": 19132,
  "excerpt": "See how you can use GitHub Copilot to build an API.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of GitHub Copilot. This is our fifth episode, and we’ve already talked about Copilot in general, some of its essential features, how to write good prompts, and a bit about security best practices. We have all the previous episodes on our blog and available as videos. Today we’re diving a little deeper—we’re using GitHub Copilot to help us build a backend REST API. We’ll walk through how to build the backend for Planventure, a travel itinerary builder that helps users plan their trips. You can find a full description of what we’ll be building in this repository. What you’ll need and what we’re building Before we get started, here’s what you’ll need to install: A code editor like VS Code Python SQLite Viewer to view database tables An API client like Bruno to test your routes Access to GitHub Copilot — sign up for free! What we’re building: We’re creating a minimum viable product (MVP) for Planventure’s backend API. In the next episode, we’ll build the frontend to connect to the API. Here’s what we’ll include: REST API built with Flask Database support using SQLAlchemy User authentication (with password hashing and JWTs) Full CRUD functionality for trips Each trip will include: Destination Start and end dates A basic itinerary with location coordinates (perfect for maps) At the end of this, we want to have a working API that handles user authentication and basic trip management. Step 1: Setting up the environment Fork and clone the planventure repository. Once you’ve done that, cd into the planventure-api directory in your code editor. git clone https://github.com/github-samples/planventure cd planventure-api Open up your terminal and run the following commands to create and activate a virtual environment. python3 -m venv venv source venv/bin/activate Assuming you’re using VS Code, you’ll see venv in the status bar at the bottom. If you’re using another editor, be sure to verify that you’re in your virtual environment. Staying in your terminal, run this command to install dependencies: pip install -r requirements.txt Run the following command in your terminal to start the server: flask run --debug You should see your server running on 127.0.0.1:5000. Use Bruno to make a GET request to that URL and you should see the following welcome message: Remember to add venv/ to your .gitignore! Step 2: Create the Database Now that you’ve got your environment created, it’s time to start using Copilot to generate some code. We’ll use Copilot Chat and Copilot Edits to generate our database setup. Open the app.py file and Copilot Chat, choose the Ask option, and enter the following prompt: @workspace Update the Flask app with SQLAlchemy and basic configurations At the bottom of the chat window, click the model selector and select the Claude 3.5 Sonnet model and send the prompt. Copilot will provide a plan, a code block, and a summary of suggested changes. Whenever you receive code suggestions from Copilot, it’s important to review them and understand the changes it’s suggesting. After reviewing the changes, hover over the code block and click the Apply in editor button—the first button in the top-right of the suggested code. Select the option to apply the changes into the active editor. Copilot will make these updates in the open file. Click Accept to add those changes. https://github.blog/wp-content/uploads/2025/04/apply_in_editor_vid.mp4#t=0.001 If Copilot provided suggestions that need to be in a new file, hover over the change and select the three dots, then select Insert into New File and save. https://github.blog/wp-content/uploads/2025/04/insert_new_file.mp4#t=0.001 Now we need to update our dependencies. Go back to Copilot Chat and enter the following prompt: @workspace update requirements.txt with the necessary packages for Flask API with SQLAlchemy and JWT Open the requirements.txt file. Hover over the suggested changes, click the Apply in editor button, and once again select the option to apply the changes into the active editor. Just like before, accept the changes and save the file. Step 3: Time to create some models Now it’s time to create our User and Trip models. This GitHub issue describes our requirements. According to the issue, the User model needs an email, a password, and must include password hashing and timestamps. The Trip model needs to have a destination, start and end dates, coordinates, and an itinerary with a user relationship. To do all of this, we’re going to use Copilot Edits. Click on the chat icon in your editor, and from the dropdown, select Edits. Open your app.py and requirements.txt file and drag them into the chat window. Then choose the Claude 3.5 Sonnet model from the model picker. Now send the following prompt to Copilot Edits: Create SQLAlchemy User model with email, password_hash, and timestamps. Add code in new files. Copilot Edits will then create a plan to do what you asked. It creates some new files and folders, as well as updates existing files. Accept the changes, review the code, and make any corrections necessary before saving the files. https://github.blog/wp-content/uploads/2025/04/edits_prompt_flow.mp4#t=0.001 Check the video for examples of things to look for, but remember that your changes might be different. Copilot can provide different suggestions for the same prompts. Now create a python script to create the database tables. Send Copilot Edits the following prompt: Update code to be able to create the db tables with a python shell script. As before, Copilot Edits will go to work and create or edit files as necessary. Accept the code and review the changes, making sure these changes address your needs. After saving the reviewed changes, go back to your terminal and initialize the database by running: python3 init_db.py If Copilot Edits created a different filename than init_db.py, use the filename in your project. After the script runs, you’ll see a new planventure.db file in your project. However, you need to install an extension in order to see the tables. Navigate to the extensions tab and search for “SqLite viewer”. Click Install, and then click on planventure.db to get a look at the table. Now that you’ve created the User model, you need the Trip model. Navigate back to Copilot Edits and send: Create SQLAlchemy Trip model with user relationship, destination, start date, end date, coordinates, and itinerary By now you can probably guess what you need to do. It’s time to accept the changes and review them, making sure to correct anything that wasn’t exactly what you needed. Go ahead and save the files after you’re satisfied with the updates. Go back to your terminal and initialize the database again to add the trips table: python3 init_db.py Open planventure.db in your editor and verify that the trips table exists. https://github.blog/wp-content/uploads/2025/04/init_db.mp4#t=0.001 With both of these models added, it seems like a good time to commit these changes before moving on to the next step. Click the source control button in the left-hand bar in your editor. Hover over the Changes row, and click the plus icon to stage your changes for all of the files below. https://github.blog/wp-content/uploads/2025/04/stage_commit.mp4#t=0.001 In the box for a commit message, click the sparkles button. Copilot will then generate a commit message for you in the box, describing all of the changes! Don’t forget to click the Commit button to commit your changes and update your repository. Step 4: Adding authentication We all know that security is important, so it’s time to start talking about adding some authentication to our API. This issue lays out our authentication requirements. According to the issue, we want to make sure we include password hashing and salt for extra security. To get started, we’re once again going to count on Copilot Edits. Navigate back to Edits and send it the following prompt: Create password hasing and salt utility functions for the User model. As always, read the summary of what Copilot did and make sure to review each individual file for the relevant changes. Once you’re satisfied with the updates, save the files. Next, you need to set up the JWT token and validation. Send the following prompt to Copilot Edits: Setup JWT token generation and validation functions. Review the changes, make any adjustments as necessary, and then save the files. Remember that we can’t predict what tweaks might be necessary. This is because Copilot might not give the exact same response to the same prompt. That’s part of the nature of any generative AI, and part of what makes them so versatile. It’s also why you always need to carefully review the suggestions and make sure you understand them. Now you need to create the actual route so that we can register a new user. Copilot Edits come to our aid again here. Send it the following prompt: Create auth routes for user registration with email validation. Go ahead and accept and review these changes. Don’t forget to read the summary that Copilot provides in the Copilot Edits window to help with understanding the updates. Save the files. https://github.blog/wp-content/uploads/2025/04/register_route.mp4#t=0.001 And now you have enough code to go ahead and test the route! Head back to Bruno and create a POST request. You’ll start with the same URL you used earlier, back when you sent the GET request to verify the server was up and running. Paste that URL into the POST box, and then add /auth/register to the end. So if your URL was 127.0.0.1:5000, the full URL would be 127.0.0.1:5000/auth/register. Click the Body tab and select JSON from the pull down menu at the top. Enter the following text into the large box for the body. { \"email\": \"test@email.com\", \"password\": \"test1234\" } Such a secure password! Obviously, this is just for the demo. When you’re creating actual accounts, make sure to use a stronger, more secure password. Note that you don’t need to set up an auth token yet because you’ll get that access token from the server when you register. Continuing with setting up our test, click the Headers tab. Add a header with the name Content-Type and a value of application/JSON. Now it’s time to test the connection. Click the arrow at the end of the POST row. If everything is working and set up correctly, you’ll receive a 200 response. Once you get that response, go back to VS Code and open the planventure.db file. Refresh the file and select the users table. The user you just added will be represented in the table. With this piece complete, you now need to add the login route. In order to do this, you’re going to keep using our good friend Copilot Edits. Send it the following prompt: Create login route with JWT token generation. Copilot will make suggestions to give you the full route that you can accept and test right away in Bruno. Switch back to Bruno, and hover over the POST register request in the left-hand window under Planventure. Click the ... to show the context menu, and select Clone. Change the request name to login and click Clone. Click the arrow to send the command, and you should receive a message that the login was successful. Congratulations, your login route is working! Users can now register and log in successfully. The next thing you need to do is add an auth middleware to protect your routes. Head back to Copilot Edits to continue coding using natural language and send it this prompt: Create auth middleware to protect routes. Review and accept the changes, then head back to Bruno to test the routes again. Navigate back to your POST login request, and click the arrow once again to send the command. If you receive a message that the login was successful, everything’s working perfectly. Now that you’ve finished adding authentication to your code, make sure to commit your changes and push them up to GitHub. Remember that you can use the sparkles button to have Copilot create a commit description for you! Just remember to review it before submitting. Step 5: Adding trips You’ve got the users, but in order to use Planventure, users need to be able to add trips. The scope of this work is captured in this issue. In order to cover our needs, the trip route needs full CRUD operations with a default itinerary template. Since we’ve had so much success with it so far, let’s keep using Copilot Edits. Send it the following prompt to get started: Create Trip routes blueprint with CRUD operations. The expectation is that you’ll get the CREATE, READ, UPDATE, and DELETE routes with this prompt. Just like you did before when adding authentication, make sure to review the changes and that you understand what changed. Make any necessary adjustments, and then save the files. Once you’ve accepted these changes, use Copilot Chat to generate some sample data. It’s much easier to have Copilot create it than to do so manually. Open up your chat window and send it the following prompt: Create example json to test the trips route Copilot will create some sample data that you can use to test your routes. Hover over the supplied JSON code and click the Copy button. Go back to Bruno, and clone the POST login request. Change the name to CREATE trip and click the Clone button. Change the POST address from \u003cIP\u003e/auth/login to \u003cIP\u003e/api/trips. Click the Body tab and replace the body with the JSON you copied to the clipboard in the previous step. https://github.blog/wp-content/uploads/2025/04/cloning_post_request.mp4#t=0.001 Before sending this request, we need to add our authorization token. Navigate to the POST login request by clicking that tab at the top of the window. Click the arrow to send the command, and then copy the token value. Click the POST CREATE trip tab at the top, and then the Auth tab underneath the POST address. Make sure that the type of authorization is Bearer Token, and then replace any text in the Token field with the token you copied from the login request. If you run into an error, copy the error message and head back to VS Code to get Copilot’s help debugging the error. Use the /fix slash command in the Copilot Chat window, and then paste the error message. To watch a demo of this process, you can check the video version of this GitHub for Beginners episode. After performing any necessary debugging, you should receive a response that the trip was successfully created. You can verify this by going back to VS Code, opening the planventure.db file, refreshing it, and looking at the trips table. https://github.blog/wp-content/uploads/2025/04/post_debugging.mp4#t=0.001 You can now add trips to your database! Now it’s time to test getting a trip id. Go back to Bruno and clone the POST CREATE trip request. Rename it to GET trip id and click Clone. Click POST at the top to open a dropdown menu, and select GET to change the request to a GET request. Click the Body tab and delete the current body. Update the URL to include the ID of the trip you want to fetch. For example, 127.0.0.1:5000/api/trips/1. Click the arrow to send the command, and the response should include all of the trip data in the database that matches that trip id. Just like before, if you run into any errors, you can use Copilot Chat to help you debug them until you’re able to successfully receive a response. With this working, it’s time to add the default itinerary template. If you guessed that you’d be using Copilot Edits to help you out here, you’d be right! Go ahead and send it the following prompt: Create function to generate default itinerary template. As always, give the code changes a review and make sure you know what the code does. Save the files, and give it a test. Go back to Bruno, and select the POST CREATE trip request. Change something in the body, such as the destination, and send the request by clicking the arrow icon. If you run into any errors, use Copilot Chat to help you debug them and suggest code changes to address them. https://github.blog/wp-content/uploads/2025/04/debugging_copilot_edited.mp4#t=0.001 When you successfully add a new trip, you then want to verify that it uses the default itinerary. Select the GET GET trip id request, and update the URL to match the id of the trip you just created. For example, if this was the second trip you added, change the last part of the URL to /2. Check the response, and verify that it’s using the default itinerary. If it is, well done! You’ve now addressed the requested changes for this issue! That means it’s time to commit these changes. Don’t forget about CORS There’s a lot more we can add to this API, but for now this is getting good enough for an MVP. Before declaring it done, let’s add a basic health check endpoint. Head over to Copilot Edits, and send it the following prompt: Setup CORS configuration for React frontend. Review the changes, then go ahead and accept them. With this, you’ve completed the MVP of the API. That means you just created an API with GitHub Copilot! Some finishing touches Before declaring this MVP complete, you should add some documentation to the README. Luckily, Copilot Chat helps speed up this process. Open up Copilot Chat and send it the following prompt: @workspace create a detailed README about the Planventure API Copilot will generate a README for you, describing how the API works. Hover over the text, select the ... button, and select Insert into New File. Save the file as README.md, and you now have a valid README file for your project. Simple and easy! With this, there’s no reason for anyone to have empty README files in their projects. https://github.blog/wp-content/uploads/2025/04/readme_copilot.mp4#t=0.001 You should also write some tests and include them in your project before declaring this fully complete, but that’s beyond the scope of this episode. Just remember that it’s something you should do, and you can use Copilot Chat to help you do it! Especially if you use the /tests slash command. Spoiler alert: we’ll be covering this in a future episode! Your next steps That was a lot! But, you have now built an entire API and used the power of Copilot to do it. Not only that, but you used Copilot to help create documentation, making it easier for others to pick up, use, and contribute to your project. Check out the repo so you can build this project from scratch, and be sure to read the README so you know which branch to start from. Don’t forget that you can use GitHub Copilot for free! If you have any questions, pop them in the GitHub Community thread, and we’ll be sure to respond. Join us for the next part in this series, where we’ll build a full app using this API we created. Happy coding! Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of \u003ca href=\"https://www.youtube.com/watch?v=n0NlxUyA7FI\u0026amp;list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\u0026amp;index=6\"\u003eGitHub Copilot\u003c/a\u003e. This is our fifth episode, and we’ve already talked about Copilot in general, some of its essential features, how to write good prompts, and a bit about security best practices. We have all the previous episodes on \u003ca href=\"https://github.blog/tag/github-for-beginners/\"\u003eour blog\u003c/a\u003e and available \u003ca href=\"https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\"\u003eas videos\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eToday we’re diving a little deeper—we’re using GitHub Copilot to help us build a backend REST API. We’ll walk through how to build the backend for Planventure, a travel itinerary builder that helps users plan their trips. You can find a full description of what we’ll be building in \u003ca href=\"http://gh.io/planventure\"\u003ethis repository\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/CJUbQ1QiBUY?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\n\u003ch2 id=\"what-youll-need-and-what-were-building\" id=\"what-youll-need-and-what-were-building\"\u003eWhat you’ll need and what we’re building\u003ca href=\"#what-youll-need-and-what-were-building\" aria-label=\"What you’ll need and what we’re building\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eBefore we get started, here’s what you’ll need to install:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA code editor like \u003ca href=\"https://code.visualstudio.com/\"\u003eVS Code\u003c/a\u003e  \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.python.org/downloads/\"\u003ePython\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=qwtel.sqlite-viewer\"\u003eSQLite Viewer\u003c/a\u003e to view database tables  \u003c/li\u003e\n\u003cli\u003eAn API client like \u003ca href=\"https://github.com/usebruno/bruno\"\u003eBruno\u003c/a\u003e to test your routes  \u003c/li\u003e\n\u003cli\u003eAccess to \u003ca href=\"http://gh.io/gfb-copilot\"\u003eGitHub Copilot\u003c/a\u003e — sign up for free! \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWhat we’re building:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe’re creating a minimum viable product (MVP) for Planventure’s backend API. In the next episode, we’ll build the frontend to connect to the API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHere’s what we’ll include:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eREST API built with Flask  \u003c/li\u003e\n\u003cli\u003eDatabase support using SQLAlchemy  \u003c/li\u003e\n\u003cli\u003eUser \u003cstrong\u003eauthentication\u003c/strong\u003e (with password hashing and JWTs)  \u003c/li\u003e\n\u003cli\u003eFull CRUD functionality for trips\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eEach trip will include:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDestination  \u003c/li\u003e\n\u003cli\u003eStart and end dates  \u003c/li\u003e\n\u003cli\u003eA basic itinerary with location coordinates (perfect for maps)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the end of this, we want to have a working API that handles user authentication and basic trip management.\u003c/p\u003e\n\u003ch2 id=\"step-1-setting-up-the-environment\" id=\"step-1-setting-up-the-environment\"\u003eStep 1: Setting up the environment\u003ca href=\"#step-1-setting-up-the-environment\" aria-label=\"Step 1: Setting up the environment\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFork and clone \u003ca href=\"http://gh.io/planventure\"\u003ethe planventure repository\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce you’ve done that, \u003ccode\u003ecd\u003c/code\u003e into the \u003cem\u003eplanventure-api\u003c/em\u003e directory in your code editor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/github-samples/planventure\ncd planventure-api \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen up your terminal and run the following commands to create and activate a virtual environment.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython3 -m venv venv\nsource venv/bin/activate\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAssuming you’re using VS Code, you’ll see \u003ccode\u003evenv\u003c/code\u003e in the status bar at the bottom. If you’re using another editor, be sure to verify that you’re in your virtual environment.\u003c/p\u003e\n\u003cp\u003eStaying in your terminal, run this command to install dependencies:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epip install -r requirements.txt\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRun the following command in your terminal to start the server:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eflask run --debug\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see your server running on \u003ccode\u003e127.0.0.1:5000\u003c/code\u003e. Use Bruno to make a \u003ccode\u003eGET\u003c/code\u003e request to that URL and you should see the following welcome message:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png?resize=1024%2C571\" alt=\"A screenshot of the welcome message. It says, \u0026#34;Welcome to PlanVenture API\u0026#34;.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/bruno-welcomeapi.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eRemember to add \u003ccode\u003evenv/\u003c/code\u003e to your \u003ccode\u003e.gitignore\u003c/code\u003e!\u003c/p\u003e\n\u003ch2 id=\"step-2-create-the-database\" id=\"step-2-create-the-database\"\u003eStep 2: Create the Database\u003ca href=\"#step-2-create-the-database\" aria-label=\"Step 2: Create the Database\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow that you’ve got your environment created, it’s time to start using Copilot to generate some code. We’ll use Copilot Chat and Copilot Edits to generate our database setup.\u003c/p\u003e\n\u003cp\u003eOpen the \u003cem\u003eapp.py\u003c/em\u003e file and Copilot Chat, choose the Ask option, and enter the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@workspace Update the Flask app with SQLAlchemy and basic configurations\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt the bottom of the chat window, click the model selector and select the Claude 3.5 Sonnet model and send the prompt.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/model_picker.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/model_picker.png?resize=867%2C360\" alt=\"A screenshot showing the location of the model picker. It\u0026#39;s located at the bottom right of the chat box.\" width=\"867\" height=\"360\" srcset=\"https://github.blog/wp-content/uploads/2025/04/model_picker.png?w=867 867w, https://github.blog/wp-content/uploads/2025/04/model_picker.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/model_picker.png?w=768 768w\" sizes=\"auto, (max-width: 867px) 100vw, 867px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCopilot will provide a plan, a code block, and a summary of suggested changes.\u003c/p\u003e\n\u003cp\u003eWhenever you receive code suggestions from Copilot, it’s important to review them and understand the changes it’s suggesting. After reviewing the changes, hover over the code block and click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button—the first button in the top-right of the suggested code.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png?resize=1024%2C571\" alt=\"A screenshot shoring the location of the \u0026#34;Apply in editor\u0026#34; button. It\u0026#39;s in the top-right of the suggested code box.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/apply_in_editor.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSelect the option to apply the changes into the active editor. Copilot will make these updates in the open file. Click \u003cstrong\u003eAccept\u003c/strong\u003e to add those changes.\u003c/p\u003e\n\u003cp\u003e\n\u003cvideo id=\"video-86980-1\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/apply_in_editor_vid.mp4#t=0.001?_=1\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/apply_in_editor_vid.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/apply_in_editor_vid.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eIf Copilot provided suggestions that need to be in a new file, hover over the change and select the three dots, then select \u003cstrong\u003eInsert into New File\u003c/strong\u003e and save.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-2\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/insert_new_file.mp4#t=0.001?_=2\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/insert_new_file.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/insert_new_file.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eNow we need to update our dependencies. Go back to Copilot Chat and enter the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@workspace update requirements.txt with the necessary packages for Flask API with SQLAlchemy and JWT\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen the \u003ccode\u003erequirements.txt\u003c/code\u003e file. Hover over the suggested changes, click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button, and once again select the option to apply the changes into the active editor. Just like before, accept the changes and save the file.\u003c/p\u003e\n\u003ch2 id=\"step-3-time-to-create-some-models\" id=\"step-3-time-to-create-some-models\"\u003eStep 3: Time to create some models\u003ca href=\"#step-3-time-to-create-some-models\" aria-label=\"Step 3: Time to create some models\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow it’s time to create our \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eTrip\u003c/code\u003e models. \u003ca href=\"https://github.com/github-samples/planventure/issues/2\"\u003eThis GitHub issue\u003c/a\u003e describes our requirements. According to the issue, the User model needs an email, a password, and must include password hashing and timestamps. The Trip model needs to have a destination, start and end dates, coordinates, and an itinerary with a user relationship.\u003c/p\u003e\n\u003cp\u003eTo do all of this, we’re going to use Copilot Edits.\u003c/p\u003e\n\u003cp\u003eClick on the chat icon in your editor, and from the dropdown, select Edits.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/edits_dropdown.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/edits_dropdown.png?resize=578%2C210\" alt=\"A screenshot showing the location of the \u0026#34;Edit\u0026#34; dropdown, near the model selector.\" width=\"578\" height=\"210\" srcset=\"https://github.blog/wp-content/uploads/2025/04/edits_dropdown.png?w=578 578w, https://github.blog/wp-content/uploads/2025/04/edits_dropdown.png?w=300 300w\" sizes=\"auto, (max-width: 578px) 100vw, 578px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOpen your \u003ccode\u003eapp.py\u003c/code\u003e and \u003ccode\u003erequirements.txt\u003c/code\u003e file and drag them into the chat window. Then choose the Claude 3.5 Sonnet model from the model picker.\u003c/p\u003e\n\u003cp\u003eNow send the following prompt to Copilot Edits:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate SQLAlchemy User model with email, password_hash, and timestamps. Add code in new files.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopilot Edits will then create a plan to do what you asked. It creates some new files and folders, as well as updates existing files. Accept the changes, review the code, and make any corrections necessary before saving the files.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-3\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/edits_prompt_flow.mp4#t=0.001?_=3\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/edits_prompt_flow.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/edits_prompt_flow.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eCheck the video for examples of things to look for, but remember that your changes might be different. Copilot can provide different suggestions for the same prompts.\u003c/p\u003e\n\u003cp\u003eNow create a python script to create the database tables. Send Copilot Edits the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eUpdate code to be able to create the db tables with a python shell script.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs before, Copilot Edits will go to work and create or edit files as necessary. Accept the code and review the changes, making sure these changes address your needs. After saving the reviewed changes, go back to your terminal and initialize the database by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython3 init_db.py\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf Copilot Edits created a different filename than \u003cem\u003einit_db.py\u003c/em\u003e, use the filename in your project.\u003c/p\u003e\n\u003cp\u003eAfter the script runs, you’ll see a new \u003cem\u003eplanventure.db\u003c/em\u003e file in your project. However, you need to install an extension in order to see the tables. Navigate to the extensions tab and search for “\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=qwtel.sqlite-viewer\"\u003eSqLite viewer\u003c/a\u003e”. Click \u003cstrong\u003eInstall\u003c/strong\u003e, and then click on \u003cem\u003eplanventure.db\u003c/em\u003e to get a look at the table.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png?resize=1024%2C571\" alt=\"A screenshot showing how to install SQLite Viewer.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/sqlite_viewer.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNow that you’ve created the User model, you need the Trip model. Navigate back to Copilot Edits and send:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate SQLAlchemy Trip model with user relationship, destination, start date, end date, coordinates, and itinerary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy now you can probably guess what you need to do. It’s time to accept the changes and review them, making sure to correct anything that wasn’t exactly what you needed. Go ahead and save the files after you’re satisfied with the updates.\u003c/p\u003e\n\u003cp\u003eGo back to your terminal and initialize the database again to add the trips table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython3 init_db.py\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen \u003cem\u003eplanventure.db\u003c/em\u003e in your editor and verify that the trips table exists.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-4\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/init_db.mp4#t=0.001?_=4\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/init_db.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/init_db.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eWith both of these models added, it seems like a good time to commit these changes before moving on to the next step. Click the source control button in the left-hand bar in your editor. Hover over the \u003cstrong\u003eChanges\u003c/strong\u003e row, and click the plus icon to stage your changes for all of the files below.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-5\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/stage_commit.mp4#t=0.001?_=5\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/stage_commit.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/stage_commit.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eIn the box for a commit message, click the sparkles button. Copilot will then generate a commit message for you in the box, describing all of the changes! Don’t forget to click the \u003cstrong\u003eCommit\u003c/strong\u003e button to commit your changes and update your repository.\u003c/p\u003e\n\u003ch2 id=\"step-4-adding-authentication\" id=\"step-4-adding-authentication\"\u003eStep 4: Adding authentication\u003ca href=\"#step-4-adding-authentication\" aria-label=\"Step 4: Adding authentication\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe all know that security is important, so it’s time to start talking about adding some authentication to our API. \u003ca href=\"https://github.com/github-samples/planventure/issues/3\"\u003eThis issue\u003c/a\u003e lays out our authentication requirements. According to the issue, we want to make sure we include password hashing and salt for extra security. To get started, we’re once again going to count on Copilot Edits.\u003c/p\u003e\n\u003cp\u003eNavigate back to Edits and send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate password hasing and salt utility functions for the User model.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs always, read the summary of what Copilot did and make sure to review each individual file for the relevant changes. Once you’re satisfied with the updates, save the files.\u003c/p\u003e\n\u003cp\u003eNext, you need to set up the JWT token and validation. Send the following prompt to Copilot Edits:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSetup JWT token generation and validation functions.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReview the changes, make any adjustments as necessary, and then save the files. Remember that we can’t predict what tweaks might be necessary. This is because Copilot might not give the exact same response to the same prompt. That’s part of the nature of any generative AI, and part of what makes them so versatile. It’s also why you always need to carefully review the suggestions and make sure you understand them.\u003c/p\u003e\n\u003cp\u003eNow you need to create the actual route so that we can register a new user. Copilot Edits come to our aid again here. Send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate auth routes for user registration with email validation.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo ahead and accept and review these changes. Don’t forget to read the summary that Copilot provides in the Copilot Edits window to help with understanding the updates. Save the files.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-6\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/register_route.mp4#t=0.001?_=6\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/register_route.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/register_route.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eAnd now you have enough code to go ahead and test the route! Head back to Bruno and create a \u003ccode\u003ePOST\u003c/code\u003e request. You’ll start with the same URL you used earlier, back when you sent the \u003ccode\u003eGET\u003c/code\u003e request to verify the server was up and running. Paste that URL into the \u003ccode\u003ePOST\u003c/code\u003e box, and then add \u003ccode\u003e/auth/register\u003c/code\u003e to the end. So if your URL was \u003ccode\u003e127.0.0.1:5000\u003c/code\u003e, the full URL would be \u003ccode\u003e127.0.0.1:5000/auth/register\u003c/code\u003e. Click the \u003cstrong\u003eBody\u003c/strong\u003e tab and select \u003cstrong\u003eJSON\u003c/strong\u003e from the pull down menu at the top. Enter the following text into the large box for the body.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \u0026#34;email\u0026#34;: \u0026#34;test@email.com\u0026#34;,\n  \u0026#34;password\u0026#34;: \u0026#34;test1234\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSuch a secure password! Obviously, this is just for the demo. When you’re creating actual accounts, make sure to use a stronger, more secure password. Note that you don’t need to set up an auth token yet because you’ll get that access token from the server when you register.\u003c/p\u003e\n\u003cp\u003eContinuing with setting up our test, click the \u003cstrong\u003eHeaders\u003c/strong\u003e tab. Add a header with the name \u003ccode\u003eContent-Type\u003c/code\u003e and a value of \u003ccode\u003eapplication/JSON\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow it’s time to test the connection. Click the arrow at the end of the \u003ccode\u003ePOST\u003c/code\u003e row. If everything is working and set up correctly, you’ll receive a 200 response.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/200-response.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/200-response.png?resize=1024%2C571\" alt=\"A screenshot showing the 200 response.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/200-response.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/200-response.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/200-response.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/200-response.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOnce you get that response, go back to VS Code and open the \u003cem\u003eplanventure.db\u003c/em\u003e file. Refresh the file and select the \u003cstrong\u003eusers\u003c/strong\u003e table. The user you just added will be represented in the table.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/users-table.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/users-table.png?resize=1024%2C571\" alt=\"A screenshot of the users table.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/users-table.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/users-table.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/users-table.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/users-table.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWith this piece complete, you now need to add the login route. In order to do this, you’re going to keep using our good friend Copilot Edits. Send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate login route with JWT token generation.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopilot will make suggestions to give you the full route that you can accept and test right away in Bruno. Switch back to Bruno, and hover over the \u003cstrong\u003ePOST register\u003c/strong\u003e request in the left-hand window under \u003cstrong\u003ePlanventure\u003c/strong\u003e. Click the \u003ccode\u003e...\u003c/code\u003e to show the context menu, and select \u003cstrong\u003eClone\u003c/strong\u003e. Change the request name to \u003ccode\u003elogin\u003c/code\u003e and click \u003cstrong\u003eClone\u003c/strong\u003e. Click the arrow to send the command, and you should receive a message that the login was successful.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/login_route.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/login_route.png?resize=1024%2C571\" alt=\"A screenshot of the message showing the login was successful.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/login_route.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/login_route.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/login_route.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/login_route.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCongratulations, your login route is working! Users can now register and log in successfully.\u003c/p\u003e\n\u003cp\u003eThe next thing you need to do is add an auth middleware to protect your routes. Head back to Copilot Edits to continue coding using natural language and send it this prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate auth middleware to protect routes.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReview and accept the changes, then head back to Bruno to test the routes again. Navigate back to your \u003cstrong\u003ePOST login\u003c/strong\u003e request, and click the arrow once again to send the command. If you receive a message that the login was successful, everything’s working perfectly.\u003c/p\u003e\n\u003cp\u003eNow that you’ve finished adding authentication to your code, make sure to commit your changes and push them up to GitHub. Remember that you can use the sparkles button to have Copilot create a commit description for you! Just remember to review it before submitting.\u003c/p\u003e\n\u003ch2 id=\"step-5-adding-trips\" id=\"step-5-adding-trips\"\u003eStep 5: Adding trips\u003ca href=\"#step-5-adding-trips\" aria-label=\"Step 5: Adding trips\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eYou’ve got the users, but in order to use Planventure, users need to be able to add trips. The scope of this work is captured in \u003ca href=\"https://github.com/github-samples/planventure/issues/4\"\u003ethis issue\u003c/a\u003e. In order to cover our needs, the trip route needs full CRUD operations with a default itinerary template. Since we’ve had so much success with it so far, let’s keep using Copilot Edits.\u003c/p\u003e\n\u003cp\u003eSend it the following prompt to get started:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate Trip routes blueprint with CRUD operations.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expectation is that you’ll get the \u003ccode\u003eCREATE\u003c/code\u003e, \u003ccode\u003eREAD\u003c/code\u003e, \u003ccode\u003eUPDATE\u003c/code\u003e, and \u003ccode\u003eDELETE\u003c/code\u003e routes with this prompt. Just like you did before when adding authentication, make sure to review the changes and that you understand what changed. Make any necessary adjustments, and then save the files.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/crud.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/crud.png?resize=1024%2C571\" alt=\"A screenshot showing the full CRUD for trips route.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/crud.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/crud.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/crud.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/crud.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOnce you’ve accepted these changes, use Copilot Chat to generate some sample data. It’s much easier to have Copilot create it than to do so manually. Open up your chat window and send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate example json to test the trips route \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopilot will create some sample data that you can use to test your routes. Hover over the supplied JSON code and click the \u003cstrong\u003eCopy\u003c/strong\u003e button.\u003c/p\u003e\n\u003cp\u003eGo back to Bruno, and clone the \u003cstrong\u003ePOST login\u003c/strong\u003e request. Change the name to \u003cstrong\u003eCREATE trip\u003c/strong\u003e and click the \u003cstrong\u003eClone\u003c/strong\u003e button. Change the \u003cstrong\u003ePOST\u003c/strong\u003e address from \u003ccode\u003e\u0026lt;IP\u0026gt;/auth/login\u003c/code\u003e to \u003ccode\u003e\u0026lt;IP\u0026gt;/api/trips\u003c/code\u003e. Click the \u003cstrong\u003eBody\u003c/strong\u003e tab and replace the body with the JSON you copied to the clipboard in the previous step.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-7\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/cloning_post_request.mp4#t=0.001?_=7\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/cloning_post_request.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/cloning_post_request.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eBefore sending this request, we need to add our authorization token. Navigate to the \u003cstrong\u003ePOST login\u003c/strong\u003e request by clicking that tab at the top of the window. Click the arrow to send the command, and then copy the \u003ccode\u003etoken\u003c/code\u003e value. Click the \u003cstrong\u003ePOST CREATE trip\u003c/strong\u003e tab at the top, and then the \u003cstrong\u003eAuth\u003c/strong\u003e tab underneath the POST address. Make sure that the type of authorization is \u003cstrong\u003eBearer Token\u003c/strong\u003e, and then replace any text in the \u003cstrong\u003eToken\u003c/strong\u003e field with the token you copied from the login request.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/bearer_token.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/bearer_token.png?resize=1024%2C571\" alt=\"A screenshot showing the bearer token.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/bearer_token.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/bearer_token.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/bearer_token.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/bearer_token.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf you run into an error, copy the error message and head back to VS Code to get Copilot’s help debugging the error. Use the \u003ccode\u003e/fix\u003c/code\u003e slash command in the Copilot Chat window, and then paste the error message. To watch a demo of this process, you can check the video version of this \u003ca href=\"https://youtu.be/CJUbQ1QiBUY\"\u003eGitHub for Beginners episode\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAfter performing any necessary debugging, you should receive a response that the trip was successfully created. You can verify this by going back to VS Code, opening the \u003cem\u003eplanventure.db\u003c/em\u003e file, refreshing it, and looking at the \u003cstrong\u003etrips\u003c/strong\u003e table.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-8\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/post_debugging.mp4#t=0.001?_=8\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/post_debugging.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/post_debugging.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eYou can now add trips to your database! Now it’s time to test getting a trip id.\u003c/p\u003e\n\u003cp\u003eGo back to Bruno and clone the \u003cstrong\u003ePOST CREATE trip\u003c/strong\u003e request. Rename it to \u003ccode\u003eGET trip id\u003c/code\u003e and click \u003cstrong\u003eClone\u003c/strong\u003e. Click \u003cstrong\u003ePOST\u003c/strong\u003e at the top to open a dropdown menu, and select \u003cstrong\u003eGET\u003c/strong\u003e to change the request to a GET request. Click the \u003cstrong\u003eBody\u003c/strong\u003e tab and delete the current body. Update the URL to include the ID of the trip you want to fetch. For example, \u003ccode\u003e127.0.0.1:5000/api/trips/1\u003c/code\u003e. Click the arrow to send the command, and the response should include all of the trip data in the database that matches that trip id. Just like before, if you run into any errors, you can use Copilot Chat to help you debug them until you’re able to successfully receive a response.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/trip_by_id.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/trip_by_id.png?resize=1024%2C571\" alt=\"A screenshot of a trip by id.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/trip_by_id.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/trip_by_id.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/trip_by_id.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/trip_by_id.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWith this working, it’s time to add the default itinerary template. If you guessed that you’d be using Copilot Edits to help you out here, you’d be right! Go ahead and send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate function to generate default itinerary template.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs always, give the code changes a review and make sure you know what the code does. Save the files, and give it a test. Go back to Bruno, and select the \u003cstrong\u003ePOST CREATE trip\u003c/strong\u003e request. Change something in the body, such as the destination, and send the request by clicking the arrow icon. If you run into any errors, use Copilot Chat to help you debug them and suggest code changes to address them.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-9\" width=\"1938\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/debugging_copilot_edited.mp4#t=0.001?_=9\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/debugging_copilot_edited.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/debugging_copilot_edited.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eWhen you successfully add a new trip, you then want to verify that it uses the default itinerary. Select the \u003cstrong\u003eGET GET trip id\u003c/strong\u003e request, and update the URL to match the id of the trip you just created. For example, if this was the second trip you added, change the last part of the URL to \u003ccode\u003e/2\u003c/code\u003e. Check the response, and verify that it’s using the default itinerary. If it is, well done! You’ve now addressed the requested changes for this issue! That means it’s time to commit these changes.\u003c/p\u003e\n\u003ch2 id=\"dont-forget-about-cors\" id=\"dont-forget-about-cors\"\u003eDon’t forget about CORS\u003ca href=\"#dont-forget-about-cors\" aria-label=\"Don’t forget about CORS\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThere’s a lot more we can add to this API, but for now this is getting good enough for an MVP. Before declaring it done, let’s add a basic health check endpoint. Head over to Copilot Edits, and send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSetup CORS configuration for React frontend.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReview the changes, then go ahead and accept them.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/cors_applied.png\"\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/cors_applied.png?resize=1024%2C571\" alt=\"A screenshot showing how to setup CORS configuration for React frontend.\" width=\"1024\" height=\"571\" srcset=\"https://github.blog/wp-content/uploads/2025/04/cors_applied.png?w=1426 1426w, https://github.blog/wp-content/uploads/2025/04/cors_applied.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/cors_applied.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/cors_applied.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWith this, you’ve completed the MVP of the API. That means you just created an API with GitHub Copilot!\u003c/p\u003e\n\u003ch2 id=\"some-finishing-touches\" id=\"some-finishing-touches\"\u003eSome finishing touches\u003ca href=\"#some-finishing-touches\" aria-label=\"Some finishing touches\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore declaring this MVP complete, you should add some documentation to the README. Luckily, Copilot Chat helps speed up this process. Open up Copilot Chat and send it the following prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@workspace create a detailed README about the Planventure API\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopilot will generate a README for you, describing how the API works. Hover over the text, select the \u003ccode\u003e...\u003c/code\u003e button, and select \u003cstrong\u003eInsert into New File\u003c/strong\u003e. Save the file as \u003ccode\u003eREADME.md\u003c/code\u003e, and you now have a valid README file for your project. Simple and easy! With this, there’s no reason for anyone to have empty README files in their projects.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86980-10\" width=\"1426\" height=\"794\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/readme_copilot.mp4#t=0.001?_=10\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/readme_copilot.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/readme_copilot.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eYou should also write some tests and include them in your project before declaring this fully complete, but that’s beyond the scope of this episode. Just remember that it’s something you should do, and you can use Copilot Chat to help you do it! Especially if you use the \u003ccode\u003e/tests\u003c/code\u003e slash command. Spoiler alert: we’ll be covering this in a future episode!\u003c/p\u003e\n\u003ch2 id=\"your-next-steps\" id=\"your-next-steps\"\u003eYour next steps\u003ca href=\"#your-next-steps\" aria-label=\"Your next steps\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThat was a lot! But, you have now built an entire API and used the power of Copilot to do it. Not only that, but you used Copilot to help create documentation, making it easier for others to pick up, use, and contribute to your project.\u003c/p\u003e\n\u003cp\u003eCheck out \u003ca href=\"https://gh.io/planventure\"\u003ethe repo\u003c/a\u003e so you can build this project from scratch, and be sure to read the README so you know which branch to start from.\u003c/p\u003e\n\u003cp\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e! If you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e, and we’ll be sure to respond. Join us for the next part in this series, where we’ll build a full app using this API we created.\u003c/p\u003e\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": "2025-04-28T13:00:42Z",
  "modifiedTime": "2025-04-29T14:06:55Z"
}
