{
  "id": "82db0bd6-42b4-45ca-8b33-6a544009fdb4",
  "title": "Java 24 Delivers New Experimental and Many Final Features",
  "link": "https://www.infoq.com/news/2025/03/java24-released/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Oracle has released version 24 of the Java programming language and virtual machine. As the third non-LTS release since JDK 21, the final feature set includes 24 JEPs. Two of these - Generational Shenandoah and Compact Object Headers - are new experimental features. Also, nearly half of these features are final, some of which have gone through the incubation and preview processes. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Tue, 18 Mar 2025 21:10:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "JDK 24",
    "JDK 25",
    "Java",
    "Java 24",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 9022,
  "excerpt": "Oracle has released version 24 of the Java programming language and virtual machine. As the third non-LTS release since JDK 21, the final feature set includes 24 JEPs. Two of these - Generational Shen",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250318080213/apple-touch-icon.png",
  "text": "Oracle has released version 24 of the Java programming language and virtual machine. As the third non-LTS release since JDK 21 and the fifteenth since the beginning of the six-month cadence, the 24 JEPs in this final feature set are: JEP 404: Generational Shenandoah (Experimental) JEP 450: Compact Object Headers (Experimental) JEP 472: Prepare to Restrict the Use of JNI JEP 475: Late Barrier Expansion for G1 JEP 478: Key Derivation Function API (Preview) JEP 479: Remove the Windows 32-bit x86 Port JEP 483: Ahead-of-Time Class Loading \u0026 Linking JEP 484: Class-File API JEP 485: Stream Gatherers JEP 486: Permanently Disable the Security Manager JEP 487: Scoped Values (Fourth Preview) JEP 488: Primitive Types in Patterns, instanceof, and switch (Second Preview) JEP 489: Vector API (Ninth Incubator) JEP 490: ZGC: Remove the Non-Generational Mode JEP 491: Synchronize Virtual Threads without Pinning JEP 492: Flexible Constructor Bodies (Third Preview) JEP 493: Linking Run-Time Images without JMODs JEP 494: Module Import Declarations (Second Preview) JEP 495: Simple Source Files and Instance Main Methods (Fourth Preview) JEP 496: Quantum-Resistant Module-Lattice-Based Key Encapsulation Mechanism JEP 497: Quantum-Resistant Module-Lattice-Based Digital Signature Algorithm JEP 498: Warn upon Use of Memory-Access Methods in sun.misc.Unsafe JEP 499: Structured Concurrency (Fourth Preview) JEP 501: Deprecate the 32-bit x86 Port for Removal Two of these - Generational Shenandoah (Experimental) and Compact Object Headers (Experimental) - are new experimental features. Also, nearly half of these features are final, some of which have gone through the incubation and preview processes. As shown in the graph below, as presented in this blog post, the feature cadence for JDK 24 is nearly twice than the average number of previous releases dating back to JDK 10. We examine some of these JEPs, discuss the JDK 24 Launch Event, and update our predictions for features that may be included in JDK 25. Generational Shenandoah (Experimental) JEP 404, Generational Shenandoah (Experimental), proposes to provide an experimental generational mode, without breaking non-generational Shenandoah Garbage Collector, with the intent to make the generational mode the default in a future JDK release. Originally targeted for JDK 21, JEP 404 was officially removed from the final feature set due to the \"risks identified during the review process and the lack of time available to perform the thorough review that such a large contribution of code requires.\" At the time, the Shenandoah team decided to target a future JDK release to \"deliver the best Generational Shenandoah that they can.\" Compact Object Headers (Experimental) JEP 450, Compact Object Headers (Experimental), inspired by Project Lilliput, proposes to \"reduce the size of object headers in the HotSpot JVM from between 96 and 128 bits down to 64 bits on 64-bit architectures.\" This feature is disabled by default as it is considered experimental and may cause unintended consequences if enabled by a developer. More details on compact object headers may be found in this InfoQ news story. Stream Gatherers JEP 485, Stream Gatherers, finalizes this feature after two rounds of preview, namely: JEP 473: Stream Gatherers (Second Preview), delivered in JDK 23; and JEP 461, Stream Gatherers (Preview), delivered in JDK 22. This feature was designed to enhance the Stream API to support custom intermediate operations that will \"allow stream pipelines to transform data in ways that are not easily achievable with the existing built-in intermediate operations.\" More details on stream gatherers may be found in the original design document and this InfoQ news story. Ahead-of-Time Class Loading \u0026 Linking JEP 483, Ahead-of-Time Class Loading \u0026 Linking, proposes to \"improve startup time by making the classes of an application instantly available, in a loaded and linked state, when the HotSpot Java Virtual Machine starts.\" This may be achieved by monitoring the application during one run and storing the loaded and linked forms of all classes in a cache for use in subsequent runs. This feature will lay a foundation for future improvements to both startup and warmup time. More details may be found in this InfoQ news story. Quantum-Resistant Module-Lattice-Based Digital Signature Algorithm JEP 497, Quantum-Resistant Module-Lattice-Based Digital Signature Algorithm, proposes to \"enhance the security of Java applications by providing an implementation of the quantum-resistant Module-Lattice-Based Digital Signature Algorithm (ML-DSA)\" as standardized by FIPS 204. This will be accomplished by implementing the Java KeyPairGenerator, Signature and KeyFactory classes. Vector API (Ninth Incubator) JEP 489, Vector API (Ninth Incubator), proposes to incorporate enhancements in response to feedback from the previous eight rounds of incubation. This feature introduces an API to \"express vector computations that reliably compile at runtime to optimal vector instructions on supported CPU architectures, thus achieving performance superior to equivalent scalar computations.\" JEP 338, Vector API (Incubator), was delivered as an incubator module in JDK 16. Originally slated to be a re-incubation for JDK 24 by reusing the original Incubator status, it was decided to keep enumerating. The Vector API will continue to incubate until the necessary features of Project Valhalla become available as preview features. At that time, the team will adapt the Vector API and its implementation to use them, and will elevate the Vector API from Incubation to Preview. JDK 24 Launch Event The JDK 24 Launch Event, live-streamed on March 18, 2025, featured: a Java 24 overview with Mikael Vidstedt, Senior Director, Java Virtual Machine at Oracle; the opening keynote, Our World, Moved by Java, facilitated by Chad Arimura, Vice President, Java Developer Relations at Oracle; and a JDK 24 Deep Dive with Viktor Klang, Software Architect at Oracle and Dan Heidinga, Software Architect at Oracle, who presented on Stream Gatherers and AOT Caching, respectively. InfoQ will follow up with details on the opening address. JDK 25 Scheduled for a GA release in September 2025, two JEPs have been targeted for JDK 25 at this time. However, based on a number of JEP candidates and drafts, especially those that have been submitted, we can surmise which additional JEPs have the potential to be included in JDK 24. JEP 502, Stable Values (Preview), has been targeted for JDK 25. Formerly known as Computed Constants (Preview), this JEP introduces the concept of computed constants, defined as immutable value holders that are initialized at most once. This offers the performance and safety benefits of final fields, while offering greater flexibility as to the timing of initialization. JEP 503, Remove the 32-bit x86 Port, has been targeted for JDK 25. This JEP proposes to \"remove the source code and build support for the 32-bit x86 port.\" This feature is a follow-up from JEP 501, Deprecate the 32-bit x86 Port for Removal, to be delivered in the upcoming release of JDK 24. The review is expected to conclude on March 18, 2025. JEP Draft 8340343, Structured Concurrency (Fifth Preview), proposes a fifth preview, with several API changes, to gain more feedback from the previous four rounds of preview, namely: JEP 499, Structured Concurrency (Fourth Preview), to be delivered in the upcoming GA release of JDK 24; JEP 480, Structured Concurrency (Third Preview), delivered in JDK 23; JEP 462, Structured Concurrency (Second Preview), delivered in JDK 22; and JEP 453, Structured Concurrency (Preview), delivered in JDK 21. This feature simplifies concurrent programming by introducing structured concurrency to \"treat groups of related tasks running in different threads as a single unit of work, thereby streamlining error handling and cancellation, improving reliability, and enhancing observability.\" One of the proposed API changes involves the StructuredTaskScope interface to be opened via static factory methods rather than public constructors. JEP Draft 8345525, Remove the Terminally Deprecated Applet API, proposes to finally remove the Applet API which has been deprecated since JDK 9 via JEP 289, Deprecate the Applet API followed by JEP 398, Deprecate the Applet API for Removal, delivered in JDK 17. The formal release date for JDK 25 is expected to be September 2025, soon to be proposed by Mark Reinhold, Chief Architect, Java Platform Group at Oracle. Developers can anticipate a feature freeze in early-June 2025. More details on additional JEP drafts and candidates may be found in this more detailed InfoQ news story. JDK 24 may now be downloaded from Oracle with binaries from other vendors expected to become available in the coming days. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2025/03/java24-released/en/headerimage/java-istock-image-01-1742332092035.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eOracle has \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2025-March/009843.html\"\u003ereleased\u003c/a\u003e version \u003ca href=\"https://openjdk.org/projects/jdk/24/\"\u003e24\u003c/a\u003e of the Java programming language and virtual machine. As the third non-LTS release since \u003ca href=\"https://openjdk.org/projects/jdk/21/\"\u003eJDK 21\u003c/a\u003e and the fifteenth since the beginning of the six-month cadence, the 24 JEPs in this final feature set are:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eJEP 404: \u003ca href=\"https://openjdk.org/jeps/404\"\u003eGenerational Shenandoah (Experimental)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 450: \u003ca href=\"https://openjdk.org/jeps/450\"\u003eCompact Object Headers (Experimental)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 472: \u003ca href=\"https://openjdk.org/jeps/472\"\u003ePrepare to Restrict the Use of JNI\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 475: \u003ca href=\"https://openjdk.org/jeps/475\"\u003eLate Barrier Expansion for G1\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 478: \u003ca href=\"https://openjdk.org/jeps/478\"\u003eKey Derivation Function API (Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 479: \u003ca href=\"https://openjdk.org/jeps/479\"\u003eRemove the Windows 32-bit x86 Port\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 483: \u003ca href=\"https://openjdk.org/jeps/483\"\u003eAhead-of-Time Class Loading \u0026amp; Linking\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 484: \u003ca href=\"https://openjdk.org/jeps/484\"\u003eClass-File API\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 485: \u003ca href=\"https://openjdk.org/jeps/485\"\u003eStream Gatherers\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 486: \u003ca href=\"https://openjdk.org/jeps/486\"\u003ePermanently Disable the Security Manager\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 487: \u003ca href=\"https://openjdk.org/jeps/487\"\u003eScoped Values (Fourth Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 488: \u003ca href=\"https://openjdk.org/jeps/488\"\u003ePrimitive Types in Patterns, instanceof, and switch (Second Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 489: \u003ca href=\"https://openjdk.org/jeps/489\"\u003eVector API (Ninth Incubator)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 490: \u003ca href=\"https://openjdk.org/jeps/490\"\u003eZGC: Remove the Non-Generational Mode\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 491: \u003ca href=\"https://openjdk.org/jeps/491\"\u003eSynchronize Virtual Threads without Pinning\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 492: \u003ca href=\"https://openjdk.org/jeps/492\"\u003eFlexible Constructor Bodies (Third Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 493: \u003ca href=\"https://openjdk.org/jeps/493\"\u003eLinking Run-Time Images without JMODs\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 494: \u003ca href=\"https://openjdk.org/jeps/494\"\u003eModule Import Declarations (Second Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 495: \u003ca href=\"https://openjdk.org/jeps/495\"\u003eSimple Source Files and Instance Main Methods (Fourth Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 496: \u003ca href=\"https://openjdk.org/jeps/496\"\u003eQuantum-Resistant Module-Lattice-Based Key Encapsulation Mechanism\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 497: \u003ca href=\"https://openjdk.org/jeps/497\"\u003eQuantum-Resistant Module-Lattice-Based Digital Signature Algorithm\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 498: \u003ca href=\"https://openjdk.org/jeps/498\"\u003eWarn upon Use of Memory-Access Methods in sun.misc.Unsafe\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 499: \u003ca href=\"https://openjdk.org/jeps/499\"\u003eStructured Concurrency (Fourth Preview)\u003c/a\u003e\u003c/li\u003e\n\t\u003cli\u003eJEP 501: \u003ca href=\"https://openjdk.org/jeps/501\"\u003eDeprecate the 32-bit x86 Port for Removal\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTwo of these - \u003cem\u003eGenerational Shenandoah (Experimental)\u003c/em\u003e and \u003cem\u003eCompact Object Headers (Experimental)\u003c/em\u003e - are new experimental features. Also, nearly half of these features are final, some of which have gone through the incubation and preview processes.\u003c/p\u003e\n\n\u003cp\u003eAs shown in the graph below, as presented in this \u003ca href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-24\"\u003eblog post\u003c/a\u003e, the feature cadence for JDK 24 is nearly twice than the average number of previous releases dating back to JDK 10.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/03/java24-released/en/resources/1infoq-jdk24-diagram-1742332090947.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/03/java24-released/en/resources/1infoq-jdk24-diagram-1742332090947.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eWe examine some of these JEPs, discuss the JDK 24 Launch Event, and update our predictions for features that may be included in JDK 25.\u003c/p\u003e\n\n\u003ch4\u003eGenerational Shenandoah (Experimental)\u003c/h4\u003e\n\n\u003cp\u003eJEP 404, \u003ca href=\"https://openjdk.org/jeps/404\"\u003eGenerational Shenandoah (Experimental)\u003c/a\u003e, proposes to provide an experimental generational mode, without breaking non-generational \u003ca href=\"https://wiki.openjdk.org/display/shenandoah/Main\"\u003eShenandoah Garbage Collector\u003c/a\u003e, with the intent to make the generational mode the default in a future JDK release. Originally targeted for JDK 21, JEP 404 was officially \u003ca href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-June/007959.html\"\u003eremoved\u003c/a\u003e from the final feature set due to the \u0026#34;\u003cem\u003erisks identified during the review process and the lack of time available to perform the thorough review that such a large contribution of code requires.\u003c/em\u003e\u0026#34; At the time, the Shenandoah team decided to target a future JDK release to \u0026#34;\u003cem\u003edeliver the best Generational Shenandoah that they can\u003c/em\u003e.\u0026#34;\u003c/p\u003e\n\n\u003ch4\u003eCompact Object Headers (Experimental)\u003c/h4\u003e\n\n\u003cp\u003eJEP 450, \u003ca href=\"https://openjdk.org/jeps/450\"\u003eCompact Object Headers (Experimental)\u003c/a\u003e, inspired by \u003ca href=\"https://wiki.openjdk.org/display/lilliput\"\u003eProject Lilliput\u003c/a\u003e, proposes to \u0026#34;\u003cem\u003ereduce the size of object headers in the HotSpot JVM from between 96 and 128 bits down to 64 bits on 64-bit architectures.\u003c/em\u003e\u0026#34; This feature is disabled by default as it is considered experimental and may cause unintended consequences if enabled by a developer. More details on compact object headers may be found in this InfoQ \u003ca href=\"https://www.infoq.com/news/2024/11/compact-headers-java24/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eStream Gatherers\u003c/h4\u003e\n\n\u003cp\u003eJEP 485, \u003ca href=\"https://openjdk.org/jeps/485\"\u003eStream Gatherers\u003c/a\u003e, finalizes this feature after two rounds of preview, namely: JEP 473: \u003ca href=\"https://openjdk.org/jeps/473\"\u003eStream Gatherers (Second Preview)\u003c/a\u003e, delivered in JDK 23; and JEP 461, \u003ca href=\"https://openjdk.org/jeps/461\"\u003eStream Gatherers (Preview)\u003c/a\u003e, delivered in JDK 22. This feature was designed to enhance the Stream API to support custom intermediate operations that will \u0026#34;\u003cem\u003eallow stream pipelines to transform data in ways that are not easily achievable with the existing built-in intermediate operations.\u003c/em\u003e\u0026#34; More details on stream gatherers may be found in the original \u003ca href=\"https://cr.openjdk.org/~vklang/Gatherers.html\"\u003edesign document\u003c/a\u003e and this InfoQ \u003ca href=\"https://www.infoq.com/news/2023/12/stream-api-evolution/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eAhead-of-Time Class Loading \u0026amp; Linking\u003c/h4\u003e\n\n\u003cp\u003eJEP 483, \u003ca href=\"https://openjdk.org/jeps/483\"\u003eAhead-of-Time Class Loading \u0026amp; Linking\u003c/a\u003e, proposes to \u0026#34;\u003cem\u003eimprove startup time by making the classes of an application instantly available, in a loaded and linked state, when the HotSpot Java Virtual Machine starts.\u003c/em\u003e\u0026#34; This may be achieved by monitoring the application during one run and storing the loaded and linked forms of all classes in a cache for use in subsequent runs. This feature will lay a foundation for future improvements to both startup and warmup time. More details may be found in this InfoQ \u003ca href=\"https://www.infoq.com/news/2025/03/java-24-leyden-ships/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eQuantum-Resistant Module-Lattice-Based Digital Signature Algorithm\u003c/h4\u003e\n\n\u003cp\u003eJEP 497, \u003ca href=\"https://openjdk.org/jeps/497\"\u003eQuantum-Resistant Module-Lattice-Based Digital Signature Algorithm\u003c/a\u003e, proposes to \u0026#34;\u003cem\u003eenhance the security of Java applications by providing an implementation of the quantum-resistant \u003ca href=\"https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.204.pdf\"\u003eModule-Lattice-Based Digital Signature Algorithm\u003c/a\u003e (ML-DSA)\u003c/em\u003e\u0026#34; as standardized by \u003ca href=\"https://csrc.nist.gov/pubs/fips/204/final\"\u003eFIPS 204\u003c/a\u003e. This will be accomplished by implementing the Java \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/security/KeyPairGenerator.html\"\u003eKeyPairGenerator\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/security/Signature.html\"\u003eSignature\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/security/KeyFactory.html\"\u003eKeyFactory\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e classes.\u003c/p\u003e\n\n\u003ch4\u003eVector API (Ninth Incubator)\u003c/h4\u003e\n\n\u003cp\u003eJEP 489, \u003ca href=\"https://openjdk.org/jeps/489\"\u003eVector API (Ninth Incubator)\u003c/a\u003e, proposes to incorporate enhancements in response to feedback from the previous eight rounds of incubation. This feature introduces an API to \u003cem\u003e\u0026#34;express vector computations that reliably compile at runtime to optimal vector instructions on supported CPU architectures, thus achieving performance superior to equivalent scalar computations.\u003c/em\u003e\u0026#34; JEP 338, \u003ca href=\"https://openjdk.java.net/jeps/338\"\u003eVector API (Incubator)\u003c/a\u003e, was delivered as an \u003ca href=\"https://openjdk.java.net/jeps/11\"\u003eincubator module\u003c/a\u003e in JDK 16. Originally slated to be a re-incubation for JDK 24 by reusing the original \u003cstrong\u003eIncubator\u003c/strong\u003e status, it was decided to keep enumerating. The Vector API will continue to incubate until the necessary features of \u003ca href=\"https://openjdk.org/projects/valhalla/\"\u003eProject Valhalla\u003c/a\u003e become available as preview features. At that time, the team will adapt the Vector API and its implementation to use them, and will elevate the Vector API from \u003cstrong\u003eIncubation\u003c/strong\u003e to \u003cstrong\u003ePreview\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch4\u003eJDK 24 Launch Event\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://youtu.be/mk_2MIWxLI0\"\u003eJDK 24 Launch Event\u003c/a\u003e, live-streamed on March 18, 2025, featured: a Java 24 overview with \u003ca href=\"https://www.linkedin.com/in/mikaelvidstedt/\"\u003eMikael Vidstedt\u003c/a\u003e, Senior Director, Java Virtual Machine at Oracle; the opening keynote, \u003cstrong\u003eOur World, Moved by Java\u003c/strong\u003e, facilitated by \u003ca href=\"https://www.linkedin.com/in/chadarimura/\"\u003eChad Arimura\u003c/a\u003e, Vice President, Java Developer Relations at Oracle; and a JDK 24 Deep Dive with \u003ca href=\"https://www.linkedin.com/in/viktorklang/\"\u003eViktor Klang\u003c/a\u003e, Software Architect at Oracle and \u003ca href=\"https://www.linkedin.com/in/dan-heidinga/\"\u003eDan Heidinga\u003c/a\u003e, Software Architect at Oracle, who presented on Stream Gatherers and AOT Caching, respectively. InfoQ will follow up with details on the opening address.\u003c/p\u003e\n\n\u003ch4\u003eJDK 25\u003c/h4\u003e\n\n\u003cp\u003eScheduled for a GA release in September 2025, two JEPs have been targeted for \u003ca href=\"https://jdk.java.net/25/\"\u003eJDK 25\u003c/a\u003e at this time. However, based on a number of JEP candidates and drafts, especially those that have been submitted, we can surmise which additional JEPs have the potential to be included in JDK 24.\u003c/p\u003e\n\n\u003cp\u003eJEP 502, \u003ca href=\"https://openjdk.org/jeps/502\"\u003eStable Values (Preview)\u003c/a\u003e, has been \u003cstrong\u003etargeted\u003c/strong\u003e for JDK 25. Formerly known as \u003cem\u003eComputed Constants (Preview)\u003c/em\u003e, this JEP introduces the concept of \u003cem\u003ecomputed constants\u003c/em\u003e, defined as immutable value holders that are initialized at most once. This offers the performance and safety benefits of \u003cstrong\u003e\u003ccode\u003efinal\u003c/code\u003e\u003c/strong\u003e fields, while offering greater flexibility as to the timing of initialization.\u003c/p\u003e\n\n\u003cp\u003eJEP 503, \u003ca href=\"https://openjdk.org/jeps/503\"\u003eRemove the 32-bit x86 Port\u003c/a\u003e, has been \u003cstrong\u003etargeted\u003c/strong\u003e for JDK 25. This JEP proposes to \u0026#34;\u003cem\u003eremove the source code and build support for the 32-bit x86 port.\u003c/em\u003e\u0026#34; This feature is a follow-up from JEP 501, \u003ca href=\"https://openjdk.org/jeps/501\"\u003eDeprecate the 32-bit x86 Port for Removal\u003c/a\u003e, to be delivered in the upcoming release of JDK 24. The review is expected to conclude on March 18, 2025.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eJEP Draft 8340343\u003c/strong\u003e, \u003ca href=\"https://openjdk.org/jeps/8340343\"\u003eStructured Concurrency (Fifth Preview)\u003c/a\u003e, proposes a fifth preview, with several API changes, to gain more feedback from the previous four rounds of preview, namely: JEP 499, \u003ca href=\"https://openjdk.org/jeps/499\"\u003eStructured Concurrency (Fourth Preview)\u003c/a\u003e, to be delivered in the upcoming GA release of JDK 24; JEP 480, \u003ca href=\"https://openjdk.org/jeps/480\"\u003eStructured Concurrency (Third Preview)\u003c/a\u003e, delivered in JDK 23; JEP 462, \u003ca href=\"https://openjdk.org/jeps/462\"\u003eStructured Concurrency (Second Preview)\u003c/a\u003e, delivered in JDK 22; and JEP 453, \u003ca href=\"https://openjdk.org/jeps/453\"\u003eStructured Concurrency (Preview)\u003c/a\u003e, delivered in JDK 21. This feature simplifies concurrent programming by introducing \u003cem\u003estructured concurrency\u003c/em\u003e to \u0026#34;treat groups of related tasks running in different threads as a single unit of work, thereby streamlining error handling and cancellation, improving reliability, and enhancing observability.\u0026#34; One of the proposed API changes involves the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://download.java.net/java/early_access/loom/docs/api/java.base/java/util/concurrent/StructuredTaskScope.html\"\u003eStructuredTaskScope\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e interface to be opened via static factory methods rather than public constructors.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eJEP Draft 8345525\u003c/strong\u003e, \u003ca href=\"https://openjdk.org/jeps/8345525\"\u003eRemove the Terminally Deprecated Applet API\u003c/a\u003e, proposes to finally remove the Applet API which has been deprecated since JDK 9 via JEP 289, \u003ca href=\"https://openjdk.org/jeps/289\"\u003eDeprecate the Applet API\u003c/a\u003e followed by JEP 398, \u003ca href=\"https://openjdk.org/jeps/398\"\u003eDeprecate the Applet API for Removal\u003c/a\u003e, delivered in JDK 17.\u003c/p\u003e\n\n\u003cp\u003eThe formal release date for \u003ca href=\"https://jdk.java.net/25/\"\u003eJDK 25\u003c/a\u003e is expected to be September 2025, soon to be proposed by \u003ca href=\"https://www.linkedin.com/in/markreinhold\"\u003eMark Reinhold\u003c/a\u003e, Chief Architect, Java Platform Group at Oracle. Developers can anticipate a feature freeze in early-June 2025. More details on additional JEP drafts and candidates may be found in this more detailed InfoQ \u003ca href=\"https://www.infoq.com/news/2025/02/java-24-so-far/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eJDK 24 may now be \u003ca href=\"https://jdk.java.net/24/\"\u003edownloaded from Oracle\u003c/a\u003e with binaries from other vendors expected to become available in the coming days.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-03-18T00:00:00Z",
  "modifiedTime": null
}
