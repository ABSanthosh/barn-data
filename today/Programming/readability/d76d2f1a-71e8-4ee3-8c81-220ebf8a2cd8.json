{
  "id": "d76d2f1a-71e8-4ee3-8c81-220ebf8a2cd8",
  "title": "Password Rules Are Bullshit",
  "link": "https://blog.codinghorror.com/password-rules-are-bullshit/",
  "description": "Of the many, many, many bad things about passwords, you know what the worst is? Password rules. If we don't solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost pic.twitter.com/Tf9EnwgoZv‚Äî Jeff Atwood",
  "author": "Jeff Atwood",
  "published": "Fri, 10 Mar 2017 11:16:26 GMT",
  "source": "https://feeds.feedburner.com/codinghorror",
  "categories": null,
  "byline": "Jeff Atwood",
  "length": 10048,
  "excerpt": "Of the many, many, many bad things about passwords [https://blog.codinghorror.com/the-dirty-truth-about-web-passwords/], you know what the worst is? Password rules. \u003e If we don't solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost pic.twitter.com/Tf9EnwgoZv [http://t.co/Tf9EnwgoZv] ‚Äî Jeff Atwood (@codinghorror) August 11, 2015 [https://twitter.com/codinghorror/status/631238409269309440] Let this pledge be duly noted on the permanent record",
  "siteName": "Coding Horror",
  "favicon": "https://blog.codinghorror.com/content/images/size/w256h256/2020/06/3cffc4b347c3587f19fe222caaac69f63b9a5e73.png",
  "text": "10 Mar 2017 Of the many, many, many bad things about passwords, you know what the worst is? Password rules. If we don't solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost pic.twitter.com/Tf9EnwgoZv‚Äî Jeff Atwood (@codinghorror) August 11, 2015 Let this pledge be duly noted on the permanent record of the Internet. I don't know if there's an afterlife, but I'll be finding out soon enough, and I plan to go out mad as hell. The world is absolutely awash in terrible password rules: Dumb Password Rules Bad Password Policies Password Requirements Shaming But I don't need to tell you this. The more likely you are to use a truly random password generation tool, like us √ºber-geeks are supposed to, the more likely you have suffered mightily ‚Äì and daily ‚Äì under this regime. Have you seen the classic XKCD about passwords? We can certainly debate whether \"correct horse battery staple\" is a viable password strategy or not, but the argument here is mostly that length matters. No, seriously, it does. I'll go so far as to say your password is too damn short. These days, given the state of cloud computing and GPU password hash cracking, any password of 8 characters or less is perilously close to no password at all. So then perhaps we have one rule, that passwords must not be short. A long password is much more likely to be secure than a short one ‚Ä¶ right? What about this four character password? ‚úÖüêéüîãüñáÔ∏è What about this eight character password? Ê≠£Á°ÆÈ©¨ÁîµÊ±†ËÆ¢‰π¶Èíâ Or this (hypothetical, but all too real) seven character password? ÿ¥ÂØº‡∏û‡∏¥Ìïú‚úåÔ∏éüöñ @codinghorror I'm sorry but your password must contain 1 char each from: Arabic, Chinese, Thai, Korean, Klingon, Wingdings and an emoji‚Äî Finley Creative (@FinleyCreative) March 3, 2016 You may also be surprised, if you paste the above four Unicode emojis into your favorite login dialog (go ahead ‚Äì try it), to discover that it ‚Ä¶ isn't in fact four characters. Oh dear. \"üí©\".length === 2 Our old pal Unicode strikes again. As it turns out, even the simple rule that \"your password must be of reasonable length\" ‚Ä¶ ain't necessarily so. Particularly if we stop thinking like Ugly ASCII Americans. And what of those nice, long passwords? Are they always secure? aaaaaaaaaaaaaaaaaaa 0123456789012345689 passwordpassword usernamepassword Of course not, because have you met any users lately? They consistently ruin every piece of software I've ever written. Yes, yes, I know you, Mr. or Ms. √ºber-geek, know all about the concept of entropy. But expressing your love of entropy as terrible, idiosyncratic password rules ‚Ä¶ must contain uppercase must contain lowercase must contain a number must contain a special character ‚Ä¶ is a spectacular failure of imagination in a world of Unicode and Emoji. As we built Discourse, I discovered that the login dialog was a remarkably complex piece of software, despite its surface simplicity. The primary password rule we used was also the simplest one: length. Since I wrote that, we've already increased our minimum password default length from 8 to 10 characters. And if you happen to be an admin or moderator, we decided the minimum has to be even more, 15 characters. I also advocated checking passwords against the 100,000 most common passwords. If you look at 10 million passwords from data breaches in 2016, you'll find the top 25 most used passwords are: 123456 123456789 qwerty 12345678 111111 1234567890 1234567 password 123123 987654321 qwertyuiop mynoob 123321 666666 18atcskd2w 7777777 1q2w3e4r 654321 555555 3rjs1la7qe google 1q2w3e4r5t 123qwe zxcvbnm 1q2w3e Even this data betrays some ASCII-centrism. The numbers are the same in any culture I suppose, but I find it hard to believe the average Chinese person will ever choose the passwords \"password\", \"quertyuiop\", or \"mynoob\". So this list has to be customizable, localizable. (One interesting idea is to search for common shorter password matches inside longer passwords, but I think this would cause too many false positives.) If you examine the data, this also turns into an argument in favor of password length. Note that only 5 of the top 25 passwords are 10 characters, so if we require 10 character passwords, we've already reduced our exposure to the most common passwords by 80%. I saw this originally when I gathered millions and millions of leaked passwords for Discourse research, then filtered the list down to just those passwords reflecting our new minimum requirement of 10 characters or more. It suddenly became a tiny list. (If you've done similar common password research, please do share your results in the comments.) I'd like to offer the following common sense advice to my fellow developers: 1. Password rules are bullshit They don't work. They heavily penalize your ideal audience, people that use real random password generators. Hey guess what, that password randomly didn't have a number or symbol in it. I just double checked my math textbook, and yep, it's possible. I'm pretty sure. They frustrate average users, who then become uncooperative and use \"creative\" workarounds that make their passwords less secure. They are often wrong, in the sense that the rules chosen are grossly incomplete and/or insane, per the many shaming links I've shared above. Seriously, for the love of God, stop with this arbitrary password rule nonsense already. If you won't take my word for it, read this 2016 NIST password rules recommendation. It's right there, \"no composition rules\". However, I do see one error, it should have said \"no bullshit composition rules\". 2. Enforce a minimum Unicode password length One rule is at least easy to remember, understand, and enforce. This is the proverbial one rule to bring them all, and in the darkness bind them. It's simple. Users can count. Most of them, anyway. It works. The data shows us it works; just download any common password list of your choice and group by password length. The math doesn't lie. All other things being equal, a longer password will be more random ‚Äì and thus more secure ‚Äì than a short password. Accept that even this one rule isn't inviolate. A minimum password length of 6 on a Chinese site might be perfectly reasonable. A 20 character password can be ridiculously insecure. If you don't allow (almost) every single unicode character in the password input field, you are probably doing it wrong. It's a bit of an implementation detail, but make sure maximum password length is reasonable as well. 3. Check for common passwords As I've already noted, the definition of \"common\" depends on your audience, and language, but it is a terrible disservice to users when you let them choose passwords that exist in the list of 10k, 100k, or million most common known passwords from data breaches. There's no question that a hacker will submit these common passwords in a hack attempt ‚Äì and it's shocking how far you can get, even with aggressive password attempt rate limiting, using just the 1,000 most common passwords. 1.6% have a password from the top 10 passwords 4.4% have a password from the top 100 passwords 9.7% have a password from the top 500 passwords 13.2% have a password from the top 1,000 passwords 30% have a password from the top 10,000 passwords Lucky you, there are millions and millions of real breached password lists out there to sift through. It is sort of fun to do data forensics, because these aren't hypothetical synthetic Jack the Ripper password rules some bored programmer dreamed up, these are real passwords used by real users. Do the research. Collect the data. Protect your users from themselves. 4. Check for basic entropy No need to get fancy here; pick the measure of entropy that satisfies you deep in the truthiness of your gut. But remember you have to be able to explain it to users when they fail the check, too. I had a bit of a sad when I realized that we were perfectly fine with users selecting a 10 character password that was literally \"aaaaaaaaaa\". In my opinion, the simplest way to do this is to ensure that there are at least (x) unique characters out of (y) total characters. And that's what we do as of the current beta version of Discourse. But I'd love your ideas in the comments, too. The simpler and clearer the better! 5. Check for special case passwords I'm embarrassed to admit that when building the Discourse login, as I discussed in The God Login, we missed two common cases that you really have to block: password equal to username password equal to email address ü§¶ If you are using Discourse versions earlier than 1.4, I'm so sorry and please upgrade immediately. Similarly, you might also want to block other special cases like password equal to URL or domain of website password equal to app name In short, try to think outside the password input box, like a user would. üîî Clarification A few people have interpreted this post as \"all the other password rules are bullshit, except these four I will now list.\" That's not what I'm trying to say here. The idea is to focus on the one understandable, simple, practical, works-in-real-life-in-every-situation rule: length. Users can enter (almost) anything, in proper Unicode, provided it's long enough. That's the one rule to bind them all that we need to teach users: length! Items #3 through #5 are more like genie-special-exception checks, a you can't wish for infinite wishes kind of thing. It doesn't need to be discussed up front because it should be really rare. Yes, you must stop users from having comically bad passwords that equal their username, or aaaaaaaaaaa or 0123456789, but only as post-entry checks, not as rules that need to be explained in advance. So TL;DR: one rule. Length. Enter whatever you want, just make sure it's long enough to be a reasonable password. [advertisement] Building out your tech team? Stack Overflow Careers helps you hire from the largest community for programmers on the planet. We built our site with developers like you in mind.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n        \n        \n\u003cmain role=\"main\"\u003e\n\n    \u003carticle\u003e\n\n\n            \u003cspan\u003e\u003ctime datetime=\"2017-03-10\"\u003e10 Mar 2017\u003c/time\u003e \u003c/span\u003e\n\n            \n\n            \u003csection\u003e\n                \u003cp\u003eOf the many, many, \u003cem\u003emany\u003c/em\u003e \u003ca href=\"https://blog.codinghorror.com/the-dirty-truth-about-web-passwords/\"\u003ebad things about passwords\u003c/a\u003e, you know what the worst is? Password rules.\u003c/p\u003e\n\u003cblockquote data-lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eIf we don\u0026#39;t solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost \u003ca href=\"http://t.co/Tf9EnwgoZv?ref=blog.codinghorror.com\"\u003epic.twitter.com/Tf9EnwgoZv\u003c/a\u003e\u003c/p\u003e‚Äî Jeff Atwood (@codinghorror) \u003ca href=\"https://twitter.com/codinghorror/status/631238409269309440?ref=blog.codinghorror.com\"\u003eAugust 11, 2015\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eLet this pledge be duly noted on the permanent record of the Internet. I don\u0026#39;t know if there\u0026#39;s an afterlife, but I\u0026#39;ll be finding out soon enough, and I plan to go out \u003cem\u003emad as hell\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe world is absolutely awash in terrible password rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/duffn/dumb-password-rules?ref=blog.codinghorror.com\"\u003eDumb Password Rules\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://badpasswordpolicies.tumblr.com/?ref=blog.codinghorror.com\"\u003eBad Password Policies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://password-shaming.tumblr.com/?ref=blog.codinghorror.com\"\u003ePassword Requirements Shaming\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut I don\u0026#39;t need to tell you this. The more likely you are to use a truly random password generation tool, like us √ºber-geeks are supposed to, the more likely you have suffered mightily ‚Äì and daily ‚Äì under this regime.\u003c/p\u003e\n\u003cp\u003eHave you seen the classic XKCD \u003ca href=\"https://xkcd.com/936/?ref=blog.codinghorror.com\"\u003eabout passwords\u003c/a\u003e?\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/password_strength.png\" alt=\"To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize.\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe \u003ca href=\"https://security.stackexchange.com/questions/6095/xkcd-936-short-complex-password-or-long-dictionary-passphrase?ref=blog.codinghorror.com\"\u003ecan certainly debate\u003c/a\u003e whether \u0026#34;correct horse battery staple\u0026#34; is a viable password strategy or not, but the argument here is mostly that \u003cem\u003elength matters\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/twss.jpg\" alt=\"That\u0026#39;s What She Said\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eNo, seriously, it does. I\u0026#39;ll go so far as to say \u003ca href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\"\u003eyour password is too damn short\u003c/a\u003e. These days, given the state of cloud computing and GPU password hash cracking, any password of 8 characters or less is perilously close to \u003cem\u003eno password at all\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSo then perhaps we have one rule, that \u003cstrong\u003epasswords must not be short\u003c/strong\u003e. A long password is much more likely to be secure than a short one ‚Ä¶ right?\u003c/p\u003e\n\u003cp\u003eWhat about this four character password?\u003c/p\u003e\n\u003ch2 id=\"\"\u003e‚úÖüêéüîãüñáÔ∏è\u003c/h2\u003e\n\u003cp\u003eWhat about this eight character password?\u003c/p\u003e\n\u003ch2 id=\"\"\u003eÊ≠£Á°ÆÈ©¨ÁîµÊ±†ËÆ¢‰π¶Èíâ\u003c/h2\u003e\n\u003cp\u003eOr this (hypothetical, but all too real) seven character password?\u003c/p\u003e\n\u003ch2\u003eÿ¥ÂØº‡∏û‡∏¥Ìïú\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/06/klingon-char.png\" width=\"35\" height=\"42\" alt=\"\"/\u003e‚úåÔ∏éüöñ\u003c/h2\u003e\n\u003cblockquote data-conversation=\"none\" data-lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/codinghorror?ref=blog.codinghorror.com\"\u003e@codinghorror\u003c/a\u003e I\u0026#39;m sorry but your password must contain 1 char each from: Arabic, Chinese, Thai, Korean, Klingon, Wingdings and an emoji\u003c/p\u003e‚Äî Finley Creative (@FinleyCreative) \u003ca href=\"https://twitter.com/FinleyCreative/status/705349059217784833?ref=blog.codinghorror.com\"\u003eMarch 3, 2016\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eYou may also be surprised, if you paste the above four Unicode emojis into your favorite login dialog (go ahead ‚Äì try it), to discover that it ‚Ä¶ \u003cem\u003eisn\u0026#39;t\u003c/em\u003e in fact four characters.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/discourse-login-emoji-password.png\" alt=\"\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eOh dear.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026#34;üí©\u0026#34;.length === 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur old pal Unicode \u003ca href=\"http://blog.jonnew.com/posts/poo-dot-length-equals-two?ref=blog.codinghorror.com\"\u003estrikes again\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs it turns out, even the simple rule that \u0026#34;your password must be of reasonable length\u0026#34; ‚Ä¶ ain\u0026#39;t necessarily so. Particularly if we stop thinking like \u003ca href=\"https://blog.codinghorror.com/the-ugly-american-programmer/\"\u003eUgly ASCII Americans\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd what of those nice, long passwords? Are they \u003cem\u003ealways\u003c/em\u003e secure?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaaaaaaaaaaaaaaaaaaa\n0123456789012345689\npasswordpassword\nusernamepassword\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOf course not, because \u003cem\u003ehave you met any users lately?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/incorrect-password.jpg\" alt=\"I changed all my passwords to \u0026#34;incorrect\u0026#34;\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eThey consistently ruin every piece of software I\u0026#39;ve ever written. Yes, yes, I know you, Mr. or Ms. √ºber-geek, know \u003cem\u003eall\u003c/em\u003e about the concept of entropy. But expressing your love of entropy as terrible, idiosyncratic password rules ‚Ä¶\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emust contain uppercase\u003c/li\u003e\n\u003cli\u003emust contain lowercase\u003c/li\u003e\n\u003cli\u003emust contain a number\u003c/li\u003e\n\u003cli\u003emust contain a special character\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e‚Ä¶ is a spectacular failure of imagination in a world of Unicode and Emoji.\u003c/p\u003e\n\u003cp\u003eAs we built \u003ca href=\"https://discourse.org/?ref=blog.codinghorror.com\"\u003eDiscourse\u003c/a\u003e, I discovered that \u003ca href=\"https://blog.codinghorror.com/the-god-login/\"\u003ethe login dialog was a remarkably complex piece of software\u003c/a\u003e, despite its surface simplicity. The primary password rule we used was also the simplest one: \u003cstrong\u003elength\u003c/strong\u003e. Since I wrote that, we\u0026#39;ve already increased our minimum password default length from 8 to 10 characters. And if you happen to be an admin or moderator, we decided the minimum has to be even more, \u003cstrong\u003e15\u003c/strong\u003e characters.\u003c/p\u003e\n\u003cp\u003eI also advocated \u003cstrong\u003echecking passwords against the 100,000 most common passwords\u003c/strong\u003e. If you look at \u003ca href=\"https://blog.keepersecurity.com/2017/01/13/most-common-passwords-of-2016-research-study/?ref=blog.codinghorror.com\"\u003e10 million passwords from data breaches in 2016\u003c/a\u003e, you\u0026#39;ll find the top 25 most used passwords are:\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\n\u003ccode\u003e123456\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e123456789\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eqwerty\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e12345678\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e111111\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1234567890\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1234567\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003epassword\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e123123\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e987654321\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eqwertyuiop\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003emynoob\u003c/code\u003e\u003cbr/\u003e\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003e123321\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e666666\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e18atcskd2w\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e7777777\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1q2w3e4r\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e654321\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e555555\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e3rjs1la7qe\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003egoogle\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1q2w3e4r5t\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e123qwe\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003ezxcvbnm\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003e1q2w3e\u003c/code\u003e\u003cbr/\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eEven this data betrays some ASCII-centrism. The numbers are the same in any culture I suppose, but I find it hard to believe the average Chinese person will ever choose the passwords \u0026#34;password\u0026#34;, \u0026#34;quertyuiop\u0026#34;, or \u0026#34;mynoob\u0026#34;. So this list \u003cem\u003ehas\u003c/em\u003e to be customizable, localizable.\u003c/p\u003e\n\u003cp\u003e(One interesting idea is to search for common shorter password matches inside longer passwords, but I think this would cause too many false positives.)\u003c/p\u003e\n\u003cp\u003eIf you examine the data, this also turns into an argument in favor of password length. Note that only 5 of the top 25 passwords are 10 characters, so if we require 10 character passwords, we\u0026#39;ve already reduced our exposure to the most common passwords by 80%. I saw this originally when I \u003ca href=\"https://github.com/danielmiessler/SecLists/tree/master/Passwords?ref=blog.codinghorror.com\"\u003egathered millions and millions of leaked passwords for Discourse research\u003c/a\u003e, then filtered the list down to just those passwords reflecting our new minimum requirement of 10 characters or more.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/top-million-common-passwords-by-length.png\" alt=\"\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt suddenly became a \u003cem\u003etiny\u003c/em\u003e list. (If you\u0026#39;ve done similar common password research, please do share your results in the comments.)\u003c/p\u003e\n\u003cp\u003eI\u0026#39;d like to offer the following common sense advice to my fellow developers:\u003c/p\u003e\n\u003ch4 id=\"1passwordrulesarebullshit\"\u003e1. Password rules are bullshit\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThey don\u0026#39;t work.\u003c/li\u003e\n\u003cli\u003eThey heavily penalize your ideal audience, people that use real random password generators. Hey guess what, that password randomly \u003cem\u003edidn\u0026#39;t\u003c/em\u003e have a number or symbol in it. I just double checked my math textbook, and yep, it\u0026#39;s possible. I\u0026#39;m pretty sure.\u003c/li\u003e\n\u003cli\u003eThey frustrate average users, who then become uncooperative and use \u0026#34;creative\u0026#34; workarounds that make their passwords \u003cem\u003eless\u003c/em\u003e secure.\u003c/li\u003e\n\u003cli\u003eThey are often wrong, in the sense that the rules chosen are grossly incomplete and/or insane, per the many shaming links I\u0026#39;ve shared above.\u003c/li\u003e\n\u003cli\u003eSeriously, for the \u003cem\u003elove of God\u003c/em\u003e, stop with this arbitrary password rule nonsense already. If you won\u0026#39;t take my word for it, read \u003ca href=\"https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/?ref=blog.codinghorror.com\"\u003ethis 2016 NIST password rules recommendation\u003c/a\u003e. It\u0026#39;s right there, \u0026#34;no composition rules\u0026#34;. However, I do see one error, it should have said \u0026#34;no \u003cem\u003ebullshit\u003c/em\u003e composition rules\u0026#34;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2enforceaminimumunicodepasswordlength\"\u003e2. Enforce a minimum \u003cem\u003eUnicode\u003c/em\u003e password length\u003c/h4\u003e\n\u003cp\u003eOne rule is at least easy to remember, understand, and enforce. This is the proverbial one rule to bring them all, and in the darkness bind them.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/one-donut-to-bind-them-all.jpg\" alt=\"\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026#39;s simple. Users can count. Most of them, anyway.\u003c/li\u003e\n\u003cli\u003eIt works. The data \u003cem\u003eshows us\u003c/em\u003e it works; just download any common password list of your choice and group by password length.\u003c/li\u003e\n\u003cli\u003eThe math doesn\u0026#39;t lie. All other things being equal, a longer password \u003cem\u003ewill\u003c/em\u003e be more random ‚Äì and thus more secure ‚Äì than a short password.\u003c/li\u003e\n\u003cli\u003eAccept that even this one rule isn\u0026#39;t inviolate. A minimum password length of 6 on a Chinese site \u003cem\u003emight\u003c/em\u003e be perfectly reasonable. A 20 character password \u003cem\u003ecan\u003c/em\u003e be ridiculously insecure.\u003c/li\u003e\n\u003cli\u003eIf you don\u0026#39;t allow (almost) every single unicode character in the password input field, you are probably doing it wrong.\u003c/li\u003e\n\u003cli\u003eIt\u0026#39;s a bit of an implementation detail, but make sure \u003cem\u003emaximum\u003c/em\u003e password length is reasonable as well.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3checkforcommonpasswords\"\u003e3. Check for common passwords\u003c/h4\u003e\n\u003cp\u003eAs I\u0026#39;ve already noted, the definition of \u0026#34;common\u0026#34; depends on your audience, and language, but it is a terrible disservice to users when you let them choose passwords that exist in the list of 10k, 100k, or million most common known passwords from data breaches. There\u0026#39;s \u003cem\u003eno question\u003c/em\u003e that a hacker will submit these common passwords in a hack attempt ‚Äì and it\u0026#39;s shocking how far you can get, even with aggressive password attempt rate limiting, using \u003ca href=\"https://xato.net/10-000-top-passwords-6d6380716fe0?ref=blog.codinghorror.com\"\u003ejust the 1,000 most common passwords\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1.6% have a password from the top 10 passwords\u003c/li\u003e\n\u003cli\u003e4.4% have a password from the top 100 passwords\u003c/li\u003e\n\u003cli\u003e9.7% have a password from the top 500 passwords\u003c/li\u003e\n\u003cli\u003e13.2% have a password from the top 1,000 passwords\u003c/li\u003e\n\u003cli\u003e30% have a password from the top 10,000 passwords\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLucky you, there are millions and millions of real breached password lists out there to sift through. It is sort of fun to do data forensics, because these aren\u0026#39;t hypothetical synthetic Jack the Ripper password rules some bored programmer dreamed up, these are \u003cem\u003ereal\u003c/em\u003e passwords used by \u003cem\u003ereal\u003c/em\u003e users.\u003c/p\u003e\n\u003cp\u003eDo the research. Collect the data. Protect your users from themselves.\u003c/p\u003e\n\u003ch4 id=\"4checkforbasicentropy\"\u003e4. Check for basic entropy\u003c/h4\u003e\n\u003cp\u003eNo need to get fancy here; pick the measure of entropy that satisfies you deep in the truthiness of your gut. But remember you have to be able to \u003cem\u003eexplain\u003c/em\u003e it to users when they fail the check, too.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.digifail.com/software/spectra.shtml?ref=blog.codinghorror.com\"\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2017/03/entropy2.png\" alt=\"entropy visualized\" loading=\"lazy\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI had a bit of a sad when I realized that we  were perfectly fine with users selecting a 10 character password that was literally \u0026#34;aaaaaaaaaa\u0026#34;. In my opinion, the simplest way to do this is to ensure that there are at least (x) unique characters out of (y) total characters. And that\u0026#39;s what we do as of the current beta version of Discourse. But I\u0026#39;d love your ideas in the comments, too. The simpler and clearer the better!\u003c/p\u003e\n\u003ch4 id=\"5checkforspecialcasepasswords\"\u003e5. Check for special case passwords\u003c/h4\u003e\n\u003cp\u003eI\u0026#39;m embarrassed to admit that when building the Discourse login, \u003ca href=\"https://blog.codinghorror.com/the-god-login/\"\u003eas I discussed in The God Login\u003c/a\u003e, we missed two common cases that you really \u003cem\u003ehave\u003c/em\u003e to block:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epassword equal to username\u003c/li\u003e\n\u003cli\u003epassword equal to email address\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eü§¶ If you are using Discourse versions earlier than 1.4, I\u0026#39;m so sorry and \u003cem\u003eplease upgrade immediately\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSimilarly, you might also want to block other special cases like\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epassword equal to URL or domain of website\u003c/li\u003e\n\u003cli\u003epassword equal to app name\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn short, try to think outside the password input box, like a user would.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eüîî \u003cstrong\u003eClarification\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA few people have interpreted this post as \u0026#34;all the \u003cem\u003eother\u003c/em\u003e password rules are bullshit, except these four I will now list.\u0026#34; That\u0026#39;s not what I\u0026#39;m trying to say here.\u003c/p\u003e\n\u003cp\u003eThe idea is to focus on the one understandable, simple, practical, works-in-real-life-in-every-situation rule: \u003cstrong\u003elength\u003c/strong\u003e. Users can enter (almost) anything, in proper Unicode, \u003cem\u003eprovided it\u0026#39;s long enough\u003c/em\u003e. That\u0026#39;s the \u003cstrong\u003eone rule to bind them all\u003c/strong\u003e that we need to teach users: length!\u003c/p\u003e\n\u003cp\u003eItems #3 through #5 are more like genie-special-exception checks, a \u003ca href=\"https://www.youtube.com/watch?v=Bwic3hJ4q1A\u0026amp;ref=blog.codinghorror.com\"\u003eyou can\u0026#39;t wish for infinite wishes\u003c/a\u003e kind of thing. It doesn\u0026#39;t need to be discussed up front because it \u003cem\u003eshould\u003c/em\u003e be really rare. Yes, you must stop users from having comically bad passwords that equal their username, or \u003ccode\u003eaaaaaaaaaaa\u003c/code\u003e or \u003ccode\u003e0123456789\u003c/code\u003e, but only as post-entry checks, not as rules that need to be explained in advance.\u003c/p\u003e\n\u003cp\u003eSo TL;DR: one rule. Length. Enter whatever you want, just make sure it\u0026#39;s long enough to be a reasonable password.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\n[advertisement] Building out your tech team? \u003ca href=\"http://careers.stackoverflow.com/products?ref=blog.codinghorror.com\" rel=\"nofollow\"\u003eStack Overflow Careers\u003c/a\u003e helps you hire from the largest community for programmers on the planet. We built our site with developers like you in mind.\n\u003c/p\u003e\n\n            \u003c/section\u003e\n\n            \n\n            \n\n\n    \u003c/article\u003e\n\n    \n\n    \n\n\u003c/main\u003e\n\n\n\n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2017-03-10T11:16:26Z",
  "modifiedTime": "2017-06-03T06:43:05Z"
}
