{
  "id": "dae242d5-0363-435c-9b9f-5ba6c0dc1703",
  "title": "Learning Scala at SoundCloud",
  "link": "https://developers.soundcloud.com/blog/learning-scala-at-soundcloud",
  "description": "I’m a backend developer who worked extensively writing code in Golang before joining SoundCloud. SoundCloud mostly uses Scala for its…",
  "author": "",
  "published": "Tue, 19 Apr 2022 00:00:00 GMT",
  "source": "https://developers.soundcloud.com/blog/blog.rss",
  "categories": null,
  "byline": "",
  "length": 12986,
  "excerpt": "This is the story of how I joined SoundCloud and learned Scala as a Golang developer with no prior knowledge of Scala.",
  "siteName": "",
  "favicon": "",
  "text": "I’m a backend developer who worked extensively writing code in Golang before joining SoundCloud. SoundCloud mostly uses Scala for its microservices, so when I joined, it was important to learn it. As I was new to the language, I faced some challenges going from knowing nothing to becoming skilled at writing code in Scala. This blog post will cover how I kickstarted the learning process, what resources I made use of, how the Scala community at SoundCloud helped me learn and grow, how I was able to keep going when things got challenging, and how I set achievable objectives to monitor my progress. Learning a New Language Learning a new language of any kind requires rewiring one’s way of thinking and seeing things. Personally, I had anxiety about not being able to do simple things, like fixing a compilation error that felt straightforward, converting one type to another, or debugging the existing code that had imports that provide implicit functions. However, I found that both being consistent in studying and using a language daily and getting help from people are key to learning a new language. To give you more insight into this, I’ll share how I started learning with the help of Scala developers at SoundCloud. More specifically, I’ll talk about how I: Enrolled in and completed a Coursera program Ordered a book, Scala for the Impatient Mixed up my learning methods Eagerly dove into the work and sought help along the way Took advantage of learning and development Set personal objectives and key results Without further ado, keep reading! Coursera Coursera is an online learning platform for taking courses on a variety of topics via its partnership with universities and companies around the world. It also provides certification for these courses. I began by enrolling in Functional Programming Principles in Scala, which is taught by Martin Odersky, one of the designers of Scala. I followed the course to first set up my environment, and then I started with my first “Hello, World!” program. I then began learning the concepts, and I worked on a few exercises. It wasn’t as easy as I thought it would be, and a lot of that had to do with coming from Golang. More specifically, here are a few things I found different: Go and Scala have different approaches to concurrency and parallelism. Go has goroutines and channels, while Scala has Futures and Promises. As a result, concurrent code written in Go and Scala looks quite different. (Here are examples of my code for running a task concurrently in Go and Scala.) Scala takes more time to compile compared to Go. The compile time for the code linked above was 3 seconds in Scala and .16 seconds in Go. The slowness of the compiler is thoroughly described here by Odersky. Go is a procedural and imperative compiled language, and its syntax is similar to that of the C family of languages. Meanwhile, Scala is a hybrid language that combines object-oriented and functional approaches. Unlike Go, Scala is very concise and requires less boilerplate code. Each language has a different approach to tooling. Common tasks — like compiling code, running tests, and building an application — are built into Go. Scala, on the other hand, has a separate tool to do these things, sbt. To understand why applications should use Scala, it was especially helpful to watch videos and read blogs. They demonstrated both why Scala supports both functional and object-oriented programming, and its uses in different applications. There’s a suggested video on Coursera called Working Hard to Keep It Simple (also from Martin Odersky), and it was a great introduction to understanding Scala in a nutshell. I also recommend the blog post, Strategic Scala Style: Principle of Least Power, which aims to provide style guidelines at the “strategic” level. Scala provides various ways to solve a problem, and that post outlines how to choose one from the range of possible solutions. Scala for the Impatient I started reading Scala for the Impatient, which was ideal for a Scala beginner like myself. It doesn’t just introduce concepts; it also compares them to other languages like Java and C++, which was one of the things I really liked, because it helped me better understand and made me curious about how things are done in Scala. It also helped me visualize the comparison and provided a sense of familiarity when learning a new language. It has simple examples for learning Scala and an extensive list of exercises at the end of each chapter. The book began with the basics — like types and arrays — and it progressed to concepts like inheritance, objects, operator overloading, tuples, and lists. One fun fact I learned is that usually, other languages (such as C, Java, or Golang) use [] to access an element. Scala, however, uses () to access an element. For example, to create an array and to access an element, respectively, in Golang, you’d do the following: var z [Size]String var i=z[0] Meanwhile, to create an array and to access an element, respectively, in Scala, you’d do this: val z = new Array[String] (Size) val i= z(0) As you can see, both the above statements create an array and access an element; however, Scala uses parentheses to access an element, while other languages — such as Go, C, C++, and Java — use square brackets to access an element. Apart from this being unusual in other languages, using parentheses means that collections are considered functions, and this can be useful to include functionalities like map andfilter, which expect their arguments to behave syntactically as functions, and not just semantically. To understand more of the history of using square brackets and the importance of switching to parentheses, please refer to the Syntax for Indexing blog post. Switching Patterns All that said, most of the exercises weren’t easy, in the sense that I needed to focus on the problem to solve, and not just the language to express the solution. This is something I felt could’ve been different in the course. Giving problems like Huffman coding, Anagrams, LinkedList, and sorting to Scala beginners is like asking a person who just started learning how to skateboard to do it for 30 kilometers: At this point, the person isn’t really great at skateboarding, much less for that distance. Since it takes time to learn and solve the problems, I learned not to rush or feel like I had to finish the course quickly. And to keep things interesting and to reinforce my learning, I regularly changed how I learned by switching between watching videos and reading. I had started reading Scala for the Impatient while still taking the Coursera course, as I found the exercises from Coursera were difficult, and I hoped the book would provide more context. Once I finished reading the basic concepts of Scala and doing exercises from the book, I wanted to try a different learning pattern, so I resumed the Coursera course. This time, I felt like it was easier to listen to and digest the video lectures, as I had just learned these same concepts from the book and the videos served to reinforce those learnings. This is because the simple exercises that I tried from the book provided me with more practical and hands-on exposure to functions and libraries in Scala, which in turn helped me complete Coursera exercises that I wasn’t able to finish before. Diving In and Seeking Help Even though exercises and courses helped me code in Scala, the one thing as a beginner that really helped accelerate my learning was to actually work on the projects. I started working on a pull request approximately two weeks after I started learning Scala to update a Scala version in a SoundCloud repository. It used a library called Scalaz, but it started failing after the update. I could understand the compilation error, but I had no idea how to fix it. As a note, this repository was written years ago, and most of the methods or concepts had been deprecated or replaced in the new version of Scala. These things can be learned only by working on them. When I felt like it was really difficult for me to understand and to fix these errors, I asked questions and sought help from the #scala channel on the SoundCloud Slack, and I also did pair programming with colleagues. In doing so, I found that one of the more effective ways to learn a language, beyond just diving in and doing it, is to actually be part of the community and have discussions. It made me realize that it’s OK to make mistakes and ask questions, as this knowledge sharing helps us learn from each other. Taking Advantage of L\u0026D SoundCloud has great employee policies for learning and development (L\u0026D). It provides self-allocated time (SAT) for employees, a budget for learning that allows us to buy books and take courses, and extensive documentation for resources that help us learn and grow as developers. Additionally, SoundCloud has great internal documentation for Scala that covers the best practices, test styles, patterns, and libraries used here to provide guidelines for developers to write idiomatic “SoundCloudy” Scala. This provides sufficient resources for beginners. Setting Objectives Learning is a process, and especially considering that Scala is both an object-oriented and functional language — meaning it has many ways of expressing things — it might take a long time for people to master this language. As such, it’s helpful to set objectives to track learning and stay on course, which is where Objectives and Key Results (OKRs) come into play. This is a goal-setting methodology used to set goals with measurable results. In my opinion, learning is a neverending process, but being able to track things on an individual and company level is crucial to know that the learning is indeed happening. OKRs helped with this. Together with my manager, I came up with my own OKRs using a performance management toolkit at SoundCloud called Small Improvements. These OKRs were to: Finish the Scala course from Coursera Create a small personal project using Scala Get my hands dirty by implementing as many pull requests as possible Perform code reviews on my colleagues’ pull requests Record this process in a blog post to help others who are new to Scala Key Results After setting and working toward the objectives outlined above, here are my key results: I am certified in the Coursera Functional Programming in Scala course. I wrote a web service to create/retrieve a playlist that uses the following libraries: Http4s — for the HTTP layer, this library uses cats-effect to manage I/O Flyway for database migrations PostgreSQL for the database server quill for expressing SQL as a Scala class circe for JSON encoding and decoding Doing this helped me start a project from scratch, incorporate concepts I had learned, and explore various libraries in Scala. You can see the end result, playlists, on GitHub. Additionally: I implemented features by raising 64 pull requests and code reviewed 44 pull requests in Scala at SoundCloud in the past few months. I finished writing this blog post. Takeaway In addition to all I did and learned, I had a few additional takeaways from this process: One of Scala’s goals is to make programmers focus on high-level application logic, so it provides extensive built-in methods. This means I can do many manipulations of any type with less effort and time than in Go. One of the best examples of this is the .map method. With the help of this method, I don’t have to worry about writing code to iterate an array or list. Rather, I can spend my efforts on writing the logic of what manipulations need to be done on these elements. As a developer, I think one of the essential tasks of my job is to write effective test code that’s both readable and easy to write in order to cover simple and complex test cases. One of the simple and yet more efficient testing frameworks that I used in the project is MUnit, in combination with the integration library munit-cats-effect. This made it easy to test the stream response for HTTP testing. Meanwhile, there are other simple and more important testing frameworks, like ScalaTest, with different testing styles. Because I was a Golang developer for almost four years, I nearly forgot about object-oriented programming concepts like inheritance, encapsulation, and polymorphism. The whole process of learning Scala made me recall and refresh these concepts. Conclusion Learning is a continuous process, and the longer I’m here at SoundCloud, the more I’m learning. It’s a great opportunity to be able to grow my skills and learn a new language, and if you’re considering doing the same, I hope this post can help you kickstart your learning. Additional References Scala documentation Scala community Scala “Hello, world” example Scala Hello World tutorial using IntelliJ IDEA Scala School! Online Courses from the Scala Center Another https4s CRUD tutorial Functional Service in Scala Testing and Error Handling in http4s",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eI’m a backend developer who worked extensively writing code in Golang before joining SoundCloud. SoundCloud mostly uses Scala for its \u003ca href=\"https://developers.soundcloud.com/blog/category/microservices\"\u003emicroservices\u003c/a\u003e, so when I joined, it was important to learn it. As I was new to the language, I faced some challenges going from knowing nothing to becoming skilled at writing code in Scala.\u003c/p\u003e\n\u003cp\u003eThis blog post will cover how I kickstarted the learning process, what resources I made use of, how the Scala community at SoundCloud helped me learn and grow, how I was able to keep going when things got challenging, and how I set achievable objectives to monitor my progress.\u003c/p\u003e\n\u003ch2\u003eLearning a New Language\u003c/h2\u003e\n\u003cp\u003eLearning a new language of any kind requires rewiring one’s way of thinking and seeing things. Personally, I had anxiety about not being able to do simple things, like fixing a compilation error that felt straightforward, converting one type to another, or debugging the existing code that had imports that provide implicit functions. However, I found that both being consistent in studying and using a language daily and getting help from people are key to learning a new language.\u003c/p\u003e\n\u003cp\u003eTo give you more insight into this, I’ll share how I started learning with the help of Scala developers at SoundCloud. More specifically, I’ll talk about how I:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnrolled in and completed a Coursera program\u003c/li\u003e\n\u003cli\u003eOrdered a book, \u003cem\u003e\u003ca href=\"https://horstmann.com/scala/\"\u003eScala for the Impatient\u003c/a\u003e\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eMixed up my learning methods\u003c/li\u003e\n\u003cli\u003eEagerly dove into the work and sought help along the way\u003c/li\u003e\n\u003cli\u003eTook advantage of learning and development\u003c/li\u003e\n\u003cli\u003eSet personal objectives and key results\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWithout further ado, keep reading!\u003c/p\u003e\n\u003ch2\u003eCoursera\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.coursera.org/\"\u003eCoursera\u003c/a\u003e is an online learning platform for taking courses on a variety of topics via its partnership with universities and companies around the world. It also provides certification for these courses. I began by enrolling in \u003ca href=\"https://www.coursera.org/learn/scala-functional-programming\"\u003eFunctional Programming Principles in Scala\u003c/a\u003e, which is taught by Martin Odersky, one of the designers of Scala. I followed the course to first set up my environment, and then I started with my first “Hello, World!” program. I then began learning the concepts, and I worked on a few exercises.\u003c/p\u003e\n\u003cp\u003eIt wasn’t as easy as I thought it would be, and a lot of that had to do with coming from Golang. More specifically, here are a few things I found different:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGo and Scala have different approaches to concurrency and parallelism. Go has \u003ca href=\"https://dave.cheney.net/tag/goroutines\"\u003egoroutines\u003c/a\u003e and \u003ca href=\"https://dave.cheney.net/tag/channels\"\u003echannels\u003c/a\u003e, while Scala has \u003ca href=\"https://docs.scala-lang.org/overviews/core/futures.html\"\u003eFutures and Promises\u003c/a\u003e. As a result, concurrent code written in Go and \u003ca href=\"http://twitter.github.io/scala_school/concurrency.html\"\u003eScala\u003c/a\u003e looks quite different. (Here are examples of my code for running a task concurrently in \u003ca href=\"https://go.dev/play/p/isrtNAq4yGx\"\u003eGo\u003c/a\u003e and \u003ca href=\"https://onecompiler.com/scala/3xtr8zj9h\"\u003eScala\u003c/a\u003e.)\u003c/li\u003e\n\u003cli\u003eScala takes more time to compile compared to Go. The compile time for the code linked above was 3 seconds in Scala and .16 seconds in Go. The slowness of the compiler is thoroughly \u003ca href=\"https://stackoverflow.com/questions/3490383/java-compile-speed-vs-scala-compile-speed/3612212#3612212\"\u003edescribed here by\u003c/a\u003e Odersky.\u003c/li\u003e\n\u003cli\u003eGo is a procedural and imperative compiled language, and its syntax is similar to that of the C family of languages. Meanwhile, Scala is a hybrid language that combines object-oriented and functional approaches.\u003c/li\u003e\n\u003cli\u003eUnlike Go, Scala is very concise and requires less boilerplate code.\u003c/li\u003e\n\u003cli\u003eEach language has a different approach to tooling. Common tasks — like compiling code, running tests, and building an application — are built into Go. Scala, on the other hand, has a separate tool to do these things, \u003ca href=\"https://www.scala-sbt.org/\"\u003esbt\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo understand why applications should use Scala, it was especially helpful to watch videos and read blogs. They demonstrated both why Scala supports both functional and object-oriented programming, and its uses in different applications. There’s a suggested video on Coursera called \u003ca href=\"https://www.youtube.com/watch?v=3jg1AheF4n0\"\u003eWorking Hard to Keep It Simple\u003c/a\u003e (also from Martin Odersky), and it was a great introduction to understanding Scala in a nutshell. I also recommend the blog post, \u003ca href=\"https://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html\"\u003eStrategic Scala Style: Principle of Least Power\u003c/a\u003e, which aims to provide style guidelines at the “strategic” level. Scala provides various ways to solve a problem, and that post outlines how to choose one from the range of possible solutions.\u003c/p\u003e\n\u003ch2\u003eScala for the Impatient\u003c/h2\u003e\n\u003cp\u003eI started reading \u003cem\u003eScala for the Impatient\u003c/em\u003e, which was ideal for a Scala beginner like myself. It doesn’t just introduce concepts; it also compares them to other languages like Java and C++, which was one of the things I really liked, because it helped me better understand and made me curious about how things are done in Scala. It also helped me visualize the comparison and provided a sense of familiarity when learning a new language. It has simple examples for learning Scala and an extensive list of exercises at the end of each chapter. The book began with the basics — like types and arrays — and it progressed to concepts like inheritance, objects, operator overloading, tuples, and lists.\u003c/p\u003e\n\u003cp\u003eOne fun fact I learned is that usually, other languages (such as C, Java, or Golang) use \u003ccode\u003e[]\u003c/code\u003e to access an element. Scala, however, uses \u003ccode\u003e()\u003c/code\u003e to access an element. For example, to create an array and to access an element, respectively, in Golang, you’d do the following:\u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003evar z [Size]String\nvar i=z[0]\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMeanwhile, to create an array and to access an element, respectively, in Scala, you’d do this:\u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003eval z = new Array[String] (Size)\nval i= z(0)\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see, both the above statements create an array and access an element; however, Scala uses parentheses to access an element, while other languages — such as Go, C, C++, and Java — use square brackets to access an element. Apart from this being unusual in other languages, using parentheses means that collections are considered functions, and this can be useful to include functionalities like \u003ccode\u003emap\u003c/code\u003e and\u003ccode\u003efilter\u003c/code\u003e, which expect their arguments to behave syntactically as functions, and not just semantically. To understand more of the history of using square brackets and the importance of switching to parentheses, please refer to the \u003ca href=\"https://drmarkclewis.medium.com/syntax-for-indexing-why-is-an-antiquated-standard-798aa81f01bb\"\u003eSyntax for Indexing blog post\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eSwitching Patterns\u003c/h2\u003e\n\u003cp\u003eAll that said, most of the exercises weren’t easy, in the sense that I needed to focus on the problem to solve, and not just the language to express the solution. This is something I felt could’ve been different in the course. Giving problems like Huffman coding, \u003ccode\u003eAnagrams\u003c/code\u003e, \u003ccode\u003eLinkedList\u003c/code\u003e, and sorting to Scala beginners is like asking a person who just started learning how to skateboard to do it for 30 kilometers: At this point, the person isn’t really great at skateboarding, much less for that distance.\u003c/p\u003e\n\u003cp\u003eSince it takes time to learn and solve the problems, I learned not to rush or feel like I had to finish the course quickly. And to keep things interesting and to reinforce my learning, I regularly changed how I learned by switching between watching videos and reading.\u003c/p\u003e\n\u003cp\u003eI had started reading \u003cem\u003eScala for the Impatient\u003c/em\u003e while still taking the Coursera course, as I found the exercises from Coursera were difficult, and I hoped the book would provide more context. Once I finished reading the basic concepts of Scala and doing exercises from the book, I wanted to try a different learning pattern, so I resumed the Coursera course. This time, I felt like it was easier to listen to and digest the video lectures, as I had just learned these same concepts from the book and the videos served to reinforce those learnings. This is because the simple exercises that I tried from the book provided me with more practical and hands-on exposure to functions and libraries in Scala, which in turn helped me complete Coursera exercises that I wasn’t able to finish before.\u003c/p\u003e\n\u003ch2\u003eDiving In and Seeking Help\u003c/h2\u003e\n\u003cp\u003eEven though exercises and courses helped me code in Scala, the one thing as a beginner that really helped accelerate my learning was to actually work on the projects. I started working on a pull request approximately two weeks after I started learning Scala to update a Scala version in a SoundCloud repository. It used a library called Scalaz, but it started failing after the update. I could understand the compilation error, but I had no idea how to fix it. As a note, this repository was written years ago, and most of the methods or concepts had been deprecated or replaced in the new version of Scala. These things can be learned only by working on them.\u003c/p\u003e\n\u003cp\u003eWhen I felt like it was really difficult for me to understand and to fix these errors, I asked questions and sought help from the #scala channel on the SoundCloud Slack, and I also did pair programming with colleagues. In doing so, I found that one of the more effective ways to learn a language, beyond just diving in and doing it, is to actually be part of the community and have discussions. It made me realize that it’s OK to make mistakes and ask questions, as this \u003ca href=\"https://developers.soundcloud.com/blog/how-we-share-knowledge-as-a-web-collective\"\u003eknowledge sharing\u003c/a\u003e helps us learn from each other.\u003c/p\u003e\n\u003ch2\u003eTaking Advantage of L\u0026amp;D\u003c/h2\u003e\n\u003cp\u003eSoundCloud has \u003ca href=\"https://developers.soundcloud.com/blog/a-happy-new-employee\"\u003egreat employee policies\u003c/a\u003e for learning and development (L\u0026amp;D). It provides self-allocated time (SAT) for employees, a budget for learning that allows us to buy books and take courses, and extensive documentation for resources that help us learn and grow as developers. Additionally, SoundCloud has great internal documentation for Scala that covers the best practices, test styles, patterns, and libraries used here to provide guidelines for developers to write idiomatic “SoundCloudy” Scala. This provides sufficient resources for beginners.\u003c/p\u003e\n\u003ch2\u003eSetting Objectives\u003c/h2\u003e\n\u003cp\u003eLearning is a process, and especially considering that Scala is both an object-oriented and functional language — meaning it has many ways of expressing things — it might take a long time for people to master this language. As such, it’s helpful to set objectives to track learning and stay on course, which is where \u003ca href=\"https://www.whatmatters.com/faqs/okr-meaning-definition-example\"\u003eObjectives and Key Results\u003c/a\u003e (OKRs) come into play. This is a goal-setting methodology used to set goals with measurable results.\u003c/p\u003e\n\u003cp\u003eIn my opinion, learning is a neverending process, but being able to track things on an individual and company level is crucial to know that the learning is indeed happening. OKRs helped with this. Together with my manager, I came up with my own OKRs using a performance management toolkit at SoundCloud called Small Improvements. These OKRs were to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFinish the Scala course from Coursera\u003c/li\u003e\n\u003cli\u003eCreate a small personal project using Scala\u003c/li\u003e\n\u003cli\u003eGet my hands dirty by implementing as many pull requests as possible\u003c/li\u003e\n\u003cli\u003ePerform code reviews on my colleagues’ pull requests\u003c/li\u003e\n\u003cli\u003eRecord this process in a blog post to help others who are new to Scala\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eKey Results\u003c/h2\u003e\n\u003cp\u003eAfter setting and working toward the objectives outlined above, here are my key results:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI am certified in the Coursera \u003cem\u003eFunctional Programming in Scala\u003c/em\u003e course.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI wrote a web service to create/retrieve a playlist that uses the following libraries:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://http4s.org/\"\u003eHttp4s\u003c/a\u003e — for the HTTP layer, this library uses \u003ca href=\"https://github.com/typelevel/cats-effect\"\u003ecats-effect\u003c/a\u003e to manage I/O\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flywaydb.org/\"\u003eFlyway\u003c/a\u003e for database migrations\u003c/li\u003e\n\u003cli\u003ePostgreSQL for the database server\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://getquill.io/#\"\u003equill\u003c/a\u003e for expressing SQL as a Scala class\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/circe/circe\"\u003ecirce\u003c/a\u003e for JSON encoding and decoding\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDoing this helped me start a project from scratch, incorporate concepts I had learned, and explore various libraries in Scala. You can see the end result, \u003ca href=\"https://github.com/bhuvana-chinnadurai/playlists\"\u003eplaylists\u003c/a\u003e, on GitHub.\u003c/p\u003e\n\u003cp\u003eAdditionally:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI implemented features by raising 64 pull requests and code reviewed 44 pull requests in Scala at SoundCloud in the past few months.\u003c/li\u003e\n\u003cli\u003eI finished writing this blog post.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eTakeaway\u003c/h2\u003e\n\u003cp\u003eIn addition to all I did and learned, I had a few additional takeaways from this process:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOne of Scala’s goals is to make programmers focus on high-level application logic, so it provides extensive built-in methods. This means I can do many manipulations of any type with less effort and time than in Go. One of the best examples of this is the \u003ccode\u003e.map\u003c/code\u003e method. With the help of this method, I don’t have to worry about writing code to iterate an array or list. Rather, I can spend my efforts on writing the logic of what manipulations need to be done on these elements.\u003c/li\u003e\n\u003cli\u003eAs a developer, I think one of the essential tasks of my job is to write effective test code that’s both readable and easy to write in order to cover simple and complex test cases. One of the simple and yet more efficient testing frameworks that I used in the project is \u003ca href=\"https://scalameta.org/munit/\"\u003eMUnit\u003c/a\u003e, in combination with the integration library \u003ca href=\"https://github.com/typelevel/munit-cats-effect\"\u003emunit-cats-effect\u003c/a\u003e. This made it easy to test the stream response for HTTP testing. Meanwhile, there are other simple and more important testing frameworks, like \u003ca href=\"https://www.baeldung.com/scala/scalatest\"\u003eScalaTest\u003c/a\u003e, with \u003ca href=\"https://blog.rockthejvm.com/testing-styles-scalatest/\"\u003edifferent testing styles\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eBecause I was a Golang developer for almost four years, I nearly forgot about object-oriented programming concepts like inheritance, encapsulation, and polymorphism. The whole process of learning Scala made me recall and refresh these concepts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eLearning is a continuous process, and the longer I’m here at SoundCloud, the more I’m learning. It’s a great opportunity to be able to grow my skills and learn a new language, and if you’re considering doing the same, I hope this post can help you kickstart your learning.\u003c/p\u003e\n\u003ch2\u003eAdditional References\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.scala-lang.org/getting-started/index.html\"\u003eScala documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://users.scala-lang.org/\"\u003eScala community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.scala-lang.org/overviews/scala-book/hello-world-1.html\"\u003eScala “Hello, world” example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=izW2xI6-69M\"\u003eScala Hello World tutorial using IntelliJ IDEA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.github.io/scala_school/\"\u003eScala School!\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.scala-lang.org/online-courses.html\"\u003eOnline Courses from the Scala Center\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://fruzenshtein.com/http4s-another-crud-example/\"\u003eAnother https4s CRUD tutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.innoq.com/en/blog/functional-service-in-scala/\"\u003eFunctional Service in Scala\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@albamus/testing-and-error-handling-in-http4s-2a05572e535d\"\u003eTesting and Error Handling in http4s\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
